ARM GAS  /tmp/cceY5bqg.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"stm32f1xx_hal_adc.c"
  12              	@ GNU C11 (15:6.3.1+svn253039-1build1) version 6.3.1 20170620 (arm-none-eabi)
  13              	@	compiled by GNU C version 7.2.0, GMP version 6.1.2, MPFR version 4.0.1-rc1, MPC version 1.1.0, is
  14              	@ warning: MPFR header version 4.0.1-rc1 differs from library version 4.0.1.
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I ./inc -I ./inc/Legacy -I ../cmsisstm32f1xx/inc
  17              	@ -I ../cmsiscore/inc -imultilib thumb/v7-m -D__USES_INITFINI__
  18              	@ -D STM32F103x6 -D RUN_FROM_FLASH=1 src/stm32f1xx_hal_adc.c
  19              	@ -mcpu=cortex-m3 -mthumb -auxbase-strip bin/stm32f1xx_hal_adc.o -g
  20              	@ -gdwarf-2 -Os -Wall -fomit-frame-pointer -fverbose-asm
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffunction-cse -fgcse
  32              	@ -fgcse-lm -fgnu-runtime -fgnu-unique -fguess-branch-probability
  33              	@ -fhoist-adjacent-loads -fident -fif-conversion -fif-conversion2
  34              	@ -findirect-inlining -finline -finline-atomics -finline-functions
  35              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  36              	@ -fipa-cp-alignment -fipa-icf -fipa-icf-functions -fipa-icf-variables
  37              	@ -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra
  38              	@ -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  39              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  40              	@ -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  41              	@ -fmath-errno -fmerge-constants -fmerge-debug-strings
  42              	@ -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  43              	@ -fpartial-inlining -fpeephole -fpeephole2 -fplt -fprefetch-loop-arrays
  44              	@ -freg-struct-return -freorder-blocks -freorder-functions
  45              	@ -frerun-cse-after-loop -fsched-critical-path-heuristic
  46              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  47              	@ -fsched-last-insn-heuristic -fsched-pressure -fsched-rank-heuristic
  48              	@ -fsched-spec -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  49              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  50              	@ -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types
  51              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstrict-aliasing
  52              	@ -fstrict-overflow -fstrict-volatile-bitfields -fsync-libcalls
  53              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  54              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  55              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  56              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  57              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
ARM GAS  /tmp/cceY5bqg.s 			page 2


  58              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  59              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  60              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  61              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  62              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  63              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  64              	@ -munaligned-access -mvectorize-with-neon-quad
  65              	
  66              		.text
  67              	.Ltext0:
  68              		.cfi_sections	.debug_frame
  69              		.align	1
  70              		.weak	HAL_ADC_MspInit
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu softvfp
  75              		.type	HAL_ADC_MspInit, %function
  76              	HAL_ADC_MspInit:
  77              	.LFB103:
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82 0000 7047     		bx	lr	@
  83              		.cfi_endproc
  84              	.LFE103:
  85              		.size	HAL_ADC_MspInit, .-HAL_ADC_MspInit
  86              		.align	1
  87              		.weak	HAL_ADC_MspDeInit
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  91              		.fpu softvfp
  92              		.type	HAL_ADC_MspDeInit, %function
  93              	HAL_ADC_MspDeInit:
  94              	.LFB101:
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              		@ link register save eliminated.
  99 0002 7047     		bx	lr	@
 100              		.cfi_endproc
 101              	.LFE101:
 102              		.size	HAL_ADC_MspDeInit, .-HAL_ADC_MspDeInit
 103              		.align	1
 104              		.global	HAL_ADC_PollForConversion
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu softvfp
 109              		.type	HAL_ADC_PollForConversion, %function
 110              	HAL_ADC_PollForConversion:
 111              	.LFB71:
 112              		.file 1 "src/stm32f1xx_hal_adc.c"
   1:src/stm32f1xx_hal_adc.c **** /**
   2:src/stm32f1xx_hal_adc.c ****   ******************************************************************************
ARM GAS  /tmp/cceY5bqg.s 			page 3


   3:src/stm32f1xx_hal_adc.c ****   * @file    stm32f1xx_hal_adc.c
   4:src/stm32f1xx_hal_adc.c ****   * @author  MCD Application Team
   5:src/stm32f1xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:src/stm32f1xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:src/stm32f1xx_hal_adc.c ****   *          peripheral:
   8:src/stm32f1xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:src/stm32f1xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  10:src/stm32f1xx_hal_adc.c ****   *           + Operation functions
  11:src/stm32f1xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  12:src/stm32f1xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  13:src/stm32f1xx_hal_adc.c ****   *           + Control functions
  14:src/stm32f1xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  15:src/stm32f1xx_hal_adc.c ****   *             ++ Channels configuration on injected group
  16:src/stm32f1xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  17:src/stm32f1xx_hal_adc.c ****   *           + State functions
  18:src/stm32f1xx_hal_adc.c ****   *             ++ ADC state machine management
  19:src/stm32f1xx_hal_adc.c ****   *             ++ Interrupts and flags management
  20:src/stm32f1xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  21:src/stm32f1xx_hal_adc.c ****   *          "stm32f1xx_hal_adc_ex.c".
  22:src/stm32f1xx_hal_adc.c ****   *
  23:src/stm32f1xx_hal_adc.c ****   @verbatim
  24:src/stm32f1xx_hal_adc.c ****   ==============================================================================
  25:src/stm32f1xx_hal_adc.c ****                      ##### ADC peripheral features #####
  26:src/stm32f1xx_hal_adc.c ****   ==============================================================================
  27:src/stm32f1xx_hal_adc.c ****   [..]
  28:src/stm32f1xx_hal_adc.c ****   (+) 12-bit resolution
  29:src/stm32f1xx_hal_adc.c **** 
  30:src/stm32f1xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion, end of injected
  31:src/stm32f1xx_hal_adc.c ****       conversion, and in case of analog watchdog or overrun events.
  32:src/stm32f1xx_hal_adc.c ****   
  33:src/stm32f1xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  34:src/stm32f1xx_hal_adc.c ****   
  35:src/stm32f1xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  36:src/stm32f1xx_hal_adc.c ****   
  37:src/stm32f1xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  38:src/stm32f1xx_hal_adc.c ****   
  39:src/stm32f1xx_hal_adc.c ****   (+) Programmable sampling time (channel wise)
  40:src/stm32f1xx_hal_adc.c ****   
  41:src/stm32f1xx_hal_adc.c ****   (+) ADC conversion of regular group and injected group.
  42:src/stm32f1xx_hal_adc.c **** 
  43:src/stm32f1xx_hal_adc.c ****   (+) External trigger (timer or EXTI) 
  44:src/stm32f1xx_hal_adc.c ****       for both regular and injected groups.
  45:src/stm32f1xx_hal_adc.c **** 
  46:src/stm32f1xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  47:src/stm32f1xx_hal_adc.c **** 
  48:src/stm32f1xx_hal_adc.c ****   (+) Multimode Dual mode (available on devices with 2 ADCs or more).
  49:src/stm32f1xx_hal_adc.c ****   
  50:src/stm32f1xx_hal_adc.c ****   (+) Configurable DMA data storage in Multimode Dual mode (available on devices
  51:src/stm32f1xx_hal_adc.c ****       with 2 DCs or more).
  52:src/stm32f1xx_hal_adc.c ****   
  53:src/stm32f1xx_hal_adc.c ****   (+) Configurable delay between conversions in Dual interleaved mode (available 
  54:src/stm32f1xx_hal_adc.c ****       on devices with 2 DCs or more).
  55:src/stm32f1xx_hal_adc.c ****   
  56:src/stm32f1xx_hal_adc.c ****   (+) ADC calibration
  57:src/stm32f1xx_hal_adc.c **** 
  58:src/stm32f1xx_hal_adc.c ****   (+) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  59:src/stm32f1xx_hal_adc.c ****       slower speed.
ARM GAS  /tmp/cceY5bqg.s 			page 4


  60:src/stm32f1xx_hal_adc.c ****   
  61:src/stm32f1xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  62:src/stm32f1xx_hal_adc.c ****       Vdda or to an external voltage reference).
  63:src/stm32f1xx_hal_adc.c **** 
  64:src/stm32f1xx_hal_adc.c **** 
  65:src/stm32f1xx_hal_adc.c ****                      ##### How to use this driver #####
  66:src/stm32f1xx_hal_adc.c ****   ==============================================================================
  67:src/stm32f1xx_hal_adc.c ****     [..]
  68:src/stm32f1xx_hal_adc.c **** 
  69:src/stm32f1xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  70:src/stm32f1xx_hal_adc.c ****      ============================================================
  71:src/stm32f1xx_hal_adc.c ****      [..]
  72:src/stm32f1xx_hal_adc.c **** 
  73:src/stm32f1xx_hal_adc.c ****     (#) Enable the ADC interface
  74:src/stm32f1xx_hal_adc.c ****       (++) As prerequisite, ADC clock must be configured at RCC top level.
  75:src/stm32f1xx_hal_adc.c ****            Caution: On STM32F1, ADC clock frequency max is 14MHz (refer
  76:src/stm32f1xx_hal_adc.c ****                     to device datasheet).
  77:src/stm32f1xx_hal_adc.c ****                     Therefore, ADC clock prescaler must be configured in 
  78:src/stm32f1xx_hal_adc.c ****                     function of ADC clock source frequency to remain below
  79:src/stm32f1xx_hal_adc.c ****                     this maximum frequency.
  80:src/stm32f1xx_hal_adc.c ****         (++) One clock setting is mandatory:
  81:src/stm32f1xx_hal_adc.c ****              ADC clock (core clock, also possibly conversion clock).
  82:src/stm32f1xx_hal_adc.c ****              (+++) Example:
  83:src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  84:src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
  85:src/stm32f1xx_hal_adc.c ****                (+++) RCC_PeriphCLKInitTypeDef  PeriphClkInit;
  86:src/stm32f1xx_hal_adc.c ****                (+++) __ADC1_CLK_ENABLE();
  87:src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  88:src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  89:src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
  90:src/stm32f1xx_hal_adc.c **** 
  91:src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
  92:src/stm32f1xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  93:src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
  94:src/stm32f1xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
  95:src/stm32f1xx_hal_adc.c ****               using function HAL_GPIO_Init()
  96:src/stm32f1xx_hal_adc.c **** 
  97:src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
  98:src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for ADC
  99:src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 100:src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 101:src/stm32f1xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 102:src/stm32f1xx_hal_adc.c ****               ADCx_IRQHandler().
 103:src/stm32f1xx_hal_adc.c **** 
 104:src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 105:src/stm32f1xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 106:src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 107:src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 108:src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 109:src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 110:src/stm32f1xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 111:src/stm32f1xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 112:src/stm32f1xx_hal_adc.c **** 
 113:src/stm32f1xx_hal_adc.c ****      *** Configuration of ADC, groups regular/injected, channels parameters ***
 114:src/stm32f1xx_hal_adc.c ****      ==========================================================================
 115:src/stm32f1xx_hal_adc.c ****      [..]
 116:src/stm32f1xx_hal_adc.c **** 
ARM GAS  /tmp/cceY5bqg.s 			page 5


 117:src/stm32f1xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 118:src/stm32f1xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 119:src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_Init().
 120:src/stm32f1xx_hal_adc.c **** 
 121:src/stm32f1xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 122:src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 123:src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 124:src/stm32f1xx_hal_adc.c **** 
 125:src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the injected group parameters (conversion trigger, 
 126:src/stm32f1xx_hal_adc.c ****         sequencer, ..., of injected group)
 127:src/stm32f1xx_hal_adc.c ****         and the channels for injected group parameters (channel number, 
 128:src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into injected group)
 129:src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_InjectedConfigChannel().
 130:src/stm32f1xx_hal_adc.c **** 
 131:src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 132:src/stm32f1xx_hal_adc.c ****         monitored, thresholds, ...)
 133:src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 134:src/stm32f1xx_hal_adc.c **** 
 135:src/stm32f1xx_hal_adc.c ****     (#) Optionally, for devices with several ADC instances: configure the 
 136:src/stm32f1xx_hal_adc.c ****         multimode parameters
 137:src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_MultiModeConfigChannel().
 138:src/stm32f1xx_hal_adc.c **** 
 139:src/stm32f1xx_hal_adc.c ****      *** Execution of ADC conversions ***
 140:src/stm32f1xx_hal_adc.c ****      ====================================
 141:src/stm32f1xx_hal_adc.c ****      [..]
 142:src/stm32f1xx_hal_adc.c **** 
 143:src/stm32f1xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 144:src/stm32f1xx_hal_adc.c ****         conversion accuracy
 145:src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 146:src/stm32f1xx_hal_adc.c **** 
 147:src/stm32f1xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 148:src/stm32f1xx_hal_adc.c ****         transfer by DMA.
 149:src/stm32f1xx_hal_adc.c **** 
 150:src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by polling:
 151:src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 152:src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 153:src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 154:src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 155:src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedPollForConversion() )
 156:src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 157:src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 158:src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 159:src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 160:src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 161:src/stm32f1xx_hal_adc.c **** 
 162:src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 163:src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 164:src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 165:src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 166:src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 167:src/stm32f1xx_hal_adc.c ****                 (this function must be implemented in user program)
 168:src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedConvCpltCallback() )
 169:src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 170:src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 171:src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 172:src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 173:src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
ARM GAS  /tmp/cceY5bqg.s 			page 6


 174:src/stm32f1xx_hal_adc.c **** 
 175:src/stm32f1xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 176:src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 177:src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 178:src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 179:src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 180:src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 181:src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 182:src/stm32f1xx_hal_adc.c ****                 destination variable address.
 183:src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 184:src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 185:src/stm32f1xx_hal_adc.c **** 
 186:src/stm32f1xx_hal_adc.c ****         (++) For devices with several ADCs: ADC multimode conversion 
 187:src/stm32f1xx_hal_adc.c ****              with transfer by DMA:
 188:src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (slave) and start conversions
 189:src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 190:src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (master) and start conversions
 191:src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStart_DMA()
 192:src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 193:src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 194:src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 195:src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 196:src/stm32f1xx_hal_adc.c ****                 destination variable address.
 197:src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (master)
 198:src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStop_DMA()
 199:src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (slave)
 200:src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 201:src/stm32f1xx_hal_adc.c **** 
 202:src/stm32f1xx_hal_adc.c ****      [..]
 203:src/stm32f1xx_hal_adc.c **** 
 204:src/stm32f1xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 205:src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 206:src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 207:src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 208:src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 209:src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADCEx_InjectedConvCpltCallback()
 210:src/stm32f1xx_hal_adc.c **** 
 211:src/stm32f1xx_hal_adc.c ****      *** Deinitialization of ADC ***
 212:src/stm32f1xx_hal_adc.c ****      ============================================================
 213:src/stm32f1xx_hal_adc.c ****      [..]
 214:src/stm32f1xx_hal_adc.c **** 
 215:src/stm32f1xx_hal_adc.c ****     (#) Disable the ADC interface
 216:src/stm32f1xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 217:src/stm32f1xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 218:src/stm32f1xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 219:src/stm32f1xx_hal_adc.c ****         (++) ADC clock disable
 220:src/stm32f1xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 221:src/stm32f1xx_hal_adc.c ****              (+++) Example:
 222:src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 223:src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
 224:src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC
 225:src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPLLCLK2_OFF
 226:src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit)
 227:src/stm32f1xx_hal_adc.c **** 
 228:src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
 229:src/stm32f1xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 230:src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
ARM GAS  /tmp/cceY5bqg.s 			page 7


 231:src/stm32f1xx_hal_adc.c **** 
 232:src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 233:src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 234:src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 235:src/stm32f1xx_hal_adc.c **** 
 236:src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 237:src/stm32f1xx_hal_adc.c ****          (++) Deinitialize the DMA
 238:src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 239:src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 240:src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 241:src/stm32f1xx_hal_adc.c **** 
 242:src/stm32f1xx_hal_adc.c ****     [..]
 243:src/stm32f1xx_hal_adc.c ****     
 244:src/stm32f1xx_hal_adc.c ****     *** Callback registration ***
 245:src/stm32f1xx_hal_adc.c ****     =============================================
 246:src/stm32f1xx_hal_adc.c ****     [..]
 247:src/stm32f1xx_hal_adc.c **** 
 248:src/stm32f1xx_hal_adc.c ****      The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
 249:src/stm32f1xx_hal_adc.c ****      allows the user to configure dynamically the driver callbacks.
 250:src/stm32f1xx_hal_adc.c ****      Use Functions @ref HAL_ADC_RegisterCallback()
 251:src/stm32f1xx_hal_adc.c ****      to register an interrupt callback.
 252:src/stm32f1xx_hal_adc.c ****     [..]
 253:src/stm32f1xx_hal_adc.c **** 
 254:src/stm32f1xx_hal_adc.c ****      Function @ref HAL_ADC_RegisterCallback() allows to register following callbacks:
 255:src/stm32f1xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 256:src/stm32f1xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 257:src/stm32f1xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 258:src/stm32f1xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 259:src/stm32f1xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 260:src/stm32f1xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 261:src/stm32f1xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 262:src/stm32f1xx_hal_adc.c ****      This function takes as parameters the HAL peripheral handle, the Callback ID
 263:src/stm32f1xx_hal_adc.c ****      and a pointer to the user callback function.
 264:src/stm32f1xx_hal_adc.c ****     [..]
 265:src/stm32f1xx_hal_adc.c **** 
 266:src/stm32f1xx_hal_adc.c ****      Use function @ref HAL_ADC_UnRegisterCallback to reset a callback to the default
 267:src/stm32f1xx_hal_adc.c ****      weak function.
 268:src/stm32f1xx_hal_adc.c ****     [..]
 269:src/stm32f1xx_hal_adc.c **** 
 270:src/stm32f1xx_hal_adc.c ****      @ref HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
 271:src/stm32f1xx_hal_adc.c ****      and the Callback ID.
 272:src/stm32f1xx_hal_adc.c ****      This function allows to reset following callbacks:
 273:src/stm32f1xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 274:src/stm32f1xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 275:src/stm32f1xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 276:src/stm32f1xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 277:src/stm32f1xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 278:src/stm32f1xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 279:src/stm32f1xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 280:src/stm32f1xx_hal_adc.c ****      [..]
 281:src/stm32f1xx_hal_adc.c **** 
 282:src/stm32f1xx_hal_adc.c ****      By default, after the @ref HAL_ADC_Init() and when the state is @ref HAL_ADC_STATE_RESET
 283:src/stm32f1xx_hal_adc.c ****      all callbacks are set to the corresponding weak functions:
 284:src/stm32f1xx_hal_adc.c ****      examples @ref HAL_ADC_ConvCpltCallback(), @ref HAL_ADC_ErrorCallback().
 285:src/stm32f1xx_hal_adc.c ****      Exception done for MspInit and MspDeInit functions that are
 286:src/stm32f1xx_hal_adc.c ****      reset to the legacy weak functions in the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit() only when
 287:src/stm32f1xx_hal_adc.c ****      these callbacks are null (not registered beforehand).
ARM GAS  /tmp/cceY5bqg.s 			page 8


 288:src/stm32f1xx_hal_adc.c ****     [..]
 289:src/stm32f1xx_hal_adc.c **** 
 290:src/stm32f1xx_hal_adc.c ****      If MspInit or MspDeInit are not null, the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit()
 291:src/stm32f1xx_hal_adc.c ****      keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
 292:src/stm32f1xx_hal_adc.c ****      [..]
 293:src/stm32f1xx_hal_adc.c **** 
 294:src/stm32f1xx_hal_adc.c ****      Callbacks can be registered/unregistered in @ref HAL_ADC_STATE_READY state only.
 295:src/stm32f1xx_hal_adc.c ****      Exception done MspInit/MspDeInit functions that can be registered/unregistered
 296:src/stm32f1xx_hal_adc.c ****      in @ref HAL_ADC_STATE_READY or @ref HAL_ADC_STATE_RESET state,
 297:src/stm32f1xx_hal_adc.c ****      thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 298:src/stm32f1xx_hal_adc.c ****     [..]
 299:src/stm32f1xx_hal_adc.c **** 
 300:src/stm32f1xx_hal_adc.c ****      Then, the user first registers the MspInit/MspDeInit user callbacks
 301:src/stm32f1xx_hal_adc.c ****      using @ref HAL_ADC_RegisterCallback() before calling @ref HAL_ADC_DeInit()
 302:src/stm32f1xx_hal_adc.c ****      or @ref HAL_ADC_Init() function.
 303:src/stm32f1xx_hal_adc.c ****      [..]
 304:src/stm32f1xx_hal_adc.c **** 
 305:src/stm32f1xx_hal_adc.c ****      When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
 306:src/stm32f1xx_hal_adc.c ****      not defined, the callback registration feature is not available and all callbacks
 307:src/stm32f1xx_hal_adc.c ****      are set to the corresponding weak functions.
 308:src/stm32f1xx_hal_adc.c ****   
 309:src/stm32f1xx_hal_adc.c ****   @endverbatim
 310:src/stm32f1xx_hal_adc.c ****   ******************************************************************************
 311:src/stm32f1xx_hal_adc.c ****   * @attention
 312:src/stm32f1xx_hal_adc.c ****   *
 313:src/stm32f1xx_hal_adc.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 314:src/stm32f1xx_hal_adc.c ****   * All rights reserved.</center></h2>
 315:src/stm32f1xx_hal_adc.c ****   *
 316:src/stm32f1xx_hal_adc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 317:src/stm32f1xx_hal_adc.c ****   * the "License"; You may not use this file except in compliance with the
 318:src/stm32f1xx_hal_adc.c ****   * License. You may obtain a copy of the License at:
 319:src/stm32f1xx_hal_adc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 320:src/stm32f1xx_hal_adc.c ****   *
 321:src/stm32f1xx_hal_adc.c ****   ******************************************************************************
 322:src/stm32f1xx_hal_adc.c ****   */
 323:src/stm32f1xx_hal_adc.c **** 
 324:src/stm32f1xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 325:src/stm32f1xx_hal_adc.c **** #include "stm32f1xx_hal.h"
 326:src/stm32f1xx_hal_adc.c **** 
 327:src/stm32f1xx_hal_adc.c **** /** @addtogroup STM32F1xx_HAL_Driver
 328:src/stm32f1xx_hal_adc.c ****   * @{
 329:src/stm32f1xx_hal_adc.c ****   */
 330:src/stm32f1xx_hal_adc.c **** 
 331:src/stm32f1xx_hal_adc.c **** /** @defgroup ADC ADC
 332:src/stm32f1xx_hal_adc.c ****   * @brief ADC HAL module driver
 333:src/stm32f1xx_hal_adc.c ****   * @{
 334:src/stm32f1xx_hal_adc.c ****   */
 335:src/stm32f1xx_hal_adc.c **** 
 336:src/stm32f1xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 337:src/stm32f1xx_hal_adc.c **** 
 338:src/stm32f1xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 339:src/stm32f1xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 340:src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 341:src/stm32f1xx_hal_adc.c ****   * @{
 342:src/stm32f1xx_hal_adc.c ****   */
 343:src/stm32f1xx_hal_adc.c **** 
 344:src/stm32f1xx_hal_adc.c ****   /* Timeout values for ADC enable and disable settling time.                 */
ARM GAS  /tmp/cceY5bqg.s 			page 9


 345:src/stm32f1xx_hal_adc.c ****   /* Values defined to be higher than worst cases: low clocks freq,           */
 346:src/stm32f1xx_hal_adc.c ****   /* maximum prescaler.                                                       */
 347:src/stm32f1xx_hal_adc.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 348:src/stm32f1xx_hal_adc.c ****   /* prescaler 4, sampling time 12.5 ADC clock cycles, resolution 12 bits.    */
 349:src/stm32f1xx_hal_adc.c ****   /* Unit: ms                                                                 */
 350:src/stm32f1xx_hal_adc.c ****   #define ADC_ENABLE_TIMEOUT              2U
 351:src/stm32f1xx_hal_adc.c ****   #define ADC_DISABLE_TIMEOUT             2U
 352:src/stm32f1xx_hal_adc.c **** 
 353:src/stm32f1xx_hal_adc.c ****   /* Delay for ADC stabilization time.                                        */
 354:src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 355:src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 356:src/stm32f1xx_hal_adc.c ****   #define ADC_STAB_DELAY_US               1U
 357:src/stm32f1xx_hal_adc.c **** 
 358:src/stm32f1xx_hal_adc.c ****   /* Delay for temperature sensor stabilization time.                         */
 359:src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
 360:src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 361:src/stm32f1xx_hal_adc.c ****   #define ADC_TEMPSENSOR_DELAY_US         10U
 362:src/stm32f1xx_hal_adc.c **** 
 363:src/stm32f1xx_hal_adc.c **** /**
 364:src/stm32f1xx_hal_adc.c ****   * @}
 365:src/stm32f1xx_hal_adc.c ****   */
 366:src/stm32f1xx_hal_adc.c **** 
 367:src/stm32f1xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 368:src/stm32f1xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 369:src/stm32f1xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 370:src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 371:src/stm32f1xx_hal_adc.c ****   * @{
 372:src/stm32f1xx_hal_adc.c ****   */
 373:src/stm32f1xx_hal_adc.c **** /**
 374:src/stm32f1xx_hal_adc.c ****   * @}
 375:src/stm32f1xx_hal_adc.c ****   */
 376:src/stm32f1xx_hal_adc.c **** 
 377:src/stm32f1xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 378:src/stm32f1xx_hal_adc.c **** 
 379:src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 380:src/stm32f1xx_hal_adc.c ****   * @{
 381:src/stm32f1xx_hal_adc.c ****   */
 382:src/stm32f1xx_hal_adc.c **** 
 383:src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization/de-initialization functions 
 384:src/stm32f1xx_hal_adc.c ****   * @brief    Initialization and Configuration functions
 385:src/stm32f1xx_hal_adc.c ****   *
 386:src/stm32f1xx_hal_adc.c **** @verbatim    
 387:src/stm32f1xx_hal_adc.c ****  ===============================================================================
 388:src/stm32f1xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 389:src/stm32f1xx_hal_adc.c ****  ===============================================================================
 390:src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 391:src/stm32f1xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 392:src/stm32f1xx_hal_adc.c ****       (+) De-initialize the ADC.
 393:src/stm32f1xx_hal_adc.c **** 
 394:src/stm32f1xx_hal_adc.c **** @endverbatim
 395:src/stm32f1xx_hal_adc.c ****   * @{
 396:src/stm32f1xx_hal_adc.c ****   */
 397:src/stm32f1xx_hal_adc.c **** 
 398:src/stm32f1xx_hal_adc.c **** /**
 399:src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 400:src/stm32f1xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 401:src/stm32f1xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
ARM GAS  /tmp/cceY5bqg.s 			page 10


 402:src/stm32f1xx_hal_adc.c ****   *         (clock source APB2).
 403:src/stm32f1xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented 
 404:src/stm32f1xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 405:src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 406:src/stm32f1xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 407:src/stm32f1xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 408:src/stm32f1xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 409:src/stm32f1xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 410:src/stm32f1xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 411:src/stm32f1xx_hal_adc.c ****   *         before HAL_ADC_Init().
 412:src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 413:src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 414:src/stm32f1xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 415:src/stm32f1xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 416:src/stm32f1xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 417:src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 418:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 419:src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 420:src/stm32f1xx_hal_adc.c ****   */
 421:src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 422:src/stm32f1xx_hal_adc.c **** {
 423:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 424:src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr1 = 0U;
 425:src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr2 = 0U;
 426:src/stm32f1xx_hal_adc.c ****   uint32_t tmp_sqr1 = 0U;
 427:src/stm32f1xx_hal_adc.c ****   
 428:src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 429:src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
 430:src/stm32f1xx_hal_adc.c ****   {
 431:src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
 432:src/stm32f1xx_hal_adc.c ****   }
 433:src/stm32f1xx_hal_adc.c ****   
 434:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 435:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 436:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 437:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 438:src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 439:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 440:src/stm32f1xx_hal_adc.c ****   
 441:src/stm32f1xx_hal_adc.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 442:src/stm32f1xx_hal_adc.c ****   {
 443:src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 444:src/stm32f1xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 445:src/stm32f1xx_hal_adc.c ****     if(hadc->Init.DiscontinuousConvMode != DISABLE)
 446:src/stm32f1xx_hal_adc.c ****     {
 447:src/stm32f1xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 448:src/stm32f1xx_hal_adc.c ****     }
 449:src/stm32f1xx_hal_adc.c ****   }
 450:src/stm32f1xx_hal_adc.c ****   
 451:src/stm32f1xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 452:src/stm32f1xx_hal_adc.c ****   /* at RCC top level.                                                        */
 453:src/stm32f1xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling          */
 454:src/stm32f1xx_hal_adc.c ****   /* procedure.                                                               */
 455:src/stm32f1xx_hal_adc.c **** 
 456:src/stm32f1xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 457:src/stm32f1xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 458:src/stm32f1xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
ARM GAS  /tmp/cceY5bqg.s 			page 11


 459:src/stm32f1xx_hal_adc.c ****   {
 460:src/stm32f1xx_hal_adc.c ****     /* Initialize ADC error code */
 461:src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 462:src/stm32f1xx_hal_adc.c ****     
 463:src/stm32f1xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 464:src/stm32f1xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 465:src/stm32f1xx_hal_adc.c ****     
 466:src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 467:src/stm32f1xx_hal_adc.c ****     /* Init the ADC Callback settings */
 468:src/stm32f1xx_hal_adc.c ****     hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak 
 469:src/stm32f1xx_hal_adc.c ****     hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak 
 470:src/stm32f1xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak 
 471:src/stm32f1xx_hal_adc.c ****     hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak 
 472:src/stm32f1xx_hal_adc.c ****     hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak 
 473:src/stm32f1xx_hal_adc.c ****     
 474:src/stm32f1xx_hal_adc.c ****     if (hadc->MspInitCallback == NULL)
 475:src/stm32f1xx_hal_adc.c ****     {
 476:src/stm32f1xx_hal_adc.c ****       hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 477:src/stm32f1xx_hal_adc.c ****     }
 478:src/stm32f1xx_hal_adc.c ****     
 479:src/stm32f1xx_hal_adc.c ****     /* Init the low level hardware */
 480:src/stm32f1xx_hal_adc.c ****     hadc->MspInitCallback(hadc);
 481:src/stm32f1xx_hal_adc.c **** #else
 482:src/stm32f1xx_hal_adc.c ****     /* Init the low level hardware */
 483:src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 484:src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 485:src/stm32f1xx_hal_adc.c ****   }
 486:src/stm32f1xx_hal_adc.c ****   
 487:src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 488:src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 489:src/stm32f1xx_hal_adc.c ****   /* Note: In case of ADC already enabled, precaution to not launch an        */
 490:src/stm32f1xx_hal_adc.c ****   /*       unwanted conversion while modifying register CR2 by writing 1 to   */
 491:src/stm32f1xx_hal_adc.c ****   /*       bit ADON.                                                          */
 492:src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 493:src/stm32f1xx_hal_adc.c ****   
 494:src/stm32f1xx_hal_adc.c ****   
 495:src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 496:src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 497:src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 498:src/stm32f1xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                  )
 499:src/stm32f1xx_hal_adc.c ****   {
 500:src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 501:src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 502:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 503:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 504:src/stm32f1xx_hal_adc.c ****     
 505:src/stm32f1xx_hal_adc.c ****     /* Set ADC parameters */
 506:src/stm32f1xx_hal_adc.c ****     
 507:src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 508:src/stm32f1xx_hal_adc.c ****     /*  - data alignment                                                      */
 509:src/stm32f1xx_hal_adc.c ****     /*  - external trigger to start conversion                                */
 510:src/stm32f1xx_hal_adc.c ****     /*  - external trigger polarity (always set to 1, because needed for all  */
 511:src/stm32f1xx_hal_adc.c ****     /*    triggers: external trigger of SW start)                             */
 512:src/stm32f1xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 513:src/stm32f1xx_hal_adc.c ****     /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
 514:src/stm32f1xx_hal_adc.c ****     /*       HAL_ADC_Start_xxx functions because if set in this function,     */
 515:src/stm32f1xx_hal_adc.c ****     /*       a conversion on injected group would start a conversion also on  */
ARM GAS  /tmp/cceY5bqg.s 			page 12


 516:src/stm32f1xx_hal_adc.c ****     /*       regular group after ADC enabling.                                */
 517:src/stm32f1xx_hal_adc.c ****     tmp_cr2 |= (hadc->Init.DataAlign                                          |
 518:src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 519:src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 520:src/stm32f1xx_hal_adc.c **** 
 521:src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 522:src/stm32f1xx_hal_adc.c ****     /*  - scan mode                                                           */
 523:src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode disable/enable                                   */
 524:src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode number of conversions                            */
 525:src/stm32f1xx_hal_adc.c ****     tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 526:src/stm32f1xx_hal_adc.c ****     
 527:src/stm32f1xx_hal_adc.c ****     /* Enable discontinuous mode only if continuous mode is disabled */
 528:src/stm32f1xx_hal_adc.c ****     /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
 529:src/stm32f1xx_hal_adc.c ****     /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
 530:src/stm32f1xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 531:src/stm32f1xx_hal_adc.c ****     {
 532:src/stm32f1xx_hal_adc.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 533:src/stm32f1xx_hal_adc.c ****       {
 534:src/stm32f1xx_hal_adc.c ****         /* Enable the selected ADC regular discontinuous mode */
 535:src/stm32f1xx_hal_adc.c ****         /* Set the number of channels to be converted in discontinuous mode */
 536:src/stm32f1xx_hal_adc.c ****         SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 537:src/stm32f1xx_hal_adc.c ****                          ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 538:src/stm32f1xx_hal_adc.c ****       }
 539:src/stm32f1xx_hal_adc.c ****       else
 540:src/stm32f1xx_hal_adc.c ****       {
 541:src/stm32f1xx_hal_adc.c ****         /* ADC regular group settings continuous and sequencer discontinuous*/
 542:src/stm32f1xx_hal_adc.c ****         /* cannot be enabled simultaneously.                                */
 543:src/stm32f1xx_hal_adc.c ****         
 544:src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
 545:src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 546:src/stm32f1xx_hal_adc.c ****         
 547:src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 548:src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 549:src/stm32f1xx_hal_adc.c ****       }
 550:src/stm32f1xx_hal_adc.c ****     }
 551:src/stm32f1xx_hal_adc.c ****     
 552:src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR1 with previous settings */
 553:src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR1,
 554:src/stm32f1xx_hal_adc.c ****                  ADC_CR1_SCAN    |
 555:src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCEN  |
 556:src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCNUM    ,
 557:src/stm32f1xx_hal_adc.c ****                  tmp_cr1             );
 558:src/stm32f1xx_hal_adc.c ****     
 559:src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR2 with previous settings */
 560:src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR2,
 561:src/stm32f1xx_hal_adc.c ****                  ADC_CR2_ALIGN   |
 562:src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTSEL  |
 563:src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTTRIG |
 564:src/stm32f1xx_hal_adc.c ****                  ADC_CR2_CONT       ,
 565:src/stm32f1xx_hal_adc.c ****                  tmp_cr2             );
 566:src/stm32f1xx_hal_adc.c **** 
 567:src/stm32f1xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 568:src/stm32f1xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 569:src/stm32f1xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 570:src/stm32f1xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 571:src/stm32f1xx_hal_adc.c ****     /*   Note: Scan mode is present by hardware on this device and, if        */
 572:src/stm32f1xx_hal_adc.c ****     /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
ARM GAS  /tmp/cceY5bqg.s 			page 13


 573:src/stm32f1xx_hal_adc.c ****     /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
 574:src/stm32f1xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 575:src/stm32f1xx_hal_adc.c ****     /*   parameter "NbrOfConversion"                                          */
 576:src/stm32f1xx_hal_adc.c ****     if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 577:src/stm32f1xx_hal_adc.c ****     {
 578:src/stm32f1xx_hal_adc.c ****       tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 579:src/stm32f1xx_hal_adc.c ****     }
 580:src/stm32f1xx_hal_adc.c ****       
 581:src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1,
 582:src/stm32f1xx_hal_adc.c ****                ADC_SQR1_L          ,
 583:src/stm32f1xx_hal_adc.c ****                tmp_sqr1             );
 584:src/stm32f1xx_hal_adc.c ****     
 585:src/stm32f1xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 586:src/stm32f1xx_hal_adc.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 587:src/stm32f1xx_hal_adc.c ****     /* Check through register CR2 (excluding bits set in other functions:     */
 588:src/stm32f1xx_hal_adc.c ****     /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
 589:src/stm32f1xx_hal_adc.c ****     /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
 590:src/stm32f1xx_hal_adc.c ****     /* measurement path bit (TSVREFE).                                        */
 591:src/stm32f1xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 592:src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 593:src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
 594:src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_TSVREFE                     ))
 595:src/stm32f1xx_hal_adc.c ****          == tmp_cr2)
 596:src/stm32f1xx_hal_adc.c ****     {
 597:src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to none */
 598:src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 599:src/stm32f1xx_hal_adc.c ****       
 600:src/stm32f1xx_hal_adc.c ****       /* Set the ADC state */
 601:src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 602:src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 603:src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 604:src/stm32f1xx_hal_adc.c ****     }
 605:src/stm32f1xx_hal_adc.c ****     else
 606:src/stm32f1xx_hal_adc.c ****     {
 607:src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
 608:src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 609:src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 610:src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 611:src/stm32f1xx_hal_adc.c ****       
 612:src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 613:src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 614:src/stm32f1xx_hal_adc.c ****       
 615:src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 616:src/stm32f1xx_hal_adc.c ****     }
 617:src/stm32f1xx_hal_adc.c ****   
 618:src/stm32f1xx_hal_adc.c ****   }
 619:src/stm32f1xx_hal_adc.c ****   else
 620:src/stm32f1xx_hal_adc.c ****   {
 621:src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
 622:src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 623:src/stm32f1xx_hal_adc.c ****         
 624:src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 625:src/stm32f1xx_hal_adc.c ****   }
 626:src/stm32f1xx_hal_adc.c ****   
 627:src/stm32f1xx_hal_adc.c ****   /* Return function status */
 628:src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 629:src/stm32f1xx_hal_adc.c **** }
ARM GAS  /tmp/cceY5bqg.s 			page 14


 630:src/stm32f1xx_hal_adc.c **** 
 631:src/stm32f1xx_hal_adc.c **** /**
 632:src/stm32f1xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 633:src/stm32f1xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 634:src/stm32f1xx_hal_adc.c ****   *         If needed, the example code can be copied and uncommented into
 635:src/stm32f1xx_hal_adc.c ****   *         function HAL_ADC_MspDeInit().
 636:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 637:src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 638:src/stm32f1xx_hal_adc.c ****   */
 639:src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 640:src/stm32f1xx_hal_adc.c **** {
 641:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 642:src/stm32f1xx_hal_adc.c ****   
 643:src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 644:src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
 645:src/stm32f1xx_hal_adc.c ****   {
 646:src/stm32f1xx_hal_adc.c ****      return HAL_ERROR;
 647:src/stm32f1xx_hal_adc.c ****   }
 648:src/stm32f1xx_hal_adc.c ****   
 649:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 650:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 651:src/stm32f1xx_hal_adc.c ****   
 652:src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
 653:src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 654:src/stm32f1xx_hal_adc.c ****   
 655:src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 656:src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 657:src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 658:src/stm32f1xx_hal_adc.c ****   
 659:src/stm32f1xx_hal_adc.c ****   
 660:src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 661:src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 662:src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 663:src/stm32f1xx_hal_adc.c ****   {
 664:src/stm32f1xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 665:src/stm32f1xx_hal_adc.c **** 
 666:src/stm32f1xx_hal_adc.c **** 
 667:src/stm32f1xx_hal_adc.c **** 
 668:src/stm32f1xx_hal_adc.c **** 
 669:src/stm32f1xx_hal_adc.c ****     /* Reset register SR */
 670:src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 671:src/stm32f1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 672:src/stm32f1xx_hal_adc.c ****                          
 673:src/stm32f1xx_hal_adc.c ****     /* Reset register CR1 */
 674:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 675:src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
 676:src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
 677:src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
 678:src/stm32f1xx_hal_adc.c ****     
 679:src/stm32f1xx_hal_adc.c ****     /* Reset register CR2 */
 680:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 681:src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL  | ADC_CR2_JEXTTRIG |  
 682:src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
 683:src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |         
 684:src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_ADON                                          ));
 685:src/stm32f1xx_hal_adc.c ****     
 686:src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR1 */
ARM GAS  /tmp/cceY5bqg.s 			page 15


 687:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 688:src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
 689:src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
 690:src/stm32f1xx_hal_adc.c ****     
 691:src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR2 */
 692:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 693:src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
 694:src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
 695:src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP0                                    ));
 696:src/stm32f1xx_hal_adc.c **** 
 697:src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR1 */
 698:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 699:src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR2 */
 700:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 701:src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR3 */
 702:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 703:src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR4 */
 704:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 705:src/stm32f1xx_hal_adc.c ****     
 706:src/stm32f1xx_hal_adc.c ****     /* Reset register HTR */
 707:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 708:src/stm32f1xx_hal_adc.c ****     /* Reset register LTR */
 709:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 710:src/stm32f1xx_hal_adc.c ****     
 711:src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 712:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 713:src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 714:src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 715:src/stm32f1xx_hal_adc.c ****     
 716:src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 717:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 718:src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 719:src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 720:src/stm32f1xx_hal_adc.c ****     
 721:src/stm32f1xx_hal_adc.c ****     /* Reset register SQR2 */
 722:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 723:src/stm32f1xx_hal_adc.c ****                                     ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
 724:src/stm32f1xx_hal_adc.c ****     
 725:src/stm32f1xx_hal_adc.c ****     /* Reset register SQR3 */
 726:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 727:src/stm32f1xx_hal_adc.c ****                                     ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
 728:src/stm32f1xx_hal_adc.c ****     
 729:src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 730:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 731:src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 732:src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 733:src/stm32f1xx_hal_adc.c ****     
 734:src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 735:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 736:src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 737:src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 738:src/stm32f1xx_hal_adc.c ****     
 739:src/stm32f1xx_hal_adc.c ****     /* Reset register DR */
 740:src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 741:src/stm32f1xx_hal_adc.c ****     
 742:src/stm32f1xx_hal_adc.c ****     /* Reset registers JDR1, JDR2, JDR3, JDR4 */
 743:src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
ARM GAS  /tmp/cceY5bqg.s 			page 16


 744:src/stm32f1xx_hal_adc.c ****     
 745:src/stm32f1xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 746:src/stm32f1xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 747:src/stm32f1xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 748:src/stm32f1xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 749:src/stm32f1xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 750:src/stm32f1xx_hal_adc.c ****     /*                                                                        */
 751:src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                          */
 752:src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                        */
 753:src/stm32f1xx_hal_adc.c ****     
 754:src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 755:src/stm32f1xx_hal_adc.c ****     if (hadc->MspDeInitCallback == NULL)
 756:src/stm32f1xx_hal_adc.c ****     {
 757:src/stm32f1xx_hal_adc.c ****       hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 758:src/stm32f1xx_hal_adc.c ****     }
 759:src/stm32f1xx_hal_adc.c ****     
 760:src/stm32f1xx_hal_adc.c ****     /* DeInit the low level hardware */
 761:src/stm32f1xx_hal_adc.c ****     hadc->MspDeInitCallback(hadc);
 762:src/stm32f1xx_hal_adc.c **** #else
 763:src/stm32f1xx_hal_adc.c ****     /* DeInit the low level hardware */
 764:src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 765:src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 766:src/stm32f1xx_hal_adc.c ****     
 767:src/stm32f1xx_hal_adc.c ****     /* Set ADC error code to none */
 768:src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 769:src/stm32f1xx_hal_adc.c ****     
 770:src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 771:src/stm32f1xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET; 
 772:src/stm32f1xx_hal_adc.c ****   
 773:src/stm32f1xx_hal_adc.c ****   }
 774:src/stm32f1xx_hal_adc.c ****   
 775:src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
 776:src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 777:src/stm32f1xx_hal_adc.c ****   
 778:src/stm32f1xx_hal_adc.c ****   /* Return function status */
 779:src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 780:src/stm32f1xx_hal_adc.c **** }
 781:src/stm32f1xx_hal_adc.c **** 
 782:src/stm32f1xx_hal_adc.c **** /**
 783:src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 784:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 785:src/stm32f1xx_hal_adc.c ****   * @retval None
 786:src/stm32f1xx_hal_adc.c ****   */
 787:src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 788:src/stm32f1xx_hal_adc.c **** {
 789:src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 790:src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 791:src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 792:src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 793:src/stm32f1xx_hal_adc.c ****    */ 
 794:src/stm32f1xx_hal_adc.c **** }
 795:src/stm32f1xx_hal_adc.c **** 
 796:src/stm32f1xx_hal_adc.c **** /**
 797:src/stm32f1xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 798:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 799:src/stm32f1xx_hal_adc.c ****   * @retval None
 800:src/stm32f1xx_hal_adc.c ****   */
ARM GAS  /tmp/cceY5bqg.s 			page 17


 801:src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 802:src/stm32f1xx_hal_adc.c **** {
 803:src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 804:src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 805:src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 806:src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 807:src/stm32f1xx_hal_adc.c ****    */ 
 808:src/stm32f1xx_hal_adc.c **** }
 809:src/stm32f1xx_hal_adc.c **** 
 810:src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 811:src/stm32f1xx_hal_adc.c **** /**
 812:src/stm32f1xx_hal_adc.c ****   * @brief  Register a User ADC Callback
 813:src/stm32f1xx_hal_adc.c ****   *         To be used instead of the weak predefined callback
 814:src/stm32f1xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 815:src/stm32f1xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 816:src/stm32f1xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be registered
 817:src/stm32f1xx_hal_adc.c ****   *         This parameter can be one of the following values:
 818:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 819:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion complete callback ID
 820:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 821:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 822:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 823:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 824:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 825:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 826:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 827:src/stm32f1xx_hal_adc.c ****   * @param  pCallback pointer to the Callback function
 828:src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 829:src/stm32f1xx_hal_adc.c ****   */
 830:src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Callb
 831:src/stm32f1xx_hal_adc.c **** {
 832:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 833:src/stm32f1xx_hal_adc.c ****   
 834:src/stm32f1xx_hal_adc.c ****   if (pCallback == NULL)
 835:src/stm32f1xx_hal_adc.c ****   {
 836:src/stm32f1xx_hal_adc.c ****     /* Update the error code */
 837:src/stm32f1xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 838:src/stm32f1xx_hal_adc.c **** 
 839:src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
 840:src/stm32f1xx_hal_adc.c ****   }
 841:src/stm32f1xx_hal_adc.c ****   
 842:src/stm32f1xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0)
 843:src/stm32f1xx_hal_adc.c ****   {
 844:src/stm32f1xx_hal_adc.c ****     switch (CallbackID)
 845:src/stm32f1xx_hal_adc.c ****     {
 846:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 847:src/stm32f1xx_hal_adc.c ****         hadc->ConvCpltCallback = pCallback;
 848:src/stm32f1xx_hal_adc.c ****         break;
 849:src/stm32f1xx_hal_adc.c ****       
 850:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 851:src/stm32f1xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = pCallback;
 852:src/stm32f1xx_hal_adc.c ****         break;
 853:src/stm32f1xx_hal_adc.c ****       
 854:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 855:src/stm32f1xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = pCallback;
 856:src/stm32f1xx_hal_adc.c ****         break;
 857:src/stm32f1xx_hal_adc.c ****       
ARM GAS  /tmp/cceY5bqg.s 			page 18


 858:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 859:src/stm32f1xx_hal_adc.c ****         hadc->ErrorCallback = pCallback;
 860:src/stm32f1xx_hal_adc.c ****         break;
 861:src/stm32f1xx_hal_adc.c ****       
 862:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
 863:src/stm32f1xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = pCallback;
 864:src/stm32f1xx_hal_adc.c ****         break;
 865:src/stm32f1xx_hal_adc.c ****       
 866:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 867:src/stm32f1xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 868:src/stm32f1xx_hal_adc.c ****         break;
 869:src/stm32f1xx_hal_adc.c ****       
 870:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 871:src/stm32f1xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 872:src/stm32f1xx_hal_adc.c ****         break;
 873:src/stm32f1xx_hal_adc.c ****       
 874:src/stm32f1xx_hal_adc.c ****       default :
 875:src/stm32f1xx_hal_adc.c ****         /* Update the error code */
 876:src/stm32f1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 877:src/stm32f1xx_hal_adc.c **** 
 878:src/stm32f1xx_hal_adc.c ****         /* Return error status */
 879:src/stm32f1xx_hal_adc.c ****         status = HAL_ERROR;
 880:src/stm32f1xx_hal_adc.c ****         break;
 881:src/stm32f1xx_hal_adc.c ****     }
 882:src/stm32f1xx_hal_adc.c ****   }
 883:src/stm32f1xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 884:src/stm32f1xx_hal_adc.c ****   {
 885:src/stm32f1xx_hal_adc.c ****     switch (CallbackID)
 886:src/stm32f1xx_hal_adc.c ****     {
 887:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 888:src/stm32f1xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 889:src/stm32f1xx_hal_adc.c ****         break;
 890:src/stm32f1xx_hal_adc.c ****       
 891:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 892:src/stm32f1xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 893:src/stm32f1xx_hal_adc.c ****         break;
 894:src/stm32f1xx_hal_adc.c ****       
 895:src/stm32f1xx_hal_adc.c ****       default :
 896:src/stm32f1xx_hal_adc.c ****         /* Update the error code */
 897:src/stm32f1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 898:src/stm32f1xx_hal_adc.c ****       
 899:src/stm32f1xx_hal_adc.c ****         /* Return error status */
 900:src/stm32f1xx_hal_adc.c ****         status = HAL_ERROR;
 901:src/stm32f1xx_hal_adc.c ****         break;
 902:src/stm32f1xx_hal_adc.c ****     }
 903:src/stm32f1xx_hal_adc.c ****   }
 904:src/stm32f1xx_hal_adc.c ****   else
 905:src/stm32f1xx_hal_adc.c ****   {
 906:src/stm32f1xx_hal_adc.c ****     /* Update the error code */
 907:src/stm32f1xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 908:src/stm32f1xx_hal_adc.c ****     
 909:src/stm32f1xx_hal_adc.c ****     /* Return error status */
 910:src/stm32f1xx_hal_adc.c ****     status =  HAL_ERROR;
 911:src/stm32f1xx_hal_adc.c ****   }
 912:src/stm32f1xx_hal_adc.c ****   
 913:src/stm32f1xx_hal_adc.c ****   return status;
 914:src/stm32f1xx_hal_adc.c **** }
ARM GAS  /tmp/cceY5bqg.s 			page 19


 915:src/stm32f1xx_hal_adc.c **** 
 916:src/stm32f1xx_hal_adc.c **** /**
 917:src/stm32f1xx_hal_adc.c ****   * @brief  Unregister a ADC Callback
 918:src/stm32f1xx_hal_adc.c ****   *         ADC callback is redirected to the weak predefined callback
 919:src/stm32f1xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 920:src/stm32f1xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 921:src/stm32f1xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be unregistered
 922:src/stm32f1xx_hal_adc.c ****   *         This parameter can be one of the following values:
 923:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 924:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion complete callback ID
 925:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 926:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 927:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 928:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 929:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 930:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 931:src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 932:src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 933:src/stm32f1xx_hal_adc.c ****   */
 934:src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_UnRegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Cal
 935:src/stm32f1xx_hal_adc.c **** {
 936:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 937:src/stm32f1xx_hal_adc.c ****   
 938:src/stm32f1xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0)
 939:src/stm32f1xx_hal_adc.c ****   {
 940:src/stm32f1xx_hal_adc.c ****     switch (CallbackID)
 941:src/stm32f1xx_hal_adc.c ****     {
 942:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 943:src/stm32f1xx_hal_adc.c ****         hadc->ConvCpltCallback = HAL_ADC_ConvCpltCallback;
 944:src/stm32f1xx_hal_adc.c ****         break;
 945:src/stm32f1xx_hal_adc.c ****       
 946:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 947:src/stm32f1xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = HAL_ADC_ConvHalfCpltCallback;
 948:src/stm32f1xx_hal_adc.c ****         break;
 949:src/stm32f1xx_hal_adc.c ****       
 950:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 951:src/stm32f1xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = HAL_ADC_LevelOutOfWindowCallback;
 952:src/stm32f1xx_hal_adc.c ****         break;
 953:src/stm32f1xx_hal_adc.c ****       
 954:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 955:src/stm32f1xx_hal_adc.c ****         hadc->ErrorCallback = HAL_ADC_ErrorCallback;
 956:src/stm32f1xx_hal_adc.c ****         break;
 957:src/stm32f1xx_hal_adc.c ****       
 958:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
 959:src/stm32f1xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = HAL_ADCEx_InjectedConvCpltCallback;
 960:src/stm32f1xx_hal_adc.c ****         break;
 961:src/stm32f1xx_hal_adc.c ****       
 962:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 963:src/stm32f1xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit              */
 964:src/stm32f1xx_hal_adc.c ****         break;
 965:src/stm32f1xx_hal_adc.c ****       
 966:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 967:src/stm32f1xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit            */
 968:src/stm32f1xx_hal_adc.c ****         break;
 969:src/stm32f1xx_hal_adc.c ****       
 970:src/stm32f1xx_hal_adc.c ****       default :
 971:src/stm32f1xx_hal_adc.c ****         /* Update the error code */
ARM GAS  /tmp/cceY5bqg.s 			page 20


 972:src/stm32f1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 973:src/stm32f1xx_hal_adc.c ****         
 974:src/stm32f1xx_hal_adc.c ****         /* Return error status */
 975:src/stm32f1xx_hal_adc.c ****         status =  HAL_ERROR;
 976:src/stm32f1xx_hal_adc.c ****         break;
 977:src/stm32f1xx_hal_adc.c ****     }
 978:src/stm32f1xx_hal_adc.c ****   }
 979:src/stm32f1xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 980:src/stm32f1xx_hal_adc.c ****   {
 981:src/stm32f1xx_hal_adc.c ****     switch (CallbackID)
 982:src/stm32f1xx_hal_adc.c ****     {
 983:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 984:src/stm32f1xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit;                   /* Legacy weak MspInit          
 985:src/stm32f1xx_hal_adc.c ****         break;
 986:src/stm32f1xx_hal_adc.c ****         
 987:src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 988:src/stm32f1xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit;               /* Legacy weak MspDeInit        
 989:src/stm32f1xx_hal_adc.c ****         break;
 990:src/stm32f1xx_hal_adc.c ****         
 991:src/stm32f1xx_hal_adc.c ****       default :
 992:src/stm32f1xx_hal_adc.c ****         /* Update the error code */
 993:src/stm32f1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 994:src/stm32f1xx_hal_adc.c ****         
 995:src/stm32f1xx_hal_adc.c ****         /* Return error status */
 996:src/stm32f1xx_hal_adc.c ****         status =  HAL_ERROR;
 997:src/stm32f1xx_hal_adc.c ****         break;
 998:src/stm32f1xx_hal_adc.c ****     }
 999:src/stm32f1xx_hal_adc.c ****   }
1000:src/stm32f1xx_hal_adc.c ****   else
1001:src/stm32f1xx_hal_adc.c ****   {
1002:src/stm32f1xx_hal_adc.c ****     /* Update the error code */
1003:src/stm32f1xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1004:src/stm32f1xx_hal_adc.c ****     
1005:src/stm32f1xx_hal_adc.c ****     /* Return error status */
1006:src/stm32f1xx_hal_adc.c ****     status =  HAL_ERROR;
1007:src/stm32f1xx_hal_adc.c ****   }
1008:src/stm32f1xx_hal_adc.c ****   
1009:src/stm32f1xx_hal_adc.c ****   return status;
1010:src/stm32f1xx_hal_adc.c **** }
1011:src/stm32f1xx_hal_adc.c **** 
1012:src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1013:src/stm32f1xx_hal_adc.c **** 
1014:src/stm32f1xx_hal_adc.c **** /**
1015:src/stm32f1xx_hal_adc.c ****   * @}
1016:src/stm32f1xx_hal_adc.c ****   */
1017:src/stm32f1xx_hal_adc.c **** 
1018:src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
1019:src/stm32f1xx_hal_adc.c ****  *  @brief    Input and Output operation functions
1020:src/stm32f1xx_hal_adc.c ****  *
1021:src/stm32f1xx_hal_adc.c **** @verbatim   
1022:src/stm32f1xx_hal_adc.c ****  ===============================================================================
1023:src/stm32f1xx_hal_adc.c ****                       ##### IO operation functions #####
1024:src/stm32f1xx_hal_adc.c ****  ===============================================================================
1025:src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1026:src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group.
1027:src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group.
1028:src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
ARM GAS  /tmp/cceY5bqg.s 			page 21


1029:src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion event.
1030:src/stm32f1xx_hal_adc.c ****       (+) Get result of regular channel conversion.
1031:src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
1032:src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
1033:src/stm32f1xx_hal_adc.c ****       (+) Handle ADC interrupt request
1034:src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
1035:src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
1036:src/stm32f1xx_hal_adc.c **** @endverbatim
1037:src/stm32f1xx_hal_adc.c ****   * @{
1038:src/stm32f1xx_hal_adc.c ****   */
1039:src/stm32f1xx_hal_adc.c **** 
1040:src/stm32f1xx_hal_adc.c **** /**
1041:src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group.
1042:src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function: None.
1043:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1044:src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1045:src/stm32f1xx_hal_adc.c ****   */
1046:src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
1047:src/stm32f1xx_hal_adc.c **** {
1048:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1049:src/stm32f1xx_hal_adc.c ****   
1050:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1051:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1052:src/stm32f1xx_hal_adc.c ****   
1053:src/stm32f1xx_hal_adc.c ****   /* Process locked */
1054:src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1055:src/stm32f1xx_hal_adc.c ****    
1056:src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1057:src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
1058:src/stm32f1xx_hal_adc.c ****   
1059:src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1060:src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1061:src/stm32f1xx_hal_adc.c ****   {
1062:src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
1063:src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1064:src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
1065:src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1066:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC,
1067:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1068:src/stm32f1xx_hal_adc.c ****     
1069:src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1070:src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1071:src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1072:src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
1073:src/stm32f1xx_hal_adc.c ****     {
1074:src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1075:src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1076:src/stm32f1xx_hal_adc.c ****       
1077:src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1078:src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1079:src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1080:src/stm32f1xx_hal_adc.c ****       {
1081:src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1082:src/stm32f1xx_hal_adc.c ****       }
1083:src/stm32f1xx_hal_adc.c ****     }
1084:src/stm32f1xx_hal_adc.c ****     else
1085:src/stm32f1xx_hal_adc.c ****     {
ARM GAS  /tmp/cceY5bqg.s 			page 22


1086:src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1087:src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1088:src/stm32f1xx_hal_adc.c ****       
1089:src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1090:src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1091:src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
1092:src/stm32f1xx_hal_adc.c ****       {
1093:src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1094:src/stm32f1xx_hal_adc.c ****       }
1095:src/stm32f1xx_hal_adc.c ****     }
1096:src/stm32f1xx_hal_adc.c ****     
1097:src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1098:src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1099:src/stm32f1xx_hal_adc.c ****     {
1100:src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1101:src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1102:src/stm32f1xx_hal_adc.c ****     }
1103:src/stm32f1xx_hal_adc.c ****     else
1104:src/stm32f1xx_hal_adc.c ****     {
1105:src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1106:src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1107:src/stm32f1xx_hal_adc.c ****     }
1108:src/stm32f1xx_hal_adc.c ****     
1109:src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1110:src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1111:src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1112:src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1113:src/stm32f1xx_hal_adc.c ****   
1114:src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag */
1115:src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1116:src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
1117:src/stm32f1xx_hal_adc.c ****     
1118:src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1119:src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1120:src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1121:src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
1122:src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
1123:src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
1124:src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
1125:src/stm32f1xx_hal_adc.c ****     /* If ADC is master, ADC is enabled and conversion is started.            */
1126:src/stm32f1xx_hal_adc.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
1127:src/stm32f1xx_hal_adc.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
1128:src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
1129:src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
1130:src/stm32f1xx_hal_adc.c ****     {
1131:src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
1132:src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
1133:src/stm32f1xx_hal_adc.c ****     }
1134:src/stm32f1xx_hal_adc.c ****     else
1135:src/stm32f1xx_hal_adc.c ****     {
1136:src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
1137:src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
1138:src/stm32f1xx_hal_adc.c ****     }
1139:src/stm32f1xx_hal_adc.c ****   }
1140:src/stm32f1xx_hal_adc.c ****   else
1141:src/stm32f1xx_hal_adc.c ****   {
1142:src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
ARM GAS  /tmp/cceY5bqg.s 			page 23


1143:src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1144:src/stm32f1xx_hal_adc.c ****   }
1145:src/stm32f1xx_hal_adc.c ****     
1146:src/stm32f1xx_hal_adc.c ****   /* Return function status */
1147:src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
1148:src/stm32f1xx_hal_adc.c **** }
1149:src/stm32f1xx_hal_adc.c **** 
1150:src/stm32f1xx_hal_adc.c **** /**
1151:src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
1152:src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
1153:src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
1154:src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1155:src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1156:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1157:src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1158:src/stm32f1xx_hal_adc.c ****   */
1159:src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
1160:src/stm32f1xx_hal_adc.c **** {
1161:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1162:src/stm32f1xx_hal_adc.c ****   
1163:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1164:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1165:src/stm32f1xx_hal_adc.c ****      
1166:src/stm32f1xx_hal_adc.c ****   /* Process locked */
1167:src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1168:src/stm32f1xx_hal_adc.c ****   
1169:src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1170:src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1171:src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
1172:src/stm32f1xx_hal_adc.c ****   
1173:src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1174:src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1175:src/stm32f1xx_hal_adc.c ****   {
1176:src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1177:src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1178:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1179:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1180:src/stm32f1xx_hal_adc.c ****   }
1181:src/stm32f1xx_hal_adc.c ****   
1182:src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1183:src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1184:src/stm32f1xx_hal_adc.c ****   
1185:src/stm32f1xx_hal_adc.c ****   /* Return function status */
1186:src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
1187:src/stm32f1xx_hal_adc.c **** }
1188:src/stm32f1xx_hal_adc.c **** 
1189:src/stm32f1xx_hal_adc.c **** /**
1190:src/stm32f1xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
1191:src/stm32f1xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
1192:src/stm32f1xx_hal_adc.c ****   *         in DMA mode.
1193:src/stm32f1xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
1194:src/stm32f1xx_hal_adc.c ****   *         performed on each conversion.
1195:src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, limitation in case of sequencer enabled
1196:src/stm32f1xx_hal_adc.c ****   *         (several ranks selected): polling cannot be done on each 
1197:src/stm32f1xx_hal_adc.c ****   *         conversion inside the sequence. In this case, polling is replaced by
1198:src/stm32f1xx_hal_adc.c ****   *         wait for maximum conversion time.
1199:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
ARM GAS  /tmp/cceY5bqg.s 			page 24


1200:src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
1201:src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1202:src/stm32f1xx_hal_adc.c ****   */
1203:src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
1204:src/stm32f1xx_hal_adc.c **** {
 113              		.loc 1 1204 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 8
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              	.LVL0:
 118              		.loc 1 1204 0
 119 0004 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}	@
 120              	.LCFI0:
 121              		.cfi_def_cfa_offset 32
 122              		.cfi_offset 4, -20
 123              		.cfi_offset 5, -16
 124              		.cfi_offset 6, -12
 125              		.cfi_offset 7, -8
 126              		.cfi_offset 14, -4
1205:src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
1206:src/stm32f1xx_hal_adc.c ****   
1207:src/stm32f1xx_hal_adc.c ****   /* Variables for polling in case of scan mode enabled and polling for each  */
1208:src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
1209:src/stm32f1xx_hal_adc.c ****   __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 127              		.loc 1 1209 0
 128 0006 0026     		movs	r6, #0	@ tmp171,
1204:src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 129              		.loc 1 1204 0
 130 0008 0446     		mov	r4, r0	@ hadc, hadc
 131 000a 0D46     		mov	r5, r1	@ Timeout, Timeout
 132              		.loc 1 1209 0
 133 000c 0196     		str	r6, [sp, #4]	@ tmp171, Conversion_Timeout_CPU_cycles
 134              	.LVL1:
1210:src/stm32f1xx_hal_adc.c ****   uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
1211:src/stm32f1xx_hal_adc.c ****  
1212:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1213:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1214:src/stm32f1xx_hal_adc.c ****   
1215:src/stm32f1xx_hal_adc.c ****   /* Get tick count */
1216:src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 135              		.loc 1 1216 0
 136 000e FFF7FEFF 		bl	HAL_GetTick	@
 137              	.LVL2:
1217:src/stm32f1xx_hal_adc.c ****   
1218:src/stm32f1xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for        */
1219:src/stm32f1xx_hal_adc.c ****   /* each conversion:                                                         */
1220:src/stm32f1xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode                            */
1221:src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 138              		.loc 1 1221 0
 139 0012 2368     		ldr	r3, [r4]	@ _17, hadc_16(D)->Instance
1216:src/stm32f1xx_hal_adc.c ****   
 140              		.loc 1 1216 0
 141 0014 0746     		mov	r7, r0	@ tickstart,
 142              	.LVL3:
 143              		.loc 1 1221 0
 144 0016 9A68     		ldr	r2, [r3, #8]	@ _18, _17->CR2
 145 0018 D205     		lsls	r2, r2, #23	@, _18,
ARM GAS  /tmp/cceY5bqg.s 			page 25


 146 001a 08D5     		bpl	.L4	@,
1222:src/stm32f1xx_hal_adc.c ****   {
1223:src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
1224:src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1225:src/stm32f1xx_hal_adc.c ****     
1226:src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1227:src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1228:src/stm32f1xx_hal_adc.c ****     
1229:src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
 147              		.loc 1 1229 0
 148 001c 0120     		movs	r0, #1	@ <retval>,
 149              	.LVL4:
1224:src/stm32f1xx_hal_adc.c ****     
 150              		.loc 1 1224 0
 151 001e A36A     		ldr	r3, [r4, #40]	@ _20, hadc_16(D)->State
1227:src/stm32f1xx_hal_adc.c ****     
 152              		.loc 1 1227 0
 153 0020 84F82460 		strb	r6, [r4, #36]	@ tmp171, hadc_16(D)->Lock
1224:src/stm32f1xx_hal_adc.c ****     
 154              		.loc 1 1224 0
 155 0024 43F02003 		orr	r3, r3, #32	@ _21, _20,
 156 0028 A362     		str	r3, [r4, #40]	@ _21, hadc_16(D)->State
 157              	.LVL5:
 158              	.L5:
1230:src/stm32f1xx_hal_adc.c ****   }
1231:src/stm32f1xx_hal_adc.c ****   
1232:src/stm32f1xx_hal_adc.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
1233:src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
1234:src/stm32f1xx_hal_adc.c ****   /*  - If single conversion for regular group (Scan mode disabled or enabled */
1235:src/stm32f1xx_hal_adc.c ****   /*    with NbrOfConversion =1), flag EOC is used to determine the           */
1236:src/stm32f1xx_hal_adc.c ****   /*    conversion completion.                                                */
1237:src/stm32f1xx_hal_adc.c ****   /*  - If sequence conversion for regular group (scan mode enabled and       */
1238:src/stm32f1xx_hal_adc.c ****   /*    NbrOfConversion >=2), flag EOC is set only at the end of the          */
1239:src/stm32f1xx_hal_adc.c ****   /*    sequence.                                                             */
1240:src/stm32f1xx_hal_adc.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
1241:src/stm32f1xx_hal_adc.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
1242:src/stm32f1xx_hal_adc.c ****   /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
1243:src/stm32f1xx_hal_adc.c ****   /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
1244:src/stm32f1xx_hal_adc.c ****   /*    As flag EOC is not set after each conversion, no timeout status can   */
1245:src/stm32f1xx_hal_adc.c ****   /*    be set.                                                               */
1246:src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
1247:src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
1248:src/stm32f1xx_hal_adc.c ****   {
1249:src/stm32f1xx_hal_adc.c ****     /* Wait until End of Conversion flag is raised */
1250:src/stm32f1xx_hal_adc.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
1251:src/stm32f1xx_hal_adc.c ****     {
1252:src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
1253:src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
1254:src/stm32f1xx_hal_adc.c ****       {
1255:src/stm32f1xx_hal_adc.c ****         if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
1256:src/stm32f1xx_hal_adc.c ****         {
1257:src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to timeout */
1258:src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1259:src/stm32f1xx_hal_adc.c ****           
1260:src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
1261:src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
1262:src/stm32f1xx_hal_adc.c ****           
ARM GAS  /tmp/cceY5bqg.s 			page 26


1263:src/stm32f1xx_hal_adc.c ****           return HAL_TIMEOUT;
1264:src/stm32f1xx_hal_adc.c ****         }
1265:src/stm32f1xx_hal_adc.c ****       }
1266:src/stm32f1xx_hal_adc.c ****     }
1267:src/stm32f1xx_hal_adc.c ****   }
1268:src/stm32f1xx_hal_adc.c ****   else
1269:src/stm32f1xx_hal_adc.c ****   {
1270:src/stm32f1xx_hal_adc.c ****     /* Replace polling by wait for maximum conversion time */
1271:src/stm32f1xx_hal_adc.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
1272:src/stm32f1xx_hal_adc.c ****     /*    and ADC maximum conversion cycles on all channels.                  */
1273:src/stm32f1xx_hal_adc.c ****     /*  - Wait for the expected ADC clock cycles delay                        */
1274:src/stm32f1xx_hal_adc.c ****     Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
1275:src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
1276:src/stm32f1xx_hal_adc.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
1277:src/stm32f1xx_hal_adc.c ****     
1278:src/stm32f1xx_hal_adc.c ****     while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
1279:src/stm32f1xx_hal_adc.c ****     {
1280:src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
1281:src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
1282:src/stm32f1xx_hal_adc.c ****       {
1283:src/stm32f1xx_hal_adc.c ****         if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
1284:src/stm32f1xx_hal_adc.c ****         {
1285:src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to timeout */
1286:src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1287:src/stm32f1xx_hal_adc.c ****           
1288:src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
1289:src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
1290:src/stm32f1xx_hal_adc.c ****           
1291:src/stm32f1xx_hal_adc.c ****           return HAL_TIMEOUT;
1292:src/stm32f1xx_hal_adc.c ****         }
1293:src/stm32f1xx_hal_adc.c ****       }
1294:src/stm32f1xx_hal_adc.c ****       Conversion_Timeout_CPU_cycles ++;
1295:src/stm32f1xx_hal_adc.c ****     }
1296:src/stm32f1xx_hal_adc.c ****   }
1297:src/stm32f1xx_hal_adc.c ****   
1298:src/stm32f1xx_hal_adc.c ****   /* Clear regular group conversion flag */
1299:src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
1300:src/stm32f1xx_hal_adc.c ****   
1301:src/stm32f1xx_hal_adc.c ****   /* Update ADC state machine */
1302:src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
1303:src/stm32f1xx_hal_adc.c ****   
1304:src/stm32f1xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1305:src/stm32f1xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1306:src/stm32f1xx_hal_adc.c ****   /* Note: On STM32F1 devices, in case of sequencer enabled                   */
1307:src/stm32f1xx_hal_adc.c ****   /*       (several ranks selected), end of conversion flag is raised         */
1308:src/stm32f1xx_hal_adc.c ****   /*       at the end of the sequence.                                        */
1309:src/stm32f1xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
1310:src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
1311:src/stm32f1xx_hal_adc.c ****   {   
1312:src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1313:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
1314:src/stm32f1xx_hal_adc.c **** 
1315:src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1316:src/stm32f1xx_hal_adc.c ****     { 
1317:src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1318:src/stm32f1xx_hal_adc.c ****     }
1319:src/stm32f1xx_hal_adc.c ****   }
ARM GAS  /tmp/cceY5bqg.s 			page 27


1320:src/stm32f1xx_hal_adc.c ****   
1321:src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1322:src/stm32f1xx_hal_adc.c ****   return HAL_OK;
1323:src/stm32f1xx_hal_adc.c **** }
 159              		.loc 1 1323 0
 160 002a 03B0     		add	sp, sp, #12	@,,
 161              	.LCFI1:
 162              		.cfi_remember_state
 163              		.cfi_def_cfa_offset 20
 164              		@ sp needed	@
 165 002c F0BD     		pop	{r4, r5, r6, r7, pc}	@
 166              	.LVL6:
 167              	.L4:
 168              	.LCFI2:
 169              		.cfi_restore_state
1246:src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 170              		.loc 1 1246 0
 171 002e 5A68     		ldr	r2, [r3, #4]	@ _24, _17->CR1
 172 0030 D605     		lsls	r6, r2, #23	@, _24,
 173 0032 03D4     		bmi	.L6	@,
1247:src/stm32f1xx_hal_adc.c ****   {
 174              		.loc 1 1247 0 discriminator 1
 175 0034 DB6A     		ldr	r3, [r3, #44]	@ _26, _17->SQR1
1246:src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 176              		.loc 1 1246 0 discriminator 1
 177 0036 13F4700F 		tst	r3, #15728640	@ _26,
 178 003a 3BD0     		beq	.L7	@,
 179              	.L6:
1275:src/stm32f1xx_hal_adc.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 180              		.loc 1 1275 0
 181 003c 3A4B     		ldr	r3, .L35	@ tmp183,
 182 003e 0220     		movs	r0, #2	@,
 183              	.LVL7:
 184 0040 1E68     		ldr	r6, [r3]	@ SystemCoreClock.1_39, SystemCoreClock
 185 0042 FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq	@
 186              	.LVL8:
1276:src/stm32f1xx_hal_adc.c ****     
 187              		.loc 1 1276 0
 188 0046 2368     		ldr	r3, [r4]	@ _43, hadc_16(D)->Instance
 189 0048 384A     		ldr	r2, .L35+4	@ tmp184,
 190 004a 1969     		ldr	r1, [r3, #16]	@ _44, _43->SMPR2
1275:src/stm32f1xx_hal_adc.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 191              		.loc 1 1275 0
 192 004c B6FBF0F0 		udiv	r0, r6, r0	@ _42, SystemCoreClock.1_39,
1276:src/stm32f1xx_hal_adc.c ****     
 193              		.loc 1 1276 0
 194 0050 1142     		tst	r1, r2	@ _44, tmp184
 195 0052 374A     		ldr	r2, .L35+8	@ tmp206,
 196 0054 4FD1     		bne	.L14	@,
1276:src/stm32f1xx_hal_adc.c ****     
 197              		.loc 1 1276 0 is_stmt 0 discriminator 1
 198 0056 DE68     		ldr	r6, [r3, #12]	@ _46, _43->SMPR1
 199 0058 3649     		ldr	r1, .L35+12	@ tmp186,
 200 005a 0E42     		tst	r6, r1	@ _46, tmp186
 201 005c 4BD1     		bne	.L14	@,
1276:src/stm32f1xx_hal_adc.c ****     
 202              		.loc 1 1276 0 discriminator 3
ARM GAS  /tmp/cceY5bqg.s 			page 28


 203 005e 1969     		ldr	r1, [r3, #16]	@ _48,
 204 0060 1142     		tst	r1, r2	@ _48, tmp206
 205 0062 59D1     		bne	.L23	@,
1276:src/stm32f1xx_hal_adc.c ****     
 206              		.loc 1 1276 0 discriminator 5
 207 0064 DA68     		ldr	r2, [r3, #12]	@ _50, _43->SMPR1
 208 0066 344B     		ldr	r3, .L35+16	@ tmp190,
 209 0068 1A42     		tst	r2, r3	@ _50, tmp190
 210 006a 14BF     		ite	ne
 211 006c 2923     		movne	r3, #41	@ iftmp.2_2,
 212 006e 1423     		moveq	r3, #20	@ iftmp.2_2,
 213              	.L15:
1274:src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 214              		.loc 1 1274 0 is_stmt 1
 215 0070 00FB03F6 		mul	r6, r0, r3	@ Conversion_Timeout_CPU_cycles_max, _42, iftmp.2_2
 216              	.LVL9:
 217              	.L17:
1278:src/stm32f1xx_hal_adc.c ****     {
 218              		.loc 1 1278 0
 219 0074 019B     		ldr	r3, [sp, #4]	@ Conversion_Timeout_CPU_cycles.7_61, Conversion_Timeout_CPU_cycles
 220 0076 9E42     		cmp	r6, r3	@ Conversion_Timeout_CPU_cycles_max, Conversion_Timeout_CPU_cycles.7_61
 221 0078 20D9     		bls	.L22	@,
1281:src/stm32f1xx_hal_adc.c ****       {
 222              		.loc 1 1281 0
 223 007a 6B1C     		adds	r3, r5, #1	@, Timeout,
 224 007c 05D0     		beq	.L18	@,
1283:src/stm32f1xx_hal_adc.c ****         {
 225              		.loc 1 1283 0
 226 007e 5DB1     		cbz	r5, .L20	@ Timeout,
1283:src/stm32f1xx_hal_adc.c ****         {
 227              		.loc 1 1283 0 is_stmt 0 discriminator 1
 228 0080 FFF7FEFF 		bl	HAL_GetTick	@
 229              	.LVL10:
 230 0084 C01B     		subs	r0, r0, r7	@ tmp202,, tickstart
 231 0086 8542     		cmp	r5, r0	@ Timeout, tmp202
 232 0088 06D3     		bcc	.L20	@,
 233              	.L18:
1294:src/stm32f1xx_hal_adc.c ****     }
 234              		.loc 1 1294 0 is_stmt 1
 235 008a 019B     		ldr	r3, [sp, #4]	@ Conversion_Timeout_CPU_cycles.5_62, Conversion_Timeout_CPU_cycles
 236 008c 0133     		adds	r3, r3, #1	@ Conversion_Timeout_CPU_cycles.6_63, Conversion_Timeout_CPU_cycles.5_62,
 237 008e 0193     		str	r3, [sp, #4]	@ Conversion_Timeout_CPU_cycles.6_63, Conversion_Timeout_CPU_cycles
 238 0090 F0E7     		b	.L17	@
 239              	.LVL11:
 240              	.L11:
1253:src/stm32f1xx_hal_adc.c ****       {
 241              		.loc 1 1253 0
 242 0092 681C     		adds	r0, r5, #1	@, Timeout,
 243 0094 0FD0     		beq	.L8	@,
1255:src/stm32f1xx_hal_adc.c ****         {
 244              		.loc 1 1255 0
 245 0096 45B9     		cbnz	r5, .L9	@ Timeout,
 246              	.LVL12:
 247              	.L20:
1286:src/stm32f1xx_hal_adc.c ****           
 248              		.loc 1 1286 0
 249 0098 A36A     		ldr	r3, [r4, #40]	@ _68,
ARM GAS  /tmp/cceY5bqg.s 			page 29


1291:src/stm32f1xx_hal_adc.c ****         }
 250              		.loc 1 1291 0
 251 009a 0320     		movs	r0, #3	@ <retval>,
1286:src/stm32f1xx_hal_adc.c ****           
 252              		.loc 1 1286 0
 253 009c 43F00403 		orr	r3, r3, #4	@ _69, _68,
 254 00a0 A362     		str	r3, [r4, #40]	@ _69,
1289:src/stm32f1xx_hal_adc.c ****           
 255              		.loc 1 1289 0
 256 00a2 0023     		movs	r3, #0	@ tmp200,
 257 00a4 84F82430 		strb	r3, [r4, #36]	@ tmp200, hadc_16(D)->Lock
1291:src/stm32f1xx_hal_adc.c ****         }
 258              		.loc 1 1291 0
 259 00a8 BFE7     		b	.L5	@
 260              	.LVL13:
 261              	.L9:
1255:src/stm32f1xx_hal_adc.c ****         {
 262              		.loc 1 1255 0 discriminator 1
 263 00aa FFF7FEFF 		bl	HAL_GetTick	@
 264              	.LVL14:
 265 00ae C01B     		subs	r0, r0, r7	@ tmp179,, tickstart
 266 00b0 8542     		cmp	r5, r0	@ Timeout, tmp179
 267 00b2 F1D3     		bcc	.L20	@,
 268              	.L7:
1250:src/stm32f1xx_hal_adc.c ****     {
 269              		.loc 1 1250 0
 270 00b4 2268     		ldr	r2, [r4]	@ _28, hadc_16(D)->Instance
 271              	.L8:
 272 00b6 1368     		ldr	r3, [r2]	@ _29, _28->SR
 273 00b8 9907     		lsls	r1, r3, #30	@, _29,
 274 00ba EAD5     		bpl	.L11	@,
 275              	.LVL15:
 276              	.L22:
1299:src/stm32f1xx_hal_adc.c ****   
 277              		.loc 1 1299 0
 278 00bc 6FF01203 		mvn	r3, #18	@ tmp181,
 279 00c0 2268     		ldr	r2, [r4]	@ _72, hadc_16(D)->Instance
 280 00c2 1360     		str	r3, [r2]	@ tmp181, _72->SR
1302:src/stm32f1xx_hal_adc.c ****   
 281              		.loc 1 1302 0
 282 00c4 A36A     		ldr	r3, [r4, #40]	@ _74, hadc_16(D)->State
 283 00c6 43F40073 		orr	r3, r3, #512	@ _75, _74,
 284 00ca A362     		str	r3, [r4, #40]	@ _75, hadc_16(D)->State
1309:src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 285              		.loc 1 1309 0
 286 00cc 9368     		ldr	r3, [r2, #8]	@ _77, _72->CR2
 287 00ce 03F46023 		and	r3, r3, #917504	@ tmp182, _77,
 288 00d2 B3F5602F 		cmp	r3, #917504	@ tmp182,
 289 00d6 25D1     		bne	.L13	@,
1309:src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 290              		.loc 1 1309 0 is_stmt 0 discriminator 1
 291 00d8 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2	@ hadc_16(D)->Init.ContinuousConvMode, hadc_16(D)->Init.Cont
 292 00da 1BBB     		cbnz	r3, .L13	@ hadc_16(D)->Init.ContinuousConvMode,
1313:src/stm32f1xx_hal_adc.c **** 
 293              		.loc 1 1313 0 is_stmt 1
 294 00dc A36A     		ldr	r3, [r4, #40]	@ _80, hadc_16(D)->State
 295 00de 23F48073 		bic	r3, r3, #256	@ _81, _80,
ARM GAS  /tmp/cceY5bqg.s 			page 30


 296 00e2 A362     		str	r3, [r4, #40]	@ _81, hadc_16(D)->State
1315:src/stm32f1xx_hal_adc.c ****     { 
 297              		.loc 1 1315 0
 298 00e4 A06A     		ldr	r0, [r4, #40]	@ _83, hadc_16(D)->State
 299 00e6 10F48050 		ands	r0, r0, #4096	@ tmp204, _83,
 300 00ea 1BD1     		bne	.L13	@,
1317:src/stm32f1xx_hal_adc.c ****     }
 301              		.loc 1 1317 0
 302 00ec A36A     		ldr	r3, [r4, #40]	@ _85, hadc_16(D)->State
 303 00ee 43F00103 		orr	r3, r3, #1	@ _86, _85,
 304 00f2 A362     		str	r3, [r4, #40]	@ _86, hadc_16(D)->State
 305 00f4 99E7     		b	.L5	@
 306              	.LVL16:
 307              	.L14:
1276:src/stm32f1xx_hal_adc.c ****     
 308              		.loc 1 1276 0 discriminator 4
 309 00f6 1969     		ldr	r1, [r3, #16]	@ _52,
 310 00f8 1142     		tst	r1, r2	@ _52, tmp206
 311 00fa 03D1     		bne	.L16	@,
1276:src/stm32f1xx_hal_adc.c ****     
 312              		.loc 1 1276 0 is_stmt 0 discriminator 11
 313 00fc D968     		ldr	r1, [r3, #12]	@ _54, _43->SMPR1
 314 00fe 0E4A     		ldr	r2, .L35+16	@ tmp194,
 315 0100 1142     		tst	r1, r2	@ _54, tmp194
 316 0102 0BD0     		beq	.L25	@,
 317              	.L16:
1276:src/stm32f1xx_hal_adc.c ****     
 318              		.loc 1 1276 0 discriminator 14
 319 0104 1969     		ldr	r1, [r3, #16]	@ _56, _43->SMPR2
 320 0106 0D4A     		ldr	r2, .L35+20	@ tmp196,
 321 0108 1142     		tst	r1, r2	@ _56, tmp196
 322 010a 09D1     		bne	.L26	@,
1276:src/stm32f1xx_hal_adc.c ****     
 323              		.loc 1 1276 0 discriminator 15
 324 010c DB68     		ldr	r3, [r3, #12]	@ _58, _43->SMPR1
 325 010e 1342     		tst	r3, r2	@ _58, tmp196
 326 0110 14BF     		ite	ne
 327 0112 FC23     		movne	r3, #252	@ iftmp.2_2,
 328 0114 5423     		moveq	r3, #84	@ iftmp.2_2,
 329 0116 ABE7     		b	.L15	@
 330              	.L23:
1276:src/stm32f1xx_hal_adc.c ****     
 331              		.loc 1 1276 0
 332 0118 2923     		movs	r3, #41	@ iftmp.2_2,
 333 011a A9E7     		b	.L15	@
 334              	.L25:
 335 011c 5423     		movs	r3, #84	@ iftmp.2_2,
 336 011e A7E7     		b	.L15	@
 337              	.L26:
 338 0120 FC23     		movs	r3, #252	@ iftmp.2_2,
 339 0122 A5E7     		b	.L15	@
 340              	.LVL17:
 341              	.L13:
1322:src/stm32f1xx_hal_adc.c **** }
 342              		.loc 1 1322 0 is_stmt 1
 343 0124 0020     		movs	r0, #0	@ <retval>,
 344 0126 80E7     		b	.L5	@
ARM GAS  /tmp/cceY5bqg.s 			page 31


 345              	.L36:
 346              		.align	2
 347              	.L35:
 348 0128 00000000 		.word	SystemCoreClock
 349 012c 24499224 		.word	613566756
 350 0130 92244912 		.word	306783378
 351 0134 24499200 		.word	9586980
 352 0138 92244900 		.word	4793490
 353 013c 49922400 		.word	2396745
 354              		.cfi_endproc
 355              	.LFE71:
 356              		.size	HAL_ADC_PollForConversion, .-HAL_ADC_PollForConversion
 357              		.align	1
 358              		.global	HAL_ADC_PollForEvent
 359              		.syntax unified
 360              		.thumb
 361              		.thumb_func
 362              		.fpu softvfp
 363              		.type	HAL_ADC_PollForEvent, %function
 364              	HAL_ADC_PollForEvent:
 365              	.LFB72:
1324:src/stm32f1xx_hal_adc.c **** 
1325:src/stm32f1xx_hal_adc.c **** /**
1326:src/stm32f1xx_hal_adc.c ****   * @brief  Poll for conversion event.
1327:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1328:src/stm32f1xx_hal_adc.c ****   * @param  EventType: the ADC event type.
1329:src/stm32f1xx_hal_adc.c ****   *          This parameter can be one of the following values:
1330:src/stm32f1xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event.
1331:src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
1332:src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1333:src/stm32f1xx_hal_adc.c ****   */
1334:src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1335:src/stm32f1xx_hal_adc.c **** {
 366              		.loc 1 1335 0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370              	.LVL18:
 371 0140 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 372              	.LCFI3:
 373              		.cfi_def_cfa_offset 24
 374              		.cfi_offset 3, -24
 375              		.cfi_offset 4, -20
 376              		.cfi_offset 5, -16
 377              		.cfi_offset 6, -12
 378              		.cfi_offset 7, -8
 379              		.cfi_offset 14, -4
 380              		.loc 1 1335 0
 381 0142 0446     		mov	r4, r0	@ hadc, hadc
 382 0144 0E46     		mov	r6, r1	@ EventType, EventType
 383 0146 1546     		mov	r5, r2	@ Timeout, Timeout
1336:src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U; 
1337:src/stm32f1xx_hal_adc.c **** 
1338:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1339:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1340:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1341:src/stm32f1xx_hal_adc.c ****   
ARM GAS  /tmp/cceY5bqg.s 			page 32


1342:src/stm32f1xx_hal_adc.c ****   /* Get tick count */
1343:src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 384              		.loc 1 1343 0
 385 0148 FFF7FEFF 		bl	HAL_GetTick	@
 386              	.LVL19:
 387 014c 0746     		mov	r7, r0	@ tickstart,
 388              	.LVL20:
 389              	.L38:
1344:src/stm32f1xx_hal_adc.c ****   
1345:src/stm32f1xx_hal_adc.c ****   /* Check selected event flag */
1346:src/stm32f1xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 390              		.loc 1 1346 0
 391 014e 2268     		ldr	r2, [r4]	@ _9, hadc_8(D)->Instance
 392              	.L39:
 393 0150 1368     		ldr	r3, [r2]	@ _10, _9->SR
 394 0152 36EA0303 		bics	r3, r6, r3	@ tmp130, EventType, _10
 395 0156 08D1     		bne	.L43	@,
1347:src/stm32f1xx_hal_adc.c ****   {
1348:src/stm32f1xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1349:src/stm32f1xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
1350:src/stm32f1xx_hal_adc.c ****     {
1351:src/stm32f1xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
1352:src/stm32f1xx_hal_adc.c ****       {
1353:src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1354:src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1355:src/stm32f1xx_hal_adc.c ****         
1356:src/stm32f1xx_hal_adc.c ****         /* Process unlocked */
1357:src/stm32f1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
1358:src/stm32f1xx_hal_adc.c ****         
1359:src/stm32f1xx_hal_adc.c ****         return HAL_TIMEOUT;
1360:src/stm32f1xx_hal_adc.c ****       }
1361:src/stm32f1xx_hal_adc.c ****     }
1362:src/stm32f1xx_hal_adc.c ****   }
1363:src/stm32f1xx_hal_adc.c ****   
1364:src/stm32f1xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1365:src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
1366:src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 396              		.loc 1 1366 0
 397 0158 A36A     		ldr	r3, [r4, #40]	@ _21, hadc_8(D)->State
1367:src/stm32f1xx_hal_adc.c ****     
1368:src/stm32f1xx_hal_adc.c ****   /* Clear ADC analog watchdog flag */
1369:src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1370:src/stm32f1xx_hal_adc.c ****   
1371:src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1372:src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 398              		.loc 1 1372 0
 399 015a 0020     		movs	r0, #0	@ <retval>,
1366:src/stm32f1xx_hal_adc.c ****     
 400              		.loc 1 1366 0
 401 015c 43F48033 		orr	r3, r3, #65536	@ _22, _21,
 402 0160 A362     		str	r3, [r4, #40]	@ _22, hadc_8(D)->State
1369:src/stm32f1xx_hal_adc.c ****   
 403              		.loc 1 1369 0
 404 0162 6FF00103 		mvn	r3, #1	@ tmp128,
 405 0166 1360     		str	r3, [r2]	@ tmp128, _9->SR
1373:src/stm32f1xx_hal_adc.c **** }
 406              		.loc 1 1373 0
ARM GAS  /tmp/cceY5bqg.s 			page 33


 407 0168 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 408              	.LVL21:
 409              	.L43:
1349:src/stm32f1xx_hal_adc.c ****     {
 410              		.loc 1 1349 0
 411 016a 6B1C     		adds	r3, r5, #1	@, Timeout,
 412 016c F0D0     		beq	.L39	@,
1351:src/stm32f1xx_hal_adc.c ****       {
 413              		.loc 1 1351 0
 414 016e 45B9     		cbnz	r5, .L40	@ Timeout,
 415              	.L42:
1354:src/stm32f1xx_hal_adc.c ****         
 416              		.loc 1 1354 0
 417 0170 A36A     		ldr	r3, [r4, #40]	@ _17, hadc_8(D)->State
1359:src/stm32f1xx_hal_adc.c ****       }
 418              		.loc 1 1359 0
 419 0172 0320     		movs	r0, #3	@ <retval>,
1354:src/stm32f1xx_hal_adc.c ****         
 420              		.loc 1 1354 0
 421 0174 43F00403 		orr	r3, r3, #4	@ _18, _17,
 422 0178 A362     		str	r3, [r4, #40]	@ _18, hadc_8(D)->State
1357:src/stm32f1xx_hal_adc.c ****         
 423              		.loc 1 1357 0
 424 017a 0023     		movs	r3, #0	@ tmp124,
 425 017c 84F82430 		strb	r3, [r4, #36]	@ tmp124, hadc_8(D)->Lock
1359:src/stm32f1xx_hal_adc.c ****       }
 426              		.loc 1 1359 0
 427 0180 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 428              	.LVL22:
 429              	.L40:
1351:src/stm32f1xx_hal_adc.c ****       {
 430              		.loc 1 1351 0 discriminator 1
 431 0182 FFF7FEFF 		bl	HAL_GetTick	@
 432              	.LVL23:
 433 0186 C01B     		subs	r0, r0, r7	@ tmp126,, tickstart
 434 0188 8542     		cmp	r5, r0	@ Timeout, tmp126
 435 018a E0D2     		bcs	.L38	@,
 436 018c F0E7     		b	.L42	@
 437              		.cfi_endproc
 438              	.LFE72:
 439              		.size	HAL_ADC_PollForEvent, .-HAL_ADC_PollForEvent
 440              		.align	1
 441              		.global	HAL_ADC_GetValue
 442              		.syntax unified
 443              		.thumb
 444              		.thumb_func
 445              		.fpu softvfp
 446              		.type	HAL_ADC_GetValue, %function
 447              	HAL_ADC_GetValue:
 448              	.LFB77:
1374:src/stm32f1xx_hal_adc.c **** 
1375:src/stm32f1xx_hal_adc.c **** /**
1376:src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1377:src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1378:src/stm32f1xx_hal_adc.c ****   *          - EOC (end of conversion of regular group)
1379:src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1380:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
ARM GAS  /tmp/cceY5bqg.s 			page 34


1381:src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1382:src/stm32f1xx_hal_adc.c ****   */
1383:src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1384:src/stm32f1xx_hal_adc.c **** {
1385:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1386:src/stm32f1xx_hal_adc.c ****   
1387:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1388:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1389:src/stm32f1xx_hal_adc.c ****   
1390:src/stm32f1xx_hal_adc.c ****   /* Process locked */
1391:src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1392:src/stm32f1xx_hal_adc.c ****     
1393:src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1394:src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
1395:src/stm32f1xx_hal_adc.c ****   
1396:src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1397:src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1398:src/stm32f1xx_hal_adc.c ****   {
1399:src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
1400:src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1401:src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
1402:src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1403:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC
1404:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1405:src/stm32f1xx_hal_adc.c ****     
1406:src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1407:src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1408:src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1409:src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
1410:src/stm32f1xx_hal_adc.c ****     {
1411:src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1412:src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1413:src/stm32f1xx_hal_adc.c ****       
1414:src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1415:src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1416:src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1417:src/stm32f1xx_hal_adc.c ****       {
1418:src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1419:src/stm32f1xx_hal_adc.c ****       }
1420:src/stm32f1xx_hal_adc.c ****     }
1421:src/stm32f1xx_hal_adc.c ****     else
1422:src/stm32f1xx_hal_adc.c ****     {
1423:src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1424:src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1425:src/stm32f1xx_hal_adc.c ****       
1426:src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1427:src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1428:src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
1429:src/stm32f1xx_hal_adc.c ****       {
1430:src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1431:src/stm32f1xx_hal_adc.c ****       }
1432:src/stm32f1xx_hal_adc.c ****     }
1433:src/stm32f1xx_hal_adc.c ****     
1434:src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1435:src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1436:src/stm32f1xx_hal_adc.c ****     {
1437:src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
ARM GAS  /tmp/cceY5bqg.s 			page 35


1438:src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1439:src/stm32f1xx_hal_adc.c ****     }
1440:src/stm32f1xx_hal_adc.c ****     else
1441:src/stm32f1xx_hal_adc.c ****     {
1442:src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1443:src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1444:src/stm32f1xx_hal_adc.c ****     }
1445:src/stm32f1xx_hal_adc.c ****     
1446:src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1447:src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1448:src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1449:src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1450:src/stm32f1xx_hal_adc.c ****     
1451:src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1452:src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1453:src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
1454:src/stm32f1xx_hal_adc.c ****     
1455:src/stm32f1xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
1456:src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
1457:src/stm32f1xx_hal_adc.c ****     
1458:src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1459:src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1460:src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1461:src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
1462:src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
1463:src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
1464:src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
1465:src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
1466:src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
1467:src/stm32f1xx_hal_adc.c ****     {
1468:src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
1469:src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
1470:src/stm32f1xx_hal_adc.c ****     }
1471:src/stm32f1xx_hal_adc.c ****     else
1472:src/stm32f1xx_hal_adc.c ****     {
1473:src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
1474:src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
1475:src/stm32f1xx_hal_adc.c ****     }
1476:src/stm32f1xx_hal_adc.c ****   }
1477:src/stm32f1xx_hal_adc.c ****   else
1478:src/stm32f1xx_hal_adc.c ****   {
1479:src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1480:src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1481:src/stm32f1xx_hal_adc.c ****   }
1482:src/stm32f1xx_hal_adc.c ****   
1483:src/stm32f1xx_hal_adc.c ****   /* Return function status */
1484:src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
1485:src/stm32f1xx_hal_adc.c **** }
1486:src/stm32f1xx_hal_adc.c **** 
1487:src/stm32f1xx_hal_adc.c **** /**
1488:src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1489:src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of 
1490:src/stm32f1xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1491:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1492:src/stm32f1xx_hal_adc.c ****   * @retval None
1493:src/stm32f1xx_hal_adc.c ****   */
1494:src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/cceY5bqg.s 			page 36


1495:src/stm32f1xx_hal_adc.c **** {
1496:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1497:src/stm32f1xx_hal_adc.c ****   
1498:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1499:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1500:src/stm32f1xx_hal_adc.c ****      
1501:src/stm32f1xx_hal_adc.c ****   /* Process locked */
1502:src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1503:src/stm32f1xx_hal_adc.c ****   
1504:src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1505:src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1506:src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
1507:src/stm32f1xx_hal_adc.c ****   
1508:src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1509:src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1510:src/stm32f1xx_hal_adc.c ****   {
1511:src/stm32f1xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1512:src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1513:src/stm32f1xx_hal_adc.c ****     
1514:src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1515:src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1516:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1517:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1518:src/stm32f1xx_hal_adc.c ****   }
1519:src/stm32f1xx_hal_adc.c ****   
1520:src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1521:src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1522:src/stm32f1xx_hal_adc.c ****   
1523:src/stm32f1xx_hal_adc.c ****   /* Return function status */
1524:src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
1525:src/stm32f1xx_hal_adc.c **** }
1526:src/stm32f1xx_hal_adc.c **** 
1527:src/stm32f1xx_hal_adc.c **** /**
1528:src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
1529:src/stm32f1xx_hal_adc.c ****   *         through DMA.
1530:src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1531:src/stm32f1xx_hal_adc.c ****   *          - DMA transfer complete
1532:src/stm32f1xx_hal_adc.c ****   *          - DMA half transfer
1533:src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1534:src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1535:src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStart function.
1536:src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1537:src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1538:src/stm32f1xx_hal_adc.c ****   *         ADC2 converted data can be transferred in dual ADC mode using DMA
1539:src/stm32f1xx_hal_adc.c ****   *         of ADC1 (ADC master in multimode).
1540:src/stm32f1xx_hal_adc.c ****   *         In case of using ADC1 with DMA on a device featuring 2 ADC
1541:src/stm32f1xx_hal_adc.c ****   *         instances: ADC1 conversion register DR contains ADC1 conversion 
1542:src/stm32f1xx_hal_adc.c ****   *         result (ADC1 register DR bits 0 to 11) and, additionally, ADC2 last
1543:src/stm32f1xx_hal_adc.c ****   *         conversion result (ADC1 register DR bits 16 to 27). Therefore, to
1544:src/stm32f1xx_hal_adc.c ****   *         have DMA transferring the conversion results of ADC1 only, DMA must
1545:src/stm32f1xx_hal_adc.c ****   *         be configured to transfer size: half word.
1546:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1547:src/stm32f1xx_hal_adc.c ****   * @param  pData: The destination Buffer address.
1548:src/stm32f1xx_hal_adc.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
1549:src/stm32f1xx_hal_adc.c ****   * @retval None
1550:src/stm32f1xx_hal_adc.c ****   */
1551:src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
ARM GAS  /tmp/cceY5bqg.s 			page 37


1552:src/stm32f1xx_hal_adc.c **** {
1553:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1554:src/stm32f1xx_hal_adc.c ****   
1555:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1556:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1557:src/stm32f1xx_hal_adc.c ****     
1558:src/stm32f1xx_hal_adc.c ****   /* Verification if multimode is disabled (for devices with several ADC)     */
1559:src/stm32f1xx_hal_adc.c ****   /* If multimode is enabled, dedicated function multimode conversion         */
1560:src/stm32f1xx_hal_adc.c ****   /* start DMA must be used.                                                  */
1561:src/stm32f1xx_hal_adc.c ****   if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
1562:src/stm32f1xx_hal_adc.c ****   {
1563:src/stm32f1xx_hal_adc.c ****     /* Process locked */
1564:src/stm32f1xx_hal_adc.c ****     __HAL_LOCK(hadc);
1565:src/stm32f1xx_hal_adc.c ****     
1566:src/stm32f1xx_hal_adc.c ****     /* Enable the ADC peripheral */
1567:src/stm32f1xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
1568:src/stm32f1xx_hal_adc.c ****     
1569:src/stm32f1xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1570:src/stm32f1xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1571:src/stm32f1xx_hal_adc.c ****     {
1572:src/stm32f1xx_hal_adc.c ****       /* Set ADC state                                                        */
1573:src/stm32f1xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1574:src/stm32f1xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1575:src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1576:src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1577:src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1578:src/stm32f1xx_hal_adc.c ****     
1579:src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1580:src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1581:src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1582:src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
1583:src/stm32f1xx_hal_adc.c ****     {
1584:src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1585:src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1586:src/stm32f1xx_hal_adc.c ****       
1587:src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1588:src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1589:src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1590:src/stm32f1xx_hal_adc.c ****       {
1591:src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1592:src/stm32f1xx_hal_adc.c ****       }
1593:src/stm32f1xx_hal_adc.c ****     }
1594:src/stm32f1xx_hal_adc.c ****     else
1595:src/stm32f1xx_hal_adc.c ****     {
1596:src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1597:src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1598:src/stm32f1xx_hal_adc.c ****       
1599:src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1600:src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1601:src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
1602:src/stm32f1xx_hal_adc.c ****       {
1603:src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1604:src/stm32f1xx_hal_adc.c ****       }
1605:src/stm32f1xx_hal_adc.c ****     }
1606:src/stm32f1xx_hal_adc.c ****       
1607:src/stm32f1xx_hal_adc.c ****       /* State machine update: Check if an injected conversion is ongoing */
1608:src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
ARM GAS  /tmp/cceY5bqg.s 			page 38


1609:src/stm32f1xx_hal_adc.c ****       {
1610:src/stm32f1xx_hal_adc.c ****         /* Reset ADC error code fields related to conversions on group regular */
1611:src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1612:src/stm32f1xx_hal_adc.c ****       }
1613:src/stm32f1xx_hal_adc.c ****       else
1614:src/stm32f1xx_hal_adc.c ****       {
1615:src/stm32f1xx_hal_adc.c ****         /* Reset ADC all error code fields */
1616:src/stm32f1xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
1617:src/stm32f1xx_hal_adc.c ****       }
1618:src/stm32f1xx_hal_adc.c ****       
1619:src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
1620:src/stm32f1xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1621:src/stm32f1xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1622:src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1623:src/stm32f1xx_hal_adc.c ****       
1624:src/stm32f1xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1625:src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1626:src/stm32f1xx_hal_adc.c **** 
1627:src/stm32f1xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1628:src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1629:src/stm32f1xx_hal_adc.c ****       
1630:src/stm32f1xx_hal_adc.c ****       /* Set the DMA error callback */
1631:src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1632:src/stm32f1xx_hal_adc.c **** 
1633:src/stm32f1xx_hal_adc.c ****       
1634:src/stm32f1xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1635:src/stm32f1xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1636:src/stm32f1xx_hal_adc.c ****       
1637:src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1638:src/stm32f1xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1639:src/stm32f1xx_hal_adc.c ****       /* operations)                                                          */
1640:src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
1641:src/stm32f1xx_hal_adc.c ****       
1642:src/stm32f1xx_hal_adc.c ****       /* Enable ADC DMA mode */
1643:src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
1644:src/stm32f1xx_hal_adc.c ****       
1645:src/stm32f1xx_hal_adc.c ****       /* Start the DMA channel */
1646:src/stm32f1xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
1647:src/stm32f1xx_hal_adc.c ****       
1648:src/stm32f1xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1649:src/stm32f1xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1650:src/stm32f1xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1651:src/stm32f1xx_hal_adc.c ****       /* trigger event.                                                       */
1652:src/stm32f1xx_hal_adc.c ****       if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
1653:src/stm32f1xx_hal_adc.c ****       {
1654:src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with SW start */
1655:src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
1656:src/stm32f1xx_hal_adc.c ****       }
1657:src/stm32f1xx_hal_adc.c ****       else
1658:src/stm32f1xx_hal_adc.c ****       {
1659:src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with external trigger */
1660:src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
1661:src/stm32f1xx_hal_adc.c ****       }
1662:src/stm32f1xx_hal_adc.c ****     }
1663:src/stm32f1xx_hal_adc.c ****     else
1664:src/stm32f1xx_hal_adc.c ****     {
1665:src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
ARM GAS  /tmp/cceY5bqg.s 			page 39


1666:src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1667:src/stm32f1xx_hal_adc.c ****     }
1668:src/stm32f1xx_hal_adc.c ****   }
1669:src/stm32f1xx_hal_adc.c ****   else
1670:src/stm32f1xx_hal_adc.c ****   {
1671:src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
1672:src/stm32f1xx_hal_adc.c ****   }
1673:src/stm32f1xx_hal_adc.c ****   
1674:src/stm32f1xx_hal_adc.c ****   /* Return function status */
1675:src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
1676:src/stm32f1xx_hal_adc.c **** }
1677:src/stm32f1xx_hal_adc.c **** 
1678:src/stm32f1xx_hal_adc.c **** /**
1679:src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1680:src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
1681:src/stm32f1xx_hal_adc.c ****   *         ADC peripheral.
1682:src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
1683:src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1684:src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1685:src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1686:src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStop function.
1687:src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1688:src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1689:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1690:src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1691:src/stm32f1xx_hal_adc.c ****   */
1692:src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1693:src/stm32f1xx_hal_adc.c **** {
1694:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1695:src/stm32f1xx_hal_adc.c ****   
1696:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1697:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1698:src/stm32f1xx_hal_adc.c ****      
1699:src/stm32f1xx_hal_adc.c ****   /* Process locked */
1700:src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1701:src/stm32f1xx_hal_adc.c ****   
1702:src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1703:src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1704:src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
1705:src/stm32f1xx_hal_adc.c ****   
1706:src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1707:src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1708:src/stm32f1xx_hal_adc.c ****   {
1709:src/stm32f1xx_hal_adc.c ****     /* Disable ADC DMA mode */
1710:src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
1711:src/stm32f1xx_hal_adc.c ****     
1712:src/stm32f1xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1713:src/stm32f1xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1714:src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1715:src/stm32f1xx_hal_adc.c ****     
1716:src/stm32f1xx_hal_adc.c ****     /* Check if DMA channel effectively disabled */
1717:src/stm32f1xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1718:src/stm32f1xx_hal_adc.c ****     {
1719:src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
1720:src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1721:src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1722:src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
ARM GAS  /tmp/cceY5bqg.s 			page 40


1723:src/stm32f1xx_hal_adc.c ****     }
1724:src/stm32f1xx_hal_adc.c ****     else
1725:src/stm32f1xx_hal_adc.c ****     {
1726:src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
1727:src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1728:src/stm32f1xx_hal_adc.c ****     }
1729:src/stm32f1xx_hal_adc.c ****   }
1730:src/stm32f1xx_hal_adc.c ****     
1731:src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1732:src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1733:src/stm32f1xx_hal_adc.c ****     
1734:src/stm32f1xx_hal_adc.c ****   /* Return function status */
1735:src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
1736:src/stm32f1xx_hal_adc.c **** }
1737:src/stm32f1xx_hal_adc.c **** 
1738:src/stm32f1xx_hal_adc.c **** /**
1739:src/stm32f1xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1740:src/stm32f1xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1741:src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1742:src/stm32f1xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1743:src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1744:src/stm32f1xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1745:src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1746:src/stm32f1xx_hal_adc.c ****   *            to flag EOC.
1747:src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1748:src/stm32f1xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1749:src/stm32f1xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1750:src/stm32f1xx_hal_adc.c ****   *         To clear this flag, either use function: 
1751:src/stm32f1xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1752:src/stm32f1xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
1753:src/stm32f1xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1754:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1755:src/stm32f1xx_hal_adc.c ****   * @retval ADC group regular conversion data
1756:src/stm32f1xx_hal_adc.c ****   */
1757:src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1758:src/stm32f1xx_hal_adc.c **** {
 449              		.loc 1 1758 0
 450              		.cfi_startproc
 451              		@ args = 0, pretend = 0, frame = 0
 452              		@ frame_needed = 0, uses_anonymous_args = 0
 453              		@ link register save eliminated.
 454              	.LVL24:
1759:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1760:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1761:src/stm32f1xx_hal_adc.c **** 
1762:src/stm32f1xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1763:src/stm32f1xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1764:src/stm32f1xx_hal_adc.c ****   
1765:src/stm32f1xx_hal_adc.c ****   /* Return ADC converted value */ 
1766:src/stm32f1xx_hal_adc.c ****   return hadc->Instance->DR;
 455              		.loc 1 1766 0
 456 018e 0368     		ldr	r3, [r0]	@ _3, hadc_2(D)->Instance
 457 0190 D86C     		ldr	r0, [r3, #76]	@ <retval>, _3->DR
 458              	.LVL25:
1767:src/stm32f1xx_hal_adc.c **** }
 459              		.loc 1 1767 0
 460 0192 7047     		bx	lr	@
ARM GAS  /tmp/cceY5bqg.s 			page 41


 461              		.cfi_endproc
 462              	.LFE77:
 463              		.size	HAL_ADC_GetValue, .-HAL_ADC_GetValue
 464              		.align	1
 465              		.weak	HAL_ADC_ConvCpltCallback
 466              		.syntax unified
 467              		.thumb
 468              		.thumb_func
 469              		.fpu softvfp
 470              		.type	HAL_ADC_ConvCpltCallback, %function
 471              	HAL_ADC_ConvCpltCallback:
 472              	.LFB99:
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 0
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              		@ link register save eliminated.
 477 0194 7047     		bx	lr	@
 478              		.cfi_endproc
 479              	.LFE99:
 480              		.size	HAL_ADC_ConvCpltCallback, .-HAL_ADC_ConvCpltCallback
 481              		.align	1
 482              		.global	ADC_DMAConvCplt
 483              		.syntax unified
 484              		.thumb
 485              		.thumb_func
 486              		.fpu softvfp
 487              		.type	ADC_DMAConvCplt, %function
 488              	ADC_DMAConvCplt:
 489              	.LFB89:
1768:src/stm32f1xx_hal_adc.c **** 
1769:src/stm32f1xx_hal_adc.c **** /**
1770:src/stm32f1xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
1771:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1772:src/stm32f1xx_hal_adc.c ****   * @retval None
1773:src/stm32f1xx_hal_adc.c ****   */
1774:src/stm32f1xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1775:src/stm32f1xx_hal_adc.c **** {
1776:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1777:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1778:src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1779:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
1780:src/stm32f1xx_hal_adc.c ****   
1781:src/stm32f1xx_hal_adc.c ****   
1782:src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1783:src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
1784:src/stm32f1xx_hal_adc.c ****   {
1785:src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
1786:src/stm32f1xx_hal_adc.c ****     {
1787:src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1788:src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1789:src/stm32f1xx_hal_adc.c ****       {
1790:src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1791:src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
1792:src/stm32f1xx_hal_adc.c ****       }
1793:src/stm32f1xx_hal_adc.c ****       
1794:src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group regular   */
1795:src/stm32f1xx_hal_adc.c ****       /* by external trigger, continuous mode or scan sequence on going.      */
ARM GAS  /tmp/cceY5bqg.s 			page 42


1796:src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1797:src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1798:src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1799:src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
1800:src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
1801:src/stm32f1xx_hal_adc.c ****       {
1802:src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group regular */
1803:src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1804:src/stm32f1xx_hal_adc.c ****         
1805:src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1806:src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
1807:src/stm32f1xx_hal_adc.c ****         
1808:src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1809:src/stm32f1xx_hal_adc.c ****         {
1810:src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1811:src/stm32f1xx_hal_adc.c ****         }
1812:src/stm32f1xx_hal_adc.c ****       }
1813:src/stm32f1xx_hal_adc.c **** 
1814:src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */
1815:src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1816:src/stm32f1xx_hal_adc.c ****       hadc->ConvCpltCallback(hadc);
1817:src/stm32f1xx_hal_adc.c **** #else
1818:src/stm32f1xx_hal_adc.c ****       HAL_ADC_ConvCpltCallback(hadc);
1819:src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1820:src/stm32f1xx_hal_adc.c ****       
1821:src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag */
1822:src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
1823:src/stm32f1xx_hal_adc.c ****     }
1824:src/stm32f1xx_hal_adc.c ****   }
1825:src/stm32f1xx_hal_adc.c ****   
1826:src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for injected group ========== */
1827:src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
1828:src/stm32f1xx_hal_adc.c ****   {
1829:src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
1830:src/stm32f1xx_hal_adc.c ****     {
1831:src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1832:src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1833:src/stm32f1xx_hal_adc.c ****       {
1834:src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1835:src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
1836:src/stm32f1xx_hal_adc.c ****       }
1837:src/stm32f1xx_hal_adc.c **** 
1838:src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group injected  */
1839:src/stm32f1xx_hal_adc.c ****       /* by external trigger, scan sequence on going or by automatic injected */
1840:src/stm32f1xx_hal_adc.c ****       /* conversion from group regular (same conditions as group regular      */
1841:src/stm32f1xx_hal_adc.c ****       /* interruption disabling above).                                       */
1842:src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1843:src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1844:src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1845:src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
1846:src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
1847:src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
1848:src/stm32f1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
1849:src/stm32f1xx_hal_adc.c ****       {
1850:src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group injected */
1851:src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
1852:src/stm32f1xx_hal_adc.c ****         
ARM GAS  /tmp/cceY5bqg.s 			page 43


1853:src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1854:src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
1855:src/stm32f1xx_hal_adc.c **** 
1856:src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
1857:src/stm32f1xx_hal_adc.c ****         { 
1858:src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1859:src/stm32f1xx_hal_adc.c ****         }
1860:src/stm32f1xx_hal_adc.c ****       }
1861:src/stm32f1xx_hal_adc.c **** 
1862:src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */ 
1863:src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1864:src/stm32f1xx_hal_adc.c ****       hadc->InjectedConvCpltCallback(hadc);
1865:src/stm32f1xx_hal_adc.c **** #else
1866:src/stm32f1xx_hal_adc.c ****       HAL_ADCEx_InjectedConvCpltCallback(hadc);
1867:src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1868:src/stm32f1xx_hal_adc.c ****       
1869:src/stm32f1xx_hal_adc.c ****       /* Clear injected group conversion flag */
1870:src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
1871:src/stm32f1xx_hal_adc.c ****     }
1872:src/stm32f1xx_hal_adc.c ****   }
1873:src/stm32f1xx_hal_adc.c ****    
1874:src/stm32f1xx_hal_adc.c ****   /* ========== Check Analog watchdog flags ========== */
1875:src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
1876:src/stm32f1xx_hal_adc.c ****   {
1877:src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
1878:src/stm32f1xx_hal_adc.c ****     {
1879:src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
1880:src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1881:src/stm32f1xx_hal_adc.c ****       
1882:src/stm32f1xx_hal_adc.c ****       /* Level out of window callback */ 
1883:src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1884:src/stm32f1xx_hal_adc.c ****       hadc->LevelOutOfWindowCallback(hadc);
1885:src/stm32f1xx_hal_adc.c **** #else
1886:src/stm32f1xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
1887:src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1888:src/stm32f1xx_hal_adc.c ****       
1889:src/stm32f1xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
1890:src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1891:src/stm32f1xx_hal_adc.c ****     }
1892:src/stm32f1xx_hal_adc.c ****   }
1893:src/stm32f1xx_hal_adc.c ****   
1894:src/stm32f1xx_hal_adc.c **** }
1895:src/stm32f1xx_hal_adc.c **** 
1896:src/stm32f1xx_hal_adc.c **** /**
1897:src/stm32f1xx_hal_adc.c ****   * @brief  Conversion complete callback in non blocking mode 
1898:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1899:src/stm32f1xx_hal_adc.c ****   * @retval None
1900:src/stm32f1xx_hal_adc.c ****   */
1901:src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1902:src/stm32f1xx_hal_adc.c **** {
1903:src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1904:src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1905:src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1906:src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1907:src/stm32f1xx_hal_adc.c ****    */
1908:src/stm32f1xx_hal_adc.c **** }
1909:src/stm32f1xx_hal_adc.c **** 
ARM GAS  /tmp/cceY5bqg.s 			page 44


1910:src/stm32f1xx_hal_adc.c **** /**
1911:src/stm32f1xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non blocking mode 
1912:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1913:src/stm32f1xx_hal_adc.c ****   * @retval None
1914:src/stm32f1xx_hal_adc.c ****   */
1915:src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1916:src/stm32f1xx_hal_adc.c **** {
1917:src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1918:src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1919:src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1920:src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1921:src/stm32f1xx_hal_adc.c ****   */
1922:src/stm32f1xx_hal_adc.c **** }
1923:src/stm32f1xx_hal_adc.c **** 
1924:src/stm32f1xx_hal_adc.c **** /**
1925:src/stm32f1xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode. 
1926:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1927:src/stm32f1xx_hal_adc.c ****   * @retval None
1928:src/stm32f1xx_hal_adc.c ****   */
1929:src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1930:src/stm32f1xx_hal_adc.c **** {
1931:src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1932:src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1933:src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1934:src/stm32f1xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
1935:src/stm32f1xx_hal_adc.c ****   */
1936:src/stm32f1xx_hal_adc.c **** }
1937:src/stm32f1xx_hal_adc.c **** 
1938:src/stm32f1xx_hal_adc.c **** /**
1939:src/stm32f1xx_hal_adc.c ****   * @brief  ADC error callback in non blocking mode
1940:src/stm32f1xx_hal_adc.c ****   *        (ADC conversion with interruption or transfer by DMA)
1941:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1942:src/stm32f1xx_hal_adc.c ****   * @retval None
1943:src/stm32f1xx_hal_adc.c ****   */
1944:src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1945:src/stm32f1xx_hal_adc.c **** {
1946:src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1947:src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1948:src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1949:src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1950:src/stm32f1xx_hal_adc.c ****   */
1951:src/stm32f1xx_hal_adc.c **** }
1952:src/stm32f1xx_hal_adc.c **** 
1953:src/stm32f1xx_hal_adc.c **** 
1954:src/stm32f1xx_hal_adc.c **** /**
1955:src/stm32f1xx_hal_adc.c ****   * @}
1956:src/stm32f1xx_hal_adc.c ****   */
1957:src/stm32f1xx_hal_adc.c **** 
1958:src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1959:src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral Control functions
1960:src/stm32f1xx_hal_adc.c ****  *
1961:src/stm32f1xx_hal_adc.c **** @verbatim   
1962:src/stm32f1xx_hal_adc.c ****  ===============================================================================
1963:src/stm32f1xx_hal_adc.c ****              ##### Peripheral Control functions #####
1964:src/stm32f1xx_hal_adc.c ****  ===============================================================================  
1965:src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1966:src/stm32f1xx_hal_adc.c ****       (+) Configure channels on regular group
ARM GAS  /tmp/cceY5bqg.s 			page 45


1967:src/stm32f1xx_hal_adc.c ****       (+) Configure the analog watchdog
1968:src/stm32f1xx_hal_adc.c ****       
1969:src/stm32f1xx_hal_adc.c **** @endverbatim
1970:src/stm32f1xx_hal_adc.c ****   * @{
1971:src/stm32f1xx_hal_adc.c ****   */
1972:src/stm32f1xx_hal_adc.c **** 
1973:src/stm32f1xx_hal_adc.c **** /**
1974:src/stm32f1xx_hal_adc.c ****   * @brief  Configures the the selected channel to be linked to the regular
1975:src/stm32f1xx_hal_adc.c ****   *         group.
1976:src/stm32f1xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1977:src/stm32f1xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
1978:src/stm32f1xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1979:src/stm32f1xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1980:src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1981:src/stm32f1xx_hal_adc.c ****   *         This function initializes channel into regular group, following  
1982:src/stm32f1xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1983:src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without reseting 
1984:src/stm32f1xx_hal_adc.c ****   *         the ADC.
1985:src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1986:src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1987:src/stm32f1xx_hal_adc.c ****   *         "ADC_ChannelConfTypeDef".
1988:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1989:src/stm32f1xx_hal_adc.c ****   * @param  sConfig: Structure of ADC channel for regular group.
1990:src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1991:src/stm32f1xx_hal_adc.c ****   */
1992:src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1993:src/stm32f1xx_hal_adc.c **** { 
1994:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1995:src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
1996:src/stm32f1xx_hal_adc.c ****   
1997:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1998:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1999:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
2000:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
2001:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
2002:src/stm32f1xx_hal_adc.c ****   
2003:src/stm32f1xx_hal_adc.c ****   /* Process locked */
2004:src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
2005:src/stm32f1xx_hal_adc.c ****   
2006:src/stm32f1xx_hal_adc.c ****   
2007:src/stm32f1xx_hal_adc.c ****   /* Regular sequence configuration */
2008:src/stm32f1xx_hal_adc.c ****   /* For Rank 1 to 6 */
2009:src/stm32f1xx_hal_adc.c ****   if (sConfig->Rank < 7U)
2010:src/stm32f1xx_hal_adc.c ****   {
2011:src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR3                        ,
2012:src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
2013:src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
2014:src/stm32f1xx_hal_adc.c ****   }
2015:src/stm32f1xx_hal_adc.c ****   /* For Rank 7 to 12 */
2016:src/stm32f1xx_hal_adc.c ****   else if (sConfig->Rank < 13U)
2017:src/stm32f1xx_hal_adc.c ****   {
2018:src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR2                        ,
2019:src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
2020:src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
2021:src/stm32f1xx_hal_adc.c ****   }
2022:src/stm32f1xx_hal_adc.c ****   /* For Rank 13 to 16 */
2023:src/stm32f1xx_hal_adc.c ****   else
ARM GAS  /tmp/cceY5bqg.s 			page 46


2024:src/stm32f1xx_hal_adc.c ****   {
2025:src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1                        ,
2026:src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
2027:src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
2028:src/stm32f1xx_hal_adc.c ****   }
2029:src/stm32f1xx_hal_adc.c ****   
2030:src/stm32f1xx_hal_adc.c ****   
2031:src/stm32f1xx_hal_adc.c ****   /* Channel sampling time configuration */
2032:src/stm32f1xx_hal_adc.c ****   /* For channels 10 to 17 */
2033:src/stm32f1xx_hal_adc.c ****   if (sConfig->Channel >= ADC_CHANNEL_10)
2034:src/stm32f1xx_hal_adc.c ****   {
2035:src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR1                             ,
2036:src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
2037:src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
2038:src/stm32f1xx_hal_adc.c ****   }
2039:src/stm32f1xx_hal_adc.c ****   else /* For channels 0 to 9 */
2040:src/stm32f1xx_hal_adc.c ****   {
2041:src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR2                             ,
2042:src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
2043:src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
2044:src/stm32f1xx_hal_adc.c ****   }
2045:src/stm32f1xx_hal_adc.c ****   
2046:src/stm32f1xx_hal_adc.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
2047:src/stm32f1xx_hal_adc.c ****   /* and VREFINT measurement path.                                            */
2048:src/stm32f1xx_hal_adc.c ****   if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
2049:src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
2050:src/stm32f1xx_hal_adc.c ****   {
2051:src/stm32f1xx_hal_adc.c ****     /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
2052:src/stm32f1xx_hal_adc.c ****     /* measurement channels (VrefInt/TempSensor). If these channels are       */
2053:src/stm32f1xx_hal_adc.c ****     /* intended to be set on other ADC instances, an error is reported.       */
2054:src/stm32f1xx_hal_adc.c ****     if (hadc->Instance == ADC1)
2055:src/stm32f1xx_hal_adc.c ****     {
2056:src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
2057:src/stm32f1xx_hal_adc.c ****       {
2058:src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
2059:src/stm32f1xx_hal_adc.c ****         
2060:src/stm32f1xx_hal_adc.c ****         if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
2061:src/stm32f1xx_hal_adc.c ****         {
2062:src/stm32f1xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
2063:src/stm32f1xx_hal_adc.c ****           /* Compute number of CPU cycles to wait for */
2064:src/stm32f1xx_hal_adc.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
2065:src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0U)
2066:src/stm32f1xx_hal_adc.c ****           {
2067:src/stm32f1xx_hal_adc.c ****             wait_loop_index--;
2068:src/stm32f1xx_hal_adc.c ****           }
2069:src/stm32f1xx_hal_adc.c ****         }
2070:src/stm32f1xx_hal_adc.c ****       }
2071:src/stm32f1xx_hal_adc.c ****     }
2072:src/stm32f1xx_hal_adc.c ****     else
2073:src/stm32f1xx_hal_adc.c ****     {
2074:src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
2075:src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2076:src/stm32f1xx_hal_adc.c ****       
2077:src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
2078:src/stm32f1xx_hal_adc.c ****     }
2079:src/stm32f1xx_hal_adc.c ****   }
2080:src/stm32f1xx_hal_adc.c ****   
ARM GAS  /tmp/cceY5bqg.s 			page 47


2081:src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
2082:src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
2083:src/stm32f1xx_hal_adc.c ****   
2084:src/stm32f1xx_hal_adc.c ****   /* Return function status */
2085:src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
2086:src/stm32f1xx_hal_adc.c **** }
2087:src/stm32f1xx_hal_adc.c **** 
2088:src/stm32f1xx_hal_adc.c **** /**
2089:src/stm32f1xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
2090:src/stm32f1xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
2091:src/stm32f1xx_hal_adc.c ****   *         is on going.
2092:src/stm32f1xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
2093:src/stm32f1xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
2094:src/stm32f1xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
2095:src/stm32f1xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
2096:src/stm32f1xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
2097:src/stm32f1xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
2098:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2099:src/stm32f1xx_hal_adc.c ****   * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
2100:src/stm32f1xx_hal_adc.c ****   * @retval HAL status
2101:src/stm32f1xx_hal_adc.c ****   */
2102:src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
2103:src/stm32f1xx_hal_adc.c **** {
2104:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
2105:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2106:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
2107:src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
2108:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
2109:src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
2110:src/stm32f1xx_hal_adc.c ****   
2111:src/stm32f1xx_hal_adc.c ****   if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
2112:src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
2113:src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
2114:src/stm32f1xx_hal_adc.c ****   {
2115:src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
2116:src/stm32f1xx_hal_adc.c ****   }
2117:src/stm32f1xx_hal_adc.c ****   
2118:src/stm32f1xx_hal_adc.c ****   /* Process locked */
2119:src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
2120:src/stm32f1xx_hal_adc.c ****   
2121:src/stm32f1xx_hal_adc.c ****   /* Analog watchdog configuration */
2122:src/stm32f1xx_hal_adc.c **** 
2123:src/stm32f1xx_hal_adc.c ****   /* Configure ADC Analog watchdog interrupt */
2124:src/stm32f1xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
2125:src/stm32f1xx_hal_adc.c ****   {
2126:src/stm32f1xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
2127:src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
2128:src/stm32f1xx_hal_adc.c ****   }
2129:src/stm32f1xx_hal_adc.c ****   else
2130:src/stm32f1xx_hal_adc.c ****   {
2131:src/stm32f1xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
2132:src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
2133:src/stm32f1xx_hal_adc.c ****   }
2134:src/stm32f1xx_hal_adc.c ****   
2135:src/stm32f1xx_hal_adc.c ****   /* Configuration of analog watchdog:                                        */
2136:src/stm32f1xx_hal_adc.c ****   /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
2137:src/stm32f1xx_hal_adc.c ****   /*    one or all channels.                                                  */
ARM GAS  /tmp/cceY5bqg.s 			page 48


2138:src/stm32f1xx_hal_adc.c ****   /*  - Set the Analog watchdog channel (is not used if watchdog              */
2139:src/stm32f1xx_hal_adc.c ****   /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
2140:src/stm32f1xx_hal_adc.c ****   MODIFY_REG(hadc->Instance->CR1            ,
2141:src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDSGL |
2142:src/stm32f1xx_hal_adc.c ****              ADC_CR1_JAWDEN |
2143:src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDEN  |
2144:src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDCH                  ,
2145:src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->WatchdogMode |
2146:src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->Channel        );
2147:src/stm32f1xx_hal_adc.c ****   
2148:src/stm32f1xx_hal_adc.c ****   /* Set the high threshold */
2149:src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
2150:src/stm32f1xx_hal_adc.c ****   
2151:src/stm32f1xx_hal_adc.c ****   /* Set the low threshold */
2152:src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
2153:src/stm32f1xx_hal_adc.c **** 
2154:src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
2155:src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
2156:src/stm32f1xx_hal_adc.c ****   
2157:src/stm32f1xx_hal_adc.c ****   /* Return function status */
2158:src/stm32f1xx_hal_adc.c ****   return HAL_OK;
2159:src/stm32f1xx_hal_adc.c **** }
2160:src/stm32f1xx_hal_adc.c **** 
2161:src/stm32f1xx_hal_adc.c **** 
2162:src/stm32f1xx_hal_adc.c **** /**
2163:src/stm32f1xx_hal_adc.c ****   * @}
2164:src/stm32f1xx_hal_adc.c ****   */
2165:src/stm32f1xx_hal_adc.c **** 
2166:src/stm32f1xx_hal_adc.c **** 
2167:src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
2168:src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral State functions
2169:src/stm32f1xx_hal_adc.c ****  *
2170:src/stm32f1xx_hal_adc.c **** @verbatim
2171:src/stm32f1xx_hal_adc.c ****  ===============================================================================
2172:src/stm32f1xx_hal_adc.c ****             ##### Peripheral State and Errors functions #####
2173:src/stm32f1xx_hal_adc.c ****  ===============================================================================  
2174:src/stm32f1xx_hal_adc.c ****     [..]
2175:src/stm32f1xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
2176:src/stm32f1xx_hal_adc.c ****     peripheral.
2177:src/stm32f1xx_hal_adc.c ****       (+) Check the ADC state
2178:src/stm32f1xx_hal_adc.c ****       (+) Check the ADC error code
2179:src/stm32f1xx_hal_adc.c **** 
2180:src/stm32f1xx_hal_adc.c **** @endverbatim
2181:src/stm32f1xx_hal_adc.c ****   * @{
2182:src/stm32f1xx_hal_adc.c ****   */
2183:src/stm32f1xx_hal_adc.c **** 
2184:src/stm32f1xx_hal_adc.c **** /**
2185:src/stm32f1xx_hal_adc.c ****   * @brief  return the ADC state
2186:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2187:src/stm32f1xx_hal_adc.c ****   * @retval HAL state
2188:src/stm32f1xx_hal_adc.c ****   */
2189:src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
2190:src/stm32f1xx_hal_adc.c **** {
2191:src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
2192:src/stm32f1xx_hal_adc.c ****   return hadc->State;
2193:src/stm32f1xx_hal_adc.c **** }
2194:src/stm32f1xx_hal_adc.c **** 
ARM GAS  /tmp/cceY5bqg.s 			page 49


2195:src/stm32f1xx_hal_adc.c **** /**
2196:src/stm32f1xx_hal_adc.c ****   * @brief  Return the ADC error code
2197:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2198:src/stm32f1xx_hal_adc.c ****   * @retval ADC Error Code
2199:src/stm32f1xx_hal_adc.c ****   */
2200:src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
2201:src/stm32f1xx_hal_adc.c **** {
2202:src/stm32f1xx_hal_adc.c ****   return hadc->ErrorCode;
2203:src/stm32f1xx_hal_adc.c **** }
2204:src/stm32f1xx_hal_adc.c **** 
2205:src/stm32f1xx_hal_adc.c **** /**
2206:src/stm32f1xx_hal_adc.c ****   * @}
2207:src/stm32f1xx_hal_adc.c ****   */
2208:src/stm32f1xx_hal_adc.c **** 
2209:src/stm32f1xx_hal_adc.c **** /**
2210:src/stm32f1xx_hal_adc.c ****   * @}
2211:src/stm32f1xx_hal_adc.c ****   */
2212:src/stm32f1xx_hal_adc.c **** 
2213:src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
2214:src/stm32f1xx_hal_adc.c ****   * @{
2215:src/stm32f1xx_hal_adc.c ****   */
2216:src/stm32f1xx_hal_adc.c **** 
2217:src/stm32f1xx_hal_adc.c **** /**
2218:src/stm32f1xx_hal_adc.c ****   * @brief  Enable the selected ADC.
2219:src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
2220:src/stm32f1xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
2221:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2222:src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
2223:src/stm32f1xx_hal_adc.c ****   */
2224:src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
2225:src/stm32f1xx_hal_adc.c **** {
2226:src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
2227:src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
2228:src/stm32f1xx_hal_adc.c ****   
2229:src/stm32f1xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
2230:src/stm32f1xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
2231:src/stm32f1xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
2232:src/stm32f1xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
2233:src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
2234:src/stm32f1xx_hal_adc.c ****   {
2235:src/stm32f1xx_hal_adc.c ****     /* Enable the Peripheral */
2236:src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
2237:src/stm32f1xx_hal_adc.c ****     
2238:src/stm32f1xx_hal_adc.c ****     /* Delay for ADC stabilization time */
2239:src/stm32f1xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
2240:src/stm32f1xx_hal_adc.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
2241:src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0U)
2242:src/stm32f1xx_hal_adc.c ****     {
2243:src/stm32f1xx_hal_adc.c ****       wait_loop_index--;
2244:src/stm32f1xx_hal_adc.c ****     }
2245:src/stm32f1xx_hal_adc.c ****     
2246:src/stm32f1xx_hal_adc.c ****     /* Get tick count */
2247:src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
2248:src/stm32f1xx_hal_adc.c **** 
2249:src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
2250:src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) == RESET)
2251:src/stm32f1xx_hal_adc.c ****     {
ARM GAS  /tmp/cceY5bqg.s 			page 50


2252:src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
2253:src/stm32f1xx_hal_adc.c ****       {
2254:src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
2255:src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2256:src/stm32f1xx_hal_adc.c ****       
2257:src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2258:src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2259:src/stm32f1xx_hal_adc.c ****         
2260:src/stm32f1xx_hal_adc.c ****         /* Process unlocked */
2261:src/stm32f1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
2262:src/stm32f1xx_hal_adc.c ****       
2263:src/stm32f1xx_hal_adc.c ****         return HAL_ERROR;
2264:src/stm32f1xx_hal_adc.c ****       }
2265:src/stm32f1xx_hal_adc.c ****     }
2266:src/stm32f1xx_hal_adc.c ****   }
2267:src/stm32f1xx_hal_adc.c ****    
2268:src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
2269:src/stm32f1xx_hal_adc.c ****   return HAL_OK;
2270:src/stm32f1xx_hal_adc.c **** }
2271:src/stm32f1xx_hal_adc.c **** 
2272:src/stm32f1xx_hal_adc.c **** /**
2273:src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion and disable the selected ADC
2274:src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2275:src/stm32f1xx_hal_adc.c ****   *         stopped to disable the ADC.
2276:src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2277:src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
2278:src/stm32f1xx_hal_adc.c ****   */
2279:src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
2280:src/stm32f1xx_hal_adc.c **** {
2281:src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
2282:src/stm32f1xx_hal_adc.c ****   
2283:src/stm32f1xx_hal_adc.c ****   /* Verification if ADC is not already disabled */
2284:src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
2285:src/stm32f1xx_hal_adc.c ****   {
2286:src/stm32f1xx_hal_adc.c ****     /* Disable the ADC peripheral */
2287:src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE(hadc);
2288:src/stm32f1xx_hal_adc.c ****      
2289:src/stm32f1xx_hal_adc.c ****     /* Get tick count */
2290:src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
2291:src/stm32f1xx_hal_adc.c ****     
2292:src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2293:src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) != RESET)
2294:src/stm32f1xx_hal_adc.c ****     {
2295:src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
2296:src/stm32f1xx_hal_adc.c ****       {
2297:src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
2298:src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2299:src/stm32f1xx_hal_adc.c ****         
2300:src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2301:src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2302:src/stm32f1xx_hal_adc.c ****         
2303:src/stm32f1xx_hal_adc.c ****         return HAL_ERROR;
2304:src/stm32f1xx_hal_adc.c ****       }
2305:src/stm32f1xx_hal_adc.c ****     }
2306:src/stm32f1xx_hal_adc.c ****   }
2307:src/stm32f1xx_hal_adc.c ****   
2308:src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
ARM GAS  /tmp/cceY5bqg.s 			page 51


2309:src/stm32f1xx_hal_adc.c ****   return HAL_OK;
2310:src/stm32f1xx_hal_adc.c **** }
2311:src/stm32f1xx_hal_adc.c **** 
2312:src/stm32f1xx_hal_adc.c **** /**
2313:src/stm32f1xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2314:src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2315:src/stm32f1xx_hal_adc.c ****   * @retval None
2316:src/stm32f1xx_hal_adc.c ****   */
2317:src/stm32f1xx_hal_adc.c **** void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2318:src/stm32f1xx_hal_adc.c **** {
 490              		.loc 1 2318 0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              	.LVL26:
2319:src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2320:src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 495              		.loc 1 2320 0
 496 0196 436A     		ldr	r3, [r0, #36]	@ hadc, hdma_4(D)->Parent
 497              	.LVL27:
2318:src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 498              		.loc 1 2318 0
 499 0198 10B5     		push	{r4, lr}	@
 500              	.LCFI4:
 501              		.cfi_def_cfa_offset 8
 502              		.cfi_offset 4, -8
 503              		.cfi_offset 14, -4
2321:src/stm32f1xx_hal_adc.c ****  
2322:src/stm32f1xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2323:src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 504              		.loc 1 2323 0
 505 019a 9A6A     		ldr	r2, [r3, #40]	@ _6, hadc_5->State
 506 019c 12F0500F 		tst	r2, #80	@ _6,
 507 01a0 1BD1     		bne	.L49	@,
2324:src/stm32f1xx_hal_adc.c ****   {
2325:src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine */
2326:src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 508              		.loc 1 2326 0
 509 01a2 9A6A     		ldr	r2, [r3, #40]	@ _8, hadc_5->State
 510 01a4 42F40072 		orr	r2, r2, #512	@ _9, _8,
 511 01a8 9A62     		str	r2, [r3, #40]	@ _9, hadc_5->State
2327:src/stm32f1xx_hal_adc.c ****     
2328:src/stm32f1xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2329:src/stm32f1xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2330:src/stm32f1xx_hal_adc.c ****     /* Note: On STM32F1 devices, in case of sequencer enabled                 */
2331:src/stm32f1xx_hal_adc.c ****     /*       (several ranks selected), end of conversion flag is raised       */
2332:src/stm32f1xx_hal_adc.c ****     /*       at the end of the sequence.                                      */
2333:src/stm32f1xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 512              		.loc 1 2333 0
 513 01aa 1A68     		ldr	r2, [r3]	@ _11, hadc_5->Instance
 514 01ac 9268     		ldr	r2, [r2, #8]	@ _12, _11->CR2
 515 01ae 02F46022 		and	r2, r2, #917504	@ tmp129, _12,
 516 01b2 B2F5602F 		cmp	r2, #917504	@ tmp129,
 517 01b6 0CD1     		bne	.L51	@,
 518              		.loc 1 2333 0 is_stmt 0 discriminator 1
 519 01b8 1A7B     		ldrb	r2, [r3, #12]	@ zero_extendqisi2	@ hadc_5->Init.ContinuousConvMode, hadc_5->Init.ContinuousCo
 520 01ba 52B9     		cbnz	r2, .L51	@ hadc_5->Init.ContinuousConvMode,
ARM GAS  /tmp/cceY5bqg.s 			page 52


2334:src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
2335:src/stm32f1xx_hal_adc.c ****     {
2336:src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
2337:src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 521              		.loc 1 2337 0 is_stmt 1
 522 01bc 9A6A     		ldr	r2, [r3, #40]	@ _15, hadc_5->State
 523 01be 22F48072 		bic	r2, r2, #256	@ _16, _15,
 524 01c2 9A62     		str	r2, [r3, #40]	@ _16, hadc_5->State
2338:src/stm32f1xx_hal_adc.c ****       
2339:src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 525              		.loc 1 2339 0
 526 01c4 9A6A     		ldr	r2, [r3, #40]	@ _18, hadc_5->State
 527 01c6 D204     		lsls	r2, r2, #19	@, _18,
2340:src/stm32f1xx_hal_adc.c ****       {
2341:src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 528              		.loc 1 2341 0
 529 01c8 5EBF     		ittt	pl
 530 01ca 9A6A     		ldrpl	r2, [r3, #40]	@ _20, hadc_5->State
 531 01cc 42F00102 		orrpl	r2, r2, #1	@ _21, _20,
 532 01d0 9A62     		strpl	r2, [r3, #40]	@ _21, hadc_5->State
 533              	.L51:
2342:src/stm32f1xx_hal_adc.c ****       }
2343:src/stm32f1xx_hal_adc.c ****     }
2344:src/stm32f1xx_hal_adc.c ****     
2345:src/stm32f1xx_hal_adc.c ****     /* Conversion complete callback */
2346:src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2347:src/stm32f1xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
2348:src/stm32f1xx_hal_adc.c **** #else
2349:src/stm32f1xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 534              		.loc 1 2349 0
 535 01d2 1846     		mov	r0, r3	@, hadc
 536              	.LVL28:
 537 01d4 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback	@
 538              	.LVL29:
 539 01d8 10BD     		pop	{r4, pc}	@
 540              	.LVL30:
 541              	.L49:
2350:src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2351:src/stm32f1xx_hal_adc.c ****   }
2352:src/stm32f1xx_hal_adc.c ****   else
2353:src/stm32f1xx_hal_adc.c ****   {
2354:src/stm32f1xx_hal_adc.c ****     /* Call DMA error callback */
2355:src/stm32f1xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
 542              		.loc 1 2355 0
 543 01da 1B6A     		ldr	r3, [r3, #32]	@ hadc_5->DMA_Handle, hadc_5->DMA_Handle
 544              	.LVL31:
2356:src/stm32f1xx_hal_adc.c ****   }
2357:src/stm32f1xx_hal_adc.c **** }
 545              		.loc 1 2357 0
 546 01dc BDE81040 		pop	{r4, lr}	@
 547              	.LCFI5:
 548              		.cfi_restore 14
 549              		.cfi_restore 4
 550              		.cfi_def_cfa_offset 0
2355:src/stm32f1xx_hal_adc.c ****   }
 551              		.loc 1 2355 0
 552 01e0 1B6B     		ldr	r3, [r3, #48]	@ _24->XferErrorCallback, _24->XferErrorCallback
ARM GAS  /tmp/cceY5bqg.s 			page 53


 553 01e2 1847     		bx	r3	@ indirect register sibling call	@ _24->XferErrorCallback
 554              	.LVL32:
 555              		.cfi_endproc
 556              	.LFE89:
 557              		.size	ADC_DMAConvCplt, .-ADC_DMAConvCplt
 558              		.align	1
 559              		.weak	HAL_ADC_ConvHalfCpltCallback
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
 563              		.fpu softvfp
 564              		.type	HAL_ADC_ConvHalfCpltCallback, %function
 565              	HAL_ADC_ConvHalfCpltCallback:
 566              	.LFB97:
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              		@ link register save eliminated.
 571 01e4 7047     		bx	lr	@
 572              		.cfi_endproc
 573              	.LFE97:
 574              		.size	HAL_ADC_ConvHalfCpltCallback, .-HAL_ADC_ConvHalfCpltCallback
 575              		.align	1
 576              		.global	ADC_DMAHalfConvCplt
 577              		.syntax unified
 578              		.thumb
 579              		.thumb_func
 580              		.fpu softvfp
 581              		.type	ADC_DMAHalfConvCplt, %function
 582              	ADC_DMAHalfConvCplt:
 583              	.LFB90:
2358:src/stm32f1xx_hal_adc.c **** 
2359:src/stm32f1xx_hal_adc.c **** /**
2360:src/stm32f1xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2361:src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2362:src/stm32f1xx_hal_adc.c ****   * @retval None
2363:src/stm32f1xx_hal_adc.c ****   */
2364:src/stm32f1xx_hal_adc.c **** void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2365:src/stm32f1xx_hal_adc.c **** {
 584              		.loc 1 2365 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              	.LVL33:
 589              		.loc 1 2365 0
 590 01e6 08B5     		push	{r3, lr}	@
 591              	.LCFI6:
 592              		.cfi_def_cfa_offset 8
 593              		.cfi_offset 3, -8
 594              		.cfi_offset 14, -4
2366:src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2367:src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2368:src/stm32f1xx_hal_adc.c ****   
2369:src/stm32f1xx_hal_adc.c ****   /* Half conversion callback */
2370:src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2371:src/stm32f1xx_hal_adc.c ****     hadc->ConvHalfCpltCallback(hadc);
2372:src/stm32f1xx_hal_adc.c **** #else
ARM GAS  /tmp/cceY5bqg.s 			page 54


2373:src/stm32f1xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc);
 595              		.loc 1 2373 0
 596 01e8 406A     		ldr	r0, [r0, #36]	@, hdma_2(D)->Parent
 597              	.LVL34:
 598 01ea FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback	@
 599              	.LVL35:
 600 01ee 08BD     		pop	{r3, pc}	@
 601              		.cfi_endproc
 602              	.LFE90:
 603              		.size	ADC_DMAHalfConvCplt, .-ADC_DMAHalfConvCplt
 604              		.align	1
 605              		.weak	HAL_ADC_LevelOutOfWindowCallback
 606              		.syntax unified
 607              		.thumb
 608              		.thumb_func
 609              		.fpu softvfp
 610              		.type	HAL_ADC_LevelOutOfWindowCallback, %function
 611              	HAL_ADC_LevelOutOfWindowCallback:
 612              	.LFB95:
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 616              		@ link register save eliminated.
 617 01f0 7047     		bx	lr	@
 618              		.cfi_endproc
 619              	.LFE95:
 620              		.size	HAL_ADC_LevelOutOfWindowCallback, .-HAL_ADC_LevelOutOfWindowCallback
 621              		.align	1
 622              		.global	HAL_ADC_IRQHandler
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 626              		.fpu softvfp
 627              		.type	HAL_ADC_IRQHandler, %function
 628              	HAL_ADC_IRQHandler:
 629              	.LFB78:
1775:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 630              		.loc 1 1775 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 0
 633              		@ frame_needed = 0, uses_anonymous_args = 0
 634              	.LVL36:
1783:src/stm32f1xx_hal_adc.c ****   {
 635              		.loc 1 1783 0
 636 01f2 0368     		ldr	r3, [r0]	@ _10, hadc_9(D)->Instance
1775:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 637              		.loc 1 1775 0
 638 01f4 10B5     		push	{r4, lr}	@
 639              	.LCFI7:
 640              		.cfi_def_cfa_offset 8
 641              		.cfi_offset 4, -8
 642              		.cfi_offset 14, -4
1783:src/stm32f1xx_hal_adc.c ****   {
 643              		.loc 1 1783 0
 644 01f6 5A68     		ldr	r2, [r3, #4]	@ _11, _10->CR1
1775:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 645              		.loc 1 1775 0
ARM GAS  /tmp/cceY5bqg.s 			page 55


 646 01f8 0446     		mov	r4, r0	@ hadc, hadc
1783:src/stm32f1xx_hal_adc.c ****   {
 647              		.loc 1 1783 0
 648 01fa 9006     		lsls	r0, r2, #26	@, _11,
 649              	.LVL37:
 650 01fc 27D5     		bpl	.L59	@,
1785:src/stm32f1xx_hal_adc.c ****     {
 651              		.loc 1 1785 0
 652 01fe 1A68     		ldr	r2, [r3]	@ _13, _10->SR
 653 0200 9107     		lsls	r1, r2, #30	@, _13,
 654 0202 24D5     		bpl	.L59	@,
1788:src/stm32f1xx_hal_adc.c ****       {
 655              		.loc 1 1788 0
 656 0204 A26A     		ldr	r2, [r4, #40]	@ _15, hadc_9(D)->State
 657 0206 D206     		lsls	r2, r2, #27	@, _15,
1791:src/stm32f1xx_hal_adc.c ****       }
 658              		.loc 1 1791 0
 659 0208 5EBF     		ittt	pl
 660 020a A26A     		ldrpl	r2, [r4, #40]	@ _17, hadc_9(D)->State
 661 020c 42F40072 		orrpl	r2, r2, #512	@ _18, _17,
 662 0210 A262     		strpl	r2, [r4, #40]	@ _18, hadc_9(D)->State
1799:src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 663              		.loc 1 1799 0
 664 0212 9A68     		ldr	r2, [r3, #8]	@ _20, _10->CR2
 665 0214 02F46022 		and	r2, r2, #917504	@ tmp168, _20,
 666 0218 B2F5602F 		cmp	r2, #917504	@ tmp168,
 667 021c 10D1     		bne	.L62	@,
1799:src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 668              		.loc 1 1799 0 is_stmt 0 discriminator 1
 669 021e 227B     		ldrb	r2, [r4, #12]	@ zero_extendqisi2	@ hadc_9(D)->Init.ContinuousConvMode, hadc_9(D)->Init.Contin
 670 0220 72B9     		cbnz	r2, .L62	@ hadc_9(D)->Init.ContinuousConvMode,
1803:src/stm32f1xx_hal_adc.c ****         
 671              		.loc 1 1803 0 is_stmt 1
 672 0222 5A68     		ldr	r2, [r3, #4]	@ _23, _10->CR1
 673 0224 22F02002 		bic	r2, r2, #32	@ _24, _23,
 674 0228 5A60     		str	r2, [r3, #4]	@ _24, _10->CR1
1806:src/stm32f1xx_hal_adc.c ****         
 675              		.loc 1 1806 0
 676 022a A36A     		ldr	r3, [r4, #40]	@ _26, hadc_9(D)->State
 677 022c 23F48073 		bic	r3, r3, #256	@ _27, _26,
 678 0230 A362     		str	r3, [r4, #40]	@ _27, hadc_9(D)->State
1808:src/stm32f1xx_hal_adc.c ****         {
 679              		.loc 1 1808 0
 680 0232 A36A     		ldr	r3, [r4, #40]	@ _29, hadc_9(D)->State
 681 0234 DB04     		lsls	r3, r3, #19	@, _29,
1810:src/stm32f1xx_hal_adc.c ****         }
 682              		.loc 1 1810 0
 683 0236 5EBF     		ittt	pl
 684 0238 A36A     		ldrpl	r3, [r4, #40]	@ _31, hadc_9(D)->State
 685 023a 43F00103 		orrpl	r3, r3, #1	@ _32, _31,
 686 023e A362     		strpl	r3, [r4, #40]	@ _32, hadc_9(D)->State
 687              	.L62:
1818:src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 688              		.loc 1 1818 0
 689 0240 2046     		mov	r0, r4	@, hadc
 690 0242 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback	@
 691              	.LVL38:
ARM GAS  /tmp/cceY5bqg.s 			page 56


1822:src/stm32f1xx_hal_adc.c ****     }
 692              		.loc 1 1822 0
 693 0246 6FF01202 		mvn	r2, #18	@ tmp171,
 694 024a 2368     		ldr	r3, [r4]	@ _35, hadc_9(D)->Instance
 695 024c 1A60     		str	r2, [r3]	@ tmp171, _35->SR
 696              	.L59:
1827:src/stm32f1xx_hal_adc.c ****   {
 697              		.loc 1 1827 0
 698 024e 2368     		ldr	r3, [r4]	@ _37, hadc_9(D)->Instance
 699 0250 5A68     		ldr	r2, [r3, #4]	@ _38, _37->CR1
 700 0252 1006     		lsls	r0, r2, #24	@, _38,
 701 0254 30D5     		bpl	.L64	@,
1829:src/stm32f1xx_hal_adc.c ****     {
 702              		.loc 1 1829 0
 703 0256 1A68     		ldr	r2, [r3]	@ _40, _37->SR
 704 0258 5107     		lsls	r1, r2, #29	@, _40,
 705 025a 2DD5     		bpl	.L64	@,
1832:src/stm32f1xx_hal_adc.c ****       {
 706              		.loc 1 1832 0
 707 025c A26A     		ldr	r2, [r4, #40]	@ _42, hadc_9(D)->State
 708 025e D206     		lsls	r2, r2, #27	@, _42,
1835:src/stm32f1xx_hal_adc.c ****       }
 709              		.loc 1 1835 0
 710 0260 5EBF     		ittt	pl
 711 0262 A26A     		ldrpl	r2, [r4, #40]	@ _44, hadc_9(D)->State
 712 0264 42F40052 		orrpl	r2, r2, #8192	@ _45, _44,
 713 0268 A262     		strpl	r2, [r4, #40]	@ _45, hadc_9(D)->State
1845:src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 714              		.loc 1 1845 0
 715 026a 9A68     		ldr	r2, [r3, #8]	@ _47, _37->CR2
 716 026c 02F4E042 		and	r2, r2, #28672	@ tmp175, _47,
 717 0270 B2F5E04F 		cmp	r2, #28672	@ tmp175,
 718 0274 0AD0     		beq	.L66	@,
1846:src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 719              		.loc 1 1846 0 discriminator 1
 720 0276 5A68     		ldr	r2, [r3, #4]	@ _49, _37->CR1
1845:src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 721              		.loc 1 1845 0 discriminator 1
 722 0278 5005     		lsls	r0, r2, #21	@, _49,
 723 027a 16D4     		bmi	.L68	@,
1847:src/stm32f1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 724              		.loc 1 1847 0
 725 027c 9A68     		ldr	r2, [r3, #8]	@ _51, _37->CR2
 726 027e 02F46022 		and	r2, r2, #917504	@ tmp177, _51,
1846:src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 727              		.loc 1 1846 0
 728 0282 B2F5602F 		cmp	r2, #917504	@ tmp177,
 729 0286 10D1     		bne	.L68	@,
1847:src/stm32f1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 730              		.loc 1 1847 0
 731 0288 227B     		ldrb	r2, [r4, #12]	@ zero_extendqisi2	@ hadc_9(D)->Init.ContinuousConvMode, hadc_9(D)->Init.Contin
 732 028a 72B9     		cbnz	r2, .L68	@ hadc_9(D)->Init.ContinuousConvMode,
 733              	.L66:
1851:src/stm32f1xx_hal_adc.c ****         
 734              		.loc 1 1851 0
 735 028c 5A68     		ldr	r2, [r3, #4]	@ _54, _37->CR1
 736 028e 22F08002 		bic	r2, r2, #128	@ _55, _54,
ARM GAS  /tmp/cceY5bqg.s 			page 57


 737 0292 5A60     		str	r2, [r3, #4]	@ _55, _37->CR1
1854:src/stm32f1xx_hal_adc.c **** 
 738              		.loc 1 1854 0
 739 0294 A36A     		ldr	r3, [r4, #40]	@ _57, hadc_9(D)->State
 740 0296 23F48053 		bic	r3, r3, #4096	@ _58, _57,
 741 029a A362     		str	r3, [r4, #40]	@ _58, hadc_9(D)->State
1856:src/stm32f1xx_hal_adc.c ****         { 
 742              		.loc 1 1856 0
 743 029c A36A     		ldr	r3, [r4, #40]	@ _60, hadc_9(D)->State
 744 029e D905     		lsls	r1, r3, #23	@, _60,
1858:src/stm32f1xx_hal_adc.c ****         }
 745              		.loc 1 1858 0
 746 02a0 5EBF     		ittt	pl
 747 02a2 A36A     		ldrpl	r3, [r4, #40]	@ _62, hadc_9(D)->State
 748 02a4 43F00103 		orrpl	r3, r3, #1	@ _63, _62,
 749 02a8 A362     		strpl	r3, [r4, #40]	@ _63, hadc_9(D)->State
 750              	.L68:
1866:src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 751              		.loc 1 1866 0
 752 02aa 2046     		mov	r0, r4	@, hadc
 753 02ac FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback	@
 754              	.LVL39:
1870:src/stm32f1xx_hal_adc.c ****     }
 755              		.loc 1 1870 0
 756 02b0 6FF00C02 		mvn	r2, #12	@ tmp180,
 757 02b4 2368     		ldr	r3, [r4]	@ _66, hadc_9(D)->Instance
 758 02b6 1A60     		str	r2, [r3]	@ tmp180, _66->SR
 759              	.L64:
1875:src/stm32f1xx_hal_adc.c ****   {
 760              		.loc 1 1875 0
 761 02b8 2368     		ldr	r3, [r4]	@ _68, hadc_9(D)->Instance
 762 02ba 5A68     		ldr	r2, [r3, #4]	@ _69, _68->CR1
 763 02bc 5206     		lsls	r2, r2, #25	@, _69,
 764 02be 0DD5     		bpl	.L58	@,
1877:src/stm32f1xx_hal_adc.c ****     {
 765              		.loc 1 1877 0
 766 02c0 1B68     		ldr	r3, [r3]	@ _71, _68->SR
 767 02c2 DB07     		lsls	r3, r3, #31	@, _71,
 768 02c4 0AD5     		bpl	.L58	@,
1880:src/stm32f1xx_hal_adc.c ****       
 769              		.loc 1 1880 0
 770 02c6 A36A     		ldr	r3, [r4, #40]	@ _73, hadc_9(D)->State
1886:src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 771              		.loc 1 1886 0
 772 02c8 2046     		mov	r0, r4	@, hadc
1880:src/stm32f1xx_hal_adc.c ****       
 773              		.loc 1 1880 0
 774 02ca 43F48033 		orr	r3, r3, #65536	@ _74, _73,
 775 02ce A362     		str	r3, [r4, #40]	@ _74, hadc_9(D)->State
1886:src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 776              		.loc 1 1886 0
 777 02d0 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback	@
 778              	.LVL40:
1890:src/stm32f1xx_hal_adc.c ****     }
 779              		.loc 1 1890 0
 780 02d4 6FF00102 		mvn	r2, #1	@ tmp183,
 781 02d8 2368     		ldr	r3, [r4]	@ _77, hadc_9(D)->Instance
ARM GAS  /tmp/cceY5bqg.s 			page 58


 782 02da 1A60     		str	r2, [r3]	@ tmp183, _77->SR
 783              	.L58:
 784 02dc 10BD     		pop	{r4, pc}	@
 785              		.cfi_endproc
 786              	.LFE78:
 787              		.size	HAL_ADC_IRQHandler, .-HAL_ADC_IRQHandler
 788              		.align	1
 789              		.weak	HAL_ADC_ErrorCallback
 790              		.syntax unified
 791              		.thumb
 792              		.thumb_func
 793              		.fpu softvfp
 794              		.type	HAL_ADC_ErrorCallback, %function
 795              	HAL_ADC_ErrorCallback:
 796              	.LFB82:
1945:src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 797              		.loc 1 1945 0
 798              		.cfi_startproc
 799              		@ args = 0, pretend = 0, frame = 0
 800              		@ frame_needed = 0, uses_anonymous_args = 0
 801              		@ link register save eliminated.
 802              	.LVL41:
 803 02de 7047     		bx	lr	@
 804              		.cfi_endproc
 805              	.LFE82:
 806              		.size	HAL_ADC_ErrorCallback, .-HAL_ADC_ErrorCallback
 807              		.align	1
 808              		.global	ADC_DMAError
 809              		.syntax unified
 810              		.thumb
 811              		.thumb_func
 812              		.fpu softvfp
 813              		.type	ADC_DMAError, %function
 814              	ADC_DMAError:
 815              	.LFB91:
2374:src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2375:src/stm32f1xx_hal_adc.c **** }
2376:src/stm32f1xx_hal_adc.c **** 
2377:src/stm32f1xx_hal_adc.c **** /**
2378:src/stm32f1xx_hal_adc.c ****   * @brief  DMA error callback 
2379:src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2380:src/stm32f1xx_hal_adc.c ****   * @retval None
2381:src/stm32f1xx_hal_adc.c ****   */
2382:src/stm32f1xx_hal_adc.c **** void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2383:src/stm32f1xx_hal_adc.c **** {
 816              		.loc 1 2383 0
 817              		.cfi_startproc
 818              		@ args = 0, pretend = 0, frame = 0
 819              		@ frame_needed = 0, uses_anonymous_args = 0
 820              	.LVL42:
2384:src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2385:src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 821              		.loc 1 2385 0
 822 02e0 406A     		ldr	r0, [r0, #36]	@ hadc, hdma_2(D)->Parent
 823              	.LVL43:
2383:src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 824              		.loc 1 2383 0
ARM GAS  /tmp/cceY5bqg.s 			page 59


 825 02e2 08B5     		push	{r3, lr}	@
 826              	.LCFI8:
 827              		.cfi_def_cfa_offset 8
 828              		.cfi_offset 3, -8
 829              		.cfi_offset 14, -4
2386:src/stm32f1xx_hal_adc.c ****   
2387:src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
2388:src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 830              		.loc 1 2388 0
 831 02e4 836A     		ldr	r3, [r0, #40]	@ _4, hadc_3->State
 832 02e6 43F04003 		orr	r3, r3, #64	@ _5, _4,
 833 02ea 8362     		str	r3, [r0, #40]	@ _5, hadc_3->State
2389:src/stm32f1xx_hal_adc.c ****   
2390:src/stm32f1xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2391:src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 834              		.loc 1 2391 0
 835 02ec C36A     		ldr	r3, [r0, #44]	@ _7, hadc_3->ErrorCode
 836 02ee 43F00403 		orr	r3, r3, #4	@ _8, _7,
 837 02f2 C362     		str	r3, [r0, #44]	@ _8, hadc_3->ErrorCode
2392:src/stm32f1xx_hal_adc.c ****   
2393:src/stm32f1xx_hal_adc.c ****   /* Error callback */
2394:src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2395:src/stm32f1xx_hal_adc.c ****   hadc->ErrorCallback(hadc);
2396:src/stm32f1xx_hal_adc.c **** #else
2397:src/stm32f1xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc);
 838              		.loc 1 2397 0
 839 02f4 FFF7FEFF 		bl	HAL_ADC_ErrorCallback	@
 840              	.LVL44:
 841 02f8 08BD     		pop	{r3, pc}	@
 842              		.cfi_endproc
 843              	.LFE91:
 844              		.size	ADC_DMAError, .-ADC_DMAError
 845              		.align	1
 846              		.global	HAL_ADC_ConfigChannel
 847              		.syntax unified
 848              		.thumb
 849              		.thumb_func
 850              		.fpu softvfp
 851              		.type	HAL_ADC_ConfigChannel, %function
 852              	HAL_ADC_ConfigChannel:
 853              	.LFB83:
1993:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 854              		.loc 1 1993 0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 8
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 858              	.LVL45:
1995:src/stm32f1xx_hal_adc.c ****   
 859              		.loc 1 1995 0
 860 02fa 0023     		movs	r3, #0	@ tmp179,
1993:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 861              		.loc 1 1993 0
 862 02fc 73B5     		push	{r0, r1, r4, r5, r6, lr}	@
 863              	.LCFI9:
 864              		.cfi_def_cfa_offset 24
 865              		.cfi_offset 4, -16
 866              		.cfi_offset 5, -12
ARM GAS  /tmp/cceY5bqg.s 			page 60


 867              		.cfi_offset 6, -8
 868              		.cfi_offset 14, -4
1995:src/stm32f1xx_hal_adc.c ****   
 869              		.loc 1 1995 0
 870 02fe 0193     		str	r3, [sp, #4]	@ tmp179, wait_loop_index
2004:src/stm32f1xx_hal_adc.c ****   
 871              		.loc 1 2004 0
 872 0300 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2	@ hadc_10(D)->Lock, hadc_10(D)->Lock
 873 0304 012B     		cmp	r3, #1	@ hadc_10(D)->Lock,
 874 0306 74D0     		beq	.L107	@,
2004:src/stm32f1xx_hal_adc.c ****   
 875              		.loc 1 2004 0 is_stmt 0 discriminator 2
 876 0308 0123     		movs	r3, #1	@ tmp181,
2009:src/stm32f1xx_hal_adc.c ****   {
 877              		.loc 1 2009 0 is_stmt 1 discriminator 2
 878 030a 4D68     		ldr	r5, [r1, #4]	@ _14, sConfig_13(D)->Rank
2004:src/stm32f1xx_hal_adc.c ****   
 879              		.loc 1 2004 0 discriminator 2
 880 030c 80F82430 		strb	r3, [r0, #36]	@ tmp181, hadc_10(D)->Lock
2009:src/stm32f1xx_hal_adc.c ****   {
 881              		.loc 1 2009 0 discriminator 2
 882 0310 062D     		cmp	r5, #6	@ _14,
 883 0312 0268     		ldr	r2, [r0]	@ _15, hadc_10(D)->Instance
 884 0314 4FEA8503 		lsl	r3, r5, #2	@ tmp245, _14,
 885 0318 0C68     		ldr	r4, [r1]	@ _48, sConfig_13(D)->Channel
 886 031a 25D8     		bhi	.L96	@,
2011:src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
 887              		.loc 1 2011 0
 888 031c 2B44     		add	r3, r3, r5	@ tmp185, _14
 889 031e 1F25     		movs	r5, #31	@ tmp187,
 890 0320 566B     		ldr	r6, [r2, #52]	@ _16, _15->SQR3
 891 0322 053B     		subs	r3, r3, #5	@ _18, tmp185,
 892 0324 9D40     		lsls	r5, r5, r3	@ tmp186, tmp187, _18
 893 0326 26EA0505 		bic	r5, r6, r5	@ tmp189, _16, tmp186
 894 032a 04FA03F3 		lsl	r3, r4, r3	@ tmp190, _48, _18
 895 032e 2B43     		orrs	r3, r3, r5	@, _24, tmp190, tmp189
 896 0330 5363     		str	r3, [r2, #52]	@ _24, _15->SQR3
 897              	.L97:
2033:src/stm32f1xx_hal_adc.c ****   {
 898              		.loc 1 2033 0
 899 0332 092C     		cmp	r4, #9	@ _48,
 900 0334 4FEA4403 		lsl	r3, r4, #1	@ tmp247, _48,
 901 0338 8D68     		ldr	r5, [r1, #8]	@ sConfig_13(D)->SamplingTime, sConfig_13(D)->SamplingTime
 902 033a 2FD9     		bls	.L99	@,
2035:src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
 903              		.loc 1 2035 0
 904 033c 0726     		movs	r6, #7	@ tmp214,
 905 033e 2344     		add	r3, r3, r4	@ tmp212, _48
 906 0340 D168     		ldr	r1, [r2, #12]	@ _50, _49->SMPR1
 907              	.LVL46:
 908 0342 1E3B     		subs	r3, r3, #30	@ _52, tmp212,
 909 0344 9E40     		lsls	r6, r6, r3	@ tmp213, tmp214, _52
 910 0346 21EA0601 		bic	r1, r1, r6	@ tmp216, _50, tmp213
 911 034a 05FA03F3 		lsl	r3, r5, r3	@ tmp217, sConfig_13(D)->SamplingTime, _52
 912 034e 0B43     		orrs	r3, r3, r1	@, _58, tmp217, tmp216
 913 0350 D360     		str	r3, [r2, #12]	@ _58, _49->SMPR1
 914              	.L100:
ARM GAS  /tmp/cceY5bqg.s 			page 61


2048:src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 915              		.loc 1 2048 0
 916 0352 A4F11003 		sub	r3, r4, #16	@ tmp228, _48,
 917 0356 012B     		cmp	r3, #1	@ tmp228,
 918 0358 2BD9     		bls	.L101	@,
 919              	.L104:
1994:src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 920              		.loc 1 1994 0
 921 035a 0023     		movs	r3, #0	@ <retval>,
 922              	.LVL47:
 923              	.L102:
2082:src/stm32f1xx_hal_adc.c ****   
 924              		.loc 1 2082 0
 925 035c 0022     		movs	r2, #0	@ tmp241,
 926 035e 80F82420 		strb	r2, [r0, #36]	@ tmp241, hadc_10(D)->Lock
 927              	.LVL48:
 928              	.L95:
2086:src/stm32f1xx_hal_adc.c **** 
 929              		.loc 1 2086 0
 930 0362 1846     		mov	r0, r3	@, <retval>
 931              	.LVL49:
 932 0364 02B0     		add	sp, sp, #8	@,,
 933              	.LCFI10:
 934              		.cfi_remember_state
 935              		.cfi_def_cfa_offset 16
 936              		@ sp needed	@
 937 0366 70BD     		pop	{r4, r5, r6, pc}	@
 938              	.LVL50:
 939              	.L96:
 940              	.LCFI11:
 941              		.cfi_restore_state
2016:src/stm32f1xx_hal_adc.c ****   {
 942              		.loc 1 2016 0
 943 0368 0C2D     		cmp	r5, #12	@ _14,
 944 036a 0BD8     		bhi	.L98	@,
2018:src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
 945              		.loc 1 2018 0
 946 036c 2B44     		add	r3, r3, r5	@ tmp194, _14
 947 036e 1F25     		movs	r5, #31	@ tmp196,
 948 0370 166B     		ldr	r6, [r2, #48]	@ _27, _26->SQR2
 949 0372 233B     		subs	r3, r3, #35	@ _29, tmp194,
 950 0374 9D40     		lsls	r5, r5, r3	@ tmp195, tmp196, _29
 951 0376 26EA0505 		bic	r5, r6, r5	@ tmp198, _27, tmp195
 952 037a 04FA03F3 		lsl	r3, r4, r3	@ tmp199, _48, _29
 953 037e 2B43     		orrs	r3, r3, r5	@, _35, tmp199, tmp198
 954 0380 1363     		str	r3, [r2, #48]	@ _35, _26->SQR2
 955 0382 D6E7     		b	.L97	@
 956              	.L98:
2025:src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
 957              		.loc 1 2025 0
 958 0384 2B44     		add	r3, r3, r5	@ tmp203, _14
 959 0386 1F25     		movs	r5, #31	@ tmp205,
 960 0388 D66A     		ldr	r6, [r2, #44]	@ _38, _37->SQR1
 961 038a 413B     		subs	r3, r3, #65	@ _40, tmp203,
 962 038c 9D40     		lsls	r5, r5, r3	@ tmp204, tmp205, _40
 963 038e 26EA0505 		bic	r5, r6, r5	@ tmp207, _38, tmp204
 964 0392 04FA03F3 		lsl	r3, r4, r3	@ tmp208, _48, _40
ARM GAS  /tmp/cceY5bqg.s 			page 62


 965 0396 2B43     		orrs	r3, r3, r5	@, _46, tmp208, tmp207
 966 0398 D362     		str	r3, [r2, #44]	@ _46, _37->SQR1
 967 039a CAE7     		b	.L97	@
 968              	.L99:
2041:src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
 969              		.loc 1 2041 0
 970 039c 0726     		movs	r6, #7	@ tmp223,
 971 039e 1169     		ldr	r1, [r2, #16]	@ _61, _60->SMPR2
 972              	.LVL51:
 973 03a0 2344     		add	r3, r3, r4	@ tmp221, _48
 974 03a2 9E40     		lsls	r6, r6, r3	@ tmp222, tmp223, tmp221
 975 03a4 21EA0601 		bic	r1, r1, r6	@ tmp225, _61, tmp222
 976 03a8 05FA03F3 		lsl	r3, r5, r3	@ tmp226, sConfig_13(D)->SamplingTime, tmp221
 977 03ac 0B43     		orrs	r3, r3, r1	@, _68, tmp226, tmp225
 978 03ae 1361     		str	r3, [r2, #16]	@ _68, _60->SMPR2
 979 03b0 CFE7     		b	.L100	@
 980              	.L101:
2054:src/stm32f1xx_hal_adc.c ****     {
 981              		.loc 1 2054 0
 982 03b2 114B     		ldr	r3, .L109	@ tmp229,
 983 03b4 9A42     		cmp	r2, r3	@ _15, tmp229
 984 03b6 16D1     		bne	.L103	@,
2056:src/stm32f1xx_hal_adc.c ****       {
 985              		.loc 1 2056 0
 986 03b8 9368     		ldr	r3, [r2, #8]	@ _72, MEM[(struct ADC_TypeDef *)1073816576B].CR2
 987 03ba 1B02     		lsls	r3, r3, #8	@, _72,
 988 03bc CDD4     		bmi	.L104	@,
2058:src/stm32f1xx_hal_adc.c ****         
 989              		.loc 1 2058 0
 990 03be 9368     		ldr	r3, [r2, #8]	@ _74, MEM[(struct ADC_TypeDef *)1073816576B].CR2
2060:src/stm32f1xx_hal_adc.c ****         {
 991              		.loc 1 2060 0
 992 03c0 102C     		cmp	r4, #16	@ _48,
2058:src/stm32f1xx_hal_adc.c ****         
 993              		.loc 1 2058 0
 994 03c2 43F40003 		orr	r3, r3, #8388608	@ _75, _74,
 995 03c6 9360     		str	r3, [r2, #8]	@ _75, MEM[(struct ADC_TypeDef *)1073816576B].CR2
2060:src/stm32f1xx_hal_adc.c ****         {
 996              		.loc 1 2060 0
 997 03c8 C7D1     		bne	.L104	@,
2064:src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0U)
 998              		.loc 1 2064 0
 999 03ca 0C4B     		ldr	r3, .L109+4	@ tmp235,
 1000 03cc 0C4A     		ldr	r2, .L109+8	@ tmp239,
 1001 03ce 1B68     		ldr	r3, [r3]	@ SystemCoreClock, SystemCoreClock
 1002 03d0 B3FBF2F2 		udiv	r2, r3, r2	@ tmp238, SystemCoreClock, tmp239
 1003 03d4 0A23     		movs	r3, #10	@ tmp240,
 1004 03d6 5343     		muls	r3, r2, r3	@ wait_loop_index.10_79, tmp238
 1005              	.L108:
2067:src/stm32f1xx_hal_adc.c ****           }
 1006              		.loc 1 2067 0
 1007 03d8 0193     		str	r3, [sp, #4]	@ wait_loop_index.12_83, wait_loop_index
2065:src/stm32f1xx_hal_adc.c ****           {
 1008              		.loc 1 2065 0
 1009 03da 019B     		ldr	r3, [sp, #4]	@ wait_loop_index.13_81, wait_loop_index
 1010 03dc 002B     		cmp	r3, #0	@ wait_loop_index.13_81
 1011 03de BCD0     		beq	.L104	@
ARM GAS  /tmp/cceY5bqg.s 			page 63


2067:src/stm32f1xx_hal_adc.c ****           }
 1012              		.loc 1 2067 0
 1013 03e0 019B     		ldr	r3, [sp, #4]	@ wait_loop_index.11_82, wait_loop_index
 1014 03e2 013B     		subs	r3, r3, #1	@ wait_loop_index.12_83, wait_loop_index.11_82,
 1015 03e4 F8E7     		b	.L108	@
 1016              	.L103:
2075:src/stm32f1xx_hal_adc.c ****       
 1017              		.loc 1 2075 0
 1018 03e6 836A     		ldr	r3, [r0, #40]	@ _85, hadc_10(D)->State
 1019 03e8 43F02003 		orr	r3, r3, #32	@ _86, _85,
 1020 03ec 8362     		str	r3, [r0, #40]	@ _86, hadc_10(D)->State
 1021              	.LVL52:
2077:src/stm32f1xx_hal_adc.c ****     }
 1022              		.loc 1 2077 0
 1023 03ee 0123     		movs	r3, #1	@ <retval>,
 1024 03f0 B4E7     		b	.L102	@
 1025              	.LVL53:
 1026              	.L107:
2004:src/stm32f1xx_hal_adc.c ****   
 1027              		.loc 1 2004 0
 1028 03f2 0223     		movs	r3, #2	@ <retval>,
 1029 03f4 B5E7     		b	.L95	@
 1030              	.L110:
 1031 03f6 00BF     		.align	2
 1032              	.L109:
 1033 03f8 00240140 		.word	1073816576
 1034 03fc 00000000 		.word	SystemCoreClock
 1035 0400 40420F00 		.word	1000000
 1036              		.cfi_endproc
 1037              	.LFE83:
 1038              		.size	HAL_ADC_ConfigChannel, .-HAL_ADC_ConfigChannel
 1039              		.align	1
 1040              		.global	HAL_ADC_AnalogWDGConfig
 1041              		.syntax unified
 1042              		.thumb
 1043              		.thumb_func
 1044              		.fpu softvfp
 1045              		.type	HAL_ADC_AnalogWDGConfig, %function
 1046              	HAL_ADC_AnalogWDGConfig:
 1047              	.LFB84:
2103:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 1048              		.loc 1 2103 0
 1049              		.cfi_startproc
 1050              		@ args = 0, pretend = 0, frame = 0
 1051              		@ frame_needed = 0, uses_anonymous_args = 0
 1052              	.LVL54:
2119:src/stm32f1xx_hal_adc.c ****   
 1053              		.loc 1 2119 0
 1054 0404 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2	@ hadc_7(D)->Lock, hadc_7(D)->Lock
2103:src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 1055              		.loc 1 2103 0
 1056 0408 30B5     		push	{r4, r5, lr}	@
 1057              	.LCFI12:
 1058              		.cfi_def_cfa_offset 12
 1059              		.cfi_offset 4, -12
 1060              		.cfi_offset 5, -8
 1061              		.cfi_offset 14, -4
ARM GAS  /tmp/cceY5bqg.s 			page 64


2119:src/stm32f1xx_hal_adc.c ****   
 1062              		.loc 1 2119 0
 1063 040a 012B     		cmp	r3, #1	@ hadc_7(D)->Lock,
 1064 040c 1DD0     		beq	.L115	@,
2119:src/stm32f1xx_hal_adc.c ****   
 1065              		.loc 1 2119 0 is_stmt 0 discriminator 2
 1066 040e 0123     		movs	r3, #1	@ tmp131,
2111:src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 1067              		.loc 1 2111 0 is_stmt 1 discriminator 2
 1068 0410 0A68     		ldr	r2, [r1]	@ _6, AnalogWDGConfig_5(D)->WatchdogMode
2119:src/stm32f1xx_hal_adc.c ****   
 1069              		.loc 1 2119 0 discriminator 2
 1070 0412 80F82430 		strb	r3, [r0, #36]	@ tmp131, hadc_7(D)->Lock
2124:src/stm32f1xx_hal_adc.c ****   {
 1071              		.loc 1 2124 0 discriminator 2
 1072 0416 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2	@ AnalogWDGConfig_5(D)->ITMode, AnalogWDGConfig_5(D)->ITMode
 1073 0418 012B     		cmp	r3, #1	@ AnalogWDGConfig_5(D)->ITMode,
 1074 041a 0368     		ldr	r3, [r0]	@ _19, hadc_7(D)->Instance
2127:src/stm32f1xx_hal_adc.c ****   }
 1075              		.loc 1 2127 0 discriminator 2
 1076 041c 5C68     		ldr	r4, [r3, #4]	@ _12,
 1077 041e 0CBF     		ite	eq
 1078 0420 44F04004 		orreq	r4, r4, #64	@ _13, _12,
2132:src/stm32f1xx_hal_adc.c ****   }
 1079              		.loc 1 2132 0 discriminator 2
 1080 0424 24F04004 		bicne	r4, r4, #64	@ _17, _16,
 1081 0428 5C60     		str	r4, [r3, #4]	@ _17,
2140:src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDSGL |
 1082              		.loc 1 2140 0 discriminator 2
 1083 042a 4C68     		ldr	r4, [r1, #4]	@ AnalogWDGConfig_5(D)->Channel, AnalogWDGConfig_5(D)->Channel
 1084 042c 5D68     		ldr	r5, [r3, #4]	@ _20, _19->CR1
 1085 042e 2243     		orrs	r2, r2, r4	@, tmp134, _6, AnalogWDGConfig_5(D)->Channel
 1086 0430 074C     		ldr	r4, .L117	@ tmp137,
 1087 0432 2C40     		ands	r4, r4, r5	@, tmp137, tmp137, _20
 1088 0434 2243     		orrs	r2, r2, r4	@, _24, tmp134, tmp137
 1089 0436 5A60     		str	r2, [r3, #4]	@ _24, _19->CR1
2149:src/stm32f1xx_hal_adc.c ****   
 1090              		.loc 1 2149 0 discriminator 2
 1091 0438 CA68     		ldr	r2, [r1, #12]	@ _26, AnalogWDGConfig_5(D)->HighThreshold
 1092 043a 5A62     		str	r2, [r3, #36]	@ _26, _19->HTR
2152:src/stm32f1xx_hal_adc.c **** 
 1093              		.loc 1 2152 0 discriminator 2
 1094 043c 0A69     		ldr	r2, [r1, #16]	@ _28, AnalogWDGConfig_5(D)->LowThreshold
 1095 043e 9A62     		str	r2, [r3, #40]	@ _28, _19->LTR
2155:src/stm32f1xx_hal_adc.c ****   
 1096              		.loc 1 2155 0 discriminator 2
 1097 0440 0023     		movs	r3, #0	@ tmp138,
 1098 0442 80F82430 		strb	r3, [r0, #36]	@ tmp138, hadc_7(D)->Lock
2158:src/stm32f1xx_hal_adc.c **** }
 1099              		.loc 1 2158 0 discriminator 2
 1100 0446 1846     		mov	r0, r3	@ <retval>, tmp138
 1101              	.LVL55:
 1102 0448 30BD     		pop	{r4, r5, pc}	@
 1103              	.LVL56:
 1104              	.L115:
2119:src/stm32f1xx_hal_adc.c ****   
 1105              		.loc 1 2119 0
ARM GAS  /tmp/cceY5bqg.s 			page 65


 1106 044a 0220     		movs	r0, #2	@ <retval>,
 1107              	.LVL57:
2159:src/stm32f1xx_hal_adc.c **** 
 1108              		.loc 1 2159 0
 1109 044c 30BD     		pop	{r4, r5, pc}	@
 1110              	.L118:
 1111 044e 00BF     		.align	2
 1112              	.L117:
 1113 0450 E0FD3FFF 		.word	-12583456
 1114              		.cfi_endproc
 1115              	.LFE84:
 1116              		.size	HAL_ADC_AnalogWDGConfig, .-HAL_ADC_AnalogWDGConfig
 1117              		.align	1
 1118              		.global	HAL_ADC_GetState
 1119              		.syntax unified
 1120              		.thumb
 1121              		.thumb_func
 1122              		.fpu softvfp
 1123              		.type	HAL_ADC_GetState, %function
 1124              	HAL_ADC_GetState:
 1125              	.LFB85:
2190:src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
 1126              		.loc 1 2190 0
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 0
 1129              		@ frame_needed = 0, uses_anonymous_args = 0
 1130              		@ link register save eliminated.
 1131              	.LVL58:
2192:src/stm32f1xx_hal_adc.c **** }
 1132              		.loc 1 2192 0
 1133 0454 806A     		ldr	r0, [r0, #40]	@ <retval>, hadc_2(D)->State
 1134              	.LVL59:
2193:src/stm32f1xx_hal_adc.c **** 
 1135              		.loc 1 2193 0
 1136 0456 7047     		bx	lr	@
 1137              		.cfi_endproc
 1138              	.LFE85:
 1139              		.size	HAL_ADC_GetState, .-HAL_ADC_GetState
 1140              		.align	1
 1141              		.global	HAL_ADC_GetError
 1142              		.syntax unified
 1143              		.thumb
 1144              		.thumb_func
 1145              		.fpu softvfp
 1146              		.type	HAL_ADC_GetError, %function
 1147              	HAL_ADC_GetError:
 1148              	.LFB86:
2201:src/stm32f1xx_hal_adc.c ****   return hadc->ErrorCode;
 1149              		.loc 1 2201 0
 1150              		.cfi_startproc
 1151              		@ args = 0, pretend = 0, frame = 0
 1152              		@ frame_needed = 0, uses_anonymous_args = 0
 1153              		@ link register save eliminated.
 1154              	.LVL60:
2202:src/stm32f1xx_hal_adc.c **** }
 1155              		.loc 1 2202 0
 1156 0458 C06A     		ldr	r0, [r0, #44]	@ <retval>, hadc_2(D)->ErrorCode
ARM GAS  /tmp/cceY5bqg.s 			page 66


 1157              	.LVL61:
2203:src/stm32f1xx_hal_adc.c **** 
 1158              		.loc 1 2203 0
 1159 045a 7047     		bx	lr	@
 1160              		.cfi_endproc
 1161              	.LFE86:
 1162              		.size	HAL_ADC_GetError, .-HAL_ADC_GetError
 1163              		.align	1
 1164              		.global	ADC_Enable
 1165              		.syntax unified
 1166              		.thumb
 1167              		.thumb_func
 1168              		.fpu softvfp
 1169              		.type	ADC_Enable, %function
 1170              	ADC_Enable:
 1171              	.LFB87:
2225:src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 1172              		.loc 1 2225 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 8
 1175              		@ frame_needed = 0, uses_anonymous_args = 0
 1176              	.LVL62:
2227:src/stm32f1xx_hal_adc.c ****   
 1177              		.loc 1 2227 0
 1178 045c 0023     		movs	r3, #0	@ tmp132,
2225:src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 1179              		.loc 1 2225 0
 1180 045e 73B5     		push	{r0, r1, r4, r5, r6, lr}	@
 1181              	.LCFI13:
 1182              		.cfi_def_cfa_offset 24
 1183              		.cfi_offset 4, -16
 1184              		.cfi_offset 5, -12
 1185              		.cfi_offset 6, -8
 1186              		.cfi_offset 14, -4
2227:src/stm32f1xx_hal_adc.c ****   
 1187              		.loc 1 2227 0
 1188 0460 0193     		str	r3, [sp, #4]	@ tmp132, wait_loop_index
2233:src/stm32f1xx_hal_adc.c ****   {
 1189              		.loc 1 2233 0
 1190 0462 0368     		ldr	r3, [r0]	@ _8, hadc_7(D)->Instance
2225:src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 1191              		.loc 1 2225 0
 1192 0464 0446     		mov	r4, r0	@ hadc, hadc
2233:src/stm32f1xx_hal_adc.c ****   {
 1193              		.loc 1 2233 0
 1194 0466 9A68     		ldr	r2, [r3, #8]	@ _9, _8->CR2
 1195 0468 D207     		lsls	r2, r2, #31	@, _9,
 1196 046a 02D5     		bpl	.L122	@,
 1197              	.LVL63:
 1198              	.L128:
2269:src/stm32f1xx_hal_adc.c **** }
 1199              		.loc 1 2269 0
 1200 046c 0020     		movs	r0, #0	@ <retval>,
 1201              	.L123:
2270:src/stm32f1xx_hal_adc.c **** 
 1202              		.loc 1 2270 0
 1203 046e 02B0     		add	sp, sp, #8	@,,
ARM GAS  /tmp/cceY5bqg.s 			page 67


 1204              	.LCFI14:
 1205              		.cfi_remember_state
 1206              		.cfi_def_cfa_offset 16
 1207              		@ sp needed	@
 1208 0470 70BD     		pop	{r4, r5, r6, pc}	@
 1209              	.LVL64:
 1210              	.L122:
 1211              	.LCFI15:
 1212              		.cfi_restore_state
2236:src/stm32f1xx_hal_adc.c ****     
 1213              		.loc 1 2236 0
 1214 0472 9A68     		ldr	r2, [r3, #8]	@ _13, _8->CR2
 1215 0474 42F00102 		orr	r2, r2, #1	@ _14, _13,
 1216 0478 9A60     		str	r2, [r3, #8]	@ _14, _8->CR2
2240:src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0U)
 1217              		.loc 1 2240 0
 1218 047a 124B     		ldr	r3, .L131	@ tmp134,
 1219 047c 124A     		ldr	r2, .L131+4	@ tmp136,
 1220 047e 1B68     		ldr	r3, [r3]	@ SystemCoreClock, SystemCoreClock
 1221 0480 B3FBF2F3 		udiv	r3, r3, r2	@ wait_loop_index.15_17, SystemCoreClock, tmp136
 1222              	.L130:
2243:src/stm32f1xx_hal_adc.c ****     }
 1223              		.loc 1 2243 0
 1224 0484 0193     		str	r3, [sp, #4]	@ wait_loop_index.17_21, wait_loop_index
2241:src/stm32f1xx_hal_adc.c ****     {
 1225              		.loc 1 2241 0
 1226 0486 019B     		ldr	r3, [sp, #4]	@ wait_loop_index.18_19, wait_loop_index
 1227 0488 C3B9     		cbnz	r3, .L125	@ wait_loop_index.18_19,
2247:src/stm32f1xx_hal_adc.c **** 
 1228              		.loc 1 2247 0
 1229 048a FFF7FEFF 		bl	HAL_GetTick	@
 1230              	.LVL65:
 1231 048e 0646     		mov	r6, r0	@ tickstart,
 1232              	.LVL66:
 1233              	.L126:
2250:src/stm32f1xx_hal_adc.c ****     {
 1234              		.loc 1 2250 0
 1235 0490 2368     		ldr	r3, [r4]	@ _25, hadc_7(D)->Instance
 1236 0492 9D68     		ldr	r5, [r3, #8]	@ _26, _25->CR2
 1237 0494 15F00105 		ands	r5, r5, #1	@ tmp140, _26,
 1238 0498 E8D1     		bne	.L128	@,
2252:src/stm32f1xx_hal_adc.c ****       {
 1239              		.loc 1 2252 0
 1240 049a FFF7FEFF 		bl	HAL_GetTick	@
 1241              	.LVL67:
 1242 049e 801B     		subs	r0, r0, r6	@ tmp137,, tickstart
 1243 04a0 0228     		cmp	r0, #2	@ tmp137,
 1244 04a2 F5D9     		bls	.L126	@,
 1245              	.LVL68:
 1246              	.LBB4:
 1247              	.LBB5:
2255:src/stm32f1xx_hal_adc.c ****       
 1248              		.loc 1 2255 0
 1249 04a4 A36A     		ldr	r3, [r4, #40]	@ _31, hadc_7(D)->State
2261:src/stm32f1xx_hal_adc.c ****       
 1250              		.loc 1 2261 0
 1251 04a6 84F82450 		strb	r5, [r4, #36]	@ tmp140, hadc_7(D)->Lock
ARM GAS  /tmp/cceY5bqg.s 			page 68


 1252              	.LVL69:
2255:src/stm32f1xx_hal_adc.c ****       
 1253              		.loc 1 2255 0
 1254 04aa 43F01003 		orr	r3, r3, #16	@ _32, _31,
 1255 04ae A362     		str	r3, [r4, #40]	@ _32, hadc_7(D)->State
2258:src/stm32f1xx_hal_adc.c ****         
 1256              		.loc 1 2258 0
 1257 04b0 E36A     		ldr	r3, [r4, #44]	@ _33, hadc_7(D)->ErrorCode
2261:src/stm32f1xx_hal_adc.c ****       
 1258              		.loc 1 2261 0
 1259 04b2 0120     		movs	r0, #1	@ <retval>,
2258:src/stm32f1xx_hal_adc.c ****         
 1260              		.loc 1 2258 0
 1261 04b4 43F00103 		orr	r3, r3, #1	@ _34, _33,
 1262 04b8 E362     		str	r3, [r4, #44]	@ _34, hadc_7(D)->ErrorCode
 1263 04ba D8E7     		b	.L123	@
 1264              	.LVL70:
 1265              	.L125:
 1266              	.LBE5:
 1267              	.LBE4:
2243:src/stm32f1xx_hal_adc.c ****     }
 1268              		.loc 1 2243 0
 1269 04bc 019B     		ldr	r3, [sp, #4]	@ wait_loop_index.16_20, wait_loop_index
 1270 04be 013B     		subs	r3, r3, #1	@ wait_loop_index.17_21, wait_loop_index.16_20,
 1271 04c0 E0E7     		b	.L130	@
 1272              	.L132:
 1273 04c2 00BF     		.align	2
 1274              	.L131:
 1275 04c4 00000000 		.word	SystemCoreClock
 1276 04c8 40420F00 		.word	1000000
 1277              		.cfi_endproc
 1278              	.LFE87:
 1279              		.size	ADC_Enable, .-ADC_Enable
 1280              		.align	1
 1281              		.global	HAL_ADC_Start
 1282              		.syntax unified
 1283              		.thumb
 1284              		.thumb_func
 1285              		.fpu softvfp
 1286              		.type	HAL_ADC_Start, %function
 1287              	HAL_ADC_Start:
 1288              	.LFB69:
1047:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1289              		.loc 1 1047 0
 1290              		.cfi_startproc
 1291              		@ args = 0, pretend = 0, frame = 0
 1292              		@ frame_needed = 0, uses_anonymous_args = 0
 1293              	.LVL71:
1054:src/stm32f1xx_hal_adc.c ****    
 1294              		.loc 1 1054 0
 1295 04cc 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2	@ hadc_6(D)->Lock, hadc_6(D)->Lock
1047:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1296              		.loc 1 1047 0
 1297 04d0 10B5     		push	{r4, lr}	@
 1298              	.LCFI16:
 1299              		.cfi_def_cfa_offset 8
 1300              		.cfi_offset 4, -8
ARM GAS  /tmp/cceY5bqg.s 			page 69


 1301              		.cfi_offset 14, -4
1054:src/stm32f1xx_hal_adc.c ****    
 1302              		.loc 1 1054 0
 1303 04d2 012B     		cmp	r3, #1	@ hadc_6(D)->Lock,
1047:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1304              		.loc 1 1047 0
 1305 04d4 0446     		mov	r4, r0	@ hadc, hadc
1054:src/stm32f1xx_hal_adc.c ****    
 1306              		.loc 1 1054 0
 1307 04d6 54D0     		beq	.L145	@,
1054:src/stm32f1xx_hal_adc.c ****    
 1308              		.loc 1 1054 0 is_stmt 0 discriminator 2
 1309 04d8 0123     		movs	r3, #1	@ tmp146,
 1310 04da 80F82430 		strb	r3, [r0, #36]	@ tmp146, hadc_6(D)->Lock
1057:src/stm32f1xx_hal_adc.c ****   
 1311              		.loc 1 1057 0 is_stmt 1 discriminator 2
 1312 04de FFF7FEFF 		bl	ADC_Enable	@
 1313              	.LVL72:
1060:src/stm32f1xx_hal_adc.c ****   {
 1314              		.loc 1 1060 0 discriminator 2
 1315 04e2 0028     		cmp	r0, #0	@ <retval>
 1316 04e4 49D1     		bne	.L135	@
1065:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC,
 1317              		.loc 1 1065 0
 1318 04e6 A36A     		ldr	r3, [r4, #40]	@ _11, hadc_6(D)->State
1072:src/stm32f1xx_hal_adc.c ****     {
 1319              		.loc 1 1072 0
 1320 04e8 274A     		ldr	r2, .L153	@ tmp151,
1065:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC,
 1321              		.loc 1 1065 0
 1322 04ea 23F44073 		bic	r3, r3, #768	@ tmp149, _11,
 1323 04ee 23F00103 		bic	r3, r3, #1	@ tmp149, tmp149,
 1324 04f2 43F48073 		orr	r3, r3, #256	@ _13, tmp149,
 1325 04f6 A362     		str	r3, [r4, #40]	@ _13, hadc_6(D)->State
1072:src/stm32f1xx_hal_adc.c ****     {
 1326              		.loc 1 1072 0
 1327 04f8 2368     		ldr	r3, [r4]	@ _15, hadc_6(D)->Instance
 1328 04fa 9342     		cmp	r3, r2	@ _15, tmp151
 1329 04fc 04D1     		bne	.L136	@,
1072:src/stm32f1xx_hal_adc.c ****     {
 1330              		.loc 1 1072 0 is_stmt 0 discriminator 1
 1331 04fe 2349     		ldr	r1, .L153+4	@ tmp152,
 1332 0500 4A68     		ldr	r2, [r1, #4]	@ _16, MEM[(struct ADC_TypeDef *)1073816576B].CR1
 1333 0502 12F4702F 		tst	r2, #983040	@ _16,
 1334 0506 2ED1     		bne	.L137	@,
 1335              	.L136:
1075:src/stm32f1xx_hal_adc.c ****       
 1336              		.loc 1 1075 0 is_stmt 1
 1337 0508 A26A     		ldr	r2, [r4, #40]	@ _27,
 1338 050a 22F48012 		bic	r2, r2, #1048576	@ _28, _27,
 1339 050e A262     		str	r2, [r4, #40]	@ _28, hadc_6(D)->State
1079:src/stm32f1xx_hal_adc.c ****       {
 1340              		.loc 1 1079 0
 1341 0510 5A68     		ldr	r2, [r3, #4]	@ _30, _15->CR1
 1342              	.L152:
1091:src/stm32f1xx_hal_adc.c ****       {
 1343              		.loc 1 1091 0
ARM GAS  /tmp/cceY5bqg.s 			page 70


 1344 0512 5205     		lsls	r2, r2, #21	@, _21,
1093:src/stm32f1xx_hal_adc.c ****       }
 1345              		.loc 1 1093 0
 1346 0514 41BF     		itttt	mi
 1347 0516 A26A     		ldrmi	r2, [r4, #40]	@ _23,
 1348 0518 22F44052 		bicmi	r2, r2, #12288	@ tmp158, _23,
 1349 051c 42F48052 		orrmi	r2, r2, #4096	@ _25, tmp158,
 1350 0520 A262     		strmi	r2, [r4, #40]	@ _25,
1098:src/stm32f1xx_hal_adc.c ****     {
 1351              		.loc 1 1098 0
 1352 0522 A26A     		ldr	r2, [r4, #40]	@ _36, hadc_6(D)->State
 1353 0524 12F48052 		ands	r2, r2, #4096	@ tmp159, _36,
1101:src/stm32f1xx_hal_adc.c ****     }
 1354              		.loc 1 1101 0
 1355 0528 1CBF     		itt	ne
 1356 052a E26A     		ldrne	r2, [r4, #44]	@ _38, hadc_6(D)->ErrorCode
 1357 052c 22F00602 		bicne	r2, r2, #6	@ _39, _38,
1106:src/stm32f1xx_hal_adc.c ****     }
 1358              		.loc 1 1106 0
 1359 0530 E262     		str	r2, [r4, #44]	@ tmp159,
1112:src/stm32f1xx_hal_adc.c ****   
 1360              		.loc 1 1112 0
 1361 0532 0022     		movs	r2, #0	@ tmp161,
 1362 0534 84F82420 		strb	r2, [r4, #36]	@ tmp161, hadc_6(D)->Lock
1116:src/stm32f1xx_hal_adc.c ****     
 1363              		.loc 1 1116 0
 1364 0538 6FF00202 		mvn	r2, #2	@ tmp163,
 1365 053c 1A60     		str	r2, [r3]	@ tmp163, _15->SR
1128:src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1366              		.loc 1 1128 0
 1367 053e 9A68     		ldr	r2, [r3, #8]	@ _44, _15->CR2
 1368 0540 02F46022 		and	r2, r2, #917504	@ tmp164, _44,
 1369 0544 B2F5602F 		cmp	r2, #917504	@ tmp164,
 1370 0548 13D1     		bne	.L143	@,
1128:src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1371              		.loc 1 1128 0 is_stmt 0 discriminator 1
 1372 054a 0F4A     		ldr	r2, .L153	@ tmp165,
 1373 054c 9342     		cmp	r3, r2	@ _15, tmp165
 1374 054e 05D1     		bne	.L144	@,
1129:src/stm32f1xx_hal_adc.c ****     {
 1375              		.loc 1 1129 0 is_stmt 1 discriminator 2
 1376 0550 A2F58062 		sub	r2, r2, #1024	@ tmp166, tmp166,
 1377 0554 5268     		ldr	r2, [r2, #4]	@ _46, MEM[(struct ADC_TypeDef *)1073816576B].CR1
1128:src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1378              		.loc 1 1128 0 discriminator 2
 1379 0556 12F4702F 		tst	r2, #983040	@ _46,
 1380 055a 0AD1     		bne	.L143	@,
 1381              	.L144:
1132:src/stm32f1xx_hal_adc.c ****     }
 1382              		.loc 1 1132 0
 1383 055c 9A68     		ldr	r2, [r3, #8]	@ _48, _15->CR2
 1384 055e 42F4A002 		orr	r2, r2, #5242880	@ _49, _48,
 1385              	.L150:
1137:src/stm32f1xx_hal_adc.c ****     }
 1386              		.loc 1 1137 0
 1387 0562 9A60     		str	r2, [r3, #8]	@ _52,
 1388 0564 10BD     		pop	{r4, pc}	@
ARM GAS  /tmp/cceY5bqg.s 			page 71


 1389              	.LVL73:
 1390              	.L137:
1087:src/stm32f1xx_hal_adc.c ****       
 1391              		.loc 1 1087 0
 1392 0566 A26A     		ldr	r2, [r4, #40]	@ _18,
 1393 0568 42F48012 		orr	r2, r2, #1048576	@ _19, _18,
 1394 056c A262     		str	r2, [r4, #40]	@ _19, hadc_6(D)->State
1091:src/stm32f1xx_hal_adc.c ****       {
 1395              		.loc 1 1091 0
 1396 056e 4A68     		ldr	r2, [r1, #4]	@ _21, MEM[(struct ADC_TypeDef *)1073816576B].CR1
 1397 0570 CFE7     		b	.L152	@
 1398              	.L143:
1137:src/stm32f1xx_hal_adc.c ****     }
 1399              		.loc 1 1137 0
 1400 0572 9A68     		ldr	r2, [r3, #8]	@ _51, _15->CR2
 1401 0574 42F48012 		orr	r2, r2, #1048576	@ _52, _51,
 1402 0578 F3E7     		b	.L150	@
 1403              	.L135:
1143:src/stm32f1xx_hal_adc.c ****   }
 1404              		.loc 1 1143 0
 1405 057a 0023     		movs	r3, #0	@ tmp168,
 1406 057c 84F82430 		strb	r3, [r4, #36]	@ tmp168, hadc_6(D)->Lock
 1407 0580 10BD     		pop	{r4, pc}	@
 1408              	.LVL74:
 1409              	.L145:
1054:src/stm32f1xx_hal_adc.c ****    
 1410              		.loc 1 1054 0
 1411 0582 0220     		movs	r0, #2	@ <retval>,
 1412              	.LVL75:
1148:src/stm32f1xx_hal_adc.c **** 
 1413              		.loc 1 1148 0
 1414 0584 10BD     		pop	{r4, pc}	@
 1415              	.LVL76:
 1416              	.L154:
 1417 0586 00BF     		.align	2
 1418              	.L153:
 1419 0588 00280140 		.word	1073817600
 1420 058c 00240140 		.word	1073816576
 1421              		.cfi_endproc
 1422              	.LFE69:
 1423              		.size	HAL_ADC_Start, .-HAL_ADC_Start
 1424              		.align	1
 1425              		.global	HAL_ADC_Start_IT
 1426              		.syntax unified
 1427              		.thumb
 1428              		.thumb_func
 1429              		.fpu softvfp
 1430              		.type	HAL_ADC_Start_IT, %function
 1431              	HAL_ADC_Start_IT:
 1432              	.LFB73:
1384:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1433              		.loc 1 1384 0
 1434              		.cfi_startproc
 1435              		@ args = 0, pretend = 0, frame = 0
 1436              		@ frame_needed = 0, uses_anonymous_args = 0
 1437              	.LVL77:
1391:src/stm32f1xx_hal_adc.c ****     
ARM GAS  /tmp/cceY5bqg.s 			page 72


 1438              		.loc 1 1391 0
 1439 0590 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2	@ hadc_6(D)->Lock, hadc_6(D)->Lock
1384:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1440              		.loc 1 1384 0
 1441 0594 10B5     		push	{r4, lr}	@
 1442              	.LCFI17:
 1443              		.cfi_def_cfa_offset 8
 1444              		.cfi_offset 4, -8
 1445              		.cfi_offset 14, -4
1391:src/stm32f1xx_hal_adc.c ****     
 1446              		.loc 1 1391 0
 1447 0596 012B     		cmp	r3, #1	@ hadc_6(D)->Lock,
1384:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1448              		.loc 1 1384 0
 1449 0598 0446     		mov	r4, r0	@ hadc, hadc
1391:src/stm32f1xx_hal_adc.c ****     
 1450              		.loc 1 1391 0
 1451 059a 58D0     		beq	.L167	@,
1391:src/stm32f1xx_hal_adc.c ****     
 1452              		.loc 1 1391 0 is_stmt 0 discriminator 2
 1453 059c 0123     		movs	r3, #1	@ tmp148,
 1454 059e 80F82430 		strb	r3, [r0, #36]	@ tmp148, hadc_6(D)->Lock
1394:src/stm32f1xx_hal_adc.c ****   
 1455              		.loc 1 1394 0 is_stmt 1 discriminator 2
 1456 05a2 FFF7FEFF 		bl	ADC_Enable	@
 1457              	.LVL78:
1397:src/stm32f1xx_hal_adc.c ****   {
 1458              		.loc 1 1397 0 discriminator 2
 1459 05a6 0028     		cmp	r0, #0	@ <retval>
 1460 05a8 4DD1     		bne	.L157	@
1402:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC
 1461              		.loc 1 1402 0
 1462 05aa A36A     		ldr	r3, [r4, #40]	@ _11, hadc_6(D)->State
1409:src/stm32f1xx_hal_adc.c ****     {
 1463              		.loc 1 1409 0
 1464 05ac 294A     		ldr	r2, .L175	@ tmp153,
1402:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC
 1465              		.loc 1 1402 0
 1466 05ae 23F47063 		bic	r3, r3, #3840	@ tmp151, _11,
 1467 05b2 23F00103 		bic	r3, r3, #1	@ tmp151, tmp151,
 1468 05b6 43F48073 		orr	r3, r3, #256	@ _13, tmp151,
 1469 05ba A362     		str	r3, [r4, #40]	@ _13, hadc_6(D)->State
1409:src/stm32f1xx_hal_adc.c ****     {
 1470              		.loc 1 1409 0
 1471 05bc 2368     		ldr	r3, [r4]	@ _15, hadc_6(D)->Instance
 1472 05be 9342     		cmp	r3, r2	@ _15, tmp153
 1473 05c0 04D1     		bne	.L158	@,
1409:src/stm32f1xx_hal_adc.c ****     {
 1474              		.loc 1 1409 0 is_stmt 0 discriminator 1
 1475 05c2 2549     		ldr	r1, .L175+4	@ tmp154,
 1476 05c4 4A68     		ldr	r2, [r1, #4]	@ _16, MEM[(struct ADC_TypeDef *)1073816576B].CR1
 1477 05c6 12F4702F 		tst	r2, #983040	@ _16,
 1478 05ca 32D1     		bne	.L159	@,
 1479              	.L158:
1412:src/stm32f1xx_hal_adc.c ****       
 1480              		.loc 1 1412 0 is_stmt 1
 1481 05cc A26A     		ldr	r2, [r4, #40]	@ _27,
ARM GAS  /tmp/cceY5bqg.s 			page 73


 1482 05ce 22F48012 		bic	r2, r2, #1048576	@ _28, _27,
 1483 05d2 A262     		str	r2, [r4, #40]	@ _28, hadc_6(D)->State
1416:src/stm32f1xx_hal_adc.c ****       {
 1484              		.loc 1 1416 0
 1485 05d4 5A68     		ldr	r2, [r3, #4]	@ _30, _15->CR1
 1486              	.L174:
1428:src/stm32f1xx_hal_adc.c ****       {
 1487              		.loc 1 1428 0
 1488 05d6 5205     		lsls	r2, r2, #21	@, _21,
1430:src/stm32f1xx_hal_adc.c ****       }
 1489              		.loc 1 1430 0
 1490 05d8 41BF     		itttt	mi
 1491 05da A26A     		ldrmi	r2, [r4, #40]	@ _23,
 1492 05dc 22F44052 		bicmi	r2, r2, #12288	@ tmp160, _23,
 1493 05e0 42F48052 		orrmi	r2, r2, #4096	@ _25, tmp160,
 1494 05e4 A262     		strmi	r2, [r4, #40]	@ _25,
1435:src/stm32f1xx_hal_adc.c ****     {
 1495              		.loc 1 1435 0
 1496 05e6 A26A     		ldr	r2, [r4, #40]	@ _36, hadc_6(D)->State
 1497 05e8 12F48052 		ands	r2, r2, #4096	@ tmp161, _36,
1438:src/stm32f1xx_hal_adc.c ****     }
 1498              		.loc 1 1438 0
 1499 05ec 1CBF     		itt	ne
 1500 05ee E26A     		ldrne	r2, [r4, #44]	@ _38, hadc_6(D)->ErrorCode
 1501 05f0 22F00602 		bicne	r2, r2, #6	@ _39, _38,
1443:src/stm32f1xx_hal_adc.c ****     }
 1502              		.loc 1 1443 0
 1503 05f4 E262     		str	r2, [r4, #44]	@ tmp161,
1449:src/stm32f1xx_hal_adc.c ****     
 1504              		.loc 1 1449 0
 1505 05f6 0022     		movs	r2, #0	@ tmp163,
 1506 05f8 84F82420 		strb	r2, [r4, #36]	@ tmp163, hadc_6(D)->Lock
1453:src/stm32f1xx_hal_adc.c ****     
 1507              		.loc 1 1453 0
 1508 05fc 6FF00202 		mvn	r2, #2	@ tmp165,
 1509 0600 1A60     		str	r2, [r3]	@ tmp165, _15->SR
1456:src/stm32f1xx_hal_adc.c ****     
 1510              		.loc 1 1456 0
 1511 0602 5A68     		ldr	r2, [r3, #4]	@ _44, _15->CR1
 1512 0604 42F02002 		orr	r2, r2, #32	@ _45, _44,
 1513 0608 5A60     		str	r2, [r3, #4]	@ _45, _15->CR1
1465:src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1514              		.loc 1 1465 0
 1515 060a 9A68     		ldr	r2, [r3, #8]	@ _47, _15->CR2
 1516 060c 02F46022 		and	r2, r2, #917504	@ tmp166, _47,
 1517 0610 B2F5602F 		cmp	r2, #917504	@ tmp166,
 1518 0614 13D1     		bne	.L165	@,
1465:src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1519              		.loc 1 1465 0 is_stmt 0 discriminator 1
 1520 0616 0F4A     		ldr	r2, .L175	@ tmp167,
 1521 0618 9342     		cmp	r3, r2	@ _15, tmp167
 1522 061a 05D1     		bne	.L166	@,
1466:src/stm32f1xx_hal_adc.c ****     {
 1523              		.loc 1 1466 0 is_stmt 1 discriminator 2
 1524 061c A2F58062 		sub	r2, r2, #1024	@ tmp168, tmp168,
 1525 0620 5268     		ldr	r2, [r2, #4]	@ _49, MEM[(struct ADC_TypeDef *)1073816576B].CR1
1465:src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
ARM GAS  /tmp/cceY5bqg.s 			page 74


 1526              		.loc 1 1465 0 discriminator 2
 1527 0622 12F4702F 		tst	r2, #983040	@ _49,
 1528 0626 0AD1     		bne	.L165	@,
 1529              	.L166:
1469:src/stm32f1xx_hal_adc.c ****     }
 1530              		.loc 1 1469 0
 1531 0628 9A68     		ldr	r2, [r3, #8]	@ _51, _15->CR2
 1532 062a 42F4A002 		orr	r2, r2, #5242880	@ _52, _51,
 1533              	.L172:
1474:src/stm32f1xx_hal_adc.c ****     }
 1534              		.loc 1 1474 0
 1535 062e 9A60     		str	r2, [r3, #8]	@ _55,
 1536 0630 10BD     		pop	{r4, pc}	@
 1537              	.LVL79:
 1538              	.L159:
1424:src/stm32f1xx_hal_adc.c ****       
 1539              		.loc 1 1424 0
 1540 0632 A26A     		ldr	r2, [r4, #40]	@ _18,
 1541 0634 42F48012 		orr	r2, r2, #1048576	@ _19, _18,
 1542 0638 A262     		str	r2, [r4, #40]	@ _19, hadc_6(D)->State
1428:src/stm32f1xx_hal_adc.c ****       {
 1543              		.loc 1 1428 0
 1544 063a 4A68     		ldr	r2, [r1, #4]	@ _21, MEM[(struct ADC_TypeDef *)1073816576B].CR1
 1545 063c CBE7     		b	.L174	@
 1546              	.L165:
1474:src/stm32f1xx_hal_adc.c ****     }
 1547              		.loc 1 1474 0
 1548 063e 9A68     		ldr	r2, [r3, #8]	@ _54, _15->CR2
 1549 0640 42F48012 		orr	r2, r2, #1048576	@ _55, _54,
 1550 0644 F3E7     		b	.L172	@
 1551              	.L157:
1480:src/stm32f1xx_hal_adc.c ****   }
 1552              		.loc 1 1480 0
 1553 0646 0023     		movs	r3, #0	@ tmp170,
 1554 0648 84F82430 		strb	r3, [r4, #36]	@ tmp170, hadc_6(D)->Lock
 1555 064c 10BD     		pop	{r4, pc}	@
 1556              	.LVL80:
 1557              	.L167:
1391:src/stm32f1xx_hal_adc.c ****     
 1558              		.loc 1 1391 0
 1559 064e 0220     		movs	r0, #2	@ <retval>,
 1560              	.LVL81:
1485:src/stm32f1xx_hal_adc.c **** 
 1561              		.loc 1 1485 0
 1562 0650 10BD     		pop	{r4, pc}	@
 1563              	.LVL82:
 1564              	.L176:
 1565 0652 00BF     		.align	2
 1566              	.L175:
 1567 0654 00280140 		.word	1073817600
 1568 0658 00240140 		.word	1073816576
 1569              		.cfi_endproc
 1570              	.LFE73:
 1571              		.size	HAL_ADC_Start_IT, .-HAL_ADC_Start_IT
 1572              		.align	1
 1573              		.global	HAL_ADC_Start_DMA
 1574              		.syntax unified
ARM GAS  /tmp/cceY5bqg.s 			page 75


 1575              		.thumb
 1576              		.thumb_func
 1577              		.fpu softvfp
 1578              		.type	HAL_ADC_Start_DMA, %function
 1579              	HAL_ADC_Start_DMA:
 1580              	.LFB75:
1552:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1581              		.loc 1 1552 0
 1582              		.cfi_startproc
 1583              		@ args = 0, pretend = 0, frame = 0
 1584              		@ frame_needed = 0, uses_anonymous_args = 0
 1585              	.LVL83:
 1586 065c 2DE9D841 		push	{r3, r4, r6, r7, r8, lr}	@
 1587              	.LCFI18:
 1588              		.cfi_def_cfa_offset 24
 1589              		.cfi_offset 3, -24
 1590              		.cfi_offset 4, -20
 1591              		.cfi_offset 6, -16
 1592              		.cfi_offset 7, -12
 1593              		.cfi_offset 8, -8
 1594              		.cfi_offset 14, -4
1552:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1595              		.loc 1 1552 0
 1596 0660 9046     		mov	r8, r2	@ Length, Length
1561:src/stm32f1xx_hal_adc.c ****   {
 1597              		.loc 1 1561 0
 1598 0662 404B     		ldr	r3, .L196	@ tmp155,
 1599 0664 0268     		ldr	r2, [r0]	@ _7, hadc_6(D)->Instance
 1600              	.LVL84:
1552:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1601              		.loc 1 1552 0
 1602 0666 0446     		mov	r4, r0	@ hadc, hadc
1561:src/stm32f1xx_hal_adc.c ****   {
 1603              		.loc 1 1561 0
 1604 0668 9A42     		cmp	r2, r3	@ _7, tmp155
1552:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1605              		.loc 1 1552 0
 1606 066a 0F46     		mov	r7, r1	@ pData, pData
1561:src/stm32f1xx_hal_adc.c ****   {
 1607              		.loc 1 1561 0
 1608 066c 02D0     		beq	.L178	@,
1561:src/stm32f1xx_hal_adc.c ****   {
 1609              		.loc 1 1561 0 is_stmt 0 discriminator 1
 1610 066e 3E49     		ldr	r1, .L196+4	@ tmp156,
 1611              	.LVL85:
 1612 0670 8A42     		cmp	r2, r1	@ _7, tmp156
 1613 0672 03D1     		bne	.L179	@,
 1614              	.L178:
1561:src/stm32f1xx_hal_adc.c ****   {
 1615              		.loc 1 1561 0 discriminator 3
 1616 0674 5B68     		ldr	r3, [r3, #4]	@ _8, MEM[(struct ADC_TypeDef *)1073816576B].CR1
 1617 0676 13F4702F 		tst	r3, #983040	@ _8,
 1618 067a 6ED1     		bne	.L190	@,
 1619              	.L179:
1564:src/stm32f1xx_hal_adc.c ****     
 1620              		.loc 1 1564 0 is_stmt 1
 1621 067c 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2	@ hadc_6(D)->Lock, hadc_6(D)->Lock
ARM GAS  /tmp/cceY5bqg.s 			page 76


 1622 0680 012B     		cmp	r3, #1	@ hadc_6(D)->Lock,
 1623 0682 6CD0     		beq	.L191	@,
1564:src/stm32f1xx_hal_adc.c ****     
 1624              		.loc 1 1564 0 is_stmt 0 discriminator 2
 1625 0684 0123     		movs	r3, #1	@ tmp160,
1567:src/stm32f1xx_hal_adc.c ****     
 1626              		.loc 1 1567 0 is_stmt 1 discriminator 2
 1627 0686 2046     		mov	r0, r4	@, hadc
 1628              	.LVL86:
1564:src/stm32f1xx_hal_adc.c ****     
 1629              		.loc 1 1564 0 discriminator 2
 1630 0688 84F82430 		strb	r3, [r4, #36]	@ tmp160, hadc_6(D)->Lock
1567:src/stm32f1xx_hal_adc.c ****     
 1631              		.loc 1 1567 0 discriminator 2
 1632 068c FFF7FEFF 		bl	ADC_Enable	@
 1633              	.LVL87:
1570:src/stm32f1xx_hal_adc.c ****     {
 1634              		.loc 1 1570 0 discriminator 2
 1635 0690 0646     		mov	r6, r0	@ <retval>,
 1636 0692 0028     		cmp	r0, #0	@ <retval>
 1637 0694 5DD1     		bne	.L181	@
1575:src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1638              		.loc 1 1575 0
 1639 0696 A06A     		ldr	r0, [r4, #40]	@ _15, hadc_6(D)->State
 1640              	.LVL88:
1582:src/stm32f1xx_hal_adc.c ****     {
 1641              		.loc 1 1582 0
 1642 0698 2168     		ldr	r1, [r4]	@ _19, hadc_6(D)->Instance
1575:src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1643              		.loc 1 1575 0
 1644 069a 20F47060 		bic	r0, r0, #3840	@ tmp163, _15,
1582:src/stm32f1xx_hal_adc.c ****     {
 1645              		.loc 1 1582 0
 1646 069e 324B     		ldr	r3, .L196+4	@ tmp165,
1575:src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1647              		.loc 1 1575 0
 1648 06a0 20F00100 		bic	r0, r0, #1	@ tmp163, tmp163,
 1649 06a4 40F48070 		orr	r0, r0, #256	@ _17, tmp163,
1582:src/stm32f1xx_hal_adc.c ****     {
 1650              		.loc 1 1582 0
 1651 06a8 9942     		cmp	r1, r3	@ _19, tmp165
1575:src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1652              		.loc 1 1575 0
 1653 06aa A062     		str	r0, [r4, #40]	@ _17, hadc_6(D)->State
1582:src/stm32f1xx_hal_adc.c ****     {
 1654              		.loc 1 1582 0
 1655 06ac 04D1     		bne	.L182	@,
1582:src/stm32f1xx_hal_adc.c ****     {
 1656              		.loc 1 1582 0 is_stmt 0 discriminator 1
 1657 06ae 2D4A     		ldr	r2, .L196	@ tmp166,
 1658 06b0 5368     		ldr	r3, [r2, #4]	@ _20, MEM[(struct ADC_TypeDef *)1073816576B].CR1
 1659 06b2 13F4702F 		tst	r3, #983040	@ _20,
 1660 06b6 3ED1     		bne	.L183	@,
 1661              	.L182:
1585:src/stm32f1xx_hal_adc.c ****       
 1662              		.loc 1 1585 0 is_stmt 1
 1663 06b8 A36A     		ldr	r3, [r4, #40]	@ _31,
ARM GAS  /tmp/cceY5bqg.s 			page 77


 1664 06ba 23F48013 		bic	r3, r3, #1048576	@ _32, _31,
 1665 06be A362     		str	r3, [r4, #40]	@ _32, hadc_6(D)->State
1589:src/stm32f1xx_hal_adc.c ****       {
 1666              		.loc 1 1589 0
 1667 06c0 4B68     		ldr	r3, [r1, #4]	@ _34, _19->CR1
 1668 06c2 5A05     		lsls	r2, r3, #21	@, _34,
 1669 06c4 05D5     		bpl	.L185	@,
1591:src/stm32f1xx_hal_adc.c ****       }
 1670              		.loc 1 1591 0
 1671 06c6 A36A     		ldr	r3, [r4, #40]	@ _36, hadc_6(D)->State
 1672 06c8 23F44053 		bic	r3, r3, #12288	@ tmp169, _36,
 1673 06cc 43F48053 		orr	r3, r3, #4096	@ _38, tmp169,
 1674 06d0 A362     		str	r3, [r4, #40]	@ _38, hadc_6(D)->State
 1675              	.L185:
1608:src/stm32f1xx_hal_adc.c ****       {
 1676              		.loc 1 1608 0
 1677 06d2 A36A     		ldr	r3, [r4, #40]	@ _40, hadc_6(D)->State
1625:src/stm32f1xx_hal_adc.c **** 
 1678              		.loc 1 1625 0
 1679 06d4 206A     		ldr	r0, [r4, #32]	@ _47, hadc_6(D)->DMA_Handle
1608:src/stm32f1xx_hal_adc.c ****       {
 1680              		.loc 1 1608 0
 1681 06d6 13F48053 		ands	r3, r3, #4096	@ tmp173, _40,
1611:src/stm32f1xx_hal_adc.c ****       }
 1682              		.loc 1 1611 0
 1683 06da 18BF     		it	ne
 1684 06dc E36A     		ldrne	r3, [r4, #44]	@ _42, hadc_6(D)->ErrorCode
1646:src/stm32f1xx_hal_adc.c ****       
 1685              		.loc 1 1646 0
 1686 06de 3A46     		mov	r2, r7	@, pData
1611:src/stm32f1xx_hal_adc.c ****       }
 1687              		.loc 1 1611 0
 1688 06e0 18BF     		it	ne
 1689 06e2 23F00603 		bicne	r3, r3, #6	@ _43, _42,
1616:src/stm32f1xx_hal_adc.c ****       }
 1690              		.loc 1 1616 0
 1691 06e6 E362     		str	r3, [r4, #44]	@ tmp173,
1622:src/stm32f1xx_hal_adc.c ****       
 1692              		.loc 1 1622 0
 1693 06e8 0023     		movs	r3, #0	@ tmp175,
 1694 06ea 84F82430 		strb	r3, [r4, #36]	@ tmp175, hadc_6(D)->Lock
1625:src/stm32f1xx_hal_adc.c **** 
 1695              		.loc 1 1625 0
 1696 06ee 1F4B     		ldr	r3, .L196+8	@ tmp177,
1646:src/stm32f1xx_hal_adc.c ****       
 1697              		.loc 1 1646 0
 1698 06f0 4C31     		adds	r1, r1, #76	@, _19,
1625:src/stm32f1xx_hal_adc.c **** 
 1699              		.loc 1 1625 0
 1700 06f2 8362     		str	r3, [r0, #40]	@ tmp177, _47->XferCpltCallback
1628:src/stm32f1xx_hal_adc.c ****       
 1701              		.loc 1 1628 0
 1702 06f4 1E4B     		ldr	r3, .L196+12	@ tmp178,
 1703 06f6 C362     		str	r3, [r0, #44]	@ tmp178, _47->XferHalfCpltCallback
1631:src/stm32f1xx_hal_adc.c **** 
 1704              		.loc 1 1631 0
 1705 06f8 1E4B     		ldr	r3, .L196+16	@ tmp179,
ARM GAS  /tmp/cceY5bqg.s 			page 78


 1706 06fa 0363     		str	r3, [r0, #48]	@ tmp179, _47->XferErrorCallback
1640:src/stm32f1xx_hal_adc.c ****       
 1707              		.loc 1 1640 0
 1708 06fc 6FF00203 		mvn	r3, #2	@ tmp180,
 1709 0700 41F84C3C 		str	r3, [r1, #-76]	@ tmp180, _19->SR
1643:src/stm32f1xx_hal_adc.c ****       
 1710              		.loc 1 1643 0
 1711 0704 51F8443C 		ldr	r3, [r1, #-68]	@ _52, _19->CR2
 1712 0708 43F48073 		orr	r3, r3, #256	@ _53, _52,
 1713 070c 41F8443C 		str	r3, [r1, #-68]	@ _53, _19->CR2
1646:src/stm32f1xx_hal_adc.c ****       
 1714              		.loc 1 1646 0
 1715 0710 4346     		mov	r3, r8	@, Length
 1716 0712 FFF7FEFF 		bl	HAL_DMA_Start_IT	@
 1717              	.LVL89:
1652:src/stm32f1xx_hal_adc.c ****       {
 1718              		.loc 1 1652 0
 1719 0716 2368     		ldr	r3, [r4]	@ _61, hadc_6(D)->Instance
 1720 0718 9A68     		ldr	r2, [r3, #8]	@ _62, _61->CR2
 1721 071a 02F46022 		and	r2, r2, #917504	@ tmp182, _62,
 1722 071e B2F5602F 		cmp	r2, #917504	@ tmp182,
1655:src/stm32f1xx_hal_adc.c ****       }
 1723              		.loc 1 1655 0
 1724 0722 9A68     		ldr	r2, [r3, #8]	@ _67,
 1725 0724 0CBF     		ite	eq
 1726 0726 42F4A002 		orreq	r2, r2, #5242880	@ _68, _67,
1660:src/stm32f1xx_hal_adc.c ****       }
 1727              		.loc 1 1660 0
 1728 072a 42F48012 		orrne	r2, r2, #1048576	@ _65, _64,
 1729 072e 9A60     		str	r2, [r3, #8]	@ _65,
 1730              	.L180:
1676:src/stm32f1xx_hal_adc.c **** 
 1731              		.loc 1 1676 0
 1732 0730 3046     		mov	r0, r6	@, <retval>
 1733 0732 BDE8D881 		pop	{r3, r4, r6, r7, r8, pc}	@
 1734              	.LVL90:
 1735              	.L183:
1597:src/stm32f1xx_hal_adc.c ****       
 1736              		.loc 1 1597 0
 1737 0736 A36A     		ldr	r3, [r4, #40]	@ _22,
 1738 0738 43F48013 		orr	r3, r3, #1048576	@ _23, _22,
 1739 073c A362     		str	r3, [r4, #40]	@ _23, hadc_6(D)->State
1601:src/stm32f1xx_hal_adc.c ****       {
 1740              		.loc 1 1601 0
 1741 073e 5368     		ldr	r3, [r2, #4]	@ _25, MEM[(struct ADC_TypeDef *)1073816576B].CR1
 1742 0740 5B05     		lsls	r3, r3, #21	@, _25,
1603:src/stm32f1xx_hal_adc.c ****       }
 1743              		.loc 1 1603 0
 1744 0742 41BF     		itttt	mi
 1745 0744 A06A     		ldrmi	r0, [r4, #40]	@ _27, hadc_6(D)->State
 1746 0746 20F44050 		bicmi	r0, r0, #12288	@ tmp172, _27,
 1747 074a 40F48050 		orrmi	r0, r0, #4096	@ _29, tmp172,
 1748 074e A062     		strmi	r0, [r4, #40]	@ _29, hadc_6(D)->State
 1749 0750 BFE7     		b	.L185	@
 1750              	.LVL91:
 1751              	.L181:
1666:src/stm32f1xx_hal_adc.c ****     }
ARM GAS  /tmp/cceY5bqg.s 			page 79


 1752              		.loc 1 1666 0
 1753 0752 0023     		movs	r3, #0	@ tmp183,
 1754 0754 84F82430 		strb	r3, [r4, #36]	@ tmp183, hadc_6(D)->Lock
 1755 0758 EAE7     		b	.L180	@
 1756              	.LVL92:
 1757              	.L190:
1671:src/stm32f1xx_hal_adc.c ****   }
 1758              		.loc 1 1671 0
 1759 075a 0126     		movs	r6, #1	@ <retval>,
 1760 075c E8E7     		b	.L180	@
 1761              	.L191:
1564:src/stm32f1xx_hal_adc.c ****     
 1762              		.loc 1 1564 0
 1763 075e 0226     		movs	r6, #2	@ <retval>,
 1764 0760 E6E7     		b	.L180	@
 1765              	.L197:
 1766 0762 00BF     		.align	2
 1767              	.L196:
 1768 0764 00240140 		.word	1073816576
 1769 0768 00280140 		.word	1073817600
 1770 076c 00000000 		.word	ADC_DMAConvCplt
 1771 0770 00000000 		.word	ADC_DMAHalfConvCplt
 1772 0774 00000000 		.word	ADC_DMAError
 1773              		.cfi_endproc
 1774              	.LFE75:
 1775              		.size	HAL_ADC_Start_DMA, .-HAL_ADC_Start_DMA
 1776              		.align	1
 1777              		.global	ADC_ConversionStop_Disable
 1778              		.syntax unified
 1779              		.thumb
 1780              		.thumb_func
 1781              		.fpu softvfp
 1782              		.type	ADC_ConversionStop_Disable, %function
 1783              	ADC_ConversionStop_Disable:
 1784              	.LFB88:
2280:src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 1785              		.loc 1 2280 0
 1786              		.cfi_startproc
 1787              		@ args = 0, pretend = 0, frame = 0
 1788              		@ frame_needed = 0, uses_anonymous_args = 0
 1789              	.LVL93:
 1790 0778 38B5     		push	{r3, r4, r5, lr}	@
 1791              	.LCFI19:
 1792              		.cfi_def_cfa_offset 16
 1793              		.cfi_offset 3, -16
 1794              		.cfi_offset 4, -12
 1795              		.cfi_offset 5, -8
 1796              		.cfi_offset 14, -4
2284:src/stm32f1xx_hal_adc.c ****   {
 1797              		.loc 1 2284 0
 1798 077a 0368     		ldr	r3, [r0]	@ _6, hadc_5(D)->Instance
2280:src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 1799              		.loc 1 2280 0
 1800 077c 0446     		mov	r4, r0	@ hadc, hadc
2284:src/stm32f1xx_hal_adc.c ****   {
 1801              		.loc 1 2284 0
 1802 077e 9A68     		ldr	r2, [r3, #8]	@ _7, _6->CR2
ARM GAS  /tmp/cceY5bqg.s 			page 80


 1803 0780 D207     		lsls	r2, r2, #31	@, _7,
 1804 0782 01D4     		bmi	.L199	@,
 1805              	.LVL94:
 1806              	.L203:
2309:src/stm32f1xx_hal_adc.c **** }
 1807              		.loc 1 2309 0
 1808 0784 0020     		movs	r0, #0	@ <retval>,
 1809 0786 38BD     		pop	{r3, r4, r5, pc}	@
 1810              	.LVL95:
 1811              	.L199:
2287:src/stm32f1xx_hal_adc.c ****      
 1812              		.loc 1 2287 0
 1813 0788 9A68     		ldr	r2, [r3, #8]	@ _11, _6->CR2
 1814 078a 22F00102 		bic	r2, r2, #1	@ _12, _11,
 1815 078e 9A60     		str	r2, [r3, #8]	@ _12, _6->CR2
2290:src/stm32f1xx_hal_adc.c ****     
 1816              		.loc 1 2290 0
 1817 0790 FFF7FEFF 		bl	HAL_GetTick	@
 1818              	.LVL96:
 1819 0794 0546     		mov	r5, r0	@ tickstart,
 1820              	.LVL97:
 1821              	.L201:
2293:src/stm32f1xx_hal_adc.c ****     {
 1822              		.loc 1 2293 0
 1823 0796 2368     		ldr	r3, [r4]	@ _16, hadc_5(D)->Instance
 1824 0798 9B68     		ldr	r3, [r3, #8]	@ _17, _16->CR2
 1825 079a DB07     		lsls	r3, r3, #31	@, _17,
 1826 079c F2D5     		bpl	.L203	@,
2295:src/stm32f1xx_hal_adc.c ****       {
 1827              		.loc 1 2295 0
 1828 079e FFF7FEFF 		bl	HAL_GetTick	@
 1829              	.LVL98:
 1830 07a2 401B     		subs	r0, r0, r5	@ tmp128,, tickstart
 1831 07a4 0228     		cmp	r0, #2	@ tmp128,
 1832 07a6 F6D9     		bls	.L201	@,
 1833              	.LVL99:
 1834              	.LBB8:
 1835              	.LBB9:
2298:src/stm32f1xx_hal_adc.c ****         
 1836              		.loc 1 2298 0
 1837 07a8 A36A     		ldr	r3, [r4, #40]	@ _22, hadc_5(D)->State
2301:src/stm32f1xx_hal_adc.c ****         
 1838              		.loc 1 2301 0
 1839 07aa 0120     		movs	r0, #1	@ <retval>,
2298:src/stm32f1xx_hal_adc.c ****         
 1840              		.loc 1 2298 0
 1841 07ac 43F01003 		orr	r3, r3, #16	@ _23, _22,
 1842 07b0 A362     		str	r3, [r4, #40]	@ _23, hadc_5(D)->State
2301:src/stm32f1xx_hal_adc.c ****         
 1843              		.loc 1 2301 0
 1844 07b2 E36A     		ldr	r3, [r4, #44]	@ _24, hadc_5(D)->ErrorCode
 1845 07b4 43F00103 		orr	r3, r3, #1	@ _25, _24,
 1846 07b8 E362     		str	r3, [r4, #44]	@ _25, hadc_5(D)->ErrorCode
 1847              	.LVL100:
 1848 07ba 38BD     		pop	{r3, r4, r5, pc}	@
 1849              	.LBE9:
 1850              	.LBE8:
ARM GAS  /tmp/cceY5bqg.s 			page 81


 1851              		.cfi_endproc
 1852              	.LFE88:
 1853              		.size	ADC_ConversionStop_Disable, .-ADC_ConversionStop_Disable
 1854              		.align	1
 1855              		.global	HAL_ADC_Init
 1856              		.syntax unified
 1857              		.thumb
 1858              		.thumb_func
 1859              		.fpu softvfp
 1860              		.type	HAL_ADC_Init, %function
 1861              	HAL_ADC_Init:
 1862              	.LFB65:
 422:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1863              		.loc 1 422 0
 1864              		.cfi_startproc
 1865              		@ args = 0, pretend = 0, frame = 0
 1866              		@ frame_needed = 0, uses_anonymous_args = 0
 1867              	.LVL101:
 1868 07bc 70B5     		push	{r4, r5, r6, lr}	@
 1869              	.LCFI20:
 1870              		.cfi_def_cfa_offset 16
 1871              		.cfi_offset 4, -16
 1872              		.cfi_offset 5, -12
 1873              		.cfi_offset 6, -8
 1874              		.cfi_offset 14, -4
 429:src/stm32f1xx_hal_adc.c ****   {
 1875              		.loc 1 429 0
 1876 07be 0446     		mov	r4, r0	@ hadc, hadc
 1877 07c0 0028     		cmp	r0, #0	@ hadc
 1878 07c2 71D0     		beq	.L215	@
 458:src/stm32f1xx_hal_adc.c ****   {
 1879              		.loc 1 458 0
 1880 07c4 836A     		ldr	r3, [r0, #40]	@ _10, hadc_8(D)->State
 1881 07c6 23B9     		cbnz	r3, .L207	@ _10,
 461:src/stm32f1xx_hal_adc.c ****     
 1882              		.loc 1 461 0
 1883 07c8 C362     		str	r3, [r0, #44]	@ _10, hadc_8(D)->ErrorCode
 464:src/stm32f1xx_hal_adc.c ****     
 1884              		.loc 1 464 0
 1885 07ca 80F82430 		strb	r3, [r0, #36]	@ _10, hadc_8(D)->Lock
 483:src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1886              		.loc 1 483 0
 1887 07ce FFF7FEFF 		bl	HAL_ADC_MspInit	@
 1888              	.LVL102:
 1889              	.L207:
 492:src/stm32f1xx_hal_adc.c ****   
 1890              		.loc 1 492 0
 1891 07d2 2046     		mov	r0, r4	@, hadc
 1892 07d4 FFF7FEFF 		bl	ADC_ConversionStop_Disable	@
 1893              	.LVL103:
 497:src/stm32f1xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                  )
 1894              		.loc 1 497 0
 1895 07d8 A36A     		ldr	r3, [r4, #40]	@ _16, hadc_8(D)->State
 1896 07da 13F0100F 		tst	r3, #16	@ _16,
 501:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1897              		.loc 1 501 0
 1898 07de A36A     		ldr	r3, [r4, #40]	@ _18,
ARM GAS  /tmp/cceY5bqg.s 			page 82


 497:src/stm32f1xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                  )
 1899              		.loc 1 497 0
 1900 07e0 64D1     		bne	.L208	@,
 497:src/stm32f1xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                  )
 1901              		.loc 1 497 0 is_stmt 0 discriminator 1
 1902 07e2 0028     		cmp	r0, #0	@ <retval>
 1903 07e4 62D1     		bne	.L208	@
 517:src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 1904              		.loc 1 517 0 is_stmt 1
 1905 07e6 E169     		ldr	r1, [r4, #28]	@ hadc_8(D)->Init.ExternalTrigConv, hadc_8(D)->Init.ExternalTrigConv
 501:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1906              		.loc 1 501 0
 1907 07e8 23F48853 		bic	r3, r3, #4352	@ tmp164, _18,
 517:src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 1908              		.loc 1 517 0
 1909 07ec 6268     		ldr	r2, [r4, #4]	@ hadc_8(D)->Init.DataAlign, hadc_8(D)->Init.DataAlign
 501:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1910              		.loc 1 501 0
 1911 07ee 23F00203 		bic	r3, r3, #2	@ tmp164, tmp164,
 1912 07f2 43F00203 		orr	r3, r3, #2	@ _20, tmp164,
 517:src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 1913              		.loc 1 517 0
 1914 07f6 0A43     		orrs	r2, r2, r1	@, tmp166, hadc_8(D)->Init.DataAlign, hadc_8(D)->Init.ExternalTrigConv
 525:src/stm32f1xx_hal_adc.c ****     
 1915              		.loc 1 525 0
 1916 07f8 A168     		ldr	r1, [r4, #8]	@ _29, hadc_8(D)->Init.ScanConvMode
 501:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1917              		.loc 1 501 0
 1918 07fa A362     		str	r3, [r4, #40]	@ _20, hadc_8(D)->State
 519:src/stm32f1xx_hal_adc.c **** 
 1919              		.loc 1 519 0
 1920 07fc 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2	@ _25, hadc_8(D)->Init.ContinuousConvMode
 525:src/stm32f1xx_hal_adc.c ****     
 1921              		.loc 1 525 0
 1922 07fe B1F5807F 		cmp	r1, #256	@ _29,
 518:src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 1923              		.loc 1 518 0
 1924 0802 42EA4302 		orr	r2, r2, r3, lsl #1	@ _28, tmp166, _25,
 1925              	.LVL104:
 525:src/stm32f1xx_hal_adc.c ****     
 1926              		.loc 1 525 0
 1927 0806 38D0     		beq	.L216	@,
 525:src/stm32f1xx_hal_adc.c ****     
 1928              		.loc 1 525 0 is_stmt 0 discriminator 2
 1929 0808 0129     		cmp	r1, #1	@ _29,
 1930 080a 14BF     		ite	ne
 1931 080c 0646     		movne	r6, r0	@ tmp_cr1, <retval>
 1932 080e 4FF48076 		moveq	r6, #256	@ tmp_cr1,
 1933              	.L209:
 1934              	.LVL105:
 530:src/stm32f1xx_hal_adc.c ****     {
 1935              		.loc 1 530 0 is_stmt 1 discriminator 6
 1936 0812 257D     		ldrb	r5, [r4, #20]	@ zero_extendqisi2	@ hadc_8(D)->Init.DiscontinuousConvMode, hadc_8(D)->Init.Dis
 1937 0814 012D     		cmp	r5, #1	@ hadc_8(D)->Init.DiscontinuousConvMode,
 1938 0816 07D1     		bne	.L210	@,
 532:src/stm32f1xx_hal_adc.c ****       {
 1939              		.loc 1 532 0
ARM GAS  /tmp/cceY5bqg.s 			page 83


 1940 0818 002B     		cmp	r3, #0	@ _25
 1941 081a 30D1     		bne	.L211	@
 536:src/stm32f1xx_hal_adc.c ****                          ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 1942              		.loc 1 536 0
 1943 081c A369     		ldr	r3, [r4, #24]	@ hadc_8(D)->Init.NbrOfDiscConversion, hadc_8(D)->Init.NbrOfDiscConversion
 1944 081e 013B     		subs	r3, r3, #1	@ tmp171, hadc_8(D)->Init.NbrOfDiscConversion,
 1945 0820 46EA4335 		orr	r5, r6, r3, lsl #13	@ tmp174, tmp_cr1, tmp171,
 1946 0824 45F40066 		orr	r6, r5, #2048	@ tmp_cr1, tmp174,
 1947              	.LVL106:
 1948              	.L210:
 553:src/stm32f1xx_hal_adc.c ****                  ADC_CR1_SCAN    |
 1949              		.loc 1 553 0
 1950 0828 2368     		ldr	r3, [r4]	@ _42, hadc_8(D)->Instance
 576:src/stm32f1xx_hal_adc.c ****     {
 1951              		.loc 1 576 0
 1952 082a B1F5807F 		cmp	r1, #256	@ _29,
 553:src/stm32f1xx_hal_adc.c ****                  ADC_CR1_SCAN    |
 1953              		.loc 1 553 0
 1954 082e 5D68     		ldr	r5, [r3, #4]	@ _43, _42->CR1
 1955 0830 25F46945 		bic	r5, r5, #59648	@ tmp175, _43,
 1956 0834 45EA0605 		orr	r5, r5, r6	@ _45, tmp175, tmp_cr1
 1957 0838 5D60     		str	r5, [r3, #4]	@ _45, _42->CR1
 560:src/stm32f1xx_hal_adc.c ****                  ADC_CR2_ALIGN   |
 1958              		.loc 1 560 0
 1959 083a 9E68     		ldr	r6, [r3, #8]	@ _47, _42->CR2
 1960              	.LVL107:
 1961 083c 1D4D     		ldr	r5, .L221	@ tmp177,
 1962 083e 05EA0605 		and	r5, r5, r6	@ tmp177, tmp177, _47
 1963 0842 45EA0205 		orr	r5, r5, r2	@ _49, tmp177, _28
 1964 0846 9D60     		str	r5, [r3, #8]	@ _49, _42->CR2
 576:src/stm32f1xx_hal_adc.c ****     {
 1965              		.loc 1 576 0
 1966 0848 01D0     		beq	.L212	@,
 576:src/stm32f1xx_hal_adc.c ****     {
 1967              		.loc 1 576 0 is_stmt 0 discriminator 1
 1968 084a 0129     		cmp	r1, #1	@ _29,
 1969 084c 20D1     		bne	.L217	@,
 1970              	.L212:
 578:src/stm32f1xx_hal_adc.c ****     }
 1971              		.loc 1 578 0 is_stmt 1
 1972 084e 2169     		ldr	r1, [r4, #16]	@ hadc_8(D)->Init.NbrOfConversion, hadc_8(D)->Init.NbrOfConversion
 1973 0850 0139     		subs	r1, r1, #1	@ tmp178, hadc_8(D)->Init.NbrOfConversion,
 1974 0852 0905     		lsls	r1, r1, #20	@ tmp_sqr1, tmp178,
 1975              	.LVL108:
 1976              	.L213:
 581:src/stm32f1xx_hal_adc.c ****                ADC_SQR1_L          ,
 1977              		.loc 1 581 0
 1978 0854 DD6A     		ldr	r5, [r3, #44]	@ _54, _42->SQR1
 1979 0856 25F47005 		bic	r5, r5, #15728640	@ tmp180, _54,
 1980 085a 2943     		orrs	r1, r1, r5	@, _56, tmp_sqr1, tmp180
 1981              	.LVL109:
 1982 085c D962     		str	r1, [r3, #44]	@ _56, _42->SQR1
 591:src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 1983              		.loc 1 591 0
 1984 085e 9968     		ldr	r1, [r3, #8]	@ _58, _42->CR2
 1985 0860 154B     		ldr	r3, .L221+4	@ tmp181,
 1986 0862 0B40     		ands	r3, r3, r1	@, tmp181, tmp181, _58
ARM GAS  /tmp/cceY5bqg.s 			page 84


 1987 0864 9A42     		cmp	r2, r3	@ _28, tmp181
 1988 0866 15D1     		bne	.L214	@,
 598:src/stm32f1xx_hal_adc.c ****       
 1989              		.loc 1 598 0
 1990 0868 0023     		movs	r3, #0	@ tmp183,
 1991 086a E362     		str	r3, [r4, #44]	@ tmp183, hadc_8(D)->ErrorCode
 601:src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 1992              		.loc 1 601 0
 1993 086c A36A     		ldr	r3, [r4, #40]	@ _68, hadc_8(D)->State
 1994 086e 23F00303 		bic	r3, r3, #3	@ tmp184, _68,
 1995 0872 43F00103 		orr	r3, r3, #1	@ _70, tmp184,
 1996 0876 A362     		str	r3, [r4, #40]	@ _70, hadc_8(D)->State
 1997 0878 70BD     		pop	{r4, r5, r6, pc}	@
 1998              	.LVL110:
 1999              	.L216:
 525:src/stm32f1xx_hal_adc.c ****     
 2000              		.loc 1 525 0
 2001 087a 0E46     		mov	r6, r1	@ tmp_cr1, _29
 2002 087c C9E7     		b	.L209	@
 2003              	.LVL111:
 2004              	.L211:
 545:src/stm32f1xx_hal_adc.c ****         
 2005              		.loc 1 545 0
 2006 087e A36A     		ldr	r3, [r4, #40]	@ _36, hadc_8(D)->State
 2007 0880 43F02003 		orr	r3, r3, #32	@ _37, _36,
 2008 0884 A362     		str	r3, [r4, #40]	@ _37, hadc_8(D)->State
 548:src/stm32f1xx_hal_adc.c ****       }
 2009              		.loc 1 548 0
 2010 0886 E36A     		ldr	r3, [r4, #44]	@ _39, hadc_8(D)->ErrorCode
 2011 0888 43F00103 		orr	r3, r3, #1	@ _40, _39,
 2012 088c E362     		str	r3, [r4, #44]	@ _40, hadc_8(D)->ErrorCode
 2013 088e CBE7     		b	.L210	@
 2014              	.LVL112:
 2015              	.L217:
 426:src/stm32f1xx_hal_adc.c ****   
 2016              		.loc 1 426 0
 2017 0890 0021     		movs	r1, #0	@ tmp_sqr1,
 2018 0892 DFE7     		b	.L213	@
 2019              	.LVL113:
 2020              	.L214:
 608:src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 2021              		.loc 1 608 0
 2022 0894 A36A     		ldr	r3, [r4, #40]	@ _60, hadc_8(D)->State
 2023 0896 23F01203 		bic	r3, r3, #18	@ tmp185, _60,
 2024 089a 43F01003 		orr	r3, r3, #16	@ _62, tmp185,
 2025 089e A362     		str	r3, [r4, #40]	@ _62, hadc_8(D)->State
 613:src/stm32f1xx_hal_adc.c ****       
 2026              		.loc 1 613 0
 2027 08a0 E36A     		ldr	r3, [r4, #44]	@ _64, hadc_8(D)->ErrorCode
 2028 08a2 43F00103 		orr	r3, r3, #1	@ _65, _64,
 2029 08a6 E362     		str	r3, [r4, #44]	@ _65, hadc_8(D)->ErrorCode
 2030              	.LVL114:
 2031              	.L215:
 431:src/stm32f1xx_hal_adc.c ****   }
 2032              		.loc 1 431 0
 2033 08a8 0120     		movs	r0, #1	@ <retval>,
 629:src/stm32f1xx_hal_adc.c **** 
ARM GAS  /tmp/cceY5bqg.s 			page 85


 2034              		.loc 1 629 0
 2035 08aa 70BD     		pop	{r4, r5, r6, pc}	@
 2036              	.LVL115:
 2037              	.L208:
 622:src/stm32f1xx_hal_adc.c ****         
 2038              		.loc 1 622 0
 2039 08ac 43F01003 		orr	r3, r3, #16	@ _73, _72,
 2040 08b0 A362     		str	r3, [r4, #40]	@ _73, hadc_8(D)->State
 2041              	.LVL116:
 2042 08b2 F9E7     		b	.L215	@
 2043              	.L222:
 2044              		.align	2
 2045              	.L221:
 2046 08b4 FDF7E1FF 		.word	-1968131
 2047 08b8 FE0E1FFF 		.word	-14741762
 2048              		.cfi_endproc
 2049              	.LFE65:
 2050              		.size	HAL_ADC_Init, .-HAL_ADC_Init
 2051              		.align	1
 2052              		.global	HAL_ADC_DeInit
 2053              		.syntax unified
 2054              		.thumb
 2055              		.thumb_func
 2056              		.fpu softvfp
 2057              		.type	HAL_ADC_DeInit, %function
 2058              	HAL_ADC_DeInit:
 2059              	.LFB66:
 640:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2060              		.loc 1 640 0
 2061              		.cfi_startproc
 2062              		@ args = 0, pretend = 0, frame = 0
 2063              		@ frame_needed = 0, uses_anonymous_args = 0
 2064              	.LVL117:
 2065 08bc 38B5     		push	{r3, r4, r5, lr}	@
 2066              	.LCFI21:
 2067              		.cfi_def_cfa_offset 16
 2068              		.cfi_offset 3, -16
 2069              		.cfi_offset 4, -12
 2070              		.cfi_offset 5, -8
 2071              		.cfi_offset 14, -4
 644:src/stm32f1xx_hal_adc.c ****   {
 2072              		.loc 1 644 0
 2073 08be 0446     		mov	r4, r0	@ hadc, hadc
 2074 08c0 0028     		cmp	r0, #0	@ hadc
 2075 08c2 50D0     		beq	.L226	@
 653:src/stm32f1xx_hal_adc.c ****   
 2076              		.loc 1 653 0
 2077 08c4 836A     		ldr	r3, [r0, #40]	@ _6, hadc_4(D)->State
 2078 08c6 43F00203 		orr	r3, r3, #2	@ _7, _6,
 2079 08ca 8362     		str	r3, [r0, #40]	@ _7, hadc_4(D)->State
 657:src/stm32f1xx_hal_adc.c ****   
 2080              		.loc 1 657 0
 2081 08cc FFF7FEFF 		bl	ADC_ConversionStop_Disable	@
 2082              	.LVL118:
 662:src/stm32f1xx_hal_adc.c ****   {
 2083              		.loc 1 662 0
 2084 08d0 0546     		mov	r5, r0	@ <retval>,
ARM GAS  /tmp/cceY5bqg.s 			page 86


 2085 08d2 0028     		cmp	r0, #0	@ <retval>
 2086 08d4 42D1     		bne	.L225	@
 670:src/stm32f1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 2087              		.loc 1 670 0
 2088 08d6 6FF01F02 		mvn	r2, #31	@ tmp148,
 2089 08da 2368     		ldr	r3, [r4]	@ _11, hadc_4(D)->Instance
 730:src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 2090              		.loc 1 730 0
 2091 08dc 2348     		ldr	r0, .L227	@ tmp157,
 2092              	.LVL119:
 670:src/stm32f1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 2093              		.loc 1 670 0
 2094 08de 1A60     		str	r2, [r3]	@ tmp148, _11->SR
 674:src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
 2095              		.loc 1 674 0
 2096 08e0 5968     		ldr	r1, [r3, #4]	@ _13, _11->CR1
 2097 08e2 234A     		ldr	r2, .L227+4	@ _14,
 2098 08e4 0A40     		ands	r2, r2, r1	@, _14, _14, _13
 2099 08e6 5A60     		str	r2, [r3, #4]	@ _14, _11->CR1
 680:src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL  | ADC_CR2_JEXTTRIG |  
 2100              		.loc 1 680 0
 2101 08e8 9968     		ldr	r1, [r3, #8]	@ _16, _11->CR2
 2102 08ea 224A     		ldr	r2, .L227+8	@ _17,
 2103 08ec 0A40     		ands	r2, r2, r1	@, _17, _17, _16
 2104 08ee 9A60     		str	r2, [r3, #8]	@ _17, _11->CR2
 687:src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
 2105              		.loc 1 687 0
 2106 08f0 DA68     		ldr	r2, [r3, #12]	@ _19, _11->SMPR1
 2107 08f2 02F07F42 		and	r2, r2, #-16777216	@ _20, _19,
 2108 08f6 DA60     		str	r2, [r3, #12]	@ _20, _11->SMPR1
 692:src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
 2109              		.loc 1 692 0
 2110 08f8 1A69     		ldr	r2, [r3, #16]	@ _22, _11->SMPR2
 2111 08fa 02F04042 		and	r2, r2, #-1073741824	@ _23, _22,
 2112 08fe 1A61     		str	r2, [r3, #16]	@ _23, _11->SMPR2
 698:src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR2 */
 2113              		.loc 1 698 0
 2114 0900 5969     		ldr	r1, [r3, #20]	@ _25, _11->JOFR1
 2115 0902 1D4A     		ldr	r2, .L227+12	@ tmp151,
 2116 0904 1140     		ands	r1, r1, r2	@, _26, _25, tmp151
 2117 0906 5961     		str	r1, [r3, #20]	@ _26, _11->JOFR1
 700:src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR3 */
 2118              		.loc 1 700 0
 2119 0908 9969     		ldr	r1, [r3, #24]	@ _28, _11->JOFR2
 2120 090a 1140     		ands	r1, r1, r2	@, _29, _28, tmp151
 2121 090c 9961     		str	r1, [r3, #24]	@ _29, _11->JOFR2
 702:src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR4 */
 2122              		.loc 1 702 0
 2123 090e D969     		ldr	r1, [r3, #28]	@ _31, _11->JOFR3
 2124 0910 1140     		ands	r1, r1, r2	@, _32, _31, tmp151
 2125 0912 D961     		str	r1, [r3, #28]	@ _32, _11->JOFR3
 704:src/stm32f1xx_hal_adc.c ****     
 2126              		.loc 1 704 0
 2127 0914 196A     		ldr	r1, [r3, #32]	@ _34, _11->JOFR4
 2128 0916 1140     		ands	r1, r1, r2	@, _35, _34, tmp151
 2129 0918 1962     		str	r1, [r3, #32]	@ _35, _11->JOFR4
 707:src/stm32f1xx_hal_adc.c ****     /* Reset register LTR */
ARM GAS  /tmp/cceY5bqg.s 			page 87


 2130              		.loc 1 707 0
 2131 091a 596A     		ldr	r1, [r3, #36]	@ _37, _11->HTR
 2132 091c 1140     		ands	r1, r1, r2	@, _38, _37, tmp151
 2133 091e 5962     		str	r1, [r3, #36]	@ _38, _11->HTR
 709:src/stm32f1xx_hal_adc.c ****     
 2134              		.loc 1 709 0
 2135 0920 996A     		ldr	r1, [r3, #40]	@ _40, _11->LTR
 2136 0922 0A40     		ands	r2, r2, r1	@, _41, tmp151, _40
 2137 0924 9A62     		str	r2, [r3, #40]	@ _41, _11->LTR
 712:src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 2138              		.loc 1 712 0
 2139 0926 DA6A     		ldr	r2, [r3, #44]	@ _43, _11->SQR1
 2140 0928 02F07F42 		and	r2, r2, #-16777216	@ _44, _43,
 2141 092c DA62     		str	r2, [r3, #44]	@ _44, _11->SQR1
 717:src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 2142              		.loc 1 717 0
 2143 092e DA6A     		ldr	r2, [r3, #44]	@ _46, _11->SQR1
 2144 0930 02F07F42 		and	r2, r2, #-16777216	@ _47, _46,
 2145 0934 DA62     		str	r2, [r3, #44]	@ _47, _11->SQR1
 722:src/stm32f1xx_hal_adc.c ****                                     ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
 2146              		.loc 1 722 0
 2147 0936 1A6B     		ldr	r2, [r3, #48]	@ _49, _11->SQR2
 2148 0938 02F04042 		and	r2, r2, #-1073741824	@ _50, _49,
 2149 093c 1A63     		str	r2, [r3, #48]	@ _50, _11->SQR2
 726:src/stm32f1xx_hal_adc.c ****                                     ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
 2150              		.loc 1 726 0
 2151 093e 5A6B     		ldr	r2, [r3, #52]	@ _52, _11->SQR3
 2152 0940 02F04042 		and	r2, r2, #-1073741824	@ _53, _52,
 2153 0944 5A63     		str	r2, [r3, #52]	@ _53, _11->SQR3
 730:src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 2154              		.loc 1 730 0
 2155 0946 996B     		ldr	r1, [r3, #56]	@ _55, _11->JSQR
 2156 0948 0140     		ands	r1, r1, r0	@, _56, _55, tmp157
 2157 094a 9963     		str	r1, [r3, #56]	@ _56, _11->JSQR
 735:src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 2158              		.loc 1 735 0
 2159 094c 9A6B     		ldr	r2, [r3, #56]	@ _58, _11->JSQR
 2160 094e 0240     		ands	r2, r2, r0	@, _59, _58, tmp157
 2161 0950 9A63     		str	r2, [r3, #56]	@ _59, _11->JSQR
 764:src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 2162              		.loc 1 764 0
 2163 0952 2046     		mov	r0, r4	@, hadc
 2164 0954 FFF7FEFF 		bl	HAL_ADC_MspDeInit	@
 2165              	.LVL120:
 768:src/stm32f1xx_hal_adc.c ****     
 2166              		.loc 1 768 0
 2167 0958 E562     		str	r5, [r4, #44]	@ <retval>, hadc_4(D)->ErrorCode
 771:src/stm32f1xx_hal_adc.c ****   
 2168              		.loc 1 771 0
 2169 095a A562     		str	r5, [r4, #40]	@ <retval>, hadc_4(D)->State
 2170              	.L225:
 776:src/stm32f1xx_hal_adc.c ****   
 2171              		.loc 1 776 0
 2172 095c 0023     		movs	r3, #0	@ tmp161,
 2173 095e 84F82430 		strb	r3, [r4, #36]	@ tmp161, hadc_4(D)->Lock
 2174              	.L224:
 780:src/stm32f1xx_hal_adc.c **** 
ARM GAS  /tmp/cceY5bqg.s 			page 88


 2175              		.loc 1 780 0
 2176 0962 2846     		mov	r0, r5	@, <retval>
 2177 0964 38BD     		pop	{r3, r4, r5, pc}	@
 2178              	.LVL121:
 2179              	.L226:
 646:src/stm32f1xx_hal_adc.c ****   }
 2180              		.loc 1 646 0
 2181 0966 0125     		movs	r5, #1	@ <retval>,
 2182 0968 FBE7     		b	.L224	@
 2183              	.L228:
 2184 096a 00BF     		.align	2
 2185              	.L227:
 2186 096c 0000C0FF 		.word	-4194304
 2187 0970 00003FFF 		.word	-12648448
 2188 0974 F00601FF 		.word	-16709904
 2189 0978 00F0FFFF 		.word	-4096
 2190              		.cfi_endproc
 2191              	.LFE66:
 2192              		.size	HAL_ADC_DeInit, .-HAL_ADC_DeInit
 2193              		.align	1
 2194              		.global	HAL_ADC_Stop
 2195              		.syntax unified
 2196              		.thumb
 2197              		.thumb_func
 2198              		.fpu softvfp
 2199              		.type	HAL_ADC_Stop, %function
 2200              	HAL_ADC_Stop:
 2201              	.LFB70:
1160:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2202              		.loc 1 1160 0
 2203              		.cfi_startproc
 2204              		@ args = 0, pretend = 0, frame = 0
 2205              		@ frame_needed = 0, uses_anonymous_args = 0
 2206              	.LVL122:
1167:src/stm32f1xx_hal_adc.c ****   
 2207              		.loc 1 1167 0
 2208 097c 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2	@ hadc_5(D)->Lock, hadc_5(D)->Lock
1160:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2209              		.loc 1 1160 0
 2210 0980 10B5     		push	{r4, lr}	@
 2211              	.LCFI22:
 2212              		.cfi_def_cfa_offset 8
 2213              		.cfi_offset 4, -8
 2214              		.cfi_offset 14, -4
1167:src/stm32f1xx_hal_adc.c ****   
 2215              		.loc 1 1167 0
 2216 0982 012B     		cmp	r3, #1	@ hadc_5(D)->Lock,
1160:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2217              		.loc 1 1160 0
 2218 0984 0446     		mov	r4, r0	@ hadc, hadc
1167:src/stm32f1xx_hal_adc.c ****   
 2219              		.loc 1 1167 0
 2220 0986 11D0     		beq	.L232	@,
1167:src/stm32f1xx_hal_adc.c ****   
 2221              		.loc 1 1167 0 is_stmt 0 discriminator 2
 2222 0988 0123     		movs	r3, #1	@ tmp117,
 2223 098a 80F82430 		strb	r3, [r0, #36]	@ tmp117, hadc_5(D)->Lock
ARM GAS  /tmp/cceY5bqg.s 			page 89


1171:src/stm32f1xx_hal_adc.c ****   
 2224              		.loc 1 1171 0 is_stmt 1 discriminator 2
 2225 098e FFF7FEFF 		bl	ADC_ConversionStop_Disable	@
 2226              	.LVL123:
1174:src/stm32f1xx_hal_adc.c ****   {
 2227              		.loc 1 1174 0 discriminator 2
 2228 0992 38B9     		cbnz	r0, .L231	@ <retval>,
1177:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2229              		.loc 1 1177 0
 2230 0994 A36A     		ldr	r3, [r4, #40]	@ _10, hadc_5(D)->State
 2231 0996 23F48853 		bic	r3, r3, #4352	@ tmp120, _10,
 2232 099a 23F00103 		bic	r3, r3, #1	@ tmp120, tmp120,
 2233 099e 43F00103 		orr	r3, r3, #1	@ _12, tmp120,
 2234 09a2 A362     		str	r3, [r4, #40]	@ _12, hadc_5(D)->State
 2235              	.L231:
1183:src/stm32f1xx_hal_adc.c ****   
 2236              		.loc 1 1183 0
 2237 09a4 0023     		movs	r3, #0	@ tmp122,
 2238 09a6 84F82430 		strb	r3, [r4, #36]	@ tmp122, hadc_5(D)->Lock
1186:src/stm32f1xx_hal_adc.c **** }
 2239              		.loc 1 1186 0
 2240 09aa 10BD     		pop	{r4, pc}	@
 2241              	.LVL124:
 2242              	.L232:
1167:src/stm32f1xx_hal_adc.c ****   
 2243              		.loc 1 1167 0
 2244 09ac 0220     		movs	r0, #2	@ <retval>,
 2245              	.LVL125:
1187:src/stm32f1xx_hal_adc.c **** 
 2246              		.loc 1 1187 0
 2247 09ae 10BD     		pop	{r4, pc}	@
 2248              		.cfi_endproc
 2249              	.LFE70:
 2250              		.size	HAL_ADC_Stop, .-HAL_ADC_Stop
 2251              		.align	1
 2252              		.global	HAL_ADC_Stop_IT
 2253              		.syntax unified
 2254              		.thumb
 2255              		.thumb_func
 2256              		.fpu softvfp
 2257              		.type	HAL_ADC_Stop_IT, %function
 2258              	HAL_ADC_Stop_IT:
 2259              	.LFB74:
1495:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2260              		.loc 1 1495 0
 2261              		.cfi_startproc
 2262              		@ args = 0, pretend = 0, frame = 0
 2263              		@ frame_needed = 0, uses_anonymous_args = 0
 2264              	.LVL126:
1502:src/stm32f1xx_hal_adc.c ****   
 2265              		.loc 1 1502 0
 2266 09b0 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2	@ hadc_5(D)->Lock, hadc_5(D)->Lock
1495:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2267              		.loc 1 1495 0
 2268 09b4 10B5     		push	{r4, lr}	@
 2269              	.LCFI23:
 2270              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cceY5bqg.s 			page 90


 2271              		.cfi_offset 4, -8
 2272              		.cfi_offset 14, -4
1502:src/stm32f1xx_hal_adc.c ****   
 2273              		.loc 1 1502 0
 2274 09b6 012B     		cmp	r3, #1	@ hadc_5(D)->Lock,
1495:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2275              		.loc 1 1495 0
 2276 09b8 0446     		mov	r4, r0	@ hadc, hadc
1502:src/stm32f1xx_hal_adc.c ****   
 2277              		.loc 1 1502 0
 2278 09ba 16D0     		beq	.L236	@,
1502:src/stm32f1xx_hal_adc.c ****   
 2279              		.loc 1 1502 0 is_stmt 0 discriminator 2
 2280 09bc 0123     		movs	r3, #1	@ tmp120,
 2281 09be 80F82430 		strb	r3, [r0, #36]	@ tmp120, hadc_5(D)->Lock
1506:src/stm32f1xx_hal_adc.c ****   
 2282              		.loc 1 1506 0 is_stmt 1 discriminator 2
 2283 09c2 FFF7FEFF 		bl	ADC_ConversionStop_Disable	@
 2284              	.LVL127:
1509:src/stm32f1xx_hal_adc.c ****   {
 2285              		.loc 1 1509 0 discriminator 2
 2286 09c6 60B9     		cbnz	r0, .L235	@ <retval>,
1512:src/stm32f1xx_hal_adc.c ****     
 2287              		.loc 1 1512 0
 2288 09c8 2268     		ldr	r2, [r4]	@ _10, hadc_5(D)->Instance
 2289 09ca 5368     		ldr	r3, [r2, #4]	@ _11, _10->CR1
 2290 09cc 23F02003 		bic	r3, r3, #32	@ _12, _11,
 2291 09d0 5360     		str	r3, [r2, #4]	@ _12, _10->CR1
1515:src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2292              		.loc 1 1515 0
 2293 09d2 A36A     		ldr	r3, [r4, #40]	@ _14, hadc_5(D)->State
 2294 09d4 23F48853 		bic	r3, r3, #4352	@ tmp123, _14,
 2295 09d8 23F00103 		bic	r3, r3, #1	@ tmp123, tmp123,
 2296 09dc 43F00103 		orr	r3, r3, #1	@ _16, tmp123,
 2297 09e0 A362     		str	r3, [r4, #40]	@ _16, hadc_5(D)->State
 2298              	.L235:
1521:src/stm32f1xx_hal_adc.c ****   
 2299              		.loc 1 1521 0
 2300 09e2 0023     		movs	r3, #0	@ tmp125,
 2301 09e4 84F82430 		strb	r3, [r4, #36]	@ tmp125, hadc_5(D)->Lock
1524:src/stm32f1xx_hal_adc.c **** }
 2302              		.loc 1 1524 0
 2303 09e8 10BD     		pop	{r4, pc}	@
 2304              	.LVL128:
 2305              	.L236:
1502:src/stm32f1xx_hal_adc.c ****   
 2306              		.loc 1 1502 0
 2307 09ea 0220     		movs	r0, #2	@ <retval>,
 2308              	.LVL129:
1525:src/stm32f1xx_hal_adc.c **** 
 2309              		.loc 1 1525 0
 2310 09ec 10BD     		pop	{r4, pc}	@
 2311              		.cfi_endproc
 2312              	.LFE74:
 2313              		.size	HAL_ADC_Stop_IT, .-HAL_ADC_Stop_IT
 2314              		.align	1
 2315              		.global	HAL_ADC_Stop_DMA
ARM GAS  /tmp/cceY5bqg.s 			page 91


 2316              		.syntax unified
 2317              		.thumb
 2318              		.thumb_func
 2319              		.fpu softvfp
 2320              		.type	HAL_ADC_Stop_DMA, %function
 2321              	HAL_ADC_Stop_DMA:
 2322              	.LFB76:
1693:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2323              		.loc 1 1693 0
 2324              		.cfi_startproc
 2325              		@ args = 0, pretend = 0, frame = 0
 2326              		@ frame_needed = 0, uses_anonymous_args = 0
 2327              	.LVL130:
1700:src/stm32f1xx_hal_adc.c ****   
 2328              		.loc 1 1700 0
 2329 09ee 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2	@ hadc_6(D)->Lock, hadc_6(D)->Lock
1693:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2330              		.loc 1 1693 0
 2331 09f2 10B5     		push	{r4, lr}	@
 2332              	.LCFI24:
 2333              		.cfi_def_cfa_offset 8
 2334              		.cfi_offset 4, -8
 2335              		.cfi_offset 14, -4
1700:src/stm32f1xx_hal_adc.c ****   
 2336              		.loc 1 1700 0
 2337 09f4 012B     		cmp	r3, #1	@ hadc_6(D)->Lock,
1693:src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2338              		.loc 1 1693 0
 2339 09f6 0446     		mov	r4, r0	@ hadc, hadc
1700:src/stm32f1xx_hal_adc.c ****   
 2340              		.loc 1 1700 0
 2341 09f8 1DD0     		beq	.L241	@,
1700:src/stm32f1xx_hal_adc.c ****   
 2342              		.loc 1 1700 0 is_stmt 0 discriminator 2
 2343 09fa 0123     		movs	r3, #1	@ tmp123,
 2344 09fc 80F82430 		strb	r3, [r0, #36]	@ tmp123, hadc_6(D)->Lock
1704:src/stm32f1xx_hal_adc.c ****   
 2345              		.loc 1 1704 0 is_stmt 1 discriminator 2
 2346 0a00 FFF7FEFF 		bl	ADC_ConversionStop_Disable	@
 2347              	.LVL131:
1707:src/stm32f1xx_hal_adc.c ****   {
 2348              		.loc 1 1707 0 discriminator 2
 2349 0a04 80B9     		cbnz	r0, .L239	@ <retval>,
1710:src/stm32f1xx_hal_adc.c ****     
 2350              		.loc 1 1710 0
 2351 0a06 2268     		ldr	r2, [r4]	@ _11, hadc_6(D)->Instance
1714:src/stm32f1xx_hal_adc.c ****     
 2352              		.loc 1 1714 0
 2353 0a08 206A     		ldr	r0, [r4, #32]	@, hadc_6(D)->DMA_Handle
 2354              	.LVL132:
1710:src/stm32f1xx_hal_adc.c ****     
 2355              		.loc 1 1710 0
 2356 0a0a 9368     		ldr	r3, [r2, #8]	@ _12, _11->CR2
 2357 0a0c 23F48073 		bic	r3, r3, #256	@ _13, _12,
 2358 0a10 9360     		str	r3, [r2, #8]	@ _13, _11->CR2
1714:src/stm32f1xx_hal_adc.c ****     
 2359              		.loc 1 1714 0
ARM GAS  /tmp/cceY5bqg.s 			page 92


 2360 0a12 FFF7FEFF 		bl	HAL_DMA_Abort	@
 2361              	.LVL133:
1720:src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2362              		.loc 1 1720 0
 2363 0a16 A36A     		ldr	r3, [r4, #40]	@ _18,
1717:src/stm32f1xx_hal_adc.c ****     {
 2364              		.loc 1 1717 0
 2365 0a18 50B9     		cbnz	r0, .L240	@ <retval>,
1720:src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2366              		.loc 1 1720 0
 2367 0a1a 23F48853 		bic	r3, r3, #4352	@ tmp127, _18,
 2368 0a1e 23F00103 		bic	r3, r3, #1	@ tmp127, tmp127,
 2369 0a22 43F00103 		orr	r3, r3, #1	@ _20, tmp127,
 2370              	.L242:
1727:src/stm32f1xx_hal_adc.c ****     }
 2371              		.loc 1 1727 0
 2372 0a26 A362     		str	r3, [r4, #40]	@ _23,
 2373              	.L239:
1732:src/stm32f1xx_hal_adc.c ****     
 2374              		.loc 1 1732 0
 2375 0a28 0023     		movs	r3, #0	@ tmp129,
 2376 0a2a 84F82430 		strb	r3, [r4, #36]	@ tmp129, hadc_6(D)->Lock
1735:src/stm32f1xx_hal_adc.c **** }
 2377              		.loc 1 1735 0
 2378 0a2e 10BD     		pop	{r4, pc}	@
 2379              	.LVL134:
 2380              	.L240:
1727:src/stm32f1xx_hal_adc.c ****     }
 2381              		.loc 1 1727 0
 2382 0a30 43F04003 		orr	r3, r3, #64	@ _23, _22,
 2383 0a34 F7E7     		b	.L242	@
 2384              	.LVL135:
 2385              	.L241:
1700:src/stm32f1xx_hal_adc.c ****   
 2386              		.loc 1 1700 0
 2387 0a36 0220     		movs	r0, #2	@ <retval>,
 2388              	.LVL136:
1736:src/stm32f1xx_hal_adc.c **** 
 2389              		.loc 1 1736 0
 2390 0a38 10BD     		pop	{r4, pc}	@
 2391              		.cfi_endproc
 2392              	.LFE76:
 2393              		.size	HAL_ADC_Stop_DMA, .-HAL_ADC_Stop_DMA
 2394              	.Letext0:
 2395              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2396              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2397              		.file 4 "../cmsiscore/inc/core_cm3.h"
 2398              		.file 5 "../cmsisstm32f1xx/inc/system_stm32f1xx.h"
 2399              		.file 6 "../cmsisstm32f1xx/inc/stm32f103x6.h"
 2400              		.file 7 "../cmsisstm32f1xx/inc/stm32f1xx.h"
 2401              		.file 8 "./inc/stm32f1xx_hal_def.h"
 2402              		.file 9 "./inc/stm32f1xx_hal_dma.h"
 2403              		.file 10 "./inc/stm32f1xx_hal_adc.h"
 2404              		.file 11 "./inc/stm32f1xx_hal.h"
 2405              		.file 12 "./inc/stm32f1xx_hal_adc_ex.h"
 2406              		.file 13 "./inc/stm32f1xx_hal_rcc_ex.h"
 2407 0a3a 00BF     		.section	.debug_info,"",%progbits
ARM GAS  /tmp/cceY5bqg.s 			page 93


 2408              	.Ldebug_info0:
 2409 0000 AC0F0000 		.4byte	0xfac
 2410 0004 0200     		.2byte	0x2
 2411 0006 00000000 		.4byte	.Ldebug_abbrev0
 2412 000a 04       		.byte	0x4
 2413 000b 01       		.uleb128 0x1
 2414 000c A6060000 		.4byte	.LASF155
 2415 0010 0C       		.byte	0xc
 2416 0011 07050000 		.4byte	.LASF156
 2417 0015 B9070000 		.4byte	.LASF157
 2418 0019 00000000 		.4byte	.Ltext0
 2419 001d 3A0A0000 		.4byte	.Letext0
 2420 0021 00000000 		.4byte	.Ldebug_line0
 2421 0025 02       		.uleb128 0x2
 2422 0026 01       		.byte	0x1
 2423 0027 06       		.byte	0x6
 2424 0028 60000000 		.4byte	.LASF0
 2425 002c 03       		.uleb128 0x3
 2426 002d 6C000000 		.4byte	.LASF4
 2427 0031 02       		.byte	0x2
 2428 0032 1D       		.byte	0x1d
 2429 0033 37000000 		.4byte	0x37
 2430 0037 02       		.uleb128 0x2
 2431 0038 01       		.byte	0x1
 2432 0039 08       		.byte	0x8
 2433 003a 44060000 		.4byte	.LASF1
 2434 003e 02       		.uleb128 0x2
 2435 003f 02       		.byte	0x2
 2436 0040 05       		.byte	0x5
 2437 0041 00000000 		.4byte	.LASF2
 2438 0045 02       		.uleb128 0x2
 2439 0046 02       		.byte	0x2
 2440 0047 07       		.byte	0x7
 2441 0048 A5030000 		.4byte	.LASF3
 2442 004c 03       		.uleb128 0x3
 2443 004d 32080000 		.4byte	.LASF5
 2444 0051 02       		.byte	0x2
 2445 0052 3F       		.byte	0x3f
 2446 0053 57000000 		.4byte	0x57
 2447 0057 02       		.uleb128 0x2
 2448 0058 04       		.byte	0x4
 2449 0059 05       		.byte	0x5
 2450 005a DB010000 		.4byte	.LASF6
 2451 005e 03       		.uleb128 0x3
 2452 005f 98020000 		.4byte	.LASF7
 2453 0063 02       		.byte	0x2
 2454 0064 41       		.byte	0x41
 2455 0065 69000000 		.4byte	0x69
 2456 0069 02       		.uleb128 0x2
 2457 006a 04       		.byte	0x4
 2458 006b 07       		.byte	0x7
 2459 006c 68030000 		.4byte	.LASF8
 2460 0070 02       		.uleb128 0x2
 2461 0071 08       		.byte	0x8
 2462 0072 05       		.byte	0x5
 2463 0073 7D010000 		.4byte	.LASF9
 2464 0077 02       		.uleb128 0x2
ARM GAS  /tmp/cceY5bqg.s 			page 94


 2465 0078 08       		.byte	0x8
 2466 0079 07       		.byte	0x7
 2467 007a D2000000 		.4byte	.LASF10
 2468 007e 04       		.uleb128 0x4
 2469 007f 04       		.byte	0x4
 2470 0080 05       		.byte	0x5
 2471 0081 696E7400 		.ascii	"int\000"
 2472 0085 02       		.uleb128 0x2
 2473 0086 04       		.byte	0x4
 2474 0087 07       		.byte	0x7
 2475 0088 14030000 		.4byte	.LASF11
 2476 008c 03       		.uleb128 0x3
 2477 008d BC080000 		.4byte	.LASF12
 2478 0091 03       		.byte	0x3
 2479 0092 18       		.byte	0x18
 2480 0093 2C000000 		.4byte	0x2c
 2481 0097 05       		.uleb128 0x5
 2482 0098 8C000000 		.4byte	0x8c
 2483 009c 03       		.uleb128 0x3
 2484 009d 3C060000 		.4byte	.LASF13
 2485 00a1 03       		.byte	0x3
 2486 00a2 2C       		.byte	0x2c
 2487 00a3 4C000000 		.4byte	0x4c
 2488 00a7 06       		.uleb128 0x6
 2489 00a8 9C000000 		.4byte	0x9c
 2490 00ac 03       		.uleb128 0x3
 2491 00ad 5D070000 		.4byte	.LASF14
 2492 00b1 03       		.byte	0x3
 2493 00b2 30       		.byte	0x30
 2494 00b3 5E000000 		.4byte	0x5e
 2495 00b7 06       		.uleb128 0x6
 2496 00b8 AC000000 		.4byte	0xac
 2497 00bc 02       		.uleb128 0x2
 2498 00bd 04       		.byte	0x4
 2499 00be 07       		.byte	0x7
 2500 00bf F2040000 		.4byte	.LASF15
 2501 00c3 07       		.uleb128 0x7
 2502 00c4 04010000 		.4byte	.LASF16
 2503 00c8 04       		.byte	0x4
 2504 00c9 4807     		.2byte	0x748
 2505 00cb A7000000 		.4byte	0xa7
 2506 00cf 01       		.byte	0x1
 2507 00d0 01       		.byte	0x1
 2508 00d1 08       		.uleb128 0x8
 2509 00d2 38030000 		.4byte	.LASF17
 2510 00d6 05       		.byte	0x5
 2511 00d7 33       		.byte	0x33
 2512 00d8 AC000000 		.4byte	0xac
 2513 00dc 01       		.byte	0x1
 2514 00dd 01       		.byte	0x1
 2515 00de 09       		.uleb128 0x9
 2516 00df 97000000 		.4byte	0x97
 2517 00e3 EE000000 		.4byte	0xee
 2518 00e7 0A       		.uleb128 0xa
 2519 00e8 BC000000 		.4byte	0xbc
 2520 00ec 0F       		.byte	0xf
 2521 00ed 00       		.byte	0
ARM GAS  /tmp/cceY5bqg.s 			page 95


 2522 00ee 05       		.uleb128 0x5
 2523 00ef DE000000 		.4byte	0xde
 2524 00f3 08       		.uleb128 0x8
 2525 00f4 71040000 		.4byte	.LASF18
 2526 00f8 05       		.byte	0x5
 2527 00f9 34       		.byte	0x34
 2528 00fa EE000000 		.4byte	0xee
 2529 00fe 01       		.byte	0x1
 2530 00ff 01       		.byte	0x1
 2531 0100 09       		.uleb128 0x9
 2532 0101 97000000 		.4byte	0x97
 2533 0105 10010000 		.4byte	0x110
 2534 0109 0A       		.uleb128 0xa
 2535 010a BC000000 		.4byte	0xbc
 2536 010e 07       		.byte	0x7
 2537 010f 00       		.byte	0
 2538 0110 05       		.uleb128 0x5
 2539 0111 00010000 		.4byte	0x100
 2540 0115 08       		.uleb128 0x8
 2541 0116 A2000000 		.4byte	.LASF19
 2542 011a 05       		.byte	0x5
 2543 011b 35       		.byte	0x35
 2544 011c 10010000 		.4byte	0x110
 2545 0120 01       		.byte	0x1
 2546 0121 01       		.byte	0x1
 2547 0122 0B       		.uleb128 0xb
 2548 0123 50       		.byte	0x50
 2549 0124 06       		.byte	0x6
 2550 0125 8B       		.byte	0x8b
 2551 0126 41020000 		.4byte	0x241
 2552 012a 0C       		.uleb128 0xc
 2553 012b 535200   		.ascii	"SR\000"
 2554 012e 06       		.byte	0x6
 2555 012f 8D       		.byte	0x8d
 2556 0130 B7000000 		.4byte	0xb7
 2557 0134 02       		.byte	0x2
 2558 0135 23       		.byte	0x23
 2559 0136 00       		.uleb128 0
 2560 0137 0C       		.uleb128 0xc
 2561 0138 43523100 		.ascii	"CR1\000"
 2562 013c 06       		.byte	0x6
 2563 013d 8E       		.byte	0x8e
 2564 013e B7000000 		.4byte	0xb7
 2565 0142 02       		.byte	0x2
 2566 0143 23       		.byte	0x23
 2567 0144 04       		.uleb128 0x4
 2568 0145 0C       		.uleb128 0xc
 2569 0146 43523200 		.ascii	"CR2\000"
 2570 014a 06       		.byte	0x6
 2571 014b 8F       		.byte	0x8f
 2572 014c B7000000 		.4byte	0xb7
 2573 0150 02       		.byte	0x2
 2574 0151 23       		.byte	0x23
 2575 0152 08       		.uleb128 0x8
 2576 0153 0D       		.uleb128 0xd
 2577 0154 77050000 		.4byte	.LASF20
 2578 0158 06       		.byte	0x6
ARM GAS  /tmp/cceY5bqg.s 			page 96


 2579 0159 90       		.byte	0x90
 2580 015a B7000000 		.4byte	0xb7
 2581 015e 02       		.byte	0x2
 2582 015f 23       		.byte	0x23
 2583 0160 0C       		.uleb128 0xc
 2584 0161 0D       		.uleb128 0xd
 2585 0162 7D050000 		.4byte	.LASF21
 2586 0166 06       		.byte	0x6
 2587 0167 91       		.byte	0x91
 2588 0168 B7000000 		.4byte	0xb7
 2589 016c 02       		.byte	0x2
 2590 016d 23       		.byte	0x23
 2591 016e 10       		.uleb128 0x10
 2592 016f 0D       		.uleb128 0xd
 2593 0170 D5040000 		.4byte	.LASF22
 2594 0174 06       		.byte	0x6
 2595 0175 92       		.byte	0x92
 2596 0176 B7000000 		.4byte	0xb7
 2597 017a 02       		.byte	0x2
 2598 017b 23       		.byte	0x23
 2599 017c 14       		.uleb128 0x14
 2600 017d 0D       		.uleb128 0xd
 2601 017e DB040000 		.4byte	.LASF23
 2602 0182 06       		.byte	0x6
 2603 0183 93       		.byte	0x93
 2604 0184 B7000000 		.4byte	0xb7
 2605 0188 02       		.byte	0x2
 2606 0189 23       		.byte	0x23
 2607 018a 18       		.uleb128 0x18
 2608 018b 0D       		.uleb128 0xd
 2609 018c E1040000 		.4byte	.LASF24
 2610 0190 06       		.byte	0x6
 2611 0191 94       		.byte	0x94
 2612 0192 B7000000 		.4byte	0xb7
 2613 0196 02       		.byte	0x2
 2614 0197 23       		.byte	0x23
 2615 0198 1C       		.uleb128 0x1c
 2616 0199 0D       		.uleb128 0xd
 2617 019a E7040000 		.4byte	.LASF25
 2618 019e 06       		.byte	0x6
 2619 019f 95       		.byte	0x95
 2620 01a0 B7000000 		.4byte	0xb7
 2621 01a4 02       		.byte	0x2
 2622 01a5 23       		.byte	0x23
 2623 01a6 20       		.uleb128 0x20
 2624 01a7 0C       		.uleb128 0xc
 2625 01a8 48545200 		.ascii	"HTR\000"
 2626 01ac 06       		.byte	0x6
 2627 01ad 96       		.byte	0x96
 2628 01ae B7000000 		.4byte	0xb7
 2629 01b2 02       		.byte	0x2
 2630 01b3 23       		.byte	0x23
 2631 01b4 24       		.uleb128 0x24
 2632 01b5 0C       		.uleb128 0xc
 2633 01b6 4C545200 		.ascii	"LTR\000"
 2634 01ba 06       		.byte	0x6
 2635 01bb 97       		.byte	0x97
ARM GAS  /tmp/cceY5bqg.s 			page 97


 2636 01bc B7000000 		.4byte	0xb7
 2637 01c0 02       		.byte	0x2
 2638 01c1 23       		.byte	0x23
 2639 01c2 28       		.uleb128 0x28
 2640 01c3 0D       		.uleb128 0xd
 2641 01c4 BB050000 		.4byte	.LASF26
 2642 01c8 06       		.byte	0x6
 2643 01c9 98       		.byte	0x98
 2644 01ca B7000000 		.4byte	0xb7
 2645 01ce 02       		.byte	0x2
 2646 01cf 23       		.byte	0x23
 2647 01d0 2C       		.uleb128 0x2c
 2648 01d1 0D       		.uleb128 0xd
 2649 01d2 C0050000 		.4byte	.LASF27
 2650 01d6 06       		.byte	0x6
 2651 01d7 99       		.byte	0x99
 2652 01d8 B7000000 		.4byte	0xb7
 2653 01dc 02       		.byte	0x2
 2654 01dd 23       		.byte	0x23
 2655 01de 30       		.uleb128 0x30
 2656 01df 0D       		.uleb128 0xd
 2657 01e0 C5050000 		.4byte	.LASF28
 2658 01e4 06       		.byte	0x6
 2659 01e5 9A       		.byte	0x9a
 2660 01e6 B7000000 		.4byte	0xb7
 2661 01ea 02       		.byte	0x2
 2662 01eb 23       		.byte	0x23
 2663 01ec 34       		.uleb128 0x34
 2664 01ed 0D       		.uleb128 0xd
 2665 01ee ED040000 		.4byte	.LASF29
 2666 01f2 06       		.byte	0x6
 2667 01f3 9B       		.byte	0x9b
 2668 01f4 B7000000 		.4byte	0xb7
 2669 01f8 02       		.byte	0x2
 2670 01f9 23       		.byte	0x23
 2671 01fa 38       		.uleb128 0x38
 2672 01fb 0D       		.uleb128 0xd
 2673 01fc C4080000 		.4byte	.LASF30
 2674 0200 06       		.byte	0x6
 2675 0201 9C       		.byte	0x9c
 2676 0202 B7000000 		.4byte	0xb7
 2677 0206 02       		.byte	0x2
 2678 0207 23       		.byte	0x23
 2679 0208 3C       		.uleb128 0x3c
 2680 0209 0D       		.uleb128 0xd
 2681 020a 47050000 		.4byte	.LASF31
 2682 020e 06       		.byte	0x6
 2683 020f 9D       		.byte	0x9d
 2684 0210 B7000000 		.4byte	0xb7
 2685 0214 02       		.byte	0x2
 2686 0215 23       		.byte	0x23
 2687 0216 40       		.uleb128 0x40
 2688 0217 0D       		.uleb128 0xd
 2689 0218 C9080000 		.4byte	.LASF32
 2690 021c 06       		.byte	0x6
 2691 021d 9E       		.byte	0x9e
 2692 021e B7000000 		.4byte	0xb7
ARM GAS  /tmp/cceY5bqg.s 			page 98


 2693 0222 02       		.byte	0x2
 2694 0223 23       		.byte	0x23
 2695 0224 44       		.uleb128 0x44
 2696 0225 0D       		.uleb128 0xd
 2697 0226 CE080000 		.4byte	.LASF33
 2698 022a 06       		.byte	0x6
 2699 022b 9F       		.byte	0x9f
 2700 022c B7000000 		.4byte	0xb7
 2701 0230 02       		.byte	0x2
 2702 0231 23       		.byte	0x23
 2703 0232 48       		.uleb128 0x48
 2704 0233 0C       		.uleb128 0xc
 2705 0234 445200   		.ascii	"DR\000"
 2706 0237 06       		.byte	0x6
 2707 0238 A0       		.byte	0xa0
 2708 0239 B7000000 		.4byte	0xb7
 2709 023d 02       		.byte	0x2
 2710 023e 23       		.byte	0x23
 2711 023f 4C       		.uleb128 0x4c
 2712 0240 00       		.byte	0
 2713 0241 03       		.uleb128 0x3
 2714 0242 56020000 		.4byte	.LASF34
 2715 0246 06       		.byte	0x6
 2716 0247 A1       		.byte	0xa1
 2717 0248 22010000 		.4byte	0x122
 2718 024c 0E       		.uleb128 0xe
 2719 024d 10       		.byte	0x10
 2720 024e 06       		.byte	0x6
 2721 024f 1E01     		.2byte	0x11e
 2722 0251 92020000 		.4byte	0x292
 2723 0255 0F       		.uleb128 0xf
 2724 0256 43435200 		.ascii	"CCR\000"
 2725 025a 06       		.byte	0x6
 2726 025b 2001     		.2byte	0x120
 2727 025d B7000000 		.4byte	0xb7
 2728 0261 02       		.byte	0x2
 2729 0262 23       		.byte	0x23
 2730 0263 00       		.uleb128 0
 2731 0264 10       		.uleb128 0x10
 2732 0265 92080000 		.4byte	.LASF35
 2733 0269 06       		.byte	0x6
 2734 026a 2101     		.2byte	0x121
 2735 026c B7000000 		.4byte	0xb7
 2736 0270 02       		.byte	0x2
 2737 0271 23       		.byte	0x23
 2738 0272 04       		.uleb128 0x4
 2739 0273 10       		.uleb128 0x10
 2740 0274 63030000 		.4byte	.LASF36
 2741 0278 06       		.byte	0x6
 2742 0279 2201     		.2byte	0x122
 2743 027b B7000000 		.4byte	0xb7
 2744 027f 02       		.byte	0x2
 2745 0280 23       		.byte	0x23
 2746 0281 08       		.uleb128 0x8
 2747 0282 10       		.uleb128 0x10
 2748 0283 98080000 		.4byte	.LASF37
 2749 0287 06       		.byte	0x6
ARM GAS  /tmp/cceY5bqg.s 			page 99


 2750 0288 2301     		.2byte	0x123
 2751 028a B7000000 		.4byte	0xb7
 2752 028e 02       		.byte	0x2
 2753 028f 23       		.byte	0x23
 2754 0290 0C       		.uleb128 0xc
 2755 0291 00       		.byte	0
 2756 0292 11       		.uleb128 0x11
 2757 0293 E0050000 		.4byte	.LASF38
 2758 0297 06       		.byte	0x6
 2759 0298 2401     		.2byte	0x124
 2760 029a 4C020000 		.4byte	0x24c
 2761 029e 0E       		.uleb128 0xe
 2762 029f 08       		.byte	0x8
 2763 02a0 06       		.byte	0x6
 2764 02a1 2601     		.2byte	0x126
 2765 02a3 C6020000 		.4byte	0x2c6
 2766 02a7 0F       		.uleb128 0xf
 2767 02a8 49535200 		.ascii	"ISR\000"
 2768 02ac 06       		.byte	0x6
 2769 02ad 2801     		.2byte	0x128
 2770 02af B7000000 		.4byte	0xb7
 2771 02b3 02       		.byte	0x2
 2772 02b4 23       		.byte	0x23
 2773 02b5 00       		.uleb128 0
 2774 02b6 10       		.uleb128 0x10
 2775 02b7 9E070000 		.4byte	.LASF39
 2776 02bb 06       		.byte	0x6
 2777 02bc 2901     		.2byte	0x129
 2778 02be B7000000 		.4byte	0xb7
 2779 02c2 02       		.byte	0x2
 2780 02c3 23       		.byte	0x23
 2781 02c4 04       		.uleb128 0x4
 2782 02c5 00       		.byte	0
 2783 02c6 11       		.uleb128 0x11
 2784 02c7 08030000 		.4byte	.LASF40
 2785 02cb 06       		.byte	0x6
 2786 02cc 2A01     		.2byte	0x12a
 2787 02ce 9E020000 		.4byte	0x29e
 2788 02d2 12       		.uleb128 0x12
 2789 02d3 01       		.byte	0x1
 2790 02d4 37000000 		.4byte	0x37
 2791 02d8 07       		.byte	0x7
 2792 02d9 98       		.byte	0x98
 2793 02da EB020000 		.4byte	0x2eb
 2794 02de 13       		.uleb128 0x13
 2795 02df 1A060000 		.4byte	.LASF41
 2796 02e3 00       		.byte	0
 2797 02e4 14       		.uleb128 0x14
 2798 02e5 53455400 		.ascii	"SET\000"
 2799 02e9 01       		.byte	0x1
 2800 02ea 00       		.byte	0
 2801 02eb 12       		.uleb128 0x12
 2802 02ec 01       		.byte	0x1
 2803 02ed 37000000 		.4byte	0x37
 2804 02f1 07       		.byte	0x7
 2805 02f2 9E       		.byte	0x9e
 2806 02f3 04030000 		.4byte	0x304
ARM GAS  /tmp/cceY5bqg.s 			page 100


 2807 02f7 13       		.uleb128 0x13
 2808 02f8 FB060000 		.4byte	.LASF42
 2809 02fc 00       		.byte	0
 2810 02fd 13       		.uleb128 0x13
 2811 02fe F1010000 		.4byte	.LASF43
 2812 0302 01       		.byte	0x1
 2813 0303 00       		.byte	0
 2814 0304 03       		.uleb128 0x3
 2815 0305 92000000 		.4byte	.LASF44
 2816 0309 07       		.byte	0x7
 2817 030a A1       		.byte	0xa1
 2818 030b EB020000 		.4byte	0x2eb
 2819 030f 02       		.uleb128 0x2
 2820 0310 08       		.byte	0x8
 2821 0311 04       		.byte	0x4
 2822 0312 1F050000 		.4byte	.LASF45
 2823 0316 12       		.uleb128 0x12
 2824 0317 01       		.byte	0x1
 2825 0318 37000000 		.4byte	0x37
 2826 031c 08       		.byte	0x8
 2827 031d 2A       		.byte	0x2a
 2828 031e 3B030000 		.4byte	0x33b
 2829 0322 13       		.uleb128 0x13
 2830 0323 8D030000 		.4byte	.LASF46
 2831 0327 00       		.byte	0
 2832 0328 13       		.uleb128 0x13
 2833 0329 81070000 		.4byte	.LASF47
 2834 032d 01       		.byte	0x1
 2835 032e 13       		.uleb128 0x13
 2836 032f 89000000 		.4byte	.LASF48
 2837 0333 02       		.byte	0x2
 2838 0334 13       		.uleb128 0x13
 2839 0335 FC020000 		.4byte	.LASF49
 2840 0339 03       		.byte	0x3
 2841 033a 00       		.byte	0
 2842 033b 03       		.uleb128 0x3
 2843 033c 20040000 		.4byte	.LASF50
 2844 0340 08       		.byte	0x8
 2845 0341 2F       		.byte	0x2f
 2846 0342 16030000 		.4byte	0x316
 2847 0346 12       		.uleb128 0x12
 2848 0347 01       		.byte	0x1
 2849 0348 37000000 		.4byte	0x37
 2850 034c 08       		.byte	0x8
 2851 034d 35       		.byte	0x35
 2852 034e 5F030000 		.4byte	0x35f
 2853 0352 13       		.uleb128 0x13
 2854 0353 D3080000 		.4byte	.LASF51
 2855 0357 00       		.byte	0
 2856 0358 13       		.uleb128 0x13
 2857 0359 2B050000 		.4byte	.LASF52
 2858 035d 01       		.byte	0x1
 2859 035e 00       		.byte	0
 2860 035f 03       		.uleb128 0x3
 2861 0360 CB010000 		.4byte	.LASF53
 2862 0364 08       		.byte	0x8
 2863 0365 38       		.byte	0x38
ARM GAS  /tmp/cceY5bqg.s 			page 101


 2864 0366 46030000 		.4byte	0x346
 2865 036a 0B       		.uleb128 0xb
 2866 036b 1C       		.byte	0x1c
 2867 036c 09       		.byte	0x9
 2868 036d 30       		.byte	0x30
 2869 036e D5030000 		.4byte	0x3d5
 2870 0372 0D       		.uleb128 0xd
 2871 0373 BD020000 		.4byte	.LASF54
 2872 0377 09       		.byte	0x9
 2873 0378 32       		.byte	0x32
 2874 0379 AC000000 		.4byte	0xac
 2875 037d 02       		.byte	0x2
 2876 037e 23       		.byte	0x23
 2877 037f 00       		.uleb128 0
 2878 0380 0D       		.uleb128 0xd
 2879 0381 F8010000 		.4byte	.LASF55
 2880 0385 09       		.byte	0x9
 2881 0386 36       		.byte	0x36
 2882 0387 AC000000 		.4byte	0xac
 2883 038b 02       		.byte	0x2
 2884 038c 23       		.byte	0x23
 2885 038d 04       		.uleb128 0x4
 2886 038e 0D       		.uleb128 0xd
 2887 038f 9F060000 		.4byte	.LASF56
 2888 0393 09       		.byte	0x9
 2889 0394 39       		.byte	0x39
 2890 0395 AC000000 		.4byte	0xac
 2891 0399 02       		.byte	0x2
 2892 039a 23       		.byte	0x23
 2893 039b 08       		.uleb128 0x8
 2894 039c 0D       		.uleb128 0xd
 2895 039d 60080000 		.4byte	.LASF57
 2896 03a1 09       		.byte	0x9
 2897 03a2 3C       		.byte	0x3c
 2898 03a3 AC000000 		.4byte	0xac
 2899 03a7 02       		.byte	0x2
 2900 03a8 23       		.byte	0x23
 2901 03a9 0C       		.uleb128 0xc
 2902 03aa 0D       		.uleb128 0xd
 2903 03ab F1030000 		.4byte	.LASF58
 2904 03af 09       		.byte	0x9
 2905 03b0 3F       		.byte	0x3f
 2906 03b1 AC000000 		.4byte	0xac
 2907 03b5 02       		.byte	0x2
 2908 03b6 23       		.byte	0x23
 2909 03b7 10       		.uleb128 0x10
 2910 03b8 0D       		.uleb128 0xd
 2911 03b9 B4070000 		.4byte	.LASF59
 2912 03bd 09       		.byte	0x9
 2913 03be 42       		.byte	0x42
 2914 03bf AC000000 		.4byte	0xac
 2915 03c3 02       		.byte	0x2
 2916 03c4 23       		.byte	0x23
 2917 03c5 14       		.uleb128 0x14
 2918 03c6 0D       		.uleb128 0xd
 2919 03c7 B3080000 		.4byte	.LASF60
 2920 03cb 09       		.byte	0x9
ARM GAS  /tmp/cceY5bqg.s 			page 102


 2921 03cc 47       		.byte	0x47
 2922 03cd AC000000 		.4byte	0xac
 2923 03d1 02       		.byte	0x2
 2924 03d2 23       		.byte	0x23
 2925 03d3 18       		.uleb128 0x18
 2926 03d4 00       		.byte	0
 2927 03d5 03       		.uleb128 0x3
 2928 03d6 50000000 		.4byte	.LASF61
 2929 03da 09       		.byte	0x9
 2930 03db 49       		.byte	0x49
 2931 03dc 6A030000 		.4byte	0x36a
 2932 03e0 12       		.uleb128 0x12
 2933 03e1 01       		.byte	0x1
 2934 03e2 37000000 		.4byte	0x37
 2935 03e6 09       		.byte	0x9
 2936 03e7 4F       		.byte	0x4f
 2937 03e8 05040000 		.4byte	0x405
 2938 03ec 13       		.uleb128 0x13
 2939 03ed 11010000 		.4byte	.LASF62
 2940 03f1 00       		.byte	0
 2941 03f2 13       		.uleb128 0x13
 2942 03f3 AC040000 		.4byte	.LASF63
 2943 03f7 01       		.byte	0x1
 2944 03f8 13       		.uleb128 0x13
 2945 03f9 82060000 		.4byte	.LASF64
 2946 03fd 02       		.byte	0x2
 2947 03fe 13       		.uleb128 0x13
 2948 03ff 9D080000 		.4byte	.LASF65
 2949 0403 03       		.byte	0x3
 2950 0404 00       		.byte	0
 2951 0405 03       		.uleb128 0x3
 2952 0406 52060000 		.4byte	.LASF66
 2953 040a 09       		.byte	0x9
 2954 040b 54       		.byte	0x54
 2955 040c E0030000 		.4byte	0x3e0
 2956 0410 15       		.uleb128 0x15
 2957 0411 49070000 		.4byte	.LASF98
 2958 0415 44       		.byte	0x44
 2959 0416 09       		.byte	0x9
 2960 0417 6F       		.byte	0x6f
 2961 0418 C5040000 		.4byte	0x4c5
 2962 041c 0D       		.uleb128 0xd
 2963 041d F9050000 		.4byte	.LASF67
 2964 0421 09       		.byte	0x9
 2965 0422 71       		.byte	0x71
 2966 0423 C5040000 		.4byte	0x4c5
 2967 0427 02       		.byte	0x2
 2968 0428 23       		.byte	0x23
 2969 0429 00       		.uleb128 0
 2970 042a 0D       		.uleb128 0xd
 2971 042b 4B000000 		.4byte	.LASF68
 2972 042f 09       		.byte	0x9
 2973 0430 73       		.byte	0x73
 2974 0431 D5030000 		.4byte	0x3d5
 2975 0435 02       		.byte	0x2
 2976 0436 23       		.byte	0x23
 2977 0437 04       		.uleb128 0x4
ARM GAS  /tmp/cceY5bqg.s 			page 103


 2978 0438 0D       		.uleb128 0xd
 2979 0439 93020000 		.4byte	.LASF69
 2980 043d 09       		.byte	0x9
 2981 043e 75       		.byte	0x75
 2982 043f 5F030000 		.4byte	0x35f
 2983 0443 02       		.byte	0x2
 2984 0444 23       		.byte	0x23
 2985 0445 20       		.uleb128 0x20
 2986 0446 0D       		.uleb128 0xd
 2987 0447 AE070000 		.4byte	.LASF70
 2988 044b 09       		.byte	0x9
 2989 044c 77       		.byte	0x77
 2990 044d 05040000 		.4byte	0x405
 2991 0451 02       		.byte	0x2
 2992 0452 23       		.byte	0x23
 2993 0453 21       		.uleb128 0x21
 2994 0454 0D       		.uleb128 0xd
 2995 0455 8C020000 		.4byte	.LASF71
 2996 0459 09       		.byte	0x9
 2997 045a 79       		.byte	0x79
 2998 045b CB040000 		.4byte	0x4cb
 2999 045f 02       		.byte	0x2
 3000 0460 23       		.byte	0x23
 3001 0461 24       		.uleb128 0x24
 3002 0462 0D       		.uleb128 0xd
 3003 0463 06090000 		.4byte	.LASF72
 3004 0467 09       		.byte	0x9
 3005 0468 7B       		.byte	0x7b
 3006 0469 DF040000 		.4byte	0x4df
 3007 046d 02       		.byte	0x2
 3008 046e 23       		.byte	0x23
 3009 046f 28       		.uleb128 0x28
 3010 0470 0D       		.uleb128 0xd
 3011 0471 96010000 		.4byte	.LASF73
 3012 0475 09       		.byte	0x9
 3013 0476 7D       		.byte	0x7d
 3014 0477 DF040000 		.4byte	0x4df
 3015 047b 02       		.byte	0x2
 3016 047c 23       		.byte	0x23
 3017 047d 2C       		.uleb128 0x2c
 3018 047e 0D       		.uleb128 0xd
 3019 047f 5E050000 		.4byte	.LASF74
 3020 0483 09       		.byte	0x9
 3021 0484 7F       		.byte	0x7f
 3022 0485 DF040000 		.4byte	0x4df
 3023 0489 02       		.byte	0x2
 3024 048a 23       		.byte	0x23
 3025 048b 30       		.uleb128 0x30
 3026 048c 0D       		.uleb128 0xd
 3027 048d F4080000 		.4byte	.LASF75
 3028 0491 09       		.byte	0x9
 3029 0492 81       		.byte	0x81
 3030 0493 DF040000 		.4byte	0x4df
 3031 0497 02       		.byte	0x2
 3032 0498 23       		.byte	0x23
 3033 0499 34       		.uleb128 0x34
 3034 049a 0D       		.uleb128 0xd
ARM GAS  /tmp/cceY5bqg.s 			page 104


 3035 049b D6030000 		.4byte	.LASF76
 3036 049f 09       		.byte	0x9
 3037 04a0 83       		.byte	0x83
 3038 04a1 B7000000 		.4byte	0xb7
 3039 04a5 02       		.byte	0x2
 3040 04a6 23       		.byte	0x23
 3041 04a7 38       		.uleb128 0x38
 3042 04a8 0D       		.uleb128 0xd
 3043 04a9 C7030000 		.4byte	.LASF77
 3044 04ad 09       		.byte	0x9
 3045 04ae 85       		.byte	0x85
 3046 04af E5040000 		.4byte	0x4e5
 3047 04b3 02       		.byte	0x2
 3048 04b4 23       		.byte	0x23
 3049 04b5 3C       		.uleb128 0x3c
 3050 04b6 0D       		.uleb128 0xd
 3051 04b7 7F020000 		.4byte	.LASF78
 3052 04bb 09       		.byte	0x9
 3053 04bc 87       		.byte	0x87
 3054 04bd AC000000 		.4byte	0xac
 3055 04c1 02       		.byte	0x2
 3056 04c2 23       		.byte	0x23
 3057 04c3 40       		.uleb128 0x40
 3058 04c4 00       		.byte	0
 3059 04c5 16       		.uleb128 0x16
 3060 04c6 04       		.byte	0x4
 3061 04c7 92020000 		.4byte	0x292
 3062 04cb 17       		.uleb128 0x17
 3063 04cc 04       		.byte	0x4
 3064 04cd 18       		.uleb128 0x18
 3065 04ce 01       		.byte	0x1
 3066 04cf D9040000 		.4byte	0x4d9
 3067 04d3 19       		.uleb128 0x19
 3068 04d4 D9040000 		.4byte	0x4d9
 3069 04d8 00       		.byte	0
 3070 04d9 16       		.uleb128 0x16
 3071 04da 04       		.byte	0x4
 3072 04db 10040000 		.4byte	0x410
 3073 04df 16       		.uleb128 0x16
 3074 04e0 04       		.byte	0x4
 3075 04e1 CD040000 		.4byte	0x4cd
 3076 04e5 16       		.uleb128 0x16
 3077 04e6 04       		.byte	0x4
 3078 04e7 C6020000 		.4byte	0x2c6
 3079 04eb 03       		.uleb128 0x3
 3080 04ec 4C050000 		.4byte	.LASF79
 3081 04f0 09       		.byte	0x9
 3082 04f1 89       		.byte	0x89
 3083 04f2 10040000 		.4byte	0x410
 3084 04f6 0B       		.uleb128 0xb
 3085 04f7 1C       		.byte	0x1c
 3086 04f8 0A       		.byte	0xa
 3087 04f9 34       		.byte	0x34
 3088 04fa 61050000 		.4byte	0x561
 3089 04fe 0D       		.uleb128 0xd
 3090 04ff E9000000 		.4byte	.LASF80
 3091 0503 0A       		.byte	0xa
ARM GAS  /tmp/cceY5bqg.s 			page 105


 3092 0504 36       		.byte	0x36
 3093 0505 AC000000 		.4byte	0xac
 3094 0509 02       		.byte	0x2
 3095 050a 23       		.byte	0x23
 3096 050b 00       		.uleb128 0
 3097 050c 0D       		.uleb128 0xd
 3098 050d D4020000 		.4byte	.LASF81
 3099 0511 0A       		.byte	0xa
 3100 0512 39       		.byte	0x39
 3101 0513 AC000000 		.4byte	0xac
 3102 0517 02       		.byte	0x2
 3103 0518 23       		.byte	0x23
 3104 0519 04       		.uleb128 0x4
 3105 051a 0D       		.uleb128 0xd
 3106 051b 8B070000 		.4byte	.LASF82
 3107 051f 0A       		.byte	0xa
 3108 0520 44       		.byte	0x44
 3109 0521 04030000 		.4byte	0x304
 3110 0525 02       		.byte	0x2
 3111 0526 23       		.byte	0x23
 3112 0527 08       		.uleb128 0x8
 3113 0528 0D       		.uleb128 0xd
 3114 0529 02020000 		.4byte	.LASF83
 3115 052d 0A       		.byte	0xa
 3116 052e 47       		.byte	0x47
 3117 052f AC000000 		.4byte	0xac
 3118 0533 02       		.byte	0x2
 3119 0534 23       		.byte	0x23
 3120 0535 0C       		.uleb128 0xc
 3121 0536 0D       		.uleb128 0xd
 3122 0537 74080000 		.4byte	.LASF84
 3123 053b 0A       		.byte	0xa
 3124 053c 4A       		.byte	0x4a
 3125 053d 04030000 		.4byte	0x304
 3126 0541 02       		.byte	0x2
 3127 0542 23       		.byte	0x23
 3128 0543 10       		.uleb128 0x10
 3129 0544 0D       		.uleb128 0xd
 3130 0545 12020000 		.4byte	.LASF85
 3131 0549 0A       		.byte	0xa
 3132 054a 4E       		.byte	0x4e
 3133 054b AC000000 		.4byte	0xac
 3134 054f 02       		.byte	0x2
 3135 0550 23       		.byte	0x23
 3136 0551 14       		.uleb128 0x14
 3137 0552 0D       		.uleb128 0xd
 3138 0553 F3000000 		.4byte	.LASF86
 3139 0557 0A       		.byte	0xa
 3140 0558 51       		.byte	0x51
 3141 0559 AC000000 		.4byte	0xac
 3142 055d 02       		.byte	0x2
 3143 055e 23       		.byte	0x23
 3144 055f 18       		.uleb128 0x18
 3145 0560 00       		.byte	0
 3146 0561 03       		.uleb128 0x3
 3147 0562 39070000 		.4byte	.LASF87
 3148 0566 0A       		.byte	0xa
ARM GAS  /tmp/cceY5bqg.s 			page 106


 3149 0567 55       		.byte	0x55
 3150 0568 F6040000 		.4byte	0x4f6
 3151 056c 0B       		.uleb128 0xb
 3152 056d 0C       		.byte	0xc
 3153 056e 0A       		.byte	0xa
 3154 056f 5C       		.byte	0x5c
 3155 0570 9F050000 		.4byte	0x59f
 3156 0574 0D       		.uleb128 0xd
 3157 0575 20060000 		.4byte	.LASF88
 3158 0579 0A       		.byte	0xa
 3159 057a 5E       		.byte	0x5e
 3160 057b AC000000 		.4byte	0xac
 3161 057f 02       		.byte	0x2
 3162 0580 23       		.byte	0x23
 3163 0581 00       		.uleb128 0
 3164 0582 0D       		.uleb128 0xd
 3165 0583 F4050000 		.4byte	.LASF89
 3166 0587 0A       		.byte	0xa
 3167 0588 65       		.byte	0x65
 3168 0589 AC000000 		.4byte	0xac
 3169 058d 02       		.byte	0x2
 3170 058e 23       		.byte	0x23
 3171 058f 04       		.uleb128 0x4
 3172 0590 0D       		.uleb128 0xd
 3173 0591 49020000 		.4byte	.LASF90
 3174 0595 0A       		.byte	0xa
 3175 0596 68       		.byte	0x68
 3176 0597 AC000000 		.4byte	0xac
 3177 059b 02       		.byte	0x2
 3178 059c 23       		.byte	0x23
 3179 059d 08       		.uleb128 0x8
 3180 059e 00       		.byte	0
 3181 059f 03       		.uleb128 0x3
 3182 05a0 21030000 		.4byte	.LASF91
 3183 05a4 0A       		.byte	0xa
 3184 05a5 71       		.byte	0x71
 3185 05a6 6C050000 		.4byte	0x56c
 3186 05aa 0B       		.uleb128 0xb
 3187 05ab 18       		.byte	0x18
 3188 05ac 0A       		.byte	0xa
 3189 05ad 78       		.byte	0x78
 3190 05ae 07060000 		.4byte	0x607
 3191 05b2 0D       		.uleb128 0xd
 3192 05b3 C7020000 		.4byte	.LASF92
 3193 05b7 0A       		.byte	0xa
 3194 05b8 7A       		.byte	0x7a
 3195 05b9 AC000000 		.4byte	0xac
 3196 05bd 02       		.byte	0x2
 3197 05be 23       		.byte	0x23
 3198 05bf 00       		.uleb128 0
 3199 05c0 0D       		.uleb128 0xd
 3200 05c1 20060000 		.4byte	.LASF88
 3201 05c5 0A       		.byte	0xa
 3202 05c6 7C       		.byte	0x7c
 3203 05c7 AC000000 		.4byte	0xac
 3204 05cb 02       		.byte	0x2
 3205 05cc 23       		.byte	0x23
ARM GAS  /tmp/cceY5bqg.s 			page 107


 3206 05cd 04       		.uleb128 0x4
 3207 05ce 0D       		.uleb128 0xd
 3208 05cf 70050000 		.4byte	.LASF93
 3209 05d3 0A       		.byte	0xa
 3210 05d4 7F       		.byte	0x7f
 3211 05d5 04030000 		.4byte	0x304
 3212 05d9 02       		.byte	0x2
 3213 05da 23       		.byte	0x23
 3214 05db 08       		.uleb128 0x8
 3215 05dc 0D       		.uleb128 0xd
 3216 05dd 12040000 		.4byte	.LASF94
 3217 05e1 0A       		.byte	0xa
 3218 05e2 81       		.byte	0x81
 3219 05e3 AC000000 		.4byte	0xac
 3220 05e7 02       		.byte	0x2
 3221 05e8 23       		.byte	0x23
 3222 05e9 0C       		.uleb128 0xc
 3223 05ea 0D       		.uleb128 0xd
 3224 05eb E1020000 		.4byte	.LASF95
 3225 05ef 0A       		.byte	0xa
 3226 05f0 83       		.byte	0x83
 3227 05f1 AC000000 		.4byte	0xac
 3228 05f5 02       		.byte	0x2
 3229 05f6 23       		.byte	0x23
 3230 05f7 10       		.uleb128 0x10
 3231 05f8 0D       		.uleb128 0xd
 3232 05f9 0A000000 		.4byte	.LASF96
 3233 05fd 0A       		.byte	0xa
 3234 05fe 85       		.byte	0x85
 3235 05ff AC000000 		.4byte	0xac
 3236 0603 02       		.byte	0x2
 3237 0604 23       		.byte	0x23
 3238 0605 14       		.uleb128 0x14
 3239 0606 00       		.byte	0
 3240 0607 03       		.uleb128 0x3
 3241 0608 B9000000 		.4byte	.LASF97
 3242 060c 0A       		.byte	0xa
 3243 060d 86       		.byte	0x86
 3244 060e AA050000 		.4byte	0x5aa
 3245 0612 15       		.uleb128 0x15
 3246 0613 E0080000 		.4byte	.LASF99
 3247 0617 30       		.byte	0x30
 3248 0618 0A       		.byte	0xa
 3249 0619 AF       		.byte	0xaf
 3250 061a 73060000 		.4byte	0x673
 3251 061e 0D       		.uleb128 0xd
 3252 061f F9050000 		.4byte	.LASF67
 3253 0623 0A       		.byte	0xa
 3254 0624 B1       		.byte	0xb1
 3255 0625 73060000 		.4byte	0x673
 3256 0629 02       		.byte	0x2
 3257 062a 23       		.byte	0x23
 3258 062b 00       		.uleb128 0
 3259 062c 0D       		.uleb128 0xd
 3260 062d 4B000000 		.4byte	.LASF68
 3261 0631 0A       		.byte	0xa
 3262 0632 B3       		.byte	0xb3
ARM GAS  /tmp/cceY5bqg.s 			page 108


 3263 0633 61050000 		.4byte	0x561
 3264 0637 02       		.byte	0x2
 3265 0638 23       		.byte	0x23
 3266 0639 04       		.uleb128 0x4
 3267 063a 0D       		.uleb128 0xd
 3268 063b 3C080000 		.4byte	.LASF100
 3269 063f 0A       		.byte	0xa
 3270 0640 B5       		.byte	0xb5
 3271 0641 79060000 		.4byte	0x679
 3272 0645 02       		.byte	0x2
 3273 0646 23       		.byte	0x23
 3274 0647 20       		.uleb128 0x20
 3275 0648 0D       		.uleb128 0xd
 3276 0649 93020000 		.4byte	.LASF69
 3277 064d 0A       		.byte	0xa
 3278 064e B7       		.byte	0xb7
 3279 064f 5F030000 		.4byte	0x35f
 3280 0653 02       		.byte	0x2
 3281 0654 23       		.byte	0x23
 3282 0655 24       		.uleb128 0x24
 3283 0656 0D       		.uleb128 0xd
 3284 0657 AE070000 		.4byte	.LASF70
 3285 065b 0A       		.byte	0xa
 3286 065c B9       		.byte	0xb9
 3287 065d B7000000 		.4byte	0xb7
 3288 0661 02       		.byte	0x2
 3289 0662 23       		.byte	0x23
 3290 0663 28       		.uleb128 0x28
 3291 0664 0D       		.uleb128 0xd
 3292 0665 D6030000 		.4byte	.LASF76
 3293 0669 0A       		.byte	0xa
 3294 066a BB       		.byte	0xbb
 3295 066b B7000000 		.4byte	0xb7
 3296 066f 02       		.byte	0x2
 3297 0670 23       		.byte	0x23
 3298 0671 2C       		.uleb128 0x2c
 3299 0672 00       		.byte	0
 3300 0673 16       		.uleb128 0x16
 3301 0674 04       		.byte	0x4
 3302 0675 41020000 		.4byte	0x241
 3303 0679 16       		.uleb128 0x16
 3304 067a 04       		.byte	0x4
 3305 067b EB040000 		.4byte	0x4eb
 3306 067f 03       		.uleb128 0x3
 3307 0680 E5070000 		.4byte	.LASF101
 3308 0684 0A       		.byte	0xa
 3309 0685 C6       		.byte	0xc6
 3310 0686 12060000 		.4byte	0x612
 3311 068a 12       		.uleb128 0x12
 3312 068b 01       		.byte	0x1
 3313 068c 37000000 		.4byte	0x37
 3314 0690 0B       		.byte	0xb
 3315 0691 33       		.byte	0x33
 3316 0692 AF060000 		.4byte	0x6af
 3317 0696 13       		.uleb128 0x13
 3318 0697 62020000 		.4byte	.LASF102
 3319 069b 64       		.byte	0x64
ARM GAS  /tmp/cceY5bqg.s 			page 109


 3320 069c 13       		.uleb128 0x13
 3321 069d 1E080000 		.4byte	.LASF103
 3322 06a1 0A       		.byte	0xa
 3323 06a2 13       		.uleb128 0x13
 3324 06a3 7A030000 		.4byte	.LASF104
 3325 06a7 01       		.byte	0x1
 3326 06a8 13       		.uleb128 0x13
 3327 06a9 A5050000 		.4byte	.LASF105
 3328 06ad 01       		.byte	0x1
 3329 06ae 00       		.byte	0
 3330 06af 03       		.uleb128 0x3
 3331 06b0 19000000 		.4byte	.LASF106
 3332 06b4 0B       		.byte	0xb
 3333 06b5 38       		.byte	0x38
 3334 06b6 8A060000 		.4byte	0x68a
 3335 06ba 08       		.uleb128 0x8
 3336 06bb A3070000 		.4byte	.LASF107
 3337 06bf 0B       		.byte	0xb
 3338 06c0 3D       		.byte	0x3d
 3339 06c1 AC000000 		.4byte	0xac
 3340 06c5 01       		.byte	0x1
 3341 06c6 01       		.byte	0x1
 3342 06c7 08       		.uleb128 0x8
 3343 06c8 48030000 		.4byte	.LASF108
 3344 06cc 0B       		.byte	0xb
 3345 06cd 3E       		.byte	0x3e
 3346 06ce AF060000 		.4byte	0x6af
 3347 06d2 01       		.byte	0x1
 3348 06d3 01       		.byte	0x1
 3349 06d4 1A       		.uleb128 0x1a
 3350 06d5 01       		.byte	0x1
 3351 06d6 E4010000 		.4byte	.LASF109
 3352 06da 01       		.byte	0x1
 3353 06db 4E09     		.2byte	0x94e
 3354 06dd 01       		.byte	0x1
 3355 06de E0020000 		.4byte	.LFB91
 3356 06e2 FA020000 		.4byte	.LFE91
 3357 06e6 00000000 		.4byte	.LLST19
 3358 06ea 01       		.byte	0x1
 3359 06eb 19070000 		.4byte	0x719
 3360 06ef 1B       		.uleb128 0x1b
 3361 06f0 D0040000 		.4byte	.LASF111
 3362 06f4 01       		.byte	0x1
 3363 06f5 4E09     		.2byte	0x94e
 3364 06f7 79060000 		.4byte	0x679
 3365 06fb 20000000 		.4byte	.LLST20
 3366 06ff 1C       		.uleb128 0x1c
 3367 0700 4E080000 		.4byte	.LASF112
 3368 0704 01       		.byte	0x1
 3369 0705 5109     		.2byte	0x951
 3370 0707 19070000 		.4byte	0x719
 3371 070b 41000000 		.4byte	.LLST21
 3372 070f 1D       		.uleb128 0x1d
 3373 0710 F8020000 		.4byte	.LVL44
 3374 0714 13090000 		.4byte	0x913
 3375 0718 00       		.byte	0
 3376 0719 16       		.uleb128 0x16
ARM GAS  /tmp/cceY5bqg.s 			page 110


 3377 071a 04       		.byte	0x4
 3378 071b 7F060000 		.4byte	0x67f
 3379 071f 1A       		.uleb128 0x1a
 3380 0720 01       		.byte	0x1
 3381 0721 28060000 		.4byte	.LASF110
 3382 0725 01       		.byte	0x1
 3383 0726 3C09     		.2byte	0x93c
 3384 0728 01       		.byte	0x1
 3385 0729 E6010000 		.4byte	.LFB90
 3386 072d F0010000 		.4byte	.LFE90
 3387 0731 54000000 		.4byte	.LLST14
 3388 0735 01       		.byte	0x1
 3389 0736 64070000 		.4byte	0x764
 3390 073a 1B       		.uleb128 0x1b
 3391 073b D0040000 		.4byte	.LASF111
 3392 073f 01       		.byte	0x1
 3393 0740 3C09     		.2byte	0x93c
 3394 0742 79060000 		.4byte	0x679
 3395 0746 74000000 		.4byte	.LLST15
 3396 074a 1C       		.uleb128 0x1c
 3397 074b 4E080000 		.4byte	.LASF112
 3398 074f 01       		.byte	0x1
 3399 0750 3F09     		.2byte	0x93f
 3400 0752 19070000 		.4byte	0x719
 3401 0756 95000000 		.4byte	.LLST16
 3402 075a 1D       		.uleb128 0x1d
 3403 075b EE010000 		.4byte	.LVL35
 3404 075f 4A090000 		.4byte	0x94a
 3405 0763 00       		.byte	0
 3406 0764 1E       		.uleb128 0x1e
 3407 0765 01       		.byte	0x1
 3408 0766 8C040000 		.4byte	.LASF158
 3409 076a 01       		.byte	0x1
 3410 076b 0D09     		.2byte	0x90d
 3411 076d 01       		.byte	0x1
 3412 076e 96010000 		.4byte	.LFB89
 3413 0772 E4010000 		.4byte	.LFE89
 3414 0776 B8000000 		.4byte	.LLST11
 3415 077a A8070000 		.4byte	0x7a8
 3416 077e 1B       		.uleb128 0x1b
 3417 077f D0040000 		.4byte	.LASF111
 3418 0783 01       		.byte	0x1
 3419 0784 0D09     		.2byte	0x90d
 3420 0786 79060000 		.4byte	0x679
 3421 078a E4000000 		.4byte	.LLST12
 3422 078e 1C       		.uleb128 0x1c
 3423 078f 4E080000 		.4byte	.LASF112
 3424 0793 01       		.byte	0x1
 3425 0794 1009     		.2byte	0x910
 3426 0796 19070000 		.4byte	0x719
 3427 079a 1E010000 		.4byte	.LLST13
 3428 079e 1D       		.uleb128 0x1d
 3429 079f D8010000 		.4byte	.LVL29
 3430 07a3 65090000 		.4byte	0x965
 3431 07a7 00       		.byte	0
 3432 07a8 1F       		.uleb128 0x1f
 3433 07a9 01       		.byte	0x1
ARM GAS  /tmp/cceY5bqg.s 			page 111


 3434 07aa 66070000 		.4byte	.LASF113
 3435 07ae 01       		.byte	0x1
 3436 07af E708     		.2byte	0x8e7
 3437 07b1 01       		.byte	0x1
 3438 07b2 3B030000 		.4byte	0x33b
 3439 07b6 01       		.byte	0x1
 3440 07b7 D4070000 		.4byte	0x7d4
 3441 07bb 20       		.uleb128 0x20
 3442 07bc 4E080000 		.4byte	.LASF112
 3443 07c0 01       		.byte	0x1
 3444 07c1 E708     		.2byte	0x8e7
 3445 07c3 19070000 		.4byte	0x719
 3446 07c7 21       		.uleb128 0x21
 3447 07c8 95060000 		.4byte	.LASF115
 3448 07cc 01       		.byte	0x1
 3449 07cd E908     		.2byte	0x8e9
 3450 07cf AC000000 		.4byte	0xac
 3451 07d3 00       		.byte	0
 3452 07d4 1F       		.uleb128 0x1f
 3453 07d5 01       		.byte	0x1
 3454 07d6 8B010000 		.4byte	.LASF114
 3455 07da 01       		.byte	0x1
 3456 07db B008     		.2byte	0x8b0
 3457 07dd 01       		.byte	0x1
 3458 07de 3B030000 		.4byte	0x33b
 3459 07e2 01       		.byte	0x1
 3460 07e3 0C080000 		.4byte	0x80c
 3461 07e7 20       		.uleb128 0x20
 3462 07e8 4E080000 		.4byte	.LASF112
 3463 07ec 01       		.byte	0x1
 3464 07ed B008     		.2byte	0x8b0
 3465 07ef 19070000 		.4byte	0x719
 3466 07f3 21       		.uleb128 0x21
 3467 07f4 95060000 		.4byte	.LASF115
 3468 07f8 01       		.byte	0x1
 3469 07f9 B208     		.2byte	0x8b2
 3470 07fb AC000000 		.4byte	0xac
 3471 07ff 21       		.uleb128 0x21
 3472 0800 02040000 		.4byte	.LASF116
 3473 0804 01       		.byte	0x1
 3474 0805 B308     		.2byte	0x8b3
 3475 0807 B7000000 		.4byte	0xb7
 3476 080b 00       		.byte	0
 3477 080c 22       		.uleb128 0x22
 3478 080d 01       		.byte	0x1
 3479 080e 40010000 		.4byte	.LASF117
 3480 0812 01       		.byte	0x1
 3481 0813 9808     		.2byte	0x898
 3482 0815 01       		.byte	0x1
 3483 0816 AC000000 		.4byte	0xac
 3484 081a 58040000 		.4byte	.LFB86
 3485 081e 5C040000 		.4byte	.LFE86
 3486 0822 02       		.byte	0x2
 3487 0823 7D       		.byte	0x7d
 3488 0824 00       		.sleb128 0
 3489 0825 01       		.byte	0x1
 3490 0826 3B080000 		.4byte	0x83b
ARM GAS  /tmp/cceY5bqg.s 			page 112


 3491 082a 1B       		.uleb128 0x1b
 3492 082b 4E080000 		.4byte	.LASF112
 3493 082f 01       		.byte	0x1
 3494 0830 9808     		.2byte	0x898
 3495 0832 19070000 		.4byte	0x719
 3496 0836 48010000 		.4byte	.LLST29
 3497 083a 00       		.byte	0
 3498 083b 22       		.uleb128 0x22
 3499 083c 01       		.byte	0x1
 3500 083d E0030000 		.4byte	.LASF118
 3501 0841 01       		.byte	0x1
 3502 0842 8D08     		.2byte	0x88d
 3503 0844 01       		.byte	0x1
 3504 0845 AC000000 		.4byte	0xac
 3505 0849 54040000 		.4byte	.LFB85
 3506 084d 58040000 		.4byte	.LFE85
 3507 0851 02       		.byte	0x2
 3508 0852 7D       		.byte	0x7d
 3509 0853 00       		.sleb128 0
 3510 0854 01       		.byte	0x1
 3511 0855 6A080000 		.4byte	0x86a
 3512 0859 1B       		.uleb128 0x1b
 3513 085a 4E080000 		.4byte	.LASF112
 3514 085e 01       		.byte	0x1
 3515 085f 8D08     		.2byte	0x88d
 3516 0861 19070000 		.4byte	0x719
 3517 0865 69010000 		.4byte	.LLST28
 3518 0869 00       		.byte	0
 3519 086a 23       		.uleb128 0x23
 3520 086b 01       		.byte	0x1
 3521 086c 02060000 		.4byte	.LASF119
 3522 0870 01       		.byte	0x1
 3523 0871 3608     		.2byte	0x836
 3524 0873 01       		.byte	0x1
 3525 0874 3B030000 		.4byte	0x33b
 3526 0878 04040000 		.4byte	.LFB84
 3527 087c 54040000 		.4byte	.LFE84
 3528 0880 8A010000 		.4byte	.LLST26
 3529 0884 01       		.byte	0x1
 3530 0885 A8080000 		.4byte	0x8a8
 3531 0889 1B       		.uleb128 0x1b
 3532 088a 4E080000 		.4byte	.LASF112
 3533 088e 01       		.byte	0x1
 3534 088f 3608     		.2byte	0x836
 3535 0891 19070000 		.4byte	0x719
 3536 0895 AA010000 		.4byte	.LLST27
 3537 0899 24       		.uleb128 0x24
 3538 089a 9C040000 		.4byte	.LASF120
 3539 089e 01       		.byte	0x1
 3540 089f 3608     		.2byte	0x836
 3541 08a1 A8080000 		.4byte	0x8a8
 3542 08a5 01       		.byte	0x1
 3543 08a6 51       		.byte	0x51
 3544 08a7 00       		.byte	0
 3545 08a8 16       		.uleb128 0x16
 3546 08a9 04       		.byte	0x4
 3547 08aa 07060000 		.4byte	0x607
ARM GAS  /tmp/cceY5bqg.s 			page 113


 3548 08ae 23       		.uleb128 0x23
 3549 08af 01       		.byte	0x1
 3550 08b0 CA050000 		.4byte	.LASF121
 3551 08b4 01       		.byte	0x1
 3552 08b5 C807     		.2byte	0x7c8
 3553 08b7 01       		.byte	0x1
 3554 08b8 3B030000 		.4byte	0x33b
 3555 08bc FA020000 		.4byte	.LFB83
 3556 08c0 04040000 		.4byte	.LFE83
 3557 08c4 E4010000 		.4byte	.LLST22
 3558 08c8 01       		.byte	0x1
 3559 08c9 0D090000 		.4byte	0x90d
 3560 08cd 1B       		.uleb128 0x1b
 3561 08ce 4E080000 		.4byte	.LASF112
 3562 08d2 01       		.byte	0x1
 3563 08d3 C807     		.2byte	0x7c8
 3564 08d5 19070000 		.4byte	0x719
 3565 08d9 1C020000 		.4byte	.LLST23
 3566 08dd 1B       		.uleb128 0x1b
 3567 08de 8A080000 		.4byte	.LASF122
 3568 08e2 01       		.byte	0x1
 3569 08e3 C807     		.2byte	0x7c8
 3570 08e5 0D090000 		.4byte	0x90d
 3571 08e9 48020000 		.4byte	.LLST24
 3572 08ed 1C       		.uleb128 0x1c
 3573 08ee B8030000 		.4byte	.LASF123
 3574 08f2 01       		.byte	0x1
 3575 08f3 CA07     		.2byte	0x7ca
 3576 08f5 3B030000 		.4byte	0x33b
 3577 08f9 8D020000 		.4byte	.LLST25
 3578 08fd 25       		.uleb128 0x25
 3579 08fe 02040000 		.4byte	.LASF116
 3580 0902 01       		.byte	0x1
 3581 0903 CB07     		.2byte	0x7cb
 3582 0905 B7000000 		.4byte	0xb7
 3583 0909 02       		.byte	0x2
 3584 090a 91       		.byte	0x91
 3585 090b 6C       		.sleb128 -20
 3586 090c 00       		.byte	0
 3587 090d 16       		.uleb128 0x16
 3588 090e 04       		.byte	0x4
 3589 090f 9F050000 		.4byte	0x59f
 3590 0913 26       		.uleb128 0x26
 3591 0914 01       		.byte	0x1
 3592 0915 08080000 		.4byte	.LASF159
 3593 0919 01       		.byte	0x1
 3594 091a 9807     		.2byte	0x798
 3595 091c 01       		.byte	0x1
 3596 091d 01       		.byte	0x1
 3597 091e 2F090000 		.4byte	0x92f
 3598 0922 20       		.uleb128 0x20
 3599 0923 4E080000 		.4byte	.LASF112
 3600 0927 01       		.byte	0x1
 3601 0928 9807     		.2byte	0x798
 3602 092a 19070000 		.4byte	0x719
 3603 092e 00       		.byte	0
 3604 092f 27       		.uleb128 0x27
ARM GAS  /tmp/cceY5bqg.s 			page 114


 3605 0930 01       		.byte	0x1
 3606 0931 50040000 		.4byte	.LASF124
 3607 0935 01       		.byte	0x1
 3608 0936 8907     		.2byte	0x789
 3609 0938 01       		.byte	0x1
 3610 0939 4A090000 		.4byte	0x94a
 3611 093d 20       		.uleb128 0x20
 3612 093e 4E080000 		.4byte	.LASF112
 3613 0942 01       		.byte	0x1
 3614 0943 8907     		.2byte	0x789
 3615 0945 19070000 		.4byte	0x719
 3616 0949 00       		.byte	0
 3617 094a 27       		.uleb128 0x27
 3618 094b 01       		.byte	0x1
 3619 094c 03070000 		.4byte	.LASF125
 3620 0950 01       		.byte	0x1
 3621 0951 7B07     		.2byte	0x77b
 3622 0953 01       		.byte	0x1
 3623 0954 65090000 		.4byte	0x965
 3624 0958 20       		.uleb128 0x20
 3625 0959 4E080000 		.4byte	.LASF112
 3626 095d 01       		.byte	0x1
 3627 095e 7B07     		.2byte	0x77b
 3628 0960 19070000 		.4byte	0x719
 3629 0964 00       		.byte	0
 3630 0965 27       		.uleb128 0x27
 3631 0966 01       		.byte	0x1
 3632 0967 20070000 		.4byte	.LASF126
 3633 096b 01       		.byte	0x1
 3634 096c 6D07     		.2byte	0x76d
 3635 096e 01       		.byte	0x1
 3636 096f 80090000 		.4byte	0x980
 3637 0973 20       		.uleb128 0x20
 3638 0974 4E080000 		.4byte	.LASF112
 3639 0978 01       		.byte	0x1
 3640 0979 6D07     		.2byte	0x76d
 3641 097b 19070000 		.4byte	0x719
 3642 097f 00       		.byte	0
 3643 0980 1A       		.uleb128 0x1a
 3644 0981 01       		.byte	0x1
 3645 0982 76000000 		.4byte	.LASF127
 3646 0986 01       		.byte	0x1
 3647 0987 EE06     		.2byte	0x6ee
 3648 0989 01       		.byte	0x1
 3649 098a F2010000 		.4byte	.LFB78
 3650 098e DE020000 		.4byte	.LFE78
 3651 0992 D0020000 		.4byte	.LLST17
 3652 0996 01       		.byte	0x1
 3653 0997 E4090000 		.4byte	0x9e4
 3654 099b 1B       		.uleb128 0x1b
 3655 099c 4E080000 		.4byte	.LASF112
 3656 09a0 01       		.byte	0x1
 3657 09a1 EE06     		.2byte	0x6ee
 3658 09a3 19070000 		.4byte	0x719
 3659 09a7 F0020000 		.4byte	.LLST18
 3660 09ab 28       		.uleb128 0x28
 3661 09ac 46020000 		.4byte	.LVL38
ARM GAS  /tmp/cceY5bqg.s 			page 115


 3662 09b0 65090000 		.4byte	0x965
 3663 09b4 BF090000 		.4byte	0x9bf
 3664 09b8 29       		.uleb128 0x29
 3665 09b9 01       		.byte	0x1
 3666 09ba 50       		.byte	0x50
 3667 09bb 02       		.byte	0x2
 3668 09bc 74       		.byte	0x74
 3669 09bd 00       		.sleb128 0
 3670 09be 00       		.byte	0
 3671 09bf 28       		.uleb128 0x28
 3672 09c0 B0020000 		.4byte	.LVL39
 3673 09c4 690F0000 		.4byte	0xf69
 3674 09c8 D3090000 		.4byte	0x9d3
 3675 09cc 29       		.uleb128 0x29
 3676 09cd 01       		.byte	0x1
 3677 09ce 50       		.byte	0x50
 3678 09cf 02       		.byte	0x2
 3679 09d0 74       		.byte	0x74
 3680 09d1 00       		.sleb128 0
 3681 09d2 00       		.byte	0
 3682 09d3 2A       		.uleb128 0x2a
 3683 09d4 D4020000 		.4byte	.LVL40
 3684 09d8 2F090000 		.4byte	0x92f
 3685 09dc 29       		.uleb128 0x29
 3686 09dd 01       		.byte	0x1
 3687 09de 50       		.byte	0x50
 3688 09df 02       		.byte	0x2
 3689 09e0 74       		.byte	0x74
 3690 09e1 00       		.sleb128 0
 3691 09e2 00       		.byte	0
 3692 09e3 00       		.byte	0
 3693 09e4 22       		.uleb128 0x22
 3694 09e5 01       		.byte	0x1
 3695 09e6 36050000 		.4byte	.LASF128
 3696 09ea 01       		.byte	0x1
 3697 09eb DD06     		.2byte	0x6dd
 3698 09ed 01       		.byte	0x1
 3699 09ee AC000000 		.4byte	0xac
 3700 09f2 8E010000 		.4byte	.LFB77
 3701 09f6 94010000 		.4byte	.LFE77
 3702 09fa 02       		.byte	0x2
 3703 09fb 7D       		.byte	0x7d
 3704 09fc 00       		.sleb128 0
 3705 09fd 01       		.byte	0x1
 3706 09fe 130A0000 		.4byte	0xa13
 3707 0a02 1B       		.uleb128 0x1b
 3708 0a03 4E080000 		.4byte	.LASF112
 3709 0a07 01       		.byte	0x1
 3710 0a08 DD06     		.2byte	0x6dd
 3711 0a0a 19070000 		.4byte	0x719
 3712 0a0e 0E030000 		.4byte	.LLST10
 3713 0a12 00       		.byte	0
 3714 0a13 23       		.uleb128 0x23
 3715 0a14 01       		.byte	0x1
 3716 0a15 F7070000 		.4byte	.LASF129
 3717 0a19 01       		.byte	0x1
 3718 0a1a 9C06     		.2byte	0x69c
ARM GAS  /tmp/cceY5bqg.s 			page 116


 3719 0a1c 01       		.byte	0x1
 3720 0a1d 3B030000 		.4byte	0x33b
 3721 0a21 EE090000 		.4byte	.LFB76
 3722 0a25 3A0A0000 		.4byte	.LFE76
 3723 0a29 2F030000 		.4byte	.LLST64
 3724 0a2d 01       		.byte	0x1
 3725 0a2e 700A0000 		.4byte	0xa70
 3726 0a32 1B       		.uleb128 0x1b
 3727 0a33 4E080000 		.4byte	.LASF112
 3728 0a37 01       		.byte	0x1
 3729 0a38 9C06     		.2byte	0x69c
 3730 0a3a 19070000 		.4byte	0x719
 3731 0a3e 4F030000 		.4byte	.LLST65
 3732 0a42 1C       		.uleb128 0x1c
 3733 0a43 B8030000 		.4byte	.LASF123
 3734 0a47 01       		.byte	0x1
 3735 0a48 9E06     		.2byte	0x69e
 3736 0a4a 3B030000 		.4byte	0x33b
 3737 0a4e 83030000 		.4byte	.LLST66
 3738 0a52 28       		.uleb128 0x28
 3739 0a53 040A0000 		.4byte	.LVL131
 3740 0a57 A8070000 		.4byte	0x7a8
 3741 0a5b 660A0000 		.4byte	0xa66
 3742 0a5f 29       		.uleb128 0x29
 3743 0a60 01       		.byte	0x1
 3744 0a61 50       		.byte	0x50
 3745 0a62 02       		.byte	0x2
 3746 0a63 74       		.byte	0x74
 3747 0a64 00       		.sleb128 0
 3748 0a65 00       		.byte	0
 3749 0a66 1D       		.uleb128 0x1d
 3750 0a67 160A0000 		.4byte	.LVL133
 3751 0a6b 770F0000 		.4byte	0xf77
 3752 0a6f 00       		.byte	0
 3753 0a70 23       		.uleb128 0x23
 3754 0a71 01       		.byte	0x1
 3755 0a72 6B010000 		.4byte	.LASF130
 3756 0a76 01       		.byte	0x1
 3757 0a77 0F06     		.2byte	0x60f
 3758 0a79 01       		.byte	0x1
 3759 0a7a 3B030000 		.4byte	0x33b
 3760 0a7e 5C060000 		.4byte	.LFB75
 3761 0a82 78070000 		.4byte	.LFE75
 3762 0a86 B9030000 		.4byte	.LLST40
 3763 0a8a 01       		.byte	0x1
 3764 0a8b FA0A0000 		.4byte	0xafa
 3765 0a8f 1B       		.uleb128 0x1b
 3766 0a90 4E080000 		.4byte	.LASF112
 3767 0a94 01       		.byte	0x1
 3768 0a95 0F06     		.2byte	0x60f
 3769 0a97 19070000 		.4byte	0x719
 3770 0a9b D9030000 		.4byte	.LLST41
 3771 0a9f 1B       		.uleb128 0x1b
 3772 0aa0 3A010000 		.4byte	.LASF131
 3773 0aa4 01       		.byte	0x1
 3774 0aa5 0F06     		.2byte	0x60f
 3775 0aa7 FA0A0000 		.4byte	0xafa
ARM GAS  /tmp/cceY5bqg.s 			page 117


 3776 0aab 02040000 		.4byte	.LLST42
 3777 0aaf 1B       		.uleb128 0x1b
 3778 0ab0 47080000 		.4byte	.LASF132
 3779 0ab4 01       		.byte	0x1
 3780 0ab5 0F06     		.2byte	0x60f
 3781 0ab7 AC000000 		.4byte	0xac
 3782 0abb 20040000 		.4byte	.LLST43
 3783 0abf 1C       		.uleb128 0x1c
 3784 0ac0 B8030000 		.4byte	.LASF123
 3785 0ac4 01       		.byte	0x1
 3786 0ac5 1106     		.2byte	0x611
 3787 0ac7 3B030000 		.4byte	0x33b
 3788 0acb 3E040000 		.4byte	.LLST44
 3789 0acf 28       		.uleb128 0x28
 3790 0ad0 90060000 		.4byte	.LVL87
 3791 0ad4 D4070000 		.4byte	0x7d4
 3792 0ad8 E30A0000 		.4byte	0xae3
 3793 0adc 29       		.uleb128 0x29
 3794 0add 01       		.byte	0x1
 3795 0ade 50       		.byte	0x50
 3796 0adf 02       		.byte	0x2
 3797 0ae0 74       		.byte	0x74
 3798 0ae1 00       		.sleb128 0
 3799 0ae2 00       		.byte	0
 3800 0ae3 2A       		.uleb128 0x2a
 3801 0ae4 16070000 		.4byte	.LVL89
 3802 0ae8 850F0000 		.4byte	0xf85
 3803 0aec 29       		.uleb128 0x29
 3804 0aed 01       		.byte	0x1
 3805 0aee 52       		.byte	0x52
 3806 0aef 02       		.byte	0x2
 3807 0af0 77       		.byte	0x77
 3808 0af1 00       		.sleb128 0
 3809 0af2 29       		.uleb128 0x29
 3810 0af3 01       		.byte	0x1
 3811 0af4 53       		.byte	0x53
 3812 0af5 02       		.byte	0x2
 3813 0af6 78       		.byte	0x78
 3814 0af7 00       		.sleb128 0
 3815 0af8 00       		.byte	0
 3816 0af9 00       		.byte	0
 3817 0afa 16       		.uleb128 0x16
 3818 0afb 04       		.byte	0x4
 3819 0afc AC000000 		.4byte	0xac
 3820 0b00 23       		.uleb128 0x23
 3821 0b01 01       		.byte	0x1
 3822 0b02 C0040000 		.4byte	.LASF133
 3823 0b06 01       		.byte	0x1
 3824 0b07 D605     		.2byte	0x5d6
 3825 0b09 01       		.byte	0x1
 3826 0b0a 3B030000 		.4byte	0x33b
 3827 0b0e B0090000 		.4byte	.LFB74
 3828 0b12 EE090000 		.4byte	.LFE74
 3829 0b16 74040000 		.4byte	.LLST61
 3830 0b1a 01       		.byte	0x1
 3831 0b1b 500B0000 		.4byte	0xb50
 3832 0b1f 1B       		.uleb128 0x1b
ARM GAS  /tmp/cceY5bqg.s 			page 118


 3833 0b20 4E080000 		.4byte	.LASF112
 3834 0b24 01       		.byte	0x1
 3835 0b25 D605     		.2byte	0x5d6
 3836 0b27 19070000 		.4byte	0x719
 3837 0b2b 94040000 		.4byte	.LLST62
 3838 0b2f 1C       		.uleb128 0x1c
 3839 0b30 B8030000 		.4byte	.LASF123
 3840 0b34 01       		.byte	0x1
 3841 0b35 D805     		.2byte	0x5d8
 3842 0b37 3B030000 		.4byte	0x33b
 3843 0b3b C8040000 		.4byte	.LLST63
 3844 0b3f 2A       		.uleb128 0x2a
 3845 0b40 C6090000 		.4byte	.LVL127
 3846 0b44 A8070000 		.4byte	0x7a8
 3847 0b48 29       		.uleb128 0x29
 3848 0b49 01       		.byte	0x1
 3849 0b4a 50       		.byte	0x50
 3850 0b4b 02       		.byte	0x2
 3851 0b4c 74       		.byte	0x74
 3852 0b4d 00       		.sleb128 0
 3853 0b4e 00       		.byte	0
 3854 0b4f 00       		.byte	0
 3855 0b50 23       		.uleb128 0x23
 3856 0b51 01       		.byte	0x1
 3857 0b52 94030000 		.4byte	.LASF134
 3858 0b56 01       		.byte	0x1
 3859 0b57 6705     		.2byte	0x567
 3860 0b59 01       		.byte	0x1
 3861 0b5a 3B030000 		.4byte	0x33b
 3862 0b5e 90050000 		.4byte	.LFB73
 3863 0b62 5C060000 		.4byte	.LFE73
 3864 0b66 F3040000 		.4byte	.LLST37
 3865 0b6a 01       		.byte	0x1
 3866 0b6b A00B0000 		.4byte	0xba0
 3867 0b6f 1B       		.uleb128 0x1b
 3868 0b70 4E080000 		.4byte	.LASF112
 3869 0b74 01       		.byte	0x1
 3870 0b75 6705     		.2byte	0x567
 3871 0b77 19070000 		.4byte	0x719
 3872 0b7b 13050000 		.4byte	.LLST38
 3873 0b7f 1C       		.uleb128 0x1c
 3874 0b80 B8030000 		.4byte	.LASF123
 3875 0b84 01       		.byte	0x1
 3876 0b85 6905     		.2byte	0x569
 3877 0b87 3B030000 		.4byte	0x33b
 3878 0b8b 55050000 		.4byte	.LLST39
 3879 0b8f 2A       		.uleb128 0x2a
 3880 0b90 A6050000 		.4byte	.LVL78
 3881 0b94 D4070000 		.4byte	0x7d4
 3882 0b98 29       		.uleb128 0x29
 3883 0b99 01       		.byte	0x1
 3884 0b9a 50       		.byte	0x50
 3885 0b9b 02       		.byte	0x2
 3886 0b9c 74       		.byte	0x74
 3887 0b9d 00       		.sleb128 0
 3888 0b9e 00       		.byte	0
 3889 0b9f 00       		.byte	0
ARM GAS  /tmp/cceY5bqg.s 			page 119


 3890 0ba0 23       		.uleb128 0x23
 3891 0ba1 01       		.byte	0x1
 3892 0ba2 25010000 		.4byte	.LASF135
 3893 0ba6 01       		.byte	0x1
 3894 0ba7 3605     		.2byte	0x536
 3895 0ba9 01       		.byte	0x1
 3896 0baa 3B030000 		.4byte	0x33b
 3897 0bae 40010000 		.4byte	.LFB72
 3898 0bb2 8E010000 		.4byte	.LFE72
 3899 0bb6 80050000 		.4byte	.LLST5
 3900 0bba 01       		.byte	0x1
 3901 0bbb 120C0000 		.4byte	0xc12
 3902 0bbf 1B       		.uleb128 0x1b
 3903 0bc0 4E080000 		.4byte	.LASF112
 3904 0bc4 01       		.byte	0x1
 3905 0bc5 3605     		.2byte	0x536
 3906 0bc7 19070000 		.4byte	0x719
 3907 0bcb A0050000 		.4byte	.LLST6
 3908 0bcf 1B       		.uleb128 0x1b
 3909 0bd0 75020000 		.4byte	.LASF136
 3910 0bd4 01       		.byte	0x1
 3911 0bd5 3605     		.2byte	0x536
 3912 0bd7 AC000000 		.4byte	0xac
 3913 0bdb BE050000 		.4byte	.LLST7
 3914 0bdf 1B       		.uleb128 0x1b
 3915 0be0 B5020000 		.4byte	.LASF137
 3916 0be4 01       		.byte	0x1
 3917 0be5 3605     		.2byte	0x536
 3918 0be7 AC000000 		.4byte	0xac
 3919 0beb DC050000 		.4byte	.LLST8
 3920 0bef 1C       		.uleb128 0x1c
 3921 0bf0 95060000 		.4byte	.LASF115
 3922 0bf4 01       		.byte	0x1
 3923 0bf5 3805     		.2byte	0x538
 3924 0bf7 AC000000 		.4byte	0xac
 3925 0bfb FA050000 		.4byte	.LLST9
 3926 0bff 1D       		.uleb128 0x1d
 3927 0c00 4C010000 		.4byte	.LVL19
 3928 0c04 930F0000 		.4byte	0xf93
 3929 0c08 1D       		.uleb128 0x1d
 3930 0c09 86010000 		.4byte	.LVL23
 3931 0c0d 930F0000 		.4byte	0xf93
 3932 0c11 00       		.byte	0
 3933 0c12 23       		.uleb128 0x23
 3934 0c13 01       		.byte	0x1
 3935 0c14 51010000 		.4byte	.LASF138
 3936 0c18 01       		.byte	0x1
 3937 0c19 B304     		.2byte	0x4b3
 3938 0c1b 01       		.byte	0x1
 3939 0c1c 3B030000 		.4byte	0x33b
 3940 0c20 04000000 		.4byte	.LFB71
 3941 0c24 40010000 		.4byte	.LFE71
 3942 0c28 19060000 		.4byte	.LLST0
 3943 0c2c 01       		.byte	0x1
 3944 0c2d AF0C0000 		.4byte	0xcaf
 3945 0c31 1B       		.uleb128 0x1b
 3946 0c32 4E080000 		.4byte	.LASF112
ARM GAS  /tmp/cceY5bqg.s 			page 120


 3947 0c36 01       		.byte	0x1
 3948 0c37 B304     		.2byte	0x4b3
 3949 0c39 19070000 		.4byte	0x719
 3950 0c3d 51060000 		.4byte	.LLST1
 3951 0c41 1B       		.uleb128 0x1b
 3952 0c42 B5020000 		.4byte	.LASF137
 3953 0c46 01       		.byte	0x1
 3954 0c47 B304     		.2byte	0x4b3
 3955 0c49 AC000000 		.4byte	0xac
 3956 0c4d 6F060000 		.4byte	.LLST2
 3957 0c51 1C       		.uleb128 0x1c
 3958 0c52 95060000 		.4byte	.LASF115
 3959 0c56 01       		.byte	0x1
 3960 0c57 B504     		.2byte	0x4b5
 3961 0c59 AC000000 		.4byte	0xac
 3962 0c5d 8D060000 		.4byte	.LLST3
 3963 0c61 25       		.uleb128 0x25
 3964 0c62 2D000000 		.4byte	.LASF139
 3965 0c66 01       		.byte	0x1
 3966 0c67 B904     		.2byte	0x4b9
 3967 0c69 B7000000 		.4byte	0xb7
 3968 0c6d 02       		.byte	0x2
 3969 0c6e 91       		.byte	0x91
 3970 0c6f 64       		.sleb128 -28
 3971 0c70 1C       		.uleb128 0x1c
 3972 0c71 83050000 		.4byte	.LASF140
 3973 0c75 01       		.byte	0x1
 3974 0c76 BA04     		.2byte	0x4ba
 3975 0c78 AC000000 		.4byte	0xac
 3976 0c7c CD060000 		.4byte	.LLST4
 3977 0c80 1D       		.uleb128 0x1d
 3978 0c81 12000000 		.4byte	.LVL2
 3979 0c85 930F0000 		.4byte	0xf93
 3980 0c89 28       		.uleb128 0x28
 3981 0c8a 46000000 		.4byte	.LVL8
 3982 0c8e A10F0000 		.4byte	0xfa1
 3983 0c92 9C0C0000 		.4byte	0xc9c
 3984 0c96 29       		.uleb128 0x29
 3985 0c97 01       		.byte	0x1
 3986 0c98 50       		.byte	0x50
 3987 0c99 01       		.byte	0x1
 3988 0c9a 32       		.byte	0x32
 3989 0c9b 00       		.byte	0
 3990 0c9c 1D       		.uleb128 0x1d
 3991 0c9d 84000000 		.4byte	.LVL10
 3992 0ca1 930F0000 		.4byte	0xf93
 3993 0ca5 1D       		.uleb128 0x1d
 3994 0ca6 AE000000 		.4byte	.LVL14
 3995 0caa 930F0000 		.4byte	0xf93
 3996 0cae 00       		.byte	0
 3997 0caf 23       		.uleb128 0x23
 3998 0cb0 01       		.byte	0x1
 3999 0cb1 7F040000 		.4byte	.LASF141
 4000 0cb5 01       		.byte	0x1
 4001 0cb6 8704     		.2byte	0x487
 4002 0cb8 01       		.byte	0x1
 4003 0cb9 3B030000 		.4byte	0x33b
ARM GAS  /tmp/cceY5bqg.s 			page 121


 4004 0cbd 7C090000 		.4byte	.LFB70
 4005 0cc1 B0090000 		.4byte	.LFE70
 4006 0cc5 1C070000 		.4byte	.LLST58
 4007 0cc9 01       		.byte	0x1
 4008 0cca FF0C0000 		.4byte	0xcff
 4009 0cce 1B       		.uleb128 0x1b
 4010 0ccf 4E080000 		.4byte	.LASF112
 4011 0cd3 01       		.byte	0x1
 4012 0cd4 8704     		.2byte	0x487
 4013 0cd6 19070000 		.4byte	0x719
 4014 0cda 3C070000 		.4byte	.LLST59
 4015 0cde 1C       		.uleb128 0x1c
 4016 0cdf B8030000 		.4byte	.LASF123
 4017 0ce3 01       		.byte	0x1
 4018 0ce4 8904     		.2byte	0x489
 4019 0ce6 3B030000 		.4byte	0x33b
 4020 0cea 70070000 		.4byte	.LLST60
 4021 0cee 2A       		.uleb128 0x2a
 4022 0cef 92090000 		.4byte	.LVL123
 4023 0cf3 A8070000 		.4byte	0x7a8
 4024 0cf7 29       		.uleb128 0x29
 4025 0cf8 01       		.byte	0x1
 4026 0cf9 50       		.byte	0x50
 4027 0cfa 02       		.byte	0x2
 4028 0cfb 74       		.byte	0x74
 4029 0cfc 00       		.sleb128 0
 4030 0cfd 00       		.byte	0
 4031 0cfe 00       		.byte	0
 4032 0cff 23       		.uleb128 0x23
 4033 0d00 01       		.byte	0x1
 4034 0d01 EE020000 		.4byte	.LASF142
 4035 0d05 01       		.byte	0x1
 4036 0d06 1604     		.2byte	0x416
 4037 0d08 01       		.byte	0x1
 4038 0d09 3B030000 		.4byte	0x33b
 4039 0d0d CC040000 		.4byte	.LFB69
 4040 0d11 90050000 		.4byte	.LFE69
 4041 0d15 9B070000 		.4byte	.LLST34
 4042 0d19 01       		.byte	0x1
 4043 0d1a 4F0D0000 		.4byte	0xd4f
 4044 0d1e 1B       		.uleb128 0x1b
 4045 0d1f 4E080000 		.4byte	.LASF112
 4046 0d23 01       		.byte	0x1
 4047 0d24 1604     		.2byte	0x416
 4048 0d26 19070000 		.4byte	0x719
 4049 0d2a BB070000 		.4byte	.LLST35
 4050 0d2e 1C       		.uleb128 0x1c
 4051 0d2f B8030000 		.4byte	.LASF123
 4052 0d33 01       		.byte	0x1
 4053 0d34 1804     		.2byte	0x418
 4054 0d36 3B030000 		.4byte	0x33b
 4055 0d3a FD070000 		.4byte	.LLST36
 4056 0d3e 2A       		.uleb128 0x2a
 4057 0d3f E2040000 		.4byte	.LVL72
 4058 0d43 D4070000 		.4byte	0x7d4
 4059 0d47 29       		.uleb128 0x29
 4060 0d48 01       		.byte	0x1
ARM GAS  /tmp/cceY5bqg.s 			page 122


 4061 0d49 50       		.byte	0x50
 4062 0d4a 02       		.byte	0x2
 4063 0d4b 74       		.byte	0x74
 4064 0d4c 00       		.sleb128 0
 4065 0d4d 00       		.byte	0
 4066 0d4e 00       		.byte	0
 4067 0d4f 27       		.uleb128 0x27
 4068 0d50 01       		.byte	0x1
 4069 0d51 A3020000 		.4byte	.LASF143
 4070 0d55 01       		.byte	0x1
 4071 0d56 2103     		.2byte	0x321
 4072 0d58 01       		.byte	0x1
 4073 0d59 6A0D0000 		.4byte	0xd6a
 4074 0d5d 20       		.uleb128 0x20
 4075 0d5e 4E080000 		.4byte	.LASF112
 4076 0d62 01       		.byte	0x1
 4077 0d63 2103     		.2byte	0x321
 4078 0d65 19070000 		.4byte	0x719
 4079 0d69 00       		.byte	0
 4080 0d6a 27       		.uleb128 0x27
 4081 0d6b 01       		.byte	0x1
 4082 0d6c 32040000 		.4byte	.LASF144
 4083 0d70 01       		.byte	0x1
 4084 0d71 1303     		.2byte	0x313
 4085 0d73 01       		.byte	0x1
 4086 0d74 850D0000 		.4byte	0xd85
 4087 0d78 20       		.uleb128 0x20
 4088 0d79 4E080000 		.4byte	.LASF112
 4089 0d7d 01       		.byte	0x1
 4090 0d7e 1303     		.2byte	0x313
 4091 0d80 19070000 		.4byte	0x719
 4092 0d84 00       		.byte	0
 4093 0d85 23       		.uleb128 0x23
 4094 0d86 01       		.byte	0x1
 4095 0d87 BC010000 		.4byte	.LASF145
 4096 0d8b 01       		.byte	0x1
 4097 0d8c 7F02     		.2byte	0x27f
 4098 0d8e 01       		.byte	0x1
 4099 0d8f 3B030000 		.4byte	0x33b
 4100 0d93 BC080000 		.4byte	.LFB66
 4101 0d97 7C090000 		.4byte	.LFE66
 4102 0d9b 28080000 		.4byte	.LLST55
 4103 0d9f 01       		.byte	0x1
 4104 0da0 E90D0000 		.4byte	0xde9
 4105 0da4 1B       		.uleb128 0x1b
 4106 0da5 4E080000 		.4byte	.LASF112
 4107 0da9 01       		.byte	0x1
 4108 0daa 7F02     		.2byte	0x27f
 4109 0dac 19070000 		.4byte	0x719
 4110 0db0 48080000 		.4byte	.LLST56
 4111 0db4 1C       		.uleb128 0x1c
 4112 0db5 B8030000 		.4byte	.LASF123
 4113 0db9 01       		.byte	0x1
 4114 0dba 8102     		.2byte	0x281
 4115 0dbc 3B030000 		.4byte	0x33b
 4116 0dc0 71080000 		.4byte	.LLST57
 4117 0dc4 28       		.uleb128 0x28
ARM GAS  /tmp/cceY5bqg.s 			page 123


 4118 0dc5 D0080000 		.4byte	.LVL118
 4119 0dc9 A8070000 		.4byte	0x7a8
 4120 0dcd D80D0000 		.4byte	0xdd8
 4121 0dd1 29       		.uleb128 0x29
 4122 0dd2 01       		.byte	0x1
 4123 0dd3 50       		.byte	0x50
 4124 0dd4 02       		.byte	0x2
 4125 0dd5 74       		.byte	0x74
 4126 0dd6 00       		.sleb128 0
 4127 0dd7 00       		.byte	0
 4128 0dd8 2A       		.uleb128 0x2a
 4129 0dd9 58090000 		.4byte	.LVL120
 4130 0ddd 4F0D0000 		.4byte	0xd4f
 4131 0de1 29       		.uleb128 0x29
 4132 0de2 01       		.byte	0x1
 4133 0de3 50       		.byte	0x50
 4134 0de4 02       		.byte	0x2
 4135 0de5 74       		.byte	0x74
 4136 0de6 00       		.sleb128 0
 4137 0de7 00       		.byte	0
 4138 0de8 00       		.byte	0
 4139 0de9 23       		.uleb128 0x23
 4140 0dea 01       		.byte	0x1
 4141 0deb 53080000 		.4byte	.LASF146
 4142 0def 01       		.byte	0x1
 4143 0df0 A501     		.2byte	0x1a5
 4144 0df2 01       		.byte	0x1
 4145 0df3 3B030000 		.4byte	0x33b
 4146 0df7 BC070000 		.4byte	.LFB65
 4147 0dfb BC080000 		.4byte	.LFE65
 4148 0dff 9C080000 		.4byte	.LLST49
 4149 0e03 01       		.byte	0x1
 4150 0e04 7D0E0000 		.4byte	0xe7d
 4151 0e08 1B       		.uleb128 0x1b
 4152 0e09 4E080000 		.4byte	.LASF112
 4153 0e0d 01       		.byte	0x1
 4154 0e0e A501     		.2byte	0x1a5
 4155 0e10 19070000 		.4byte	0x719
 4156 0e14 BC080000 		.4byte	.LLST50
 4157 0e18 1C       		.uleb128 0x1c
 4158 0e19 B8030000 		.4byte	.LASF123
 4159 0e1d 01       		.byte	0x1
 4160 0e1e A701     		.2byte	0x1a7
 4161 0e20 3B030000 		.4byte	0x33b
 4162 0e24 DA080000 		.4byte	.LLST51
 4163 0e28 1C       		.uleb128 0x1c
 4164 0e29 53030000 		.4byte	.LASF147
 4165 0e2d 01       		.byte	0x1
 4166 0e2e A801     		.2byte	0x1a8
 4167 0e30 AC000000 		.4byte	0xac
 4168 0e34 10090000 		.4byte	.LLST52
 4169 0e38 1C       		.uleb128 0x1c
 4170 0e39 5B030000 		.4byte	.LASF148
 4171 0e3d 01       		.byte	0x1
 4172 0e3e A901     		.2byte	0x1a9
 4173 0e40 AC000000 		.4byte	0xac
 4174 0e44 52090000 		.4byte	.LLST53
ARM GAS  /tmp/cceY5bqg.s 			page 124


 4175 0e48 1C       		.uleb128 0x1c
 4176 0e49 B0000000 		.4byte	.LASF149
 4177 0e4d 01       		.byte	0x1
 4178 0e4e AA01     		.2byte	0x1aa
 4179 0e50 AC000000 		.4byte	0xac
 4180 0e54 7D090000 		.4byte	.LLST54
 4181 0e58 28       		.uleb128 0x28
 4182 0e59 D2070000 		.4byte	.LVL102
 4183 0e5d 6A0D0000 		.4byte	0xd6a
 4184 0e61 6C0E0000 		.4byte	0xe6c
 4185 0e65 29       		.uleb128 0x29
 4186 0e66 01       		.byte	0x1
 4187 0e67 50       		.byte	0x50
 4188 0e68 02       		.byte	0x2
 4189 0e69 74       		.byte	0x74
 4190 0e6a 00       		.sleb128 0
 4191 0e6b 00       		.byte	0
 4192 0e6c 2A       		.uleb128 0x2a
 4193 0e6d D8070000 		.4byte	.LVL103
 4194 0e71 A8070000 		.4byte	0x7a8
 4195 0e75 29       		.uleb128 0x29
 4196 0e76 01       		.byte	0x1
 4197 0e77 50       		.byte	0x50
 4198 0e78 02       		.byte	0x2
 4199 0e79 74       		.byte	0x74
 4200 0e7a 00       		.sleb128 0
 4201 0e7b 00       		.byte	0
 4202 0e7c 00       		.byte	0
 4203 0e7d 2B       		.uleb128 0x2b
 4204 0e7e 13090000 		.4byte	0x913
 4205 0e82 DE020000 		.4byte	.LFB82
 4206 0e86 E0020000 		.4byte	.LFE82
 4207 0e8a 02       		.byte	0x2
 4208 0e8b 7D       		.byte	0x7d
 4209 0e8c 00       		.sleb128 0
 4210 0e8d 01       		.byte	0x1
 4211 0e8e 9A0E0000 		.4byte	0xe9a
 4212 0e92 2C       		.uleb128 0x2c
 4213 0e93 22090000 		.4byte	0x922
 4214 0e97 01       		.byte	0x1
 4215 0e98 50       		.byte	0x50
 4216 0e99 00       		.byte	0
 4217 0e9a 2D       		.uleb128 0x2d
 4218 0e9b D4070000 		.4byte	0x7d4
 4219 0e9f 5C040000 		.4byte	.LFB87
 4220 0ea3 CC040000 		.4byte	.LFE87
 4221 0ea7 B4090000 		.4byte	.LLST30
 4222 0eab 01       		.byte	0x1
 4223 0eac 080F0000 		.4byte	0xf08
 4224 0eb0 2E       		.uleb128 0x2e
 4225 0eb1 E7070000 		.4byte	0x7e7
 4226 0eb5 EC090000 		.4byte	.LLST31
 4227 0eb9 2F       		.uleb128 0x2f
 4228 0eba F3070000 		.4byte	0x7f3
 4229 0ebe 2B0A0000 		.4byte	.LLST32
 4230 0ec2 30       		.uleb128 0x30
 4231 0ec3 FF070000 		.4byte	0x7ff
ARM GAS  /tmp/cceY5bqg.s 			page 125


 4232 0ec7 02       		.byte	0x2
 4233 0ec8 91       		.byte	0x91
 4234 0ec9 6C       		.sleb128 -20
 4235 0eca 31       		.uleb128 0x31
 4236 0ecb A4040000 		.4byte	.LBB4
 4237 0ecf BC040000 		.4byte	.LBE4
 4238 0ed3 F50E0000 		.4byte	0xef5
 4239 0ed7 2E       		.uleb128 0x2e
 4240 0ed8 E7070000 		.4byte	0x7e7
 4241 0edc 620A0000 		.4byte	.LLST33
 4242 0ee0 32       		.uleb128 0x32
 4243 0ee1 A4040000 		.4byte	.LBB5
 4244 0ee5 BC040000 		.4byte	.LBE5
 4245 0ee9 33       		.uleb128 0x33
 4246 0eea B90E0000 		.4byte	0xeb9
 4247 0eee 33       		.uleb128 0x33
 4248 0eef C20E0000 		.4byte	0xec2
 4249 0ef3 00       		.byte	0
 4250 0ef4 00       		.byte	0
 4251 0ef5 1D       		.uleb128 0x1d
 4252 0ef6 8E040000 		.4byte	.LVL65
 4253 0efa 930F0000 		.4byte	0xf93
 4254 0efe 1D       		.uleb128 0x1d
 4255 0eff 9E040000 		.4byte	.LVL67
 4256 0f03 930F0000 		.4byte	0xf93
 4257 0f07 00       		.byte	0
 4258 0f08 2D       		.uleb128 0x2d
 4259 0f09 A8070000 		.4byte	0x7a8
 4260 0f0d 78070000 		.4byte	.LFB88
 4261 0f11 BC070000 		.4byte	.LFE88
 4262 0f15 750A0000 		.4byte	.LLST45
 4263 0f19 01       		.byte	0x1
 4264 0f1a 690F0000 		.4byte	0xf69
 4265 0f1e 2E       		.uleb128 0x2e
 4266 0f1f BB070000 		.4byte	0x7bb
 4267 0f23 950A0000 		.4byte	.LLST46
 4268 0f27 2F       		.uleb128 0x2f
 4269 0f28 C7070000 		.4byte	0x7c7
 4270 0f2c C90A0000 		.4byte	.LLST47
 4271 0f30 31       		.uleb128 0x31
 4272 0f31 A8070000 		.4byte	.LBB8
 4273 0f35 BC070000 		.4byte	.LBE8
 4274 0f39 560F0000 		.4byte	0xf56
 4275 0f3d 2E       		.uleb128 0x2e
 4276 0f3e BB070000 		.4byte	0x7bb
 4277 0f42 F40A0000 		.4byte	.LLST48
 4278 0f46 32       		.uleb128 0x32
 4279 0f47 A8070000 		.4byte	.LBB9
 4280 0f4b BC070000 		.4byte	.LBE9
 4281 0f4f 33       		.uleb128 0x33
 4282 0f50 270F0000 		.4byte	0xf27
 4283 0f54 00       		.byte	0
 4284 0f55 00       		.byte	0
 4285 0f56 1D       		.uleb128 0x1d
 4286 0f57 94070000 		.4byte	.LVL96
 4287 0f5b 930F0000 		.4byte	0xf93
 4288 0f5f 1D       		.uleb128 0x1d
ARM GAS  /tmp/cceY5bqg.s 			page 126


 4289 0f60 A2070000 		.4byte	.LVL98
 4290 0f64 930F0000 		.4byte	0xf93
 4291 0f68 00       		.byte	0
 4292 0f69 34       		.uleb128 0x34
 4293 0f6a 01       		.byte	0x1
 4294 0f6b 01       		.byte	0x1
 4295 0f6c 26020000 		.4byte	.LASF150
 4296 0f70 26020000 		.4byte	.LASF150
 4297 0f74 0C       		.byte	0xc
 4298 0f75 9F02     		.2byte	0x29f
 4299 0f77 34       		.uleb128 0x34
 4300 0f78 01       		.byte	0x1
 4301 0f79 01       		.byte	0x1
 4302 0f7a 42040000 		.4byte	.LASF151
 4303 0f7e 42040000 		.4byte	.LASF151
 4304 0f82 09       		.byte	0x9
 4305 0f83 7B01     		.2byte	0x17b
 4306 0f85 34       		.uleb128 0x34
 4307 0f86 01       		.byte	0x1
 4308 0f87 01       		.byte	0x1
 4309 0f88 AB010000 		.4byte	.LASF152
 4310 0f8c AB010000 		.4byte	.LASF152
 4311 0f90 09       		.byte	0x9
 4312 0f91 7A01     		.2byte	0x17a
 4313 0f93 34       		.uleb128 0x34
 4314 0f94 01       		.byte	0x1
 4315 0f95 01       		.byte	0x1
 4316 0f96 FB040000 		.4byte	.LASF153
 4317 0f9a FB040000 		.4byte	.LASF153
 4318 0f9e 0B       		.byte	0xb
 4319 0f9f 2A01     		.2byte	0x12a
 4320 0fa1 34       		.uleb128 0x34
 4321 0fa2 01       		.byte	0x1
 4322 0fa3 01       		.byte	0x1
 4323 0fa4 67060000 		.4byte	.LASF154
 4324 0fa8 67060000 		.4byte	.LASF154
 4325 0fac 0D       		.byte	0xd
 4326 0fad 4507     		.2byte	0x745
 4327 0faf 00       		.byte	0
 4328              		.section	.debug_abbrev,"",%progbits
 4329              	.Ldebug_abbrev0:
 4330 0000 01       		.uleb128 0x1
 4331 0001 11       		.uleb128 0x11
 4332 0002 01       		.byte	0x1
 4333 0003 25       		.uleb128 0x25
 4334 0004 0E       		.uleb128 0xe
 4335 0005 13       		.uleb128 0x13
 4336 0006 0B       		.uleb128 0xb
 4337 0007 03       		.uleb128 0x3
 4338 0008 0E       		.uleb128 0xe
 4339 0009 1B       		.uleb128 0x1b
 4340 000a 0E       		.uleb128 0xe
 4341 000b 11       		.uleb128 0x11
 4342 000c 01       		.uleb128 0x1
 4343 000d 12       		.uleb128 0x12
 4344 000e 01       		.uleb128 0x1
 4345 000f 10       		.uleb128 0x10
ARM GAS  /tmp/cceY5bqg.s 			page 127


 4346 0010 06       		.uleb128 0x6
 4347 0011 00       		.byte	0
 4348 0012 00       		.byte	0
 4349 0013 02       		.uleb128 0x2
 4350 0014 24       		.uleb128 0x24
 4351 0015 00       		.byte	0
 4352 0016 0B       		.uleb128 0xb
 4353 0017 0B       		.uleb128 0xb
 4354 0018 3E       		.uleb128 0x3e
 4355 0019 0B       		.uleb128 0xb
 4356 001a 03       		.uleb128 0x3
 4357 001b 0E       		.uleb128 0xe
 4358 001c 00       		.byte	0
 4359 001d 00       		.byte	0
 4360 001e 03       		.uleb128 0x3
 4361 001f 16       		.uleb128 0x16
 4362 0020 00       		.byte	0
 4363 0021 03       		.uleb128 0x3
 4364 0022 0E       		.uleb128 0xe
 4365 0023 3A       		.uleb128 0x3a
 4366 0024 0B       		.uleb128 0xb
 4367 0025 3B       		.uleb128 0x3b
 4368 0026 0B       		.uleb128 0xb
 4369 0027 49       		.uleb128 0x49
 4370 0028 13       		.uleb128 0x13
 4371 0029 00       		.byte	0
 4372 002a 00       		.byte	0
 4373 002b 04       		.uleb128 0x4
 4374 002c 24       		.uleb128 0x24
 4375 002d 00       		.byte	0
 4376 002e 0B       		.uleb128 0xb
 4377 002f 0B       		.uleb128 0xb
 4378 0030 3E       		.uleb128 0x3e
 4379 0031 0B       		.uleb128 0xb
 4380 0032 03       		.uleb128 0x3
 4381 0033 08       		.uleb128 0x8
 4382 0034 00       		.byte	0
 4383 0035 00       		.byte	0
 4384 0036 05       		.uleb128 0x5
 4385 0037 26       		.uleb128 0x26
 4386 0038 00       		.byte	0
 4387 0039 49       		.uleb128 0x49
 4388 003a 13       		.uleb128 0x13
 4389 003b 00       		.byte	0
 4390 003c 00       		.byte	0
 4391 003d 06       		.uleb128 0x6
 4392 003e 35       		.uleb128 0x35
 4393 003f 00       		.byte	0
 4394 0040 49       		.uleb128 0x49
 4395 0041 13       		.uleb128 0x13
 4396 0042 00       		.byte	0
 4397 0043 00       		.byte	0
 4398 0044 07       		.uleb128 0x7
 4399 0045 34       		.uleb128 0x34
 4400 0046 00       		.byte	0
 4401 0047 03       		.uleb128 0x3
 4402 0048 0E       		.uleb128 0xe
ARM GAS  /tmp/cceY5bqg.s 			page 128


 4403 0049 3A       		.uleb128 0x3a
 4404 004a 0B       		.uleb128 0xb
 4405 004b 3B       		.uleb128 0x3b
 4406 004c 05       		.uleb128 0x5
 4407 004d 49       		.uleb128 0x49
 4408 004e 13       		.uleb128 0x13
 4409 004f 3F       		.uleb128 0x3f
 4410 0050 0C       		.uleb128 0xc
 4411 0051 3C       		.uleb128 0x3c
 4412 0052 0C       		.uleb128 0xc
 4413 0053 00       		.byte	0
 4414 0054 00       		.byte	0
 4415 0055 08       		.uleb128 0x8
 4416 0056 34       		.uleb128 0x34
 4417 0057 00       		.byte	0
 4418 0058 03       		.uleb128 0x3
 4419 0059 0E       		.uleb128 0xe
 4420 005a 3A       		.uleb128 0x3a
 4421 005b 0B       		.uleb128 0xb
 4422 005c 3B       		.uleb128 0x3b
 4423 005d 0B       		.uleb128 0xb
 4424 005e 49       		.uleb128 0x49
 4425 005f 13       		.uleb128 0x13
 4426 0060 3F       		.uleb128 0x3f
 4427 0061 0C       		.uleb128 0xc
 4428 0062 3C       		.uleb128 0x3c
 4429 0063 0C       		.uleb128 0xc
 4430 0064 00       		.byte	0
 4431 0065 00       		.byte	0
 4432 0066 09       		.uleb128 0x9
 4433 0067 01       		.uleb128 0x1
 4434 0068 01       		.byte	0x1
 4435 0069 49       		.uleb128 0x49
 4436 006a 13       		.uleb128 0x13
 4437 006b 01       		.uleb128 0x1
 4438 006c 13       		.uleb128 0x13
 4439 006d 00       		.byte	0
 4440 006e 00       		.byte	0
 4441 006f 0A       		.uleb128 0xa
 4442 0070 21       		.uleb128 0x21
 4443 0071 00       		.byte	0
 4444 0072 49       		.uleb128 0x49
 4445 0073 13       		.uleb128 0x13
 4446 0074 2F       		.uleb128 0x2f
 4447 0075 0B       		.uleb128 0xb
 4448 0076 00       		.byte	0
 4449 0077 00       		.byte	0
 4450 0078 0B       		.uleb128 0xb
 4451 0079 13       		.uleb128 0x13
 4452 007a 01       		.byte	0x1
 4453 007b 0B       		.uleb128 0xb
 4454 007c 0B       		.uleb128 0xb
 4455 007d 3A       		.uleb128 0x3a
 4456 007e 0B       		.uleb128 0xb
 4457 007f 3B       		.uleb128 0x3b
 4458 0080 0B       		.uleb128 0xb
 4459 0081 01       		.uleb128 0x1
ARM GAS  /tmp/cceY5bqg.s 			page 129


 4460 0082 13       		.uleb128 0x13
 4461 0083 00       		.byte	0
 4462 0084 00       		.byte	0
 4463 0085 0C       		.uleb128 0xc
 4464 0086 0D       		.uleb128 0xd
 4465 0087 00       		.byte	0
 4466 0088 03       		.uleb128 0x3
 4467 0089 08       		.uleb128 0x8
 4468 008a 3A       		.uleb128 0x3a
 4469 008b 0B       		.uleb128 0xb
 4470 008c 3B       		.uleb128 0x3b
 4471 008d 0B       		.uleb128 0xb
 4472 008e 49       		.uleb128 0x49
 4473 008f 13       		.uleb128 0x13
 4474 0090 38       		.uleb128 0x38
 4475 0091 0A       		.uleb128 0xa
 4476 0092 00       		.byte	0
 4477 0093 00       		.byte	0
 4478 0094 0D       		.uleb128 0xd
 4479 0095 0D       		.uleb128 0xd
 4480 0096 00       		.byte	0
 4481 0097 03       		.uleb128 0x3
 4482 0098 0E       		.uleb128 0xe
 4483 0099 3A       		.uleb128 0x3a
 4484 009a 0B       		.uleb128 0xb
 4485 009b 3B       		.uleb128 0x3b
 4486 009c 0B       		.uleb128 0xb
 4487 009d 49       		.uleb128 0x49
 4488 009e 13       		.uleb128 0x13
 4489 009f 38       		.uleb128 0x38
 4490 00a0 0A       		.uleb128 0xa
 4491 00a1 00       		.byte	0
 4492 00a2 00       		.byte	0
 4493 00a3 0E       		.uleb128 0xe
 4494 00a4 13       		.uleb128 0x13
 4495 00a5 01       		.byte	0x1
 4496 00a6 0B       		.uleb128 0xb
 4497 00a7 0B       		.uleb128 0xb
 4498 00a8 3A       		.uleb128 0x3a
 4499 00a9 0B       		.uleb128 0xb
 4500 00aa 3B       		.uleb128 0x3b
 4501 00ab 05       		.uleb128 0x5
 4502 00ac 01       		.uleb128 0x1
 4503 00ad 13       		.uleb128 0x13
 4504 00ae 00       		.byte	0
 4505 00af 00       		.byte	0
 4506 00b0 0F       		.uleb128 0xf
 4507 00b1 0D       		.uleb128 0xd
 4508 00b2 00       		.byte	0
 4509 00b3 03       		.uleb128 0x3
 4510 00b4 08       		.uleb128 0x8
 4511 00b5 3A       		.uleb128 0x3a
 4512 00b6 0B       		.uleb128 0xb
 4513 00b7 3B       		.uleb128 0x3b
 4514 00b8 05       		.uleb128 0x5
 4515 00b9 49       		.uleb128 0x49
 4516 00ba 13       		.uleb128 0x13
ARM GAS  /tmp/cceY5bqg.s 			page 130


 4517 00bb 38       		.uleb128 0x38
 4518 00bc 0A       		.uleb128 0xa
 4519 00bd 00       		.byte	0
 4520 00be 00       		.byte	0
 4521 00bf 10       		.uleb128 0x10
 4522 00c0 0D       		.uleb128 0xd
 4523 00c1 00       		.byte	0
 4524 00c2 03       		.uleb128 0x3
 4525 00c3 0E       		.uleb128 0xe
 4526 00c4 3A       		.uleb128 0x3a
 4527 00c5 0B       		.uleb128 0xb
 4528 00c6 3B       		.uleb128 0x3b
 4529 00c7 05       		.uleb128 0x5
 4530 00c8 49       		.uleb128 0x49
 4531 00c9 13       		.uleb128 0x13
 4532 00ca 38       		.uleb128 0x38
 4533 00cb 0A       		.uleb128 0xa
 4534 00cc 00       		.byte	0
 4535 00cd 00       		.byte	0
 4536 00ce 11       		.uleb128 0x11
 4537 00cf 16       		.uleb128 0x16
 4538 00d0 00       		.byte	0
 4539 00d1 03       		.uleb128 0x3
 4540 00d2 0E       		.uleb128 0xe
 4541 00d3 3A       		.uleb128 0x3a
 4542 00d4 0B       		.uleb128 0xb
 4543 00d5 3B       		.uleb128 0x3b
 4544 00d6 05       		.uleb128 0x5
 4545 00d7 49       		.uleb128 0x49
 4546 00d8 13       		.uleb128 0x13
 4547 00d9 00       		.byte	0
 4548 00da 00       		.byte	0
 4549 00db 12       		.uleb128 0x12
 4550 00dc 04       		.uleb128 0x4
 4551 00dd 01       		.byte	0x1
 4552 00de 0B       		.uleb128 0xb
 4553 00df 0B       		.uleb128 0xb
 4554 00e0 49       		.uleb128 0x49
 4555 00e1 13       		.uleb128 0x13
 4556 00e2 3A       		.uleb128 0x3a
 4557 00e3 0B       		.uleb128 0xb
 4558 00e4 3B       		.uleb128 0x3b
 4559 00e5 0B       		.uleb128 0xb
 4560 00e6 01       		.uleb128 0x1
 4561 00e7 13       		.uleb128 0x13
 4562 00e8 00       		.byte	0
 4563 00e9 00       		.byte	0
 4564 00ea 13       		.uleb128 0x13
 4565 00eb 28       		.uleb128 0x28
 4566 00ec 00       		.byte	0
 4567 00ed 03       		.uleb128 0x3
 4568 00ee 0E       		.uleb128 0xe
 4569 00ef 1C       		.uleb128 0x1c
 4570 00f0 0B       		.uleb128 0xb
 4571 00f1 00       		.byte	0
 4572 00f2 00       		.byte	0
 4573 00f3 14       		.uleb128 0x14
ARM GAS  /tmp/cceY5bqg.s 			page 131


 4574 00f4 28       		.uleb128 0x28
 4575 00f5 00       		.byte	0
 4576 00f6 03       		.uleb128 0x3
 4577 00f7 08       		.uleb128 0x8
 4578 00f8 1C       		.uleb128 0x1c
 4579 00f9 0B       		.uleb128 0xb
 4580 00fa 00       		.byte	0
 4581 00fb 00       		.byte	0
 4582 00fc 15       		.uleb128 0x15
 4583 00fd 13       		.uleb128 0x13
 4584 00fe 01       		.byte	0x1
 4585 00ff 03       		.uleb128 0x3
 4586 0100 0E       		.uleb128 0xe
 4587 0101 0B       		.uleb128 0xb
 4588 0102 0B       		.uleb128 0xb
 4589 0103 3A       		.uleb128 0x3a
 4590 0104 0B       		.uleb128 0xb
 4591 0105 3B       		.uleb128 0x3b
 4592 0106 0B       		.uleb128 0xb
 4593 0107 01       		.uleb128 0x1
 4594 0108 13       		.uleb128 0x13
 4595 0109 00       		.byte	0
 4596 010a 00       		.byte	0
 4597 010b 16       		.uleb128 0x16
 4598 010c 0F       		.uleb128 0xf
 4599 010d 00       		.byte	0
 4600 010e 0B       		.uleb128 0xb
 4601 010f 0B       		.uleb128 0xb
 4602 0110 49       		.uleb128 0x49
 4603 0111 13       		.uleb128 0x13
 4604 0112 00       		.byte	0
 4605 0113 00       		.byte	0
 4606 0114 17       		.uleb128 0x17
 4607 0115 0F       		.uleb128 0xf
 4608 0116 00       		.byte	0
 4609 0117 0B       		.uleb128 0xb
 4610 0118 0B       		.uleb128 0xb
 4611 0119 00       		.byte	0
 4612 011a 00       		.byte	0
 4613 011b 18       		.uleb128 0x18
 4614 011c 15       		.uleb128 0x15
 4615 011d 01       		.byte	0x1
 4616 011e 27       		.uleb128 0x27
 4617 011f 0C       		.uleb128 0xc
 4618 0120 01       		.uleb128 0x1
 4619 0121 13       		.uleb128 0x13
 4620 0122 00       		.byte	0
 4621 0123 00       		.byte	0
 4622 0124 19       		.uleb128 0x19
 4623 0125 05       		.uleb128 0x5
 4624 0126 00       		.byte	0
 4625 0127 49       		.uleb128 0x49
 4626 0128 13       		.uleb128 0x13
 4627 0129 00       		.byte	0
 4628 012a 00       		.byte	0
 4629 012b 1A       		.uleb128 0x1a
 4630 012c 2E       		.uleb128 0x2e
ARM GAS  /tmp/cceY5bqg.s 			page 132


 4631 012d 01       		.byte	0x1
 4632 012e 3F       		.uleb128 0x3f
 4633 012f 0C       		.uleb128 0xc
 4634 0130 03       		.uleb128 0x3
 4635 0131 0E       		.uleb128 0xe
 4636 0132 3A       		.uleb128 0x3a
 4637 0133 0B       		.uleb128 0xb
 4638 0134 3B       		.uleb128 0x3b
 4639 0135 05       		.uleb128 0x5
 4640 0136 27       		.uleb128 0x27
 4641 0137 0C       		.uleb128 0xc
 4642 0138 11       		.uleb128 0x11
 4643 0139 01       		.uleb128 0x1
 4644 013a 12       		.uleb128 0x12
 4645 013b 01       		.uleb128 0x1
 4646 013c 40       		.uleb128 0x40
 4647 013d 06       		.uleb128 0x6
 4648 013e 9742     		.uleb128 0x2117
 4649 0140 0C       		.uleb128 0xc
 4650 0141 01       		.uleb128 0x1
 4651 0142 13       		.uleb128 0x13
 4652 0143 00       		.byte	0
 4653 0144 00       		.byte	0
 4654 0145 1B       		.uleb128 0x1b
 4655 0146 05       		.uleb128 0x5
 4656 0147 00       		.byte	0
 4657 0148 03       		.uleb128 0x3
 4658 0149 0E       		.uleb128 0xe
 4659 014a 3A       		.uleb128 0x3a
 4660 014b 0B       		.uleb128 0xb
 4661 014c 3B       		.uleb128 0x3b
 4662 014d 05       		.uleb128 0x5
 4663 014e 49       		.uleb128 0x49
 4664 014f 13       		.uleb128 0x13
 4665 0150 02       		.uleb128 0x2
 4666 0151 06       		.uleb128 0x6
 4667 0152 00       		.byte	0
 4668 0153 00       		.byte	0
 4669 0154 1C       		.uleb128 0x1c
 4670 0155 34       		.uleb128 0x34
 4671 0156 00       		.byte	0
 4672 0157 03       		.uleb128 0x3
 4673 0158 0E       		.uleb128 0xe
 4674 0159 3A       		.uleb128 0x3a
 4675 015a 0B       		.uleb128 0xb
 4676 015b 3B       		.uleb128 0x3b
 4677 015c 05       		.uleb128 0x5
 4678 015d 49       		.uleb128 0x49
 4679 015e 13       		.uleb128 0x13
 4680 015f 02       		.uleb128 0x2
 4681 0160 06       		.uleb128 0x6
 4682 0161 00       		.byte	0
 4683 0162 00       		.byte	0
 4684 0163 1D       		.uleb128 0x1d
 4685 0164 898201   		.uleb128 0x4109
 4686 0167 00       		.byte	0
 4687 0168 11       		.uleb128 0x11
ARM GAS  /tmp/cceY5bqg.s 			page 133


 4688 0169 01       		.uleb128 0x1
 4689 016a 31       		.uleb128 0x31
 4690 016b 13       		.uleb128 0x13
 4691 016c 00       		.byte	0
 4692 016d 00       		.byte	0
 4693 016e 1E       		.uleb128 0x1e
 4694 016f 2E       		.uleb128 0x2e
 4695 0170 01       		.byte	0x1
 4696 0171 3F       		.uleb128 0x3f
 4697 0172 0C       		.uleb128 0xc
 4698 0173 03       		.uleb128 0x3
 4699 0174 0E       		.uleb128 0xe
 4700 0175 3A       		.uleb128 0x3a
 4701 0176 0B       		.uleb128 0xb
 4702 0177 3B       		.uleb128 0x3b
 4703 0178 05       		.uleb128 0x5
 4704 0179 27       		.uleb128 0x27
 4705 017a 0C       		.uleb128 0xc
 4706 017b 11       		.uleb128 0x11
 4707 017c 01       		.uleb128 0x1
 4708 017d 12       		.uleb128 0x12
 4709 017e 01       		.uleb128 0x1
 4710 017f 40       		.uleb128 0x40
 4711 0180 06       		.uleb128 0x6
 4712 0181 01       		.uleb128 0x1
 4713 0182 13       		.uleb128 0x13
 4714 0183 00       		.byte	0
 4715 0184 00       		.byte	0
 4716 0185 1F       		.uleb128 0x1f
 4717 0186 2E       		.uleb128 0x2e
 4718 0187 01       		.byte	0x1
 4719 0188 3F       		.uleb128 0x3f
 4720 0189 0C       		.uleb128 0xc
 4721 018a 03       		.uleb128 0x3
 4722 018b 0E       		.uleb128 0xe
 4723 018c 3A       		.uleb128 0x3a
 4724 018d 0B       		.uleb128 0xb
 4725 018e 3B       		.uleb128 0x3b
 4726 018f 05       		.uleb128 0x5
 4727 0190 27       		.uleb128 0x27
 4728 0191 0C       		.uleb128 0xc
 4729 0192 49       		.uleb128 0x49
 4730 0193 13       		.uleb128 0x13
 4731 0194 20       		.uleb128 0x20
 4732 0195 0B       		.uleb128 0xb
 4733 0196 01       		.uleb128 0x1
 4734 0197 13       		.uleb128 0x13
 4735 0198 00       		.byte	0
 4736 0199 00       		.byte	0
 4737 019a 20       		.uleb128 0x20
 4738 019b 05       		.uleb128 0x5
 4739 019c 00       		.byte	0
 4740 019d 03       		.uleb128 0x3
 4741 019e 0E       		.uleb128 0xe
 4742 019f 3A       		.uleb128 0x3a
 4743 01a0 0B       		.uleb128 0xb
 4744 01a1 3B       		.uleb128 0x3b
ARM GAS  /tmp/cceY5bqg.s 			page 134


 4745 01a2 05       		.uleb128 0x5
 4746 01a3 49       		.uleb128 0x49
 4747 01a4 13       		.uleb128 0x13
 4748 01a5 00       		.byte	0
 4749 01a6 00       		.byte	0
 4750 01a7 21       		.uleb128 0x21
 4751 01a8 34       		.uleb128 0x34
 4752 01a9 00       		.byte	0
 4753 01aa 03       		.uleb128 0x3
 4754 01ab 0E       		.uleb128 0xe
 4755 01ac 3A       		.uleb128 0x3a
 4756 01ad 0B       		.uleb128 0xb
 4757 01ae 3B       		.uleb128 0x3b
 4758 01af 05       		.uleb128 0x5
 4759 01b0 49       		.uleb128 0x49
 4760 01b1 13       		.uleb128 0x13
 4761 01b2 00       		.byte	0
 4762 01b3 00       		.byte	0
 4763 01b4 22       		.uleb128 0x22
 4764 01b5 2E       		.uleb128 0x2e
 4765 01b6 01       		.byte	0x1
 4766 01b7 3F       		.uleb128 0x3f
 4767 01b8 0C       		.uleb128 0xc
 4768 01b9 03       		.uleb128 0x3
 4769 01ba 0E       		.uleb128 0xe
 4770 01bb 3A       		.uleb128 0x3a
 4771 01bc 0B       		.uleb128 0xb
 4772 01bd 3B       		.uleb128 0x3b
 4773 01be 05       		.uleb128 0x5
 4774 01bf 27       		.uleb128 0x27
 4775 01c0 0C       		.uleb128 0xc
 4776 01c1 49       		.uleb128 0x49
 4777 01c2 13       		.uleb128 0x13
 4778 01c3 11       		.uleb128 0x11
 4779 01c4 01       		.uleb128 0x1
 4780 01c5 12       		.uleb128 0x12
 4781 01c6 01       		.uleb128 0x1
 4782 01c7 40       		.uleb128 0x40
 4783 01c8 0A       		.uleb128 0xa
 4784 01c9 9742     		.uleb128 0x2117
 4785 01cb 0C       		.uleb128 0xc
 4786 01cc 01       		.uleb128 0x1
 4787 01cd 13       		.uleb128 0x13
 4788 01ce 00       		.byte	0
 4789 01cf 00       		.byte	0
 4790 01d0 23       		.uleb128 0x23
 4791 01d1 2E       		.uleb128 0x2e
 4792 01d2 01       		.byte	0x1
 4793 01d3 3F       		.uleb128 0x3f
 4794 01d4 0C       		.uleb128 0xc
 4795 01d5 03       		.uleb128 0x3
 4796 01d6 0E       		.uleb128 0xe
 4797 01d7 3A       		.uleb128 0x3a
 4798 01d8 0B       		.uleb128 0xb
 4799 01d9 3B       		.uleb128 0x3b
 4800 01da 05       		.uleb128 0x5
 4801 01db 27       		.uleb128 0x27
ARM GAS  /tmp/cceY5bqg.s 			page 135


 4802 01dc 0C       		.uleb128 0xc
 4803 01dd 49       		.uleb128 0x49
 4804 01de 13       		.uleb128 0x13
 4805 01df 11       		.uleb128 0x11
 4806 01e0 01       		.uleb128 0x1
 4807 01e1 12       		.uleb128 0x12
 4808 01e2 01       		.uleb128 0x1
 4809 01e3 40       		.uleb128 0x40
 4810 01e4 06       		.uleb128 0x6
 4811 01e5 9742     		.uleb128 0x2117
 4812 01e7 0C       		.uleb128 0xc
 4813 01e8 01       		.uleb128 0x1
 4814 01e9 13       		.uleb128 0x13
 4815 01ea 00       		.byte	0
 4816 01eb 00       		.byte	0
 4817 01ec 24       		.uleb128 0x24
 4818 01ed 05       		.uleb128 0x5
 4819 01ee 00       		.byte	0
 4820 01ef 03       		.uleb128 0x3
 4821 01f0 0E       		.uleb128 0xe
 4822 01f1 3A       		.uleb128 0x3a
 4823 01f2 0B       		.uleb128 0xb
 4824 01f3 3B       		.uleb128 0x3b
 4825 01f4 05       		.uleb128 0x5
 4826 01f5 49       		.uleb128 0x49
 4827 01f6 13       		.uleb128 0x13
 4828 01f7 02       		.uleb128 0x2
 4829 01f8 0A       		.uleb128 0xa
 4830 01f9 00       		.byte	0
 4831 01fa 00       		.byte	0
 4832 01fb 25       		.uleb128 0x25
 4833 01fc 34       		.uleb128 0x34
 4834 01fd 00       		.byte	0
 4835 01fe 03       		.uleb128 0x3
 4836 01ff 0E       		.uleb128 0xe
 4837 0200 3A       		.uleb128 0x3a
 4838 0201 0B       		.uleb128 0xb
 4839 0202 3B       		.uleb128 0x3b
 4840 0203 05       		.uleb128 0x5
 4841 0204 49       		.uleb128 0x49
 4842 0205 13       		.uleb128 0x13
 4843 0206 02       		.uleb128 0x2
 4844 0207 0A       		.uleb128 0xa
 4845 0208 00       		.byte	0
 4846 0209 00       		.byte	0
 4847 020a 26       		.uleb128 0x26
 4848 020b 2E       		.uleb128 0x2e
 4849 020c 01       		.byte	0x1
 4850 020d 3F       		.uleb128 0x3f
 4851 020e 0C       		.uleb128 0xc
 4852 020f 03       		.uleb128 0x3
 4853 0210 0E       		.uleb128 0xe
 4854 0211 3A       		.uleb128 0x3a
 4855 0212 0B       		.uleb128 0xb
 4856 0213 3B       		.uleb128 0x3b
 4857 0214 05       		.uleb128 0x5
 4858 0215 27       		.uleb128 0x27
ARM GAS  /tmp/cceY5bqg.s 			page 136


 4859 0216 0C       		.uleb128 0xc
 4860 0217 20       		.uleb128 0x20
 4861 0218 0B       		.uleb128 0xb
 4862 0219 01       		.uleb128 0x1
 4863 021a 13       		.uleb128 0x13
 4864 021b 00       		.byte	0
 4865 021c 00       		.byte	0
 4866 021d 27       		.uleb128 0x27
 4867 021e 2E       		.uleb128 0x2e
 4868 021f 01       		.byte	0x1
 4869 0220 3F       		.uleb128 0x3f
 4870 0221 0C       		.uleb128 0xc
 4871 0222 03       		.uleb128 0x3
 4872 0223 0E       		.uleb128 0xe
 4873 0224 3A       		.uleb128 0x3a
 4874 0225 0B       		.uleb128 0xb
 4875 0226 3B       		.uleb128 0x3b
 4876 0227 05       		.uleb128 0x5
 4877 0228 27       		.uleb128 0x27
 4878 0229 0C       		.uleb128 0xc
 4879 022a 01       		.uleb128 0x1
 4880 022b 13       		.uleb128 0x13
 4881 022c 00       		.byte	0
 4882 022d 00       		.byte	0
 4883 022e 28       		.uleb128 0x28
 4884 022f 898201   		.uleb128 0x4109
 4885 0232 01       		.byte	0x1
 4886 0233 11       		.uleb128 0x11
 4887 0234 01       		.uleb128 0x1
 4888 0235 31       		.uleb128 0x31
 4889 0236 13       		.uleb128 0x13
 4890 0237 01       		.uleb128 0x1
 4891 0238 13       		.uleb128 0x13
 4892 0239 00       		.byte	0
 4893 023a 00       		.byte	0
 4894 023b 29       		.uleb128 0x29
 4895 023c 8A8201   		.uleb128 0x410a
 4896 023f 00       		.byte	0
 4897 0240 02       		.uleb128 0x2
 4898 0241 0A       		.uleb128 0xa
 4899 0242 9142     		.uleb128 0x2111
 4900 0244 0A       		.uleb128 0xa
 4901 0245 00       		.byte	0
 4902 0246 00       		.byte	0
 4903 0247 2A       		.uleb128 0x2a
 4904 0248 898201   		.uleb128 0x4109
 4905 024b 01       		.byte	0x1
 4906 024c 11       		.uleb128 0x11
 4907 024d 01       		.uleb128 0x1
 4908 024e 31       		.uleb128 0x31
 4909 024f 13       		.uleb128 0x13
 4910 0250 00       		.byte	0
 4911 0251 00       		.byte	0
 4912 0252 2B       		.uleb128 0x2b
 4913 0253 2E       		.uleb128 0x2e
 4914 0254 01       		.byte	0x1
 4915 0255 31       		.uleb128 0x31
ARM GAS  /tmp/cceY5bqg.s 			page 137


 4916 0256 13       		.uleb128 0x13
 4917 0257 11       		.uleb128 0x11
 4918 0258 01       		.uleb128 0x1
 4919 0259 12       		.uleb128 0x12
 4920 025a 01       		.uleb128 0x1
 4921 025b 40       		.uleb128 0x40
 4922 025c 0A       		.uleb128 0xa
 4923 025d 9742     		.uleb128 0x2117
 4924 025f 0C       		.uleb128 0xc
 4925 0260 01       		.uleb128 0x1
 4926 0261 13       		.uleb128 0x13
 4927 0262 00       		.byte	0
 4928 0263 00       		.byte	0
 4929 0264 2C       		.uleb128 0x2c
 4930 0265 05       		.uleb128 0x5
 4931 0266 00       		.byte	0
 4932 0267 31       		.uleb128 0x31
 4933 0268 13       		.uleb128 0x13
 4934 0269 02       		.uleb128 0x2
 4935 026a 0A       		.uleb128 0xa
 4936 026b 00       		.byte	0
 4937 026c 00       		.byte	0
 4938 026d 2D       		.uleb128 0x2d
 4939 026e 2E       		.uleb128 0x2e
 4940 026f 01       		.byte	0x1
 4941 0270 31       		.uleb128 0x31
 4942 0271 13       		.uleb128 0x13
 4943 0272 11       		.uleb128 0x11
 4944 0273 01       		.uleb128 0x1
 4945 0274 12       		.uleb128 0x12
 4946 0275 01       		.uleb128 0x1
 4947 0276 40       		.uleb128 0x40
 4948 0277 06       		.uleb128 0x6
 4949 0278 9742     		.uleb128 0x2117
 4950 027a 0C       		.uleb128 0xc
 4951 027b 01       		.uleb128 0x1
 4952 027c 13       		.uleb128 0x13
 4953 027d 00       		.byte	0
 4954 027e 00       		.byte	0
 4955 027f 2E       		.uleb128 0x2e
 4956 0280 05       		.uleb128 0x5
 4957 0281 00       		.byte	0
 4958 0282 31       		.uleb128 0x31
 4959 0283 13       		.uleb128 0x13
 4960 0284 02       		.uleb128 0x2
 4961 0285 06       		.uleb128 0x6
 4962 0286 00       		.byte	0
 4963 0287 00       		.byte	0
 4964 0288 2F       		.uleb128 0x2f
 4965 0289 34       		.uleb128 0x34
 4966 028a 00       		.byte	0
 4967 028b 31       		.uleb128 0x31
 4968 028c 13       		.uleb128 0x13
 4969 028d 02       		.uleb128 0x2
 4970 028e 06       		.uleb128 0x6
 4971 028f 00       		.byte	0
 4972 0290 00       		.byte	0
ARM GAS  /tmp/cceY5bqg.s 			page 138


 4973 0291 30       		.uleb128 0x30
 4974 0292 34       		.uleb128 0x34
 4975 0293 00       		.byte	0
 4976 0294 31       		.uleb128 0x31
 4977 0295 13       		.uleb128 0x13
 4978 0296 02       		.uleb128 0x2
 4979 0297 0A       		.uleb128 0xa
 4980 0298 00       		.byte	0
 4981 0299 00       		.byte	0
 4982 029a 31       		.uleb128 0x31
 4983 029b 0B       		.uleb128 0xb
 4984 029c 01       		.byte	0x1
 4985 029d 11       		.uleb128 0x11
 4986 029e 01       		.uleb128 0x1
 4987 029f 12       		.uleb128 0x12
 4988 02a0 01       		.uleb128 0x1
 4989 02a1 01       		.uleb128 0x1
 4990 02a2 13       		.uleb128 0x13
 4991 02a3 00       		.byte	0
 4992 02a4 00       		.byte	0
 4993 02a5 32       		.uleb128 0x32
 4994 02a6 0B       		.uleb128 0xb
 4995 02a7 01       		.byte	0x1
 4996 02a8 11       		.uleb128 0x11
 4997 02a9 01       		.uleb128 0x1
 4998 02aa 12       		.uleb128 0x12
 4999 02ab 01       		.uleb128 0x1
 5000 02ac 00       		.byte	0
 5001 02ad 00       		.byte	0
 5002 02ae 33       		.uleb128 0x33
 5003 02af 34       		.uleb128 0x34
 5004 02b0 00       		.byte	0
 5005 02b1 31       		.uleb128 0x31
 5006 02b2 13       		.uleb128 0x13
 5007 02b3 00       		.byte	0
 5008 02b4 00       		.byte	0
 5009 02b5 34       		.uleb128 0x34
 5010 02b6 2E       		.uleb128 0x2e
 5011 02b7 00       		.byte	0
 5012 02b8 3F       		.uleb128 0x3f
 5013 02b9 0C       		.uleb128 0xc
 5014 02ba 3C       		.uleb128 0x3c
 5015 02bb 0C       		.uleb128 0xc
 5016 02bc 8740     		.uleb128 0x2007
 5017 02be 0E       		.uleb128 0xe
 5018 02bf 03       		.uleb128 0x3
 5019 02c0 0E       		.uleb128 0xe
 5020 02c1 3A       		.uleb128 0x3a
 5021 02c2 0B       		.uleb128 0xb
 5022 02c3 3B       		.uleb128 0x3b
 5023 02c4 05       		.uleb128 0x5
 5024 02c5 00       		.byte	0
 5025 02c6 00       		.byte	0
 5026 02c7 00       		.byte	0
 5027              		.section	.debug_loc,"",%progbits
 5028              	.Ldebug_loc0:
 5029              	.LLST19:
ARM GAS  /tmp/cceY5bqg.s 			page 139


 5030 0000 E0020000 		.4byte	.LFB91-.Ltext0
 5031 0004 E4020000 		.4byte	.LCFI8-.Ltext0
 5032 0008 0200     		.2byte	0x2
 5033 000a 7D       		.byte	0x7d
 5034 000b 00       		.sleb128 0
 5035 000c E4020000 		.4byte	.LCFI8-.Ltext0
 5036 0010 FA020000 		.4byte	.LFE91-.Ltext0
 5037 0014 0200     		.2byte	0x2
 5038 0016 7D       		.byte	0x7d
 5039 0017 08       		.sleb128 8
 5040 0018 00000000 		.4byte	0
 5041 001c 00000000 		.4byte	0
 5042              	.LLST20:
 5043 0020 E0020000 		.4byte	.LVL42-.Ltext0
 5044 0024 E2020000 		.4byte	.LVL43-.Ltext0
 5045 0028 0100     		.2byte	0x1
 5046 002a 50       		.byte	0x50
 5047 002b E2020000 		.4byte	.LVL43-.Ltext0
 5048 002f FA020000 		.4byte	.LFE91-.Ltext0
 5049 0033 0400     		.2byte	0x4
 5050 0035 F3       		.byte	0xf3
 5051 0036 01       		.uleb128 0x1
 5052 0037 50       		.byte	0x50
 5053 0038 9F       		.byte	0x9f
 5054 0039 00000000 		.4byte	0
 5055 003d 00000000 		.4byte	0
 5056              	.LLST21:
 5057 0041 E2020000 		.4byte	.LVL43-.Ltext0
 5058 0045 F7020000 		.4byte	.LVL44-1-.Ltext0
 5059 0049 0100     		.2byte	0x1
 5060 004b 50       		.byte	0x50
 5061 004c 00000000 		.4byte	0
 5062 0050 00000000 		.4byte	0
 5063              	.LLST14:
 5064 0054 E6010000 		.4byte	.LFB90-.Ltext0
 5065 0058 E8010000 		.4byte	.LCFI6-.Ltext0
 5066 005c 0200     		.2byte	0x2
 5067 005e 7D       		.byte	0x7d
 5068 005f 00       		.sleb128 0
 5069 0060 E8010000 		.4byte	.LCFI6-.Ltext0
 5070 0064 F0010000 		.4byte	.LFE90-.Ltext0
 5071 0068 0200     		.2byte	0x2
 5072 006a 7D       		.byte	0x7d
 5073 006b 08       		.sleb128 8
 5074 006c 00000000 		.4byte	0
 5075 0070 00000000 		.4byte	0
 5076              	.LLST15:
 5077 0074 E6010000 		.4byte	.LVL33-.Ltext0
 5078 0078 EA010000 		.4byte	.LVL34-.Ltext0
 5079 007c 0100     		.2byte	0x1
 5080 007e 50       		.byte	0x50
 5081 007f EA010000 		.4byte	.LVL34-.Ltext0
 5082 0083 F0010000 		.4byte	.LFE90-.Ltext0
 5083 0087 0400     		.2byte	0x4
 5084 0089 F3       		.byte	0xf3
 5085 008a 01       		.uleb128 0x1
 5086 008b 50       		.byte	0x50
ARM GAS  /tmp/cceY5bqg.s 			page 140


 5087 008c 9F       		.byte	0x9f
 5088 008d 00000000 		.4byte	0
 5089 0091 00000000 		.4byte	0
 5090              	.LLST16:
 5091 0095 E6010000 		.4byte	.LVL33-.Ltext0
 5092 0099 EA010000 		.4byte	.LVL34-.Ltext0
 5093 009d 0200     		.2byte	0x2
 5094 009f 70       		.byte	0x70
 5095 00a0 24       		.sleb128 36
 5096 00a1 EA010000 		.4byte	.LVL34-.Ltext0
 5097 00a5 ED010000 		.4byte	.LVL35-1-.Ltext0
 5098 00a9 0500     		.2byte	0x5
 5099 00ab F3       		.byte	0xf3
 5100 00ac 01       		.uleb128 0x1
 5101 00ad 50       		.byte	0x50
 5102 00ae 23       		.byte	0x23
 5103 00af 24       		.uleb128 0x24
 5104 00b0 00000000 		.4byte	0
 5105 00b4 00000000 		.4byte	0
 5106              	.LLST11:
 5107 00b8 96010000 		.4byte	.LFB89-.Ltext0
 5108 00bc 9A010000 		.4byte	.LCFI4-.Ltext0
 5109 00c0 0200     		.2byte	0x2
 5110 00c2 7D       		.byte	0x7d
 5111 00c3 00       		.sleb128 0
 5112 00c4 9A010000 		.4byte	.LCFI4-.Ltext0
 5113 00c8 E0010000 		.4byte	.LCFI5-.Ltext0
 5114 00cc 0200     		.2byte	0x2
 5115 00ce 7D       		.byte	0x7d
 5116 00cf 08       		.sleb128 8
 5117 00d0 E0010000 		.4byte	.LCFI5-.Ltext0
 5118 00d4 E4010000 		.4byte	.LFE89-.Ltext0
 5119 00d8 0200     		.2byte	0x2
 5120 00da 7D       		.byte	0x7d
 5121 00db 00       		.sleb128 0
 5122 00dc 00000000 		.4byte	0
 5123 00e0 00000000 		.4byte	0
 5124              	.LLST12:
 5125 00e4 96010000 		.4byte	.LVL26-.Ltext0
 5126 00e8 D4010000 		.4byte	.LVL28-.Ltext0
 5127 00ec 0100     		.2byte	0x1
 5128 00ee 50       		.byte	0x50
 5129 00ef D4010000 		.4byte	.LVL28-.Ltext0
 5130 00f3 DA010000 		.4byte	.LVL30-.Ltext0
 5131 00f7 0400     		.2byte	0x4
 5132 00f9 F3       		.byte	0xf3
 5133 00fa 01       		.uleb128 0x1
 5134 00fb 50       		.byte	0x50
 5135 00fc 9F       		.byte	0x9f
 5136 00fd DA010000 		.4byte	.LVL30-.Ltext0
 5137 0101 E3010000 		.4byte	.LVL32-1-.Ltext0
 5138 0105 0100     		.2byte	0x1
 5139 0107 50       		.byte	0x50
 5140 0108 E3010000 		.4byte	.LVL32-1-.Ltext0
 5141 010c E4010000 		.4byte	.LFE89-.Ltext0
 5142 0110 0400     		.2byte	0x4
 5143 0112 F3       		.byte	0xf3
ARM GAS  /tmp/cceY5bqg.s 			page 141


 5144 0113 01       		.uleb128 0x1
 5145 0114 50       		.byte	0x50
 5146 0115 9F       		.byte	0x9f
 5147 0116 00000000 		.4byte	0
 5148 011a 00000000 		.4byte	0
 5149              	.LLST13:
 5150 011e 98010000 		.4byte	.LVL27-.Ltext0
 5151 0122 D7010000 		.4byte	.LVL29-1-.Ltext0
 5152 0126 0100     		.2byte	0x1
 5153 0128 53       		.byte	0x53
 5154 0129 DA010000 		.4byte	.LVL30-.Ltext0
 5155 012d DC010000 		.4byte	.LVL31-.Ltext0
 5156 0131 0100     		.2byte	0x1
 5157 0133 53       		.byte	0x53
 5158 0134 DC010000 		.4byte	.LVL31-.Ltext0
 5159 0138 E3010000 		.4byte	.LVL32-1-.Ltext0
 5160 013c 0200     		.2byte	0x2
 5161 013e 70       		.byte	0x70
 5162 013f 24       		.sleb128 36
 5163 0140 00000000 		.4byte	0
 5164 0144 00000000 		.4byte	0
 5165              	.LLST29:
 5166 0148 58040000 		.4byte	.LVL60-.Ltext0
 5167 014c 5A040000 		.4byte	.LVL61-.Ltext0
 5168 0150 0100     		.2byte	0x1
 5169 0152 50       		.byte	0x50
 5170 0153 5A040000 		.4byte	.LVL61-.Ltext0
 5171 0157 5C040000 		.4byte	.LFE86-.Ltext0
 5172 015b 0400     		.2byte	0x4
 5173 015d F3       		.byte	0xf3
 5174 015e 01       		.uleb128 0x1
 5175 015f 50       		.byte	0x50
 5176 0160 9F       		.byte	0x9f
 5177 0161 00000000 		.4byte	0
 5178 0165 00000000 		.4byte	0
 5179              	.LLST28:
 5180 0169 54040000 		.4byte	.LVL58-.Ltext0
 5181 016d 56040000 		.4byte	.LVL59-.Ltext0
 5182 0171 0100     		.2byte	0x1
 5183 0173 50       		.byte	0x50
 5184 0174 56040000 		.4byte	.LVL59-.Ltext0
 5185 0178 58040000 		.4byte	.LFE85-.Ltext0
 5186 017c 0400     		.2byte	0x4
 5187 017e F3       		.byte	0xf3
 5188 017f 01       		.uleb128 0x1
 5189 0180 50       		.byte	0x50
 5190 0181 9F       		.byte	0x9f
 5191 0182 00000000 		.4byte	0
 5192 0186 00000000 		.4byte	0
 5193              	.LLST26:
 5194 018a 04040000 		.4byte	.LFB84-.Ltext0
 5195 018e 0A040000 		.4byte	.LCFI12-.Ltext0
 5196 0192 0200     		.2byte	0x2
 5197 0194 7D       		.byte	0x7d
 5198 0195 00       		.sleb128 0
 5199 0196 0A040000 		.4byte	.LCFI12-.Ltext0
 5200 019a 54040000 		.4byte	.LFE84-.Ltext0
ARM GAS  /tmp/cceY5bqg.s 			page 142


 5201 019e 0200     		.2byte	0x2
 5202 01a0 7D       		.byte	0x7d
 5203 01a1 0C       		.sleb128 12
 5204 01a2 00000000 		.4byte	0
 5205 01a6 00000000 		.4byte	0
 5206              	.LLST27:
 5207 01aa 04040000 		.4byte	.LVL54-.Ltext0
 5208 01ae 48040000 		.4byte	.LVL55-.Ltext0
 5209 01b2 0100     		.2byte	0x1
 5210 01b4 50       		.byte	0x50
 5211 01b5 48040000 		.4byte	.LVL55-.Ltext0
 5212 01b9 4A040000 		.4byte	.LVL56-.Ltext0
 5213 01bd 0400     		.2byte	0x4
 5214 01bf F3       		.byte	0xf3
 5215 01c0 01       		.uleb128 0x1
 5216 01c1 50       		.byte	0x50
 5217 01c2 9F       		.byte	0x9f
 5218 01c3 4A040000 		.4byte	.LVL56-.Ltext0
 5219 01c7 4C040000 		.4byte	.LVL57-.Ltext0
 5220 01cb 0100     		.2byte	0x1
 5221 01cd 50       		.byte	0x50
 5222 01ce 4C040000 		.4byte	.LVL57-.Ltext0
 5223 01d2 54040000 		.4byte	.LFE84-.Ltext0
 5224 01d6 0400     		.2byte	0x4
 5225 01d8 F3       		.byte	0xf3
 5226 01d9 01       		.uleb128 0x1
 5227 01da 50       		.byte	0x50
 5228 01db 9F       		.byte	0x9f
 5229 01dc 00000000 		.4byte	0
 5230 01e0 00000000 		.4byte	0
 5231              	.LLST22:
 5232 01e4 FA020000 		.4byte	.LFB83-.Ltext0
 5233 01e8 FE020000 		.4byte	.LCFI9-.Ltext0
 5234 01ec 0200     		.2byte	0x2
 5235 01ee 7D       		.byte	0x7d
 5236 01ef 00       		.sleb128 0
 5237 01f0 FE020000 		.4byte	.LCFI9-.Ltext0
 5238 01f4 66030000 		.4byte	.LCFI10-.Ltext0
 5239 01f8 0200     		.2byte	0x2
 5240 01fa 7D       		.byte	0x7d
 5241 01fb 18       		.sleb128 24
 5242 01fc 66030000 		.4byte	.LCFI10-.Ltext0
 5243 0200 68030000 		.4byte	.LCFI11-.Ltext0
 5244 0204 0200     		.2byte	0x2
 5245 0206 7D       		.byte	0x7d
 5246 0207 10       		.sleb128 16
 5247 0208 68030000 		.4byte	.LCFI11-.Ltext0
 5248 020c 04040000 		.4byte	.LFE83-.Ltext0
 5249 0210 0200     		.2byte	0x2
 5250 0212 7D       		.byte	0x7d
 5251 0213 18       		.sleb128 24
 5252 0214 00000000 		.4byte	0
 5253 0218 00000000 		.4byte	0
 5254              	.LLST23:
 5255 021c FA020000 		.4byte	.LVL45-.Ltext0
 5256 0220 64030000 		.4byte	.LVL49-.Ltext0
 5257 0224 0100     		.2byte	0x1
ARM GAS  /tmp/cceY5bqg.s 			page 143


 5258 0226 50       		.byte	0x50
 5259 0227 64030000 		.4byte	.LVL49-.Ltext0
 5260 022b 68030000 		.4byte	.LVL50-.Ltext0
 5261 022f 0400     		.2byte	0x4
 5262 0231 F3       		.byte	0xf3
 5263 0232 01       		.uleb128 0x1
 5264 0233 50       		.byte	0x50
 5265 0234 9F       		.byte	0x9f
 5266 0235 68030000 		.4byte	.LVL50-.Ltext0
 5267 0239 04040000 		.4byte	.LFE83-.Ltext0
 5268 023d 0100     		.2byte	0x1
 5269 023f 50       		.byte	0x50
 5270 0240 00000000 		.4byte	0
 5271 0244 00000000 		.4byte	0
 5272              	.LLST24:
 5273 0248 FA020000 		.4byte	.LVL45-.Ltext0
 5274 024c 42030000 		.4byte	.LVL46-.Ltext0
 5275 0250 0100     		.2byte	0x1
 5276 0252 51       		.byte	0x51
 5277 0253 42030000 		.4byte	.LVL46-.Ltext0
 5278 0257 68030000 		.4byte	.LVL50-.Ltext0
 5279 025b 0400     		.2byte	0x4
 5280 025d F3       		.byte	0xf3
 5281 025e 01       		.uleb128 0x1
 5282 025f 51       		.byte	0x51
 5283 0260 9F       		.byte	0x9f
 5284 0261 68030000 		.4byte	.LVL50-.Ltext0
 5285 0265 A0030000 		.4byte	.LVL51-.Ltext0
 5286 0269 0100     		.2byte	0x1
 5287 026b 51       		.byte	0x51
 5288 026c A0030000 		.4byte	.LVL51-.Ltext0
 5289 0270 F2030000 		.4byte	.LVL53-.Ltext0
 5290 0274 0400     		.2byte	0x4
 5291 0276 F3       		.byte	0xf3
 5292 0277 01       		.uleb128 0x1
 5293 0278 51       		.byte	0x51
 5294 0279 9F       		.byte	0x9f
 5295 027a F2030000 		.4byte	.LVL53-.Ltext0
 5296 027e 04040000 		.4byte	.LFE83-.Ltext0
 5297 0282 0100     		.2byte	0x1
 5298 0284 51       		.byte	0x51
 5299 0285 00000000 		.4byte	0
 5300 0289 00000000 		.4byte	0
 5301              	.LLST25:
 5302 028d FA020000 		.4byte	.LVL45-.Ltext0
 5303 0291 5C030000 		.4byte	.LVL47-.Ltext0
 5304 0295 0200     		.2byte	0x2
 5305 0297 30       		.byte	0x30
 5306 0298 9F       		.byte	0x9f
 5307 0299 5C030000 		.4byte	.LVL47-.Ltext0
 5308 029d 62030000 		.4byte	.LVL48-.Ltext0
 5309 02a1 0100     		.2byte	0x1
 5310 02a3 53       		.byte	0x53
 5311 02a4 68030000 		.4byte	.LVL50-.Ltext0
 5312 02a8 EE030000 		.4byte	.LVL52-.Ltext0
 5313 02ac 0200     		.2byte	0x2
 5314 02ae 30       		.byte	0x30
ARM GAS  /tmp/cceY5bqg.s 			page 144


 5315 02af 9F       		.byte	0x9f
 5316 02b0 EE030000 		.4byte	.LVL52-.Ltext0
 5317 02b4 F2030000 		.4byte	.LVL53-.Ltext0
 5318 02b8 0200     		.2byte	0x2
 5319 02ba 31       		.byte	0x31
 5320 02bb 9F       		.byte	0x9f
 5321 02bc F2030000 		.4byte	.LVL53-.Ltext0
 5322 02c0 04040000 		.4byte	.LFE83-.Ltext0
 5323 02c4 0200     		.2byte	0x2
 5324 02c6 30       		.byte	0x30
 5325 02c7 9F       		.byte	0x9f
 5326 02c8 00000000 		.4byte	0
 5327 02cc 00000000 		.4byte	0
 5328              	.LLST17:
 5329 02d0 F2010000 		.4byte	.LFB78-.Ltext0
 5330 02d4 F6010000 		.4byte	.LCFI7-.Ltext0
 5331 02d8 0200     		.2byte	0x2
 5332 02da 7D       		.byte	0x7d
 5333 02db 00       		.sleb128 0
 5334 02dc F6010000 		.4byte	.LCFI7-.Ltext0
 5335 02e0 DE020000 		.4byte	.LFE78-.Ltext0
 5336 02e4 0200     		.2byte	0x2
 5337 02e6 7D       		.byte	0x7d
 5338 02e7 08       		.sleb128 8
 5339 02e8 00000000 		.4byte	0
 5340 02ec 00000000 		.4byte	0
 5341              	.LLST18:
 5342 02f0 F2010000 		.4byte	.LVL36-.Ltext0
 5343 02f4 FC010000 		.4byte	.LVL37-.Ltext0
 5344 02f8 0100     		.2byte	0x1
 5345 02fa 50       		.byte	0x50
 5346 02fb FC010000 		.4byte	.LVL37-.Ltext0
 5347 02ff DE020000 		.4byte	.LFE78-.Ltext0
 5348 0303 0100     		.2byte	0x1
 5349 0305 54       		.byte	0x54
 5350 0306 00000000 		.4byte	0
 5351 030a 00000000 		.4byte	0
 5352              	.LLST10:
 5353 030e 8E010000 		.4byte	.LVL24-.Ltext0
 5354 0312 92010000 		.4byte	.LVL25-.Ltext0
 5355 0316 0100     		.2byte	0x1
 5356 0318 50       		.byte	0x50
 5357 0319 92010000 		.4byte	.LVL25-.Ltext0
 5358 031d 94010000 		.4byte	.LFE77-.Ltext0
 5359 0321 0400     		.2byte	0x4
 5360 0323 F3       		.byte	0xf3
 5361 0324 01       		.uleb128 0x1
 5362 0325 50       		.byte	0x50
 5363 0326 9F       		.byte	0x9f
 5364 0327 00000000 		.4byte	0
 5365 032b 00000000 		.4byte	0
 5366              	.LLST64:
 5367 032f EE090000 		.4byte	.LFB76-.Ltext0
 5368 0333 F4090000 		.4byte	.LCFI24-.Ltext0
 5369 0337 0200     		.2byte	0x2
 5370 0339 7D       		.byte	0x7d
 5371 033a 00       		.sleb128 0
ARM GAS  /tmp/cceY5bqg.s 			page 145


 5372 033b F4090000 		.4byte	.LCFI24-.Ltext0
 5373 033f 3A0A0000 		.4byte	.LFE76-.Ltext0
 5374 0343 0200     		.2byte	0x2
 5375 0345 7D       		.byte	0x7d
 5376 0346 08       		.sleb128 8
 5377 0347 00000000 		.4byte	0
 5378 034b 00000000 		.4byte	0
 5379              	.LLST65:
 5380 034f EE090000 		.4byte	.LVL130-.Ltext0
 5381 0353 030A0000 		.4byte	.LVL131-1-.Ltext0
 5382 0357 0100     		.2byte	0x1
 5383 0359 50       		.byte	0x50
 5384 035a 030A0000 		.4byte	.LVL131-1-.Ltext0
 5385 035e 360A0000 		.4byte	.LVL135-.Ltext0
 5386 0362 0100     		.2byte	0x1
 5387 0364 54       		.byte	0x54
 5388 0365 360A0000 		.4byte	.LVL135-.Ltext0
 5389 0369 380A0000 		.4byte	.LVL136-.Ltext0
 5390 036d 0100     		.2byte	0x1
 5391 036f 50       		.byte	0x50
 5392 0370 380A0000 		.4byte	.LVL136-.Ltext0
 5393 0374 3A0A0000 		.4byte	.LFE76-.Ltext0
 5394 0378 0100     		.2byte	0x1
 5395 037a 54       		.byte	0x54
 5396 037b 00000000 		.4byte	0
 5397 037f 00000000 		.4byte	0
 5398              	.LLST66:
 5399 0383 EE090000 		.4byte	.LVL130-.Ltext0
 5400 0387 040A0000 		.4byte	.LVL131-.Ltext0
 5401 038b 0200     		.2byte	0x2
 5402 038d 30       		.byte	0x30
 5403 038e 9F       		.byte	0x9f
 5404 038f 040A0000 		.4byte	.LVL131-.Ltext0
 5405 0393 0A0A0000 		.4byte	.LVL132-.Ltext0
 5406 0397 0100     		.2byte	0x1
 5407 0399 50       		.byte	0x50
 5408 039a 160A0000 		.4byte	.LVL133-.Ltext0
 5409 039e 360A0000 		.4byte	.LVL135-.Ltext0
 5410 03a2 0100     		.2byte	0x1
 5411 03a4 50       		.byte	0x50
 5412 03a5 360A0000 		.4byte	.LVL135-.Ltext0
 5413 03a9 3A0A0000 		.4byte	.LFE76-.Ltext0
 5414 03ad 0200     		.2byte	0x2
 5415 03af 30       		.byte	0x30
 5416 03b0 9F       		.byte	0x9f
 5417 03b1 00000000 		.4byte	0
 5418 03b5 00000000 		.4byte	0
 5419              	.LLST40:
 5420 03b9 5C060000 		.4byte	.LFB75-.Ltext0
 5421 03bd 60060000 		.4byte	.LCFI18-.Ltext0
 5422 03c1 0200     		.2byte	0x2
 5423 03c3 7D       		.byte	0x7d
 5424 03c4 00       		.sleb128 0
 5425 03c5 60060000 		.4byte	.LCFI18-.Ltext0
 5426 03c9 78070000 		.4byte	.LFE75-.Ltext0
 5427 03cd 0200     		.2byte	0x2
 5428 03cf 7D       		.byte	0x7d
ARM GAS  /tmp/cceY5bqg.s 			page 146


 5429 03d0 18       		.sleb128 24
 5430 03d1 00000000 		.4byte	0
 5431 03d5 00000000 		.4byte	0
 5432              	.LLST41:
 5433 03d9 5C060000 		.4byte	.LVL83-.Ltext0
 5434 03dd 88060000 		.4byte	.LVL86-.Ltext0
 5435 03e1 0100     		.2byte	0x1
 5436 03e3 50       		.byte	0x50
 5437 03e4 88060000 		.4byte	.LVL86-.Ltext0
 5438 03e8 5A070000 		.4byte	.LVL92-.Ltext0
 5439 03ec 0100     		.2byte	0x1
 5440 03ee 54       		.byte	0x54
 5441 03ef 5A070000 		.4byte	.LVL92-.Ltext0
 5442 03f3 78070000 		.4byte	.LFE75-.Ltext0
 5443 03f7 0100     		.2byte	0x1
 5444 03f9 50       		.byte	0x50
 5445 03fa 00000000 		.4byte	0
 5446 03fe 00000000 		.4byte	0
 5447              	.LLST42:
 5448 0402 5C060000 		.4byte	.LVL83-.Ltext0
 5449 0406 70060000 		.4byte	.LVL85-.Ltext0
 5450 040a 0100     		.2byte	0x1
 5451 040c 51       		.byte	0x51
 5452 040d 70060000 		.4byte	.LVL85-.Ltext0
 5453 0411 78070000 		.4byte	.LFE75-.Ltext0
 5454 0415 0100     		.2byte	0x1
 5455 0417 57       		.byte	0x57
 5456 0418 00000000 		.4byte	0
 5457 041c 00000000 		.4byte	0
 5458              	.LLST43:
 5459 0420 5C060000 		.4byte	.LVL83-.Ltext0
 5460 0424 66060000 		.4byte	.LVL84-.Ltext0
 5461 0428 0100     		.2byte	0x1
 5462 042a 52       		.byte	0x52
 5463 042b 66060000 		.4byte	.LVL84-.Ltext0
 5464 042f 78070000 		.4byte	.LFE75-.Ltext0
 5465 0433 0100     		.2byte	0x1
 5466 0435 58       		.byte	0x58
 5467 0436 00000000 		.4byte	0
 5468 043a 00000000 		.4byte	0
 5469              	.LLST44:
 5470 043e 5C060000 		.4byte	.LVL83-.Ltext0
 5471 0442 90060000 		.4byte	.LVL87-.Ltext0
 5472 0446 0200     		.2byte	0x2
 5473 0448 30       		.byte	0x30
 5474 0449 9F       		.byte	0x9f
 5475 044a 90060000 		.4byte	.LVL87-.Ltext0
 5476 044e 98060000 		.4byte	.LVL88-.Ltext0
 5477 0452 0100     		.2byte	0x1
 5478 0454 50       		.byte	0x50
 5479 0455 52070000 		.4byte	.LVL91-.Ltext0
 5480 0459 5A070000 		.4byte	.LVL92-.Ltext0
 5481 045d 0100     		.2byte	0x1
 5482 045f 50       		.byte	0x50
 5483 0460 5A070000 		.4byte	.LVL92-.Ltext0
 5484 0464 78070000 		.4byte	.LFE75-.Ltext0
 5485 0468 0200     		.2byte	0x2
ARM GAS  /tmp/cceY5bqg.s 			page 147


 5486 046a 30       		.byte	0x30
 5487 046b 9F       		.byte	0x9f
 5488 046c 00000000 		.4byte	0
 5489 0470 00000000 		.4byte	0
 5490              	.LLST61:
 5491 0474 B0090000 		.4byte	.LFB74-.Ltext0
 5492 0478 B6090000 		.4byte	.LCFI23-.Ltext0
 5493 047c 0200     		.2byte	0x2
 5494 047e 7D       		.byte	0x7d
 5495 047f 00       		.sleb128 0
 5496 0480 B6090000 		.4byte	.LCFI23-.Ltext0
 5497 0484 EE090000 		.4byte	.LFE74-.Ltext0
 5498 0488 0200     		.2byte	0x2
 5499 048a 7D       		.byte	0x7d
 5500 048b 08       		.sleb128 8
 5501 048c 00000000 		.4byte	0
 5502 0490 00000000 		.4byte	0
 5503              	.LLST62:
 5504 0494 B0090000 		.4byte	.LVL126-.Ltext0
 5505 0498 C5090000 		.4byte	.LVL127-1-.Ltext0
 5506 049c 0100     		.2byte	0x1
 5507 049e 50       		.byte	0x50
 5508 049f C5090000 		.4byte	.LVL127-1-.Ltext0
 5509 04a3 EA090000 		.4byte	.LVL128-.Ltext0
 5510 04a7 0100     		.2byte	0x1
 5511 04a9 54       		.byte	0x54
 5512 04aa EA090000 		.4byte	.LVL128-.Ltext0
 5513 04ae EC090000 		.4byte	.LVL129-.Ltext0
 5514 04b2 0100     		.2byte	0x1
 5515 04b4 50       		.byte	0x50
 5516 04b5 EC090000 		.4byte	.LVL129-.Ltext0
 5517 04b9 EE090000 		.4byte	.LFE74-.Ltext0
 5518 04bd 0100     		.2byte	0x1
 5519 04bf 54       		.byte	0x54
 5520 04c0 00000000 		.4byte	0
 5521 04c4 00000000 		.4byte	0
 5522              	.LLST63:
 5523 04c8 B0090000 		.4byte	.LVL126-.Ltext0
 5524 04cc C6090000 		.4byte	.LVL127-.Ltext0
 5525 04d0 0200     		.2byte	0x2
 5526 04d2 30       		.byte	0x30
 5527 04d3 9F       		.byte	0x9f
 5528 04d4 C6090000 		.4byte	.LVL127-.Ltext0
 5529 04d8 EA090000 		.4byte	.LVL128-.Ltext0
 5530 04dc 0100     		.2byte	0x1
 5531 04de 50       		.byte	0x50
 5532 04df EA090000 		.4byte	.LVL128-.Ltext0
 5533 04e3 EE090000 		.4byte	.LFE74-.Ltext0
 5534 04e7 0200     		.2byte	0x2
 5535 04e9 30       		.byte	0x30
 5536 04ea 9F       		.byte	0x9f
 5537 04eb 00000000 		.4byte	0
 5538 04ef 00000000 		.4byte	0
 5539              	.LLST37:
 5540 04f3 90050000 		.4byte	.LFB73-.Ltext0
 5541 04f7 96050000 		.4byte	.LCFI17-.Ltext0
 5542 04fb 0200     		.2byte	0x2
ARM GAS  /tmp/cceY5bqg.s 			page 148


 5543 04fd 7D       		.byte	0x7d
 5544 04fe 00       		.sleb128 0
 5545 04ff 96050000 		.4byte	.LCFI17-.Ltext0
 5546 0503 5C060000 		.4byte	.LFE73-.Ltext0
 5547 0507 0200     		.2byte	0x2
 5548 0509 7D       		.byte	0x7d
 5549 050a 08       		.sleb128 8
 5550 050b 00000000 		.4byte	0
 5551 050f 00000000 		.4byte	0
 5552              	.LLST38:
 5553 0513 90050000 		.4byte	.LVL77-.Ltext0
 5554 0517 A5050000 		.4byte	.LVL78-1-.Ltext0
 5555 051b 0100     		.2byte	0x1
 5556 051d 50       		.byte	0x50
 5557 051e A5050000 		.4byte	.LVL78-1-.Ltext0
 5558 0522 4E060000 		.4byte	.LVL80-.Ltext0
 5559 0526 0100     		.2byte	0x1
 5560 0528 54       		.byte	0x54
 5561 0529 4E060000 		.4byte	.LVL80-.Ltext0
 5562 052d 50060000 		.4byte	.LVL81-.Ltext0
 5563 0531 0100     		.2byte	0x1
 5564 0533 50       		.byte	0x50
 5565 0534 50060000 		.4byte	.LVL81-.Ltext0
 5566 0538 52060000 		.4byte	.LVL82-.Ltext0
 5567 053c 0100     		.2byte	0x1
 5568 053e 54       		.byte	0x54
 5569 053f 52060000 		.4byte	.LVL82-.Ltext0
 5570 0543 5C060000 		.4byte	.LFE73-.Ltext0
 5571 0547 0400     		.2byte	0x4
 5572 0549 F3       		.byte	0xf3
 5573 054a 01       		.uleb128 0x1
 5574 054b 50       		.byte	0x50
 5575 054c 9F       		.byte	0x9f
 5576 054d 00000000 		.4byte	0
 5577 0551 00000000 		.4byte	0
 5578              	.LLST39:
 5579 0555 90050000 		.4byte	.LVL77-.Ltext0
 5580 0559 A6050000 		.4byte	.LVL78-.Ltext0
 5581 055d 0200     		.2byte	0x2
 5582 055f 30       		.byte	0x30
 5583 0560 9F       		.byte	0x9f
 5584 0561 A6050000 		.4byte	.LVL78-.Ltext0
 5585 0565 4E060000 		.4byte	.LVL80-.Ltext0
 5586 0569 0100     		.2byte	0x1
 5587 056b 50       		.byte	0x50
 5588 056c 4E060000 		.4byte	.LVL80-.Ltext0
 5589 0570 5C060000 		.4byte	.LFE73-.Ltext0
 5590 0574 0200     		.2byte	0x2
 5591 0576 30       		.byte	0x30
 5592 0577 9F       		.byte	0x9f
 5593 0578 00000000 		.4byte	0
 5594 057c 00000000 		.4byte	0
 5595              	.LLST5:
 5596 0580 40010000 		.4byte	.LFB72-.Ltext0
 5597 0584 42010000 		.4byte	.LCFI3-.Ltext0
 5598 0588 0200     		.2byte	0x2
 5599 058a 7D       		.byte	0x7d
ARM GAS  /tmp/cceY5bqg.s 			page 149


 5600 058b 00       		.sleb128 0
 5601 058c 42010000 		.4byte	.LCFI3-.Ltext0
 5602 0590 8E010000 		.4byte	.LFE72-.Ltext0
 5603 0594 0200     		.2byte	0x2
 5604 0596 7D       		.byte	0x7d
 5605 0597 18       		.sleb128 24
 5606 0598 00000000 		.4byte	0
 5607 059c 00000000 		.4byte	0
 5608              	.LLST6:
 5609 05a0 40010000 		.4byte	.LVL18-.Ltext0
 5610 05a4 4B010000 		.4byte	.LVL19-1-.Ltext0
 5611 05a8 0100     		.2byte	0x1
 5612 05aa 50       		.byte	0x50
 5613 05ab 4B010000 		.4byte	.LVL19-1-.Ltext0
 5614 05af 8E010000 		.4byte	.LFE72-.Ltext0
 5615 05b3 0100     		.2byte	0x1
 5616 05b5 54       		.byte	0x54
 5617 05b6 00000000 		.4byte	0
 5618 05ba 00000000 		.4byte	0
 5619              	.LLST7:
 5620 05be 40010000 		.4byte	.LVL18-.Ltext0
 5621 05c2 4B010000 		.4byte	.LVL19-1-.Ltext0
 5622 05c6 0100     		.2byte	0x1
 5623 05c8 51       		.byte	0x51
 5624 05c9 4B010000 		.4byte	.LVL19-1-.Ltext0
 5625 05cd 8E010000 		.4byte	.LFE72-.Ltext0
 5626 05d1 0100     		.2byte	0x1
 5627 05d3 56       		.byte	0x56
 5628 05d4 00000000 		.4byte	0
 5629 05d8 00000000 		.4byte	0
 5630              	.LLST8:
 5631 05dc 40010000 		.4byte	.LVL18-.Ltext0
 5632 05e0 4B010000 		.4byte	.LVL19-1-.Ltext0
 5633 05e4 0100     		.2byte	0x1
 5634 05e6 52       		.byte	0x52
 5635 05e7 4B010000 		.4byte	.LVL19-1-.Ltext0
 5636 05eb 8E010000 		.4byte	.LFE72-.Ltext0
 5637 05ef 0100     		.2byte	0x1
 5638 05f1 55       		.byte	0x55
 5639 05f2 00000000 		.4byte	0
 5640 05f6 00000000 		.4byte	0
 5641              	.LLST9:
 5642 05fa 40010000 		.4byte	.LVL18-.Ltext0
 5643 05fe 4E010000 		.4byte	.LVL20-.Ltext0
 5644 0602 0200     		.2byte	0x2
 5645 0604 30       		.byte	0x30
 5646 0605 9F       		.byte	0x9f
 5647 0606 4E010000 		.4byte	.LVL20-.Ltext0
 5648 060a 8E010000 		.4byte	.LFE72-.Ltext0
 5649 060e 0100     		.2byte	0x1
 5650 0610 57       		.byte	0x57
 5651 0611 00000000 		.4byte	0
 5652 0615 00000000 		.4byte	0
 5653              	.LLST0:
 5654 0619 04000000 		.4byte	.LFB71-.Ltext0
 5655 061d 06000000 		.4byte	.LCFI0-.Ltext0
 5656 0621 0200     		.2byte	0x2
ARM GAS  /tmp/cceY5bqg.s 			page 150


 5657 0623 7D       		.byte	0x7d
 5658 0624 00       		.sleb128 0
 5659 0625 06000000 		.4byte	.LCFI0-.Ltext0
 5660 0629 2C000000 		.4byte	.LCFI1-.Ltext0
 5661 062d 0200     		.2byte	0x2
 5662 062f 7D       		.byte	0x7d
 5663 0630 20       		.sleb128 32
 5664 0631 2C000000 		.4byte	.LCFI1-.Ltext0
 5665 0635 2E000000 		.4byte	.LCFI2-.Ltext0
 5666 0639 0200     		.2byte	0x2
 5667 063b 7D       		.byte	0x7d
 5668 063c 14       		.sleb128 20
 5669 063d 2E000000 		.4byte	.LCFI2-.Ltext0
 5670 0641 40010000 		.4byte	.LFE71-.Ltext0
 5671 0645 0200     		.2byte	0x2
 5672 0647 7D       		.byte	0x7d
 5673 0648 20       		.sleb128 32
 5674 0649 00000000 		.4byte	0
 5675 064d 00000000 		.4byte	0
 5676              	.LLST1:
 5677 0651 04000000 		.4byte	.LVL0-.Ltext0
 5678 0655 11000000 		.4byte	.LVL2-1-.Ltext0
 5679 0659 0100     		.2byte	0x1
 5680 065b 50       		.byte	0x50
 5681 065c 11000000 		.4byte	.LVL2-1-.Ltext0
 5682 0660 40010000 		.4byte	.LFE71-.Ltext0
 5683 0664 0100     		.2byte	0x1
 5684 0666 54       		.byte	0x54
 5685 0667 00000000 		.4byte	0
 5686 066b 00000000 		.4byte	0
 5687              	.LLST2:
 5688 066f 04000000 		.4byte	.LVL0-.Ltext0
 5689 0673 11000000 		.4byte	.LVL2-1-.Ltext0
 5690 0677 0100     		.2byte	0x1
 5691 0679 51       		.byte	0x51
 5692 067a 11000000 		.4byte	.LVL2-1-.Ltext0
 5693 067e 40010000 		.4byte	.LFE71-.Ltext0
 5694 0682 0100     		.2byte	0x1
 5695 0684 55       		.byte	0x55
 5696 0685 00000000 		.4byte	0
 5697 0689 00000000 		.4byte	0
 5698              	.LLST3:
 5699 068d 04000000 		.4byte	.LVL0-.Ltext0
 5700 0691 16000000 		.4byte	.LVL3-.Ltext0
 5701 0695 0200     		.2byte	0x2
 5702 0697 30       		.byte	0x30
 5703 0698 9F       		.byte	0x9f
 5704 0699 16000000 		.4byte	.LVL3-.Ltext0
 5705 069d 1E000000 		.4byte	.LVL4-.Ltext0
 5706 06a1 0100     		.2byte	0x1
 5707 06a3 50       		.byte	0x50
 5708 06a4 1E000000 		.4byte	.LVL4-.Ltext0
 5709 06a8 2E000000 		.4byte	.LVL6-.Ltext0
 5710 06ac 0100     		.2byte	0x1
 5711 06ae 57       		.byte	0x57
 5712 06af 2E000000 		.4byte	.LVL6-.Ltext0
 5713 06b3 40000000 		.4byte	.LVL7-.Ltext0
ARM GAS  /tmp/cceY5bqg.s 			page 151


 5714 06b7 0100     		.2byte	0x1
 5715 06b9 50       		.byte	0x50
 5716 06ba 40000000 		.4byte	.LVL7-.Ltext0
 5717 06be 40010000 		.4byte	.LFE71-.Ltext0
 5718 06c2 0100     		.2byte	0x1
 5719 06c4 57       		.byte	0x57
 5720 06c5 00000000 		.4byte	0
 5721 06c9 00000000 		.4byte	0
 5722              	.LLST4:
 5723 06cd 0E000000 		.4byte	.LVL1-.Ltext0
 5724 06d1 2A000000 		.4byte	.LVL5-.Ltext0
 5725 06d5 0200     		.2byte	0x2
 5726 06d7 30       		.byte	0x30
 5727 06d8 9F       		.byte	0x9f
 5728 06d9 2E000000 		.4byte	.LVL6-.Ltext0
 5729 06dd 74000000 		.4byte	.LVL9-.Ltext0
 5730 06e1 0200     		.2byte	0x2
 5731 06e3 30       		.byte	0x30
 5732 06e4 9F       		.byte	0x9f
 5733 06e5 74000000 		.4byte	.LVL9-.Ltext0
 5734 06e9 92000000 		.4byte	.LVL11-.Ltext0
 5735 06ed 0100     		.2byte	0x1
 5736 06ef 56       		.byte	0x56
 5737 06f0 92000000 		.4byte	.LVL11-.Ltext0
 5738 06f4 98000000 		.4byte	.LVL12-.Ltext0
 5739 06f8 0200     		.2byte	0x2
 5740 06fa 30       		.byte	0x30
 5741 06fb 9F       		.byte	0x9f
 5742 06fc AA000000 		.4byte	.LVL13-.Ltext0
 5743 0700 BC000000 		.4byte	.LVL15-.Ltext0
 5744 0704 0200     		.2byte	0x2
 5745 0706 30       		.byte	0x30
 5746 0707 9F       		.byte	0x9f
 5747 0708 F6000000 		.4byte	.LVL16-.Ltext0
 5748 070c 24010000 		.4byte	.LVL17-.Ltext0
 5749 0710 0200     		.2byte	0x2
 5750 0712 30       		.byte	0x30
 5751 0713 9F       		.byte	0x9f
 5752 0714 00000000 		.4byte	0
 5753 0718 00000000 		.4byte	0
 5754              	.LLST58:
 5755 071c 7C090000 		.4byte	.LFB70-.Ltext0
 5756 0720 82090000 		.4byte	.LCFI22-.Ltext0
 5757 0724 0200     		.2byte	0x2
 5758 0726 7D       		.byte	0x7d
 5759 0727 00       		.sleb128 0
 5760 0728 82090000 		.4byte	.LCFI22-.Ltext0
 5761 072c B0090000 		.4byte	.LFE70-.Ltext0
 5762 0730 0200     		.2byte	0x2
 5763 0732 7D       		.byte	0x7d
 5764 0733 08       		.sleb128 8
 5765 0734 00000000 		.4byte	0
 5766 0738 00000000 		.4byte	0
 5767              	.LLST59:
 5768 073c 7C090000 		.4byte	.LVL122-.Ltext0
 5769 0740 91090000 		.4byte	.LVL123-1-.Ltext0
 5770 0744 0100     		.2byte	0x1
ARM GAS  /tmp/cceY5bqg.s 			page 152


 5771 0746 50       		.byte	0x50
 5772 0747 91090000 		.4byte	.LVL123-1-.Ltext0
 5773 074b AC090000 		.4byte	.LVL124-.Ltext0
 5774 074f 0100     		.2byte	0x1
 5775 0751 54       		.byte	0x54
 5776 0752 AC090000 		.4byte	.LVL124-.Ltext0
 5777 0756 AE090000 		.4byte	.LVL125-.Ltext0
 5778 075a 0100     		.2byte	0x1
 5779 075c 50       		.byte	0x50
 5780 075d AE090000 		.4byte	.LVL125-.Ltext0
 5781 0761 B0090000 		.4byte	.LFE70-.Ltext0
 5782 0765 0100     		.2byte	0x1
 5783 0767 54       		.byte	0x54
 5784 0768 00000000 		.4byte	0
 5785 076c 00000000 		.4byte	0
 5786              	.LLST60:
 5787 0770 7C090000 		.4byte	.LVL122-.Ltext0
 5788 0774 92090000 		.4byte	.LVL123-.Ltext0
 5789 0778 0200     		.2byte	0x2
 5790 077a 30       		.byte	0x30
 5791 077b 9F       		.byte	0x9f
 5792 077c 92090000 		.4byte	.LVL123-.Ltext0
 5793 0780 AC090000 		.4byte	.LVL124-.Ltext0
 5794 0784 0100     		.2byte	0x1
 5795 0786 50       		.byte	0x50
 5796 0787 AC090000 		.4byte	.LVL124-.Ltext0
 5797 078b B0090000 		.4byte	.LFE70-.Ltext0
 5798 078f 0200     		.2byte	0x2
 5799 0791 30       		.byte	0x30
 5800 0792 9F       		.byte	0x9f
 5801 0793 00000000 		.4byte	0
 5802 0797 00000000 		.4byte	0
 5803              	.LLST34:
 5804 079b CC040000 		.4byte	.LFB69-.Ltext0
 5805 079f D2040000 		.4byte	.LCFI16-.Ltext0
 5806 07a3 0200     		.2byte	0x2
 5807 07a5 7D       		.byte	0x7d
 5808 07a6 00       		.sleb128 0
 5809 07a7 D2040000 		.4byte	.LCFI16-.Ltext0
 5810 07ab 90050000 		.4byte	.LFE69-.Ltext0
 5811 07af 0200     		.2byte	0x2
 5812 07b1 7D       		.byte	0x7d
 5813 07b2 08       		.sleb128 8
 5814 07b3 00000000 		.4byte	0
 5815 07b7 00000000 		.4byte	0
 5816              	.LLST35:
 5817 07bb CC040000 		.4byte	.LVL71-.Ltext0
 5818 07bf E1040000 		.4byte	.LVL72-1-.Ltext0
 5819 07c3 0100     		.2byte	0x1
 5820 07c5 50       		.byte	0x50
 5821 07c6 E1040000 		.4byte	.LVL72-1-.Ltext0
 5822 07ca 82050000 		.4byte	.LVL74-.Ltext0
 5823 07ce 0100     		.2byte	0x1
 5824 07d0 54       		.byte	0x54
 5825 07d1 82050000 		.4byte	.LVL74-.Ltext0
 5826 07d5 84050000 		.4byte	.LVL75-.Ltext0
 5827 07d9 0100     		.2byte	0x1
ARM GAS  /tmp/cceY5bqg.s 			page 153


 5828 07db 50       		.byte	0x50
 5829 07dc 84050000 		.4byte	.LVL75-.Ltext0
 5830 07e0 86050000 		.4byte	.LVL76-.Ltext0
 5831 07e4 0100     		.2byte	0x1
 5832 07e6 54       		.byte	0x54
 5833 07e7 86050000 		.4byte	.LVL76-.Ltext0
 5834 07eb 90050000 		.4byte	.LFE69-.Ltext0
 5835 07ef 0400     		.2byte	0x4
 5836 07f1 F3       		.byte	0xf3
 5837 07f2 01       		.uleb128 0x1
 5838 07f3 50       		.byte	0x50
 5839 07f4 9F       		.byte	0x9f
 5840 07f5 00000000 		.4byte	0
 5841 07f9 00000000 		.4byte	0
 5842              	.LLST36:
 5843 07fd CC040000 		.4byte	.LVL71-.Ltext0
 5844 0801 E2040000 		.4byte	.LVL72-.Ltext0
 5845 0805 0200     		.2byte	0x2
 5846 0807 30       		.byte	0x30
 5847 0808 9F       		.byte	0x9f
 5848 0809 E2040000 		.4byte	.LVL72-.Ltext0
 5849 080d 82050000 		.4byte	.LVL74-.Ltext0
 5850 0811 0100     		.2byte	0x1
 5851 0813 50       		.byte	0x50
 5852 0814 82050000 		.4byte	.LVL74-.Ltext0
 5853 0818 90050000 		.4byte	.LFE69-.Ltext0
 5854 081c 0200     		.2byte	0x2
 5855 081e 30       		.byte	0x30
 5856 081f 9F       		.byte	0x9f
 5857 0820 00000000 		.4byte	0
 5858 0824 00000000 		.4byte	0
 5859              	.LLST55:
 5860 0828 BC080000 		.4byte	.LFB66-.Ltext0
 5861 082c BE080000 		.4byte	.LCFI21-.Ltext0
 5862 0830 0200     		.2byte	0x2
 5863 0832 7D       		.byte	0x7d
 5864 0833 00       		.sleb128 0
 5865 0834 BE080000 		.4byte	.LCFI21-.Ltext0
 5866 0838 7C090000 		.4byte	.LFE66-.Ltext0
 5867 083c 0200     		.2byte	0x2
 5868 083e 7D       		.byte	0x7d
 5869 083f 10       		.sleb128 16
 5870 0840 00000000 		.4byte	0
 5871 0844 00000000 		.4byte	0
 5872              	.LLST56:
 5873 0848 BC080000 		.4byte	.LVL117-.Ltext0
 5874 084c CF080000 		.4byte	.LVL118-1-.Ltext0
 5875 0850 0100     		.2byte	0x1
 5876 0852 50       		.byte	0x50
 5877 0853 CF080000 		.4byte	.LVL118-1-.Ltext0
 5878 0857 66090000 		.4byte	.LVL121-.Ltext0
 5879 085b 0100     		.2byte	0x1
 5880 085d 54       		.byte	0x54
 5881 085e 66090000 		.4byte	.LVL121-.Ltext0
 5882 0862 7C090000 		.4byte	.LFE66-.Ltext0
 5883 0866 0100     		.2byte	0x1
 5884 0868 50       		.byte	0x50
ARM GAS  /tmp/cceY5bqg.s 			page 154


 5885 0869 00000000 		.4byte	0
 5886 086d 00000000 		.4byte	0
 5887              	.LLST57:
 5888 0871 BC080000 		.4byte	.LVL117-.Ltext0
 5889 0875 D0080000 		.4byte	.LVL118-.Ltext0
 5890 0879 0200     		.2byte	0x2
 5891 087b 30       		.byte	0x30
 5892 087c 9F       		.byte	0x9f
 5893 087d D0080000 		.4byte	.LVL118-.Ltext0
 5894 0881 DE080000 		.4byte	.LVL119-.Ltext0
 5895 0885 0100     		.2byte	0x1
 5896 0887 50       		.byte	0x50
 5897 0888 66090000 		.4byte	.LVL121-.Ltext0
 5898 088c 7C090000 		.4byte	.LFE66-.Ltext0
 5899 0890 0200     		.2byte	0x2
 5900 0892 30       		.byte	0x30
 5901 0893 9F       		.byte	0x9f
 5902 0894 00000000 		.4byte	0
 5903 0898 00000000 		.4byte	0
 5904              	.LLST49:
 5905 089c BC070000 		.4byte	.LFB65-.Ltext0
 5906 08a0 BE070000 		.4byte	.LCFI20-.Ltext0
 5907 08a4 0200     		.2byte	0x2
 5908 08a6 7D       		.byte	0x7d
 5909 08a7 00       		.sleb128 0
 5910 08a8 BE070000 		.4byte	.LCFI20-.Ltext0
 5911 08ac BC080000 		.4byte	.LFE65-.Ltext0
 5912 08b0 0200     		.2byte	0x2
 5913 08b2 7D       		.byte	0x7d
 5914 08b3 10       		.sleb128 16
 5915 08b4 00000000 		.4byte	0
 5916 08b8 00000000 		.4byte	0
 5917              	.LLST50:
 5918 08bc BC070000 		.4byte	.LVL101-.Ltext0
 5919 08c0 D1070000 		.4byte	.LVL102-1-.Ltext0
 5920 08c4 0100     		.2byte	0x1
 5921 08c6 50       		.byte	0x50
 5922 08c7 D1070000 		.4byte	.LVL102-1-.Ltext0
 5923 08cb BC080000 		.4byte	.LFE65-.Ltext0
 5924 08cf 0100     		.2byte	0x1
 5925 08d1 54       		.byte	0x54
 5926 08d2 00000000 		.4byte	0
 5927 08d6 00000000 		.4byte	0
 5928              	.LLST51:
 5929 08da BC070000 		.4byte	.LVL101-.Ltext0
 5930 08de D8070000 		.4byte	.LVL103-.Ltext0
 5931 08e2 0200     		.2byte	0x2
 5932 08e4 30       		.byte	0x30
 5933 08e5 9F       		.byte	0x9f
 5934 08e6 D8070000 		.4byte	.LVL103-.Ltext0
 5935 08ea A8080000 		.4byte	.LVL114-.Ltext0
 5936 08ee 0100     		.2byte	0x1
 5937 08f0 50       		.byte	0x50
 5938 08f1 AC080000 		.4byte	.LVL115-.Ltext0
 5939 08f5 B2080000 		.4byte	.LVL116-.Ltext0
 5940 08f9 0100     		.2byte	0x1
 5941 08fb 50       		.byte	0x50
ARM GAS  /tmp/cceY5bqg.s 			page 155


 5942 08fc B2080000 		.4byte	.LVL116-.Ltext0
 5943 0900 BC080000 		.4byte	.LFE65-.Ltext0
 5944 0904 0200     		.2byte	0x2
 5945 0906 31       		.byte	0x31
 5946 0907 9F       		.byte	0x9f
 5947 0908 00000000 		.4byte	0
 5948 090c 00000000 		.4byte	0
 5949              	.LLST52:
 5950 0910 BC070000 		.4byte	.LVL101-.Ltext0
 5951 0914 12080000 		.4byte	.LVL105-.Ltext0
 5952 0918 0200     		.2byte	0x2
 5953 091a 30       		.byte	0x30
 5954 091b 9F       		.byte	0x9f
 5955 091c 12080000 		.4byte	.LVL105-.Ltext0
 5956 0920 3C080000 		.4byte	.LVL107-.Ltext0
 5957 0924 0100     		.2byte	0x1
 5958 0926 56       		.byte	0x56
 5959 0927 7A080000 		.4byte	.LVL110-.Ltext0
 5960 092b 7E080000 		.4byte	.LVL111-.Ltext0
 5961 092f 0200     		.2byte	0x2
 5962 0931 30       		.byte	0x30
 5963 0932 9F       		.byte	0x9f
 5964 0933 7E080000 		.4byte	.LVL111-.Ltext0
 5965 0937 90080000 		.4byte	.LVL112-.Ltext0
 5966 093b 0100     		.2byte	0x1
 5967 093d 56       		.byte	0x56
 5968 093e AC080000 		.4byte	.LVL115-.Ltext0
 5969 0942 BC080000 		.4byte	.LFE65-.Ltext0
 5970 0946 0200     		.2byte	0x2
 5971 0948 30       		.byte	0x30
 5972 0949 9F       		.byte	0x9f
 5973 094a 00000000 		.4byte	0
 5974 094e 00000000 		.4byte	0
 5975              	.LLST53:
 5976 0952 BC070000 		.4byte	.LVL101-.Ltext0
 5977 0956 06080000 		.4byte	.LVL104-.Ltext0
 5978 095a 0200     		.2byte	0x2
 5979 095c 30       		.byte	0x30
 5980 095d 9F       		.byte	0x9f
 5981 095e 06080000 		.4byte	.LVL104-.Ltext0
 5982 0962 A8080000 		.4byte	.LVL114-.Ltext0
 5983 0966 0100     		.2byte	0x1
 5984 0968 52       		.byte	0x52
 5985 0969 AC080000 		.4byte	.LVL115-.Ltext0
 5986 096d BC080000 		.4byte	.LFE65-.Ltext0
 5987 0971 0200     		.2byte	0x2
 5988 0973 30       		.byte	0x30
 5989 0974 9F       		.byte	0x9f
 5990 0975 00000000 		.4byte	0
 5991 0979 00000000 		.4byte	0
 5992              	.LLST54:
 5993 097d BC070000 		.4byte	.LVL101-.Ltext0
 5994 0981 54080000 		.4byte	.LVL108-.Ltext0
 5995 0985 0200     		.2byte	0x2
 5996 0987 30       		.byte	0x30
 5997 0988 9F       		.byte	0x9f
 5998 0989 54080000 		.4byte	.LVL108-.Ltext0
ARM GAS  /tmp/cceY5bqg.s 			page 156


 5999 098d 5C080000 		.4byte	.LVL109-.Ltext0
 6000 0991 0100     		.2byte	0x1
 6001 0993 51       		.byte	0x51
 6002 0994 7A080000 		.4byte	.LVL110-.Ltext0
 6003 0998 94080000 		.4byte	.LVL113-.Ltext0
 6004 099c 0200     		.2byte	0x2
 6005 099e 30       		.byte	0x30
 6006 099f 9F       		.byte	0x9f
 6007 09a0 AC080000 		.4byte	.LVL115-.Ltext0
 6008 09a4 BC080000 		.4byte	.LFE65-.Ltext0
 6009 09a8 0200     		.2byte	0x2
 6010 09aa 30       		.byte	0x30
 6011 09ab 9F       		.byte	0x9f
 6012 09ac 00000000 		.4byte	0
 6013 09b0 00000000 		.4byte	0
 6014              	.LLST30:
 6015 09b4 5C040000 		.4byte	.LFB87-.Ltext0
 6016 09b8 60040000 		.4byte	.LCFI13-.Ltext0
 6017 09bc 0200     		.2byte	0x2
 6018 09be 7D       		.byte	0x7d
 6019 09bf 00       		.sleb128 0
 6020 09c0 60040000 		.4byte	.LCFI13-.Ltext0
 6021 09c4 70040000 		.4byte	.LCFI14-.Ltext0
 6022 09c8 0200     		.2byte	0x2
 6023 09ca 7D       		.byte	0x7d
 6024 09cb 18       		.sleb128 24
 6025 09cc 70040000 		.4byte	.LCFI14-.Ltext0
 6026 09d0 72040000 		.4byte	.LCFI15-.Ltext0
 6027 09d4 0200     		.2byte	0x2
 6028 09d6 7D       		.byte	0x7d
 6029 09d7 10       		.sleb128 16
 6030 09d8 72040000 		.4byte	.LCFI15-.Ltext0
 6031 09dc CC040000 		.4byte	.LFE87-.Ltext0
 6032 09e0 0200     		.2byte	0x2
 6033 09e2 7D       		.byte	0x7d
 6034 09e3 18       		.sleb128 24
 6035 09e4 00000000 		.4byte	0
 6036 09e8 00000000 		.4byte	0
 6037              	.LLST31:
 6038 09ec 5C040000 		.4byte	.LVL62-.Ltext0
 6039 09f0 6C040000 		.4byte	.LVL63-.Ltext0
 6040 09f4 0100     		.2byte	0x1
 6041 09f6 50       		.byte	0x50
 6042 09f7 6C040000 		.4byte	.LVL63-.Ltext0
 6043 09fb 72040000 		.4byte	.LVL64-.Ltext0
 6044 09ff 0100     		.2byte	0x1
 6045 0a01 54       		.byte	0x54
 6046 0a02 72040000 		.4byte	.LVL64-.Ltext0
 6047 0a06 8D040000 		.4byte	.LVL65-1-.Ltext0
 6048 0a0a 0100     		.2byte	0x1
 6049 0a0c 50       		.byte	0x50
 6050 0a0d 8D040000 		.4byte	.LVL65-1-.Ltext0
 6051 0a11 BC040000 		.4byte	.LVL70-.Ltext0
 6052 0a15 0100     		.2byte	0x1
 6053 0a17 54       		.byte	0x54
 6054 0a18 BC040000 		.4byte	.LVL70-.Ltext0
 6055 0a1c CC040000 		.4byte	.LFE87-.Ltext0
ARM GAS  /tmp/cceY5bqg.s 			page 157


 6056 0a20 0100     		.2byte	0x1
 6057 0a22 50       		.byte	0x50
 6058 0a23 00000000 		.4byte	0
 6059 0a27 00000000 		.4byte	0
 6060              	.LLST32:
 6061 0a2b 5C040000 		.4byte	.LVL62-.Ltext0
 6062 0a2f 6C040000 		.4byte	.LVL63-.Ltext0
 6063 0a33 0200     		.2byte	0x2
 6064 0a35 30       		.byte	0x30
 6065 0a36 9F       		.byte	0x9f
 6066 0a37 72040000 		.4byte	.LVL64-.Ltext0
 6067 0a3b 90040000 		.4byte	.LVL66-.Ltext0
 6068 0a3f 0200     		.2byte	0x2
 6069 0a41 30       		.byte	0x30
 6070 0a42 9F       		.byte	0x9f
 6071 0a43 90040000 		.4byte	.LVL66-.Ltext0
 6072 0a47 BC040000 		.4byte	.LVL70-.Ltext0
 6073 0a4b 0100     		.2byte	0x1
 6074 0a4d 56       		.byte	0x56
 6075 0a4e BC040000 		.4byte	.LVL70-.Ltext0
 6076 0a52 CC040000 		.4byte	.LFE87-.Ltext0
 6077 0a56 0200     		.2byte	0x2
 6078 0a58 30       		.byte	0x30
 6079 0a59 9F       		.byte	0x9f
 6080 0a5a 00000000 		.4byte	0
 6081 0a5e 00000000 		.4byte	0
 6082              	.LLST33:
 6083 0a62 A4040000 		.4byte	.LVL68-.Ltext0
 6084 0a66 AA040000 		.4byte	.LVL69-.Ltext0
 6085 0a6a 0100     		.2byte	0x1
 6086 0a6c 54       		.byte	0x54
 6087 0a6d 00000000 		.4byte	0
 6088 0a71 00000000 		.4byte	0
 6089              	.LLST45:
 6090 0a75 78070000 		.4byte	.LFB88-.Ltext0
 6091 0a79 7A070000 		.4byte	.LCFI19-.Ltext0
 6092 0a7d 0200     		.2byte	0x2
 6093 0a7f 7D       		.byte	0x7d
 6094 0a80 00       		.sleb128 0
 6095 0a81 7A070000 		.4byte	.LCFI19-.Ltext0
 6096 0a85 BC070000 		.4byte	.LFE88-.Ltext0
 6097 0a89 0200     		.2byte	0x2
 6098 0a8b 7D       		.byte	0x7d
 6099 0a8c 10       		.sleb128 16
 6100 0a8d 00000000 		.4byte	0
 6101 0a91 00000000 		.4byte	0
 6102              	.LLST46:
 6103 0a95 78070000 		.4byte	.LVL93-.Ltext0
 6104 0a99 84070000 		.4byte	.LVL94-.Ltext0
 6105 0a9d 0100     		.2byte	0x1
 6106 0a9f 50       		.byte	0x50
 6107 0aa0 84070000 		.4byte	.LVL94-.Ltext0
 6108 0aa4 88070000 		.4byte	.LVL95-.Ltext0
 6109 0aa8 0100     		.2byte	0x1
 6110 0aaa 54       		.byte	0x54
 6111 0aab 88070000 		.4byte	.LVL95-.Ltext0
 6112 0aaf 93070000 		.4byte	.LVL96-1-.Ltext0
ARM GAS  /tmp/cceY5bqg.s 			page 158


 6113 0ab3 0100     		.2byte	0x1
 6114 0ab5 50       		.byte	0x50
 6115 0ab6 93070000 		.4byte	.LVL96-1-.Ltext0
 6116 0aba BC070000 		.4byte	.LFE88-.Ltext0
 6117 0abe 0100     		.2byte	0x1
 6118 0ac0 54       		.byte	0x54
 6119 0ac1 00000000 		.4byte	0
 6120 0ac5 00000000 		.4byte	0
 6121              	.LLST47:
 6122 0ac9 78070000 		.4byte	.LVL93-.Ltext0
 6123 0acd 84070000 		.4byte	.LVL94-.Ltext0
 6124 0ad1 0200     		.2byte	0x2
 6125 0ad3 30       		.byte	0x30
 6126 0ad4 9F       		.byte	0x9f
 6127 0ad5 88070000 		.4byte	.LVL95-.Ltext0
 6128 0ad9 96070000 		.4byte	.LVL97-.Ltext0
 6129 0add 0200     		.2byte	0x2
 6130 0adf 30       		.byte	0x30
 6131 0ae0 9F       		.byte	0x9f
 6132 0ae1 96070000 		.4byte	.LVL97-.Ltext0
 6133 0ae5 BC070000 		.4byte	.LFE88-.Ltext0
 6134 0ae9 0100     		.2byte	0x1
 6135 0aeb 55       		.byte	0x55
 6136 0aec 00000000 		.4byte	0
 6137 0af0 00000000 		.4byte	0
 6138              	.LLST48:
 6139 0af4 A8070000 		.4byte	.LVL99-.Ltext0
 6140 0af8 BA070000 		.4byte	.LVL100-.Ltext0
 6141 0afc 0100     		.2byte	0x1
 6142 0afe 54       		.byte	0x54
 6143 0aff 00000000 		.4byte	0
 6144 0b03 00000000 		.4byte	0
 6145              		.section	.debug_aranges,"",%progbits
 6146 0000 1C000000 		.4byte	0x1c
 6147 0004 0200     		.2byte	0x2
 6148 0006 00000000 		.4byte	.Ldebug_info0
 6149 000a 04       		.byte	0x4
 6150 000b 00       		.byte	0
 6151 000c 0000     		.2byte	0
 6152 000e 0000     		.2byte	0
 6153 0010 00000000 		.4byte	.Ltext0
 6154 0014 3A0A0000 		.4byte	.Letext0-.Ltext0
 6155 0018 00000000 		.4byte	0
 6156 001c 00000000 		.4byte	0
 6157              		.section	.debug_line,"",%progbits
 6158              	.Ldebug_line0:
 6159 0000 E5050000 		.section	.debug_str,"MS",%progbits,1
 6159      02008001 
 6159      00000201 
 6159      FB0E0D00 
 6159      01010101 
 6160              	.LASF2:
 6161 0000 73686F72 		.ascii	"short int\000"
 6161      7420696E 
 6161      7400
 6162              	.LASF96:
 6163 000a 57617463 		.ascii	"WatchdogNumber\000"
ARM GAS  /tmp/cceY5bqg.s 			page 159


 6163      68646F67 
 6163      4E756D62 
 6163      657200
 6164              	.LASF106:
 6165 0019 48414C5F 		.ascii	"HAL_TickFreqTypeDef\000"
 6165      5469636B 
 6165      46726571 
 6165      54797065 
 6165      44656600 
 6166              	.LASF139:
 6167 002d 436F6E76 		.ascii	"Conversion_Timeout_CPU_cycles\000"
 6167      65727369 
 6167      6F6E5F54 
 6167      696D656F 
 6167      75745F43 
 6168              	.LASF68:
 6169 004b 496E6974 		.ascii	"Init\000"
 6169      00
 6170              	.LASF61:
 6171 0050 444D415F 		.ascii	"DMA_InitTypeDef\000"
 6171      496E6974 
 6171      54797065 
 6171      44656600 
 6172              	.LASF0:
 6173 0060 7369676E 		.ascii	"signed char\000"
 6173      65642063 
 6173      68617200 
 6174              	.LASF4:
 6175 006c 5F5F7569 		.ascii	"__uint8_t\000"
 6175      6E74385F 
 6175      7400
 6176              	.LASF127:
 6177 0076 48414C5F 		.ascii	"HAL_ADC_IRQHandler\000"
 6177      4144435F 
 6177      49525148 
 6177      616E646C 
 6177      657200
 6178              	.LASF48:
 6179 0089 48414C5F 		.ascii	"HAL_BUSY\000"
 6179      42555359 
 6179      00
 6180              	.LASF44:
 6181 0092 46756E63 		.ascii	"FunctionalState\000"
 6181      74696F6E 
 6181      616C5374 
 6181      61746500 
 6182              	.LASF19:
 6183 00a2 41504250 		.ascii	"APBPrescTable\000"
 6183      72657363 
 6183      5461626C 
 6183      6500
 6184              	.LASF149:
 6185 00b0 746D705F 		.ascii	"tmp_sqr1\000"
 6185      73717231 
 6185      00
 6186              	.LASF97:
 6187 00b9 4144435F 		.ascii	"ADC_AnalogWDGConfTypeDef\000"
ARM GAS  /tmp/cceY5bqg.s 			page 160


 6187      416E616C 
 6187      6F675744 
 6187      47436F6E 
 6187      66547970 
 6188              	.LASF10:
 6189 00d2 6C6F6E67 		.ascii	"long long unsigned int\000"
 6189      206C6F6E 
 6189      6720756E 
 6189      7369676E 
 6189      65642069 
 6190              	.LASF80:
 6191 00e9 44617461 		.ascii	"DataAlign\000"
 6191      416C6967 
 6191      6E00
 6192              	.LASF86:
 6193 00f3 45787465 		.ascii	"ExternalTrigConv\000"
 6193      726E616C 
 6193      54726967 
 6193      436F6E76 
 6193      00
 6194              	.LASF16:
 6195 0104 49544D5F 		.ascii	"ITM_RxBuffer\000"
 6195      52784275 
 6195      66666572 
 6195      00
 6196              	.LASF62:
 6197 0111 48414C5F 		.ascii	"HAL_DMA_STATE_RESET\000"
 6197      444D415F 
 6197      53544154 
 6197      455F5245 
 6197      53455400 
 6198              	.LASF135:
 6199 0125 48414C5F 		.ascii	"HAL_ADC_PollForEvent\000"
 6199      4144435F 
 6199      506F6C6C 
 6199      466F7245 
 6199      76656E74 
 6200              	.LASF131:
 6201 013a 70446174 		.ascii	"pData\000"
 6201      6100
 6202              	.LASF117:
 6203 0140 48414C5F 		.ascii	"HAL_ADC_GetError\000"
 6203      4144435F 
 6203      47657445 
 6203      72726F72 
 6203      00
 6204              	.LASF138:
 6205 0151 48414C5F 		.ascii	"HAL_ADC_PollForConversion\000"
 6205      4144435F 
 6205      506F6C6C 
 6205      466F7243 
 6205      6F6E7665 
 6206              	.LASF130:
 6207 016b 48414C5F 		.ascii	"HAL_ADC_Start_DMA\000"
 6207      4144435F 
 6207      53746172 
 6207      745F444D 
ARM GAS  /tmp/cceY5bqg.s 			page 161


 6207      4100
 6208              	.LASF9:
 6209 017d 6C6F6E67 		.ascii	"long long int\000"
 6209      206C6F6E 
 6209      6720696E 
 6209      7400
 6210              	.LASF114:
 6211 018b 4144435F 		.ascii	"ADC_Enable\000"
 6211      456E6162 
 6211      6C6500
 6212              	.LASF73:
 6213 0196 58666572 		.ascii	"XferHalfCpltCallback\000"
 6213      48616C66 
 6213      43706C74 
 6213      43616C6C 
 6213      6261636B 
 6214              	.LASF152:
 6215 01ab 48414C5F 		.ascii	"HAL_DMA_Start_IT\000"
 6215      444D415F 
 6215      53746172 
 6215      745F4954 
 6215      00
 6216              	.LASF145:
 6217 01bc 48414C5F 		.ascii	"HAL_ADC_DeInit\000"
 6217      4144435F 
 6217      4465496E 
 6217      697400
 6218              	.LASF53:
 6219 01cb 48414C5F 		.ascii	"HAL_LockTypeDef\000"
 6219      4C6F636B 
 6219      54797065 
 6219      44656600 
 6220              	.LASF6:
 6221 01db 6C6F6E67 		.ascii	"long int\000"
 6221      20696E74 
 6221      00
 6222              	.LASF109:
 6223 01e4 4144435F 		.ascii	"ADC_DMAError\000"
 6223      444D4145 
 6223      72726F72 
 6223      00
 6224              	.LASF43:
 6225 01f1 454E4142 		.ascii	"ENABLE\000"
 6225      4C4500
 6226              	.LASF55:
 6227 01f8 50657269 		.ascii	"PeriphInc\000"
 6227      7068496E 
 6227      6300
 6228              	.LASF83:
 6229 0202 4E62724F 		.ascii	"NbrOfConversion\000"
 6229      66436F6E 
 6229      76657273 
 6229      696F6E00 
 6230              	.LASF85:
 6231 0212 4E62724F 		.ascii	"NbrOfDiscConversion\000"
 6231      66446973 
 6231      63436F6E 
ARM GAS  /tmp/cceY5bqg.s 			page 162


 6231      76657273 
 6231      696F6E00 
 6232              	.LASF150:
 6233 0226 48414C5F 		.ascii	"HAL_ADCEx_InjectedConvCpltCallback\000"
 6233      41444345 
 6233      785F496E 
 6233      6A656374 
 6233      6564436F 
 6234              	.LASF90:
 6235 0249 53616D70 		.ascii	"SamplingTime\000"
 6235      6C696E67 
 6235      54696D65 
 6235      00
 6236              	.LASF34:
 6237 0256 4144435F 		.ascii	"ADC_TypeDef\000"
 6237      54797065 
 6237      44656600 
 6238              	.LASF102:
 6239 0262 48414C5F 		.ascii	"HAL_TICK_FREQ_10HZ\000"
 6239      5449434B 
 6239      5F465245 
 6239      515F3130 
 6239      485A00
 6240              	.LASF136:
 6241 0275 4576656E 		.ascii	"EventType\000"
 6241      74547970 
 6241      6500
 6242              	.LASF78:
 6243 027f 4368616E 		.ascii	"ChannelIndex\000"
 6243      6E656C49 
 6243      6E646578 
 6243      00
 6244              	.LASF71:
 6245 028c 50617265 		.ascii	"Parent\000"
 6245      6E7400
 6246              	.LASF69:
 6247 0293 4C6F636B 		.ascii	"Lock\000"
 6247      00
 6248              	.LASF7:
 6249 0298 5F5F7569 		.ascii	"__uint32_t\000"
 6249      6E743332 
 6249      5F7400
 6250              	.LASF143:
 6251 02a3 48414C5F 		.ascii	"HAL_ADC_MspDeInit\000"
 6251      4144435F 
 6251      4D737044 
 6251      65496E69 
 6251      7400
 6252              	.LASF137:
 6253 02b5 54696D65 		.ascii	"Timeout\000"
 6253      6F757400 
 6254              	.LASF54:
 6255 02bd 44697265 		.ascii	"Direction\000"
 6255      6374696F 
 6255      6E00
 6256              	.LASF92:
 6257 02c7 57617463 		.ascii	"WatchdogMode\000"
ARM GAS  /tmp/cceY5bqg.s 			page 163


 6257      68646F67 
 6257      4D6F6465 
 6257      00
 6258              	.LASF81:
 6259 02d4 5363616E 		.ascii	"ScanConvMode\000"
 6259      436F6E76 
 6259      4D6F6465 
 6259      00
 6260              	.LASF95:
 6261 02e1 4C6F7754 		.ascii	"LowThreshold\000"
 6261      68726573 
 6261      686F6C64 
 6261      00
 6262              	.LASF142:
 6263 02ee 48414C5F 		.ascii	"HAL_ADC_Start\000"
 6263      4144435F 
 6263      53746172 
 6263      7400
 6264              	.LASF49:
 6265 02fc 48414C5F 		.ascii	"HAL_TIMEOUT\000"
 6265      54494D45 
 6265      4F555400 
 6266              	.LASF40:
 6267 0308 444D415F 		.ascii	"DMA_TypeDef\000"
 6267      54797065 
 6267      44656600 
 6268              	.LASF11:
 6269 0314 756E7369 		.ascii	"unsigned int\000"
 6269      676E6564 
 6269      20696E74 
 6269      00
 6270              	.LASF91:
 6271 0321 4144435F 		.ascii	"ADC_ChannelConfTypeDef\000"
 6271      4368616E 
 6271      6E656C43 
 6271      6F6E6654 
 6271      79706544 
 6272              	.LASF17:
 6273 0338 53797374 		.ascii	"SystemCoreClock\000"
 6273      656D436F 
 6273      7265436C 
 6273      6F636B00 
 6274              	.LASF108:
 6275 0348 75775469 		.ascii	"uwTickFreq\000"
 6275      636B4672 
 6275      657100
 6276              	.LASF147:
 6277 0353 746D705F 		.ascii	"tmp_cr1\000"
 6277      63723100 
 6278              	.LASF148:
 6279 035b 746D705F 		.ascii	"tmp_cr2\000"
 6279      63723200 
 6280              	.LASF36:
 6281 0363 43504152 		.ascii	"CPAR\000"
 6281      00
 6282              	.LASF8:
 6283 0368 6C6F6E67 		.ascii	"long unsigned int\000"
ARM GAS  /tmp/cceY5bqg.s 			page 164


 6283      20756E73 
 6283      69676E65 
 6283      6420696E 
 6283      7400
 6284              	.LASF104:
 6285 037a 48414C5F 		.ascii	"HAL_TICK_FREQ_1KHZ\000"
 6285      5449434B 
 6285      5F465245 
 6285      515F314B 
 6285      485A00
 6286              	.LASF46:
 6287 038d 48414C5F 		.ascii	"HAL_OK\000"
 6287      4F4B00
 6288              	.LASF134:
 6289 0394 48414C5F 		.ascii	"HAL_ADC_Start_IT\000"
 6289      4144435F 
 6289      53746172 
 6289      745F4954 
 6289      00
 6290              	.LASF3:
 6291 03a5 73686F72 		.ascii	"short unsigned int\000"
 6291      7420756E 
 6291      7369676E 
 6291      65642069 
 6291      6E7400
 6292              	.LASF123:
 6293 03b8 746D705F 		.ascii	"tmp_hal_status\000"
 6293      68616C5F 
 6293      73746174 
 6293      757300
 6294              	.LASF77:
 6295 03c7 446D6142 		.ascii	"DmaBaseAddress\000"
 6295      61736541 
 6295      64647265 
 6295      737300
 6296              	.LASF76:
 6297 03d6 4572726F 		.ascii	"ErrorCode\000"
 6297      72436F64 
 6297      6500
 6298              	.LASF118:
 6299 03e0 48414C5F 		.ascii	"HAL_ADC_GetState\000"
 6299      4144435F 
 6299      47657453 
 6299      74617465 
 6299      00
 6300              	.LASF58:
 6301 03f1 4D656D44 		.ascii	"MemDataAlignment\000"
 6301      61746141 
 6301      6C69676E 
 6301      6D656E74 
 6301      00
 6302              	.LASF116:
 6303 0402 77616974 		.ascii	"wait_loop_index\000"
 6303      5F6C6F6F 
 6303      705F696E 
 6303      64657800 
 6304              	.LASF94:
ARM GAS  /tmp/cceY5bqg.s 			page 165


 6305 0412 48696768 		.ascii	"HighThreshold\000"
 6305      54687265 
 6305      73686F6C 
 6305      6400
 6306              	.LASF50:
 6307 0420 48414C5F 		.ascii	"HAL_StatusTypeDef\000"
 6307      53746174 
 6307      75735479 
 6307      70654465 
 6307      6600
 6308              	.LASF144:
 6309 0432 48414C5F 		.ascii	"HAL_ADC_MspInit\000"
 6309      4144435F 
 6309      4D737049 
 6309      6E697400 
 6310              	.LASF151:
 6311 0442 48414C5F 		.ascii	"HAL_DMA_Abort\000"
 6311      444D415F 
 6311      41626F72 
 6311      7400
 6312              	.LASF124:
 6313 0450 48414C5F 		.ascii	"HAL_ADC_LevelOutOfWindowCallback\000"
 6313      4144435F 
 6313      4C657665 
 6313      6C4F7574 
 6313      4F665769 
 6314              	.LASF18:
 6315 0471 41484250 		.ascii	"AHBPrescTable\000"
 6315      72657363 
 6315      5461626C 
 6315      6500
 6316              	.LASF141:
 6317 047f 48414C5F 		.ascii	"HAL_ADC_Stop\000"
 6317      4144435F 
 6317      53746F70 
 6317      00
 6318              	.LASF158:
 6319 048c 4144435F 		.ascii	"ADC_DMAConvCplt\000"
 6319      444D4143 
 6319      6F6E7643 
 6319      706C7400 
 6320              	.LASF120:
 6321 049c 416E616C 		.ascii	"AnalogWDGConfig\000"
 6321      6F675744 
 6321      47436F6E 
 6321      66696700 
 6322              	.LASF63:
 6323 04ac 48414C5F 		.ascii	"HAL_DMA_STATE_READY\000"
 6323      444D415F 
 6323      53544154 
 6323      455F5245 
 6323      41445900 
 6324              	.LASF133:
 6325 04c0 48414C5F 		.ascii	"HAL_ADC_Stop_IT\000"
 6325      4144435F 
 6325      53746F70 
 6325      5F495400 
ARM GAS  /tmp/cceY5bqg.s 			page 166


 6326              	.LASF111:
 6327 04d0 68646D61 		.ascii	"hdma\000"
 6327      00
 6328              	.LASF22:
 6329 04d5 4A4F4652 		.ascii	"JOFR1\000"
 6329      3100
 6330              	.LASF23:
 6331 04db 4A4F4652 		.ascii	"JOFR2\000"
 6331      3200
 6332              	.LASF24:
 6333 04e1 4A4F4652 		.ascii	"JOFR3\000"
 6333      3300
 6334              	.LASF25:
 6335 04e7 4A4F4652 		.ascii	"JOFR4\000"
 6335      3400
 6336              	.LASF29:
 6337 04ed 4A535152 		.ascii	"JSQR\000"
 6337      00
 6338              	.LASF15:
 6339 04f2 73697A65 		.ascii	"sizetype\000"
 6339      74797065 
 6339      00
 6340              	.LASF153:
 6341 04fb 48414C5F 		.ascii	"HAL_GetTick\000"
 6341      47657454 
 6341      69636B00 
 6342              	.LASF156:
 6343 0507 7372632F 		.ascii	"src/stm32f1xx_hal_adc.c\000"
 6343      73746D33 
 6343      32663178 
 6343      785F6861 
 6343      6C5F6164 
 6344              	.LASF45:
 6345 051f 6C6F6E67 		.ascii	"long double\000"
 6345      20646F75 
 6345      626C6500 
 6346              	.LASF52:
 6347 052b 48414C5F 		.ascii	"HAL_LOCKED\000"
 6347      4C4F434B 
 6347      454400
 6348              	.LASF128:
 6349 0536 48414C5F 		.ascii	"HAL_ADC_GetValue\000"
 6349      4144435F 
 6349      47657456 
 6349      616C7565 
 6349      00
 6350              	.LASF31:
 6351 0547 4A445232 		.ascii	"JDR2\000"
 6351      00
 6352              	.LASF79:
 6353 054c 444D415F 		.ascii	"DMA_HandleTypeDef\000"
 6353      48616E64 
 6353      6C655479 
 6353      70654465 
 6353      6600
 6354              	.LASF74:
 6355 055e 58666572 		.ascii	"XferErrorCallback\000"
ARM GAS  /tmp/cceY5bqg.s 			page 167


 6355      4572726F 
 6355      7243616C 
 6355      6C626163 
 6355      6B00
 6356              	.LASF93:
 6357 0570 49544D6F 		.ascii	"ITMode\000"
 6357      646500
 6358              	.LASF20:
 6359 0577 534D5052 		.ascii	"SMPR1\000"
 6359      3100
 6360              	.LASF21:
 6361 057d 534D5052 		.ascii	"SMPR2\000"
 6361      3200
 6362              	.LASF140:
 6363 0583 436F6E76 		.ascii	"Conversion_Timeout_CPU_cycles_max\000"
 6363      65727369 
 6363      6F6E5F54 
 6363      696D656F 
 6363      75745F43 
 6364              	.LASF105:
 6365 05a5 48414C5F 		.ascii	"HAL_TICK_FREQ_DEFAULT\000"
 6365      5449434B 
 6365      5F465245 
 6365      515F4445 
 6365      4641554C 
 6366              	.LASF26:
 6367 05bb 53515231 		.ascii	"SQR1\000"
 6367      00
 6368              	.LASF27:
 6369 05c0 53515232 		.ascii	"SQR2\000"
 6369      00
 6370              	.LASF28:
 6371 05c5 53515233 		.ascii	"SQR3\000"
 6371      00
 6372              	.LASF121:
 6373 05ca 48414C5F 		.ascii	"HAL_ADC_ConfigChannel\000"
 6373      4144435F 
 6373      436F6E66 
 6373      69674368 
 6373      616E6E65 
 6374              	.LASF38:
 6375 05e0 444D415F 		.ascii	"DMA_Channel_TypeDef\000"
 6375      4368616E 
 6375      6E656C5F 
 6375      54797065 
 6375      44656600 
 6376              	.LASF89:
 6377 05f4 52616E6B 		.ascii	"Rank\000"
 6377      00
 6378              	.LASF67:
 6379 05f9 496E7374 		.ascii	"Instance\000"
 6379      616E6365 
 6379      00
 6380              	.LASF119:
 6381 0602 48414C5F 		.ascii	"HAL_ADC_AnalogWDGConfig\000"
 6381      4144435F 
 6381      416E616C 
ARM GAS  /tmp/cceY5bqg.s 			page 168


 6381      6F675744 
 6381      47436F6E 
 6382              	.LASF41:
 6383 061a 52455345 		.ascii	"RESET\000"
 6383      5400
 6384              	.LASF88:
 6385 0620 4368616E 		.ascii	"Channel\000"
 6385      6E656C00 
 6386              	.LASF110:
 6387 0628 4144435F 		.ascii	"ADC_DMAHalfConvCplt\000"
 6387      444D4148 
 6387      616C6643 
 6387      6F6E7643 
 6387      706C7400 
 6388              	.LASF13:
 6389 063c 696E7433 		.ascii	"int32_t\000"
 6389      325F7400 
 6390              	.LASF1:
 6391 0644 756E7369 		.ascii	"unsigned char\000"
 6391      676E6564 
 6391      20636861 
 6391      7200
 6392              	.LASF66:
 6393 0652 48414C5F 		.ascii	"HAL_DMA_StateTypeDef\000"
 6393      444D415F 
 6393      53746174 
 6393      65547970 
 6393      65446566 
 6394              	.LASF154:
 6395 0667 48414C5F 		.ascii	"HAL_RCCEx_GetPeriphCLKFreq\000"
 6395      52434345 
 6395      785F4765 
 6395      74506572 
 6395      69706843 
 6396              	.LASF64:
 6397 0682 48414C5F 		.ascii	"HAL_DMA_STATE_BUSY\000"
 6397      444D415F 
 6397      53544154 
 6397      455F4255 
 6397      535900
 6398              	.LASF115:
 6399 0695 7469636B 		.ascii	"tickstart\000"
 6399      73746172 
 6399      7400
 6400              	.LASF56:
 6401 069f 4D656D49 		.ascii	"MemInc\000"
 6401      6E6300
 6402              	.LASF155:
 6403 06a6 474E5520 		.ascii	"GNU C11 6.3.1 20170620 -mcpu=cortex-m3 -mthumb -g -"
 6403      43313120 
 6403      362E332E 
 6403      31203230 
 6403      31373036 
 6404 06d9 67647761 		.ascii	"gdwarf-2 -Os -fomit-frame-pointer\000"
 6404      72662D32 
 6404      202D4F73 
 6404      202D666F 
ARM GAS  /tmp/cceY5bqg.s 			page 169


 6404      6D69742D 
 6405              	.LASF42:
 6406 06fb 44495341 		.ascii	"DISABLE\000"
 6406      424C4500 
 6407              	.LASF125:
 6408 0703 48414C5F 		.ascii	"HAL_ADC_ConvHalfCpltCallback\000"
 6408      4144435F 
 6408      436F6E76 
 6408      48616C66 
 6408      43706C74 
 6409              	.LASF126:
 6410 0720 48414C5F 		.ascii	"HAL_ADC_ConvCpltCallback\000"
 6410      4144435F 
 6410      436F6E76 
 6410      43706C74 
 6410      43616C6C 
 6411              	.LASF87:
 6412 0739 4144435F 		.ascii	"ADC_InitTypeDef\000"
 6412      496E6974 
 6412      54797065 
 6412      44656600 
 6413              	.LASF98:
 6414 0749 5F5F444D 		.ascii	"__DMA_HandleTypeDef\000"
 6414      415F4861 
 6414      6E646C65 
 6414      54797065 
 6414      44656600 
 6415              	.LASF14:
 6416 075d 75696E74 		.ascii	"uint32_t\000"
 6416      33325F74 
 6416      00
 6417              	.LASF113:
 6418 0766 4144435F 		.ascii	"ADC_ConversionStop_Disable\000"
 6418      436F6E76 
 6418      65727369 
 6418      6F6E5374 
 6418      6F705F44 
 6419              	.LASF47:
 6420 0781 48414C5F 		.ascii	"HAL_ERROR\000"
 6420      4552524F 
 6420      5200
 6421              	.LASF82:
 6422 078b 436F6E74 		.ascii	"ContinuousConvMode\000"
 6422      696E756F 
 6422      7573436F 
 6422      6E764D6F 
 6422      646500
 6423              	.LASF39:
 6424 079e 49464352 		.ascii	"IFCR\000"
 6424      00
 6425              	.LASF107:
 6426 07a3 75775469 		.ascii	"uwTickPrio\000"
 6426      636B5072 
 6426      696F00
 6427              	.LASF70:
 6428 07ae 53746174 		.ascii	"State\000"
 6428      6500
ARM GAS  /tmp/cceY5bqg.s 			page 170


 6429              	.LASF59:
 6430 07b4 4D6F6465 		.ascii	"Mode\000"
 6430      00
 6431              	.LASF157:
 6432 07b9 2F686F6D 		.ascii	"/home/berndoj/git/stm32tctst/lib/stm32f1hal\000"
 6432      652F6265 
 6432      726E646F 
 6432      6A2F6769 
 6432      742F7374 
 6433              	.LASF101:
 6434 07e5 4144435F 		.ascii	"ADC_HandleTypeDef\000"
 6434      48616E64 
 6434      6C655479 
 6434      70654465 
 6434      6600
 6435              	.LASF129:
 6436 07f7 48414C5F 		.ascii	"HAL_ADC_Stop_DMA\000"
 6436      4144435F 
 6436      53746F70 
 6436      5F444D41 
 6436      00
 6437              	.LASF159:
 6438 0808 48414C5F 		.ascii	"HAL_ADC_ErrorCallback\000"
 6438      4144435F 
 6438      4572726F 
 6438      7243616C 
 6438      6C626163 
 6439              	.LASF103:
 6440 081e 48414C5F 		.ascii	"HAL_TICK_FREQ_100HZ\000"
 6440      5449434B 
 6440      5F465245 
 6440      515F3130 
 6440      30485A00 
 6441              	.LASF5:
 6442 0832 5F5F696E 		.ascii	"__int32_t\000"
 6442      7433325F 
 6442      7400
 6443              	.LASF100:
 6444 083c 444D415F 		.ascii	"DMA_Handle\000"
 6444      48616E64 
 6444      6C6500
 6445              	.LASF132:
 6446 0847 4C656E67 		.ascii	"Length\000"
 6446      746800
 6447              	.LASF112:
 6448 084e 68616463 		.ascii	"hadc\000"
 6448      00
 6449              	.LASF146:
 6450 0853 48414C5F 		.ascii	"HAL_ADC_Init\000"
 6450      4144435F 
 6450      496E6974 
 6450      00
 6451              	.LASF57:
 6452 0860 50657269 		.ascii	"PeriphDataAlignment\000"
 6452      70684461 
 6452      7461416C 
 6452      69676E6D 
ARM GAS  /tmp/cceY5bqg.s 			page 171


 6452      656E7400 
 6453              	.LASF84:
 6454 0874 44697363 		.ascii	"DiscontinuousConvMode\000"
 6454      6F6E7469 
 6454      6E756F75 
 6454      73436F6E 
 6454      764D6F64 
 6455              	.LASF122:
 6456 088a 73436F6E 		.ascii	"sConfig\000"
 6456      66696700 
 6457              	.LASF35:
 6458 0892 434E4454 		.ascii	"CNDTR\000"
 6458      5200
 6459              	.LASF37:
 6460 0898 434D4152 		.ascii	"CMAR\000"
 6460      00
 6461              	.LASF65:
 6462 089d 48414C5F 		.ascii	"HAL_DMA_STATE_TIMEOUT\000"
 6462      444D415F 
 6462      53544154 
 6462      455F5449 
 6462      4D454F55 
 6463              	.LASF60:
 6464 08b3 5072696F 		.ascii	"Priority\000"
 6464      72697479 
 6464      00
 6465              	.LASF12:
 6466 08bc 75696E74 		.ascii	"uint8_t\000"
 6466      385F7400 
 6467              	.LASF30:
 6468 08c4 4A445231 		.ascii	"JDR1\000"
 6468      00
 6469              	.LASF32:
 6470 08c9 4A445233 		.ascii	"JDR3\000"
 6470      00
 6471              	.LASF33:
 6472 08ce 4A445234 		.ascii	"JDR4\000"
 6472      00
 6473              	.LASF51:
 6474 08d3 48414C5F 		.ascii	"HAL_UNLOCKED\000"
 6474      554E4C4F 
 6474      434B4544 
 6474      00
 6475              	.LASF99:
 6476 08e0 5F5F4144 		.ascii	"__ADC_HandleTypeDef\000"
 6476      435F4861 
 6476      6E646C65 
 6476      54797065 
 6476      44656600 
 6477              	.LASF75:
 6478 08f4 58666572 		.ascii	"XferAbortCallback\000"
 6478      41626F72 
 6478      7443616C 
 6478      6C626163 
 6478      6B00
 6479              	.LASF72:
 6480 0906 58666572 		.ascii	"XferCpltCallback\000"
ARM GAS  /tmp/cceY5bqg.s 			page 172


 6480      43706C74 
 6480      43616C6C 
 6480      6261636B 
 6480      00
 6481              		.ident	"GCC: (15:6.3.1+svn253039-1build1) 6.3.1 20170620"
ARM GAS  /tmp/cceY5bqg.s 			page 173


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_adc.c
     /tmp/cceY5bqg.s:69     .text:0000000000000000 $t
     /tmp/cceY5bqg.s:76     .text:0000000000000000 HAL_ADC_MspInit
     /tmp/cceY5bqg.s:93     .text:0000000000000002 HAL_ADC_MspDeInit
     /tmp/cceY5bqg.s:110    .text:0000000000000004 HAL_ADC_PollForConversion
     /tmp/cceY5bqg.s:348    .text:0000000000000128 $d
     /tmp/cceY5bqg.s:357    .text:0000000000000140 $t
     /tmp/cceY5bqg.s:364    .text:0000000000000140 HAL_ADC_PollForEvent
     /tmp/cceY5bqg.s:447    .text:000000000000018e HAL_ADC_GetValue
     /tmp/cceY5bqg.s:471    .text:0000000000000194 HAL_ADC_ConvCpltCallback
     /tmp/cceY5bqg.s:488    .text:0000000000000196 ADC_DMAConvCplt
     /tmp/cceY5bqg.s:565    .text:00000000000001e4 HAL_ADC_ConvHalfCpltCallback
     /tmp/cceY5bqg.s:582    .text:00000000000001e6 ADC_DMAHalfConvCplt
     /tmp/cceY5bqg.s:611    .text:00000000000001f0 HAL_ADC_LevelOutOfWindowCallback
     /tmp/cceY5bqg.s:628    .text:00000000000001f2 HAL_ADC_IRQHandler
     /tmp/cceY5bqg.s:795    .text:00000000000002de HAL_ADC_ErrorCallback
     /tmp/cceY5bqg.s:814    .text:00000000000002e0 ADC_DMAError
     /tmp/cceY5bqg.s:852    .text:00000000000002fa HAL_ADC_ConfigChannel
     /tmp/cceY5bqg.s:1033   .text:00000000000003f8 $d
     /tmp/cceY5bqg.s:1039   .text:0000000000000404 $t
     /tmp/cceY5bqg.s:1046   .text:0000000000000404 HAL_ADC_AnalogWDGConfig
     /tmp/cceY5bqg.s:1113   .text:0000000000000450 $d
     /tmp/cceY5bqg.s:1117   .text:0000000000000454 $t
     /tmp/cceY5bqg.s:1124   .text:0000000000000454 HAL_ADC_GetState
     /tmp/cceY5bqg.s:1147   .text:0000000000000458 HAL_ADC_GetError
     /tmp/cceY5bqg.s:1170   .text:000000000000045c ADC_Enable
     /tmp/cceY5bqg.s:1275   .text:00000000000004c4 $d
     /tmp/cceY5bqg.s:1280   .text:00000000000004cc $t
     /tmp/cceY5bqg.s:1287   .text:00000000000004cc HAL_ADC_Start
     /tmp/cceY5bqg.s:1419   .text:0000000000000588 $d
     /tmp/cceY5bqg.s:1424   .text:0000000000000590 $t
     /tmp/cceY5bqg.s:1431   .text:0000000000000590 HAL_ADC_Start_IT
     /tmp/cceY5bqg.s:1567   .text:0000000000000654 $d
     /tmp/cceY5bqg.s:1572   .text:000000000000065c $t
     /tmp/cceY5bqg.s:1579   .text:000000000000065c HAL_ADC_Start_DMA
     /tmp/cceY5bqg.s:1768   .text:0000000000000764 $d
     /tmp/cceY5bqg.s:1776   .text:0000000000000778 $t
     /tmp/cceY5bqg.s:1783   .text:0000000000000778 ADC_ConversionStop_Disable
     /tmp/cceY5bqg.s:1861   .text:00000000000007bc HAL_ADC_Init
     /tmp/cceY5bqg.s:2046   .text:00000000000008b4 $d
     /tmp/cceY5bqg.s:2051   .text:00000000000008bc $t
     /tmp/cceY5bqg.s:2058   .text:00000000000008bc HAL_ADC_DeInit
     /tmp/cceY5bqg.s:2186   .text:000000000000096c $d
     /tmp/cceY5bqg.s:2193   .text:000000000000097c $t
     /tmp/cceY5bqg.s:2200   .text:000000000000097c HAL_ADC_Stop
     /tmp/cceY5bqg.s:2258   .text:00000000000009b0 HAL_ADC_Stop_IT
     /tmp/cceY5bqg.s:2321   .text:00000000000009ee HAL_ADC_Stop_DMA
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RCCEx_GetPeriphCLKFreq
SystemCoreClock
HAL_ADCEx_InjectedConvCpltCallback
HAL_DMA_Start_IT
HAL_DMA_Abort
ARM GAS  /tmp/cceY5bqg.s 			page 174


