ARM GAS  /tmp/ccNjU3LR.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"stm32f1xx_hal_rcc.c"
  12              	@ GNU C11 (15:6.3.1+svn253039-1build1) version 6.3.1 20170620 (arm-none-eabi)
  13              	@	compiled by GNU C version 7.2.0, GMP version 6.1.2, MPFR version 4.0.1-rc1, MPC version 1.1.0, is
  14              	@ warning: MPFR header version 4.0.1-rc1 differs from library version 4.0.1.
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I ./inc -I ./inc/Legacy -I ../cmsisstm32f1xx/inc
  17              	@ -I ../cmsiscore/inc -imultilib thumb/v7-m -D__USES_INITFINI__
  18              	@ -D STM32F103x6 -D RUN_FROM_FLASH=1 -D __c src/stm32f1xx_hal_rcc.c
  19              	@ -mcpu=cortex-m3 -mthumb -auxbase-strip bin/stm32f1xx_hal_rcc.o -g
  20              	@ -gdwarf-2 -Os -Wall -fomit-frame-pointer -fverbose-asm
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffunction-cse -fgcse
  32              	@ -fgcse-lm -fgnu-runtime -fgnu-unique -fguess-branch-probability
  33              	@ -fhoist-adjacent-loads -fident -fif-conversion -fif-conversion2
  34              	@ -findirect-inlining -finline -finline-atomics -finline-functions
  35              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  36              	@ -fipa-cp-alignment -fipa-icf -fipa-icf-functions -fipa-icf-variables
  37              	@ -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra
  38              	@ -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  39              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  40              	@ -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  41              	@ -fmath-errno -fmerge-constants -fmerge-debug-strings
  42              	@ -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  43              	@ -fpartial-inlining -fpeephole -fpeephole2 -fplt -fprefetch-loop-arrays
  44              	@ -freg-struct-return -freorder-blocks -freorder-functions
  45              	@ -frerun-cse-after-loop -fsched-critical-path-heuristic
  46              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  47              	@ -fsched-last-insn-heuristic -fsched-pressure -fsched-rank-heuristic
  48              	@ -fsched-spec -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  49              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  50              	@ -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types
  51              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstrict-aliasing
  52              	@ -fstrict-overflow -fstrict-volatile-bitfields -fsync-libcalls
  53              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  54              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  55              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  56              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  57              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
ARM GAS  /tmp/ccNjU3LR.s 			page 2


  58              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  59              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  60              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  61              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  62              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  63              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  64              	@ -munaligned-access -mvectorize-with-neon-quad
  65              	
  66              		.text
  67              	.Ltext0:
  68              		.cfi_sections	.debug_frame
  69              		.align	1
  70              		.global	HAL_RCC_DeInit
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu softvfp
  75              		.type	HAL_RCC_DeInit, %function
  76              	HAL_RCC_DeInit:
  77              	.LFB65:
  78              		.file 1 "src/stm32f1xx_hal_rcc.c"
   1:src/stm32f1xx_hal_rcc.c **** /**
   2:src/stm32f1xx_hal_rcc.c ****   ******************************************************************************
   3:src/stm32f1xx_hal_rcc.c ****   * @file    stm32f1xx_hal_rcc.c
   4:src/stm32f1xx_hal_rcc.c ****   * @author  MCD Application Team
   5:src/stm32f1xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   6:src/stm32f1xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following
   7:src/stm32f1xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
   8:src/stm32f1xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
   9:src/stm32f1xx_hal_rcc.c ****   *           + Peripheral Control functions
  10:src/stm32f1xx_hal_rcc.c ****   *
  11:src/stm32f1xx_hal_rcc.c ****   @verbatim
  12:src/stm32f1xx_hal_rcc.c ****   ==============================================================================
  13:src/stm32f1xx_hal_rcc.c ****                       ##### RCC specific features #####
  14:src/stm32f1xx_hal_rcc.c ****   ==============================================================================
  15:src/stm32f1xx_hal_rcc.c ****     [..]
  16:src/stm32f1xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator
  17:src/stm32f1xx_hal_rcc.c ****       (HSI 8MHz) with Flash 0 wait state, Flash prefetch buffer is enabled,
  18:src/stm32f1xx_hal_rcc.c ****       and all peripherals are off except internal SRAM, Flash and JTAG.
  19:src/stm32f1xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) buses;
  20:src/stm32f1xx_hal_rcc.c ****           all peripherals mapped on these buses are running at HSI speed.
  21:src/stm32f1xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  22:src/stm32f1xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  23:src/stm32f1xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  24:src/stm32f1xx_hal_rcc.c ****     [..] Once the device started from reset, the user application has to:
  25:src/stm32f1xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  26:src/stm32f1xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  27:src/stm32f1xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings
  28:src/stm32f1xx_hal_rcc.c ****       (+) Configure the AHB and APB buses prescalers
  29:src/stm32f1xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  30:src/stm32f1xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals whose clocks are not
  31:src/stm32f1xx_hal_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS)
  32:src/stm32f1xx_hal_rcc.c **** 
  33:src/stm32f1xx_hal_rcc.c ****                       ##### RCC Limitations #####
  34:src/stm32f1xx_hal_rcc.c ****   ==============================================================================
  35:src/stm32f1xx_hal_rcc.c ****     [..]
  36:src/stm32f1xx_hal_rcc.c ****       A delay between an RCC peripheral clock enable and the effective peripheral
ARM GAS  /tmp/ccNjU3LR.s 			page 3


  37:src/stm32f1xx_hal_rcc.c ****       enabling should be taken into account in order to manage the peripheral read/write
  38:src/stm32f1xx_hal_rcc.c ****       from/to registers.
  39:src/stm32f1xx_hal_rcc.c ****       (+) This delay depends on the peripheral mapping.
  40:src/stm32f1xx_hal_rcc.c ****         (++) AHB & APB peripherals, 1 dummy read is necessary
  41:src/stm32f1xx_hal_rcc.c **** 
  42:src/stm32f1xx_hal_rcc.c ****     [..]
  43:src/stm32f1xx_hal_rcc.c ****       Workarounds:
  44:src/stm32f1xx_hal_rcc.c ****       (#) For AHB & APB peripherals, a dummy read to the peripheral register has been
  45:src/stm32f1xx_hal_rcc.c ****           inserted in each __HAL_RCC_PPP_CLK_ENABLE() macro.
  46:src/stm32f1xx_hal_rcc.c **** 
  47:src/stm32f1xx_hal_rcc.c ****   @endverbatim
  48:src/stm32f1xx_hal_rcc.c ****   ******************************************************************************
  49:src/stm32f1xx_hal_rcc.c ****   * @attention
  50:src/stm32f1xx_hal_rcc.c ****   *
  51:src/stm32f1xx_hal_rcc.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  52:src/stm32f1xx_hal_rcc.c ****   * All rights reserved.</center></h2>
  53:src/stm32f1xx_hal_rcc.c ****   *
  54:src/stm32f1xx_hal_rcc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  55:src/stm32f1xx_hal_rcc.c ****   * the "License"; You may not use this file except in compliance with the
  56:src/stm32f1xx_hal_rcc.c ****   * License. You may obtain a copy of the License at:
  57:src/stm32f1xx_hal_rcc.c ****   *                        opensource.org/licenses/BSD-3-Clause
  58:src/stm32f1xx_hal_rcc.c ****   *
  59:src/stm32f1xx_hal_rcc.c ****   ******************************************************************************
  60:src/stm32f1xx_hal_rcc.c ****   */
  61:src/stm32f1xx_hal_rcc.c **** 
  62:src/stm32f1xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  63:src/stm32f1xx_hal_rcc.c **** #include "stm32f1xx_hal.h"
  64:src/stm32f1xx_hal_rcc.c **** 
  65:src/stm32f1xx_hal_rcc.c **** /** @addtogroup STM32F1xx_HAL_Driver
  66:src/stm32f1xx_hal_rcc.c ****   * @{
  67:src/stm32f1xx_hal_rcc.c ****   */
  68:src/stm32f1xx_hal_rcc.c **** 
  69:src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC RCC
  70:src/stm32f1xx_hal_rcc.c **** * @brief RCC HAL module driver
  71:src/stm32f1xx_hal_rcc.c ****   * @{
  72:src/stm32f1xx_hal_rcc.c ****   */
  73:src/stm32f1xx_hal_rcc.c **** 
  74:src/stm32f1xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  75:src/stm32f1xx_hal_rcc.c **** 
  76:src/stm32f1xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  77:src/stm32f1xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
  78:src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Constants RCC Private Constants
  79:src/stm32f1xx_hal_rcc.c ****  * @{
  80:src/stm32f1xx_hal_rcc.c ****  */
  81:src/stm32f1xx_hal_rcc.c **** /**
  82:src/stm32f1xx_hal_rcc.c ****   * @}
  83:src/stm32f1xx_hal_rcc.c ****   */
  84:src/stm32f1xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
  85:src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Macros RCC Private Macros
  86:src/stm32f1xx_hal_rcc.c ****   * @{
  87:src/stm32f1xx_hal_rcc.c ****   */
  88:src/stm32f1xx_hal_rcc.c **** 
  89:src/stm32f1xx_hal_rcc.c **** #define MCO1_CLK_ENABLE()     __HAL_RCC_GPIOA_CLK_ENABLE()
  90:src/stm32f1xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
  91:src/stm32f1xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8
  92:src/stm32f1xx_hal_rcc.c **** 
  93:src/stm32f1xx_hal_rcc.c **** /**
ARM GAS  /tmp/ccNjU3LR.s 			page 4


  94:src/stm32f1xx_hal_rcc.c ****   * @}
  95:src/stm32f1xx_hal_rcc.c ****   */
  96:src/stm32f1xx_hal_rcc.c **** 
  97:src/stm32f1xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
  98:src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Variables RCC Private Variables
  99:src/stm32f1xx_hal_rcc.c ****   * @{
 100:src/stm32f1xx_hal_rcc.c ****   */
 101:src/stm32f1xx_hal_rcc.c **** /**
 102:src/stm32f1xx_hal_rcc.c ****   * @}
 103:src/stm32f1xx_hal_rcc.c ****   */
 104:src/stm32f1xx_hal_rcc.c **** 
 105:src/stm32f1xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 106:src/stm32f1xx_hal_rcc.c **** static void RCC_Delay(uint32_t mdelay);
 107:src/stm32f1xx_hal_rcc.c **** 
 108:src/stm32f1xx_hal_rcc.c **** /* Exported functions --------------------------------------------------------*/
 109:src/stm32f1xx_hal_rcc.c **** 
 110:src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions RCC Exported Functions
 111:src/stm32f1xx_hal_rcc.c ****   * @{
 112:src/stm32f1xx_hal_rcc.c ****   */
 113:src/stm32f1xx_hal_rcc.c **** 
 114:src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions
 115:src/stm32f1xx_hal_rcc.c ****   *  @brief    Initialization and Configuration functions
 116:src/stm32f1xx_hal_rcc.c ****   *
 117:src/stm32f1xx_hal_rcc.c ****   @verbatim
 118:src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 119:src/stm32f1xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 120:src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 121:src/stm32f1xx_hal_rcc.c ****     [..]
 122:src/stm32f1xx_hal_rcc.c ****       This section provides functions allowing to configure the internal/external oscillators
 123:src/stm32f1xx_hal_rcc.c ****       (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System buses clocks (SYSCLK, AHB, APB1
 124:src/stm32f1xx_hal_rcc.c ****       and APB2).
 125:src/stm32f1xx_hal_rcc.c **** 
 126:src/stm32f1xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 127:src/stm32f1xx_hal_rcc.c ****       (#) HSI (high-speed internal), 8 MHz factory-trimmed RC used directly or through
 128:src/stm32f1xx_hal_rcc.c ****           the PLL as System clock source.
 129:src/stm32f1xx_hal_rcc.c ****       (#) LSI (low-speed internal), ~40 KHz low consumption RC used as IWDG and/or RTC
 130:src/stm32f1xx_hal_rcc.c ****           clock source.
 131:src/stm32f1xx_hal_rcc.c **** 
 132:src/stm32f1xx_hal_rcc.c ****       (#) HSE (high-speed external), 4 to 24 MHz (STM32F100xx) or 4 to 16 MHz (STM32F101x/STM32F102
 133:src/stm32f1xx_hal_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 134:src/stm32f1xx_hal_rcc.c **** 
 135:src/stm32f1xx_hal_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.
 136:src/stm32f1xx_hal_rcc.c **** 
 137:src/stm32f1xx_hal_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring different output clocks:
 138:src/stm32f1xx_hal_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 72 MHz for STM
 139:src/stm32f1xx_hal_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz)
 140:src/stm32f1xx_hal_rcc.c **** 
 141:src/stm32f1xx_hal_rcc.c ****       (#) CSS (Clock security system), once enable using the macro __HAL_RCC_CSS_ENABLE()
 142:src/stm32f1xx_hal_rcc.c ****           and if a HSE clock failure occurs(HSE used directly or through PLL as System
 143:src/stm32f1xx_hal_rcc.c ****           clock source), the System clocks automatically switched to HSI and an interrupt
 144:src/stm32f1xx_hal_rcc.c ****           is generated if enabled. The interrupt is linked to the Cortex-M3 NMI
 145:src/stm32f1xx_hal_rcc.c ****           (Non-Maskable Interrupt) exception vector.
 146:src/stm32f1xx_hal_rcc.c **** 
 147:src/stm32f1xx_hal_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output SYSCLK, HSI,
 148:src/stm32f1xx_hal_rcc.c ****           HSE or PLL clock (divided by 2) on PA8 pin + PLL2CLK, PLL3CLK/2, PLL3CLK and XTI for STM3
 149:src/stm32f1xx_hal_rcc.c **** 
 150:src/stm32f1xx_hal_rcc.c ****     [..] System, AHB and APB buses clocks configuration
ARM GAS  /tmp/ccNjU3LR.s 			page 5


 151:src/stm32f1xx_hal_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 152:src/stm32f1xx_hal_rcc.c ****           HSE and PLL.
 153:src/stm32f1xx_hal_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable
 154:src/stm32f1xx_hal_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped
 155:src/stm32f1xx_hal_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived
 156:src/stm32f1xx_hal_rcc.c ****           from AHB clock through configurable prescalers and used to clock
 157:src/stm32f1xx_hal_rcc.c ****           the peripherals mapped on these buses. You can use
 158:src/stm32f1xx_hal_rcc.c ****           "@ref HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.
 159:src/stm32f1xx_hal_rcc.c **** 
 160:src/stm32f1xx_hal_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 161:src/stm32f1xx_hal_rcc.c ****           (+@) RTC: RTC clock can be derived either from the LSI, LSE or HSE clock
 162:src/stm32f1xx_hal_rcc.c ****               divided by 128.
 163:src/stm32f1xx_hal_rcc.c ****           (+@) USB OTG FS and RTC: USB OTG FS require a frequency equal to 48 MHz
 164:src/stm32f1xx_hal_rcc.c ****               to work correctly. This clock is derived of the main PLL through PLL Multiplier.
 165:src/stm32f1xx_hal_rcc.c ****           (+@) I2S interface on STM32F105x/STM32F107x can be derived from PLL3CLK
 166:src/stm32f1xx_hal_rcc.c ****           (+@) IWDG clock which is always the LSI clock.
 167:src/stm32f1xx_hal_rcc.c **** 
 168:src/stm32f1xx_hal_rcc.c ****       (#) For STM32F10xxx, the maximum frequency of the SYSCLK and HCLK/PCLK2 is 72 MHz, PCLK1 36 M
 169:src/stm32f1xx_hal_rcc.c ****           For STM32F100xx, the maximum frequency of the SYSCLK and HCLK/PCLK1/PCLK2 is 24 MHz.
 170:src/stm32f1xx_hal_rcc.c ****           Depending on the SYSCLK frequency, the flash latency should be adapted accordingly.
 171:src/stm32f1xx_hal_rcc.c ****   @endverbatim
 172:src/stm32f1xx_hal_rcc.c ****   * @{
 173:src/stm32f1xx_hal_rcc.c ****   */
 174:src/stm32f1xx_hal_rcc.c **** 
 175:src/stm32f1xx_hal_rcc.c **** /*
 176:src/stm32f1xx_hal_rcc.c ****   Additional consideration on the SYSCLK based on Latency settings:
 177:src/stm32f1xx_hal_rcc.c ****         +-----------------------------------------------+
 178:src/stm32f1xx_hal_rcc.c ****         | Latency       | SYSCLK clock frequency (MHz)  |
 179:src/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 180:src/stm32f1xx_hal_rcc.c ****         |0WS(1CPU cycle)|       0 < SYSCLK <= 24        |
 181:src/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 182:src/stm32f1xx_hal_rcc.c ****         |1WS(2CPU cycle)|      24 < SYSCLK <= 48        |
 183:src/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 184:src/stm32f1xx_hal_rcc.c ****         |2WS(3CPU cycle)|      48 < SYSCLK <= 72        |
 185:src/stm32f1xx_hal_rcc.c ****         +-----------------------------------------------+
 186:src/stm32f1xx_hal_rcc.c ****   */
 187:src/stm32f1xx_hal_rcc.c **** 
 188:src/stm32f1xx_hal_rcc.c **** /**
 189:src/stm32f1xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 190:src/stm32f1xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 191:src/stm32f1xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 192:src/stm32f1xx_hal_rcc.c ****   *            - HSE, PLL, PLL2 and PLL3 are OFF
 193:src/stm32f1xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 194:src/stm32f1xx_hal_rcc.c ****   *            - CSS and MCO1 OFF
 195:src/stm32f1xx_hal_rcc.c ****   *            - All interrupts disabled
 196:src/stm32f1xx_hal_rcc.c ****   *            - All flags are cleared
 197:src/stm32f1xx_hal_rcc.c ****   * @note   This function does not modify the configuration of the
 198:src/stm32f1xx_hal_rcc.c ****   *            - Peripheral clocks
 199:src/stm32f1xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks
 200:src/stm32f1xx_hal_rcc.c ****   * @retval HAL_StatusTypeDef
 201:src/stm32f1xx_hal_rcc.c ****   */
 202:src/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_DeInit(void)
 203:src/stm32f1xx_hal_rcc.c **** {
  79              		.loc 1 203 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccNjU3LR.s 			page 6


  83 0000 70B5     		push	{r4, r5, r6, lr}	@
  84              	.LCFI0:
  85              		.cfi_def_cfa_offset 16
  86              		.cfi_offset 4, -16
  87              		.cfi_offset 5, -12
  88              		.cfi_offset 6, -8
  89              		.cfi_offset 14, -4
 204:src/stm32f1xx_hal_rcc.c ****   uint32_t tickstart;
 205:src/stm32f1xx_hal_rcc.c **** 
 206:src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 207:src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
  90              		.loc 1 207 0
  91 0002 FFF7FEFF 		bl	HAL_GetTick	@
  92              	.LVL0:
  93 0006 0546     		mov	r5, r0	@ tickstart,
  94              	.LVL1:
 208:src/stm32f1xx_hal_rcc.c **** 
 209:src/stm32f1xx_hal_rcc.c ****   /* Set HSION bit */
 210:src/stm32f1xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSION);
  95              		.loc 1 210 0
  96 0008 2F4C     		ldr	r4, .L14	@ tmp145,
  97 000a 2368     		ldr	r3, [r4]	@ _10, MEM[(struct RCC_TypeDef *)1073876992B].CR
  98 000c 43F00103 		orr	r3, r3, #1	@ _11, _10,
  99 0010 2360     		str	r3, [r4]	@ _11, MEM[(struct RCC_TypeDef *)1073876992B].CR
 100              	.LVL2:
 101              	.L2:
 211:src/stm32f1xx_hal_rcc.c **** 
 212:src/stm32f1xx_hal_rcc.c ****   /* Wait till HSI is ready */
 213:src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 102              		.loc 1 213 0
 103 0012 2368     		ldr	r3, [r4]	@ _13, MEM[(struct RCC_TypeDef *)1073876992B].CR
 104 0014 9B07     		lsls	r3, r3, #30	@, _13,
 105 0016 3BD5     		bpl	.L4	@,
 214:src/stm32f1xx_hal_rcc.c ****   {
 215:src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 216:src/stm32f1xx_hal_rcc.c ****     {
 217:src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 218:src/stm32f1xx_hal_rcc.c ****     }
 219:src/stm32f1xx_hal_rcc.c ****   }
 220:src/stm32f1xx_hal_rcc.c **** 
 221:src/stm32f1xx_hal_rcc.c ****   /* Set HSITRIM bits to the reset value */
 222:src/stm32f1xx_hal_rcc.c ****   MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 106              		.loc 1 222 0
 107 0018 2368     		ldr	r3, [r4]	@ _18, MEM[(struct RCC_TypeDef *)1073876992B].CR
 223:src/stm32f1xx_hal_rcc.c **** 
 224:src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 225:src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 226:src/stm32f1xx_hal_rcc.c **** 
 227:src/stm32f1xx_hal_rcc.c ****   /* Reset CFGR register */
 228:src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
 229:src/stm32f1xx_hal_rcc.c **** 
 230:src/stm32f1xx_hal_rcc.c ****   /* Wait till clock switch is ready */
 231:src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 232:src/stm32f1xx_hal_rcc.c ****   {
 233:src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 108              		.loc 1 233 0
 109 001a 41F28836 		movw	r6, #5000	@ tmp183,
ARM GAS  /tmp/ccNjU3LR.s 			page 7


 222:src/stm32f1xx_hal_rcc.c **** 
 110              		.loc 1 222 0
 111 001e 23F0F803 		bic	r3, r3, #248	@ tmp151, _18,
 112 0022 43F08003 		orr	r3, r3, #128	@ _20, tmp151,
 113 0026 2360     		str	r3, [r4]	@ _20, MEM[(struct RCC_TypeDef *)1073876992B].CR
 225:src/stm32f1xx_hal_rcc.c **** 
 114              		.loc 1 225 0
 115 0028 FFF7FEFF 		bl	HAL_GetTick	@
 116              	.LVL3:
 228:src/stm32f1xx_hal_rcc.c **** 
 117              		.loc 1 228 0
 118 002c 0023     		movs	r3, #0	@ tmp154,
 225:src/stm32f1xx_hal_rcc.c **** 
 119              		.loc 1 225 0
 120 002e 0546     		mov	r5, r0	@ tickstart,
 121              	.LVL4:
 228:src/stm32f1xx_hal_rcc.c **** 
 122              		.loc 1 228 0
 123 0030 6360     		str	r3, [r4, #4]	@ tmp154, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 124              	.LVL5:
 125              	.L5:
 231:src/stm32f1xx_hal_rcc.c ****   {
 126              		.loc 1 231 0
 127 0032 6368     		ldr	r3, [r4, #4]	@ _25, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 128 0034 13F00C0F 		tst	r3, #12	@ _25,
 129 0038 32D1     		bne	.L7	@,
 234:src/stm32f1xx_hal_rcc.c ****     {
 235:src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 236:src/stm32f1xx_hal_rcc.c ****     }
 237:src/stm32f1xx_hal_rcc.c ****   }
 238:src/stm32f1xx_hal_rcc.c **** 
 239:src/stm32f1xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 240:src/stm32f1xx_hal_rcc.c ****   SystemCoreClock = HSI_VALUE;
 130              		.loc 1 240 0
 131 003a 244A     		ldr	r2, .L14+4	@ tmp160,
 132 003c 244B     		ldr	r3, .L14+8	@ tmp159,
 133 003e 1A60     		str	r2, [r3]	@ tmp160, SystemCoreClock
 241:src/stm32f1xx_hal_rcc.c **** 
 242:src/stm32f1xx_hal_rcc.c ****   /* Adapt Systick interrupt period */
 243:src/stm32f1xx_hal_rcc.c ****   if (HAL_InitTick(uwTickPrio) != HAL_OK)
 134              		.loc 1 243 0
 135 0040 244B     		ldr	r3, .L14+12	@ tmp161,
 136 0042 1868     		ldr	r0, [r3]	@, uwTickPrio
 137 0044 FFF7FEFF 		bl	HAL_InitTick	@
 138              	.LVL6:
 139 0048 0546     		mov	r5, r0	@ <retval>,
 140              	.LVL7:
 141 004a 0028     		cmp	r0, #0	@ <retval>
 142 004c 3AD1     		bne	.L12	@
 244:src/stm32f1xx_hal_rcc.c ****   {
 245:src/stm32f1xx_hal_rcc.c ****     return HAL_ERROR;
 246:src/stm32f1xx_hal_rcc.c ****   }
 247:src/stm32f1xx_hal_rcc.c **** 
 248:src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 249:src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 143              		.loc 1 249 0
 144 004e FFF7FEFF 		bl	HAL_GetTick	@
ARM GAS  /tmp/ccNjU3LR.s 			page 8


 145              	.LVL8:
 146 0052 0646     		mov	r6, r0	@ tickstart,
 147              	.LVL9:
 250:src/stm32f1xx_hal_rcc.c **** 
 251:src/stm32f1xx_hal_rcc.c ****   /* Second step is to clear PLLON bit */
 252:src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 148              		.loc 1 252 0
 149 0054 2368     		ldr	r3, [r4]	@ _36, MEM[(struct RCC_TypeDef *)1073876992B].CR
 150 0056 23F08073 		bic	r3, r3, #16777216	@ _37, _36,
 151 005a 2360     		str	r3, [r4]	@ _37, MEM[(struct RCC_TypeDef *)1073876992B].CR
 152              	.LVL10:
 153              	.L8:
 253:src/stm32f1xx_hal_rcc.c **** 
 254:src/stm32f1xx_hal_rcc.c ****   /* Wait till PLL is disabled */
 255:src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 154              		.loc 1 255 0
 155 005c 2368     		ldr	r3, [r4]	@ _39, MEM[(struct RCC_TypeDef *)1073876992B].CR
 156 005e 13F00073 		ands	r3, r3, #33554432	@ tmp167, _39,
 157 0062 23D1     		bne	.L9	@,
 256:src/stm32f1xx_hal_rcc.c ****   {
 257:src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 258:src/stm32f1xx_hal_rcc.c ****     {
 259:src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 260:src/stm32f1xx_hal_rcc.c ****     }
 261:src/stm32f1xx_hal_rcc.c ****   }
 262:src/stm32f1xx_hal_rcc.c **** 
 263:src/stm32f1xx_hal_rcc.c ****   /* Ensure to reset PLLSRC and PLLMUL bits */
 264:src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
 158              		.loc 1 264 0
 159 0064 6360     		str	r3, [r4, #4]	@ tmp167, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 265:src/stm32f1xx_hal_rcc.c **** 
 266:src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 267:src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 160              		.loc 1 267 0
 161 0066 FFF7FEFF 		bl	HAL_GetTick	@
 162              	.LVL11:
 163 006a 0646     		mov	r6, r0	@ tickstart,
 164              	.LVL12:
 268:src/stm32f1xx_hal_rcc.c **** 
 269:src/stm32f1xx_hal_rcc.c ****   /* Reset HSEON & CSSON bits */
 270:src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 165              		.loc 1 270 0
 166 006c 2368     		ldr	r3, [r4]	@ _47, MEM[(struct RCC_TypeDef *)1073876992B].CR
 167 006e 23F41023 		bic	r3, r3, #589824	@ _48, _47,
 168 0072 2360     		str	r3, [r4]	@ _48, MEM[(struct RCC_TypeDef *)1073876992B].CR
 169              	.LVL13:
 170              	.L10:
 271:src/stm32f1xx_hal_rcc.c **** 
 272:src/stm32f1xx_hal_rcc.c ****   /* Wait till HSE is disabled */
 273:src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 171              		.loc 1 273 0
 172 0074 2368     		ldr	r3, [r4]	@ _50, MEM[(struct RCC_TypeDef *)1073876992B].CR
 173 0076 13F40033 		ands	r3, r3, #131072	@ tmp174, _50,
 174 007a 1DD1     		bne	.L11	@,
 274:src/stm32f1xx_hal_rcc.c ****   {
 275:src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 276:src/stm32f1xx_hal_rcc.c ****     {
ARM GAS  /tmp/ccNjU3LR.s 			page 9


 277:src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 278:src/stm32f1xx_hal_rcc.c ****     }
 279:src/stm32f1xx_hal_rcc.c ****   }
 280:src/stm32f1xx_hal_rcc.c **** 
 281:src/stm32f1xx_hal_rcc.c ****   /* Reset HSEBYP bit */
 282:src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 175              		.loc 1 282 0
 176 007c 2268     		ldr	r2, [r4]	@ _55, MEM[(struct RCC_TypeDef *)1073876992B].CR
 177 007e 22F48022 		bic	r2, r2, #262144	@ _56, _55,
 178 0082 2260     		str	r2, [r4]	@ _56, MEM[(struct RCC_TypeDef *)1073876992B].CR
 283:src/stm32f1xx_hal_rcc.c **** 
 284:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_PLL2_SUPPORT)
 285:src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 286:src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 287:src/stm32f1xx_hal_rcc.c **** 
 288:src/stm32f1xx_hal_rcc.c ****   /* Clear PLL2ON bit */
 289:src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 290:src/stm32f1xx_hal_rcc.c **** 
 291:src/stm32f1xx_hal_rcc.c ****   /* Wait till PLL2 is disabled */
 292:src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != RESET)
 293:src/stm32f1xx_hal_rcc.c ****   {
 294:src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 295:src/stm32f1xx_hal_rcc.c ****     {
 296:src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 297:src/stm32f1xx_hal_rcc.c ****     }
 298:src/stm32f1xx_hal_rcc.c ****   }
 299:src/stm32f1xx_hal_rcc.c **** #endif /* RCC_PLL2_SUPPORT */
 300:src/stm32f1xx_hal_rcc.c **** 
 301:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_PLLI2S_SUPPORT)
 302:src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 303:src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 304:src/stm32f1xx_hal_rcc.c **** 
 305:src/stm32f1xx_hal_rcc.c ****   /* Clear PLL3ON bit */
 306:src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 307:src/stm32f1xx_hal_rcc.c **** 
 308:src/stm32f1xx_hal_rcc.c ****   /* Wait till PLL3 is disabled */
 309:src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != RESET)
 310:src/stm32f1xx_hal_rcc.c ****   {
 311:src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 312:src/stm32f1xx_hal_rcc.c ****     {
 313:src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 314:src/stm32f1xx_hal_rcc.c ****     }
 315:src/stm32f1xx_hal_rcc.c ****   }
 316:src/stm32f1xx_hal_rcc.c **** #endif /* RCC_PLLI2S_SUPPORT */
 317:src/stm32f1xx_hal_rcc.c **** 
 318:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
 319:src/stm32f1xx_hal_rcc.c ****   /* Reset CFGR2 register */
 320:src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR2);
 321:src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1 */
 322:src/stm32f1xx_hal_rcc.c **** 
 323:src/stm32f1xx_hal_rcc.c ****   /* Reset all CSR flags */
 324:src/stm32f1xx_hal_rcc.c ****   SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 179              		.loc 1 324 0
 180 0084 626A     		ldr	r2, [r4, #36]	@ _58, MEM[(struct RCC_TypeDef *)1073876992B].CSR
 181 0086 42F08072 		orr	r2, r2, #16777216	@ _59, _58,
 182 008a 6262     		str	r2, [r4, #36]	@ _59, MEM[(struct RCC_TypeDef *)1073876992B].CSR
 325:src/stm32f1xx_hal_rcc.c **** 
ARM GAS  /tmp/ccNjU3LR.s 			page 10


 326:src/stm32f1xx_hal_rcc.c ****   /* Disable all interrupts */
 327:src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CIR);
 183              		.loc 1 327 0
 184 008c A360     		str	r3, [r4, #8]	@ tmp174, MEM[(struct RCC_TypeDef *)1073876992B].CIR
 328:src/stm32f1xx_hal_rcc.c **** 
 329:src/stm32f1xx_hal_rcc.c ****   return HAL_OK;
 185              		.loc 1 329 0
 186 008e 05E0     		b	.L3	@
 187              	.LVL14:
 188              	.L4:
 215:src/stm32f1xx_hal_rcc.c ****     {
 189              		.loc 1 215 0
 190 0090 FFF7FEFF 		bl	HAL_GetTick	@
 191              	.LVL15:
 192 0094 401B     		subs	r0, r0, r5	@ tmp147,, tickstart
 193 0096 0228     		cmp	r0, #2	@ tmp147,
 194 0098 BBD9     		bls	.L2	@,
 195              	.LVL16:
 196              	.L6:
 217:src/stm32f1xx_hal_rcc.c ****     }
 197              		.loc 1 217 0
 198 009a 0325     		movs	r5, #3	@ <retval>,
 199              	.L3:
 330:src/stm32f1xx_hal_rcc.c **** }
 200              		.loc 1 330 0
 201 009c 2846     		mov	r0, r5	@, <retval>
 202 009e 70BD     		pop	{r4, r5, r6, pc}	@
 203              	.LVL17:
 204              	.L7:
 233:src/stm32f1xx_hal_rcc.c ****     {
 205              		.loc 1 233 0
 206 00a0 FFF7FEFF 		bl	HAL_GetTick	@
 207              	.LVL18:
 208 00a4 401B     		subs	r0, r0, r5	@ tmp155,, tickstart
 209 00a6 B042     		cmp	r0, r6	@ tmp155, tmp183
 210 00a8 C3D9     		bls	.L5	@,
 211 00aa F6E7     		b	.L6	@
 212              	.LVL19:
 213              	.L9:
 257:src/stm32f1xx_hal_rcc.c ****     {
 214              		.loc 1 257 0
 215 00ac FFF7FEFF 		bl	HAL_GetTick	@
 216              	.LVL20:
 217 00b0 801B     		subs	r0, r0, r6	@ tmp165,, tickstart
 218 00b2 0228     		cmp	r0, #2	@ tmp165,
 219 00b4 D2D9     		bls	.L8	@,
 220 00b6 F0E7     		b	.L6	@
 221              	.L11:
 275:src/stm32f1xx_hal_rcc.c ****     {
 222              		.loc 1 275 0
 223 00b8 FFF7FEFF 		bl	HAL_GetTick	@
 224              	.LVL21:
 225 00bc 801B     		subs	r0, r0, r6	@ tmp172,, tickstart
 226 00be 6428     		cmp	r0, #100	@ tmp172,
 227 00c0 D8D9     		bls	.L10	@,
 228 00c2 EAE7     		b	.L6	@
 229              	.LVL22:
ARM GAS  /tmp/ccNjU3LR.s 			page 11


 230              	.L12:
 245:src/stm32f1xx_hal_rcc.c ****   }
 231              		.loc 1 245 0
 232 00c4 0125     		movs	r5, #1	@ <retval>,
 233 00c6 E9E7     		b	.L3	@
 234              	.L15:
 235              		.align	2
 236              	.L14:
 237 00c8 00100240 		.word	1073876992
 238 00cc 00127A00 		.word	8000000
 239 00d0 00000000 		.word	SystemCoreClock
 240 00d4 00000000 		.word	uwTickPrio
 241              		.cfi_endproc
 242              	.LFE65:
 243              		.size	HAL_RCC_DeInit, .-HAL_RCC_DeInit
 244              		.align	1
 245              		.global	HAL_RCC_OscConfig
 246              		.syntax unified
 247              		.thumb
 248              		.thumb_func
 249              		.fpu softvfp
 250              		.type	HAL_RCC_OscConfig, %function
 251              	HAL_RCC_OscConfig:
 252              	.LFB66:
 331:src/stm32f1xx_hal_rcc.c **** 
 332:src/stm32f1xx_hal_rcc.c **** /**
 333:src/stm32f1xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 334:src/stm32f1xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 335:src/stm32f1xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
 336:src/stm32f1xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 337:src/stm32f1xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 338:src/stm32f1xx_hal_rcc.c ****   * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB 
 339:src/stm32f1xx_hal_rcc.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 340:src/stm32f1xx_hal_rcc.c ****   *         supported by this macro. User should request a transition to LSE Off
 341:src/stm32f1xx_hal_rcc.c ****   *         first and then LSE On or LSE Bypass.
 342:src/stm32f1xx_hal_rcc.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 343:src/stm32f1xx_hal_rcc.c ****   *         supported by this macro. User should request a transition to HSE Off
 344:src/stm32f1xx_hal_rcc.c ****   *         first and then HSE On or HSE Bypass.
 345:src/stm32f1xx_hal_rcc.c ****   * @retval HAL status
 346:src/stm32f1xx_hal_rcc.c ****   */
 347:src/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 348:src/stm32f1xx_hal_rcc.c **** {
 253              		.loc 1 348 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 8
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257              	.LVL23:
 258 00d8 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}	@
 259              	.LCFI1:
 260              		.cfi_def_cfa_offset 32
 261              		.cfi_offset 4, -24
 262              		.cfi_offset 5, -20
 263              		.cfi_offset 6, -16
 264              		.cfi_offset 7, -12
 265              		.cfi_offset 8, -8
 266              		.cfi_offset 14, -4
 349:src/stm32f1xx_hal_rcc.c ****   uint32_t tickstart;
ARM GAS  /tmp/ccNjU3LR.s 			page 12


 350:src/stm32f1xx_hal_rcc.c ****   uint32_t pll_config;
 351:src/stm32f1xx_hal_rcc.c **** 
 352:src/stm32f1xx_hal_rcc.c ****   /* Check Null pointer */
 353:src/stm32f1xx_hal_rcc.c ****   if (RCC_OscInitStruct == NULL)
 267              		.loc 1 353 0
 268 00dc 0546     		mov	r5, r0	@ RCC_OscInitStruct, RCC_OscInitStruct
 269 00de 08B9     		cbnz	r0, .L17	@ RCC_OscInitStruct,
 270              	.LVL24:
 271              	.L84:
 354:src/stm32f1xx_hal_rcc.c ****   {
 355:src/stm32f1xx_hal_rcc.c ****     return HAL_ERROR;
 356:src/stm32f1xx_hal_rcc.c ****   }
 357:src/stm32f1xx_hal_rcc.c **** 
 358:src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 359:src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 360:src/stm32f1xx_hal_rcc.c **** 
 361:src/stm32f1xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/
 362:src/stm32f1xx_hal_rcc.c ****   if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 363:src/stm32f1xx_hal_rcc.c ****   {
 364:src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 365:src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 366:src/stm32f1xx_hal_rcc.c **** 
 367:src/stm32f1xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowe
 368:src/stm32f1xx_hal_rcc.c ****     if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 369:src/stm32f1xx_hal_rcc.c ****         || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL
 370:src/stm32f1xx_hal_rcc.c ****     {
 371:src/stm32f1xx_hal_rcc.c ****       if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE
 372:src/stm32f1xx_hal_rcc.c ****       {
 373:src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 374:src/stm32f1xx_hal_rcc.c ****       }
 375:src/stm32f1xx_hal_rcc.c ****     }
 376:src/stm32f1xx_hal_rcc.c ****     else
 377:src/stm32f1xx_hal_rcc.c ****     {
 378:src/stm32f1xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 379:src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 380:src/stm32f1xx_hal_rcc.c **** 
 381:src/stm32f1xx_hal_rcc.c **** 
 382:src/stm32f1xx_hal_rcc.c ****       /* Check the HSE State */
 383:src/stm32f1xx_hal_rcc.c ****       if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 384:src/stm32f1xx_hal_rcc.c ****       {
 385:src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 386:src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 387:src/stm32f1xx_hal_rcc.c **** 
 388:src/stm32f1xx_hal_rcc.c ****         /* Wait till HSE is ready */
 389:src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 390:src/stm32f1xx_hal_rcc.c ****         {
 391:src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 392:src/stm32f1xx_hal_rcc.c ****           {
 393:src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 394:src/stm32f1xx_hal_rcc.c ****           }
 395:src/stm32f1xx_hal_rcc.c ****         }
 396:src/stm32f1xx_hal_rcc.c ****       }
 397:src/stm32f1xx_hal_rcc.c ****       else
 398:src/stm32f1xx_hal_rcc.c ****       {
 399:src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 400:src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 401:src/stm32f1xx_hal_rcc.c **** 
ARM GAS  /tmp/ccNjU3LR.s 			page 13


 402:src/stm32f1xx_hal_rcc.c ****         /* Wait till HSE is disabled */
 403:src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 404:src/stm32f1xx_hal_rcc.c ****         {
 405:src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 406:src/stm32f1xx_hal_rcc.c ****           {
 407:src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 408:src/stm32f1xx_hal_rcc.c ****           }
 409:src/stm32f1xx_hal_rcc.c ****         }
 410:src/stm32f1xx_hal_rcc.c ****       }
 411:src/stm32f1xx_hal_rcc.c ****     }
 412:src/stm32f1xx_hal_rcc.c ****   }
 413:src/stm32f1xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/
 414:src/stm32f1xx_hal_rcc.c ****   if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 415:src/stm32f1xx_hal_rcc.c ****   {
 416:src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 417:src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 418:src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 419:src/stm32f1xx_hal_rcc.c **** 
 420:src/stm32f1xx_hal_rcc.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 421:src/stm32f1xx_hal_rcc.c ****     if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 422:src/stm32f1xx_hal_rcc.c ****         || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL
 423:src/stm32f1xx_hal_rcc.c ****     {
 424:src/stm32f1xx_hal_rcc.c ****       /* When HSI is used as system clock it will not disabled */
 425:src/stm32f1xx_hal_rcc.c ****       if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI
 426:src/stm32f1xx_hal_rcc.c ****       {
 427:src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 428:src/stm32f1xx_hal_rcc.c ****       }
 429:src/stm32f1xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 430:src/stm32f1xx_hal_rcc.c ****       else
 431:src/stm32f1xx_hal_rcc.c ****       {
 432:src/stm32f1xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 433:src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 434:src/stm32f1xx_hal_rcc.c ****       }
 435:src/stm32f1xx_hal_rcc.c ****     }
 436:src/stm32f1xx_hal_rcc.c ****     else
 437:src/stm32f1xx_hal_rcc.c ****     {
 438:src/stm32f1xx_hal_rcc.c ****       /* Check the HSI State */
 439:src/stm32f1xx_hal_rcc.c ****       if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 440:src/stm32f1xx_hal_rcc.c ****       {
 441:src/stm32f1xx_hal_rcc.c ****         /* Enable the Internal High Speed oscillator (HSI). */
 442:src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
 443:src/stm32f1xx_hal_rcc.c **** 
 444:src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 445:src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 446:src/stm32f1xx_hal_rcc.c **** 
 447:src/stm32f1xx_hal_rcc.c ****         /* Wait till HSI is ready */
 448:src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 449:src/stm32f1xx_hal_rcc.c ****         {
 450:src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 451:src/stm32f1xx_hal_rcc.c ****           {
 452:src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 453:src/stm32f1xx_hal_rcc.c ****           }
 454:src/stm32f1xx_hal_rcc.c ****         }
 455:src/stm32f1xx_hal_rcc.c **** 
 456:src/stm32f1xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 457:src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 458:src/stm32f1xx_hal_rcc.c ****       }
ARM GAS  /tmp/ccNjU3LR.s 			page 14


 459:src/stm32f1xx_hal_rcc.c ****       else
 460:src/stm32f1xx_hal_rcc.c ****       {
 461:src/stm32f1xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 462:src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 463:src/stm32f1xx_hal_rcc.c **** 
 464:src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 465:src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 466:src/stm32f1xx_hal_rcc.c **** 
 467:src/stm32f1xx_hal_rcc.c ****         /* Wait till HSI is disabled */
 468:src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 469:src/stm32f1xx_hal_rcc.c ****         {
 470:src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 471:src/stm32f1xx_hal_rcc.c ****           {
 472:src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 473:src/stm32f1xx_hal_rcc.c ****           }
 474:src/stm32f1xx_hal_rcc.c ****         }
 475:src/stm32f1xx_hal_rcc.c ****       }
 476:src/stm32f1xx_hal_rcc.c ****     }
 477:src/stm32f1xx_hal_rcc.c ****   }
 478:src/stm32f1xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/
 479:src/stm32f1xx_hal_rcc.c ****   if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 480:src/stm32f1xx_hal_rcc.c ****   {
 481:src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 482:src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 483:src/stm32f1xx_hal_rcc.c **** 
 484:src/stm32f1xx_hal_rcc.c ****     /* Check the LSI State */
 485:src/stm32f1xx_hal_rcc.c ****     if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 486:src/stm32f1xx_hal_rcc.c ****     {
 487:src/stm32f1xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 488:src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 489:src/stm32f1xx_hal_rcc.c **** 
 490:src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 491:src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 492:src/stm32f1xx_hal_rcc.c **** 
 493:src/stm32f1xx_hal_rcc.c ****       /* Wait till LSI is ready */
 494:src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 495:src/stm32f1xx_hal_rcc.c ****       {
 496:src/stm32f1xx_hal_rcc.c ****         if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 497:src/stm32f1xx_hal_rcc.c ****         {
 498:src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 499:src/stm32f1xx_hal_rcc.c ****         }
 500:src/stm32f1xx_hal_rcc.c ****       }
 501:src/stm32f1xx_hal_rcc.c ****       /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
 502:src/stm32f1xx_hal_rcc.c ****           should be added.*/
 503:src/stm32f1xx_hal_rcc.c ****       RCC_Delay(1);
 504:src/stm32f1xx_hal_rcc.c ****     }
 505:src/stm32f1xx_hal_rcc.c ****     else
 506:src/stm32f1xx_hal_rcc.c ****     {
 507:src/stm32f1xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 508:src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 509:src/stm32f1xx_hal_rcc.c **** 
 510:src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 511:src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 512:src/stm32f1xx_hal_rcc.c **** 
 513:src/stm32f1xx_hal_rcc.c ****       /* Wait till LSI is disabled */
 514:src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 515:src/stm32f1xx_hal_rcc.c ****       {
ARM GAS  /tmp/ccNjU3LR.s 			page 15


 516:src/stm32f1xx_hal_rcc.c ****         if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 517:src/stm32f1xx_hal_rcc.c ****         {
 518:src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 519:src/stm32f1xx_hal_rcc.c ****         }
 520:src/stm32f1xx_hal_rcc.c ****       }
 521:src/stm32f1xx_hal_rcc.c ****     }
 522:src/stm32f1xx_hal_rcc.c ****   }
 523:src/stm32f1xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/
 524:src/stm32f1xx_hal_rcc.c ****   if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 525:src/stm32f1xx_hal_rcc.c ****   {
 526:src/stm32f1xx_hal_rcc.c ****     FlagStatus       pwrclkchanged = RESET;
 527:src/stm32f1xx_hal_rcc.c **** 
 528:src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 529:src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 530:src/stm32f1xx_hal_rcc.c **** 
 531:src/stm32f1xx_hal_rcc.c ****     /* Update LSE configuration in Backup Domain control register    */
 532:src/stm32f1xx_hal_rcc.c ****     /* Requires to enable write access to Backup Domain of necessary */
 533:src/stm32f1xx_hal_rcc.c ****     if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 534:src/stm32f1xx_hal_rcc.c ****     {
 535:src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_ENABLE();
 536:src/stm32f1xx_hal_rcc.c ****       pwrclkchanged = SET;
 537:src/stm32f1xx_hal_rcc.c ****     }
 538:src/stm32f1xx_hal_rcc.c **** 
 539:src/stm32f1xx_hal_rcc.c ****     if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 540:src/stm32f1xx_hal_rcc.c ****     {
 541:src/stm32f1xx_hal_rcc.c ****       /* Enable write access to Backup domain */
 542:src/stm32f1xx_hal_rcc.c ****       SET_BIT(PWR->CR, PWR_CR_DBP);
 543:src/stm32f1xx_hal_rcc.c **** 
 544:src/stm32f1xx_hal_rcc.c ****       /* Wait for Backup domain Write protection disable */
 545:src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 546:src/stm32f1xx_hal_rcc.c **** 
 547:src/stm32f1xx_hal_rcc.c ****       while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 548:src/stm32f1xx_hal_rcc.c ****       {
 549:src/stm32f1xx_hal_rcc.c ****         if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 550:src/stm32f1xx_hal_rcc.c ****         {
 551:src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 552:src/stm32f1xx_hal_rcc.c ****         }
 553:src/stm32f1xx_hal_rcc.c ****       }
 554:src/stm32f1xx_hal_rcc.c ****     }
 555:src/stm32f1xx_hal_rcc.c **** 
 556:src/stm32f1xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 557:src/stm32f1xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 558:src/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 559:src/stm32f1xx_hal_rcc.c ****     if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 560:src/stm32f1xx_hal_rcc.c ****     {
 561:src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 562:src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 563:src/stm32f1xx_hal_rcc.c **** 
 564:src/stm32f1xx_hal_rcc.c ****       /* Wait till LSE is ready */
 565:src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 566:src/stm32f1xx_hal_rcc.c ****       {
 567:src/stm32f1xx_hal_rcc.c ****         if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 568:src/stm32f1xx_hal_rcc.c ****         {
 569:src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 570:src/stm32f1xx_hal_rcc.c ****         }
 571:src/stm32f1xx_hal_rcc.c ****       }
 572:src/stm32f1xx_hal_rcc.c ****     }
ARM GAS  /tmp/ccNjU3LR.s 			page 16


 573:src/stm32f1xx_hal_rcc.c ****     else
 574:src/stm32f1xx_hal_rcc.c ****     {
 575:src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 576:src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 577:src/stm32f1xx_hal_rcc.c **** 
 578:src/stm32f1xx_hal_rcc.c ****       /* Wait till LSE is disabled */
 579:src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 580:src/stm32f1xx_hal_rcc.c ****       {
 581:src/stm32f1xx_hal_rcc.c ****         if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 582:src/stm32f1xx_hal_rcc.c ****         {
 583:src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 584:src/stm32f1xx_hal_rcc.c ****         }
 585:src/stm32f1xx_hal_rcc.c ****       }
 586:src/stm32f1xx_hal_rcc.c ****     }
 587:src/stm32f1xx_hal_rcc.c **** 
 588:src/stm32f1xx_hal_rcc.c ****     /* Require to disable power clock if necessary */
 589:src/stm32f1xx_hal_rcc.c ****     if (pwrclkchanged == SET)
 590:src/stm32f1xx_hal_rcc.c ****     {
 591:src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_DISABLE();
 592:src/stm32f1xx_hal_rcc.c ****     }
 593:src/stm32f1xx_hal_rcc.c ****   }
 594:src/stm32f1xx_hal_rcc.c **** 
 595:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CR_PLL2ON)
 596:src/stm32f1xx_hal_rcc.c ****   /*-------------------------------- PLL2 Configuration -----------------------*/
 597:src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 598:src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
 599:src/stm32f1xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 600:src/stm32f1xx_hal_rcc.c ****   {
 601:src/stm32f1xx_hal_rcc.c ****     /* This bit can not be cleared if the PLL2 clock is used indirectly as system
 602:src/stm32f1xx_hal_rcc.c ****       clock (i.e. it is used as PLL clock entry that is used as system clock). */
 603:src/stm32f1xx_hal_rcc.c ****     if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 604:src/stm32f1xx_hal_rcc.c ****         (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 605:src/stm32f1xx_hal_rcc.c ****         ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 606:src/stm32f1xx_hal_rcc.c ****     {
 607:src/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 608:src/stm32f1xx_hal_rcc.c ****     }
 609:src/stm32f1xx_hal_rcc.c ****     else
 610:src/stm32f1xx_hal_rcc.c ****     {
 611:src/stm32f1xx_hal_rcc.c ****       if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 612:src/stm32f1xx_hal_rcc.c ****       {
 613:src/stm32f1xx_hal_rcc.c ****         /* Check the parameters */
 614:src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
 615:src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));
 616:src/stm32f1xx_hal_rcc.c **** 
 617:src/stm32f1xx_hal_rcc.c ****         /* Prediv2 can be written only when the PLLI2S is disabled. */
 618:src/stm32f1xx_hal_rcc.c ****         /* Return an error only if new value is different from the programmed value */
 619:src/stm32f1xx_hal_rcc.c ****         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 620:src/stm32f1xx_hal_rcc.c ****             (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 621:src/stm32f1xx_hal_rcc.c ****         {
 622:src/stm32f1xx_hal_rcc.c ****           return HAL_ERROR;
 623:src/stm32f1xx_hal_rcc.c ****         }
 624:src/stm32f1xx_hal_rcc.c **** 
 625:src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL2. */
 626:src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_DISABLE();
 627:src/stm32f1xx_hal_rcc.c **** 
 628:src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 629:src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
ARM GAS  /tmp/ccNjU3LR.s 			page 17


 630:src/stm32f1xx_hal_rcc.c **** 
 631:src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is disabled */
 632:src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 633:src/stm32f1xx_hal_rcc.c ****         {
 634:src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 635:src/stm32f1xx_hal_rcc.c ****           {
 636:src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 637:src/stm32f1xx_hal_rcc.c ****           }
 638:src/stm32f1xx_hal_rcc.c ****         }
 639:src/stm32f1xx_hal_rcc.c **** 
 640:src/stm32f1xx_hal_rcc.c ****         /* Configure the HSE prediv2 factor --------------------------------*/
 641:src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 642:src/stm32f1xx_hal_rcc.c **** 
 643:src/stm32f1xx_hal_rcc.c ****         /* Configure the main PLL2 multiplication factors. */
 644:src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 645:src/stm32f1xx_hal_rcc.c **** 
 646:src/stm32f1xx_hal_rcc.c ****         /* Enable the main PLL2. */
 647:src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_ENABLE();
 648:src/stm32f1xx_hal_rcc.c **** 
 649:src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 650:src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 651:src/stm32f1xx_hal_rcc.c **** 
 652:src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is ready */
 653:src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 654:src/stm32f1xx_hal_rcc.c ****         {
 655:src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 656:src/stm32f1xx_hal_rcc.c ****           {
 657:src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 658:src/stm32f1xx_hal_rcc.c ****           }
 659:src/stm32f1xx_hal_rcc.c ****         }
 660:src/stm32f1xx_hal_rcc.c ****       }
 661:src/stm32f1xx_hal_rcc.c ****       else
 662:src/stm32f1xx_hal_rcc.c ****       {
 663:src/stm32f1xx_hal_rcc.c ****         /* Set PREDIV1 source to HSE */
 664:src/stm32f1xx_hal_rcc.c ****         CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 665:src/stm32f1xx_hal_rcc.c **** 
 666:src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL2. */
 667:src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_DISABLE();
 668:src/stm32f1xx_hal_rcc.c **** 
 669:src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 670:src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 671:src/stm32f1xx_hal_rcc.c **** 
 672:src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is disabled */
 673:src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 674:src/stm32f1xx_hal_rcc.c ****         {
 675:src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 676:src/stm32f1xx_hal_rcc.c ****           {
 677:src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 678:src/stm32f1xx_hal_rcc.c ****           }
 679:src/stm32f1xx_hal_rcc.c ****         }
 680:src/stm32f1xx_hal_rcc.c ****       }
 681:src/stm32f1xx_hal_rcc.c ****     }
 682:src/stm32f1xx_hal_rcc.c ****   }
 683:src/stm32f1xx_hal_rcc.c **** 
 684:src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CR_PLL2ON */
 685:src/stm32f1xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 686:src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
ARM GAS  /tmp/ccNjU3LR.s 			page 18


 687:src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 688:src/stm32f1xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 689:src/stm32f1xx_hal_rcc.c ****   {
 690:src/stm32f1xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 691:src/stm32f1xx_hal_rcc.c ****     if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 692:src/stm32f1xx_hal_rcc.c ****     {
 693:src/stm32f1xx_hal_rcc.c ****       if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 694:src/stm32f1xx_hal_rcc.c ****       {
 695:src/stm32f1xx_hal_rcc.c ****         /* Check the parameters */
 696:src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 697:src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 698:src/stm32f1xx_hal_rcc.c **** 
 699:src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL. */
 700:src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 701:src/stm32f1xx_hal_rcc.c **** 
 702:src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 703:src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 704:src/stm32f1xx_hal_rcc.c **** 
 705:src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is disabled */
 706:src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 707:src/stm32f1xx_hal_rcc.c ****         {
 708:src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 709:src/stm32f1xx_hal_rcc.c ****           {
 710:src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 711:src/stm32f1xx_hal_rcc.c ****           }
 712:src/stm32f1xx_hal_rcc.c ****         }
 713:src/stm32f1xx_hal_rcc.c **** 
 714:src/stm32f1xx_hal_rcc.c ****         /* Configure the HSE prediv factor --------------------------------*/
 715:src/stm32f1xx_hal_rcc.c ****         /* It can be written only when the PLL is disabled. Not used in PLL source is different tha
 716:src/stm32f1xx_hal_rcc.c ****         if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 717:src/stm32f1xx_hal_rcc.c ****         {
 718:src/stm32f1xx_hal_rcc.c ****           /* Check the parameter */
 719:src/stm32f1xx_hal_rcc.c ****           assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 720:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
 721:src/stm32f1xx_hal_rcc.c ****           assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));
 722:src/stm32f1xx_hal_rcc.c **** 
 723:src/stm32f1xx_hal_rcc.c ****           /* Set PREDIV1 source */
 724:src/stm32f1xx_hal_rcc.c ****           SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 725:src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1SRC */
 726:src/stm32f1xx_hal_rcc.c **** 
 727:src/stm32f1xx_hal_rcc.c ****           /* Set PREDIV1 Value */
 728:src/stm32f1xx_hal_rcc.c ****           __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 729:src/stm32f1xx_hal_rcc.c ****         }
 730:src/stm32f1xx_hal_rcc.c **** 
 731:src/stm32f1xx_hal_rcc.c ****         /* Configure the main PLL clock source and multiplication factors. */
 732:src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 733:src/stm32f1xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLMUL);
 734:src/stm32f1xx_hal_rcc.c ****         /* Enable the main PLL. */
 735:src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 736:src/stm32f1xx_hal_rcc.c **** 
 737:src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 738:src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 739:src/stm32f1xx_hal_rcc.c **** 
 740:src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is ready */
 741:src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 742:src/stm32f1xx_hal_rcc.c ****         {
 743:src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
ARM GAS  /tmp/ccNjU3LR.s 			page 19


 744:src/stm32f1xx_hal_rcc.c ****           {
 745:src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 746:src/stm32f1xx_hal_rcc.c ****           }
 747:src/stm32f1xx_hal_rcc.c ****         }
 748:src/stm32f1xx_hal_rcc.c ****       }
 749:src/stm32f1xx_hal_rcc.c ****       else
 750:src/stm32f1xx_hal_rcc.c ****       {
 751:src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL. */
 752:src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 753:src/stm32f1xx_hal_rcc.c **** 
 754:src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 755:src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 756:src/stm32f1xx_hal_rcc.c **** 
 757:src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is disabled */
 758:src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 759:src/stm32f1xx_hal_rcc.c ****         {
 760:src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 761:src/stm32f1xx_hal_rcc.c ****           {
 762:src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 763:src/stm32f1xx_hal_rcc.c ****           }
 764:src/stm32f1xx_hal_rcc.c ****         }
 765:src/stm32f1xx_hal_rcc.c ****       }
 766:src/stm32f1xx_hal_rcc.c ****     }
 767:src/stm32f1xx_hal_rcc.c ****     else
 768:src/stm32f1xx_hal_rcc.c ****     {
 769:src/stm32f1xx_hal_rcc.c ****       /* Check if there is a request to disable the PLL used as System clock source */
 770:src/stm32f1xx_hal_rcc.c ****       if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 771:src/stm32f1xx_hal_rcc.c ****       {
 772:src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 272              		.loc 1 772 0
 273 00e0 0120     		movs	r0, #1	@ <retval>,
 274 00e2 3CE0     		b	.L105	@
 275              	.LVL25:
 276              	.L17:
 362:src/stm32f1xx_hal_rcc.c ****   {
 277              		.loc 1 362 0
 278 00e4 0368     		ldr	r3, [r0]	@ RCC_OscInitStruct_26(D)->OscillatorType, RCC_OscInitStruct_26(D)->OscillatorType
 279 00e6 DB07     		lsls	r3, r3, #31	@, RCC_OscInitStruct_26(D)->OscillatorType,
 280 00e8 10D4     		bmi	.L19	@,
 281              	.LVL26:
 282              	.L24:
 414:src/stm32f1xx_hal_rcc.c ****   {
 283              		.loc 1 414 0
 284 00ea 2B68     		ldr	r3, [r5]	@ RCC_OscInitStruct_26(D)->OscillatorType, RCC_OscInitStruct_26(D)->OscillatorType
 285 00ec 9F07     		lsls	r7, r3, #30	@, RCC_OscInitStruct_26(D)->OscillatorType,
 286 00ee 5DD4     		bmi	.L20	@,
 287              	.L35:
 479:src/stm32f1xx_hal_rcc.c ****   {
 288              		.loc 1 479 0
 289 00f0 2B68     		ldr	r3, [r5]	@ RCC_OscInitStruct_26(D)->OscillatorType, RCC_OscInitStruct_26(D)->OscillatorType
 290 00f2 1907     		lsls	r1, r3, #28	@, RCC_OscInitStruct_26(D)->OscillatorType,
 291 00f4 00F19480 		bmi	.L44	@,
 292              	.L51:
 524:src/stm32f1xx_hal_rcc.c ****   {
 293              		.loc 1 524 0
 294 00f8 2B68     		ldr	r3, [r5]	@ RCC_OscInitStruct_26(D)->OscillatorType, RCC_OscInitStruct_26(D)->OscillatorType
 295 00fa 5A07     		lsls	r2, r3, #29	@, RCC_OscInitStruct_26(D)->OscillatorType,
ARM GAS  /tmp/ccNjU3LR.s 			page 20


 296 00fc 00F1BE80 		bmi	.L45	@,
 297              	.L54:
 688:src/stm32f1xx_hal_rcc.c ****   {
 298              		.loc 1 688 0
 299 0100 E869     		ldr	r0, [r5, #28]	@ _199, RCC_OscInitStruct_26(D)->PLL.PLLState
 300 0102 0028     		cmp	r0, #0	@ _199
 301 0104 40F02C81 		bne	.L70	@
 302              	.LVL27:
 303              	.L78:
 773:src/stm32f1xx_hal_rcc.c ****       }
 774:src/stm32f1xx_hal_rcc.c ****       else
 775:src/stm32f1xx_hal_rcc.c ****       {
 776:src/stm32f1xx_hal_rcc.c ****         /* Do not return HAL_ERROR if request repeats the current configuration */
 777:src/stm32f1xx_hal_rcc.c ****         pll_config = RCC->CFGR;
 778:src/stm32f1xx_hal_rcc.c ****         if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 779:src/stm32f1xx_hal_rcc.c ****             (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 780:src/stm32f1xx_hal_rcc.c ****         {
 781:src/stm32f1xx_hal_rcc.c ****           return HAL_ERROR;
 782:src/stm32f1xx_hal_rcc.c ****         }
 783:src/stm32f1xx_hal_rcc.c ****       }
 784:src/stm32f1xx_hal_rcc.c ****     }
 785:src/stm32f1xx_hal_rcc.c ****   }
 786:src/stm32f1xx_hal_rcc.c **** 
 787:src/stm32f1xx_hal_rcc.c ****   return HAL_OK;
 304              		.loc 1 787 0
 305 0108 0020     		movs	r0, #0	@ <retval>,
 306 010a 28E0     		b	.L105	@
 307              	.LVL28:
 308              	.L19:
 368:src/stm32f1xx_hal_rcc.c ****         || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL
 309              		.loc 1 368 0
 310 010c 8F4C     		ldr	r4, .L112	@ tmp281,
 311 010e 6368     		ldr	r3, [r4, #4]	@ _30, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 312 0110 03F00C03 		and	r3, r3, #12	@ tmp282, _30,
 313 0114 042B     		cmp	r3, #4	@ tmp282,
 314 0116 07D0     		beq	.L22	@,
 369:src/stm32f1xx_hal_rcc.c ****     {
 315              		.loc 1 369 0
 316 0118 6368     		ldr	r3, [r4, #4]	@ _32, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 317 011a 03F00C03 		and	r3, r3, #12	@ tmp284, _32,
 318 011e 082B     		cmp	r3, #8	@ tmp284,
 319 0120 09D1     		bne	.L23	@,
 369:src/stm32f1xx_hal_rcc.c ****     {
 320              		.loc 1 369 0 is_stmt 0 discriminator 1
 321 0122 6368     		ldr	r3, [r4, #4]	@ _34, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 322 0124 DE03     		lsls	r6, r3, #15	@, _34,
 323 0126 06D5     		bpl	.L23	@,
 324              	.L22:
 371:src/stm32f1xx_hal_rcc.c ****       {
 325              		.loc 1 371 0 is_stmt 1
 326 0128 2368     		ldr	r3, [r4]	@ _73, MEM[(struct RCC_TypeDef *)1073876992B].CR
 327 012a 9C03     		lsls	r4, r3, #14	@, _73,
 328 012c DDD5     		bpl	.L24	@,
 371:src/stm32f1xx_hal_rcc.c ****       {
 329              		.loc 1 371 0 is_stmt 0 discriminator 1
 330 012e 6B68     		ldr	r3, [r5, #4]	@ RCC_OscInitStruct_26(D)->HSEState, RCC_OscInitStruct_26(D)->HSEState
 331 0130 002B     		cmp	r3, #0	@ RCC_OscInitStruct_26(D)->HSEState
ARM GAS  /tmp/ccNjU3LR.s 			page 21


 332 0132 DAD1     		bne	.L24	@
 333 0134 D4E7     		b	.L84	@
 334              	.L23:
 379:src/stm32f1xx_hal_rcc.c **** 
 335              		.loc 1 379 0 is_stmt 1
 336 0136 6B68     		ldr	r3, [r5, #4]	@ _36, RCC_OscInitStruct_26(D)->HSEState
 337 0138 B3F5803F 		cmp	r3, #65536	@ _36,
 338 013c 12D1     		bne	.L26	@,
 339              	.L110:
 379:src/stm32f1xx_hal_rcc.c **** 
 340              		.loc 1 379 0 is_stmt 0 discriminator 5
 341 013e 2368     		ldr	r3, [r4]	@ _49,
 342 0140 43F48033 		orr	r3, r3, #65536	@ _50, _49,
 343              	.L108:
 379:src/stm32f1xx_hal_rcc.c **** 
 344              		.loc 1 379 0 discriminator 6
 345 0144 2360     		str	r3, [r4]	@ _56,
 386:src/stm32f1xx_hal_rcc.c **** 
 346              		.loc 1 386 0 is_stmt 1 discriminator 6
 347 0146 FFF7FEFF 		bl	HAL_GetTick	@
 348              	.LVL29:
 349 014a 0646     		mov	r6, r0	@ tickstart,
 350              	.LVL30:
 351              	.L31:
 389:src/stm32f1xx_hal_rcc.c ****         {
 352              		.loc 1 389 0
 353 014c 2368     		ldr	r3, [r4]	@ _61, MEM[(struct RCC_TypeDef *)1073876992B].CR
 354 014e 9803     		lsls	r0, r3, #14	@, _61,
 355 0150 CBD4     		bmi	.L24	@,
 391:src/stm32f1xx_hal_rcc.c ****           {
 356              		.loc 1 391 0
 357 0152 FFF7FEFF 		bl	HAL_GetTick	@
 358              	.LVL31:
 359 0156 801B     		subs	r0, r0, r6	@ tmp304,, tickstart
 360 0158 6428     		cmp	r0, #100	@ tmp304,
 361 015a F7D9     		bls	.L31	@,
 362              	.LVL32:
 363              	.L33:
 393:src/stm32f1xx_hal_rcc.c ****           }
 364              		.loc 1 393 0
 365 015c 0320     		movs	r0, #3	@ <retval>,
 366              	.L105:
 788:src/stm32f1xx_hal_rcc.c **** }
 367              		.loc 1 788 0
 368 015e 02B0     		add	sp, sp, #8	@,,
 369              	.LCFI2:
 370              		.cfi_remember_state
 371              		.cfi_def_cfa_offset 24
 372              		@ sp needed	@
 373 0160 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 374              	.LVL33:
 375              	.L26:
 376              	.LCFI3:
 377              		.cfi_restore_state
 379:src/stm32f1xx_hal_rcc.c **** 
 378              		.loc 1 379 0 discriminator 2
 379 0164 9BB9     		cbnz	r3, .L28	@ _36,
ARM GAS  /tmp/ccNjU3LR.s 			page 22


 379:src/stm32f1xx_hal_rcc.c **** 
 380              		.loc 1 379 0 is_stmt 0 discriminator 3
 381 0166 2368     		ldr	r3, [r4]	@ _40, MEM[(struct RCC_TypeDef *)1073876992B].CR
 382 0168 23F48033 		bic	r3, r3, #65536	@ _41, _40,
 383 016c 2360     		str	r3, [r4]	@ _41, MEM[(struct RCC_TypeDef *)1073876992B].CR
 384 016e 2368     		ldr	r3, [r4]	@ _43, MEM[(struct RCC_TypeDef *)1073876992B].CR
 385 0170 23F48023 		bic	r3, r3, #262144	@ _44, _43,
 386 0174 2360     		str	r3, [r4]	@ _44, MEM[(struct RCC_TypeDef *)1073876992B].CR
 400:src/stm32f1xx_hal_rcc.c **** 
 387              		.loc 1 400 0 is_stmt 1 discriminator 3
 388 0176 FFF7FEFF 		bl	HAL_GetTick	@
 389              	.LVL34:
 390 017a 0646     		mov	r6, r0	@ tickstart,
 391              	.LVL35:
 392              	.L29:
 403:src/stm32f1xx_hal_rcc.c ****         {
 393              		.loc 1 403 0
 394 017c 2368     		ldr	r3, [r4]	@ _68, MEM[(struct RCC_TypeDef *)1073876992B].CR
 395 017e 9903     		lsls	r1, r3, #14	@, _68,
 396 0180 B3D5     		bpl	.L24	@,
 405:src/stm32f1xx_hal_rcc.c ****           {
 397              		.loc 1 405 0
 398 0182 FFF7FEFF 		bl	HAL_GetTick	@
 399              	.LVL36:
 400 0186 801B     		subs	r0, r0, r6	@ tmp307,, tickstart
 401 0188 6428     		cmp	r0, #100	@ tmp307,
 402 018a F7D9     		bls	.L29	@,
 403 018c E6E7     		b	.L33	@
 404              	.LVL37:
 405              	.L28:
 379:src/stm32f1xx_hal_rcc.c **** 
 406              		.loc 1 379 0 discriminator 4
 407 018e B3F5A02F 		cmp	r3, #327680	@ _36,
 408 0192 2368     		ldr	r3, [r4]	@ _46,
 409 0194 03D1     		bne	.L30	@,
 379:src/stm32f1xx_hal_rcc.c **** 
 410              		.loc 1 379 0 is_stmt 0 discriminator 5
 411 0196 43F48023 		orr	r3, r3, #262144	@ _47, _46,
 412 019a 2360     		str	r3, [r4]	@ _47, MEM[(struct RCC_TypeDef *)1073876992B].CR
 413 019c CFE7     		b	.L110	@
 414              	.L30:
 379:src/stm32f1xx_hal_rcc.c **** 
 415              		.loc 1 379 0 discriminator 6
 416 019e 23F48033 		bic	r3, r3, #65536	@ _53, _52,
 417 01a2 2360     		str	r3, [r4]	@ _53, MEM[(struct RCC_TypeDef *)1073876992B].CR
 418 01a4 2368     		ldr	r3, [r4]	@ _55, MEM[(struct RCC_TypeDef *)1073876992B].CR
 419 01a6 23F48023 		bic	r3, r3, #262144	@ _56, _55,
 420 01aa CBE7     		b	.L108	@
 421              	.LVL38:
 422              	.L20:
 421:src/stm32f1xx_hal_rcc.c ****         || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL
 423              		.loc 1 421 0 is_stmt 1
 424 01ac 674C     		ldr	r4, .L112	@ tmp310,
 425 01ae 6368     		ldr	r3, [r4, #4]	@ _78, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 426 01b0 13F00C0F 		tst	r3, #12	@ _78,
 427 01b4 07D0     		beq	.L36	@,
 422:src/stm32f1xx_hal_rcc.c ****     {
ARM GAS  /tmp/ccNjU3LR.s 			page 23


 428              		.loc 1 422 0
 429 01b6 6368     		ldr	r3, [r4, #4]	@ _80, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 430 01b8 03F00C03 		and	r3, r3, #12	@ tmp313, _80,
 431 01bc 082B     		cmp	r3, #8	@ tmp313,
 432 01be 10D1     		bne	.L37	@,
 422:src/stm32f1xx_hal_rcc.c ****     {
 433              		.loc 1 422 0 is_stmt 0 discriminator 1
 434 01c0 6368     		ldr	r3, [r4, #4]	@ _82, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 435 01c2 DA03     		lsls	r2, r3, #15	@, _82,
 436 01c4 0DD4     		bmi	.L37	@,
 437              	.L36:
 425:src/stm32f1xx_hal_rcc.c ****       {
 438              		.loc 1 425 0 is_stmt 1
 439 01c6 2368     		ldr	r3, [r4]	@ _107, MEM[(struct RCC_TypeDef *)1073876992B].CR
 440 01c8 9B07     		lsls	r3, r3, #30	@, _107,
 441 01ca 02D5     		bpl	.L107	@,
 425:src/stm32f1xx_hal_rcc.c ****       {
 442              		.loc 1 425 0 is_stmt 0 discriminator 1
 443 01cc 2B69     		ldr	r3, [r5, #16]	@ RCC_OscInitStruct_26(D)->HSIState, RCC_OscInitStruct_26(D)->HSIState
 444 01ce 012B     		cmp	r3, #1	@ RCC_OscInitStruct_26(D)->HSIState,
 445 01d0 86D1     		bne	.L84	@,
 446              	.L107:
 457:src/stm32f1xx_hal_rcc.c ****       }
 447              		.loc 1 457 0 is_stmt 1
 448 01d2 2368     		ldr	r3, [r4]	@ _93,
 449 01d4 6A69     		ldr	r2, [r5, #20]	@ RCC_OscInitStruct_26(D)->HSICalibrationValue, RCC_OscInitStruct_26(D)->HSICali
 450 01d6 23F0F803 		bic	r3, r3, #248	@ tmp333, _93,
 451 01da 43EAC203 		orr	r3, r3, r2, lsl #3	@ _97, tmp333, RCC_OscInitStruct_26(D)->HSICalibrationValue,
 452 01de 2360     		str	r3, [r4]	@ _97,
 453 01e0 86E7     		b	.L35	@
 454              	.L37:
 439:src/stm32f1xx_hal_rcc.c ****       {
 455              		.loc 1 439 0
 456 01e2 2A69     		ldr	r2, [r5, #16]	@ RCC_OscInitStruct_26(D)->HSIState, RCC_OscInitStruct_26(D)->HSIState
 457 01e4 5A4B     		ldr	r3, .L112+4	@ tmp433,
 458 01e6 6AB1     		cbz	r2, .L39	@ RCC_OscInitStruct_26(D)->HSIState,
 442:src/stm32f1xx_hal_rcc.c **** 
 459              		.loc 1 442 0
 460 01e8 0122     		movs	r2, #1	@ tmp326,
 461 01ea 1A60     		str	r2, [r3]	@ tmp326, MEM[(volatile uint32_t *)1111621632B]
 445:src/stm32f1xx_hal_rcc.c **** 
 462              		.loc 1 445 0
 463 01ec FFF7FEFF 		bl	HAL_GetTick	@
 464              	.LVL39:
 465 01f0 0646     		mov	r6, r0	@ tickstart,
 466              	.LVL40:
 467              	.L40:
 448:src/stm32f1xx_hal_rcc.c ****         {
 468              		.loc 1 448 0
 469 01f2 2368     		ldr	r3, [r4]	@ _88, MEM[(struct RCC_TypeDef *)1073876992B].CR
 470 01f4 9F07     		lsls	r7, r3, #30	@, _88,
 471 01f6 ECD4     		bmi	.L107	@,
 450:src/stm32f1xx_hal_rcc.c ****           {
 472              		.loc 1 450 0
 473 01f8 FFF7FEFF 		bl	HAL_GetTick	@
 474              	.LVL41:
 475 01fc 801B     		subs	r0, r0, r6	@ tmp327,, tickstart
ARM GAS  /tmp/ccNjU3LR.s 			page 24


 476 01fe 0228     		cmp	r0, #2	@ tmp327,
 477 0200 F7D9     		bls	.L40	@,
 478 0202 ABE7     		b	.L33	@
 479              	.LVL42:
 480              	.L39:
 462:src/stm32f1xx_hal_rcc.c **** 
 481              		.loc 1 462 0
 482 0204 1A60     		str	r2, [r3]	@ RCC_OscInitStruct_26(D)->HSIState, MEM[(volatile uint32_t *)1111621632B]
 465:src/stm32f1xx_hal_rcc.c **** 
 483              		.loc 1 465 0
 484 0206 FFF7FEFF 		bl	HAL_GetTick	@
 485              	.LVL43:
 486 020a 0646     		mov	r6, r0	@ tickstart,
 487              	.LVL44:
 488              	.L42:
 468:src/stm32f1xx_hal_rcc.c ****         {
 489              		.loc 1 468 0
 490 020c 2368     		ldr	r3, [r4]	@ _102, MEM[(struct RCC_TypeDef *)1073876992B].CR
 491 020e 9807     		lsls	r0, r3, #30	@, _102,
 492 0210 7FF56EAF 		bpl	.L35	@,
 470:src/stm32f1xx_hal_rcc.c ****           {
 493              		.loc 1 470 0
 494 0214 FFF7FEFF 		bl	HAL_GetTick	@
 495              	.LVL45:
 496 0218 801B     		subs	r0, r0, r6	@ tmp337,, tickstart
 497 021a 0228     		cmp	r0, #2	@ tmp337,
 498 021c F6D9     		bls	.L42	@,
 499 021e 9DE7     		b	.L33	@
 500              	.LVL46:
 501              	.L44:
 485:src/stm32f1xx_hal_rcc.c ****     {
 502              		.loc 1 485 0
 503 0220 AA69     		ldr	r2, [r5, #24]	@ RCC_OscInitStruct_26(D)->LSIState, RCC_OscInitStruct_26(D)->LSIState
 504 0222 4A4C     		ldr	r4, .L112	@ tmp430,
 505 0224 4B4B     		ldr	r3, .L112+8	@ tmp431,
 506 0226 DAB1     		cbz	r2, .L47	@ RCC_OscInitStruct_26(D)->LSIState,
 488:src/stm32f1xx_hal_rcc.c **** 
 507              		.loc 1 488 0
 508 0228 0122     		movs	r2, #1	@ tmp346,
 509 022a 1A60     		str	r2, [r3]	@ tmp346, MEM[(volatile uint32_t *)1111622784B]
 491:src/stm32f1xx_hal_rcc.c **** 
 510              		.loc 1 491 0
 511 022c FFF7FEFF 		bl	HAL_GetTick	@
 512              	.LVL47:
 513 0230 0646     		mov	r6, r0	@ tickstart,
 514              	.LVL48:
 515              	.L48:
 494:src/stm32f1xx_hal_rcc.c ****       {
 516              		.loc 1 494 0
 517 0232 636A     		ldr	r3, [r4, #36]	@ _122, MEM[(struct RCC_TypeDef *)1073876992B].CSR
 518 0234 9B07     		lsls	r3, r3, #30	@, _122,
 519 0236 0DD5     		bpl	.L49	@,
 520              	.LVL49:
 521              	.LBB10:
 522              	.LBB11:
 789:src/stm32f1xx_hal_rcc.c **** 
 790:src/stm32f1xx_hal_rcc.c **** /**
ARM GAS  /tmp/ccNjU3LR.s 			page 25


 791:src/stm32f1xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB buses clocks according to the specified
 792:src/stm32f1xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 793:src/stm32f1xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_OscInitTypeDef structure that
 794:src/stm32f1xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 795:src/stm32f1xx_hal_rcc.c ****   * @param  FLatency FLASH Latency
 796:src/stm32f1xx_hal_rcc.c ****   *          The value of this parameter depend on device used within the same series
 797:src/stm32f1xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 798:src/stm32f1xx_hal_rcc.c ****   *         and updated by @ref HAL_RCC_GetHCLKFreq() function called within this function
 799:src/stm32f1xx_hal_rcc.c ****   *
 800:src/stm32f1xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 801:src/stm32f1xx_hal_rcc.c ****   *         start-up from Reset, wake-up from STOP and STANDBY mode, or in case
 802:src/stm32f1xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 803:src/stm32f1xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 804:src/stm32f1xx_hal_rcc.c ****   *
 805:src/stm32f1xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 806:src/stm32f1xx_hal_rcc.c ****   *         clock source is ready (clock stable after start-up delay or PLL locked).
 807:src/stm32f1xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 808:src/stm32f1xx_hal_rcc.c ****   *         occur when the clock source will be ready.
 809:src/stm32f1xx_hal_rcc.c ****   *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
 810:src/stm32f1xx_hal_rcc.c ****   *         currently used as system clock source.
 811:src/stm32f1xx_hal_rcc.c ****   * @retval HAL status
 812:src/stm32f1xx_hal_rcc.c ****   */
 813:src/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 814:src/stm32f1xx_hal_rcc.c **** {
 815:src/stm32f1xx_hal_rcc.c ****   uint32_t tickstart;
 816:src/stm32f1xx_hal_rcc.c **** 
 817:src/stm32f1xx_hal_rcc.c ****   /* Check Null pointer */
 818:src/stm32f1xx_hal_rcc.c ****   if (RCC_ClkInitStruct == NULL)
 819:src/stm32f1xx_hal_rcc.c ****   {
 820:src/stm32f1xx_hal_rcc.c ****     return HAL_ERROR;
 821:src/stm32f1xx_hal_rcc.c ****   }
 822:src/stm32f1xx_hal_rcc.c **** 
 823:src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 824:src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 825:src/stm32f1xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 826:src/stm32f1xx_hal_rcc.c **** 
 827:src/stm32f1xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
 828:src/stm32f1xx_hal_rcc.c ****   must be correctly programmed according to the frequency of the CPU clock
 829:src/stm32f1xx_hal_rcc.c ****     (HCLK) of the device. */
 830:src/stm32f1xx_hal_rcc.c **** 
 831:src/stm32f1xx_hal_rcc.c **** #if defined(FLASH_ACR_LATENCY)
 832:src/stm32f1xx_hal_rcc.c ****   /* Increasing the number of wait states because of higher CPU frequency */
 833:src/stm32f1xx_hal_rcc.c ****   if (FLatency > __HAL_FLASH_GET_LATENCY())
 834:src/stm32f1xx_hal_rcc.c ****   {
 835:src/stm32f1xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 836:src/stm32f1xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 837:src/stm32f1xx_hal_rcc.c **** 
 838:src/stm32f1xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 839:src/stm32f1xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 840:src/stm32f1xx_hal_rcc.c ****     if (__HAL_FLASH_GET_LATENCY() != FLatency)
 841:src/stm32f1xx_hal_rcc.c ****   {
 842:src/stm32f1xx_hal_rcc.c ****     return HAL_ERROR;
 843:src/stm32f1xx_hal_rcc.c ****   }
 844:src/stm32f1xx_hal_rcc.c **** }
 845:src/stm32f1xx_hal_rcc.c **** 
 846:src/stm32f1xx_hal_rcc.c **** #endif /* FLASH_ACR_LATENCY */
 847:src/stm32f1xx_hal_rcc.c **** /*-------------------------- HCLK Configuration --------------------------*/
ARM GAS  /tmp/ccNjU3LR.s 			page 26


 848:src/stm32f1xx_hal_rcc.c **** if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 849:src/stm32f1xx_hal_rcc.c ****   {
 850:src/stm32f1xx_hal_rcc.c ****     /* Set the highest APBx dividers in order to ensure that we do not go through
 851:src/stm32f1xx_hal_rcc.c ****     a non-spec phase whatever we decrease or increase HCLK. */
 852:src/stm32f1xx_hal_rcc.c ****     if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 853:src/stm32f1xx_hal_rcc.c ****     {
 854:src/stm32f1xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 855:src/stm32f1xx_hal_rcc.c ****     }
 856:src/stm32f1xx_hal_rcc.c **** 
 857:src/stm32f1xx_hal_rcc.c ****     if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 858:src/stm32f1xx_hal_rcc.c ****     {
 859:src/stm32f1xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 860:src/stm32f1xx_hal_rcc.c ****     }
 861:src/stm32f1xx_hal_rcc.c **** 
 862:src/stm32f1xx_hal_rcc.c ****     /* Set the new HCLK clock divider */
 863:src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 864:src/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 865:src/stm32f1xx_hal_rcc.c ****   }
 866:src/stm32f1xx_hal_rcc.c **** 
 867:src/stm32f1xx_hal_rcc.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/
 868:src/stm32f1xx_hal_rcc.c ****   if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 869:src/stm32f1xx_hal_rcc.c ****   {
 870:src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 871:src/stm32f1xx_hal_rcc.c **** 
 872:src/stm32f1xx_hal_rcc.c ****     /* HSE is selected as System Clock Source */
 873:src/stm32f1xx_hal_rcc.c ****     if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 874:src/stm32f1xx_hal_rcc.c ****     {
 875:src/stm32f1xx_hal_rcc.c ****       /* Check the HSE ready flag */
 876:src/stm32f1xx_hal_rcc.c ****       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 877:src/stm32f1xx_hal_rcc.c ****       {
 878:src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 879:src/stm32f1xx_hal_rcc.c ****       }
 880:src/stm32f1xx_hal_rcc.c ****     }
 881:src/stm32f1xx_hal_rcc.c ****     /* PLL is selected as System Clock Source */
 882:src/stm32f1xx_hal_rcc.c ****     else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 883:src/stm32f1xx_hal_rcc.c ****     {
 884:src/stm32f1xx_hal_rcc.c ****       /* Check the PLL ready flag */
 885:src/stm32f1xx_hal_rcc.c ****       if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 886:src/stm32f1xx_hal_rcc.c ****       {
 887:src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 888:src/stm32f1xx_hal_rcc.c ****       }
 889:src/stm32f1xx_hal_rcc.c ****     }
 890:src/stm32f1xx_hal_rcc.c ****     /* HSI is selected as System Clock Source */
 891:src/stm32f1xx_hal_rcc.c ****     else
 892:src/stm32f1xx_hal_rcc.c ****     {
 893:src/stm32f1xx_hal_rcc.c ****       /* Check the HSI ready flag */
 894:src/stm32f1xx_hal_rcc.c ****       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 895:src/stm32f1xx_hal_rcc.c ****       {
 896:src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 897:src/stm32f1xx_hal_rcc.c ****       }
 898:src/stm32f1xx_hal_rcc.c ****     }
 899:src/stm32f1xx_hal_rcc.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 900:src/stm32f1xx_hal_rcc.c **** 
 901:src/stm32f1xx_hal_rcc.c ****     /* Get Start Tick */
 902:src/stm32f1xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 903:src/stm32f1xx_hal_rcc.c **** 
 904:src/stm32f1xx_hal_rcc.c ****     while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
ARM GAS  /tmp/ccNjU3LR.s 			page 27


 905:src/stm32f1xx_hal_rcc.c ****     {
 906:src/stm32f1xx_hal_rcc.c ****       if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 907:src/stm32f1xx_hal_rcc.c ****       {
 908:src/stm32f1xx_hal_rcc.c ****         return HAL_TIMEOUT;
 909:src/stm32f1xx_hal_rcc.c ****       }
 910:src/stm32f1xx_hal_rcc.c ****     }
 911:src/stm32f1xx_hal_rcc.c ****   }
 912:src/stm32f1xx_hal_rcc.c **** 
 913:src/stm32f1xx_hal_rcc.c **** #if defined(FLASH_ACR_LATENCY)
 914:src/stm32f1xx_hal_rcc.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 915:src/stm32f1xx_hal_rcc.c ****   if (FLatency < __HAL_FLASH_GET_LATENCY())
 916:src/stm32f1xx_hal_rcc.c ****   {
 917:src/stm32f1xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 918:src/stm32f1xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 919:src/stm32f1xx_hal_rcc.c **** 
 920:src/stm32f1xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 921:src/stm32f1xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 922:src/stm32f1xx_hal_rcc.c ****     if (__HAL_FLASH_GET_LATENCY() != FLatency)
 923:src/stm32f1xx_hal_rcc.c ****   {
 924:src/stm32f1xx_hal_rcc.c ****     return HAL_ERROR;
 925:src/stm32f1xx_hal_rcc.c ****   }
 926:src/stm32f1xx_hal_rcc.c **** }
 927:src/stm32f1xx_hal_rcc.c **** #endif /* FLASH_ACR_LATENCY */
 928:src/stm32f1xx_hal_rcc.c **** 
 929:src/stm32f1xx_hal_rcc.c **** /*-------------------------- PCLK1 Configuration ---------------------------*/
 930:src/stm32f1xx_hal_rcc.c **** if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 931:src/stm32f1xx_hal_rcc.c ****   {
 932:src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 933:src/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 934:src/stm32f1xx_hal_rcc.c ****   }
 935:src/stm32f1xx_hal_rcc.c **** 
 936:src/stm32f1xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/
 937:src/stm32f1xx_hal_rcc.c ****   if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 938:src/stm32f1xx_hal_rcc.c ****   {
 939:src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 940:src/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 941:src/stm32f1xx_hal_rcc.c ****   }
 942:src/stm32f1xx_hal_rcc.c **** 
 943:src/stm32f1xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 944:src/stm32f1xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_C
 945:src/stm32f1xx_hal_rcc.c **** 
 946:src/stm32f1xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings*/
 947:src/stm32f1xx_hal_rcc.c ****   HAL_InitTick(uwTickPrio);
 948:src/stm32f1xx_hal_rcc.c **** 
 949:src/stm32f1xx_hal_rcc.c ****   return HAL_OK;
 950:src/stm32f1xx_hal_rcc.c **** }
 951:src/stm32f1xx_hal_rcc.c **** 
 952:src/stm32f1xx_hal_rcc.c **** /**
 953:src/stm32f1xx_hal_rcc.c ****   * @}
 954:src/stm32f1xx_hal_rcc.c ****   */
 955:src/stm32f1xx_hal_rcc.c **** 
 956:src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions
 957:src/stm32f1xx_hal_rcc.c ****   *  @brief   RCC clocks control functions
 958:src/stm32f1xx_hal_rcc.c ****   *
 959:src/stm32f1xx_hal_rcc.c ****   @verbatim
 960:src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 961:src/stm32f1xx_hal_rcc.c ****                   ##### Peripheral Control functions #####
ARM GAS  /tmp/ccNjU3LR.s 			page 28


 962:src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 963:src/stm32f1xx_hal_rcc.c ****     [..]
 964:src/stm32f1xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks
 965:src/stm32f1xx_hal_rcc.c ****     frequencies.
 966:src/stm32f1xx_hal_rcc.c **** 
 967:src/stm32f1xx_hal_rcc.c ****   @endverbatim
 968:src/stm32f1xx_hal_rcc.c ****   * @{
 969:src/stm32f1xx_hal_rcc.c ****   */
 970:src/stm32f1xx_hal_rcc.c **** 
 971:src/stm32f1xx_hal_rcc.c **** /**
 972:src/stm32f1xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
 973:src/stm32f1xx_hal_rcc.c ****   * @note   MCO pin should be configured in alternate function mode.
 974:src/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCOx specifies the output direction for the clock source.
 975:src/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 976:src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1 Clock source to output on MCO1 pin(PA8).
 977:src/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCOSource specifies the clock source to output.
 978:src/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 979:src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_NOCLOCK     No clock selected as MCO clock
 980:src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_SYSCLK      System clock selected as MCO clock
 981:src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI         HSI selected as MCO clock
 982:src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSE         HSE selected as MCO clock
 983:src/stm32f1xx_hal_rcc.c ****   @if STM32F105xC
 984:src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK       PLL clock divided by 2 selected as MCO source
 985:src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL2CLK      PLL2 clock selected as MCO source
 986:src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK_DIV2 PLL3 clock divided by 2 selected as MCO source
 987:src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_EXT_HSE      XT1 external 3-25 MHz oscillator clock selecte
 988:src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK      PLL3 clock selected as MCO source
 989:src/stm32f1xx_hal_rcc.c ****   @endif
 990:src/stm32f1xx_hal_rcc.c ****   @if STM32F107xC
 991:src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK       PLL clock divided by 2 selected as MCO source
 992:src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL2CLK      PLL2 clock selected as MCO source
 993:src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK_DIV2 PLL3 clock divided by 2 selected as MCO source
 994:src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_EXT_HSE XT1  external 3-25 MHz oscillator clock selected as
 995:src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK      PLL3 clock selected as MCO source
 996:src/stm32f1xx_hal_rcc.c ****   @endif
 997:src/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCODiv specifies the MCO DIV.
 998:src/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 999:src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
1000:src/stm32f1xx_hal_rcc.c ****   * @retval None
1001:src/stm32f1xx_hal_rcc.c ****   */
1002:src/stm32f1xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
1003:src/stm32f1xx_hal_rcc.c **** {
1004:src/stm32f1xx_hal_rcc.c ****   GPIO_InitTypeDef gpio = {0U};
1005:src/stm32f1xx_hal_rcc.c **** 
1006:src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
1007:src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
1008:src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
1009:src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
1010:src/stm32f1xx_hal_rcc.c **** 
1011:src/stm32f1xx_hal_rcc.c ****   /* Prevent unused argument(s) compilation warning */
1012:src/stm32f1xx_hal_rcc.c ****   UNUSED(RCC_MCOx);
1013:src/stm32f1xx_hal_rcc.c ****   UNUSED(RCC_MCODiv);
1014:src/stm32f1xx_hal_rcc.c **** 
1015:src/stm32f1xx_hal_rcc.c ****   /* Configure the MCO1 pin in alternate function mode */
1016:src/stm32f1xx_hal_rcc.c ****   gpio.Mode      = GPIO_MODE_AF_PP;
1017:src/stm32f1xx_hal_rcc.c ****   gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
1018:src/stm32f1xx_hal_rcc.c ****   gpio.Pull      = GPIO_NOPULL;
ARM GAS  /tmp/ccNjU3LR.s 			page 29


1019:src/stm32f1xx_hal_rcc.c ****   gpio.Pin       = MCO1_PIN;
1020:src/stm32f1xx_hal_rcc.c **** 
1021:src/stm32f1xx_hal_rcc.c ****   /* MCO1 Clock Enable */
1022:src/stm32f1xx_hal_rcc.c ****   MCO1_CLK_ENABLE();
1023:src/stm32f1xx_hal_rcc.c **** 
1024:src/stm32f1xx_hal_rcc.c ****   HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
1025:src/stm32f1xx_hal_rcc.c **** 
1026:src/stm32f1xx_hal_rcc.c ****   /* Configure the MCO clock source */
1027:src/stm32f1xx_hal_rcc.c ****   __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
1028:src/stm32f1xx_hal_rcc.c **** }
1029:src/stm32f1xx_hal_rcc.c **** 
1030:src/stm32f1xx_hal_rcc.c **** /**
1031:src/stm32f1xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
1032:src/stm32f1xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
1033:src/stm32f1xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
1034:src/stm32f1xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
1035:src/stm32f1xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to
1036:src/stm32f1xx_hal_rcc.c ****   *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
1037:src/stm32f1xx_hal_rcc.c ****   * @retval None
1038:src/stm32f1xx_hal_rcc.c ****   */
1039:src/stm32f1xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
1040:src/stm32f1xx_hal_rcc.c **** {
1041:src/stm32f1xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
1042:src/stm32f1xx_hal_rcc.c **** }
1043:src/stm32f1xx_hal_rcc.c **** 
1044:src/stm32f1xx_hal_rcc.c **** /**
1045:src/stm32f1xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
1046:src/stm32f1xx_hal_rcc.c ****   * @retval None
1047:src/stm32f1xx_hal_rcc.c ****   */
1048:src/stm32f1xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
1049:src/stm32f1xx_hal_rcc.c **** {
1050:src/stm32f1xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
1051:src/stm32f1xx_hal_rcc.c **** }
1052:src/stm32f1xx_hal_rcc.c **** 
1053:src/stm32f1xx_hal_rcc.c **** /**
1054:src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency
1055:src/stm32f1xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real
1056:src/stm32f1xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined
1057:src/stm32f1xx_hal_rcc.c ****   *         constant and the selected clock source:
1058:src/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1059:src/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns a value based on HSE_VALUE
1060:src/stm32f1xx_hal_rcc.c ****   *           divided by PREDIV factor(**)
1061:src/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns a value based on HSE_VALUE
1062:src/stm32f1xx_hal_rcc.c ****   *           divided by PREDIV factor(**) or HSI_VALUE(*) multiplied by the PLL factor.
1063:src/stm32f1xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f1xx_hal_conf.h file (default value
1064:src/stm32f1xx_hal_rcc.c ****   *               8 MHz) but the real value may vary depending on the variations
1065:src/stm32f1xx_hal_rcc.c ****   *               in voltage and temperature.
1066:src/stm32f1xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f1xx_hal_conf.h file (default value
1067:src/stm32f1xx_hal_rcc.c ****   *                8 MHz), user has to ensure that HSE_VALUE is same as the real
1068:src/stm32f1xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1069:src/stm32f1xx_hal_rcc.c ****   *                have wrong result.
1070:src/stm32f1xx_hal_rcc.c ****   *
1071:src/stm32f1xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1072:src/stm32f1xx_hal_rcc.c ****   *         value for HSE crystal.
1073:src/stm32f1xx_hal_rcc.c ****   *
1074:src/stm32f1xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the
1075:src/stm32f1xx_hal_rcc.c ****   *         baud-rate for the communication peripherals or configure other parameters.
ARM GAS  /tmp/ccNjU3LR.s 			page 30


1076:src/stm32f1xx_hal_rcc.c ****   *
1077:src/stm32f1xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
1078:src/stm32f1xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
1079:src/stm32f1xx_hal_rcc.c ****   *
1080:src/stm32f1xx_hal_rcc.c ****   * @retval SYSCLK frequency
1081:src/stm32f1xx_hal_rcc.c ****   */
1082:src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
1083:src/stm32f1xx_hal_rcc.c **** {
1084:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1085:src/stm32f1xx_hal_rcc.c ****   const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
1086:src/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
1087:src/stm32f1xx_hal_rcc.c **** #else
1088:src/stm32f1xx_hal_rcc.c ****   const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
1089:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
1090:src/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
1091:src/stm32f1xx_hal_rcc.c **** #else
1092:src/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[2] = {1, 2};
1093:src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
1094:src/stm32f1xx_hal_rcc.c **** 
1095:src/stm32f1xx_hal_rcc.c **** #endif
1096:src/stm32f1xx_hal_rcc.c ****   uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
1097:src/stm32f1xx_hal_rcc.c ****   uint32_t sysclockfreq = 0U;
1098:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1099:src/stm32f1xx_hal_rcc.c ****   uint32_t prediv2 = 0U, pll2mul = 0U;
1100:src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
1101:src/stm32f1xx_hal_rcc.c **** 
1102:src/stm32f1xx_hal_rcc.c ****   tmpreg = RCC->CFGR;
1103:src/stm32f1xx_hal_rcc.c **** 
1104:src/stm32f1xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1105:src/stm32f1xx_hal_rcc.c ****   switch (tmpreg & RCC_CFGR_SWS)
1106:src/stm32f1xx_hal_rcc.c ****   {
1107:src/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
1108:src/stm32f1xx_hal_rcc.c ****     {
1109:src/stm32f1xx_hal_rcc.c ****       sysclockfreq = HSE_VALUE;
1110:src/stm32f1xx_hal_rcc.c ****       break;
1111:src/stm32f1xx_hal_rcc.c ****     }
1112:src/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
1113:src/stm32f1xx_hal_rcc.c ****     {
1114:src/stm32f1xx_hal_rcc.c ****       pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
1115:src/stm32f1xx_hal_rcc.c ****       if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
1116:src/stm32f1xx_hal_rcc.c ****       {
1117:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
1118:src/stm32f1xx_hal_rcc.c ****         prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1
1119:src/stm32f1xx_hal_rcc.c **** #else
1120:src/stm32f1xx_hal_rcc.c ****         prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_
1121:src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
1122:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1123:src/stm32f1xx_hal_rcc.c **** 
1124:src/stm32f1xx_hal_rcc.c ****         if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
1125:src/stm32f1xx_hal_rcc.c ****         {
1126:src/stm32f1xx_hal_rcc.c ****           /* PLL2 selected as Prediv1 source */
1127:src/stm32f1xx_hal_rcc.c ****           /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
1128:src/stm32f1xx_hal_rcc.c ****           prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
1129:src/stm32f1xx_hal_rcc.c ****           pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
1130:src/stm32f1xx_hal_rcc.c ****           pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint
1131:src/stm32f1xx_hal_rcc.c ****         }
1132:src/stm32f1xx_hal_rcc.c ****         else
ARM GAS  /tmp/ccNjU3LR.s 			page 31


1133:src/stm32f1xx_hal_rcc.c ****         {
1134:src/stm32f1xx_hal_rcc.c ****           /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
1135:src/stm32f1xx_hal_rcc.c ****           pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
1136:src/stm32f1xx_hal_rcc.c ****         }
1137:src/stm32f1xx_hal_rcc.c **** 
1138:src/stm32f1xx_hal_rcc.c ****         /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using floa
1139:src/stm32f1xx_hal_rcc.c ****         /* In this case need to divide pllclk by 2 */
1140:src/stm32f1xx_hal_rcc.c ****         if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
1141:src/stm32f1xx_hal_rcc.c ****         {
1142:src/stm32f1xx_hal_rcc.c ****           pllclk = pllclk / 2;
1143:src/stm32f1xx_hal_rcc.c ****         }
1144:src/stm32f1xx_hal_rcc.c **** #else
1145:src/stm32f1xx_hal_rcc.c ****         /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
1146:src/stm32f1xx_hal_rcc.c ****         pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
1147:src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
1148:src/stm32f1xx_hal_rcc.c ****       }
1149:src/stm32f1xx_hal_rcc.c ****       else
1150:src/stm32f1xx_hal_rcc.c ****       {
1151:src/stm32f1xx_hal_rcc.c ****         /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
1152:src/stm32f1xx_hal_rcc.c ****         pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
1153:src/stm32f1xx_hal_rcc.c ****       }
1154:src/stm32f1xx_hal_rcc.c ****       sysclockfreq = pllclk;
1155:src/stm32f1xx_hal_rcc.c ****       break;
1156:src/stm32f1xx_hal_rcc.c ****     }
1157:src/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
1158:src/stm32f1xx_hal_rcc.c ****     default: /* HSI used as system clock */
1159:src/stm32f1xx_hal_rcc.c ****     {
1160:src/stm32f1xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
1161:src/stm32f1xx_hal_rcc.c ****       break;
1162:src/stm32f1xx_hal_rcc.c ****     }
1163:src/stm32f1xx_hal_rcc.c ****   }
1164:src/stm32f1xx_hal_rcc.c ****   return sysclockfreq;
1165:src/stm32f1xx_hal_rcc.c **** }
1166:src/stm32f1xx_hal_rcc.c **** 
1167:src/stm32f1xx_hal_rcc.c **** /**
1168:src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency
1169:src/stm32f1xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
1170:src/stm32f1xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
1171:src/stm32f1xx_hal_rcc.c ****   *
1172:src/stm32f1xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
1173:src/stm32f1xx_hal_rcc.c ****   *         and updated within this function
1174:src/stm32f1xx_hal_rcc.c ****   * @retval HCLK frequency
1175:src/stm32f1xx_hal_rcc.c ****   */
1176:src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
1177:src/stm32f1xx_hal_rcc.c **** {
1178:src/stm32f1xx_hal_rcc.c ****   return SystemCoreClock;
1179:src/stm32f1xx_hal_rcc.c **** }
1180:src/stm32f1xx_hal_rcc.c **** 
1181:src/stm32f1xx_hal_rcc.c **** /**
1182:src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency
1183:src/stm32f1xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
1184:src/stm32f1xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
1185:src/stm32f1xx_hal_rcc.c ****   * @retval PCLK1 frequency
1186:src/stm32f1xx_hal_rcc.c ****   */
1187:src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
1188:src/stm32f1xx_hal_rcc.c **** {
1189:src/stm32f1xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
ARM GAS  /tmp/ccNjU3LR.s 			page 32


1190:src/stm32f1xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos
1191:src/stm32f1xx_hal_rcc.c **** }
1192:src/stm32f1xx_hal_rcc.c **** 
1193:src/stm32f1xx_hal_rcc.c **** /**
1194:src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency
1195:src/stm32f1xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
1196:src/stm32f1xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
1197:src/stm32f1xx_hal_rcc.c ****   * @retval PCLK2 frequency
1198:src/stm32f1xx_hal_rcc.c ****   */
1199:src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
1200:src/stm32f1xx_hal_rcc.c **** {
1201:src/stm32f1xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
1202:src/stm32f1xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos
1203:src/stm32f1xx_hal_rcc.c **** }
1204:src/stm32f1xx_hal_rcc.c **** 
1205:src/stm32f1xx_hal_rcc.c **** /**
1206:src/stm32f1xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal
1207:src/stm32f1xx_hal_rcc.c ****   * RCC configuration registers.
1208:src/stm32f1xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
1209:src/stm32f1xx_hal_rcc.c ****   * will be configured.
1210:src/stm32f1xx_hal_rcc.c ****   * @retval None
1211:src/stm32f1xx_hal_rcc.c ****   */
1212:src/stm32f1xx_hal_rcc.c **** void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
1213:src/stm32f1xx_hal_rcc.c **** {
1214:src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
1215:src/stm32f1xx_hal_rcc.c ****   assert_param(RCC_OscInitStruct != NULL);
1216:src/stm32f1xx_hal_rcc.c **** 
1217:src/stm32f1xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
1218:src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
1219:src/stm32f1xx_hal_rcc.c ****                                       | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
1220:src/stm32f1xx_hal_rcc.c **** 
1221:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1222:src/stm32f1xx_hal_rcc.c ****   /* Get the Prediv1 source --------------------------------------------------*/
1223:src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
1224:src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1SRC */
1225:src/stm32f1xx_hal_rcc.c **** 
1226:src/stm32f1xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
1227:src/stm32f1xx_hal_rcc.c ****   if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
1228:src/stm32f1xx_hal_rcc.c ****   {
1229:src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
1230:src/stm32f1xx_hal_rcc.c ****   }
1231:src/stm32f1xx_hal_rcc.c ****   else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
1232:src/stm32f1xx_hal_rcc.c ****   {
1233:src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
1234:src/stm32f1xx_hal_rcc.c ****   }
1235:src/stm32f1xx_hal_rcc.c ****   else
1236:src/stm32f1xx_hal_rcc.c ****   {
1237:src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
1238:src/stm32f1xx_hal_rcc.c ****   }
1239:src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
1240:src/stm32f1xx_hal_rcc.c **** 
1241:src/stm32f1xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
1242:src/stm32f1xx_hal_rcc.c ****   if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
1243:src/stm32f1xx_hal_rcc.c ****   {
1244:src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
1245:src/stm32f1xx_hal_rcc.c ****   }
1246:src/stm32f1xx_hal_rcc.c ****   else
ARM GAS  /tmp/ccNjU3LR.s 			page 33


1247:src/stm32f1xx_hal_rcc.c ****   {
1248:src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
1249:src/stm32f1xx_hal_rcc.c ****   }
1250:src/stm32f1xx_hal_rcc.c **** 
1251:src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_
1252:src/stm32f1xx_hal_rcc.c **** 
1253:src/stm32f1xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1254:src/stm32f1xx_hal_rcc.c ****   if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
1255:src/stm32f1xx_hal_rcc.c ****   {
1256:src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
1257:src/stm32f1xx_hal_rcc.c ****   }
1258:src/stm32f1xx_hal_rcc.c ****   else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
1259:src/stm32f1xx_hal_rcc.c ****   {
1260:src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
1261:src/stm32f1xx_hal_rcc.c ****   }
1262:src/stm32f1xx_hal_rcc.c ****   else
1263:src/stm32f1xx_hal_rcc.c ****   {
1264:src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
1265:src/stm32f1xx_hal_rcc.c ****   }
1266:src/stm32f1xx_hal_rcc.c **** 
1267:src/stm32f1xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1268:src/stm32f1xx_hal_rcc.c ****   if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
1269:src/stm32f1xx_hal_rcc.c ****   {
1270:src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
1271:src/stm32f1xx_hal_rcc.c ****   }
1272:src/stm32f1xx_hal_rcc.c ****   else
1273:src/stm32f1xx_hal_rcc.c ****   {
1274:src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
1275:src/stm32f1xx_hal_rcc.c ****   }
1276:src/stm32f1xx_hal_rcc.c **** 
1277:src/stm32f1xx_hal_rcc.c **** 
1278:src/stm32f1xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
1279:src/stm32f1xx_hal_rcc.c ****   if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
1280:src/stm32f1xx_hal_rcc.c ****   {
1281:src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
1282:src/stm32f1xx_hal_rcc.c ****   }
1283:src/stm32f1xx_hal_rcc.c ****   else
1284:src/stm32f1xx_hal_rcc.c ****   {
1285:src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
1286:src/stm32f1xx_hal_rcc.c ****   }
1287:src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
1288:src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
1289:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CR_PLL2ON)
1290:src/stm32f1xx_hal_rcc.c ****   /* Get the PLL2 configuration -----------------------------------------------*/
1291:src/stm32f1xx_hal_rcc.c ****   if ((RCC->CR & RCC_CR_PLL2ON) == RCC_CR_PLL2ON)
1292:src/stm32f1xx_hal_rcc.c ****   {
1293:src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_ON;
1294:src/stm32f1xx_hal_rcc.c ****   }
1295:src/stm32f1xx_hal_rcc.c ****   else
1296:src/stm32f1xx_hal_rcc.c ****   {
1297:src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
1298:src/stm32f1xx_hal_rcc.c ****   }
1299:src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
1300:src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
1301:src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CR_PLL2ON */
1302:src/stm32f1xx_hal_rcc.c **** }
1303:src/stm32f1xx_hal_rcc.c **** 
ARM GAS  /tmp/ccNjU3LR.s 			page 34


1304:src/stm32f1xx_hal_rcc.c **** /**
1305:src/stm32f1xx_hal_rcc.c ****   * @brief  Get the RCC_ClkInitStruct according to the internal
1306:src/stm32f1xx_hal_rcc.c ****   * RCC configuration registers.
1307:src/stm32f1xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_ClkInitTypeDef structure that
1308:src/stm32f1xx_hal_rcc.c ****   * contains the current clock configuration.
1309:src/stm32f1xx_hal_rcc.c ****   * @param  pFLatency Pointer on the Flash Latency.
1310:src/stm32f1xx_hal_rcc.c ****   * @retval None
1311:src/stm32f1xx_hal_rcc.c ****   */
1312:src/stm32f1xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1313:src/stm32f1xx_hal_rcc.c **** {
1314:src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
1315:src/stm32f1xx_hal_rcc.c ****   assert_param(RCC_ClkInitStruct != NULL);
1316:src/stm32f1xx_hal_rcc.c ****   assert_param(pFLatency != NULL);
1317:src/stm32f1xx_hal_rcc.c **** 
1318:src/stm32f1xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1319:src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
1320:src/stm32f1xx_hal_rcc.c **** 
1321:src/stm32f1xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/
1322:src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
1323:src/stm32f1xx_hal_rcc.c **** 
1324:src/stm32f1xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/
1325:src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
1326:src/stm32f1xx_hal_rcc.c **** 
1327:src/stm32f1xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/
1328:src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
1329:src/stm32f1xx_hal_rcc.c **** 
1330:src/stm32f1xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/
1331:src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
1332:src/stm32f1xx_hal_rcc.c **** 
1333:src/stm32f1xx_hal_rcc.c **** #if   defined(FLASH_ACR_LATENCY)
1334:src/stm32f1xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/
1335:src/stm32f1xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
1336:src/stm32f1xx_hal_rcc.c **** #else
1337:src/stm32f1xx_hal_rcc.c ****   /* For VALUE lines devices, only LATENCY_0 can be set*/
1338:src/stm32f1xx_hal_rcc.c ****   *pFLatency = (uint32_t)FLASH_LATENCY_0;
1339:src/stm32f1xx_hal_rcc.c **** #endif
1340:src/stm32f1xx_hal_rcc.c **** }
1341:src/stm32f1xx_hal_rcc.c **** 
1342:src/stm32f1xx_hal_rcc.c **** /**
1343:src/stm32f1xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1344:src/stm32f1xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1345:src/stm32f1xx_hal_rcc.c ****   * @retval None
1346:src/stm32f1xx_hal_rcc.c ****   */
1347:src/stm32f1xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1348:src/stm32f1xx_hal_rcc.c **** {
1349:src/stm32f1xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
1350:src/stm32f1xx_hal_rcc.c ****   if (__HAL_RCC_GET_IT(RCC_IT_CSS))
1351:src/stm32f1xx_hal_rcc.c ****   {
1352:src/stm32f1xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1353:src/stm32f1xx_hal_rcc.c ****     HAL_RCC_CSSCallback();
1354:src/stm32f1xx_hal_rcc.c **** 
1355:src/stm32f1xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1356:src/stm32f1xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
1357:src/stm32f1xx_hal_rcc.c ****   }
1358:src/stm32f1xx_hal_rcc.c **** }
1359:src/stm32f1xx_hal_rcc.c **** 
1360:src/stm32f1xx_hal_rcc.c **** /**
ARM GAS  /tmp/ccNjU3LR.s 			page 35


1361:src/stm32f1xx_hal_rcc.c ****   * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
1362:src/stm32f1xx_hal_rcc.c ****   * @param  mdelay: specifies the delay time length, in milliseconds.
1363:src/stm32f1xx_hal_rcc.c ****   * @retval None
1364:src/stm32f1xx_hal_rcc.c ****   */
1365:src/stm32f1xx_hal_rcc.c **** static void RCC_Delay(uint32_t mdelay)
1366:src/stm32f1xx_hal_rcc.c **** {
1367:src/stm32f1xx_hal_rcc.c ****   __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 523              		.loc 1 1367 0
 524 0238 4FF4FA52 		mov	r2, #8000	@ tmp352,
 525 023c 464B     		ldr	r3, .L112+12	@ tmp350,
 526 023e 1B68     		ldr	r3, [r3]	@ SystemCoreClock, SystemCoreClock
 527 0240 B3FBF2F3 		udiv	r3, r3, r2	@ _244, SystemCoreClock, tmp352
 528 0244 0193     		str	r3, [sp, #4]	@ _244, Delay
 529              	.L50:
1368:src/stm32f1xx_hal_rcc.c ****   do
1369:src/stm32f1xx_hal_rcc.c ****   {
1370:src/stm32f1xx_hal_rcc.c ****     __NOP();
 530              		.loc 1 1370 0
 531              		.syntax unified
 532              	@ 1370 "src/stm32f1xx_hal_rcc.c" 1
 533 0246 00BF     		nop
 534              	@ 0 "" 2
1371:src/stm32f1xx_hal_rcc.c ****   }
1372:src/stm32f1xx_hal_rcc.c ****   while (Delay --);
 535              		.loc 1 1372 0
 536              		.thumb
 537              		.syntax unified
 538 0248 019B     		ldr	r3, [sp, #4]	@ Delay.5_246, Delay
 539 024a 5A1E     		subs	r2, r3, #1	@ Delay.7_247, Delay.5_246,
 540 024c 0192     		str	r2, [sp, #4]	@ Delay.7_247, Delay
 541 024e 002B     		cmp	r3, #0	@ Delay.5_246
 542 0250 F9D1     		bne	.L50	@
 543 0252 51E7     		b	.L51	@
 544              	.LVL50:
 545              	.L49:
 546              	.LBE11:
 547              	.LBE10:
 496:src/stm32f1xx_hal_rcc.c ****         {
 548              		.loc 1 496 0
 549 0254 FFF7FEFF 		bl	HAL_GetTick	@
 550              	.LVL51:
 551 0258 801B     		subs	r0, r0, r6	@ tmp347,, tickstart
 552 025a 0228     		cmp	r0, #2	@ tmp347,
 553 025c E9D9     		bls	.L48	@,
 554 025e 7DE7     		b	.L33	@
 555              	.LVL52:
 556              	.L47:
 508:src/stm32f1xx_hal_rcc.c **** 
 557              		.loc 1 508 0
 558 0260 1A60     		str	r2, [r3]	@ RCC_OscInitStruct_26(D)->LSIState, MEM[(volatile uint32_t *)1111622784B]
 511:src/stm32f1xx_hal_rcc.c **** 
 559              		.loc 1 511 0
 560 0262 FFF7FEFF 		bl	HAL_GetTick	@
 561              	.LVL53:
 562 0266 0646     		mov	r6, r0	@ tickstart,
 563              	.LVL54:
 564              	.L52:
ARM GAS  /tmp/ccNjU3LR.s 			page 36


 514:src/stm32f1xx_hal_rcc.c ****       {
 565              		.loc 1 514 0
 566 0268 636A     		ldr	r3, [r4, #36]	@ _131, MEM[(struct RCC_TypeDef *)1073876992B].CSR
 567 026a 9F07     		lsls	r7, r3, #30	@, _131,
 568 026c 7FF544AF 		bpl	.L51	@,
 516:src/stm32f1xx_hal_rcc.c ****         {
 569              		.loc 1 516 0
 570 0270 FFF7FEFF 		bl	HAL_GetTick	@
 571              	.LVL55:
 572 0274 801B     		subs	r0, r0, r6	@ tmp355,, tickstart
 573 0276 0228     		cmp	r0, #2	@ tmp355,
 574 0278 F6D9     		bls	.L52	@,
 575 027a 6FE7     		b	.L33	@
 576              	.LVL56:
 577              	.L45:
 578              	.LBB12:
 533:src/stm32f1xx_hal_rcc.c ****     {
 579              		.loc 1 533 0
 580 027c 334C     		ldr	r4, .L112	@ tmp358,
 581 027e E369     		ldr	r3, [r4, #28]	@ _138, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 582 0280 D800     		lsls	r0, r3, #3	@, _138,
 583 0282 24D4     		bmi	.L82	@,
 536:src/stm32f1xx_hal_rcc.c ****     }
 584              		.loc 1 536 0
 585 0284 0127     		movs	r7, #1	@ pwrclkchanged,
 586              	.LBB13:
 535:src/stm32f1xx_hal_rcc.c ****       pwrclkchanged = SET;
 587              		.loc 1 535 0
 588 0286 E369     		ldr	r3, [r4, #28]	@ _140, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 589 0288 43F08053 		orr	r3, r3, #268435456	@ _141, _140,
 590 028c E361     		str	r3, [r4, #28]	@ _141, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 591 028e E369     		ldr	r3, [r4, #28]	@ _143, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 592 0290 03F08053 		and	r3, r3, #268435456	@ tmpreg.1_144, _143,
 593 0294 0093     		str	r3, [sp]	@ tmpreg.1_144, tmpreg
 594 0296 009B     		ldr	r3, [sp]	@ vol.2_146, tmpreg
 595              	.LVL57:
 596              	.L55:
 597              	.LBE13:
 539:src/stm32f1xx_hal_rcc.c ****     {
 598              		.loc 1 539 0
 599 0298 304E     		ldr	r6, .L112+16	@ tmp363,
 600 029a 3368     		ldr	r3, [r6]	@ _147, MEM[(struct PWR_TypeDef *)1073770496B].CR
 601 029c D905     		lsls	r1, r3, #23	@, _147,
 602 029e 18D5     		bpl	.L56	@,
 603              	.L61:
 557:src/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 604              		.loc 1 557 0
 605 02a0 EB68     		ldr	r3, [r5, #12]	@ _159, RCC_OscInitStruct_26(D)->LSEState
 606 02a2 012B     		cmp	r3, #1	@ _159,
 607 02a4 26D1     		bne	.L106	@,
 608              	.L111:
 557:src/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 609              		.loc 1 557 0 is_stmt 0 discriminator 5
 610 02a6 236A     		ldr	r3, [r4, #32]	@ _172,
 611 02a8 43F00103 		orr	r3, r3, #1	@ _173, _172,
 612              	.L109:
 557:src/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
ARM GAS  /tmp/ccNjU3LR.s 			page 37


 613              		.loc 1 557 0 discriminator 6
 614 02ac 2362     		str	r3, [r4, #32]	@ _179,
 562:src/stm32f1xx_hal_rcc.c **** 
 615              		.loc 1 562 0 is_stmt 1 discriminator 6
 616 02ae FFF7FEFF 		bl	HAL_GetTick	@
 617              	.LVL58:
 567:src/stm32f1xx_hal_rcc.c ****         {
 618              		.loc 1 567 0 discriminator 6
 619 02b2 41F28836 		movw	r6, #5000	@ tmp437,
 562:src/stm32f1xx_hal_rcc.c **** 
 620              		.loc 1 562 0 discriminator 6
 621 02b6 8046     		mov	r8, r0	@ tickstart,
 622              	.LVL59:
 623              	.L81:
 565:src/stm32f1xx_hal_rcc.c ****       {
 624              		.loc 1 565 0
 625 02b8 236A     		ldr	r3, [r4, #32]	@ _184, MEM[(struct RCC_TypeDef *)1073876992B].BDCR
 626 02ba 9B07     		lsls	r3, r3, #30	@, _184,
 627 02bc 3FD5     		bpl	.L66	@,
 628              	.LVL60:
 629              	.L69:
 589:src/stm32f1xx_hal_rcc.c ****     {
 630              		.loc 1 589 0
 631 02be 002F     		cmp	r7, #0	@ pwrclkchanged
 632 02c0 3FF41EAF 		beq	.L54	@
 591:src/stm32f1xx_hal_rcc.c ****     }
 633              		.loc 1 591 0
 634 02c4 E369     		ldr	r3, [r4, #28]	@ _196, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 635 02c6 23F08053 		bic	r3, r3, #268435456	@ _197, _196,
 636 02ca E361     		str	r3, [r4, #28]	@ _197, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 637 02cc 18E7     		b	.L54	@
 638              	.LVL61:
 639              	.L82:
 526:src/stm32f1xx_hal_rcc.c **** 
 640              		.loc 1 526 0
 641 02ce 0027     		movs	r7, #0	@ pwrclkchanged,
 642 02d0 E2E7     		b	.L55	@
 643              	.LVL62:
 644              	.L56:
 542:src/stm32f1xx_hal_rcc.c **** 
 645              		.loc 1 542 0
 646 02d2 3368     		ldr	r3, [r6]	@ _149, MEM[(struct PWR_TypeDef *)1073770496B].CR
 647 02d4 43F48073 		orr	r3, r3, #256	@ _150, _149,
 648 02d8 3360     		str	r3, [r6]	@ _150, MEM[(struct PWR_TypeDef *)1073770496B].CR
 545:src/stm32f1xx_hal_rcc.c **** 
 649              		.loc 1 545 0
 650 02da FFF7FEFF 		bl	HAL_GetTick	@
 651              	.LVL63:
 652 02de 8046     		mov	r8, r0	@ tickstart,
 653              	.LVL64:
 654              	.L59:
 547:src/stm32f1xx_hal_rcc.c ****       {
 655              		.loc 1 547 0
 656 02e0 3368     		ldr	r3, [r6]	@ _154, MEM[(struct PWR_TypeDef *)1073770496B].CR
 657 02e2 DA05     		lsls	r2, r3, #23	@, _154,
 658 02e4 DCD4     		bmi	.L61	@,
 549:src/stm32f1xx_hal_rcc.c ****         {
ARM GAS  /tmp/ccNjU3LR.s 			page 38


 659              		.loc 1 549 0
 660 02e6 FFF7FEFF 		bl	HAL_GetTick	@
 661              	.LVL65:
 662 02ea A0EB0800 		sub	r0, r0, r8	@ tmp367,, tickstart
 663 02ee 6428     		cmp	r0, #100	@ tmp367,
 664 02f0 F6D9     		bls	.L59	@,
 665 02f2 33E7     		b	.L33	@
 666              	.LVL66:
 667              	.L106:
 557:src/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 668              		.loc 1 557 0 discriminator 2
 669 02f4 ABB9     		cbnz	r3, .L63	@ _159,
 557:src/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 670              		.loc 1 557 0 is_stmt 0 discriminator 3
 671 02f6 236A     		ldr	r3, [r4, #32]	@ _163, MEM[(struct RCC_TypeDef *)1073876992B].BDCR
 581:src/stm32f1xx_hal_rcc.c ****         {
 672              		.loc 1 581 0 is_stmt 1 discriminator 3
 673 02f8 41F28838 		movw	r8, #5000	@ tmp438,
 557:src/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 674              		.loc 1 557 0 discriminator 3
 675 02fc 23F00103 		bic	r3, r3, #1	@ _164, _163,
 676 0300 2362     		str	r3, [r4, #32]	@ _164, MEM[(struct RCC_TypeDef *)1073876992B].BDCR
 677 0302 236A     		ldr	r3, [r4, #32]	@ _166, MEM[(struct RCC_TypeDef *)1073876992B].BDCR
 678 0304 23F00403 		bic	r3, r3, #4	@ _167, _166,
 679 0308 2362     		str	r3, [r4, #32]	@ _167, MEM[(struct RCC_TypeDef *)1073876992B].BDCR
 576:src/stm32f1xx_hal_rcc.c **** 
 680              		.loc 1 576 0 discriminator 3
 681 030a FFF7FEFF 		bl	HAL_GetTick	@
 682              	.LVL67:
 683 030e 0646     		mov	r6, r0	@ tickstart,
 684              	.LVL68:
 685              	.L64:
 579:src/stm32f1xx_hal_rcc.c ****       {
 686              		.loc 1 579 0
 687 0310 236A     		ldr	r3, [r4, #32]	@ _191, MEM[(struct RCC_TypeDef *)1073876992B].BDCR
 688 0312 9807     		lsls	r0, r3, #30	@, _191,
 689 0314 D3D5     		bpl	.L69	@,
 581:src/stm32f1xx_hal_rcc.c ****         {
 690              		.loc 1 581 0
 691 0316 FFF7FEFF 		bl	HAL_GetTick	@
 692              	.LVL69:
 693 031a 801B     		subs	r0, r0, r6	@ tmp388,, tickstart
 694 031c 4045     		cmp	r0, r8	@ tmp388, tmp438
 695 031e F7D9     		bls	.L64	@,
 696 0320 1CE7     		b	.L33	@
 697              	.LVL70:
 698              	.L63:
 557:src/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 699              		.loc 1 557 0 discriminator 4
 700 0322 052B     		cmp	r3, #5	@ _159,
 701 0324 236A     		ldr	r3, [r4, #32]	@ _169,
 702 0326 03D1     		bne	.L65	@,
 557:src/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 703              		.loc 1 557 0 is_stmt 0 discriminator 5
 704 0328 43F00403 		orr	r3, r3, #4	@ _170, _169,
 705 032c 2362     		str	r3, [r4, #32]	@ _170, MEM[(struct RCC_TypeDef *)1073876992B].BDCR
 706 032e BAE7     		b	.L111	@
ARM GAS  /tmp/ccNjU3LR.s 			page 39


 707              	.L65:
 557:src/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 708              		.loc 1 557 0 discriminator 6
 709 0330 23F00103 		bic	r3, r3, #1	@ _176, _175,
 710 0334 2362     		str	r3, [r4, #32]	@ _176, MEM[(struct RCC_TypeDef *)1073876992B].BDCR
 711 0336 236A     		ldr	r3, [r4, #32]	@ _178, MEM[(struct RCC_TypeDef *)1073876992B].BDCR
 712 0338 23F00403 		bic	r3, r3, #4	@ _179, _178,
 713 033c B6E7     		b	.L109	@
 714              	.LVL71:
 715              	.L66:
 567:src/stm32f1xx_hal_rcc.c ****         {
 716              		.loc 1 567 0 is_stmt 1
 717 033e FFF7FEFF 		bl	HAL_GetTick	@
 718              	.LVL72:
 719 0342 A0EB0800 		sub	r0, r0, r8	@ tmp384,, tickstart
 720 0346 B042     		cmp	r0, r6	@ tmp384, tmp437
 721 0348 B6D9     		bls	.L81	@,
 722 034a 07E7     		b	.L33	@
 723              	.L113:
 724              		.align	2
 725              	.L112:
 726 034c 00100240 		.word	1073876992
 727 0350 00004242 		.word	1111621632
 728 0354 80044242 		.word	1111622784
 729 0358 00000000 		.word	SystemCoreClock
 730 035c 00700040 		.word	1073770496
 731              	.LVL73:
 732              	.L70:
 733              	.LBE12:
 691:src/stm32f1xx_hal_rcc.c ****     {
 734              		.loc 1 691 0
 735 0360 2A4B     		ldr	r3, .L114	@ tmp394,
 736 0362 5A68     		ldr	r2, [r3, #4]	@ _200, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 737 0364 1C46     		mov	r4, r3	@ tmp434, tmp394
 738 0366 02F00C02 		and	r2, r2, #12	@ tmp395, _200,
 739 036a 082A     		cmp	r2, #8	@ tmp395,
 740 036c 3DD0     		beq	.L71	@,
 741 036e 0023     		movs	r3, #0	@ tmp435,
 742 0370 274E     		ldr	r6, .L114+4	@ tmp436,
 693:src/stm32f1xx_hal_rcc.c ****       {
 743              		.loc 1 693 0
 744 0372 0228     		cmp	r0, #2	@ _199,
 700:src/stm32f1xx_hal_rcc.c **** 
 745              		.loc 1 700 0
 746 0374 3360     		str	r3, [r6]	@ tmp435,
 693:src/stm32f1xx_hal_rcc.c ****       {
 747              		.loc 1 693 0
 748 0376 2BD1     		bne	.L72	@,
 703:src/stm32f1xx_hal_rcc.c **** 
 749              		.loc 1 703 0
 750 0378 FFF7FEFF 		bl	HAL_GetTick	@
 751              	.LVL74:
 752 037c 0746     		mov	r7, r0	@ tickstart,
 753              	.LVL75:
 754              	.L73:
 706:src/stm32f1xx_hal_rcc.c ****         {
 755              		.loc 1 706 0
ARM GAS  /tmp/ccNjU3LR.s 			page 40


 756 037e 2368     		ldr	r3, [r4]	@ _205, MEM[(struct RCC_TypeDef *)1073876992B].CR
 757 0380 9901     		lsls	r1, r3, #6	@, _205,
 758 0382 1FD4     		bmi	.L74	@,
 716:src/stm32f1xx_hal_rcc.c ****         {
 759              		.loc 1 716 0
 760 0384 2B6A     		ldr	r3, [r5, #32]	@ _210, RCC_OscInitStruct_26(D)->PLL.PLLSource
 761 0386 B3F5803F 		cmp	r3, #65536	@ _210,
 762 038a 05D1     		bne	.L75	@,
 728:src/stm32f1xx_hal_rcc.c ****         }
 763              		.loc 1 728 0
 764 038c 6268     		ldr	r2, [r4, #4]	@ _211, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 765 038e A968     		ldr	r1, [r5, #8]	@ RCC_OscInitStruct_26(D)->HSEPredivValue, RCC_OscInitStruct_26(D)->HSEPredivValu
 766 0390 22F40032 		bic	r2, r2, #131072	@ tmp402, _211,
 767 0394 0A43     		orrs	r2, r2, r1	@, _214, tmp402, RCC_OscInitStruct_26(D)->HSEPredivValue
 768 0396 6260     		str	r2, [r4, #4]	@ _214, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 769              	.L75:
 732:src/stm32f1xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLMUL);
 770              		.loc 1 732 0
 771 0398 696A     		ldr	r1, [r5, #36]	@ RCC_OscInitStruct_26(D)->PLL.PLLMUL, RCC_OscInitStruct_26(D)->PLL.PLLMUL
 772 039a 6268     		ldr	r2, [r4, #4]	@ _216, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 773 039c 0B43     		orrs	r3, r3, r1	@, tmp406, _210, RCC_OscInitStruct_26(D)->PLL.PLLMUL
 774 039e 22F47412 		bic	r2, r2, #3997696	@ tmp408, _216,
 775 03a2 1343     		orrs	r3, r3, r2	@, _220, tmp406, tmp408
 776 03a4 6360     		str	r3, [r4, #4]	@ _220, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 735:src/stm32f1xx_hal_rcc.c **** 
 777              		.loc 1 735 0
 778 03a6 0123     		movs	r3, #1	@ tmp411,
 779 03a8 3360     		str	r3, [r6]	@ tmp411, MEM[(volatile uint32_t *)1111621728B]
 738:src/stm32f1xx_hal_rcc.c **** 
 780              		.loc 1 738 0
 781 03aa FFF7FEFF 		bl	HAL_GetTick	@
 782              	.LVL76:
 783 03ae 0546     		mov	r5, r0	@ tickstart,
 784              	.LVL77:
 785              	.L76:
 741:src/stm32f1xx_hal_rcc.c ****         {
 786              		.loc 1 741 0
 787 03b0 2368     		ldr	r3, [r4]	@ _225, MEM[(struct RCC_TypeDef *)1073876992B].CR
 788 03b2 9A01     		lsls	r2, r3, #6	@, _225,
 789 03b4 3FF5A8AE 		bmi	.L78	@,
 743:src/stm32f1xx_hal_rcc.c ****           {
 790              		.loc 1 743 0
 791 03b8 FFF7FEFF 		bl	HAL_GetTick	@
 792              	.LVL78:
 793 03bc 401B     		subs	r0, r0, r5	@ tmp412,, tickstart
 794 03be 0228     		cmp	r0, #2	@ tmp412,
 795 03c0 F6D9     		bls	.L76	@,
 796 03c2 CBE6     		b	.L33	@
 797              	.LVL79:
 798              	.L74:
 708:src/stm32f1xx_hal_rcc.c ****           {
 799              		.loc 1 708 0
 800 03c4 FFF7FEFF 		bl	HAL_GetTick	@
 801              	.LVL80:
 802 03c8 C01B     		subs	r0, r0, r7	@ tmp398,, tickstart
 803 03ca 0228     		cmp	r0, #2	@ tmp398,
 804 03cc D7D9     		bls	.L73	@,
ARM GAS  /tmp/ccNjU3LR.s 			page 41


 805 03ce C5E6     		b	.L33	@
 806              	.LVL81:
 807              	.L72:
 755:src/stm32f1xx_hal_rcc.c **** 
 808              		.loc 1 755 0
 809 03d0 FFF7FEFF 		bl	HAL_GetTick	@
 810              	.LVL82:
 811 03d4 0546     		mov	r5, r0	@ tickstart,
 812              	.LVL83:
 813              	.L79:
 758:src/stm32f1xx_hal_rcc.c ****         {
 814              		.loc 1 758 0
 815 03d6 2368     		ldr	r3, [r4]	@ _233, MEM[(struct RCC_TypeDef *)1073876992B].CR
 816 03d8 9B01     		lsls	r3, r3, #6	@, _233,
 817 03da 7FF595AE 		bpl	.L78	@,
 760:src/stm32f1xx_hal_rcc.c ****           {
 818              		.loc 1 760 0
 819 03de FFF7FEFF 		bl	HAL_GetTick	@
 820              	.LVL84:
 821 03e2 401B     		subs	r0, r0, r5	@ tmp417,, tickstart
 822 03e4 0228     		cmp	r0, #2	@ tmp417,
 823 03e6 F6D9     		bls	.L79	@,
 824 03e8 B8E6     		b	.L33	@
 825              	.LVL85:
 826              	.L71:
 770:src/stm32f1xx_hal_rcc.c ****       {
 827              		.loc 1 770 0
 828 03ea 0128     		cmp	r0, #1	@ _199,
 829 03ec 3FF4B7AE 		beq	.L105	@,
 777:src/stm32f1xx_hal_rcc.c ****         if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 830              		.loc 1 777 0
 831 03f0 5868     		ldr	r0, [r3, #4]	@ pll_config, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 832              	.LVL86:
 778:src/stm32f1xx_hal_rcc.c ****             (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 833              		.loc 1 778 0
 834 03f2 2B6A     		ldr	r3, [r5, #32]	@ RCC_OscInitStruct_26(D)->PLL.PLLSource, RCC_OscInitStruct_26(D)->PLL.PLLSource
 835 03f4 00F48032 		and	r2, r0, #65536	@ tmp421, pll_config,
 836 03f8 9A42     		cmp	r2, r3	@ tmp421, RCC_OscInitStruct_26(D)->PLL.PLLSource
 837 03fa 7FF471AE 		bne	.L84	@,
 778:src/stm32f1xx_hal_rcc.c ****             (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 838              		.loc 1 778 0 is_stmt 0 discriminator 1
 839 03fe 6B6A     		ldr	r3, [r5, #36]	@ RCC_OscInitStruct_26(D)->PLL.PLLMUL, RCC_OscInitStruct_26(D)->PLL.PLLMUL
 779:src/stm32f1xx_hal_rcc.c ****         {
 840              		.loc 1 779 0 is_stmt 1 discriminator 1
 841 0400 00F47010 		and	r0, r0, #3932160	@ tmp423, pll_config,
 842              	.LVL87:
 355:src/stm32f1xx_hal_rcc.c ****   }
 843              		.loc 1 355 0 discriminator 1
 844 0404 C01A     		subs	r0, r0, r3	@ <retval>, tmp423, RCC_OscInitStruct_26(D)->PLL.PLLMUL
 845 0406 18BF     		it	ne
 846 0408 0120     		movne	r0, #1	@ <retval>,
 847 040a A8E6     		b	.L105	@
 848              	.L115:
 849              		.align	2
 850              	.L114:
 851 040c 00100240 		.word	1073876992
 852 0410 60004242 		.word	1111621728
ARM GAS  /tmp/ccNjU3LR.s 			page 42


 853              		.cfi_endproc
 854              	.LFE66:
 855              		.size	HAL_RCC_OscConfig, .-HAL_RCC_OscConfig
 856              		.align	1
 857              		.global	HAL_RCC_MCOConfig
 858              		.syntax unified
 859              		.thumb
 860              		.thumb_func
 861              		.fpu softvfp
 862              		.type	HAL_RCC_MCOConfig, %function
 863              	HAL_RCC_MCOConfig:
 864              	.LFB68:
1003:src/stm32f1xx_hal_rcc.c ****   GPIO_InitTypeDef gpio = {0U};
 865              		.loc 1 1003 0
 866              		.cfi_startproc
 867              		@ args = 0, pretend = 0, frame = 24
 868              		@ frame_needed = 0, uses_anonymous_args = 0
 869              	.LVL88:
 870 0414 30B5     		push	{r4, r5, lr}	@
 871              	.LCFI4:
 872              		.cfi_def_cfa_offset 12
 873              		.cfi_offset 4, -12
 874              		.cfi_offset 5, -8
 875              		.cfi_offset 14, -4
 876 0416 87B0     		sub	sp, sp, #28	@,,
 877              	.LCFI5:
 878              		.cfi_def_cfa_offset 40
1003:src/stm32f1xx_hal_rcc.c ****   GPIO_InitTypeDef gpio = {0U};
 879              		.loc 1 1003 0
 880 0418 0D46     		mov	r5, r1	@ RCC_MCOSource, RCC_MCOSource
1004:src/stm32f1xx_hal_rcc.c **** 
 881              		.loc 1 1004 0
 882 041a 1022     		movs	r2, #16	@,
 883              	.LVL89:
 884 041c 0021     		movs	r1, #0	@,
 885              	.LVL90:
 886 041e 02A8     		add	r0, sp, #8	@ tmp135,,
 887              	.LVL91:
 888 0420 FFF7FEFF 		bl	memset	@
 889              	.LVL92:
1016:src/stm32f1xx_hal_rcc.c ****   gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 890              		.loc 1 1016 0
 891 0424 0223     		movs	r3, #2	@ tmp124,
 892 0426 0393     		str	r3, [sp, #12]	@ tmp124, gpio.Mode
1017:src/stm32f1xx_hal_rcc.c ****   gpio.Pull      = GPIO_NOPULL;
 893              		.loc 1 1017 0
 894 0428 0323     		movs	r3, #3	@ tmp125,
 895 042a 0593     		str	r3, [sp, #20]	@ tmp125, gpio.Speed
1019:src/stm32f1xx_hal_rcc.c **** 
 896              		.loc 1 1019 0
 897 042c 4FF48073 		mov	r3, #256	@ tmp126,
 898              	.LBB14:
1022:src/stm32f1xx_hal_rcc.c **** 
 899              		.loc 1 1022 0
 900 0430 0A4C     		ldr	r4, .L117	@ tmp127,
 901              	.LBE14:
1019:src/stm32f1xx_hal_rcc.c **** 
ARM GAS  /tmp/ccNjU3LR.s 			page 43


 902              		.loc 1 1019 0
 903 0432 0293     		str	r3, [sp, #8]	@ tmp126, gpio.Pin
 904              	.LBB15:
1022:src/stm32f1xx_hal_rcc.c **** 
 905              		.loc 1 1022 0
 906 0434 A369     		ldr	r3, [r4, #24]	@ _6, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 907              	.LBE15:
1024:src/stm32f1xx_hal_rcc.c **** 
 908              		.loc 1 1024 0
 909 0436 02A9     		add	r1, sp, #8	@ tmp136,,
 910              	.LBB16:
1022:src/stm32f1xx_hal_rcc.c **** 
 911              		.loc 1 1022 0
 912 0438 43F00403 		orr	r3, r3, #4	@ _7, _6,
 913 043c A361     		str	r3, [r4, #24]	@ _7, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 914 043e A369     		ldr	r3, [r4, #24]	@ _9, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 915              	.LBE16:
1024:src/stm32f1xx_hal_rcc.c **** 
 916              		.loc 1 1024 0
 917 0440 0748     		ldr	r0, .L117+4	@,
 918              	.LBB17:
1022:src/stm32f1xx_hal_rcc.c **** 
 919              		.loc 1 1022 0
 920 0442 03F00403 		and	r3, r3, #4	@ tmpreg.9_10, _9,
 921 0446 0193     		str	r3, [sp, #4]	@ tmpreg.9_10, tmpreg
 922 0448 019B     		ldr	r3, [sp, #4]	@ vol.10_12, tmpreg
 923              	.LBE17:
1024:src/stm32f1xx_hal_rcc.c **** 
 924              		.loc 1 1024 0
 925 044a FFF7FEFF 		bl	HAL_GPIO_Init	@
 926              	.LVL93:
1027:src/stm32f1xx_hal_rcc.c **** }
 927              		.loc 1 1027 0
 928 044e 6168     		ldr	r1, [r4, #4]	@ _14, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 929 0450 21F0E061 		bic	r1, r1, #117440512	@ tmp133, _14,
 930 0454 2943     		orrs	r1, r1, r5	@, _17, tmp133, RCC_MCOSource
 931 0456 6160     		str	r1, [r4, #4]	@ _17, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
1028:src/stm32f1xx_hal_rcc.c **** 
 932              		.loc 1 1028 0
 933 0458 07B0     		add	sp, sp, #28	@,,
 934              	.LCFI6:
 935              		.cfi_def_cfa_offset 12
 936              		@ sp needed	@
 937 045a 30BD     		pop	{r4, r5, pc}	@
 938              	.LVL94:
 939              	.L118:
 940              		.align	2
 941              	.L117:
 942 045c 00100240 		.word	1073876992
 943 0460 00080140 		.word	1073809408
 944              		.cfi_endproc
 945              	.LFE68:
 946              		.size	HAL_RCC_MCOConfig, .-HAL_RCC_MCOConfig
 947              		.align	1
 948              		.global	HAL_RCC_EnableCSS
 949              		.syntax unified
 950              		.thumb
ARM GAS  /tmp/ccNjU3LR.s 			page 44


 951              		.thumb_func
 952              		.fpu softvfp
 953              		.type	HAL_RCC_EnableCSS, %function
 954              	HAL_RCC_EnableCSS:
 955              	.LFB69:
1040:src/stm32f1xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 956              		.loc 1 1040 0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 0
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 960              		@ link register save eliminated.
1041:src/stm32f1xx_hal_rcc.c **** }
 961              		.loc 1 1041 0
 962 0464 0122     		movs	r2, #1	@ tmp111,
 963 0466 014B     		ldr	r3, .L120	@ tmp110,
 964 0468 1A60     		str	r2, [r3]	@ tmp111, MEM[(volatile uint32_t *)1111621708B]
 965 046a 7047     		bx	lr	@
 966              	.L121:
 967              		.align	2
 968              	.L120:
 969 046c 4C004242 		.word	1111621708
 970              		.cfi_endproc
 971              	.LFE69:
 972              		.size	HAL_RCC_EnableCSS, .-HAL_RCC_EnableCSS
 973              		.align	1
 974              		.global	HAL_RCC_DisableCSS
 975              		.syntax unified
 976              		.thumb
 977              		.thumb_func
 978              		.fpu softvfp
 979              		.type	HAL_RCC_DisableCSS, %function
 980              	HAL_RCC_DisableCSS:
 981              	.LFB70:
1049:src/stm32f1xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 982              		.loc 1 1049 0
 983              		.cfi_startproc
 984              		@ args = 0, pretend = 0, frame = 0
 985              		@ frame_needed = 0, uses_anonymous_args = 0
 986              		@ link register save eliminated.
1050:src/stm32f1xx_hal_rcc.c **** }
 987              		.loc 1 1050 0
 988 0470 0022     		movs	r2, #0	@ tmp111,
 989 0472 014B     		ldr	r3, .L123	@ tmp110,
 990 0474 1A60     		str	r2, [r3]	@ tmp111, MEM[(volatile uint32_t *)1111621708B]
 991 0476 7047     		bx	lr	@
 992              	.L124:
 993              		.align	2
 994              	.L123:
 995 0478 4C004242 		.word	1111621708
 996              		.cfi_endproc
 997              	.LFE70:
 998              		.size	HAL_RCC_DisableCSS, .-HAL_RCC_DisableCSS
 999              		.align	1
 1000              		.global	HAL_RCC_GetSysClockFreq
 1001              		.syntax unified
 1002              		.thumb
 1003              		.thumb_func
ARM GAS  /tmp/ccNjU3LR.s 			page 45


 1004              		.fpu softvfp
 1005              		.type	HAL_RCC_GetSysClockFreq, %function
 1006              	HAL_RCC_GetSysClockFreq:
 1007              	.LFB71:
1083:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
 1008              		.loc 1 1083 0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 24
 1011              		@ frame_needed = 0, uses_anonymous_args = 0
 1012 047c 30B5     		push	{r4, r5, lr}	@
 1013              	.LCFI7:
 1014              		.cfi_def_cfa_offset 12
 1015              		.cfi_offset 4, -12
 1016              		.cfi_offset 5, -8
 1017              		.cfi_offset 14, -4
1088:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
 1018              		.loc 1 1088 0
 1019 047e 194B     		ldr	r3, .L133	@ tmp125,
1083:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
 1020              		.loc 1 1083 0
 1021 0480 87B0     		sub	sp, sp, #28	@,,
 1022              	.LCFI8:
 1023              		.cfi_def_cfa_offset 40
1088:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
 1024              		.loc 1 1088 0
 1025 0482 02AC     		add	r4, sp, #8	@ tmp126,,
 1026 0484 03F11005 		add	r5, r3, #16	@ tmp127, tmp125,
 1027              	.L126:
 1028 0488 2246     		mov	r2, r4	@ tmp128, tmp126
 1029 048a 1868     		ldr	r0, [r3]	@ unaligned	@,
 1030 048c 5968     		ldr	r1, [r3, #4]	@ unaligned	@,
 1031 048e 0833     		adds	r3, r3, #8	@ tmp125, tmp125,
 1032 0490 03C2     		stmia	r2!, {r0, r1}	@ tmp128,,
 1033 0492 AB42     		cmp	r3, r5	@ tmp125, tmp127
 1034 0494 1446     		mov	r4, r2	@ tmp126, tmp128
 1035 0496 F7D1     		bne	.L126	@,
1092:src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
 1036              		.loc 1 1092 0
 1037 0498 0123     		movs	r3, #1	@ tmp130,
 1038 049a 8DF80430 		strb	r3, [sp, #4]	@ tmp130, MEM[(uint8_t[2] *)&aPredivFactorTable]
 1039 049e 0223     		movs	r3, #2	@ tmp132,
1102:src/stm32f1xx_hal_rcc.c **** 
 1040              		.loc 1 1102 0
 1041 04a0 1149     		ldr	r1, .L133+4	@ tmp134,
1092:src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
 1042              		.loc 1 1092 0
 1043 04a2 8DF80530 		strb	r3, [sp, #5]	@ tmp132, MEM[(uint8_t[2] *)&aPredivFactorTable + 1B]
 1044              	.LVL95:
1102:src/stm32f1xx_hal_rcc.c **** 
 1045              		.loc 1 1102 0
 1046 04a6 4B68     		ldr	r3, [r1, #4]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1047              	.LVL96:
1105:src/stm32f1xx_hal_rcc.c ****   {
 1048              		.loc 1 1105 0
 1049 04a8 03F00C02 		and	r2, r3, #12	@ tmp135, tmpreg,
 1050 04ac 082A     		cmp	r2, #8	@ tmp135,
 1051 04ae 17D1     		bne	.L132	@,
ARM GAS  /tmp/ccNjU3LR.s 			page 46


1114:src/stm32f1xx_hal_rcc.c ****       if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 1052              		.loc 1 1114 0
 1053 04b0 C3F38342 		ubfx	r2, r3, #18, #4	@ tmp137, tmpreg,,
 1054 04b4 06A8     		add	r0, sp, #24	@ tmp149,,
 1055 04b6 0244     		add	r2, r2, r0	@ tmp138, tmp149
1115:src/stm32f1xx_hal_rcc.c ****       {
 1056              		.loc 1 1115 0
 1057 04b8 DB03     		lsls	r3, r3, #15	@, tmpreg,
 1058              	.LVL97:
1114:src/stm32f1xx_hal_rcc.c ****       if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 1059              		.loc 1 1114 0
 1060 04ba 12F8102C 		ldrb	r2, [r2, #-16]	@ zero_extendqisi2	@ pllmul, aPLLMULFactorTable
 1061              	.LVL98:
1115:src/stm32f1xx_hal_rcc.c ****       {
 1062              		.loc 1 1115 0
 1063 04be 0CD5     		bpl	.L129	@,
1120:src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
 1064              		.loc 1 1120 0
 1065 04c0 4B68     		ldr	r3, [r1, #4]	@ _13, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1066              	.LVL99:
1146:src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
 1067              		.loc 1 1146 0
 1068 04c2 0A48     		ldr	r0, .L133+8	@ tmp142,
1120:src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
 1069              		.loc 1 1120 0
 1070 04c4 C3F34043 		ubfx	r3, r3, #17, #1	@ tmp144, _13,,
 1071              	.LVL100:
1146:src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
 1072              		.loc 1 1146 0
 1073 04c8 5043     		muls	r0, r2, r0	@ tmp141, pllmul
1120:src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
 1074              		.loc 1 1120 0
 1075 04ca 06AA     		add	r2, sp, #24	@ tmp150,,
 1076              	.LVL101:
 1077 04cc 1344     		add	r3, r3, r2	@ tmp145, tmp150
 1078 04ce 13F8143C 		ldrb	r3, [r3, #-20]	@ zero_extendqisi2	@ prediv, aPredivFactorTable
1146:src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
 1079              		.loc 1 1146 0
 1080 04d2 B0FBF3F0 		udiv	r0, r0, r3	@ <retval>, tmp141, prediv
 1081              	.LVL102:
 1082              	.L125:
1165:src/stm32f1xx_hal_rcc.c **** 
 1083              		.loc 1 1165 0
 1084 04d6 07B0     		add	sp, sp, #28	@,,
 1085              	.LCFI9:
 1086              		.cfi_remember_state
 1087              		.cfi_def_cfa_offset 12
 1088              		@ sp needed	@
 1089 04d8 30BD     		pop	{r4, r5, pc}	@
 1090              	.LVL103:
 1091              	.L129:
 1092              	.LCFI10:
 1093              		.cfi_restore_state
1152:src/stm32f1xx_hal_rcc.c ****       }
 1094              		.loc 1 1152 0
 1095 04da 0548     		ldr	r0, .L133+12	@ tmp147,
 1096 04dc 5043     		muls	r0, r2, r0	@ <retval>, pllmul
ARM GAS  /tmp/ccNjU3LR.s 			page 47


 1097              	.LVL104:
 1098 04de FAE7     		b	.L125	@
 1099              	.LVL105:
 1100              	.L132:
1109:src/stm32f1xx_hal_rcc.c ****       break;
 1101              		.loc 1 1109 0
 1102 04e0 0248     		ldr	r0, .L133+8	@ <retval>,
 1103              	.LVL106:
1164:src/stm32f1xx_hal_rcc.c **** }
 1104              		.loc 1 1164 0
 1105 04e2 F8E7     		b	.L125	@
 1106              	.L134:
 1107              		.align	2
 1108              	.L133:
 1109 04e4 00000000 		.word	.LANCHOR0
 1110 04e8 00100240 		.word	1073876992
 1111 04ec 00127A00 		.word	8000000
 1112 04f0 00093D00 		.word	4000000
 1113              		.cfi_endproc
 1114              	.LFE71:
 1115              		.size	HAL_RCC_GetSysClockFreq, .-HAL_RCC_GetSysClockFreq
 1116              		.align	1
 1117              		.global	HAL_RCC_ClockConfig
 1118              		.syntax unified
 1119              		.thumb
 1120              		.thumb_func
 1121              		.fpu softvfp
 1122              		.type	HAL_RCC_ClockConfig, %function
 1123              	HAL_RCC_ClockConfig:
 1124              	.LFB67:
 814:src/stm32f1xx_hal_rcc.c ****   uint32_t tickstart;
 1125              		.loc 1 814 0
 1126              		.cfi_startproc
 1127              		@ args = 0, pretend = 0, frame = 0
 1128              		@ frame_needed = 0, uses_anonymous_args = 0
 1129              	.LVL107:
 1130 04f4 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 1131              	.LCFI11:
 1132              		.cfi_def_cfa_offset 24
 1133              		.cfi_offset 4, -24
 1134              		.cfi_offset 5, -20
 1135              		.cfi_offset 6, -16
 1136              		.cfi_offset 7, -12
 1137              		.cfi_offset 8, -8
 1138              		.cfi_offset 14, -4
 814:src/stm32f1xx_hal_rcc.c ****   uint32_t tickstart;
 1139              		.loc 1 814 0
 1140 04f8 0D46     		mov	r5, r1	@ FLatency, FLatency
 818:src/stm32f1xx_hal_rcc.c ****   {
 1141              		.loc 1 818 0
 1142 04fa 0446     		mov	r4, r0	@ RCC_ClkInitStruct, RCC_ClkInitStruct
 1143 04fc 10B9     		cbnz	r0, .L136	@ RCC_ClkInitStruct,
 1144              	.LVL108:
 1145              	.L141:
 820:src/stm32f1xx_hal_rcc.c ****   }
 1146              		.loc 1 820 0
 1147 04fe 0120     		movs	r0, #1	@ <retval>,
ARM GAS  /tmp/ccNjU3LR.s 			page 48


 1148 0500 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1149              	.LVL109:
 1150              	.L136:
 833:src/stm32f1xx_hal_rcc.c ****   {
 1151              		.loc 1 833 0
 1152 0504 454A     		ldr	r2, .L179	@ tmp177,
 1153 0506 1368     		ldr	r3, [r2]	@ _14, MEM[(struct FLASH_TypeDef *)1073881088B].ACR
 1154 0508 03F00703 		and	r3, r3, #7	@ tmp178, _14,
 1155 050c 8B42     		cmp	r3, r1	@ tmp178, FLatency
 1156 050e 29D3     		bcc	.L138	@,
 1157              	.L142:
 848:src/stm32f1xx_hal_rcc.c ****   {
 1158              		.loc 1 848 0
 1159 0510 2168     		ldr	r1, [r4]	@ _23, RCC_ClkInitStruct_12(D)->ClockType
 1160              	.LVL110:
 1161 0512 8E07     		lsls	r6, r1, #30	@, _23,
 1162 0514 31D4     		bmi	.L139	@,
 1163              	.LVL111:
 1164              	.L140:
 868:src/stm32f1xx_hal_rcc.c ****   {
 1165              		.loc 1 868 0
 1166 0516 CA07     		lsls	r2, r1, #31	@, _23,
 1167 0518 44D4     		bmi	.L145	@,
 1168              	.L153:
 915:src/stm32f1xx_hal_rcc.c ****   {
 1169              		.loc 1 915 0
 1170 051a 404A     		ldr	r2, .L179	@ tmp196,
 1171 051c 1368     		ldr	r3, [r2]	@ _59, MEM[(struct FLASH_TypeDef *)1073881088B].ACR
 1172 051e 03F00703 		and	r3, r3, #7	@ tmp197, _59,
 1173 0522 9D42     		cmp	r5, r3	@ FLatency, tmp197
 1174 0524 67D3     		bcc	.L146	@,
 1175              	.L147:
 930:src/stm32f1xx_hal_rcc.c ****   {
 1176              		.loc 1 930 0
 1177 0526 2268     		ldr	r2, [r4]	@ _67, RCC_ClkInitStruct_12(D)->ClockType
 1178 0528 3D4D     		ldr	r5, .L179+4	@ tmp240,
 1179              	.LVL112:
 1180 052a 12F0040F 		tst	r2, #4	@ _67,
 1181 052e 6ED1     		bne	.L154	@,
 1182              	.L155:
 937:src/stm32f1xx_hal_rcc.c ****   {
 1183              		.loc 1 937 0
 1184 0530 1307     		lsls	r3, r2, #28	@, _67,
 1185 0532 06D5     		bpl	.L156	@,
 940:src/stm32f1xx_hal_rcc.c ****   }
 1186              		.loc 1 940 0
 1187 0534 6B68     		ldr	r3, [r5, #4]	@ _75, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1188 0536 2269     		ldr	r2, [r4, #16]	@ RCC_ClkInitStruct_12(D)->APB2CLKDivider, RCC_ClkInitStruct_12(D)->APB2CLKDivid
 1189 0538 23F46053 		bic	r3, r3, #14336	@ tmp227, _75,
 1190 053c 43EAC203 		orr	r3, r3, r2, lsl #3	@ _79, tmp227, RCC_ClkInitStruct_12(D)->APB2CLKDivider,
 1191 0540 6B60     		str	r3, [r5, #4]	@ _79, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1192              	.L156:
 944:src/stm32f1xx_hal_rcc.c **** 
 1193              		.loc 1 944 0
 1194 0542 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq	@
 1195              	.LVL113:
 1196 0546 6B68     		ldr	r3, [r5, #4]	@ _83, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
ARM GAS  /tmp/ccNjU3LR.s 			page 49


 1197 0548 364A     		ldr	r2, .L179+8	@ tmp231,
 1198 054a C3F30313 		ubfx	r3, r3, #4, #4	@ tmp233, _83,,
 1199 054e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2	@ tmp234, AHBPrescTable
 1200 0550 D840     		lsrs	r0, r0, r3	@ tmp235,, tmp234
 1201 0552 354B     		ldr	r3, .L179+12	@ tmp230,
 1202 0554 1860     		str	r0, [r3]	@ tmp235, SystemCoreClock
 947:src/stm32f1xx_hal_rcc.c **** 
 1203              		.loc 1 947 0
 1204 0556 354B     		ldr	r3, .L179+16	@ tmp236,
 1205 0558 1868     		ldr	r0, [r3]	@, uwTickPrio
 1206 055a FFF7FEFF 		bl	HAL_InitTick	@
 1207              	.LVL114:
 949:src/stm32f1xx_hal_rcc.c **** }
 1208              		.loc 1 949 0
 1209 055e 0020     		movs	r0, #0	@ <retval>,
 1210 0560 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1211              	.LVL115:
 1212              	.L138:
 836:src/stm32f1xx_hal_rcc.c **** 
 1213              		.loc 1 836 0
 1214 0564 1368     		ldr	r3, [r2]	@ _17, MEM[(struct FLASH_TypeDef *)1073881088B].ACR
 1215 0566 23F00703 		bic	r3, r3, #7	@ tmp181, _17,
 1216 056a 0B43     		orrs	r3, r3, r1	@, _19, tmp181, FLatency
 1217 056c 1360     		str	r3, [r2]	@ _19, MEM[(struct FLASH_TypeDef *)1073881088B].ACR
 840:src/stm32f1xx_hal_rcc.c ****   {
 1218              		.loc 1 840 0
 1219 056e 1368     		ldr	r3, [r2]	@ _21, MEM[(struct FLASH_TypeDef *)1073881088B].ACR
 1220 0570 03F00703 		and	r3, r3, #7	@ tmp184, _21,
 1221 0574 9942     		cmp	r1, r3	@ FLatency, tmp184
 1222 0576 C2D1     		bne	.L141	@,
 1223 0578 CAE7     		b	.L142	@
 1224              	.LVL116:
 1225              	.L139:
 1226 057a 294B     		ldr	r3, .L179+4	@ tmp238,
 852:src/stm32f1xx_hal_rcc.c ****     {
 1227              		.loc 1 852 0
 1228 057c 11F0040F 		tst	r1, #4	@ _23,
 854:src/stm32f1xx_hal_rcc.c ****     }
 1229              		.loc 1 854 0
 1230 0580 1EBF     		ittt	ne
 1231 0582 5A68     		ldrne	r2, [r3, #4]	@ _26, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1232 0584 42F4E062 		orrne	r2, r2, #1792	@ _27, _26,
 1233 0588 5A60     		strne	r2, [r3, #4]	@ _27, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 857:src/stm32f1xx_hal_rcc.c ****     {
 1234              		.loc 1 857 0
 1235 058a 0807     		lsls	r0, r1, #28	@, _23,
 1236              	.LVL117:
 859:src/stm32f1xx_hal_rcc.c ****     }
 1237              		.loc 1 859 0
 1238 058c 42BF     		ittt	mi
 1239 058e 5A68     		ldrmi	r2, [r3, #4]	@ _30, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1240 0590 42F46052 		orrmi	r2, r2, #14336	@ _31, _30,
 1241 0594 5A60     		strmi	r2, [r3, #4]	@ _31, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 864:src/stm32f1xx_hal_rcc.c ****   }
 1242              		.loc 1 864 0
 1243 0596 5A68     		ldr	r2, [r3, #4]	@ _33, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1244 0598 A068     		ldr	r0, [r4, #8]	@ RCC_ClkInitStruct_12(D)->AHBCLKDivider, RCC_ClkInitStruct_12(D)->AHBCLKDivider
ARM GAS  /tmp/ccNjU3LR.s 			page 50


 1245 059a 22F0F002 		bic	r2, r2, #240	@ tmp192, _33,
 1246 059e 0243     		orrs	r2, r2, r0	@, _36, tmp192, RCC_ClkInitStruct_12(D)->AHBCLKDivider
 1247 05a0 5A60     		str	r2, [r3, #4]	@ _36, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1248 05a2 B8E7     		b	.L140	@
 1249              	.L145:
 873:src/stm32f1xx_hal_rcc.c ****     {
 1250              		.loc 1 873 0
 1251 05a4 6268     		ldr	r2, [r4, #4]	@ _39, RCC_ClkInitStruct_12(D)->SYSCLKSource
 1252 05a6 1E4E     		ldr	r6, .L179+4	@ tmp239,
 1253 05a8 012A     		cmp	r2, #1	@ _39,
 876:src/stm32f1xx_hal_rcc.c ****       {
 1254              		.loc 1 876 0
 1255 05aa 3368     		ldr	r3, [r6]	@ _40,
 873:src/stm32f1xx_hal_rcc.c ****     {
 1256              		.loc 1 873 0
 1257 05ac 1BD1     		bne	.L148	@,
 876:src/stm32f1xx_hal_rcc.c ****       {
 1258              		.loc 1 876 0
 1259 05ae 13F4003F 		tst	r3, #131072	@ _40,
 1260              	.L177:
 894:src/stm32f1xx_hal_rcc.c ****       {
 1261              		.loc 1 894 0
 1262 05b2 A4D0     		beq	.L141	@,
 899:src/stm32f1xx_hal_rcc.c **** 
 1263              		.loc 1 899 0
 1264 05b4 7368     		ldr	r3, [r6, #4]	@ _46, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 906:src/stm32f1xx_hal_rcc.c ****       {
 1265              		.loc 1 906 0
 1266 05b6 41F28838 		movw	r8, #5000	@ tmp241,
 899:src/stm32f1xx_hal_rcc.c **** 
 1267              		.loc 1 899 0
 1268 05ba 23F00303 		bic	r3, r3, #3	@ tmp205, _46,
 1269 05be 1343     		orrs	r3, r3, r2	@, _48, tmp205, _39
 1270 05c0 7360     		str	r3, [r6, #4]	@ _48, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 902:src/stm32f1xx_hal_rcc.c **** 
 1271              		.loc 1 902 0
 1272 05c2 FFF7FEFF 		bl	HAL_GetTick	@
 1273              	.LVL118:
 1274 05c6 0746     		mov	r7, r0	@ tickstart,
 1275              	.LVL119:
 1276              	.L151:
 904:src/stm32f1xx_hal_rcc.c ****     {
 1277              		.loc 1 904 0
 1278 05c8 7368     		ldr	r3, [r6, #4]	@ _52, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1279 05ca 6268     		ldr	r2, [r4, #4]	@ RCC_ClkInitStruct_12(D)->SYSCLKSource, RCC_ClkInitStruct_12(D)->SYSCLKSource
 1280 05cc 03F00C03 		and	r3, r3, #12	@ tmp210, _52,
 1281 05d0 B3EB820F 		cmp	r3, r2, lsl #2	@ tmp210, RCC_ClkInitStruct_12(D)->SYSCLKSource,
 1282 05d4 A1D0     		beq	.L153	@,
 906:src/stm32f1xx_hal_rcc.c ****       {
 1283              		.loc 1 906 0
 1284 05d6 FFF7FEFF 		bl	HAL_GetTick	@
 1285              	.LVL120:
 1286 05da C01B     		subs	r0, r0, r7	@ tmp207,, tickstart
 1287 05dc 4045     		cmp	r0, r8	@ tmp207, tmp241
 1288 05de F3D9     		bls	.L151	@,
 908:src/stm32f1xx_hal_rcc.c ****       }
 1289              		.loc 1 908 0
ARM GAS  /tmp/ccNjU3LR.s 			page 51


 1290 05e0 0320     		movs	r0, #3	@ <retval>,
 950:src/stm32f1xx_hal_rcc.c **** 
 1291              		.loc 1 950 0
 1292 05e2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1293              	.LVL121:
 1294              	.L148:
 882:src/stm32f1xx_hal_rcc.c ****     {
 1295              		.loc 1 882 0
 1296 05e6 022A     		cmp	r2, #2	@ _39,
 1297 05e8 02D1     		bne	.L150	@,
 885:src/stm32f1xx_hal_rcc.c ****       {
 1298              		.loc 1 885 0
 1299 05ea 13F0007F 		tst	r3, #33554432	@ _42,
 1300 05ee E0E7     		b	.L177	@
 1301              	.L150:
 894:src/stm32f1xx_hal_rcc.c ****       {
 1302              		.loc 1 894 0
 1303 05f0 13F0020F 		tst	r3, #2	@ _44,
 1304 05f4 DDE7     		b	.L177	@
 1305              	.L146:
 918:src/stm32f1xx_hal_rcc.c **** 
 1306              		.loc 1 918 0
 1307 05f6 1368     		ldr	r3, [r2]	@ _61, MEM[(struct FLASH_TypeDef *)1073881088B].ACR
 1308 05f8 23F00703 		bic	r3, r3, #7	@ tmp215, _61,
 1309 05fc 2B43     		orrs	r3, r3, r5	@, _63, tmp215, FLatency
 1310 05fe 1360     		str	r3, [r2]	@ _63, MEM[(struct FLASH_TypeDef *)1073881088B].ACR
 922:src/stm32f1xx_hal_rcc.c ****   {
 1311              		.loc 1 922 0
 1312 0600 1368     		ldr	r3, [r2]	@ _65, MEM[(struct FLASH_TypeDef *)1073881088B].ACR
 1313 0602 03F00703 		and	r3, r3, #7	@ tmp218, _65,
 1314 0606 9D42     		cmp	r5, r3	@ FLatency, tmp218
 1315 0608 7FF479AF 		bne	.L141	@,
 1316 060c 8BE7     		b	.L147	@
 1317              	.LVL122:
 1318              	.L154:
 933:src/stm32f1xx_hal_rcc.c ****   }
 1319              		.loc 1 933 0
 1320 060e 6B68     		ldr	r3, [r5, #4]	@ _69, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1321 0610 E168     		ldr	r1, [r4, #12]	@ RCC_ClkInitStruct_12(D)->APB1CLKDivider, RCC_ClkInitStruct_12(D)->APB1CLKDivid
 1322 0612 23F4E063 		bic	r3, r3, #1792	@ tmp220, _69,
 1323 0616 0B43     		orrs	r3, r3, r1	@, _72, tmp220, RCC_ClkInitStruct_12(D)->APB1CLKDivider
 1324 0618 6B60     		str	r3, [r5, #4]	@ _72, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1325 061a 89E7     		b	.L155	@
 1326              	.L180:
 1327              		.align	2
 1328              	.L179:
 1329 061c 00200240 		.word	1073881088
 1330 0620 00100240 		.word	1073876992
 1331 0624 00000000 		.word	AHBPrescTable
 1332 0628 00000000 		.word	SystemCoreClock
 1333 062c 00000000 		.word	uwTickPrio
 1334              		.cfi_endproc
 1335              	.LFE67:
 1336              		.size	HAL_RCC_ClockConfig, .-HAL_RCC_ClockConfig
 1337              		.align	1
 1338              		.global	HAL_RCC_GetHCLKFreq
 1339              		.syntax unified
ARM GAS  /tmp/ccNjU3LR.s 			page 52


 1340              		.thumb
 1341              		.thumb_func
 1342              		.fpu softvfp
 1343              		.type	HAL_RCC_GetHCLKFreq, %function
 1344              	HAL_RCC_GetHCLKFreq:
 1345              	.LFB72:
1177:src/stm32f1xx_hal_rcc.c ****   return SystemCoreClock;
 1346              		.loc 1 1177 0
 1347              		.cfi_startproc
 1348              		@ args = 0, pretend = 0, frame = 0
 1349              		@ frame_needed = 0, uses_anonymous_args = 0
 1350              		@ link register save eliminated.
1179:src/stm32f1xx_hal_rcc.c **** 
 1351              		.loc 1 1179 0
 1352 0630 014B     		ldr	r3, .L182	@ tmp112,
 1353 0632 1868     		ldr	r0, [r3]	@, SystemCoreClock
 1354 0634 7047     		bx	lr	@
 1355              	.L183:
 1356 0636 00BF     		.align	2
 1357              	.L182:
 1358 0638 00000000 		.word	SystemCoreClock
 1359              		.cfi_endproc
 1360              	.LFE72:
 1361              		.size	HAL_RCC_GetHCLKFreq, .-HAL_RCC_GetHCLKFreq
 1362              		.align	1
 1363              		.global	HAL_RCC_GetPCLK1Freq
 1364              		.syntax unified
 1365              		.thumb
 1366              		.thumb_func
 1367              		.fpu softvfp
 1368              		.type	HAL_RCC_GetPCLK1Freq, %function
 1369              	HAL_RCC_GetPCLK1Freq:
 1370              	.LFB73:
1188:src/stm32f1xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
 1371              		.loc 1 1188 0
 1372              		.cfi_startproc
 1373              		@ args = 0, pretend = 0, frame = 0
 1374              		@ frame_needed = 0, uses_anonymous_args = 0
 1375              		@ link register save eliminated.
1190:src/stm32f1xx_hal_rcc.c **** }
 1376              		.loc 1 1190 0
 1377 063c 044B     		ldr	r3, .L185	@ tmp117,
 1378 063e 054A     		ldr	r2, .L185+4	@ tmp120,
 1379 0640 5B68     		ldr	r3, [r3, #4]	@ _3, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1380 0642 C3F30223 		ubfx	r3, r3, #8, #3	@ tmp122, _3,,
 1381 0646 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2	@ tmp123, APBPrescTable
 1382 0648 034A     		ldr	r2, .L185+8	@ tmp119,
 1383 064a 1068     		ldr	r0, [r2]	@ SystemCoreClock, SystemCoreClock
1191:src/stm32f1xx_hal_rcc.c **** 
 1384              		.loc 1 1191 0
 1385 064c D840     		lsrs	r0, r0, r3	@, SystemCoreClock, tmp123
 1386 064e 7047     		bx	lr	@
 1387              	.L186:
 1388              		.align	2
 1389              	.L185:
 1390 0650 00100240 		.word	1073876992
 1391 0654 00000000 		.word	APBPrescTable
ARM GAS  /tmp/ccNjU3LR.s 			page 53


 1392 0658 00000000 		.word	SystemCoreClock
 1393              		.cfi_endproc
 1394              	.LFE73:
 1395              		.size	HAL_RCC_GetPCLK1Freq, .-HAL_RCC_GetPCLK1Freq
 1396              		.align	1
 1397              		.global	HAL_RCC_GetPCLK2Freq
 1398              		.syntax unified
 1399              		.thumb
 1400              		.thumb_func
 1401              		.fpu softvfp
 1402              		.type	HAL_RCC_GetPCLK2Freq, %function
 1403              	HAL_RCC_GetPCLK2Freq:
 1404              	.LFB74:
1200:src/stm32f1xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
 1405              		.loc 1 1200 0
 1406              		.cfi_startproc
 1407              		@ args = 0, pretend = 0, frame = 0
 1408              		@ frame_needed = 0, uses_anonymous_args = 0
 1409              		@ link register save eliminated.
1202:src/stm32f1xx_hal_rcc.c **** }
 1410              		.loc 1 1202 0
 1411 065c 044B     		ldr	r3, .L188	@ tmp117,
 1412 065e 054A     		ldr	r2, .L188+4	@ tmp120,
 1413 0660 5B68     		ldr	r3, [r3, #4]	@ _3, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1414 0662 C3F3C223 		ubfx	r3, r3, #11, #3	@ tmp122, _3,,
 1415 0666 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2	@ tmp123, APBPrescTable
 1416 0668 034A     		ldr	r2, .L188+8	@ tmp119,
 1417 066a 1068     		ldr	r0, [r2]	@ SystemCoreClock, SystemCoreClock
1203:src/stm32f1xx_hal_rcc.c **** 
 1418              		.loc 1 1203 0
 1419 066c D840     		lsrs	r0, r0, r3	@, SystemCoreClock, tmp123
 1420 066e 7047     		bx	lr	@
 1421              	.L189:
 1422              		.align	2
 1423              	.L188:
 1424 0670 00100240 		.word	1073876992
 1425 0674 00000000 		.word	APBPrescTable
 1426 0678 00000000 		.word	SystemCoreClock
 1427              		.cfi_endproc
 1428              	.LFE74:
 1429              		.size	HAL_RCC_GetPCLK2Freq, .-HAL_RCC_GetPCLK2Freq
 1430              		.align	1
 1431              		.global	HAL_RCC_GetOscConfig
 1432              		.syntax unified
 1433              		.thumb
 1434              		.thumb_func
 1435              		.fpu softvfp
 1436              		.type	HAL_RCC_GetOscConfig, %function
 1437              	HAL_RCC_GetOscConfig:
 1438              	.LFB75:
1213:src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 1439              		.loc 1 1213 0
 1440              		.cfi_startproc
 1441              		@ args = 0, pretend = 0, frame = 0
 1442              		@ frame_needed = 0, uses_anonymous_args = 0
 1443              		@ link register save eliminated.
 1444              	.LVL123:
ARM GAS  /tmp/ccNjU3LR.s 			page 54


1218:src/stm32f1xx_hal_rcc.c ****                                       | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 1445              		.loc 1 1218 0
 1446 067c 0F23     		movs	r3, #15	@ tmp134,
 1447 067e 0360     		str	r3, [r0]	@ tmp134, RCC_OscInitStruct_7(D)->OscillatorType
1227:src/stm32f1xx_hal_rcc.c ****   {
 1448              		.loc 1 1227 0
 1449 0680 1D4B     		ldr	r3, .L204	@ tmp135,
 1450 0682 1A68     		ldr	r2, [r3]	@ _9, MEM[(struct RCC_TypeDef *)1073876992B].CR
 1451 0684 5203     		lsls	r2, r2, #13	@, _9,
 1452 0686 2AD5     		bpl	.L191	@,
1229:src/stm32f1xx_hal_rcc.c ****   }
 1453              		.loc 1 1229 0
 1454 0688 4FF4A022 		mov	r2, #327680	@ tmp137,
 1455              	.L193:
1237:src/stm32f1xx_hal_rcc.c ****   }
 1456              		.loc 1 1237 0
 1457 068c 4260     		str	r2, [r0, #4]	@ tmp139, RCC_OscInitStruct_7(D)->HSEState
1239:src/stm32f1xx_hal_rcc.c **** 
 1458              		.loc 1 1239 0
 1459 068e 5A68     		ldr	r2, [r3, #4]	@ _16, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1460 0690 02F40032 		and	r2, r2, #131072	@ tmp143, _16,
 1461 0694 8260     		str	r2, [r0, #8]	@ tmp143, RCC_OscInitStruct_7(D)->HSEPredivValue
1242:src/stm32f1xx_hal_rcc.c ****   {
 1462              		.loc 1 1242 0
 1463 0696 1A68     		ldr	r2, [r3]	@ _19, MEM[(struct RCC_TypeDef *)1073876992B].CR
 1464 0698 12F00102 		ands	r2, r2, #1	@ tmp145, _19,
1244:src/stm32f1xx_hal_rcc.c ****   }
 1465              		.loc 1 1244 0
 1466 069c 18BF     		it	ne
 1467 069e 0122     		movne	r2, #1	@ tmp146,
1248:src/stm32f1xx_hal_rcc.c ****   }
 1468              		.loc 1 1248 0
 1469 06a0 0261     		str	r2, [r0, #16]	@ tmp145, RCC_OscInitStruct_7(D)->HSIState
1251:src/stm32f1xx_hal_rcc.c **** 
 1470              		.loc 1 1251 0
 1471 06a2 1A68     		ldr	r2, [r3]	@ _23, MEM[(struct RCC_TypeDef *)1073876992B].CR
 1472 06a4 C2F3C402 		ubfx	r2, r2, #3, #5	@ tmp150, _23,,
 1473 06a8 4261     		str	r2, [r0, #20]	@ tmp150, RCC_OscInitStruct_7(D)->HSICalibrationValue
1254:src/stm32f1xx_hal_rcc.c ****   {
 1474              		.loc 1 1254 0
 1475 06aa 1A6A     		ldr	r2, [r3, #32]	@ _27, MEM[(struct RCC_TypeDef *)1073876992B].BDCR
 1476 06ac 5107     		lsls	r1, r2, #29	@, _27,
 1477 06ae 1DD5     		bpl	.L196	@,
1256:src/stm32f1xx_hal_rcc.c ****   }
 1478              		.loc 1 1256 0
 1479 06b0 0522     		movs	r2, #5	@ tmp153,
 1480              	.L198:
1264:src/stm32f1xx_hal_rcc.c ****   }
 1481              		.loc 1 1264 0
 1482 06b2 C260     		str	r2, [r0, #12]	@ tmp155, RCC_OscInitStruct_7(D)->LSEState
1268:src/stm32f1xx_hal_rcc.c ****   {
 1483              		.loc 1 1268 0
 1484 06b4 5A6A     		ldr	r2, [r3, #36]	@ _34, MEM[(struct RCC_TypeDef *)1073876992B].CSR
 1485 06b6 12F00102 		ands	r2, r2, #1	@ tmp159, _34,
1270:src/stm32f1xx_hal_rcc.c ****   }
 1486              		.loc 1 1270 0
 1487 06ba 18BF     		it	ne
ARM GAS  /tmp/ccNjU3LR.s 			page 55


 1488 06bc 0122     		movne	r2, #1	@ tmp160,
1274:src/stm32f1xx_hal_rcc.c ****   }
 1489              		.loc 1 1274 0
 1490 06be 8261     		str	r2, [r0, #24]	@ tmp159, RCC_OscInitStruct_7(D)->LSIState
1279:src/stm32f1xx_hal_rcc.c ****   {
 1491              		.loc 1 1279 0
 1492 06c0 1A68     		ldr	r2, [r3]	@ _38, MEM[(struct RCC_TypeDef *)1073876992B].CR
 1493 06c2 D201     		lsls	r2, r2, #7	@, _38,
1281:src/stm32f1xx_hal_rcc.c ****   }
 1494              		.loc 1 1281 0
 1495 06c4 4CBF     		ite	mi
 1496 06c6 0222     		movmi	r2, #2	@ tmp164,
1285:src/stm32f1xx_hal_rcc.c ****   }
 1497              		.loc 1 1285 0
 1498 06c8 0122     		movpl	r2, #1	@ tmp165,
 1499 06ca C261     		str	r2, [r0, #28]	@ tmp165, RCC_OscInitStruct_7(D)->PLL.PLLState
1287:src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 1500              		.loc 1 1287 0
 1501 06cc 5A68     		ldr	r2, [r3, #4]	@ _42, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1502 06ce 02F48032 		and	r2, r2, #65536	@ tmp167, _42,
 1503 06d2 0262     		str	r2, [r0, #32]	@ tmp167, RCC_OscInitStruct_7(D)->PLL.PLLSource
1288:src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CR_PLL2ON)
 1504              		.loc 1 1288 0
 1505 06d4 5B68     		ldr	r3, [r3, #4]	@ _45, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1506 06d6 03F47013 		and	r3, r3, #3932160	@ tmp169, _45,
 1507 06da 4362     		str	r3, [r0, #36]	@ tmp169, RCC_OscInitStruct_7(D)->PLL.PLLMUL
 1508 06dc 7047     		bx	lr	@
 1509              	.L191:
1231:src/stm32f1xx_hal_rcc.c ****   {
 1510              		.loc 1 1231 0
 1511 06de 1A68     		ldr	r2, [r3]	@ _12, MEM[(struct RCC_TypeDef *)1073876992B].CR
 1512 06e0 12F48032 		ands	r2, r2, #65536	@ tmp139, _12,
1233:src/stm32f1xx_hal_rcc.c ****   }
 1513              		.loc 1 1233 0
 1514 06e4 18BF     		it	ne
 1515 06e6 4FF48032 		movne	r2, #65536	@ tmp140,
 1516 06ea CFE7     		b	.L193	@
 1517              	.L196:
1258:src/stm32f1xx_hal_rcc.c ****   {
 1518              		.loc 1 1258 0
 1519 06ec 1A6A     		ldr	r2, [r3, #32]	@ _30, MEM[(struct RCC_TypeDef *)1073876992B].BDCR
 1520 06ee 12F00102 		ands	r2, r2, #1	@ tmp155, _30,
1260:src/stm32f1xx_hal_rcc.c ****   }
 1521              		.loc 1 1260 0
 1522 06f2 18BF     		it	ne
 1523 06f4 0122     		movne	r2, #1	@ tmp156,
 1524 06f6 DCE7     		b	.L198	@
 1525              	.L205:
 1526              		.align	2
 1527              	.L204:
 1528 06f8 00100240 		.word	1073876992
 1529              		.cfi_endproc
 1530              	.LFE75:
 1531              		.size	HAL_RCC_GetOscConfig, .-HAL_RCC_GetOscConfig
 1532              		.align	1
 1533              		.global	HAL_RCC_GetClockConfig
 1534              		.syntax unified
ARM GAS  /tmp/ccNjU3LR.s 			page 56


 1535              		.thumb
 1536              		.thumb_func
 1537              		.fpu softvfp
 1538              		.type	HAL_RCC_GetClockConfig, %function
 1539              	HAL_RCC_GetClockConfig:
 1540              	.LFB76:
1313:src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 1541              		.loc 1 1313 0
 1542              		.cfi_startproc
 1543              		@ args = 0, pretend = 0, frame = 0
 1544              		@ frame_needed = 0, uses_anonymous_args = 0
 1545              		@ link register save eliminated.
 1546              	.LVL124:
1319:src/stm32f1xx_hal_rcc.c **** 
 1547              		.loc 1 1319 0
 1548 06fc 0F23     		movs	r3, #15	@ tmp123,
 1549 06fe 0360     		str	r3, [r0]	@ tmp123, RCC_ClkInitStruct_2(D)->ClockType
1322:src/stm32f1xx_hal_rcc.c **** 
 1550              		.loc 1 1322 0
 1551 0700 0B4B     		ldr	r3, .L207	@ tmp124,
 1552 0702 5A68     		ldr	r2, [r3, #4]	@ _4, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1553 0704 02F00302 		and	r2, r2, #3	@ tmp125, _4,
 1554 0708 4260     		str	r2, [r0, #4]	@ tmp125, RCC_ClkInitStruct_2(D)->SYSCLKSource
1325:src/stm32f1xx_hal_rcc.c **** 
 1555              		.loc 1 1325 0
 1556 070a 5A68     		ldr	r2, [r3, #4]	@ _7, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1557 070c 02F0F002 		and	r2, r2, #240	@ tmp127, _7,
 1558 0710 8260     		str	r2, [r0, #8]	@ tmp127, RCC_ClkInitStruct_2(D)->AHBCLKDivider
1328:src/stm32f1xx_hal_rcc.c **** 
 1559              		.loc 1 1328 0
 1560 0712 5A68     		ldr	r2, [r3, #4]	@ _10, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1561 0714 02F4E062 		and	r2, r2, #1792	@ tmp129, _10,
 1562 0718 C260     		str	r2, [r0, #12]	@ tmp129, RCC_ClkInitStruct_2(D)->APB1CLKDivider
1331:src/stm32f1xx_hal_rcc.c **** 
 1563              		.loc 1 1331 0
 1564 071a 5B68     		ldr	r3, [r3, #4]	@ _13, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 1565 071c DB08     		lsrs	r3, r3, #3	@ tmp131, _13,
 1566 071e 03F4E063 		and	r3, r3, #1792	@ tmp132, tmp131,
 1567 0722 0361     		str	r3, [r0, #16]	@ tmp132, RCC_ClkInitStruct_2(D)->APB2CLKDivider
1335:src/stm32f1xx_hal_rcc.c **** #else
 1568              		.loc 1 1335 0
 1569 0724 034B     		ldr	r3, .L207+4	@ tmp133,
 1570 0726 1B68     		ldr	r3, [r3]	@ _17, MEM[(struct FLASH_TypeDef *)1073881088B].ACR
 1571 0728 03F00703 		and	r3, r3, #7	@ tmp134, _17,
 1572 072c 0B60     		str	r3, [r1]	@ tmp134, *pFLatency_19(D)
 1573 072e 7047     		bx	lr	@
 1574              	.L208:
 1575              		.align	2
 1576              	.L207:
 1577 0730 00100240 		.word	1073876992
 1578 0734 00200240 		.word	1073881088
 1579              		.cfi_endproc
 1580              	.LFE76:
 1581              		.size	HAL_RCC_GetClockConfig, .-HAL_RCC_GetClockConfig
 1582              		.align	1
 1583              		.weak	HAL_RCC_CSSCallback
 1584              		.syntax unified
ARM GAS  /tmp/ccNjU3LR.s 			page 57


 1585              		.thumb
 1586              		.thumb_func
 1587              		.fpu softvfp
 1588              		.type	HAL_RCC_CSSCallback, %function
 1589              	HAL_RCC_CSSCallback:
 1590              	.LFB79:
1373:src/stm32f1xx_hal_rcc.c **** }
1374:src/stm32f1xx_hal_rcc.c **** 
1375:src/stm32f1xx_hal_rcc.c **** /**
1376:src/stm32f1xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
1377:src/stm32f1xx_hal_rcc.c ****   * @retval none
1378:src/stm32f1xx_hal_rcc.c ****   */
1379:src/stm32f1xx_hal_rcc.c **** __weak void HAL_RCC_CSSCallback(void)
1380:src/stm32f1xx_hal_rcc.c **** {
 1591              		.loc 1 1380 0
 1592              		.cfi_startproc
 1593              		@ args = 0, pretend = 0, frame = 0
 1594              		@ frame_needed = 0, uses_anonymous_args = 0
 1595              		@ link register save eliminated.
 1596 0738 7047     		bx	lr	@
 1597              		.cfi_endproc
 1598              	.LFE79:
 1599              		.size	HAL_RCC_CSSCallback, .-HAL_RCC_CSSCallback
 1600              		.align	1
 1601              		.global	HAL_RCC_NMI_IRQHandler
 1602              		.syntax unified
 1603              		.thumb
 1604              		.thumb_func
 1605              		.fpu softvfp
 1606              		.type	HAL_RCC_NMI_IRQHandler, %function
 1607              	HAL_RCC_NMI_IRQHandler:
 1608              	.LFB77:
1348:src/stm32f1xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
 1609              		.loc 1 1348 0
 1610              		.cfi_startproc
 1611              		@ args = 0, pretend = 0, frame = 0
 1612              		@ frame_needed = 0, uses_anonymous_args = 0
1348:src/stm32f1xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
 1613              		.loc 1 1348 0
 1614 073a 08B5     		push	{r3, lr}	@
 1615              	.LCFI12:
 1616              		.cfi_def_cfa_offset 8
 1617              		.cfi_offset 3, -8
 1618              		.cfi_offset 14, -4
1350:src/stm32f1xx_hal_rcc.c ****   {
 1619              		.loc 1 1350 0
 1620 073c 044B     		ldr	r3, .L215	@ tmp112,
 1621 073e 9B68     		ldr	r3, [r3, #8]	@ _3, MEM[(struct RCC_TypeDef *)1073876992B].CIR
 1622 0740 1B06     		lsls	r3, r3, #24	@, _3,
 1623 0742 04D5     		bpl	.L210	@,
1353:src/stm32f1xx_hal_rcc.c **** 
 1624              		.loc 1 1353 0
 1625 0744 FFF7FEFF 		bl	HAL_RCC_CSSCallback	@
 1626              	.LVL125:
1356:src/stm32f1xx_hal_rcc.c ****   }
 1627              		.loc 1 1356 0
 1628 0748 8022     		movs	r2, #128	@ tmp115,
ARM GAS  /tmp/ccNjU3LR.s 			page 58


 1629 074a 024B     		ldr	r3, .L215+4	@ tmp114,
 1630 074c 1A70     		strb	r2, [r3]	@ tmp115, MEM[(volatile uint8_t *)1073877002B]
 1631              	.L210:
 1632 074e 08BD     		pop	{r3, pc}	@
 1633              	.L216:
 1634              		.align	2
 1635              	.L215:
 1636 0750 00100240 		.word	1073876992
 1637 0754 0A100240 		.word	1073877002
 1638              		.cfi_endproc
 1639              	.LFE77:
 1640              		.size	HAL_RCC_NMI_IRQHandler, .-HAL_RCC_NMI_IRQHandler
 1641              		.section	.rodata
 1642              		.set	.LANCHOR0,. + 0
 1643              	.LC0:
 1644 0000 02       		.byte	2
 1645 0001 03       		.byte	3
 1646 0002 04       		.byte	4
 1647 0003 05       		.byte	5
 1648 0004 06       		.byte	6
 1649 0005 07       		.byte	7
 1650 0006 08       		.byte	8
 1651 0007 09       		.byte	9
 1652 0008 0A       		.byte	10
 1653 0009 0B       		.byte	11
 1654 000a 0C       		.byte	12
 1655 000b 0D       		.byte	13
 1656 000c 0E       		.byte	14
 1657 000d 0F       		.byte	15
 1658 000e 10       		.byte	16
 1659 000f 10       		.byte	16
 1660              		.text
 1661              	.Letext0:
 1662              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1663              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1664              		.file 4 "../cmsiscore/inc/core_cm3.h"
 1665              		.file 5 "../cmsisstm32f1xx/inc/system_stm32f1xx.h"
 1666              		.file 6 "../cmsisstm32f1xx/inc/stm32f103x6.h"
 1667              		.file 7 "../cmsisstm32f1xx/inc/stm32f1xx.h"
 1668              		.file 8 "./inc/stm32f1xx_hal_def.h"
 1669              		.file 9 "./inc/stm32f1xx_hal_rcc.h"
 1670              		.file 10 "./inc/stm32f1xx_hal_rcc_ex.h"
 1671              		.file 11 "./inc/stm32f1xx_hal_gpio.h"
 1672              		.file 12 "./inc/stm32f1xx_hal.h"
 1673              		.section	.debug_info,"",%progbits
 1674              	.Ldebug_info0:
 1675 0000 B00A0000 		.4byte	0xab0
 1676 0004 0200     		.2byte	0x2
 1677 0006 00000000 		.4byte	.Ldebug_abbrev0
 1678 000a 04       		.byte	0x4
 1679 000b 01       		.uleb128 0x1
 1680 000c 17040000 		.4byte	.LASF112
 1681 0010 0C       		.byte	0xc
 1682 0011 57030000 		.4byte	.LASF113
 1683 0015 9C030000 		.4byte	.LASF114
 1684 0019 00000000 		.4byte	.Ltext0
 1685 001d 58070000 		.4byte	.Letext0
ARM GAS  /tmp/ccNjU3LR.s 			page 59


 1686 0021 00000000 		.4byte	.Ldebug_line0
 1687 0025 02       		.uleb128 0x2
 1688 0026 01       		.byte	0x1
 1689 0027 06       		.byte	0x6
 1690 0028 D8000000 		.4byte	.LASF0
 1691 002c 03       		.uleb128 0x3
 1692 002d 3C000000 		.4byte	.LASF3
 1693 0031 02       		.byte	0x2
 1694 0032 1D       		.byte	0x1d
 1695 0033 37000000 		.4byte	0x37
 1696 0037 02       		.uleb128 0x2
 1697 0038 01       		.byte	0x1
 1698 0039 08       		.byte	0x8
 1699 003a D0030000 		.4byte	.LASF1
 1700 003e 02       		.uleb128 0x2
 1701 003f 02       		.byte	0x2
 1702 0040 05       		.byte	0x5
 1703 0041 E9030000 		.4byte	.LASF2
 1704 0045 03       		.uleb128 0x3
 1705 0046 D3040000 		.4byte	.LASF4
 1706 004a 02       		.byte	0x2
 1707 004b 2B       		.byte	0x2b
 1708 004c 50000000 		.4byte	0x50
 1709 0050 02       		.uleb128 0x2
 1710 0051 02       		.byte	0x2
 1711 0052 07       		.byte	0x7
 1712 0053 4E020000 		.4byte	.LASF5
 1713 0057 03       		.uleb128 0x3
 1714 0058 B5020000 		.4byte	.LASF6
 1715 005c 02       		.byte	0x2
 1716 005d 3F       		.byte	0x3f
 1717 005e 62000000 		.4byte	0x62
 1718 0062 02       		.uleb128 0x2
 1719 0063 04       		.byte	0x4
 1720 0064 05       		.byte	0x5
 1721 0065 20010000 		.4byte	.LASF7
 1722 0069 03       		.uleb128 0x3
 1723 006a 7D010000 		.4byte	.LASF8
 1724 006e 02       		.byte	0x2
 1725 006f 41       		.byte	0x41
 1726 0070 74000000 		.4byte	0x74
 1727 0074 02       		.uleb128 0x2
 1728 0075 04       		.byte	0x4
 1729 0076 07       		.byte	0x7
 1730 0077 09020000 		.4byte	.LASF9
 1731 007b 02       		.uleb128 0x2
 1732 007c 08       		.byte	0x8
 1733 007d 05       		.byte	0x5
 1734 007e A1010000 		.4byte	.LASF10
 1735 0082 02       		.uleb128 0x2
 1736 0083 08       		.byte	0x8
 1737 0084 07       		.byte	0x7
 1738 0085 86000000 		.4byte	.LASF11
 1739 0089 04       		.uleb128 0x4
 1740 008a 04       		.byte	0x4
 1741 008b 05       		.byte	0x5
 1742 008c 696E7400 		.ascii	"int\000"
ARM GAS  /tmp/ccNjU3LR.s 			page 60


 1743 0090 02       		.uleb128 0x2
 1744 0091 04       		.byte	0x4
 1745 0092 07       		.byte	0x7
 1746 0093 CA010000 		.4byte	.LASF12
 1747 0097 03       		.uleb128 0x3
 1748 0098 AA050000 		.4byte	.LASF13
 1749 009c 03       		.byte	0x3
 1750 009d 18       		.byte	0x18
 1751 009e 2C000000 		.4byte	0x2c
 1752 00a2 05       		.uleb128 0x5
 1753 00a3 97000000 		.4byte	0x97
 1754 00a7 03       		.uleb128 0x3
 1755 00a8 61010000 		.4byte	.LASF14
 1756 00ac 03       		.byte	0x3
 1757 00ad 24       		.byte	0x24
 1758 00ae 45000000 		.4byte	0x45
 1759 00b2 03       		.uleb128 0x3
 1760 00b3 C8030000 		.4byte	.LASF15
 1761 00b7 03       		.byte	0x3
 1762 00b8 2C       		.byte	0x2c
 1763 00b9 57000000 		.4byte	0x57
 1764 00bd 06       		.uleb128 0x6
 1765 00be B2000000 		.4byte	0xb2
 1766 00c2 03       		.uleb128 0x3
 1767 00c3 92040000 		.4byte	.LASF16
 1768 00c7 03       		.byte	0x3
 1769 00c8 30       		.byte	0x30
 1770 00c9 69000000 		.4byte	0x69
 1771 00cd 06       		.uleb128 0x6
 1772 00ce C2000000 		.4byte	0xc2
 1773 00d2 02       		.uleb128 0x2
 1774 00d3 04       		.byte	0x4
 1775 00d4 07       		.byte	0x7
 1776 00d5 DA020000 		.4byte	.LASF17
 1777 00d9 07       		.uleb128 0x7
 1778 00da B8000000 		.4byte	.LASF18
 1779 00de 04       		.byte	0x4
 1780 00df 4807     		.2byte	0x748
 1781 00e1 BD000000 		.4byte	0xbd
 1782 00e5 01       		.byte	0x1
 1783 00e6 01       		.byte	0x1
 1784 00e7 08       		.uleb128 0x8
 1785 00e8 E3010000 		.4byte	.LASF19
 1786 00ec 05       		.byte	0x5
 1787 00ed 33       		.byte	0x33
 1788 00ee C2000000 		.4byte	0xc2
 1789 00f2 01       		.byte	0x1
 1790 00f3 01       		.byte	0x1
 1791 00f4 09       		.uleb128 0x9
 1792 00f5 A2000000 		.4byte	0xa2
 1793 00f9 04010000 		.4byte	0x104
 1794 00fd 0A       		.uleb128 0xa
 1795 00fe D2000000 		.4byte	0xd2
 1796 0102 0F       		.byte	0xf
 1797 0103 00       		.byte	0
 1798 0104 05       		.uleb128 0x5
 1799 0105 F4000000 		.4byte	0xf4
ARM GAS  /tmp/ccNjU3LR.s 			page 61


 1800 0109 08       		.uleb128 0x8
 1801 010a A7020000 		.4byte	.LASF20
 1802 010e 05       		.byte	0x5
 1803 010f 34       		.byte	0x34
 1804 0110 04010000 		.4byte	0x104
 1805 0114 01       		.byte	0x1
 1806 0115 01       		.byte	0x1
 1807 0116 09       		.uleb128 0x9
 1808 0117 A2000000 		.4byte	0xa2
 1809 011b 26010000 		.4byte	0x126
 1810 011f 0A       		.uleb128 0xa
 1811 0120 D2000000 		.4byte	0xd2
 1812 0124 07       		.byte	0x7
 1813 0125 00       		.byte	0
 1814 0126 05       		.uleb128 0x5
 1815 0127 16010000 		.4byte	0x116
 1816 012b 08       		.uleb128 0x8
 1817 012c 70000000 		.4byte	.LASF21
 1818 0130 05       		.byte	0x5
 1819 0131 35       		.byte	0x35
 1820 0132 26010000 		.4byte	0x126
 1821 0136 01       		.byte	0x1
 1822 0137 01       		.byte	0x1
 1823 0138 0B       		.uleb128 0xb
 1824 0139 24       		.byte	0x24
 1825 013a 06       		.byte	0x6
 1826 013b 4001     		.2byte	0x140
 1827 013d C6010000 		.4byte	0x1c6
 1828 0141 0C       		.uleb128 0xc
 1829 0142 41435200 		.ascii	"ACR\000"
 1830 0146 06       		.byte	0x6
 1831 0147 4201     		.2byte	0x142
 1832 0149 CD000000 		.4byte	0xcd
 1833 014d 02       		.byte	0x2
 1834 014e 23       		.byte	0x23
 1835 014f 00       		.uleb128 0
 1836 0150 0D       		.uleb128 0xd
 1837 0151 7C030000 		.4byte	.LASF22
 1838 0155 06       		.byte	0x6
 1839 0156 4301     		.2byte	0x143
 1840 0158 CD000000 		.4byte	0xcd
 1841 015c 02       		.byte	0x2
 1842 015d 23       		.byte	0x23
 1843 015e 04       		.uleb128 0x4
 1844 015f 0D       		.uleb128 0xd
 1845 0160 59010000 		.4byte	.LASF23
 1846 0164 06       		.byte	0x6
 1847 0165 4401     		.2byte	0x144
 1848 0167 CD000000 		.4byte	0xcd
 1849 016b 02       		.byte	0x2
 1850 016c 23       		.byte	0x23
 1851 016d 08       		.uleb128 0x8
 1852 016e 0C       		.uleb128 0xc
 1853 016f 535200   		.ascii	"SR\000"
 1854 0172 06       		.byte	0x6
 1855 0173 4501     		.2byte	0x145
 1856 0175 CD000000 		.4byte	0xcd
ARM GAS  /tmp/ccNjU3LR.s 			page 62


 1857 0179 02       		.byte	0x2
 1858 017a 23       		.byte	0x23
 1859 017b 0C       		.uleb128 0xc
 1860 017c 0C       		.uleb128 0xc
 1861 017d 435200   		.ascii	"CR\000"
 1862 0180 06       		.byte	0x6
 1863 0181 4601     		.2byte	0x146
 1864 0183 CD000000 		.4byte	0xcd
 1865 0187 02       		.byte	0x2
 1866 0188 23       		.byte	0x23
 1867 0189 10       		.uleb128 0x10
 1868 018a 0C       		.uleb128 0xc
 1869 018b 415200   		.ascii	"AR\000"
 1870 018e 06       		.byte	0x6
 1871 018f 4701     		.2byte	0x147
 1872 0191 CD000000 		.4byte	0xcd
 1873 0195 02       		.byte	0x2
 1874 0196 23       		.byte	0x23
 1875 0197 14       		.uleb128 0x14
 1876 0198 0D       		.uleb128 0xd
 1877 0199 0E040000 		.4byte	.LASF24
 1878 019d 06       		.byte	0x6
 1879 019e 4801     		.2byte	0x148
 1880 01a0 CD000000 		.4byte	0xcd
 1881 01a4 02       		.byte	0x2
 1882 01a5 23       		.byte	0x23
 1883 01a6 18       		.uleb128 0x18
 1884 01a7 0C       		.uleb128 0xc
 1885 01a8 4F425200 		.ascii	"OBR\000"
 1886 01ac 06       		.byte	0x6
 1887 01ad 4901     		.2byte	0x149
 1888 01af CD000000 		.4byte	0xcd
 1889 01b3 02       		.byte	0x2
 1890 01b4 23       		.byte	0x23
 1891 01b5 1C       		.uleb128 0x1c
 1892 01b6 0D       		.uleb128 0xd
 1893 01b7 B1040000 		.4byte	.LASF25
 1894 01bb 06       		.byte	0x6
 1895 01bc 4A01     		.2byte	0x14a
 1896 01be CD000000 		.4byte	0xcd
 1897 01c2 02       		.byte	0x2
 1898 01c3 23       		.byte	0x23
 1899 01c4 20       		.uleb128 0x20
 1900 01c5 00       		.byte	0
 1901 01c6 0E       		.uleb128 0xe
 1902 01c7 E9000000 		.4byte	.LASF26
 1903 01cb 06       		.byte	0x6
 1904 01cc 4B01     		.2byte	0x14b
 1905 01ce 38010000 		.4byte	0x138
 1906 01d2 0B       		.uleb128 0xb
 1907 01d3 1C       		.byte	0x1c
 1908 01d4 06       		.byte	0x6
 1909 01d5 6101     		.2byte	0x161
 1910 01d7 45020000 		.4byte	0x245
 1911 01db 0C       		.uleb128 0xc
 1912 01dc 43524C00 		.ascii	"CRL\000"
 1913 01e0 06       		.byte	0x6
ARM GAS  /tmp/ccNjU3LR.s 			page 63


 1914 01e1 6301     		.2byte	0x163
 1915 01e3 CD000000 		.4byte	0xcd
 1916 01e7 02       		.byte	0x2
 1917 01e8 23       		.byte	0x23
 1918 01e9 00       		.uleb128 0
 1919 01ea 0C       		.uleb128 0xc
 1920 01eb 43524800 		.ascii	"CRH\000"
 1921 01ef 06       		.byte	0x6
 1922 01f0 6401     		.2byte	0x164
 1923 01f2 CD000000 		.4byte	0xcd
 1924 01f6 02       		.byte	0x2
 1925 01f7 23       		.byte	0x23
 1926 01f8 04       		.uleb128 0x4
 1927 01f9 0C       		.uleb128 0xc
 1928 01fa 49445200 		.ascii	"IDR\000"
 1929 01fe 06       		.byte	0x6
 1930 01ff 6501     		.2byte	0x165
 1931 0201 CD000000 		.4byte	0xcd
 1932 0205 02       		.byte	0x2
 1933 0206 23       		.byte	0x23
 1934 0207 08       		.uleb128 0x8
 1935 0208 0C       		.uleb128 0xc
 1936 0209 4F445200 		.ascii	"ODR\000"
 1937 020d 06       		.byte	0x6
 1938 020e 6601     		.2byte	0x166
 1939 0210 CD000000 		.4byte	0xcd
 1940 0214 02       		.byte	0x2
 1941 0215 23       		.byte	0x23
 1942 0216 0C       		.uleb128 0xc
 1943 0217 0D       		.uleb128 0xd
 1944 0218 E4000000 		.4byte	.LASF27
 1945 021c 06       		.byte	0x6
 1946 021d 6701     		.2byte	0x167
 1947 021f CD000000 		.4byte	0xcd
 1948 0223 02       		.byte	0x2
 1949 0224 23       		.byte	0x23
 1950 0225 10       		.uleb128 0x10
 1951 0226 0C       		.uleb128 0xc
 1952 0227 42525200 		.ascii	"BRR\000"
 1953 022b 06       		.byte	0x6
 1954 022c 6801     		.2byte	0x168
 1955 022e CD000000 		.4byte	0xcd
 1956 0232 02       		.byte	0x2
 1957 0233 23       		.byte	0x23
 1958 0234 14       		.uleb128 0x14
 1959 0235 0D       		.uleb128 0xd
 1960 0236 1D000000 		.4byte	.LASF28
 1961 023a 06       		.byte	0x6
 1962 023b 6901     		.2byte	0x169
 1963 023d CD000000 		.4byte	0xcd
 1964 0241 02       		.byte	0x2
 1965 0242 23       		.byte	0x23
 1966 0243 18       		.uleb128 0x18
 1967 0244 00       		.byte	0
 1968 0245 0E       		.uleb128 0xe
 1969 0246 1B020000 		.4byte	.LASF29
 1970 024a 06       		.byte	0x6
ARM GAS  /tmp/ccNjU3LR.s 			page 64


 1971 024b 6A01     		.2byte	0x16a
 1972 024d D2010000 		.4byte	0x1d2
 1973 0251 0B       		.uleb128 0xb
 1974 0252 08       		.byte	0x8
 1975 0253 06       		.byte	0x6
 1976 0254 9901     		.2byte	0x199
 1977 0256 78020000 		.4byte	0x278
 1978 025a 0C       		.uleb128 0xc
 1979 025b 435200   		.ascii	"CR\000"
 1980 025e 06       		.byte	0x6
 1981 025f 9B01     		.2byte	0x19b
 1982 0261 CD000000 		.4byte	0xcd
 1983 0265 02       		.byte	0x2
 1984 0266 23       		.byte	0x23
 1985 0267 00       		.uleb128 0
 1986 0268 0C       		.uleb128 0xc
 1987 0269 43535200 		.ascii	"CSR\000"
 1988 026d 06       		.byte	0x6
 1989 026e 9C01     		.2byte	0x19c
 1990 0270 CD000000 		.4byte	0xcd
 1991 0274 02       		.byte	0x2
 1992 0275 23       		.byte	0x23
 1993 0276 04       		.uleb128 0x4
 1994 0277 00       		.byte	0
 1995 0278 0E       		.uleb128 0xe
 1996 0279 F7000000 		.4byte	.LASF30
 1997 027d 06       		.byte	0x6
 1998 027e 9D01     		.2byte	0x19d
 1999 0280 51020000 		.4byte	0x251
 2000 0284 0B       		.uleb128 0xb
 2001 0285 28       		.byte	0x28
 2002 0286 06       		.byte	0x6
 2003 0287 A301     		.2byte	0x1a3
 2004 0289 23030000 		.4byte	0x323
 2005 028d 0C       		.uleb128 0xc
 2006 028e 435200   		.ascii	"CR\000"
 2007 0291 06       		.byte	0x6
 2008 0292 A501     		.2byte	0x1a5
 2009 0294 CD000000 		.4byte	0xcd
 2010 0298 02       		.byte	0x2
 2011 0299 23       		.byte	0x23
 2012 029a 00       		.uleb128 0
 2013 029b 0D       		.uleb128 0xd
 2014 029c E2050000 		.4byte	.LASF31
 2015 02a0 06       		.byte	0x6
 2016 02a1 A601     		.2byte	0x1a6
 2017 02a3 CD000000 		.4byte	0xcd
 2018 02a7 02       		.byte	0x2
 2019 02a8 23       		.byte	0x23
 2020 02a9 04       		.uleb128 0x4
 2021 02aa 0C       		.uleb128 0xc
 2022 02ab 43495200 		.ascii	"CIR\000"
 2023 02af 06       		.byte	0x6
 2024 02b0 A701     		.2byte	0x1a7
 2025 02b2 CD000000 		.4byte	0xcd
 2026 02b6 02       		.byte	0x2
 2027 02b7 23       		.byte	0x23
ARM GAS  /tmp/ccNjU3LR.s 			page 65


 2028 02b8 08       		.uleb128 0x8
 2029 02b9 0D       		.uleb128 0xd
 2030 02ba 29010000 		.4byte	.LASF32
 2031 02be 06       		.byte	0x6
 2032 02bf A801     		.2byte	0x1a8
 2033 02c1 CD000000 		.4byte	0xcd
 2034 02c5 02       		.byte	0x2
 2035 02c6 23       		.byte	0x23
 2036 02c7 0C       		.uleb128 0xc
 2037 02c8 0D       		.uleb128 0xd
 2038 02c9 4E030000 		.4byte	.LASF33
 2039 02cd 06       		.byte	0x6
 2040 02ce A901     		.2byte	0x1a9
 2041 02d0 CD000000 		.4byte	0xcd
 2042 02d4 02       		.byte	0x2
 2043 02d5 23       		.byte	0x23
 2044 02d6 10       		.uleb128 0x10
 2045 02d7 0D       		.uleb128 0xd
 2046 02d8 3B060000 		.4byte	.LASF34
 2047 02dc 06       		.byte	0x6
 2048 02dd AA01     		.2byte	0x1aa
 2049 02df CD000000 		.4byte	0xcd
 2050 02e3 02       		.byte	0x2
 2051 02e4 23       		.byte	0x23
 2052 02e5 14       		.uleb128 0x14
 2053 02e6 0D       		.uleb128 0xd
 2054 02e7 6C040000 		.4byte	.LASF35
 2055 02eb 06       		.byte	0x6
 2056 02ec AB01     		.2byte	0x1ab
 2057 02ee CD000000 		.4byte	0xcd
 2058 02f2 02       		.byte	0x2
 2059 02f3 23       		.byte	0x23
 2060 02f4 18       		.uleb128 0x18
 2061 02f5 0D       		.uleb128 0xd
 2062 02f6 4D050000 		.4byte	.LASF36
 2063 02fa 06       		.byte	0x6
 2064 02fb AC01     		.2byte	0x1ac
 2065 02fd CD000000 		.4byte	0xcd
 2066 0301 02       		.byte	0x2
 2067 0302 23       		.byte	0x23
 2068 0303 1C       		.uleb128 0x1c
 2069 0304 0D       		.uleb128 0xd
 2070 0305 A5050000 		.4byte	.LASF37
 2071 0309 06       		.byte	0x6
 2072 030a AD01     		.2byte	0x1ad
 2073 030c CD000000 		.4byte	0xcd
 2074 0310 02       		.byte	0x2
 2075 0311 23       		.byte	0x23
 2076 0312 20       		.uleb128 0x20
 2077 0313 0C       		.uleb128 0xc
 2078 0314 43535200 		.ascii	"CSR\000"
 2079 0318 06       		.byte	0x6
 2080 0319 AE01     		.2byte	0x1ae
 2081 031b CD000000 		.4byte	0xcd
 2082 031f 02       		.byte	0x2
 2083 0320 23       		.byte	0x23
 2084 0321 24       		.uleb128 0x24
ARM GAS  /tmp/ccNjU3LR.s 			page 66


 2085 0322 00       		.byte	0
 2086 0323 0E       		.uleb128 0xe
 2087 0324 28020000 		.4byte	.LASF38
 2088 0328 06       		.byte	0x6
 2089 0329 B101     		.2byte	0x1b1
 2090 032b 84020000 		.4byte	0x284
 2091 032f 0F       		.uleb128 0xf
 2092 0330 01       		.byte	0x1
 2093 0331 37000000 		.4byte	0x37
 2094 0335 07       		.byte	0x7
 2095 0336 98       		.byte	0x98
 2096 0337 48030000 		.4byte	0x348
 2097 033b 10       		.uleb128 0x10
 2098 033c 81030000 		.4byte	.LASF39
 2099 0340 00       		.byte	0
 2100 0341 11       		.uleb128 0x11
 2101 0342 53455400 		.ascii	"SET\000"
 2102 0346 01       		.byte	0x1
 2103 0347 00       		.byte	0
 2104 0348 03       		.uleb128 0x3
 2105 0349 22000000 		.4byte	.LASF40
 2106 034d 07       		.byte	0x7
 2107 034e 9B       		.byte	0x9b
 2108 034f 2F030000 		.4byte	0x32f
 2109 0353 0F       		.uleb128 0xf
 2110 0354 01       		.byte	0x1
 2111 0355 37000000 		.4byte	0x37
 2112 0359 07       		.byte	0x7
 2113 035a 9E       		.byte	0x9e
 2114 035b 6C030000 		.4byte	0x36c
 2115 035f 10       		.uleb128 0x10
 2116 0360 7E000000 		.4byte	.LASF41
 2117 0364 00       		.byte	0
 2118 0365 10       		.uleb128 0x10
 2119 0366 42010000 		.4byte	.LASF42
 2120 036a 01       		.byte	0x1
 2121 036b 00       		.byte	0
 2122 036c 02       		.uleb128 0x2
 2123 036d 08       		.byte	0x8
 2124 036e 04       		.byte	0x4
 2125 036f A5040000 		.4byte	.LASF43
 2126 0373 0F       		.uleb128 0xf
 2127 0374 01       		.byte	0x1
 2128 0375 37000000 		.4byte	0x37
 2129 0379 08       		.byte	0x8
 2130 037a 2A       		.byte	0x2a
 2131 037b 98030000 		.4byte	0x398
 2132 037f 10       		.uleb128 0x10
 2133 0380 47020000 		.4byte	.LASF44
 2134 0384 00       		.byte	0
 2135 0385 10       		.uleb128 0x10
 2136 0386 9B040000 		.4byte	.LASF45
 2137 038a 01       		.byte	0x1
 2138 038b 10       		.uleb128 0x10
 2139 038c F1050000 		.4byte	.LASF46
 2140 0390 02       		.byte	0x2
 2141 0391 10       		.uleb128 0x10
ARM GAS  /tmp/ccNjU3LR.s 			page 67


 2142 0392 D7010000 		.4byte	.LASF47
 2143 0396 03       		.byte	0x3
 2144 0397 00       		.byte	0
 2145 0398 03       		.uleb128 0x3
 2146 0399 95020000 		.4byte	.LASF48
 2147 039d 08       		.byte	0x8
 2148 039e 2F       		.byte	0x2f
 2149 039f 73030000 		.4byte	0x373
 2150 03a3 12       		.uleb128 0x12
 2151 03a4 0C       		.byte	0xc
 2152 03a5 09       		.byte	0x9
 2153 03a6 31       		.byte	0x31
 2154 03a7 D6030000 		.4byte	0x3d6
 2155 03ab 13       		.uleb128 0x13
 2156 03ac 59000000 		.4byte	.LASF49
 2157 03b0 09       		.byte	0x9
 2158 03b1 33       		.byte	0x33
 2159 03b2 C2000000 		.4byte	0xc2
 2160 03b6 02       		.byte	0x2
 2161 03b7 23       		.byte	0x23
 2162 03b8 00       		.uleb128 0
 2163 03b9 13       		.uleb128 0x13
 2164 03ba 04040000 		.4byte	.LASF50
 2165 03be 09       		.byte	0x9
 2166 03bf 36       		.byte	0x36
 2167 03c0 C2000000 		.4byte	0xc2
 2168 03c4 02       		.byte	0x2
 2169 03c5 23       		.byte	0x23
 2170 03c6 04       		.uleb128 0x4
 2171 03c7 13       		.uleb128 0x13
 2172 03c8 3B010000 		.4byte	.LASF51
 2173 03cc 09       		.byte	0x9
 2174 03cd 39       		.byte	0x39
 2175 03ce C2000000 		.4byte	0xc2
 2176 03d2 02       		.byte	0x2
 2177 03d3 23       		.byte	0x23
 2178 03d4 08       		.uleb128 0x8
 2179 03d5 00       		.byte	0
 2180 03d6 03       		.uleb128 0x3
 2181 03d7 B2050000 		.4byte	.LASF52
 2182 03db 09       		.byte	0x9
 2183 03dc 3B       		.byte	0x3b
 2184 03dd A3030000 		.4byte	0x3a3
 2185 03e1 12       		.uleb128 0x12
 2186 03e2 14       		.byte	0x14
 2187 03e3 09       		.byte	0x9
 2188 03e4 40       		.byte	0x40
 2189 03e5 30040000 		.4byte	0x430
 2190 03e9 13       		.uleb128 0x13
 2191 03ea C5050000 		.4byte	.LASF53
 2192 03ee 09       		.byte	0x9
 2193 03ef 42       		.byte	0x42
 2194 03f0 C2000000 		.4byte	0xc2
 2195 03f4 02       		.byte	0x2
 2196 03f5 23       		.byte	0x23
 2197 03f6 00       		.uleb128 0
 2198 03f7 13       		.uleb128 0x13
ARM GAS  /tmp/ccNjU3LR.s 			page 68


 2199 03f8 42060000 		.4byte	.LASF54
 2200 03fc 09       		.byte	0x9
 2201 03fd 45       		.byte	0x45
 2202 03fe C2000000 		.4byte	0xc2
 2203 0402 02       		.byte	0x2
 2204 0403 23       		.byte	0x23
 2205 0404 04       		.uleb128 0x4
 2206 0405 13       		.uleb128 0x13
 2207 0406 BF020000 		.4byte	.LASF55
 2208 040a 09       		.byte	0x9
 2209 040b 48       		.byte	0x48
 2210 040c C2000000 		.4byte	0xc2
 2211 0410 02       		.byte	0x2
 2212 0411 23       		.byte	0x23
 2213 0412 08       		.uleb128 0x8
 2214 0413 13       		.uleb128 0x13
 2215 0414 2D000000 		.4byte	.LASF56
 2216 0418 09       		.byte	0x9
 2217 0419 4B       		.byte	0x4b
 2218 041a C2000000 		.4byte	0xc2
 2219 041e 02       		.byte	0x2
 2220 041f 23       		.byte	0x23
 2221 0420 0C       		.uleb128 0xc
 2222 0421 13       		.uleb128 0x13
 2223 0422 19050000 		.4byte	.LASF57
 2224 0426 09       		.byte	0x9
 2225 0427 4E       		.byte	0x4e
 2226 0428 C2000000 		.4byte	0xc2
 2227 042c 02       		.byte	0x2
 2228 042d 23       		.byte	0x23
 2229 042e 10       		.uleb128 0x10
 2230 042f 00       		.byte	0
 2231 0430 03       		.uleb128 0x3
 2232 0431 29030000 		.4byte	.LASF58
 2233 0435 09       		.byte	0x9
 2234 0436 50       		.byte	0x50
 2235 0437 E1030000 		.4byte	0x3e1
 2236 043b 12       		.uleb128 0x12
 2237 043c 28       		.byte	0x28
 2238 043d 0A       		.byte	0xa
 2239 043e E4       		.byte	0xe4
 2240 043f B5040000 		.4byte	0x4b5
 2241 0443 13       		.uleb128 0x13
 2242 0444 74020000 		.4byte	.LASF59
 2243 0448 0A       		.byte	0xa
 2244 0449 E6       		.byte	0xe6
 2245 044a C2000000 		.4byte	0xc2
 2246 044e 02       		.byte	0x2
 2247 044f 23       		.byte	0x23
 2248 0450 00       		.uleb128 0
 2249 0451 13       		.uleb128 0x13
 2250 0452 C1010000 		.4byte	.LASF60
 2251 0456 0A       		.byte	0xa
 2252 0457 EE       		.byte	0xee
 2253 0458 C2000000 		.4byte	0xc2
 2254 045c 02       		.byte	0x2
 2255 045d 23       		.byte	0x23
ARM GAS  /tmp/ccNjU3LR.s 			page 69


 2256 045e 04       		.uleb128 0x4
 2257 045f 13       		.uleb128 0x13
 2258 0460 09030000 		.4byte	.LASF61
 2259 0464 0A       		.byte	0xa
 2260 0465 F1       		.byte	0xf1
 2261 0466 C2000000 		.4byte	0xc2
 2262 046a 02       		.byte	0x2
 2263 046b 23       		.byte	0x23
 2264 046c 08       		.uleb128 0x8
 2265 046d 13       		.uleb128 0x13
 2266 046e 9D000000 		.4byte	.LASF62
 2267 0472 0A       		.byte	0xa
 2268 0473 F4       		.byte	0xf4
 2269 0474 C2000000 		.4byte	0xc2
 2270 0478 02       		.byte	0x2
 2271 0479 23       		.byte	0x23
 2272 047a 0C       		.uleb128 0xc
 2273 047b 13       		.uleb128 0x13
 2274 047c 50010000 		.4byte	.LASF63
 2275 0480 0A       		.byte	0xa
 2276 0481 F7       		.byte	0xf7
 2277 0482 C2000000 		.4byte	0xc2
 2278 0486 02       		.byte	0x2
 2279 0487 23       		.byte	0x23
 2280 0488 10       		.uleb128 0x10
 2281 0489 13       		.uleb128 0x13
 2282 048a 74040000 		.4byte	.LASF64
 2283 048e 0A       		.byte	0xa
 2284 048f FA       		.byte	0xfa
 2285 0490 C2000000 		.4byte	0xc2
 2286 0494 02       		.byte	0x2
 2287 0495 23       		.byte	0x23
 2288 0496 14       		.uleb128 0x14
 2289 0497 13       		.uleb128 0x13
 2290 0498 32010000 		.4byte	.LASF65
 2291 049c 0A       		.byte	0xa
 2292 049d FD       		.byte	0xfd
 2293 049e C2000000 		.4byte	0xc2
 2294 04a2 02       		.byte	0x2
 2295 04a3 23       		.byte	0x23
 2296 04a4 18       		.uleb128 0x18
 2297 04a5 0C       		.uleb128 0xc
 2298 04a6 504C4C00 		.ascii	"PLL\000"
 2299 04aa 0A       		.byte	0xa
 2300 04ab 0001     		.2byte	0x100
 2301 04ad D6030000 		.4byte	0x3d6
 2302 04b1 02       		.byte	0x2
 2303 04b2 23       		.byte	0x23
 2304 04b3 1C       		.uleb128 0x1c
 2305 04b4 00       		.byte	0
 2306 04b5 0E       		.uleb128 0xe
 2307 04b6 C5000000 		.4byte	.LASF66
 2308 04ba 0A       		.byte	0xa
 2309 04bb 0501     		.2byte	0x105
 2310 04bd 3B040000 		.4byte	0x43b
 2311 04c1 12       		.uleb128 0x12
 2312 04c2 10       		.byte	0x10
ARM GAS  /tmp/ccNjU3LR.s 			page 70


 2313 04c3 0B       		.byte	0xb
 2314 04c4 2F       		.byte	0x2f
 2315 04c5 02050000 		.4byte	0x502
 2316 04c9 14       		.uleb128 0x14
 2317 04ca 50696E00 		.ascii	"Pin\000"
 2318 04ce 0B       		.byte	0xb
 2319 04cf 31       		.byte	0x31
 2320 04d0 C2000000 		.4byte	0xc2
 2321 04d4 02       		.byte	0x2
 2322 04d5 23       		.byte	0x23
 2323 04d6 00       		.uleb128 0
 2324 04d7 13       		.uleb128 0x13
 2325 04d8 88010000 		.4byte	.LASF67
 2326 04dc 0B       		.byte	0xb
 2327 04dd 34       		.byte	0x34
 2328 04de C2000000 		.4byte	0xc2
 2329 04e2 02       		.byte	0x2
 2330 04e3 23       		.byte	0x23
 2331 04e4 04       		.uleb128 0x4
 2332 04e5 13       		.uleb128 0x13
 2333 04e6 D4050000 		.4byte	.LASF68
 2334 04ea 0B       		.byte	0xb
 2335 04eb 37       		.byte	0x37
 2336 04ec C2000000 		.4byte	0xc2
 2337 04f0 02       		.byte	0x2
 2338 04f1 23       		.byte	0x23
 2339 04f2 08       		.uleb128 0x8
 2340 04f3 13       		.uleb128 0x13
 2341 04f4 EF020000 		.4byte	.LASF69
 2342 04f8 0B       		.byte	0xb
 2343 04f9 3A       		.byte	0x3a
 2344 04fa C2000000 		.4byte	0xc2
 2345 04fe 02       		.byte	0x2
 2346 04ff 23       		.byte	0x23
 2347 0500 0C       		.uleb128 0xc
 2348 0501 00       		.byte	0
 2349 0502 03       		.uleb128 0x3
 2350 0503 18030000 		.4byte	.LASF70
 2351 0507 0B       		.byte	0xb
 2352 0508 3C       		.byte	0x3c
 2353 0509 C1040000 		.4byte	0x4c1
 2354 050d 0F       		.uleb128 0xf
 2355 050e 01       		.byte	0x1
 2356 050f 37000000 		.4byte	0x37
 2357 0513 0C       		.byte	0xc
 2358 0514 33       		.byte	0x33
 2359 0515 32050000 		.4byte	0x532
 2360 0519 10       		.uleb128 0x10
 2361 051a 6A010000 		.4byte	.LASF71
 2362 051e 64       		.byte	0x64
 2363 051f 10       		.uleb128 0x10
 2364 0520 05050000 		.4byte	.LASF72
 2365 0524 0A       		.byte	0xa
 2366 0525 10       		.uleb128 0x10
 2367 0526 34020000 		.4byte	.LASF73
 2368 052a 01       		.byte	0x1
 2369 052b 10       		.uleb128 0x10
ARM GAS  /tmp/ccNjU3LR.s 			page 71


 2370 052c 0A010000 		.4byte	.LASF74
 2371 0530 01       		.byte	0x1
 2372 0531 00       		.byte	0
 2373 0532 03       		.uleb128 0x3
 2374 0533 8D010000 		.4byte	.LASF75
 2375 0537 0C       		.byte	0xc
 2376 0538 38       		.byte	0x38
 2377 0539 0D050000 		.4byte	0x50d
 2378 053d 08       		.uleb128 0x8
 2379 053e C8040000 		.4byte	.LASF76
 2380 0542 0C       		.byte	0xc
 2381 0543 3D       		.byte	0x3d
 2382 0544 C2000000 		.4byte	0xc2
 2383 0548 01       		.byte	0x1
 2384 0549 01       		.byte	0x1
 2385 054a 08       		.uleb128 0x8
 2386 054b F3010000 		.4byte	.LASF77
 2387 054f 0C       		.byte	0xc
 2388 0550 3E       		.byte	0x3e
 2389 0551 32050000 		.4byte	0x532
 2390 0555 01       		.byte	0x1
 2391 0556 01       		.byte	0x1
 2392 0557 15       		.uleb128 0x15
 2393 0558 01       		.byte	0x1
 2394 0559 09000000 		.4byte	.LASF93
 2395 055d 01       		.byte	0x1
 2396 055e 6305     		.2byte	0x563
 2397 0560 01       		.byte	0x1
 2398 0561 38070000 		.4byte	.LFB79
 2399 0565 3A070000 		.4byte	.LFE79
 2400 0569 02       		.byte	0x2
 2401 056a 7D       		.byte	0x7d
 2402 056b 00       		.sleb128 0
 2403 056c 01       		.byte	0x1
 2404 056d 16       		.uleb128 0x16
 2405 056e 88040000 		.4byte	.LASF115
 2406 0572 01       		.byte	0x1
 2407 0573 5505     		.2byte	0x555
 2408 0575 01       		.byte	0x1
 2409 0576 01       		.byte	0x1
 2410 0577 94050000 		.4byte	0x594
 2411 057b 17       		.uleb128 0x17
 2412 057c 8A050000 		.4byte	.LASF116
 2413 0580 01       		.byte	0x1
 2414 0581 5505     		.2byte	0x555
 2415 0583 C2000000 		.4byte	0xc2
 2416 0587 18       		.uleb128 0x18
 2417 0588 F5020000 		.4byte	.LASF117
 2418 058c 01       		.byte	0x1
 2419 058d 5705     		.2byte	0x557
 2420 058f CD000000 		.4byte	0xcd
 2421 0593 00       		.byte	0
 2422 0594 19       		.uleb128 0x19
 2423 0595 01       		.byte	0x1
 2424 0596 0F060000 		.4byte	.LASF78
 2425 059a 01       		.byte	0x1
 2426 059b 4305     		.2byte	0x543
ARM GAS  /tmp/ccNjU3LR.s 			page 72


 2427 059d 01       		.byte	0x1
 2428 059e 3A070000 		.4byte	.LFB77
 2429 05a2 58070000 		.4byte	.LFE77
 2430 05a6 00000000 		.4byte	.LLST22
 2431 05aa 01       		.byte	0x1
 2432 05ab B9050000 		.4byte	0x5b9
 2433 05af 1A       		.uleb128 0x1a
 2434 05b0 48070000 		.4byte	.LVL125
 2435 05b4 57050000 		.4byte	0x557
 2436 05b8 00       		.byte	0
 2437 05b9 1B       		.uleb128 0x1b
 2438 05ba 01       		.byte	0x1
 2439 05bb 36050000 		.4byte	.LASF79
 2440 05bf 01       		.byte	0x1
 2441 05c0 2005     		.2byte	0x520
 2442 05c2 01       		.byte	0x1
 2443 05c3 FC060000 		.4byte	.LFB76
 2444 05c7 38070000 		.4byte	.LFE76
 2445 05cb 02       		.byte	0x2
 2446 05cc 7D       		.byte	0x7d
 2447 05cd 00       		.sleb128 0
 2448 05ce 01       		.byte	0x1
 2449 05cf F0050000 		.4byte	0x5f0
 2450 05d3 1C       		.uleb128 0x1c
 2451 05d4 AF010000 		.4byte	.LASF80
 2452 05d8 01       		.byte	0x1
 2453 05d9 2005     		.2byte	0x520
 2454 05db F0050000 		.4byte	0x5f0
 2455 05df 01       		.byte	0x1
 2456 05e0 50       		.byte	0x50
 2457 05e1 1C       		.uleb128 0x1c
 2458 05e2 E7050000 		.4byte	.LASF81
 2459 05e6 01       		.byte	0x1
 2460 05e7 2005     		.2byte	0x520
 2461 05e9 F6050000 		.4byte	0x5f6
 2462 05ed 01       		.byte	0x1
 2463 05ee 51       		.byte	0x51
 2464 05ef 00       		.byte	0
 2465 05f0 1D       		.uleb128 0x1d
 2466 05f1 04       		.byte	0x4
 2467 05f2 30040000 		.4byte	0x430
 2468 05f6 1D       		.uleb128 0x1d
 2469 05f7 04       		.byte	0x4
 2470 05f8 C2000000 		.4byte	0xc2
 2471 05fc 1B       		.uleb128 0x1b
 2472 05fd 01       		.byte	0x1
 2473 05fe FA050000 		.4byte	.LASF82
 2474 0602 01       		.byte	0x1
 2475 0603 BC04     		.2byte	0x4bc
 2476 0605 01       		.byte	0x1
 2477 0606 7C060000 		.4byte	.LFB75
 2478 060a FC060000 		.4byte	.LFE75
 2479 060e 02       		.byte	0x2
 2480 060f 7D       		.byte	0x7d
 2481 0610 00       		.sleb128 0
 2482 0611 01       		.byte	0x1
 2483 0612 25060000 		.4byte	0x625
ARM GAS  /tmp/ccNjU3LR.s 			page 73


 2484 0616 1C       		.uleb128 0x1c
 2485 0617 A6000000 		.4byte	.LASF83
 2486 061b 01       		.byte	0x1
 2487 061c BC04     		.2byte	0x4bc
 2488 061e 25060000 		.4byte	0x625
 2489 0622 01       		.byte	0x1
 2490 0623 50       		.byte	0x50
 2491 0624 00       		.byte	0
 2492 0625 1D       		.uleb128 0x1d
 2493 0626 04       		.byte	0x4
 2494 0627 B5040000 		.4byte	0x4b5
 2495 062b 1E       		.uleb128 0x1e
 2496 062c 01       		.byte	0x1
 2497 062d 87030000 		.4byte	.LASF84
 2498 0631 01       		.byte	0x1
 2499 0632 AF04     		.2byte	0x4af
 2500 0634 01       		.byte	0x1
 2501 0635 C2000000 		.4byte	0xc2
 2502 0639 5C060000 		.4byte	.LFB74
 2503 063d 7C060000 		.4byte	.LFE74
 2504 0641 02       		.byte	0x2
 2505 0642 7D       		.byte	0x7d
 2506 0643 00       		.sleb128 0
 2507 0644 01       		.byte	0x1
 2508 0645 1E       		.uleb128 0x1e
 2509 0646 01       		.byte	0x1
 2510 0647 26060000 		.4byte	.LASF85
 2511 064b 01       		.byte	0x1
 2512 064c A304     		.2byte	0x4a3
 2513 064e 01       		.byte	0x1
 2514 064f C2000000 		.4byte	0xc2
 2515 0653 3C060000 		.4byte	.LFB73
 2516 0657 5C060000 		.4byte	.LFE73
 2517 065b 02       		.byte	0x2
 2518 065c 7D       		.byte	0x7d
 2519 065d 00       		.sleb128 0
 2520 065e 01       		.byte	0x1
 2521 065f 1F       		.uleb128 0x1f
 2522 0660 01       		.byte	0x1
 2523 0661 63050000 		.4byte	.LASF118
 2524 0665 01       		.byte	0x1
 2525 0666 9804     		.2byte	0x498
 2526 0668 01       		.byte	0x1
 2527 0669 C2000000 		.4byte	0xc2
 2528 066d 01       		.byte	0x1
 2529 066e 20       		.uleb128 0x20
 2530 066f 01       		.byte	0x1
 2531 0670 DE040000 		.4byte	.LASF101
 2532 0674 01       		.byte	0x1
 2533 0675 3A04     		.2byte	0x43a
 2534 0677 01       		.byte	0x1
 2535 0678 C2000000 		.4byte	0xc2
 2536 067c 7C040000 		.4byte	.LFB71
 2537 0680 F4040000 		.4byte	.LFE71
 2538 0684 20000000 		.4byte	.LLST12
 2539 0688 01       		.byte	0x1
 2540 0689 FC060000 		.4byte	0x6fc
ARM GAS  /tmp/ccNjU3LR.s 			page 74


 2541 068d 21       		.uleb128 0x21
 2542 068e 61020000 		.4byte	.LASF86
 2543 0692 01       		.byte	0x1
 2544 0693 4004     		.2byte	0x440
 2545 0695 04010000 		.4byte	0x104
 2546 0699 02       		.byte	0x2
 2547 069a 91       		.byte	0x91
 2548 069b 60       		.sleb128 -32
 2549 069c 21       		.uleb128 0x21
 2550 069d 77050000 		.4byte	.LASF87
 2551 06a1 01       		.byte	0x1
 2552 06a2 4404     		.2byte	0x444
 2553 06a4 0C070000 		.4byte	0x70c
 2554 06a8 02       		.byte	0x2
 2555 06a9 91       		.byte	0x91
 2556 06aa 5C       		.sleb128 -36
 2557 06ab 22       		.uleb128 0x22
 2558 06ac 03010000 		.4byte	.LASF88
 2559 06b0 01       		.byte	0x1
 2560 06b1 4804     		.2byte	0x448
 2561 06b3 C2000000 		.4byte	0xc2
 2562 06b7 64000000 		.4byte	.LLST13
 2563 06bb 22       		.uleb128 0x22
 2564 06bc 55050000 		.4byte	.LASF89
 2565 06c0 01       		.byte	0x1
 2566 06c1 4804     		.2byte	0x448
 2567 06c3 C2000000 		.4byte	0xc2
 2568 06c7 8E000000 		.4byte	.LLST14
 2569 06cb 22       		.uleb128 0x22
 2570 06cc 5C050000 		.4byte	.LASF90
 2571 06d0 01       		.byte	0x1
 2572 06d1 4804     		.2byte	0x448
 2573 06d3 C2000000 		.4byte	0xc2
 2574 06d7 CA000000 		.4byte	.LLST15
 2575 06db 22       		.uleb128 0x22
 2576 06dc 49010000 		.4byte	.LASF91
 2577 06e0 01       		.byte	0x1
 2578 06e1 4804     		.2byte	0x448
 2579 06e3 C2000000 		.4byte	0xc2
 2580 06e7 01010000 		.4byte	.LLST16
 2581 06eb 22       		.uleb128 0x22
 2582 06ec CD020000 		.4byte	.LASF92
 2583 06f0 01       		.byte	0x1
 2584 06f1 4904     		.2byte	0x449
 2585 06f3 C2000000 		.4byte	0xc2
 2586 06f7 37010000 		.4byte	.LLST17
 2587 06fb 00       		.byte	0
 2588 06fc 09       		.uleb128 0x9
 2589 06fd A2000000 		.4byte	0xa2
 2590 0701 0C070000 		.4byte	0x70c
 2591 0705 0A       		.uleb128 0xa
 2592 0706 D2000000 		.4byte	0xd2
 2593 070a 01       		.byte	0x1
 2594 070b 00       		.byte	0
 2595 070c 05       		.uleb128 0x5
 2596 070d FC060000 		.4byte	0x6fc
 2597 0711 15       		.uleb128 0x15
ARM GAS  /tmp/ccNjU3LR.s 			page 75


 2598 0712 01       		.byte	0x1
 2599 0713 46000000 		.4byte	.LASF94
 2600 0717 01       		.byte	0x1
 2601 0718 1804     		.2byte	0x418
 2602 071a 01       		.byte	0x1
 2603 071b 70040000 		.4byte	.LFB70
 2604 071f 7C040000 		.4byte	.LFE70
 2605 0723 02       		.byte	0x2
 2606 0724 7D       		.byte	0x7d
 2607 0725 00       		.sleb128 0
 2608 0726 01       		.byte	0x1
 2609 0727 15       		.uleb128 0x15
 2610 0728 01       		.byte	0x1
 2611 0729 83020000 		.4byte	.LASF95
 2612 072d 01       		.byte	0x1
 2613 072e 0F04     		.2byte	0x40f
 2614 0730 01       		.byte	0x1
 2615 0731 64040000 		.4byte	.LFB69
 2616 0735 70040000 		.4byte	.LFE69
 2617 0739 02       		.byte	0x2
 2618 073a 7D       		.byte	0x7d
 2619 073b 00       		.sleb128 0
 2620 073c 01       		.byte	0x1
 2621 073d 19       		.uleb128 0x19
 2622 073e 01       		.byte	0x1
 2623 073f 3C030000 		.4byte	.LASF96
 2624 0743 01       		.byte	0x1
 2625 0744 EA03     		.2byte	0x3ea
 2626 0746 01       		.byte	0x1
 2627 0747 14040000 		.4byte	.LFB68
 2628 074b 64040000 		.4byte	.LFE68
 2629 074f 67010000 		.4byte	.LLST8
 2630 0753 01       		.byte	0x1
 2631 0754 E8070000 		.4byte	0x7e8
 2632 0758 23       		.uleb128 0x23
 2633 0759 D9050000 		.4byte	.LASF97
 2634 075d 01       		.byte	0x1
 2635 075e EA03     		.2byte	0x3ea
 2636 0760 C2000000 		.4byte	0xc2
 2637 0764 9F010000 		.4byte	.LLST9
 2638 0768 23       		.uleb128 0x23
 2639 0769 28050000 		.4byte	.LASF98
 2640 076d 01       		.byte	0x1
 2641 076e EA03     		.2byte	0x3ea
 2642 0770 C2000000 		.4byte	0xc2
 2643 0774 C0010000 		.4byte	.LLST10
 2644 0778 23       		.uleb128 0x23
 2645 0779 FE010000 		.4byte	.LASF99
 2646 077d 01       		.byte	0x1
 2647 077e EA03     		.2byte	0x3ea
 2648 0780 C2000000 		.4byte	0xc2
 2649 0784 EC010000 		.4byte	.LLST11
 2650 0788 21       		.uleb128 0x21
 2651 0789 CF050000 		.4byte	.LASF100
 2652 078d 01       		.byte	0x1
 2653 078e EC03     		.2byte	0x3ec
 2654 0790 02050000 		.4byte	0x502
ARM GAS  /tmp/ccNjU3LR.s 			page 76


 2655 0794 02       		.byte	0x2
 2656 0795 91       		.byte	0x91
 2657 0796 60       		.sleb128 -32
 2658 0797 24       		.uleb128 0x24
 2659 0798 00000000 		.4byte	.Ldebug_ranges0+0
 2660 079c B0070000 		.4byte	0x7b0
 2661 07a0 21       		.uleb128 0x21
 2662 07a1 03010000 		.4byte	.LASF88
 2663 07a5 01       		.byte	0x1
 2664 07a6 FE03     		.2byte	0x3fe
 2665 07a8 CD000000 		.4byte	0xcd
 2666 07ac 02       		.byte	0x2
 2667 07ad 91       		.byte	0x91
 2668 07ae 5C       		.sleb128 -36
 2669 07af 00       		.byte	0
 2670 07b0 25       		.uleb128 0x25
 2671 07b1 24040000 		.4byte	.LVL92
 2672 07b5 7F0A0000 		.4byte	0xa7f
 2673 07b9 CE070000 		.4byte	0x7ce
 2674 07bd 26       		.uleb128 0x26
 2675 07be 01       		.byte	0x1
 2676 07bf 50       		.byte	0x50
 2677 07c0 02       		.byte	0x2
 2678 07c1 91       		.byte	0x91
 2679 07c2 60       		.sleb128 -32
 2680 07c3 26       		.uleb128 0x26
 2681 07c4 01       		.byte	0x1
 2682 07c5 51       		.byte	0x51
 2683 07c6 01       		.byte	0x1
 2684 07c7 30       		.byte	0x30
 2685 07c8 26       		.uleb128 0x26
 2686 07c9 01       		.byte	0x1
 2687 07ca 52       		.byte	0x52
 2688 07cb 01       		.byte	0x1
 2689 07cc 40       		.byte	0x40
 2690 07cd 00       		.byte	0
 2691 07ce 27       		.uleb128 0x27
 2692 07cf 4E040000 		.4byte	.LVL93
 2693 07d3 8A0A0000 		.4byte	0xa8a
 2694 07d7 26       		.uleb128 0x26
 2695 07d8 01       		.byte	0x1
 2696 07d9 50       		.byte	0x50
 2697 07da 05       		.byte	0x5
 2698 07db 0C       		.byte	0xc
 2699 07dc 00080140 		.4byte	0x40010800
 2700 07e0 26       		.uleb128 0x26
 2701 07e1 01       		.byte	0x1
 2702 07e2 51       		.byte	0x51
 2703 07e3 02       		.byte	0x2
 2704 07e4 91       		.byte	0x91
 2705 07e5 60       		.sleb128 -32
 2706 07e6 00       		.byte	0
 2707 07e7 00       		.byte	0
 2708 07e8 20       		.uleb128 0x20
 2709 07e9 01       		.byte	0x1
 2710 07ea 91050000 		.4byte	.LASF102
 2711 07ee 01       		.byte	0x1
ARM GAS  /tmp/ccNjU3LR.s 			page 77


 2712 07ef 2D03     		.2byte	0x32d
 2713 07f1 01       		.byte	0x1
 2714 07f2 98030000 		.4byte	0x398
 2715 07f6 F4040000 		.4byte	.LFB67
 2716 07fa 30060000 		.4byte	.LFE67
 2717 07fe 0D020000 		.4byte	.LLST18
 2718 0802 01       		.byte	0x1
 2719 0803 5C080000 		.4byte	0x85c
 2720 0807 23       		.uleb128 0x23
 2721 0808 AF010000 		.4byte	.LASF80
 2722 080c 01       		.byte	0x1
 2723 080d 2D03     		.2byte	0x32d
 2724 080f F0050000 		.4byte	0x5f0
 2725 0813 2D020000 		.4byte	.LLST19
 2726 0817 23       		.uleb128 0x23
 2727 0818 00000000 		.4byte	.LASF103
 2728 081c 01       		.byte	0x1
 2729 081d 2D03     		.2byte	0x32d
 2730 081f C2000000 		.4byte	0xc2
 2731 0823 77020000 		.4byte	.LLST20
 2732 0827 22       		.uleb128 0x22
 2733 0828 FA030000 		.4byte	.LASF104
 2734 082c 01       		.byte	0x1
 2735 082d 2F03     		.2byte	0x32f
 2736 082f C2000000 		.4byte	0xc2
 2737 0833 DD020000 		.4byte	.LLST21
 2738 0837 1A       		.uleb128 0x1a
 2739 0838 46050000 		.4byte	.LVL113
 2740 083c 6E060000 		.4byte	0x66e
 2741 0840 1A       		.uleb128 0x1a
 2742 0841 5E050000 		.4byte	.LVL114
 2743 0845 970A0000 		.4byte	0xa97
 2744 0849 1A       		.uleb128 0x1a
 2745 084a C6050000 		.4byte	.LVL118
 2746 084e A50A0000 		.4byte	0xaa5
 2747 0852 1A       		.uleb128 0x1a
 2748 0853 DA050000 		.4byte	.LVL120
 2749 0857 A50A0000 		.4byte	0xaa5
 2750 085b 00       		.byte	0
 2751 085c 20       		.uleb128 0x20
 2752 085d 01       		.byte	0x1
 2753 085e B6040000 		.4byte	.LASF105
 2754 0862 01       		.byte	0x1
 2755 0863 5B01     		.2byte	0x15b
 2756 0865 01       		.byte	0x1
 2757 0866 98030000 		.4byte	0x398
 2758 086a D8000000 		.4byte	.LFB66
 2759 086e 14040000 		.4byte	.LFE66
 2760 0872 F0020000 		.4byte	.LLST2
 2761 0876 01       		.byte	0x1
 2762 0877 EF090000 		.4byte	0x9ef
 2763 087b 23       		.uleb128 0x23
 2764 087c A6000000 		.4byte	.LASF83
 2765 0880 01       		.byte	0x1
 2766 0881 5B01     		.2byte	0x15b
 2767 0883 25060000 		.4byte	0x625
 2768 0887 28030000 		.4byte	.LLST3
ARM GAS  /tmp/ccNjU3LR.s 			page 78


 2769 088b 22       		.uleb128 0x22
 2770 088c FA030000 		.4byte	.LASF104
 2771 0890 01       		.byte	0x1
 2772 0891 5D01     		.2byte	0x15d
 2773 0893 C2000000 		.4byte	0xc2
 2774 0897 EC030000 		.4byte	.LLST4
 2775 089b 22       		.uleb128 0x22
 2776 089c DE030000 		.4byte	.LASF106
 2777 08a0 01       		.byte	0x1
 2778 08a1 5E01     		.2byte	0x15e
 2779 08a3 C2000000 		.4byte	0xc2
 2780 08a7 8E040000 		.4byte	.LLST5
 2781 08ab 28       		.uleb128 0x28
 2782 08ac 7C020000 		.4byte	.LBB12
 2783 08b0 60030000 		.4byte	.LBE12
 2784 08b4 1C090000 		.4byte	0x91c
 2785 08b8 22       		.uleb128 0x22
 2786 08b9 62000000 		.4byte	.LASF107
 2787 08bd 01       		.byte	0x1
 2788 08be 0E02     		.2byte	0x20e
 2789 08c0 48030000 		.4byte	0x348
 2790 08c4 A1040000 		.4byte	.LLST7
 2791 08c8 28       		.uleb128 0x28
 2792 08c9 86020000 		.4byte	.LBB13
 2793 08cd 98020000 		.4byte	.LBE13
 2794 08d1 E5080000 		.4byte	0x8e5
 2795 08d5 21       		.uleb128 0x21
 2796 08d6 03010000 		.4byte	.LASF88
 2797 08da 01       		.byte	0x1
 2798 08db 1702     		.2byte	0x217
 2799 08dd CD000000 		.4byte	0xcd
 2800 08e1 02       		.byte	0x2
 2801 08e2 91       		.byte	0x91
 2802 08e3 60       		.sleb128 -32
 2803 08e4 00       		.byte	0
 2804 08e5 1A       		.uleb128 0x1a
 2805 08e6 B2020000 		.4byte	.LVL58
 2806 08ea A50A0000 		.4byte	0xaa5
 2807 08ee 1A       		.uleb128 0x1a
 2808 08ef DE020000 		.4byte	.LVL63
 2809 08f3 A50A0000 		.4byte	0xaa5
 2810 08f7 1A       		.uleb128 0x1a
 2811 08f8 EA020000 		.4byte	.LVL65
 2812 08fc A50A0000 		.4byte	0xaa5
 2813 0900 1A       		.uleb128 0x1a
 2814 0901 0E030000 		.4byte	.LVL67
 2815 0905 A50A0000 		.4byte	0xaa5
 2816 0909 1A       		.uleb128 0x1a
 2817 090a 1A030000 		.4byte	.LVL69
 2818 090e A50A0000 		.4byte	0xaa5
 2819 0912 1A       		.uleb128 0x1a
 2820 0913 42030000 		.4byte	.LVL72
 2821 0917 A50A0000 		.4byte	0xaa5
 2822 091b 00       		.byte	0
 2823 091c 29       		.uleb128 0x29
 2824 091d 6D050000 		.4byte	0x56d
 2825 0921 38020000 		.4byte	.LBB10
ARM GAS  /tmp/ccNjU3LR.s 			page 79


 2826 0925 54020000 		.4byte	.LBE10
 2827 0929 01       		.byte	0x1
 2828 092a F701     		.2byte	0x1f7
 2829 092c 4C090000 		.4byte	0x94c
 2830 0930 2A       		.uleb128 0x2a
 2831 0931 7B050000 		.4byte	0x57b
 2832 0935 D7040000 		.4byte	.LLST6
 2833 0939 2B       		.uleb128 0x2b
 2834 093a 38020000 		.4byte	.LBB11
 2835 093e 54020000 		.4byte	.LBE11
 2836 0942 2C       		.uleb128 0x2c
 2837 0943 87050000 		.4byte	0x587
 2838 0947 02       		.byte	0x2
 2839 0948 91       		.byte	0x91
 2840 0949 64       		.sleb128 -28
 2841 094a 00       		.byte	0
 2842 094b 00       		.byte	0
 2843 094c 1A       		.uleb128 0x1a
 2844 094d 4A010000 		.4byte	.LVL29
 2845 0951 A50A0000 		.4byte	0xaa5
 2846 0955 1A       		.uleb128 0x1a
 2847 0956 56010000 		.4byte	.LVL31
 2848 095a A50A0000 		.4byte	0xaa5
 2849 095e 1A       		.uleb128 0x1a
 2850 095f 7A010000 		.4byte	.LVL34
 2851 0963 A50A0000 		.4byte	0xaa5
 2852 0967 1A       		.uleb128 0x1a
 2853 0968 86010000 		.4byte	.LVL36
 2854 096c A50A0000 		.4byte	0xaa5
 2855 0970 1A       		.uleb128 0x1a
 2856 0971 F0010000 		.4byte	.LVL39
 2857 0975 A50A0000 		.4byte	0xaa5
 2858 0979 1A       		.uleb128 0x1a
 2859 097a FC010000 		.4byte	.LVL41
 2860 097e A50A0000 		.4byte	0xaa5
 2861 0982 1A       		.uleb128 0x1a
 2862 0983 0A020000 		.4byte	.LVL43
 2863 0987 A50A0000 		.4byte	0xaa5
 2864 098b 1A       		.uleb128 0x1a
 2865 098c 18020000 		.4byte	.LVL45
 2866 0990 A50A0000 		.4byte	0xaa5
 2867 0994 1A       		.uleb128 0x1a
 2868 0995 30020000 		.4byte	.LVL47
 2869 0999 A50A0000 		.4byte	0xaa5
 2870 099d 1A       		.uleb128 0x1a
 2871 099e 58020000 		.4byte	.LVL51
 2872 09a2 A50A0000 		.4byte	0xaa5
 2873 09a6 1A       		.uleb128 0x1a
 2874 09a7 66020000 		.4byte	.LVL53
 2875 09ab A50A0000 		.4byte	0xaa5
 2876 09af 1A       		.uleb128 0x1a
 2877 09b0 74020000 		.4byte	.LVL55
 2878 09b4 A50A0000 		.4byte	0xaa5
 2879 09b8 1A       		.uleb128 0x1a
 2880 09b9 7C030000 		.4byte	.LVL74
 2881 09bd A50A0000 		.4byte	0xaa5
 2882 09c1 1A       		.uleb128 0x1a
ARM GAS  /tmp/ccNjU3LR.s 			page 80


 2883 09c2 AE030000 		.4byte	.LVL76
 2884 09c6 A50A0000 		.4byte	0xaa5
 2885 09ca 1A       		.uleb128 0x1a
 2886 09cb BC030000 		.4byte	.LVL78
 2887 09cf A50A0000 		.4byte	0xaa5
 2888 09d3 1A       		.uleb128 0x1a
 2889 09d4 C8030000 		.4byte	.LVL80
 2890 09d8 A50A0000 		.4byte	0xaa5
 2891 09dc 1A       		.uleb128 0x1a
 2892 09dd D4030000 		.4byte	.LVL82
 2893 09e1 A50A0000 		.4byte	0xaa5
 2894 09e5 1A       		.uleb128 0x1a
 2895 09e6 E2030000 		.4byte	.LVL84
 2896 09ea A50A0000 		.4byte	0xaa5
 2897 09ee 00       		.byte	0
 2898 09ef 2D       		.uleb128 0x2d
 2899 09f0 01       		.byte	0x1
 2900 09f1 F6040000 		.4byte	.LASF108
 2901 09f5 01       		.byte	0x1
 2902 09f6 CA       		.byte	0xca
 2903 09f7 01       		.byte	0x1
 2904 09f8 98030000 		.4byte	0x398
 2905 09fc 00000000 		.4byte	.LFB65
 2906 0a00 D8000000 		.4byte	.LFE65
 2907 0a04 EB040000 		.4byte	.LLST0
 2908 0a08 01       		.byte	0x1
 2909 0a09 6E0A0000 		.4byte	0xa6e
 2910 0a0d 2E       		.uleb128 0x2e
 2911 0a0e FA030000 		.4byte	.LASF104
 2912 0a12 01       		.byte	0x1
 2913 0a13 CC       		.byte	0xcc
 2914 0a14 C2000000 		.4byte	0xc2
 2915 0a18 0B050000 		.4byte	.LLST1
 2916 0a1c 1A       		.uleb128 0x1a
 2917 0a1d 06000000 		.4byte	.LVL0
 2918 0a21 A50A0000 		.4byte	0xaa5
 2919 0a25 1A       		.uleb128 0x1a
 2920 0a26 2C000000 		.4byte	.LVL3
 2921 0a2a A50A0000 		.4byte	0xaa5
 2922 0a2e 1A       		.uleb128 0x1a
 2923 0a2f 48000000 		.4byte	.LVL6
 2924 0a33 970A0000 		.4byte	0xa97
 2925 0a37 1A       		.uleb128 0x1a
 2926 0a38 52000000 		.4byte	.LVL8
 2927 0a3c A50A0000 		.4byte	0xaa5
 2928 0a40 1A       		.uleb128 0x1a
 2929 0a41 6A000000 		.4byte	.LVL11
 2930 0a45 A50A0000 		.4byte	0xaa5
 2931 0a49 1A       		.uleb128 0x1a
 2932 0a4a 94000000 		.4byte	.LVL15
 2933 0a4e A50A0000 		.4byte	0xaa5
 2934 0a52 1A       		.uleb128 0x1a
 2935 0a53 A4000000 		.4byte	.LVL18
 2936 0a57 A50A0000 		.4byte	0xaa5
 2937 0a5b 1A       		.uleb128 0x1a
 2938 0a5c B0000000 		.4byte	.LVL20
 2939 0a60 A50A0000 		.4byte	0xaa5
ARM GAS  /tmp/ccNjU3LR.s 			page 81


 2940 0a64 1A       		.uleb128 0x1a
 2941 0a65 BC000000 		.4byte	.LVL21
 2942 0a69 A50A0000 		.4byte	0xaa5
 2943 0a6d 00       		.byte	0
 2944 0a6e 2F       		.uleb128 0x2f
 2945 0a6f 5F060000 		.4byte	0x65f
 2946 0a73 30060000 		.4byte	.LFB72
 2947 0a77 3C060000 		.4byte	.LFE72
 2948 0a7b 02       		.byte	0x2
 2949 0a7c 7D       		.byte	0x7d
 2950 0a7d 00       		.sleb128 0
 2951 0a7e 01       		.byte	0x1
 2952 0a7f 30       		.uleb128 0x30
 2953 0a80 01       		.byte	0x1
 2954 0a81 01       		.byte	0x1
 2955 0a82 F3030000 		.4byte	.LASF119
 2956 0a86 F3030000 		.4byte	.LASF119
 2957 0a8a 31       		.uleb128 0x31
 2958 0a8b 01       		.byte	0x1
 2959 0a8c 01       		.byte	0x1
 2960 0a8d FB020000 		.4byte	.LASF109
 2961 0a91 FB020000 		.4byte	.LASF109
 2962 0a95 0B       		.byte	0xb
 2963 0a96 E0       		.byte	0xe0
 2964 0a97 32       		.uleb128 0x32
 2965 0a98 01       		.byte	0x1
 2966 0a99 01       		.byte	0x1
 2967 0a9a 6F030000 		.4byte	.LASF110
 2968 0a9e 6F030000 		.4byte	.LASF110
 2969 0aa2 0C       		.byte	0xc
 2970 0aa3 1F01     		.2byte	0x11f
 2971 0aa5 32       		.uleb128 0x32
 2972 0aa6 01       		.byte	0x1
 2973 0aa7 01       		.byte	0x1
 2974 0aa8 E3020000 		.4byte	.LASF111
 2975 0aac E3020000 		.4byte	.LASF111
 2976 0ab0 0C       		.byte	0xc
 2977 0ab1 2A01     		.2byte	0x12a
 2978 0ab3 00       		.byte	0
 2979              		.section	.debug_abbrev,"",%progbits
 2980              	.Ldebug_abbrev0:
 2981 0000 01       		.uleb128 0x1
 2982 0001 11       		.uleb128 0x11
 2983 0002 01       		.byte	0x1
 2984 0003 25       		.uleb128 0x25
 2985 0004 0E       		.uleb128 0xe
 2986 0005 13       		.uleb128 0x13
 2987 0006 0B       		.uleb128 0xb
 2988 0007 03       		.uleb128 0x3
 2989 0008 0E       		.uleb128 0xe
 2990 0009 1B       		.uleb128 0x1b
 2991 000a 0E       		.uleb128 0xe
 2992 000b 11       		.uleb128 0x11
 2993 000c 01       		.uleb128 0x1
 2994 000d 12       		.uleb128 0x12
 2995 000e 01       		.uleb128 0x1
 2996 000f 10       		.uleb128 0x10
ARM GAS  /tmp/ccNjU3LR.s 			page 82


 2997 0010 06       		.uleb128 0x6
 2998 0011 00       		.byte	0
 2999 0012 00       		.byte	0
 3000 0013 02       		.uleb128 0x2
 3001 0014 24       		.uleb128 0x24
 3002 0015 00       		.byte	0
 3003 0016 0B       		.uleb128 0xb
 3004 0017 0B       		.uleb128 0xb
 3005 0018 3E       		.uleb128 0x3e
 3006 0019 0B       		.uleb128 0xb
 3007 001a 03       		.uleb128 0x3
 3008 001b 0E       		.uleb128 0xe
 3009 001c 00       		.byte	0
 3010 001d 00       		.byte	0
 3011 001e 03       		.uleb128 0x3
 3012 001f 16       		.uleb128 0x16
 3013 0020 00       		.byte	0
 3014 0021 03       		.uleb128 0x3
 3015 0022 0E       		.uleb128 0xe
 3016 0023 3A       		.uleb128 0x3a
 3017 0024 0B       		.uleb128 0xb
 3018 0025 3B       		.uleb128 0x3b
 3019 0026 0B       		.uleb128 0xb
 3020 0027 49       		.uleb128 0x49
 3021 0028 13       		.uleb128 0x13
 3022 0029 00       		.byte	0
 3023 002a 00       		.byte	0
 3024 002b 04       		.uleb128 0x4
 3025 002c 24       		.uleb128 0x24
 3026 002d 00       		.byte	0
 3027 002e 0B       		.uleb128 0xb
 3028 002f 0B       		.uleb128 0xb
 3029 0030 3E       		.uleb128 0x3e
 3030 0031 0B       		.uleb128 0xb
 3031 0032 03       		.uleb128 0x3
 3032 0033 08       		.uleb128 0x8
 3033 0034 00       		.byte	0
 3034 0035 00       		.byte	0
 3035 0036 05       		.uleb128 0x5
 3036 0037 26       		.uleb128 0x26
 3037 0038 00       		.byte	0
 3038 0039 49       		.uleb128 0x49
 3039 003a 13       		.uleb128 0x13
 3040 003b 00       		.byte	0
 3041 003c 00       		.byte	0
 3042 003d 06       		.uleb128 0x6
 3043 003e 35       		.uleb128 0x35
 3044 003f 00       		.byte	0
 3045 0040 49       		.uleb128 0x49
 3046 0041 13       		.uleb128 0x13
 3047 0042 00       		.byte	0
 3048 0043 00       		.byte	0
 3049 0044 07       		.uleb128 0x7
 3050 0045 34       		.uleb128 0x34
 3051 0046 00       		.byte	0
 3052 0047 03       		.uleb128 0x3
 3053 0048 0E       		.uleb128 0xe
ARM GAS  /tmp/ccNjU3LR.s 			page 83


 3054 0049 3A       		.uleb128 0x3a
 3055 004a 0B       		.uleb128 0xb
 3056 004b 3B       		.uleb128 0x3b
 3057 004c 05       		.uleb128 0x5
 3058 004d 49       		.uleb128 0x49
 3059 004e 13       		.uleb128 0x13
 3060 004f 3F       		.uleb128 0x3f
 3061 0050 0C       		.uleb128 0xc
 3062 0051 3C       		.uleb128 0x3c
 3063 0052 0C       		.uleb128 0xc
 3064 0053 00       		.byte	0
 3065 0054 00       		.byte	0
 3066 0055 08       		.uleb128 0x8
 3067 0056 34       		.uleb128 0x34
 3068 0057 00       		.byte	0
 3069 0058 03       		.uleb128 0x3
 3070 0059 0E       		.uleb128 0xe
 3071 005a 3A       		.uleb128 0x3a
 3072 005b 0B       		.uleb128 0xb
 3073 005c 3B       		.uleb128 0x3b
 3074 005d 0B       		.uleb128 0xb
 3075 005e 49       		.uleb128 0x49
 3076 005f 13       		.uleb128 0x13
 3077 0060 3F       		.uleb128 0x3f
 3078 0061 0C       		.uleb128 0xc
 3079 0062 3C       		.uleb128 0x3c
 3080 0063 0C       		.uleb128 0xc
 3081 0064 00       		.byte	0
 3082 0065 00       		.byte	0
 3083 0066 09       		.uleb128 0x9
 3084 0067 01       		.uleb128 0x1
 3085 0068 01       		.byte	0x1
 3086 0069 49       		.uleb128 0x49
 3087 006a 13       		.uleb128 0x13
 3088 006b 01       		.uleb128 0x1
 3089 006c 13       		.uleb128 0x13
 3090 006d 00       		.byte	0
 3091 006e 00       		.byte	0
 3092 006f 0A       		.uleb128 0xa
 3093 0070 21       		.uleb128 0x21
 3094 0071 00       		.byte	0
 3095 0072 49       		.uleb128 0x49
 3096 0073 13       		.uleb128 0x13
 3097 0074 2F       		.uleb128 0x2f
 3098 0075 0B       		.uleb128 0xb
 3099 0076 00       		.byte	0
 3100 0077 00       		.byte	0
 3101 0078 0B       		.uleb128 0xb
 3102 0079 13       		.uleb128 0x13
 3103 007a 01       		.byte	0x1
 3104 007b 0B       		.uleb128 0xb
 3105 007c 0B       		.uleb128 0xb
 3106 007d 3A       		.uleb128 0x3a
 3107 007e 0B       		.uleb128 0xb
 3108 007f 3B       		.uleb128 0x3b
 3109 0080 05       		.uleb128 0x5
 3110 0081 01       		.uleb128 0x1
ARM GAS  /tmp/ccNjU3LR.s 			page 84


 3111 0082 13       		.uleb128 0x13
 3112 0083 00       		.byte	0
 3113 0084 00       		.byte	0
 3114 0085 0C       		.uleb128 0xc
 3115 0086 0D       		.uleb128 0xd
 3116 0087 00       		.byte	0
 3117 0088 03       		.uleb128 0x3
 3118 0089 08       		.uleb128 0x8
 3119 008a 3A       		.uleb128 0x3a
 3120 008b 0B       		.uleb128 0xb
 3121 008c 3B       		.uleb128 0x3b
 3122 008d 05       		.uleb128 0x5
 3123 008e 49       		.uleb128 0x49
 3124 008f 13       		.uleb128 0x13
 3125 0090 38       		.uleb128 0x38
 3126 0091 0A       		.uleb128 0xa
 3127 0092 00       		.byte	0
 3128 0093 00       		.byte	0
 3129 0094 0D       		.uleb128 0xd
 3130 0095 0D       		.uleb128 0xd
 3131 0096 00       		.byte	0
 3132 0097 03       		.uleb128 0x3
 3133 0098 0E       		.uleb128 0xe
 3134 0099 3A       		.uleb128 0x3a
 3135 009a 0B       		.uleb128 0xb
 3136 009b 3B       		.uleb128 0x3b
 3137 009c 05       		.uleb128 0x5
 3138 009d 49       		.uleb128 0x49
 3139 009e 13       		.uleb128 0x13
 3140 009f 38       		.uleb128 0x38
 3141 00a0 0A       		.uleb128 0xa
 3142 00a1 00       		.byte	0
 3143 00a2 00       		.byte	0
 3144 00a3 0E       		.uleb128 0xe
 3145 00a4 16       		.uleb128 0x16
 3146 00a5 00       		.byte	0
 3147 00a6 03       		.uleb128 0x3
 3148 00a7 0E       		.uleb128 0xe
 3149 00a8 3A       		.uleb128 0x3a
 3150 00a9 0B       		.uleb128 0xb
 3151 00aa 3B       		.uleb128 0x3b
 3152 00ab 05       		.uleb128 0x5
 3153 00ac 49       		.uleb128 0x49
 3154 00ad 13       		.uleb128 0x13
 3155 00ae 00       		.byte	0
 3156 00af 00       		.byte	0
 3157 00b0 0F       		.uleb128 0xf
 3158 00b1 04       		.uleb128 0x4
 3159 00b2 01       		.byte	0x1
 3160 00b3 0B       		.uleb128 0xb
 3161 00b4 0B       		.uleb128 0xb
 3162 00b5 49       		.uleb128 0x49
 3163 00b6 13       		.uleb128 0x13
 3164 00b7 3A       		.uleb128 0x3a
 3165 00b8 0B       		.uleb128 0xb
 3166 00b9 3B       		.uleb128 0x3b
 3167 00ba 0B       		.uleb128 0xb
ARM GAS  /tmp/ccNjU3LR.s 			page 85


 3168 00bb 01       		.uleb128 0x1
 3169 00bc 13       		.uleb128 0x13
 3170 00bd 00       		.byte	0
 3171 00be 00       		.byte	0
 3172 00bf 10       		.uleb128 0x10
 3173 00c0 28       		.uleb128 0x28
 3174 00c1 00       		.byte	0
 3175 00c2 03       		.uleb128 0x3
 3176 00c3 0E       		.uleb128 0xe
 3177 00c4 1C       		.uleb128 0x1c
 3178 00c5 0B       		.uleb128 0xb
 3179 00c6 00       		.byte	0
 3180 00c7 00       		.byte	0
 3181 00c8 11       		.uleb128 0x11
 3182 00c9 28       		.uleb128 0x28
 3183 00ca 00       		.byte	0
 3184 00cb 03       		.uleb128 0x3
 3185 00cc 08       		.uleb128 0x8
 3186 00cd 1C       		.uleb128 0x1c
 3187 00ce 0B       		.uleb128 0xb
 3188 00cf 00       		.byte	0
 3189 00d0 00       		.byte	0
 3190 00d1 12       		.uleb128 0x12
 3191 00d2 13       		.uleb128 0x13
 3192 00d3 01       		.byte	0x1
 3193 00d4 0B       		.uleb128 0xb
 3194 00d5 0B       		.uleb128 0xb
 3195 00d6 3A       		.uleb128 0x3a
 3196 00d7 0B       		.uleb128 0xb
 3197 00d8 3B       		.uleb128 0x3b
 3198 00d9 0B       		.uleb128 0xb
 3199 00da 01       		.uleb128 0x1
 3200 00db 13       		.uleb128 0x13
 3201 00dc 00       		.byte	0
 3202 00dd 00       		.byte	0
 3203 00de 13       		.uleb128 0x13
 3204 00df 0D       		.uleb128 0xd
 3205 00e0 00       		.byte	0
 3206 00e1 03       		.uleb128 0x3
 3207 00e2 0E       		.uleb128 0xe
 3208 00e3 3A       		.uleb128 0x3a
 3209 00e4 0B       		.uleb128 0xb
 3210 00e5 3B       		.uleb128 0x3b
 3211 00e6 0B       		.uleb128 0xb
 3212 00e7 49       		.uleb128 0x49
 3213 00e8 13       		.uleb128 0x13
 3214 00e9 38       		.uleb128 0x38
 3215 00ea 0A       		.uleb128 0xa
 3216 00eb 00       		.byte	0
 3217 00ec 00       		.byte	0
 3218 00ed 14       		.uleb128 0x14
 3219 00ee 0D       		.uleb128 0xd
 3220 00ef 00       		.byte	0
 3221 00f0 03       		.uleb128 0x3
 3222 00f1 08       		.uleb128 0x8
 3223 00f2 3A       		.uleb128 0x3a
 3224 00f3 0B       		.uleb128 0xb
ARM GAS  /tmp/ccNjU3LR.s 			page 86


 3225 00f4 3B       		.uleb128 0x3b
 3226 00f5 0B       		.uleb128 0xb
 3227 00f6 49       		.uleb128 0x49
 3228 00f7 13       		.uleb128 0x13
 3229 00f8 38       		.uleb128 0x38
 3230 00f9 0A       		.uleb128 0xa
 3231 00fa 00       		.byte	0
 3232 00fb 00       		.byte	0
 3233 00fc 15       		.uleb128 0x15
 3234 00fd 2E       		.uleb128 0x2e
 3235 00fe 00       		.byte	0
 3236 00ff 3F       		.uleb128 0x3f
 3237 0100 0C       		.uleb128 0xc
 3238 0101 03       		.uleb128 0x3
 3239 0102 0E       		.uleb128 0xe
 3240 0103 3A       		.uleb128 0x3a
 3241 0104 0B       		.uleb128 0xb
 3242 0105 3B       		.uleb128 0x3b
 3243 0106 05       		.uleb128 0x5
 3244 0107 27       		.uleb128 0x27
 3245 0108 0C       		.uleb128 0xc
 3246 0109 11       		.uleb128 0x11
 3247 010a 01       		.uleb128 0x1
 3248 010b 12       		.uleb128 0x12
 3249 010c 01       		.uleb128 0x1
 3250 010d 40       		.uleb128 0x40
 3251 010e 0A       		.uleb128 0xa
 3252 010f 9742     		.uleb128 0x2117
 3253 0111 0C       		.uleb128 0xc
 3254 0112 00       		.byte	0
 3255 0113 00       		.byte	0
 3256 0114 16       		.uleb128 0x16
 3257 0115 2E       		.uleb128 0x2e
 3258 0116 01       		.byte	0x1
 3259 0117 03       		.uleb128 0x3
 3260 0118 0E       		.uleb128 0xe
 3261 0119 3A       		.uleb128 0x3a
 3262 011a 0B       		.uleb128 0xb
 3263 011b 3B       		.uleb128 0x3b
 3264 011c 05       		.uleb128 0x5
 3265 011d 27       		.uleb128 0x27
 3266 011e 0C       		.uleb128 0xc
 3267 011f 20       		.uleb128 0x20
 3268 0120 0B       		.uleb128 0xb
 3269 0121 01       		.uleb128 0x1
 3270 0122 13       		.uleb128 0x13
 3271 0123 00       		.byte	0
 3272 0124 00       		.byte	0
 3273 0125 17       		.uleb128 0x17
 3274 0126 05       		.uleb128 0x5
 3275 0127 00       		.byte	0
 3276 0128 03       		.uleb128 0x3
 3277 0129 0E       		.uleb128 0xe
 3278 012a 3A       		.uleb128 0x3a
 3279 012b 0B       		.uleb128 0xb
 3280 012c 3B       		.uleb128 0x3b
 3281 012d 05       		.uleb128 0x5
ARM GAS  /tmp/ccNjU3LR.s 			page 87


 3282 012e 49       		.uleb128 0x49
 3283 012f 13       		.uleb128 0x13
 3284 0130 00       		.byte	0
 3285 0131 00       		.byte	0
 3286 0132 18       		.uleb128 0x18
 3287 0133 34       		.uleb128 0x34
 3288 0134 00       		.byte	0
 3289 0135 03       		.uleb128 0x3
 3290 0136 0E       		.uleb128 0xe
 3291 0137 3A       		.uleb128 0x3a
 3292 0138 0B       		.uleb128 0xb
 3293 0139 3B       		.uleb128 0x3b
 3294 013a 05       		.uleb128 0x5
 3295 013b 49       		.uleb128 0x49
 3296 013c 13       		.uleb128 0x13
 3297 013d 00       		.byte	0
 3298 013e 00       		.byte	0
 3299 013f 19       		.uleb128 0x19
 3300 0140 2E       		.uleb128 0x2e
 3301 0141 01       		.byte	0x1
 3302 0142 3F       		.uleb128 0x3f
 3303 0143 0C       		.uleb128 0xc
 3304 0144 03       		.uleb128 0x3
 3305 0145 0E       		.uleb128 0xe
 3306 0146 3A       		.uleb128 0x3a
 3307 0147 0B       		.uleb128 0xb
 3308 0148 3B       		.uleb128 0x3b
 3309 0149 05       		.uleb128 0x5
 3310 014a 27       		.uleb128 0x27
 3311 014b 0C       		.uleb128 0xc
 3312 014c 11       		.uleb128 0x11
 3313 014d 01       		.uleb128 0x1
 3314 014e 12       		.uleb128 0x12
 3315 014f 01       		.uleb128 0x1
 3316 0150 40       		.uleb128 0x40
 3317 0151 06       		.uleb128 0x6
 3318 0152 9742     		.uleb128 0x2117
 3319 0154 0C       		.uleb128 0xc
 3320 0155 01       		.uleb128 0x1
 3321 0156 13       		.uleb128 0x13
 3322 0157 00       		.byte	0
 3323 0158 00       		.byte	0
 3324 0159 1A       		.uleb128 0x1a
 3325 015a 898201   		.uleb128 0x4109
 3326 015d 00       		.byte	0
 3327 015e 11       		.uleb128 0x11
 3328 015f 01       		.uleb128 0x1
 3329 0160 31       		.uleb128 0x31
 3330 0161 13       		.uleb128 0x13
 3331 0162 00       		.byte	0
 3332 0163 00       		.byte	0
 3333 0164 1B       		.uleb128 0x1b
 3334 0165 2E       		.uleb128 0x2e
 3335 0166 01       		.byte	0x1
 3336 0167 3F       		.uleb128 0x3f
 3337 0168 0C       		.uleb128 0xc
 3338 0169 03       		.uleb128 0x3
ARM GAS  /tmp/ccNjU3LR.s 			page 88


 3339 016a 0E       		.uleb128 0xe
 3340 016b 3A       		.uleb128 0x3a
 3341 016c 0B       		.uleb128 0xb
 3342 016d 3B       		.uleb128 0x3b
 3343 016e 05       		.uleb128 0x5
 3344 016f 27       		.uleb128 0x27
 3345 0170 0C       		.uleb128 0xc
 3346 0171 11       		.uleb128 0x11
 3347 0172 01       		.uleb128 0x1
 3348 0173 12       		.uleb128 0x12
 3349 0174 01       		.uleb128 0x1
 3350 0175 40       		.uleb128 0x40
 3351 0176 0A       		.uleb128 0xa
 3352 0177 9742     		.uleb128 0x2117
 3353 0179 0C       		.uleb128 0xc
 3354 017a 01       		.uleb128 0x1
 3355 017b 13       		.uleb128 0x13
 3356 017c 00       		.byte	0
 3357 017d 00       		.byte	0
 3358 017e 1C       		.uleb128 0x1c
 3359 017f 05       		.uleb128 0x5
 3360 0180 00       		.byte	0
 3361 0181 03       		.uleb128 0x3
 3362 0182 0E       		.uleb128 0xe
 3363 0183 3A       		.uleb128 0x3a
 3364 0184 0B       		.uleb128 0xb
 3365 0185 3B       		.uleb128 0x3b
 3366 0186 05       		.uleb128 0x5
 3367 0187 49       		.uleb128 0x49
 3368 0188 13       		.uleb128 0x13
 3369 0189 02       		.uleb128 0x2
 3370 018a 0A       		.uleb128 0xa
 3371 018b 00       		.byte	0
 3372 018c 00       		.byte	0
 3373 018d 1D       		.uleb128 0x1d
 3374 018e 0F       		.uleb128 0xf
 3375 018f 00       		.byte	0
 3376 0190 0B       		.uleb128 0xb
 3377 0191 0B       		.uleb128 0xb
 3378 0192 49       		.uleb128 0x49
 3379 0193 13       		.uleb128 0x13
 3380 0194 00       		.byte	0
 3381 0195 00       		.byte	0
 3382 0196 1E       		.uleb128 0x1e
 3383 0197 2E       		.uleb128 0x2e
 3384 0198 00       		.byte	0
 3385 0199 3F       		.uleb128 0x3f
 3386 019a 0C       		.uleb128 0xc
 3387 019b 03       		.uleb128 0x3
 3388 019c 0E       		.uleb128 0xe
 3389 019d 3A       		.uleb128 0x3a
 3390 019e 0B       		.uleb128 0xb
 3391 019f 3B       		.uleb128 0x3b
 3392 01a0 05       		.uleb128 0x5
 3393 01a1 27       		.uleb128 0x27
 3394 01a2 0C       		.uleb128 0xc
 3395 01a3 49       		.uleb128 0x49
ARM GAS  /tmp/ccNjU3LR.s 			page 89


 3396 01a4 13       		.uleb128 0x13
 3397 01a5 11       		.uleb128 0x11
 3398 01a6 01       		.uleb128 0x1
 3399 01a7 12       		.uleb128 0x12
 3400 01a8 01       		.uleb128 0x1
 3401 01a9 40       		.uleb128 0x40
 3402 01aa 0A       		.uleb128 0xa
 3403 01ab 9742     		.uleb128 0x2117
 3404 01ad 0C       		.uleb128 0xc
 3405 01ae 00       		.byte	0
 3406 01af 00       		.byte	0
 3407 01b0 1F       		.uleb128 0x1f
 3408 01b1 2E       		.uleb128 0x2e
 3409 01b2 00       		.byte	0
 3410 01b3 3F       		.uleb128 0x3f
 3411 01b4 0C       		.uleb128 0xc
 3412 01b5 03       		.uleb128 0x3
 3413 01b6 0E       		.uleb128 0xe
 3414 01b7 3A       		.uleb128 0x3a
 3415 01b8 0B       		.uleb128 0xb
 3416 01b9 3B       		.uleb128 0x3b
 3417 01ba 05       		.uleb128 0x5
 3418 01bb 27       		.uleb128 0x27
 3419 01bc 0C       		.uleb128 0xc
 3420 01bd 49       		.uleb128 0x49
 3421 01be 13       		.uleb128 0x13
 3422 01bf 20       		.uleb128 0x20
 3423 01c0 0B       		.uleb128 0xb
 3424 01c1 00       		.byte	0
 3425 01c2 00       		.byte	0
 3426 01c3 20       		.uleb128 0x20
 3427 01c4 2E       		.uleb128 0x2e
 3428 01c5 01       		.byte	0x1
 3429 01c6 3F       		.uleb128 0x3f
 3430 01c7 0C       		.uleb128 0xc
 3431 01c8 03       		.uleb128 0x3
 3432 01c9 0E       		.uleb128 0xe
 3433 01ca 3A       		.uleb128 0x3a
 3434 01cb 0B       		.uleb128 0xb
 3435 01cc 3B       		.uleb128 0x3b
 3436 01cd 05       		.uleb128 0x5
 3437 01ce 27       		.uleb128 0x27
 3438 01cf 0C       		.uleb128 0xc
 3439 01d0 49       		.uleb128 0x49
 3440 01d1 13       		.uleb128 0x13
 3441 01d2 11       		.uleb128 0x11
 3442 01d3 01       		.uleb128 0x1
 3443 01d4 12       		.uleb128 0x12
 3444 01d5 01       		.uleb128 0x1
 3445 01d6 40       		.uleb128 0x40
 3446 01d7 06       		.uleb128 0x6
 3447 01d8 9742     		.uleb128 0x2117
 3448 01da 0C       		.uleb128 0xc
 3449 01db 01       		.uleb128 0x1
 3450 01dc 13       		.uleb128 0x13
 3451 01dd 00       		.byte	0
 3452 01de 00       		.byte	0
ARM GAS  /tmp/ccNjU3LR.s 			page 90


 3453 01df 21       		.uleb128 0x21
 3454 01e0 34       		.uleb128 0x34
 3455 01e1 00       		.byte	0
 3456 01e2 03       		.uleb128 0x3
 3457 01e3 0E       		.uleb128 0xe
 3458 01e4 3A       		.uleb128 0x3a
 3459 01e5 0B       		.uleb128 0xb
 3460 01e6 3B       		.uleb128 0x3b
 3461 01e7 05       		.uleb128 0x5
 3462 01e8 49       		.uleb128 0x49
 3463 01e9 13       		.uleb128 0x13
 3464 01ea 02       		.uleb128 0x2
 3465 01eb 0A       		.uleb128 0xa
 3466 01ec 00       		.byte	0
 3467 01ed 00       		.byte	0
 3468 01ee 22       		.uleb128 0x22
 3469 01ef 34       		.uleb128 0x34
 3470 01f0 00       		.byte	0
 3471 01f1 03       		.uleb128 0x3
 3472 01f2 0E       		.uleb128 0xe
 3473 01f3 3A       		.uleb128 0x3a
 3474 01f4 0B       		.uleb128 0xb
 3475 01f5 3B       		.uleb128 0x3b
 3476 01f6 05       		.uleb128 0x5
 3477 01f7 49       		.uleb128 0x49
 3478 01f8 13       		.uleb128 0x13
 3479 01f9 02       		.uleb128 0x2
 3480 01fa 06       		.uleb128 0x6
 3481 01fb 00       		.byte	0
 3482 01fc 00       		.byte	0
 3483 01fd 23       		.uleb128 0x23
 3484 01fe 05       		.uleb128 0x5
 3485 01ff 00       		.byte	0
 3486 0200 03       		.uleb128 0x3
 3487 0201 0E       		.uleb128 0xe
 3488 0202 3A       		.uleb128 0x3a
 3489 0203 0B       		.uleb128 0xb
 3490 0204 3B       		.uleb128 0x3b
 3491 0205 05       		.uleb128 0x5
 3492 0206 49       		.uleb128 0x49
 3493 0207 13       		.uleb128 0x13
 3494 0208 02       		.uleb128 0x2
 3495 0209 06       		.uleb128 0x6
 3496 020a 00       		.byte	0
 3497 020b 00       		.byte	0
 3498 020c 24       		.uleb128 0x24
 3499 020d 0B       		.uleb128 0xb
 3500 020e 01       		.byte	0x1
 3501 020f 55       		.uleb128 0x55
 3502 0210 06       		.uleb128 0x6
 3503 0211 01       		.uleb128 0x1
 3504 0212 13       		.uleb128 0x13
 3505 0213 00       		.byte	0
 3506 0214 00       		.byte	0
 3507 0215 25       		.uleb128 0x25
 3508 0216 898201   		.uleb128 0x4109
 3509 0219 01       		.byte	0x1
ARM GAS  /tmp/ccNjU3LR.s 			page 91


 3510 021a 11       		.uleb128 0x11
 3511 021b 01       		.uleb128 0x1
 3512 021c 31       		.uleb128 0x31
 3513 021d 13       		.uleb128 0x13
 3514 021e 01       		.uleb128 0x1
 3515 021f 13       		.uleb128 0x13
 3516 0220 00       		.byte	0
 3517 0221 00       		.byte	0
 3518 0222 26       		.uleb128 0x26
 3519 0223 8A8201   		.uleb128 0x410a
 3520 0226 00       		.byte	0
 3521 0227 02       		.uleb128 0x2
 3522 0228 0A       		.uleb128 0xa
 3523 0229 9142     		.uleb128 0x2111
 3524 022b 0A       		.uleb128 0xa
 3525 022c 00       		.byte	0
 3526 022d 00       		.byte	0
 3527 022e 27       		.uleb128 0x27
 3528 022f 898201   		.uleb128 0x4109
 3529 0232 01       		.byte	0x1
 3530 0233 11       		.uleb128 0x11
 3531 0234 01       		.uleb128 0x1
 3532 0235 31       		.uleb128 0x31
 3533 0236 13       		.uleb128 0x13
 3534 0237 00       		.byte	0
 3535 0238 00       		.byte	0
 3536 0239 28       		.uleb128 0x28
 3537 023a 0B       		.uleb128 0xb
 3538 023b 01       		.byte	0x1
 3539 023c 11       		.uleb128 0x11
 3540 023d 01       		.uleb128 0x1
 3541 023e 12       		.uleb128 0x12
 3542 023f 01       		.uleb128 0x1
 3543 0240 01       		.uleb128 0x1
 3544 0241 13       		.uleb128 0x13
 3545 0242 00       		.byte	0
 3546 0243 00       		.byte	0
 3547 0244 29       		.uleb128 0x29
 3548 0245 1D       		.uleb128 0x1d
 3549 0246 01       		.byte	0x1
 3550 0247 31       		.uleb128 0x31
 3551 0248 13       		.uleb128 0x13
 3552 0249 11       		.uleb128 0x11
 3553 024a 01       		.uleb128 0x1
 3554 024b 12       		.uleb128 0x12
 3555 024c 01       		.uleb128 0x1
 3556 024d 58       		.uleb128 0x58
 3557 024e 0B       		.uleb128 0xb
 3558 024f 59       		.uleb128 0x59
 3559 0250 05       		.uleb128 0x5
 3560 0251 01       		.uleb128 0x1
 3561 0252 13       		.uleb128 0x13
 3562 0253 00       		.byte	0
 3563 0254 00       		.byte	0
 3564 0255 2A       		.uleb128 0x2a
 3565 0256 05       		.uleb128 0x5
 3566 0257 00       		.byte	0
ARM GAS  /tmp/ccNjU3LR.s 			page 92


 3567 0258 31       		.uleb128 0x31
 3568 0259 13       		.uleb128 0x13
 3569 025a 02       		.uleb128 0x2
 3570 025b 06       		.uleb128 0x6
 3571 025c 00       		.byte	0
 3572 025d 00       		.byte	0
 3573 025e 2B       		.uleb128 0x2b
 3574 025f 0B       		.uleb128 0xb
 3575 0260 01       		.byte	0x1
 3576 0261 11       		.uleb128 0x11
 3577 0262 01       		.uleb128 0x1
 3578 0263 12       		.uleb128 0x12
 3579 0264 01       		.uleb128 0x1
 3580 0265 00       		.byte	0
 3581 0266 00       		.byte	0
 3582 0267 2C       		.uleb128 0x2c
 3583 0268 34       		.uleb128 0x34
 3584 0269 00       		.byte	0
 3585 026a 31       		.uleb128 0x31
 3586 026b 13       		.uleb128 0x13
 3587 026c 02       		.uleb128 0x2
 3588 026d 0A       		.uleb128 0xa
 3589 026e 00       		.byte	0
 3590 026f 00       		.byte	0
 3591 0270 2D       		.uleb128 0x2d
 3592 0271 2E       		.uleb128 0x2e
 3593 0272 01       		.byte	0x1
 3594 0273 3F       		.uleb128 0x3f
 3595 0274 0C       		.uleb128 0xc
 3596 0275 03       		.uleb128 0x3
 3597 0276 0E       		.uleb128 0xe
 3598 0277 3A       		.uleb128 0x3a
 3599 0278 0B       		.uleb128 0xb
 3600 0279 3B       		.uleb128 0x3b
 3601 027a 0B       		.uleb128 0xb
 3602 027b 27       		.uleb128 0x27
 3603 027c 0C       		.uleb128 0xc
 3604 027d 49       		.uleb128 0x49
 3605 027e 13       		.uleb128 0x13
 3606 027f 11       		.uleb128 0x11
 3607 0280 01       		.uleb128 0x1
 3608 0281 12       		.uleb128 0x12
 3609 0282 01       		.uleb128 0x1
 3610 0283 40       		.uleb128 0x40
 3611 0284 06       		.uleb128 0x6
 3612 0285 9742     		.uleb128 0x2117
 3613 0287 0C       		.uleb128 0xc
 3614 0288 01       		.uleb128 0x1
 3615 0289 13       		.uleb128 0x13
 3616 028a 00       		.byte	0
 3617 028b 00       		.byte	0
 3618 028c 2E       		.uleb128 0x2e
 3619 028d 34       		.uleb128 0x34
 3620 028e 00       		.byte	0
 3621 028f 03       		.uleb128 0x3
 3622 0290 0E       		.uleb128 0xe
 3623 0291 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccNjU3LR.s 			page 93


 3624 0292 0B       		.uleb128 0xb
 3625 0293 3B       		.uleb128 0x3b
 3626 0294 0B       		.uleb128 0xb
 3627 0295 49       		.uleb128 0x49
 3628 0296 13       		.uleb128 0x13
 3629 0297 02       		.uleb128 0x2
 3630 0298 06       		.uleb128 0x6
 3631 0299 00       		.byte	0
 3632 029a 00       		.byte	0
 3633 029b 2F       		.uleb128 0x2f
 3634 029c 2E       		.uleb128 0x2e
 3635 029d 00       		.byte	0
 3636 029e 31       		.uleb128 0x31
 3637 029f 13       		.uleb128 0x13
 3638 02a0 11       		.uleb128 0x11
 3639 02a1 01       		.uleb128 0x1
 3640 02a2 12       		.uleb128 0x12
 3641 02a3 01       		.uleb128 0x1
 3642 02a4 40       		.uleb128 0x40
 3643 02a5 0A       		.uleb128 0xa
 3644 02a6 9742     		.uleb128 0x2117
 3645 02a8 0C       		.uleb128 0xc
 3646 02a9 00       		.byte	0
 3647 02aa 00       		.byte	0
 3648 02ab 30       		.uleb128 0x30
 3649 02ac 2E       		.uleb128 0x2e
 3650 02ad 00       		.byte	0
 3651 02ae 3F       		.uleb128 0x3f
 3652 02af 0C       		.uleb128 0xc
 3653 02b0 3C       		.uleb128 0x3c
 3654 02b1 0C       		.uleb128 0xc
 3655 02b2 8740     		.uleb128 0x2007
 3656 02b4 0E       		.uleb128 0xe
 3657 02b5 03       		.uleb128 0x3
 3658 02b6 0E       		.uleb128 0xe
 3659 02b7 00       		.byte	0
 3660 02b8 00       		.byte	0
 3661 02b9 31       		.uleb128 0x31
 3662 02ba 2E       		.uleb128 0x2e
 3663 02bb 00       		.byte	0
 3664 02bc 3F       		.uleb128 0x3f
 3665 02bd 0C       		.uleb128 0xc
 3666 02be 3C       		.uleb128 0x3c
 3667 02bf 0C       		.uleb128 0xc
 3668 02c0 8740     		.uleb128 0x2007
 3669 02c2 0E       		.uleb128 0xe
 3670 02c3 03       		.uleb128 0x3
 3671 02c4 0E       		.uleb128 0xe
 3672 02c5 3A       		.uleb128 0x3a
 3673 02c6 0B       		.uleb128 0xb
 3674 02c7 3B       		.uleb128 0x3b
 3675 02c8 0B       		.uleb128 0xb
 3676 02c9 00       		.byte	0
 3677 02ca 00       		.byte	0
 3678 02cb 32       		.uleb128 0x32
 3679 02cc 2E       		.uleb128 0x2e
 3680 02cd 00       		.byte	0
ARM GAS  /tmp/ccNjU3LR.s 			page 94


 3681 02ce 3F       		.uleb128 0x3f
 3682 02cf 0C       		.uleb128 0xc
 3683 02d0 3C       		.uleb128 0x3c
 3684 02d1 0C       		.uleb128 0xc
 3685 02d2 8740     		.uleb128 0x2007
 3686 02d4 0E       		.uleb128 0xe
 3687 02d5 03       		.uleb128 0x3
 3688 02d6 0E       		.uleb128 0xe
 3689 02d7 3A       		.uleb128 0x3a
 3690 02d8 0B       		.uleb128 0xb
 3691 02d9 3B       		.uleb128 0x3b
 3692 02da 05       		.uleb128 0x5
 3693 02db 00       		.byte	0
 3694 02dc 00       		.byte	0
 3695 02dd 00       		.byte	0
 3696              		.section	.debug_loc,"",%progbits
 3697              	.Ldebug_loc0:
 3698              	.LLST22:
 3699 0000 3A070000 		.4byte	.LFB77-.Ltext0
 3700 0004 3C070000 		.4byte	.LCFI12-.Ltext0
 3701 0008 0200     		.2byte	0x2
 3702 000a 7D       		.byte	0x7d
 3703 000b 00       		.sleb128 0
 3704 000c 3C070000 		.4byte	.LCFI12-.Ltext0
 3705 0010 58070000 		.4byte	.LFE77-.Ltext0
 3706 0014 0200     		.2byte	0x2
 3707 0016 7D       		.byte	0x7d
 3708 0017 08       		.sleb128 8
 3709 0018 00000000 		.4byte	0
 3710 001c 00000000 		.4byte	0
 3711              	.LLST12:
 3712 0020 7C040000 		.4byte	.LFB71-.Ltext0
 3713 0024 7E040000 		.4byte	.LCFI7-.Ltext0
 3714 0028 0200     		.2byte	0x2
 3715 002a 7D       		.byte	0x7d
 3716 002b 00       		.sleb128 0
 3717 002c 7E040000 		.4byte	.LCFI7-.Ltext0
 3718 0030 82040000 		.4byte	.LCFI8-.Ltext0
 3719 0034 0200     		.2byte	0x2
 3720 0036 7D       		.byte	0x7d
 3721 0037 0C       		.sleb128 12
 3722 0038 82040000 		.4byte	.LCFI8-.Ltext0
 3723 003c D8040000 		.4byte	.LCFI9-.Ltext0
 3724 0040 0200     		.2byte	0x2
 3725 0042 7D       		.byte	0x7d
 3726 0043 28       		.sleb128 40
 3727 0044 D8040000 		.4byte	.LCFI9-.Ltext0
 3728 0048 DA040000 		.4byte	.LCFI10-.Ltext0
 3729 004c 0200     		.2byte	0x2
 3730 004e 7D       		.byte	0x7d
 3731 004f 0C       		.sleb128 12
 3732 0050 DA040000 		.4byte	.LCFI10-.Ltext0
 3733 0054 F4040000 		.4byte	.LFE71-.Ltext0
 3734 0058 0200     		.2byte	0x2
 3735 005a 7D       		.byte	0x7d
 3736 005b 28       		.sleb128 40
 3737 005c 00000000 		.4byte	0
ARM GAS  /tmp/ccNjU3LR.s 			page 95


 3738 0060 00000000 		.4byte	0
 3739              	.LLST13:
 3740 0064 A6040000 		.4byte	.LVL95-.Ltext0
 3741 0068 A8040000 		.4byte	.LVL96-.Ltext0
 3742 006c 0200     		.2byte	0x2
 3743 006e 30       		.byte	0x30
 3744 006f 9F       		.byte	0x9f
 3745 0070 A8040000 		.4byte	.LVL96-.Ltext0
 3746 0074 BA040000 		.4byte	.LVL97-.Ltext0
 3747 0078 0100     		.2byte	0x1
 3748 007a 53       		.byte	0x53
 3749 007b E0040000 		.4byte	.LVL105-.Ltext0
 3750 007f F4040000 		.4byte	.LFE71-.Ltext0
 3751 0083 0100     		.2byte	0x1
 3752 0085 53       		.byte	0x53
 3753 0086 00000000 		.4byte	0
 3754 008a 00000000 		.4byte	0
 3755              	.LLST14:
 3756 008e A6040000 		.4byte	.LVL95-.Ltext0
 3757 0092 C2040000 		.4byte	.LVL99-.Ltext0
 3758 0096 0200     		.2byte	0x2
 3759 0098 30       		.byte	0x30
 3760 0099 9F       		.byte	0x9f
 3761 009a C2040000 		.4byte	.LVL99-.Ltext0
 3762 009e C8040000 		.4byte	.LVL100-.Ltext0
 3763 00a2 1200     		.2byte	0x12
 3764 00a4 73       		.byte	0x73
 3765 00a5 00       		.sleb128 0
 3766 00a6 41       		.byte	0x41
 3767 00a7 25       		.byte	0x25
 3768 00a8 31       		.byte	0x31
 3769 00a9 1A       		.byte	0x1a
 3770 00aa 91       		.byte	0x91
 3771 00ab 00       		.sleb128 0
 3772 00ac 22       		.byte	0x22
 3773 00ad 08       		.byte	0x8
 3774 00ae 24       		.byte	0x24
 3775 00af 1C       		.byte	0x1c
 3776 00b0 94       		.byte	0x94
 3777 00b1 01       		.byte	0x1
 3778 00b2 08       		.byte	0x8
 3779 00b3 FF       		.byte	0xff
 3780 00b4 1A       		.byte	0x1a
 3781 00b5 9F       		.byte	0x9f
 3782 00b6 DA040000 		.4byte	.LVL103-.Ltext0
 3783 00ba F4040000 		.4byte	.LFE71-.Ltext0
 3784 00be 0200     		.2byte	0x2
 3785 00c0 30       		.byte	0x30
 3786 00c1 9F       		.byte	0x9f
 3787 00c2 00000000 		.4byte	0
 3788 00c6 00000000 		.4byte	0
 3789              	.LLST15:
 3790 00ca A6040000 		.4byte	.LVL95-.Ltext0
 3791 00ce D6040000 		.4byte	.LVL102-.Ltext0
 3792 00d2 0200     		.2byte	0x2
 3793 00d4 30       		.byte	0x30
 3794 00d5 9F       		.byte	0x9f
ARM GAS  /tmp/ccNjU3LR.s 			page 96


 3795 00d6 DA040000 		.4byte	.LVL103-.Ltext0
 3796 00da DE040000 		.4byte	.LVL104-.Ltext0
 3797 00de 0200     		.2byte	0x2
 3798 00e0 30       		.byte	0x30
 3799 00e1 9F       		.byte	0x9f
 3800 00e2 DE040000 		.4byte	.LVL104-.Ltext0
 3801 00e6 E0040000 		.4byte	.LVL105-.Ltext0
 3802 00ea 0100     		.2byte	0x1
 3803 00ec 50       		.byte	0x50
 3804 00ed E0040000 		.4byte	.LVL105-.Ltext0
 3805 00f1 F4040000 		.4byte	.LFE71-.Ltext0
 3806 00f5 0200     		.2byte	0x2
 3807 00f7 30       		.byte	0x30
 3808 00f8 9F       		.byte	0x9f
 3809 00f9 00000000 		.4byte	0
 3810 00fd 00000000 		.4byte	0
 3811              	.LLST16:
 3812 0101 A6040000 		.4byte	.LVL95-.Ltext0
 3813 0105 BE040000 		.4byte	.LVL98-.Ltext0
 3814 0109 0200     		.2byte	0x2
 3815 010b 30       		.byte	0x30
 3816 010c 9F       		.byte	0x9f
 3817 010d BE040000 		.4byte	.LVL98-.Ltext0
 3818 0111 CC040000 		.4byte	.LVL101-.Ltext0
 3819 0115 0100     		.2byte	0x1
 3820 0117 52       		.byte	0x52
 3821 0118 DA040000 		.4byte	.LVL103-.Ltext0
 3822 011c E0040000 		.4byte	.LVL105-.Ltext0
 3823 0120 0100     		.2byte	0x1
 3824 0122 52       		.byte	0x52
 3825 0123 E0040000 		.4byte	.LVL105-.Ltext0
 3826 0127 F4040000 		.4byte	.LFE71-.Ltext0
 3827 012b 0200     		.2byte	0x2
 3828 012d 30       		.byte	0x30
 3829 012e 9F       		.byte	0x9f
 3830 012f 00000000 		.4byte	0
 3831 0133 00000000 		.4byte	0
 3832              	.LLST17:
 3833 0137 A6040000 		.4byte	.LVL95-.Ltext0
 3834 013b D6040000 		.4byte	.LVL102-.Ltext0
 3835 013f 0200     		.2byte	0x2
 3836 0141 30       		.byte	0x30
 3837 0142 9F       		.byte	0x9f
 3838 0143 DA040000 		.4byte	.LVL103-.Ltext0
 3839 0147 E2040000 		.4byte	.LVL106-.Ltext0
 3840 014b 0200     		.2byte	0x2
 3841 014d 30       		.byte	0x30
 3842 014e 9F       		.byte	0x9f
 3843 014f E2040000 		.4byte	.LVL106-.Ltext0
 3844 0153 F4040000 		.4byte	.LFE71-.Ltext0
 3845 0157 0600     		.2byte	0x6
 3846 0159 0C       		.byte	0xc
 3847 015a 00127A00 		.4byte	0x7a1200
 3848 015e 9F       		.byte	0x9f
 3849 015f 00000000 		.4byte	0
 3850 0163 00000000 		.4byte	0
 3851              	.LLST8:
ARM GAS  /tmp/ccNjU3LR.s 			page 97


 3852 0167 14040000 		.4byte	.LFB68-.Ltext0
 3853 016b 16040000 		.4byte	.LCFI4-.Ltext0
 3854 016f 0200     		.2byte	0x2
 3855 0171 7D       		.byte	0x7d
 3856 0172 00       		.sleb128 0
 3857 0173 16040000 		.4byte	.LCFI4-.Ltext0
 3858 0177 18040000 		.4byte	.LCFI5-.Ltext0
 3859 017b 0200     		.2byte	0x2
 3860 017d 7D       		.byte	0x7d
 3861 017e 0C       		.sleb128 12
 3862 017f 18040000 		.4byte	.LCFI5-.Ltext0
 3863 0183 5A040000 		.4byte	.LCFI6-.Ltext0
 3864 0187 0200     		.2byte	0x2
 3865 0189 7D       		.byte	0x7d
 3866 018a 28       		.sleb128 40
 3867 018b 5A040000 		.4byte	.LCFI6-.Ltext0
 3868 018f 64040000 		.4byte	.LFE68-.Ltext0
 3869 0193 0200     		.2byte	0x2
 3870 0195 7D       		.byte	0x7d
 3871 0196 0C       		.sleb128 12
 3872 0197 00000000 		.4byte	0
 3873 019b 00000000 		.4byte	0
 3874              	.LLST9:
 3875 019f 14040000 		.4byte	.LVL88-.Ltext0
 3876 01a3 20040000 		.4byte	.LVL91-.Ltext0
 3877 01a7 0100     		.2byte	0x1
 3878 01a9 50       		.byte	0x50
 3879 01aa 20040000 		.4byte	.LVL91-.Ltext0
 3880 01ae 64040000 		.4byte	.LFE68-.Ltext0
 3881 01b2 0400     		.2byte	0x4
 3882 01b4 F3       		.byte	0xf3
 3883 01b5 01       		.uleb128 0x1
 3884 01b6 50       		.byte	0x50
 3885 01b7 9F       		.byte	0x9f
 3886 01b8 00000000 		.4byte	0
 3887 01bc 00000000 		.4byte	0
 3888              	.LLST10:
 3889 01c0 14040000 		.4byte	.LVL88-.Ltext0
 3890 01c4 1E040000 		.4byte	.LVL90-.Ltext0
 3891 01c8 0100     		.2byte	0x1
 3892 01ca 51       		.byte	0x51
 3893 01cb 1E040000 		.4byte	.LVL90-.Ltext0
 3894 01cf 5C040000 		.4byte	.LVL94-.Ltext0
 3895 01d3 0100     		.2byte	0x1
 3896 01d5 55       		.byte	0x55
 3897 01d6 5C040000 		.4byte	.LVL94-.Ltext0
 3898 01da 64040000 		.4byte	.LFE68-.Ltext0
 3899 01de 0400     		.2byte	0x4
 3900 01e0 F3       		.byte	0xf3
 3901 01e1 01       		.uleb128 0x1
 3902 01e2 51       		.byte	0x51
 3903 01e3 9F       		.byte	0x9f
 3904 01e4 00000000 		.4byte	0
 3905 01e8 00000000 		.4byte	0
 3906              	.LLST11:
 3907 01ec 14040000 		.4byte	.LVL88-.Ltext0
 3908 01f0 1C040000 		.4byte	.LVL89-.Ltext0
ARM GAS  /tmp/ccNjU3LR.s 			page 98


 3909 01f4 0100     		.2byte	0x1
 3910 01f6 52       		.byte	0x52
 3911 01f7 1C040000 		.4byte	.LVL89-.Ltext0
 3912 01fb 64040000 		.4byte	.LFE68-.Ltext0
 3913 01ff 0400     		.2byte	0x4
 3914 0201 F3       		.byte	0xf3
 3915 0202 01       		.uleb128 0x1
 3916 0203 52       		.byte	0x52
 3917 0204 9F       		.byte	0x9f
 3918 0205 00000000 		.4byte	0
 3919 0209 00000000 		.4byte	0
 3920              	.LLST18:
 3921 020d F4040000 		.4byte	.LFB67-.Ltext0
 3922 0211 F8040000 		.4byte	.LCFI11-.Ltext0
 3923 0215 0200     		.2byte	0x2
 3924 0217 7D       		.byte	0x7d
 3925 0218 00       		.sleb128 0
 3926 0219 F8040000 		.4byte	.LCFI11-.Ltext0
 3927 021d 30060000 		.4byte	.LFE67-.Ltext0
 3928 0221 0200     		.2byte	0x2
 3929 0223 7D       		.byte	0x7d
 3930 0224 18       		.sleb128 24
 3931 0225 00000000 		.4byte	0
 3932 0229 00000000 		.4byte	0
 3933              	.LLST19:
 3934 022d F4040000 		.4byte	.LVL107-.Ltext0
 3935 0231 FE040000 		.4byte	.LVL108-.Ltext0
 3936 0235 0100     		.2byte	0x1
 3937 0237 50       		.byte	0x50
 3938 0238 FE040000 		.4byte	.LVL108-.Ltext0
 3939 023c 04050000 		.4byte	.LVL109-.Ltext0
 3940 0240 0100     		.2byte	0x1
 3941 0242 54       		.byte	0x54
 3942 0243 04050000 		.4byte	.LVL109-.Ltext0
 3943 0247 16050000 		.4byte	.LVL111-.Ltext0
 3944 024b 0100     		.2byte	0x1
 3945 024d 50       		.byte	0x50
 3946 024e 16050000 		.4byte	.LVL111-.Ltext0
 3947 0252 64050000 		.4byte	.LVL115-.Ltext0
 3948 0256 0100     		.2byte	0x1
 3949 0258 54       		.byte	0x54
 3950 0259 64050000 		.4byte	.LVL115-.Ltext0
 3951 025d 8C050000 		.4byte	.LVL117-.Ltext0
 3952 0261 0100     		.2byte	0x1
 3953 0263 50       		.byte	0x50
 3954 0264 8C050000 		.4byte	.LVL117-.Ltext0
 3955 0268 30060000 		.4byte	.LFE67-.Ltext0
 3956 026c 0100     		.2byte	0x1
 3957 026e 54       		.byte	0x54
 3958 026f 00000000 		.4byte	0
 3959 0273 00000000 		.4byte	0
 3960              	.LLST20:
 3961 0277 F4040000 		.4byte	.LVL107-.Ltext0
 3962 027b FE040000 		.4byte	.LVL108-.Ltext0
 3963 027f 0100     		.2byte	0x1
 3964 0281 51       		.byte	0x51
 3965 0282 FE040000 		.4byte	.LVL108-.Ltext0
ARM GAS  /tmp/ccNjU3LR.s 			page 99


 3966 0286 04050000 		.4byte	.LVL109-.Ltext0
 3967 028a 0100     		.2byte	0x1
 3968 028c 55       		.byte	0x55
 3969 028d 04050000 		.4byte	.LVL109-.Ltext0
 3970 0291 12050000 		.4byte	.LVL110-.Ltext0
 3971 0295 0100     		.2byte	0x1
 3972 0297 51       		.byte	0x51
 3973 0298 12050000 		.4byte	.LVL110-.Ltext0
 3974 029c 2A050000 		.4byte	.LVL112-.Ltext0
 3975 02a0 0100     		.2byte	0x1
 3976 02a2 55       		.byte	0x55
 3977 02a3 2A050000 		.4byte	.LVL112-.Ltext0
 3978 02a7 64050000 		.4byte	.LVL115-.Ltext0
 3979 02ab 0400     		.2byte	0x4
 3980 02ad F3       		.byte	0xf3
 3981 02ae 01       		.uleb128 0x1
 3982 02af 51       		.byte	0x51
 3983 02b0 9F       		.byte	0x9f
 3984 02b1 64050000 		.4byte	.LVL115-.Ltext0
 3985 02b5 7A050000 		.4byte	.LVL116-.Ltext0
 3986 02b9 0100     		.2byte	0x1
 3987 02bb 51       		.byte	0x51
 3988 02bc 7A050000 		.4byte	.LVL116-.Ltext0
 3989 02c0 0E060000 		.4byte	.LVL122-.Ltext0
 3990 02c4 0100     		.2byte	0x1
 3991 02c6 55       		.byte	0x55
 3992 02c7 0E060000 		.4byte	.LVL122-.Ltext0
 3993 02cb 30060000 		.4byte	.LFE67-.Ltext0
 3994 02cf 0400     		.2byte	0x4
 3995 02d1 F3       		.byte	0xf3
 3996 02d2 01       		.uleb128 0x1
 3997 02d3 51       		.byte	0x51
 3998 02d4 9F       		.byte	0x9f
 3999 02d5 00000000 		.4byte	0
 4000 02d9 00000000 		.4byte	0
 4001              	.LLST21:
 4002 02dd C8050000 		.4byte	.LVL119-.Ltext0
 4003 02e1 E6050000 		.4byte	.LVL121-.Ltext0
 4004 02e5 0100     		.2byte	0x1
 4005 02e7 57       		.byte	0x57
 4006 02e8 00000000 		.4byte	0
 4007 02ec 00000000 		.4byte	0
 4008              	.LLST2:
 4009 02f0 D8000000 		.4byte	.LFB66-.Ltext0
 4010 02f4 DC000000 		.4byte	.LCFI1-.Ltext0
 4011 02f8 0200     		.2byte	0x2
 4012 02fa 7D       		.byte	0x7d
 4013 02fb 00       		.sleb128 0
 4014 02fc DC000000 		.4byte	.LCFI1-.Ltext0
 4015 0300 60010000 		.4byte	.LCFI2-.Ltext0
 4016 0304 0200     		.2byte	0x2
 4017 0306 7D       		.byte	0x7d
 4018 0307 20       		.sleb128 32
 4019 0308 60010000 		.4byte	.LCFI2-.Ltext0
 4020 030c 64010000 		.4byte	.LCFI3-.Ltext0
 4021 0310 0200     		.2byte	0x2
 4022 0312 7D       		.byte	0x7d
ARM GAS  /tmp/ccNjU3LR.s 			page 100


 4023 0313 18       		.sleb128 24
 4024 0314 64010000 		.4byte	.LCFI3-.Ltext0
 4025 0318 14040000 		.4byte	.LFE66-.Ltext0
 4026 031c 0200     		.2byte	0x2
 4027 031e 7D       		.byte	0x7d
 4028 031f 20       		.sleb128 32
 4029 0320 00000000 		.4byte	0
 4030 0324 00000000 		.4byte	0
 4031              	.LLST3:
 4032 0328 D8000000 		.4byte	.LVL23-.Ltext0
 4033 032c E0000000 		.4byte	.LVL24-.Ltext0
 4034 0330 0100     		.2byte	0x1
 4035 0332 50       		.byte	0x50
 4036 0333 E0000000 		.4byte	.LVL24-.Ltext0
 4037 0337 E4000000 		.4byte	.LVL25-.Ltext0
 4038 033b 0100     		.2byte	0x1
 4039 033d 55       		.byte	0x55
 4040 033e E4000000 		.4byte	.LVL25-.Ltext0
 4041 0342 EA000000 		.4byte	.LVL26-.Ltext0
 4042 0346 0100     		.2byte	0x1
 4043 0348 50       		.byte	0x50
 4044 0349 EA000000 		.4byte	.LVL26-.Ltext0
 4045 034d 08010000 		.4byte	.LVL27-.Ltext0
 4046 0351 0100     		.2byte	0x1
 4047 0353 55       		.byte	0x55
 4048 0354 08010000 		.4byte	.LVL27-.Ltext0
 4049 0358 0C010000 		.4byte	.LVL28-.Ltext0
 4050 035c 0400     		.2byte	0x4
 4051 035e F3       		.byte	0xf3
 4052 035f 01       		.uleb128 0x1
 4053 0360 50       		.byte	0x50
 4054 0361 9F       		.byte	0x9f
 4055 0362 0C010000 		.4byte	.LVL28-.Ltext0
 4056 0366 49010000 		.4byte	.LVL29-1-.Ltext0
 4057 036a 0100     		.2byte	0x1
 4058 036c 50       		.byte	0x50
 4059 036d 49010000 		.4byte	.LVL29-1-.Ltext0
 4060 0371 5C010000 		.4byte	.LVL32-.Ltext0
 4061 0375 0100     		.2byte	0x1
 4062 0377 55       		.byte	0x55
 4063 0378 5C010000 		.4byte	.LVL32-.Ltext0
 4064 037c 64010000 		.4byte	.LVL33-.Ltext0
 4065 0380 0400     		.2byte	0x4
 4066 0382 F3       		.byte	0xf3
 4067 0383 01       		.uleb128 0x1
 4068 0384 50       		.byte	0x50
 4069 0385 9F       		.byte	0x9f
 4070 0386 64010000 		.4byte	.LVL33-.Ltext0
 4071 038a 79010000 		.4byte	.LVL34-1-.Ltext0
 4072 038e 0100     		.2byte	0x1
 4073 0390 50       		.byte	0x50
 4074 0391 79010000 		.4byte	.LVL34-1-.Ltext0
 4075 0395 8E010000 		.4byte	.LVL37-.Ltext0
 4076 0399 0100     		.2byte	0x1
 4077 039b 55       		.byte	0x55
 4078 039c 8E010000 		.4byte	.LVL37-.Ltext0
 4079 03a0 AC010000 		.4byte	.LVL38-.Ltext0
ARM GAS  /tmp/ccNjU3LR.s 			page 101


 4080 03a4 0100     		.2byte	0x1
 4081 03a6 50       		.byte	0x50
 4082 03a7 AC010000 		.4byte	.LVL38-.Ltext0
 4083 03ab B0030000 		.4byte	.LVL77-.Ltext0
 4084 03af 0100     		.2byte	0x1
 4085 03b1 55       		.byte	0x55
 4086 03b2 B0030000 		.4byte	.LVL77-.Ltext0
 4087 03b6 C4030000 		.4byte	.LVL79-.Ltext0
 4088 03ba 0400     		.2byte	0x4
 4089 03bc F3       		.byte	0xf3
 4090 03bd 01       		.uleb128 0x1
 4091 03be 50       		.byte	0x50
 4092 03bf 9F       		.byte	0x9f
 4093 03c0 C4030000 		.4byte	.LVL79-.Ltext0
 4094 03c4 D6030000 		.4byte	.LVL83-.Ltext0
 4095 03c8 0100     		.2byte	0x1
 4096 03ca 55       		.byte	0x55
 4097 03cb D6030000 		.4byte	.LVL83-.Ltext0
 4098 03cf EA030000 		.4byte	.LVL85-.Ltext0
 4099 03d3 0400     		.2byte	0x4
 4100 03d5 F3       		.byte	0xf3
 4101 03d6 01       		.uleb128 0x1
 4102 03d7 50       		.byte	0x50
 4103 03d8 9F       		.byte	0x9f
 4104 03d9 EA030000 		.4byte	.LVL85-.Ltext0
 4105 03dd 14040000 		.4byte	.LFE66-.Ltext0
 4106 03e1 0100     		.2byte	0x1
 4107 03e3 55       		.byte	0x55
 4108 03e4 00000000 		.4byte	0
 4109 03e8 00000000 		.4byte	0
 4110              	.LLST4:
 4111 03ec 4C010000 		.4byte	.LVL30-.Ltext0
 4112 03f0 5C010000 		.4byte	.LVL32-.Ltext0
 4113 03f4 0100     		.2byte	0x1
 4114 03f6 56       		.byte	0x56
 4115 03f7 7C010000 		.4byte	.LVL35-.Ltext0
 4116 03fb 8E010000 		.4byte	.LVL37-.Ltext0
 4117 03ff 0100     		.2byte	0x1
 4118 0401 56       		.byte	0x56
 4119 0402 F2010000 		.4byte	.LVL40-.Ltext0
 4120 0406 04020000 		.4byte	.LVL42-.Ltext0
 4121 040a 0100     		.2byte	0x1
 4122 040c 56       		.byte	0x56
 4123 040d 0C020000 		.4byte	.LVL44-.Ltext0
 4124 0411 20020000 		.4byte	.LVL46-.Ltext0
 4125 0415 0100     		.2byte	0x1
 4126 0417 56       		.byte	0x56
 4127 0418 32020000 		.4byte	.LVL48-.Ltext0
 4128 041c 60020000 		.4byte	.LVL52-.Ltext0
 4129 0420 0100     		.2byte	0x1
 4130 0422 56       		.byte	0x56
 4131 0423 68020000 		.4byte	.LVL54-.Ltext0
 4132 0427 7C020000 		.4byte	.LVL56-.Ltext0
 4133 042b 0100     		.2byte	0x1
 4134 042d 56       		.byte	0x56
 4135 042e B8020000 		.4byte	.LVL59-.Ltext0
 4136 0432 BE020000 		.4byte	.LVL60-.Ltext0
ARM GAS  /tmp/ccNjU3LR.s 			page 102


 4137 0436 0100     		.2byte	0x1
 4138 0438 58       		.byte	0x58
 4139 0439 E0020000 		.4byte	.LVL64-.Ltext0
 4140 043d F4020000 		.4byte	.LVL66-.Ltext0
 4141 0441 0100     		.2byte	0x1
 4142 0443 58       		.byte	0x58
 4143 0444 10030000 		.4byte	.LVL68-.Ltext0
 4144 0448 22030000 		.4byte	.LVL70-.Ltext0
 4145 044c 0100     		.2byte	0x1
 4146 044e 56       		.byte	0x56
 4147 044f 3E030000 		.4byte	.LVL71-.Ltext0
 4148 0453 60030000 		.4byte	.LVL73-.Ltext0
 4149 0457 0100     		.2byte	0x1
 4150 0459 58       		.byte	0x58
 4151 045a 7E030000 		.4byte	.LVL75-.Ltext0
 4152 045e B0030000 		.4byte	.LVL77-.Ltext0
 4153 0462 0100     		.2byte	0x1
 4154 0464 57       		.byte	0x57
 4155 0465 B0030000 		.4byte	.LVL77-.Ltext0
 4156 0469 C4030000 		.4byte	.LVL79-.Ltext0
 4157 046d 0100     		.2byte	0x1
 4158 046f 55       		.byte	0x55
 4159 0470 C4030000 		.4byte	.LVL79-.Ltext0
 4160 0474 D0030000 		.4byte	.LVL81-.Ltext0
 4161 0478 0100     		.2byte	0x1
 4162 047a 57       		.byte	0x57
 4163 047b D6030000 		.4byte	.LVL83-.Ltext0
 4164 047f EA030000 		.4byte	.LVL85-.Ltext0
 4165 0483 0100     		.2byte	0x1
 4166 0485 55       		.byte	0x55
 4167 0486 00000000 		.4byte	0
 4168 048a 00000000 		.4byte	0
 4169              	.LLST5:
 4170 048e F2030000 		.4byte	.LVL86-.Ltext0
 4171 0492 04040000 		.4byte	.LVL87-.Ltext0
 4172 0496 0100     		.2byte	0x1
 4173 0498 50       		.byte	0x50
 4174 0499 00000000 		.4byte	0
 4175 049d 00000000 		.4byte	0
 4176              	.LLST7:
 4177 04a1 7C020000 		.4byte	.LVL56-.Ltext0
 4178 04a5 98020000 		.4byte	.LVL57-.Ltext0
 4179 04a9 0200     		.2byte	0x2
 4180 04ab 30       		.byte	0x30
 4181 04ac 9F       		.byte	0x9f
 4182 04ad 98020000 		.4byte	.LVL57-.Ltext0
 4183 04b1 CE020000 		.4byte	.LVL61-.Ltext0
 4184 04b5 0100     		.2byte	0x1
 4185 04b7 57       		.byte	0x57
 4186 04b8 CE020000 		.4byte	.LVL61-.Ltext0
 4187 04bc D2020000 		.4byte	.LVL62-.Ltext0
 4188 04c0 0200     		.2byte	0x2
 4189 04c2 30       		.byte	0x30
 4190 04c3 9F       		.byte	0x9f
 4191 04c4 D2020000 		.4byte	.LVL62-.Ltext0
 4192 04c8 60030000 		.4byte	.LVL73-.Ltext0
 4193 04cc 0100     		.2byte	0x1
ARM GAS  /tmp/ccNjU3LR.s 			page 103


 4194 04ce 57       		.byte	0x57
 4195 04cf 00000000 		.4byte	0
 4196 04d3 00000000 		.4byte	0
 4197              	.LLST6:
 4198 04d7 38020000 		.4byte	.LVL49-.Ltext0
 4199 04db 54020000 		.4byte	.LVL50-.Ltext0
 4200 04df 0200     		.2byte	0x2
 4201 04e1 31       		.byte	0x31
 4202 04e2 9F       		.byte	0x9f
 4203 04e3 00000000 		.4byte	0
 4204 04e7 00000000 		.4byte	0
 4205              	.LLST0:
 4206 04eb 00000000 		.4byte	.LFB65-.Ltext0
 4207 04ef 02000000 		.4byte	.LCFI0-.Ltext0
 4208 04f3 0200     		.2byte	0x2
 4209 04f5 7D       		.byte	0x7d
 4210 04f6 00       		.sleb128 0
 4211 04f7 02000000 		.4byte	.LCFI0-.Ltext0
 4212 04fb D8000000 		.4byte	.LFE65-.Ltext0
 4213 04ff 0200     		.2byte	0x2
 4214 0501 7D       		.byte	0x7d
 4215 0502 10       		.sleb128 16
 4216 0503 00000000 		.4byte	0
 4217 0507 00000000 		.4byte	0
 4218              	.LLST1:
 4219 050b 08000000 		.4byte	.LVL1-.Ltext0
 4220 050f 12000000 		.4byte	.LVL2-.Ltext0
 4221 0513 0100     		.2byte	0x1
 4222 0515 50       		.byte	0x50
 4223 0516 12000000 		.4byte	.LVL2-.Ltext0
 4224 051a 30000000 		.4byte	.LVL4-.Ltext0
 4225 051e 0100     		.2byte	0x1
 4226 0520 55       		.byte	0x55
 4227 0521 30000000 		.4byte	.LVL4-.Ltext0
 4228 0525 32000000 		.4byte	.LVL5-.Ltext0
 4229 0529 0100     		.2byte	0x1
 4230 052b 50       		.byte	0x50
 4231 052c 32000000 		.4byte	.LVL5-.Ltext0
 4232 0530 4A000000 		.4byte	.LVL7-.Ltext0
 4233 0534 0100     		.2byte	0x1
 4234 0536 55       		.byte	0x55
 4235 0537 54000000 		.4byte	.LVL9-.Ltext0
 4236 053b 5C000000 		.4byte	.LVL10-.Ltext0
 4237 053f 0100     		.2byte	0x1
 4238 0541 50       		.byte	0x50
 4239 0542 5C000000 		.4byte	.LVL10-.Ltext0
 4240 0546 6C000000 		.4byte	.LVL12-.Ltext0
 4241 054a 0100     		.2byte	0x1
 4242 054c 56       		.byte	0x56
 4243 054d 6C000000 		.4byte	.LVL12-.Ltext0
 4244 0551 74000000 		.4byte	.LVL13-.Ltext0
 4245 0555 0100     		.2byte	0x1
 4246 0557 50       		.byte	0x50
 4247 0558 74000000 		.4byte	.LVL13-.Ltext0
 4248 055c 90000000 		.4byte	.LVL14-.Ltext0
 4249 0560 0100     		.2byte	0x1
 4250 0562 56       		.byte	0x56
ARM GAS  /tmp/ccNjU3LR.s 			page 104


 4251 0563 90000000 		.4byte	.LVL14-.Ltext0
 4252 0567 9A000000 		.4byte	.LVL16-.Ltext0
 4253 056b 0100     		.2byte	0x1
 4254 056d 55       		.byte	0x55
 4255 056e A0000000 		.4byte	.LVL17-.Ltext0
 4256 0572 AC000000 		.4byte	.LVL19-.Ltext0
 4257 0576 0100     		.2byte	0x1
 4258 0578 55       		.byte	0x55
 4259 0579 AC000000 		.4byte	.LVL19-.Ltext0
 4260 057d C4000000 		.4byte	.LVL22-.Ltext0
 4261 0581 0100     		.2byte	0x1
 4262 0583 56       		.byte	0x56
 4263 0584 00000000 		.4byte	0
 4264 0588 00000000 		.4byte	0
 4265              		.section	.debug_aranges,"",%progbits
 4266 0000 1C000000 		.4byte	0x1c
 4267 0004 0200     		.2byte	0x2
 4268 0006 00000000 		.4byte	.Ldebug_info0
 4269 000a 04       		.byte	0x4
 4270 000b 00       		.byte	0
 4271 000c 0000     		.2byte	0
 4272 000e 0000     		.2byte	0
 4273 0010 00000000 		.4byte	.Ltext0
 4274 0014 58070000 		.4byte	.Letext0-.Ltext0
 4275 0018 00000000 		.4byte	0
 4276 001c 00000000 		.4byte	0
 4277              		.section	.debug_ranges,"",%progbits
 4278              	.Ldebug_ranges0:
 4279 0000 30040000 		.4byte	.LBB14-.Ltext0
 4280 0004 32040000 		.4byte	.LBE14-.Ltext0
 4281 0008 34040000 		.4byte	.LBB15-.Ltext0
 4282 000c 36040000 		.4byte	.LBE15-.Ltext0
 4283 0010 38040000 		.4byte	.LBB16-.Ltext0
 4284 0014 40040000 		.4byte	.LBE16-.Ltext0
 4285 0018 42040000 		.4byte	.LBB17-.Ltext0
 4286 001c 4A040000 		.4byte	.LBE17-.Ltext0
 4287 0020 00000000 		.4byte	0
 4288 0024 00000000 		.4byte	0
 4289              		.section	.debug_line,"",%progbits
 4290              	.Ldebug_line0:
 4291 0000 EC030000 		.section	.debug_str,"MS",%progbits,1
 4291      02006701 
 4291      00000201 
 4291      FB0E0D00 
 4291      01010101 
 4292              	.LASF103:
 4293 0000 464C6174 		.ascii	"FLatency\000"
 4293      656E6379 
 4293      00
 4294              	.LASF93:
 4295 0009 48414C5F 		.ascii	"HAL_RCC_CSSCallback\000"
 4295      5243435F 
 4295      43535343 
 4295      616C6C62 
 4295      61636B00 
 4296              	.LASF28:
 4297 001d 4C434B52 		.ascii	"LCKR\000"
ARM GAS  /tmp/ccNjU3LR.s 			page 105


 4297      00
 4298              	.LASF40:
 4299 0022 466C6167 		.ascii	"FlagStatus\000"
 4299      53746174 
 4299      757300
 4300              	.LASF56:
 4301 002d 41504231 		.ascii	"APB1CLKDivider\000"
 4301      434C4B44 
 4301      69766964 
 4301      657200
 4302              	.LASF3:
 4303 003c 5F5F7569 		.ascii	"__uint8_t\000"
 4303      6E74385F 
 4303      7400
 4304              	.LASF94:
 4305 0046 48414C5F 		.ascii	"HAL_RCC_DisableCSS\000"
 4305      5243435F 
 4305      44697361 
 4305      626C6543 
 4305      535300
 4306              	.LASF49:
 4307 0059 504C4C53 		.ascii	"PLLState\000"
 4307      74617465 
 4307      00
 4308              	.LASF107:
 4309 0062 70777263 		.ascii	"pwrclkchanged\000"
 4309      6C6B6368 
 4309      616E6765 
 4309      6400
 4310              	.LASF21:
 4311 0070 41504250 		.ascii	"APBPrescTable\000"
 4311      72657363 
 4311      5461626C 
 4311      6500
 4312              	.LASF41:
 4313 007e 44495341 		.ascii	"DISABLE\000"
 4313      424C4500 
 4314              	.LASF11:
 4315 0086 6C6F6E67 		.ascii	"long long unsigned int\000"
 4315      206C6F6E 
 4315      6720756E 
 4315      7369676E 
 4315      65642069 
 4316              	.LASF62:
 4317 009d 4C534553 		.ascii	"LSEState\000"
 4317      74617465 
 4317      00
 4318              	.LASF83:
 4319 00a6 5243435F 		.ascii	"RCC_OscInitStruct\000"
 4319      4F736349 
 4319      6E697453 
 4319      74727563 
 4319      7400
 4320              	.LASF18:
 4321 00b8 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4321      52784275 
 4321      66666572 
ARM GAS  /tmp/ccNjU3LR.s 			page 106


 4321      00
 4322              	.LASF66:
 4323 00c5 5243435F 		.ascii	"RCC_OscInitTypeDef\000"
 4323      4F736349 
 4323      6E697454 
 4323      79706544 
 4323      656600
 4324              	.LASF0:
 4325 00d8 7369676E 		.ascii	"signed char\000"
 4325      65642063 
 4325      68617200 
 4326              	.LASF27:
 4327 00e4 42535252 		.ascii	"BSRR\000"
 4327      00
 4328              	.LASF26:
 4329 00e9 464C4153 		.ascii	"FLASH_TypeDef\000"
 4329      485F5479 
 4329      70654465 
 4329      6600
 4330              	.LASF30:
 4331 00f7 5057525F 		.ascii	"PWR_TypeDef\000"
 4331      54797065 
 4331      44656600 
 4332              	.LASF88:
 4333 0103 746D7072 		.ascii	"tmpreg\000"
 4333      656700
 4334              	.LASF74:
 4335 010a 48414C5F 		.ascii	"HAL_TICK_FREQ_DEFAULT\000"
 4335      5449434B 
 4335      5F465245 
 4335      515F4445 
 4335      4641554C 
 4336              	.LASF7:
 4337 0120 6C6F6E67 		.ascii	"long int\000"
 4337      20696E74 
 4337      00
 4338              	.LASF32:
 4339 0129 41504232 		.ascii	"APB2RSTR\000"
 4339      52535452 
 4339      00
 4340              	.LASF65:
 4341 0132 4C534953 		.ascii	"LSIState\000"
 4341      74617465 
 4341      00
 4342              	.LASF51:
 4343 013b 504C4C4D 		.ascii	"PLLMUL\000"
 4343      554C00
 4344              	.LASF42:
 4345 0142 454E4142 		.ascii	"ENABLE\000"
 4345      4C4500
 4346              	.LASF91:
 4347 0149 706C6C6D 		.ascii	"pllmul\000"
 4347      756C00
 4348              	.LASF63:
 4349 0150 48534953 		.ascii	"HSIState\000"
 4349      74617465 
 4349      00
ARM GAS  /tmp/ccNjU3LR.s 			page 107


 4350              	.LASF23:
 4351 0159 4F50544B 		.ascii	"OPTKEYR\000"
 4351      45595200 
 4352              	.LASF14:
 4353 0161 75696E74 		.ascii	"uint16_t\000"
 4353      31365F74 
 4353      00
 4354              	.LASF71:
 4355 016a 48414C5F 		.ascii	"HAL_TICK_FREQ_10HZ\000"
 4355      5449434B 
 4355      5F465245 
 4355      515F3130 
 4355      485A00
 4356              	.LASF8:
 4357 017d 5F5F7569 		.ascii	"__uint32_t\000"
 4357      6E743332 
 4357      5F7400
 4358              	.LASF67:
 4359 0188 4D6F6465 		.ascii	"Mode\000"
 4359      00
 4360              	.LASF75:
 4361 018d 48414C5F 		.ascii	"HAL_TickFreqTypeDef\000"
 4361      5469636B 
 4361      46726571 
 4361      54797065 
 4361      44656600 
 4362              	.LASF10:
 4363 01a1 6C6F6E67 		.ascii	"long long int\000"
 4363      206C6F6E 
 4363      6720696E 
 4363      7400
 4364              	.LASF80:
 4365 01af 5243435F 		.ascii	"RCC_ClkInitStruct\000"
 4365      436C6B49 
 4365      6E697453 
 4365      74727563 
 4365      7400
 4366              	.LASF60:
 4367 01c1 48534553 		.ascii	"HSEState\000"
 4367      74617465 
 4367      00
 4368              	.LASF12:
 4369 01ca 756E7369 		.ascii	"unsigned int\000"
 4369      676E6564 
 4369      20696E74 
 4369      00
 4370              	.LASF47:
 4371 01d7 48414C5F 		.ascii	"HAL_TIMEOUT\000"
 4371      54494D45 
 4371      4F555400 
 4372              	.LASF19:
 4373 01e3 53797374 		.ascii	"SystemCoreClock\000"
 4373      656D436F 
 4373      7265436C 
 4373      6F636B00 
 4374              	.LASF77:
 4375 01f3 75775469 		.ascii	"uwTickFreq\000"
ARM GAS  /tmp/ccNjU3LR.s 			page 108


 4375      636B4672 
 4375      657100
 4376              	.LASF99:
 4377 01fe 5243435F 		.ascii	"RCC_MCODiv\000"
 4377      4D434F44 
 4377      697600
 4378              	.LASF9:
 4379 0209 6C6F6E67 		.ascii	"long unsigned int\000"
 4379      20756E73 
 4379      69676E65 
 4379      6420696E 
 4379      7400
 4380              	.LASF29:
 4381 021b 4750494F 		.ascii	"GPIO_TypeDef\000"
 4381      5F547970 
 4381      65446566 
 4381      00
 4382              	.LASF38:
 4383 0228 5243435F 		.ascii	"RCC_TypeDef\000"
 4383      54797065 
 4383      44656600 
 4384              	.LASF73:
 4385 0234 48414C5F 		.ascii	"HAL_TICK_FREQ_1KHZ\000"
 4385      5449434B 
 4385      5F465245 
 4385      515F314B 
 4385      485A00
 4386              	.LASF44:
 4387 0247 48414C5F 		.ascii	"HAL_OK\000"
 4387      4F4B00
 4388              	.LASF5:
 4389 024e 73686F72 		.ascii	"short unsigned int\000"
 4389      7420756E 
 4389      7369676E 
 4389      65642069 
 4389      6E7400
 4390              	.LASF86:
 4391 0261 61504C4C 		.ascii	"aPLLMULFactorTable\000"
 4391      4D554C46 
 4391      6163746F 
 4391      72546162 
 4391      6C6500
 4392              	.LASF59:
 4393 0274 4F736369 		.ascii	"OscillatorType\000"
 4393      6C6C6174 
 4393      6F725479 
 4393      706500
 4394              	.LASF95:
 4395 0283 48414C5F 		.ascii	"HAL_RCC_EnableCSS\000"
 4395      5243435F 
 4395      456E6162 
 4395      6C654353 
 4395      5300
 4396              	.LASF48:
 4397 0295 48414C5F 		.ascii	"HAL_StatusTypeDef\000"
 4397      53746174 
 4397      75735479 
ARM GAS  /tmp/ccNjU3LR.s 			page 109


 4397      70654465 
 4397      6600
 4398              	.LASF20:
 4399 02a7 41484250 		.ascii	"AHBPrescTable\000"
 4399      72657363 
 4399      5461626C 
 4399      6500
 4400              	.LASF6:
 4401 02b5 5F5F696E 		.ascii	"__int32_t\000"
 4401      7433325F 
 4401      7400
 4402              	.LASF55:
 4403 02bf 41484243 		.ascii	"AHBCLKDivider\000"
 4403      4C4B4469 
 4403      76696465 
 4403      7200
 4404              	.LASF92:
 4405 02cd 73797363 		.ascii	"sysclockfreq\000"
 4405      6C6F636B 
 4405      66726571 
 4405      00
 4406              	.LASF17:
 4407 02da 73697A65 		.ascii	"sizetype\000"
 4407      74797065 
 4407      00
 4408              	.LASF111:
 4409 02e3 48414C5F 		.ascii	"HAL_GetTick\000"
 4409      47657454 
 4409      69636B00 
 4410              	.LASF69:
 4411 02ef 53706565 		.ascii	"Speed\000"
 4411      6400
 4412              	.LASF117:
 4413 02f5 44656C61 		.ascii	"Delay\000"
 4413      7900
 4414              	.LASF109:
 4415 02fb 48414C5F 		.ascii	"HAL_GPIO_Init\000"
 4415      4750494F 
 4415      5F496E69 
 4415      7400
 4416              	.LASF61:
 4417 0309 48534550 		.ascii	"HSEPredivValue\000"
 4417      72656469 
 4417      7656616C 
 4417      756500
 4418              	.LASF70:
 4419 0318 4750494F 		.ascii	"GPIO_InitTypeDef\000"
 4419      5F496E69 
 4419      74547970 
 4419      65446566 
 4419      00
 4420              	.LASF58:
 4421 0329 5243435F 		.ascii	"RCC_ClkInitTypeDef\000"
 4421      436C6B49 
 4421      6E697454 
 4421      79706544 
 4421      656600
ARM GAS  /tmp/ccNjU3LR.s 			page 110


 4422              	.LASF96:
 4423 033c 48414C5F 		.ascii	"HAL_RCC_MCOConfig\000"
 4423      5243435F 
 4423      4D434F43 
 4423      6F6E6669 
 4423      6700
 4424              	.LASF33:
 4425 034e 41504231 		.ascii	"APB1RSTR\000"
 4425      52535452 
 4425      00
 4426              	.LASF113:
 4427 0357 7372632F 		.ascii	"src/stm32f1xx_hal_rcc.c\000"
 4427      73746D33 
 4427      32663178 
 4427      785F6861 
 4427      6C5F7263 
 4428              	.LASF110:
 4429 036f 48414C5F 		.ascii	"HAL_InitTick\000"
 4429      496E6974 
 4429      5469636B 
 4429      00
 4430              	.LASF22:
 4431 037c 4B455952 		.ascii	"KEYR\000"
 4431      00
 4432              	.LASF39:
 4433 0381 52455345 		.ascii	"RESET\000"
 4433      5400
 4434              	.LASF84:
 4435 0387 48414C5F 		.ascii	"HAL_RCC_GetPCLK2Freq\000"
 4435      5243435F 
 4435      47657450 
 4435      434C4B32 
 4435      46726571 
 4436              	.LASF114:
 4437 039c 2F686F6D 		.ascii	"/home/berndoj/git/stm32tctst/lib/stm32f1hal\000"
 4437      652F6265 
 4437      726E646F 
 4437      6A2F6769 
 4437      742F7374 
 4438              	.LASF15:
 4439 03c8 696E7433 		.ascii	"int32_t\000"
 4439      325F7400 
 4440              	.LASF1:
 4441 03d0 756E7369 		.ascii	"unsigned char\000"
 4441      676E6564 
 4441      20636861 
 4441      7200
 4442              	.LASF106:
 4443 03de 706C6C5F 		.ascii	"pll_config\000"
 4443      636F6E66 
 4443      696700
 4444              	.LASF2:
 4445 03e9 73686F72 		.ascii	"short int\000"
 4445      7420696E 
 4445      7400
 4446              	.LASF119:
 4447 03f3 6D656D73 		.ascii	"memset\000"
ARM GAS  /tmp/ccNjU3LR.s 			page 111


 4447      657400
 4448              	.LASF104:
 4449 03fa 7469636B 		.ascii	"tickstart\000"
 4449      73746172 
 4449      7400
 4450              	.LASF50:
 4451 0404 504C4C53 		.ascii	"PLLSource\000"
 4451      6F757263 
 4451      6500
 4452              	.LASF24:
 4453 040e 52455345 		.ascii	"RESERVED\000"
 4453      52564544 
 4453      00
 4454              	.LASF112:
 4455 0417 474E5520 		.ascii	"GNU C11 6.3.1 20170620 -mcpu=cortex-m3 -mthumb -g -"
 4455      43313120 
 4455      362E332E 
 4455      31203230 
 4455      31373036 
 4456 044a 67647761 		.ascii	"gdwarf-2 -Os -fomit-frame-pointer\000"
 4456      72662D32 
 4456      202D4F73 
 4456      202D666F 
 4456      6D69742D 
 4457              	.LASF35:
 4458 046c 41504232 		.ascii	"APB2ENR\000"
 4458      454E5200 
 4459              	.LASF64:
 4460 0474 48534943 		.ascii	"HSICalibrationValue\000"
 4460      616C6962 
 4460      72617469 
 4460      6F6E5661 
 4460      6C756500 
 4461              	.LASF115:
 4462 0488 5243435F 		.ascii	"RCC_Delay\000"
 4462      44656C61 
 4462      7900
 4463              	.LASF16:
 4464 0492 75696E74 		.ascii	"uint32_t\000"
 4464      33325F74 
 4464      00
 4465              	.LASF45:
 4466 049b 48414C5F 		.ascii	"HAL_ERROR\000"
 4466      4552524F 
 4466      5200
 4467              	.LASF43:
 4468 04a5 6C6F6E67 		.ascii	"long double\000"
 4468      20646F75 
 4468      626C6500 
 4469              	.LASF25:
 4470 04b1 57525052 		.ascii	"WRPR\000"
 4470      00
 4471              	.LASF105:
 4472 04b6 48414C5F 		.ascii	"HAL_RCC_OscConfig\000"
 4472      5243435F 
 4472      4F736343 
 4472      6F6E6669 
ARM GAS  /tmp/ccNjU3LR.s 			page 112


 4472      6700
 4473              	.LASF76:
 4474 04c8 75775469 		.ascii	"uwTickPrio\000"
 4474      636B5072 
 4474      696F00
 4475              	.LASF4:
 4476 04d3 5F5F7569 		.ascii	"__uint16_t\000"
 4476      6E743136 
 4476      5F7400
 4477              	.LASF101:
 4478 04de 48414C5F 		.ascii	"HAL_RCC_GetSysClockFreq\000"
 4478      5243435F 
 4478      47657453 
 4478      7973436C 
 4478      6F636B46 
 4479              	.LASF108:
 4480 04f6 48414C5F 		.ascii	"HAL_RCC_DeInit\000"
 4480      5243435F 
 4480      4465496E 
 4480      697400
 4481              	.LASF72:
 4482 0505 48414C5F 		.ascii	"HAL_TICK_FREQ_100HZ\000"
 4482      5449434B 
 4482      5F465245 
 4482      515F3130 
 4482      30485A00 
 4483              	.LASF57:
 4484 0519 41504232 		.ascii	"APB2CLKDivider\000"
 4484      434C4B44 
 4484      69766964 
 4484      657200
 4485              	.LASF98:
 4486 0528 5243435F 		.ascii	"RCC_MCOSource\000"
 4486      4D434F53 
 4486      6F757263 
 4486      6500
 4487              	.LASF79:
 4488 0536 48414C5F 		.ascii	"HAL_RCC_GetClockConfig\000"
 4488      5243435F 
 4488      47657443 
 4488      6C6F636B 
 4488      436F6E66 
 4489              	.LASF36:
 4490 054d 41504231 		.ascii	"APB1ENR\000"
 4490      454E5200 
 4491              	.LASF89:
 4492 0555 70726564 		.ascii	"prediv\000"
 4492      697600
 4493              	.LASF90:
 4494 055c 706C6C63 		.ascii	"pllclk\000"
 4494      6C6B00
 4495              	.LASF118:
 4496 0563 48414C5F 		.ascii	"HAL_RCC_GetHCLKFreq\000"
 4496      5243435F 
 4496      47657448 
 4496      434C4B46 
 4496      72657100 
ARM GAS  /tmp/ccNjU3LR.s 			page 113


 4497              	.LASF87:
 4498 0577 61507265 		.ascii	"aPredivFactorTable\000"
 4498      64697646 
 4498      6163746F 
 4498      72546162 
 4498      6C6500
 4499              	.LASF116:
 4500 058a 6D64656C 		.ascii	"mdelay\000"
 4500      617900
 4501              	.LASF102:
 4502 0591 48414C5F 		.ascii	"HAL_RCC_ClockConfig\000"
 4502      5243435F 
 4502      436C6F63 
 4502      6B436F6E 
 4502      66696700 
 4503              	.LASF37:
 4504 05a5 42444352 		.ascii	"BDCR\000"
 4504      00
 4505              	.LASF13:
 4506 05aa 75696E74 		.ascii	"uint8_t\000"
 4506      385F7400 
 4507              	.LASF52:
 4508 05b2 5243435F 		.ascii	"RCC_PLLInitTypeDef\000"
 4508      504C4C49 
 4508      6E697454 
 4508      79706544 
 4508      656600
 4509              	.LASF53:
 4510 05c5 436C6F63 		.ascii	"ClockType\000"
 4510      6B547970 
 4510      6500
 4511              	.LASF100:
 4512 05cf 6770696F 		.ascii	"gpio\000"
 4512      00
 4513              	.LASF68:
 4514 05d4 50756C6C 		.ascii	"Pull\000"
 4514      00
 4515              	.LASF97:
 4516 05d9 5243435F 		.ascii	"RCC_MCOx\000"
 4516      4D434F78 
 4516      00
 4517              	.LASF31:
 4518 05e2 43464752 		.ascii	"CFGR\000"
 4518      00
 4519              	.LASF81:
 4520 05e7 70464C61 		.ascii	"pFLatency\000"
 4520      74656E63 
 4520      7900
 4521              	.LASF46:
 4522 05f1 48414C5F 		.ascii	"HAL_BUSY\000"
 4522      42555359 
 4522      00
 4523              	.LASF82:
 4524 05fa 48414C5F 		.ascii	"HAL_RCC_GetOscConfig\000"
 4524      5243435F 
 4524      4765744F 
 4524      7363436F 
ARM GAS  /tmp/ccNjU3LR.s 			page 114


 4524      6E666967 
 4525              	.LASF78:
 4526 060f 48414C5F 		.ascii	"HAL_RCC_NMI_IRQHandler\000"
 4526      5243435F 
 4526      4E4D495F 
 4526      49525148 
 4526      616E646C 
 4527              	.LASF85:
 4528 0626 48414C5F 		.ascii	"HAL_RCC_GetPCLK1Freq\000"
 4528      5243435F 
 4528      47657450 
 4528      434C4B31 
 4528      46726571 
 4529              	.LASF34:
 4530 063b 41484245 		.ascii	"AHBENR\000"
 4530      4E5200
 4531              	.LASF54:
 4532 0642 53595343 		.ascii	"SYSCLKSource\000"
 4532      4C4B536F 
 4532      75726365 
 4532      00
 4533              		.ident	"GCC: (15:6.3.1+svn253039-1build1) 6.3.1 20170620"
ARM GAS  /tmp/ccNjU3LR.s 			page 115


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_rcc.c
     /tmp/ccNjU3LR.s:69     .text:0000000000000000 $t
     /tmp/ccNjU3LR.s:76     .text:0000000000000000 HAL_RCC_DeInit
     /tmp/ccNjU3LR.s:237    .text:00000000000000c8 $d
     /tmp/ccNjU3LR.s:244    .text:00000000000000d8 $t
     /tmp/ccNjU3LR.s:251    .text:00000000000000d8 HAL_RCC_OscConfig
     /tmp/ccNjU3LR.s:726    .text:000000000000034c $d
     /tmp/ccNjU3LR.s:735    .text:0000000000000360 $t
     /tmp/ccNjU3LR.s:851    .text:000000000000040c $d
     /tmp/ccNjU3LR.s:856    .text:0000000000000414 $t
     /tmp/ccNjU3LR.s:863    .text:0000000000000414 HAL_RCC_MCOConfig
     /tmp/ccNjU3LR.s:942    .text:000000000000045c $d
     /tmp/ccNjU3LR.s:947    .text:0000000000000464 $t
     /tmp/ccNjU3LR.s:954    .text:0000000000000464 HAL_RCC_EnableCSS
     /tmp/ccNjU3LR.s:969    .text:000000000000046c $d
     /tmp/ccNjU3LR.s:973    .text:0000000000000470 $t
     /tmp/ccNjU3LR.s:980    .text:0000000000000470 HAL_RCC_DisableCSS
     /tmp/ccNjU3LR.s:995    .text:0000000000000478 $d
     /tmp/ccNjU3LR.s:999    .text:000000000000047c $t
     /tmp/ccNjU3LR.s:1006   .text:000000000000047c HAL_RCC_GetSysClockFreq
     /tmp/ccNjU3LR.s:1109   .text:00000000000004e4 $d
     /tmp/ccNjU3LR.s:1116   .text:00000000000004f4 $t
     /tmp/ccNjU3LR.s:1123   .text:00000000000004f4 HAL_RCC_ClockConfig
     /tmp/ccNjU3LR.s:1329   .text:000000000000061c $d
     /tmp/ccNjU3LR.s:1337   .text:0000000000000630 $t
     /tmp/ccNjU3LR.s:1344   .text:0000000000000630 HAL_RCC_GetHCLKFreq
     /tmp/ccNjU3LR.s:1358   .text:0000000000000638 $d
     /tmp/ccNjU3LR.s:1362   .text:000000000000063c $t
     /tmp/ccNjU3LR.s:1369   .text:000000000000063c HAL_RCC_GetPCLK1Freq
     /tmp/ccNjU3LR.s:1390   .text:0000000000000650 $d
     /tmp/ccNjU3LR.s:1396   .text:000000000000065c $t
     /tmp/ccNjU3LR.s:1403   .text:000000000000065c HAL_RCC_GetPCLK2Freq
     /tmp/ccNjU3LR.s:1424   .text:0000000000000670 $d
     /tmp/ccNjU3LR.s:1430   .text:000000000000067c $t
     /tmp/ccNjU3LR.s:1437   .text:000000000000067c HAL_RCC_GetOscConfig
     /tmp/ccNjU3LR.s:1528   .text:00000000000006f8 $d
     /tmp/ccNjU3LR.s:1532   .text:00000000000006fc $t
     /tmp/ccNjU3LR.s:1539   .text:00000000000006fc HAL_RCC_GetClockConfig
     /tmp/ccNjU3LR.s:1577   .text:0000000000000730 $d
     /tmp/ccNjU3LR.s:1582   .text:0000000000000738 $t
     /tmp/ccNjU3LR.s:1589   .text:0000000000000738 HAL_RCC_CSSCallback
     /tmp/ccNjU3LR.s:1607   .text:000000000000073a HAL_RCC_NMI_IRQHandler
     /tmp/ccNjU3LR.s:1636   .text:0000000000000750 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_InitTick
SystemCoreClock
uwTickPrio
memset
HAL_GPIO_Init
AHBPrescTable
APBPrescTable
