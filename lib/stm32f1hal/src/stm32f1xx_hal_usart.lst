ARM GAS  /tmp/ccpGcYbE.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"stm32f1xx_hal_usart.c"
  12              	@ GNU C11 (15:6.3.1+svn253039-1build1) version 6.3.1 20170620 (arm-none-eabi)
  13              	@	compiled by GNU C version 7.2.0, GMP version 6.1.2, MPFR version 4.0.1-rc1, MPC version 1.1.0, is
  14              	@ warning: MPFR header version 4.0.1-rc1 differs from library version 4.0.1.
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I ./inc -I ./inc/Legacy -I ../cmsisstm32f1xx/inc
  17              	@ -I ../cmsiscore/inc -imultilib thumb/v7-m -D__USES_INITFINI__
  18              	@ -D STM32F103x6 -D RUN_FROM_FLASH=1 -D __c src/stm32f1xx_hal_usart.c
  19              	@ -mcpu=cortex-m3 -mthumb -auxbase-strip bin/stm32f1xx_hal_usart.o -g
  20              	@ -gdwarf-2 -Os -Wall -fomit-frame-pointer -fverbose-asm
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffunction-cse -fgcse
  32              	@ -fgcse-lm -fgnu-runtime -fgnu-unique -fguess-branch-probability
  33              	@ -fhoist-adjacent-loads -fident -fif-conversion -fif-conversion2
  34              	@ -findirect-inlining -finline -finline-atomics -finline-functions
  35              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  36              	@ -fipa-cp-alignment -fipa-icf -fipa-icf-functions -fipa-icf-variables
  37              	@ -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra
  38              	@ -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  39              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  40              	@ -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  41              	@ -fmath-errno -fmerge-constants -fmerge-debug-strings
  42              	@ -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  43              	@ -fpartial-inlining -fpeephole -fpeephole2 -fplt -fprefetch-loop-arrays
  44              	@ -freg-struct-return -freorder-blocks -freorder-functions
  45              	@ -frerun-cse-after-loop -fsched-critical-path-heuristic
  46              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  47              	@ -fsched-last-insn-heuristic -fsched-pressure -fsched-rank-heuristic
  48              	@ -fsched-spec -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  49              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  50              	@ -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types
  51              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstrict-aliasing
  52              	@ -fstrict-overflow -fstrict-volatile-bitfields -fsync-libcalls
  53              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  54              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  55              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  56              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  57              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
ARM GAS  /tmp/ccpGcYbE.s 			page 2


  58              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  59              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  60              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  61              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  62              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  63              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  64              	@ -munaligned-access -mvectorize-with-neon-quad
  65              	
  66              		.text
  67              	.Ltext0:
  68              		.cfi_sections	.debug_frame
  69              		.align	1
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu softvfp
  74              		.type	USART_EndRxTransfer, %function
  75              	USART_EndRxTransfer:
  76              	.LFB100:
  77              		.file 1 "src/stm32f1xx_hal_usart.c"
   1:src/stm32f1xx_hal_usart.c **** /**
   2:src/stm32f1xx_hal_usart.c ****   ******************************************************************************
   3:src/stm32f1xx_hal_usart.c ****   * @file    stm32f1xx_hal_usart.c
   4:src/stm32f1xx_hal_usart.c ****   * @author  MCD Application Team
   5:src/stm32f1xx_hal_usart.c ****   * @brief   USART HAL module driver.
   6:src/stm32f1xx_hal_usart.c ****   *          This file provides firmware functions to manage the following
   7:src/stm32f1xx_hal_usart.c ****   *          functionalities of the Universal Synchronous/Asynchronous Receiver Transmitter
   8:src/stm32f1xx_hal_usart.c ****   *          Peripheral (USART).
   9:src/stm32f1xx_hal_usart.c ****   *           + Initialization and de-initialization functions
  10:src/stm32f1xx_hal_usart.c ****   *           + IO operation functions
  11:src/stm32f1xx_hal_usart.c ****   *           + Peripheral Control functions
  12:src/stm32f1xx_hal_usart.c ****   @verbatim
  13:src/stm32f1xx_hal_usart.c ****   ==============================================================================
  14:src/stm32f1xx_hal_usart.c ****                         ##### How to use this driver #####
  15:src/stm32f1xx_hal_usart.c ****   ==============================================================================
  16:src/stm32f1xx_hal_usart.c ****   [..]
  17:src/stm32f1xx_hal_usart.c ****     The USART HAL driver can be used as follows:
  18:src/stm32f1xx_hal_usart.c **** 
  19:src/stm32f1xx_hal_usart.c ****     (#) Declare a USART_HandleTypeDef handle structure (eg. USART_HandleTypeDef husart).
  20:src/stm32f1xx_hal_usart.c ****     (#) Initialize the USART low level resources by implementing the HAL_USART_MspInit() API:
  21:src/stm32f1xx_hal_usart.c ****         (##) Enable the USARTx interface clock.
  22:src/stm32f1xx_hal_usart.c ****         (##) USART pins configuration:
  23:src/stm32f1xx_hal_usart.c ****              (+++) Enable the clock for the USART GPIOs.
  24:src/stm32f1xx_hal_usart.c ****              (+++) Configure the USART pins as alternate function pull-up.
  25:src/stm32f1xx_hal_usart.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_USART_Transmit_IT(),
  26:src/stm32f1xx_hal_usart.c ****              HAL_USART_Receive_IT() and HAL_USART_TransmitReceive_IT() APIs):
  27:src/stm32f1xx_hal_usart.c ****              (+++) Configure the USARTx interrupt priority.
  28:src/stm32f1xx_hal_usart.c ****              (+++) Enable the NVIC USART IRQ handle.
  29:src/stm32f1xx_hal_usart.c ****         (##) DMA Configuration if you need to use DMA process (HAL_USART_Transmit_DMA()
  30:src/stm32f1xx_hal_usart.c ****              HAL_USART_Receive_DMA() and HAL_USART_TransmitReceive_DMA() APIs):
  31:src/stm32f1xx_hal_usart.c ****              (+++) Declare a DMA handle structure for the Tx/Rx channel.
  32:src/stm32f1xx_hal_usart.c ****              (+++) Enable the DMAx interface clock.
  33:src/stm32f1xx_hal_usart.c ****              (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  34:src/stm32f1xx_hal_usart.c ****              (+++) Configure the DMA Tx/Rx channel.
  35:src/stm32f1xx_hal_usart.c ****              (+++) Associate the initialized DMA handle to the USART DMA Tx/Rx handle.
  36:src/stm32f1xx_hal_usart.c ****              (+++) Configure the priority and enable the NVIC for the transfer complete interrupt o
  37:src/stm32f1xx_hal_usart.c ****              (+++) Configure the USARTx interrupt priority and enable the NVIC USART IRQ handle
ARM GAS  /tmp/ccpGcYbE.s 			page 3


  38:src/stm32f1xx_hal_usart.c ****                    (used for last byte sending completion detection in DMA non circular mode)
  39:src/stm32f1xx_hal_usart.c **** 
  40:src/stm32f1xx_hal_usart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  41:src/stm32f1xx_hal_usart.c ****         flow control and Mode(Receiver/Transmitter) in the husart Init structure.
  42:src/stm32f1xx_hal_usart.c **** 
  43:src/stm32f1xx_hal_usart.c ****     (#) Initialize the USART registers by calling the HAL_USART_Init() API:
  44:src/stm32f1xx_hal_usart.c ****         (++) These APIs configures also the low level Hardware GPIO, CLOCK, CORTEX...etc)
  45:src/stm32f1xx_hal_usart.c ****              by calling the customized HAL_USART_MspInit(&husart) API.
  46:src/stm32f1xx_hal_usart.c **** 
  47:src/stm32f1xx_hal_usart.c ****         -@@- The specific USART interrupts (Transmission complete interrupt,
  48:src/stm32f1xx_hal_usart.c ****              RXNE interrupt and Error Interrupts) will be managed using the macros
  49:src/stm32f1xx_hal_usart.c ****              __HAL_USART_ENABLE_IT() and __HAL_USART_DISABLE_IT() inside the transmit and receive p
  50:src/stm32f1xx_hal_usart.c **** 
  51:src/stm32f1xx_hal_usart.c ****     (#) Three operation modes are available within this driver :
  52:src/stm32f1xx_hal_usart.c **** 
  53:src/stm32f1xx_hal_usart.c ****      *** Polling mode IO operation ***
  54:src/stm32f1xx_hal_usart.c ****      =================================
  55:src/stm32f1xx_hal_usart.c ****      [..]
  56:src/stm32f1xx_hal_usart.c ****        (+) Send an amount of data in blocking mode using HAL_USART_Transmit()
  57:src/stm32f1xx_hal_usart.c ****        (+) Receive an amount of data in blocking mode using HAL_USART_Receive()
  58:src/stm32f1xx_hal_usart.c **** 
  59:src/stm32f1xx_hal_usart.c ****      *** Interrupt mode IO operation ***
  60:src/stm32f1xx_hal_usart.c ****      ===================================
  61:src/stm32f1xx_hal_usart.c ****      [..]
  62:src/stm32f1xx_hal_usart.c ****        (+) Send an amount of data in non blocking mode using HAL_USART_Transmit_IT()
  63:src/stm32f1xx_hal_usart.c ****        (+) At transmission end of transfer HAL_USART_TxHalfCpltCallback is executed and user can
  64:src/stm32f1xx_hal_usart.c ****             add his own code by customization of function pointer HAL_USART_TxCpltCallback
  65:src/stm32f1xx_hal_usart.c ****        (+) Receive an amount of data in non blocking mode using HAL_USART_Receive_IT()
  66:src/stm32f1xx_hal_usart.c ****        (+) At reception end of transfer HAL_USART_RxCpltCallback is executed and user can
  67:src/stm32f1xx_hal_usart.c ****             add his own code by customization of function pointer HAL_USART_RxCpltCallback
  68:src/stm32f1xx_hal_usart.c ****        (+) In case of transfer Error, HAL_USART_ErrorCallback() function is executed and user can
  69:src/stm32f1xx_hal_usart.c ****             add his own code by customization of function pointer HAL_USART_ErrorCallback
  70:src/stm32f1xx_hal_usart.c **** 
  71:src/stm32f1xx_hal_usart.c ****      *** DMA mode IO operation ***
  72:src/stm32f1xx_hal_usart.c ****      ==============================
  73:src/stm32f1xx_hal_usart.c ****      [..]
  74:src/stm32f1xx_hal_usart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_USART_Transmit_DMA()
  75:src/stm32f1xx_hal_usart.c ****        (+) At transmission end of half transfer HAL_USART_TxHalfCpltCallback is executed and user c
  76:src/stm32f1xx_hal_usart.c ****             add his own code by customization of function pointer HAL_USART_TxHalfCpltCallback
  77:src/stm32f1xx_hal_usart.c ****        (+) At transmission end of transfer HAL_USART_TxCpltCallback is executed and user can
  78:src/stm32f1xx_hal_usart.c ****             add his own code by customization of function pointer HAL_USART_TxCpltCallback
  79:src/stm32f1xx_hal_usart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_USART_Receive_DMA()
  80:src/stm32f1xx_hal_usart.c ****        (+) At reception end of half transfer HAL_USART_RxHalfCpltCallback is executed and user can
  81:src/stm32f1xx_hal_usart.c ****             add his own code by customization of function pointer HAL_USART_RxHalfCpltCallback
  82:src/stm32f1xx_hal_usart.c ****        (+) At reception end of transfer HAL_USART_RxCpltCallback is executed and user can
  83:src/stm32f1xx_hal_usart.c ****             add his own code by customization of function pointer HAL_USART_RxCpltCallback
  84:src/stm32f1xx_hal_usart.c ****        (+) In case of transfer Error, HAL_USART_ErrorCallback() function is executed and user can
  85:src/stm32f1xx_hal_usart.c ****             add his own code by customization of function pointer HAL_USART_ErrorCallback
  86:src/stm32f1xx_hal_usart.c ****        (+) Pause the DMA Transfer using HAL_USART_DMAPause()
  87:src/stm32f1xx_hal_usart.c ****        (+) Resume the DMA Transfer using HAL_USART_DMAResume()
  88:src/stm32f1xx_hal_usart.c ****        (+) Stop the DMA Transfer using HAL_USART_DMAStop()
  89:src/stm32f1xx_hal_usart.c **** 
  90:src/stm32f1xx_hal_usart.c ****      *** USART HAL driver macros list ***
  91:src/stm32f1xx_hal_usart.c ****      =============================================
  92:src/stm32f1xx_hal_usart.c ****      [..]
  93:src/stm32f1xx_hal_usart.c ****        Below the list of most used macros in USART HAL driver.
  94:src/stm32f1xx_hal_usart.c **** 
ARM GAS  /tmp/ccpGcYbE.s 			page 4


  95:src/stm32f1xx_hal_usart.c ****        (+) __HAL_USART_ENABLE: Enable the USART peripheral
  96:src/stm32f1xx_hal_usart.c ****        (+) __HAL_USART_DISABLE: Disable the USART peripheral
  97:src/stm32f1xx_hal_usart.c ****        (+) __HAL_USART_GET_FLAG : Check whether the specified USART flag is set or not
  98:src/stm32f1xx_hal_usart.c ****        (+) __HAL_USART_CLEAR_FLAG : Clear the specified USART pending flag
  99:src/stm32f1xx_hal_usart.c ****        (+) __HAL_USART_ENABLE_IT: Enable the specified USART interrupt
 100:src/stm32f1xx_hal_usart.c ****        (+) __HAL_USART_DISABLE_IT: Disable the specified USART interrupt
 101:src/stm32f1xx_hal_usart.c **** 
 102:src/stm32f1xx_hal_usart.c ****      [..]
 103:src/stm32f1xx_hal_usart.c ****        (@) You can refer to the USART HAL driver header file for more useful macros
 104:src/stm32f1xx_hal_usart.c **** 
 105:src/stm32f1xx_hal_usart.c ****     ##### Callback registration #####
 106:src/stm32f1xx_hal_usart.c ****     ==================================
 107:src/stm32f1xx_hal_usart.c **** 
 108:src/stm32f1xx_hal_usart.c ****     [..]
 109:src/stm32f1xx_hal_usart.c ****     The compilation define USE_HAL_USART_REGISTER_CALLBACKS when set to 1
 110:src/stm32f1xx_hal_usart.c ****     allows the user to configure dynamically the driver callbacks.
 111:src/stm32f1xx_hal_usart.c **** 
 112:src/stm32f1xx_hal_usart.c ****     [..]
 113:src/stm32f1xx_hal_usart.c ****     Use Function @ref HAL_USART_RegisterCallback() to register a user callback.
 114:src/stm32f1xx_hal_usart.c ****     Function @ref HAL_USART_RegisterCallback() allows to register following callbacks:
 115:src/stm32f1xx_hal_usart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
 116:src/stm32f1xx_hal_usart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
 117:src/stm32f1xx_hal_usart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
 118:src/stm32f1xx_hal_usart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 119:src/stm32f1xx_hal_usart.c ****     (+) TxRxCpltCallback          : Tx Rx Complete Callback.
 120:src/stm32f1xx_hal_usart.c ****     (+) ErrorCallback             : Error Callback.
 121:src/stm32f1xx_hal_usart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 122:src/stm32f1xx_hal_usart.c ****     (+) MspInitCallback           : USART MspInit.
 123:src/stm32f1xx_hal_usart.c ****     (+) MspDeInitCallback         : USART MspDeInit.
 124:src/stm32f1xx_hal_usart.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
 125:src/stm32f1xx_hal_usart.c ****     and a pointer to the user callback function.
 126:src/stm32f1xx_hal_usart.c **** 
 127:src/stm32f1xx_hal_usart.c ****     [..]
 128:src/stm32f1xx_hal_usart.c ****     Use function @ref HAL_USART_UnRegisterCallback() to reset a callback to the default
 129:src/stm32f1xx_hal_usart.c ****     weak (surcharged) function.
 130:src/stm32f1xx_hal_usart.c ****     @ref HAL_USART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 131:src/stm32f1xx_hal_usart.c ****     and the Callback ID.
 132:src/stm32f1xx_hal_usart.c ****     This function allows to reset following callbacks:
 133:src/stm32f1xx_hal_usart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
 134:src/stm32f1xx_hal_usart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
 135:src/stm32f1xx_hal_usart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
 136:src/stm32f1xx_hal_usart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 137:src/stm32f1xx_hal_usart.c ****     (+) TxRxCpltCallback          : Tx Rx Complete Callback.
 138:src/stm32f1xx_hal_usart.c ****     (+) ErrorCallback             : Error Callback.
 139:src/stm32f1xx_hal_usart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 140:src/stm32f1xx_hal_usart.c ****     (+) MspInitCallback           : USART MspInit.
 141:src/stm32f1xx_hal_usart.c ****     (+) MspDeInitCallback         : USART MspDeInit.
 142:src/stm32f1xx_hal_usart.c **** 
 143:src/stm32f1xx_hal_usart.c ****     [..]
 144:src/stm32f1xx_hal_usart.c ****     By default, after the @ref HAL_USART_Init() and when the state is HAL_USART_STATE_RESET
 145:src/stm32f1xx_hal_usart.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 146:src/stm32f1xx_hal_usart.c ****     examples @ref HAL_USART_TxCpltCallback(), @ref HAL_USART_RxHalfCpltCallback().
 147:src/stm32f1xx_hal_usart.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 148:src/stm32f1xx_hal_usart.c ****     reset to the legacy weak (surcharged) functions in the @ref HAL_USART_Init()
 149:src/stm32f1xx_hal_usart.c ****     and @ref HAL_USART_DeInit() only when these callbacks are null (not registered beforehand).
 150:src/stm32f1xx_hal_usart.c ****     If not, MspInit or MspDeInit are not null, the @ref HAL_USART_Init() and @ref HAL_USART_DeInit(
 151:src/stm32f1xx_hal_usart.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
ARM GAS  /tmp/ccpGcYbE.s 			page 5


 152:src/stm32f1xx_hal_usart.c **** 
 153:src/stm32f1xx_hal_usart.c ****     [..]
 154:src/stm32f1xx_hal_usart.c ****     Callbacks can be registered/unregistered in HAL_USART_STATE_READY state only.
 155:src/stm32f1xx_hal_usart.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
 156:src/stm32f1xx_hal_usart.c ****     in HAL_USART_STATE_READY or HAL_USART_STATE_RESET state, thus registered (user)
 157:src/stm32f1xx_hal_usart.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 158:src/stm32f1xx_hal_usart.c ****     In that case first register the MspInit/MspDeInit user callbacks
 159:src/stm32f1xx_hal_usart.c ****     using @ref HAL_USART_RegisterCallback() before calling @ref HAL_USART_DeInit()
 160:src/stm32f1xx_hal_usart.c ****     or @ref HAL_USART_Init() function.
 161:src/stm32f1xx_hal_usart.c **** 
 162:src/stm32f1xx_hal_usart.c ****     [..]
 163:src/stm32f1xx_hal_usart.c ****     When The compilation define USE_HAL_USART_REGISTER_CALLBACKS is set to 0 or
 164:src/stm32f1xx_hal_usart.c ****     not defined, the callback registration feature is not available
 165:src/stm32f1xx_hal_usart.c ****     and weak (surcharged) callbacks are used.
 166:src/stm32f1xx_hal_usart.c **** 
 167:src/stm32f1xx_hal_usart.c ****   @endverbatim
 168:src/stm32f1xx_hal_usart.c ****      [..]
 169:src/stm32f1xx_hal_usart.c ****        (@) Additionnal remark: If the parity is enabled, then the MSB bit of the data written
 170:src/stm32f1xx_hal_usart.c ****            in the data register is transmitted but is changed by the parity bit.
 171:src/stm32f1xx_hal_usart.c ****            Depending on the frame length defined by the M bit (8-bits or 9-bits),
 172:src/stm32f1xx_hal_usart.c ****            the possible USART frame formats are as listed in the following table:
 173:src/stm32f1xx_hal_usart.c ****     +-------------------------------------------------------------+
 174:src/stm32f1xx_hal_usart.c ****     |   M bit |  PCE bit  |            USART frame                 |
 175:src/stm32f1xx_hal_usart.c ****     |---------------------|---------------------------------------|
 176:src/stm32f1xx_hal_usart.c ****     |    0    |    0      |    | SB | 8 bit data | STB |          |
 177:src/stm32f1xx_hal_usart.c ****     |---------|-----------|---------------------------------------|
 178:src/stm32f1xx_hal_usart.c ****     |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 179:src/stm32f1xx_hal_usart.c ****     |---------|-----------|---------------------------------------|
 180:src/stm32f1xx_hal_usart.c ****     |    1    |    0      |    | SB | 9 bit data | STB |          |
 181:src/stm32f1xx_hal_usart.c ****     |---------|-----------|---------------------------------------|
 182:src/stm32f1xx_hal_usart.c ****     |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 183:src/stm32f1xx_hal_usart.c ****     +-------------------------------------------------------------+
 184:src/stm32f1xx_hal_usart.c ****   ******************************************************************************
 185:src/stm32f1xx_hal_usart.c ****   * @attention
 186:src/stm32f1xx_hal_usart.c ****   *
 187:src/stm32f1xx_hal_usart.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 188:src/stm32f1xx_hal_usart.c ****   * All rights reserved.</center></h2>
 189:src/stm32f1xx_hal_usart.c ****   *
 190:src/stm32f1xx_hal_usart.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 191:src/stm32f1xx_hal_usart.c ****   * the "License"; You may not use this file except in compliance with the
 192:src/stm32f1xx_hal_usart.c ****   * License. You may obtain a copy of the License at:
 193:src/stm32f1xx_hal_usart.c ****   *                        opensource.org/licenses/BSD-3-Clause
 194:src/stm32f1xx_hal_usart.c ****   *
 195:src/stm32f1xx_hal_usart.c ****   ******************************************************************************
 196:src/stm32f1xx_hal_usart.c ****   */
 197:src/stm32f1xx_hal_usart.c **** 
 198:src/stm32f1xx_hal_usart.c **** /* Includes ------------------------------------------------------------------*/
 199:src/stm32f1xx_hal_usart.c **** #include "stm32f1xx_hal.h"
 200:src/stm32f1xx_hal_usart.c **** 
 201:src/stm32f1xx_hal_usart.c **** /** @addtogroup STM32F1xx_HAL_Driver
 202:src/stm32f1xx_hal_usart.c ****   * @{
 203:src/stm32f1xx_hal_usart.c ****   */
 204:src/stm32f1xx_hal_usart.c **** 
 205:src/stm32f1xx_hal_usart.c **** /** @defgroup USART USART
 206:src/stm32f1xx_hal_usart.c ****   * @brief HAL USART Synchronous module driver
 207:src/stm32f1xx_hal_usart.c ****   * @{
 208:src/stm32f1xx_hal_usart.c ****   */
ARM GAS  /tmp/ccpGcYbE.s 			page 6


 209:src/stm32f1xx_hal_usart.c **** #ifdef HAL_USART_MODULE_ENABLED
 210:src/stm32f1xx_hal_usart.c **** /* Private typedef -----------------------------------------------------------*/
 211:src/stm32f1xx_hal_usart.c **** /* Private define ------------------------------------------------------------*/
 212:src/stm32f1xx_hal_usart.c **** /** @addtogroup USART_Private_Constants
 213:src/stm32f1xx_hal_usart.c ****   * @{
 214:src/stm32f1xx_hal_usart.c ****   */
 215:src/stm32f1xx_hal_usart.c **** #define DUMMY_DATA           0xFFFFU
 216:src/stm32f1xx_hal_usart.c **** #define USART_TIMEOUT_VALUE  22000U
 217:src/stm32f1xx_hal_usart.c **** /**
 218:src/stm32f1xx_hal_usart.c ****   * @}
 219:src/stm32f1xx_hal_usart.c ****   */
 220:src/stm32f1xx_hal_usart.c **** /* Private macro -------------------------------------------------------------*/
 221:src/stm32f1xx_hal_usart.c **** /* Private variables ---------------------------------------------------------*/
 222:src/stm32f1xx_hal_usart.c **** /* Private function prototypes -----------------------------------------------*/
 223:src/stm32f1xx_hal_usart.c **** /* Private functions ---------------------------------------------------------*/
 224:src/stm32f1xx_hal_usart.c **** /** @addtogroup USART_Private_Functions
 225:src/stm32f1xx_hal_usart.c ****   * @{
 226:src/stm32f1xx_hal_usart.c ****   */
 227:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
 228:src/stm32f1xx_hal_usart.c **** void USART_InitCallbacksToDefault(USART_HandleTypeDef *husart);
 229:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 230:src/stm32f1xx_hal_usart.c **** static void USART_EndTxTransfer(USART_HandleTypeDef *husart);
 231:src/stm32f1xx_hal_usart.c **** static void USART_EndRxTransfer(USART_HandleTypeDef *husart);
 232:src/stm32f1xx_hal_usart.c **** static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart);
 233:src/stm32f1xx_hal_usart.c **** static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart);
 234:src/stm32f1xx_hal_usart.c **** static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart);
 235:src/stm32f1xx_hal_usart.c **** static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart);
 236:src/stm32f1xx_hal_usart.c **** static void USART_SetConfig(USART_HandleTypeDef *husart);
 237:src/stm32f1xx_hal_usart.c **** static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 238:src/stm32f1xx_hal_usart.c **** static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 239:src/stm32f1xx_hal_usart.c **** static void USART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 240:src/stm32f1xx_hal_usart.c **** static void USART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 241:src/stm32f1xx_hal_usart.c **** static void USART_DMAError(DMA_HandleTypeDef *hdma);
 242:src/stm32f1xx_hal_usart.c **** static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 243:src/stm32f1xx_hal_usart.c **** static void USART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 244:src/stm32f1xx_hal_usart.c **** static void USART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 245:src/stm32f1xx_hal_usart.c **** 
 246:src/stm32f1xx_hal_usart.c **** static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, F
 247:src/stm32f1xx_hal_usart.c **** /**
 248:src/stm32f1xx_hal_usart.c ****   * @}
 249:src/stm32f1xx_hal_usart.c ****   */
 250:src/stm32f1xx_hal_usart.c **** 
 251:src/stm32f1xx_hal_usart.c **** /* Exported functions --------------------------------------------------------*/
 252:src/stm32f1xx_hal_usart.c **** /** @defgroup USART_Exported_Functions USART Exported Functions
 253:src/stm32f1xx_hal_usart.c ****   * @{
 254:src/stm32f1xx_hal_usart.c ****   */
 255:src/stm32f1xx_hal_usart.c **** 
 256:src/stm32f1xx_hal_usart.c **** /** @defgroup USART_Exported_Functions_Group1 USART Initialization and de-initialization functions
 257:src/stm32f1xx_hal_usart.c ****   *  @brief    Initialization and Configuration functions
 258:src/stm32f1xx_hal_usart.c ****   *
 259:src/stm32f1xx_hal_usart.c **** @verbatim
 260:src/stm32f1xx_hal_usart.c ****   ==============================================================================
 261:src/stm32f1xx_hal_usart.c ****               ##### Initialization and Configuration functions #####
 262:src/stm32f1xx_hal_usart.c ****   ==============================================================================
 263:src/stm32f1xx_hal_usart.c ****   [..]
 264:src/stm32f1xx_hal_usart.c ****   This subsection provides a set of functions allowing to initialize the USART
 265:src/stm32f1xx_hal_usart.c ****   in asynchronous and in synchronous modes.
ARM GAS  /tmp/ccpGcYbE.s 			page 7


 266:src/stm32f1xx_hal_usart.c ****   (+) For the asynchronous mode only these parameters can be configured:
 267:src/stm32f1xx_hal_usart.c ****       (++) Baud Rate
 268:src/stm32f1xx_hal_usart.c ****       (++) Word Length
 269:src/stm32f1xx_hal_usart.c ****       (++) Stop Bit
 270:src/stm32f1xx_hal_usart.c ****       (++) Parity: If the parity is enabled, then the MSB bit of the data written
 271:src/stm32f1xx_hal_usart.c ****            in the data register is transmitted but is changed by the parity bit.
 272:src/stm32f1xx_hal_usart.c ****            Depending on the frame length defined by the M bit (8-bits or 9-bits),
 273:src/stm32f1xx_hal_usart.c ****            please refer to Reference manual for possible USART frame formats.
 274:src/stm32f1xx_hal_usart.c ****       (++) USART polarity
 275:src/stm32f1xx_hal_usart.c ****       (++) USART phase
 276:src/stm32f1xx_hal_usart.c ****       (++) USART LastBit
 277:src/stm32f1xx_hal_usart.c ****       (++) Receiver/transmitter modes
 278:src/stm32f1xx_hal_usart.c **** 
 279:src/stm32f1xx_hal_usart.c ****   [..]
 280:src/stm32f1xx_hal_usart.c ****     The HAL_USART_Init() function follows the USART  synchronous configuration
 281:src/stm32f1xx_hal_usart.c ****     procedures (details for the procedures are available in reference manuals
 282:src/stm32f1xx_hal_usart.c ****     (RM0008 for STM32F10Xxx MCUs and RM0041 for STM32F100xx MCUs)).
 283:src/stm32f1xx_hal_usart.c **** 
 284:src/stm32f1xx_hal_usart.c **** @endverbatim
 285:src/stm32f1xx_hal_usart.c ****   * @{
 286:src/stm32f1xx_hal_usart.c ****   */
 287:src/stm32f1xx_hal_usart.c **** 
 288:src/stm32f1xx_hal_usart.c **** /**
 289:src/stm32f1xx_hal_usart.c ****   * @brief  Initialize the USART mode according to the specified
 290:src/stm32f1xx_hal_usart.c ****   *         parameters in the USART_InitTypeDef and initialize the associated handle.
 291:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
 292:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
 293:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
 294:src/stm32f1xx_hal_usart.c ****   */
 295:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
 296:src/stm32f1xx_hal_usart.c **** {
 297:src/stm32f1xx_hal_usart.c ****   /* Check the USART handle allocation */
 298:src/stm32f1xx_hal_usart.c ****   if (husart == NULL)
 299:src/stm32f1xx_hal_usart.c ****   {
 300:src/stm32f1xx_hal_usart.c ****     return HAL_ERROR;
 301:src/stm32f1xx_hal_usart.c ****   }
 302:src/stm32f1xx_hal_usart.c **** 
 303:src/stm32f1xx_hal_usart.c ****   /* Check the parameters */
 304:src/stm32f1xx_hal_usart.c ****   assert_param(IS_USART_INSTANCE(husart->Instance));
 305:src/stm32f1xx_hal_usart.c **** 
 306:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_RESET)
 307:src/stm32f1xx_hal_usart.c ****   {
 308:src/stm32f1xx_hal_usart.c ****     /* Allocate lock resource and initialize it */
 309:src/stm32f1xx_hal_usart.c ****     husart->Lock = HAL_UNLOCKED;
 310:src/stm32f1xx_hal_usart.c **** 
 311:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
 312:src/stm32f1xx_hal_usart.c ****     USART_InitCallbacksToDefault(husart);
 313:src/stm32f1xx_hal_usart.c **** 
 314:src/stm32f1xx_hal_usart.c ****     if (husart->MspInitCallback == NULL)
 315:src/stm32f1xx_hal_usart.c ****     {
 316:src/stm32f1xx_hal_usart.c ****       husart->MspInitCallback = HAL_USART_MspInit;
 317:src/stm32f1xx_hal_usart.c ****     }
 318:src/stm32f1xx_hal_usart.c **** 
 319:src/stm32f1xx_hal_usart.c ****     /* Init the low level hardware */
 320:src/stm32f1xx_hal_usart.c ****     husart->MspInitCallback(husart);
 321:src/stm32f1xx_hal_usart.c **** #else
 322:src/stm32f1xx_hal_usart.c ****     /* Init the low level hardware : GPIO, CLOCK */
ARM GAS  /tmp/ccpGcYbE.s 			page 8


 323:src/stm32f1xx_hal_usart.c ****     HAL_USART_MspInit(husart);
 324:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 325:src/stm32f1xx_hal_usart.c ****   }
 326:src/stm32f1xx_hal_usart.c **** 
 327:src/stm32f1xx_hal_usart.c ****   husart->State = HAL_USART_STATE_BUSY;
 328:src/stm32f1xx_hal_usart.c **** 
 329:src/stm32f1xx_hal_usart.c ****   /* Set the USART Communication parameters */
 330:src/stm32f1xx_hal_usart.c ****   USART_SetConfig(husart);
 331:src/stm32f1xx_hal_usart.c **** 
 332:src/stm32f1xx_hal_usart.c ****   /* In USART mode, the following bits must be kept cleared:
 333:src/stm32f1xx_hal_usart.c ****      - LINEN bit in the USART_CR2 register
 334:src/stm32f1xx_hal_usart.c ****      - HDSEL, SCEN and IREN bits in the USART_CR3 register */
 335:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 336:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 337:src/stm32f1xx_hal_usart.c **** 
 338:src/stm32f1xx_hal_usart.c ****   /* Enable the Peripheral */
 339:src/stm32f1xx_hal_usart.c ****   __HAL_USART_ENABLE(husart);
 340:src/stm32f1xx_hal_usart.c **** 
 341:src/stm32f1xx_hal_usart.c ****   /* Initialize the USART state */
 342:src/stm32f1xx_hal_usart.c ****   husart->ErrorCode = HAL_USART_ERROR_NONE;
 343:src/stm32f1xx_hal_usart.c ****   husart->State = HAL_USART_STATE_READY;
 344:src/stm32f1xx_hal_usart.c **** 
 345:src/stm32f1xx_hal_usart.c ****   return HAL_OK;
 346:src/stm32f1xx_hal_usart.c **** }
 347:src/stm32f1xx_hal_usart.c **** 
 348:src/stm32f1xx_hal_usart.c **** /**
 349:src/stm32f1xx_hal_usart.c ****   * @brief  DeInitializes the USART peripheral.
 350:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
 351:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
 352:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
 353:src/stm32f1xx_hal_usart.c ****   */
 354:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_DeInit(USART_HandleTypeDef *husart)
 355:src/stm32f1xx_hal_usart.c **** {
 356:src/stm32f1xx_hal_usart.c ****   /* Check the USART handle allocation */
 357:src/stm32f1xx_hal_usart.c ****   if (husart == NULL)
 358:src/stm32f1xx_hal_usart.c ****   {
 359:src/stm32f1xx_hal_usart.c ****     return HAL_ERROR;
 360:src/stm32f1xx_hal_usart.c ****   }
 361:src/stm32f1xx_hal_usart.c **** 
 362:src/stm32f1xx_hal_usart.c ****   /* Check the parameters */
 363:src/stm32f1xx_hal_usart.c ****   assert_param(IS_USART_INSTANCE(husart->Instance));
 364:src/stm32f1xx_hal_usart.c **** 
 365:src/stm32f1xx_hal_usart.c ****   husart->State = HAL_USART_STATE_BUSY;
 366:src/stm32f1xx_hal_usart.c **** 
 367:src/stm32f1xx_hal_usart.c ****   /* Disable the Peripheral */
 368:src/stm32f1xx_hal_usart.c ****   __HAL_USART_DISABLE(husart);
 369:src/stm32f1xx_hal_usart.c **** 
 370:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
 371:src/stm32f1xx_hal_usart.c ****   if (husart->MspDeInitCallback == NULL)
 372:src/stm32f1xx_hal_usart.c ****   {
 373:src/stm32f1xx_hal_usart.c ****     husart->MspDeInitCallback = HAL_USART_MspDeInit;
 374:src/stm32f1xx_hal_usart.c ****   }
 375:src/stm32f1xx_hal_usart.c ****   /* DeInit the low level hardware */
 376:src/stm32f1xx_hal_usart.c ****   husart->MspDeInitCallback(husart);
 377:src/stm32f1xx_hal_usart.c **** #else
 378:src/stm32f1xx_hal_usart.c ****   /* DeInit the low level hardware */
 379:src/stm32f1xx_hal_usart.c ****   HAL_USART_MspDeInit(husart);
ARM GAS  /tmp/ccpGcYbE.s 			page 9


 380:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 381:src/stm32f1xx_hal_usart.c **** 
 382:src/stm32f1xx_hal_usart.c ****   husart->ErrorCode = HAL_USART_ERROR_NONE;
 383:src/stm32f1xx_hal_usart.c ****   husart->State = HAL_USART_STATE_RESET;
 384:src/stm32f1xx_hal_usart.c **** 
 385:src/stm32f1xx_hal_usart.c ****   /* Release Lock */
 386:src/stm32f1xx_hal_usart.c ****   __HAL_UNLOCK(husart);
 387:src/stm32f1xx_hal_usart.c **** 
 388:src/stm32f1xx_hal_usart.c ****   return HAL_OK;
 389:src/stm32f1xx_hal_usart.c **** }
 390:src/stm32f1xx_hal_usart.c **** 
 391:src/stm32f1xx_hal_usart.c **** /**
 392:src/stm32f1xx_hal_usart.c ****   * @brief  USART MSP Init.
 393:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
 394:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
 395:src/stm32f1xx_hal_usart.c ****   * @retval None
 396:src/stm32f1xx_hal_usart.c ****   */
 397:src/stm32f1xx_hal_usart.c **** __weak void HAL_USART_MspInit(USART_HandleTypeDef *husart)
 398:src/stm32f1xx_hal_usart.c **** {
 399:src/stm32f1xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
 400:src/stm32f1xx_hal_usart.c ****   UNUSED(husart);
 401:src/stm32f1xx_hal_usart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 402:src/stm32f1xx_hal_usart.c ****            the HAL_USART_MspInit could be implemented in the user file
 403:src/stm32f1xx_hal_usart.c ****    */
 404:src/stm32f1xx_hal_usart.c **** }
 405:src/stm32f1xx_hal_usart.c **** 
 406:src/stm32f1xx_hal_usart.c **** /**
 407:src/stm32f1xx_hal_usart.c ****   * @brief  USART MSP DeInit.
 408:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
 409:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
 410:src/stm32f1xx_hal_usart.c ****   * @retval None
 411:src/stm32f1xx_hal_usart.c ****   */
 412:src/stm32f1xx_hal_usart.c **** __weak void HAL_USART_MspDeInit(USART_HandleTypeDef *husart)
 413:src/stm32f1xx_hal_usart.c **** {
 414:src/stm32f1xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
 415:src/stm32f1xx_hal_usart.c ****   UNUSED(husart);
 416:src/stm32f1xx_hal_usart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 417:src/stm32f1xx_hal_usart.c ****            the HAL_USART_MspDeInit could be implemented in the user file
 418:src/stm32f1xx_hal_usart.c ****    */
 419:src/stm32f1xx_hal_usart.c **** }
 420:src/stm32f1xx_hal_usart.c **** 
 421:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
 422:src/stm32f1xx_hal_usart.c **** /**
 423:src/stm32f1xx_hal_usart.c ****   * @brief  Register a User USART Callback
 424:src/stm32f1xx_hal_usart.c ****   *         To be used instead of the weak predefined callback
 425:src/stm32f1xx_hal_usart.c ****   * @param  husart usart handle
 426:src/stm32f1xx_hal_usart.c ****   * @param  CallbackID ID of the callback to be registered
 427:src/stm32f1xx_hal_usart.c ****   *         This parameter can be one of the following values:
 428:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 429:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 430:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 431:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 432:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_TX_RX_COMPLETE_CB_ID Rx Complete Callback ID
 433:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_ERROR_CB_ID Error Callback ID
 434:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 435:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_MSPINIT_CB_ID MspInit Callback ID
 436:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_MSPDEINIT_CB_ID MspDeInit Callback ID
ARM GAS  /tmp/ccpGcYbE.s 			page 10


 437:src/stm32f1xx_hal_usart.c ****   * @param  pCallback pointer to the Callback function
 438:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
 439:src/stm32f1xx_hal_usart.c **** +  */
 440:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_RegisterCallback(USART_HandleTypeDef *husart, HAL_USART_CallbackIDTypeD
 441:src/stm32f1xx_hal_usart.c **** {
 442:src/stm32f1xx_hal_usart.c ****   HAL_StatusTypeDef status = HAL_OK;
 443:src/stm32f1xx_hal_usart.c **** 
 444:src/stm32f1xx_hal_usart.c ****   if (pCallback == NULL)
 445:src/stm32f1xx_hal_usart.c ****   {
 446:src/stm32f1xx_hal_usart.c ****     /* Update the error code */
 447:src/stm32f1xx_hal_usart.c ****     husart->ErrorCode |= HAL_USART_ERROR_INVALID_CALLBACK;
 448:src/stm32f1xx_hal_usart.c **** 
 449:src/stm32f1xx_hal_usart.c ****     return HAL_ERROR;
 450:src/stm32f1xx_hal_usart.c ****   }
 451:src/stm32f1xx_hal_usart.c ****   /* Process locked */
 452:src/stm32f1xx_hal_usart.c ****   __HAL_LOCK(husart);
 453:src/stm32f1xx_hal_usart.c **** 
 454:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
 455:src/stm32f1xx_hal_usart.c ****   {
 456:src/stm32f1xx_hal_usart.c ****     switch (CallbackID)
 457:src/stm32f1xx_hal_usart.c ****     {
 458:src/stm32f1xx_hal_usart.c ****       case HAL_USART_TX_HALFCOMPLETE_CB_ID :
 459:src/stm32f1xx_hal_usart.c ****         husart->TxHalfCpltCallback = pCallback;
 460:src/stm32f1xx_hal_usart.c ****         break;
 461:src/stm32f1xx_hal_usart.c **** 
 462:src/stm32f1xx_hal_usart.c ****       case HAL_USART_TX_COMPLETE_CB_ID :
 463:src/stm32f1xx_hal_usart.c ****         husart->TxCpltCallback = pCallback;
 464:src/stm32f1xx_hal_usart.c ****         break;
 465:src/stm32f1xx_hal_usart.c **** 
 466:src/stm32f1xx_hal_usart.c ****       case HAL_USART_RX_HALFCOMPLETE_CB_ID :
 467:src/stm32f1xx_hal_usart.c ****         husart->RxHalfCpltCallback = pCallback;
 468:src/stm32f1xx_hal_usart.c ****         break;
 469:src/stm32f1xx_hal_usart.c **** 
 470:src/stm32f1xx_hal_usart.c ****       case HAL_USART_RX_COMPLETE_CB_ID :
 471:src/stm32f1xx_hal_usart.c ****         husart->RxCpltCallback = pCallback;
 472:src/stm32f1xx_hal_usart.c ****         break;
 473:src/stm32f1xx_hal_usart.c **** 
 474:src/stm32f1xx_hal_usart.c ****       case HAL_USART_TX_RX_COMPLETE_CB_ID :
 475:src/stm32f1xx_hal_usart.c ****         husart->TxRxCpltCallback = pCallback;
 476:src/stm32f1xx_hal_usart.c ****         break;
 477:src/stm32f1xx_hal_usart.c **** 
 478:src/stm32f1xx_hal_usart.c ****       case HAL_USART_ERROR_CB_ID :
 479:src/stm32f1xx_hal_usart.c ****         husart->ErrorCallback = pCallback;
 480:src/stm32f1xx_hal_usart.c ****         break;
 481:src/stm32f1xx_hal_usart.c **** 
 482:src/stm32f1xx_hal_usart.c ****       case HAL_USART_ABORT_COMPLETE_CB_ID :
 483:src/stm32f1xx_hal_usart.c ****         husart->AbortCpltCallback = pCallback;
 484:src/stm32f1xx_hal_usart.c ****         break;
 485:src/stm32f1xx_hal_usart.c **** 
 486:src/stm32f1xx_hal_usart.c ****       case HAL_USART_MSPINIT_CB_ID :
 487:src/stm32f1xx_hal_usart.c ****         husart->MspInitCallback = pCallback;
 488:src/stm32f1xx_hal_usart.c ****         break;
 489:src/stm32f1xx_hal_usart.c **** 
 490:src/stm32f1xx_hal_usart.c ****       case HAL_USART_MSPDEINIT_CB_ID :
 491:src/stm32f1xx_hal_usart.c ****         husart->MspDeInitCallback = pCallback;
 492:src/stm32f1xx_hal_usart.c ****         break;
 493:src/stm32f1xx_hal_usart.c **** 
ARM GAS  /tmp/ccpGcYbE.s 			page 11


 494:src/stm32f1xx_hal_usart.c ****       default :
 495:src/stm32f1xx_hal_usart.c ****         /* Update the error code */
 496:src/stm32f1xx_hal_usart.c ****         husart->ErrorCode |= HAL_USART_ERROR_INVALID_CALLBACK;
 497:src/stm32f1xx_hal_usart.c **** 
 498:src/stm32f1xx_hal_usart.c ****         /* Return error status */
 499:src/stm32f1xx_hal_usart.c ****         status =  HAL_ERROR;
 500:src/stm32f1xx_hal_usart.c ****         break;
 501:src/stm32f1xx_hal_usart.c ****     }
 502:src/stm32f1xx_hal_usart.c ****   }
 503:src/stm32f1xx_hal_usart.c ****   else if (husart->State == HAL_USART_STATE_RESET)
 504:src/stm32f1xx_hal_usart.c ****   {
 505:src/stm32f1xx_hal_usart.c ****     switch (CallbackID)
 506:src/stm32f1xx_hal_usart.c ****     {
 507:src/stm32f1xx_hal_usart.c ****       case HAL_USART_MSPINIT_CB_ID :
 508:src/stm32f1xx_hal_usart.c ****         husart->MspInitCallback = pCallback;
 509:src/stm32f1xx_hal_usart.c ****         break;
 510:src/stm32f1xx_hal_usart.c **** 
 511:src/stm32f1xx_hal_usart.c ****       case HAL_USART_MSPDEINIT_CB_ID :
 512:src/stm32f1xx_hal_usart.c ****         husart->MspDeInitCallback = pCallback;
 513:src/stm32f1xx_hal_usart.c ****         break;
 514:src/stm32f1xx_hal_usart.c **** 
 515:src/stm32f1xx_hal_usart.c ****       default :
 516:src/stm32f1xx_hal_usart.c ****         /* Update the error code */
 517:src/stm32f1xx_hal_usart.c ****         husart->ErrorCode |= HAL_USART_ERROR_INVALID_CALLBACK;
 518:src/stm32f1xx_hal_usart.c **** 
 519:src/stm32f1xx_hal_usart.c ****         /* Return error status */
 520:src/stm32f1xx_hal_usart.c ****         status =  HAL_ERROR;
 521:src/stm32f1xx_hal_usart.c ****         break;
 522:src/stm32f1xx_hal_usart.c ****     }
 523:src/stm32f1xx_hal_usart.c ****   }
 524:src/stm32f1xx_hal_usart.c ****   else
 525:src/stm32f1xx_hal_usart.c ****   {
 526:src/stm32f1xx_hal_usart.c ****     /* Update the error code */
 527:src/stm32f1xx_hal_usart.c ****     husart->ErrorCode |= HAL_USART_ERROR_INVALID_CALLBACK;
 528:src/stm32f1xx_hal_usart.c **** 
 529:src/stm32f1xx_hal_usart.c ****     /* Return error status */
 530:src/stm32f1xx_hal_usart.c ****     status =  HAL_ERROR;
 531:src/stm32f1xx_hal_usart.c ****   }
 532:src/stm32f1xx_hal_usart.c **** 
 533:src/stm32f1xx_hal_usart.c ****   /* Release Lock */
 534:src/stm32f1xx_hal_usart.c ****   __HAL_UNLOCK(husart);
 535:src/stm32f1xx_hal_usart.c **** 
 536:src/stm32f1xx_hal_usart.c ****   return status;
 537:src/stm32f1xx_hal_usart.c **** }
 538:src/stm32f1xx_hal_usart.c **** 
 539:src/stm32f1xx_hal_usart.c **** /**
 540:src/stm32f1xx_hal_usart.c ****   * @brief  Unregister an UART Callback
 541:src/stm32f1xx_hal_usart.c ****   *         UART callaback is redirected to the weak predefined callback
 542:src/stm32f1xx_hal_usart.c ****   * @param  husart uart handle
 543:src/stm32f1xx_hal_usart.c ****   * @param  CallbackID ID of the callback to be unregistered
 544:src/stm32f1xx_hal_usart.c ****   *         This parameter can be one of the following values:
 545:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 546:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 547:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 548:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 549:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_TX_RX_COMPLETE_CB_ID Rx Complete Callback ID
 550:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_ERROR_CB_ID Error Callback ID
ARM GAS  /tmp/ccpGcYbE.s 			page 12


 551:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 552:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_MSPINIT_CB_ID MspInit Callback ID
 553:src/stm32f1xx_hal_usart.c ****   *           @arg @ref HAL_USART_MSPDEINIT_CB_ID MspDeInit Callback ID
 554:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
 555:src/stm32f1xx_hal_usart.c ****   */
 556:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_UnRegisterCallback(USART_HandleTypeDef *husart, HAL_USART_CallbackIDTyp
 557:src/stm32f1xx_hal_usart.c **** {
 558:src/stm32f1xx_hal_usart.c ****   HAL_StatusTypeDef status = HAL_OK;
 559:src/stm32f1xx_hal_usart.c **** 
 560:src/stm32f1xx_hal_usart.c ****   /* Process locked */
 561:src/stm32f1xx_hal_usart.c ****   __HAL_LOCK(husart);
 562:src/stm32f1xx_hal_usart.c **** 
 563:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
 564:src/stm32f1xx_hal_usart.c ****   {
 565:src/stm32f1xx_hal_usart.c ****     switch (CallbackID)
 566:src/stm32f1xx_hal_usart.c ****     {
 567:src/stm32f1xx_hal_usart.c ****       case HAL_USART_TX_HALFCOMPLETE_CB_ID :
 568:src/stm32f1xx_hal_usart.c ****         husart->TxHalfCpltCallback = HAL_USART_TxHalfCpltCallback;               /* Legacy weak  Tx
 569:src/stm32f1xx_hal_usart.c ****         break;
 570:src/stm32f1xx_hal_usart.c **** 
 571:src/stm32f1xx_hal_usart.c ****       case HAL_USART_TX_COMPLETE_CB_ID :
 572:src/stm32f1xx_hal_usart.c ****         husart->TxCpltCallback = HAL_USART_TxCpltCallback;                       /* Legacy weak TxC
 573:src/stm32f1xx_hal_usart.c ****         break;
 574:src/stm32f1xx_hal_usart.c **** 
 575:src/stm32f1xx_hal_usart.c ****       case HAL_USART_RX_HALFCOMPLETE_CB_ID :
 576:src/stm32f1xx_hal_usart.c ****         husart->RxHalfCpltCallback = HAL_USART_RxHalfCpltCallback;               /* Legacy weak RxH
 577:src/stm32f1xx_hal_usart.c ****         break;
 578:src/stm32f1xx_hal_usart.c **** 
 579:src/stm32f1xx_hal_usart.c ****       case HAL_USART_RX_COMPLETE_CB_ID :
 580:src/stm32f1xx_hal_usart.c ****         husart->RxCpltCallback = HAL_USART_RxCpltCallback;                       /* Legacy weak RxC
 581:src/stm32f1xx_hal_usart.c ****         break;
 582:src/stm32f1xx_hal_usart.c **** 
 583:src/stm32f1xx_hal_usart.c ****       case HAL_USART_TX_RX_COMPLETE_CB_ID :
 584:src/stm32f1xx_hal_usart.c ****         husart->TxRxCpltCallback = HAL_USART_TxRxCpltCallback;                   /* Legacy weak TxR
 585:src/stm32f1xx_hal_usart.c ****         break;
 586:src/stm32f1xx_hal_usart.c **** 
 587:src/stm32f1xx_hal_usart.c ****       case HAL_USART_ERROR_CB_ID :
 588:src/stm32f1xx_hal_usart.c ****         husart->ErrorCallback = HAL_USART_ErrorCallback;                         /* Legacy weak Err
 589:src/stm32f1xx_hal_usart.c ****         break;
 590:src/stm32f1xx_hal_usart.c **** 
 591:src/stm32f1xx_hal_usart.c ****       case HAL_USART_ABORT_COMPLETE_CB_ID :
 592:src/stm32f1xx_hal_usart.c ****         husart->AbortCpltCallback = HAL_USART_AbortCpltCallback;                 /* Legacy weak Abo
 593:src/stm32f1xx_hal_usart.c ****         break;
 594:src/stm32f1xx_hal_usart.c **** 
 595:src/stm32f1xx_hal_usart.c ****       case HAL_USART_MSPINIT_CB_ID :
 596:src/stm32f1xx_hal_usart.c ****         husart->MspInitCallback = HAL_USART_MspInit;                             /* Legacy weak Msp
 597:src/stm32f1xx_hal_usart.c ****         break;
 598:src/stm32f1xx_hal_usart.c **** 
 599:src/stm32f1xx_hal_usart.c ****       case HAL_USART_MSPDEINIT_CB_ID :
 600:src/stm32f1xx_hal_usart.c ****         husart->MspDeInitCallback = HAL_USART_MspDeInit;                         /* Legacy weak Msp
 601:src/stm32f1xx_hal_usart.c ****         break;
 602:src/stm32f1xx_hal_usart.c **** 
 603:src/stm32f1xx_hal_usart.c ****       default :
 604:src/stm32f1xx_hal_usart.c ****         /* Update the error code */
 605:src/stm32f1xx_hal_usart.c ****         husart->ErrorCode |= HAL_USART_ERROR_INVALID_CALLBACK;
 606:src/stm32f1xx_hal_usart.c **** 
 607:src/stm32f1xx_hal_usart.c ****         /* Return error status */
ARM GAS  /tmp/ccpGcYbE.s 			page 13


 608:src/stm32f1xx_hal_usart.c ****         status =  HAL_ERROR;
 609:src/stm32f1xx_hal_usart.c ****         break;
 610:src/stm32f1xx_hal_usart.c ****     }
 611:src/stm32f1xx_hal_usart.c ****   }
 612:src/stm32f1xx_hal_usart.c ****   else if (husart->State == HAL_USART_STATE_RESET)
 613:src/stm32f1xx_hal_usart.c ****   {
 614:src/stm32f1xx_hal_usart.c ****     switch (CallbackID)
 615:src/stm32f1xx_hal_usart.c ****     {
 616:src/stm32f1xx_hal_usart.c ****       case HAL_USART_MSPINIT_CB_ID :
 617:src/stm32f1xx_hal_usart.c ****         husart->MspInitCallback = HAL_USART_MspInit;
 618:src/stm32f1xx_hal_usart.c ****         break;
 619:src/stm32f1xx_hal_usart.c **** 
 620:src/stm32f1xx_hal_usart.c ****       case HAL_USART_MSPDEINIT_CB_ID :
 621:src/stm32f1xx_hal_usart.c ****         husart->MspDeInitCallback = HAL_USART_MspDeInit;
 622:src/stm32f1xx_hal_usart.c ****         break;
 623:src/stm32f1xx_hal_usart.c **** 
 624:src/stm32f1xx_hal_usart.c ****       default :
 625:src/stm32f1xx_hal_usart.c ****         /* Update the error code */
 626:src/stm32f1xx_hal_usart.c ****         husart->ErrorCode |= HAL_USART_ERROR_INVALID_CALLBACK;
 627:src/stm32f1xx_hal_usart.c **** 
 628:src/stm32f1xx_hal_usart.c ****         /* Return error status */
 629:src/stm32f1xx_hal_usart.c ****         status =  HAL_ERROR;
 630:src/stm32f1xx_hal_usart.c ****         break;
 631:src/stm32f1xx_hal_usart.c ****     }
 632:src/stm32f1xx_hal_usart.c ****   }
 633:src/stm32f1xx_hal_usart.c ****   else
 634:src/stm32f1xx_hal_usart.c ****   {
 635:src/stm32f1xx_hal_usart.c ****     /* Update the error code */
 636:src/stm32f1xx_hal_usart.c ****     husart->ErrorCode |= HAL_USART_ERROR_INVALID_CALLBACK;
 637:src/stm32f1xx_hal_usart.c **** 
 638:src/stm32f1xx_hal_usart.c ****     /* Return error status */
 639:src/stm32f1xx_hal_usart.c ****     status =  HAL_ERROR;
 640:src/stm32f1xx_hal_usart.c ****   }
 641:src/stm32f1xx_hal_usart.c **** 
 642:src/stm32f1xx_hal_usart.c ****   /* Release Lock */
 643:src/stm32f1xx_hal_usart.c ****   __HAL_UNLOCK(husart);
 644:src/stm32f1xx_hal_usart.c **** 
 645:src/stm32f1xx_hal_usart.c ****   return status;
 646:src/stm32f1xx_hal_usart.c **** }
 647:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 648:src/stm32f1xx_hal_usart.c **** 
 649:src/stm32f1xx_hal_usart.c **** /**
 650:src/stm32f1xx_hal_usart.c ****   * @}
 651:src/stm32f1xx_hal_usart.c ****   */
 652:src/stm32f1xx_hal_usart.c **** 
 653:src/stm32f1xx_hal_usart.c **** /** @defgroup USART_Exported_Functions_Group2 IO operation functions
 654:src/stm32f1xx_hal_usart.c ****   *  @brief   USART Transmit and Receive functions
 655:src/stm32f1xx_hal_usart.c ****   *
 656:src/stm32f1xx_hal_usart.c **** @verbatim
 657:src/stm32f1xx_hal_usart.c ****   ==============================================================================
 658:src/stm32f1xx_hal_usart.c ****                          ##### IO operation functions #####
 659:src/stm32f1xx_hal_usart.c ****   ==============================================================================
 660:src/stm32f1xx_hal_usart.c ****   [..]
 661:src/stm32f1xx_hal_usart.c ****     This subsection provides a set of functions allowing to manage the USART synchronous
 662:src/stm32f1xx_hal_usart.c ****     data transfers.
 663:src/stm32f1xx_hal_usart.c **** 
 664:src/stm32f1xx_hal_usart.c ****   [..]
ARM GAS  /tmp/ccpGcYbE.s 			page 14


 665:src/stm32f1xx_hal_usart.c ****     The USART supports master mode only: it cannot receive or send data related to an input
 666:src/stm32f1xx_hal_usart.c ****     clock (SCLK is always an output).
 667:src/stm32f1xx_hal_usart.c **** 
 668:src/stm32f1xx_hal_usart.c ****     (#) There are two modes of transfer:
 669:src/stm32f1xx_hal_usart.c ****         (++) Blocking mode: The communication is performed in polling mode.
 670:src/stm32f1xx_hal_usart.c ****              The HAL status of all data processing is returned by the same function
 671:src/stm32f1xx_hal_usart.c ****              after finishing transfer.
 672:src/stm32f1xx_hal_usart.c ****         (++) No-Blocking mode: The communication is performed using Interrupts
 673:src/stm32f1xx_hal_usart.c ****              or DMA, These API's return the HAL status.
 674:src/stm32f1xx_hal_usart.c ****              The end of the data processing will be indicated through the
 675:src/stm32f1xx_hal_usart.c ****              dedicated USART IRQ when using Interrupt mode or the DMA IRQ when
 676:src/stm32f1xx_hal_usart.c ****              using DMA mode.
 677:src/stm32f1xx_hal_usart.c ****              The HAL_USART_TxCpltCallback(), HAL_USART_RxCpltCallback() and HAL_USART_TxRxCpltCallb
 678:src/stm32f1xx_hal_usart.c ****               user callbacks
 679:src/stm32f1xx_hal_usart.c ****              will be executed respectively at the end of the transmit or Receive process
 680:src/stm32f1xx_hal_usart.c ****              The HAL_USART_ErrorCallback() user callback will be executed when a communication
 681:src/stm32f1xx_hal_usart.c ****              error is detected
 682:src/stm32f1xx_hal_usart.c **** 
 683:src/stm32f1xx_hal_usart.c ****     (#) Blocking mode APIs are :
 684:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_Transmit() in simplex mode
 685:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_Receive() in full duplex receive only
 686:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_TransmitReceive() in full duplex mode
 687:src/stm32f1xx_hal_usart.c **** 
 688:src/stm32f1xx_hal_usart.c ****     (#) Non Blocking mode APIs with Interrupt are :
 689:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_Transmit_IT()in simplex mode
 690:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_Receive_IT() in full duplex receive only
 691:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_TransmitReceive_IT() in full duplex mode
 692:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_IRQHandler()
 693:src/stm32f1xx_hal_usart.c **** 
 694:src/stm32f1xx_hal_usart.c ****     (#) Non Blocking mode functions with DMA are :
 695:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_Transmit_DMA()in simplex mode
 696:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_Receive_DMA() in full duplex receive only
 697:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_TransmitReceive_DMA() in full duplex mode
 698:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_DMAPause()
 699:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_DMAResume()
 700:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_DMAStop()
 701:src/stm32f1xx_hal_usart.c **** 
 702:src/stm32f1xx_hal_usart.c ****     (#) A set of Transfer Complete Callbacks are provided in non Blocking mode:
 703:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_TxHalfCpltCallback()
 704:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_TxCpltCallback()
 705:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_RxHalfCpltCallback()
 706:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_RxCpltCallback()
 707:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_ErrorCallback()
 708:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_TxRxCpltCallback()
 709:src/stm32f1xx_hal_usart.c **** 
 710:src/stm32f1xx_hal_usart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
 711:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_Abort()
 712:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_Abort_IT()
 713:src/stm32f1xx_hal_usart.c **** 
 714:src/stm32f1xx_hal_usart.c ****     (#) For Abort services based on interrupts (HAL_USART_Abort_IT), a Abort Complete Callbacks is 
 715:src/stm32f1xx_hal_usart.c ****         (++) HAL_USART_AbortCpltCallback()
 716:src/stm32f1xx_hal_usart.c **** 
 717:src/stm32f1xx_hal_usart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
 718:src/stm32f1xx_hal_usart.c ****         Errors are handled as follows :
 719:src/stm32f1xx_hal_usart.c ****         (++) Error is considered as Recoverable and non blocking : Transfer could go till end, but 
 720:src/stm32f1xx_hal_usart.c ****              to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in In
 721:src/stm32f1xx_hal_usart.c ****              Received character is then retrieved and stored in Rx buffer, Error code is set to all
ARM GAS  /tmp/ccpGcYbE.s 			page 15


 722:src/stm32f1xx_hal_usart.c ****              and HAL_USART_ErrorCallback() user callback is executed. Transfer is kept ongoing on U
 723:src/stm32f1xx_hal_usart.c ****              If user wants to abort it, Abort services should be called by user.
 724:src/stm32f1xx_hal_usart.c ****         (++) Error is considered as Blocking : Transfer could not be completed properly and is abor
 725:src/stm32f1xx_hal_usart.c ****              This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
 726:src/stm32f1xx_hal_usart.c ****              Error code is set to allow user to identify error type, and HAL_USART_ErrorCallback() 
 727:src/stm32f1xx_hal_usart.c **** 
 728:src/stm32f1xx_hal_usart.c **** @endverbatim
 729:src/stm32f1xx_hal_usart.c ****   * @{
 730:src/stm32f1xx_hal_usart.c ****   */
 731:src/stm32f1xx_hal_usart.c **** 
 732:src/stm32f1xx_hal_usart.c **** /**
 733:src/stm32f1xx_hal_usart.c ****   * @brief  Simplex Send an amount of data in blocking mode.
 734:src/stm32f1xx_hal_usart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 735:src/stm32f1xx_hal_usart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
 736:src/stm32f1xx_hal_usart.c ****   *         of u16 provided through pTxData.
 737:src/stm32f1xx_hal_usart.c ****   * @param  husart  Pointer to a USART_HandleTypeDef structure that contains
 738:src/stm32f1xx_hal_usart.c ****   *                 the configuration information for the specified USART module.
 739:src/stm32f1xx_hal_usart.c ****   * @param  pTxData Pointer to data buffer (u8 or u16 data elements).
 740:src/stm32f1xx_hal_usart.c ****   * @param  Size    Amount of data elements (u8 or u16) to be sent.
 741:src/stm32f1xx_hal_usart.c ****   * @param  Timeout Timeout duration.
 742:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
 743:src/stm32f1xx_hal_usart.c ****   */
 744:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, 
 745:src/stm32f1xx_hal_usart.c **** {
 746:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 747:src/stm32f1xx_hal_usart.c ****   uint32_t tickstart = 0U;
 748:src/stm32f1xx_hal_usart.c **** 
 749:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
 750:src/stm32f1xx_hal_usart.c ****   {
 751:src/stm32f1xx_hal_usart.c ****     if ((pTxData == NULL) || (Size == 0))
 752:src/stm32f1xx_hal_usart.c ****     {
 753:src/stm32f1xx_hal_usart.c ****       return  HAL_ERROR;
 754:src/stm32f1xx_hal_usart.c ****     }
 755:src/stm32f1xx_hal_usart.c **** 
 756:src/stm32f1xx_hal_usart.c ****     /* Process Locked */
 757:src/stm32f1xx_hal_usart.c ****     __HAL_LOCK(husart);
 758:src/stm32f1xx_hal_usart.c **** 
 759:src/stm32f1xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
 760:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX;
 761:src/stm32f1xx_hal_usart.c **** 
 762:src/stm32f1xx_hal_usart.c ****     /* Init tickstart for timeout management */
 763:src/stm32f1xx_hal_usart.c ****     tickstart = HAL_GetTick();
 764:src/stm32f1xx_hal_usart.c **** 
 765:src/stm32f1xx_hal_usart.c ****     husart->TxXferSize = Size;
 766:src/stm32f1xx_hal_usart.c ****     husart->TxXferCount = Size;
 767:src/stm32f1xx_hal_usart.c ****     while (husart->TxXferCount > 0U)
 768:src/stm32f1xx_hal_usart.c ****     {
 769:src/stm32f1xx_hal_usart.c ****       husart->TxXferCount--;
 770:src/stm32f1xx_hal_usart.c ****       if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 771:src/stm32f1xx_hal_usart.c ****       {
 772:src/stm32f1xx_hal_usart.c ****         /* Wait for TC flag in order to write data in DR */
 773:src/stm32f1xx_hal_usart.c ****         if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_
 774:src/stm32f1xx_hal_usart.c ****         {
 775:src/stm32f1xx_hal_usart.c ****           return HAL_TIMEOUT;
 776:src/stm32f1xx_hal_usart.c ****         }
 777:src/stm32f1xx_hal_usart.c ****         tmp = (uint16_t *) pTxData;
 778:src/stm32f1xx_hal_usart.c ****         husart->Instance->DR = (*tmp & (uint16_t)0x01FF);
ARM GAS  /tmp/ccpGcYbE.s 			page 16


 779:src/stm32f1xx_hal_usart.c ****         if (husart->Init.Parity == USART_PARITY_NONE)
 780:src/stm32f1xx_hal_usart.c ****         {
 781:src/stm32f1xx_hal_usart.c ****           pTxData += 2U;
 782:src/stm32f1xx_hal_usart.c ****         }
 783:src/stm32f1xx_hal_usart.c ****         else
 784:src/stm32f1xx_hal_usart.c ****         {
 785:src/stm32f1xx_hal_usart.c ****           pTxData += 1U;
 786:src/stm32f1xx_hal_usart.c ****         }
 787:src/stm32f1xx_hal_usart.c ****       }
 788:src/stm32f1xx_hal_usart.c ****       else
 789:src/stm32f1xx_hal_usart.c ****       {
 790:src/stm32f1xx_hal_usart.c ****         if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_
 791:src/stm32f1xx_hal_usart.c ****         {
 792:src/stm32f1xx_hal_usart.c ****           return HAL_TIMEOUT;
 793:src/stm32f1xx_hal_usart.c ****         }
 794:src/stm32f1xx_hal_usart.c ****         husart->Instance->DR = (*pTxData++ & (uint8_t)0xFF);
 795:src/stm32f1xx_hal_usart.c ****       }
 796:src/stm32f1xx_hal_usart.c ****     }
 797:src/stm32f1xx_hal_usart.c **** 
 798:src/stm32f1xx_hal_usart.c ****     if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 799:src/stm32f1xx_hal_usart.c ****     {
 800:src/stm32f1xx_hal_usart.c ****       return HAL_TIMEOUT;
 801:src/stm32f1xx_hal_usart.c ****     }
 802:src/stm32f1xx_hal_usart.c **** 
 803:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_READY;
 804:src/stm32f1xx_hal_usart.c **** 
 805:src/stm32f1xx_hal_usart.c ****     /* Process Unlocked */
 806:src/stm32f1xx_hal_usart.c ****     __HAL_UNLOCK(husart);
 807:src/stm32f1xx_hal_usart.c **** 
 808:src/stm32f1xx_hal_usart.c ****     return HAL_OK;
 809:src/stm32f1xx_hal_usart.c ****   }
 810:src/stm32f1xx_hal_usart.c ****   else
 811:src/stm32f1xx_hal_usart.c ****   {
 812:src/stm32f1xx_hal_usart.c ****     return HAL_BUSY;
 813:src/stm32f1xx_hal_usart.c ****   }
 814:src/stm32f1xx_hal_usart.c **** }
 815:src/stm32f1xx_hal_usart.c **** 
 816:src/stm32f1xx_hal_usart.c **** /**
 817:src/stm32f1xx_hal_usart.c ****   * @brief  Full-Duplex Receive an amount of data in blocking mode.
 818:src/stm32f1xx_hal_usart.c ****   * @note   To receive synchronous data, dummy data are simultaneously transmitted.
 819:src/stm32f1xx_hal_usart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 820:src/stm32f1xx_hal_usart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
 821:src/stm32f1xx_hal_usart.c ****   *         of u16 available through pRxData.
 822:src/stm32f1xx_hal_usart.c ****   * @param  husart  Pointer to a USART_HandleTypeDef structure that contains
 823:src/stm32f1xx_hal_usart.c ****   *                 the configuration information for the specified USART module.
 824:src/stm32f1xx_hal_usart.c ****   * @param  pRxData Pointer to data buffer (u8 or u16 data elements).
 825:src/stm32f1xx_hal_usart.c ****   * @param  Size    Amount of data elements (u8 or u16) to be received.
 826:src/stm32f1xx_hal_usart.c ****   * @param  Timeout Timeout duration.
 827:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
 828:src/stm32f1xx_hal_usart.c ****   */
 829:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, u
 830:src/stm32f1xx_hal_usart.c **** {
 831:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 832:src/stm32f1xx_hal_usart.c ****   uint32_t tickstart = 0U;
 833:src/stm32f1xx_hal_usart.c **** 
 834:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
 835:src/stm32f1xx_hal_usart.c ****   {
ARM GAS  /tmp/ccpGcYbE.s 			page 17


 836:src/stm32f1xx_hal_usart.c ****     if ((pRxData == NULL) || (Size == 0))
 837:src/stm32f1xx_hal_usart.c ****     {
 838:src/stm32f1xx_hal_usart.c ****       return  HAL_ERROR;
 839:src/stm32f1xx_hal_usart.c ****     }
 840:src/stm32f1xx_hal_usart.c ****     /* Process Locked */
 841:src/stm32f1xx_hal_usart.c ****     __HAL_LOCK(husart);
 842:src/stm32f1xx_hal_usart.c **** 
 843:src/stm32f1xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
 844:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
 845:src/stm32f1xx_hal_usart.c **** 
 846:src/stm32f1xx_hal_usart.c ****     /* Init tickstart for timeout management */
 847:src/stm32f1xx_hal_usart.c ****     tickstart = HAL_GetTick();
 848:src/stm32f1xx_hal_usart.c **** 
 849:src/stm32f1xx_hal_usart.c ****     husart->RxXferSize = Size;
 850:src/stm32f1xx_hal_usart.c ****     husart->RxXferCount = Size;
 851:src/stm32f1xx_hal_usart.c ****     /* Check the remain data to be received */
 852:src/stm32f1xx_hal_usart.c ****     while (husart->RxXferCount > 0U)
 853:src/stm32f1xx_hal_usart.c ****     {
 854:src/stm32f1xx_hal_usart.c ****       husart->RxXferCount--;
 855:src/stm32f1xx_hal_usart.c ****       if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 856:src/stm32f1xx_hal_usart.c ****       {
 857:src/stm32f1xx_hal_usart.c ****         /* Wait until TXE flag is set to send dummy byte in order to generate the clock for the sla
 858:src/stm32f1xx_hal_usart.c ****         if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_
 859:src/stm32f1xx_hal_usart.c ****         {
 860:src/stm32f1xx_hal_usart.c ****           return HAL_TIMEOUT;
 861:src/stm32f1xx_hal_usart.c ****         }
 862:src/stm32f1xx_hal_usart.c ****         /* Send dummy byte in order to generate clock */
 863:src/stm32f1xx_hal_usart.c ****         husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x01FF);
 864:src/stm32f1xx_hal_usart.c **** 
 865:src/stm32f1xx_hal_usart.c ****         /* Wait for RXNE Flag */
 866:src/stm32f1xx_hal_usart.c ****         if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL
 867:src/stm32f1xx_hal_usart.c ****         {
 868:src/stm32f1xx_hal_usart.c ****           return HAL_TIMEOUT;
 869:src/stm32f1xx_hal_usart.c ****         }
 870:src/stm32f1xx_hal_usart.c ****         tmp = (uint16_t *) pRxData ;
 871:src/stm32f1xx_hal_usart.c ****         if (husart->Init.Parity == USART_PARITY_NONE)
 872:src/stm32f1xx_hal_usart.c ****         {
 873:src/stm32f1xx_hal_usart.c ****           *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 874:src/stm32f1xx_hal_usart.c ****           pRxData += 2U;
 875:src/stm32f1xx_hal_usart.c ****         }
 876:src/stm32f1xx_hal_usart.c ****         else
 877:src/stm32f1xx_hal_usart.c ****         {
 878:src/stm32f1xx_hal_usart.c ****           *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
 879:src/stm32f1xx_hal_usart.c ****           pRxData += 1U;
 880:src/stm32f1xx_hal_usart.c ****         }
 881:src/stm32f1xx_hal_usart.c ****       }
 882:src/stm32f1xx_hal_usart.c ****       else
 883:src/stm32f1xx_hal_usart.c ****       {
 884:src/stm32f1xx_hal_usart.c ****         /* Wait until TXE flag is set to send dummy byte in order to generate the clock for the sla
 885:src/stm32f1xx_hal_usart.c ****         if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_
 886:src/stm32f1xx_hal_usart.c ****         {
 887:src/stm32f1xx_hal_usart.c ****           return HAL_TIMEOUT;
 888:src/stm32f1xx_hal_usart.c ****         }
 889:src/stm32f1xx_hal_usart.c **** 
 890:src/stm32f1xx_hal_usart.c ****         /* Send Dummy Byte in order to generate clock */
 891:src/stm32f1xx_hal_usart.c ****         husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x00FF);
 892:src/stm32f1xx_hal_usart.c **** 
ARM GAS  /tmp/ccpGcYbE.s 			page 18


 893:src/stm32f1xx_hal_usart.c ****         /* Wait until RXNE flag is set to receive the byte */
 894:src/stm32f1xx_hal_usart.c ****         if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL
 895:src/stm32f1xx_hal_usart.c ****         {
 896:src/stm32f1xx_hal_usart.c ****           return HAL_TIMEOUT;
 897:src/stm32f1xx_hal_usart.c ****         }
 898:src/stm32f1xx_hal_usart.c ****         if (husart->Init.Parity == USART_PARITY_NONE)
 899:src/stm32f1xx_hal_usart.c ****         {
 900:src/stm32f1xx_hal_usart.c ****           /* Receive data */
 901:src/stm32f1xx_hal_usart.c ****           *pRxData++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 902:src/stm32f1xx_hal_usart.c ****         }
 903:src/stm32f1xx_hal_usart.c ****         else
 904:src/stm32f1xx_hal_usart.c ****         {
 905:src/stm32f1xx_hal_usart.c ****           /* Receive data */
 906:src/stm32f1xx_hal_usart.c ****           *pRxData++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 907:src/stm32f1xx_hal_usart.c ****         }
 908:src/stm32f1xx_hal_usart.c **** 
 909:src/stm32f1xx_hal_usart.c ****       }
 910:src/stm32f1xx_hal_usart.c ****     }
 911:src/stm32f1xx_hal_usart.c **** 
 912:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_READY;
 913:src/stm32f1xx_hal_usart.c **** 
 914:src/stm32f1xx_hal_usart.c ****     /* Process Unlocked */
 915:src/stm32f1xx_hal_usart.c ****     __HAL_UNLOCK(husart);
 916:src/stm32f1xx_hal_usart.c **** 
 917:src/stm32f1xx_hal_usart.c ****     return HAL_OK;
 918:src/stm32f1xx_hal_usart.c ****   }
 919:src/stm32f1xx_hal_usart.c ****   else
 920:src/stm32f1xx_hal_usart.c ****   {
 921:src/stm32f1xx_hal_usart.c ****     return HAL_BUSY;
 922:src/stm32f1xx_hal_usart.c ****   }
 923:src/stm32f1xx_hal_usart.c **** }
 924:src/stm32f1xx_hal_usart.c **** 
 925:src/stm32f1xx_hal_usart.c **** /**
 926:src/stm32f1xx_hal_usart.c ****   * @brief  Full-Duplex Send and Receive an amount of data in full-duplex mode (blocking mode).
 927:src/stm32f1xx_hal_usart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 928:src/stm32f1xx_hal_usart.c ****   *         the sent data and the received data are handled as sets of u16. In this case, Size must
 929:src/stm32f1xx_hal_usart.c ****   *         of u16 available through pTxData and through pRxData.
 930:src/stm32f1xx_hal_usart.c ****   * @param  husart  Pointer to a USART_HandleTypeDef structure that contains
 931:src/stm32f1xx_hal_usart.c ****   *                 the configuration information for the specified USART module.
 932:src/stm32f1xx_hal_usart.c ****   * @param  pTxData Pointer to TX data buffer (u8 or u16 data elements).
 933:src/stm32f1xx_hal_usart.c ****   * @param  pRxData Pointer to RX data buffer (u8 or u16 data elements).
 934:src/stm32f1xx_hal_usart.c ****   * @param  Size    Amount of data elements (u8 or u16) to be sent (same amount to be received).
 935:src/stm32f1xx_hal_usart.c ****   * @param  Timeout Timeout duration
 936:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
 937:src/stm32f1xx_hal_usart.c ****   */
 938:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_TransmitReceive(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t 
 939:src/stm32f1xx_hal_usart.c **** {
 940:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 941:src/stm32f1xx_hal_usart.c ****   uint32_t tickstart = 0U;
 942:src/stm32f1xx_hal_usart.c **** 
 943:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
 944:src/stm32f1xx_hal_usart.c ****   {
 945:src/stm32f1xx_hal_usart.c ****     if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 946:src/stm32f1xx_hal_usart.c ****     {
 947:src/stm32f1xx_hal_usart.c ****       return  HAL_ERROR;
 948:src/stm32f1xx_hal_usart.c ****     }
 949:src/stm32f1xx_hal_usart.c ****     /* Process Locked */
ARM GAS  /tmp/ccpGcYbE.s 			page 19


 950:src/stm32f1xx_hal_usart.c ****     __HAL_LOCK(husart);
 951:src/stm32f1xx_hal_usart.c **** 
 952:src/stm32f1xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
 953:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
 954:src/stm32f1xx_hal_usart.c **** 
 955:src/stm32f1xx_hal_usart.c ****     /* Init tickstart for timeout management */
 956:src/stm32f1xx_hal_usart.c ****     tickstart = HAL_GetTick();
 957:src/stm32f1xx_hal_usart.c **** 
 958:src/stm32f1xx_hal_usart.c ****     husart->RxXferSize = Size;
 959:src/stm32f1xx_hal_usart.c ****     husart->TxXferSize = Size;
 960:src/stm32f1xx_hal_usart.c ****     husart->TxXferCount = Size;
 961:src/stm32f1xx_hal_usart.c ****     husart->RxXferCount = Size;
 962:src/stm32f1xx_hal_usart.c **** 
 963:src/stm32f1xx_hal_usart.c ****     /* Check the remain data to be received */
 964:src/stm32f1xx_hal_usart.c ****     while (husart->TxXferCount > 0U)
 965:src/stm32f1xx_hal_usart.c ****     {
 966:src/stm32f1xx_hal_usart.c ****       husart->TxXferCount--;
 967:src/stm32f1xx_hal_usart.c ****       husart->RxXferCount--;
 968:src/stm32f1xx_hal_usart.c ****       if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 969:src/stm32f1xx_hal_usart.c ****       {
 970:src/stm32f1xx_hal_usart.c ****         /* Wait for TC flag in order to write data in DR */
 971:src/stm32f1xx_hal_usart.c ****         if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_
 972:src/stm32f1xx_hal_usart.c ****         {
 973:src/stm32f1xx_hal_usart.c ****           return HAL_TIMEOUT;
 974:src/stm32f1xx_hal_usart.c ****         }
 975:src/stm32f1xx_hal_usart.c ****         tmp = (uint16_t *) pTxData;
 976:src/stm32f1xx_hal_usart.c ****         husart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 977:src/stm32f1xx_hal_usart.c ****         if (husart->Init.Parity == USART_PARITY_NONE)
 978:src/stm32f1xx_hal_usart.c ****         {
 979:src/stm32f1xx_hal_usart.c ****           pTxData += 2U;
 980:src/stm32f1xx_hal_usart.c ****         }
 981:src/stm32f1xx_hal_usart.c ****         else
 982:src/stm32f1xx_hal_usart.c ****         {
 983:src/stm32f1xx_hal_usart.c ****           pTxData += 1U;
 984:src/stm32f1xx_hal_usart.c ****         }
 985:src/stm32f1xx_hal_usart.c **** 
 986:src/stm32f1xx_hal_usart.c ****         /* Wait for RXNE Flag */
 987:src/stm32f1xx_hal_usart.c ****         if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL
 988:src/stm32f1xx_hal_usart.c ****         {
 989:src/stm32f1xx_hal_usart.c ****           return HAL_TIMEOUT;
 990:src/stm32f1xx_hal_usart.c ****         }
 991:src/stm32f1xx_hal_usart.c ****         tmp = (uint16_t *) pRxData ;
 992:src/stm32f1xx_hal_usart.c ****         if (husart->Init.Parity == USART_PARITY_NONE)
 993:src/stm32f1xx_hal_usart.c ****         {
 994:src/stm32f1xx_hal_usart.c ****           *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 995:src/stm32f1xx_hal_usart.c ****           pRxData += 2U;
 996:src/stm32f1xx_hal_usart.c ****         }
 997:src/stm32f1xx_hal_usart.c ****         else
 998:src/stm32f1xx_hal_usart.c ****         {
 999:src/stm32f1xx_hal_usart.c ****           *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
1000:src/stm32f1xx_hal_usart.c ****           pRxData += 1U;
1001:src/stm32f1xx_hal_usart.c ****         }
1002:src/stm32f1xx_hal_usart.c ****       }
1003:src/stm32f1xx_hal_usart.c ****       else
1004:src/stm32f1xx_hal_usart.c ****       {
1005:src/stm32f1xx_hal_usart.c ****         /* Wait for TC flag in order to write data in DR */
1006:src/stm32f1xx_hal_usart.c ****         if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_
ARM GAS  /tmp/ccpGcYbE.s 			page 20


1007:src/stm32f1xx_hal_usart.c ****         {
1008:src/stm32f1xx_hal_usart.c ****           return HAL_TIMEOUT;
1009:src/stm32f1xx_hal_usart.c ****         }
1010:src/stm32f1xx_hal_usart.c ****         husart->Instance->DR = (*pTxData++ & (uint8_t)0x00FF);
1011:src/stm32f1xx_hal_usart.c **** 
1012:src/stm32f1xx_hal_usart.c ****         /* Wait for RXNE Flag */
1013:src/stm32f1xx_hal_usart.c ****         if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL
1014:src/stm32f1xx_hal_usart.c ****         {
1015:src/stm32f1xx_hal_usart.c ****           return HAL_TIMEOUT;
1016:src/stm32f1xx_hal_usart.c ****         }
1017:src/stm32f1xx_hal_usart.c ****         if (husart->Init.Parity == USART_PARITY_NONE)
1018:src/stm32f1xx_hal_usart.c ****         {
1019:src/stm32f1xx_hal_usart.c ****           /* Receive data */
1020:src/stm32f1xx_hal_usart.c ****           *pRxData++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
1021:src/stm32f1xx_hal_usart.c ****         }
1022:src/stm32f1xx_hal_usart.c ****         else
1023:src/stm32f1xx_hal_usart.c ****         {
1024:src/stm32f1xx_hal_usart.c ****           /* Receive data */
1025:src/stm32f1xx_hal_usart.c ****           *pRxData++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
1026:src/stm32f1xx_hal_usart.c ****         }
1027:src/stm32f1xx_hal_usart.c ****       }
1028:src/stm32f1xx_hal_usart.c ****     }
1029:src/stm32f1xx_hal_usart.c **** 
1030:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_READY;
1031:src/stm32f1xx_hal_usart.c **** 
1032:src/stm32f1xx_hal_usart.c ****     /* Process Unlocked */
1033:src/stm32f1xx_hal_usart.c ****     __HAL_UNLOCK(husart);
1034:src/stm32f1xx_hal_usart.c **** 
1035:src/stm32f1xx_hal_usart.c ****     return HAL_OK;
1036:src/stm32f1xx_hal_usart.c ****   }
1037:src/stm32f1xx_hal_usart.c ****   else
1038:src/stm32f1xx_hal_usart.c ****   {
1039:src/stm32f1xx_hal_usart.c ****     return HAL_BUSY;
1040:src/stm32f1xx_hal_usart.c ****   }
1041:src/stm32f1xx_hal_usart.c **** }
1042:src/stm32f1xx_hal_usart.c **** 
1043:src/stm32f1xx_hal_usart.c **** /**
1044:src/stm32f1xx_hal_usart.c ****   * @brief  Simplex Send an amount of data in non-blocking mode.
1045:src/stm32f1xx_hal_usart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1046:src/stm32f1xx_hal_usart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1047:src/stm32f1xx_hal_usart.c ****   *         of u16 provided through pTxData.
1048:src/stm32f1xx_hal_usart.c ****   * @param  husart  Pointer to a USART_HandleTypeDef structure that contains
1049:src/stm32f1xx_hal_usart.c ****   *                 the configuration information for the specified USART module.
1050:src/stm32f1xx_hal_usart.c ****   * @param  pTxData Pointer to data buffer (u8 or u16 data elements).
1051:src/stm32f1xx_hal_usart.c ****   * @param  Size    Amount of data elements (u8 or u16) to be sent.
1052:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
1053:src/stm32f1xx_hal_usart.c ****   * @note   The USART errors are not managed to avoid the overrun error.
1054:src/stm32f1xx_hal_usart.c ****   */
1055:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_Transmit_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Siz
1056:src/stm32f1xx_hal_usart.c **** {
1057:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
1058:src/stm32f1xx_hal_usart.c ****   {
1059:src/stm32f1xx_hal_usart.c ****     if ((pTxData == NULL) || (Size == 0))
1060:src/stm32f1xx_hal_usart.c ****     {
1061:src/stm32f1xx_hal_usart.c ****       return HAL_ERROR;
1062:src/stm32f1xx_hal_usart.c ****     }
1063:src/stm32f1xx_hal_usart.c **** 
ARM GAS  /tmp/ccpGcYbE.s 			page 21


1064:src/stm32f1xx_hal_usart.c ****     /* Process Locked */
1065:src/stm32f1xx_hal_usart.c ****     __HAL_LOCK(husart);
1066:src/stm32f1xx_hal_usart.c **** 
1067:src/stm32f1xx_hal_usart.c ****     husart->pTxBuffPtr = pTxData;
1068:src/stm32f1xx_hal_usart.c ****     husart->TxXferSize = Size;
1069:src/stm32f1xx_hal_usart.c ****     husart->TxXferCount = Size;
1070:src/stm32f1xx_hal_usart.c **** 
1071:src/stm32f1xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
1072:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX;
1073:src/stm32f1xx_hal_usart.c **** 
1074:src/stm32f1xx_hal_usart.c ****     /* The USART Error Interrupts: (Frame error, Noise error, Overrun error)
1075:src/stm32f1xx_hal_usart.c ****        are not managed by the USART transmit process to avoid the overrun interrupt
1076:src/stm32f1xx_hal_usart.c ****        when the USART mode is configured for transmit and receive "USART_MODE_TX_RX"
1077:src/stm32f1xx_hal_usart.c ****        to benefit for the frame error and noise interrupts the USART mode should be
1078:src/stm32f1xx_hal_usart.c ****        configured only for transmit "USART_MODE_TX"
1079:src/stm32f1xx_hal_usart.c ****        The __HAL_USART_ENABLE_IT(husart, USART_IT_ERR) can be used to enable the Frame error,
1080:src/stm32f1xx_hal_usart.c ****        Noise error interrupt */
1081:src/stm32f1xx_hal_usart.c **** 
1082:src/stm32f1xx_hal_usart.c ****     /* Process Unlocked */
1083:src/stm32f1xx_hal_usart.c ****     __HAL_UNLOCK(husart);
1084:src/stm32f1xx_hal_usart.c **** 
1085:src/stm32f1xx_hal_usart.c ****     /* Enable the USART Transmit Data Register Empty Interrupt */
1086:src/stm32f1xx_hal_usart.c ****     SET_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
1087:src/stm32f1xx_hal_usart.c **** 
1088:src/stm32f1xx_hal_usart.c ****     return HAL_OK;
1089:src/stm32f1xx_hal_usart.c ****   }
1090:src/stm32f1xx_hal_usart.c ****   else
1091:src/stm32f1xx_hal_usart.c ****   {
1092:src/stm32f1xx_hal_usart.c ****     return HAL_BUSY;
1093:src/stm32f1xx_hal_usart.c ****   }
1094:src/stm32f1xx_hal_usart.c **** }
1095:src/stm32f1xx_hal_usart.c **** 
1096:src/stm32f1xx_hal_usart.c **** /**
1097:src/stm32f1xx_hal_usart.c ****   * @brief  Simplex Receive an amount of data in non-blocking mode.
1098:src/stm32f1xx_hal_usart.c ****   * @note   To receive synchronous data, dummy data are simultaneously transmitted.
1099:src/stm32f1xx_hal_usart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1100:src/stm32f1xx_hal_usart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1101:src/stm32f1xx_hal_usart.c ****   *         of u16 available through pRxData.
1102:src/stm32f1xx_hal_usart.c ****   * @param  husart  Pointer to a USART_HandleTypeDef structure that contains
1103:src/stm32f1xx_hal_usart.c ****   *                 the configuration information for the specified USART module.
1104:src/stm32f1xx_hal_usart.c ****   * @param  pRxData Pointer to data buffer (u8 or u16 data elements).
1105:src/stm32f1xx_hal_usart.c ****   * @param  Size    Amount of data elements (u8 or u16) to be received.
1106:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
1107:src/stm32f1xx_hal_usart.c ****   */
1108:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_Receive_IT(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size
1109:src/stm32f1xx_hal_usart.c **** {
1110:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
1111:src/stm32f1xx_hal_usart.c ****   {
1112:src/stm32f1xx_hal_usart.c ****     if ((pRxData == NULL) || (Size == 0))
1113:src/stm32f1xx_hal_usart.c ****     {
1114:src/stm32f1xx_hal_usart.c ****       return HAL_ERROR;
1115:src/stm32f1xx_hal_usart.c ****     }
1116:src/stm32f1xx_hal_usart.c ****     /* Process Locked */
1117:src/stm32f1xx_hal_usart.c ****     __HAL_LOCK(husart);
1118:src/stm32f1xx_hal_usart.c **** 
1119:src/stm32f1xx_hal_usart.c ****     husart->pRxBuffPtr = pRxData;
1120:src/stm32f1xx_hal_usart.c ****     husart->RxXferSize = Size;
ARM GAS  /tmp/ccpGcYbE.s 			page 22


1121:src/stm32f1xx_hal_usart.c ****     husart->RxXferCount = Size;
1122:src/stm32f1xx_hal_usart.c **** 
1123:src/stm32f1xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
1124:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
1125:src/stm32f1xx_hal_usart.c **** 
1126:src/stm32f1xx_hal_usart.c ****     /* Process Unlocked */
1127:src/stm32f1xx_hal_usart.c ****     __HAL_UNLOCK(husart);
1128:src/stm32f1xx_hal_usart.c **** 
1129:src/stm32f1xx_hal_usart.c ****     /* Enable the USART Parity Error and Data Register not empty Interrupts */
1130:src/stm32f1xx_hal_usart.c ****     SET_BIT(husart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
1131:src/stm32f1xx_hal_usart.c **** 
1132:src/stm32f1xx_hal_usart.c ****     /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
1133:src/stm32f1xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
1134:src/stm32f1xx_hal_usart.c **** 
1135:src/stm32f1xx_hal_usart.c ****     /* Send dummy byte in order to generate the clock for the slave to send data */
1136:src/stm32f1xx_hal_usart.c ****     husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x01FF);
1137:src/stm32f1xx_hal_usart.c **** 
1138:src/stm32f1xx_hal_usart.c ****     return HAL_OK;
1139:src/stm32f1xx_hal_usart.c ****   }
1140:src/stm32f1xx_hal_usart.c ****   else
1141:src/stm32f1xx_hal_usart.c ****   {
1142:src/stm32f1xx_hal_usart.c ****     return HAL_BUSY;
1143:src/stm32f1xx_hal_usart.c ****   }
1144:src/stm32f1xx_hal_usart.c **** }
1145:src/stm32f1xx_hal_usart.c **** 
1146:src/stm32f1xx_hal_usart.c **** /**
1147:src/stm32f1xx_hal_usart.c ****   * @brief  Full-Duplex Send and Receive an amount of data in full-duplex mode (non-blocking).
1148:src/stm32f1xx_hal_usart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1149:src/stm32f1xx_hal_usart.c ****   *         the sent data and the received data are handled as sets of u16. In this case, Size must
1150:src/stm32f1xx_hal_usart.c ****   *         of u16 available through pTxData and through pRxData.
1151:src/stm32f1xx_hal_usart.c ****   * @param  husart  Pointer to a USART_HandleTypeDef structure that contains
1152:src/stm32f1xx_hal_usart.c ****   *                 the configuration information for the specified USART module.
1153:src/stm32f1xx_hal_usart.c ****   * @param  pTxData Pointer to TX data buffer (u8 or u16 data elements).
1154:src/stm32f1xx_hal_usart.c ****   * @param  pRxData Pointer to RX data buffer (u8 or u16 data elements).
1155:src/stm32f1xx_hal_usart.c ****   * @param  Size    Amount of data elements (u8 or u16) to be sent (same amount to be received).
1156:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
1157:src/stm32f1xx_hal_usart.c ****   */
1158:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_TransmitReceive_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8
1159:src/stm32f1xx_hal_usart.c **** {
1160:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
1161:src/stm32f1xx_hal_usart.c ****   {
1162:src/stm32f1xx_hal_usart.c ****     if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
1163:src/stm32f1xx_hal_usart.c ****     {
1164:src/stm32f1xx_hal_usart.c ****       return HAL_ERROR;
1165:src/stm32f1xx_hal_usart.c ****     }
1166:src/stm32f1xx_hal_usart.c ****     /* Process Locked */
1167:src/stm32f1xx_hal_usart.c ****     __HAL_LOCK(husart);
1168:src/stm32f1xx_hal_usart.c **** 
1169:src/stm32f1xx_hal_usart.c ****     husart->pRxBuffPtr = pRxData;
1170:src/stm32f1xx_hal_usart.c ****     husart->RxXferSize = Size;
1171:src/stm32f1xx_hal_usart.c ****     husart->RxXferCount = Size;
1172:src/stm32f1xx_hal_usart.c ****     husart->pTxBuffPtr = pTxData;
1173:src/stm32f1xx_hal_usart.c ****     husart->TxXferSize = Size;
1174:src/stm32f1xx_hal_usart.c ****     husart->TxXferCount = Size;
1175:src/stm32f1xx_hal_usart.c **** 
1176:src/stm32f1xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
1177:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX_RX;
ARM GAS  /tmp/ccpGcYbE.s 			page 23


1178:src/stm32f1xx_hal_usart.c **** 
1179:src/stm32f1xx_hal_usart.c ****     /* Process Unlocked */
1180:src/stm32f1xx_hal_usart.c ****     __HAL_UNLOCK(husart);
1181:src/stm32f1xx_hal_usart.c **** 
1182:src/stm32f1xx_hal_usart.c ****     /* Enable the USART Data Register not empty Interrupt */
1183:src/stm32f1xx_hal_usart.c ****     SET_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
1184:src/stm32f1xx_hal_usart.c **** 
1185:src/stm32f1xx_hal_usart.c ****     /* Enable the USART Parity Error Interrupt */
1186:src/stm32f1xx_hal_usart.c ****     SET_BIT(husart->Instance->CR1, USART_CR1_PEIE);
1187:src/stm32f1xx_hal_usart.c **** 
1188:src/stm32f1xx_hal_usart.c ****     /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
1189:src/stm32f1xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
1190:src/stm32f1xx_hal_usart.c **** 
1191:src/stm32f1xx_hal_usart.c ****     /* Enable the USART Transmit Data Register Empty Interrupt */
1192:src/stm32f1xx_hal_usart.c ****     SET_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
1193:src/stm32f1xx_hal_usart.c **** 
1194:src/stm32f1xx_hal_usart.c ****     return HAL_OK;
1195:src/stm32f1xx_hal_usart.c ****   }
1196:src/stm32f1xx_hal_usart.c ****   else
1197:src/stm32f1xx_hal_usart.c ****   {
1198:src/stm32f1xx_hal_usart.c ****     return HAL_BUSY;
1199:src/stm32f1xx_hal_usart.c ****   }
1200:src/stm32f1xx_hal_usart.c **** }
1201:src/stm32f1xx_hal_usart.c **** 
1202:src/stm32f1xx_hal_usart.c **** /**
1203:src/stm32f1xx_hal_usart.c ****   * @brief  Simplex Send an amount of data in DMA mode.
1204:src/stm32f1xx_hal_usart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1205:src/stm32f1xx_hal_usart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1206:src/stm32f1xx_hal_usart.c ****   *         of u16 provided through pTxData.
1207:src/stm32f1xx_hal_usart.c ****   * @param  husart  Pointer to a USART_HandleTypeDef structure that contains
1208:src/stm32f1xx_hal_usart.c ****   *                 the configuration information for the specified USART module.
1209:src/stm32f1xx_hal_usart.c ****   * @param  pTxData Pointer to data buffer (u8 or u16 data elements).
1210:src/stm32f1xx_hal_usart.c ****   * @param  Size    Amount of data elements (u8 or u16) to be sent.
1211:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
1212:src/stm32f1xx_hal_usart.c ****   */
1213:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Si
1214:src/stm32f1xx_hal_usart.c **** {
1215:src/stm32f1xx_hal_usart.c ****   uint32_t *tmp;
1216:src/stm32f1xx_hal_usart.c **** 
1217:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
1218:src/stm32f1xx_hal_usart.c ****   {
1219:src/stm32f1xx_hal_usart.c ****     if ((pTxData == NULL) || (Size == 0))
1220:src/stm32f1xx_hal_usart.c ****     {
1221:src/stm32f1xx_hal_usart.c ****       return HAL_ERROR;
1222:src/stm32f1xx_hal_usart.c ****     }
1223:src/stm32f1xx_hal_usart.c ****     /* Process Locked */
1224:src/stm32f1xx_hal_usart.c ****     __HAL_LOCK(husart);
1225:src/stm32f1xx_hal_usart.c **** 
1226:src/stm32f1xx_hal_usart.c ****     husart->pTxBuffPtr = pTxData;
1227:src/stm32f1xx_hal_usart.c ****     husart->TxXferSize = Size;
1228:src/stm32f1xx_hal_usart.c ****     husart->TxXferCount = Size;
1229:src/stm32f1xx_hal_usart.c **** 
1230:src/stm32f1xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
1231:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX;
1232:src/stm32f1xx_hal_usart.c **** 
1233:src/stm32f1xx_hal_usart.c ****     /* Set the USART DMA transfer complete callback */
1234:src/stm32f1xx_hal_usart.c ****     husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
ARM GAS  /tmp/ccpGcYbE.s 			page 24


1235:src/stm32f1xx_hal_usart.c **** 
1236:src/stm32f1xx_hal_usart.c ****     /* Set the USART DMA Half transfer complete callback */
1237:src/stm32f1xx_hal_usart.c ****     husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
1238:src/stm32f1xx_hal_usart.c **** 
1239:src/stm32f1xx_hal_usart.c ****     /* Set the DMA error callback */
1240:src/stm32f1xx_hal_usart.c ****     husart->hdmatx->XferErrorCallback = USART_DMAError;
1241:src/stm32f1xx_hal_usart.c **** 
1242:src/stm32f1xx_hal_usart.c ****     /* Set the DMA abort callback */
1243:src/stm32f1xx_hal_usart.c ****     husart->hdmatx->XferAbortCallback = NULL;
1244:src/stm32f1xx_hal_usart.c **** 
1245:src/stm32f1xx_hal_usart.c ****     /* Enable the USART transmit DMA channel */
1246:src/stm32f1xx_hal_usart.c ****     tmp = (uint32_t *)&pTxData;
1247:src/stm32f1xx_hal_usart.c ****     HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->DR, Size);
1248:src/stm32f1xx_hal_usart.c **** 
1249:src/stm32f1xx_hal_usart.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
1250:src/stm32f1xx_hal_usart.c ****     __HAL_USART_CLEAR_FLAG(husart, USART_FLAG_TC);
1251:src/stm32f1xx_hal_usart.c **** 
1252:src/stm32f1xx_hal_usart.c ****     /* Process Unlocked */
1253:src/stm32f1xx_hal_usart.c ****     __HAL_UNLOCK(husart);
1254:src/stm32f1xx_hal_usart.c **** 
1255:src/stm32f1xx_hal_usart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1256:src/stm32f1xx_hal_usart.c ****     in the USART CR3 register */
1257:src/stm32f1xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
1258:src/stm32f1xx_hal_usart.c **** 
1259:src/stm32f1xx_hal_usart.c ****     return HAL_OK;
1260:src/stm32f1xx_hal_usart.c ****   }
1261:src/stm32f1xx_hal_usart.c ****   else
1262:src/stm32f1xx_hal_usart.c ****   {
1263:src/stm32f1xx_hal_usart.c ****     return HAL_BUSY;
1264:src/stm32f1xx_hal_usart.c ****   }
1265:src/stm32f1xx_hal_usart.c **** }
1266:src/stm32f1xx_hal_usart.c **** 
1267:src/stm32f1xx_hal_usart.c **** /**
1268:src/stm32f1xx_hal_usart.c ****   * @brief  Full-Duplex Receive an amount of data in DMA mode.
1269:src/stm32f1xx_hal_usart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1270:src/stm32f1xx_hal_usart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1271:src/stm32f1xx_hal_usart.c ****   *         of u16 available through pRxData.
1272:src/stm32f1xx_hal_usart.c ****   * @param  husart  Pointer to a USART_HandleTypeDef structure that contains
1273:src/stm32f1xx_hal_usart.c ****   *                 the configuration information for the specified USART module.
1274:src/stm32f1xx_hal_usart.c ****   * @param  pRxData Pointer to data buffer (u8 or u16 data elements).
1275:src/stm32f1xx_hal_usart.c ****   * @param  Size    Amount of data elements (u8 or u16) to be received.
1276:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
1277:src/stm32f1xx_hal_usart.c ****   * @note   The USART DMA transmit channel must be configured in order to generate the clock for th
1278:src/stm32f1xx_hal_usart.c ****   * @note   When the USART parity is enabled (PCE = 1) the data received contain the parity bit.
1279:src/stm32f1xx_hal_usart.c ****   */
1280:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_Receive_DMA(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Siz
1281:src/stm32f1xx_hal_usart.c **** {
1282:src/stm32f1xx_hal_usart.c ****   uint32_t *tmp;
1283:src/stm32f1xx_hal_usart.c **** 
1284:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
1285:src/stm32f1xx_hal_usart.c ****   {
1286:src/stm32f1xx_hal_usart.c ****     if ((pRxData == NULL) || (Size == 0))
1287:src/stm32f1xx_hal_usart.c ****     {
1288:src/stm32f1xx_hal_usart.c ****       return HAL_ERROR;
1289:src/stm32f1xx_hal_usart.c ****     }
1290:src/stm32f1xx_hal_usart.c **** 
1291:src/stm32f1xx_hal_usart.c ****     /* Process Locked */
ARM GAS  /tmp/ccpGcYbE.s 			page 25


1292:src/stm32f1xx_hal_usart.c ****     __HAL_LOCK(husart);
1293:src/stm32f1xx_hal_usart.c **** 
1294:src/stm32f1xx_hal_usart.c ****     husart->pRxBuffPtr = pRxData;
1295:src/stm32f1xx_hal_usart.c ****     husart->RxXferSize = Size;
1296:src/stm32f1xx_hal_usart.c ****     husart->pTxBuffPtr = pRxData;
1297:src/stm32f1xx_hal_usart.c ****     husart->TxXferSize = Size;
1298:src/stm32f1xx_hal_usart.c **** 
1299:src/stm32f1xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
1300:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
1301:src/stm32f1xx_hal_usart.c **** 
1302:src/stm32f1xx_hal_usart.c ****     /* Set the USART DMA Rx transfer complete callback */
1303:src/stm32f1xx_hal_usart.c ****     husart->hdmarx->XferCpltCallback = USART_DMAReceiveCplt;
1304:src/stm32f1xx_hal_usart.c **** 
1305:src/stm32f1xx_hal_usart.c ****     /* Set the USART DMA Half transfer complete callback */
1306:src/stm32f1xx_hal_usart.c ****     husart->hdmarx->XferHalfCpltCallback = USART_DMARxHalfCplt;
1307:src/stm32f1xx_hal_usart.c **** 
1308:src/stm32f1xx_hal_usart.c ****     /* Set the USART DMA Rx transfer error callback */
1309:src/stm32f1xx_hal_usart.c ****     husart->hdmarx->XferErrorCallback = USART_DMAError;
1310:src/stm32f1xx_hal_usart.c **** 
1311:src/stm32f1xx_hal_usart.c ****     /* Set the DMA abort callback */
1312:src/stm32f1xx_hal_usart.c ****     husart->hdmarx->XferAbortCallback = NULL;
1313:src/stm32f1xx_hal_usart.c **** 
1314:src/stm32f1xx_hal_usart.c ****     /* Set the USART Tx DMA transfer complete callback as NULL because the communication closing
1315:src/stm32f1xx_hal_usart.c ****     is performed in DMA reception complete callback  */
1316:src/stm32f1xx_hal_usart.c ****     husart->hdmatx->XferHalfCpltCallback = NULL;
1317:src/stm32f1xx_hal_usart.c ****     husart->hdmatx->XferCpltCallback = NULL;
1318:src/stm32f1xx_hal_usart.c **** 
1319:src/stm32f1xx_hal_usart.c ****     /* Set the DMA error callback */
1320:src/stm32f1xx_hal_usart.c ****     husart->hdmatx->XferErrorCallback = USART_DMAError;
1321:src/stm32f1xx_hal_usart.c **** 
1322:src/stm32f1xx_hal_usart.c ****     /* Set the DMA AbortCpltCallback */
1323:src/stm32f1xx_hal_usart.c ****     husart->hdmatx->XferAbortCallback = NULL;
1324:src/stm32f1xx_hal_usart.c **** 
1325:src/stm32f1xx_hal_usart.c ****     /* Enable the USART receive DMA channel */
1326:src/stm32f1xx_hal_usart.c ****     tmp = (uint32_t *)&pRxData;
1327:src/stm32f1xx_hal_usart.c ****     HAL_DMA_Start_IT(husart->hdmarx, (uint32_t)&husart->Instance->DR, *(uint32_t *)tmp, Size);
1328:src/stm32f1xx_hal_usart.c **** 
1329:src/stm32f1xx_hal_usart.c ****     /* Enable the USART transmit DMA channel: the transmit channel is used in order
1330:src/stm32f1xx_hal_usart.c ****        to generate in the non-blocking mode the clock to the slave device,
1331:src/stm32f1xx_hal_usart.c ****        this mode isn't a simplex receive mode but a full-duplex receive one */
1332:src/stm32f1xx_hal_usart.c ****     HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->DR, Size);
1333:src/stm32f1xx_hal_usart.c **** 
1334:src/stm32f1xx_hal_usart.c ****     /* Clear the Overrun flag just before enabling the DMA Rx request: mandatory for the second tra
1335:src/stm32f1xx_hal_usart.c ****     __HAL_USART_CLEAR_OREFLAG(husart);
1336:src/stm32f1xx_hal_usart.c **** 
1337:src/stm32f1xx_hal_usart.c ****     /* Process Unlocked */
1338:src/stm32f1xx_hal_usart.c ****     __HAL_UNLOCK(husart);
1339:src/stm32f1xx_hal_usart.c **** 
1340:src/stm32f1xx_hal_usart.c ****     /* Enable the USART Parity Error Interrupt */
1341:src/stm32f1xx_hal_usart.c ****     SET_BIT(husart->Instance->CR1, USART_CR1_PEIE);
1342:src/stm32f1xx_hal_usart.c **** 
1343:src/stm32f1xx_hal_usart.c ****     /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
1344:src/stm32f1xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
1345:src/stm32f1xx_hal_usart.c **** 
1346:src/stm32f1xx_hal_usart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit
1347:src/stm32f1xx_hal_usart.c ****        in the USART CR3 register */
1348:src/stm32f1xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_DMAR);
ARM GAS  /tmp/ccpGcYbE.s 			page 26


1349:src/stm32f1xx_hal_usart.c **** 
1350:src/stm32f1xx_hal_usart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1351:src/stm32f1xx_hal_usart.c ****        in the USART CR3 register */
1352:src/stm32f1xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
1353:src/stm32f1xx_hal_usart.c **** 
1354:src/stm32f1xx_hal_usart.c ****     return HAL_OK;
1355:src/stm32f1xx_hal_usart.c ****   }
1356:src/stm32f1xx_hal_usart.c ****   else
1357:src/stm32f1xx_hal_usart.c ****   {
1358:src/stm32f1xx_hal_usart.c ****     return HAL_BUSY;
1359:src/stm32f1xx_hal_usart.c ****   }
1360:src/stm32f1xx_hal_usart.c **** }
1361:src/stm32f1xx_hal_usart.c **** 
1362:src/stm32f1xx_hal_usart.c **** /**
1363:src/stm32f1xx_hal_usart.c ****   * @brief  Full-Duplex Transmit Receive an amount of data in DMA mode.
1364:src/stm32f1xx_hal_usart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1365:src/stm32f1xx_hal_usart.c ****   *         the sent data and the received data are handled as sets of u16. In this case, Size must
1366:src/stm32f1xx_hal_usart.c ****   *         of u16 available through pTxData and through pRxData.
1367:src/stm32f1xx_hal_usart.c ****   * @param  husart  Pointer to a USART_HandleTypeDef structure that contains
1368:src/stm32f1xx_hal_usart.c ****   *                 the configuration information for the specified USART module.
1369:src/stm32f1xx_hal_usart.c ****   * @param  pTxData Pointer to TX data buffer (u8 or u16 data elements).
1370:src/stm32f1xx_hal_usart.c ****   * @param  pRxData Pointer to RX data buffer (u8 or u16 data elements).
1371:src/stm32f1xx_hal_usart.c ****   * @param  Size    Amount of data elements (u8 or u16) to be received/sent.
1372:src/stm32f1xx_hal_usart.c ****   * @note   When the USART parity is enabled (PCE = 1) the data received contain the parity bit.
1373:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
1374:src/stm32f1xx_hal_usart.c ****   */
1375:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_TransmitReceive_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint
1376:src/stm32f1xx_hal_usart.c **** {
1377:src/stm32f1xx_hal_usart.c ****   uint32_t *tmp;
1378:src/stm32f1xx_hal_usart.c **** 
1379:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
1380:src/stm32f1xx_hal_usart.c ****   {
1381:src/stm32f1xx_hal_usart.c ****     if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
1382:src/stm32f1xx_hal_usart.c ****     {
1383:src/stm32f1xx_hal_usart.c ****       return HAL_ERROR;
1384:src/stm32f1xx_hal_usart.c ****     }
1385:src/stm32f1xx_hal_usart.c ****     /* Process Locked */
1386:src/stm32f1xx_hal_usart.c ****     __HAL_LOCK(husart);
1387:src/stm32f1xx_hal_usart.c **** 
1388:src/stm32f1xx_hal_usart.c ****     husart->pRxBuffPtr = pRxData;
1389:src/stm32f1xx_hal_usart.c ****     husart->RxXferSize = Size;
1390:src/stm32f1xx_hal_usart.c ****     husart->pTxBuffPtr = pTxData;
1391:src/stm32f1xx_hal_usart.c ****     husart->TxXferSize = Size;
1392:src/stm32f1xx_hal_usart.c **** 
1393:src/stm32f1xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
1394:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX_RX;
1395:src/stm32f1xx_hal_usart.c **** 
1396:src/stm32f1xx_hal_usart.c ****     /* Set the USART DMA Rx transfer complete callback */
1397:src/stm32f1xx_hal_usart.c ****     husart->hdmarx->XferCpltCallback = USART_DMAReceiveCplt;
1398:src/stm32f1xx_hal_usart.c **** 
1399:src/stm32f1xx_hal_usart.c ****     /* Set the USART DMA Half transfer complete callback */
1400:src/stm32f1xx_hal_usart.c ****     husart->hdmarx->XferHalfCpltCallback = USART_DMARxHalfCplt;
1401:src/stm32f1xx_hal_usart.c **** 
1402:src/stm32f1xx_hal_usart.c ****     /* Set the USART DMA Tx transfer complete callback */
1403:src/stm32f1xx_hal_usart.c ****     husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
1404:src/stm32f1xx_hal_usart.c **** 
1405:src/stm32f1xx_hal_usart.c ****     /* Set the USART DMA Half transfer complete callback */
ARM GAS  /tmp/ccpGcYbE.s 			page 27


1406:src/stm32f1xx_hal_usart.c ****     husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
1407:src/stm32f1xx_hal_usart.c **** 
1408:src/stm32f1xx_hal_usart.c ****     /* Set the USART DMA Tx transfer error callback */
1409:src/stm32f1xx_hal_usart.c ****     husart->hdmatx->XferErrorCallback = USART_DMAError;
1410:src/stm32f1xx_hal_usart.c **** 
1411:src/stm32f1xx_hal_usart.c ****     /* Set the USART DMA Rx transfer error callback */
1412:src/stm32f1xx_hal_usart.c ****     husart->hdmarx->XferErrorCallback = USART_DMAError;
1413:src/stm32f1xx_hal_usart.c **** 
1414:src/stm32f1xx_hal_usart.c ****     /* Set the DMA abort callback */
1415:src/stm32f1xx_hal_usart.c ****     husart->hdmarx->XferAbortCallback = NULL;
1416:src/stm32f1xx_hal_usart.c **** 
1417:src/stm32f1xx_hal_usart.c ****     /* Enable the USART receive DMA channel */
1418:src/stm32f1xx_hal_usart.c ****     tmp = (uint32_t *)&pRxData;
1419:src/stm32f1xx_hal_usart.c ****     HAL_DMA_Start_IT(husart->hdmarx, (uint32_t)&husart->Instance->DR, *(uint32_t *)tmp, Size);
1420:src/stm32f1xx_hal_usart.c **** 
1421:src/stm32f1xx_hal_usart.c ****     /* Enable the USART transmit DMA channel */
1422:src/stm32f1xx_hal_usart.c ****     tmp = (uint32_t *)&pTxData;
1423:src/stm32f1xx_hal_usart.c ****     HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->DR, Size);
1424:src/stm32f1xx_hal_usart.c **** 
1425:src/stm32f1xx_hal_usart.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
1426:src/stm32f1xx_hal_usart.c ****     __HAL_USART_CLEAR_FLAG(husart, USART_FLAG_TC);
1427:src/stm32f1xx_hal_usart.c **** 
1428:src/stm32f1xx_hal_usart.c ****     /* Clear the Overrun flag: mandatory for the second transfer in circular mode */
1429:src/stm32f1xx_hal_usart.c ****     __HAL_USART_CLEAR_OREFLAG(husart);
1430:src/stm32f1xx_hal_usart.c **** 
1431:src/stm32f1xx_hal_usart.c ****     /* Process Unlocked */
1432:src/stm32f1xx_hal_usart.c ****     __HAL_UNLOCK(husart);
1433:src/stm32f1xx_hal_usart.c **** 
1434:src/stm32f1xx_hal_usart.c ****     /* Enable the USART Parity Error Interrupt */
1435:src/stm32f1xx_hal_usart.c ****     SET_BIT(husart->Instance->CR1, USART_CR1_PEIE);
1436:src/stm32f1xx_hal_usart.c **** 
1437:src/stm32f1xx_hal_usart.c ****     /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
1438:src/stm32f1xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
1439:src/stm32f1xx_hal_usart.c **** 
1440:src/stm32f1xx_hal_usart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit
1441:src/stm32f1xx_hal_usart.c ****        in the USART CR3 register */
1442:src/stm32f1xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_DMAR);
1443:src/stm32f1xx_hal_usart.c **** 
1444:src/stm32f1xx_hal_usart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1445:src/stm32f1xx_hal_usart.c ****        in the USART CR3 register */
1446:src/stm32f1xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
1447:src/stm32f1xx_hal_usart.c **** 
1448:src/stm32f1xx_hal_usart.c ****     return HAL_OK;
1449:src/stm32f1xx_hal_usart.c ****   }
1450:src/stm32f1xx_hal_usart.c ****   else
1451:src/stm32f1xx_hal_usart.c ****   {
1452:src/stm32f1xx_hal_usart.c ****     return HAL_BUSY;
1453:src/stm32f1xx_hal_usart.c ****   }
1454:src/stm32f1xx_hal_usart.c **** }
1455:src/stm32f1xx_hal_usart.c **** 
1456:src/stm32f1xx_hal_usart.c **** /**
1457:src/stm32f1xx_hal_usart.c ****   * @brief  Pauses the DMA Transfer.
1458:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
1459:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
1460:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
1461:src/stm32f1xx_hal_usart.c ****   */
1462:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_DMAPause(USART_HandleTypeDef *husart)
ARM GAS  /tmp/ccpGcYbE.s 			page 28


1463:src/stm32f1xx_hal_usart.c **** {
1464:src/stm32f1xx_hal_usart.c ****   /* Process Locked */
1465:src/stm32f1xx_hal_usart.c ****   __HAL_LOCK(husart);
1466:src/stm32f1xx_hal_usart.c **** 
1467:src/stm32f1xx_hal_usart.c ****   /* Disable the USART DMA Tx request */
1468:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
1469:src/stm32f1xx_hal_usart.c **** 
1470:src/stm32f1xx_hal_usart.c ****   /* Process Unlocked */
1471:src/stm32f1xx_hal_usart.c ****   __HAL_UNLOCK(husart);
1472:src/stm32f1xx_hal_usart.c **** 
1473:src/stm32f1xx_hal_usart.c ****   return HAL_OK;
1474:src/stm32f1xx_hal_usart.c **** }
1475:src/stm32f1xx_hal_usart.c **** 
1476:src/stm32f1xx_hal_usart.c **** /**
1477:src/stm32f1xx_hal_usart.c ****   * @brief  Resumes the DMA Transfer.
1478:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
1479:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
1480:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
1481:src/stm32f1xx_hal_usart.c ****   */
1482:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_DMAResume(USART_HandleTypeDef *husart)
1483:src/stm32f1xx_hal_usart.c **** {
1484:src/stm32f1xx_hal_usart.c ****   /* Process Locked */
1485:src/stm32f1xx_hal_usart.c ****   __HAL_LOCK(husart);
1486:src/stm32f1xx_hal_usart.c **** 
1487:src/stm32f1xx_hal_usart.c ****   /* Enable the USART DMA Tx request */
1488:src/stm32f1xx_hal_usart.c ****   SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
1489:src/stm32f1xx_hal_usart.c **** 
1490:src/stm32f1xx_hal_usart.c ****   /* Process Unlocked */
1491:src/stm32f1xx_hal_usart.c ****   __HAL_UNLOCK(husart);
1492:src/stm32f1xx_hal_usart.c **** 
1493:src/stm32f1xx_hal_usart.c ****   return HAL_OK;
1494:src/stm32f1xx_hal_usart.c **** }
1495:src/stm32f1xx_hal_usart.c **** 
1496:src/stm32f1xx_hal_usart.c **** /**
1497:src/stm32f1xx_hal_usart.c ****   * @brief  Stops the DMA Transfer.
1498:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
1499:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
1500:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
1501:src/stm32f1xx_hal_usart.c ****   */
1502:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_DMAStop(USART_HandleTypeDef *husart)
1503:src/stm32f1xx_hal_usart.c **** {
1504:src/stm32f1xx_hal_usart.c ****   uint32_t dmarequest = 0x00U;
1505:src/stm32f1xx_hal_usart.c ****   /* The Lock is not implemented on this API to allow the user application
1506:src/stm32f1xx_hal_usart.c ****      to call the HAL USART API under callbacks HAL_USART_TxCpltCallback() / HAL_USART_RxCpltCallbac
1507:src/stm32f1xx_hal_usart.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
1508:src/stm32f1xx_hal_usart.c ****      and the correspond call back is executed HAL_USART_TxCpltCallback() / HAL_USART_RxCpltCallback
1509:src/stm32f1xx_hal_usart.c ****      */
1510:src/stm32f1xx_hal_usart.c **** 
1511:src/stm32f1xx_hal_usart.c ****   /* Stop USART DMA Tx request if ongoing */
1512:src/stm32f1xx_hal_usart.c ****   dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAT);
1513:src/stm32f1xx_hal_usart.c ****   if ((husart->State == HAL_USART_STATE_BUSY_TX) && dmarequest)
1514:src/stm32f1xx_hal_usart.c ****   {
1515:src/stm32f1xx_hal_usart.c ****     USART_EndTxTransfer(husart);
1516:src/stm32f1xx_hal_usart.c **** 
1517:src/stm32f1xx_hal_usart.c ****     /* Abort the USART DMA Tx channel */
1518:src/stm32f1xx_hal_usart.c ****     if (husart->hdmatx != NULL)
1519:src/stm32f1xx_hal_usart.c ****     {
ARM GAS  /tmp/ccpGcYbE.s 			page 29


1520:src/stm32f1xx_hal_usart.c ****       HAL_DMA_Abort(husart->hdmatx);
1521:src/stm32f1xx_hal_usart.c ****     }
1522:src/stm32f1xx_hal_usart.c **** 
1523:src/stm32f1xx_hal_usart.c ****     /* Disable the USART Tx DMA request */
1524:src/stm32f1xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
1525:src/stm32f1xx_hal_usart.c ****   }
1526:src/stm32f1xx_hal_usart.c **** 
1527:src/stm32f1xx_hal_usart.c ****   /* Stop USART DMA Rx request if ongoing */
1528:src/stm32f1xx_hal_usart.c ****   dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
1529:src/stm32f1xx_hal_usart.c ****   if ((husart->State == HAL_USART_STATE_BUSY_RX) && dmarequest)
1530:src/stm32f1xx_hal_usart.c ****   {
1531:src/stm32f1xx_hal_usart.c ****     USART_EndRxTransfer(husart);
1532:src/stm32f1xx_hal_usart.c **** 
1533:src/stm32f1xx_hal_usart.c ****     /* Abort the USART DMA Rx channel */
1534:src/stm32f1xx_hal_usart.c ****     if (husart->hdmarx != NULL)
1535:src/stm32f1xx_hal_usart.c ****     {
1536:src/stm32f1xx_hal_usart.c ****       HAL_DMA_Abort(husart->hdmarx);
1537:src/stm32f1xx_hal_usart.c ****     }
1538:src/stm32f1xx_hal_usart.c **** 
1539:src/stm32f1xx_hal_usart.c ****     /* Disable the USART Rx DMA request */
1540:src/stm32f1xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
1541:src/stm32f1xx_hal_usart.c ****   }
1542:src/stm32f1xx_hal_usart.c **** 
1543:src/stm32f1xx_hal_usart.c ****   return HAL_OK;
1544:src/stm32f1xx_hal_usart.c **** }
1545:src/stm32f1xx_hal_usart.c **** 
1546:src/stm32f1xx_hal_usart.c **** /**
1547:src/stm32f1xx_hal_usart.c ****   * @brief  Abort ongoing transfer (blocking mode).
1548:src/stm32f1xx_hal_usart.c ****   * @param  husart USART handle.
1549:src/stm32f1xx_hal_usart.c ****   * @note   This procedure could be used for aborting any ongoing transfer (either Tx or Rx,
1550:src/stm32f1xx_hal_usart.c ****   *         as described by TransferType parameter) started in Interrupt or DMA mode.
1551:src/stm32f1xx_hal_usart.c ****   *         This procedure performs following operations :
1552:src/stm32f1xx_hal_usart.c ****   *           - Disable PPP Interrupts (depending of transfer direction)
1553:src/stm32f1xx_hal_usart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1554:src/stm32f1xx_hal_usart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1555:src/stm32f1xx_hal_usart.c ****   *           - Set handle State to READY
1556:src/stm32f1xx_hal_usart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1557:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
1558:src/stm32f1xx_hal_usart.c **** */
1559:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_Abort(USART_HandleTypeDef *husart)
1560:src/stm32f1xx_hal_usart.c **** {
1561:src/stm32f1xx_hal_usart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1562:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1
1563:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
1564:src/stm32f1xx_hal_usart.c **** 
1565:src/stm32f1xx_hal_usart.c ****   /* Disable the USART DMA Tx request if enabled */
1566:src/stm32f1xx_hal_usart.c ****   if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAT))
1567:src/stm32f1xx_hal_usart.c ****   {
1568:src/stm32f1xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
1569:src/stm32f1xx_hal_usart.c **** 
1570:src/stm32f1xx_hal_usart.c ****     /* Abort the USART DMA Tx channel : use blocking DMA Abort API (no callback) */
1571:src/stm32f1xx_hal_usart.c ****     if (husart->hdmatx != NULL)
1572:src/stm32f1xx_hal_usart.c ****     {
1573:src/stm32f1xx_hal_usart.c ****       /* Set the USART DMA Abort callback to Null.
1574:src/stm32f1xx_hal_usart.c ****          No call back execution at end of DMA abort procedure */
1575:src/stm32f1xx_hal_usart.c ****       husart->hdmatx->XferAbortCallback = NULL;
1576:src/stm32f1xx_hal_usart.c **** 
ARM GAS  /tmp/ccpGcYbE.s 			page 30


1577:src/stm32f1xx_hal_usart.c ****       HAL_DMA_Abort(husart->hdmatx);
1578:src/stm32f1xx_hal_usart.c ****     }
1579:src/stm32f1xx_hal_usart.c ****   }
1580:src/stm32f1xx_hal_usart.c **** 
1581:src/stm32f1xx_hal_usart.c ****   /* Disable the USART DMA Rx request if enabled */
1582:src/stm32f1xx_hal_usart.c ****   if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1583:src/stm32f1xx_hal_usart.c ****   {
1584:src/stm32f1xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
1585:src/stm32f1xx_hal_usart.c **** 
1586:src/stm32f1xx_hal_usart.c ****     /* Abort the USART DMA Rx channel : use blocking DMA Abort API (no callback) */
1587:src/stm32f1xx_hal_usart.c ****     if (husart->hdmarx != NULL)
1588:src/stm32f1xx_hal_usart.c ****     {
1589:src/stm32f1xx_hal_usart.c ****       /* Set the USART DMA Abort callback to Null.
1590:src/stm32f1xx_hal_usart.c ****          No call back execution at end of DMA abort procedure */
1591:src/stm32f1xx_hal_usart.c ****       husart->hdmarx->XferAbortCallback = NULL;
1592:src/stm32f1xx_hal_usart.c **** 
1593:src/stm32f1xx_hal_usart.c ****       HAL_DMA_Abort(husart->hdmarx);
1594:src/stm32f1xx_hal_usart.c ****     }
1595:src/stm32f1xx_hal_usart.c ****   }
1596:src/stm32f1xx_hal_usart.c **** 
1597:src/stm32f1xx_hal_usart.c ****   /* Reset Tx and Rx transfer counters */
1598:src/stm32f1xx_hal_usart.c ****   husart->TxXferCount = 0x00U;
1599:src/stm32f1xx_hal_usart.c ****   husart->RxXferCount = 0x00U;
1600:src/stm32f1xx_hal_usart.c **** 
1601:src/stm32f1xx_hal_usart.c ****   /* Restore husart->State to Ready */
1602:src/stm32f1xx_hal_usart.c ****   husart->State  = HAL_USART_STATE_READY;
1603:src/stm32f1xx_hal_usart.c **** 
1604:src/stm32f1xx_hal_usart.c ****   /* Reset Handle ErrorCode to No Error */
1605:src/stm32f1xx_hal_usart.c ****   husart->ErrorCode = HAL_USART_ERROR_NONE;
1606:src/stm32f1xx_hal_usart.c **** 
1607:src/stm32f1xx_hal_usart.c ****   return HAL_OK;
1608:src/stm32f1xx_hal_usart.c **** }
1609:src/stm32f1xx_hal_usart.c **** 
1610:src/stm32f1xx_hal_usart.c **** /**
1611:src/stm32f1xx_hal_usart.c ****   * @brief  Abort ongoing transfer (Interrupt mode).
1612:src/stm32f1xx_hal_usart.c ****   * @param  husart USART handle.
1613:src/stm32f1xx_hal_usart.c ****   * @note   This procedure could be used for aborting any ongoing transfer (either Tx or Rx,
1614:src/stm32f1xx_hal_usart.c ****   *         as described by TransferType parameter) started in Interrupt or DMA mode.
1615:src/stm32f1xx_hal_usart.c ****   *         This procedure performs following operations :
1616:src/stm32f1xx_hal_usart.c ****   *           - Disable PPP Interrupts (depending of transfer direction)
1617:src/stm32f1xx_hal_usart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1618:src/stm32f1xx_hal_usart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1619:src/stm32f1xx_hal_usart.c ****   *           - Set handle State to READY
1620:src/stm32f1xx_hal_usart.c ****   *           - At abort completion, call user abort complete callback
1621:src/stm32f1xx_hal_usart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1622:src/stm32f1xx_hal_usart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1623:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
1624:src/stm32f1xx_hal_usart.c **** */
1625:src/stm32f1xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_Abort_IT(USART_HandleTypeDef *husart)
1626:src/stm32f1xx_hal_usart.c **** {
1627:src/stm32f1xx_hal_usart.c ****   uint32_t AbortCplt = 0x01U;
1628:src/stm32f1xx_hal_usart.c **** 
1629:src/stm32f1xx_hal_usart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1630:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1
1631:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
1632:src/stm32f1xx_hal_usart.c **** 
1633:src/stm32f1xx_hal_usart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to USART Handle, DMA Abort complete callbacks s
ARM GAS  /tmp/ccpGcYbE.s 			page 31


1634:src/stm32f1xx_hal_usart.c ****      before any call to DMA Abort functions */
1635:src/stm32f1xx_hal_usart.c ****   /* DMA Tx Handle is valid */
1636:src/stm32f1xx_hal_usart.c ****   if (husart->hdmatx != NULL)
1637:src/stm32f1xx_hal_usart.c ****   {
1638:src/stm32f1xx_hal_usart.c ****     /* Set DMA Abort Complete callback if USART DMA Tx request if enabled.
1639:src/stm32f1xx_hal_usart.c ****        Otherwise, set it to NULL */
1640:src/stm32f1xx_hal_usart.c ****     if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAT))
1641:src/stm32f1xx_hal_usart.c ****     {
1642:src/stm32f1xx_hal_usart.c ****       husart->hdmatx->XferAbortCallback = USART_DMATxAbortCallback;
1643:src/stm32f1xx_hal_usart.c ****     }
1644:src/stm32f1xx_hal_usart.c ****     else
1645:src/stm32f1xx_hal_usart.c ****     {
1646:src/stm32f1xx_hal_usart.c ****       husart->hdmatx->XferAbortCallback = NULL;
1647:src/stm32f1xx_hal_usart.c ****     }
1648:src/stm32f1xx_hal_usart.c ****   }
1649:src/stm32f1xx_hal_usart.c ****   /* DMA Rx Handle is valid */
1650:src/stm32f1xx_hal_usart.c ****   if (husart->hdmarx != NULL)
1651:src/stm32f1xx_hal_usart.c ****   {
1652:src/stm32f1xx_hal_usart.c ****     /* Set DMA Abort Complete callback if USART DMA Rx request if enabled.
1653:src/stm32f1xx_hal_usart.c ****        Otherwise, set it to NULL */
1654:src/stm32f1xx_hal_usart.c ****     if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1655:src/stm32f1xx_hal_usart.c ****     {
1656:src/stm32f1xx_hal_usart.c ****       husart->hdmarx->XferAbortCallback = USART_DMARxAbortCallback;
1657:src/stm32f1xx_hal_usart.c ****     }
1658:src/stm32f1xx_hal_usart.c ****     else
1659:src/stm32f1xx_hal_usart.c ****     {
1660:src/stm32f1xx_hal_usart.c ****       husart->hdmarx->XferAbortCallback = NULL;
1661:src/stm32f1xx_hal_usart.c ****     }
1662:src/stm32f1xx_hal_usart.c ****   }
1663:src/stm32f1xx_hal_usart.c **** 
1664:src/stm32f1xx_hal_usart.c ****   /* Disable the USART DMA Tx request if enabled */
1665:src/stm32f1xx_hal_usart.c ****   if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAT))
1666:src/stm32f1xx_hal_usart.c ****   {
1667:src/stm32f1xx_hal_usart.c ****     /* Disable DMA Tx at USART level */
1668:src/stm32f1xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
1669:src/stm32f1xx_hal_usart.c **** 
1670:src/stm32f1xx_hal_usart.c ****     /* Abort the USART DMA Tx channel : use non blocking DMA Abort API (callback) */
1671:src/stm32f1xx_hal_usart.c ****     if (husart->hdmatx != NULL)
1672:src/stm32f1xx_hal_usart.c ****     {
1673:src/stm32f1xx_hal_usart.c ****       /* USART Tx DMA Abort callback has already been initialised :
1674:src/stm32f1xx_hal_usart.c ****          will lead to call HAL_USART_AbortCpltCallback() at end of DMA abort procedure */
1675:src/stm32f1xx_hal_usart.c **** 
1676:src/stm32f1xx_hal_usart.c ****       /* Abort DMA TX */
1677:src/stm32f1xx_hal_usart.c ****       if (HAL_DMA_Abort_IT(husart->hdmatx) != HAL_OK)
1678:src/stm32f1xx_hal_usart.c ****       {
1679:src/stm32f1xx_hal_usart.c ****         husart->hdmatx->XferAbortCallback = NULL;
1680:src/stm32f1xx_hal_usart.c ****       }
1681:src/stm32f1xx_hal_usart.c ****       else
1682:src/stm32f1xx_hal_usart.c ****       {
1683:src/stm32f1xx_hal_usart.c ****         AbortCplt = 0x00U;
1684:src/stm32f1xx_hal_usart.c ****       }
1685:src/stm32f1xx_hal_usart.c ****     }
1686:src/stm32f1xx_hal_usart.c ****   }
1687:src/stm32f1xx_hal_usart.c **** 
1688:src/stm32f1xx_hal_usart.c ****   /* Disable the USART DMA Rx request if enabled */
1689:src/stm32f1xx_hal_usart.c ****   if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1690:src/stm32f1xx_hal_usart.c ****   {
ARM GAS  /tmp/ccpGcYbE.s 			page 32


1691:src/stm32f1xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
1692:src/stm32f1xx_hal_usart.c **** 
1693:src/stm32f1xx_hal_usart.c ****     /* Abort the USART DMA Rx channel : use non blocking DMA Abort API (callback) */
1694:src/stm32f1xx_hal_usart.c ****     if (husart->hdmarx != NULL)
1695:src/stm32f1xx_hal_usart.c ****     {
1696:src/stm32f1xx_hal_usart.c ****       /* USART Rx DMA Abort callback has already been initialised :
1697:src/stm32f1xx_hal_usart.c ****          will lead to call HAL_USART_AbortCpltCallback() at end of DMA abort procedure */
1698:src/stm32f1xx_hal_usart.c **** 
1699:src/stm32f1xx_hal_usart.c ****       /* Abort DMA RX */
1700:src/stm32f1xx_hal_usart.c ****       if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
1701:src/stm32f1xx_hal_usart.c ****       {
1702:src/stm32f1xx_hal_usart.c ****         husart->hdmarx->XferAbortCallback = NULL;
1703:src/stm32f1xx_hal_usart.c ****         AbortCplt = 0x01U;
1704:src/stm32f1xx_hal_usart.c ****       }
1705:src/stm32f1xx_hal_usart.c ****       else
1706:src/stm32f1xx_hal_usart.c ****       {
1707:src/stm32f1xx_hal_usart.c ****         AbortCplt = 0x00U;
1708:src/stm32f1xx_hal_usart.c ****       }
1709:src/stm32f1xx_hal_usart.c ****     }
1710:src/stm32f1xx_hal_usart.c ****   }
1711:src/stm32f1xx_hal_usart.c **** 
1712:src/stm32f1xx_hal_usart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1713:src/stm32f1xx_hal_usart.c ****   if (AbortCplt  == 0x01U)
1714:src/stm32f1xx_hal_usart.c ****   {
1715:src/stm32f1xx_hal_usart.c ****     /* Reset Tx and Rx transfer counters */
1716:src/stm32f1xx_hal_usart.c ****     husart->TxXferCount = 0x00U;
1717:src/stm32f1xx_hal_usart.c ****     husart->RxXferCount = 0x00U;
1718:src/stm32f1xx_hal_usart.c **** 
1719:src/stm32f1xx_hal_usart.c ****     /* Reset errorCode */
1720:src/stm32f1xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
1721:src/stm32f1xx_hal_usart.c **** 
1722:src/stm32f1xx_hal_usart.c ****     /* Restore husart->State to Ready */
1723:src/stm32f1xx_hal_usart.c ****     husart->State  = HAL_USART_STATE_READY;
1724:src/stm32f1xx_hal_usart.c **** 
1725:src/stm32f1xx_hal_usart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1726:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
1727:src/stm32f1xx_hal_usart.c ****     /* Call registered Abort Complete Callback */
1728:src/stm32f1xx_hal_usart.c ****     husart->AbortCpltCallback(husart);
1729:src/stm32f1xx_hal_usart.c **** #else
1730:src/stm32f1xx_hal_usart.c ****     /* Call legacy weak Abort Complete Callback */
1731:src/stm32f1xx_hal_usart.c ****     HAL_USART_AbortCpltCallback(husart);
1732:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
1733:src/stm32f1xx_hal_usart.c ****   }
1734:src/stm32f1xx_hal_usart.c **** 
1735:src/stm32f1xx_hal_usart.c ****   return HAL_OK;
1736:src/stm32f1xx_hal_usart.c **** }
1737:src/stm32f1xx_hal_usart.c **** 
1738:src/stm32f1xx_hal_usart.c **** /**
1739:src/stm32f1xx_hal_usart.c ****   * @brief  This function handles USART interrupt request.
1740:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
1741:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
1742:src/stm32f1xx_hal_usart.c ****   * @retval None
1743:src/stm32f1xx_hal_usart.c ****   */
1744:src/stm32f1xx_hal_usart.c **** void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
1745:src/stm32f1xx_hal_usart.c **** {
1746:src/stm32f1xx_hal_usart.c ****   uint32_t isrflags = READ_REG(husart->Instance->SR);
1747:src/stm32f1xx_hal_usart.c ****   uint32_t cr1its   = READ_REG(husart->Instance->CR1);
ARM GAS  /tmp/ccpGcYbE.s 			page 33


1748:src/stm32f1xx_hal_usart.c ****   uint32_t cr3its   = READ_REG(husart->Instance->CR3);
1749:src/stm32f1xx_hal_usart.c ****   uint32_t errorflags = 0x00U;
1750:src/stm32f1xx_hal_usart.c ****   uint32_t dmarequest = 0x00U;
1751:src/stm32f1xx_hal_usart.c **** 
1752:src/stm32f1xx_hal_usart.c ****   /* If no error occurs */
1753:src/stm32f1xx_hal_usart.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
1754:src/stm32f1xx_hal_usart.c ****   if (errorflags == RESET)
1755:src/stm32f1xx_hal_usart.c ****   {
1756:src/stm32f1xx_hal_usart.c ****     /* USART in mode Receiver -------------------------------------------------*/
1757:src/stm32f1xx_hal_usart.c ****     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
1758:src/stm32f1xx_hal_usart.c ****     {
1759:src/stm32f1xx_hal_usart.c ****       if (husart->State == HAL_USART_STATE_BUSY_RX)
1760:src/stm32f1xx_hal_usart.c ****       {
1761:src/stm32f1xx_hal_usart.c ****         USART_Receive_IT(husart);
1762:src/stm32f1xx_hal_usart.c ****       }
1763:src/stm32f1xx_hal_usart.c ****       else
1764:src/stm32f1xx_hal_usart.c ****       {
1765:src/stm32f1xx_hal_usart.c ****         USART_TransmitReceive_IT(husart);
1766:src/stm32f1xx_hal_usart.c ****       }
1767:src/stm32f1xx_hal_usart.c ****       return;
1768:src/stm32f1xx_hal_usart.c ****     }
1769:src/stm32f1xx_hal_usart.c ****   }
1770:src/stm32f1xx_hal_usart.c ****   /* If some errors occur */
1771:src/stm32f1xx_hal_usart.c ****   if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE
1772:src/stm32f1xx_hal_usart.c ****   {
1773:src/stm32f1xx_hal_usart.c ****     /* USART parity error interrupt occurred ----------------------------------*/
1774:src/stm32f1xx_hal_usart.c ****     if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
1775:src/stm32f1xx_hal_usart.c ****     {
1776:src/stm32f1xx_hal_usart.c ****       husart->ErrorCode |= HAL_USART_ERROR_PE;
1777:src/stm32f1xx_hal_usart.c ****     }
1778:src/stm32f1xx_hal_usart.c **** 
1779:src/stm32f1xx_hal_usart.c ****     /* USART noise error interrupt occurred --------------------------------*/
1780:src/stm32f1xx_hal_usart.c ****     if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1781:src/stm32f1xx_hal_usart.c ****     {
1782:src/stm32f1xx_hal_usart.c ****       husart->ErrorCode |= HAL_USART_ERROR_NE;
1783:src/stm32f1xx_hal_usart.c ****     }
1784:src/stm32f1xx_hal_usart.c **** 
1785:src/stm32f1xx_hal_usart.c ****     /* USART frame error interrupt occurred --------------------------------*/
1786:src/stm32f1xx_hal_usart.c ****     if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1787:src/stm32f1xx_hal_usart.c ****     {
1788:src/stm32f1xx_hal_usart.c ****       husart->ErrorCode |= HAL_USART_ERROR_FE;
1789:src/stm32f1xx_hal_usart.c ****     }
1790:src/stm32f1xx_hal_usart.c **** 
1791:src/stm32f1xx_hal_usart.c ****     /* USART Over-Run interrupt occurred -----------------------------------*/
1792:src/stm32f1xx_hal_usart.c ****     if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1793:src/stm32f1xx_hal_usart.c ****     {
1794:src/stm32f1xx_hal_usart.c ****       husart->ErrorCode |= HAL_USART_ERROR_ORE;
1795:src/stm32f1xx_hal_usart.c ****     }
1796:src/stm32f1xx_hal_usart.c **** 
1797:src/stm32f1xx_hal_usart.c ****     if (husart->ErrorCode != HAL_USART_ERROR_NONE)
1798:src/stm32f1xx_hal_usart.c ****     {
1799:src/stm32f1xx_hal_usart.c ****       /* USART in mode Receiver -----------------------------------------------*/
1800:src/stm32f1xx_hal_usart.c ****       if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
1801:src/stm32f1xx_hal_usart.c ****       {
1802:src/stm32f1xx_hal_usart.c ****         if (husart->State == HAL_USART_STATE_BUSY_RX)
1803:src/stm32f1xx_hal_usart.c ****         {
1804:src/stm32f1xx_hal_usart.c ****           USART_Receive_IT(husart);
ARM GAS  /tmp/ccpGcYbE.s 			page 34


1805:src/stm32f1xx_hal_usart.c ****         }
1806:src/stm32f1xx_hal_usart.c ****         else
1807:src/stm32f1xx_hal_usart.c ****         {
1808:src/stm32f1xx_hal_usart.c ****           USART_TransmitReceive_IT(husart);
1809:src/stm32f1xx_hal_usart.c ****         }
1810:src/stm32f1xx_hal_usart.c ****       }
1811:src/stm32f1xx_hal_usart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
1812:src/stm32f1xx_hal_usart.c ****       consider error as blocking */
1813:src/stm32f1xx_hal_usart.c ****       dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
1814:src/stm32f1xx_hal_usart.c ****       if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
1815:src/stm32f1xx_hal_usart.c ****       {
1816:src/stm32f1xx_hal_usart.c ****         /* Set the USART state ready to be able to start again the process,
1817:src/stm32f1xx_hal_usart.c ****         Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
1818:src/stm32f1xx_hal_usart.c ****         USART_EndRxTransfer(husart);
1819:src/stm32f1xx_hal_usart.c **** 
1820:src/stm32f1xx_hal_usart.c ****         /* Disable the USART DMA Rx request if enabled */
1821:src/stm32f1xx_hal_usart.c ****         if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1822:src/stm32f1xx_hal_usart.c ****         {
1823:src/stm32f1xx_hal_usart.c ****           CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
1824:src/stm32f1xx_hal_usart.c **** 
1825:src/stm32f1xx_hal_usart.c ****           /* Abort the USART DMA Rx channel */
1826:src/stm32f1xx_hal_usart.c ****           if (husart->hdmarx != NULL)
1827:src/stm32f1xx_hal_usart.c ****           {
1828:src/stm32f1xx_hal_usart.c ****             /* Set the USART DMA Abort callback :
1829:src/stm32f1xx_hal_usart.c ****             will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
1830:src/stm32f1xx_hal_usart.c ****             husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
1831:src/stm32f1xx_hal_usart.c **** 
1832:src/stm32f1xx_hal_usart.c ****             if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
1833:src/stm32f1xx_hal_usart.c ****             {
1834:src/stm32f1xx_hal_usart.c ****               /* Call Directly XferAbortCallback function in case of error */
1835:src/stm32f1xx_hal_usart.c ****               husart->hdmarx->XferAbortCallback(husart->hdmarx);
1836:src/stm32f1xx_hal_usart.c ****             }
1837:src/stm32f1xx_hal_usart.c ****           }
1838:src/stm32f1xx_hal_usart.c ****           else
1839:src/stm32f1xx_hal_usart.c ****           {
1840:src/stm32f1xx_hal_usart.c ****             /* Call user error callback */
1841:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
1842:src/stm32f1xx_hal_usart.c ****             /* Call registered Error Callback */
1843:src/stm32f1xx_hal_usart.c ****             husart->ErrorCallback(husart);
1844:src/stm32f1xx_hal_usart.c **** #else
1845:src/stm32f1xx_hal_usart.c ****             /* Call legacy weak Error Callback */
1846:src/stm32f1xx_hal_usart.c ****             HAL_USART_ErrorCallback(husart);
1847:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
1848:src/stm32f1xx_hal_usart.c ****           }
1849:src/stm32f1xx_hal_usart.c ****         }
1850:src/stm32f1xx_hal_usart.c ****         else
1851:src/stm32f1xx_hal_usart.c ****         {
1852:src/stm32f1xx_hal_usart.c ****           /* Call user error callback */
1853:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
1854:src/stm32f1xx_hal_usart.c ****           /* Call registered Error Callback */
1855:src/stm32f1xx_hal_usart.c ****           husart->ErrorCallback(husart);
1856:src/stm32f1xx_hal_usart.c **** #else
1857:src/stm32f1xx_hal_usart.c ****           /* Call legacy weak Error Callback */
1858:src/stm32f1xx_hal_usart.c ****           HAL_USART_ErrorCallback(husart);
1859:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
1860:src/stm32f1xx_hal_usart.c ****         }
1861:src/stm32f1xx_hal_usart.c ****       }
ARM GAS  /tmp/ccpGcYbE.s 			page 35


1862:src/stm32f1xx_hal_usart.c ****       else
1863:src/stm32f1xx_hal_usart.c ****       {
1864:src/stm32f1xx_hal_usart.c ****         /* Call user error callback */
1865:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
1866:src/stm32f1xx_hal_usart.c ****         /* Call registered Error Callback */
1867:src/stm32f1xx_hal_usart.c ****         husart->ErrorCallback(husart);
1868:src/stm32f1xx_hal_usart.c **** #else
1869:src/stm32f1xx_hal_usart.c ****         /* Call legacy weak Error Callback */
1870:src/stm32f1xx_hal_usart.c ****         HAL_USART_ErrorCallback(husart);
1871:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
1872:src/stm32f1xx_hal_usart.c ****         husart->ErrorCode = HAL_USART_ERROR_NONE;
1873:src/stm32f1xx_hal_usart.c ****       }
1874:src/stm32f1xx_hal_usart.c ****     }
1875:src/stm32f1xx_hal_usart.c ****     return;
1876:src/stm32f1xx_hal_usart.c ****   }
1877:src/stm32f1xx_hal_usart.c **** 
1878:src/stm32f1xx_hal_usart.c ****   /* USART in mode Transmitter -----------------------------------------------*/
1879:src/stm32f1xx_hal_usart.c ****   if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
1880:src/stm32f1xx_hal_usart.c ****   {
1881:src/stm32f1xx_hal_usart.c ****     if (husart->State == HAL_USART_STATE_BUSY_TX)
1882:src/stm32f1xx_hal_usart.c ****     {
1883:src/stm32f1xx_hal_usart.c ****       USART_Transmit_IT(husart);
1884:src/stm32f1xx_hal_usart.c ****     }
1885:src/stm32f1xx_hal_usart.c ****     else
1886:src/stm32f1xx_hal_usart.c ****     {
1887:src/stm32f1xx_hal_usart.c ****       USART_TransmitReceive_IT(husart);
1888:src/stm32f1xx_hal_usart.c ****     }
1889:src/stm32f1xx_hal_usart.c ****     return;
1890:src/stm32f1xx_hal_usart.c ****   }
1891:src/stm32f1xx_hal_usart.c **** 
1892:src/stm32f1xx_hal_usart.c ****   /* USART in mode Transmitter (transmission end) ----------------------------*/
1893:src/stm32f1xx_hal_usart.c ****   if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
1894:src/stm32f1xx_hal_usart.c ****   {
1895:src/stm32f1xx_hal_usart.c ****     USART_EndTransmit_IT(husart);
1896:src/stm32f1xx_hal_usart.c ****     return;
1897:src/stm32f1xx_hal_usart.c ****   }
1898:src/stm32f1xx_hal_usart.c **** }
1899:src/stm32f1xx_hal_usart.c **** 
1900:src/stm32f1xx_hal_usart.c **** /**
1901:src/stm32f1xx_hal_usart.c ****   * @brief  Tx Transfer completed callbacks.
1902:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
1903:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
1904:src/stm32f1xx_hal_usart.c ****   * @retval None
1905:src/stm32f1xx_hal_usart.c ****   */
1906:src/stm32f1xx_hal_usart.c **** __weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
1907:src/stm32f1xx_hal_usart.c **** {
1908:src/stm32f1xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
1909:src/stm32f1xx_hal_usart.c ****   UNUSED(husart);
1910:src/stm32f1xx_hal_usart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1911:src/stm32f1xx_hal_usart.c ****            the HAL_USART_TxCpltCallback could be implemented in the user file
1912:src/stm32f1xx_hal_usart.c ****    */
1913:src/stm32f1xx_hal_usart.c **** }
1914:src/stm32f1xx_hal_usart.c **** 
1915:src/stm32f1xx_hal_usart.c **** /**
1916:src/stm32f1xx_hal_usart.c ****   * @brief  Tx Half Transfer completed callbacks.
1917:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
1918:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
ARM GAS  /tmp/ccpGcYbE.s 			page 36


1919:src/stm32f1xx_hal_usart.c ****   * @retval None
1920:src/stm32f1xx_hal_usart.c ****   */
1921:src/stm32f1xx_hal_usart.c **** __weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
1922:src/stm32f1xx_hal_usart.c **** {
1923:src/stm32f1xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
1924:src/stm32f1xx_hal_usart.c ****   UNUSED(husart);
1925:src/stm32f1xx_hal_usart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1926:src/stm32f1xx_hal_usart.c ****            the HAL_USART_TxHalfCpltCallback could be implemented in the user file
1927:src/stm32f1xx_hal_usart.c ****    */
1928:src/stm32f1xx_hal_usart.c **** }
1929:src/stm32f1xx_hal_usart.c **** 
1930:src/stm32f1xx_hal_usart.c **** /**
1931:src/stm32f1xx_hal_usart.c ****   * @brief  Rx Transfer completed callbacks.
1932:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
1933:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
1934:src/stm32f1xx_hal_usart.c ****   * @retval None
1935:src/stm32f1xx_hal_usart.c ****   */
1936:src/stm32f1xx_hal_usart.c **** __weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
1937:src/stm32f1xx_hal_usart.c **** {
1938:src/stm32f1xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
1939:src/stm32f1xx_hal_usart.c ****   UNUSED(husart);
1940:src/stm32f1xx_hal_usart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1941:src/stm32f1xx_hal_usart.c ****            the HAL_USART_RxCpltCallback could be implemented in the user file
1942:src/stm32f1xx_hal_usart.c ****    */
1943:src/stm32f1xx_hal_usart.c **** }
1944:src/stm32f1xx_hal_usart.c **** 
1945:src/stm32f1xx_hal_usart.c **** /**
1946:src/stm32f1xx_hal_usart.c ****   * @brief  Rx Half Transfer completed callbacks.
1947:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
1948:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
1949:src/stm32f1xx_hal_usart.c ****   * @retval None
1950:src/stm32f1xx_hal_usart.c ****   */
1951:src/stm32f1xx_hal_usart.c **** __weak void HAL_USART_RxHalfCpltCallback(USART_HandleTypeDef *husart)
1952:src/stm32f1xx_hal_usart.c **** {
1953:src/stm32f1xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
1954:src/stm32f1xx_hal_usart.c ****   UNUSED(husart);
1955:src/stm32f1xx_hal_usart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1956:src/stm32f1xx_hal_usart.c ****            the HAL_USART_RxHalfCpltCallback could be implemented in the user file
1957:src/stm32f1xx_hal_usart.c ****    */
1958:src/stm32f1xx_hal_usart.c **** }
1959:src/stm32f1xx_hal_usart.c **** 
1960:src/stm32f1xx_hal_usart.c **** /**
1961:src/stm32f1xx_hal_usart.c ****   * @brief  Tx/Rx Transfers completed callback for the non-blocking process.
1962:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
1963:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
1964:src/stm32f1xx_hal_usart.c ****   * @retval None
1965:src/stm32f1xx_hal_usart.c ****   */
1966:src/stm32f1xx_hal_usart.c **** __weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
1967:src/stm32f1xx_hal_usart.c **** {
1968:src/stm32f1xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
1969:src/stm32f1xx_hal_usart.c ****   UNUSED(husart);
1970:src/stm32f1xx_hal_usart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1971:src/stm32f1xx_hal_usart.c ****            the HAL_USART_TxRxCpltCallback could be implemented in the user file
1972:src/stm32f1xx_hal_usart.c ****    */
1973:src/stm32f1xx_hal_usart.c **** }
1974:src/stm32f1xx_hal_usart.c **** 
1975:src/stm32f1xx_hal_usart.c **** /**
ARM GAS  /tmp/ccpGcYbE.s 			page 37


1976:src/stm32f1xx_hal_usart.c ****   * @brief  USART error callbacks.
1977:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
1978:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
1979:src/stm32f1xx_hal_usart.c ****   * @retval None
1980:src/stm32f1xx_hal_usart.c ****   */
1981:src/stm32f1xx_hal_usart.c **** __weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
1982:src/stm32f1xx_hal_usart.c **** {
1983:src/stm32f1xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
1984:src/stm32f1xx_hal_usart.c ****   UNUSED(husart);
1985:src/stm32f1xx_hal_usart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1986:src/stm32f1xx_hal_usart.c ****            the HAL_USART_ErrorCallback could be implemented in the user file
1987:src/stm32f1xx_hal_usart.c ****    */
1988:src/stm32f1xx_hal_usart.c **** }
1989:src/stm32f1xx_hal_usart.c **** 
1990:src/stm32f1xx_hal_usart.c **** /**
1991:src/stm32f1xx_hal_usart.c ****   * @brief  USART Abort Complete callback.
1992:src/stm32f1xx_hal_usart.c ****   * @param  husart USART handle.
1993:src/stm32f1xx_hal_usart.c ****   * @retval None
1994:src/stm32f1xx_hal_usart.c ****   */
1995:src/stm32f1xx_hal_usart.c **** __weak void HAL_USART_AbortCpltCallback(USART_HandleTypeDef *husart)
1996:src/stm32f1xx_hal_usart.c **** {
1997:src/stm32f1xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
1998:src/stm32f1xx_hal_usart.c ****   UNUSED(husart);
1999:src/stm32f1xx_hal_usart.c **** 
2000:src/stm32f1xx_hal_usart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2001:src/stm32f1xx_hal_usart.c ****             the HAL_USART_AbortCpltCallback can be implemented in the user file.
2002:src/stm32f1xx_hal_usart.c ****    */
2003:src/stm32f1xx_hal_usart.c **** }
2004:src/stm32f1xx_hal_usart.c **** 
2005:src/stm32f1xx_hal_usart.c **** /**
2006:src/stm32f1xx_hal_usart.c ****   * @}
2007:src/stm32f1xx_hal_usart.c ****   */
2008:src/stm32f1xx_hal_usart.c **** 
2009:src/stm32f1xx_hal_usart.c **** /** @defgroup USART_Exported_Functions_Group3 Peripheral State and Errors functions
2010:src/stm32f1xx_hal_usart.c ****   *  @brief   USART State and Errors functions
2011:src/stm32f1xx_hal_usart.c ****   *
2012:src/stm32f1xx_hal_usart.c **** @verbatim
2013:src/stm32f1xx_hal_usart.c ****   ==============================================================================
2014:src/stm32f1xx_hal_usart.c ****                   ##### Peripheral State and Errors functions #####
2015:src/stm32f1xx_hal_usart.c ****   ==============================================================================
2016:src/stm32f1xx_hal_usart.c ****   [..]
2017:src/stm32f1xx_hal_usart.c ****     This subsection provides a set of functions allowing to return the State of
2018:src/stm32f1xx_hal_usart.c ****     USART communication
2019:src/stm32f1xx_hal_usart.c ****     process, return Peripheral Errors occurred during communication process
2020:src/stm32f1xx_hal_usart.c ****      (+) HAL_USART_GetState() API can be helpful to check in run-time the state
2021:src/stm32f1xx_hal_usart.c ****          of the USART peripheral.
2022:src/stm32f1xx_hal_usart.c ****      (+) HAL_USART_GetError() check in run-time errors that could be occurred during
2023:src/stm32f1xx_hal_usart.c ****          communication.
2024:src/stm32f1xx_hal_usart.c **** @endverbatim
2025:src/stm32f1xx_hal_usart.c ****   * @{
2026:src/stm32f1xx_hal_usart.c ****   */
2027:src/stm32f1xx_hal_usart.c **** 
2028:src/stm32f1xx_hal_usart.c **** /**
2029:src/stm32f1xx_hal_usart.c ****   * @brief  Returns the USART state.
2030:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
2031:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
2032:src/stm32f1xx_hal_usart.c ****   * @retval HAL state
ARM GAS  /tmp/ccpGcYbE.s 			page 38


2033:src/stm32f1xx_hal_usart.c ****   */
2034:src/stm32f1xx_hal_usart.c **** HAL_USART_StateTypeDef HAL_USART_GetState(USART_HandleTypeDef *husart)
2035:src/stm32f1xx_hal_usart.c **** {
2036:src/stm32f1xx_hal_usart.c ****   return husart->State;
2037:src/stm32f1xx_hal_usart.c **** }
2038:src/stm32f1xx_hal_usart.c **** 
2039:src/stm32f1xx_hal_usart.c **** /**
2040:src/stm32f1xx_hal_usart.c ****   * @brief  Return the USART error code
2041:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
2042:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART.
2043:src/stm32f1xx_hal_usart.c ****   * @retval USART Error Code
2044:src/stm32f1xx_hal_usart.c ****   */
2045:src/stm32f1xx_hal_usart.c **** uint32_t HAL_USART_GetError(USART_HandleTypeDef *husart)
2046:src/stm32f1xx_hal_usart.c **** {
2047:src/stm32f1xx_hal_usart.c ****   return husart->ErrorCode;
2048:src/stm32f1xx_hal_usart.c **** }
2049:src/stm32f1xx_hal_usart.c **** 
2050:src/stm32f1xx_hal_usart.c **** /**
2051:src/stm32f1xx_hal_usart.c ****   * @}
2052:src/stm32f1xx_hal_usart.c ****   */
2053:src/stm32f1xx_hal_usart.c **** 
2054:src/stm32f1xx_hal_usart.c **** /** @defgroup USART_Private_Functions USART Private Functions
2055:src/stm32f1xx_hal_usart.c ****  * @{
2056:src/stm32f1xx_hal_usart.c ****  */
2057:src/stm32f1xx_hal_usart.c **** 
2058:src/stm32f1xx_hal_usart.c **** /**
2059:src/stm32f1xx_hal_usart.c ****   * @brief  Initialize the callbacks to their default values.
2060:src/stm32f1xx_hal_usart.c ****   * @param  husart USART handle.
2061:src/stm32f1xx_hal_usart.c ****   * @retval none
2062:src/stm32f1xx_hal_usart.c ****   */
2063:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
2064:src/stm32f1xx_hal_usart.c **** void USART_InitCallbacksToDefault(USART_HandleTypeDef *husart)
2065:src/stm32f1xx_hal_usart.c **** {
2066:src/stm32f1xx_hal_usart.c ****   /* Init the USART Callback settings */
2067:src/stm32f1xx_hal_usart.c ****   husart->TxHalfCpltCallback        = HAL_USART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpl
2068:src/stm32f1xx_hal_usart.c ****   husart->TxCpltCallback            = HAL_USART_TxCpltCallback;            /* Legacy weak TxCpltCal
2069:src/stm32f1xx_hal_usart.c ****   husart->RxHalfCpltCallback        = HAL_USART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpl
2070:src/stm32f1xx_hal_usart.c ****   husart->RxCpltCallback            = HAL_USART_RxCpltCallback;            /* Legacy weak RxCpltCal
2071:src/stm32f1xx_hal_usart.c ****   husart->TxRxCpltCallback          = HAL_USART_TxRxCpltCallback;          /* Legacy weak TxRxCpltC
2072:src/stm32f1xx_hal_usart.c ****   husart->ErrorCallback             = HAL_USART_ErrorCallback;             /* Legacy weak ErrorCall
2073:src/stm32f1xx_hal_usart.c ****   husart->AbortCpltCallback         = HAL_USART_AbortCpltCallback;         /* Legacy weak AbortCplt
2074:src/stm32f1xx_hal_usart.c **** }
2075:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
2076:src/stm32f1xx_hal_usart.c **** 
2077:src/stm32f1xx_hal_usart.c **** /**
2078:src/stm32f1xx_hal_usart.c ****   * @brief  DMA USART transmit process complete callback.
2079:src/stm32f1xx_hal_usart.c ****   * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
2080:src/stm32f1xx_hal_usart.c ****   *              the configuration information for the specified DMA module.
2081:src/stm32f1xx_hal_usart.c ****   * @retval None
2082:src/stm32f1xx_hal_usart.c ****   */
2083:src/stm32f1xx_hal_usart.c **** static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2084:src/stm32f1xx_hal_usart.c **** {
2085:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2086:src/stm32f1xx_hal_usart.c ****   /* DMA Normal mode */
2087:src/stm32f1xx_hal_usart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
2088:src/stm32f1xx_hal_usart.c ****   {
2089:src/stm32f1xx_hal_usart.c ****     husart->TxXferCount = 0U;
ARM GAS  /tmp/ccpGcYbE.s 			page 39


2090:src/stm32f1xx_hal_usart.c ****     if (husart->State == HAL_USART_STATE_BUSY_TX)
2091:src/stm32f1xx_hal_usart.c ****     {
2092:src/stm32f1xx_hal_usart.c ****       /* Disable the DMA transfer for transmit request by resetting the DMAT bit
2093:src/stm32f1xx_hal_usart.c ****          in the USART CR3 register */
2094:src/stm32f1xx_hal_usart.c ****       CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
2095:src/stm32f1xx_hal_usart.c **** 
2096:src/stm32f1xx_hal_usart.c ****       /* Enable the USART Transmit Complete Interrupt */
2097:src/stm32f1xx_hal_usart.c ****       SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
2098:src/stm32f1xx_hal_usart.c ****     }
2099:src/stm32f1xx_hal_usart.c ****   }
2100:src/stm32f1xx_hal_usart.c ****   /* DMA Circular mode */
2101:src/stm32f1xx_hal_usart.c ****   else
2102:src/stm32f1xx_hal_usart.c ****   {
2103:src/stm32f1xx_hal_usart.c ****     if (husart->State == HAL_USART_STATE_BUSY_TX)
2104:src/stm32f1xx_hal_usart.c ****     {
2105:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
2106:src/stm32f1xx_hal_usart.c ****       /* Call registered Tx Complete Callback */
2107:src/stm32f1xx_hal_usart.c ****       husart->TxCpltCallback(husart);
2108:src/stm32f1xx_hal_usart.c **** #else
2109:src/stm32f1xx_hal_usart.c ****       /* Call legacy weak Tx Complete Callback */
2110:src/stm32f1xx_hal_usart.c ****       HAL_USART_TxCpltCallback(husart);
2111:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
2112:src/stm32f1xx_hal_usart.c ****     }
2113:src/stm32f1xx_hal_usart.c ****   }
2114:src/stm32f1xx_hal_usart.c **** }
2115:src/stm32f1xx_hal_usart.c **** 
2116:src/stm32f1xx_hal_usart.c **** /**
2117:src/stm32f1xx_hal_usart.c ****   * @brief  DMA USART transmit process half complete callback
2118:src/stm32f1xx_hal_usart.c ****   * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
2119:src/stm32f1xx_hal_usart.c ****   *              the configuration information for the specified DMA module.
2120:src/stm32f1xx_hal_usart.c ****   * @retval None
2121:src/stm32f1xx_hal_usart.c ****   */
2122:src/stm32f1xx_hal_usart.c **** static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
2123:src/stm32f1xx_hal_usart.c **** {
2124:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2125:src/stm32f1xx_hal_usart.c **** 
2126:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
2127:src/stm32f1xx_hal_usart.c ****   /* Call registered Tx Half Complete Callback */
2128:src/stm32f1xx_hal_usart.c ****   husart->TxHalfCpltCallback(husart);
2129:src/stm32f1xx_hal_usart.c **** #else
2130:src/stm32f1xx_hal_usart.c ****   /* Call legacy weak Tx Half Complete Callback */
2131:src/stm32f1xx_hal_usart.c ****   HAL_USART_TxHalfCpltCallback(husart);
2132:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
2133:src/stm32f1xx_hal_usart.c **** }
2134:src/stm32f1xx_hal_usart.c **** 
2135:src/stm32f1xx_hal_usart.c **** /**
2136:src/stm32f1xx_hal_usart.c ****   * @brief  DMA USART receive process complete callback.
2137:src/stm32f1xx_hal_usart.c ****   * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
2138:src/stm32f1xx_hal_usart.c ****   *              the configuration information for the specified DMA module.
2139:src/stm32f1xx_hal_usart.c ****   * @retval None
2140:src/stm32f1xx_hal_usart.c ****   */
2141:src/stm32f1xx_hal_usart.c **** static void USART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
2142:src/stm32f1xx_hal_usart.c **** {
2143:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2144:src/stm32f1xx_hal_usart.c ****   /* DMA Normal mode */
2145:src/stm32f1xx_hal_usart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
2146:src/stm32f1xx_hal_usart.c ****   {
ARM GAS  /tmp/ccpGcYbE.s 			page 40


2147:src/stm32f1xx_hal_usart.c ****     husart->RxXferCount = 0x00U;
2148:src/stm32f1xx_hal_usart.c **** 
2149:src/stm32f1xx_hal_usart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2150:src/stm32f1xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
2151:src/stm32f1xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
2152:src/stm32f1xx_hal_usart.c **** 
2153:src/stm32f1xx_hal_usart.c ****     /* Disable the DMA transfer for the Transmit/receiver request by clearing the DMAT/DMAR bit
2154:src/stm32f1xx_hal_usart.c ****          in the USART CR3 register */
2155:src/stm32f1xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
2156:src/stm32f1xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
2157:src/stm32f1xx_hal_usart.c **** 
2158:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_READY;
2159:src/stm32f1xx_hal_usart.c **** 
2160:src/stm32f1xx_hal_usart.c ****     /* The USART state is HAL_USART_STATE_BUSY_RX */
2161:src/stm32f1xx_hal_usart.c ****     if (husart->State == HAL_USART_STATE_BUSY_RX)
2162:src/stm32f1xx_hal_usart.c ****     {
2163:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
2164:src/stm32f1xx_hal_usart.c ****       /* Call registered Rx Complete Callback */
2165:src/stm32f1xx_hal_usart.c ****       husart->RxCpltCallback(husart);
2166:src/stm32f1xx_hal_usart.c **** #else
2167:src/stm32f1xx_hal_usart.c ****       /* Call legacy weak Rx Complete Callback */
2168:src/stm32f1xx_hal_usart.c ****       HAL_USART_RxCpltCallback(husart);
2169:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
2170:src/stm32f1xx_hal_usart.c ****     }
2171:src/stm32f1xx_hal_usart.c ****     /* The USART state is HAL_USART_STATE_BUSY_TX_RX */
2172:src/stm32f1xx_hal_usart.c ****     else
2173:src/stm32f1xx_hal_usart.c ****     {
2174:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
2175:src/stm32f1xx_hal_usart.c ****       /* Call registered Tx Rx Complete Callback */
2176:src/stm32f1xx_hal_usart.c ****       husart->TxRxCpltCallback(husart);
2177:src/stm32f1xx_hal_usart.c **** #else
2178:src/stm32f1xx_hal_usart.c ****       /* Call legacy weak Tx Rx Complete Callback */
2179:src/stm32f1xx_hal_usart.c ****       HAL_USART_TxRxCpltCallback(husart);
2180:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
2181:src/stm32f1xx_hal_usart.c ****     }
2182:src/stm32f1xx_hal_usart.c ****   }
2183:src/stm32f1xx_hal_usart.c ****   /* DMA circular mode */
2184:src/stm32f1xx_hal_usart.c ****   else
2185:src/stm32f1xx_hal_usart.c ****   {
2186:src/stm32f1xx_hal_usart.c ****     if (husart->State == HAL_USART_STATE_BUSY_RX)
2187:src/stm32f1xx_hal_usart.c ****     {
2188:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
2189:src/stm32f1xx_hal_usart.c ****       /* Call registered Rx Complete Callback */
2190:src/stm32f1xx_hal_usart.c ****       husart->RxCpltCallback(husart);
2191:src/stm32f1xx_hal_usart.c **** #else
2192:src/stm32f1xx_hal_usart.c ****       /* Call legacy weak Rx Complete Callback */
2193:src/stm32f1xx_hal_usart.c ****       HAL_USART_RxCpltCallback(husart);
2194:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
2195:src/stm32f1xx_hal_usart.c ****     }
2196:src/stm32f1xx_hal_usart.c ****     /* The USART state is HAL_USART_STATE_BUSY_TX_RX */
2197:src/stm32f1xx_hal_usart.c ****     else
2198:src/stm32f1xx_hal_usart.c ****     {
2199:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
2200:src/stm32f1xx_hal_usart.c ****       /* Call registered Tx Rx Complete Callback */
2201:src/stm32f1xx_hal_usart.c ****       husart->TxRxCpltCallback(husart);
2202:src/stm32f1xx_hal_usart.c **** #else
2203:src/stm32f1xx_hal_usart.c ****       /* Call legacy weak Tx Rx Complete Callback */
ARM GAS  /tmp/ccpGcYbE.s 			page 41


2204:src/stm32f1xx_hal_usart.c ****       HAL_USART_TxRxCpltCallback(husart);
2205:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
2206:src/stm32f1xx_hal_usart.c ****     }
2207:src/stm32f1xx_hal_usart.c ****   }
2208:src/stm32f1xx_hal_usart.c **** }
2209:src/stm32f1xx_hal_usart.c **** 
2210:src/stm32f1xx_hal_usart.c **** /**
2211:src/stm32f1xx_hal_usart.c ****   * @brief  DMA USART receive process half complete callback
2212:src/stm32f1xx_hal_usart.c ****   * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
2213:src/stm32f1xx_hal_usart.c ****   *              the configuration information for the specified DMA module.
2214:src/stm32f1xx_hal_usart.c ****   * @retval None
2215:src/stm32f1xx_hal_usart.c ****   */
2216:src/stm32f1xx_hal_usart.c **** static void USART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
2217:src/stm32f1xx_hal_usart.c **** {
2218:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2219:src/stm32f1xx_hal_usart.c **** 
2220:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
2221:src/stm32f1xx_hal_usart.c ****   /* Call registered Rx Half Complete Callback */
2222:src/stm32f1xx_hal_usart.c ****   husart->RxHalfCpltCallback(husart);
2223:src/stm32f1xx_hal_usart.c **** #else
2224:src/stm32f1xx_hal_usart.c ****   /* Call legacy weak Rx Half Complete Callback */
2225:src/stm32f1xx_hal_usart.c ****   HAL_USART_RxHalfCpltCallback(husart);
2226:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
2227:src/stm32f1xx_hal_usart.c **** }
2228:src/stm32f1xx_hal_usart.c **** 
2229:src/stm32f1xx_hal_usart.c **** /**
2230:src/stm32f1xx_hal_usart.c ****   * @brief  DMA USART communication error callback.
2231:src/stm32f1xx_hal_usart.c ****   * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
2232:src/stm32f1xx_hal_usart.c ****   *              the configuration information for the specified DMA module.
2233:src/stm32f1xx_hal_usart.c ****   * @retval None
2234:src/stm32f1xx_hal_usart.c ****   */
2235:src/stm32f1xx_hal_usart.c **** static void USART_DMAError(DMA_HandleTypeDef *hdma)
2236:src/stm32f1xx_hal_usart.c **** {
2237:src/stm32f1xx_hal_usart.c ****   uint32_t dmarequest = 0x00U;
2238:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2239:src/stm32f1xx_hal_usart.c ****   husart->RxXferCount = 0x00U;
2240:src/stm32f1xx_hal_usart.c ****   husart->TxXferCount = 0x00U;
2241:src/stm32f1xx_hal_usart.c **** 
2242:src/stm32f1xx_hal_usart.c ****   /* Stop USART DMA Tx request if ongoing */
2243:src/stm32f1xx_hal_usart.c ****   dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAT);
2244:src/stm32f1xx_hal_usart.c ****   if ((husart->State == HAL_USART_STATE_BUSY_TX) && dmarequest)
2245:src/stm32f1xx_hal_usart.c ****   {
2246:src/stm32f1xx_hal_usart.c ****     USART_EndTxTransfer(husart);
2247:src/stm32f1xx_hal_usart.c ****   }
2248:src/stm32f1xx_hal_usart.c **** 
2249:src/stm32f1xx_hal_usart.c ****   /* Stop USART DMA Rx request if ongoing */
2250:src/stm32f1xx_hal_usart.c ****   dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
2251:src/stm32f1xx_hal_usart.c ****   if ((husart->State == HAL_USART_STATE_BUSY_RX) && dmarequest)
2252:src/stm32f1xx_hal_usart.c ****   {
2253:src/stm32f1xx_hal_usart.c ****     USART_EndRxTransfer(husart);
2254:src/stm32f1xx_hal_usart.c ****   }
2255:src/stm32f1xx_hal_usart.c **** 
2256:src/stm32f1xx_hal_usart.c ****   husart->ErrorCode |= HAL_USART_ERROR_DMA;
2257:src/stm32f1xx_hal_usart.c ****   husart->State = HAL_USART_STATE_READY;
2258:src/stm32f1xx_hal_usart.c **** 
2259:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
2260:src/stm32f1xx_hal_usart.c ****   /* Call registered Error Callback */
ARM GAS  /tmp/ccpGcYbE.s 			page 42


2261:src/stm32f1xx_hal_usart.c ****   husart->ErrorCallback(husart);
2262:src/stm32f1xx_hal_usart.c **** #else
2263:src/stm32f1xx_hal_usart.c ****   /* Call legacy weak Error Callback */
2264:src/stm32f1xx_hal_usart.c ****   HAL_USART_ErrorCallback(husart);
2265:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
2266:src/stm32f1xx_hal_usart.c **** }
2267:src/stm32f1xx_hal_usart.c **** 
2268:src/stm32f1xx_hal_usart.c **** /**
2269:src/stm32f1xx_hal_usart.c ****   * @brief  This function handles USART Communication Timeout.
2270:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
2271:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
2272:src/stm32f1xx_hal_usart.c ****   * @param  Flag specifies the USART flag to check.
2273:src/stm32f1xx_hal_usart.c ****   * @param  Status The new Flag status (SET or RESET).
2274:src/stm32f1xx_hal_usart.c ****   * @param  Tickstart Tick start value.
2275:src/stm32f1xx_hal_usart.c ****   * @param  Timeout Timeout duration.
2276:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
2277:src/stm32f1xx_hal_usart.c ****   */
2278:src/stm32f1xx_hal_usart.c **** static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, F
2279:src/stm32f1xx_hal_usart.c **** {
2280:src/stm32f1xx_hal_usart.c ****   /* Wait until flag is set */
2281:src/stm32f1xx_hal_usart.c ****   while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
2282:src/stm32f1xx_hal_usart.c ****   {
2283:src/stm32f1xx_hal_usart.c ****     /* Check for the Timeout */
2284:src/stm32f1xx_hal_usart.c ****     if (Timeout != HAL_MAX_DELAY)
2285:src/stm32f1xx_hal_usart.c ****     {
2286:src/stm32f1xx_hal_usart.c ****       if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
2287:src/stm32f1xx_hal_usart.c ****       {
2288:src/stm32f1xx_hal_usart.c ****         /* Disable the USART Transmit Complete Interrupt */
2289:src/stm32f1xx_hal_usart.c ****         CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
2290:src/stm32f1xx_hal_usart.c **** 
2291:src/stm32f1xx_hal_usart.c ****         /* Disable the USART RXNE Interrupt */
2292:src/stm32f1xx_hal_usart.c ****         CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
2293:src/stm32f1xx_hal_usart.c **** 
2294:src/stm32f1xx_hal_usart.c ****         /* Disable the USART Parity Error Interrupt */
2295:src/stm32f1xx_hal_usart.c ****         CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
2296:src/stm32f1xx_hal_usart.c **** 
2297:src/stm32f1xx_hal_usart.c ****         /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
2298:src/stm32f1xx_hal_usart.c ****         CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
2299:src/stm32f1xx_hal_usart.c **** 
2300:src/stm32f1xx_hal_usart.c ****         husart->State = HAL_USART_STATE_READY;
2301:src/stm32f1xx_hal_usart.c **** 
2302:src/stm32f1xx_hal_usart.c ****         /* Process Unlocked */
2303:src/stm32f1xx_hal_usart.c ****         __HAL_UNLOCK(husart);
2304:src/stm32f1xx_hal_usart.c **** 
2305:src/stm32f1xx_hal_usart.c ****         return HAL_TIMEOUT;
2306:src/stm32f1xx_hal_usart.c ****       }
2307:src/stm32f1xx_hal_usart.c ****     }
2308:src/stm32f1xx_hal_usart.c ****   }
2309:src/stm32f1xx_hal_usart.c ****   return HAL_OK;
2310:src/stm32f1xx_hal_usart.c **** }
2311:src/stm32f1xx_hal_usart.c **** 
2312:src/stm32f1xx_hal_usart.c **** /**
2313:src/stm32f1xx_hal_usart.c ****   * @brief  End ongoing Tx transfer on USART peripheral (following error detection or Transmit comp
2314:src/stm32f1xx_hal_usart.c ****   * @param  husart USART handle.
2315:src/stm32f1xx_hal_usart.c ****   * @retval None
2316:src/stm32f1xx_hal_usart.c ****   */
2317:src/stm32f1xx_hal_usart.c **** static void USART_EndTxTransfer(USART_HandleTypeDef *husart)
ARM GAS  /tmp/ccpGcYbE.s 			page 43


2318:src/stm32f1xx_hal_usart.c **** {
2319:src/stm32f1xx_hal_usart.c ****   /* Disable TXEIE and TCIE interrupts */
2320:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
2321:src/stm32f1xx_hal_usart.c **** 
2322:src/stm32f1xx_hal_usart.c ****   /* At end of Tx process, restore husart->State to Ready */
2323:src/stm32f1xx_hal_usart.c ****   husart->State = HAL_USART_STATE_READY;
2324:src/stm32f1xx_hal_usart.c **** }
2325:src/stm32f1xx_hal_usart.c **** 
2326:src/stm32f1xx_hal_usart.c **** /**
2327:src/stm32f1xx_hal_usart.c ****   * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception com
2328:src/stm32f1xx_hal_usart.c ****   * @param  husart USART handle.
2329:src/stm32f1xx_hal_usart.c ****   * @retval None
2330:src/stm32f1xx_hal_usart.c ****   */
2331:src/stm32f1xx_hal_usart.c **** static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
2332:src/stm32f1xx_hal_usart.c **** {
  78              		.loc 1 2332 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83              	.LVL0:
2333:src/stm32f1xx_hal_usart.c ****   /* Disable RXNE, PE and ERR interrupts */
2334:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  84              		.loc 1 2334 0
  85 0000 0368     		ldr	r3, [r0]	@ _3, husart_2(D)->Instance
  86 0002 DA68     		ldr	r2, [r3, #12]	@ _4, _3->CR1
  87 0004 22F49072 		bic	r2, r2, #288	@ _5, _4,
  88 0008 DA60     		str	r2, [r3, #12]	@ _5, _3->CR1
2335:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
  89              		.loc 1 2335 0
  90 000a 5A69     		ldr	r2, [r3, #20]	@ _7, _3->CR3
  91 000c 22F00102 		bic	r2, r2, #1	@ _8, _7,
  92 0010 5A61     		str	r2, [r3, #20]	@ _8, _3->CR3
2336:src/stm32f1xx_hal_usart.c **** 
2337:src/stm32f1xx_hal_usart.c ****   /* At end of Rx process, restore husart->State to Ready */
2338:src/stm32f1xx_hal_usart.c ****   husart->State = HAL_USART_STATE_READY;
  93              		.loc 1 2338 0
  94 0012 0123     		movs	r3, #1	@ tmp116,
  95 0014 80F83D30 		strb	r3, [r0, #61]	@ tmp116, husart_2(D)->State
  96 0018 7047     		bx	lr	@
  97              		.cfi_endproc
  98              	.LFE100:
  99              		.size	USART_EndRxTransfer, .-USART_EndRxTransfer
 100              		.align	1
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu softvfp
 105              		.type	USART_WaitOnFlagUntilTimeout.constprop.4, %function
 106              	USART_WaitOnFlagUntilTimeout.constprop.4:
 107              	.LFB128:
2278:src/stm32f1xx_hal_usart.c **** {
 108              		.loc 1 2278 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              	.LVL1:
ARM GAS  /tmp/ccpGcYbE.s 			page 44


 113 001a F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 114              	.LCFI0:
 115              		.cfi_def_cfa_offset 24
 116              		.cfi_offset 3, -24
 117              		.cfi_offset 4, -20
 118              		.cfi_offset 5, -16
 119              		.cfi_offset 6, -12
 120              		.cfi_offset 7, -8
 121              		.cfi_offset 14, -4
 122 001c 0446     		mov	r4, r0	@ husart, husart
 123 001e 0E46     		mov	r6, r1	@ Flag, Flag
 124 0020 1746     		mov	r7, r2	@ Tickstart, Tickstart
 125 0022 1D46     		mov	r5, r3	@ Timeout, Timeout
 126              	.LVL2:
 127              	.L3:
2281:src/stm32f1xx_hal_usart.c ****   {
 128              		.loc 1 2281 0
 129 0024 2168     		ldr	r1, [r4]	@ _7, husart_5(D)->Instance
 130              	.L4:
 131 0026 0B68     		ldr	r3, [r1]	@ _8, _7->SR
 132 0028 36EA0303 		bics	r3, r6, r3	@ tmp136, Flag, _8
 133 002c 01D1     		bne	.L8	@,
2309:src/stm32f1xx_hal_usart.c **** }
 134              		.loc 1 2309 0
 135 002e 0020     		movs	r0, #0	@ <retval>,
2310:src/stm32f1xx_hal_usart.c **** 
 136              		.loc 1 2310 0
 137 0030 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 138              	.LVL3:
 139              	.L8:
2284:src/stm32f1xx_hal_usart.c ****     {
 140              		.loc 1 2284 0
 141 0032 6B1C     		adds	r3, r5, #1	@, Timeout,
 142 0034 F7D0     		beq	.L4	@,
2286:src/stm32f1xx_hal_usart.c ****       {
 143              		.loc 1 2286 0
 144 0036 C5B9     		cbnz	r5, .L5	@ Timeout,
 145              	.L7:
 146              	.LVL4:
 147              	.LBB4:
 148              	.LBB5:
2289:src/stm32f1xx_hal_usart.c **** 
 149              		.loc 1 2289 0
 150 0038 2368     		ldr	r3, [r4]	@ _21, husart_5(D)->Instance
2303:src/stm32f1xx_hal_usart.c **** 
 151              		.loc 1 2303 0
 152 003a 0320     		movs	r0, #3	@ <retval>,
2289:src/stm32f1xx_hal_usart.c **** 
 153              		.loc 1 2289 0
 154 003c DA68     		ldr	r2, [r3, #12]	@ _22, _21->CR1
 155 003e 22F08002 		bic	r2, r2, #128	@ _23, _22,
 156 0042 DA60     		str	r2, [r3, #12]	@ _23, _21->CR1
2292:src/stm32f1xx_hal_usart.c **** 
 157              		.loc 1 2292 0
 158 0044 DA68     		ldr	r2, [r3, #12]	@ _24, _21->CR1
 159 0046 22F02002 		bic	r2, r2, #32	@ _25, _24,
 160 004a DA60     		str	r2, [r3, #12]	@ _25, _21->CR1
ARM GAS  /tmp/ccpGcYbE.s 			page 45


2295:src/stm32f1xx_hal_usart.c **** 
 161              		.loc 1 2295 0
 162 004c DA68     		ldr	r2, [r3, #12]	@ _26, _21->CR1
 163 004e 22F48072 		bic	r2, r2, #256	@ _27, _26,
 164 0052 DA60     		str	r2, [r3, #12]	@ _27, _21->CR1
2298:src/stm32f1xx_hal_usart.c **** 
 165              		.loc 1 2298 0
 166 0054 5A69     		ldr	r2, [r3, #20]	@ _28, _21->CR3
 167 0056 22F00102 		bic	r2, r2, #1	@ _29, _28,
 168 005a 5A61     		str	r2, [r3, #20]	@ _29, _21->CR3
2300:src/stm32f1xx_hal_usart.c **** 
 169              		.loc 1 2300 0
 170 005c 0123     		movs	r3, #1	@ tmp129,
 171 005e 84F83D30 		strb	r3, [r4, #61]	@ tmp129, husart_5(D)->State
2303:src/stm32f1xx_hal_usart.c **** 
 172              		.loc 1 2303 0
 173 0062 0023     		movs	r3, #0	@ tmp131,
 174 0064 84F83C30 		strb	r3, [r4, #60]	@ tmp131, husart_5(D)->Lock
 175              	.LVL5:
 176 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 177              	.LVL6:
 178              	.L5:
 179              	.LBE5:
 180              	.LBE4:
2286:src/stm32f1xx_hal_usart.c ****       {
 181              		.loc 1 2286 0
 182 006a FFF7FEFF 		bl	HAL_GetTick	@
 183              	.LVL7:
 184 006e C01B     		subs	r0, r0, r7	@ tmp133,, Tickstart
 185 0070 8542     		cmp	r5, r0	@ Timeout, tmp133
 186 0072 D7D2     		bcs	.L3	@,
 187 0074 E0E7     		b	.L7	@
 188              		.cfi_endproc
 189              	.LFE128:
 190              		.size	USART_WaitOnFlagUntilTimeout.constprop.4, .-USART_WaitOnFlagUntilTimeout.constprop.4
 191              		.align	1
 192              		.weak	HAL_USART_MspInit
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu softvfp
 197              		.type	HAL_USART_MspInit, %function
 198              	HAL_USART_MspInit:
 199              	.LFB127:
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              		@ link register save eliminated.
 204 0076 7047     		bx	lr	@
 205              		.cfi_endproc
 206              	.LFE127:
 207              		.size	HAL_USART_MspInit, .-HAL_USART_MspInit
 208              		.align	1
 209              		.global	HAL_USART_Init
 210              		.syntax unified
 211              		.thumb
 212              		.thumb_func
ARM GAS  /tmp/ccpGcYbE.s 			page 46


 213              		.fpu softvfp
 214              		.type	HAL_USART_Init, %function
 215              	HAL_USART_Init:
 216              	.LFB65:
 296:src/stm32f1xx_hal_usart.c ****   /* Check the USART handle allocation */
 217              		.loc 1 296 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221              	.LVL8:
 296:src/stm32f1xx_hal_usart.c ****   /* Check the USART handle allocation */
 222              		.loc 1 296 0
 223 0078 70B5     		push	{r4, r5, r6, lr}	@
 224              	.LCFI1:
 225              		.cfi_def_cfa_offset 16
 226              		.cfi_offset 4, -16
 227              		.cfi_offset 5, -12
 228              		.cfi_offset 6, -8
 229              		.cfi_offset 14, -4
 298:src/stm32f1xx_hal_usart.c ****   {
 230              		.loc 1 298 0
 231 007a 0546     		mov	r5, r0	@ husart, husart
 232 007c 0028     		cmp	r0, #0	@ husart
 233 007e 62D0     		beq	.L17	@
 306:src/stm32f1xx_hal_usart.c ****   {
 234              		.loc 1 306 0
 235 0080 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2	@ husart_4(D)->State, husart_4(D)->State
 236 0084 03F0FF02 		and	r2, r3, #255	@ _6, husart_4(D)->State,
 237 0088 1BB9     		cbnz	r3, .L14	@ husart_4(D)->State,
 309:src/stm32f1xx_hal_usart.c **** 
 238              		.loc 1 309 0
 239 008a 80F83C20 		strb	r2, [r0, #60]	@ _6, husart_4(D)->Lock
 323:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 240              		.loc 1 323 0
 241 008e FFF7FEFF 		bl	HAL_USART_MspInit	@
 242              	.LVL9:
 243              	.L14:
 327:src/stm32f1xx_hal_usart.c **** 
 244              		.loc 1 327 0
 245 0092 0223     		movs	r3, #2	@ tmp183,
 246              	.LBB8:
 247              	.LBB9:
2339:src/stm32f1xx_hal_usart.c **** }
2340:src/stm32f1xx_hal_usart.c **** 
2341:src/stm32f1xx_hal_usart.c **** /**
2342:src/stm32f1xx_hal_usart.c ****   * @brief  DMA USART communication abort callback, when initiated by HAL services on Error
2343:src/stm32f1xx_hal_usart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
2344:src/stm32f1xx_hal_usart.c ****   * @param  hdma DMA handle.
2345:src/stm32f1xx_hal_usart.c ****   * @retval None
2346:src/stm32f1xx_hal_usart.c ****   */
2347:src/stm32f1xx_hal_usart.c **** static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
2348:src/stm32f1xx_hal_usart.c **** {
2349:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2350:src/stm32f1xx_hal_usart.c ****   husart->RxXferCount = 0x00U;
2351:src/stm32f1xx_hal_usart.c ****   husart->TxXferCount = 0x00U;
2352:src/stm32f1xx_hal_usart.c **** 
2353:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
ARM GAS  /tmp/ccpGcYbE.s 			page 47


2354:src/stm32f1xx_hal_usart.c ****   /* Call registered Error Callback */
2355:src/stm32f1xx_hal_usart.c ****   husart->ErrorCallback(husart);
2356:src/stm32f1xx_hal_usart.c **** #else
2357:src/stm32f1xx_hal_usart.c ****   /* Call legacy weak Error Callback */
2358:src/stm32f1xx_hal_usart.c ****   HAL_USART_ErrorCallback(husart);
2359:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
2360:src/stm32f1xx_hal_usart.c **** }
2361:src/stm32f1xx_hal_usart.c **** 
2362:src/stm32f1xx_hal_usart.c **** /**
2363:src/stm32f1xx_hal_usart.c ****   * @brief  DMA USART Tx communication abort callback, when initiated by user
2364:src/stm32f1xx_hal_usart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
2365:src/stm32f1xx_hal_usart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2366:src/stm32f1xx_hal_usart.c ****   *         Abort still ongoing for Rx DMA Handle.
2367:src/stm32f1xx_hal_usart.c ****   * @param  hdma DMA handle.
2368:src/stm32f1xx_hal_usart.c ****   * @retval None
2369:src/stm32f1xx_hal_usart.c ****   */
2370:src/stm32f1xx_hal_usart.c **** static void USART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
2371:src/stm32f1xx_hal_usart.c **** {
2372:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2373:src/stm32f1xx_hal_usart.c **** 
2374:src/stm32f1xx_hal_usart.c ****   husart->hdmatx->XferAbortCallback = NULL;
2375:src/stm32f1xx_hal_usart.c **** 
2376:src/stm32f1xx_hal_usart.c ****   /* Check if an Abort process is still ongoing */
2377:src/stm32f1xx_hal_usart.c ****   if (husart->hdmarx != NULL)
2378:src/stm32f1xx_hal_usart.c ****   {
2379:src/stm32f1xx_hal_usart.c ****     if (husart->hdmarx->XferAbortCallback != NULL)
2380:src/stm32f1xx_hal_usart.c ****     {
2381:src/stm32f1xx_hal_usart.c ****       return;
2382:src/stm32f1xx_hal_usart.c ****     }
2383:src/stm32f1xx_hal_usart.c ****   }
2384:src/stm32f1xx_hal_usart.c **** 
2385:src/stm32f1xx_hal_usart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2386:src/stm32f1xx_hal_usart.c ****   husart->TxXferCount = 0x00U;
2387:src/stm32f1xx_hal_usart.c ****   husart->RxXferCount = 0x00U;
2388:src/stm32f1xx_hal_usart.c **** 
2389:src/stm32f1xx_hal_usart.c ****   /* Reset errorCode */
2390:src/stm32f1xx_hal_usart.c ****   husart->ErrorCode = HAL_USART_ERROR_NONE;
2391:src/stm32f1xx_hal_usart.c **** 
2392:src/stm32f1xx_hal_usart.c ****   /* Restore husart->State to Ready */
2393:src/stm32f1xx_hal_usart.c ****   husart->State  = HAL_USART_STATE_READY;
2394:src/stm32f1xx_hal_usart.c **** 
2395:src/stm32f1xx_hal_usart.c ****   /* Call user Abort complete callback */
2396:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
2397:src/stm32f1xx_hal_usart.c ****   /* Call registered Abort Complete Callback */
2398:src/stm32f1xx_hal_usart.c ****   husart->AbortCpltCallback(husart);
2399:src/stm32f1xx_hal_usart.c **** #else
2400:src/stm32f1xx_hal_usart.c ****   /* Call legacy weak Abort Complete Callback */
2401:src/stm32f1xx_hal_usart.c ****   HAL_USART_AbortCpltCallback(husart);
2402:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
2403:src/stm32f1xx_hal_usart.c **** }
2404:src/stm32f1xx_hal_usart.c **** 
2405:src/stm32f1xx_hal_usart.c **** /**
2406:src/stm32f1xx_hal_usart.c ****   * @brief  DMA USART Rx communication abort callback, when initiated by user
2407:src/stm32f1xx_hal_usart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
2408:src/stm32f1xx_hal_usart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2409:src/stm32f1xx_hal_usart.c ****   *         Abort still ongoing for Tx DMA Handle.
2410:src/stm32f1xx_hal_usart.c ****   * @param  hdma DMA handle.
ARM GAS  /tmp/ccpGcYbE.s 			page 48


2411:src/stm32f1xx_hal_usart.c ****   * @retval None
2412:src/stm32f1xx_hal_usart.c ****   */
2413:src/stm32f1xx_hal_usart.c **** static void USART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
2414:src/stm32f1xx_hal_usart.c **** {
2415:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2416:src/stm32f1xx_hal_usart.c **** 
2417:src/stm32f1xx_hal_usart.c ****   husart->hdmarx->XferAbortCallback = NULL;
2418:src/stm32f1xx_hal_usart.c **** 
2419:src/stm32f1xx_hal_usart.c ****   /* Check if an Abort process is still ongoing */
2420:src/stm32f1xx_hal_usart.c ****   if (husart->hdmatx != NULL)
2421:src/stm32f1xx_hal_usart.c ****   {
2422:src/stm32f1xx_hal_usart.c ****     if (husart->hdmatx->XferAbortCallback != NULL)
2423:src/stm32f1xx_hal_usart.c ****     {
2424:src/stm32f1xx_hal_usart.c ****       return;
2425:src/stm32f1xx_hal_usart.c ****     }
2426:src/stm32f1xx_hal_usart.c ****   }
2427:src/stm32f1xx_hal_usart.c **** 
2428:src/stm32f1xx_hal_usart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2429:src/stm32f1xx_hal_usart.c ****   husart->TxXferCount = 0x00U;
2430:src/stm32f1xx_hal_usart.c ****   husart->RxXferCount = 0x00U;
2431:src/stm32f1xx_hal_usart.c **** 
2432:src/stm32f1xx_hal_usart.c ****   /* Reset errorCode */
2433:src/stm32f1xx_hal_usart.c ****   husart->ErrorCode = HAL_USART_ERROR_NONE;
2434:src/stm32f1xx_hal_usart.c **** 
2435:src/stm32f1xx_hal_usart.c ****   /* Restore husart->State to Ready */
2436:src/stm32f1xx_hal_usart.c ****   husart->State  = HAL_USART_STATE_READY;
2437:src/stm32f1xx_hal_usart.c **** 
2438:src/stm32f1xx_hal_usart.c ****   /* Call user Abort complete callback */
2439:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
2440:src/stm32f1xx_hal_usart.c ****   /* Call registered Abort Complete Callback */
2441:src/stm32f1xx_hal_usart.c ****   husart->AbortCpltCallback(husart);
2442:src/stm32f1xx_hal_usart.c **** #else
2443:src/stm32f1xx_hal_usart.c ****   /* Call legacy weak Abort Complete Callback */
2444:src/stm32f1xx_hal_usart.c ****   HAL_USART_AbortCpltCallback(husart);
2445:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
2446:src/stm32f1xx_hal_usart.c **** }
2447:src/stm32f1xx_hal_usart.c **** 
2448:src/stm32f1xx_hal_usart.c **** /**
2449:src/stm32f1xx_hal_usart.c ****   * @brief  Simplex Send an amount of data in non-blocking mode.
2450:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
2451:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
2452:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
2453:src/stm32f1xx_hal_usart.c ****   * @note   The USART errors are not managed to avoid the overrun error.
2454:src/stm32f1xx_hal_usart.c ****   */
2455:src/stm32f1xx_hal_usart.c **** static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
2456:src/stm32f1xx_hal_usart.c **** {
2457:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
2458:src/stm32f1xx_hal_usart.c **** 
2459:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_BUSY_TX)
2460:src/stm32f1xx_hal_usart.c ****   {
2461:src/stm32f1xx_hal_usart.c ****     if (husart->Init.WordLength == USART_WORDLENGTH_9B)
2462:src/stm32f1xx_hal_usart.c ****     {
2463:src/stm32f1xx_hal_usart.c ****       tmp = (uint16_t *) husart->pTxBuffPtr;
2464:src/stm32f1xx_hal_usart.c ****       husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
2465:src/stm32f1xx_hal_usart.c ****       if (husart->Init.Parity == USART_PARITY_NONE)
2466:src/stm32f1xx_hal_usart.c ****       {
2467:src/stm32f1xx_hal_usart.c ****         husart->pTxBuffPtr += 2U;
ARM GAS  /tmp/ccpGcYbE.s 			page 49


2468:src/stm32f1xx_hal_usart.c ****       }
2469:src/stm32f1xx_hal_usart.c ****       else
2470:src/stm32f1xx_hal_usart.c ****       {
2471:src/stm32f1xx_hal_usart.c ****         husart->pTxBuffPtr += 1U;
2472:src/stm32f1xx_hal_usart.c ****       }
2473:src/stm32f1xx_hal_usart.c ****     }
2474:src/stm32f1xx_hal_usart.c ****     else
2475:src/stm32f1xx_hal_usart.c ****     {
2476:src/stm32f1xx_hal_usart.c ****       husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
2477:src/stm32f1xx_hal_usart.c ****     }
2478:src/stm32f1xx_hal_usart.c **** 
2479:src/stm32f1xx_hal_usart.c ****     if (--husart->TxXferCount == 0U)
2480:src/stm32f1xx_hal_usart.c ****     {
2481:src/stm32f1xx_hal_usart.c ****       /* Disable the USART Transmit data register empty Interrupt */
2482:src/stm32f1xx_hal_usart.c ****       CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
2483:src/stm32f1xx_hal_usart.c **** 
2484:src/stm32f1xx_hal_usart.c ****       /* Enable the USART Transmit Complete Interrupt */
2485:src/stm32f1xx_hal_usart.c ****       SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
2486:src/stm32f1xx_hal_usart.c ****     }
2487:src/stm32f1xx_hal_usart.c ****     return HAL_OK;
2488:src/stm32f1xx_hal_usart.c ****   }
2489:src/stm32f1xx_hal_usart.c ****   else
2490:src/stm32f1xx_hal_usart.c ****   {
2491:src/stm32f1xx_hal_usart.c ****     return HAL_BUSY;
2492:src/stm32f1xx_hal_usart.c ****   }
2493:src/stm32f1xx_hal_usart.c **** }
2494:src/stm32f1xx_hal_usart.c **** 
2495:src/stm32f1xx_hal_usart.c **** /**
2496:src/stm32f1xx_hal_usart.c ****   * @brief  Wraps up transmission in non blocking mode.
2497:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
2498:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
2499:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
2500:src/stm32f1xx_hal_usart.c ****   */
2501:src/stm32f1xx_hal_usart.c **** static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
2502:src/stm32f1xx_hal_usart.c **** {
2503:src/stm32f1xx_hal_usart.c ****   /* Disable the USART Transmit Complete Interrupt */
2504:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
2505:src/stm32f1xx_hal_usart.c **** 
2506:src/stm32f1xx_hal_usart.c ****   /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
2507:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
2508:src/stm32f1xx_hal_usart.c **** 
2509:src/stm32f1xx_hal_usart.c ****   husart->State = HAL_USART_STATE_READY;
2510:src/stm32f1xx_hal_usart.c **** 
2511:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
2512:src/stm32f1xx_hal_usart.c ****   /* Call registered Tx Complete Callback */
2513:src/stm32f1xx_hal_usart.c ****   husart->TxCpltCallback(husart);
2514:src/stm32f1xx_hal_usart.c **** #else
2515:src/stm32f1xx_hal_usart.c ****   /* Call legacy weak Tx Complete Callback */
2516:src/stm32f1xx_hal_usart.c ****   HAL_USART_TxCpltCallback(husart);
2517:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
2518:src/stm32f1xx_hal_usart.c **** 
2519:src/stm32f1xx_hal_usart.c ****   return HAL_OK;
2520:src/stm32f1xx_hal_usart.c **** }
2521:src/stm32f1xx_hal_usart.c **** 
2522:src/stm32f1xx_hal_usart.c **** /**
2523:src/stm32f1xx_hal_usart.c ****   * @brief  Simplex Receive an amount of data in non-blocking mode.
2524:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
ARM GAS  /tmp/ccpGcYbE.s 			page 50


2525:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
2526:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
2527:src/stm32f1xx_hal_usart.c ****   */
2528:src/stm32f1xx_hal_usart.c **** static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
2529:src/stm32f1xx_hal_usart.c **** {
2530:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
2531:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_BUSY_RX)
2532:src/stm32f1xx_hal_usart.c ****   {
2533:src/stm32f1xx_hal_usart.c ****     if (husart->Init.WordLength == USART_WORDLENGTH_9B)
2534:src/stm32f1xx_hal_usart.c ****     {
2535:src/stm32f1xx_hal_usart.c ****       tmp = (uint16_t *) husart->pRxBuffPtr;
2536:src/stm32f1xx_hal_usart.c ****       if (husart->Init.Parity == USART_PARITY_NONE)
2537:src/stm32f1xx_hal_usart.c ****       {
2538:src/stm32f1xx_hal_usart.c ****         *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
2539:src/stm32f1xx_hal_usart.c ****         husart->pRxBuffPtr += 2U;
2540:src/stm32f1xx_hal_usart.c ****       }
2541:src/stm32f1xx_hal_usart.c ****       else
2542:src/stm32f1xx_hal_usart.c ****       {
2543:src/stm32f1xx_hal_usart.c ****         *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
2544:src/stm32f1xx_hal_usart.c ****         husart->pRxBuffPtr += 1U;
2545:src/stm32f1xx_hal_usart.c ****       }
2546:src/stm32f1xx_hal_usart.c ****       if (--husart->RxXferCount != 0x00U)
2547:src/stm32f1xx_hal_usart.c ****       {
2548:src/stm32f1xx_hal_usart.c ****         /* Send dummy byte in order to generate the clock for the slave to send the next data */
2549:src/stm32f1xx_hal_usart.c ****         husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x01FF);
2550:src/stm32f1xx_hal_usart.c ****       }
2551:src/stm32f1xx_hal_usart.c ****     }
2552:src/stm32f1xx_hal_usart.c ****     else
2553:src/stm32f1xx_hal_usart.c ****     {
2554:src/stm32f1xx_hal_usart.c ****       if (husart->Init.Parity == USART_PARITY_NONE)
2555:src/stm32f1xx_hal_usart.c ****       {
2556:src/stm32f1xx_hal_usart.c ****         *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
2557:src/stm32f1xx_hal_usart.c ****       }
2558:src/stm32f1xx_hal_usart.c ****       else
2559:src/stm32f1xx_hal_usart.c ****       {
2560:src/stm32f1xx_hal_usart.c ****         *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
2561:src/stm32f1xx_hal_usart.c ****       }
2562:src/stm32f1xx_hal_usart.c **** 
2563:src/stm32f1xx_hal_usart.c ****       if (--husart->RxXferCount != 0x00U)
2564:src/stm32f1xx_hal_usart.c ****       {
2565:src/stm32f1xx_hal_usart.c ****         /* Send dummy byte in order to generate the clock for the slave to send the next data */
2566:src/stm32f1xx_hal_usart.c ****         husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x00FF);
2567:src/stm32f1xx_hal_usart.c ****       }
2568:src/stm32f1xx_hal_usart.c ****     }
2569:src/stm32f1xx_hal_usart.c **** 
2570:src/stm32f1xx_hal_usart.c ****     if (husart->RxXferCount == 0U)
2571:src/stm32f1xx_hal_usart.c ****     {
2572:src/stm32f1xx_hal_usart.c ****       /* Disable the USART RXNE Interrupt */
2573:src/stm32f1xx_hal_usart.c ****       CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
2574:src/stm32f1xx_hal_usart.c **** 
2575:src/stm32f1xx_hal_usart.c ****       /* Disable the USART Parity Error Interrupt */
2576:src/stm32f1xx_hal_usart.c ****       CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
2577:src/stm32f1xx_hal_usart.c **** 
2578:src/stm32f1xx_hal_usart.c ****       /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
2579:src/stm32f1xx_hal_usart.c ****       CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
2580:src/stm32f1xx_hal_usart.c **** 
2581:src/stm32f1xx_hal_usart.c ****       husart->State = HAL_USART_STATE_READY;
ARM GAS  /tmp/ccpGcYbE.s 			page 51


2582:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
2583:src/stm32f1xx_hal_usart.c ****       /* Call registered Rx Complete Callback */
2584:src/stm32f1xx_hal_usart.c ****       husart->RxCpltCallback(husart);
2585:src/stm32f1xx_hal_usart.c **** #else
2586:src/stm32f1xx_hal_usart.c ****       /* Call legacy weak Rx Complete Callback */
2587:src/stm32f1xx_hal_usart.c ****       HAL_USART_RxCpltCallback(husart);
2588:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
2589:src/stm32f1xx_hal_usart.c **** 
2590:src/stm32f1xx_hal_usart.c ****       return HAL_OK;
2591:src/stm32f1xx_hal_usart.c ****     }
2592:src/stm32f1xx_hal_usart.c ****     return HAL_OK;
2593:src/stm32f1xx_hal_usart.c ****   }
2594:src/stm32f1xx_hal_usart.c ****   else
2595:src/stm32f1xx_hal_usart.c ****   {
2596:src/stm32f1xx_hal_usart.c ****     return HAL_BUSY;
2597:src/stm32f1xx_hal_usart.c ****   }
2598:src/stm32f1xx_hal_usart.c **** }
2599:src/stm32f1xx_hal_usart.c **** 
2600:src/stm32f1xx_hal_usart.c **** /**
2601:src/stm32f1xx_hal_usart.c ****   * @brief  Full-Duplex Send receive an amount of data in full-duplex mode (non-blocking).
2602:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
2603:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
2604:src/stm32f1xx_hal_usart.c ****   * @retval HAL status
2605:src/stm32f1xx_hal_usart.c ****   */
2606:src/stm32f1xx_hal_usart.c **** static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
2607:src/stm32f1xx_hal_usart.c **** {
2608:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
2609:src/stm32f1xx_hal_usart.c **** 
2610:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
2611:src/stm32f1xx_hal_usart.c ****   {
2612:src/stm32f1xx_hal_usart.c ****     if (husart->TxXferCount != 0x00U)
2613:src/stm32f1xx_hal_usart.c ****     {
2614:src/stm32f1xx_hal_usart.c ****       if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
2615:src/stm32f1xx_hal_usart.c ****       {
2616:src/stm32f1xx_hal_usart.c ****         if (husart->Init.WordLength == USART_WORDLENGTH_9B)
2617:src/stm32f1xx_hal_usart.c ****         {
2618:src/stm32f1xx_hal_usart.c ****           tmp = (uint16_t *) husart->pTxBuffPtr;
2619:src/stm32f1xx_hal_usart.c ****           husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
2620:src/stm32f1xx_hal_usart.c ****           if (husart->Init.Parity == USART_PARITY_NONE)
2621:src/stm32f1xx_hal_usart.c ****           {
2622:src/stm32f1xx_hal_usart.c ****             husart->pTxBuffPtr += 2U;
2623:src/stm32f1xx_hal_usart.c ****           }
2624:src/stm32f1xx_hal_usart.c ****           else
2625:src/stm32f1xx_hal_usart.c ****           {
2626:src/stm32f1xx_hal_usart.c ****             husart->pTxBuffPtr += 1U;
2627:src/stm32f1xx_hal_usart.c ****           }
2628:src/stm32f1xx_hal_usart.c ****         }
2629:src/stm32f1xx_hal_usart.c ****         else
2630:src/stm32f1xx_hal_usart.c ****         {
2631:src/stm32f1xx_hal_usart.c ****           husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
2632:src/stm32f1xx_hal_usart.c ****         }
2633:src/stm32f1xx_hal_usart.c ****         husart->TxXferCount--;
2634:src/stm32f1xx_hal_usart.c **** 
2635:src/stm32f1xx_hal_usart.c ****         /* Check the latest data transmitted */
2636:src/stm32f1xx_hal_usart.c ****         if (husart->TxXferCount == 0U)
2637:src/stm32f1xx_hal_usart.c ****         {
2638:src/stm32f1xx_hal_usart.c ****           CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
ARM GAS  /tmp/ccpGcYbE.s 			page 52


2639:src/stm32f1xx_hal_usart.c ****         }
2640:src/stm32f1xx_hal_usart.c ****       }
2641:src/stm32f1xx_hal_usart.c ****     }
2642:src/stm32f1xx_hal_usart.c **** 
2643:src/stm32f1xx_hal_usart.c ****     if (husart->RxXferCount != 0x00U)
2644:src/stm32f1xx_hal_usart.c ****     {
2645:src/stm32f1xx_hal_usart.c ****       if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
2646:src/stm32f1xx_hal_usart.c ****       {
2647:src/stm32f1xx_hal_usart.c ****         if (husart->Init.WordLength == USART_WORDLENGTH_9B)
2648:src/stm32f1xx_hal_usart.c ****         {
2649:src/stm32f1xx_hal_usart.c ****           tmp = (uint16_t *) husart->pRxBuffPtr;
2650:src/stm32f1xx_hal_usart.c ****           if (husart->Init.Parity == USART_PARITY_NONE)
2651:src/stm32f1xx_hal_usart.c ****           {
2652:src/stm32f1xx_hal_usart.c ****             *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
2653:src/stm32f1xx_hal_usart.c ****             husart->pRxBuffPtr += 2U;
2654:src/stm32f1xx_hal_usart.c ****           }
2655:src/stm32f1xx_hal_usart.c ****           else
2656:src/stm32f1xx_hal_usart.c ****           {
2657:src/stm32f1xx_hal_usart.c ****             *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
2658:src/stm32f1xx_hal_usart.c ****             husart->pRxBuffPtr += 1U;
2659:src/stm32f1xx_hal_usart.c ****           }
2660:src/stm32f1xx_hal_usart.c ****         }
2661:src/stm32f1xx_hal_usart.c ****         else
2662:src/stm32f1xx_hal_usart.c ****         {
2663:src/stm32f1xx_hal_usart.c ****           if (husart->Init.Parity == USART_PARITY_NONE)
2664:src/stm32f1xx_hal_usart.c ****           {
2665:src/stm32f1xx_hal_usart.c ****             *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
2666:src/stm32f1xx_hal_usart.c ****           }
2667:src/stm32f1xx_hal_usart.c ****           else
2668:src/stm32f1xx_hal_usart.c ****           {
2669:src/stm32f1xx_hal_usart.c ****             *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
2670:src/stm32f1xx_hal_usart.c ****           }
2671:src/stm32f1xx_hal_usart.c ****         }
2672:src/stm32f1xx_hal_usart.c ****         husart->RxXferCount--;
2673:src/stm32f1xx_hal_usart.c ****       }
2674:src/stm32f1xx_hal_usart.c ****     }
2675:src/stm32f1xx_hal_usart.c **** 
2676:src/stm32f1xx_hal_usart.c ****     /* Check the latest data received */
2677:src/stm32f1xx_hal_usart.c ****     if (husart->RxXferCount == 0U)
2678:src/stm32f1xx_hal_usart.c ****     {
2679:src/stm32f1xx_hal_usart.c ****       /* Disable the USART RXNE Interrupt */
2680:src/stm32f1xx_hal_usart.c ****       CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
2681:src/stm32f1xx_hal_usart.c **** 
2682:src/stm32f1xx_hal_usart.c ****       /* Disable the USART Parity Error Interrupt */
2683:src/stm32f1xx_hal_usart.c ****       CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
2684:src/stm32f1xx_hal_usart.c **** 
2685:src/stm32f1xx_hal_usart.c ****       /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
2686:src/stm32f1xx_hal_usart.c ****       CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
2687:src/stm32f1xx_hal_usart.c **** 
2688:src/stm32f1xx_hal_usart.c ****       husart->State = HAL_USART_STATE_READY;
2689:src/stm32f1xx_hal_usart.c **** 
2690:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
2691:src/stm32f1xx_hal_usart.c ****       /* Call registered Tx Rx Complete Callback */
2692:src/stm32f1xx_hal_usart.c ****       husart->TxRxCpltCallback(husart);
2693:src/stm32f1xx_hal_usart.c **** #else
2694:src/stm32f1xx_hal_usart.c ****       /* Call legacy weak Tx Rx Complete Callback */
2695:src/stm32f1xx_hal_usart.c ****       HAL_USART_TxRxCpltCallback(husart);
ARM GAS  /tmp/ccpGcYbE.s 			page 53


2696:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
2697:src/stm32f1xx_hal_usart.c **** 
2698:src/stm32f1xx_hal_usart.c ****       return HAL_OK;
2699:src/stm32f1xx_hal_usart.c ****     }
2700:src/stm32f1xx_hal_usart.c **** 
2701:src/stm32f1xx_hal_usart.c ****     return HAL_OK;
2702:src/stm32f1xx_hal_usart.c ****   }
2703:src/stm32f1xx_hal_usart.c ****   else
2704:src/stm32f1xx_hal_usart.c ****   {
2705:src/stm32f1xx_hal_usart.c ****     return HAL_BUSY;
2706:src/stm32f1xx_hal_usart.c ****   }
2707:src/stm32f1xx_hal_usart.c **** }
2708:src/stm32f1xx_hal_usart.c **** 
2709:src/stm32f1xx_hal_usart.c **** /**
2710:src/stm32f1xx_hal_usart.c ****   * @brief  Configures the USART peripheral.
2711:src/stm32f1xx_hal_usart.c ****   * @param  husart Pointer to a USART_HandleTypeDef structure that contains
2712:src/stm32f1xx_hal_usart.c ****   *                the configuration information for the specified USART module.
2713:src/stm32f1xx_hal_usart.c ****   * @retval None
2714:src/stm32f1xx_hal_usart.c ****   */
2715:src/stm32f1xx_hal_usart.c **** static void USART_SetConfig(USART_HandleTypeDef *husart)
2716:src/stm32f1xx_hal_usart.c **** {
2717:src/stm32f1xx_hal_usart.c ****   uint32_t tmpreg = 0x00U;
2718:src/stm32f1xx_hal_usart.c ****   uint32_t pclk;
2719:src/stm32f1xx_hal_usart.c **** 
2720:src/stm32f1xx_hal_usart.c ****   /* Check the parameters */
2721:src/stm32f1xx_hal_usart.c ****   assert_param(IS_USART_INSTANCE(husart->Instance));
2722:src/stm32f1xx_hal_usart.c ****   assert_param(IS_USART_POLARITY(husart->Init.CLKPolarity));
2723:src/stm32f1xx_hal_usart.c ****   assert_param(IS_USART_PHASE(husart->Init.CLKPhase));
2724:src/stm32f1xx_hal_usart.c ****   assert_param(IS_USART_LASTBIT(husart->Init.CLKLastBit));
2725:src/stm32f1xx_hal_usart.c ****   assert_param(IS_USART_BAUDRATE(husart->Init.BaudRate));
2726:src/stm32f1xx_hal_usart.c ****   assert_param(IS_USART_WORD_LENGTH(husart->Init.WordLength));
2727:src/stm32f1xx_hal_usart.c ****   assert_param(IS_USART_STOPBITS(husart->Init.StopBits));
2728:src/stm32f1xx_hal_usart.c ****   assert_param(IS_USART_PARITY(husart->Init.Parity));
2729:src/stm32f1xx_hal_usart.c ****   assert_param(IS_USART_MODE(husart->Init.Mode));
2730:src/stm32f1xx_hal_usart.c **** 
2731:src/stm32f1xx_hal_usart.c ****   /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
2732:src/stm32f1xx_hal_usart.c ****      receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
2733:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 248              		.loc 1 2733 0
 249 0094 2A68     		ldr	r2, [r5]	@ _23, husart_4(D)->Instance
 250              	.LBE9:
 251              	.LBE8:
 327:src/stm32f1xx_hal_usart.c **** 
 252              		.loc 1 327 0
 253 0096 85F83D30 		strb	r3, [r5, #61]	@ tmp183, husart_4(D)->State
 254              	.LVL10:
 255              	.LBB12:
 256              	.LBB10:
 257              		.loc 1 2733 0
 258 009a D368     		ldr	r3, [r2, #12]	@ _24, _23->CR1
2734:src/stm32f1xx_hal_usart.c **** 
2735:src/stm32f1xx_hal_usart.c ****   /*---------------------------- USART CR2 Configuration ---------------------*/
2736:src/stm32f1xx_hal_usart.c ****   tmpreg = husart->Instance->CR2;
2737:src/stm32f1xx_hal_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
2738:src/stm32f1xx_hal_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LB
2739:src/stm32f1xx_hal_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
2740:src/stm32f1xx_hal_usart.c ****   /* Set CPOL bit according to husart->Init.CLKPolarity value */
ARM GAS  /tmp/ccpGcYbE.s 			page 54


2741:src/stm32f1xx_hal_usart.c ****   /* Set CPHA bit according to husart->Init.CLKPhase value */
2742:src/stm32f1xx_hal_usart.c ****   /* Set LBCL bit according to husart->Init.CLKLastBit value */
2743:src/stm32f1xx_hal_usart.c ****   /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
2744:src/stm32f1xx_hal_usart.c ****   tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 259              		.loc 1 2744 0
 260 009c E869     		ldr	r0, [r5, #28]	@ husart_4(D)->Init.CLKPhase, husart_4(D)->Init.CLKPhase
2733:src/stm32f1xx_hal_usart.c **** 
 261              		.loc 1 2733 0
 262 009e 23F00C03 		bic	r3, r3, #12	@ _25, _24,
 263 00a2 D360     		str	r3, [r2, #12]	@ _25, _23->CR1
 264              		.loc 1 2744 0
 265 00a4 AB69     		ldr	r3, [r5, #24]	@ husart_4(D)->Init.CLKPolarity, husart_4(D)->Init.CLKPolarity
2736:src/stm32f1xx_hal_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 266              		.loc 1 2736 0
 267 00a6 1169     		ldr	r1, [r2, #16]	@ tmpreg, _23->CR2
 268              	.LVL11:
 269              		.loc 1 2744 0
 270 00a8 0343     		orrs	r3, r3, r0	@, tmp185, husart_4(D)->Init.CLKPolarity, husart_4(D)->Init.CLKPhase
 271 00aa 286A     		ldr	r0, [r5, #32]	@ husart_4(D)->Init.CLKLastBit, husart_4(D)->Init.CLKLastBit
 272 00ac 43F40063 		orr	r3, r3, #2048	@ tmp188, tmp185,
 273 00b0 0343     		orrs	r3, r3, r0	@, tmp189, tmp188, husart_4(D)->Init.CLKLastBit
 274 00b2 E868     		ldr	r0, [r5, #12]	@ husart_4(D)->Init.StopBits, husart_4(D)->Init.StopBits
2738:src/stm32f1xx_hal_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
 275              		.loc 1 2738 0
 276 00b4 21F47C51 		bic	r1, r1, #16128	@ tmpreg, tmpreg,
 277              	.LVL12:
 278              		.loc 1 2744 0
 279 00b8 0343     		orrs	r3, r3, r0	@, tmp191, tmp189, husart_4(D)->Init.StopBits
 280 00ba 0B43     		orrs	r3, r3, r1	@, tmpreg, tmp191, tmpreg
 281              	.LVL13:
2745:src/stm32f1xx_hal_usart.c ****                        husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
2746:src/stm32f1xx_hal_usart.c ****   /* Write to USART CR2 */
2747:src/stm32f1xx_hal_usart.c ****   WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 282              		.loc 1 2747 0
 283 00bc 1361     		str	r3, [r2, #16]	@ tmpreg, _23->CR2
2748:src/stm32f1xx_hal_usart.c **** 
2749:src/stm32f1xx_hal_usart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2750:src/stm32f1xx_hal_usart.c ****   tmpreg = husart->Instance->CR1;
2751:src/stm32f1xx_hal_usart.c **** 
2752:src/stm32f1xx_hal_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
2753:src/stm32f1xx_hal_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USAR
2754:src/stm32f1xx_hal_usart.c **** 
2755:src/stm32f1xx_hal_usart.c ****   /* Configure the USART Word Length, Parity and mode:
2756:src/stm32f1xx_hal_usart.c ****      Set the M bits according to husart->Init.WordLength value
2757:src/stm32f1xx_hal_usart.c ****      Set PCE and PS bits according to husart->Init.Parity value
2758:src/stm32f1xx_hal_usart.c ****      Set TE and RE bits according to husart->Init.Mode value
2759:src/stm32f1xx_hal_usart.c ****    */
2760:src/stm32f1xx_hal_usart.c ****   tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 284              		.loc 1 2760 0
 285 00be 2869     		ldr	r0, [r5, #16]	@ husart_4(D)->Init.Parity, husart_4(D)->Init.Parity
 286 00c0 AB68     		ldr	r3, [r5, #8]	@ husart_4(D)->Init.WordLength, husart_4(D)->Init.WordLength
 287              	.LVL14:
2750:src/stm32f1xx_hal_usart.c **** 
 288              		.loc 1 2750 0
 289 00c2 D168     		ldr	r1, [r2, #12]	@ tmpreg, _23->CR1
 290              	.LVL15:
 291              		.loc 1 2760 0
ARM GAS  /tmp/ccpGcYbE.s 			page 55


 292 00c4 0343     		orrs	r3, r3, r0	@, tmp194, husart_4(D)->Init.WordLength, husart_4(D)->Init.Parity
 293 00c6 6869     		ldr	r0, [r5, #20]	@ husart_4(D)->Init.Mode, husart_4(D)->Init.Mode
2753:src/stm32f1xx_hal_usart.c **** 
 294              		.loc 1 2753 0
 295 00c8 21F4B051 		bic	r1, r1, #5632	@ tmpreg, tmpreg,
 296              	.LVL16:
 297 00cc 21F00C01 		bic	r1, r1, #12	@ tmpreg, tmpreg,
 298              	.LVL17:
 299              		.loc 1 2760 0
 300 00d0 0343     		orrs	r3, r3, r0	@, tmp197, tmp194, husart_4(D)->Init.Mode
 301 00d2 0B43     		orrs	r3, r3, r1	@, tmpreg, tmp197, tmpreg
 302              	.LVL18:
2761:src/stm32f1xx_hal_usart.c **** 
2762:src/stm32f1xx_hal_usart.c ****   /* Write to USART CR1 */
2763:src/stm32f1xx_hal_usart.c ****   WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 303              		.loc 1 2763 0
 304 00d4 D360     		str	r3, [r2, #12]	@ tmpreg, _23->CR1
2764:src/stm32f1xx_hal_usart.c **** 
2765:src/stm32f1xx_hal_usart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
2766:src/stm32f1xx_hal_usart.c ****   /* Clear CTSE and RTSE bits */
2767:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 305              		.loc 1 2767 0
 306 00d6 5369     		ldr	r3, [r2, #20]	@ _45, _23->CR3
 307              	.LVL19:
 308 00d8 1924     		movs	r4, #25	@ tmp250,
 309 00da 23F44073 		bic	r3, r3, #768	@ _46, _45,
 310 00de 5361     		str	r3, [r2, #20]	@ _46, _23->CR3
 311              	.LVL20:
2768:src/stm32f1xx_hal_usart.c **** 
2769:src/stm32f1xx_hal_usart.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
2770:src/stm32f1xx_hal_usart.c ****   if((husart->Instance == USART1))
 312              		.loc 1 2770 0
 313 00e0 1A4B     		ldr	r3, .L19	@ tmp199,
 314 00e2 9A42     		cmp	r2, r3	@ _23, tmp199
 315 00e4 2CD1     		bne	.L15	@,
2771:src/stm32f1xx_hal_usart.c ****   {
2772:src/stm32f1xx_hal_usart.c ****     pclk = HAL_RCC_GetPCLK2Freq();
 316              		.loc 1 2772 0
 317 00e6 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq	@
 318              	.LVL21:
 319              	.L18:
2773:src/stm32f1xx_hal_usart.c ****     husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
2774:src/stm32f1xx_hal_usart.c ****   }
2775:src/stm32f1xx_hal_usart.c ****   else
2776:src/stm32f1xx_hal_usart.c ****   {
2777:src/stm32f1xx_hal_usart.c ****     pclk = HAL_RCC_GetPCLK1Freq();
2778:src/stm32f1xx_hal_usart.c ****     husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 320              		.loc 1 2778 0
 321 00ea 6043     		muls	r0, r4, r0	@ tmp223, tmp250
 322              	.LVL22:
 323 00ec 6C68     		ldr	r4, [r5, #4]	@ husart_4(D)->Init.BaudRate, husart_4(D)->Init.BaudRate
 324 00ee 2A68     		ldr	r2, [r5]	@ _65, husart_4(D)->Instance
 325 00f0 A400     		lsls	r4, r4, #2	@ tmp225, husart_4(D)->Init.BaudRate,
 326 00f2 B0FBF4F0 		udiv	r0, r0, r4	@ _69, tmp223, tmp225
 327 00f6 6424     		movs	r4, #100	@ tmp231,
 328 00f8 B0FBF4F6 		udiv	r6, r0, r4	@ tmp230, _69, tmp231
 329 00fc 04FB1603 		mls	r3, r4, r6, r0	@ tmp234, tmp231, tmp230, _69
ARM GAS  /tmp/ccpGcYbE.s 			page 56


 330 0100 1B01     		lsls	r3, r3, #4	@ tmp235, tmp234,
 331 0102 3233     		adds	r3, r3, #50	@ tmp236, tmp235,
 332 0104 B3FBF4F3 		udiv	r3, r3, r4	@ _75, tmp236, tmp231
 333 0108 03F00F01 		and	r1, r3, #15	@ tmp242, _75,
 334 010c 5B00     		lsls	r3, r3, #1	@ tmp244, _75,
 335 010e 01EB0611 		add	r1, r1, r6, lsl #4	@ tmp243, tmp242, tmp230,
 336 0112 03F4F073 		and	r3, r3, #480	@ tmp245, tmp244,
 337 0116 0B44     		add	r3, r3, r1	@ _80, tmp243
 338 0118 9360     		str	r3, [r2, #8]	@ _80,
 339              	.LVL23:
 340              	.LBE10:
 341              	.LBE12:
 335:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 342              		.loc 1 335 0
 343 011a 2B68     		ldr	r3, [r5]	@ _11, husart_4(D)->Instance
 342:src/stm32f1xx_hal_usart.c ****   husart->State = HAL_USART_STATE_READY;
 344              		.loc 1 342 0
 345 011c 0020     		movs	r0, #0	@ tmp246,
 335:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 346              		.loc 1 335 0
 347 011e 1A69     		ldr	r2, [r3, #16]	@ _12, _11->CR2
 348 0120 22F48042 		bic	r2, r2, #16384	@ _13, _12,
 349 0124 1A61     		str	r2, [r3, #16]	@ _13, _11->CR2
 336:src/stm32f1xx_hal_usart.c **** 
 350              		.loc 1 336 0
 351 0126 5A69     		ldr	r2, [r3, #20]	@ _15, _11->CR3
 352 0128 22F02A02 		bic	r2, r2, #42	@ _16, _15,
 353 012c 5A61     		str	r2, [r3, #20]	@ _16, _11->CR3
 339:src/stm32f1xx_hal_usart.c **** 
 354              		.loc 1 339 0
 355 012e DA68     		ldr	r2, [r3, #12]	@ _18, _11->CR1
 356 0130 42F40052 		orr	r2, r2, #8192	@ _19, _18,
 357 0134 DA60     		str	r2, [r3, #12]	@ _19, _11->CR1
 343:src/stm32f1xx_hal_usart.c **** 
 358              		.loc 1 343 0
 359 0136 0123     		movs	r3, #1	@ tmp247,
 342:src/stm32f1xx_hal_usart.c ****   husart->State = HAL_USART_STATE_READY;
 360              		.loc 1 342 0
 361 0138 2864     		str	r0, [r5, #64]	@ tmp246, husart_4(D)->ErrorCode
 343:src/stm32f1xx_hal_usart.c **** 
 362              		.loc 1 343 0
 363 013a 85F83D30 		strb	r3, [r5, #61]	@ tmp247, husart_4(D)->State
 345:src/stm32f1xx_hal_usart.c **** }
 364              		.loc 1 345 0
 365 013e 70BD     		pop	{r4, r5, r6, pc}	@
 366              	.LVL24:
 367              	.L15:
 368              	.LBB13:
 369              	.LBB11:
2777:src/stm32f1xx_hal_usart.c ****     husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 370              		.loc 1 2777 0
 371 0140 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq	@
 372              	.LVL25:
 373 0144 D1E7     		b	.L18	@
 374              	.LVL26:
 375              	.L17:
 376              	.LBE11:
ARM GAS  /tmp/ccpGcYbE.s 			page 57


 377              	.LBE13:
 300:src/stm32f1xx_hal_usart.c ****   }
 378              		.loc 1 300 0
 379 0146 0120     		movs	r0, #1	@ <retval>,
 380              	.LVL27:
 346:src/stm32f1xx_hal_usart.c **** 
 381              		.loc 1 346 0
 382 0148 70BD     		pop	{r4, r5, r6, pc}	@
 383              	.LVL28:
 384              	.L20:
 385 014a 00BF     		.align	2
 386              	.L19:
 387 014c 00380140 		.word	1073821696
 388              		.cfi_endproc
 389              	.LFE65:
 390              		.size	HAL_USART_Init, .-HAL_USART_Init
 391              		.align	1
 392              		.weak	HAL_USART_MspDeInit
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 396              		.fpu softvfp
 397              		.type	HAL_USART_MspDeInit, %function
 398              	HAL_USART_MspDeInit:
 399              	.LFB125:
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 0
 402              		@ frame_needed = 0, uses_anonymous_args = 0
 403              		@ link register save eliminated.
 404 0150 7047     		bx	lr	@
 405              		.cfi_endproc
 406              	.LFE125:
 407              		.size	HAL_USART_MspDeInit, .-HAL_USART_MspDeInit
 408              		.align	1
 409              		.global	HAL_USART_DeInit
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 413              		.fpu softvfp
 414              		.type	HAL_USART_DeInit, %function
 415              	HAL_USART_DeInit:
 416              	.LFB66:
 355:src/stm32f1xx_hal_usart.c ****   /* Check the USART handle allocation */
 417              		.loc 1 355 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421              	.LVL29:
 355:src/stm32f1xx_hal_usart.c ****   /* Check the USART handle allocation */
 422              		.loc 1 355 0
 423 0152 10B5     		push	{r4, lr}	@
 424              	.LCFI2:
 425              		.cfi_def_cfa_offset 8
 426              		.cfi_offset 4, -8
 427              		.cfi_offset 14, -4
 357:src/stm32f1xx_hal_usart.c ****   {
 428              		.loc 1 357 0
ARM GAS  /tmp/ccpGcYbE.s 			page 58


 429 0154 0446     		mov	r4, r0	@ husart, husart
 430 0156 80B1     		cbz	r0, .L24	@ husart,
 365:src/stm32f1xx_hal_usart.c **** 
 431              		.loc 1 365 0
 432 0158 0223     		movs	r3, #2	@ tmp115,
 368:src/stm32f1xx_hal_usart.c **** 
 433              		.loc 1 368 0
 434 015a 0268     		ldr	r2, [r0]	@ _6, husart_3(D)->Instance
 365:src/stm32f1xx_hal_usart.c **** 
 435              		.loc 1 365 0
 436 015c 80F83D30 		strb	r3, [r0, #61]	@ tmp115, husart_3(D)->State
 368:src/stm32f1xx_hal_usart.c **** 
 437              		.loc 1 368 0
 438 0160 D368     		ldr	r3, [r2, #12]	@ _7, _6->CR1
 439 0162 23F40053 		bic	r3, r3, #8192	@ _8, _7,
 440 0166 D360     		str	r3, [r2, #12]	@ _8, _6->CR1
 379:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 441              		.loc 1 379 0
 442 0168 FFF7FEFF 		bl	HAL_USART_MspDeInit	@
 443              	.LVL30:
 382:src/stm32f1xx_hal_usart.c ****   husart->State = HAL_USART_STATE_RESET;
 444              		.loc 1 382 0
 445 016c 0020     		movs	r0, #0	@ tmp117,
 446 016e 2064     		str	r0, [r4, #64]	@ tmp117, husart_3(D)->ErrorCode
 386:src/stm32f1xx_hal_usart.c **** 
 447              		.loc 1 386 0
 448 0170 84F83C00 		strb	r0, [r4, #60]	@ tmp117, husart_3(D)->Lock
 383:src/stm32f1xx_hal_usart.c **** 
 449              		.loc 1 383 0
 450 0174 84F83D00 		strb	r0, [r4, #61]	@ tmp117, husart_3(D)->State
 388:src/stm32f1xx_hal_usart.c **** }
 451              		.loc 1 388 0
 452 0178 10BD     		pop	{r4, pc}	@
 453              	.LVL31:
 454              	.L24:
 359:src/stm32f1xx_hal_usart.c ****   }
 455              		.loc 1 359 0
 456 017a 0120     		movs	r0, #1	@ <retval>,
 457              	.LVL32:
 389:src/stm32f1xx_hal_usart.c **** 
 458              		.loc 1 389 0
 459 017c 10BD     		pop	{r4, pc}	@
 460              		.cfi_endproc
 461              	.LFE66:
 462              		.size	HAL_USART_DeInit, .-HAL_USART_DeInit
 463              		.align	1
 464              		.global	HAL_USART_Transmit
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu softvfp
 469              		.type	HAL_USART_Transmit, %function
 470              	HAL_USART_Transmit:
 471              	.LFB69:
 745:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 472              		.loc 1 745 0
 473              		.cfi_startproc
ARM GAS  /tmp/ccpGcYbE.s 			page 59


 474              		@ args = 0, pretend = 0, frame = 0
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              	.LVL33:
 477 017e 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 478              	.LCFI3:
 479              		.cfi_def_cfa_offset 24
 480              		.cfi_offset 4, -24
 481              		.cfi_offset 5, -20
 482              		.cfi_offset 6, -16
 483              		.cfi_offset 7, -12
 484              		.cfi_offset 8, -8
 485              		.cfi_offset 14, -4
 745:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 486              		.loc 1 745 0
 487 0182 0446     		mov	r4, r0	@ husart, husart
 749:src/stm32f1xx_hal_usart.c ****   {
 488              		.loc 1 749 0
 489 0184 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2	@ husart_7(D)->State, husart_7(D)->State
 490              	.LVL34:
 745:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 491              		.loc 1 745 0
 492 0188 0D46     		mov	r5, r1	@ pTxData, pTxData
 749:src/stm32f1xx_hal_usart.c ****   {
 493              		.loc 1 749 0
 494 018a C0B2     		uxtb	r0, r0	@ _8, husart_7(D)->State
 495 018c 0128     		cmp	r0, #1	@ _8,
 745:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 496              		.loc 1 745 0
 497 018e 9046     		mov	r8, r2	@ Size, Size
 498 0190 1E46     		mov	r6, r3	@ Timeout, Timeout
 749:src/stm32f1xx_hal_usart.c ****   {
 499              		.loc 1 749 0
 500 0192 4AD1     		bne	.L37	@,
 751:src/stm32f1xx_hal_usart.c ****     {
 501              		.loc 1 751 0
 502 0194 0029     		cmp	r1, #0	@ pTxData
 503 0196 49D0     		beq	.L26	@
 751:src/stm32f1xx_hal_usart.c ****     {
 504              		.loc 1 751 0 is_stmt 0 discriminator 1
 505 0198 002A     		cmp	r2, #0	@ Size
 506 019a 47D0     		beq	.L26	@
 757:src/stm32f1xx_hal_usart.c **** 
 507              		.loc 1 757 0 is_stmt 1
 508 019c 94F83C30 		ldrb	r3, [r4, #60]	@ zero_extendqisi2	@ husart_7(D)->Lock, husart_7(D)->Lock
 509              	.LVL35:
 510 01a0 012B     		cmp	r3, #1	@ husart_7(D)->Lock,
 511 01a2 42D0     		beq	.L37	@,
 759:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX;
 512              		.loc 1 759 0 discriminator 2
 513 01a4 0023     		movs	r3, #0	@ tmp139,
 514 01a6 2364     		str	r3, [r4, #64]	@ tmp139, husart_7(D)->ErrorCode
 760:src/stm32f1xx_hal_usart.c **** 
 515              		.loc 1 760 0 discriminator 2
 516 01a8 1223     		movs	r3, #18	@ tmp140,
 757:src/stm32f1xx_hal_usart.c **** 
 517              		.loc 1 757 0 discriminator 2
 518 01aa 84F83C00 		strb	r0, [r4, #60]	@ _8, husart_7(D)->Lock
ARM GAS  /tmp/ccpGcYbE.s 			page 60


 760:src/stm32f1xx_hal_usart.c **** 
 519              		.loc 1 760 0 discriminator 2
 520 01ae 84F83D30 		strb	r3, [r4, #61]	@ tmp140, husart_7(D)->State
 763:src/stm32f1xx_hal_usart.c **** 
 521              		.loc 1 763 0 discriminator 2
 522 01b2 FFF7FEFF 		bl	HAL_GetTick	@
 523              	.LVL36:
 524 01b6 0746     		mov	r7, r0	@ tickstart,
 525              	.LVL37:
 765:src/stm32f1xx_hal_usart.c ****     husart->TxXferCount = Size;
 526              		.loc 1 765 0 discriminator 2
 527 01b8 A4F82880 		strh	r8, [r4, #40]	@ movhi	@ Size, husart_7(D)->TxXferSize
 766:src/stm32f1xx_hal_usart.c ****     while (husart->TxXferCount > 0U)
 528              		.loc 1 766 0 discriminator 2
 529 01bc A4F82A80 		strh	r8, [r4, #42]	@ movhi	@ Size, husart_7(D)->TxXferCount
 530              	.LVL38:
 531              	.L27:
 767:src/stm32f1xx_hal_usart.c ****     {
 532              		.loc 1 767 0
 533 01c0 638D     		ldrh	r3, [r4, #42]	@, husart_7(D)->TxXferCount
 534 01c2 9BB2     		uxth	r3, r3	@ _20, husart_7(D)->TxXferCount
 535 01c4 6BB9     		cbnz	r3, .L33	@ _20,
 798:src/stm32f1xx_hal_usart.c ****     {
 536              		.loc 1 798 0
 537 01c6 3346     		mov	r3, r6	@, Timeout
 538 01c8 3A46     		mov	r2, r7	@, tickstart
 539 01ca 4021     		movs	r1, #64	@,
 540 01cc 2046     		mov	r0, r4	@, husart
 541 01ce FFF724FF 		bl	USART_WaitOnFlagUntilTimeout.constprop.4	@
 542              	.LVL39:
 543 01d2 A8B9     		cbnz	r0, .L32	@ <retval>,
 803:src/stm32f1xx_hal_usart.c **** 
 544              		.loc 1 803 0
 545 01d4 0123     		movs	r3, #1	@ tmp158,
 806:src/stm32f1xx_hal_usart.c **** 
 546              		.loc 1 806 0
 547 01d6 84F83C00 		strb	r0, [r4, #60]	@ <retval>, husart_7(D)->Lock
 803:src/stm32f1xx_hal_usart.c **** 
 548              		.loc 1 803 0
 549 01da 84F83D30 		strb	r3, [r4, #61]	@ tmp158, husart_7(D)->State
 808:src/stm32f1xx_hal_usart.c ****   }
 550              		.loc 1 808 0
 551 01de BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 552              	.LVL40:
 553              	.L33:
 769:src/stm32f1xx_hal_usart.c ****       if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 554              		.loc 1 769 0
 555 01e2 638D     		ldrh	r3, [r4, #42]	@, husart_7(D)->TxXferCount
 773:src/stm32f1xx_hal_usart.c ****         {
 556              		.loc 1 773 0
 557 01e4 3A46     		mov	r2, r7	@, tickstart
 769:src/stm32f1xx_hal_usart.c ****       if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 558              		.loc 1 769 0
 559 01e6 013B     		subs	r3, r3, #1	@ tmp146, husart_7(D)->TxXferCount,
 560 01e8 9BB2     		uxth	r3, r3	@ _23, tmp146
 561 01ea 6385     		strh	r3, [r4, #42]	@ movhi	@ _23, husart_7(D)->TxXferCount
 770:src/stm32f1xx_hal_usart.c ****       {
ARM GAS  /tmp/ccpGcYbE.s 			page 61


 562              		.loc 1 770 0
 563 01ec A368     		ldr	r3, [r4, #8]	@ husart_7(D)->Init.WordLength, husart_7(D)->Init.WordLength
 773:src/stm32f1xx_hal_usart.c ****         {
 564              		.loc 1 773 0
 565 01ee 8021     		movs	r1, #128	@,
 770:src/stm32f1xx_hal_usart.c ****       {
 566              		.loc 1 770 0
 567 01f0 B3F5805F 		cmp	r3, #4096	@ husart_7(D)->Init.WordLength,
 773:src/stm32f1xx_hal_usart.c ****         {
 568              		.loc 1 773 0
 569 01f4 2046     		mov	r0, r4	@, husart
 570 01f6 3346     		mov	r3, r6	@, Timeout
 770:src/stm32f1xx_hal_usart.c ****       {
 571              		.loc 1 770 0
 572 01f8 0ED1     		bne	.L28	@,
 573              	.LVL41:
 773:src/stm32f1xx_hal_usart.c ****         {
 574              		.loc 1 773 0
 575 01fa FFF70EFF 		bl	USART_WaitOnFlagUntilTimeout.constprop.4	@
 576              	.LVL42:
 577 01fe 10B1     		cbz	r0, .L29	@,
 578              	.L32:
 775:src/stm32f1xx_hal_usart.c ****         }
 579              		.loc 1 775 0
 580 0200 0320     		movs	r0, #3	@ <retval>,
 581 0202 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 582              	.LVL43:
 583              	.L29:
 778:src/stm32f1xx_hal_usart.c ****         if (husart->Init.Parity == USART_PARITY_NONE)
 584              		.loc 1 778 0
 585 0206 2B88     		ldrh	r3, [r5]	@, MEM[(uint16_t *)pTxData_1]
 586 0208 2268     		ldr	r2, [r4]	@ _36, husart_7(D)->Instance
 587 020a C3F30803 		ubfx	r3, r3, #0, #9	@ _38, MEM[(uint16_t *)pTxData_1],,
 588 020e 5360     		str	r3, [r2, #4]	@ _38, _36->DR
 779:src/stm32f1xx_hal_usart.c ****         {
 589              		.loc 1 779 0
 590 0210 2369     		ldr	r3, [r4, #16]	@ husart_7(D)->Init.Parity, husart_7(D)->Init.Parity
 591 0212 43B9     		cbnz	r3, .L38	@ husart_7(D)->Init.Parity,
 781:src/stm32f1xx_hal_usart.c ****         }
 592              		.loc 1 781 0
 593 0214 0235     		adds	r5, r5, #2	@ pTxData, pTxData,
 594              	.LVL44:
 595 0216 D3E7     		b	.L27	@
 596              	.LVL45:
 597              	.L28:
 790:src/stm32f1xx_hal_usart.c ****         {
 598              		.loc 1 790 0
 599 0218 FFF7FFFE 		bl	USART_WaitOnFlagUntilTimeout.constprop.4	@
 600              	.LVL46:
 601 021c 0028     		cmp	r0, #0	@
 602 021e EFD1     		bne	.L32	@
 603              	.LVL47:
 794:src/stm32f1xx_hal_usart.c ****       }
 604              		.loc 1 794 0
 605 0220 2368     		ldr	r3, [r4]	@ _29, husart_7(D)->Instance
 606 0222 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2	@ _32, *pTxData_1
 607 0224 5A60     		str	r2, [r3, #4]	@ _32, _29->DR
ARM GAS  /tmp/ccpGcYbE.s 			page 62


 608              	.LVL48:
 609              	.L38:
 610 0226 0135     		adds	r5, r5, #1	@ pTxData, pTxData,
 611 0228 CAE7     		b	.L27	@
 612              	.LVL49:
 613              	.L37:
 812:src/stm32f1xx_hal_usart.c ****   }
 614              		.loc 1 812 0
 615 022a 0220     		movs	r0, #2	@ <retval>,
 616              	.L26:
 814:src/stm32f1xx_hal_usart.c **** 
 617              		.loc 1 814 0
 618 022c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 619              		.cfi_endproc
 620              	.LFE69:
 621              		.size	HAL_USART_Transmit, .-HAL_USART_Transmit
 622              		.align	1
 623              		.global	HAL_USART_Receive
 624              		.syntax unified
 625              		.thumb
 626              		.thumb_func
 627              		.fpu softvfp
 628              		.type	HAL_USART_Receive, %function
 629              	HAL_USART_Receive:
 630              	.LFB70:
 830:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 631              		.loc 1 830 0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 0
 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635              	.LVL50:
 636 0230 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 637              	.LCFI4:
 638              		.cfi_def_cfa_offset 24
 639              		.cfi_offset 4, -24
 640              		.cfi_offset 5, -20
 641              		.cfi_offset 6, -16
 642              		.cfi_offset 7, -12
 643              		.cfi_offset 8, -8
 644              		.cfi_offset 14, -4
 830:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 645              		.loc 1 830 0
 646 0234 0446     		mov	r4, r0	@ husart, husart
 834:src/stm32f1xx_hal_usart.c ****   {
 647              		.loc 1 834 0
 648 0236 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2	@ husart_7(D)->State, husart_7(D)->State
 649              	.LVL51:
 830:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 650              		.loc 1 830 0
 651 023a 0D46     		mov	r5, r1	@ pRxData, pRxData
 834:src/stm32f1xx_hal_usart.c ****   {
 652              		.loc 1 834 0
 653 023c C0B2     		uxtb	r0, r0	@ _8, husart_7(D)->State
 654 023e 0128     		cmp	r0, #1	@ _8,
 830:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 655              		.loc 1 830 0
 656 0240 9046     		mov	r8, r2	@ Size, Size
ARM GAS  /tmp/ccpGcYbE.s 			page 63


 657 0242 1E46     		mov	r6, r3	@ Timeout, Timeout
 834:src/stm32f1xx_hal_usart.c ****   {
 658              		.loc 1 834 0
 659 0244 66D1     		bne	.L52	@,
 836:src/stm32f1xx_hal_usart.c ****     {
 660              		.loc 1 836 0
 661 0246 0029     		cmp	r1, #0	@ pRxData
 662 0248 65D0     		beq	.L40	@
 836:src/stm32f1xx_hal_usart.c ****     {
 663              		.loc 1 836 0 is_stmt 0 discriminator 1
 664 024a 002A     		cmp	r2, #0	@ Size
 665 024c 63D0     		beq	.L40	@
 841:src/stm32f1xx_hal_usart.c **** 
 666              		.loc 1 841 0 is_stmt 1
 667 024e 94F83C30 		ldrb	r3, [r4, #60]	@ zero_extendqisi2	@ husart_7(D)->Lock, husart_7(D)->Lock
 668              	.LVL52:
 669 0252 012B     		cmp	r3, #1	@ husart_7(D)->Lock,
 670 0254 5ED0     		beq	.L52	@,
 843:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
 671              		.loc 1 843 0 discriminator 2
 672 0256 0023     		movs	r3, #0	@ tmp153,
 673 0258 2364     		str	r3, [r4, #64]	@ tmp153, husart_7(D)->ErrorCode
 844:src/stm32f1xx_hal_usart.c **** 
 674              		.loc 1 844 0 discriminator 2
 675 025a 2223     		movs	r3, #34	@ tmp154,
 841:src/stm32f1xx_hal_usart.c **** 
 676              		.loc 1 841 0 discriminator 2
 677 025c 84F83C00 		strb	r0, [r4, #60]	@ _8, husart_7(D)->Lock
 844:src/stm32f1xx_hal_usart.c **** 
 678              		.loc 1 844 0 discriminator 2
 679 0260 84F83D30 		strb	r3, [r4, #61]	@ tmp154, husart_7(D)->State
 847:src/stm32f1xx_hal_usart.c **** 
 680              		.loc 1 847 0 discriminator 2
 681 0264 FFF7FEFF 		bl	HAL_GetTick	@
 682              	.LVL53:
 849:src/stm32f1xx_hal_usart.c ****     husart->RxXferCount = Size;
 683              		.loc 1 849 0 discriminator 2
 684 0268 A4F83080 		strh	r8, [r4, #48]	@ movhi	@ Size, husart_7(D)->RxXferSize
 850:src/stm32f1xx_hal_usart.c ****     /* Check the remain data to be received */
 685              		.loc 1 850 0 discriminator 2
 686 026c A4F83280 		strh	r8, [r4, #50]	@ movhi	@ Size, husart_7(D)->RxXferCount
 847:src/stm32f1xx_hal_usart.c **** 
 687              		.loc 1 847 0 discriminator 2
 688 0270 0746     		mov	r7, r0	@ tickstart,
 689              	.LVL54:
 891:src/stm32f1xx_hal_usart.c **** 
 690              		.loc 1 891 0 discriminator 2
 691 0272 4FF0FF08 		mov	r8, #255	@ tmp194,
 692              	.LVL55:
 693              	.L41:
 852:src/stm32f1xx_hal_usart.c ****     {
 694              		.loc 1 852 0
 695 0276 608E     		ldrh	r0, [r4, #50]	@, husart_7(D)->RxXferCount
 696 0278 80B2     		uxth	r0, r0	@ _20, husart_7(D)->RxXferCount
 697 027a 30B9     		cbnz	r0, .L48	@ _20,
 912:src/stm32f1xx_hal_usart.c **** 
 698              		.loc 1 912 0
ARM GAS  /tmp/ccpGcYbE.s 			page 64


 699 027c 0123     		movs	r3, #1	@ tmp185,
 915:src/stm32f1xx_hal_usart.c **** 
 700              		.loc 1 915 0
 701 027e 84F83C00 		strb	r0, [r4, #60]	@ _20, husart_7(D)->Lock
 912:src/stm32f1xx_hal_usart.c **** 
 702              		.loc 1 912 0
 703 0282 84F83D30 		strb	r3, [r4, #61]	@ tmp185, husart_7(D)->State
 917:src/stm32f1xx_hal_usart.c ****   }
 704              		.loc 1 917 0
 705 0286 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 706              	.LVL56:
 707              	.L48:
 854:src/stm32f1xx_hal_usart.c ****       if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 708              		.loc 1 854 0
 709 028a 638E     		ldrh	r3, [r4, #50]	@, husart_7(D)->RxXferCount
 858:src/stm32f1xx_hal_usart.c ****         {
 710              		.loc 1 858 0
 711 028c 3A46     		mov	r2, r7	@, tickstart
 854:src/stm32f1xx_hal_usart.c ****       if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 712              		.loc 1 854 0
 713 028e 013B     		subs	r3, r3, #1	@ tmp160, husart_7(D)->RxXferCount,
 714 0290 9BB2     		uxth	r3, r3	@ _22, tmp160
 715 0292 6386     		strh	r3, [r4, #50]	@ movhi	@ _22, husart_7(D)->RxXferCount
 855:src/stm32f1xx_hal_usart.c ****       {
 716              		.loc 1 855 0
 717 0294 A368     		ldr	r3, [r4, #8]	@ husart_7(D)->Init.WordLength, husart_7(D)->Init.WordLength
 858:src/stm32f1xx_hal_usart.c ****         {
 718              		.loc 1 858 0
 719 0296 8021     		movs	r1, #128	@,
 855:src/stm32f1xx_hal_usart.c ****       {
 720              		.loc 1 855 0
 721 0298 B3F5805F 		cmp	r3, #4096	@ husart_7(D)->Init.WordLength,
 858:src/stm32f1xx_hal_usart.c ****         {
 722              		.loc 1 858 0
 723 029c 2046     		mov	r0, r4	@, husart
 724 029e 3346     		mov	r3, r6	@, Timeout
 855:src/stm32f1xx_hal_usart.c ****       {
 725              		.loc 1 855 0
 726 02a0 1ED1     		bne	.L42	@,
 727              	.LVL57:
 858:src/stm32f1xx_hal_usart.c ****         {
 728              		.loc 1 858 0
 729 02a2 FFF7BAFE 		bl	USART_WaitOnFlagUntilTimeout.constprop.4	@
 730              	.LVL58:
 731 02a6 10B1     		cbz	r0, .L43	@,
 732              	.L44:
 860:src/stm32f1xx_hal_usart.c ****         }
 733              		.loc 1 860 0
 734 02a8 0320     		movs	r0, #3	@ <retval>,
 735 02aa BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 736              	.LVL59:
 737              	.L43:
 863:src/stm32f1xx_hal_usart.c **** 
 738              		.loc 1 863 0
 739 02ae 40F2FF12 		movw	r2, #511	@ tmp164,
 740 02b2 2368     		ldr	r3, [r4]	@ _46, husart_7(D)->Instance
 866:src/stm32f1xx_hal_usart.c ****         {
ARM GAS  /tmp/ccpGcYbE.s 			page 65


 741              		.loc 1 866 0
 742 02b4 2021     		movs	r1, #32	@,
 863:src/stm32f1xx_hal_usart.c **** 
 743              		.loc 1 863 0
 744 02b6 5A60     		str	r2, [r3, #4]	@ tmp164, _46->DR
 866:src/stm32f1xx_hal_usart.c ****         {
 745              		.loc 1 866 0
 746 02b8 2046     		mov	r0, r4	@, husart
 747 02ba 3346     		mov	r3, r6	@, Timeout
 748 02bc 3A46     		mov	r2, r7	@, tickstart
 749 02be FFF7ACFE 		bl	USART_WaitOnFlagUntilTimeout.constprop.4	@
 750              	.LVL60:
 751 02c2 0028     		cmp	r0, #0	@
 752 02c4 F0D1     		bne	.L44	@
 753              	.LVL61:
 754 02c6 2368     		ldr	r3, [r4]	@ _51, husart_7(D)->Instance
 871:src/stm32f1xx_hal_usart.c ****         {
 755              		.loc 1 871 0
 756 02c8 2269     		ldr	r2, [r4, #16]	@ husart_7(D)->Init.Parity, husart_7(D)->Init.Parity
 873:src/stm32f1xx_hal_usart.c ****           pRxData += 2U;
 757              		.loc 1 873 0
 758 02ca 5B68     		ldr	r3, [r3, #4]	@ _58,
 871:src/stm32f1xx_hal_usart.c ****         {
 759              		.loc 1 871 0
 760 02cc 22B9     		cbnz	r2, .L45	@ husart_7(D)->Init.Parity,
 873:src/stm32f1xx_hal_usart.c ****           pRxData += 2U;
 761              		.loc 1 873 0
 762 02ce C3F30803 		ubfx	r3, r3, #0, #9	@ tmp168, _58,,
 763 02d2 25F8023B 		strh	r3, [r5], #2	@ movhi	@ tmp168, MEM[(uint16_t *)pRxData_1]
 764              	.LVL62:
 765 02d6 CEE7     		b	.L41	@
 766              	.LVL63:
 767              	.L45:
 878:src/stm32f1xx_hal_usart.c ****           pRxData += 1U;
 768              		.loc 1 878 0
 769 02d8 DBB2     		uxtb	r3, r3	@ _52, _52
 770 02da 25F8013B 		strh	r3, [r5], #1	@ movhi	@ _52, MEM[(uint16_t *)pRxData_1]
 771              	.LVL64:
 772 02de CAE7     		b	.L41	@
 773              	.LVL65:
 774              	.L42:
 885:src/stm32f1xx_hal_usart.c ****         {
 775              		.loc 1 885 0
 776 02e0 FFF79BFE 		bl	USART_WaitOnFlagUntilTimeout.constprop.4	@
 777              	.LVL66:
 778 02e4 0028     		cmp	r0, #0	@
 779 02e6 DFD1     		bne	.L44	@
 891:src/stm32f1xx_hal_usart.c **** 
 780              		.loc 1 891 0
 781 02e8 2368     		ldr	r3, [r4]	@ _28, husart_7(D)->Instance
 894:src/stm32f1xx_hal_usart.c ****         {
 782              		.loc 1 894 0
 783 02ea 3A46     		mov	r2, r7	@, tickstart
 891:src/stm32f1xx_hal_usart.c **** 
 784              		.loc 1 891 0
 785 02ec C3F80480 		str	r8, [r3, #4]	@ tmp194, _28->DR
 894:src/stm32f1xx_hal_usart.c ****         {
ARM GAS  /tmp/ccpGcYbE.s 			page 66


 786              		.loc 1 894 0
 787 02f0 2021     		movs	r1, #32	@,
 788 02f2 3346     		mov	r3, r6	@, Timeout
 789 02f4 2046     		mov	r0, r4	@, husart
 790 02f6 FFF790FE 		bl	USART_WaitOnFlagUntilTimeout.constprop.4	@
 791              	.LVL67:
 792 02fa 0028     		cmp	r0, #0	@
 793 02fc D4D1     		bne	.L44	@
 794 02fe 2368     		ldr	r3, [r4]	@ _39, husart_7(D)->Instance
 898:src/stm32f1xx_hal_usart.c ****         {
 795              		.loc 1 898 0
 796 0300 2169     		ldr	r1, [r4, #16]	@ husart_7(D)->Init.Parity, husart_7(D)->Init.Parity
 797 0302 6A1C     		adds	r2, r5, #1	@ pRxData, pRxData,
 901:src/stm32f1xx_hal_usart.c ****         }
 798              		.loc 1 901 0
 799 0304 5B68     		ldr	r3, [r3, #4]	@ _35,
 898:src/stm32f1xx_hal_usart.c ****         {
 800              		.loc 1 898 0
 801 0306 11B9     		cbnz	r1, .L47	@ husart_7(D)->Init.Parity,
 802              	.LVL68:
 803              	.L53:
 906:src/stm32f1xx_hal_usart.c ****         }
 804              		.loc 1 906 0
 805 0308 2B70     		strb	r3, [r5]	@ tmp181, *pRxData_1
 806 030a 1546     		mov	r5, r2	@ pRxData, pRxData
 807 030c B3E7     		b	.L41	@
 808              	.LVL69:
 809              	.L47:
 810 030e 03F07F03 		and	r3, r3, #127	@ tmp181, _40,
 811 0312 F9E7     		b	.L53	@
 812              	.LVL70:
 813              	.L52:
 921:src/stm32f1xx_hal_usart.c ****   }
 814              		.loc 1 921 0
 815 0314 0220     		movs	r0, #2	@ <retval>,
 816              	.L40:
 923:src/stm32f1xx_hal_usart.c **** 
 817              		.loc 1 923 0
 818 0316 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 819              		.cfi_endproc
 820              	.LFE70:
 821              		.size	HAL_USART_Receive, .-HAL_USART_Receive
 822              		.align	1
 823              		.global	HAL_USART_TransmitReceive
 824              		.syntax unified
 825              		.thumb
 826              		.thumb_func
 827              		.fpu softvfp
 828              		.type	HAL_USART_TransmitReceive, %function
 829              	HAL_USART_TransmitReceive:
 830              	.LFB71:
 939:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 831              		.loc 1 939 0
 832              		.cfi_startproc
 833              		@ args = 4, pretend = 0, frame = 0
 834              		@ frame_needed = 0, uses_anonymous_args = 0
 835              	.LVL71:
ARM GAS  /tmp/ccpGcYbE.s 			page 67


 836 031a 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 837              	.LCFI5:
 838              		.cfi_def_cfa_offset 24
 839              		.cfi_offset 4, -24
 840              		.cfi_offset 5, -20
 841              		.cfi_offset 6, -16
 842              		.cfi_offset 7, -12
 843              		.cfi_offset 8, -8
 844              		.cfi_offset 14, -4
 939:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 845              		.loc 1 939 0
 846 031e 0446     		mov	r4, r0	@ husart, husart
 943:src/stm32f1xx_hal_usart.c ****   {
 847              		.loc 1 943 0
 848 0320 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2	@ husart_9(D)->State, husart_9(D)->State
 849              	.LVL72:
 939:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 850              		.loc 1 939 0
 851 0324 0E46     		mov	r6, r1	@ pTxData, pTxData
 943:src/stm32f1xx_hal_usart.c ****   {
 852              		.loc 1 943 0
 853 0326 C0B2     		uxtb	r0, r0	@ _10, husart_9(D)->State
 854 0328 0128     		cmp	r0, #1	@ _10,
 939:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 855              		.loc 1 939 0
 856 032a 1546     		mov	r5, r2	@ pRxData, pRxData
 857 032c 9846     		mov	r8, r3	@ Size, Size
 943:src/stm32f1xx_hal_usart.c ****   {
 858              		.loc 1 943 0
 859 032e 79D1     		bne	.L70	@,
 945:src/stm32f1xx_hal_usart.c ****     {
 860              		.loc 1 945 0
 861 0330 0029     		cmp	r1, #0	@ pTxData
 862 0332 78D0     		beq	.L55	@
 945:src/stm32f1xx_hal_usart.c ****     {
 863              		.loc 1 945 0 is_stmt 0 discriminator 1
 864 0334 002A     		cmp	r2, #0	@ pRxData
 865 0336 76D0     		beq	.L55	@
 945:src/stm32f1xx_hal_usart.c ****     {
 866              		.loc 1 945 0 discriminator 2
 867 0338 002B     		cmp	r3, #0	@ Size
 868 033a 74D0     		beq	.L55	@
 950:src/stm32f1xx_hal_usart.c **** 
 869              		.loc 1 950 0 is_stmt 1
 870 033c 94F83C30 		ldrb	r3, [r4, #60]	@ zero_extendqisi2	@ husart_9(D)->Lock, husart_9(D)->Lock
 871              	.LVL73:
 872 0340 012B     		cmp	r3, #1	@ husart_9(D)->Lock,
 873 0342 6FD0     		beq	.L70	@,
 952:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
 874              		.loc 1 952 0 discriminator 2
 875 0344 0023     		movs	r3, #0	@ tmp163,
 876 0346 2364     		str	r3, [r4, #64]	@ tmp163, husart_9(D)->ErrorCode
 953:src/stm32f1xx_hal_usart.c **** 
 877              		.loc 1 953 0 discriminator 2
 878 0348 2223     		movs	r3, #34	@ tmp164,
 950:src/stm32f1xx_hal_usart.c **** 
 879              		.loc 1 950 0 discriminator 2
ARM GAS  /tmp/ccpGcYbE.s 			page 68


 880 034a 84F83C00 		strb	r0, [r4, #60]	@ _10, husart_9(D)->Lock
 953:src/stm32f1xx_hal_usart.c **** 
 881              		.loc 1 953 0 discriminator 2
 882 034e 84F83D30 		strb	r3, [r4, #61]	@ tmp164, husart_9(D)->State
 956:src/stm32f1xx_hal_usart.c **** 
 883              		.loc 1 956 0 discriminator 2
 884 0352 FFF7FEFF 		bl	HAL_GetTick	@
 885              	.LVL74:
 886 0356 0746     		mov	r7, r0	@ tickstart,
 887              	.LVL75:
 960:src/stm32f1xx_hal_usart.c ****     husart->RxXferCount = Size;
 888              		.loc 1 960 0 discriminator 2
 889 0358 A4F82A80 		strh	r8, [r4, #42]	@ movhi	@ Size, husart_9(D)->TxXferCount
 958:src/stm32f1xx_hal_usart.c ****     husart->TxXferSize = Size;
 890              		.loc 1 958 0 discriminator 2
 891 035c A4F83080 		strh	r8, [r4, #48]	@ movhi	@ Size, husart_9(D)->RxXferSize
 959:src/stm32f1xx_hal_usart.c ****     husart->TxXferCount = Size;
 892              		.loc 1 959 0 discriminator 2
 893 0360 A4F82880 		strh	r8, [r4, #40]	@ movhi	@ Size, husart_9(D)->TxXferSize
 961:src/stm32f1xx_hal_usart.c **** 
 894              		.loc 1 961 0 discriminator 2
 895 0364 A4F83280 		strh	r8, [r4, #50]	@ movhi	@ Size, husart_9(D)->RxXferCount
 896              	.LVL76:
 897              	.L56:
 964:src/stm32f1xx_hal_usart.c ****     {
 898              		.loc 1 964 0
 899 0368 608D     		ldrh	r0, [r4, #42]	@, husart_9(D)->TxXferCount
 900 036a 80B2     		uxth	r0, r0	@ _25, husart_9(D)->TxXferCount
 901 036c 30B9     		cbnz	r0, .L65	@ _25,
1030:src/stm32f1xx_hal_usart.c **** 
 902              		.loc 1 1030 0
 903 036e 0123     		movs	r3, #1	@ tmp203,
1033:src/stm32f1xx_hal_usart.c **** 
 904              		.loc 1 1033 0
 905 0370 84F83C00 		strb	r0, [r4, #60]	@ _25, husart_9(D)->Lock
1030:src/stm32f1xx_hal_usart.c **** 
 906              		.loc 1 1030 0
 907 0374 84F83D30 		strb	r3, [r4, #61]	@ tmp203, husart_9(D)->State
1035:src/stm32f1xx_hal_usart.c ****   }
 908              		.loc 1 1035 0
 909 0378 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 910              	.LVL77:
 911              	.L65:
 966:src/stm32f1xx_hal_usart.c ****       husart->RxXferCount--;
 912              		.loc 1 966 0
 913 037c 638D     		ldrh	r3, [r4, #42]	@, husart_9(D)->TxXferCount
 971:src/stm32f1xx_hal_usart.c ****         {
 914              		.loc 1 971 0
 915 037e 3A46     		mov	r2, r7	@, tickstart
 966:src/stm32f1xx_hal_usart.c ****       husart->RxXferCount--;
 916              		.loc 1 966 0
 917 0380 013B     		subs	r3, r3, #1	@ tmp172, husart_9(D)->TxXferCount,
 918 0382 9BB2     		uxth	r3, r3	@ _28, tmp172
 919 0384 6385     		strh	r3, [r4, #42]	@ movhi	@ _28, husart_9(D)->TxXferCount
 967:src/stm32f1xx_hal_usart.c ****       if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 920              		.loc 1 967 0
 921 0386 638E     		ldrh	r3, [r4, #50]	@, husart_9(D)->RxXferCount
ARM GAS  /tmp/ccpGcYbE.s 			page 69


 971:src/stm32f1xx_hal_usart.c ****         {
 922              		.loc 1 971 0
 923 0388 8021     		movs	r1, #128	@,
 967:src/stm32f1xx_hal_usart.c ****       if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 924              		.loc 1 967 0
 925 038a 013B     		subs	r3, r3, #1	@ tmp176, husart_9(D)->RxXferCount,
 926 038c 9BB2     		uxth	r3, r3	@ _32, tmp176
 927 038e 6386     		strh	r3, [r4, #50]	@ movhi	@ _32, husart_9(D)->RxXferCount
 968:src/stm32f1xx_hal_usart.c ****       {
 928              		.loc 1 968 0
 929 0390 A368     		ldr	r3, [r4, #8]	@ husart_9(D)->Init.WordLength, husart_9(D)->Init.WordLength
 971:src/stm32f1xx_hal_usart.c ****         {
 930              		.loc 1 971 0
 931 0392 2046     		mov	r0, r4	@, husart
 968:src/stm32f1xx_hal_usart.c ****       {
 932              		.loc 1 968 0
 933 0394 B3F5805F 		cmp	r3, #4096	@ husart_9(D)->Init.WordLength,
 971:src/stm32f1xx_hal_usart.c ****         {
 934              		.loc 1 971 0
 935 0398 069B     		ldr	r3, [sp, #24]	@, Timeout
 968:src/stm32f1xx_hal_usart.c ****       {
 936              		.loc 1 968 0
 937 039a 27D1     		bne	.L57	@,
 938              	.LVL78:
 971:src/stm32f1xx_hal_usart.c ****         {
 939              		.loc 1 971 0
 940 039c FFF73DFE 		bl	USART_WaitOnFlagUntilTimeout.constprop.4	@
 941              	.LVL79:
 942 03a0 10B1     		cbz	r0, .L58	@,
 943              	.LVL80:
 944              	.L61:
 973:src/stm32f1xx_hal_usart.c ****         }
 945              		.loc 1 973 0
 946 03a2 0320     		movs	r0, #3	@ <retval>,
 947 03a4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 948              	.LVL81:
 949              	.L58:
 976:src/stm32f1xx_hal_usart.c ****         if (husart->Init.Parity == USART_PARITY_NONE)
 950              		.loc 1 976 0
 951 03a8 3388     		ldrh	r3, [r6]	@, MEM[(uint16_t *)pTxData_2]
 952 03aa 2268     		ldr	r2, [r4]	@ _59, husart_9(D)->Instance
 953 03ac C3F30803 		ubfx	r3, r3, #0, #9	@ _61, MEM[(uint16_t *)pTxData_2],,
 954 03b0 5360     		str	r3, [r2, #4]	@ _61, _59->DR
 977:src/stm32f1xx_hal_usart.c ****         {
 955              		.loc 1 977 0
 956 03b2 2369     		ldr	r3, [r4, #16]	@ husart_9(D)->Init.Parity, husart_9(D)->Init.Parity
 957 03b4 9BB9     		cbnz	r3, .L59	@ husart_9(D)->Init.Parity,
 979:src/stm32f1xx_hal_usart.c ****         }
 958              		.loc 1 979 0
 959 03b6 06F10208 		add	r8, r6, #2	@ pTxData, pTxData,
 960              	.LVL82:
 961              	.L60:
 987:src/stm32f1xx_hal_usart.c ****         {
 962              		.loc 1 987 0
 963 03ba 069B     		ldr	r3, [sp, #24]	@, Timeout
 964 03bc 3A46     		mov	r2, r7	@, tickstart
 965 03be 2021     		movs	r1, #32	@,
ARM GAS  /tmp/ccpGcYbE.s 			page 70


 966 03c0 2046     		mov	r0, r4	@, husart
 967 03c2 FFF72AFE 		bl	USART_WaitOnFlagUntilTimeout.constprop.4	@
 968              	.LVL83:
 969 03c6 0028     		cmp	r0, #0	@
 970 03c8 EBD1     		bne	.L61	@
 971              	.LVL84:
 972 03ca 2368     		ldr	r3, [r4]	@ _69, husart_9(D)->Instance
 992:src/stm32f1xx_hal_usart.c ****         {
 973              		.loc 1 992 0
 974 03cc 2269     		ldr	r2, [r4, #16]	@ husart_9(D)->Init.Parity, husart_9(D)->Init.Parity
 994:src/stm32f1xx_hal_usart.c ****           pRxData += 2U;
 975              		.loc 1 994 0
 976 03ce 5B68     		ldr	r3, [r3, #4]	@ _76,
 992:src/stm32f1xx_hal_usart.c ****         {
 977              		.loc 1 992 0
 978 03d0 42B9     		cbnz	r2, .L62	@ husart_9(D)->Init.Parity,
 994:src/stm32f1xx_hal_usart.c ****           pRxData += 2U;
 979              		.loc 1 994 0
 980 03d2 C3F30803 		ubfx	r3, r3, #0, #9	@ tmp187, _76,,
 981 03d6 25F8023B 		strh	r3, [r5], #2	@ movhi	@ tmp187, MEM[(uint16_t *)pRxData_3]
 982              	.LVL85:
 983              	.L63:
1025:src/stm32f1xx_hal_usart.c ****         }
 984              		.loc 1 1025 0
 985 03da 4646     		mov	r6, r8	@ pTxData, pTxData
 986 03dc C4E7     		b	.L56	@
 987              	.LVL86:
 988              	.L59:
 983:src/stm32f1xx_hal_usart.c ****         }
 989              		.loc 1 983 0
 990 03de 06F10108 		add	r8, r6, #1	@ pTxData, pTxData,
 991              	.LVL87:
 992 03e2 EAE7     		b	.L60	@
 993              	.LVL88:
 994              	.L62:
 999:src/stm32f1xx_hal_usart.c ****           pRxData += 1U;
 995              		.loc 1 999 0
 996 03e4 DBB2     		uxtb	r3, r3	@ _70, _70
 997 03e6 25F8013B 		strh	r3, [r5], #1	@ movhi	@ _70, MEM[(uint16_t *)pRxData_3]
 998              	.LVL89:
 999 03ea F6E7     		b	.L63	@
 1000              	.LVL90:
 1001              	.L57:
1006:src/stm32f1xx_hal_usart.c ****         {
 1002              		.loc 1 1006 0
 1003 03ec FFF715FE 		bl	USART_WaitOnFlagUntilTimeout.constprop.4	@
 1004              	.LVL91:
 1005 03f0 0028     		cmp	r0, #0	@
 1006 03f2 D6D1     		bne	.L61	@
1010:src/stm32f1xx_hal_usart.c **** 
 1007              		.loc 1 1010 0
 1008 03f4 2368     		ldr	r3, [r4]	@ _38, husart_9(D)->Instance
 1009 03f6 3278     		ldrb	r2, [r6]	@ zero_extendqisi2	@ _41, *pTxData_2
1013:src/stm32f1xx_hal_usart.c ****         {
 1010              		.loc 1 1013 0
 1011 03f8 2021     		movs	r1, #32	@,
1010:src/stm32f1xx_hal_usart.c **** 
ARM GAS  /tmp/ccpGcYbE.s 			page 71


 1012              		.loc 1 1010 0
 1013 03fa 5A60     		str	r2, [r3, #4]	@ _41, _38->DR
1013:src/stm32f1xx_hal_usart.c ****         {
 1014              		.loc 1 1013 0
 1015 03fc 2046     		mov	r0, r4	@, husart
 1016 03fe 069B     		ldr	r3, [sp, #24]	@, Timeout
 1017 0400 3A46     		mov	r2, r7	@, tickstart
1010:src/stm32f1xx_hal_usart.c **** 
 1018              		.loc 1 1010 0
 1019 0402 06F10108 		add	r8, r6, #1	@ pTxData, pTxData,
 1020              	.LVL92:
1013:src/stm32f1xx_hal_usart.c ****         {
 1021              		.loc 1 1013 0
 1022 0406 FFF708FE 		bl	USART_WaitOnFlagUntilTimeout.constprop.4	@
 1023              	.LVL93:
 1024 040a 0028     		cmp	r0, #0	@
 1025 040c C9D1     		bne	.L61	@
 1026 040e 2368     		ldr	r3, [r4]	@ _52, husart_9(D)->Instance
1017:src/stm32f1xx_hal_usart.c ****         {
 1027              		.loc 1 1017 0
 1028 0410 2169     		ldr	r1, [r4, #16]	@ husart_9(D)->Init.Parity, husart_9(D)->Init.Parity
 1029 0412 6A1C     		adds	r2, r5, #1	@ pRxData, pRxData,
1020:src/stm32f1xx_hal_usart.c ****         }
 1030              		.loc 1 1020 0
 1031 0414 5B68     		ldr	r3, [r3, #4]	@ _48,
1017:src/stm32f1xx_hal_usart.c ****         {
 1032              		.loc 1 1017 0
 1033 0416 11B9     		cbnz	r1, .L64	@ husart_9(D)->Init.Parity,
 1034              	.LVL94:
 1035              	.L71:
1025:src/stm32f1xx_hal_usart.c ****         }
 1036              		.loc 1 1025 0
 1037 0418 2B70     		strb	r3, [r5]	@ tmp199, *pRxData_3
 1038 041a 1546     		mov	r5, r2	@ pRxData, pRxData
 1039 041c DDE7     		b	.L63	@
 1040              	.LVL95:
 1041              	.L64:
 1042 041e 03F07F03 		and	r3, r3, #127	@ tmp199, _53,
 1043 0422 F9E7     		b	.L71	@
 1044              	.LVL96:
 1045              	.L70:
1039:src/stm32f1xx_hal_usart.c ****   }
 1046              		.loc 1 1039 0
 1047 0424 0220     		movs	r0, #2	@ <retval>,
 1048              	.L55:
1041:src/stm32f1xx_hal_usart.c **** 
 1049              		.loc 1 1041 0
 1050 0426 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1051              		.cfi_endproc
 1052              	.LFE71:
 1053              		.size	HAL_USART_TransmitReceive, .-HAL_USART_TransmitReceive
 1054              		.align	1
 1055              		.global	HAL_USART_Transmit_IT
 1056              		.syntax unified
 1057              		.thumb
 1058              		.thumb_func
 1059              		.fpu softvfp
ARM GAS  /tmp/ccpGcYbE.s 			page 72


 1060              		.type	HAL_USART_Transmit_IT, %function
 1061              	HAL_USART_Transmit_IT:
 1062              	.LFB72:
1056:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
 1063              		.loc 1 1056 0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 0
 1066              		@ frame_needed = 0, uses_anonymous_args = 0
 1067              	.LVL97:
1057:src/stm32f1xx_hal_usart.c ****   {
 1068              		.loc 1 1057 0
 1069 042a 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2	@ husart_4(D)->State, husart_4(D)->State
1056:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
 1070              		.loc 1 1056 0
 1071 042e 10B5     		push	{r4, lr}	@
 1072              	.LCFI6:
 1073              		.cfi_def_cfa_offset 8
 1074              		.cfi_offset 4, -8
 1075              		.cfi_offset 14, -4
1056:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
 1076              		.loc 1 1056 0
 1077 0430 0446     		mov	r4, r0	@ husart, husart
1057:src/stm32f1xx_hal_usart.c ****   {
 1078              		.loc 1 1057 0
 1079 0432 D8B2     		uxtb	r0, r3	@ _5, husart_4(D)->State
 1080              	.LVL98:
 1081 0434 0128     		cmp	r0, #1	@ _5,
 1082 0436 15D1     		bne	.L77	@,
1059:src/stm32f1xx_hal_usart.c ****     {
 1083              		.loc 1 1059 0
 1084 0438 A9B1     		cbz	r1, .L73	@ pTxData,
1059:src/stm32f1xx_hal_usart.c ****     {
 1085              		.loc 1 1059 0 is_stmt 0 discriminator 1
 1086 043a A2B1     		cbz	r2, .L73	@ Size,
1065:src/stm32f1xx_hal_usart.c **** 
 1087              		.loc 1 1065 0 is_stmt 1
 1088 043c 94F83C30 		ldrb	r3, [r4, #60]	@ zero_extendqisi2	@ husart_4(D)->Lock, husart_4(D)->Lock
 1089 0440 012B     		cmp	r3, #1	@ husart_4(D)->Lock,
 1090 0442 0FD0     		beq	.L77	@,
1069:src/stm32f1xx_hal_usart.c **** 
 1091              		.loc 1 1069 0 discriminator 2
 1092 0444 6285     		strh	r2, [r4, #42]	@ movhi	@ Size, husart_4(D)->TxXferCount
1068:src/stm32f1xx_hal_usart.c ****     husart->TxXferCount = Size;
 1093              		.loc 1 1068 0 discriminator 2
 1094 0446 2285     		strh	r2, [r4, #40]	@ movhi	@ Size, husart_4(D)->TxXferSize
1071:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX;
 1095              		.loc 1 1071 0 discriminator 2
 1096 0448 0020     		movs	r0, #0	@ tmp125,
1072:src/stm32f1xx_hal_usart.c **** 
 1097              		.loc 1 1072 0 discriminator 2
 1098 044a 1222     		movs	r2, #18	@ tmp126,
 1099              	.LVL99:
1067:src/stm32f1xx_hal_usart.c ****     husart->TxXferSize = Size;
 1100              		.loc 1 1067 0 discriminator 2
 1101 044c 6162     		str	r1, [r4, #36]	@ pTxData, husart_4(D)->pTxBuffPtr
1086:src/stm32f1xx_hal_usart.c **** 
 1102              		.loc 1 1086 0 discriminator 2
ARM GAS  /tmp/ccpGcYbE.s 			page 73


 1103 044e 2168     		ldr	r1, [r4]	@ _15, husart_4(D)->Instance
 1104              	.LVL100:
1071:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX;
 1105              		.loc 1 1071 0 discriminator 2
 1106 0450 2064     		str	r0, [r4, #64]	@ tmp125, husart_4(D)->ErrorCode
 1107              	.LVL101:
1072:src/stm32f1xx_hal_usart.c **** 
 1108              		.loc 1 1072 0 discriminator 2
 1109 0452 84F83D20 		strb	r2, [r4, #61]	@ tmp126, husart_4(D)->State
1086:src/stm32f1xx_hal_usart.c **** 
 1110              		.loc 1 1086 0 discriminator 2
 1111 0456 CA68     		ldr	r2, [r1, #12]	@ _16, _15->CR1
1083:src/stm32f1xx_hal_usart.c **** 
 1112              		.loc 1 1083 0 discriminator 2
 1113 0458 84F83C00 		strb	r0, [r4, #60]	@ tmp125, husart_4(D)->Lock
1086:src/stm32f1xx_hal_usart.c **** 
 1114              		.loc 1 1086 0 discriminator 2
 1115 045c 42F08002 		orr	r2, r2, #128	@ _17, _16,
 1116 0460 CA60     		str	r2, [r1, #12]	@ _17, _15->CR1
1088:src/stm32f1xx_hal_usart.c ****   }
 1117              		.loc 1 1088 0 discriminator 2
 1118 0462 10BD     		pop	{r4, pc}	@
 1119              	.LVL102:
 1120              	.L77:
1092:src/stm32f1xx_hal_usart.c ****   }
 1121              		.loc 1 1092 0
 1122 0464 0220     		movs	r0, #2	@ <retval>,
 1123              	.L73:
1094:src/stm32f1xx_hal_usart.c **** 
 1124              		.loc 1 1094 0
 1125 0466 10BD     		pop	{r4, pc}	@
 1126              		.cfi_endproc
 1127              	.LFE72:
 1128              		.size	HAL_USART_Transmit_IT, .-HAL_USART_Transmit_IT
 1129              		.align	1
 1130              		.global	HAL_USART_Receive_IT
 1131              		.syntax unified
 1132              		.thumb
 1133              		.thumb_func
 1134              		.fpu softvfp
 1135              		.type	HAL_USART_Receive_IT, %function
 1136              	HAL_USART_Receive_IT:
 1137              	.LFB73:
1109:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
 1138              		.loc 1 1109 0
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 0
 1141              		@ frame_needed = 0, uses_anonymous_args = 0
 1142              	.LVL103:
1110:src/stm32f1xx_hal_usart.c ****   {
 1143              		.loc 1 1110 0
 1144 0468 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2	@ husart_4(D)->State, husart_4(D)->State
1109:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
 1145              		.loc 1 1109 0
 1146 046c 10B5     		push	{r4, lr}	@
 1147              	.LCFI7:
 1148              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccpGcYbE.s 			page 74


 1149              		.cfi_offset 4, -8
 1150              		.cfi_offset 14, -4
1109:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
 1151              		.loc 1 1109 0
 1152 046e 0446     		mov	r4, r0	@ husart, husart
1110:src/stm32f1xx_hal_usart.c ****   {
 1153              		.loc 1 1110 0
 1154 0470 D8B2     		uxtb	r0, r3	@ _5, husart_4(D)->State
 1155              	.LVL104:
 1156 0472 0128     		cmp	r0, #1	@ _5,
 1157 0474 1CD1     		bne	.L83	@,
1112:src/stm32f1xx_hal_usart.c ****     {
 1158              		.loc 1 1112 0
 1159 0476 E1B1     		cbz	r1, .L79	@ pRxData,
1112:src/stm32f1xx_hal_usart.c ****     {
 1160              		.loc 1 1112 0 is_stmt 0 discriminator 1
 1161 0478 DAB1     		cbz	r2, .L79	@ Size,
1117:src/stm32f1xx_hal_usart.c **** 
 1162              		.loc 1 1117 0 is_stmt 1
 1163 047a 94F83C30 		ldrb	r3, [r4, #60]	@ zero_extendqisi2	@ husart_4(D)->Lock, husart_4(D)->Lock
 1164 047e 012B     		cmp	r3, #1	@ husart_4(D)->Lock,
 1165 0480 16D0     		beq	.L83	@,
1121:src/stm32f1xx_hal_usart.c **** 
 1166              		.loc 1 1121 0 discriminator 2
 1167 0482 6286     		strh	r2, [r4, #50]	@ movhi	@ Size, husart_4(D)->RxXferCount
1120:src/stm32f1xx_hal_usart.c ****     husart->RxXferCount = Size;
 1168              		.loc 1 1120 0 discriminator 2
 1169 0484 2286     		strh	r2, [r4, #48]	@ movhi	@ Size, husart_4(D)->RxXferSize
1123:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
 1170              		.loc 1 1123 0 discriminator 2
 1171 0486 0020     		movs	r0, #0	@ tmp127,
1124:src/stm32f1xx_hal_usart.c **** 
 1172              		.loc 1 1124 0 discriminator 2
 1173 0488 2222     		movs	r2, #34	@ tmp128,
 1174              	.LVL105:
1123:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
 1175              		.loc 1 1123 0 discriminator 2
 1176 048a 2064     		str	r0, [r4, #64]	@ tmp127, husart_4(D)->ErrorCode
 1177              	.LVL106:
1124:src/stm32f1xx_hal_usart.c **** 
 1178              		.loc 1 1124 0 discriminator 2
 1179 048c 84F83D20 		strb	r2, [r4, #61]	@ tmp128, husart_4(D)->State
1130:src/stm32f1xx_hal_usart.c **** 
 1180              		.loc 1 1130 0 discriminator 2
 1181 0490 2268     		ldr	r2, [r4]	@ _15, husart_4(D)->Instance
1119:src/stm32f1xx_hal_usart.c ****     husart->RxXferSize = Size;
 1182              		.loc 1 1119 0 discriminator 2
 1183 0492 E162     		str	r1, [r4, #44]	@ pRxData, husart_4(D)->pRxBuffPtr
1130:src/stm32f1xx_hal_usart.c **** 
 1184              		.loc 1 1130 0 discriminator 2
 1185 0494 D168     		ldr	r1, [r2, #12]	@ _16, _15->CR1
 1186              	.LVL107:
1127:src/stm32f1xx_hal_usart.c **** 
 1187              		.loc 1 1127 0 discriminator 2
 1188 0496 84F83C00 		strb	r0, [r4, #60]	@ tmp127, husart_4(D)->Lock
1130:src/stm32f1xx_hal_usart.c **** 
 1189              		.loc 1 1130 0 discriminator 2
ARM GAS  /tmp/ccpGcYbE.s 			page 75


 1190 049a 41F49071 		orr	r1, r1, #288	@ _17, _16,
 1191 049e D160     		str	r1, [r2, #12]	@ _17, _15->CR1
1133:src/stm32f1xx_hal_usart.c **** 
 1192              		.loc 1 1133 0 discriminator 2
 1193 04a0 5169     		ldr	r1, [r2, #20]	@ _19, _15->CR3
 1194 04a2 41F00101 		orr	r1, r1, #1	@ _20, _19,
 1195 04a6 5161     		str	r1, [r2, #20]	@ _20, _15->CR3
1136:src/stm32f1xx_hal_usart.c **** 
 1196              		.loc 1 1136 0 discriminator 2
 1197 04a8 40F2FF11 		movw	r1, #511	@ tmp132,
 1198 04ac 5160     		str	r1, [r2, #4]	@ tmp132, _15->DR
1138:src/stm32f1xx_hal_usart.c ****   }
 1199              		.loc 1 1138 0 discriminator 2
 1200 04ae 10BD     		pop	{r4, pc}	@
 1201              	.LVL108:
 1202              	.L83:
1142:src/stm32f1xx_hal_usart.c ****   }
 1203              		.loc 1 1142 0
 1204 04b0 0220     		movs	r0, #2	@ <retval>,
 1205              	.L79:
1144:src/stm32f1xx_hal_usart.c **** 
 1206              		.loc 1 1144 0
 1207 04b2 10BD     		pop	{r4, pc}	@
 1208              		.cfi_endproc
 1209              	.LFE73:
 1210              		.size	HAL_USART_Receive_IT, .-HAL_USART_Receive_IT
 1211              		.align	1
 1212              		.global	HAL_USART_TransmitReceive_IT
 1213              		.syntax unified
 1214              		.thumb
 1215              		.thumb_func
 1216              		.fpu softvfp
 1217              		.type	HAL_USART_TransmitReceive_IT, %function
 1218              	HAL_USART_TransmitReceive_IT:
 1219              	.LFB74:
1159:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
 1220              		.loc 1 1159 0
 1221              		.cfi_startproc
 1222              		@ args = 0, pretend = 0, frame = 0
 1223              		@ frame_needed = 0, uses_anonymous_args = 0
 1224              	.LVL109:
 1225 04b4 30B5     		push	{r4, r5, lr}	@
 1226              	.LCFI8:
 1227              		.cfi_def_cfa_offset 12
 1228              		.cfi_offset 4, -12
 1229              		.cfi_offset 5, -8
 1230              		.cfi_offset 14, -4
1160:src/stm32f1xx_hal_usart.c ****   {
 1231              		.loc 1 1160 0
 1232 04b6 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2	@ husart_4(D)->State, husart_4(D)->State
1159:src/stm32f1xx_hal_usart.c ****   if (husart->State == HAL_USART_STATE_READY)
 1233              		.loc 1 1159 0
 1234 04ba 0546     		mov	r5, r0	@ husart, husart
1160:src/stm32f1xx_hal_usart.c ****   {
 1235              		.loc 1 1160 0
 1236 04bc E0B2     		uxtb	r0, r4	@ _5, husart_4(D)->State
 1237              	.LVL110:
ARM GAS  /tmp/ccpGcYbE.s 			page 76


 1238 04be 0128     		cmp	r0, #1	@ _5,
 1239 04c0 25D1     		bne	.L90	@,
1162:src/stm32f1xx_hal_usart.c ****     {
 1240              		.loc 1 1162 0
 1241 04c2 29B3     		cbz	r1, .L85	@ pTxData,
1162:src/stm32f1xx_hal_usart.c ****     {
 1242              		.loc 1 1162 0 is_stmt 0 discriminator 1
 1243 04c4 22B3     		cbz	r2, .L85	@ pRxData,
1162:src/stm32f1xx_hal_usart.c ****     {
 1244              		.loc 1 1162 0 discriminator 2
 1245 04c6 1BB3     		cbz	r3, .L85	@ Size,
1167:src/stm32f1xx_hal_usart.c **** 
 1246              		.loc 1 1167 0 is_stmt 1
 1247 04c8 95F83C00 		ldrb	r0, [r5, #60]	@ zero_extendqisi2	@ husart_4(D)->Lock, husart_4(D)->Lock
 1248 04cc 0128     		cmp	r0, #1	@ husart_4(D)->Lock,
 1249 04ce 1ED0     		beq	.L90	@,
1169:src/stm32f1xx_hal_usart.c ****     husart->RxXferSize = Size;
 1250              		.loc 1 1169 0 discriminator 2
 1251 04d0 EA62     		str	r2, [r5, #44]	@ pRxData, husart_4(D)->pRxBuffPtr
1176:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX_RX;
 1252              		.loc 1 1176 0 discriminator 2
 1253 04d2 0020     		movs	r0, #0	@ tmp134,
1177:src/stm32f1xx_hal_usart.c **** 
 1254              		.loc 1 1177 0 discriminator 2
 1255 04d4 3222     		movs	r2, #50	@ tmp135,
 1256              	.LVL111:
1171:src/stm32f1xx_hal_usart.c ****     husart->pTxBuffPtr = pTxData;
 1257              		.loc 1 1171 0 discriminator 2
 1258 04d6 6B86     		strh	r3, [r5, #50]	@ movhi	@ Size, husart_4(D)->RxXferCount
1174:src/stm32f1xx_hal_usart.c **** 
 1259              		.loc 1 1174 0 discriminator 2
 1260 04d8 6B85     		strh	r3, [r5, #42]	@ movhi	@ Size, husart_4(D)->TxXferCount
1176:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX_RX;
 1261              		.loc 1 1176 0 discriminator 2
 1262 04da 2864     		str	r0, [r5, #64]	@ tmp134, husart_4(D)->ErrorCode
1177:src/stm32f1xx_hal_usart.c **** 
 1263              		.loc 1 1177 0 discriminator 2
 1264 04dc 85F83D20 		strb	r2, [r5, #61]	@ tmp135, husart_4(D)->State
1183:src/stm32f1xx_hal_usart.c **** 
 1265              		.loc 1 1183 0 discriminator 2
 1266 04e0 2A68     		ldr	r2, [r5]	@ _19, husart_4(D)->Instance
1172:src/stm32f1xx_hal_usart.c ****     husart->TxXferSize = Size;
 1267              		.loc 1 1172 0 discriminator 2
 1268 04e2 6962     		str	r1, [r5, #36]	@ pTxData, husart_4(D)->pTxBuffPtr
1183:src/stm32f1xx_hal_usart.c **** 
 1269              		.loc 1 1183 0 discriminator 2
 1270 04e4 D168     		ldr	r1, [r2, #12]	@ _20, _19->CR1
 1271              	.LVL112:
1170:src/stm32f1xx_hal_usart.c ****     husart->RxXferCount = Size;
 1272              		.loc 1 1170 0 discriminator 2
 1273 04e6 2B86     		strh	r3, [r5, #48]	@ movhi	@ Size, husart_4(D)->RxXferSize
1183:src/stm32f1xx_hal_usart.c **** 
 1274              		.loc 1 1183 0 discriminator 2
 1275 04e8 41F02001 		orr	r1, r1, #32	@ _21, _20,
1173:src/stm32f1xx_hal_usart.c ****     husart->TxXferCount = Size;
 1276              		.loc 1 1173 0 discriminator 2
 1277 04ec 2B85     		strh	r3, [r5, #40]	@ movhi	@ Size, husart_4(D)->TxXferSize
ARM GAS  /tmp/ccpGcYbE.s 			page 77


1180:src/stm32f1xx_hal_usart.c **** 
 1278              		.loc 1 1180 0 discriminator 2
 1279 04ee 85F83C00 		strb	r0, [r5, #60]	@ tmp134, husart_4(D)->Lock
1183:src/stm32f1xx_hal_usart.c **** 
 1280              		.loc 1 1183 0 discriminator 2
 1281 04f2 D160     		str	r1, [r2, #12]	@ _21, _19->CR1
1186:src/stm32f1xx_hal_usart.c **** 
 1282              		.loc 1 1186 0 discriminator 2
 1283 04f4 D168     		ldr	r1, [r2, #12]	@ _23, _19->CR1
 1284 04f6 41F48071 		orr	r1, r1, #256	@ _24, _23,
 1285 04fa D160     		str	r1, [r2, #12]	@ _24, _19->CR1
1189:src/stm32f1xx_hal_usart.c **** 
 1286              		.loc 1 1189 0 discriminator 2
 1287 04fc 5169     		ldr	r1, [r2, #20]	@ _26, _19->CR3
 1288 04fe 41F00101 		orr	r1, r1, #1	@ _27, _26,
 1289 0502 5161     		str	r1, [r2, #20]	@ _27, _19->CR3
1192:src/stm32f1xx_hal_usart.c **** 
 1290              		.loc 1 1192 0 discriminator 2
 1291 0504 D168     		ldr	r1, [r2, #12]	@ _29, _19->CR1
 1292 0506 41F08001 		orr	r1, r1, #128	@ _30, _29,
 1293 050a D160     		str	r1, [r2, #12]	@ _30, _19->CR1
1194:src/stm32f1xx_hal_usart.c ****   }
 1294              		.loc 1 1194 0 discriminator 2
 1295 050c 30BD     		pop	{r4, r5, pc}	@
 1296              	.LVL113:
 1297              	.L90:
1198:src/stm32f1xx_hal_usart.c ****   }
 1298              		.loc 1 1198 0
 1299 050e 0220     		movs	r0, #2	@ <retval>,
 1300              	.L85:
1200:src/stm32f1xx_hal_usart.c **** 
 1301              		.loc 1 1200 0
 1302 0510 30BD     		pop	{r4, r5, pc}	@
 1303              		.cfi_endproc
 1304              	.LFE74:
 1305              		.size	HAL_USART_TransmitReceive_IT, .-HAL_USART_TransmitReceive_IT
 1306              		.align	1
 1307              		.global	HAL_USART_Transmit_DMA
 1308              		.syntax unified
 1309              		.thumb
 1310              		.thumb_func
 1311              		.fpu softvfp
 1312              		.type	HAL_USART_Transmit_DMA, %function
 1313              	HAL_USART_Transmit_DMA:
 1314              	.LFB75:
1214:src/stm32f1xx_hal_usart.c ****   uint32_t *tmp;
 1315              		.loc 1 1214 0
 1316              		.cfi_startproc
 1317              		@ args = 0, pretend = 0, frame = 0
 1318              		@ frame_needed = 0, uses_anonymous_args = 0
 1319              	.LVL114:
 1320 0512 38B5     		push	{r3, r4, r5, lr}	@
 1321              	.LCFI9:
 1322              		.cfi_def_cfa_offset 16
 1323              		.cfi_offset 3, -16
 1324              		.cfi_offset 4, -12
 1325              		.cfi_offset 5, -8
ARM GAS  /tmp/ccpGcYbE.s 			page 78


 1326              		.cfi_offset 14, -4
1214:src/stm32f1xx_hal_usart.c ****   uint32_t *tmp;
 1327              		.loc 1 1214 0
 1328 0514 0546     		mov	r5, r0	@ husart, husart
1217:src/stm32f1xx_hal_usart.c ****   {
 1329              		.loc 1 1217 0
 1330 0516 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2	@ husart_4(D)->State, husart_4(D)->State
 1331              	.LVL115:
1214:src/stm32f1xx_hal_usart.c ****   uint32_t *tmp;
 1332              		.loc 1 1214 0
 1333 051a 1346     		mov	r3, r2	@ Size, Size
1217:src/stm32f1xx_hal_usart.c ****   {
 1334              		.loc 1 1217 0
 1335 051c C0B2     		uxtb	r0, r0	@ _5, husart_4(D)->State
 1336 051e 0128     		cmp	r0, #1	@ _5,
 1337 0520 27D1     		bne	.L96	@,
1219:src/stm32f1xx_hal_usart.c ****     {
 1338              		.loc 1 1219 0
 1339 0522 39B3     		cbz	r1, .L92	@ pTxData,
1219:src/stm32f1xx_hal_usart.c ****     {
 1340              		.loc 1 1219 0 is_stmt 0 discriminator 1
 1341 0524 32B3     		cbz	r2, .L92	@ Size,
1224:src/stm32f1xx_hal_usart.c **** 
 1342              		.loc 1 1224 0 is_stmt 1
 1343 0526 95F83C20 		ldrb	r2, [r5, #60]	@ zero_extendqisi2	@ husart_4(D)->Lock, husart_4(D)->Lock
 1344              	.LVL116:
 1345 052a 012A     		cmp	r2, #1	@ husart_4(D)->Lock,
 1346 052c 21D0     		beq	.L96	@,
1230:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX;
 1347              		.loc 1 1230 0 discriminator 2
 1348 052e 0024     		movs	r4, #0	@ tmp133,
1231:src/stm32f1xx_hal_usart.c **** 
 1349              		.loc 1 1231 0 discriminator 2
 1350 0530 1222     		movs	r2, #18	@ tmp134,
1228:src/stm32f1xx_hal_usart.c **** 
 1351              		.loc 1 1228 0 discriminator 2
 1352 0532 6B85     		strh	r3, [r5, #42]	@ movhi	@ Size, husart_4(D)->TxXferCount
1224:src/stm32f1xx_hal_usart.c **** 
 1353              		.loc 1 1224 0 discriminator 2
 1354 0534 85F83C00 		strb	r0, [r5, #60]	@ _5, husart_4(D)->Lock
1230:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX;
 1355              		.loc 1 1230 0 discriminator 2
 1356 0538 2C64     		str	r4, [r5, #64]	@ tmp133, husart_4(D)->ErrorCode
1234:src/stm32f1xx_hal_usart.c **** 
 1357              		.loc 1 1234 0 discriminator 2
 1358 053a 686B     		ldr	r0, [r5, #52]	@ _14, husart_4(D)->hdmatx
1231:src/stm32f1xx_hal_usart.c **** 
 1359              		.loc 1 1231 0 discriminator 2
 1360 053c 85F83D20 		strb	r2, [r5, #61]	@ tmp134, husart_4(D)->State
1234:src/stm32f1xx_hal_usart.c **** 
 1361              		.loc 1 1234 0 discriminator 2
 1362 0540 0D4A     		ldr	r2, .L97	@ tmp136,
1227:src/stm32f1xx_hal_usart.c ****     husart->TxXferCount = Size;
 1363              		.loc 1 1227 0 discriminator 2
 1364 0542 2B85     		strh	r3, [r5, #40]	@ movhi	@ Size, husart_4(D)->TxXferSize
1226:src/stm32f1xx_hal_usart.c ****     husart->TxXferSize = Size;
 1365              		.loc 1 1226 0 discriminator 2
ARM GAS  /tmp/ccpGcYbE.s 			page 79


 1366 0544 6962     		str	r1, [r5, #36]	@ pTxData, husart_4(D)->pTxBuffPtr
1234:src/stm32f1xx_hal_usart.c **** 
 1367              		.loc 1 1234 0 discriminator 2
 1368 0546 8262     		str	r2, [r0, #40]	@ tmp136, _14->XferCpltCallback
1237:src/stm32f1xx_hal_usart.c **** 
 1369              		.loc 1 1237 0 discriminator 2
 1370 0548 0C4A     		ldr	r2, .L97+4	@ tmp137,
1243:src/stm32f1xx_hal_usart.c **** 
 1371              		.loc 1 1243 0 discriminator 2
 1372 054a 4463     		str	r4, [r0, #52]	@ tmp133, _14->XferAbortCallback
 1373              	.LVL117:
1237:src/stm32f1xx_hal_usart.c **** 
 1374              		.loc 1 1237 0 discriminator 2
 1375 054c C262     		str	r2, [r0, #44]	@ tmp137, _14->XferHalfCpltCallback
1240:src/stm32f1xx_hal_usart.c **** 
 1376              		.loc 1 1240 0 discriminator 2
 1377 054e 0C4A     		ldr	r2, .L97+8	@ tmp138,
 1378 0550 0263     		str	r2, [r0, #48]	@ tmp138, _14->XferErrorCallback
1247:src/stm32f1xx_hal_usart.c **** 
 1379              		.loc 1 1247 0 discriminator 2
 1380 0552 2A68     		ldr	r2, [r5]	@ husart_4(D)->Instance, husart_4(D)->Instance
 1381 0554 0432     		adds	r2, r2, #4	@, husart_4(D)->Instance,
 1382 0556 FFF7FEFF 		bl	HAL_DMA_Start_IT	@
 1383              	.LVL118:
1250:src/stm32f1xx_hal_usart.c **** 
 1384              		.loc 1 1250 0 discriminator 2
 1385 055a 6FF04002 		mvn	r2, #64	@ tmp142,
 1386 055e 2B68     		ldr	r3, [r5]	@ _25, husart_4(D)->Instance
1259:src/stm32f1xx_hal_usart.c ****   }
 1387              		.loc 1 1259 0 discriminator 2
 1388 0560 2046     		mov	r0, r4	@ <retval>, tmp133
1250:src/stm32f1xx_hal_usart.c **** 
 1389              		.loc 1 1250 0 discriminator 2
 1390 0562 1A60     		str	r2, [r3]	@ tmp142, _25->SR
1257:src/stm32f1xx_hal_usart.c **** 
 1391              		.loc 1 1257 0 discriminator 2
 1392 0564 5A69     		ldr	r2, [r3, #20]	@ _28, _25->CR3
1253:src/stm32f1xx_hal_usart.c **** 
 1393              		.loc 1 1253 0 discriminator 2
 1394 0566 85F83C40 		strb	r4, [r5, #60]	@ tmp133, husart_4(D)->Lock
1257:src/stm32f1xx_hal_usart.c **** 
 1395              		.loc 1 1257 0 discriminator 2
 1396 056a 42F08002 		orr	r2, r2, #128	@ _29, _28,
 1397 056e 5A61     		str	r2, [r3, #20]	@ _29, _25->CR3
1259:src/stm32f1xx_hal_usart.c ****   }
 1398              		.loc 1 1259 0 discriminator 2
 1399 0570 38BD     		pop	{r3, r4, r5, pc}	@
 1400              	.LVL119:
 1401              	.L96:
1263:src/stm32f1xx_hal_usart.c ****   }
 1402              		.loc 1 1263 0
 1403 0572 0220     		movs	r0, #2	@ <retval>,
 1404              	.L92:
1265:src/stm32f1xx_hal_usart.c **** 
 1405              		.loc 1 1265 0
 1406 0574 38BD     		pop	{r3, r4, r5, pc}	@
 1407              	.LVL120:
ARM GAS  /tmp/ccpGcYbE.s 			page 80


 1408              	.L98:
 1409 0576 00BF     		.align	2
 1410              	.L97:
 1411 0578 00000000 		.word	USART_DMATransmitCplt
 1412 057c 00000000 		.word	USART_DMATxHalfCplt
 1413 0580 00000000 		.word	USART_DMAError
 1414              		.cfi_endproc
 1415              	.LFE75:
 1416              		.size	HAL_USART_Transmit_DMA, .-HAL_USART_Transmit_DMA
 1417              		.align	1
 1418              		.global	HAL_USART_Receive_DMA
 1419              		.syntax unified
 1420              		.thumb
 1421              		.thumb_func
 1422              		.fpu softvfp
 1423              		.type	HAL_USART_Receive_DMA, %function
 1424              	HAL_USART_Receive_DMA:
 1425              	.LFB76:
1281:src/stm32f1xx_hal_usart.c ****   uint32_t *tmp;
 1426              		.loc 1 1281 0
 1427              		.cfi_startproc
 1428              		@ args = 0, pretend = 0, frame = 8
 1429              		@ frame_needed = 0, uses_anonymous_args = 0
 1430              	.LVL121:
 1431 0584 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}	@
 1432              	.LCFI10:
 1433              		.cfi_def_cfa_offset 32
 1434              		.cfi_offset 4, -20
 1435              		.cfi_offset 5, -16
 1436              		.cfi_offset 6, -12
 1437              		.cfi_offset 7, -8
 1438              		.cfi_offset 14, -4
1281:src/stm32f1xx_hal_usart.c ****   uint32_t *tmp;
 1439              		.loc 1 1281 0
 1440 0586 0546     		mov	r5, r0	@ husart, husart
1284:src/stm32f1xx_hal_usart.c ****   {
 1441              		.loc 1 1284 0
 1442 0588 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2	@ husart_4(D)->State, husart_4(D)->State
 1443              	.LVL122:
1281:src/stm32f1xx_hal_usart.c ****   uint32_t *tmp;
 1444              		.loc 1 1281 0
 1445 058c 0E46     		mov	r6, r1	@ pRxData, pRxData
1284:src/stm32f1xx_hal_usart.c ****   {
 1446              		.loc 1 1284 0
 1447 058e C0B2     		uxtb	r0, r0	@ _5, husart_4(D)->State
 1448 0590 0128     		cmp	r0, #1	@ _5,
1281:src/stm32f1xx_hal_usart.c ****   uint32_t *tmp;
 1449              		.loc 1 1281 0
 1450 0592 1746     		mov	r7, r2	@ Size, Size
1284:src/stm32f1xx_hal_usart.c ****   {
 1451              		.loc 1 1284 0
 1452 0594 48D1     		bne	.L104	@,
1286:src/stm32f1xx_hal_usart.c ****     {
 1453              		.loc 1 1286 0
 1454 0596 0029     		cmp	r1, #0	@ pRxData
 1455 0598 44D0     		beq	.L100	@
1286:src/stm32f1xx_hal_usart.c ****     {
ARM GAS  /tmp/ccpGcYbE.s 			page 81


 1456              		.loc 1 1286 0 is_stmt 0 discriminator 1
 1457 059a 002A     		cmp	r2, #0	@ Size
 1458 059c 42D0     		beq	.L100	@
1292:src/stm32f1xx_hal_usart.c **** 
 1459              		.loc 1 1292 0 is_stmt 1
 1460 059e 95F83C30 		ldrb	r3, [r5, #60]	@ zero_extendqisi2	@ husart_4(D)->Lock, husart_4(D)->Lock
 1461 05a2 012B     		cmp	r3, #1	@ husart_4(D)->Lock,
 1462 05a4 40D0     		beq	.L104	@,
1299:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
 1463              		.loc 1 1299 0 discriminator 2
 1464 05a6 0024     		movs	r4, #0	@ tmp147,
1300:src/stm32f1xx_hal_usart.c **** 
 1465              		.loc 1 1300 0 discriminator 2
 1466 05a8 2223     		movs	r3, #34	@ tmp148,
1292:src/stm32f1xx_hal_usart.c **** 
 1467              		.loc 1 1292 0 discriminator 2
 1468 05aa 85F83C00 		strb	r0, [r5, #60]	@ _5, husart_4(D)->Lock
1299:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
 1469              		.loc 1 1299 0 discriminator 2
 1470 05ae 2C64     		str	r4, [r5, #64]	@ tmp147, husart_4(D)->ErrorCode
1303:src/stm32f1xx_hal_usart.c **** 
 1471              		.loc 1 1303 0 discriminator 2
 1472 05b0 A86B     		ldr	r0, [r5, #56]	@ _15, husart_4(D)->hdmarx
1300:src/stm32f1xx_hal_usart.c **** 
 1473              		.loc 1 1300 0 discriminator 2
 1474 05b2 85F83D30 		strb	r3, [r5, #61]	@ tmp148, husart_4(D)->State
1303:src/stm32f1xx_hal_usart.c **** 
 1475              		.loc 1 1303 0 discriminator 2
 1476 05b6 1D4B     		ldr	r3, .L105	@ tmp150,
1294:src/stm32f1xx_hal_usart.c ****     husart->RxXferSize = Size;
 1477              		.loc 1 1294 0 discriminator 2
 1478 05b8 E962     		str	r1, [r5, #44]	@ pRxData, husart_4(D)->pRxBuffPtr
1295:src/stm32f1xx_hal_usart.c ****     husart->pTxBuffPtr = pRxData;
 1479              		.loc 1 1295 0 discriminator 2
 1480 05ba 2A86     		strh	r2, [r5, #48]	@ movhi	@ Size, husart_4(D)->RxXferSize
1296:src/stm32f1xx_hal_usart.c ****     husart->TxXferSize = Size;
 1481              		.loc 1 1296 0 discriminator 2
 1482 05bc 6962     		str	r1, [r5, #36]	@ pRxData, husart_4(D)->pTxBuffPtr
1297:src/stm32f1xx_hal_usart.c **** 
 1483              		.loc 1 1297 0 discriminator 2
 1484 05be 2A85     		strh	r2, [r5, #40]	@ movhi	@ Size, husart_4(D)->TxXferSize
1303:src/stm32f1xx_hal_usart.c **** 
 1485              		.loc 1 1303 0 discriminator 2
 1486 05c0 8362     		str	r3, [r0, #40]	@ tmp150, _15->XferCpltCallback
1306:src/stm32f1xx_hal_usart.c **** 
 1487              		.loc 1 1306 0 discriminator 2
 1488 05c2 1B4B     		ldr	r3, .L105+4	@ tmp151,
1309:src/stm32f1xx_hal_usart.c **** 
 1489              		.loc 1 1309 0 discriminator 2
 1490 05c4 1B4A     		ldr	r2, .L105+8	@ tmp152,
 1491              	.LVL123:
1306:src/stm32f1xx_hal_usart.c **** 
 1492              		.loc 1 1306 0 discriminator 2
 1493 05c6 C362     		str	r3, [r0, #44]	@ tmp151, _15->XferHalfCpltCallback
1327:src/stm32f1xx_hal_usart.c **** 
 1494              		.loc 1 1327 0 discriminator 2
 1495 05c8 2968     		ldr	r1, [r5]	@ husart_4(D)->Instance, husart_4(D)->Instance
ARM GAS  /tmp/ccpGcYbE.s 			page 82


 1496              	.LVL124:
1316:src/stm32f1xx_hal_usart.c ****     husart->hdmatx->XferCpltCallback = NULL;
 1497              		.loc 1 1316 0 discriminator 2
 1498 05ca 6B6B     		ldr	r3, [r5, #52]	@ _20, husart_4(D)->hdmatx
1309:src/stm32f1xx_hal_usart.c **** 
 1499              		.loc 1 1309 0 discriminator 2
 1500 05cc 0263     		str	r2, [r0, #48]	@ tmp152, _15->XferErrorCallback
1312:src/stm32f1xx_hal_usart.c **** 
 1501              		.loc 1 1312 0 discriminator 2
 1502 05ce 4463     		str	r4, [r0, #52]	@ tmp147, _15->XferAbortCallback
1327:src/stm32f1xx_hal_usart.c **** 
 1503              		.loc 1 1327 0 discriminator 2
 1504 05d0 0431     		adds	r1, r1, #4	@, husart_4(D)->Instance,
1320:src/stm32f1xx_hal_usart.c **** 
 1505              		.loc 1 1320 0 discriminator 2
 1506 05d2 1A63     		str	r2, [r3, #48]	@ tmp152, _20->XferErrorCallback
1316:src/stm32f1xx_hal_usart.c ****     husart->hdmatx->XferCpltCallback = NULL;
 1507              		.loc 1 1316 0 discriminator 2
 1508 05d4 DC62     		str	r4, [r3, #44]	@ tmp147, _20->XferHalfCpltCallback
1317:src/stm32f1xx_hal_usart.c **** 
 1509              		.loc 1 1317 0 discriminator 2
 1510 05d6 9C62     		str	r4, [r3, #40]	@ tmp147, _20->XferCpltCallback
1323:src/stm32f1xx_hal_usart.c **** 
 1511              		.loc 1 1323 0 discriminator 2
 1512 05d8 5C63     		str	r4, [r3, #52]	@ tmp147, _20->XferAbortCallback
 1513              	.LVL125:
1327:src/stm32f1xx_hal_usart.c **** 
 1514              		.loc 1 1327 0 discriminator 2
 1515 05da 3246     		mov	r2, r6	@, pRxData
 1516 05dc 3B46     		mov	r3, r7	@, Size
 1517 05de FFF7FEFF 		bl	HAL_DMA_Start_IT	@
 1518              	.LVL126:
1332:src/stm32f1xx_hal_usart.c **** 
 1519              		.loc 1 1332 0 discriminator 2
 1520 05e2 2A68     		ldr	r2, [r5]	@ husart_4(D)->Instance, husart_4(D)->Instance
 1521 05e4 3B46     		mov	r3, r7	@, Size
 1522 05e6 0432     		adds	r2, r2, #4	@, husart_4(D)->Instance,
 1523 05e8 3146     		mov	r1, r6	@, pRxData
 1524 05ea 686B     		ldr	r0, [r5, #52]	@, husart_4(D)->hdmatx
 1525 05ec FFF7FEFF 		bl	HAL_DMA_Start_IT	@
 1526              	.LVL127:
1354:src/stm32f1xx_hal_usart.c ****   }
 1527              		.loc 1 1354 0 discriminator 2
 1528 05f0 2046     		mov	r0, r4	@ <retval>, tmp147
 1529              	.LBB14:
1335:src/stm32f1xx_hal_usart.c **** 
 1530              		.loc 1 1335 0 discriminator 2
 1531 05f2 2B68     		ldr	r3, [r5]	@ _37, husart_4(D)->Instance
 1532 05f4 0194     		str	r4, [sp, #4]	@ tmp147, tmpreg
 1533 05f6 1A68     		ldr	r2, [r3]	@ tmpreg.8_38, _37->SR
 1534 05f8 0192     		str	r2, [sp, #4]	@ tmpreg.8_38, tmpreg
 1535 05fa 5A68     		ldr	r2, [r3, #4]	@ tmpreg.9_40, _37->DR
 1536              	.LBE14:
1338:src/stm32f1xx_hal_usart.c **** 
 1537              		.loc 1 1338 0 discriminator 2
 1538 05fc 85F83C40 		strb	r4, [r5, #60]	@ tmp147, husart_4(D)->Lock
 1539              	.LBB15:
ARM GAS  /tmp/ccpGcYbE.s 			page 83


1335:src/stm32f1xx_hal_usart.c **** 
 1540              		.loc 1 1335 0 discriminator 2
 1541 0600 0192     		str	r2, [sp, #4]	@ tmpreg.9_40, tmpreg
 1542 0602 019A     		ldr	r2, [sp, #4]	@ vol.10_42, tmpreg
 1543              	.LBE15:
1341:src/stm32f1xx_hal_usart.c **** 
 1544              		.loc 1 1341 0 discriminator 2
 1545 0604 DA68     		ldr	r2, [r3, #12]	@ _44, _37->CR1
 1546 0606 42F48072 		orr	r2, r2, #256	@ _45, _44,
 1547 060a DA60     		str	r2, [r3, #12]	@ _45, _37->CR1
1344:src/stm32f1xx_hal_usart.c **** 
 1548              		.loc 1 1344 0 discriminator 2
 1549 060c 5A69     		ldr	r2, [r3, #20]	@ _47, _37->CR3
 1550 060e 42F00102 		orr	r2, r2, #1	@ _48, _47,
 1551 0612 5A61     		str	r2, [r3, #20]	@ _48, _37->CR3
1348:src/stm32f1xx_hal_usart.c **** 
 1552              		.loc 1 1348 0 discriminator 2
 1553 0614 5A69     		ldr	r2, [r3, #20]	@ _50, _37->CR3
 1554 0616 42F04002 		orr	r2, r2, #64	@ _51, _50,
 1555 061a 5A61     		str	r2, [r3, #20]	@ _51, _37->CR3
1352:src/stm32f1xx_hal_usart.c **** 
 1556              		.loc 1 1352 0 discriminator 2
 1557 061c 5A69     		ldr	r2, [r3, #20]	@ _53, _37->CR3
 1558 061e 42F08002 		orr	r2, r2, #128	@ _54, _53,
 1559 0622 5A61     		str	r2, [r3, #20]	@ _54, _37->CR3
 1560              	.LVL128:
 1561              	.L100:
1360:src/stm32f1xx_hal_usart.c **** 
 1562              		.loc 1 1360 0
 1563 0624 03B0     		add	sp, sp, #12	@,,
 1564              	.LCFI11:
 1565              		.cfi_remember_state
 1566              		.cfi_def_cfa_offset 20
 1567              		@ sp needed	@
 1568 0626 F0BD     		pop	{r4, r5, r6, r7, pc}	@
 1569              	.LVL129:
 1570              	.L104:
 1571              	.LCFI12:
 1572              		.cfi_restore_state
1358:src/stm32f1xx_hal_usart.c ****   }
 1573              		.loc 1 1358 0
 1574 0628 0220     		movs	r0, #2	@ <retval>,
 1575 062a FBE7     		b	.L100	@
 1576              	.L106:
 1577              		.align	2
 1578              	.L105:
 1579 062c 00000000 		.word	USART_DMAReceiveCplt
 1580 0630 00000000 		.word	USART_DMARxHalfCplt
 1581 0634 00000000 		.word	USART_DMAError
 1582              		.cfi_endproc
 1583              	.LFE76:
 1584              		.size	HAL_USART_Receive_DMA, .-HAL_USART_Receive_DMA
 1585              		.align	1
 1586              		.global	HAL_USART_TransmitReceive_DMA
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
ARM GAS  /tmp/ccpGcYbE.s 			page 84


 1590              		.fpu softvfp
 1591              		.type	HAL_USART_TransmitReceive_DMA, %function
 1592              	HAL_USART_TransmitReceive_DMA:
 1593              	.LFB77:
1376:src/stm32f1xx_hal_usart.c ****   uint32_t *tmp;
 1594              		.loc 1 1376 0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 8
 1597              		@ frame_needed = 0, uses_anonymous_args = 0
 1598              	.LVL130:
 1599 0638 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}	@
 1600              	.LCFI13:
 1601              		.cfi_def_cfa_offset 32
 1602              		.cfi_offset 4, -20
 1603              		.cfi_offset 5, -16
 1604              		.cfi_offset 6, -12
 1605              		.cfi_offset 7, -8
 1606              		.cfi_offset 14, -4
1376:src/stm32f1xx_hal_usart.c ****   uint32_t *tmp;
 1607              		.loc 1 1376 0
 1608 063a 0546     		mov	r5, r0	@ husart, husart
1379:src/stm32f1xx_hal_usart.c ****   {
 1609              		.loc 1 1379 0
 1610 063c 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2	@ husart_4(D)->State, husart_4(D)->State
 1611              	.LVL131:
1376:src/stm32f1xx_hal_usart.c ****   uint32_t *tmp;
 1612              		.loc 1 1376 0
 1613 0640 0F46     		mov	r7, r1	@ pTxData, pTxData
1379:src/stm32f1xx_hal_usart.c ****   {
 1614              		.loc 1 1379 0
 1615 0642 C0B2     		uxtb	r0, r0	@ _5, husart_4(D)->State
 1616 0644 0128     		cmp	r0, #1	@ _5,
1376:src/stm32f1xx_hal_usart.c ****   uint32_t *tmp;
 1617              		.loc 1 1376 0
 1618 0646 1E46     		mov	r6, r3	@ Size, Size
1379:src/stm32f1xx_hal_usart.c ****   {
 1619              		.loc 1 1379 0
 1620 0648 53D1     		bne	.L113	@,
1381:src/stm32f1xx_hal_usart.c ****     {
 1621              		.loc 1 1381 0
 1622 064a 002F     		cmp	r7, #0	@ pTxData
 1623 064c 4FD0     		beq	.L108	@
1381:src/stm32f1xx_hal_usart.c ****     {
 1624              		.loc 1 1381 0 is_stmt 0 discriminator 1
 1625 064e 002A     		cmp	r2, #0	@ pRxData
 1626 0650 4DD0     		beq	.L108	@
1381:src/stm32f1xx_hal_usart.c ****     {
 1627              		.loc 1 1381 0 discriminator 2
 1628 0652 002B     		cmp	r3, #0	@ Size
 1629 0654 4BD0     		beq	.L108	@
1386:src/stm32f1xx_hal_usart.c **** 
 1630              		.loc 1 1386 0 is_stmt 1
 1631 0656 95F83C40 		ldrb	r4, [r5, #60]	@ zero_extendqisi2	@ husart_4(D)->Lock, husart_4(D)->Lock
 1632 065a 012C     		cmp	r4, #1	@ husart_4(D)->Lock,
 1633 065c 49D0     		beq	.L113	@,
1393:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX_RX;
 1634              		.loc 1 1393 0 discriminator 2
ARM GAS  /tmp/ccpGcYbE.s 			page 85


 1635 065e 0024     		movs	r4, #0	@ tmp149,
1394:src/stm32f1xx_hal_usart.c **** 
 1636              		.loc 1 1394 0 discriminator 2
 1637 0660 3221     		movs	r1, #50	@ tmp150,
 1638              	.LVL132:
1386:src/stm32f1xx_hal_usart.c **** 
 1639              		.loc 1 1386 0 discriminator 2
 1640 0662 85F83C00 		strb	r0, [r5, #60]	@ _5, husart_4(D)->Lock
1393:src/stm32f1xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX_RX;
 1641              		.loc 1 1393 0 discriminator 2
 1642 0666 2C64     		str	r4, [r5, #64]	@ tmp149, husart_4(D)->ErrorCode
1397:src/stm32f1xx_hal_usart.c **** 
 1643              		.loc 1 1397 0 discriminator 2
 1644 0668 A86B     		ldr	r0, [r5, #56]	@ _15, husart_4(D)->hdmarx
1394:src/stm32f1xx_hal_usart.c **** 
 1645              		.loc 1 1394 0 discriminator 2
 1646 066a 85F83D10 		strb	r1, [r5, #61]	@ tmp150, husart_4(D)->State
1397:src/stm32f1xx_hal_usart.c **** 
 1647              		.loc 1 1397 0 discriminator 2
 1648 066e 2249     		ldr	r1, .L114	@ tmp152,
1388:src/stm32f1xx_hal_usart.c ****     husart->RxXferSize = Size;
 1649              		.loc 1 1388 0 discriminator 2
 1650 0670 EA62     		str	r2, [r5, #44]	@ pRxData, husart_4(D)->pRxBuffPtr
1389:src/stm32f1xx_hal_usart.c ****     husart->pTxBuffPtr = pTxData;
 1651              		.loc 1 1389 0 discriminator 2
 1652 0672 2B86     		strh	r3, [r5, #48]	@ movhi	@ Size, husart_4(D)->RxXferSize
1391:src/stm32f1xx_hal_usart.c **** 
 1653              		.loc 1 1391 0 discriminator 2
 1654 0674 2B85     		strh	r3, [r5, #40]	@ movhi	@ Size, husart_4(D)->TxXferSize
1390:src/stm32f1xx_hal_usart.c ****     husart->TxXferSize = Size;
 1655              		.loc 1 1390 0 discriminator 2
 1656 0676 6F62     		str	r7, [r5, #36]	@ pTxData, husart_4(D)->pTxBuffPtr
1397:src/stm32f1xx_hal_usart.c **** 
 1657              		.loc 1 1397 0 discriminator 2
 1658 0678 8162     		str	r1, [r0, #40]	@ tmp152, _15->XferCpltCallback
1400:src/stm32f1xx_hal_usart.c **** 
 1659              		.loc 1 1400 0 discriminator 2
 1660 067a 2049     		ldr	r1, .L114+4	@ tmp153,
1403:src/stm32f1xx_hal_usart.c **** 
 1661              		.loc 1 1403 0 discriminator 2
 1662 067c DFF880E0 		ldr	lr, .L114+8	@ tmp154,
1400:src/stm32f1xx_hal_usart.c **** 
 1663              		.loc 1 1400 0 discriminator 2
 1664 0680 C162     		str	r1, [r0, #44]	@ tmp153, _15->XferHalfCpltCallback
1403:src/stm32f1xx_hal_usart.c **** 
 1665              		.loc 1 1403 0 discriminator 2
 1666 0682 696B     		ldr	r1, [r5, #52]	@ _18, husart_4(D)->hdmatx
 1667 0684 C1F828E0 		str	lr, [r1, #40]	@ tmp154, _18->XferCpltCallback
1406:src/stm32f1xx_hal_usart.c **** 
 1668              		.loc 1 1406 0 discriminator 2
 1669 0688 DFF878E0 		ldr	lr, .L114+12	@ tmp155,
 1670 068c C1F82CE0 		str	lr, [r1, #44]	@ tmp155, _18->XferHalfCpltCallback
1409:src/stm32f1xx_hal_usart.c **** 
 1671              		.loc 1 1409 0 discriminator 2
 1672 0690 DFF874E0 		ldr	lr, .L114+16	@ tmp156,
 1673 0694 C1F830E0 		str	lr, [r1, #48]	@ tmp156, _18->XferErrorCallback
1419:src/stm32f1xx_hal_usart.c **** 
ARM GAS  /tmp/ccpGcYbE.s 			page 86


 1674              		.loc 1 1419 0 discriminator 2
 1675 0698 2968     		ldr	r1, [r5]	@ husart_4(D)->Instance, husart_4(D)->Instance
1412:src/stm32f1xx_hal_usart.c **** 
 1676              		.loc 1 1412 0 discriminator 2
 1677 069a C0F830E0 		str	lr, [r0, #48]	@ tmp156, _15->XferErrorCallback
1419:src/stm32f1xx_hal_usart.c **** 
 1678              		.loc 1 1419 0 discriminator 2
 1679 069e 0431     		adds	r1, r1, #4	@, husart_4(D)->Instance,
1415:src/stm32f1xx_hal_usart.c **** 
 1680              		.loc 1 1415 0 discriminator 2
 1681 06a0 4463     		str	r4, [r0, #52]	@ tmp149, _15->XferAbortCallback
 1682              	.LVL133:
1419:src/stm32f1xx_hal_usart.c **** 
 1683              		.loc 1 1419 0 discriminator 2
 1684 06a2 FFF7FEFF 		bl	HAL_DMA_Start_IT	@
 1685              	.LVL134:
1423:src/stm32f1xx_hal_usart.c **** 
 1686              		.loc 1 1423 0 discriminator 2
 1687 06a6 2A68     		ldr	r2, [r5]	@ husart_4(D)->Instance, husart_4(D)->Instance
 1688 06a8 3346     		mov	r3, r6	@, Size
 1689 06aa 0432     		adds	r2, r2, #4	@, husart_4(D)->Instance,
 1690 06ac 3946     		mov	r1, r7	@, pTxData
 1691 06ae 686B     		ldr	r0, [r5, #52]	@, husart_4(D)->hdmatx
 1692 06b0 FFF7FEFF 		bl	HAL_DMA_Start_IT	@
 1693              	.LVL135:
1426:src/stm32f1xx_hal_usart.c **** 
 1694              		.loc 1 1426 0 discriminator 2
 1695 06b4 6FF04002 		mvn	r2, #64	@ tmp163,
1448:src/stm32f1xx_hal_usart.c ****   }
 1696              		.loc 1 1448 0 discriminator 2
 1697 06b8 2046     		mov	r0, r4	@ <retval>, tmp149
1426:src/stm32f1xx_hal_usart.c **** 
 1698              		.loc 1 1426 0 discriminator 2
 1699 06ba 2B68     		ldr	r3, [r5]	@ _36, husart_4(D)->Instance
 1700 06bc 1A60     		str	r2, [r3]	@ tmp163, _36->SR
 1701              	.LBB16:
1429:src/stm32f1xx_hal_usart.c **** 
 1702              		.loc 1 1429 0 discriminator 2
 1703 06be 0194     		str	r4, [sp, #4]	@ tmp149, tmpreg
 1704 06c0 1A68     		ldr	r2, [r3]	@ tmpreg.13_39, _36->SR
 1705 06c2 0192     		str	r2, [sp, #4]	@ tmpreg.13_39, tmpreg
 1706 06c4 5A68     		ldr	r2, [r3, #4]	@ tmpreg.14_41, _36->DR
 1707              	.LBE16:
1432:src/stm32f1xx_hal_usart.c **** 
 1708              		.loc 1 1432 0 discriminator 2
 1709 06c6 85F83C40 		strb	r4, [r5, #60]	@ tmp149, husart_4(D)->Lock
 1710              	.LBB17:
1429:src/stm32f1xx_hal_usart.c **** 
 1711              		.loc 1 1429 0 discriminator 2
 1712 06ca 0192     		str	r2, [sp, #4]	@ tmpreg.14_41, tmpreg
 1713 06cc 019A     		ldr	r2, [sp, #4]	@ vol.15_43, tmpreg
 1714              	.LBE17:
1435:src/stm32f1xx_hal_usart.c **** 
 1715              		.loc 1 1435 0 discriminator 2
 1716 06ce DA68     		ldr	r2, [r3, #12]	@ _45, _36->CR1
 1717 06d0 42F48072 		orr	r2, r2, #256	@ _46, _45,
 1718 06d4 DA60     		str	r2, [r3, #12]	@ _46, _36->CR1
ARM GAS  /tmp/ccpGcYbE.s 			page 87


1438:src/stm32f1xx_hal_usart.c **** 
 1719              		.loc 1 1438 0 discriminator 2
 1720 06d6 5A69     		ldr	r2, [r3, #20]	@ _48, _36->CR3
 1721 06d8 42F00102 		orr	r2, r2, #1	@ _49, _48,
 1722 06dc 5A61     		str	r2, [r3, #20]	@ _49, _36->CR3
1442:src/stm32f1xx_hal_usart.c **** 
 1723              		.loc 1 1442 0 discriminator 2
 1724 06de 5A69     		ldr	r2, [r3, #20]	@ _51, _36->CR3
 1725 06e0 42F04002 		orr	r2, r2, #64	@ _52, _51,
 1726 06e4 5A61     		str	r2, [r3, #20]	@ _52, _36->CR3
1446:src/stm32f1xx_hal_usart.c **** 
 1727              		.loc 1 1446 0 discriminator 2
 1728 06e6 5A69     		ldr	r2, [r3, #20]	@ _54, _36->CR3
 1729 06e8 42F08002 		orr	r2, r2, #128	@ _55, _54,
 1730 06ec 5A61     		str	r2, [r3, #20]	@ _55, _36->CR3
 1731              	.LVL136:
 1732              	.L108:
1454:src/stm32f1xx_hal_usart.c **** 
 1733              		.loc 1 1454 0
 1734 06ee 03B0     		add	sp, sp, #12	@,,
 1735              	.LCFI14:
 1736              		.cfi_remember_state
 1737              		.cfi_def_cfa_offset 20
 1738              		@ sp needed	@
 1739 06f0 F0BD     		pop	{r4, r5, r6, r7, pc}	@
 1740              	.LVL137:
 1741              	.L113:
 1742              	.LCFI15:
 1743              		.cfi_restore_state
1452:src/stm32f1xx_hal_usart.c ****   }
 1744              		.loc 1 1452 0
 1745 06f2 0220     		movs	r0, #2	@ <retval>,
 1746 06f4 FBE7     		b	.L108	@
 1747              	.L115:
 1748 06f6 00BF     		.align	2
 1749              	.L114:
 1750 06f8 00000000 		.word	USART_DMAReceiveCplt
 1751 06fc 00000000 		.word	USART_DMARxHalfCplt
 1752 0700 00000000 		.word	USART_DMATransmitCplt
 1753 0704 00000000 		.word	USART_DMATxHalfCplt
 1754 0708 00000000 		.word	USART_DMAError
 1755              		.cfi_endproc
 1756              	.LFE77:
 1757              		.size	HAL_USART_TransmitReceive_DMA, .-HAL_USART_TransmitReceive_DMA
 1758              		.align	1
 1759              		.global	HAL_USART_DMAPause
 1760              		.syntax unified
 1761              		.thumb
 1762              		.thumb_func
 1763              		.fpu softvfp
 1764              		.type	HAL_USART_DMAPause, %function
 1765              	HAL_USART_DMAPause:
 1766              	.LFB78:
1463:src/stm32f1xx_hal_usart.c ****   /* Process Locked */
 1767              		.loc 1 1463 0
 1768              		.cfi_startproc
 1769              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccpGcYbE.s 			page 88


 1770              		@ frame_needed = 0, uses_anonymous_args = 0
 1771              		@ link register save eliminated.
 1772              	.LVL138:
1465:src/stm32f1xx_hal_usart.c **** 
 1773              		.loc 1 1465 0
 1774 070c 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2	@ husart_4(D)->Lock, husart_4(D)->Lock
 1775 0710 012B     		cmp	r3, #1	@ husart_4(D)->Lock,
1468:src/stm32f1xx_hal_usart.c **** 
 1776              		.loc 1 1468 0
 1777 0712 1FBF     		itttt	ne
 1778 0714 0268     		ldrne	r2, [r0]	@ _6, husart_4(D)->Instance
 1779 0716 5369     		ldrne	r3, [r2, #20]	@ _7, _6->CR3
 1780 0718 23F08003 		bicne	r3, r3, #128	@ _8, _7,
 1781 071c 5361     		strne	r3, [r2, #20]	@ _8, _6->CR3
1471:src/stm32f1xx_hal_usart.c **** 
 1782              		.loc 1 1471 0
 1783 071e 1DBF     		ittte	ne
 1784 0720 0023     		movne	r3, #0	@ tmp117,
 1785 0722 80F83C30 		strbne	r3, [r0, #60]	@ tmp117, husart_4(D)->Lock
1473:src/stm32f1xx_hal_usart.c **** }
 1786              		.loc 1 1473 0
 1787 0726 1846     		movne	r0, r3	@ <retval>, tmp117
 1788              	.LVL139:
1465:src/stm32f1xx_hal_usart.c **** 
 1789              		.loc 1 1465 0
 1790 0728 0220     		moveq	r0, #2	@ <retval>,
1474:src/stm32f1xx_hal_usart.c **** 
 1791              		.loc 1 1474 0
 1792 072a 7047     		bx	lr	@
 1793              		.cfi_endproc
 1794              	.LFE78:
 1795              		.size	HAL_USART_DMAPause, .-HAL_USART_DMAPause
 1796              		.align	1
 1797              		.global	HAL_USART_DMAResume
 1798              		.syntax unified
 1799              		.thumb
 1800              		.thumb_func
 1801              		.fpu softvfp
 1802              		.type	HAL_USART_DMAResume, %function
 1803              	HAL_USART_DMAResume:
 1804              	.LFB79:
1483:src/stm32f1xx_hal_usart.c ****   /* Process Locked */
 1805              		.loc 1 1483 0
 1806              		.cfi_startproc
 1807              		@ args = 0, pretend = 0, frame = 0
 1808              		@ frame_needed = 0, uses_anonymous_args = 0
 1809              		@ link register save eliminated.
 1810              	.LVL140:
1485:src/stm32f1xx_hal_usart.c **** 
 1811              		.loc 1 1485 0
 1812 072c 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2	@ husart_4(D)->Lock, husart_4(D)->Lock
 1813 0730 012B     		cmp	r3, #1	@ husart_4(D)->Lock,
1488:src/stm32f1xx_hal_usart.c **** 
 1814              		.loc 1 1488 0
 1815 0732 1FBF     		itttt	ne
 1816 0734 0268     		ldrne	r2, [r0]	@ _6, husart_4(D)->Instance
 1817 0736 5369     		ldrne	r3, [r2, #20]	@ _7, _6->CR3
ARM GAS  /tmp/ccpGcYbE.s 			page 89


 1818 0738 43F08003 		orrne	r3, r3, #128	@ _8, _7,
 1819 073c 5361     		strne	r3, [r2, #20]	@ _8, _6->CR3
1491:src/stm32f1xx_hal_usart.c **** 
 1820              		.loc 1 1491 0
 1821 073e 1DBF     		ittte	ne
 1822 0740 0023     		movne	r3, #0	@ tmp117,
 1823 0742 80F83C30 		strbne	r3, [r0, #60]	@ tmp117, husart_4(D)->Lock
1493:src/stm32f1xx_hal_usart.c **** }
 1824              		.loc 1 1493 0
 1825 0746 1846     		movne	r0, r3	@ <retval>, tmp117
 1826              	.LVL141:
1485:src/stm32f1xx_hal_usart.c **** 
 1827              		.loc 1 1485 0
 1828 0748 0220     		moveq	r0, #2	@ <retval>,
1494:src/stm32f1xx_hal_usart.c **** 
 1829              		.loc 1 1494 0
 1830 074a 7047     		bx	lr	@
 1831              		.cfi_endproc
 1832              	.LFE79:
 1833              		.size	HAL_USART_DMAResume, .-HAL_USART_DMAResume
 1834              		.align	1
 1835              		.global	HAL_USART_DMAStop
 1836              		.syntax unified
 1837              		.thumb
 1838              		.thumb_func
 1839              		.fpu softvfp
 1840              		.type	HAL_USART_DMAStop, %function
 1841              	HAL_USART_DMAStop:
 1842              	.LFB80:
1503:src/stm32f1xx_hal_usart.c ****   uint32_t dmarequest = 0x00U;
 1843              		.loc 1 1503 0
 1844              		.cfi_startproc
 1845              		@ args = 0, pretend = 0, frame = 0
 1846              		@ frame_needed = 0, uses_anonymous_args = 0
 1847              	.LVL142:
1512:src/stm32f1xx_hal_usart.c ****   if ((husart->State == HAL_USART_STATE_BUSY_TX) && dmarequest)
 1848              		.loc 1 1512 0
 1849 074c 0368     		ldr	r3, [r0]	@ _7, husart_6(D)->Instance
1503:src/stm32f1xx_hal_usart.c ****   uint32_t dmarequest = 0x00U;
 1850              		.loc 1 1503 0
 1851 074e 10B5     		push	{r4, lr}	@
 1852              	.LCFI16:
 1853              		.cfi_def_cfa_offset 8
 1854              		.cfi_offset 4, -8
 1855              		.cfi_offset 14, -4
1512:src/stm32f1xx_hal_usart.c ****   if ((husart->State == HAL_USART_STATE_BUSY_TX) && dmarequest)
 1856              		.loc 1 1512 0
 1857 0750 5A69     		ldr	r2, [r3, #20]	@ _8, _7->CR3
 1858              	.LVL143:
1513:src/stm32f1xx_hal_usart.c ****   {
 1859              		.loc 1 1513 0
 1860 0752 90F83D10 		ldrb	r1, [r0, #61]	@ zero_extendqisi2	@ husart_6(D)->State, husart_6(D)->State
1503:src/stm32f1xx_hal_usart.c ****   uint32_t dmarequest = 0x00U;
 1861              		.loc 1 1503 0
 1862 0756 0446     		mov	r4, r0	@ husart, husart
1513:src/stm32f1xx_hal_usart.c ****   {
 1863              		.loc 1 1513 0
ARM GAS  /tmp/ccpGcYbE.s 			page 90


 1864 0758 1229     		cmp	r1, #18	@ husart_6(D)->State,
 1865 075a 11D1     		bne	.L123	@,
1513:src/stm32f1xx_hal_usart.c ****   {
 1866              		.loc 1 1513 0 is_stmt 0 discriminator 1
 1867 075c 1206     		lsls	r2, r2, #24	@, _8,
 1868              	.LVL144:
 1869 075e 0FD5     		bpl	.L123	@,
 1870              	.LVL145:
 1871              	.LBB20:
 1872              	.LBB21:
2320:src/stm32f1xx_hal_usart.c **** 
 1873              		.loc 1 2320 0 is_stmt 1
 1874 0760 DA68     		ldr	r2, [r3, #12]	@ _30, _7->CR1
 1875 0762 22F0C002 		bic	r2, r2, #192	@ _31, _30,
 1876 0766 DA60     		str	r2, [r3, #12]	@ _31, _7->CR1
2323:src/stm32f1xx_hal_usart.c **** }
 1877              		.loc 1 2323 0
 1878 0768 0123     		movs	r3, #1	@ tmp134,
 1879 076a 80F83D30 		strb	r3, [r0, #61]	@ tmp134, husart_6(D)->State
 1880              	.LVL146:
 1881              	.LBE21:
 1882              	.LBE20:
1518:src/stm32f1xx_hal_usart.c ****     {
 1883              		.loc 1 1518 0
 1884 076e 406B     		ldr	r0, [r0, #52]	@ _12, husart_6(D)->hdmatx
 1885              	.LVL147:
 1886 0770 08B1     		cbz	r0, .L124	@ _12,
1520:src/stm32f1xx_hal_usart.c ****     }
 1887              		.loc 1 1520 0
 1888 0772 FFF7FEFF 		bl	HAL_DMA_Abort	@
 1889              	.LVL148:
 1890              	.L124:
1524:src/stm32f1xx_hal_usart.c ****   }
 1891              		.loc 1 1524 0
 1892 0776 2268     		ldr	r2, [r4]	@ _14, husart_6(D)->Instance
 1893 0778 5369     		ldr	r3, [r2, #20]	@ _15, _14->CR3
 1894 077a 23F08003 		bic	r3, r3, #128	@ _16, _15,
 1895 077e 5361     		str	r3, [r2, #20]	@ _16, _14->CR3
 1896              	.L123:
1528:src/stm32f1xx_hal_usart.c ****   if ((husart->State == HAL_USART_STATE_BUSY_RX) && dmarequest)
 1897              		.loc 1 1528 0
 1898 0780 2368     		ldr	r3, [r4]	@ _18, husart_6(D)->Instance
 1899 0782 5B69     		ldr	r3, [r3, #20]	@ _19, _18->CR3
 1900              	.LVL149:
1529:src/stm32f1xx_hal_usart.c ****   {
 1901              		.loc 1 1529 0
 1902 0784 94F83D20 		ldrb	r2, [r4, #61]	@ zero_extendqisi2	@ husart_6(D)->State, husart_6(D)->State
 1903 0788 222A     		cmp	r2, #34	@ husart_6(D)->State,
 1904 078a 0DD1     		bne	.L125	@,
1529:src/stm32f1xx_hal_usart.c ****   {
 1905              		.loc 1 1529 0 is_stmt 0 discriminator 1
 1906 078c 5B06     		lsls	r3, r3, #25	@, _19,
 1907              	.LVL150:
 1908 078e 0BD5     		bpl	.L125	@,
1531:src/stm32f1xx_hal_usart.c **** 
 1909              		.loc 1 1531 0 is_stmt 1
 1910 0790 2046     		mov	r0, r4	@, husart
ARM GAS  /tmp/ccpGcYbE.s 			page 91


 1911 0792 FFF735FC 		bl	USART_EndRxTransfer	@
 1912              	.LVL151:
1534:src/stm32f1xx_hal_usart.c ****     {
 1913              		.loc 1 1534 0
 1914 0796 A06B     		ldr	r0, [r4, #56]	@ _23, husart_6(D)->hdmarx
 1915 0798 08B1     		cbz	r0, .L126	@ _23,
1536:src/stm32f1xx_hal_usart.c ****     }
 1916              		.loc 1 1536 0
 1917 079a FFF7FEFF 		bl	HAL_DMA_Abort	@
 1918              	.LVL152:
 1919              	.L126:
1540:src/stm32f1xx_hal_usart.c ****   }
 1920              		.loc 1 1540 0
 1921 079e 2268     		ldr	r2, [r4]	@ _25, husart_6(D)->Instance
 1922 07a0 5369     		ldr	r3, [r2, #20]	@ _26, _25->CR3
 1923 07a2 23F04003 		bic	r3, r3, #64	@ _27, _26,
 1924 07a6 5361     		str	r3, [r2, #20]	@ _27, _25->CR3
 1925              	.L125:
1544:src/stm32f1xx_hal_usart.c **** 
 1926              		.loc 1 1544 0
 1927 07a8 0020     		movs	r0, #0	@,
 1928 07aa 10BD     		pop	{r4, pc}	@
 1929              		.cfi_endproc
 1930              	.LFE80:
 1931              		.size	HAL_USART_DMAStop, .-HAL_USART_DMAStop
 1932              		.align	1
 1933              		.global	HAL_USART_Abort
 1934              		.syntax unified
 1935              		.thumb
 1936              		.thumb_func
 1937              		.fpu softvfp
 1938              		.type	HAL_USART_Abort, %function
 1939              	HAL_USART_Abort:
 1940              	.LFB81:
1560:src/stm32f1xx_hal_usart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1941              		.loc 1 1560 0
 1942              		.cfi_startproc
 1943              		@ args = 0, pretend = 0, frame = 0
 1944              		@ frame_needed = 0, uses_anonymous_args = 0
 1945              	.LVL153:
1562:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 1946              		.loc 1 1562 0
 1947 07ac 0368     		ldr	r3, [r0]	@ _5, husart_4(D)->Instance
1560:src/stm32f1xx_hal_usart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1948              		.loc 1 1560 0
 1949 07ae 10B5     		push	{r4, lr}	@
 1950              	.LCFI17:
 1951              		.cfi_def_cfa_offset 8
 1952              		.cfi_offset 4, -8
 1953              		.cfi_offset 14, -4
1562:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 1954              		.loc 1 1562 0
 1955 07b0 DA68     		ldr	r2, [r3, #12]	@ _6, _5->CR1
1560:src/stm32f1xx_hal_usart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1956              		.loc 1 1560 0
 1957 07b2 0446     		mov	r4, r0	@ husart, husart
1562:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
ARM GAS  /tmp/ccpGcYbE.s 			page 92


 1958              		.loc 1 1562 0
 1959 07b4 22F4F072 		bic	r2, r2, #480	@ _7, _6,
 1960 07b8 DA60     		str	r2, [r3, #12]	@ _7, _5->CR1
1563:src/stm32f1xx_hal_usart.c **** 
 1961              		.loc 1 1563 0
 1962 07ba 5A69     		ldr	r2, [r3, #20]	@ _9, _5->CR3
 1963 07bc 22F00102 		bic	r2, r2, #1	@ _10, _9,
 1964 07c0 5A61     		str	r2, [r3, #20]	@ _10, _5->CR3
1566:src/stm32f1xx_hal_usart.c ****   {
 1965              		.loc 1 1566 0
 1966 07c2 5A69     		ldr	r2, [r3, #20]	@ _12, _5->CR3
 1967 07c4 1106     		lsls	r1, r2, #24	@, _12,
 1968 07c6 09D5     		bpl	.L141	@,
1568:src/stm32f1xx_hal_usart.c **** 
 1969              		.loc 1 1568 0
 1970 07c8 5A69     		ldr	r2, [r3, #20]	@ _14, _5->CR3
1571:src/stm32f1xx_hal_usart.c ****     {
 1971              		.loc 1 1571 0
 1972 07ca 406B     		ldr	r0, [r0, #52]	@ _17, husart_4(D)->hdmatx
 1973              	.LVL154:
1568:src/stm32f1xx_hal_usart.c **** 
 1974              		.loc 1 1568 0
 1975 07cc 22F08002 		bic	r2, r2, #128	@ _15, _14,
 1976 07d0 5A61     		str	r2, [r3, #20]	@ _15, _5->CR3
1571:src/stm32f1xx_hal_usart.c ****     {
 1977              		.loc 1 1571 0
 1978 07d2 18B1     		cbz	r0, .L141	@ _17,
1575:src/stm32f1xx_hal_usart.c **** 
 1979              		.loc 1 1575 0
 1980 07d4 0023     		movs	r3, #0	@ tmp129,
 1981 07d6 4363     		str	r3, [r0, #52]	@ tmp129, _17->XferAbortCallback
1577:src/stm32f1xx_hal_usart.c ****     }
 1982              		.loc 1 1577 0
 1983 07d8 FFF7FEFF 		bl	HAL_DMA_Abort	@
 1984              	.LVL155:
 1985              	.L141:
1582:src/stm32f1xx_hal_usart.c ****   {
 1986              		.loc 1 1582 0
 1987 07dc 2368     		ldr	r3, [r4]	@ _20, husart_4(D)->Instance
 1988 07de 5A69     		ldr	r2, [r3, #20]	@ _21, _20->CR3
 1989 07e0 5206     		lsls	r2, r2, #25	@, _21,
 1990 07e2 09D5     		bpl	.L144	@,
1584:src/stm32f1xx_hal_usart.c **** 
 1991              		.loc 1 1584 0
 1992 07e4 5A69     		ldr	r2, [r3, #20]	@ _23, _20->CR3
1587:src/stm32f1xx_hal_usart.c ****     {
 1993              		.loc 1 1587 0
 1994 07e6 A06B     		ldr	r0, [r4, #56]	@ _26, husart_4(D)->hdmarx
1584:src/stm32f1xx_hal_usart.c **** 
 1995              		.loc 1 1584 0
 1996 07e8 22F04002 		bic	r2, r2, #64	@ _24, _23,
 1997 07ec 5A61     		str	r2, [r3, #20]	@ _24, _20->CR3
1587:src/stm32f1xx_hal_usart.c ****     {
 1998              		.loc 1 1587 0
 1999 07ee 18B1     		cbz	r0, .L144	@ _26,
1591:src/stm32f1xx_hal_usart.c **** 
 2000              		.loc 1 1591 0
ARM GAS  /tmp/ccpGcYbE.s 			page 93


 2001 07f0 0023     		movs	r3, #0	@ tmp131,
 2002 07f2 4363     		str	r3, [r0, #52]	@ tmp131, _26->XferAbortCallback
1593:src/stm32f1xx_hal_usart.c ****     }
 2003              		.loc 1 1593 0
 2004 07f4 FFF7FEFF 		bl	HAL_DMA_Abort	@
 2005              	.LVL156:
 2006              	.L144:
1598:src/stm32f1xx_hal_usart.c ****   husart->RxXferCount = 0x00U;
 2007              		.loc 1 1598 0
 2008 07f8 0020     		movs	r0, #0	@ tmp133,
1602:src/stm32f1xx_hal_usart.c **** 
 2009              		.loc 1 1602 0
 2010 07fa 0123     		movs	r3, #1	@ tmp136,
1598:src/stm32f1xx_hal_usart.c ****   husart->RxXferCount = 0x00U;
 2011              		.loc 1 1598 0
 2012 07fc 6085     		strh	r0, [r4, #42]	@ movhi	@ tmp133, husart_4(D)->TxXferCount
1599:src/stm32f1xx_hal_usart.c **** 
 2013              		.loc 1 1599 0
 2014 07fe 6086     		strh	r0, [r4, #50]	@ movhi	@ tmp133, husart_4(D)->RxXferCount
1602:src/stm32f1xx_hal_usart.c **** 
 2015              		.loc 1 1602 0
 2016 0800 84F83D30 		strb	r3, [r4, #61]	@ tmp136, husart_4(D)->State
1605:src/stm32f1xx_hal_usart.c **** 
 2017              		.loc 1 1605 0
 2018 0804 2064     		str	r0, [r4, #64]	@ tmp133, husart_4(D)->ErrorCode
1608:src/stm32f1xx_hal_usart.c **** 
 2019              		.loc 1 1608 0
 2020 0806 10BD     		pop	{r4, pc}	@
 2021              		.cfi_endproc
 2022              	.LFE81:
 2023              		.size	HAL_USART_Abort, .-HAL_USART_Abort
 2024              		.align	1
 2025              		.weak	HAL_USART_TxCpltCallback
 2026              		.syntax unified
 2027              		.thumb
 2028              		.thumb_func
 2029              		.fpu softvfp
 2030              		.type	HAL_USART_TxCpltCallback, %function
 2031              	HAL_USART_TxCpltCallback:
 2032              	.LFB123:
 2033              		.cfi_startproc
 2034              		@ args = 0, pretend = 0, frame = 0
 2035              		@ frame_needed = 0, uses_anonymous_args = 0
 2036              		@ link register save eliminated.
 2037 0808 7047     		bx	lr	@
 2038              		.cfi_endproc
 2039              	.LFE123:
 2040              		.size	HAL_USART_TxCpltCallback, .-HAL_USART_TxCpltCallback
 2041              		.align	1
 2042              		.syntax unified
 2043              		.thumb
 2044              		.thumb_func
 2045              		.fpu softvfp
 2046              		.type	USART_DMATransmitCplt, %function
 2047              	USART_DMATransmitCplt:
 2048              	.LFB93:
2084:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
ARM GAS  /tmp/ccpGcYbE.s 			page 94


 2049              		.loc 1 2084 0
 2050              		.cfi_startproc
 2051              		@ args = 0, pretend = 0, frame = 0
 2052              		@ frame_needed = 0, uses_anonymous_args = 0
 2053              	.LVL157:
2087:src/stm32f1xx_hal_usart.c ****   {
 2054              		.loc 1 2087 0
 2055 080a 0268     		ldr	r2, [r0]	@ _5, hdma_3(D)->Instance
2084:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2056              		.loc 1 2084 0
 2057 080c 08B5     		push	{r3, lr}	@
 2058              	.LCFI18:
 2059              		.cfi_def_cfa_offset 8
 2060              		.cfi_offset 3, -8
 2061              		.cfi_offset 14, -4
2087:src/stm32f1xx_hal_usart.c ****   {
 2062              		.loc 1 2087 0
 2063 080e 1268     		ldr	r2, [r2]	@ _6, _5->CCR
2085:src/stm32f1xx_hal_usart.c ****   /* DMA Normal mode */
 2064              		.loc 1 2085 0
 2065 0810 436A     		ldr	r3, [r0, #36]	@ husart, hdma_3(D)->Parent
 2066              	.LVL158:
2087:src/stm32f1xx_hal_usart.c ****   {
 2067              		.loc 1 2087 0
 2068 0812 12F02002 		ands	r2, r2, #32	@ tmp122, _6,
 2069 0816 0ED1     		bne	.L154	@,
2089:src/stm32f1xx_hal_usart.c ****     if (husart->State == HAL_USART_STATE_BUSY_TX)
 2070              		.loc 1 2089 0
 2071 0818 5A85     		strh	r2, [r3, #42]	@ movhi	@ tmp122, husart_4->TxXferCount
2090:src/stm32f1xx_hal_usart.c ****     {
 2072              		.loc 1 2090 0
 2073 081a 93F83D20 		ldrb	r2, [r3, #61]	@ zero_extendqisi2	@ husart_4->State, husart_4->State
 2074 081e 122A     		cmp	r2, #18	@ husart_4->State,
 2075 0820 10D1     		bne	.L153	@,
2094:src/stm32f1xx_hal_usart.c **** 
 2076              		.loc 1 2094 0
 2077 0822 1B68     		ldr	r3, [r3]	@ _10, husart_4->Instance
 2078              	.LVL159:
 2079 0824 5A69     		ldr	r2, [r3, #20]	@ _11, _10->CR3
 2080 0826 22F08002 		bic	r2, r2, #128	@ _12, _11,
 2081 082a 5A61     		str	r2, [r3, #20]	@ _12, _10->CR3
2097:src/stm32f1xx_hal_usart.c ****     }
 2082              		.loc 1 2097 0
 2083 082c DA68     		ldr	r2, [r3, #12]	@ _14, _10->CR1
 2084 082e 42F04002 		orr	r2, r2, #64	@ _15, _14,
 2085 0832 DA60     		str	r2, [r3, #12]	@ _15, _10->CR1
 2086 0834 08BD     		pop	{r3, pc}	@
 2087              	.LVL160:
 2088              	.L154:
2103:src/stm32f1xx_hal_usart.c ****     {
 2089              		.loc 1 2103 0
 2090 0836 93F83D20 		ldrb	r2, [r3, #61]	@ zero_extendqisi2	@ husart_4->State, husart_4->State
 2091 083a 122A     		cmp	r2, #18	@ husart_4->State,
 2092 083c 02D1     		bne	.L153	@,
2110:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 2093              		.loc 1 2110 0
 2094 083e 1846     		mov	r0, r3	@, husart
ARM GAS  /tmp/ccpGcYbE.s 			page 95


 2095              	.LVL161:
 2096 0840 FFF7FEFF 		bl	HAL_USART_TxCpltCallback	@
 2097              	.LVL162:
 2098              	.L153:
 2099 0844 08BD     		pop	{r3, pc}	@
 2100              		.cfi_endproc
 2101              	.LFE93:
 2102              		.size	USART_DMATransmitCplt, .-USART_DMATransmitCplt
 2103              		.align	1
 2104              		.weak	HAL_USART_TxHalfCpltCallback
 2105              		.syntax unified
 2106              		.thumb
 2107              		.thumb_func
 2108              		.fpu softvfp
 2109              		.type	HAL_USART_TxHalfCpltCallback, %function
 2110              	HAL_USART_TxHalfCpltCallback:
 2111              	.LFB121:
 2112              		.cfi_startproc
 2113              		@ args = 0, pretend = 0, frame = 0
 2114              		@ frame_needed = 0, uses_anonymous_args = 0
 2115              		@ link register save eliminated.
 2116 0846 7047     		bx	lr	@
 2117              		.cfi_endproc
 2118              	.LFE121:
 2119              		.size	HAL_USART_TxHalfCpltCallback, .-HAL_USART_TxHalfCpltCallback
 2120              		.align	1
 2121              		.syntax unified
 2122              		.thumb
 2123              		.thumb_func
 2124              		.fpu softvfp
 2125              		.type	USART_DMATxHalfCplt, %function
 2126              	USART_DMATxHalfCplt:
 2127              	.LFB94:
2123:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2128              		.loc 1 2123 0
 2129              		.cfi_startproc
 2130              		@ args = 0, pretend = 0, frame = 0
 2131              		@ frame_needed = 0, uses_anonymous_args = 0
 2132              	.LVL163:
2123:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2133              		.loc 1 2123 0
 2134 0848 08B5     		push	{r3, lr}	@
 2135              	.LCFI19:
 2136              		.cfi_def_cfa_offset 8
 2137              		.cfi_offset 3, -8
 2138              		.cfi_offset 14, -4
2131:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 2139              		.loc 1 2131 0
 2140 084a 406A     		ldr	r0, [r0, #36]	@, hdma_2(D)->Parent
 2141              	.LVL164:
 2142 084c FFF7FEFF 		bl	HAL_USART_TxHalfCpltCallback	@
 2143              	.LVL165:
 2144 0850 08BD     		pop	{r3, pc}	@
 2145              		.cfi_endproc
 2146              	.LFE94:
 2147              		.size	USART_DMATxHalfCplt, .-USART_DMATxHalfCplt
 2148              		.align	1
ARM GAS  /tmp/ccpGcYbE.s 			page 96


 2149              		.weak	HAL_USART_RxCpltCallback
 2150              		.syntax unified
 2151              		.thumb
 2152              		.thumb_func
 2153              		.fpu softvfp
 2154              		.type	HAL_USART_RxCpltCallback, %function
 2155              	HAL_USART_RxCpltCallback:
 2156              	.LFB119:
 2157              		.cfi_startproc
 2158              		@ args = 0, pretend = 0, frame = 0
 2159              		@ frame_needed = 0, uses_anonymous_args = 0
 2160              		@ link register save eliminated.
 2161 0852 7047     		bx	lr	@
 2162              		.cfi_endproc
 2163              	.LFE119:
 2164              		.size	HAL_USART_RxCpltCallback, .-HAL_USART_RxCpltCallback
 2165              		.align	1
 2166              		.syntax unified
 2167              		.thumb
 2168              		.thumb_func
 2169              		.fpu softvfp
 2170              		.type	USART_Receive_IT, %function
 2171              	USART_Receive_IT:
 2172              	.LFB106:
2529:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 2173              		.loc 1 2529 0
 2174              		.cfi_startproc
 2175              		@ args = 0, pretend = 0, frame = 0
 2176              		@ frame_needed = 0, uses_anonymous_args = 0
 2177              	.LVL166:
2531:src/stm32f1xx_hal_usart.c ****   {
 2178              		.loc 1 2531 0
 2179 0854 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2	@ husart_3(D)->State, husart_3(D)->State
2529:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 2180              		.loc 1 2529 0
 2181 0858 10B5     		push	{r4, lr}	@
 2182              	.LCFI20:
 2183              		.cfi_def_cfa_offset 8
 2184              		.cfi_offset 4, -8
 2185              		.cfi_offset 14, -4
2531:src/stm32f1xx_hal_usart.c ****   {
 2186              		.loc 1 2531 0
 2187 085a 222B     		cmp	r3, #34	@ husart_3(D)->State,
 2188 085c 46D1     		bne	.L171	@,
 2189              	.LVL167:
 2190              	.LBB24:
 2191              	.LBB25:
2533:src/stm32f1xx_hal_usart.c ****     {
 2192              		.loc 1 2533 0
 2193 085e 8368     		ldr	r3, [r0, #8]	@ husart_3(D)->Init.WordLength, husart_3(D)->Init.WordLength
 2194 0860 0169     		ldr	r1, [r0, #16]	@ husart_3(D)->Init.Parity, husart_3(D)->Init.Parity
 2195 0862 B3F5805F 		cmp	r3, #4096	@ husart_3(D)->Init.WordLength,
 2196 0866 0268     		ldr	r2, [r0]	@ _32, husart_3(D)->Instance
 2197 0868 C36A     		ldr	r3, [r0, #44]	@ tmp, husart_3(D)->pRxBuffPtr
 2198 086a 2AD1     		bne	.L163	@,
 2199              	.LVL168:
2536:src/stm32f1xx_hal_usart.c ****       {
ARM GAS  /tmp/ccpGcYbE.s 			page 97


 2200              		.loc 1 2536 0
 2201 086c 21BB     		cbnz	r1, .L164	@ husart_3(D)->Init.Parity,
2538:src/stm32f1xx_hal_usart.c ****         husart->pRxBuffPtr += 2U;
 2202              		.loc 1 2538 0
 2203 086e 5168     		ldr	r1, [r2, #4]	@ _12,
 2204 0870 C1F30801 		ubfx	r1, r1, #0, #9	@ tmp158, _12,,
 2205 0874 23F8021B 		strh	r1, [r3], #2	@ movhi	@ tmp158, *tmp_9
 2206              	.LVL169:
 2207              	.L176:
2544:src/stm32f1xx_hal_usart.c ****       }
 2208              		.loc 1 2544 0
 2209 0878 C362     		str	r3, [r0, #44]	@ tmp166, husart_3(D)->pRxBuffPtr
 2210              	.LVL170:
2546:src/stm32f1xx_hal_usart.c ****       {
 2211              		.loc 1 2546 0
 2212 087a 438E     		ldrh	r3, [r0, #50]	@, husart_3(D)->RxXferCount
 2213 087c 013B     		subs	r3, r3, #1	@ tmp169, husart_3(D)->RxXferCount,
 2214 087e 9BB2     		uxth	r3, r3	@ _22, tmp169
 2215 0880 4386     		strh	r3, [r0, #50]	@ movhi	@ _22, husart_3(D)->RxXferCount
 2216 0882 13B1     		cbz	r3, .L167	@ _22,
2549:src/stm32f1xx_hal_usart.c ****       }
 2217              		.loc 1 2549 0
 2218 0884 40F2FF13 		movw	r3, #511	@ tmp171,
 2219 0888 5360     		str	r3, [r2, #4]	@ tmp171, _23->DR
 2220              	.L167:
2570:src/stm32f1xx_hal_usart.c ****     {
 2221              		.loc 1 2570 0
 2222 088a 448E     		ldrh	r4, [r0, #50]	@, husart_3(D)->RxXferCount
 2223 088c A4B2     		uxth	r4, r4	@ _39, husart_3(D)->RxXferCount
 2224 088e 8CB9     		cbnz	r4, .L172	@ _39,
2573:src/stm32f1xx_hal_usart.c **** 
 2225              		.loc 1 2573 0
 2226 0890 0368     		ldr	r3, [r0]	@ _40, husart_3(D)->Instance
 2227 0892 DA68     		ldr	r2, [r3, #12]	@ _41, _40->CR1
 2228 0894 22F02002 		bic	r2, r2, #32	@ _42, _41,
 2229 0898 DA60     		str	r2, [r3, #12]	@ _42, _40->CR1
2576:src/stm32f1xx_hal_usart.c **** 
 2230              		.loc 1 2576 0
 2231 089a DA68     		ldr	r2, [r3, #12]	@ _43, _40->CR1
 2232 089c 22F48072 		bic	r2, r2, #256	@ _44, _43,
 2233 08a0 DA60     		str	r2, [r3, #12]	@ _44, _40->CR1
2579:src/stm32f1xx_hal_usart.c **** 
 2234              		.loc 1 2579 0
 2235 08a2 5A69     		ldr	r2, [r3, #20]	@ _45, _40->CR3
 2236 08a4 22F00102 		bic	r2, r2, #1	@ _46, _45,
 2237 08a8 5A61     		str	r2, [r3, #20]	@ _46, _40->CR3
2581:src/stm32f1xx_hal_usart.c **** #if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
 2238              		.loc 1 2581 0
 2239 08aa 0123     		movs	r3, #1	@ tmp186,
 2240 08ac 80F83D30 		strb	r3, [r0, #61]	@ tmp186, husart_3(D)->State
2587:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 2241              		.loc 1 2587 0
 2242 08b0 FFF7FEFF 		bl	HAL_USART_RxCpltCallback	@
 2243              	.LVL171:
 2244              	.L172:
2570:src/stm32f1xx_hal_usart.c ****     {
 2245              		.loc 1 2570 0
ARM GAS  /tmp/ccpGcYbE.s 			page 98


 2246 08b4 0020     		movs	r0, #0	@ <retval>,
 2247              	.LBE25:
 2248              	.LBE24:
2598:src/stm32f1xx_hal_usart.c **** 
 2249              		.loc 1 2598 0
 2250 08b6 10BD     		pop	{r4, pc}	@
 2251              	.LVL172:
 2252              	.L164:
 2253              	.LBB27:
 2254              	.LBB26:
2543:src/stm32f1xx_hal_usart.c ****         husart->pRxBuffPtr += 1U;
 2255              		.loc 1 2543 0
 2256 08b8 5168     		ldr	r1, [r2, #4]	@ _17,
 2257 08ba C9B2     		uxtb	r1, r1	@ _17, _17
 2258 08bc 23F8011B 		strh	r1, [r3], #1	@ movhi	@ _17, *tmp_9
 2259              	.LVL173:
 2260 08c0 DAE7     		b	.L176	@
 2261              	.LVL174:
 2262              	.L163:
2554:src/stm32f1xx_hal_usart.c ****       {
 2263              		.loc 1 2554 0
 2264 08c2 69B9     		cbnz	r1, .L168	@ husart_3(D)->Init.Parity,
2556:src/stm32f1xx_hal_usart.c ****       }
 2265              		.loc 1 2556 0
 2266 08c4 591C     		adds	r1, r3, #1	@ tmp173, tmp,
 2267 08c6 5268     		ldr	r2, [r2, #4]	@ _28,
 2268 08c8 C162     		str	r1, [r0, #44]	@ tmp173, husart_3(D)->pRxBuffPtr
 2269              	.L177:
2560:src/stm32f1xx_hal_usart.c ****       }
 2270              		.loc 1 2560 0
 2271 08ca 1A70     		strb	r2, [r3]	@ tmp177,* tmp
2563:src/stm32f1xx_hal_usart.c ****       {
 2272              		.loc 1 2563 0
 2273 08cc 438E     		ldrh	r3, [r0, #50]	@, husart_3(D)->RxXferCount
 2274 08ce 013B     		subs	r3, r3, #1	@ tmp181, husart_3(D)->RxXferCount,
 2275 08d0 9BB2     		uxth	r3, r3	@ _37, tmp181
 2276 08d2 4386     		strh	r3, [r0, #50]	@ movhi	@ _37, husart_3(D)->RxXferCount
 2277 08d4 002B     		cmp	r3, #0	@ _37
 2278 08d6 D8D0     		beq	.L167	@
2566:src/stm32f1xx_hal_usart.c ****       }
 2279              		.loc 1 2566 0
 2280 08d8 FF22     		movs	r2, #255	@ tmp183,
 2281 08da 0368     		ldr	r3, [r0]	@ _38, husart_3(D)->Instance
 2282 08dc 5A60     		str	r2, [r3, #4]	@ tmp183, _38->DR
 2283 08de D4E7     		b	.L167	@
 2284              	.L168:
2560:src/stm32f1xx_hal_usart.c ****       }
 2285              		.loc 1 2560 0
 2286 08e0 5268     		ldr	r2, [r2, #4]	@ _33,
 2287 08e2 591C     		adds	r1, r3, #1	@ tmp175, tmp,
 2288 08e4 C162     		str	r1, [r0, #44]	@ tmp175, husart_3(D)->pRxBuffPtr
 2289 08e6 02F07F02 		and	r2, r2, #127	@ tmp177, _33,
 2290 08ea EEE7     		b	.L177	@
 2291              	.LVL175:
 2292              	.L171:
 2293              	.LBE26:
 2294              	.LBE27:
ARM GAS  /tmp/ccpGcYbE.s 			page 99


2596:src/stm32f1xx_hal_usart.c ****   }
 2295              		.loc 1 2596 0
 2296 08ec 0220     		movs	r0, #2	@ <retval>,
 2297              	.LVL176:
 2298 08ee 10BD     		pop	{r4, pc}	@
 2299              		.cfi_endproc
 2300              	.LFE106:
 2301              		.size	USART_Receive_IT, .-USART_Receive_IT
 2302              		.align	1
 2303              		.weak	HAL_USART_RxHalfCpltCallback
 2304              		.syntax unified
 2305              		.thumb
 2306              		.thumb_func
 2307              		.fpu softvfp
 2308              		.type	HAL_USART_RxHalfCpltCallback, %function
 2309              	HAL_USART_RxHalfCpltCallback:
 2310              	.LFB117:
 2311              		.cfi_startproc
 2312              		@ args = 0, pretend = 0, frame = 0
 2313              		@ frame_needed = 0, uses_anonymous_args = 0
 2314              		@ link register save eliminated.
 2315 08f0 7047     		bx	lr	@
 2316              		.cfi_endproc
 2317              	.LFE117:
 2318              		.size	HAL_USART_RxHalfCpltCallback, .-HAL_USART_RxHalfCpltCallback
 2319              		.align	1
 2320              		.syntax unified
 2321              		.thumb
 2322              		.thumb_func
 2323              		.fpu softvfp
 2324              		.type	USART_DMARxHalfCplt, %function
 2325              	USART_DMARxHalfCplt:
 2326              	.LFB96:
2217:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2327              		.loc 1 2217 0
 2328              		.cfi_startproc
 2329              		@ args = 0, pretend = 0, frame = 0
 2330              		@ frame_needed = 0, uses_anonymous_args = 0
 2331              	.LVL177:
2217:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2332              		.loc 1 2217 0
 2333 08f2 08B5     		push	{r3, lr}	@
 2334              	.LCFI21:
 2335              		.cfi_def_cfa_offset 8
 2336              		.cfi_offset 3, -8
 2337              		.cfi_offset 14, -4
2225:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 2338              		.loc 1 2225 0
 2339 08f4 406A     		ldr	r0, [r0, #36]	@, hdma_2(D)->Parent
 2340              	.LVL178:
 2341 08f6 FFF7FEFF 		bl	HAL_USART_RxHalfCpltCallback	@
 2342              	.LVL179:
 2343 08fa 08BD     		pop	{r3, pc}	@
 2344              		.cfi_endproc
 2345              	.LFE96:
 2346              		.size	USART_DMARxHalfCplt, .-USART_DMARxHalfCplt
 2347              		.align	1
ARM GAS  /tmp/ccpGcYbE.s 			page 100


 2348              		.weak	HAL_USART_TxRxCpltCallback
 2349              		.syntax unified
 2350              		.thumb
 2351              		.thumb_func
 2352              		.fpu softvfp
 2353              		.type	HAL_USART_TxRxCpltCallback, %function
 2354              	HAL_USART_TxRxCpltCallback:
 2355              	.LFB115:
 2356              		.cfi_startproc
 2357              		@ args = 0, pretend = 0, frame = 0
 2358              		@ frame_needed = 0, uses_anonymous_args = 0
 2359              		@ link register save eliminated.
 2360 08fc 7047     		bx	lr	@
 2361              		.cfi_endproc
 2362              	.LFE115:
 2363              		.size	HAL_USART_TxRxCpltCallback, .-HAL_USART_TxRxCpltCallback
 2364              		.align	1
 2365              		.syntax unified
 2366              		.thumb
 2367              		.thumb_func
 2368              		.fpu softvfp
 2369              		.type	USART_DMAReceiveCplt, %function
 2370              	USART_DMAReceiveCplt:
 2371              	.LFB95:
2142:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2372              		.loc 1 2142 0
 2373              		.cfi_startproc
 2374              		@ args = 0, pretend = 0, frame = 0
 2375              		@ frame_needed = 0, uses_anonymous_args = 0
 2376              	.LVL180:
2142:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2377              		.loc 1 2142 0
 2378 08fe 08B5     		push	{r3, lr}	@
 2379              	.LCFI22:
 2380              		.cfi_def_cfa_offset 8
 2381              		.cfi_offset 3, -8
 2382              		.cfi_offset 14, -4
2142:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2383              		.loc 1 2142 0
 2384 0900 0346     		mov	r3, r0	@ hdma, hdma
2145:src/stm32f1xx_hal_usart.c ****   {
 2385              		.loc 1 2145 0
 2386 0902 1B68     		ldr	r3, [r3]	@ _5, hdma_3(D)->Instance
2143:src/stm32f1xx_hal_usart.c ****   /* DMA Normal mode */
 2387              		.loc 1 2143 0
 2388 0904 406A     		ldr	r0, [r0, #36]	@ husart, hdma_3(D)->Parent
 2389              	.LVL181:
2145:src/stm32f1xx_hal_usart.c ****   {
 2390              		.loc 1 2145 0
 2391 0906 1B68     		ldr	r3, [r3]	@ _6, _5->CCR
 2392 0908 13F02003 		ands	r3, r3, #32	@ tmp126, _6,
 2393 090c 14D1     		bne	.L182	@,
2147:src/stm32f1xx_hal_usart.c **** 
 2394              		.loc 1 2147 0
 2395 090e 4386     		strh	r3, [r0, #50]	@ movhi	@ tmp126, husart_4->RxXferCount
2150:src/stm32f1xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 2396              		.loc 1 2150 0
ARM GAS  /tmp/ccpGcYbE.s 			page 101


 2397 0910 0368     		ldr	r3, [r0]	@ _9, husart_4->Instance
 2398 0912 DA68     		ldr	r2, [r3, #12]	@ _10, _9->CR1
 2399 0914 22F48072 		bic	r2, r2, #256	@ _11, _10,
 2400 0918 DA60     		str	r2, [r3, #12]	@ _11, _9->CR1
2151:src/stm32f1xx_hal_usart.c **** 
 2401              		.loc 1 2151 0
 2402 091a 5A69     		ldr	r2, [r3, #20]	@ _13, _9->CR3
 2403 091c 22F00102 		bic	r2, r2, #1	@ _14, _13,
 2404 0920 5A61     		str	r2, [r3, #20]	@ _14, _9->CR3
2155:src/stm32f1xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 2405              		.loc 1 2155 0
 2406 0922 5A69     		ldr	r2, [r3, #20]	@ _16, _9->CR3
 2407 0924 22F04002 		bic	r2, r2, #64	@ _17, _16,
 2408 0928 5A61     		str	r2, [r3, #20]	@ _17, _9->CR3
2156:src/stm32f1xx_hal_usart.c **** 
 2409              		.loc 1 2156 0
 2410 092a 5A69     		ldr	r2, [r3, #20]	@ _19, _9->CR3
 2411 092c 22F08002 		bic	r2, r2, #128	@ _20, _19,
 2412 0930 5A61     		str	r2, [r3, #20]	@ _20, _9->CR3
2158:src/stm32f1xx_hal_usart.c **** 
 2413              		.loc 1 2158 0
 2414 0932 0123     		movs	r3, #1	@ tmp129,
 2415 0934 80F83D30 		strb	r3, [r0, #61]	@ tmp129, husart_4->State
 2416              	.L182:
2186:src/stm32f1xx_hal_usart.c ****     {
 2417              		.loc 1 2186 0
 2418 0938 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2	@ husart_4->State,
 2419 093c 222B     		cmp	r3, #34	@ husart_4->State,
 2420 093e 02D1     		bne	.L185	@,
2193:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 2421              		.loc 1 2193 0
 2422 0940 FFF7FEFF 		bl	HAL_USART_RxCpltCallback	@
 2423              	.LVL182:
 2424 0944 08BD     		pop	{r3, pc}	@
 2425              	.LVL183:
 2426              	.L185:
2204:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 2427              		.loc 1 2204 0
 2428 0946 FFF7FEFF 		bl	HAL_USART_TxRxCpltCallback	@
 2429              	.LVL184:
 2430 094a 08BD     		pop	{r3, pc}	@
 2431              		.cfi_endproc
 2432              	.LFE95:
 2433              		.size	USART_DMAReceiveCplt, .-USART_DMAReceiveCplt
 2434              		.align	1
 2435              		.syntax unified
 2436              		.thumb
 2437              		.thumb_func
 2438              		.fpu softvfp
 2439              		.type	USART_TransmitReceive_IT, %function
 2440              	USART_TransmitReceive_IT:
 2441              	.LFB107:
2607:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 2442              		.loc 1 2607 0
 2443              		.cfi_startproc
 2444              		@ args = 0, pretend = 0, frame = 0
 2445              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccpGcYbE.s 			page 102


 2446              	.LVL185:
2610:src/stm32f1xx_hal_usart.c ****   {
 2447              		.loc 1 2610 0
 2448 094c 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2	@ husart_3(D)->State, husart_3(D)->State
2607:src/stm32f1xx_hal_usart.c ****   uint16_t *tmp;
 2449              		.loc 1 2607 0
 2450 0950 10B5     		push	{r4, lr}	@
 2451              	.LCFI23:
 2452              		.cfi_def_cfa_offset 8
 2453              		.cfi_offset 4, -8
 2454              		.cfi_offset 14, -4
2610:src/stm32f1xx_hal_usart.c ****   {
 2455              		.loc 1 2610 0
 2456 0952 322B     		cmp	r3, #50	@ husart_3(D)->State,
 2457 0954 65D1     		bne	.L201	@,
 2458              	.LVL186:
 2459              	.LBB30:
 2460              	.LBB31:
2612:src/stm32f1xx_hal_usart.c ****     {
 2461              		.loc 1 2612 0
 2462 0956 438D     		ldrh	r3, [r0, #42]	@, husart_3(D)->TxXferCount
 2463 0958 9BB2     		uxth	r3, r3	@ _8, husart_3(D)->TxXferCount
 2464 095a E3B1     		cbz	r3, .L191	@ _8,
2614:src/stm32f1xx_hal_usart.c ****       {
 2465              		.loc 1 2614 0
 2466 095c 0268     		ldr	r2, [r0]	@ _9, husart_3(D)->Instance
 2467 095e 1368     		ldr	r3, [r2]	@ _10, _9->SR
 2468 0960 1906     		lsls	r1, r3, #24	@, _10,
 2469 0962 18D5     		bpl	.L191	@,
2616:src/stm32f1xx_hal_usart.c ****         {
 2470              		.loc 1 2616 0
 2471 0964 8368     		ldr	r3, [r0, #8]	@ husart_3(D)->Init.WordLength, husart_3(D)->Init.WordLength
 2472 0966 B3F5805F 		cmp	r3, #4096	@ husart_3(D)->Init.WordLength,
 2473 096a 436A     		ldr	r3, [r0, #36]	@ _20, husart_3(D)->pTxBuffPtr
 2474 096c 44D1     		bne	.L193	@,
 2475              	.LVL187:
2619:src/stm32f1xx_hal_usart.c ****           if (husart->Init.Parity == USART_PARITY_NONE)
 2476              		.loc 1 2619 0
 2477 096e 1988     		ldrh	r1, [r3]	@, *tmp_13
 2478 0970 C1F30801 		ubfx	r1, r1, #0, #9	@ _16, *tmp_13,,
 2479 0974 5160     		str	r1, [r2, #4]	@ _16, _9->DR
2620:src/stm32f1xx_hal_usart.c ****           {
 2480              		.loc 1 2620 0
 2481 0976 0169     		ldr	r1, [r0, #16]	@ husart_3(D)->Init.Parity, husart_3(D)->Init.Parity
 2482 0978 0029     		cmp	r1, #0	@ husart_3(D)->Init.Parity
 2483 097a 3BD1     		bne	.L194	@
2622:src/stm32f1xx_hal_usart.c ****           }
 2484              		.loc 1 2622 0
 2485 097c 0233     		adds	r3, r3, #2	@ tmp181, _20,
 2486              	.LVL188:
 2487              	.L212:
2626:src/stm32f1xx_hal_usart.c ****           }
 2488              		.loc 1 2626 0
 2489 097e 4362     		str	r3, [r0, #36]	@ tmp182, husart_3(D)->pTxBuffPtr
 2490              	.LVL189:
 2491              	.L195:
2633:src/stm32f1xx_hal_usart.c **** 
ARM GAS  /tmp/ccpGcYbE.s 			page 103


 2492              		.loc 1 2633 0
 2493 0980 438D     		ldrh	r3, [r0, #42]	@, husart_3(D)->TxXferCount
 2494 0982 013B     		subs	r3, r3, #1	@ tmp186, husart_3(D)->TxXferCount,
 2495 0984 9BB2     		uxth	r3, r3	@ _25, tmp186
 2496 0986 4385     		strh	r3, [r0, #42]	@ movhi	@ _25, husart_3(D)->TxXferCount
2636:src/stm32f1xx_hal_usart.c ****         {
 2497              		.loc 1 2636 0
 2498 0988 438D     		ldrh	r3, [r0, #42]	@, husart_3(D)->TxXferCount
 2499 098a 9BB2     		uxth	r3, r3	@ _26, husart_3(D)->TxXferCount
 2500 098c 1BB9     		cbnz	r3, .L191	@ _26,
2638:src/stm32f1xx_hal_usart.c ****         }
 2501              		.loc 1 2638 0
 2502 098e D368     		ldr	r3, [r2, #12]	@ _28, _27->CR1
 2503 0990 23F08003 		bic	r3, r3, #128	@ _29, _28,
 2504 0994 D360     		str	r3, [r2, #12]	@ _29, _27->CR1
 2505              	.L191:
2643:src/stm32f1xx_hal_usart.c ****     {
 2506              		.loc 1 2643 0
 2507 0996 438E     		ldrh	r3, [r0, #50]	@, husart_3(D)->RxXferCount
 2508 0998 9BB2     		uxth	r3, r3	@ _30, husart_3(D)->RxXferCount
 2509 099a A3B1     		cbz	r3, .L196	@ _30,
2645:src/stm32f1xx_hal_usart.c ****       {
 2510              		.loc 1 2645 0
 2511 099c 0268     		ldr	r2, [r0]	@ _31, husart_3(D)->Instance
 2512 099e 1368     		ldr	r3, [r2]	@ _32, _31->SR
 2513 09a0 9B06     		lsls	r3, r3, #26	@, _32,
 2514 09a2 10D5     		bpl	.L196	@,
2647:src/stm32f1xx_hal_usart.c ****         {
 2515              		.loc 1 2647 0
 2516 09a4 8368     		ldr	r3, [r0, #8]	@ husart_3(D)->Init.WordLength, husart_3(D)->Init.WordLength
 2517 09a6 0169     		ldr	r1, [r0, #16]	@ husart_3(D)->Init.Parity, husart_3(D)->Init.Parity
 2518 09a8 B3F5805F 		cmp	r3, #4096	@ husart_3(D)->Init.WordLength,
 2519 09ac C36A     		ldr	r3, [r0, #44]	@ tmp, husart_3(D)->pRxBuffPtr
 2520 09ae 2CD1     		bne	.L197	@,
 2521              	.LVL190:
2652:src/stm32f1xx_hal_usart.c ****             husart->pRxBuffPtr += 2U;
 2522              		.loc 1 2652 0
 2523 09b0 5268     		ldr	r2, [r2, #4]	@ _37,
2650:src/stm32f1xx_hal_usart.c ****           {
 2524              		.loc 1 2650 0
 2525 09b2 31BB     		cbnz	r1, .L198	@ husart_3(D)->Init.Parity,
2652:src/stm32f1xx_hal_usart.c ****             husart->pRxBuffPtr += 2U;
 2526              		.loc 1 2652 0
 2527 09b4 C2F30802 		ubfx	r2, r2, #0, #9	@ tmp196, _37,,
 2528 09b8 23F8022B 		strh	r2, [r3], #2	@ movhi	@ tmp196, *tmp_35
 2529              	.LVL191:
 2530              	.L213:
2658:src/stm32f1xx_hal_usart.c ****           }
 2531              		.loc 1 2658 0
 2532 09bc C362     		str	r3, [r0, #44]	@ tmp204, husart_3(D)->pRxBuffPtr
 2533              	.LVL192:
 2534              	.L199:
2672:src/stm32f1xx_hal_usart.c ****       }
 2535              		.loc 1 2672 0
 2536 09be 438E     		ldrh	r3, [r0, #50]	@, husart_3(D)->RxXferCount
 2537 09c0 013B     		subs	r3, r3, #1	@ tmp214, husart_3(D)->RxXferCount,
 2538 09c2 9BB2     		uxth	r3, r3	@ _56, tmp214
ARM GAS  /tmp/ccpGcYbE.s 			page 104


 2539 09c4 4386     		strh	r3, [r0, #50]	@ movhi	@ _56, husart_3(D)->RxXferCount
 2540              	.L196:
2677:src/stm32f1xx_hal_usart.c ****     {
 2541              		.loc 1 2677 0
 2542 09c6 448E     		ldrh	r4, [r0, #50]	@, husart_3(D)->RxXferCount
 2543 09c8 A4B2     		uxth	r4, r4	@ _57, husart_3(D)->RxXferCount
 2544 09ca 8CB9     		cbnz	r4, .L202	@ _57,
2680:src/stm32f1xx_hal_usart.c **** 
 2545              		.loc 1 2680 0
 2546 09cc 0368     		ldr	r3, [r0]	@ _58, husart_3(D)->Instance
 2547 09ce DA68     		ldr	r2, [r3, #12]	@ _59, _58->CR1
 2548 09d0 22F02002 		bic	r2, r2, #32	@ _60, _59,
 2549 09d4 DA60     		str	r2, [r3, #12]	@ _60, _58->CR1
2683:src/stm32f1xx_hal_usart.c **** 
 2550              		.loc 1 2683 0
 2551 09d6 DA68     		ldr	r2, [r3, #12]	@ _61, _58->CR1
 2552 09d8 22F48072 		bic	r2, r2, #256	@ _62, _61,
 2553 09dc DA60     		str	r2, [r3, #12]	@ _62, _58->CR1
2686:src/stm32f1xx_hal_usart.c **** 
 2554              		.loc 1 2686 0
 2555 09de 5A69     		ldr	r2, [r3, #20]	@ _63, _58->CR3
 2556 09e0 22F00102 		bic	r2, r2, #1	@ _64, _63,
 2557 09e4 5A61     		str	r2, [r3, #20]	@ _64, _58->CR3
2688:src/stm32f1xx_hal_usart.c **** 
 2558              		.loc 1 2688 0
 2559 09e6 0123     		movs	r3, #1	@ tmp218,
 2560 09e8 80F83D30 		strb	r3, [r0, #61]	@ tmp218, husart_3(D)->State
2695:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 2561              		.loc 1 2695 0
 2562 09ec FFF7FEFF 		bl	HAL_USART_TxRxCpltCallback	@
 2563              	.LVL193:
 2564              	.L202:
2677:src/stm32f1xx_hal_usart.c ****     {
 2565              		.loc 1 2677 0
 2566 09f0 0020     		movs	r0, #0	@ <retval>,
 2567              	.LBE31:
 2568              	.LBE30:
2707:src/stm32f1xx_hal_usart.c **** 
 2569              		.loc 1 2707 0
 2570 09f2 10BD     		pop	{r4, pc}	@
 2571              	.LVL194:
 2572              	.L194:
 2573              	.LBB33:
 2574              	.LBB32:
2626:src/stm32f1xx_hal_usart.c ****           }
 2575              		.loc 1 2626 0
 2576 09f4 0133     		adds	r3, r3, #1	@ tmp182, _20,
 2577              	.LVL195:
 2578 09f6 C2E7     		b	.L212	@
 2579              	.LVL196:
 2580              	.L193:
2631:src/stm32f1xx_hal_usart.c ****         }
 2581              		.loc 1 2631 0
 2582 09f8 591C     		adds	r1, r3, #1	@ tmp183, _20,
 2583 09fa 4162     		str	r1, [r0, #36]	@ tmp183, husart_3(D)->pTxBuffPtr
 2584 09fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2	@ _23, *_20
 2585 09fe 5360     		str	r3, [r2, #4]	@ _23, _9->DR
ARM GAS  /tmp/ccpGcYbE.s 			page 105


 2586 0a00 BEE7     		b	.L195	@
 2587              	.LVL197:
 2588              	.L198:
2657:src/stm32f1xx_hal_usart.c ****             husart->pRxBuffPtr += 1U;
 2589              		.loc 1 2657 0
 2590 0a02 D2B2     		uxtb	r2, r2	@ _41, _41
 2591 0a04 23F8012B 		strh	r2, [r3], #1	@ movhi	@ _41, *tmp_35
 2592              	.LVL198:
 2593 0a08 D8E7     		b	.L213	@
 2594              	.LVL199:
 2595              	.L197:
2663:src/stm32f1xx_hal_usart.c ****           {
 2596              		.loc 1 2663 0
 2597 0a0a 21B9     		cbnz	r1, .L200	@ husart_3(D)->Init.Parity,
2665:src/stm32f1xx_hal_usart.c ****           }
 2598              		.loc 1 2665 0
 2599 0a0c 591C     		adds	r1, r3, #1	@ tmp206, tmp,
 2600 0a0e 5268     		ldr	r2, [r2, #4]	@ _48,
 2601 0a10 C162     		str	r1, [r0, #44]	@ tmp206, husart_3(D)->pRxBuffPtr
 2602              	.L214:
2669:src/stm32f1xx_hal_usart.c ****           }
 2603              		.loc 1 2669 0
 2604 0a12 1A70     		strb	r2, [r3]	@ tmp210,* tmp
 2605 0a14 D3E7     		b	.L199	@
 2606              	.L200:
 2607 0a16 5268     		ldr	r2, [r2, #4]	@ _52,
 2608 0a18 591C     		adds	r1, r3, #1	@ tmp208, tmp,
 2609 0a1a C162     		str	r1, [r0, #44]	@ tmp208, husart_3(D)->pRxBuffPtr
 2610 0a1c 02F07F02 		and	r2, r2, #127	@ tmp210, _52,
 2611 0a20 F7E7     		b	.L214	@
 2612              	.LVL200:
 2613              	.L201:
 2614              	.LBE32:
 2615              	.LBE33:
2705:src/stm32f1xx_hal_usart.c ****   }
 2616              		.loc 1 2705 0
 2617 0a22 0220     		movs	r0, #2	@ <retval>,
 2618              	.LVL201:
 2619 0a24 10BD     		pop	{r4, pc}	@
 2620              		.cfi_endproc
 2621              	.LFE107:
 2622              		.size	USART_TransmitReceive_IT, .-USART_TransmitReceive_IT
 2623              		.align	1
 2624              		.weak	HAL_USART_ErrorCallback
 2625              		.syntax unified
 2626              		.thumb
 2627              		.thumb_func
 2628              		.fpu softvfp
 2629              		.type	HAL_USART_ErrorCallback, %function
 2630              	HAL_USART_ErrorCallback:
 2631              	.LFB113:
 2632              		.cfi_startproc
 2633              		@ args = 0, pretend = 0, frame = 0
 2634              		@ frame_needed = 0, uses_anonymous_args = 0
 2635              		@ link register save eliminated.
 2636 0a26 7047     		bx	lr	@
 2637              		.cfi_endproc
ARM GAS  /tmp/ccpGcYbE.s 			page 106


 2638              	.LFE113:
 2639              		.size	HAL_USART_ErrorCallback, .-HAL_USART_ErrorCallback
 2640              		.align	1
 2641              		.syntax unified
 2642              		.thumb
 2643              		.thumb_func
 2644              		.fpu softvfp
 2645              		.type	USART_DMAError, %function
 2646              	USART_DMAError:
 2647              	.LFB97:
2236:src/stm32f1xx_hal_usart.c ****   uint32_t dmarequest = 0x00U;
 2648              		.loc 1 2236 0
 2649              		.cfi_startproc
 2650              		@ args = 0, pretend = 0, frame = 0
 2651              		@ frame_needed = 0, uses_anonymous_args = 0
 2652              	.LVL202:
2236:src/stm32f1xx_hal_usart.c ****   uint32_t dmarequest = 0x00U;
 2653              		.loc 1 2236 0
 2654 0a28 08B5     		push	{r3, lr}	@
 2655              	.LCFI24:
 2656              		.cfi_def_cfa_offset 8
 2657              		.cfi_offset 3, -8
 2658              		.cfi_offset 14, -4
2239:src/stm32f1xx_hal_usart.c ****   husart->TxXferCount = 0x00U;
 2659              		.loc 1 2239 0
 2660 0a2a 0023     		movs	r3, #0	@ tmp124,
2238:src/stm32f1xx_hal_usart.c ****   husart->RxXferCount = 0x00U;
 2661              		.loc 1 2238 0
 2662 0a2c 416A     		ldr	r1, [r0, #36]	@ husart, hdma_4(D)->Parent
 2663              	.LVL203:
2239:src/stm32f1xx_hal_usart.c ****   husart->TxXferCount = 0x00U;
 2664              		.loc 1 2239 0
 2665 0a2e 4B86     		strh	r3, [r1, #50]	@ movhi	@ tmp124, husart_5->RxXferCount
2240:src/stm32f1xx_hal_usart.c **** 
 2666              		.loc 1 2240 0
 2667 0a30 4B85     		strh	r3, [r1, #42]	@ movhi	@ tmp124, husart_5->TxXferCount
2243:src/stm32f1xx_hal_usart.c ****   if ((husart->State == HAL_USART_STATE_BUSY_TX) && dmarequest)
 2668              		.loc 1 2243 0
 2669 0a32 0B68     		ldr	r3, [r1]	@ _8, husart_5->Instance
 2670 0a34 5A69     		ldr	r2, [r3, #20]	@ _9, _8->CR3
 2671              	.LVL204:
2244:src/stm32f1xx_hal_usart.c ****   {
 2672              		.loc 1 2244 0
 2673 0a36 91F83D00 		ldrb	r0, [r1, #61]	@ zero_extendqisi2	@ husart_5->State, husart_5->State
 2674              	.LVL205:
 2675 0a3a 1228     		cmp	r0, #18	@ husart_5->State,
 2676 0a3c 08D1     		bne	.L217	@,
2244:src/stm32f1xx_hal_usart.c ****   {
 2677              		.loc 1 2244 0 is_stmt 0 discriminator 1
 2678 0a3e 1206     		lsls	r2, r2, #24	@, _9,
 2679              	.LVL206:
 2680 0a40 06D5     		bpl	.L217	@,
 2681              	.LVL207:
 2682              	.LBB36:
 2683              	.LBB37:
2320:src/stm32f1xx_hal_usart.c **** 
 2684              		.loc 1 2320 0 is_stmt 1
ARM GAS  /tmp/ccpGcYbE.s 			page 107


 2685 0a42 DA68     		ldr	r2, [r3, #12]	@ _24, _8->CR1
 2686 0a44 22F0C002 		bic	r2, r2, #192	@ _25, _24,
 2687 0a48 DA60     		str	r2, [r3, #12]	@ _25, _8->CR1
2323:src/stm32f1xx_hal_usart.c **** }
 2688              		.loc 1 2323 0
 2689 0a4a 0122     		movs	r2, #1	@ tmp131,
 2690 0a4c 81F83D20 		strb	r2, [r1, #61]	@ tmp131, husart_5->State
 2691              	.LVL208:
 2692              	.L217:
 2693              	.LBE37:
 2694              	.LBE36:
2250:src/stm32f1xx_hal_usart.c ****   if ((husart->State == HAL_USART_STATE_BUSY_RX) && dmarequest)
 2695              		.loc 1 2250 0
 2696 0a50 5B69     		ldr	r3, [r3, #20]	@ _14, _8->CR3
 2697              	.LVL209:
2251:src/stm32f1xx_hal_usart.c ****   {
 2698              		.loc 1 2251 0
 2699 0a52 91F83D20 		ldrb	r2, [r1, #61]	@ zero_extendqisi2	@ husart_5->State, husart_5->State
 2700 0a56 222A     		cmp	r2, #34	@ husart_5->State,
 2701 0a58 04D1     		bne	.L218	@,
2251:src/stm32f1xx_hal_usart.c ****   {
 2702              		.loc 1 2251 0 is_stmt 0 discriminator 1
 2703 0a5a 5B06     		lsls	r3, r3, #25	@, _14,
 2704              	.LVL210:
 2705 0a5c 02D5     		bpl	.L218	@,
2253:src/stm32f1xx_hal_usart.c ****   }
 2706              		.loc 1 2253 0 is_stmt 1
 2707 0a5e 0846     		mov	r0, r1	@, husart
 2708 0a60 FFF7CEFA 		bl	USART_EndRxTransfer	@
 2709              	.LVL211:
 2710              	.L218:
2256:src/stm32f1xx_hal_usart.c ****   husart->State = HAL_USART_STATE_READY;
 2711              		.loc 1 2256 0
 2712 0a64 0B6C     		ldr	r3, [r1, #64]	@ _18, husart_5->ErrorCode
2264:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 2713              		.loc 1 2264 0
 2714 0a66 0846     		mov	r0, r1	@, husart
2256:src/stm32f1xx_hal_usart.c ****   husart->State = HAL_USART_STATE_READY;
 2715              		.loc 1 2256 0
 2716 0a68 43F01003 		orr	r3, r3, #16	@ _19, _18,
 2717 0a6c 0B64     		str	r3, [r1, #64]	@ _19, husart_5->ErrorCode
2257:src/stm32f1xx_hal_usart.c **** 
 2718              		.loc 1 2257 0
 2719 0a6e 0123     		movs	r3, #1	@ tmp137,
 2720 0a70 81F83D30 		strb	r3, [r1, #61]	@ tmp137, husart_5->State
2264:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 2721              		.loc 1 2264 0
 2722 0a74 FFF7FEFF 		bl	HAL_USART_ErrorCallback	@
 2723              	.LVL212:
 2724 0a78 08BD     		pop	{r3, pc}	@
 2725              		.cfi_endproc
 2726              	.LFE97:
 2727              		.size	USART_DMAError, .-USART_DMAError
 2728              		.align	1
 2729              		.global	HAL_USART_IRQHandler
 2730              		.syntax unified
 2731              		.thumb
ARM GAS  /tmp/ccpGcYbE.s 			page 108


 2732              		.thumb_func
 2733              		.fpu softvfp
 2734              		.type	HAL_USART_IRQHandler, %function
 2735              	HAL_USART_IRQHandler:
 2736              	.LFB83:
1745:src/stm32f1xx_hal_usart.c ****   uint32_t isrflags = READ_REG(husart->Instance->SR);
 2737              		.loc 1 1745 0
 2738              		.cfi_startproc
 2739              		@ args = 0, pretend = 0, frame = 0
 2740              		@ frame_needed = 0, uses_anonymous_args = 0
 2741              	.LVL213:
1746:src/stm32f1xx_hal_usart.c ****   uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 2742              		.loc 1 1746 0
 2743 0a7a 0368     		ldr	r3, [r0]	@ _9, husart_8(D)->Instance
1745:src/stm32f1xx_hal_usart.c ****   uint32_t isrflags = READ_REG(husart->Instance->SR);
 2744              		.loc 1 1745 0
 2745 0a7c 70B5     		push	{r4, r5, r6, lr}	@
 2746              	.LCFI25:
 2747              		.cfi_def_cfa_offset 16
 2748              		.cfi_offset 4, -16
 2749              		.cfi_offset 5, -12
 2750              		.cfi_offset 6, -8
 2751              		.cfi_offset 14, -4
1746:src/stm32f1xx_hal_usart.c ****   uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 2752              		.loc 1 1746 0
 2753 0a7e 1A68     		ldr	r2, [r3]	@ isrflags, _9->SR
 2754              	.LVL214:
1745:src/stm32f1xx_hal_usart.c ****   uint32_t isrflags = READ_REG(husart->Instance->SR);
 2755              		.loc 1 1745 0
 2756 0a80 0446     		mov	r4, r0	@ husart, husart
1754:src/stm32f1xx_hal_usart.c ****   {
 2757              		.loc 1 1754 0
 2758 0a82 1607     		lsls	r6, r2, #28	@, isrflags,
1747:src/stm32f1xx_hal_usart.c ****   uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 2759              		.loc 1 1747 0
 2760 0a84 D968     		ldr	r1, [r3, #12]	@ cr1its, _9->CR1
 2761              	.LVL215:
1748:src/stm32f1xx_hal_usart.c ****   uint32_t errorflags = 0x00U;
 2762              		.loc 1 1748 0
 2763 0a86 5D69     		ldr	r5, [r3, #20]	@ cr3its, _9->CR3
 2764              	.LVL216:
1754:src/stm32f1xx_hal_usart.c ****   {
 2765              		.loc 1 1754 0
 2766 0a88 0ED1     		bne	.L226	@,
1757:src/stm32f1xx_hal_usart.c ****     {
 2767              		.loc 1 1757 0
 2768 0a8a 9606     		lsls	r6, r2, #26	@, isrflags,
 2769 0a8c 68D5     		bpl	.L227	@,
1757:src/stm32f1xx_hal_usart.c ****     {
 2770              		.loc 1 1757 0 is_stmt 0 discriminator 1
 2771 0a8e 8D06     		lsls	r5, r1, #26	@, cr1its,
 2772              	.LVL217:
 2773 0a90 66D5     		bpl	.L227	@,
1759:src/stm32f1xx_hal_usart.c ****       {
 2774              		.loc 1 1759 0 is_stmt 1
 2775 0a92 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2	@ husart_8(D)->State, husart_8(D)->State
 2776 0a96 222B     		cmp	r3, #34	@ husart_8(D)->State,
ARM GAS  /tmp/ccpGcYbE.s 			page 109


 2777 0a98 02D1     		bne	.L228	@,
1898:src/stm32f1xx_hal_usart.c **** 
 2778              		.loc 1 1898 0
 2779 0a9a BDE87040 		pop	{r4, r5, r6, lr}	@
 2780              	.LCFI26:
 2781              		.cfi_remember_state
 2782              		.cfi_restore 14
 2783              		.cfi_restore 6
 2784              		.cfi_restore 5
 2785              		.cfi_restore 4
 2786              		.cfi_def_cfa_offset 0
1761:src/stm32f1xx_hal_usart.c ****       }
 2787              		.loc 1 1761 0
 2788 0a9e D9E6     		b	USART_Receive_IT	@
 2789              	.LVL218:
 2790              	.L228:
 2791              	.LCFI27:
 2792              		.cfi_restore_state
1765:src/stm32f1xx_hal_usart.c ****       }
 2793              		.loc 1 1765 0
 2794 0aa0 2046     		mov	r0, r4	@, husart
 2795              	.LVL219:
1898:src/stm32f1xx_hal_usart.c **** 
 2796              		.loc 1 1898 0
 2797 0aa2 BDE87040 		pop	{r4, r5, r6, lr}	@
 2798              	.LCFI28:
 2799              		.cfi_remember_state
 2800              		.cfi_restore 14
 2801              		.cfi_restore 6
 2802              		.cfi_restore 5
 2803              		.cfi_restore 4
 2804              		.cfi_def_cfa_offset 0
 2805              	.LVL220:
1765:src/stm32f1xx_hal_usart.c ****       }
 2806              		.loc 1 1765 0
 2807 0aa6 51E7     		b	USART_TransmitReceive_IT	@
 2808              	.LVL221:
 2809              	.L226:
 2810              	.LCFI29:
 2811              		.cfi_restore_state
1771:src/stm32f1xx_hal_usart.c ****   {
 2812              		.loc 1 1771 0 discriminator 1
 2813 0aa8 15F00105 		ands	r5, r5, #1	@ _19, cr3its,
 2814              	.LVL222:
 2815 0aac 02D1     		bne	.L229	@,
1771:src/stm32f1xx_hal_usart.c ****   {
 2816              		.loc 1 1771 0 is_stmt 0 discriminator 2
 2817 0aae 11F4907F 		tst	r1, #288	@ cr1its,
 2818 0ab2 55D0     		beq	.L227	@,
 2819              	.L229:
1774:src/stm32f1xx_hal_usart.c ****     {
 2820              		.loc 1 1774 0 is_stmt 1
 2821 0ab4 D307     		lsls	r3, r2, #31	@, isrflags,
 2822 0ab6 05D5     		bpl	.L230	@,
1774:src/stm32f1xx_hal_usart.c ****     {
 2823              		.loc 1 1774 0 is_stmt 0 discriminator 1
 2824 0ab8 CE05     		lsls	r6, r1, #23	@, cr1its,
ARM GAS  /tmp/ccpGcYbE.s 			page 110


1776:src/stm32f1xx_hal_usart.c ****     }
 2825              		.loc 1 1776 0 is_stmt 1 discriminator 1
 2826 0aba 42BF     		ittt	mi
 2827 0abc 236C     		ldrmi	r3, [r4, #64]	@ _23, husart_8(D)->ErrorCode
 2828 0abe 43F00103 		orrmi	r3, r3, #1	@ _24, _23,
 2829 0ac2 2364     		strmi	r3, [r4, #64]	@ _24, husart_8(D)->ErrorCode
 2830              	.L230:
1780:src/stm32f1xx_hal_usart.c ****     {
 2831              		.loc 1 1780 0
 2832 0ac4 5007     		lsls	r0, r2, #29	@, isrflags,
 2833              	.LVL223:
 2834 0ac6 04D5     		bpl	.L231	@,
1780:src/stm32f1xx_hal_usart.c ****     {
 2835              		.loc 1 1780 0 is_stmt 0 discriminator 1
 2836 0ac8 1DB1     		cbz	r5, .L231	@ _19,
1782:src/stm32f1xx_hal_usart.c ****     }
 2837              		.loc 1 1782 0 is_stmt 1
 2838 0aca 236C     		ldr	r3, [r4, #64]	@ _27, husart_8(D)->ErrorCode
 2839 0acc 43F00203 		orr	r3, r3, #2	@ _28, _27,
 2840 0ad0 2364     		str	r3, [r4, #64]	@ _28, husart_8(D)->ErrorCode
 2841              	.L231:
1786:src/stm32f1xx_hal_usart.c ****     {
 2842              		.loc 1 1786 0
 2843 0ad2 9307     		lsls	r3, r2, #30	@, isrflags,
 2844 0ad4 04D5     		bpl	.L232	@,
1786:src/stm32f1xx_hal_usart.c ****     {
 2845              		.loc 1 1786 0 is_stmt 0 discriminator 1
 2846 0ad6 1DB1     		cbz	r5, .L232	@ _19,
1788:src/stm32f1xx_hal_usart.c ****     }
 2847              		.loc 1 1788 0 is_stmt 1
 2848 0ad8 236C     		ldr	r3, [r4, #64]	@ _31, husart_8(D)->ErrorCode
 2849 0ada 43F00403 		orr	r3, r3, #4	@ _32, _31,
 2850 0ade 2364     		str	r3, [r4, #64]	@ _32, husart_8(D)->ErrorCode
 2851              	.L232:
1792:src/stm32f1xx_hal_usart.c ****     {
 2852              		.loc 1 1792 0
 2853 0ae0 1607     		lsls	r6, r2, #28	@, isrflags,
 2854 0ae2 04D5     		bpl	.L233	@,
1792:src/stm32f1xx_hal_usart.c ****     {
 2855              		.loc 1 1792 0 is_stmt 0 discriminator 1
 2856 0ae4 1DB1     		cbz	r5, .L233	@ _19,
1794:src/stm32f1xx_hal_usart.c ****     }
 2857              		.loc 1 1794 0 is_stmt 1
 2858 0ae6 236C     		ldr	r3, [r4, #64]	@ _35, husart_8(D)->ErrorCode
 2859 0ae8 43F00803 		orr	r3, r3, #8	@ _36, _35,
 2860 0aec 2364     		str	r3, [r4, #64]	@ _36, husart_8(D)->ErrorCode
 2861              	.L233:
1797:src/stm32f1xx_hal_usart.c ****     {
 2862              		.loc 1 1797 0
 2863 0aee 236C     		ldr	r3, [r4, #64]	@ _38, husart_8(D)->ErrorCode
 2864 0af0 002B     		cmp	r3, #0	@ _38
 2865 0af2 75D0     		beq	.L225	@
1800:src/stm32f1xx_hal_usart.c ****       {
 2866              		.loc 1 1800 0
 2867 0af4 9506     		lsls	r5, r2, #26	@, isrflags,
 2868 0af6 08D5     		bpl	.L236	@,
1800:src/stm32f1xx_hal_usart.c ****       {
ARM GAS  /tmp/ccpGcYbE.s 			page 111


 2869              		.loc 1 1800 0 is_stmt 0 discriminator 1
 2870 0af8 8806     		lsls	r0, r1, #26	@, cr1its,
 2871 0afa 06D5     		bpl	.L236	@,
1802:src/stm32f1xx_hal_usart.c ****         {
 2872              		.loc 1 1802 0 is_stmt 1
 2873 0afc 94F83D30 		ldrb	r3, [r4, #61]	@ zero_extendqisi2	@ husart_8(D)->State, husart_8(D)->State
1804:src/stm32f1xx_hal_usart.c ****         }
 2874              		.loc 1 1804 0
 2875 0b00 2046     		mov	r0, r4	@, husart
1802:src/stm32f1xx_hal_usart.c ****         {
 2876              		.loc 1 1802 0
 2877 0b02 222B     		cmp	r3, #34	@ husart_8(D)->State,
 2878 0b04 21D1     		bne	.L237	@,
 2879              	.LVL224:
1804:src/stm32f1xx_hal_usart.c ****         }
 2880              		.loc 1 1804 0
 2881 0b06 FFF7A5FE 		bl	USART_Receive_IT	@
 2882              	.LVL225:
 2883              	.L236:
1813:src/stm32f1xx_hal_usart.c ****       if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 2884              		.loc 1 1813 0
 2885 0b0a 2368     		ldr	r3, [r4]	@ _44, husart_8(D)->Instance
1818:src/stm32f1xx_hal_usart.c **** 
 2886              		.loc 1 1818 0
 2887 0b0c 2046     		mov	r0, r4	@, husart
1813:src/stm32f1xx_hal_usart.c ****       if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 2888              		.loc 1 1813 0
 2889 0b0e 5D69     		ldr	r5, [r3, #20]	@ _45, _44->CR3
 2890              	.LVL226:
1814:src/stm32f1xx_hal_usart.c ****       {
 2891              		.loc 1 1814 0
 2892 0b10 226C     		ldr	r2, [r4, #64]	@ _47, husart_8(D)->ErrorCode
 2893 0b12 1107     		lsls	r1, r2, #28	@, _47,
 2894 0b14 02D4     		bmi	.L238	@,
 2895              	.LVL227:
1814:src/stm32f1xx_hal_usart.c ****       {
 2896              		.loc 1 1814 0 is_stmt 0 discriminator 1
 2897 0b16 15F04005 		ands	r5, r5, #64	@ tmp199, _45,
 2898              	.LVL228:
 2899 0b1a 1DD0     		beq	.L239	@,
 2900              	.LVL229:
 2901              	.L238:
1818:src/stm32f1xx_hal_usart.c **** 
 2902              		.loc 1 1818 0 is_stmt 1
 2903 0b1c FFF770FA 		bl	USART_EndRxTransfer	@
 2904              	.LVL230:
1821:src/stm32f1xx_hal_usart.c ****         {
 2905              		.loc 1 1821 0
 2906 0b20 2368     		ldr	r3, [r4]	@ _52, husart_8(D)->Instance
 2907 0b22 5A69     		ldr	r2, [r3, #20]	@ _53, _52->CR3
 2908 0b24 5206     		lsls	r2, r2, #25	@, _53,
 2909 0b26 13D5     		bpl	.L240	@,
1823:src/stm32f1xx_hal_usart.c **** 
 2910              		.loc 1 1823 0
 2911 0b28 5A69     		ldr	r2, [r3, #20]	@ _56, _52->CR3
1826:src/stm32f1xx_hal_usart.c ****           {
 2912              		.loc 1 1826 0
ARM GAS  /tmp/ccpGcYbE.s 			page 112


 2913 0b2a A06B     		ldr	r0, [r4, #56]	@ _59, husart_8(D)->hdmarx
 2914              	.LVL231:
1823:src/stm32f1xx_hal_usart.c **** 
 2915              		.loc 1 1823 0
 2916 0b2c 22F04002 		bic	r2, r2, #64	@ _57, _56,
 2917 0b30 5A61     		str	r2, [r3, #20]	@ _57, _52->CR3
1826:src/stm32f1xx_hal_usart.c ****           {
 2918              		.loc 1 1826 0
 2919 0b32 68B1     		cbz	r0, .L240	@ _59,
1830:src/stm32f1xx_hal_usart.c **** 
 2920              		.loc 1 1830 0
 2921 0b34 2B4B     		ldr	r3, .L307	@ tmp201,
 2922 0b36 4363     		str	r3, [r0, #52]	@ tmp201, _59->XferAbortCallback
1832:src/stm32f1xx_hal_usart.c ****             {
 2923              		.loc 1 1832 0
 2924 0b38 FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 2925              	.LVL232:
 2926 0b3c 0028     		cmp	r0, #0	@
 2927 0b3e 4FD0     		beq	.L225	@
1835:src/stm32f1xx_hal_usart.c ****             }
 2928              		.loc 1 1835 0
 2929 0b40 A06B     		ldr	r0, [r4, #56]	@ _63, husart_8(D)->hdmarx
1898:src/stm32f1xx_hal_usart.c **** 
 2930              		.loc 1 1898 0
 2931 0b42 BDE87040 		pop	{r4, r5, r6, lr}	@
 2932              	.LCFI30:
 2933              		.cfi_remember_state
 2934              		.cfi_restore 14
 2935              		.cfi_restore 6
 2936              		.cfi_restore 5
 2937              		.cfi_restore 4
 2938              		.cfi_def_cfa_offset 0
 2939              	.LVL233:
1835:src/stm32f1xx_hal_usart.c ****             }
 2940              		.loc 1 1835 0
 2941 0b46 436B     		ldr	r3, [r0, #52]	@ _63->XferAbortCallback, _63->XferAbortCallback
 2942 0b48 1847     		bx	r3	@ indirect register sibling call	@ _63->XferAbortCallback
 2943              	.LVL234:
 2944              	.L237:
 2945              	.LCFI31:
 2946              		.cfi_restore_state
1808:src/stm32f1xx_hal_usart.c ****         }
 2947              		.loc 1 1808 0
 2948 0b4a FFF7FFFE 		bl	USART_TransmitReceive_IT	@
 2949              	.LVL235:
 2950 0b4e DCE7     		b	.L236	@
 2951              	.LVL236:
 2952              	.L240:
1846:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 2953              		.loc 1 1846 0
 2954 0b50 2046     		mov	r0, r4	@, husart
 2955 0b52 FFF7FEFF 		bl	HAL_USART_ErrorCallback	@
 2956              	.LVL237:
 2957 0b56 70BD     		pop	{r4, r5, r6, pc}	@
 2958              	.LVL238:
 2959              	.L239:
1870:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
ARM GAS  /tmp/ccpGcYbE.s 			page 113


 2960              		.loc 1 1870 0
 2961 0b58 FFF7FEFF 		bl	HAL_USART_ErrorCallback	@
 2962              	.LVL239:
1872:src/stm32f1xx_hal_usart.c ****       }
 2963              		.loc 1 1872 0
 2964 0b5c 2564     		str	r5, [r4, #64]	@ tmp199, husart_8(D)->ErrorCode
 2965 0b5e 70BD     		pop	{r4, r5, r6, pc}	@
 2966              	.LVL240:
 2967              	.L227:
1879:src/stm32f1xx_hal_usart.c ****   {
 2968              		.loc 1 1879 0
 2969 0b60 1606     		lsls	r6, r2, #24	@, isrflags,
 2970 0b62 2BD5     		bpl	.L242	@,
1879:src/stm32f1xx_hal_usart.c ****   {
 2971              		.loc 1 1879 0 is_stmt 0 discriminator 1
 2972 0b64 0D06     		lsls	r5, r1, #24	@, cr1its,
 2973 0b66 29D5     		bpl	.L242	@,
1881:src/stm32f1xx_hal_usart.c ****     {
 2974              		.loc 1 1881 0 is_stmt 1
 2975 0b68 94F83D20 		ldrb	r2, [r4, #61]	@ zero_extendqisi2	@ husart_8(D)->State, husart_8(D)->State
 2976              	.LVL241:
 2977 0b6c 122A     		cmp	r2, #18	@ husart_8(D)->State,
 2978 0b6e 97D1     		bne	.L228	@,
 2979              	.LVL242:
 2980              	.LBB42:
 2981              	.LBB43:
2459:src/stm32f1xx_hal_usart.c ****   {
 2982              		.loc 1 2459 0
 2983 0b70 94F83D20 		ldrb	r2, [r4, #61]	@ zero_extendqisi2	@ husart_8(D)->State, husart_8(D)->State
 2984 0b74 122A     		cmp	r2, #18	@ husart_8(D)->State,
 2985 0b76 33D1     		bne	.L225	@,
2461:src/stm32f1xx_hal_usart.c ****     {
 2986              		.loc 1 2461 0
 2987 0b78 A268     		ldr	r2, [r4, #8]	@ husart_8(D)->Init.WordLength, husart_8(D)->Init.WordLength
 2988 0b7a B2F5805F 		cmp	r2, #4096	@ husart_8(D)->Init.WordLength,
 2989 0b7e 626A     		ldr	r2, [r4, #36]	@ _86, husart_8(D)->pTxBuffPtr
 2990 0b80 17D1     		bne	.L243	@,
 2991              	.LVL243:
2464:src/stm32f1xx_hal_usart.c ****       if (husart->Init.Parity == USART_PARITY_NONE)
 2992              		.loc 1 2464 0
 2993 0b82 1188     		ldrh	r1, [r2]	@, *tmp_77
 2994              	.LVL244:
 2995 0b84 C1F30801 		ubfx	r1, r1, #0, #9	@ _81, *tmp_77,,
 2996 0b88 5960     		str	r1, [r3, #4]	@ _81, _9->DR
2465:src/stm32f1xx_hal_usart.c ****       {
 2997              		.loc 1 2465 0
 2998 0b8a 2169     		ldr	r1, [r4, #16]	@ husart_8(D)->Init.Parity, husart_8(D)->Init.Parity
 2999 0b8c 79B9     		cbnz	r1, .L244	@ husart_8(D)->Init.Parity,
2467:src/stm32f1xx_hal_usart.c ****       }
 3000              		.loc 1 2467 0
 3001 0b8e 0232     		adds	r2, r2, #2	@ tmp218, _86,
 3002              	.LVL245:
 3003              	.L306:
2471:src/stm32f1xx_hal_usart.c ****       }
 3004              		.loc 1 2471 0
 3005 0b90 6262     		str	r2, [r4, #36]	@ tmp219, husart_8(D)->pTxBuffPtr
 3006              	.LVL246:
ARM GAS  /tmp/ccpGcYbE.s 			page 114


 3007              	.L245:
2479:src/stm32f1xx_hal_usart.c ****     {
 3008              		.loc 1 2479 0
 3009 0b92 628D     		ldrh	r2, [r4, #42]	@, husart_8(D)->TxXferCount
 3010 0b94 013A     		subs	r2, r2, #1	@ tmp223, husart_8(D)->TxXferCount,
 3011 0b96 92B2     		uxth	r2, r2	@ _91, tmp223
 3012 0b98 6285     		strh	r2, [r4, #42]	@ movhi	@ _91, husart_8(D)->TxXferCount
 3013 0b9a 0ABB     		cbnz	r2, .L225	@ _91,
2482:src/stm32f1xx_hal_usart.c **** 
 3014              		.loc 1 2482 0
 3015 0b9c DA68     		ldr	r2, [r3, #12]	@ _93, _92->CR1
 3016 0b9e 22F08002 		bic	r2, r2, #128	@ _94, _93,
 3017 0ba2 DA60     		str	r2, [r3, #12]	@ _94, _92->CR1
2485:src/stm32f1xx_hal_usart.c ****     }
 3018              		.loc 1 2485 0
 3019 0ba4 DA68     		ldr	r2, [r3, #12]	@ _95, _92->CR1
 3020 0ba6 42F04002 		orr	r2, r2, #64	@ _96, _95,
 3021 0baa DA60     		str	r2, [r3, #12]	@ _96, _92->CR1
 3022 0bac 70BD     		pop	{r4, r5, r6, pc}	@
 3023              	.LVL247:
 3024              	.L244:
2471:src/stm32f1xx_hal_usart.c ****       }
 3025              		.loc 1 2471 0
 3026 0bae 0132     		adds	r2, r2, #1	@ tmp219, _86,
 3027              	.LVL248:
 3028 0bb0 EEE7     		b	.L306	@
 3029              	.LVL249:
 3030              	.L243:
2476:src/stm32f1xx_hal_usart.c ****     }
 3031              		.loc 1 2476 0
 3032 0bb2 511C     		adds	r1, r2, #1	@ tmp220, _86,
 3033              	.LVL250:
 3034 0bb4 6162     		str	r1, [r4, #36]	@ tmp220, husart_8(D)->pTxBuffPtr
 3035 0bb6 1278     		ldrb	r2, [r2]	@ zero_extendqisi2	@ _89, *_86
 3036 0bb8 5A60     		str	r2, [r3, #4]	@ _89, _9->DR
 3037 0bba EAE7     		b	.L245	@
 3038              	.LVL251:
 3039              	.L242:
 3040              	.LBE43:
 3041              	.LBE42:
1893:src/stm32f1xx_hal_usart.c ****   {
 3042              		.loc 1 1893 0
 3043 0bbc 5006     		lsls	r0, r2, #25	@, isrflags,
 3044              	.LVL252:
 3045 0bbe 0FD5     		bpl	.L225	@,
1893:src/stm32f1xx_hal_usart.c ****   {
 3046              		.loc 1 1893 0 is_stmt 0 discriminator 1
 3047 0bc0 4A06     		lsls	r2, r1, #25	@, cr1its,
 3048              	.LVL253:
 3049 0bc2 0DD5     		bpl	.L225	@,
 3050              	.LVL254:
 3051              	.LBB44:
 3052              	.LBB45:
2504:src/stm32f1xx_hal_usart.c **** 
 3053              		.loc 1 2504 0 is_stmt 1
 3054 0bc4 DA68     		ldr	r2, [r3, #12]	@ _99, _9->CR1
2516:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
ARM GAS  /tmp/ccpGcYbE.s 			page 115


 3055              		.loc 1 2516 0
 3056 0bc6 2046     		mov	r0, r4	@, husart
2504:src/stm32f1xx_hal_usart.c **** 
 3057              		.loc 1 2504 0
 3058 0bc8 22F04002 		bic	r2, r2, #64	@ _100, _99,
 3059 0bcc DA60     		str	r2, [r3, #12]	@ _100, _9->CR1
2507:src/stm32f1xx_hal_usart.c **** 
 3060              		.loc 1 2507 0
 3061 0bce 5A69     		ldr	r2, [r3, #20]	@ _101, _9->CR3
 3062 0bd0 22F00102 		bic	r2, r2, #1	@ _102, _101,
 3063 0bd4 5A61     		str	r2, [r3, #20]	@ _102, _9->CR3
2509:src/stm32f1xx_hal_usart.c **** 
 3064              		.loc 1 2509 0
 3065 0bd6 0123     		movs	r3, #1	@ tmp227,
 3066 0bd8 84F83D30 		strb	r3, [r4, #61]	@ tmp227, husart_8(D)->State
2516:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 3067              		.loc 1 2516 0
 3068 0bdc FFF7FEFF 		bl	HAL_USART_TxCpltCallback	@
 3069              	.LVL255:
 3070              	.L225:
 3071 0be0 70BD     		pop	{r4, r5, r6, pc}	@
 3072              	.LVL256:
 3073              	.L308:
 3074 0be2 00BF     		.align	2
 3075              	.L307:
 3076 0be4 00000000 		.word	USART_DMAAbortOnError
 3077              	.LBE45:
 3078              	.LBE44:
 3079              		.cfi_endproc
 3080              	.LFE83:
 3081              		.size	HAL_USART_IRQHandler, .-HAL_USART_IRQHandler
 3082              		.align	1
 3083              		.syntax unified
 3084              		.thumb
 3085              		.thumb_func
 3086              		.fpu softvfp
 3087              		.type	USART_DMAAbortOnError, %function
 3088              	USART_DMAAbortOnError:
 3089              	.LFB101:
2348:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3090              		.loc 1 2348 0
 3091              		.cfi_startproc
 3092              		@ args = 0, pretend = 0, frame = 0
 3093              		@ frame_needed = 0, uses_anonymous_args = 0
 3094              	.LVL257:
 3095 0be8 08B5     		push	{r3, lr}	@
 3096              	.LCFI32:
 3097              		.cfi_def_cfa_offset 8
 3098              		.cfi_offset 3, -8
 3099              		.cfi_offset 14, -4
2350:src/stm32f1xx_hal_usart.c ****   husart->TxXferCount = 0x00U;
 3100              		.loc 1 2350 0
 3101 0bea 0023     		movs	r3, #0	@ tmp113,
2349:src/stm32f1xx_hal_usart.c ****   husart->RxXferCount = 0x00U;
 3102              		.loc 1 2349 0
 3103 0bec 406A     		ldr	r0, [r0, #36]	@ husart, hdma_2(D)->Parent
 3104              	.LVL258:
ARM GAS  /tmp/ccpGcYbE.s 			page 116


2350:src/stm32f1xx_hal_usart.c ****   husart->TxXferCount = 0x00U;
 3105              		.loc 1 2350 0
 3106 0bee 4386     		strh	r3, [r0, #50]	@ movhi	@ tmp113, husart_3->RxXferCount
2351:src/stm32f1xx_hal_usart.c **** 
 3107              		.loc 1 2351 0
 3108 0bf0 4385     		strh	r3, [r0, #42]	@ movhi	@ tmp113, husart_3->TxXferCount
2358:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 3109              		.loc 1 2358 0
 3110 0bf2 FFF7FEFF 		bl	HAL_USART_ErrorCallback	@
 3111              	.LVL259:
 3112 0bf6 08BD     		pop	{r3, pc}	@
 3113              		.cfi_endproc
 3114              	.LFE101:
 3115              		.size	USART_DMAAbortOnError, .-USART_DMAAbortOnError
 3116              		.align	1
 3117              		.weak	HAL_USART_AbortCpltCallback
 3118              		.syntax unified
 3119              		.thumb
 3120              		.thumb_func
 3121              		.fpu softvfp
 3122              		.type	HAL_USART_AbortCpltCallback, %function
 3123              	HAL_USART_AbortCpltCallback:
 3124              	.LFB90:
1996:src/stm32f1xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
 3125              		.loc 1 1996 0
 3126              		.cfi_startproc
 3127              		@ args = 0, pretend = 0, frame = 0
 3128              		@ frame_needed = 0, uses_anonymous_args = 0
 3129              		@ link register save eliminated.
 3130              	.LVL260:
 3131 0bf8 7047     		bx	lr	@
 3132              		.cfi_endproc
 3133              	.LFE90:
 3134              		.size	HAL_USART_AbortCpltCallback, .-HAL_USART_AbortCpltCallback
 3135              		.align	1
 3136              		.global	HAL_USART_Abort_IT
 3137              		.syntax unified
 3138              		.thumb
 3139              		.thumb_func
 3140              		.fpu softvfp
 3141              		.type	HAL_USART_Abort_IT, %function
 3142              	HAL_USART_Abort_IT:
 3143              	.LFB82:
1626:src/stm32f1xx_hal_usart.c ****   uint32_t AbortCplt = 0x01U;
 3144              		.loc 1 1626 0
 3145              		.cfi_startproc
 3146              		@ args = 0, pretend = 0, frame = 0
 3147              		@ frame_needed = 0, uses_anonymous_args = 0
 3148              	.LVL261:
1630:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 3149              		.loc 1 1630 0
 3150 0bfa 0368     		ldr	r3, [r0]	@ _10, husart_9(D)->Instance
1626:src/stm32f1xx_hal_usart.c ****   uint32_t AbortCplt = 0x01U;
 3151              		.loc 1 1626 0
 3152 0bfc 10B5     		push	{r4, lr}	@
 3153              	.LCFI33:
 3154              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccpGcYbE.s 			page 117


 3155              		.cfi_offset 4, -8
 3156              		.cfi_offset 14, -4
1630:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 3157              		.loc 1 1630 0
 3158 0bfe DA68     		ldr	r2, [r3, #12]	@ _11, _10->CR1
1626:src/stm32f1xx_hal_usart.c ****   uint32_t AbortCplt = 0x01U;
 3159              		.loc 1 1626 0
 3160 0c00 0446     		mov	r4, r0	@ husart, husart
1630:src/stm32f1xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 3161              		.loc 1 1630 0
 3162 0c02 22F4F072 		bic	r2, r2, #480	@ _12, _11,
 3163 0c06 DA60     		str	r2, [r3, #12]	@ _12, _10->CR1
1631:src/stm32f1xx_hal_usart.c **** 
 3164              		.loc 1 1631 0
 3165 0c08 5A69     		ldr	r2, [r3, #20]	@ _14, _10->CR3
1636:src/stm32f1xx_hal_usart.c ****   {
 3166              		.loc 1 1636 0
 3167 0c0a 406B     		ldr	r0, [r0, #52]	@ _17, husart_9(D)->hdmatx
 3168              	.LVL262:
1631:src/stm32f1xx_hal_usart.c **** 
 3169              		.loc 1 1631 0
 3170 0c0c 22F00102 		bic	r2, r2, #1	@ _15, _14,
 3171 0c10 5A61     		str	r2, [r3, #20]	@ _15, _10->CR3
1636:src/stm32f1xx_hal_usart.c ****   {
 3172              		.loc 1 1636 0
 3173 0c12 28B1     		cbz	r0, .L312	@ _17,
1640:src/stm32f1xx_hal_usart.c ****     {
 3174              		.loc 1 1640 0
 3175 0c14 5A69     		ldr	r2, [r3, #20]	@ _18, _10->CR3
 3176 0c16 12F08002 		ands	r2, r2, #128	@ tmp138, _18,
1642:src/stm32f1xx_hal_usart.c ****     }
 3177              		.loc 1 1642 0
 3178 0c1a 18BF     		it	ne
 3179 0c1c 1D4A     		ldrne	r2, .L341	@ tmp139,
1646:src/stm32f1xx_hal_usart.c ****     }
 3180              		.loc 1 1646 0
 3181 0c1e 4263     		str	r2, [r0, #52]	@ tmp138, _17->XferAbortCallback
 3182              	.L312:
1650:src/stm32f1xx_hal_usart.c ****   {
 3183              		.loc 1 1650 0
 3184 0c20 A16B     		ldr	r1, [r4, #56]	@ _22, husart_9(D)->hdmarx
 3185 0c22 29B1     		cbz	r1, .L314	@ _22,
1654:src/stm32f1xx_hal_usart.c ****     {
 3186              		.loc 1 1654 0
 3187 0c24 5A69     		ldr	r2, [r3, #20]	@ _23, _10->CR3
 3188 0c26 12F04002 		ands	r2, r2, #64	@ tmp141, _23,
1656:src/stm32f1xx_hal_usart.c ****     }
 3189              		.loc 1 1656 0
 3190 0c2a 18BF     		it	ne
 3191 0c2c 1A4A     		ldrne	r2, .L341+4	@ tmp142,
1660:src/stm32f1xx_hal_usart.c ****     }
 3192              		.loc 1 1660 0
 3193 0c2e 4A63     		str	r2, [r1, #52]	@ tmp141, _22->XferAbortCallback
 3194              	.L314:
1665:src/stm32f1xx_hal_usart.c ****   {
 3195              		.loc 1 1665 0
 3196 0c30 5A69     		ldr	r2, [r3, #20]	@ _27, _10->CR3
ARM GAS  /tmp/ccpGcYbE.s 			page 118


 3197 0c32 1206     		lsls	r2, r2, #24	@, _27,
 3198 0c34 1BD4     		bmi	.L316	@,
 3199              	.L340:
1627:src/stm32f1xx_hal_usart.c **** 
 3200              		.loc 1 1627 0
 3201 0c36 0123     		movs	r3, #1	@ AbortCplt,
 3202              	.L317:
 3203              	.LVL263:
1689:src/stm32f1xx_hal_usart.c ****   {
 3204              		.loc 1 1689 0
 3205 0c38 2268     		ldr	r2, [r4]	@ _36, husart_9(D)->Instance
 3206 0c3a 5169     		ldr	r1, [r2, #20]	@ _37, _36->CR3
 3207 0c3c 4906     		lsls	r1, r1, #25	@, _37,
 3208 0c3e 25D5     		bpl	.L319	@,
1691:src/stm32f1xx_hal_usart.c **** 
 3209              		.loc 1 1691 0
 3210 0c40 5169     		ldr	r1, [r2, #20]	@ _39, _36->CR3
1694:src/stm32f1xx_hal_usart.c ****     {
 3211              		.loc 1 1694 0
 3212 0c42 A06B     		ldr	r0, [r4, #56]	@ _42, husart_9(D)->hdmarx
1691:src/stm32f1xx_hal_usart.c **** 
 3213              		.loc 1 1691 0
 3214 0c44 21F04001 		bic	r1, r1, #64	@ _40, _39,
 3215 0c48 5161     		str	r1, [r2, #20]	@ _40, _36->CR3
1694:src/stm32f1xx_hal_usart.c ****     {
 3216              		.loc 1 1694 0
 3217 0c4a F8B1     		cbz	r0, .L319	@ _42,
1700:src/stm32f1xx_hal_usart.c ****       {
 3218              		.loc 1 1700 0
 3219 0c4c FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 3220              	.LVL264:
 3221 0c50 F0B1     		cbz	r0, .L321	@,
1702:src/stm32f1xx_hal_usart.c ****         AbortCplt = 0x01U;
 3222              		.loc 1 1702 0
 3223 0c52 0022     		movs	r2, #0	@ tmp151,
 3224 0c54 A36B     		ldr	r3, [r4, #56]	@ husart_9(D)->hdmarx, husart_9(D)->hdmarx
 3225 0c56 5A63     		str	r2, [r3, #52]	@ tmp151, _45->XferAbortCallback
 3226              	.LVL265:
 3227              	.L322:
1716:src/stm32f1xx_hal_usart.c ****     husart->RxXferCount = 0x00U;
 3228              		.loc 1 1716 0
 3229 0c58 0023     		movs	r3, #0	@ tmp153,
 3230 0c5a 6385     		strh	r3, [r4, #42]	@ movhi	@ tmp153, husart_9(D)->TxXferCount
1717:src/stm32f1xx_hal_usart.c **** 
 3231              		.loc 1 1717 0
 3232 0c5c 6386     		strh	r3, [r4, #50]	@ movhi	@ tmp153, husart_9(D)->RxXferCount
1720:src/stm32f1xx_hal_usart.c **** 
 3233              		.loc 1 1720 0
 3234 0c5e 2364     		str	r3, [r4, #64]	@ tmp153, husart_9(D)->ErrorCode
1723:src/stm32f1xx_hal_usart.c **** 
 3235              		.loc 1 1723 0
 3236 0c60 0123     		movs	r3, #1	@ tmp157,
1731:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 3237              		.loc 1 1731 0
 3238 0c62 2046     		mov	r0, r4	@, husart
1723:src/stm32f1xx_hal_usart.c **** 
 3239              		.loc 1 1723 0
ARM GAS  /tmp/ccpGcYbE.s 			page 119


 3240 0c64 84F83D30 		strb	r3, [r4, #61]	@ tmp157, husart_9(D)->State
1731:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 3241              		.loc 1 1731 0
 3242 0c68 FFF7FEFF 		bl	HAL_USART_AbortCpltCallback	@
 3243              	.LVL266:
 3244 0c6c 10E0     		b	.L321	@
 3245              	.LVL267:
 3246              	.L316:
1668:src/stm32f1xx_hal_usart.c **** 
 3247              		.loc 1 1668 0
 3248 0c6e 5A69     		ldr	r2, [r3, #20]	@ _29, _10->CR3
 3249 0c70 22F08002 		bic	r2, r2, #128	@ _30, _29,
 3250 0c74 5A61     		str	r2, [r3, #20]	@ _30, _10->CR3
1671:src/stm32f1xx_hal_usart.c ****     {
 3251              		.loc 1 1671 0
 3252 0c76 0028     		cmp	r0, #0	@ _17
 3253 0c78 DDD0     		beq	.L340	@
1677:src/stm32f1xx_hal_usart.c ****       {
 3254              		.loc 1 1677 0
 3255 0c7a FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 3256              	.LVL268:
 3257 0c7e 18B1     		cbz	r0, .L324	@ tmp145,
1679:src/stm32f1xx_hal_usart.c ****       }
 3258              		.loc 1 1679 0
 3259 0c80 0022     		movs	r2, #0	@ AbortCplt,
 3260 0c82 636B     		ldr	r3, [r4, #52]	@ husart_9(D)->hdmatx, husart_9(D)->hdmatx
 3261 0c84 5A63     		str	r2, [r3, #52]	@ AbortCplt, _34->XferAbortCallback
 3262 0c86 D6E7     		b	.L340	@
 3263              	.L324:
1683:src/stm32f1xx_hal_usart.c ****       }
 3264              		.loc 1 1683 0
 3265 0c88 0346     		mov	r3, r0	@ AbortCplt, tmp145
 3266 0c8a D5E7     		b	.L317	@
 3267              	.LVL269:
 3268              	.L319:
1713:src/stm32f1xx_hal_usart.c ****   {
 3269              		.loc 1 1713 0
 3270 0c8c 002B     		cmp	r3, #0	@ AbortCplt
 3271 0c8e E3D1     		bne	.L322	@
 3272              	.LVL270:
 3273              	.L321:
1736:src/stm32f1xx_hal_usart.c **** 
 3274              		.loc 1 1736 0
 3275 0c90 0020     		movs	r0, #0	@,
 3276 0c92 10BD     		pop	{r4, pc}	@
 3277              	.LVL271:
 3278              	.L342:
 3279              		.align	2
 3280              	.L341:
 3281 0c94 00000000 		.word	USART_DMATxAbortCallback
 3282 0c98 00000000 		.word	USART_DMARxAbortCallback
 3283              		.cfi_endproc
 3284              	.LFE82:
 3285              		.size	HAL_USART_Abort_IT, .-HAL_USART_Abort_IT
 3286              		.align	1
 3287              		.syntax unified
 3288              		.thumb
ARM GAS  /tmp/ccpGcYbE.s 			page 120


 3289              		.thumb_func
 3290              		.fpu softvfp
 3291              		.type	USART_DMARxAbortCallback, %function
 3292              	USART_DMARxAbortCallback:
 3293              	.LFB103:
2414:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3294              		.loc 1 2414 0
 3295              		.cfi_startproc
 3296              		@ args = 0, pretend = 0, frame = 0
 3297              		@ frame_needed = 0, uses_anonymous_args = 0
 3298              	.LVL272:
 3299 0c9c 08B5     		push	{r3, lr}	@
 3300              	.LCFI34:
 3301              		.cfi_def_cfa_offset 8
 3302              		.cfi_offset 3, -8
 3303              		.cfi_offset 14, -4
2417:src/stm32f1xx_hal_usart.c **** 
 3304              		.loc 1 2417 0
 3305 0c9e 0023     		movs	r3, #0	@ tmp116,
2415:src/stm32f1xx_hal_usart.c **** 
 3306              		.loc 1 2415 0
 3307 0ca0 406A     		ldr	r0, [r0, #36]	@ husart, hdma_3(D)->Parent
 3308              	.LVL273:
2417:src/stm32f1xx_hal_usart.c **** 
 3309              		.loc 1 2417 0
 3310 0ca2 826B     		ldr	r2, [r0, #56]	@ husart_4->hdmarx, husart_4->hdmarx
 3311 0ca4 5363     		str	r3, [r2, #52]	@ tmp116, _5->XferAbortCallback
2420:src/stm32f1xx_hal_usart.c ****   {
 3312              		.loc 1 2420 0
 3313 0ca6 426B     		ldr	r2, [r0, #52]	@ _7, husart_4->hdmatx
 3314 0ca8 0AB1     		cbz	r2, .L344	@ _7,
2422:src/stm32f1xx_hal_usart.c ****     {
 3315              		.loc 1 2422 0
 3316 0caa 526B     		ldr	r2, [r2, #52]	@ _7->XferAbortCallback, _7->XferAbortCallback
 3317 0cac 3AB9     		cbnz	r2, .L343	@ _7->XferAbortCallback,
 3318              	.L344:
2429:src/stm32f1xx_hal_usart.c ****   husart->RxXferCount = 0x00U;
 3319              		.loc 1 2429 0
 3320 0cae 4385     		strh	r3, [r0, #42]	@ movhi	@ tmp125, husart_4->TxXferCount
2430:src/stm32f1xx_hal_usart.c **** 
 3321              		.loc 1 2430 0
 3322 0cb0 4386     		strh	r3, [r0, #50]	@ movhi	@ tmp125, husart_4->RxXferCount
2433:src/stm32f1xx_hal_usart.c **** 
 3323              		.loc 1 2433 0
 3324 0cb2 0364     		str	r3, [r0, #64]	@ tmp125, husart_4->ErrorCode
2436:src/stm32f1xx_hal_usart.c **** 
 3325              		.loc 1 2436 0
 3326 0cb4 0123     		movs	r3, #1	@ tmp123,
 3327 0cb6 80F83D30 		strb	r3, [r0, #61]	@ tmp123, husart_4->State
2444:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 3328              		.loc 1 2444 0
 3329 0cba FFF7FEFF 		bl	HAL_USART_AbortCpltCallback	@
 3330              	.LVL274:
 3331              	.L343:
 3332 0cbe 08BD     		pop	{r3, pc}	@
 3333              		.cfi_endproc
 3334              	.LFE103:
ARM GAS  /tmp/ccpGcYbE.s 			page 121


 3335              		.size	USART_DMARxAbortCallback, .-USART_DMARxAbortCallback
 3336              		.align	1
 3337              		.syntax unified
 3338              		.thumb
 3339              		.thumb_func
 3340              		.fpu softvfp
 3341              		.type	USART_DMATxAbortCallback, %function
 3342              	USART_DMATxAbortCallback:
 3343              	.LFB102:
2371:src/stm32f1xx_hal_usart.c ****   USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3344              		.loc 1 2371 0
 3345              		.cfi_startproc
 3346              		@ args = 0, pretend = 0, frame = 0
 3347              		@ frame_needed = 0, uses_anonymous_args = 0
 3348              	.LVL275:
 3349 0cc0 08B5     		push	{r3, lr}	@
 3350              	.LCFI35:
 3351              		.cfi_def_cfa_offset 8
 3352              		.cfi_offset 3, -8
 3353              		.cfi_offset 14, -4
2374:src/stm32f1xx_hal_usart.c **** 
 3354              		.loc 1 2374 0
 3355 0cc2 0023     		movs	r3, #0	@ tmp116,
2372:src/stm32f1xx_hal_usart.c **** 
 3356              		.loc 1 2372 0
 3357 0cc4 406A     		ldr	r0, [r0, #36]	@ husart, hdma_3(D)->Parent
 3358              	.LVL276:
2374:src/stm32f1xx_hal_usart.c **** 
 3359              		.loc 1 2374 0
 3360 0cc6 426B     		ldr	r2, [r0, #52]	@ husart_4->hdmatx, husart_4->hdmatx
 3361 0cc8 5363     		str	r3, [r2, #52]	@ tmp116, _5->XferAbortCallback
2377:src/stm32f1xx_hal_usart.c ****   {
 3362              		.loc 1 2377 0
 3363 0cca 826B     		ldr	r2, [r0, #56]	@ _7, husart_4->hdmarx
 3364 0ccc 0AB1     		cbz	r2, .L350	@ _7,
2379:src/stm32f1xx_hal_usart.c ****     {
 3365              		.loc 1 2379 0
 3366 0cce 526B     		ldr	r2, [r2, #52]	@ _7->XferAbortCallback, _7->XferAbortCallback
 3367 0cd0 3AB9     		cbnz	r2, .L349	@ _7->XferAbortCallback,
 3368              	.L350:
2386:src/stm32f1xx_hal_usart.c ****   husart->RxXferCount = 0x00U;
 3369              		.loc 1 2386 0
 3370 0cd2 4385     		strh	r3, [r0, #42]	@ movhi	@ tmp125, husart_4->TxXferCount
2387:src/stm32f1xx_hal_usart.c **** 
 3371              		.loc 1 2387 0
 3372 0cd4 4386     		strh	r3, [r0, #50]	@ movhi	@ tmp125, husart_4->RxXferCount
2390:src/stm32f1xx_hal_usart.c **** 
 3373              		.loc 1 2390 0
 3374 0cd6 0364     		str	r3, [r0, #64]	@ tmp125, husart_4->ErrorCode
2393:src/stm32f1xx_hal_usart.c **** 
 3375              		.loc 1 2393 0
 3376 0cd8 0123     		movs	r3, #1	@ tmp123,
 3377 0cda 80F83D30 		strb	r3, [r0, #61]	@ tmp123, husart_4->State
2401:src/stm32f1xx_hal_usart.c **** #endif /* USE_HAL_USART_REGISTER_CALLBACKS */
 3378              		.loc 1 2401 0
 3379 0cde FFF7FEFF 		bl	HAL_USART_AbortCpltCallback	@
 3380              	.LVL277:
ARM GAS  /tmp/ccpGcYbE.s 			page 122


 3381              	.L349:
 3382 0ce2 08BD     		pop	{r3, pc}	@
 3383              		.cfi_endproc
 3384              	.LFE102:
 3385              		.size	USART_DMATxAbortCallback, .-USART_DMATxAbortCallback
 3386              		.align	1
 3387              		.global	HAL_USART_GetState
 3388              		.syntax unified
 3389              		.thumb
 3390              		.thumb_func
 3391              		.fpu softvfp
 3392              		.type	HAL_USART_GetState, %function
 3393              	HAL_USART_GetState:
 3394              	.LFB91:
2035:src/stm32f1xx_hal_usart.c ****   return husart->State;
 3395              		.loc 1 2035 0
 3396              		.cfi_startproc
 3397              		@ args = 0, pretend = 0, frame = 0
 3398              		@ frame_needed = 0, uses_anonymous_args = 0
 3399              		@ link register save eliminated.
 3400              	.LVL278:
2036:src/stm32f1xx_hal_usart.c **** }
 3401              		.loc 1 2036 0
 3402 0ce4 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2	@ husart_2(D)->State, husart_2(D)->State
 3403              	.LVL279:
2037:src/stm32f1xx_hal_usart.c **** 
 3404              		.loc 1 2037 0
 3405 0ce8 7047     		bx	lr	@
 3406              		.cfi_endproc
 3407              	.LFE91:
 3408              		.size	HAL_USART_GetState, .-HAL_USART_GetState
 3409              		.align	1
 3410              		.global	HAL_USART_GetError
 3411              		.syntax unified
 3412              		.thumb
 3413              		.thumb_func
 3414              		.fpu softvfp
 3415              		.type	HAL_USART_GetError, %function
 3416              	HAL_USART_GetError:
 3417              	.LFB92:
2046:src/stm32f1xx_hal_usart.c ****   return husart->ErrorCode;
 3418              		.loc 1 2046 0
 3419              		.cfi_startproc
 3420              		@ args = 0, pretend = 0, frame = 0
 3421              		@ frame_needed = 0, uses_anonymous_args = 0
 3422              		@ link register save eliminated.
 3423              	.LVL280:
2047:src/stm32f1xx_hal_usart.c **** }
 3424              		.loc 1 2047 0
 3425 0cea 006C     		ldr	r0, [r0, #64]	@ <retval>, husart_2(D)->ErrorCode
 3426              	.LVL281:
2048:src/stm32f1xx_hal_usart.c **** 
 3427              		.loc 1 2048 0
 3428 0cec 7047     		bx	lr	@
 3429              		.cfi_endproc
 3430              	.LFE92:
 3431              		.size	HAL_USART_GetError, .-HAL_USART_GetError
ARM GAS  /tmp/ccpGcYbE.s 			page 123


 3432              	.Letext0:
 3433              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3434              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3435              		.file 4 "../cmsiscore/inc/core_cm3.h"
 3436              		.file 5 "../cmsisstm32f1xx/inc/system_stm32f1xx.h"
 3437              		.file 6 "../cmsisstm32f1xx/inc/stm32f103x6.h"
 3438              		.file 7 "../cmsisstm32f1xx/inc/stm32f1xx.h"
 3439              		.file 8 "./inc/stm32f1xx_hal_def.h"
 3440              		.file 9 "./inc/stm32f1xx_hal_dma.h"
 3441              		.file 10 "./inc/stm32f1xx_hal_usart.h"
 3442              		.file 11 "./inc/stm32f1xx_hal.h"
 3443              		.file 12 "./inc/stm32f1xx_hal_rcc.h"
 3444 0cee 00BF     		.section	.debug_info,"",%progbits
 3445              	.Ldebug_info0:
 3446 0000 7C160000 		.4byte	0x167c
 3447 0004 0200     		.2byte	0x2
 3448 0006 00000000 		.4byte	.Ldebug_abbrev0
 3449 000a 04       		.byte	0x4
 3450 000b 01       		.uleb128 0x1
 3451 000c DB070000 		.4byte	.LASF168
 3452 0010 0C       		.byte	0xc
 3453 0011 AF080000 		.4byte	.LASF169
 3454 0015 42070000 		.4byte	.LASF170
 3455 0019 00000000 		.4byte	.Ltext0
 3456 001d EE0C0000 		.4byte	.Letext0
 3457 0021 00000000 		.4byte	.Ldebug_line0
 3458 0025 02       		.uleb128 0x2
 3459 0026 01       		.byte	0x1
 3460 0027 06       		.byte	0x6
 3461 0028 F9010000 		.4byte	.LASF0
 3462 002c 03       		.uleb128 0x3
 3463 002d CE000000 		.4byte	.LASF3
 3464 0031 02       		.byte	0x2
 3465 0032 1D       		.byte	0x1d
 3466 0033 37000000 		.4byte	0x37
 3467 0037 02       		.uleb128 0x2
 3468 0038 01       		.byte	0x1
 3469 0039 08       		.byte	0x8
 3470 003a 76070000 		.4byte	.LASF1
 3471 003e 02       		.uleb128 0x2
 3472 003f 02       		.byte	0x2
 3473 0040 05       		.byte	0x5
 3474 0041 BB070000 		.4byte	.LASF2
 3475 0045 03       		.uleb128 0x3
 3476 0046 A4080000 		.4byte	.LASF4
 3477 004a 02       		.byte	0x2
 3478 004b 2B       		.byte	0x2b
 3479 004c 50000000 		.4byte	0x50
 3480 0050 02       		.uleb128 0x2
 3481 0051 02       		.byte	0x2
 3482 0052 07       		.byte	0x7
 3483 0053 2E040000 		.4byte	.LASF5
 3484 0057 03       		.uleb128 0x3
 3485 0058 D8080000 		.4byte	.LASF6
 3486 005c 02       		.byte	0x2
 3487 005d 3F       		.byte	0x3f
 3488 005e 62000000 		.4byte	0x62
ARM GAS  /tmp/ccpGcYbE.s 			page 124


 3489 0062 02       		.uleb128 0x2
 3490 0063 04       		.byte	0x4
 3491 0064 05       		.byte	0x5
 3492 0065 91020000 		.4byte	.LASF7
 3493 0069 03       		.uleb128 0x3
 3494 006a 0F030000 		.4byte	.LASF8
 3495 006e 02       		.byte	0x2
 3496 006f 41       		.byte	0x41
 3497 0070 74000000 		.4byte	0x74
 3498 0074 02       		.uleb128 0x2
 3499 0075 04       		.byte	0x4
 3500 0076 07       		.byte	0x7
 3501 0077 BD030000 		.4byte	.LASF9
 3502 007b 02       		.uleb128 0x2
 3503 007c 08       		.byte	0x8
 3504 007d 05       		.byte	0x5
 3505 007e EB010000 		.4byte	.LASF10
 3506 0082 02       		.uleb128 0x2
 3507 0083 08       		.byte	0x8
 3508 0084 07       		.byte	0x7
 3509 0085 8C010000 		.4byte	.LASF11
 3510 0089 04       		.uleb128 0x4
 3511 008a 04       		.byte	0x4
 3512 008b 05       		.byte	0x5
 3513 008c 696E7400 		.ascii	"int\000"
 3514 0090 02       		.uleb128 0x2
 3515 0091 04       		.byte	0x4
 3516 0092 07       		.byte	0x7
 3517 0093 75030000 		.4byte	.LASF12
 3518 0097 03       		.uleb128 0x3
 3519 0098 110A0000 		.4byte	.LASF13
 3520 009c 03       		.byte	0x3
 3521 009d 18       		.byte	0x18
 3522 009e 2C000000 		.4byte	0x2c
 3523 00a2 05       		.uleb128 0x5
 3524 00a3 97000000 		.4byte	0x97
 3525 00a7 03       		.uleb128 0x3
 3526 00a8 C7020000 		.4byte	.LASF14
 3527 00ac 03       		.byte	0x3
 3528 00ad 24       		.byte	0x24
 3529 00ae 45000000 		.4byte	0x45
 3530 00b2 06       		.uleb128 0x6
 3531 00b3 A7000000 		.4byte	0xa7
 3532 00b7 03       		.uleb128 0x3
 3533 00b8 6E070000 		.4byte	.LASF15
 3534 00bc 03       		.byte	0x3
 3535 00bd 2C       		.byte	0x2c
 3536 00be 57000000 		.4byte	0x57
 3537 00c2 06       		.uleb128 0x6
 3538 00c3 B7000000 		.4byte	0xb7
 3539 00c7 03       		.uleb128 0x3
 3540 00c8 60080000 		.4byte	.LASF16
 3541 00cc 03       		.byte	0x3
 3542 00cd 30       		.byte	0x30
 3543 00ce 69000000 		.4byte	0x69
 3544 00d2 06       		.uleb128 0x6
 3545 00d3 C7000000 		.4byte	0xc7
ARM GAS  /tmp/ccpGcYbE.s 			page 125


 3546 00d7 02       		.uleb128 0x2
 3547 00d8 04       		.byte	0x4
 3548 00d9 07       		.byte	0x7
 3549 00da DA050000 		.4byte	.LASF17
 3550 00de 07       		.uleb128 0x7
 3551 00df B9010000 		.4byte	.LASF18
 3552 00e3 04       		.byte	0x4
 3553 00e4 4807     		.2byte	0x748
 3554 00e6 C2000000 		.4byte	0xc2
 3555 00ea 01       		.byte	0x1
 3556 00eb 01       		.byte	0x1
 3557 00ec 08       		.uleb128 0x8
 3558 00ed 96030000 		.4byte	.LASF19
 3559 00f1 05       		.byte	0x5
 3560 00f2 33       		.byte	0x33
 3561 00f3 C7000000 		.4byte	0xc7
 3562 00f7 01       		.byte	0x1
 3563 00f8 01       		.byte	0x1
 3564 00f9 09       		.uleb128 0x9
 3565 00fa A2000000 		.4byte	0xa2
 3566 00fe 09010000 		.4byte	0x109
 3567 0102 0A       		.uleb128 0xa
 3568 0103 D7000000 		.4byte	0xd7
 3569 0107 0F       		.byte	0xf
 3570 0108 00       		.byte	0
 3571 0109 05       		.uleb128 0x5
 3572 010a F9000000 		.4byte	0xf9
 3573 010e 08       		.uleb128 0x8
 3574 010f E8040000 		.4byte	.LASF20
 3575 0113 05       		.byte	0x5
 3576 0114 34       		.byte	0x34
 3577 0115 09010000 		.4byte	0x109
 3578 0119 01       		.byte	0x1
 3579 011a 01       		.byte	0x1
 3580 011b 09       		.uleb128 0x9
 3581 011c A2000000 		.4byte	0xa2
 3582 0120 2B010000 		.4byte	0x12b
 3583 0124 0A       		.uleb128 0xa
 3584 0125 D7000000 		.4byte	0xd7
 3585 0129 07       		.byte	0x7
 3586 012a 00       		.byte	0
 3587 012b 05       		.uleb128 0x5
 3588 012c 1B010000 		.4byte	0x11b
 3589 0130 08       		.uleb128 0x8
 3590 0131 16010000 		.4byte	.LASF21
 3591 0135 05       		.byte	0x5
 3592 0136 35       		.byte	0x35
 3593 0137 2B010000 		.4byte	0x12b
 3594 013b 01       		.byte	0x1
 3595 013c 01       		.byte	0x1
 3596 013d 0B       		.uleb128 0xb
 3597 013e 10       		.byte	0x10
 3598 013f 06       		.byte	0x6
 3599 0140 1E01     		.2byte	0x11e
 3600 0142 83010000 		.4byte	0x183
 3601 0146 0C       		.uleb128 0xc
 3602 0147 43435200 		.ascii	"CCR\000"
ARM GAS  /tmp/ccpGcYbE.s 			page 126


 3603 014b 06       		.byte	0x6
 3604 014c 2001     		.2byte	0x120
 3605 014e D2000000 		.4byte	0xd2
 3606 0152 02       		.byte	0x2
 3607 0153 23       		.byte	0x23
 3608 0154 00       		.uleb128 0
 3609 0155 0D       		.uleb128 0xd
 3610 0156 B6090000 		.4byte	.LASF22
 3611 015a 06       		.byte	0x6
 3612 015b 2101     		.2byte	0x121
 3613 015d D2000000 		.4byte	0xd2
 3614 0161 02       		.byte	0x2
 3615 0162 23       		.byte	0x23
 3616 0163 04       		.uleb128 0x4
 3617 0164 0D       		.uleb128 0xd
 3618 0165 B8030000 		.4byte	.LASF23
 3619 0169 06       		.byte	0x6
 3620 016a 2201     		.2byte	0x122
 3621 016c D2000000 		.4byte	0xd2
 3622 0170 02       		.byte	0x2
 3623 0171 23       		.byte	0x23
 3624 0172 08       		.uleb128 0x8
 3625 0173 0D       		.uleb128 0xd
 3626 0174 BC090000 		.4byte	.LASF24
 3627 0178 06       		.byte	0x6
 3628 0179 2301     		.2byte	0x123
 3629 017b D2000000 		.4byte	0xd2
 3630 017f 02       		.byte	0x2
 3631 0180 23       		.byte	0x23
 3632 0181 0C       		.uleb128 0xc
 3633 0182 00       		.byte	0
 3634 0183 0E       		.uleb128 0xe
 3635 0184 C0060000 		.4byte	.LASF25
 3636 0188 06       		.byte	0x6
 3637 0189 2401     		.2byte	0x124
 3638 018b 3D010000 		.4byte	0x13d
 3639 018f 0B       		.uleb128 0xb
 3640 0190 08       		.byte	0x8
 3641 0191 06       		.byte	0x6
 3642 0192 2601     		.2byte	0x126
 3643 0194 B7010000 		.4byte	0x1b7
 3644 0198 0C       		.uleb128 0xc
 3645 0199 49535200 		.ascii	"ISR\000"
 3646 019d 06       		.byte	0x6
 3647 019e 2801     		.2byte	0x128
 3648 01a0 D2000000 		.4byte	0xd2
 3649 01a4 02       		.byte	0x2
 3650 01a5 23       		.byte	0x23
 3651 01a6 00       		.uleb128 0
 3652 01a7 0D       		.uleb128 0xd
 3653 01a8 89080000 		.4byte	.LASF26
 3654 01ac 06       		.byte	0x6
 3655 01ad 2901     		.2byte	0x129
 3656 01af D2000000 		.4byte	0xd2
 3657 01b3 02       		.byte	0x2
 3658 01b4 23       		.byte	0x23
 3659 01b5 04       		.uleb128 0x4
ARM GAS  /tmp/ccpGcYbE.s 			page 127


 3660 01b6 00       		.byte	0
 3661 01b7 0E       		.uleb128 0xe
 3662 01b8 62030000 		.4byte	.LASF27
 3663 01bc 06       		.byte	0x6
 3664 01bd 2A01     		.2byte	0x12a
 3665 01bf 8F010000 		.4byte	0x18f
 3666 01c3 0B       		.uleb128 0xb
 3667 01c4 1C       		.byte	0x1c
 3668 01c5 06       		.byte	0x6
 3669 01c6 F601     		.2byte	0x1f6
 3670 01c8 34020000 		.4byte	0x234
 3671 01cc 0C       		.uleb128 0xc
 3672 01cd 535200   		.ascii	"SR\000"
 3673 01d0 06       		.byte	0x6
 3674 01d1 F801     		.2byte	0x1f8
 3675 01d3 D2000000 		.4byte	0xd2
 3676 01d7 02       		.byte	0x2
 3677 01d8 23       		.byte	0x23
 3678 01d9 00       		.uleb128 0
 3679 01da 0C       		.uleb128 0xc
 3680 01db 445200   		.ascii	"DR\000"
 3681 01de 06       		.byte	0x6
 3682 01df F901     		.2byte	0x1f9
 3683 01e1 D2000000 		.4byte	0xd2
 3684 01e5 02       		.byte	0x2
 3685 01e6 23       		.byte	0x23
 3686 01e7 04       		.uleb128 0x4
 3687 01e8 0C       		.uleb128 0xc
 3688 01e9 42525200 		.ascii	"BRR\000"
 3689 01ed 06       		.byte	0x6
 3690 01ee FA01     		.2byte	0x1fa
 3691 01f0 D2000000 		.4byte	0xd2
 3692 01f4 02       		.byte	0x2
 3693 01f5 23       		.byte	0x23
 3694 01f6 08       		.uleb128 0x8
 3695 01f7 0C       		.uleb128 0xc
 3696 01f8 43523100 		.ascii	"CR1\000"
 3697 01fc 06       		.byte	0x6
 3698 01fd FB01     		.2byte	0x1fb
 3699 01ff D2000000 		.4byte	0xd2
 3700 0203 02       		.byte	0x2
 3701 0204 23       		.byte	0x23
 3702 0205 0C       		.uleb128 0xc
 3703 0206 0C       		.uleb128 0xc
 3704 0207 43523200 		.ascii	"CR2\000"
 3705 020b 06       		.byte	0x6
 3706 020c FC01     		.2byte	0x1fc
 3707 020e D2000000 		.4byte	0xd2
 3708 0212 02       		.byte	0x2
 3709 0213 23       		.byte	0x23
 3710 0214 10       		.uleb128 0x10
 3711 0215 0C       		.uleb128 0xc
 3712 0216 43523300 		.ascii	"CR3\000"
 3713 021a 06       		.byte	0x6
 3714 021b FD01     		.2byte	0x1fd
 3715 021d D2000000 		.4byte	0xd2
 3716 0221 02       		.byte	0x2
ARM GAS  /tmp/ccpGcYbE.s 			page 128


 3717 0222 23       		.byte	0x23
 3718 0223 14       		.uleb128 0x14
 3719 0224 0D       		.uleb128 0xd
 3720 0225 05020000 		.4byte	.LASF28
 3721 0229 06       		.byte	0x6
 3722 022a FE01     		.2byte	0x1fe
 3723 022c D2000000 		.4byte	0xd2
 3724 0230 02       		.byte	0x2
 3725 0231 23       		.byte	0x23
 3726 0232 18       		.uleb128 0x18
 3727 0233 00       		.byte	0
 3728 0234 0E       		.uleb128 0xe
 3729 0235 84070000 		.4byte	.LASF29
 3730 0239 06       		.byte	0x6
 3731 023a FF01     		.2byte	0x1ff
 3732 023c C3010000 		.4byte	0x1c3
 3733 0240 0F       		.uleb128 0xf
 3734 0241 01       		.byte	0x1
 3735 0242 37000000 		.4byte	0x37
 3736 0246 07       		.byte	0x7
 3737 0247 98       		.byte	0x98
 3738 0248 59020000 		.4byte	0x259
 3739 024c 10       		.uleb128 0x10
 3740 024d 27070000 		.4byte	.LASF30
 3741 0251 00       		.byte	0
 3742 0252 11       		.uleb128 0x11
 3743 0253 53455400 		.ascii	"SET\000"
 3744 0257 01       		.byte	0x1
 3745 0258 00       		.byte	0
 3746 0259 03       		.uleb128 0x3
 3747 025a B3000000 		.4byte	.LASF31
 3748 025e 07       		.byte	0x7
 3749 025f 9B       		.byte	0x9b
 3750 0260 40020000 		.4byte	0x240
 3751 0264 02       		.uleb128 0x2
 3752 0265 08       		.byte	0x8
 3753 0266 04       		.byte	0x4
 3754 0267 EF050000 		.4byte	.LASF32
 3755 026b 0F       		.uleb128 0xf
 3756 026c 01       		.byte	0x1
 3757 026d 37000000 		.4byte	0x37
 3758 0271 08       		.byte	0x8
 3759 0272 2A       		.byte	0x2a
 3760 0273 90020000 		.4byte	0x290
 3761 0277 10       		.uleb128 0x10
 3762 0278 03040000 		.4byte	.LASF33
 3763 027c 00       		.byte	0
 3764 027d 10       		.uleb128 0x10
 3765 027e 74080000 		.4byte	.LASF34
 3766 0282 01       		.byte	0x1
 3767 0283 10       		.uleb128 0x10
 3768 0284 F0000000 		.4byte	.LASF35
 3769 0288 02       		.byte	0x2
 3770 0289 10       		.uleb128 0x10
 3771 028a 56030000 		.4byte	.LASF36
 3772 028e 03       		.byte	0x3
 3773 028f 00       		.byte	0
ARM GAS  /tmp/ccpGcYbE.s 			page 129


 3774 0290 03       		.uleb128 0x3
 3775 0291 C8040000 		.4byte	.LASF37
 3776 0295 08       		.byte	0x8
 3777 0296 2F       		.byte	0x2f
 3778 0297 6B020000 		.4byte	0x26b
 3779 029b 0F       		.uleb128 0xf
 3780 029c 01       		.byte	0x1
 3781 029d 37000000 		.4byte	0x37
 3782 02a1 08       		.byte	0x8
 3783 02a2 35       		.byte	0x35
 3784 02a3 B4020000 		.4byte	0x2b4
 3785 02a7 10       		.uleb128 0x10
 3786 02a8 410A0000 		.4byte	.LASF38
 3787 02ac 00       		.byte	0
 3788 02ad 10       		.uleb128 0x10
 3789 02ae 14060000 		.4byte	.LASF39
 3790 02b2 01       		.byte	0x1
 3791 02b3 00       		.byte	0
 3792 02b4 03       		.uleb128 0x3
 3793 02b5 53020000 		.4byte	.LASF40
 3794 02b9 08       		.byte	0x8
 3795 02ba 38       		.byte	0x38
 3796 02bb 9B020000 		.4byte	0x29b
 3797 02bf 12       		.uleb128 0x12
 3798 02c0 1C       		.byte	0x1c
 3799 02c1 09       		.byte	0x9
 3800 02c2 30       		.byte	0x30
 3801 02c3 2A030000 		.4byte	0x32a
 3802 02c7 13       		.uleb128 0x13
 3803 02c8 22030000 		.4byte	.LASF41
 3804 02cc 09       		.byte	0x9
 3805 02cd 32       		.byte	0x32
 3806 02ce C7000000 		.4byte	0xc7
 3807 02d2 02       		.byte	0x2
 3808 02d3 23       		.byte	0x23
 3809 02d4 00       		.uleb128 0
 3810 02d5 13       		.uleb128 0x13
 3811 02d6 A5020000 		.4byte	.LASF42
 3812 02da 09       		.byte	0x9
 3813 02db 36       		.byte	0x36
 3814 02dc C7000000 		.4byte	0xc7
 3815 02e0 02       		.byte	0x2
 3816 02e1 23       		.byte	0x23
 3817 02e2 04       		.uleb128 0x4
 3818 02e3 13       		.uleb128 0x13
 3819 02e4 D4070000 		.4byte	.LASF43
 3820 02e8 09       		.byte	0x9
 3821 02e9 39       		.byte	0x39
 3822 02ea C7000000 		.4byte	0xc7
 3823 02ee 02       		.byte	0x2
 3824 02ef 23       		.byte	0x23
 3825 02f0 08       		.uleb128 0x8
 3826 02f1 13       		.uleb128 0x13
 3827 02f2 25090000 		.4byte	.LASF44
 3828 02f6 09       		.byte	0x9
 3829 02f7 3C       		.byte	0x3c
 3830 02f8 C7000000 		.4byte	0xc7
ARM GAS  /tmp/ccpGcYbE.s 			page 130


 3831 02fc 02       		.byte	0x2
 3832 02fd 23       		.byte	0x23
 3833 02fe 0C       		.uleb128 0xc
 3834 02ff 13       		.uleb128 0x13
 3835 0300 A4040000 		.4byte	.LASF45
 3836 0304 09       		.byte	0x9
 3837 0305 3F       		.byte	0x3f
 3838 0306 C7000000 		.4byte	0xc7
 3839 030a 02       		.byte	0x2
 3840 030b 23       		.byte	0x23
 3841 030c 10       		.uleb128 0x10
 3842 030d 13       		.uleb128 0x13
 3843 030e 9F080000 		.4byte	.LASF46
 3844 0312 09       		.byte	0x9
 3845 0313 42       		.byte	0x42
 3846 0314 C7000000 		.4byte	0xc7
 3847 0318 02       		.byte	0x2
 3848 0319 23       		.byte	0x23
 3849 031a 14       		.uleb128 0x14
 3850 031b 13       		.uleb128 0x13
 3851 031c 41040000 		.4byte	.LASF47
 3852 0320 09       		.byte	0x9
 3853 0321 47       		.byte	0x47
 3854 0322 C7000000 		.4byte	0xc7
 3855 0326 02       		.byte	0x2
 3856 0327 23       		.byte	0x23
 3857 0328 18       		.uleb128 0x18
 3858 0329 00       		.byte	0
 3859 032a 03       		.uleb128 0x3
 3860 032b BE000000 		.4byte	.LASF48
 3861 032f 09       		.byte	0x9
 3862 0330 49       		.byte	0x49
 3863 0331 BF020000 		.4byte	0x2bf
 3864 0335 0F       		.uleb128 0xf
 3865 0336 01       		.byte	0x1
 3866 0337 37000000 		.4byte	0x37
 3867 033b 09       		.byte	0x9
 3868 033c 4F       		.byte	0x4f
 3869 033d 5A030000 		.4byte	0x35a
 3870 0341 10       		.uleb128 0x10
 3871 0342 82030000 		.4byte	.LASF49
 3872 0346 00       		.byte	0
 3873 0347 10       		.uleb128 0x10
 3874 0348 26050000 		.4byte	.LASF50
 3875 034c 01       		.byte	0x1
 3876 034d 10       		.uleb128 0x10
 3877 034e 38010000 		.4byte	.LASF51
 3878 0352 02       		.byte	0x2
 3879 0353 10       		.uleb128 0x10
 3880 0354 DA090000 		.4byte	.LASF52
 3881 0358 03       		.byte	0x3
 3882 0359 00       		.byte	0
 3883 035a 03       		.uleb128 0x3
 3884 035b A6070000 		.4byte	.LASF53
 3885 035f 09       		.byte	0x9
 3886 0360 54       		.byte	0x54
 3887 0361 35030000 		.4byte	0x335
ARM GAS  /tmp/ccpGcYbE.s 			page 131


 3888 0365 14       		.uleb128 0x14
 3889 0366 4C080000 		.4byte	.LASF84
 3890 036a 44       		.byte	0x44
 3891 036b 09       		.byte	0x9
 3892 036c 6F       		.byte	0x6f
 3893 036d 1A040000 		.4byte	0x41a
 3894 0371 13       		.uleb128 0x13
 3895 0372 F5060000 		.4byte	.LASF54
 3896 0376 09       		.byte	0x9
 3897 0377 71       		.byte	0x71
 3898 0378 1A040000 		.4byte	0x41a
 3899 037c 02       		.byte	0x2
 3900 037d 23       		.byte	0x23
 3901 037e 00       		.uleb128 0
 3902 037f 13       		.uleb128 0x13
 3903 0380 D4060000 		.4byte	.LASF55
 3904 0384 09       		.byte	0x9
 3905 0385 73       		.byte	0x73
 3906 0386 2A030000 		.4byte	0x32a
 3907 038a 02       		.byte	0x2
 3908 038b 23       		.byte	0x23
 3909 038c 04       		.uleb128 0x4
 3910 038d 13       		.uleb128 0x13
 3911 038e 0A030000 		.4byte	.LASF56
 3912 0392 09       		.byte	0x9
 3913 0393 75       		.byte	0x75
 3914 0394 B4020000 		.4byte	0x2b4
 3915 0398 02       		.byte	0x2
 3916 0399 23       		.byte	0x23
 3917 039a 20       		.uleb128 0x20
 3918 039b 13       		.uleb128 0x13
 3919 039c 99080000 		.4byte	.LASF57
 3920 03a0 09       		.byte	0x9
 3921 03a1 77       		.byte	0x77
 3922 03a2 5A030000 		.4byte	0x35a
 3923 03a6 02       		.byte	0x2
 3924 03a7 23       		.byte	0x23
 3925 03a8 21       		.uleb128 0x21
 3926 03a9 13       		.uleb128 0x13
 3927 03aa 03030000 		.4byte	.LASF58
 3928 03ae 09       		.byte	0x9
 3929 03af 79       		.byte	0x79
 3930 03b0 20040000 		.4byte	0x420
 3931 03b4 02       		.byte	0x2
 3932 03b5 23       		.byte	0x23
 3933 03b6 24       		.uleb128 0x24
 3934 03b7 13       		.uleb128 0x13
 3935 03b8 8E0A0000 		.4byte	.LASF59
 3936 03bc 09       		.byte	0x9
 3937 03bd 7B       		.byte	0x7b
 3938 03be 34040000 		.4byte	0x434
 3939 03c2 02       		.byte	0x2
 3940 03c3 23       		.byte	0x23
 3941 03c4 28       		.uleb128 0x28
 3942 03c5 13       		.uleb128 0x13
 3943 03c6 7C020000 		.4byte	.LASF60
 3944 03ca 09       		.byte	0x9
ARM GAS  /tmp/ccpGcYbE.s 			page 132


 3945 03cb 7D       		.byte	0x7d
 3946 03cc 34040000 		.4byte	0x434
 3947 03d0 02       		.byte	0x2
 3948 03d1 23       		.byte	0x23
 3949 03d2 2C       		.uleb128 0x2c
 3950 03d3 13       		.uleb128 0x13
 3951 03d4 39060000 		.4byte	.LASF61
 3952 03d8 09       		.byte	0x9
 3953 03d9 7F       		.byte	0x7f
 3954 03da 34040000 		.4byte	0x434
 3955 03de 02       		.byte	0x2
 3956 03df 23       		.byte	0x23
 3957 03e0 30       		.uleb128 0x30
 3958 03e1 13       		.uleb128 0x13
 3959 03e2 7C0A0000 		.4byte	.LASF62
 3960 03e6 09       		.byte	0x9
 3961 03e7 81       		.byte	0x81
 3962 03e8 34040000 		.4byte	0x434
 3963 03ec 02       		.byte	0x2
 3964 03ed 23       		.byte	0x23
 3965 03ee 34       		.uleb128 0x34
 3966 03ef 13       		.uleb128 0x13
 3967 03f0 9A040000 		.4byte	.LASF63
 3968 03f4 09       		.byte	0x9
 3969 03f5 83       		.byte	0x83
 3970 03f6 D2000000 		.4byte	0xd2
 3971 03fa 02       		.byte	0x2
 3972 03fb 23       		.byte	0x23
 3973 03fc 38       		.uleb128 0x38
 3974 03fd 13       		.uleb128 0x13
 3975 03fe 80040000 		.4byte	.LASF64
 3976 0402 09       		.byte	0x9
 3977 0403 85       		.byte	0x85
 3978 0404 3A040000 		.4byte	0x43a
 3979 0408 02       		.byte	0x2
 3980 0409 23       		.byte	0x23
 3981 040a 3C       		.uleb128 0x3c
 3982 040b 13       		.uleb128 0x13
 3983 040c E3020000 		.4byte	.LASF65
 3984 0410 09       		.byte	0x9
 3985 0411 87       		.byte	0x87
 3986 0412 C7000000 		.4byte	0xc7
 3987 0416 02       		.byte	0x2
 3988 0417 23       		.byte	0x23
 3989 0418 40       		.uleb128 0x40
 3990 0419 00       		.byte	0
 3991 041a 15       		.uleb128 0x15
 3992 041b 04       		.byte	0x4
 3993 041c 83010000 		.4byte	0x183
 3994 0420 16       		.uleb128 0x16
 3995 0421 04       		.byte	0x4
 3996 0422 17       		.uleb128 0x17
 3997 0423 01       		.byte	0x1
 3998 0424 2E040000 		.4byte	0x42e
 3999 0428 18       		.uleb128 0x18
 4000 0429 2E040000 		.4byte	0x42e
 4001 042d 00       		.byte	0
ARM GAS  /tmp/ccpGcYbE.s 			page 133


 4002 042e 15       		.uleb128 0x15
 4003 042f 04       		.byte	0x4
 4004 0430 65030000 		.4byte	0x365
 4005 0434 15       		.uleb128 0x15
 4006 0435 04       		.byte	0x4
 4007 0436 22040000 		.4byte	0x422
 4008 043a 15       		.uleb128 0x15
 4009 043b 04       		.byte	0x4
 4010 043c B7010000 		.4byte	0x1b7
 4011 0440 03       		.uleb128 0x3
 4012 0441 27060000 		.4byte	.LASF66
 4013 0445 09       		.byte	0x9
 4014 0446 89       		.byte	0x89
 4015 0447 65030000 		.4byte	0x365
 4016 044b 15       		.uleb128 0x15
 4017 044c 04       		.byte	0x4
 4018 044d 40040000 		.4byte	0x440
 4019 0451 15       		.uleb128 0x15
 4020 0452 04       		.byte	0x4
 4021 0453 97000000 		.4byte	0x97
 4022 0457 15       		.uleb128 0x15
 4023 0458 04       		.byte	0x4
 4024 0459 34020000 		.4byte	0x234
 4025 045d 12       		.uleb128 0x12
 4026 045e 20       		.byte	0x20
 4027 045f 0A       		.byte	0xa
 4028 0460 2F       		.byte	0x2f
 4029 0461 D6040000 		.4byte	0x4d6
 4030 0465 13       		.uleb128 0x13
 4031 0466 0A020000 		.4byte	.LASF67
 4032 046a 0A       		.byte	0xa
 4033 046b 31       		.byte	0x31
 4034 046c C7000000 		.4byte	0xc7
 4035 0470 02       		.byte	0x2
 4036 0471 23       		.byte	0x23
 4037 0472 00       		.uleb128 0
 4038 0473 13       		.uleb128 0x13
 4039 0474 69080000 		.4byte	.LASF68
 4040 0478 0A       		.byte	0xa
 4041 0479 36       		.byte	0x36
 4042 047a C7000000 		.4byte	0xc7
 4043 047e 02       		.byte	0x2
 4044 047f 23       		.byte	0x23
 4045 0480 04       		.uleb128 0x4
 4046 0481 13       		.uleb128 0x13
 4047 0482 F0020000 		.4byte	.LASF69
 4048 0486 0A       		.byte	0xa
 4049 0487 39       		.byte	0x39
 4050 0488 C7000000 		.4byte	0xc7
 4051 048c 02       		.byte	0x2
 4052 048d 23       		.byte	0x23
 4053 048e 08       		.uleb128 0x8
 4054 048f 13       		.uleb128 0x13
 4055 0490 B1030000 		.4byte	.LASF70
 4056 0494 0A       		.byte	0xa
 4057 0495 3C       		.byte	0x3c
 4058 0496 C7000000 		.4byte	0xc7
ARM GAS  /tmp/ccpGcYbE.s 			page 134


 4059 049a 02       		.byte	0x2
 4060 049b 23       		.byte	0x23
 4061 049c 0C       		.uleb128 0xc
 4062 049d 13       		.uleb128 0x13
 4063 049e 9F080000 		.4byte	.LASF46
 4064 04a2 0A       		.byte	0xa
 4065 04a3 43       		.byte	0x43
 4066 04a4 C7000000 		.4byte	0xc7
 4067 04a8 02       		.byte	0x2
 4068 04a9 23       		.byte	0x23
 4069 04aa 10       		.uleb128 0x10
 4070 04ab 13       		.uleb128 0x13
 4071 04ac 290A0000 		.4byte	.LASF71
 4072 04b0 0A       		.byte	0xa
 4073 04b1 46       		.byte	0x46
 4074 04b2 C7000000 		.4byte	0xc7
 4075 04b6 02       		.byte	0x2
 4076 04b7 23       		.byte	0x23
 4077 04b8 14       		.uleb128 0x14
 4078 04b9 13       		.uleb128 0x13
 4079 04ba 68060000 		.4byte	.LASF72
 4080 04be 0A       		.byte	0xa
 4081 04bf 49       		.byte	0x49
 4082 04c0 C7000000 		.4byte	0xc7
 4083 04c4 02       		.byte	0x2
 4084 04c5 23       		.byte	0x23
 4085 04c6 18       		.uleb128 0x18
 4086 04c7 13       		.uleb128 0x13
 4087 04c8 7E080000 		.4byte	.LASF73
 4088 04cc 0A       		.byte	0xa
 4089 04cd 4C       		.byte	0x4c
 4090 04ce C7000000 		.4byte	0xc7
 4091 04d2 02       		.byte	0x2
 4092 04d3 23       		.byte	0x23
 4093 04d4 1C       		.uleb128 0x1c
 4094 04d5 00       		.byte	0
 4095 04d6 03       		.uleb128 0x3
 4096 04d7 3A050000 		.4byte	.LASF74
 4097 04db 0A       		.byte	0xa
 4098 04dc 4F       		.byte	0x4f
 4099 04dd 5D040000 		.4byte	0x45d
 4100 04e1 0F       		.uleb128 0xf
 4101 04e2 01       		.byte	0x1
 4102 04e3 37000000 		.4byte	0x37
 4103 04e7 0A       		.byte	0xa
 4104 04e8 55       		.byte	0x55
 4105 04e9 1E050000 		.4byte	0x51e
 4106 04ed 10       		.uleb128 0x10
 4107 04ee 550A0000 		.4byte	.LASF75
 4108 04f2 00       		.byte	0
 4109 04f3 10       		.uleb128 0x10
 4110 04f4 A3010000 		.4byte	.LASF76
 4111 04f8 01       		.byte	0x1
 4112 04f9 10       		.uleb128 0x10
 4113 04fa 60050000 		.4byte	.LASF77
 4114 04fe 02       		.byte	0x2
 4115 04ff 10       		.uleb128 0x10
ARM GAS  /tmp/ccpGcYbE.s 			page 135


 4116 0500 0D090000 		.4byte	.LASF78
 4117 0504 12       		.byte	0x12
 4118 0505 10       		.uleb128 0x10
 4119 0506 8D060000 		.4byte	.LASF79
 4120 050a 22       		.byte	0x22
 4121 050b 10       		.uleb128 0x10
 4122 050c 55000000 		.4byte	.LASF80
 4123 0510 32       		.byte	0x32
 4124 0511 10       		.uleb128 0x10
 4125 0512 AC050000 		.4byte	.LASF81
 4126 0516 03       		.byte	0x3
 4127 0517 10       		.uleb128 0x10
 4128 0518 4B060000 		.4byte	.LASF82
 4129 051c 04       		.byte	0x4
 4130 051d 00       		.byte	0
 4131 051e 03       		.uleb128 0x3
 4132 051f D9060000 		.4byte	.LASF83
 4133 0523 0A       		.byte	0xa
 4134 0524 5E       		.byte	0x5e
 4135 0525 E1040000 		.4byte	0x4e1
 4136 0529 06       		.uleb128 0x6
 4137 052a 1E050000 		.4byte	0x51e
 4138 052e 14       		.uleb128 0x14
 4139 052f 13020000 		.4byte	.LASF85
 4140 0533 44       		.byte	0x44
 4141 0534 0A       		.byte	0xa
 4142 0535 63       		.byte	0x63
 4143 0536 F1050000 		.4byte	0x5f1
 4144 053a 13       		.uleb128 0x13
 4145 053b F5060000 		.4byte	.LASF54
 4146 053f 0A       		.byte	0xa
 4147 0540 65       		.byte	0x65
 4148 0541 57040000 		.4byte	0x457
 4149 0545 02       		.byte	0x2
 4150 0546 23       		.byte	0x23
 4151 0547 00       		.uleb128 0
 4152 0548 13       		.uleb128 0x13
 4153 0549 D4060000 		.4byte	.LASF55
 4154 054d 0A       		.byte	0xa
 4155 054e 67       		.byte	0x67
 4156 054f D6040000 		.4byte	0x4d6
 4157 0553 02       		.byte	0x2
 4158 0554 23       		.byte	0x23
 4159 0555 04       		.uleb128 0x4
 4160 0556 13       		.uleb128 0x13
 4161 0557 9A020000 		.4byte	.LASF86
 4162 055b 0A       		.byte	0xa
 4163 055c 69       		.byte	0x69
 4164 055d 51040000 		.4byte	0x451
 4165 0561 02       		.byte	0x2
 4166 0562 23       		.byte	0x23
 4167 0563 24       		.uleb128 0x24
 4168 0564 13       		.uleb128 0x13
 4169 0565 4A040000 		.4byte	.LASF87
 4170 0569 0A       		.byte	0xa
 4171 056a 6B       		.byte	0x6b
 4172 056b A7000000 		.4byte	0xa7
ARM GAS  /tmp/ccpGcYbE.s 			page 136


 4173 056f 02       		.byte	0x2
 4174 0570 23       		.byte	0x23
 4175 0571 28       		.uleb128 0x28
 4176 0572 13       		.uleb128 0x13
 4177 0573 C6010000 		.4byte	.LASF88
 4178 0577 0A       		.byte	0xa
 4179 0578 6D       		.byte	0x6d
 4180 0579 B2000000 		.4byte	0xb2
 4181 057d 02       		.byte	0x2
 4182 057e 23       		.byte	0x23
 4183 057f 2A       		.uleb128 0x2a
 4184 0580 13       		.uleb128 0x13
 4185 0581 060A0000 		.4byte	.LASF89
 4186 0585 0A       		.byte	0xa
 4187 0586 6F       		.byte	0x6f
 4188 0587 51040000 		.4byte	0x451
 4189 058b 02       		.byte	0x2
 4190 058c 23       		.byte	0x23
 4191 058d 2C       		.uleb128 0x2c
 4192 058e 13       		.uleb128 0x13
 4193 058f 23040000 		.4byte	.LASF90
 4194 0593 0A       		.byte	0xa
 4195 0594 71       		.byte	0x71
 4196 0595 A7000000 		.4byte	0xa7
 4197 0599 02       		.byte	0x2
 4198 059a 23       		.byte	0x23
 4199 059b 30       		.uleb128 0x30
 4200 059c 13       		.uleb128 0x13
 4201 059d 350A0000 		.4byte	.LASF91
 4202 05a1 0A       		.byte	0xa
 4203 05a2 73       		.byte	0x73
 4204 05a3 B2000000 		.4byte	0xb2
 4205 05a7 02       		.byte	0x2
 4206 05a8 23       		.byte	0x23
 4207 05a9 32       		.uleb128 0x32
 4208 05aa 13       		.uleb128 0x13
 4209 05ab 61060000 		.4byte	.LASF92
 4210 05af 0A       		.byte	0xa
 4211 05b0 75       		.byte	0x75
 4212 05b1 4B040000 		.4byte	0x44b
 4213 05b5 02       		.byte	0x2
 4214 05b6 23       		.byte	0x23
 4215 05b7 34       		.uleb128 0x34
 4216 05b8 13       		.uleb128 0x13
 4217 05b9 3B030000 		.4byte	.LASF93
 4218 05bd 0A       		.byte	0xa
 4219 05be 77       		.byte	0x77
 4220 05bf 4B040000 		.4byte	0x44b
 4221 05c3 02       		.byte	0x2
 4222 05c4 23       		.byte	0x23
 4223 05c5 38       		.uleb128 0x38
 4224 05c6 13       		.uleb128 0x13
 4225 05c7 0A030000 		.4byte	.LASF56
 4226 05cb 0A       		.byte	0xa
 4227 05cc 79       		.byte	0x79
 4228 05cd B4020000 		.4byte	0x2b4
 4229 05d1 02       		.byte	0x2
ARM GAS  /tmp/ccpGcYbE.s 			page 137


 4230 05d2 23       		.byte	0x23
 4231 05d3 3C       		.uleb128 0x3c
 4232 05d4 13       		.uleb128 0x13
 4233 05d5 99080000 		.4byte	.LASF57
 4234 05d9 0A       		.byte	0xa
 4235 05da 7B       		.byte	0x7b
 4236 05db 29050000 		.4byte	0x529
 4237 05df 02       		.byte	0x2
 4238 05e0 23       		.byte	0x23
 4239 05e1 3D       		.uleb128 0x3d
 4240 05e2 13       		.uleb128 0x13
 4241 05e3 9A040000 		.4byte	.LASF63
 4242 05e7 0A       		.byte	0xa
 4243 05e8 7D       		.byte	0x7d
 4244 05e9 D2000000 		.4byte	0xd2
 4245 05ed 02       		.byte	0x2
 4246 05ee 23       		.byte	0x23
 4247 05ef 40       		.uleb128 0x40
 4248 05f0 00       		.byte	0
 4249 05f1 03       		.uleb128 0x3
 4250 05f2 2F000000 		.4byte	.LASF94
 4251 05f6 0A       		.byte	0xa
 4252 05f7 8C       		.byte	0x8c
 4253 05f8 2E050000 		.4byte	0x52e
 4254 05fc 0F       		.uleb128 0xf
 4255 05fd 01       		.byte	0x1
 4256 05fe 37000000 		.4byte	0x37
 4257 0602 0B       		.byte	0xb
 4258 0603 33       		.byte	0x33
 4259 0604 21060000 		.4byte	0x621
 4260 0608 10       		.uleb128 0x10
 4261 0609 52010000 		.4byte	.LASF95
 4262 060d 64       		.byte	0x64
 4263 060e 10       		.uleb128 0x10
 4264 060f 42030000 		.4byte	.LASF96
 4265 0613 0A       		.byte	0xa
 4266 0614 10       		.uleb128 0x10
 4267 0615 F0030000 		.4byte	.LASF97
 4268 0619 01       		.byte	0x1
 4269 061a 10       		.uleb128 0x10
 4270 061b E2080000 		.4byte	.LASF98
 4271 061f 01       		.byte	0x1
 4272 0620 00       		.byte	0
 4273 0621 03       		.uleb128 0x3
 4274 0622 70000000 		.4byte	.LASF99
 4275 0626 0B       		.byte	0xb
 4276 0627 38       		.byte	0x38
 4277 0628 FC050000 		.4byte	0x5fc
 4278 062c 08       		.uleb128 0x8
 4279 062d 8E080000 		.4byte	.LASF100
 4280 0631 0B       		.byte	0xb
 4281 0632 3D       		.byte	0x3d
 4282 0633 C7000000 		.4byte	0xc7
 4283 0637 01       		.byte	0x1
 4284 0638 01       		.byte	0x1
 4285 0639 08       		.uleb128 0x8
 4286 063a A6030000 		.4byte	.LASF101
ARM GAS  /tmp/ccpGcYbE.s 			page 138


 4287 063e 0B       		.byte	0xb
 4288 063f 3E       		.byte	0x3e
 4289 0640 21060000 		.4byte	0x621
 4290 0644 01       		.byte	0x1
 4291 0645 01       		.byte	0x1
 4292 0646 19       		.uleb128 0x19
 4293 0647 190A0000 		.4byte	.LASF114
 4294 064b 01       		.byte	0x1
 4295 064c 9B0A     		.2byte	0xa9b
 4296 064e 01       		.byte	0x1
 4297 064f 01       		.byte	0x1
 4298 0650 79060000 		.4byte	0x679
 4299 0654 1A       		.uleb128 0x1a
 4300 0655 6E030000 		.4byte	.LASF104
 4301 0659 01       		.byte	0x1
 4302 065a 9B0A     		.2byte	0xa9b
 4303 065c 79060000 		.4byte	0x679
 4304 0660 1B       		.uleb128 0x1b
 4305 0661 4C020000 		.4byte	.LASF102
 4306 0665 01       		.byte	0x1
 4307 0666 9D0A     		.2byte	0xa9d
 4308 0668 C7000000 		.4byte	0xc7
 4309 066c 1B       		.uleb128 0x1b
 4310 066d C5070000 		.4byte	.LASF103
 4311 0671 01       		.byte	0x1
 4312 0672 9E0A     		.2byte	0xa9e
 4313 0674 C7000000 		.4byte	0xc7
 4314 0678 00       		.byte	0
 4315 0679 15       		.uleb128 0x15
 4316 067a 04       		.byte	0x4
 4317 067b F1050000 		.4byte	0x5f1
 4318 067f 1C       		.uleb128 0x1c
 4319 0680 0A040000 		.4byte	.LASF105
 4320 0684 01       		.byte	0x1
 4321 0685 2E0A     		.2byte	0xa2e
 4322 0687 01       		.byte	0x1
 4323 0688 90020000 		.4byte	0x290
 4324 068c 01       		.byte	0x1
 4325 068d AA060000 		.4byte	0x6aa
 4326 0691 1A       		.uleb128 0x1a
 4327 0692 6E030000 		.4byte	.LASF104
 4328 0696 01       		.byte	0x1
 4329 0697 2E0A     		.2byte	0xa2e
 4330 0699 79060000 		.4byte	0x679
 4331 069d 1D       		.uleb128 0x1d
 4332 069e 746D7000 		.ascii	"tmp\000"
 4333 06a2 01       		.byte	0x1
 4334 06a3 300A     		.2byte	0xa30
 4335 06a5 AA060000 		.4byte	0x6aa
 4336 06a9 00       		.byte	0
 4337 06aa 15       		.uleb128 0x15
 4338 06ab 04       		.byte	0x4
 4339 06ac A7000000 		.4byte	0xa7
 4340 06b0 1C       		.uleb128 0x1c
 4341 06b1 30080000 		.4byte	.LASF106
 4342 06b5 01       		.byte	0x1
 4343 06b6 E009     		.2byte	0x9e0
ARM GAS  /tmp/ccpGcYbE.s 			page 139


 4344 06b8 01       		.byte	0x1
 4345 06b9 90020000 		.4byte	0x290
 4346 06bd 01       		.byte	0x1
 4347 06be DB060000 		.4byte	0x6db
 4348 06c2 1A       		.uleb128 0x1a
 4349 06c3 6E030000 		.4byte	.LASF104
 4350 06c7 01       		.byte	0x1
 4351 06c8 E009     		.2byte	0x9e0
 4352 06ca 79060000 		.4byte	0x679
 4353 06ce 1D       		.uleb128 0x1d
 4354 06cf 746D7000 		.ascii	"tmp\000"
 4355 06d3 01       		.byte	0x1
 4356 06d4 E209     		.2byte	0x9e2
 4357 06d6 AA060000 		.4byte	0x6aa
 4358 06da 00       		.byte	0
 4359 06db 1C       		.uleb128 0x1c
 4360 06dc FE060000 		.4byte	.LASF107
 4361 06e0 01       		.byte	0x1
 4362 06e1 C509     		.2byte	0x9c5
 4363 06e3 01       		.byte	0x1
 4364 06e4 90020000 		.4byte	0x290
 4365 06e8 01       		.byte	0x1
 4366 06e9 FA060000 		.4byte	0x6fa
 4367 06ed 1A       		.uleb128 0x1a
 4368 06ee 6E030000 		.4byte	.LASF104
 4369 06f2 01       		.byte	0x1
 4370 06f3 C509     		.2byte	0x9c5
 4371 06f5 79060000 		.4byte	0x679
 4372 06f9 00       		.byte	0
 4373 06fa 1C       		.uleb128 0x1c
 4374 06fb 3A020000 		.4byte	.LASF108
 4375 06ff 01       		.byte	0x1
 4376 0700 9709     		.2byte	0x997
 4377 0702 01       		.byte	0x1
 4378 0703 90020000 		.4byte	0x290
 4379 0707 01       		.byte	0x1
 4380 0708 25070000 		.4byte	0x725
 4381 070c 1A       		.uleb128 0x1a
 4382 070d 6E030000 		.4byte	.LASF104
 4383 0711 01       		.byte	0x1
 4384 0712 9709     		.2byte	0x997
 4385 0714 79060000 		.4byte	0x679
 4386 0718 1D       		.uleb128 0x1d
 4387 0719 746D7000 		.ascii	"tmp\000"
 4388 071d 01       		.byte	0x1
 4389 071e 9909     		.2byte	0x999
 4390 0720 AA060000 		.4byte	0x6aa
 4391 0724 00       		.byte	0
 4392 0725 1E       		.uleb128 0x1e
 4393 0726 C1090000 		.4byte	.LASF109
 4394 072a 01       		.byte	0x1
 4395 072b 6D09     		.2byte	0x96d
 4396 072d 01       		.byte	0x1
 4397 072e 9C0C0000 		.4byte	.LFB103
 4398 0732 C00C0000 		.4byte	.LFE103
 4399 0736 00000000 		.4byte	.LLST116
 4400 073a 01       		.byte	0x1
ARM GAS  /tmp/ccpGcYbE.s 			page 140


 4401 073b 69070000 		.4byte	0x769
 4402 073f 1F       		.uleb128 0x1f
 4403 0740 9E050000 		.4byte	.LASF111
 4404 0744 01       		.byte	0x1
 4405 0745 6D09     		.2byte	0x96d
 4406 0747 4B040000 		.4byte	0x44b
 4407 074b 20000000 		.4byte	.LLST117
 4408 074f 20       		.uleb128 0x20
 4409 0750 6E030000 		.4byte	.LASF104
 4410 0754 01       		.byte	0x1
 4411 0755 6F09     		.2byte	0x96f
 4412 0757 79060000 		.4byte	0x679
 4413 075b 41000000 		.4byte	.LLST118
 4414 075f 21       		.uleb128 0x21
 4415 0760 BE0C0000 		.4byte	.LVL274
 4416 0764 800A0000 		.4byte	0xa80
 4417 0768 00       		.byte	0
 4418 0769 1E       		.uleb128 0x1e
 4419 076a FB050000 		.4byte	.LASF110
 4420 076e 01       		.byte	0x1
 4421 076f 4209     		.2byte	0x942
 4422 0771 01       		.byte	0x1
 4423 0772 C00C0000 		.4byte	.LFB102
 4424 0776 E40C0000 		.4byte	.LFE102
 4425 077a 54000000 		.4byte	.LLST119
 4426 077e 01       		.byte	0x1
 4427 077f AD070000 		.4byte	0x7ad
 4428 0783 1F       		.uleb128 0x1f
 4429 0784 9E050000 		.4byte	.LASF111
 4430 0788 01       		.byte	0x1
 4431 0789 4209     		.2byte	0x942
 4432 078b 4B040000 		.4byte	0x44b
 4433 078f 74000000 		.4byte	.LLST120
 4434 0793 20       		.uleb128 0x20
 4435 0794 6E030000 		.4byte	.LASF104
 4436 0798 01       		.byte	0x1
 4437 0799 4409     		.2byte	0x944
 4438 079b 79060000 		.4byte	0x679
 4439 079f 95000000 		.4byte	.LLST121
 4440 07a3 21       		.uleb128 0x21
 4441 07a4 E20C0000 		.4byte	.LVL277
 4442 07a8 800A0000 		.4byte	0xa80
 4443 07ac 00       		.byte	0
 4444 07ad 1E       		.uleb128 0x1e
 4445 07ae C4050000 		.4byte	.LASF112
 4446 07b2 01       		.byte	0x1
 4447 07b3 2B09     		.2byte	0x92b
 4448 07b5 01       		.byte	0x1
 4449 07b6 E80B0000 		.4byte	.LFB101
 4450 07ba F80B0000 		.4byte	.LFE101
 4451 07be A8000000 		.4byte	.LLST110
 4452 07c2 01       		.byte	0x1
 4453 07c3 F1070000 		.4byte	0x7f1
 4454 07c7 1F       		.uleb128 0x1f
 4455 07c8 9E050000 		.4byte	.LASF111
 4456 07cc 01       		.byte	0x1
 4457 07cd 2B09     		.2byte	0x92b
ARM GAS  /tmp/ccpGcYbE.s 			page 141


 4458 07cf 4B040000 		.4byte	0x44b
 4459 07d3 C8000000 		.4byte	.LLST111
 4460 07d7 20       		.uleb128 0x20
 4461 07d8 6E030000 		.4byte	.LASF104
 4462 07dc 01       		.byte	0x1
 4463 07dd 2D09     		.2byte	0x92d
 4464 07df 79060000 		.4byte	0x679
 4465 07e3 E9000000 		.4byte	.LLST112
 4466 07e7 21       		.uleb128 0x21
 4467 07e8 F60B0000 		.4byte	.LVL259
 4468 07ec 9C0A0000 		.4byte	0xa9c
 4469 07f0 00       		.byte	0
 4470 07f1 22       		.uleb128 0x22
 4471 07f2 24010000 		.4byte	.LASF113
 4472 07f6 01       		.byte	0x1
 4473 07f7 1B09     		.2byte	0x91b
 4474 07f9 01       		.byte	0x1
 4475 07fa 00000000 		.4byte	.LFB100
 4476 07fe 1A000000 		.4byte	.LFE100
 4477 0802 02       		.byte	0x2
 4478 0803 7D       		.byte	0x7d
 4479 0804 00       		.sleb128 0
 4480 0805 01       		.byte	0x1
 4481 0806 19080000 		.4byte	0x819
 4482 080a 23       		.uleb128 0x23
 4483 080b 6E030000 		.4byte	.LASF104
 4484 080f 01       		.byte	0x1
 4485 0810 1B09     		.2byte	0x91b
 4486 0812 79060000 		.4byte	0x679
 4487 0816 01       		.byte	0x1
 4488 0817 50       		.byte	0x50
 4489 0818 00       		.byte	0
 4490 0819 19       		.uleb128 0x19
 4491 081a 65010000 		.4byte	.LASF115
 4492 081e 01       		.byte	0x1
 4493 081f 0D09     		.2byte	0x90d
 4494 0821 01       		.byte	0x1
 4495 0822 01       		.byte	0x1
 4496 0823 34080000 		.4byte	0x834
 4497 0827 1A       		.uleb128 0x1a
 4498 0828 6E030000 		.4byte	.LASF104
 4499 082c 01       		.byte	0x1
 4500 082d 0D09     		.2byte	0x90d
 4501 082f 79060000 		.4byte	0x679
 4502 0833 00       		.byte	0
 4503 0834 1C       		.uleb128 0x1c
 4504 0835 87090000 		.4byte	.LASF116
 4505 0839 01       		.byte	0x1
 4506 083a E608     		.2byte	0x8e6
 4507 083c 01       		.byte	0x1
 4508 083d 90020000 		.4byte	0x290
 4509 0841 01       		.byte	0x1
 4510 0842 83080000 		.4byte	0x883
 4511 0846 1A       		.uleb128 0x1a
 4512 0847 6E030000 		.4byte	.LASF104
 4513 084b 01       		.byte	0x1
 4514 084c E608     		.2byte	0x8e6
ARM GAS  /tmp/ccpGcYbE.s 			page 142


 4515 084e 79060000 		.4byte	0x679
 4516 0852 1A       		.uleb128 0x1a
 4517 0853 AF020000 		.4byte	.LASF117
 4518 0857 01       		.byte	0x1
 4519 0858 E608     		.2byte	0x8e6
 4520 085a C7000000 		.4byte	0xc7
 4521 085e 1A       		.uleb128 0x1a
 4522 085f 4E0A0000 		.4byte	.LASF118
 4523 0863 01       		.byte	0x1
 4524 0864 E608     		.2byte	0x8e6
 4525 0866 59020000 		.4byte	0x259
 4526 086a 1A       		.uleb128 0x1a
 4527 086b F9020000 		.4byte	.LASF119
 4528 086f 01       		.byte	0x1
 4529 0870 E608     		.2byte	0x8e6
 4530 0872 C7000000 		.4byte	0xc7
 4531 0876 1A       		.uleb128 0x1a
 4532 0877 1A030000 		.4byte	.LASF120
 4533 087b 01       		.byte	0x1
 4534 087c E608     		.2byte	0x8e6
 4535 087e C7000000 		.4byte	0xc7
 4536 0882 00       		.byte	0
 4537 0883 1E       		.uleb128 0x1e
 4538 0884 C9080000 		.4byte	.LASF121
 4539 0888 01       		.byte	0x1
 4540 0889 BB08     		.2byte	0x8bb
 4541 088b 01       		.byte	0x1
 4542 088c 280A0000 		.4byte	.LFB97
 4543 0890 7A0A0000 		.4byte	.LFE97
 4544 0894 FC000000 		.4byte	.LLST95
 4545 0898 01       		.byte	0x1
 4546 0899 09090000 		.4byte	0x909
 4547 089d 1F       		.uleb128 0x1f
 4548 089e 9E050000 		.4byte	.LASF111
 4549 08a2 01       		.byte	0x1
 4550 08a3 BB08     		.2byte	0x8bb
 4551 08a5 4B040000 		.4byte	0x44b
 4552 08a9 1C010000 		.4byte	.LLST96
 4553 08ad 20       		.uleb128 0x20
 4554 08ae 41080000 		.4byte	.LASF122
 4555 08b2 01       		.byte	0x1
 4556 08b3 BD08     		.2byte	0x8bd
 4557 08b5 C7000000 		.4byte	0xc7
 4558 08b9 3D010000 		.4byte	.LLST97
 4559 08bd 20       		.uleb128 0x20
 4560 08be 6E030000 		.4byte	.LASF104
 4561 08c2 01       		.byte	0x1
 4562 08c3 BE08     		.2byte	0x8be
 4563 08c5 79060000 		.4byte	0x679
 4564 08c9 7B010000 		.4byte	.LLST98
 4565 08cd 24       		.uleb128 0x24
 4566 08ce 19080000 		.4byte	0x819
 4567 08d2 420A0000 		.4byte	.LBB36
 4568 08d6 500A0000 		.4byte	.LBE36
 4569 08da 01       		.byte	0x1
 4570 08db C608     		.2byte	0x8c6
 4571 08dd EB080000 		.4byte	0x8eb
ARM GAS  /tmp/ccpGcYbE.s 			page 143


 4572 08e1 25       		.uleb128 0x25
 4573 08e2 27080000 		.4byte	0x827
 4574 08e6 8E010000 		.4byte	.LLST99
 4575 08ea 00       		.byte	0
 4576 08eb 26       		.uleb128 0x26
 4577 08ec 640A0000 		.4byte	.LVL211
 4578 08f0 F1070000 		.4byte	0x7f1
 4579 08f4 FF080000 		.4byte	0x8ff
 4580 08f8 27       		.uleb128 0x27
 4581 08f9 01       		.byte	0x1
 4582 08fa 50       		.byte	0x50
 4583 08fb 02       		.byte	0x2
 4584 08fc 70       		.byte	0x70
 4585 08fd 00       		.sleb128 0
 4586 08fe 00       		.byte	0
 4587 08ff 21       		.uleb128 0x21
 4588 0900 780A0000 		.4byte	.LVL212
 4589 0904 9C0A0000 		.4byte	0xa9c
 4590 0908 00       		.byte	0
 4591 0909 1E       		.uleb128 0x1e
 4592 090a 4C050000 		.4byte	.LASF123
 4593 090e 01       		.byte	0x1
 4594 090f A808     		.2byte	0x8a8
 4595 0911 01       		.byte	0x1
 4596 0912 F2080000 		.4byte	.LFB96
 4597 0916 FC080000 		.4byte	.LFE96
 4598 091a A1010000 		.4byte	.LLST85
 4599 091e 01       		.byte	0x1
 4600 091f 4D090000 		.4byte	0x94d
 4601 0923 1F       		.uleb128 0x1f
 4602 0924 9E050000 		.4byte	.LASF111
 4603 0928 01       		.byte	0x1
 4604 0929 A808     		.2byte	0x8a8
 4605 092b 4B040000 		.4byte	0x44b
 4606 092f C1010000 		.4byte	.LLST86
 4607 0933 20       		.uleb128 0x20
 4608 0934 6E030000 		.4byte	.LASF104
 4609 0938 01       		.byte	0x1
 4610 0939 AA08     		.2byte	0x8aa
 4611 093b 79060000 		.4byte	0x679
 4612 093f E2010000 		.4byte	.LLST87
 4613 0943 21       		.uleb128 0x21
 4614 0944 FA080000 		.4byte	.LVL179
 4615 0948 D20A0000 		.4byte	0xad2
 4616 094c 00       		.byte	0
 4617 094d 1E       		.uleb128 0x1e
 4618 094e 55040000 		.4byte	.LASF124
 4619 0952 01       		.byte	0x1
 4620 0953 5D08     		.2byte	0x85d
 4621 0955 01       		.byte	0x1
 4622 0956 FE080000 		.4byte	.LFB95
 4623 095a 4C090000 		.4byte	.LFE95
 4624 095e 05020000 		.4byte	.LLST88
 4625 0962 01       		.byte	0x1
 4626 0963 9A090000 		.4byte	0x99a
 4627 0967 1F       		.uleb128 0x1f
 4628 0968 9E050000 		.4byte	.LASF111
ARM GAS  /tmp/ccpGcYbE.s 			page 144


 4629 096c 01       		.byte	0x1
 4630 096d 5D08     		.2byte	0x85d
 4631 096f 4B040000 		.4byte	0x44b
 4632 0973 25020000 		.4byte	.LLST89
 4633 0977 20       		.uleb128 0x20
 4634 0978 6E030000 		.4byte	.LASF104
 4635 097c 01       		.byte	0x1
 4636 097d 5F08     		.2byte	0x85f
 4637 097f 79060000 		.4byte	0x679
 4638 0983 46020000 		.4byte	.LLST90
 4639 0987 21       		.uleb128 0x21
 4640 0988 44090000 		.4byte	.LVL182
 4641 098c ED0A0000 		.4byte	0xaed
 4642 0990 21       		.uleb128 0x21
 4643 0991 4A090000 		.4byte	.LVL184
 4644 0995 B70A0000 		.4byte	0xab7
 4645 0999 00       		.byte	0
 4646 099a 1E       		.uleb128 0x1e
 4647 099b 8A050000 		.4byte	.LASF125
 4648 099f 01       		.byte	0x1
 4649 09a0 4A08     		.2byte	0x84a
 4650 09a2 01       		.byte	0x1
 4651 09a3 48080000 		.4byte	.LFB94
 4652 09a7 52080000 		.4byte	.LFE94
 4653 09ab 64020000 		.4byte	.LLST78
 4654 09af 01       		.byte	0x1
 4655 09b0 DE090000 		.4byte	0x9de
 4656 09b4 1F       		.uleb128 0x1f
 4657 09b5 9E050000 		.4byte	.LASF111
 4658 09b9 01       		.byte	0x1
 4659 09ba 4A08     		.2byte	0x84a
 4660 09bc 4B040000 		.4byte	0x44b
 4661 09c0 84020000 		.4byte	.LLST79
 4662 09c4 20       		.uleb128 0x20
 4663 09c5 6E030000 		.4byte	.LASF104
 4664 09c9 01       		.byte	0x1
 4665 09ca 4C08     		.2byte	0x84c
 4666 09cc 79060000 		.4byte	0x679
 4667 09d0 A5020000 		.4byte	.LLST80
 4668 09d4 21       		.uleb128 0x21
 4669 09d5 50080000 		.4byte	.LVL165
 4670 09d9 080B0000 		.4byte	0xb08
 4671 09dd 00       		.byte	0
 4672 09de 1E       		.uleb128 0x1e
 4673 09df 6A040000 		.4byte	.LASF126
 4674 09e3 01       		.byte	0x1
 4675 09e4 2308     		.2byte	0x823
 4676 09e6 01       		.byte	0x1
 4677 09e7 0A080000 		.4byte	.LFB93
 4678 09eb 46080000 		.4byte	.LFE93
 4679 09ef C8020000 		.4byte	.LLST75
 4680 09f3 01       		.byte	0x1
 4681 09f4 220A0000 		.4byte	0xa22
 4682 09f8 1F       		.uleb128 0x1f
 4683 09f9 9E050000 		.4byte	.LASF111
 4684 09fd 01       		.byte	0x1
 4685 09fe 2308     		.2byte	0x823
ARM GAS  /tmp/ccpGcYbE.s 			page 145


 4686 0a00 4B040000 		.4byte	0x44b
 4687 0a04 E8020000 		.4byte	.LLST76
 4688 0a08 20       		.uleb128 0x20
 4689 0a09 6E030000 		.4byte	.LASF104
 4690 0a0d 01       		.byte	0x1
 4691 0a0e 2508     		.2byte	0x825
 4692 0a10 79060000 		.4byte	0x679
 4693 0a14 09030000 		.4byte	.LLST77
 4694 0a18 21       		.uleb128 0x21
 4695 0a19 44080000 		.4byte	.LVL162
 4696 0a1d 230B0000 		.4byte	0xb23
 4697 0a21 00       		.byte	0
 4698 0a22 28       		.uleb128 0x28
 4699 0a23 01       		.byte	0x1
 4700 0a24 B4020000 		.4byte	.LASF127
 4701 0a28 01       		.byte	0x1
 4702 0a29 FD07     		.2byte	0x7fd
 4703 0a2b 01       		.byte	0x1
 4704 0a2c C7000000 		.4byte	0xc7
 4705 0a30 EA0C0000 		.4byte	.LFB92
 4706 0a34 EE0C0000 		.4byte	.LFE92
 4707 0a38 02       		.byte	0x2
 4708 0a39 7D       		.byte	0x7d
 4709 0a3a 00       		.sleb128 0
 4710 0a3b 01       		.byte	0x1
 4711 0a3c 510A0000 		.4byte	0xa51
 4712 0a40 1F       		.uleb128 0x1f
 4713 0a41 6E030000 		.4byte	.LASF104
 4714 0a45 01       		.byte	0x1
 4715 0a46 FD07     		.2byte	0x7fd
 4716 0a48 79060000 		.4byte	0x679
 4717 0a4c 33030000 		.4byte	.LLST123
 4718 0a50 00       		.byte	0
 4719 0a51 28       		.uleb128 0x28
 4720 0a52 01       		.byte	0x1
 4721 0a53 79010000 		.4byte	.LASF128
 4722 0a57 01       		.byte	0x1
 4723 0a58 F207     		.2byte	0x7f2
 4724 0a5a 01       		.byte	0x1
 4725 0a5b 1E050000 		.4byte	0x51e
 4726 0a5f E40C0000 		.4byte	.LFB91
 4727 0a63 EA0C0000 		.4byte	.LFE91
 4728 0a67 02       		.byte	0x2
 4729 0a68 7D       		.byte	0x7d
 4730 0a69 00       		.sleb128 0
 4731 0a6a 01       		.byte	0x1
 4732 0a6b 800A0000 		.4byte	0xa80
 4733 0a6f 1F       		.uleb128 0x1f
 4734 0a70 6E030000 		.4byte	.LASF104
 4735 0a74 01       		.byte	0x1
 4736 0a75 F207     		.2byte	0x7f2
 4737 0a77 79060000 		.4byte	0x679
 4738 0a7b 54030000 		.4byte	.LLST122
 4739 0a7f 00       		.byte	0
 4740 0a80 29       		.uleb128 0x29
 4741 0a81 01       		.byte	0x1
 4742 0a82 71060000 		.4byte	.LASF171
ARM GAS  /tmp/ccpGcYbE.s 			page 146


 4743 0a86 01       		.byte	0x1
 4744 0a87 CB07     		.2byte	0x7cb
 4745 0a89 01       		.byte	0x1
 4746 0a8a 01       		.byte	0x1
 4747 0a8b 9C0A0000 		.4byte	0xa9c
 4748 0a8f 1A       		.uleb128 0x1a
 4749 0a90 6E030000 		.4byte	.LASF104
 4750 0a94 01       		.byte	0x1
 4751 0a95 CB07     		.2byte	0x7cb
 4752 0a97 79060000 		.4byte	0x679
 4753 0a9b 00       		.byte	0
 4754 0a9c 2A       		.uleb128 0x2a
 4755 0a9d 01       		.byte	0x1
 4756 0a9e D8000000 		.4byte	.LASF129
 4757 0aa2 01       		.byte	0x1
 4758 0aa3 BD07     		.2byte	0x7bd
 4759 0aa5 01       		.byte	0x1
 4760 0aa6 B70A0000 		.4byte	0xab7
 4761 0aaa 1A       		.uleb128 0x1a
 4762 0aab 6E030000 		.4byte	.LASF104
 4763 0aaf 01       		.byte	0x1
 4764 0ab0 BD07     		.2byte	0x7bd
 4765 0ab2 79060000 		.4byte	0x679
 4766 0ab6 00       		.byte	0
 4767 0ab7 2A       		.uleb128 0x2a
 4768 0ab8 01       		.byte	0x1
 4769 0ab9 A5060000 		.4byte	.LASF130
 4770 0abd 01       		.byte	0x1
 4771 0abe AE07     		.2byte	0x7ae
 4772 0ac0 01       		.byte	0x1
 4773 0ac1 D20A0000 		.4byte	0xad2
 4774 0ac5 1A       		.uleb128 0x1a
 4775 0ac6 6E030000 		.4byte	.LASF104
 4776 0aca 01       		.byte	0x1
 4777 0acb AE07     		.2byte	0x7ae
 4778 0acd 79060000 		.4byte	0x679
 4779 0ad1 00       		.byte	0
 4780 0ad2 2A       		.uleb128 0x2a
 4781 0ad3 01       		.byte	0x1
 4782 0ad4 39090000 		.4byte	.LASF131
 4783 0ad8 01       		.byte	0x1
 4784 0ad9 9F07     		.2byte	0x79f
 4785 0adb 01       		.byte	0x1
 4786 0adc ED0A0000 		.4byte	0xaed
 4787 0ae0 1A       		.uleb128 0x1a
 4788 0ae1 6E030000 		.4byte	.LASF104
 4789 0ae5 01       		.byte	0x1
 4790 0ae6 9F07     		.2byte	0x79f
 4791 0ae8 79060000 		.4byte	0x679
 4792 0aec 00       		.byte	0
 4793 0aed 2A       		.uleb128 0x2a
 4794 0aee 01       		.byte	0x1
 4795 0aef F6040000 		.4byte	.LASF132
 4796 0af3 01       		.byte	0x1
 4797 0af4 9007     		.2byte	0x790
 4798 0af6 01       		.byte	0x1
 4799 0af7 080B0000 		.4byte	0xb08
ARM GAS  /tmp/ccpGcYbE.s 			page 147


 4800 0afb 1A       		.uleb128 0x1a
 4801 0afc 6E030000 		.4byte	.LASF104
 4802 0b00 01       		.byte	0x1
 4803 0b01 9007     		.2byte	0x790
 4804 0b03 79060000 		.4byte	0x679
 4805 0b07 00       		.byte	0
 4806 0b08 2A       		.uleb128 0x2a
 4807 0b09 01       		.byte	0x1
 4808 0b0a 96000000 		.4byte	.LASF133
 4809 0b0e 01       		.byte	0x1
 4810 0b0f 8107     		.2byte	0x781
 4811 0b11 01       		.byte	0x1
 4812 0b12 230B0000 		.4byte	0xb23
 4813 0b16 1A       		.uleb128 0x1a
 4814 0b17 6E030000 		.4byte	.LASF104
 4815 0b1b 01       		.byte	0x1
 4816 0b1c 8107     		.2byte	0x781
 4817 0b1e 79060000 		.4byte	0x679
 4818 0b22 00       		.byte	0
 4819 0b23 2A       		.uleb128 0x2a
 4820 0b24 01       		.byte	0x1
 4821 0b25 D2010000 		.4byte	.LASF134
 4822 0b29 01       		.byte	0x1
 4823 0b2a 7207     		.2byte	0x772
 4824 0b2c 01       		.byte	0x1
 4825 0b2d 3E0B0000 		.4byte	0xb3e
 4826 0b31 1A       		.uleb128 0x1a
 4827 0b32 6E030000 		.4byte	.LASF104
 4828 0b36 01       		.byte	0x1
 4829 0b37 7207     		.2byte	0x772
 4830 0b39 79060000 		.4byte	0x679
 4831 0b3d 00       		.byte	0
 4832 0b3e 2B       		.uleb128 0x2b
 4833 0b3f 01       		.byte	0x1
 4834 0b40 F8080000 		.4byte	.LASF172
 4835 0b44 01       		.byte	0x1
 4836 0b45 D006     		.2byte	0x6d0
 4837 0b47 01       		.byte	0x1
 4838 0b48 7A0A0000 		.4byte	.LFB83
 4839 0b4c E80B0000 		.4byte	.LFE83
 4840 0b50 75030000 		.4byte	.LLST100
 4841 0b54 900C0000 		.4byte	0xc90
 4842 0b58 1F       		.uleb128 0x1f
 4843 0b59 6E030000 		.4byte	.LASF104
 4844 0b5d 01       		.byte	0x1
 4845 0b5e D006     		.2byte	0x6d0
 4846 0b60 79060000 		.4byte	0x679
 4847 0b64 DD030000 		.4byte	.LLST101
 4848 0b68 20       		.uleb128 0x20
 4849 0b69 A3050000 		.4byte	.LASF135
 4850 0b6d 01       		.byte	0x1
 4851 0b6e D206     		.2byte	0x6d2
 4852 0b70 C7000000 		.4byte	0xc7
 4853 0b74 CD040000 		.4byte	.LLST102
 4854 0b78 20       		.uleb128 0x20
 4855 0b79 34030000 		.4byte	.LASF136
 4856 0b7d 01       		.byte	0x1
ARM GAS  /tmp/ccpGcYbE.s 			page 148


 4857 0b7e D306     		.2byte	0x6d3
 4858 0b80 C7000000 		.4byte	0xc7
 4859 0b84 0C050000 		.4byte	.LLST103
 4860 0b88 20       		.uleb128 0x20
 4861 0b89 4B010000 		.4byte	.LASF137
 4862 0b8d 01       		.byte	0x1
 4863 0b8e D406     		.2byte	0x6d4
 4864 0b90 C7000000 		.4byte	0xc7
 4865 0b94 61050000 		.4byte	.LLST104
 4866 0b98 20       		.uleb128 0x20
 4867 0b99 8F040000 		.4byte	.LASF138
 4868 0b9d 01       		.byte	0x1
 4869 0b9e D506     		.2byte	0x6d5
 4870 0ba0 C7000000 		.4byte	0xc7
 4871 0ba4 7F050000 		.4byte	.LLST105
 4872 0ba8 20       		.uleb128 0x20
 4873 0ba9 41080000 		.4byte	.LASF122
 4874 0bad 01       		.byte	0x1
 4875 0bae D606     		.2byte	0x6d6
 4876 0bb0 C7000000 		.4byte	0xc7
 4877 0bb4 D2050000 		.4byte	.LLST106
 4878 0bb8 24       		.uleb128 0x24
 4879 0bb9 FA060000 		.4byte	0x6fa
 4880 0bbd 700B0000 		.4byte	.LBB42
 4881 0bc1 BC0B0000 		.4byte	.LBE42
 4882 0bc5 01       		.byte	0x1
 4883 0bc6 5B07     		.2byte	0x75b
 4884 0bc8 E90B0000 		.4byte	0xbe9
 4885 0bcc 25       		.uleb128 0x25
 4886 0bcd 0C070000 		.4byte	0x70c
 4887 0bd1 37060000 		.4byte	.LLST107
 4888 0bd5 2C       		.uleb128 0x2c
 4889 0bd6 700B0000 		.4byte	.LBB43
 4890 0bda BC0B0000 		.4byte	.LBE43
 4891 0bde 2D       		.uleb128 0x2d
 4892 0bdf 18070000 		.4byte	0x718
 4893 0be3 4A060000 		.4byte	.LLST108
 4894 0be7 00       		.byte	0
 4895 0be8 00       		.byte	0
 4896 0be9 24       		.uleb128 0x24
 4897 0bea DB060000 		.4byte	0x6db
 4898 0bee C40B0000 		.4byte	.LBB44
 4899 0bf2 E80B0000 		.4byte	.LBE44
 4900 0bf6 01       		.byte	0x1
 4901 0bf7 6707     		.2byte	0x767
 4902 0bf9 170C0000 		.4byte	0xc17
 4903 0bfd 25       		.uleb128 0x25
 4904 0bfe ED060000 		.4byte	0x6ed
 4905 0c02 80060000 		.4byte	.LLST109
 4906 0c06 2E       		.uleb128 0x2e
 4907 0c07 E00B0000 		.4byte	.LVL255
 4908 0c0b 230B0000 		.4byte	0xb23
 4909 0c0f 27       		.uleb128 0x27
 4910 0c10 01       		.byte	0x1
 4911 0c11 50       		.byte	0x50
 4912 0c12 02       		.byte	0x2
 4913 0c13 74       		.byte	0x74
ARM GAS  /tmp/ccpGcYbE.s 			page 149


 4914 0c14 00       		.sleb128 0
 4915 0c15 00       		.byte	0
 4916 0c16 00       		.byte	0
 4917 0c17 2F       		.uleb128 0x2f
 4918 0c18 A00A0000 		.4byte	.LVL218
 4919 0c1c 01       		.byte	0x1
 4920 0c1d B0060000 		.4byte	0x6b0
 4921 0c21 2D0C0000 		.4byte	0xc2d
 4922 0c25 27       		.uleb128 0x27
 4923 0c26 01       		.byte	0x1
 4924 0c27 50       		.byte	0x50
 4925 0c28 03       		.byte	0x3
 4926 0c29 F3       		.byte	0xf3
 4927 0c2a 01       		.uleb128 0x1
 4928 0c2b 50       		.byte	0x50
 4929 0c2c 00       		.byte	0
 4930 0c2d 2F       		.uleb128 0x2f
 4931 0c2e A80A0000 		.4byte	.LVL221
 4932 0c32 01       		.byte	0x1
 4933 0c33 7F060000 		.4byte	0x67f
 4934 0c37 430C0000 		.4byte	0xc43
 4935 0c3b 27       		.uleb128 0x27
 4936 0c3c 01       		.byte	0x1
 4937 0c3d 50       		.byte	0x50
 4938 0c3e 03       		.byte	0x3
 4939 0c3f F3       		.byte	0xf3
 4940 0c40 01       		.uleb128 0x1
 4941 0c41 50       		.byte	0x50
 4942 0c42 00       		.byte	0
 4943 0c43 26       		.uleb128 0x26
 4944 0c44 0A0B0000 		.4byte	.LVL225
 4945 0c48 B0060000 		.4byte	0x6b0
 4946 0c4c 570C0000 		.4byte	0xc57
 4947 0c50 27       		.uleb128 0x27
 4948 0c51 01       		.byte	0x1
 4949 0c52 50       		.byte	0x50
 4950 0c53 02       		.byte	0x2
 4951 0c54 74       		.byte	0x74
 4952 0c55 00       		.sleb128 0
 4953 0c56 00       		.byte	0
 4954 0c57 21       		.uleb128 0x21
 4955 0c58 200B0000 		.4byte	.LVL230
 4956 0c5c F1070000 		.4byte	0x7f1
 4957 0c60 21       		.uleb128 0x21
 4958 0c61 3C0B0000 		.4byte	.LVL232
 4959 0c65 2B160000 		.4byte	0x162b
 4960 0c69 21       		.uleb128 0x21
 4961 0c6a 4E0B0000 		.4byte	.LVL235
 4962 0c6e 7F060000 		.4byte	0x67f
 4963 0c72 26       		.uleb128 0x26
 4964 0c73 560B0000 		.4byte	.LVL237
 4965 0c77 9C0A0000 		.4byte	0xa9c
 4966 0c7b 860C0000 		.4byte	0xc86
 4967 0c7f 27       		.uleb128 0x27
 4968 0c80 01       		.byte	0x1
 4969 0c81 50       		.byte	0x50
 4970 0c82 02       		.byte	0x2
ARM GAS  /tmp/ccpGcYbE.s 			page 150


 4971 0c83 74       		.byte	0x74
 4972 0c84 00       		.sleb128 0
 4973 0c85 00       		.byte	0
 4974 0c86 21       		.uleb128 0x21
 4975 0c87 5C0B0000 		.4byte	.LVL239
 4976 0c8b 9C0A0000 		.4byte	0xa9c
 4977 0c8f 00       		.byte	0
 4978 0c90 30       		.uleb128 0x30
 4979 0c91 01       		.byte	0x1
 4980 0c92 B5040000 		.4byte	.LASF139
 4981 0c96 01       		.byte	0x1
 4982 0c97 5906     		.2byte	0x659
 4983 0c99 01       		.byte	0x1
 4984 0c9a 90020000 		.4byte	0x290
 4985 0c9e FA0B0000 		.4byte	.LFB82
 4986 0ca2 9C0C0000 		.4byte	.LFE82
 4987 0ca6 93060000 		.4byte	.LLST113
 4988 0caa 01       		.byte	0x1
 4989 0cab F60C0000 		.4byte	0xcf6
 4990 0caf 1F       		.uleb128 0x1f
 4991 0cb0 6E030000 		.4byte	.LASF104
 4992 0cb4 01       		.byte	0x1
 4993 0cb5 5906     		.2byte	0x659
 4994 0cb7 79060000 		.4byte	0x679
 4995 0cbb B3060000 		.4byte	.LLST114
 4996 0cbf 20       		.uleb128 0x20
 4997 0cc0 72020000 		.4byte	.LASF140
 4998 0cc4 01       		.byte	0x1
 4999 0cc5 5B06     		.2byte	0x65b
 5000 0cc7 C7000000 		.4byte	0xc7
 5001 0ccb DF060000 		.4byte	.LLST115
 5002 0ccf 21       		.uleb128 0x21
 5003 0cd0 500C0000 		.4byte	.LVL264
 5004 0cd4 2B160000 		.4byte	0x162b
 5005 0cd8 26       		.uleb128 0x26
 5006 0cd9 6C0C0000 		.4byte	.LVL266
 5007 0cdd 800A0000 		.4byte	0xa80
 5008 0ce1 EC0C0000 		.4byte	0xcec
 5009 0ce5 27       		.uleb128 0x27
 5010 0ce6 01       		.byte	0x1
 5011 0ce7 50       		.byte	0x50
 5012 0ce8 02       		.byte	0x2
 5013 0ce9 74       		.byte	0x74
 5014 0cea 00       		.sleb128 0
 5015 0ceb 00       		.byte	0
 5016 0cec 21       		.uleb128 0x21
 5017 0ced 7E0C0000 		.4byte	.LVL268
 5018 0cf1 2B160000 		.4byte	0x162b
 5019 0cf5 00       		.byte	0
 5020 0cf6 30       		.uleb128 0x30
 5021 0cf7 01       		.byte	0x1
 5022 0cf8 E0030000 		.4byte	.LASF141
 5023 0cfc 01       		.byte	0x1
 5024 0cfd 1706     		.2byte	0x617
 5025 0cff 01       		.byte	0x1
 5026 0d00 90020000 		.4byte	0x290
 5027 0d04 AC070000 		.4byte	.LFB81
ARM GAS  /tmp/ccpGcYbE.s 			page 151


 5028 0d08 08080000 		.4byte	.LFE81
 5029 0d0c 15070000 		.4byte	.LLST73
 5030 0d10 01       		.byte	0x1
 5031 0d11 380D0000 		.4byte	0xd38
 5032 0d15 1F       		.uleb128 0x1f
 5033 0d16 6E030000 		.4byte	.LASF104
 5034 0d1a 01       		.byte	0x1
 5035 0d1b 1706     		.2byte	0x617
 5036 0d1d 79060000 		.4byte	0x679
 5037 0d21 35070000 		.4byte	.LLST74
 5038 0d25 21       		.uleb128 0x21
 5039 0d26 DC070000 		.4byte	.LVL155
 5040 0d2a 39160000 		.4byte	0x1639
 5041 0d2e 21       		.uleb128 0x21
 5042 0d2f F8070000 		.4byte	.LVL156
 5043 0d33 39160000 		.4byte	0x1639
 5044 0d37 00       		.byte	0
 5045 0d38 30       		.uleb128 0x30
 5046 0d39 01       		.byte	0x1
 5047 0d3a A4090000 		.4byte	.LASF142
 5048 0d3e 01       		.byte	0x1
 5049 0d3f DE05     		.2byte	0x5de
 5050 0d41 01       		.byte	0x1
 5051 0d42 90020000 		.4byte	0x290
 5052 0d46 4C070000 		.4byte	.LFB80
 5053 0d4a AC070000 		.4byte	.LFE80
 5054 0d4e 53070000 		.4byte	.LLST69
 5055 0d52 01       		.byte	0x1
 5056 0d53 BC0D0000 		.4byte	0xdbc
 5057 0d57 1F       		.uleb128 0x1f
 5058 0d58 6E030000 		.4byte	.LASF104
 5059 0d5c 01       		.byte	0x1
 5060 0d5d DE05     		.2byte	0x5de
 5061 0d5f 79060000 		.4byte	0x679
 5062 0d63 73070000 		.4byte	.LLST70
 5063 0d67 20       		.uleb128 0x20
 5064 0d68 41080000 		.4byte	.LASF122
 5065 0d6c 01       		.byte	0x1
 5066 0d6d E005     		.2byte	0x5e0
 5067 0d6f C7000000 		.4byte	0xc7
 5068 0d73 91070000 		.4byte	.LLST71
 5069 0d77 24       		.uleb128 0x24
 5070 0d78 19080000 		.4byte	0x819
 5071 0d7c 60070000 		.4byte	.LBB20
 5072 0d80 6E070000 		.4byte	.LBE20
 5073 0d84 01       		.byte	0x1
 5074 0d85 EB05     		.2byte	0x5eb
 5075 0d87 950D0000 		.4byte	0xd95
 5076 0d8b 25       		.uleb128 0x25
 5077 0d8c 27080000 		.4byte	0x827
 5078 0d90 CF070000 		.4byte	.LLST72
 5079 0d94 00       		.byte	0
 5080 0d95 21       		.uleb128 0x21
 5081 0d96 76070000 		.4byte	.LVL148
 5082 0d9a 39160000 		.4byte	0x1639
 5083 0d9e 26       		.uleb128 0x26
 5084 0d9f 96070000 		.4byte	.LVL151
ARM GAS  /tmp/ccpGcYbE.s 			page 152


 5085 0da3 F1070000 		.4byte	0x7f1
 5086 0da7 B20D0000 		.4byte	0xdb2
 5087 0dab 27       		.uleb128 0x27
 5088 0dac 01       		.byte	0x1
 5089 0dad 50       		.byte	0x50
 5090 0dae 02       		.byte	0x2
 5091 0daf 70       		.byte	0x70
 5092 0db0 00       		.sleb128 0
 5093 0db1 00       		.byte	0
 5094 0db2 21       		.uleb128 0x21
 5095 0db3 9E070000 		.4byte	.LVL152
 5096 0db7 39160000 		.4byte	0x1639
 5097 0dbb 00       		.byte	0
 5098 0dbc 28       		.uleb128 0x28
 5099 0dbd 01       		.byte	0x1
 5100 0dbe 13070000 		.4byte	.LASF143
 5101 0dc2 01       		.byte	0x1
 5102 0dc3 CA05     		.2byte	0x5ca
 5103 0dc5 01       		.byte	0x1
 5104 0dc6 90020000 		.4byte	0x290
 5105 0dca 2C070000 		.4byte	.LFB79
 5106 0dce 4C070000 		.4byte	.LFE79
 5107 0dd2 02       		.byte	0x2
 5108 0dd3 7D       		.byte	0x7d
 5109 0dd4 00       		.sleb128 0
 5110 0dd5 01       		.byte	0x1
 5111 0dd6 EB0D0000 		.4byte	0xdeb
 5112 0dda 1F       		.uleb128 0x1f
 5113 0ddb 6E030000 		.4byte	.LASF104
 5114 0ddf 01       		.byte	0x1
 5115 0de0 CA05     		.2byte	0x5ca
 5116 0de2 79060000 		.4byte	0x679
 5117 0de6 E2070000 		.4byte	.LLST68
 5118 0dea 00       		.byte	0
 5119 0deb 28       		.uleb128 0x28
 5120 0dec 01       		.byte	0x1
 5121 0ded 56090000 		.4byte	.LASF144
 5122 0df1 01       		.byte	0x1
 5123 0df2 B605     		.2byte	0x5b6
 5124 0df4 01       		.byte	0x1
 5125 0df5 90020000 		.4byte	0x290
 5126 0df9 0C070000 		.4byte	.LFB78
 5127 0dfd 2C070000 		.4byte	.LFE78
 5128 0e01 02       		.byte	0x2
 5129 0e02 7D       		.byte	0x7d
 5130 0e03 00       		.sleb128 0
 5131 0e04 01       		.byte	0x1
 5132 0e05 1A0E0000 		.4byte	0xe1a
 5133 0e09 1F       		.uleb128 0x1f
 5134 0e0a 6E030000 		.4byte	.LASF104
 5135 0e0e 01       		.byte	0x1
 5136 0e0f B605     		.2byte	0x5b6
 5137 0e11 79060000 		.4byte	0x679
 5138 0e15 03080000 		.4byte	.LLST67
 5139 0e19 00       		.byte	0
 5140 0e1a 30       		.uleb128 0x30
 5141 0e1b 01       		.byte	0x1
ARM GAS  /tmp/ccpGcYbE.s 			page 153


 5142 0e1c 69090000 		.4byte	.LASF145
 5143 0e20 01       		.byte	0x1
 5144 0e21 5F05     		.2byte	0x55f
 5145 0e23 01       		.byte	0x1
 5146 0e24 90020000 		.4byte	0x290
 5147 0e28 38060000 		.4byte	.LFB77
 5148 0e2c 0C070000 		.4byte	.LFE77
 5149 0e30 24080000 		.4byte	.LLST61
 5150 0e34 01       		.byte	0x1
 5151 0e35 D40E0000 		.4byte	0xed4
 5152 0e39 1F       		.uleb128 0x1f
 5153 0e3a 6E030000 		.4byte	.LASF104
 5154 0e3e 01       		.byte	0x1
 5155 0e3f 5F05     		.2byte	0x55f
 5156 0e41 79060000 		.4byte	0x679
 5157 0e45 5C080000 		.4byte	.LLST62
 5158 0e49 1F       		.uleb128 0x1f
 5159 0e4a 1F060000 		.4byte	.LASF146
 5160 0e4e 01       		.byte	0x1
 5161 0e4f 5F05     		.2byte	0x55f
 5162 0e51 51040000 		.4byte	0x451
 5163 0e55 7A080000 		.4byte	.LLST63
 5164 0e59 1F       		.uleb128 0x1f
 5165 0e5a 2C030000 		.4byte	.LASF147
 5166 0e5e 01       		.byte	0x1
 5167 0e5f 5F05     		.2byte	0x55f
 5168 0e61 51040000 		.4byte	0x451
 5169 0e65 A3080000 		.4byte	.LLST64
 5170 0e69 1F       		.uleb128 0x1f
 5171 0e6a F0060000 		.4byte	.LASF148
 5172 0e6e 01       		.byte	0x1
 5173 0e6f 5F05     		.2byte	0x55f
 5174 0e71 A7000000 		.4byte	0xa7
 5175 0e75 CF080000 		.4byte	.LLST65
 5176 0e79 31       		.uleb128 0x31
 5177 0e7a 746D7000 		.ascii	"tmp\000"
 5178 0e7e 01       		.byte	0x1
 5179 0e7f 6105     		.2byte	0x561
 5180 0e81 D40E0000 		.4byte	0xed4
 5181 0e85 FB080000 		.4byte	.LLST66
 5182 0e89 32       		.uleb128 0x32
 5183 0e8a 38000000 		.4byte	.Ldebug_ranges0+0x38
 5184 0e8e A20E0000 		.4byte	0xea2
 5185 0e92 33       		.uleb128 0x33
 5186 0e93 4C020000 		.4byte	.LASF102
 5187 0e97 01       		.byte	0x1
 5188 0e98 9505     		.2byte	0x595
 5189 0e9a D2000000 		.4byte	0xd2
 5190 0e9e 02       		.byte	0x2
 5191 0e9f 91       		.byte	0x91
 5192 0ea0 64       		.sleb128 -28
 5193 0ea1 00       		.byte	0
 5194 0ea2 26       		.uleb128 0x26
 5195 0ea3 A6060000 		.4byte	.LVL134
 5196 0ea7 47160000 		.4byte	0x1647
 5197 0eab BD0E0000 		.4byte	0xebd
 5198 0eaf 27       		.uleb128 0x27
ARM GAS  /tmp/ccpGcYbE.s 			page 154


 5199 0eb0 01       		.byte	0x1
 5200 0eb1 52       		.byte	0x52
 5201 0eb2 03       		.byte	0x3
 5202 0eb3 F3       		.byte	0xf3
 5203 0eb4 01       		.uleb128 0x1
 5204 0eb5 52       		.byte	0x52
 5205 0eb6 27       		.uleb128 0x27
 5206 0eb7 01       		.byte	0x1
 5207 0eb8 53       		.byte	0x53
 5208 0eb9 02       		.byte	0x2
 5209 0eba 76       		.byte	0x76
 5210 0ebb 00       		.sleb128 0
 5211 0ebc 00       		.byte	0
 5212 0ebd 2E       		.uleb128 0x2e
 5213 0ebe B4060000 		.4byte	.LVL135
 5214 0ec2 47160000 		.4byte	0x1647
 5215 0ec6 27       		.uleb128 0x27
 5216 0ec7 01       		.byte	0x1
 5217 0ec8 51       		.byte	0x51
 5218 0ec9 02       		.byte	0x2
 5219 0eca 77       		.byte	0x77
 5220 0ecb 00       		.sleb128 0
 5221 0ecc 27       		.uleb128 0x27
 5222 0ecd 01       		.byte	0x1
 5223 0ece 53       		.byte	0x53
 5224 0ecf 02       		.byte	0x2
 5225 0ed0 76       		.byte	0x76
 5226 0ed1 00       		.sleb128 0
 5227 0ed2 00       		.byte	0
 5228 0ed3 00       		.byte	0
 5229 0ed4 15       		.uleb128 0x15
 5230 0ed5 04       		.byte	0x4
 5231 0ed6 C7000000 		.4byte	0xc7
 5232 0eda 30       		.uleb128 0x30
 5233 0edb 01       		.byte	0x1
 5234 0edc 9F0A0000 		.4byte	.LASF149
 5235 0ee0 01       		.byte	0x1
 5236 0ee1 0005     		.2byte	0x500
 5237 0ee3 01       		.byte	0x1
 5238 0ee4 90020000 		.4byte	0x290
 5239 0ee8 84050000 		.4byte	.LFB76
 5240 0eec 38060000 		.4byte	.LFE76
 5241 0ef0 23090000 		.4byte	.LLST56
 5242 0ef4 01       		.byte	0x1
 5243 0ef5 830F0000 		.4byte	0xf83
 5244 0ef9 1F       		.uleb128 0x1f
 5245 0efa 6E030000 		.4byte	.LASF104
 5246 0efe 01       		.byte	0x1
 5247 0eff 0005     		.2byte	0x500
 5248 0f01 79060000 		.4byte	0x679
 5249 0f05 5B090000 		.4byte	.LLST57
 5250 0f09 1F       		.uleb128 0x1f
 5251 0f0a 2C030000 		.4byte	.LASF147
 5252 0f0e 01       		.byte	0x1
 5253 0f0f 0005     		.2byte	0x500
 5254 0f11 51040000 		.4byte	0x451
 5255 0f15 79090000 		.4byte	.LLST58
ARM GAS  /tmp/ccpGcYbE.s 			page 155


 5256 0f19 1F       		.uleb128 0x1f
 5257 0f1a F0060000 		.4byte	.LASF148
 5258 0f1e 01       		.byte	0x1
 5259 0f1f 0005     		.2byte	0x500
 5260 0f21 A7000000 		.4byte	0xa7
 5261 0f25 A2090000 		.4byte	.LLST59
 5262 0f29 31       		.uleb128 0x31
 5263 0f2a 746D7000 		.ascii	"tmp\000"
 5264 0f2e 01       		.byte	0x1
 5265 0f2f 0205     		.2byte	0x502
 5266 0f31 D40E0000 		.4byte	0xed4
 5267 0f35 DA090000 		.4byte	.LLST60
 5268 0f39 32       		.uleb128 0x32
 5269 0f3a 20000000 		.4byte	.Ldebug_ranges0+0x20
 5270 0f3e 520F0000 		.4byte	0xf52
 5271 0f42 33       		.uleb128 0x33
 5272 0f43 4C020000 		.4byte	.LASF102
 5273 0f47 01       		.byte	0x1
 5274 0f48 3705     		.2byte	0x537
 5275 0f4a D2000000 		.4byte	0xd2
 5276 0f4e 02       		.byte	0x2
 5277 0f4f 91       		.byte	0x91
 5278 0f50 64       		.sleb128 -28
 5279 0f51 00       		.byte	0
 5280 0f52 26       		.uleb128 0x26
 5281 0f53 E2050000 		.4byte	.LVL126
 5282 0f57 47160000 		.4byte	0x1647
 5283 0f5b 6C0F0000 		.4byte	0xf6c
 5284 0f5f 27       		.uleb128 0x27
 5285 0f60 01       		.byte	0x1
 5286 0f61 52       		.byte	0x52
 5287 0f62 02       		.byte	0x2
 5288 0f63 76       		.byte	0x76
 5289 0f64 00       		.sleb128 0
 5290 0f65 27       		.uleb128 0x27
 5291 0f66 01       		.byte	0x1
 5292 0f67 53       		.byte	0x53
 5293 0f68 02       		.byte	0x2
 5294 0f69 77       		.byte	0x77
 5295 0f6a 00       		.sleb128 0
 5296 0f6b 00       		.byte	0
 5297 0f6c 2E       		.uleb128 0x2e
 5298 0f6d F0050000 		.4byte	.LVL127
 5299 0f71 47160000 		.4byte	0x1647
 5300 0f75 27       		.uleb128 0x27
 5301 0f76 01       		.byte	0x1
 5302 0f77 51       		.byte	0x51
 5303 0f78 02       		.byte	0x2
 5304 0f79 76       		.byte	0x76
 5305 0f7a 00       		.sleb128 0
 5306 0f7b 27       		.uleb128 0x27
 5307 0f7c 01       		.byte	0x1
 5308 0f7d 53       		.byte	0x53
 5309 0f7e 02       		.byte	0x2
 5310 0f7f 77       		.byte	0x77
 5311 0f80 00       		.sleb128 0
 5312 0f81 00       		.byte	0
ARM GAS  /tmp/ccpGcYbE.s 			page 156


 5313 0f82 00       		.byte	0
 5314 0f83 30       		.uleb128 0x30
 5315 0f84 01       		.byte	0x1
 5316 0f85 0F050000 		.4byte	.LASF150
 5317 0f89 01       		.byte	0x1
 5318 0f8a BD04     		.2byte	0x4bd
 5319 0f8c 01       		.byte	0x1
 5320 0f8d 90020000 		.4byte	0x290
 5321 0f91 12050000 		.4byte	.LFB75
 5322 0f95 84050000 		.4byte	.LFE75
 5323 0f99 F2090000 		.4byte	.LLST51
 5324 0f9d 01       		.byte	0x1
 5325 0f9e F40F0000 		.4byte	0xff4
 5326 0fa2 1F       		.uleb128 0x1f
 5327 0fa3 6E030000 		.4byte	.LASF104
 5328 0fa7 01       		.byte	0x1
 5329 0fa8 BD04     		.2byte	0x4bd
 5330 0faa 79060000 		.4byte	0x679
 5331 0fae 120A0000 		.4byte	.LLST52
 5332 0fb2 1F       		.uleb128 0x1f
 5333 0fb3 1F060000 		.4byte	.LASF146
 5334 0fb7 01       		.byte	0x1
 5335 0fb8 BD04     		.2byte	0x4bd
 5336 0fba 51040000 		.4byte	0x451
 5337 0fbe 3E0A0000 		.4byte	.LLST53
 5338 0fc2 1F       		.uleb128 0x1f
 5339 0fc3 F0060000 		.4byte	.LASF148
 5340 0fc7 01       		.byte	0x1
 5341 0fc8 BD04     		.2byte	0x4bd
 5342 0fca A7000000 		.4byte	0xa7
 5343 0fce 6A0A0000 		.4byte	.LLST54
 5344 0fd2 31       		.uleb128 0x31
 5345 0fd3 746D7000 		.ascii	"tmp\000"
 5346 0fd7 01       		.byte	0x1
 5347 0fd8 BF04     		.2byte	0x4bf
 5348 0fda D40E0000 		.4byte	0xed4
 5349 0fde 8B0A0000 		.4byte	.LLST55
 5350 0fe2 2E       		.uleb128 0x2e
 5351 0fe3 5A050000 		.4byte	.LVL118
 5352 0fe7 47160000 		.4byte	0x1647
 5353 0feb 27       		.uleb128 0x27
 5354 0fec 01       		.byte	0x1
 5355 0fed 51       		.byte	0x51
 5356 0fee 03       		.byte	0x3
 5357 0fef F3       		.byte	0xf3
 5358 0ff0 01       		.uleb128 0x1
 5359 0ff1 51       		.byte	0x51
 5360 0ff2 00       		.byte	0
 5361 0ff3 00       		.byte	0
 5362 0ff4 30       		.uleb128 0x30
 5363 0ff5 01       		.byte	0x1
 5364 0ff6 F9000000 		.4byte	.LASF151
 5365 0ffa 01       		.byte	0x1
 5366 0ffb 8604     		.2byte	0x486
 5367 0ffd 01       		.byte	0x1
 5368 0ffe 90020000 		.4byte	0x290
 5369 1002 B4040000 		.4byte	.LFB74
ARM GAS  /tmp/ccpGcYbE.s 			page 157


 5370 1006 12050000 		.4byte	.LFE74
 5371 100a A30A0000 		.4byte	.LLST47
 5372 100e 01       		.byte	0x1
 5373 100f 52100000 		.4byte	0x1052
 5374 1013 1F       		.uleb128 0x1f
 5375 1014 6E030000 		.4byte	.LASF104
 5376 1018 01       		.byte	0x1
 5377 1019 8604     		.2byte	0x486
 5378 101b 79060000 		.4byte	0x679
 5379 101f C30A0000 		.4byte	.LLST48
 5380 1023 1F       		.uleb128 0x1f
 5381 1024 1F060000 		.4byte	.LASF146
 5382 1028 01       		.byte	0x1
 5383 1029 8604     		.2byte	0x486
 5384 102b 51040000 		.4byte	0x451
 5385 102f E10A0000 		.4byte	.LLST49
 5386 1033 1F       		.uleb128 0x1f
 5387 1034 2C030000 		.4byte	.LASF147
 5388 1038 01       		.byte	0x1
 5389 1039 8604     		.2byte	0x486
 5390 103b 51040000 		.4byte	0x451
 5391 103f 0B0B0000 		.4byte	.LLST50
 5392 1043 23       		.uleb128 0x23
 5393 1044 F0060000 		.4byte	.LASF148
 5394 1048 01       		.byte	0x1
 5395 1049 8604     		.2byte	0x486
 5396 104b A7000000 		.4byte	0xa7
 5397 104f 01       		.byte	0x1
 5398 1050 53       		.byte	0x53
 5399 1051 00       		.byte	0
 5400 1052 30       		.uleb128 0x30
 5401 1053 01       		.byte	0x1
 5402 1054 75050000 		.4byte	.LASF152
 5403 1058 01       		.byte	0x1
 5404 1059 5404     		.2byte	0x454
 5405 105b 01       		.byte	0x1
 5406 105c 90020000 		.4byte	0x290
 5407 1060 68040000 		.4byte	.LFB73
 5408 1064 B4040000 		.4byte	.LFE73
 5409 1068 350B0000 		.4byte	.LLST43
 5410 106c 01       		.byte	0x1
 5411 106d A2100000 		.4byte	0x10a2
 5412 1071 1F       		.uleb128 0x1f
 5413 1072 6E030000 		.4byte	.LASF104
 5414 1076 01       		.byte	0x1
 5415 1077 5404     		.2byte	0x454
 5416 1079 79060000 		.4byte	0x679
 5417 107d 550B0000 		.4byte	.LLST44
 5418 1081 1F       		.uleb128 0x1f
 5419 1082 2C030000 		.4byte	.LASF147
 5420 1086 01       		.byte	0x1
 5421 1087 5404     		.2byte	0x454
 5422 1089 51040000 		.4byte	0x451
 5423 108d 730B0000 		.4byte	.LLST45
 5424 1091 1F       		.uleb128 0x1f
 5425 1092 F0060000 		.4byte	.LASF148
 5426 1096 01       		.byte	0x1
ARM GAS  /tmp/ccpGcYbE.s 			page 158


 5427 1097 5404     		.2byte	0x454
 5428 1099 A7000000 		.4byte	0xa7
 5429 109d 9D0B0000 		.4byte	.LLST46
 5430 10a1 00       		.byte	0
 5431 10a2 30       		.uleb128 0x30
 5432 10a3 01       		.byte	0x1
 5433 10a4 F0090000 		.4byte	.LASF153
 5434 10a8 01       		.byte	0x1
 5435 10a9 1F04     		.2byte	0x41f
 5436 10ab 01       		.byte	0x1
 5437 10ac 90020000 		.4byte	0x290
 5438 10b0 2A040000 		.4byte	.LFB72
 5439 10b4 68040000 		.4byte	.LFE72
 5440 10b8 D30B0000 		.4byte	.LLST39
 5441 10bc 01       		.byte	0x1
 5442 10bd F2100000 		.4byte	0x10f2
 5443 10c1 1F       		.uleb128 0x1f
 5444 10c2 6E030000 		.4byte	.LASF104
 5445 10c6 01       		.byte	0x1
 5446 10c7 1F04     		.2byte	0x41f
 5447 10c9 79060000 		.4byte	0x679
 5448 10cd F30B0000 		.4byte	.LLST40
 5449 10d1 1F       		.uleb128 0x1f
 5450 10d2 1F060000 		.4byte	.LASF146
 5451 10d6 01       		.byte	0x1
 5452 10d7 1F04     		.2byte	0x41f
 5453 10d9 51040000 		.4byte	0x451
 5454 10dd 110C0000 		.4byte	.LLST41
 5455 10e1 1F       		.uleb128 0x1f
 5456 10e2 F0060000 		.4byte	.LASF148
 5457 10e6 01       		.byte	0x1
 5458 10e7 1F04     		.2byte	0x41f
 5459 10e9 A7000000 		.4byte	0xa7
 5460 10ed 3B0C0000 		.4byte	.LLST42
 5461 10f1 00       		.byte	0
 5462 10f2 30       		.uleb128 0x30
 5463 10f3 01       		.byte	0x1
 5464 10f4 15000000 		.4byte	.LASF154
 5465 10f8 01       		.byte	0x1
 5466 10f9 AA03     		.2byte	0x3aa
 5467 10fb 01       		.byte	0x1
 5468 10fc 90020000 		.4byte	0x290
 5469 1100 1A030000 		.4byte	.LFB71
 5470 1104 2A040000 		.4byte	.LFE71
 5471 1108 710C0000 		.4byte	.LLST31
 5472 110c 01       		.byte	0x1
 5473 110d 05120000 		.4byte	0x1205
 5474 1111 1F       		.uleb128 0x1f
 5475 1112 6E030000 		.4byte	.LASF104
 5476 1116 01       		.byte	0x1
 5477 1117 AA03     		.2byte	0x3aa
 5478 1119 79060000 		.4byte	0x679
 5479 111d 910C0000 		.4byte	.LLST32
 5480 1121 1F       		.uleb128 0x1f
 5481 1122 1F060000 		.4byte	.LASF146
 5482 1126 01       		.byte	0x1
 5483 1127 AA03     		.2byte	0x3aa
ARM GAS  /tmp/ccpGcYbE.s 			page 159


 5484 1129 51040000 		.4byte	0x451
 5485 112d DB0C0000 		.4byte	.LLST33
 5486 1131 1F       		.uleb128 0x1f
 5487 1132 2C030000 		.4byte	.LASF147
 5488 1136 01       		.byte	0x1
 5489 1137 AA03     		.2byte	0x3aa
 5490 1139 51040000 		.4byte	0x451
 5491 113d 460D0000 		.4byte	.LLST34
 5492 1141 1F       		.uleb128 0x1f
 5493 1142 F0060000 		.4byte	.LASF148
 5494 1146 01       		.byte	0x1
 5495 1147 AA03     		.2byte	0x3aa
 5496 1149 A7000000 		.4byte	0xa7
 5497 114d 7A0D0000 		.4byte	.LLST35
 5498 1151 1F       		.uleb128 0x1f
 5499 1152 1A030000 		.4byte	.LASF120
 5500 1156 01       		.byte	0x1
 5501 1157 AA03     		.2byte	0x3aa
 5502 1159 C7000000 		.4byte	0xc7
 5503 115d 9B0D0000 		.4byte	.LLST36
 5504 1161 31       		.uleb128 0x31
 5505 1162 746D7000 		.ascii	"tmp\000"
 5506 1166 01       		.byte	0x1
 5507 1167 AC03     		.2byte	0x3ac
 5508 1169 AA060000 		.4byte	0x6aa
 5509 116d BB0D0000 		.4byte	.LLST37
 5510 1171 20       		.uleb128 0x20
 5511 1172 CA070000 		.4byte	.LASF155
 5512 1176 01       		.byte	0x1
 5513 1177 AD03     		.2byte	0x3ad
 5514 1179 C7000000 		.4byte	0xc7
 5515 117d FC0D0000 		.4byte	.LLST38
 5516 1181 21       		.uleb128 0x21
 5517 1182 56030000 		.4byte	.LVL74
 5518 1186 55160000 		.4byte	0x1655
 5519 118a 26       		.uleb128 0x26
 5520 118b A0030000 		.4byte	.LVL79
 5521 118f E1140000 		.4byte	0x14e1
 5522 1193 B1110000 		.4byte	0x11b1
 5523 1197 27       		.uleb128 0x27
 5524 1198 01       		.byte	0x1
 5525 1199 50       		.byte	0x50
 5526 119a 02       		.byte	0x2
 5527 119b 74       		.byte	0x74
 5528 119c 00       		.sleb128 0
 5529 119d 27       		.uleb128 0x27
 5530 119e 01       		.byte	0x1
 5531 119f 51       		.byte	0x51
 5532 11a0 02       		.byte	0x2
 5533 11a1 08       		.byte	0x8
 5534 11a2 80       		.byte	0x80
 5535 11a3 27       		.uleb128 0x27
 5536 11a4 01       		.byte	0x1
 5537 11a5 52       		.byte	0x52
 5538 11a6 02       		.byte	0x2
 5539 11a7 77       		.byte	0x77
 5540 11a8 00       		.sleb128 0
ARM GAS  /tmp/ccpGcYbE.s 			page 160


 5541 11a9 27       		.uleb128 0x27
 5542 11aa 01       		.byte	0x1
 5543 11ab 53       		.byte	0x53
 5544 11ac 03       		.byte	0x3
 5545 11ad 91       		.byte	0x91
 5546 11ae 00       		.sleb128 0
 5547 11af 06       		.byte	0x6
 5548 11b0 00       		.byte	0
 5549 11b1 26       		.uleb128 0x26
 5550 11b2 C6030000 		.4byte	.LVL83
 5551 11b6 E1140000 		.4byte	0x14e1
 5552 11ba D8110000 		.4byte	0x11d8
 5553 11be 27       		.uleb128 0x27
 5554 11bf 01       		.byte	0x1
 5555 11c0 50       		.byte	0x50
 5556 11c1 02       		.byte	0x2
 5557 11c2 74       		.byte	0x74
 5558 11c3 00       		.sleb128 0
 5559 11c4 27       		.uleb128 0x27
 5560 11c5 01       		.byte	0x1
 5561 11c6 51       		.byte	0x51
 5562 11c7 02       		.byte	0x2
 5563 11c8 08       		.byte	0x8
 5564 11c9 20       		.byte	0x20
 5565 11ca 27       		.uleb128 0x27
 5566 11cb 01       		.byte	0x1
 5567 11cc 52       		.byte	0x52
 5568 11cd 02       		.byte	0x2
 5569 11ce 77       		.byte	0x77
 5570 11cf 00       		.sleb128 0
 5571 11d0 27       		.uleb128 0x27
 5572 11d1 01       		.byte	0x1
 5573 11d2 53       		.byte	0x53
 5574 11d3 03       		.byte	0x3
 5575 11d4 91       		.byte	0x91
 5576 11d5 00       		.sleb128 0
 5577 11d6 06       		.byte	0x6
 5578 11d7 00       		.byte	0
 5579 11d8 21       		.uleb128 0x21
 5580 11d9 F0030000 		.4byte	.LVL91
 5581 11dd E1140000 		.4byte	0x14e1
 5582 11e1 2E       		.uleb128 0x2e
 5583 11e2 0A040000 		.4byte	.LVL93
 5584 11e6 E1140000 		.4byte	0x14e1
 5585 11ea 27       		.uleb128 0x27
 5586 11eb 01       		.byte	0x1
 5587 11ec 50       		.byte	0x50
 5588 11ed 02       		.byte	0x2
 5589 11ee 74       		.byte	0x74
 5590 11ef 00       		.sleb128 0
 5591 11f0 27       		.uleb128 0x27
 5592 11f1 01       		.byte	0x1
 5593 11f2 51       		.byte	0x51
 5594 11f3 02       		.byte	0x2
 5595 11f4 08       		.byte	0x8
 5596 11f5 20       		.byte	0x20
 5597 11f6 27       		.uleb128 0x27
ARM GAS  /tmp/ccpGcYbE.s 			page 161


 5598 11f7 01       		.byte	0x1
 5599 11f8 52       		.byte	0x52
 5600 11f9 02       		.byte	0x2
 5601 11fa 77       		.byte	0x77
 5602 11fb 00       		.sleb128 0
 5603 11fc 27       		.uleb128 0x27
 5604 11fd 01       		.byte	0x1
 5605 11fe 53       		.byte	0x53
 5606 11ff 03       		.byte	0x3
 5607 1200 91       		.byte	0x91
 5608 1201 00       		.sleb128 0
 5609 1202 06       		.byte	0x6
 5610 1203 00       		.byte	0
 5611 1204 00       		.byte	0
 5612 1205 30       		.uleb128 0x30
 5613 1206 01       		.byte	0x1
 5614 1207 43000000 		.4byte	.LASF156
 5615 120b 01       		.byte	0x1
 5616 120c 3D03     		.2byte	0x33d
 5617 120e 01       		.byte	0x1
 5618 120f 90020000 		.4byte	0x290
 5619 1213 30020000 		.4byte	.LFB70
 5620 1217 1A030000 		.4byte	.LFE70
 5621 121b 5E0E0000 		.4byte	.LLST24
 5622 121f 01       		.byte	0x1
 5623 1220 05130000 		.4byte	0x1305
 5624 1224 1F       		.uleb128 0x1f
 5625 1225 6E030000 		.4byte	.LASF104
 5626 1229 01       		.byte	0x1
 5627 122a 3D03     		.2byte	0x33d
 5628 122c 79060000 		.4byte	0x679
 5629 1230 7E0E0000 		.4byte	.LLST25
 5630 1234 1F       		.uleb128 0x1f
 5631 1235 2C030000 		.4byte	.LASF147
 5632 1239 01       		.byte	0x1
 5633 123a 3D03     		.2byte	0x33d
 5634 123c 51040000 		.4byte	0x451
 5635 1240 C80E0000 		.4byte	.LLST26
 5636 1244 1F       		.uleb128 0x1f
 5637 1245 F0060000 		.4byte	.LASF148
 5638 1249 01       		.byte	0x1
 5639 124a 3D03     		.2byte	0x33d
 5640 124c A7000000 		.4byte	0xa7
 5641 1250 FC0E0000 		.4byte	.LLST27
 5642 1254 1F       		.uleb128 0x1f
 5643 1255 1A030000 		.4byte	.LASF120
 5644 1259 01       		.byte	0x1
 5645 125a 3D03     		.2byte	0x33d
 5646 125c C7000000 		.4byte	0xc7
 5647 1260 280F0000 		.4byte	.LLST28
 5648 1264 31       		.uleb128 0x31
 5649 1265 746D7000 		.ascii	"tmp\000"
 5650 1269 01       		.byte	0x1
 5651 126a 3F03     		.2byte	0x33f
 5652 126c AA060000 		.4byte	0x6aa
 5653 1270 720F0000 		.4byte	.LLST29
 5654 1274 20       		.uleb128 0x20
ARM GAS  /tmp/ccpGcYbE.s 			page 162


 5655 1275 CA070000 		.4byte	.LASF155
 5656 1279 01       		.byte	0x1
 5657 127a 4003     		.2byte	0x340
 5658 127c C7000000 		.4byte	0xc7
 5659 1280 AA0F0000 		.4byte	.LLST30
 5660 1284 21       		.uleb128 0x21
 5661 1285 68020000 		.4byte	.LVL53
 5662 1289 55160000 		.4byte	0x1655
 5663 128d 26       		.uleb128 0x26
 5664 128e A6020000 		.4byte	.LVL58
 5665 1292 E1140000 		.4byte	0x14e1
 5666 1296 B3120000 		.4byte	0x12b3
 5667 129a 27       		.uleb128 0x27
 5668 129b 01       		.byte	0x1
 5669 129c 50       		.byte	0x50
 5670 129d 02       		.byte	0x2
 5671 129e 74       		.byte	0x74
 5672 129f 00       		.sleb128 0
 5673 12a0 27       		.uleb128 0x27
 5674 12a1 01       		.byte	0x1
 5675 12a2 51       		.byte	0x51
 5676 12a3 02       		.byte	0x2
 5677 12a4 08       		.byte	0x8
 5678 12a5 80       		.byte	0x80
 5679 12a6 27       		.uleb128 0x27
 5680 12a7 01       		.byte	0x1
 5681 12a8 52       		.byte	0x52
 5682 12a9 02       		.byte	0x2
 5683 12aa 77       		.byte	0x77
 5684 12ab 00       		.sleb128 0
 5685 12ac 27       		.uleb128 0x27
 5686 12ad 01       		.byte	0x1
 5687 12ae 53       		.byte	0x53
 5688 12af 02       		.byte	0x2
 5689 12b0 76       		.byte	0x76
 5690 12b1 00       		.sleb128 0
 5691 12b2 00       		.byte	0
 5692 12b3 26       		.uleb128 0x26
 5693 12b4 C2020000 		.4byte	.LVL60
 5694 12b8 E1140000 		.4byte	0x14e1
 5695 12bc D9120000 		.4byte	0x12d9
 5696 12c0 27       		.uleb128 0x27
 5697 12c1 01       		.byte	0x1
 5698 12c2 50       		.byte	0x50
 5699 12c3 02       		.byte	0x2
 5700 12c4 74       		.byte	0x74
 5701 12c5 00       		.sleb128 0
 5702 12c6 27       		.uleb128 0x27
 5703 12c7 01       		.byte	0x1
 5704 12c8 51       		.byte	0x51
 5705 12c9 02       		.byte	0x2
 5706 12ca 08       		.byte	0x8
 5707 12cb 20       		.byte	0x20
 5708 12cc 27       		.uleb128 0x27
 5709 12cd 01       		.byte	0x1
 5710 12ce 52       		.byte	0x52
 5711 12cf 02       		.byte	0x2
ARM GAS  /tmp/ccpGcYbE.s 			page 163


 5712 12d0 77       		.byte	0x77
 5713 12d1 00       		.sleb128 0
 5714 12d2 27       		.uleb128 0x27
 5715 12d3 01       		.byte	0x1
 5716 12d4 53       		.byte	0x53
 5717 12d5 02       		.byte	0x2
 5718 12d6 76       		.byte	0x76
 5719 12d7 00       		.sleb128 0
 5720 12d8 00       		.byte	0
 5721 12d9 21       		.uleb128 0x21
 5722 12da E4020000 		.4byte	.LVL66
 5723 12de E1140000 		.4byte	0x14e1
 5724 12e2 2E       		.uleb128 0x2e
 5725 12e3 FA020000 		.4byte	.LVL67
 5726 12e7 E1140000 		.4byte	0x14e1
 5727 12eb 27       		.uleb128 0x27
 5728 12ec 01       		.byte	0x1
 5729 12ed 50       		.byte	0x50
 5730 12ee 02       		.byte	0x2
 5731 12ef 74       		.byte	0x74
 5732 12f0 00       		.sleb128 0
 5733 12f1 27       		.uleb128 0x27
 5734 12f2 01       		.byte	0x1
 5735 12f3 51       		.byte	0x51
 5736 12f4 02       		.byte	0x2
 5737 12f5 08       		.byte	0x8
 5738 12f6 20       		.byte	0x20
 5739 12f7 27       		.uleb128 0x27
 5740 12f8 01       		.byte	0x1
 5741 12f9 52       		.byte	0x52
 5742 12fa 02       		.byte	0x2
 5743 12fb 77       		.byte	0x77
 5744 12fc 00       		.sleb128 0
 5745 12fd 27       		.uleb128 0x27
 5746 12fe 01       		.byte	0x1
 5747 12ff 53       		.byte	0x53
 5748 1300 02       		.byte	0x2
 5749 1301 76       		.byte	0x76
 5750 1302 00       		.sleb128 0
 5751 1303 00       		.byte	0
 5752 1304 00       		.byte	0
 5753 1305 30       		.uleb128 0x30
 5754 1306 01       		.byte	0x1
 5755 1307 D0020000 		.4byte	.LASF157
 5756 130b 01       		.byte	0x1
 5757 130c E802     		.2byte	0x2e8
 5758 130e 01       		.byte	0x1
 5759 130f 90020000 		.4byte	0x290
 5760 1313 7E010000 		.4byte	.LFB69
 5761 1317 30020000 		.4byte	.LFE69
 5762 131b 0C100000 		.4byte	.LLST17
 5763 131f 01       		.byte	0x1
 5764 1320 E3130000 		.4byte	0x13e3
 5765 1324 1F       		.uleb128 0x1f
 5766 1325 6E030000 		.4byte	.LASF104
 5767 1329 01       		.byte	0x1
 5768 132a E802     		.2byte	0x2e8
ARM GAS  /tmp/ccpGcYbE.s 			page 164


 5769 132c 79060000 		.4byte	0x679
 5770 1330 2C100000 		.4byte	.LLST18
 5771 1334 1F       		.uleb128 0x1f
 5772 1335 1F060000 		.4byte	.LASF146
 5773 1339 01       		.byte	0x1
 5774 133a E802     		.2byte	0x2e8
 5775 133c 51040000 		.4byte	0x451
 5776 1340 76100000 		.4byte	.LLST19
 5777 1344 1F       		.uleb128 0x1f
 5778 1345 F0060000 		.4byte	.LASF148
 5779 1349 01       		.byte	0x1
 5780 134a E802     		.2byte	0x2e8
 5781 134c A7000000 		.4byte	0xa7
 5782 1350 AC100000 		.4byte	.LLST20
 5783 1354 1F       		.uleb128 0x1f
 5784 1355 1A030000 		.4byte	.LASF120
 5785 1359 01       		.byte	0x1
 5786 135a E802     		.2byte	0x2e8
 5787 135c C7000000 		.4byte	0xc7
 5788 1360 D8100000 		.4byte	.LLST21
 5789 1364 31       		.uleb128 0x31
 5790 1365 746D7000 		.ascii	"tmp\000"
 5791 1369 01       		.byte	0x1
 5792 136a EA02     		.2byte	0x2ea
 5793 136c AA060000 		.4byte	0x6aa
 5794 1370 22110000 		.4byte	.LLST22
 5795 1374 20       		.uleb128 0x20
 5796 1375 CA070000 		.4byte	.LASF155
 5797 1379 01       		.byte	0x1
 5798 137a EB02     		.2byte	0x2eb
 5799 137c C7000000 		.4byte	0xc7
 5800 1380 42110000 		.4byte	.LLST23
 5801 1384 21       		.uleb128 0x21
 5802 1385 B6010000 		.4byte	.LVL36
 5803 1389 55160000 		.4byte	0x1655
 5804 138d 26       		.uleb128 0x26
 5805 138e D2010000 		.4byte	.LVL39
 5806 1392 E1140000 		.4byte	0x14e1
 5807 1396 B3130000 		.4byte	0x13b3
 5808 139a 27       		.uleb128 0x27
 5809 139b 01       		.byte	0x1
 5810 139c 50       		.byte	0x50
 5811 139d 02       		.byte	0x2
 5812 139e 74       		.byte	0x74
 5813 139f 00       		.sleb128 0
 5814 13a0 27       		.uleb128 0x27
 5815 13a1 01       		.byte	0x1
 5816 13a2 51       		.byte	0x51
 5817 13a3 02       		.byte	0x2
 5818 13a4 08       		.byte	0x8
 5819 13a5 40       		.byte	0x40
 5820 13a6 27       		.uleb128 0x27
 5821 13a7 01       		.byte	0x1
 5822 13a8 52       		.byte	0x52
 5823 13a9 02       		.byte	0x2
 5824 13aa 77       		.byte	0x77
 5825 13ab 00       		.sleb128 0
ARM GAS  /tmp/ccpGcYbE.s 			page 165


 5826 13ac 27       		.uleb128 0x27
 5827 13ad 01       		.byte	0x1
 5828 13ae 53       		.byte	0x53
 5829 13af 02       		.byte	0x2
 5830 13b0 76       		.byte	0x76
 5831 13b1 00       		.sleb128 0
 5832 13b2 00       		.byte	0
 5833 13b3 26       		.uleb128 0x26
 5834 13b4 FE010000 		.4byte	.LVL42
 5835 13b8 E1140000 		.4byte	0x14e1
 5836 13bc D9130000 		.4byte	0x13d9
 5837 13c0 27       		.uleb128 0x27
 5838 13c1 01       		.byte	0x1
 5839 13c2 50       		.byte	0x50
 5840 13c3 02       		.byte	0x2
 5841 13c4 74       		.byte	0x74
 5842 13c5 00       		.sleb128 0
 5843 13c6 27       		.uleb128 0x27
 5844 13c7 01       		.byte	0x1
 5845 13c8 51       		.byte	0x51
 5846 13c9 02       		.byte	0x2
 5847 13ca 08       		.byte	0x8
 5848 13cb 80       		.byte	0x80
 5849 13cc 27       		.uleb128 0x27
 5850 13cd 01       		.byte	0x1
 5851 13ce 52       		.byte	0x52
 5852 13cf 02       		.byte	0x2
 5853 13d0 77       		.byte	0x77
 5854 13d1 00       		.sleb128 0
 5855 13d2 27       		.uleb128 0x27
 5856 13d3 01       		.byte	0x1
 5857 13d4 53       		.byte	0x53
 5858 13d5 02       		.byte	0x2
 5859 13d6 76       		.byte	0x76
 5860 13d7 00       		.sleb128 0
 5861 13d8 00       		.byte	0
 5862 13d9 21       		.uleb128 0x21
 5863 13da 1C020000 		.4byte	.LVL46
 5864 13de E1140000 		.4byte	0x14e1
 5865 13e2 00       		.byte	0
 5866 13e3 2A       		.uleb128 0x2a
 5867 13e4 01       		.byte	0x1
 5868 13e5 92070000 		.4byte	.LASF158
 5869 13e9 01       		.byte	0x1
 5870 13ea 9C01     		.2byte	0x19c
 5871 13ec 01       		.byte	0x1
 5872 13ed FE130000 		.4byte	0x13fe
 5873 13f1 1A       		.uleb128 0x1a
 5874 13f2 6E030000 		.4byte	.LASF104
 5875 13f6 01       		.byte	0x1
 5876 13f7 9C01     		.2byte	0x19c
 5877 13f9 79060000 		.4byte	0x679
 5878 13fd 00       		.byte	0
 5879 13fe 2A       		.uleb128 0x2a
 5880 13ff 01       		.byte	0x1
 5881 1400 84000000 		.4byte	.LASF159
 5882 1404 01       		.byte	0x1
ARM GAS  /tmp/ccpGcYbE.s 			page 166


 5883 1405 8D01     		.2byte	0x18d
 5884 1407 01       		.byte	0x1
 5885 1408 19140000 		.4byte	0x1419
 5886 140c 1A       		.uleb128 0x1a
 5887 140d 6E030000 		.4byte	.LASF104
 5888 1411 01       		.byte	0x1
 5889 1412 8D01     		.2byte	0x18d
 5890 1414 79060000 		.4byte	0x679
 5891 1418 00       		.byte	0
 5892 1419 30       		.uleb128 0x30
 5893 141a 01       		.byte	0x1
 5894 141b 6B0A0000 		.4byte	.LASF160
 5895 141f 01       		.byte	0x1
 5896 1420 6201     		.2byte	0x162
 5897 1422 01       		.byte	0x1
 5898 1423 90020000 		.4byte	0x290
 5899 1427 52010000 		.4byte	.LFB66
 5900 142b 7E010000 		.4byte	.LFE66
 5901 142f A4110000 		.4byte	.LLST15
 5902 1433 01       		.byte	0x1
 5903 1434 59140000 		.4byte	0x1459
 5904 1438 1F       		.uleb128 0x1f
 5905 1439 6E030000 		.4byte	.LASF104
 5906 143d 01       		.byte	0x1
 5907 143e 6201     		.2byte	0x162
 5908 1440 79060000 		.4byte	0x679
 5909 1444 C4110000 		.4byte	.LLST16
 5910 1448 2E       		.uleb128 0x2e
 5911 1449 6C010000 		.4byte	.LVL30
 5912 144d E3130000 		.4byte	0x13e3
 5913 1451 27       		.uleb128 0x27
 5914 1452 01       		.byte	0x1
 5915 1453 50       		.byte	0x50
 5916 1454 02       		.byte	0x2
 5917 1455 74       		.byte	0x74
 5918 1456 00       		.sleb128 0
 5919 1457 00       		.byte	0
 5920 1458 00       		.byte	0
 5921 1459 30       		.uleb128 0x30
 5922 145a 01       		.byte	0x1
 5923 145b 63020000 		.4byte	.LASF161
 5924 145f 01       		.byte	0x1
 5925 1460 2701     		.2byte	0x127
 5926 1462 01       		.byte	0x1
 5927 1463 90020000 		.4byte	0x290
 5928 1467 78000000 		.4byte	.LFB65
 5929 146b 50010000 		.4byte	.LFE65
 5930 146f F8110000 		.4byte	.LLST10
 5931 1473 01       		.byte	0x1
 5932 1474 E1140000 		.4byte	0x14e1
 5933 1478 1F       		.uleb128 0x1f
 5934 1479 6E030000 		.4byte	.LASF104
 5935 147d 01       		.byte	0x1
 5936 147e 2701     		.2byte	0x127
 5937 1480 79060000 		.4byte	0x679
 5938 1484 18120000 		.4byte	.LLST11
 5939 1488 34       		.uleb128 0x34
ARM GAS  /tmp/ccpGcYbE.s 			page 167


 5940 1489 46060000 		.4byte	0x646
 5941 148d 94000000 		.4byte	.LBB8
 5942 1491 00000000 		.4byte	.Ldebug_ranges0+0
 5943 1495 01       		.byte	0x1
 5944 1496 4A01     		.2byte	0x14a
 5945 1498 D0140000 		.4byte	0x14d0
 5946 149c 25       		.uleb128 0x25
 5947 149d 54060000 		.4byte	0x654
 5948 14a1 5A120000 		.4byte	.LLST12
 5949 14a5 35       		.uleb128 0x35
 5950 14a6 00000000 		.4byte	.Ldebug_ranges0+0
 5951 14aa 2D       		.uleb128 0x2d
 5952 14ab 60060000 		.4byte	0x660
 5953 14af 78120000 		.4byte	.LLST13
 5954 14b3 2D       		.uleb128 0x2d
 5955 14b4 6C060000 		.4byte	0x66c
 5956 14b8 0B130000 		.4byte	.LLST14
 5957 14bc 21       		.uleb128 0x21
 5958 14bd EA000000 		.4byte	.LVL21
 5959 14c1 63160000 		.4byte	0x1663
 5960 14c5 21       		.uleb128 0x21
 5961 14c6 44010000 		.4byte	.LVL25
 5962 14ca 71160000 		.4byte	0x1671
 5963 14ce 00       		.byte	0
 5964 14cf 00       		.byte	0
 5965 14d0 2E       		.uleb128 0x2e
 5966 14d1 92000000 		.4byte	.LVL9
 5967 14d5 FE130000 		.4byte	0x13fe
 5968 14d9 27       		.uleb128 0x27
 5969 14da 01       		.byte	0x1
 5970 14db 50       		.byte	0x50
 5971 14dc 02       		.byte	0x2
 5972 14dd 75       		.byte	0x75
 5973 14de 00       		.sleb128 0
 5974 14df 00       		.byte	0
 5975 14e0 00       		.byte	0
 5976 14e1 36       		.uleb128 0x36
 5977 14e2 34080000 		.4byte	0x834
 5978 14e6 1A000000 		.4byte	.LFB128
 5979 14ea 76000000 		.4byte	.LFE128
 5980 14ee 1E130000 		.4byte	.LLST0
 5981 14f2 01       		.byte	0x1
 5982 14f3 66150000 		.4byte	0x1566
 5983 14f7 25       		.uleb128 0x25
 5984 14f8 46080000 		.4byte	0x846
 5985 14fc 3E130000 		.4byte	.LLST1
 5986 1500 25       		.uleb128 0x25
 5987 1501 52080000 		.4byte	0x852
 5988 1505 5C130000 		.4byte	.LLST2
 5989 1509 25       		.uleb128 0x25
 5990 150a 6A080000 		.4byte	0x86a
 5991 150e 7A130000 		.4byte	.LLST3
 5992 1512 25       		.uleb128 0x25
 5993 1513 76080000 		.4byte	0x876
 5994 1517 98130000 		.4byte	.LLST4
 5995 151b 37       		.uleb128 0x37
 5996 151c 5E080000 		.4byte	0x85e
ARM GAS  /tmp/ccpGcYbE.s 			page 168


 5997 1520 00       		.byte	0
 5998 1521 38       		.uleb128 0x38
 5999 1522 38000000 		.4byte	.LBB4
 6000 1526 6A000000 		.4byte	.LBE4
 6001 152a 5C150000 		.4byte	0x155c
 6002 152e 25       		.uleb128 0x25
 6003 152f 52080000 		.4byte	0x852
 6004 1533 B6130000 		.4byte	.LLST5
 6005 1537 25       		.uleb128 0x25
 6006 1538 5E080000 		.4byte	0x85e
 6007 153c C9130000 		.4byte	.LLST6
 6008 1540 25       		.uleb128 0x25
 6009 1541 6A080000 		.4byte	0x86a
 6010 1545 DD130000 		.4byte	.LLST7
 6011 1549 25       		.uleb128 0x25
 6012 154a 76080000 		.4byte	0x876
 6013 154e F0130000 		.4byte	.LLST8
 6014 1552 25       		.uleb128 0x25
 6015 1553 46080000 		.4byte	0x846
 6016 1557 03140000 		.4byte	.LLST9
 6017 155b 00       		.byte	0
 6018 155c 21       		.uleb128 0x21
 6019 155d 6E000000 		.4byte	.LVL7
 6020 1561 55160000 		.4byte	0x1655
 6021 1565 00       		.byte	0
 6022 1566 36       		.uleb128 0x36
 6023 1567 B0060000 		.4byte	0x6b0
 6024 156b 54080000 		.4byte	.LFB106
 6025 156f F0080000 		.4byte	.LFE106
 6026 1573 16140000 		.4byte	.LLST81
 6027 1577 01       		.byte	0x1
 6028 1578 BA150000 		.4byte	0x15ba
 6029 157c 25       		.uleb128 0x25
 6030 157d C2060000 		.4byte	0x6c2
 6031 1581 36140000 		.4byte	.LLST82
 6032 1585 39       		.uleb128 0x39
 6033 1586 CE060000 		.4byte	0x6ce
 6034 158a 35       		.uleb128 0x35
 6035 158b 50000000 		.4byte	.Ldebug_ranges0+0x50
 6036 158f 25       		.uleb128 0x25
 6037 1590 C2060000 		.4byte	0x6c2
 6038 1594 70140000 		.4byte	.LLST83
 6039 1598 35       		.uleb128 0x35
 6040 1599 50000000 		.4byte	.Ldebug_ranges0+0x50
 6041 159d 2D       		.uleb128 0x2d
 6042 159e 85150000 		.4byte	0x1585
 6043 15a2 9C140000 		.4byte	.LLST84
 6044 15a6 2E       		.uleb128 0x2e
 6045 15a7 B4080000 		.4byte	.LVL171
 6046 15ab ED0A0000 		.4byte	0xaed
 6047 15af 27       		.uleb128 0x27
 6048 15b0 01       		.byte	0x1
 6049 15b1 50       		.byte	0x50
 6050 15b2 03       		.byte	0x3
 6051 15b3 F3       		.byte	0xf3
 6052 15b4 01       		.uleb128 0x1
 6053 15b5 50       		.byte	0x50
ARM GAS  /tmp/ccpGcYbE.s 			page 169


 6054 15b6 00       		.byte	0
 6055 15b7 00       		.byte	0
 6056 15b8 00       		.byte	0
 6057 15b9 00       		.byte	0
 6058 15ba 36       		.uleb128 0x36
 6059 15bb 7F060000 		.4byte	0x67f
 6060 15bf 4C090000 		.4byte	.LFB107
 6061 15c3 260A0000 		.4byte	.LFE107
 6062 15c7 D2140000 		.4byte	.LLST91
 6063 15cb 01       		.byte	0x1
 6064 15cc 0E160000 		.4byte	0x160e
 6065 15d0 25       		.uleb128 0x25
 6066 15d1 91060000 		.4byte	0x691
 6067 15d5 F2140000 		.4byte	.LLST92
 6068 15d9 39       		.uleb128 0x39
 6069 15da 9D060000 		.4byte	0x69d
 6070 15de 35       		.uleb128 0x35
 6071 15df 68000000 		.4byte	.Ldebug_ranges0+0x68
 6072 15e3 25       		.uleb128 0x25
 6073 15e4 91060000 		.4byte	0x691
 6074 15e8 2C150000 		.4byte	.LLST93
 6075 15ec 35       		.uleb128 0x35
 6076 15ed 68000000 		.4byte	.Ldebug_ranges0+0x68
 6077 15f1 2D       		.uleb128 0x2d
 6078 15f2 D9150000 		.4byte	0x15d9
 6079 15f6 58150000 		.4byte	.LLST94
 6080 15fa 2E       		.uleb128 0x2e
 6081 15fb F0090000 		.4byte	.LVL193
 6082 15ff B70A0000 		.4byte	0xab7
 6083 1603 27       		.uleb128 0x27
 6084 1604 01       		.byte	0x1
 6085 1605 50       		.byte	0x50
 6086 1606 03       		.byte	0x3
 6087 1607 F3       		.byte	0xf3
 6088 1608 01       		.uleb128 0x1
 6089 1609 50       		.byte	0x50
 6090 160a 00       		.byte	0
 6091 160b 00       		.byte	0
 6092 160c 00       		.byte	0
 6093 160d 00       		.byte	0
 6094 160e 3A       		.uleb128 0x3a
 6095 160f 800A0000 		.4byte	0xa80
 6096 1613 F80B0000 		.4byte	.LFB90
 6097 1617 FA0B0000 		.4byte	.LFE90
 6098 161b 02       		.byte	0x2
 6099 161c 7D       		.byte	0x7d
 6100 161d 00       		.sleb128 0
 6101 161e 01       		.byte	0x1
 6102 161f 2B160000 		.4byte	0x162b
 6103 1623 3B       		.uleb128 0x3b
 6104 1624 8F0A0000 		.4byte	0xa8f
 6105 1628 01       		.byte	0x1
 6106 1629 50       		.byte	0x50
 6107 162a 00       		.byte	0
 6108 162b 3C       		.uleb128 0x3c
 6109 162c 01       		.byte	0x1
 6110 162d 01       		.byte	0x1
ARM GAS  /tmp/ccpGcYbE.s 			page 170


 6111 162e CF030000 		.4byte	.LASF162
 6112 1632 CF030000 		.4byte	.LASF162
 6113 1636 09       		.byte	0x9
 6114 1637 7C01     		.2byte	0x17c
 6115 1639 3C       		.uleb128 0x3c
 6116 163a 01       		.byte	0x1
 6117 163b 01       		.byte	0x1
 6118 163c DA040000 		.4byte	.LASF163
 6119 1640 DA040000 		.4byte	.LASF163
 6120 1644 09       		.byte	0x9
 6121 1645 7B01     		.2byte	0x17b
 6122 1647 3C       		.uleb128 0x3c
 6123 1648 01       		.byte	0x1
 6124 1649 01       		.byte	0x1
 6125 164a 29020000 		.4byte	.LASF164
 6126 164e 29020000 		.4byte	.LASF164
 6127 1652 09       		.byte	0x9
 6128 1653 7A01     		.2byte	0x17a
 6129 1655 3C       		.uleb128 0x3c
 6130 1656 01       		.byte	0x1
 6131 1657 01       		.byte	0x1
 6132 1658 E3050000 		.4byte	.LASF165
 6133 165c E3050000 		.4byte	.LASF165
 6134 1660 0B       		.byte	0xb
 6135 1661 2A01     		.2byte	0x12a
 6136 1663 3C       		.uleb128 0x3c
 6137 1664 01       		.byte	0x1
 6138 1665 01       		.byte	0x1
 6139 1666 2D070000 		.4byte	.LASF166
 6140 166a 2D070000 		.4byte	.LASF166
 6141 166e 0C       		.byte	0xc
 6142 166f 9704     		.2byte	0x497
 6143 1671 3C       		.uleb128 0x3c
 6144 1672 01       		.byte	0x1
 6145 1673 01       		.byte	0x1
 6146 1674 00000000 		.4byte	.LASF167
 6147 1678 00000000 		.4byte	.LASF167
 6148 167c 0C       		.byte	0xc
 6149 167d 9604     		.2byte	0x496
 6150 167f 00       		.byte	0
 6151              		.section	.debug_abbrev,"",%progbits
 6152              	.Ldebug_abbrev0:
 6153 0000 01       		.uleb128 0x1
 6154 0001 11       		.uleb128 0x11
 6155 0002 01       		.byte	0x1
 6156 0003 25       		.uleb128 0x25
 6157 0004 0E       		.uleb128 0xe
 6158 0005 13       		.uleb128 0x13
 6159 0006 0B       		.uleb128 0xb
 6160 0007 03       		.uleb128 0x3
 6161 0008 0E       		.uleb128 0xe
 6162 0009 1B       		.uleb128 0x1b
 6163 000a 0E       		.uleb128 0xe
 6164 000b 11       		.uleb128 0x11
 6165 000c 01       		.uleb128 0x1
 6166 000d 12       		.uleb128 0x12
 6167 000e 01       		.uleb128 0x1
ARM GAS  /tmp/ccpGcYbE.s 			page 171


 6168 000f 10       		.uleb128 0x10
 6169 0010 06       		.uleb128 0x6
 6170 0011 00       		.byte	0
 6171 0012 00       		.byte	0
 6172 0013 02       		.uleb128 0x2
 6173 0014 24       		.uleb128 0x24
 6174 0015 00       		.byte	0
 6175 0016 0B       		.uleb128 0xb
 6176 0017 0B       		.uleb128 0xb
 6177 0018 3E       		.uleb128 0x3e
 6178 0019 0B       		.uleb128 0xb
 6179 001a 03       		.uleb128 0x3
 6180 001b 0E       		.uleb128 0xe
 6181 001c 00       		.byte	0
 6182 001d 00       		.byte	0
 6183 001e 03       		.uleb128 0x3
 6184 001f 16       		.uleb128 0x16
 6185 0020 00       		.byte	0
 6186 0021 03       		.uleb128 0x3
 6187 0022 0E       		.uleb128 0xe
 6188 0023 3A       		.uleb128 0x3a
 6189 0024 0B       		.uleb128 0xb
 6190 0025 3B       		.uleb128 0x3b
 6191 0026 0B       		.uleb128 0xb
 6192 0027 49       		.uleb128 0x49
 6193 0028 13       		.uleb128 0x13
 6194 0029 00       		.byte	0
 6195 002a 00       		.byte	0
 6196 002b 04       		.uleb128 0x4
 6197 002c 24       		.uleb128 0x24
 6198 002d 00       		.byte	0
 6199 002e 0B       		.uleb128 0xb
 6200 002f 0B       		.uleb128 0xb
 6201 0030 3E       		.uleb128 0x3e
 6202 0031 0B       		.uleb128 0xb
 6203 0032 03       		.uleb128 0x3
 6204 0033 08       		.uleb128 0x8
 6205 0034 00       		.byte	0
 6206 0035 00       		.byte	0
 6207 0036 05       		.uleb128 0x5
 6208 0037 26       		.uleb128 0x26
 6209 0038 00       		.byte	0
 6210 0039 49       		.uleb128 0x49
 6211 003a 13       		.uleb128 0x13
 6212 003b 00       		.byte	0
 6213 003c 00       		.byte	0
 6214 003d 06       		.uleb128 0x6
 6215 003e 35       		.uleb128 0x35
 6216 003f 00       		.byte	0
 6217 0040 49       		.uleb128 0x49
 6218 0041 13       		.uleb128 0x13
 6219 0042 00       		.byte	0
 6220 0043 00       		.byte	0
 6221 0044 07       		.uleb128 0x7
 6222 0045 34       		.uleb128 0x34
 6223 0046 00       		.byte	0
 6224 0047 03       		.uleb128 0x3
ARM GAS  /tmp/ccpGcYbE.s 			page 172


 6225 0048 0E       		.uleb128 0xe
 6226 0049 3A       		.uleb128 0x3a
 6227 004a 0B       		.uleb128 0xb
 6228 004b 3B       		.uleb128 0x3b
 6229 004c 05       		.uleb128 0x5
 6230 004d 49       		.uleb128 0x49
 6231 004e 13       		.uleb128 0x13
 6232 004f 3F       		.uleb128 0x3f
 6233 0050 0C       		.uleb128 0xc
 6234 0051 3C       		.uleb128 0x3c
 6235 0052 0C       		.uleb128 0xc
 6236 0053 00       		.byte	0
 6237 0054 00       		.byte	0
 6238 0055 08       		.uleb128 0x8
 6239 0056 34       		.uleb128 0x34
 6240 0057 00       		.byte	0
 6241 0058 03       		.uleb128 0x3
 6242 0059 0E       		.uleb128 0xe
 6243 005a 3A       		.uleb128 0x3a
 6244 005b 0B       		.uleb128 0xb
 6245 005c 3B       		.uleb128 0x3b
 6246 005d 0B       		.uleb128 0xb
 6247 005e 49       		.uleb128 0x49
 6248 005f 13       		.uleb128 0x13
 6249 0060 3F       		.uleb128 0x3f
 6250 0061 0C       		.uleb128 0xc
 6251 0062 3C       		.uleb128 0x3c
 6252 0063 0C       		.uleb128 0xc
 6253 0064 00       		.byte	0
 6254 0065 00       		.byte	0
 6255 0066 09       		.uleb128 0x9
 6256 0067 01       		.uleb128 0x1
 6257 0068 01       		.byte	0x1
 6258 0069 49       		.uleb128 0x49
 6259 006a 13       		.uleb128 0x13
 6260 006b 01       		.uleb128 0x1
 6261 006c 13       		.uleb128 0x13
 6262 006d 00       		.byte	0
 6263 006e 00       		.byte	0
 6264 006f 0A       		.uleb128 0xa
 6265 0070 21       		.uleb128 0x21
 6266 0071 00       		.byte	0
 6267 0072 49       		.uleb128 0x49
 6268 0073 13       		.uleb128 0x13
 6269 0074 2F       		.uleb128 0x2f
 6270 0075 0B       		.uleb128 0xb
 6271 0076 00       		.byte	0
 6272 0077 00       		.byte	0
 6273 0078 0B       		.uleb128 0xb
 6274 0079 13       		.uleb128 0x13
 6275 007a 01       		.byte	0x1
 6276 007b 0B       		.uleb128 0xb
 6277 007c 0B       		.uleb128 0xb
 6278 007d 3A       		.uleb128 0x3a
 6279 007e 0B       		.uleb128 0xb
 6280 007f 3B       		.uleb128 0x3b
 6281 0080 05       		.uleb128 0x5
ARM GAS  /tmp/ccpGcYbE.s 			page 173


 6282 0081 01       		.uleb128 0x1
 6283 0082 13       		.uleb128 0x13
 6284 0083 00       		.byte	0
 6285 0084 00       		.byte	0
 6286 0085 0C       		.uleb128 0xc
 6287 0086 0D       		.uleb128 0xd
 6288 0087 00       		.byte	0
 6289 0088 03       		.uleb128 0x3
 6290 0089 08       		.uleb128 0x8
 6291 008a 3A       		.uleb128 0x3a
 6292 008b 0B       		.uleb128 0xb
 6293 008c 3B       		.uleb128 0x3b
 6294 008d 05       		.uleb128 0x5
 6295 008e 49       		.uleb128 0x49
 6296 008f 13       		.uleb128 0x13
 6297 0090 38       		.uleb128 0x38
 6298 0091 0A       		.uleb128 0xa
 6299 0092 00       		.byte	0
 6300 0093 00       		.byte	0
 6301 0094 0D       		.uleb128 0xd
 6302 0095 0D       		.uleb128 0xd
 6303 0096 00       		.byte	0
 6304 0097 03       		.uleb128 0x3
 6305 0098 0E       		.uleb128 0xe
 6306 0099 3A       		.uleb128 0x3a
 6307 009a 0B       		.uleb128 0xb
 6308 009b 3B       		.uleb128 0x3b
 6309 009c 05       		.uleb128 0x5
 6310 009d 49       		.uleb128 0x49
 6311 009e 13       		.uleb128 0x13
 6312 009f 38       		.uleb128 0x38
 6313 00a0 0A       		.uleb128 0xa
 6314 00a1 00       		.byte	0
 6315 00a2 00       		.byte	0
 6316 00a3 0E       		.uleb128 0xe
 6317 00a4 16       		.uleb128 0x16
 6318 00a5 00       		.byte	0
 6319 00a6 03       		.uleb128 0x3
 6320 00a7 0E       		.uleb128 0xe
 6321 00a8 3A       		.uleb128 0x3a
 6322 00a9 0B       		.uleb128 0xb
 6323 00aa 3B       		.uleb128 0x3b
 6324 00ab 05       		.uleb128 0x5
 6325 00ac 49       		.uleb128 0x49
 6326 00ad 13       		.uleb128 0x13
 6327 00ae 00       		.byte	0
 6328 00af 00       		.byte	0
 6329 00b0 0F       		.uleb128 0xf
 6330 00b1 04       		.uleb128 0x4
 6331 00b2 01       		.byte	0x1
 6332 00b3 0B       		.uleb128 0xb
 6333 00b4 0B       		.uleb128 0xb
 6334 00b5 49       		.uleb128 0x49
 6335 00b6 13       		.uleb128 0x13
 6336 00b7 3A       		.uleb128 0x3a
 6337 00b8 0B       		.uleb128 0xb
 6338 00b9 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccpGcYbE.s 			page 174


 6339 00ba 0B       		.uleb128 0xb
 6340 00bb 01       		.uleb128 0x1
 6341 00bc 13       		.uleb128 0x13
 6342 00bd 00       		.byte	0
 6343 00be 00       		.byte	0
 6344 00bf 10       		.uleb128 0x10
 6345 00c0 28       		.uleb128 0x28
 6346 00c1 00       		.byte	0
 6347 00c2 03       		.uleb128 0x3
 6348 00c3 0E       		.uleb128 0xe
 6349 00c4 1C       		.uleb128 0x1c
 6350 00c5 0B       		.uleb128 0xb
 6351 00c6 00       		.byte	0
 6352 00c7 00       		.byte	0
 6353 00c8 11       		.uleb128 0x11
 6354 00c9 28       		.uleb128 0x28
 6355 00ca 00       		.byte	0
 6356 00cb 03       		.uleb128 0x3
 6357 00cc 08       		.uleb128 0x8
 6358 00cd 1C       		.uleb128 0x1c
 6359 00ce 0B       		.uleb128 0xb
 6360 00cf 00       		.byte	0
 6361 00d0 00       		.byte	0
 6362 00d1 12       		.uleb128 0x12
 6363 00d2 13       		.uleb128 0x13
 6364 00d3 01       		.byte	0x1
 6365 00d4 0B       		.uleb128 0xb
 6366 00d5 0B       		.uleb128 0xb
 6367 00d6 3A       		.uleb128 0x3a
 6368 00d7 0B       		.uleb128 0xb
 6369 00d8 3B       		.uleb128 0x3b
 6370 00d9 0B       		.uleb128 0xb
 6371 00da 01       		.uleb128 0x1
 6372 00db 13       		.uleb128 0x13
 6373 00dc 00       		.byte	0
 6374 00dd 00       		.byte	0
 6375 00de 13       		.uleb128 0x13
 6376 00df 0D       		.uleb128 0xd
 6377 00e0 00       		.byte	0
 6378 00e1 03       		.uleb128 0x3
 6379 00e2 0E       		.uleb128 0xe
 6380 00e3 3A       		.uleb128 0x3a
 6381 00e4 0B       		.uleb128 0xb
 6382 00e5 3B       		.uleb128 0x3b
 6383 00e6 0B       		.uleb128 0xb
 6384 00e7 49       		.uleb128 0x49
 6385 00e8 13       		.uleb128 0x13
 6386 00e9 38       		.uleb128 0x38
 6387 00ea 0A       		.uleb128 0xa
 6388 00eb 00       		.byte	0
 6389 00ec 00       		.byte	0
 6390 00ed 14       		.uleb128 0x14
 6391 00ee 13       		.uleb128 0x13
 6392 00ef 01       		.byte	0x1
 6393 00f0 03       		.uleb128 0x3
 6394 00f1 0E       		.uleb128 0xe
 6395 00f2 0B       		.uleb128 0xb
ARM GAS  /tmp/ccpGcYbE.s 			page 175


 6396 00f3 0B       		.uleb128 0xb
 6397 00f4 3A       		.uleb128 0x3a
 6398 00f5 0B       		.uleb128 0xb
 6399 00f6 3B       		.uleb128 0x3b
 6400 00f7 0B       		.uleb128 0xb
 6401 00f8 01       		.uleb128 0x1
 6402 00f9 13       		.uleb128 0x13
 6403 00fa 00       		.byte	0
 6404 00fb 00       		.byte	0
 6405 00fc 15       		.uleb128 0x15
 6406 00fd 0F       		.uleb128 0xf
 6407 00fe 00       		.byte	0
 6408 00ff 0B       		.uleb128 0xb
 6409 0100 0B       		.uleb128 0xb
 6410 0101 49       		.uleb128 0x49
 6411 0102 13       		.uleb128 0x13
 6412 0103 00       		.byte	0
 6413 0104 00       		.byte	0
 6414 0105 16       		.uleb128 0x16
 6415 0106 0F       		.uleb128 0xf
 6416 0107 00       		.byte	0
 6417 0108 0B       		.uleb128 0xb
 6418 0109 0B       		.uleb128 0xb
 6419 010a 00       		.byte	0
 6420 010b 00       		.byte	0
 6421 010c 17       		.uleb128 0x17
 6422 010d 15       		.uleb128 0x15
 6423 010e 01       		.byte	0x1
 6424 010f 27       		.uleb128 0x27
 6425 0110 0C       		.uleb128 0xc
 6426 0111 01       		.uleb128 0x1
 6427 0112 13       		.uleb128 0x13
 6428 0113 00       		.byte	0
 6429 0114 00       		.byte	0
 6430 0115 18       		.uleb128 0x18
 6431 0116 05       		.uleb128 0x5
 6432 0117 00       		.byte	0
 6433 0118 49       		.uleb128 0x49
 6434 0119 13       		.uleb128 0x13
 6435 011a 00       		.byte	0
 6436 011b 00       		.byte	0
 6437 011c 19       		.uleb128 0x19
 6438 011d 2E       		.uleb128 0x2e
 6439 011e 01       		.byte	0x1
 6440 011f 03       		.uleb128 0x3
 6441 0120 0E       		.uleb128 0xe
 6442 0121 3A       		.uleb128 0x3a
 6443 0122 0B       		.uleb128 0xb
 6444 0123 3B       		.uleb128 0x3b
 6445 0124 05       		.uleb128 0x5
 6446 0125 27       		.uleb128 0x27
 6447 0126 0C       		.uleb128 0xc
 6448 0127 20       		.uleb128 0x20
 6449 0128 0B       		.uleb128 0xb
 6450 0129 01       		.uleb128 0x1
 6451 012a 13       		.uleb128 0x13
 6452 012b 00       		.byte	0
ARM GAS  /tmp/ccpGcYbE.s 			page 176


 6453 012c 00       		.byte	0
 6454 012d 1A       		.uleb128 0x1a
 6455 012e 05       		.uleb128 0x5
 6456 012f 00       		.byte	0
 6457 0130 03       		.uleb128 0x3
 6458 0131 0E       		.uleb128 0xe
 6459 0132 3A       		.uleb128 0x3a
 6460 0133 0B       		.uleb128 0xb
 6461 0134 3B       		.uleb128 0x3b
 6462 0135 05       		.uleb128 0x5
 6463 0136 49       		.uleb128 0x49
 6464 0137 13       		.uleb128 0x13
 6465 0138 00       		.byte	0
 6466 0139 00       		.byte	0
 6467 013a 1B       		.uleb128 0x1b
 6468 013b 34       		.uleb128 0x34
 6469 013c 00       		.byte	0
 6470 013d 03       		.uleb128 0x3
 6471 013e 0E       		.uleb128 0xe
 6472 013f 3A       		.uleb128 0x3a
 6473 0140 0B       		.uleb128 0xb
 6474 0141 3B       		.uleb128 0x3b
 6475 0142 05       		.uleb128 0x5
 6476 0143 49       		.uleb128 0x49
 6477 0144 13       		.uleb128 0x13
 6478 0145 00       		.byte	0
 6479 0146 00       		.byte	0
 6480 0147 1C       		.uleb128 0x1c
 6481 0148 2E       		.uleb128 0x2e
 6482 0149 01       		.byte	0x1
 6483 014a 03       		.uleb128 0x3
 6484 014b 0E       		.uleb128 0xe
 6485 014c 3A       		.uleb128 0x3a
 6486 014d 0B       		.uleb128 0xb
 6487 014e 3B       		.uleb128 0x3b
 6488 014f 05       		.uleb128 0x5
 6489 0150 27       		.uleb128 0x27
 6490 0151 0C       		.uleb128 0xc
 6491 0152 49       		.uleb128 0x49
 6492 0153 13       		.uleb128 0x13
 6493 0154 20       		.uleb128 0x20
 6494 0155 0B       		.uleb128 0xb
 6495 0156 01       		.uleb128 0x1
 6496 0157 13       		.uleb128 0x13
 6497 0158 00       		.byte	0
 6498 0159 00       		.byte	0
 6499 015a 1D       		.uleb128 0x1d
 6500 015b 34       		.uleb128 0x34
 6501 015c 00       		.byte	0
 6502 015d 03       		.uleb128 0x3
 6503 015e 08       		.uleb128 0x8
 6504 015f 3A       		.uleb128 0x3a
 6505 0160 0B       		.uleb128 0xb
 6506 0161 3B       		.uleb128 0x3b
 6507 0162 05       		.uleb128 0x5
 6508 0163 49       		.uleb128 0x49
 6509 0164 13       		.uleb128 0x13
ARM GAS  /tmp/ccpGcYbE.s 			page 177


 6510 0165 00       		.byte	0
 6511 0166 00       		.byte	0
 6512 0167 1E       		.uleb128 0x1e
 6513 0168 2E       		.uleb128 0x2e
 6514 0169 01       		.byte	0x1
 6515 016a 03       		.uleb128 0x3
 6516 016b 0E       		.uleb128 0xe
 6517 016c 3A       		.uleb128 0x3a
 6518 016d 0B       		.uleb128 0xb
 6519 016e 3B       		.uleb128 0x3b
 6520 016f 05       		.uleb128 0x5
 6521 0170 27       		.uleb128 0x27
 6522 0171 0C       		.uleb128 0xc
 6523 0172 11       		.uleb128 0x11
 6524 0173 01       		.uleb128 0x1
 6525 0174 12       		.uleb128 0x12
 6526 0175 01       		.uleb128 0x1
 6527 0176 40       		.uleb128 0x40
 6528 0177 06       		.uleb128 0x6
 6529 0178 9742     		.uleb128 0x2117
 6530 017a 0C       		.uleb128 0xc
 6531 017b 01       		.uleb128 0x1
 6532 017c 13       		.uleb128 0x13
 6533 017d 00       		.byte	0
 6534 017e 00       		.byte	0
 6535 017f 1F       		.uleb128 0x1f
 6536 0180 05       		.uleb128 0x5
 6537 0181 00       		.byte	0
 6538 0182 03       		.uleb128 0x3
 6539 0183 0E       		.uleb128 0xe
 6540 0184 3A       		.uleb128 0x3a
 6541 0185 0B       		.uleb128 0xb
 6542 0186 3B       		.uleb128 0x3b
 6543 0187 05       		.uleb128 0x5
 6544 0188 49       		.uleb128 0x49
 6545 0189 13       		.uleb128 0x13
 6546 018a 02       		.uleb128 0x2
 6547 018b 06       		.uleb128 0x6
 6548 018c 00       		.byte	0
 6549 018d 00       		.byte	0
 6550 018e 20       		.uleb128 0x20
 6551 018f 34       		.uleb128 0x34
 6552 0190 00       		.byte	0
 6553 0191 03       		.uleb128 0x3
 6554 0192 0E       		.uleb128 0xe
 6555 0193 3A       		.uleb128 0x3a
 6556 0194 0B       		.uleb128 0xb
 6557 0195 3B       		.uleb128 0x3b
 6558 0196 05       		.uleb128 0x5
 6559 0197 49       		.uleb128 0x49
 6560 0198 13       		.uleb128 0x13
 6561 0199 02       		.uleb128 0x2
 6562 019a 06       		.uleb128 0x6
 6563 019b 00       		.byte	0
 6564 019c 00       		.byte	0
 6565 019d 21       		.uleb128 0x21
 6566 019e 898201   		.uleb128 0x4109
ARM GAS  /tmp/ccpGcYbE.s 			page 178


 6567 01a1 00       		.byte	0
 6568 01a2 11       		.uleb128 0x11
 6569 01a3 01       		.uleb128 0x1
 6570 01a4 31       		.uleb128 0x31
 6571 01a5 13       		.uleb128 0x13
 6572 01a6 00       		.byte	0
 6573 01a7 00       		.byte	0
 6574 01a8 22       		.uleb128 0x22
 6575 01a9 2E       		.uleb128 0x2e
 6576 01aa 01       		.byte	0x1
 6577 01ab 03       		.uleb128 0x3
 6578 01ac 0E       		.uleb128 0xe
 6579 01ad 3A       		.uleb128 0x3a
 6580 01ae 0B       		.uleb128 0xb
 6581 01af 3B       		.uleb128 0x3b
 6582 01b0 05       		.uleb128 0x5
 6583 01b1 27       		.uleb128 0x27
 6584 01b2 0C       		.uleb128 0xc
 6585 01b3 11       		.uleb128 0x11
 6586 01b4 01       		.uleb128 0x1
 6587 01b5 12       		.uleb128 0x12
 6588 01b6 01       		.uleb128 0x1
 6589 01b7 40       		.uleb128 0x40
 6590 01b8 0A       		.uleb128 0xa
 6591 01b9 9742     		.uleb128 0x2117
 6592 01bb 0C       		.uleb128 0xc
 6593 01bc 01       		.uleb128 0x1
 6594 01bd 13       		.uleb128 0x13
 6595 01be 00       		.byte	0
 6596 01bf 00       		.byte	0
 6597 01c0 23       		.uleb128 0x23
 6598 01c1 05       		.uleb128 0x5
 6599 01c2 00       		.byte	0
 6600 01c3 03       		.uleb128 0x3
 6601 01c4 0E       		.uleb128 0xe
 6602 01c5 3A       		.uleb128 0x3a
 6603 01c6 0B       		.uleb128 0xb
 6604 01c7 3B       		.uleb128 0x3b
 6605 01c8 05       		.uleb128 0x5
 6606 01c9 49       		.uleb128 0x49
 6607 01ca 13       		.uleb128 0x13
 6608 01cb 02       		.uleb128 0x2
 6609 01cc 0A       		.uleb128 0xa
 6610 01cd 00       		.byte	0
 6611 01ce 00       		.byte	0
 6612 01cf 24       		.uleb128 0x24
 6613 01d0 1D       		.uleb128 0x1d
 6614 01d1 01       		.byte	0x1
 6615 01d2 31       		.uleb128 0x31
 6616 01d3 13       		.uleb128 0x13
 6617 01d4 11       		.uleb128 0x11
 6618 01d5 01       		.uleb128 0x1
 6619 01d6 12       		.uleb128 0x12
 6620 01d7 01       		.uleb128 0x1
 6621 01d8 58       		.uleb128 0x58
 6622 01d9 0B       		.uleb128 0xb
 6623 01da 59       		.uleb128 0x59
ARM GAS  /tmp/ccpGcYbE.s 			page 179


 6624 01db 05       		.uleb128 0x5
 6625 01dc 01       		.uleb128 0x1
 6626 01dd 13       		.uleb128 0x13
 6627 01de 00       		.byte	0
 6628 01df 00       		.byte	0
 6629 01e0 25       		.uleb128 0x25
 6630 01e1 05       		.uleb128 0x5
 6631 01e2 00       		.byte	0
 6632 01e3 31       		.uleb128 0x31
 6633 01e4 13       		.uleb128 0x13
 6634 01e5 02       		.uleb128 0x2
 6635 01e6 06       		.uleb128 0x6
 6636 01e7 00       		.byte	0
 6637 01e8 00       		.byte	0
 6638 01e9 26       		.uleb128 0x26
 6639 01ea 898201   		.uleb128 0x4109
 6640 01ed 01       		.byte	0x1
 6641 01ee 11       		.uleb128 0x11
 6642 01ef 01       		.uleb128 0x1
 6643 01f0 31       		.uleb128 0x31
 6644 01f1 13       		.uleb128 0x13
 6645 01f2 01       		.uleb128 0x1
 6646 01f3 13       		.uleb128 0x13
 6647 01f4 00       		.byte	0
 6648 01f5 00       		.byte	0
 6649 01f6 27       		.uleb128 0x27
 6650 01f7 8A8201   		.uleb128 0x410a
 6651 01fa 00       		.byte	0
 6652 01fb 02       		.uleb128 0x2
 6653 01fc 0A       		.uleb128 0xa
 6654 01fd 9142     		.uleb128 0x2111
 6655 01ff 0A       		.uleb128 0xa
 6656 0200 00       		.byte	0
 6657 0201 00       		.byte	0
 6658 0202 28       		.uleb128 0x28
 6659 0203 2E       		.uleb128 0x2e
 6660 0204 01       		.byte	0x1
 6661 0205 3F       		.uleb128 0x3f
 6662 0206 0C       		.uleb128 0xc
 6663 0207 03       		.uleb128 0x3
 6664 0208 0E       		.uleb128 0xe
 6665 0209 3A       		.uleb128 0x3a
 6666 020a 0B       		.uleb128 0xb
 6667 020b 3B       		.uleb128 0x3b
 6668 020c 05       		.uleb128 0x5
 6669 020d 27       		.uleb128 0x27
 6670 020e 0C       		.uleb128 0xc
 6671 020f 49       		.uleb128 0x49
 6672 0210 13       		.uleb128 0x13
 6673 0211 11       		.uleb128 0x11
 6674 0212 01       		.uleb128 0x1
 6675 0213 12       		.uleb128 0x12
 6676 0214 01       		.uleb128 0x1
 6677 0215 40       		.uleb128 0x40
 6678 0216 0A       		.uleb128 0xa
 6679 0217 9742     		.uleb128 0x2117
 6680 0219 0C       		.uleb128 0xc
ARM GAS  /tmp/ccpGcYbE.s 			page 180


 6681 021a 01       		.uleb128 0x1
 6682 021b 13       		.uleb128 0x13
 6683 021c 00       		.byte	0
 6684 021d 00       		.byte	0
 6685 021e 29       		.uleb128 0x29
 6686 021f 2E       		.uleb128 0x2e
 6687 0220 01       		.byte	0x1
 6688 0221 3F       		.uleb128 0x3f
 6689 0222 0C       		.uleb128 0xc
 6690 0223 03       		.uleb128 0x3
 6691 0224 0E       		.uleb128 0xe
 6692 0225 3A       		.uleb128 0x3a
 6693 0226 0B       		.uleb128 0xb
 6694 0227 3B       		.uleb128 0x3b
 6695 0228 05       		.uleb128 0x5
 6696 0229 27       		.uleb128 0x27
 6697 022a 0C       		.uleb128 0xc
 6698 022b 20       		.uleb128 0x20
 6699 022c 0B       		.uleb128 0xb
 6700 022d 01       		.uleb128 0x1
 6701 022e 13       		.uleb128 0x13
 6702 022f 00       		.byte	0
 6703 0230 00       		.byte	0
 6704 0231 2A       		.uleb128 0x2a
 6705 0232 2E       		.uleb128 0x2e
 6706 0233 01       		.byte	0x1
 6707 0234 3F       		.uleb128 0x3f
 6708 0235 0C       		.uleb128 0xc
 6709 0236 03       		.uleb128 0x3
 6710 0237 0E       		.uleb128 0xe
 6711 0238 3A       		.uleb128 0x3a
 6712 0239 0B       		.uleb128 0xb
 6713 023a 3B       		.uleb128 0x3b
 6714 023b 05       		.uleb128 0x5
 6715 023c 27       		.uleb128 0x27
 6716 023d 0C       		.uleb128 0xc
 6717 023e 01       		.uleb128 0x1
 6718 023f 13       		.uleb128 0x13
 6719 0240 00       		.byte	0
 6720 0241 00       		.byte	0
 6721 0242 2B       		.uleb128 0x2b
 6722 0243 2E       		.uleb128 0x2e
 6723 0244 01       		.byte	0x1
 6724 0245 3F       		.uleb128 0x3f
 6725 0246 0C       		.uleb128 0xc
 6726 0247 03       		.uleb128 0x3
 6727 0248 0E       		.uleb128 0xe
 6728 0249 3A       		.uleb128 0x3a
 6729 024a 0B       		.uleb128 0xb
 6730 024b 3B       		.uleb128 0x3b
 6731 024c 05       		.uleb128 0x5
 6732 024d 27       		.uleb128 0x27
 6733 024e 0C       		.uleb128 0xc
 6734 024f 11       		.uleb128 0x11
 6735 0250 01       		.uleb128 0x1
 6736 0251 12       		.uleb128 0x12
 6737 0252 01       		.uleb128 0x1
ARM GAS  /tmp/ccpGcYbE.s 			page 181


 6738 0253 40       		.uleb128 0x40
 6739 0254 06       		.uleb128 0x6
 6740 0255 01       		.uleb128 0x1
 6741 0256 13       		.uleb128 0x13
 6742 0257 00       		.byte	0
 6743 0258 00       		.byte	0
 6744 0259 2C       		.uleb128 0x2c
 6745 025a 0B       		.uleb128 0xb
 6746 025b 01       		.byte	0x1
 6747 025c 11       		.uleb128 0x11
 6748 025d 01       		.uleb128 0x1
 6749 025e 12       		.uleb128 0x12
 6750 025f 01       		.uleb128 0x1
 6751 0260 00       		.byte	0
 6752 0261 00       		.byte	0
 6753 0262 2D       		.uleb128 0x2d
 6754 0263 34       		.uleb128 0x34
 6755 0264 00       		.byte	0
 6756 0265 31       		.uleb128 0x31
 6757 0266 13       		.uleb128 0x13
 6758 0267 02       		.uleb128 0x2
 6759 0268 06       		.uleb128 0x6
 6760 0269 00       		.byte	0
 6761 026a 00       		.byte	0
 6762 026b 2E       		.uleb128 0x2e
 6763 026c 898201   		.uleb128 0x4109
 6764 026f 01       		.byte	0x1
 6765 0270 11       		.uleb128 0x11
 6766 0271 01       		.uleb128 0x1
 6767 0272 31       		.uleb128 0x31
 6768 0273 13       		.uleb128 0x13
 6769 0274 00       		.byte	0
 6770 0275 00       		.byte	0
 6771 0276 2F       		.uleb128 0x2f
 6772 0277 898201   		.uleb128 0x4109
 6773 027a 01       		.byte	0x1
 6774 027b 11       		.uleb128 0x11
 6775 027c 01       		.uleb128 0x1
 6776 027d 9542     		.uleb128 0x2115
 6777 027f 0C       		.uleb128 0xc
 6778 0280 31       		.uleb128 0x31
 6779 0281 13       		.uleb128 0x13
 6780 0282 01       		.uleb128 0x1
 6781 0283 13       		.uleb128 0x13
 6782 0284 00       		.byte	0
 6783 0285 00       		.byte	0
 6784 0286 30       		.uleb128 0x30
 6785 0287 2E       		.uleb128 0x2e
 6786 0288 01       		.byte	0x1
 6787 0289 3F       		.uleb128 0x3f
 6788 028a 0C       		.uleb128 0xc
 6789 028b 03       		.uleb128 0x3
 6790 028c 0E       		.uleb128 0xe
 6791 028d 3A       		.uleb128 0x3a
 6792 028e 0B       		.uleb128 0xb
 6793 028f 3B       		.uleb128 0x3b
 6794 0290 05       		.uleb128 0x5
ARM GAS  /tmp/ccpGcYbE.s 			page 182


 6795 0291 27       		.uleb128 0x27
 6796 0292 0C       		.uleb128 0xc
 6797 0293 49       		.uleb128 0x49
 6798 0294 13       		.uleb128 0x13
 6799 0295 11       		.uleb128 0x11
 6800 0296 01       		.uleb128 0x1
 6801 0297 12       		.uleb128 0x12
 6802 0298 01       		.uleb128 0x1
 6803 0299 40       		.uleb128 0x40
 6804 029a 06       		.uleb128 0x6
 6805 029b 9742     		.uleb128 0x2117
 6806 029d 0C       		.uleb128 0xc
 6807 029e 01       		.uleb128 0x1
 6808 029f 13       		.uleb128 0x13
 6809 02a0 00       		.byte	0
 6810 02a1 00       		.byte	0
 6811 02a2 31       		.uleb128 0x31
 6812 02a3 34       		.uleb128 0x34
 6813 02a4 00       		.byte	0
 6814 02a5 03       		.uleb128 0x3
 6815 02a6 08       		.uleb128 0x8
 6816 02a7 3A       		.uleb128 0x3a
 6817 02a8 0B       		.uleb128 0xb
 6818 02a9 3B       		.uleb128 0x3b
 6819 02aa 05       		.uleb128 0x5
 6820 02ab 49       		.uleb128 0x49
 6821 02ac 13       		.uleb128 0x13
 6822 02ad 02       		.uleb128 0x2
 6823 02ae 06       		.uleb128 0x6
 6824 02af 00       		.byte	0
 6825 02b0 00       		.byte	0
 6826 02b1 32       		.uleb128 0x32
 6827 02b2 0B       		.uleb128 0xb
 6828 02b3 01       		.byte	0x1
 6829 02b4 55       		.uleb128 0x55
 6830 02b5 06       		.uleb128 0x6
 6831 02b6 01       		.uleb128 0x1
 6832 02b7 13       		.uleb128 0x13
 6833 02b8 00       		.byte	0
 6834 02b9 00       		.byte	0
 6835 02ba 33       		.uleb128 0x33
 6836 02bb 34       		.uleb128 0x34
 6837 02bc 00       		.byte	0
 6838 02bd 03       		.uleb128 0x3
 6839 02be 0E       		.uleb128 0xe
 6840 02bf 3A       		.uleb128 0x3a
 6841 02c0 0B       		.uleb128 0xb
 6842 02c1 3B       		.uleb128 0x3b
 6843 02c2 05       		.uleb128 0x5
 6844 02c3 49       		.uleb128 0x49
 6845 02c4 13       		.uleb128 0x13
 6846 02c5 02       		.uleb128 0x2
 6847 02c6 0A       		.uleb128 0xa
 6848 02c7 00       		.byte	0
 6849 02c8 00       		.byte	0
 6850 02c9 34       		.uleb128 0x34
 6851 02ca 1D       		.uleb128 0x1d
ARM GAS  /tmp/ccpGcYbE.s 			page 183


 6852 02cb 01       		.byte	0x1
 6853 02cc 31       		.uleb128 0x31
 6854 02cd 13       		.uleb128 0x13
 6855 02ce 52       		.uleb128 0x52
 6856 02cf 01       		.uleb128 0x1
 6857 02d0 55       		.uleb128 0x55
 6858 02d1 06       		.uleb128 0x6
 6859 02d2 58       		.uleb128 0x58
 6860 02d3 0B       		.uleb128 0xb
 6861 02d4 59       		.uleb128 0x59
 6862 02d5 05       		.uleb128 0x5
 6863 02d6 01       		.uleb128 0x1
 6864 02d7 13       		.uleb128 0x13
 6865 02d8 00       		.byte	0
 6866 02d9 00       		.byte	0
 6867 02da 35       		.uleb128 0x35
 6868 02db 0B       		.uleb128 0xb
 6869 02dc 01       		.byte	0x1
 6870 02dd 55       		.uleb128 0x55
 6871 02de 06       		.uleb128 0x6
 6872 02df 00       		.byte	0
 6873 02e0 00       		.byte	0
 6874 02e1 36       		.uleb128 0x36
 6875 02e2 2E       		.uleb128 0x2e
 6876 02e3 01       		.byte	0x1
 6877 02e4 31       		.uleb128 0x31
 6878 02e5 13       		.uleb128 0x13
 6879 02e6 11       		.uleb128 0x11
 6880 02e7 01       		.uleb128 0x1
 6881 02e8 12       		.uleb128 0x12
 6882 02e9 01       		.uleb128 0x1
 6883 02ea 40       		.uleb128 0x40
 6884 02eb 06       		.uleb128 0x6
 6885 02ec 9742     		.uleb128 0x2117
 6886 02ee 0C       		.uleb128 0xc
 6887 02ef 01       		.uleb128 0x1
 6888 02f0 13       		.uleb128 0x13
 6889 02f1 00       		.byte	0
 6890 02f2 00       		.byte	0
 6891 02f3 37       		.uleb128 0x37
 6892 02f4 05       		.uleb128 0x5
 6893 02f5 00       		.byte	0
 6894 02f6 31       		.uleb128 0x31
 6895 02f7 13       		.uleb128 0x13
 6896 02f8 1C       		.uleb128 0x1c
 6897 02f9 0B       		.uleb128 0xb
 6898 02fa 00       		.byte	0
 6899 02fb 00       		.byte	0
 6900 02fc 38       		.uleb128 0x38
 6901 02fd 0B       		.uleb128 0xb
 6902 02fe 01       		.byte	0x1
 6903 02ff 11       		.uleb128 0x11
 6904 0300 01       		.uleb128 0x1
 6905 0301 12       		.uleb128 0x12
 6906 0302 01       		.uleb128 0x1
 6907 0303 01       		.uleb128 0x1
 6908 0304 13       		.uleb128 0x13
ARM GAS  /tmp/ccpGcYbE.s 			page 184


 6909 0305 00       		.byte	0
 6910 0306 00       		.byte	0
 6911 0307 39       		.uleb128 0x39
 6912 0308 34       		.uleb128 0x34
 6913 0309 00       		.byte	0
 6914 030a 31       		.uleb128 0x31
 6915 030b 13       		.uleb128 0x13
 6916 030c 00       		.byte	0
 6917 030d 00       		.byte	0
 6918 030e 3A       		.uleb128 0x3a
 6919 030f 2E       		.uleb128 0x2e
 6920 0310 01       		.byte	0x1
 6921 0311 31       		.uleb128 0x31
 6922 0312 13       		.uleb128 0x13
 6923 0313 11       		.uleb128 0x11
 6924 0314 01       		.uleb128 0x1
 6925 0315 12       		.uleb128 0x12
 6926 0316 01       		.uleb128 0x1
 6927 0317 40       		.uleb128 0x40
 6928 0318 0A       		.uleb128 0xa
 6929 0319 9742     		.uleb128 0x2117
 6930 031b 0C       		.uleb128 0xc
 6931 031c 01       		.uleb128 0x1
 6932 031d 13       		.uleb128 0x13
 6933 031e 00       		.byte	0
 6934 031f 00       		.byte	0
 6935 0320 3B       		.uleb128 0x3b
 6936 0321 05       		.uleb128 0x5
 6937 0322 00       		.byte	0
 6938 0323 31       		.uleb128 0x31
 6939 0324 13       		.uleb128 0x13
 6940 0325 02       		.uleb128 0x2
 6941 0326 0A       		.uleb128 0xa
 6942 0327 00       		.byte	0
 6943 0328 00       		.byte	0
 6944 0329 3C       		.uleb128 0x3c
 6945 032a 2E       		.uleb128 0x2e
 6946 032b 00       		.byte	0
 6947 032c 3F       		.uleb128 0x3f
 6948 032d 0C       		.uleb128 0xc
 6949 032e 3C       		.uleb128 0x3c
 6950 032f 0C       		.uleb128 0xc
 6951 0330 8740     		.uleb128 0x2007
 6952 0332 0E       		.uleb128 0xe
 6953 0333 03       		.uleb128 0x3
 6954 0334 0E       		.uleb128 0xe
 6955 0335 3A       		.uleb128 0x3a
 6956 0336 0B       		.uleb128 0xb
 6957 0337 3B       		.uleb128 0x3b
 6958 0338 05       		.uleb128 0x5
 6959 0339 00       		.byte	0
 6960 033a 00       		.byte	0
 6961 033b 00       		.byte	0
 6962              		.section	.debug_loc,"",%progbits
 6963              	.Ldebug_loc0:
 6964              	.LLST116:
 6965 0000 9C0C0000 		.4byte	.LFB103-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 185


 6966 0004 9E0C0000 		.4byte	.LCFI34-.Ltext0
 6967 0008 0200     		.2byte	0x2
 6968 000a 7D       		.byte	0x7d
 6969 000b 00       		.sleb128 0
 6970 000c 9E0C0000 		.4byte	.LCFI34-.Ltext0
 6971 0010 C00C0000 		.4byte	.LFE103-.Ltext0
 6972 0014 0200     		.2byte	0x2
 6973 0016 7D       		.byte	0x7d
 6974 0017 08       		.sleb128 8
 6975 0018 00000000 		.4byte	0
 6976 001c 00000000 		.4byte	0
 6977              	.LLST117:
 6978 0020 9C0C0000 		.4byte	.LVL272-.Ltext0
 6979 0024 A20C0000 		.4byte	.LVL273-.Ltext0
 6980 0028 0100     		.2byte	0x1
 6981 002a 50       		.byte	0x50
 6982 002b A20C0000 		.4byte	.LVL273-.Ltext0
 6983 002f C00C0000 		.4byte	.LFE103-.Ltext0
 6984 0033 0400     		.2byte	0x4
 6985 0035 F3       		.byte	0xf3
 6986 0036 01       		.uleb128 0x1
 6987 0037 50       		.byte	0x50
 6988 0038 9F       		.byte	0x9f
 6989 0039 00000000 		.4byte	0
 6990 003d 00000000 		.4byte	0
 6991              	.LLST118:
 6992 0041 A20C0000 		.4byte	.LVL273-.Ltext0
 6993 0045 BD0C0000 		.4byte	.LVL274-1-.Ltext0
 6994 0049 0100     		.2byte	0x1
 6995 004b 50       		.byte	0x50
 6996 004c 00000000 		.4byte	0
 6997 0050 00000000 		.4byte	0
 6998              	.LLST119:
 6999 0054 C00C0000 		.4byte	.LFB102-.Ltext0
 7000 0058 C20C0000 		.4byte	.LCFI35-.Ltext0
 7001 005c 0200     		.2byte	0x2
 7002 005e 7D       		.byte	0x7d
 7003 005f 00       		.sleb128 0
 7004 0060 C20C0000 		.4byte	.LCFI35-.Ltext0
 7005 0064 E40C0000 		.4byte	.LFE102-.Ltext0
 7006 0068 0200     		.2byte	0x2
 7007 006a 7D       		.byte	0x7d
 7008 006b 08       		.sleb128 8
 7009 006c 00000000 		.4byte	0
 7010 0070 00000000 		.4byte	0
 7011              	.LLST120:
 7012 0074 C00C0000 		.4byte	.LVL275-.Ltext0
 7013 0078 C60C0000 		.4byte	.LVL276-.Ltext0
 7014 007c 0100     		.2byte	0x1
 7015 007e 50       		.byte	0x50
 7016 007f C60C0000 		.4byte	.LVL276-.Ltext0
 7017 0083 E40C0000 		.4byte	.LFE102-.Ltext0
 7018 0087 0400     		.2byte	0x4
 7019 0089 F3       		.byte	0xf3
 7020 008a 01       		.uleb128 0x1
 7021 008b 50       		.byte	0x50
 7022 008c 9F       		.byte	0x9f
ARM GAS  /tmp/ccpGcYbE.s 			page 186


 7023 008d 00000000 		.4byte	0
 7024 0091 00000000 		.4byte	0
 7025              	.LLST121:
 7026 0095 C60C0000 		.4byte	.LVL276-.Ltext0
 7027 0099 E10C0000 		.4byte	.LVL277-1-.Ltext0
 7028 009d 0100     		.2byte	0x1
 7029 009f 50       		.byte	0x50
 7030 00a0 00000000 		.4byte	0
 7031 00a4 00000000 		.4byte	0
 7032              	.LLST110:
 7033 00a8 E80B0000 		.4byte	.LFB101-.Ltext0
 7034 00ac EA0B0000 		.4byte	.LCFI32-.Ltext0
 7035 00b0 0200     		.2byte	0x2
 7036 00b2 7D       		.byte	0x7d
 7037 00b3 00       		.sleb128 0
 7038 00b4 EA0B0000 		.4byte	.LCFI32-.Ltext0
 7039 00b8 F80B0000 		.4byte	.LFE101-.Ltext0
 7040 00bc 0200     		.2byte	0x2
 7041 00be 7D       		.byte	0x7d
 7042 00bf 08       		.sleb128 8
 7043 00c0 00000000 		.4byte	0
 7044 00c4 00000000 		.4byte	0
 7045              	.LLST111:
 7046 00c8 E80B0000 		.4byte	.LVL257-.Ltext0
 7047 00cc EE0B0000 		.4byte	.LVL258-.Ltext0
 7048 00d0 0100     		.2byte	0x1
 7049 00d2 50       		.byte	0x50
 7050 00d3 EE0B0000 		.4byte	.LVL258-.Ltext0
 7051 00d7 F80B0000 		.4byte	.LFE101-.Ltext0
 7052 00db 0400     		.2byte	0x4
 7053 00dd F3       		.byte	0xf3
 7054 00de 01       		.uleb128 0x1
 7055 00df 50       		.byte	0x50
 7056 00e0 9F       		.byte	0x9f
 7057 00e1 00000000 		.4byte	0
 7058 00e5 00000000 		.4byte	0
 7059              	.LLST112:
 7060 00e9 EE0B0000 		.4byte	.LVL258-.Ltext0
 7061 00ed F50B0000 		.4byte	.LVL259-1-.Ltext0
 7062 00f1 0100     		.2byte	0x1
 7063 00f3 50       		.byte	0x50
 7064 00f4 00000000 		.4byte	0
 7065 00f8 00000000 		.4byte	0
 7066              	.LLST95:
 7067 00fc 280A0000 		.4byte	.LFB97-.Ltext0
 7068 0100 2A0A0000 		.4byte	.LCFI24-.Ltext0
 7069 0104 0200     		.2byte	0x2
 7070 0106 7D       		.byte	0x7d
 7071 0107 00       		.sleb128 0
 7072 0108 2A0A0000 		.4byte	.LCFI24-.Ltext0
 7073 010c 7A0A0000 		.4byte	.LFE97-.Ltext0
 7074 0110 0200     		.2byte	0x2
 7075 0112 7D       		.byte	0x7d
 7076 0113 08       		.sleb128 8
 7077 0114 00000000 		.4byte	0
 7078 0118 00000000 		.4byte	0
 7079              	.LLST96:
ARM GAS  /tmp/ccpGcYbE.s 			page 187


 7080 011c 280A0000 		.4byte	.LVL202-.Ltext0
 7081 0120 3A0A0000 		.4byte	.LVL205-.Ltext0
 7082 0124 0100     		.2byte	0x1
 7083 0126 50       		.byte	0x50
 7084 0127 3A0A0000 		.4byte	.LVL205-.Ltext0
 7085 012b 7A0A0000 		.4byte	.LFE97-.Ltext0
 7086 012f 0400     		.2byte	0x4
 7087 0131 F3       		.byte	0xf3
 7088 0132 01       		.uleb128 0x1
 7089 0133 50       		.byte	0x50
 7090 0134 9F       		.byte	0x9f
 7091 0135 00000000 		.4byte	0
 7092 0139 00000000 		.4byte	0
 7093              	.LLST97:
 7094 013d 280A0000 		.4byte	.LVL202-.Ltext0
 7095 0141 360A0000 		.4byte	.LVL204-.Ltext0
 7096 0145 0200     		.2byte	0x2
 7097 0147 30       		.byte	0x30
 7098 0148 9F       		.byte	0x9f
 7099 0149 360A0000 		.4byte	.LVL204-.Ltext0
 7100 014d 400A0000 		.4byte	.LVL206-.Ltext0
 7101 0151 0B00     		.2byte	0xb
 7102 0153 72       		.byte	0x72
 7103 0154 00       		.sleb128 0
 7104 0155 08       		.byte	0x8
 7105 0156 80       		.byte	0x80
 7106 0157 1A       		.byte	0x1a
 7107 0158 30       		.byte	0x30
 7108 0159 2E       		.byte	0x2e
 7109 015a 08       		.byte	0x8
 7110 015b FF       		.byte	0xff
 7111 015c 1A       		.byte	0x1a
 7112 015d 9F       		.byte	0x9f
 7113 015e 520A0000 		.4byte	.LVL209-.Ltext0
 7114 0162 5C0A0000 		.4byte	.LVL210-.Ltext0
 7115 0166 0B00     		.2byte	0xb
 7116 0168 73       		.byte	0x73
 7117 0169 00       		.sleb128 0
 7118 016a 08       		.byte	0x8
 7119 016b 40       		.byte	0x40
 7120 016c 1A       		.byte	0x1a
 7121 016d 30       		.byte	0x30
 7122 016e 2E       		.byte	0x2e
 7123 016f 08       		.byte	0x8
 7124 0170 FF       		.byte	0xff
 7125 0171 1A       		.byte	0x1a
 7126 0172 9F       		.byte	0x9f
 7127 0173 00000000 		.4byte	0
 7128 0177 00000000 		.4byte	0
 7129              	.LLST98:
 7130 017b 2E0A0000 		.4byte	.LVL203-.Ltext0
 7131 017f 770A0000 		.4byte	.LVL212-1-.Ltext0
 7132 0183 0100     		.2byte	0x1
 7133 0185 51       		.byte	0x51
 7134 0186 00000000 		.4byte	0
 7135 018a 00000000 		.4byte	0
 7136              	.LLST99:
ARM GAS  /tmp/ccpGcYbE.s 			page 188


 7137 018e 420A0000 		.4byte	.LVL207-.Ltext0
 7138 0192 500A0000 		.4byte	.LVL208-.Ltext0
 7139 0196 0100     		.2byte	0x1
 7140 0198 51       		.byte	0x51
 7141 0199 00000000 		.4byte	0
 7142 019d 00000000 		.4byte	0
 7143              	.LLST85:
 7144 01a1 F2080000 		.4byte	.LFB96-.Ltext0
 7145 01a5 F4080000 		.4byte	.LCFI21-.Ltext0
 7146 01a9 0200     		.2byte	0x2
 7147 01ab 7D       		.byte	0x7d
 7148 01ac 00       		.sleb128 0
 7149 01ad F4080000 		.4byte	.LCFI21-.Ltext0
 7150 01b1 FC080000 		.4byte	.LFE96-.Ltext0
 7151 01b5 0200     		.2byte	0x2
 7152 01b7 7D       		.byte	0x7d
 7153 01b8 08       		.sleb128 8
 7154 01b9 00000000 		.4byte	0
 7155 01bd 00000000 		.4byte	0
 7156              	.LLST86:
 7157 01c1 F2080000 		.4byte	.LVL177-.Ltext0
 7158 01c5 F6080000 		.4byte	.LVL178-.Ltext0
 7159 01c9 0100     		.2byte	0x1
 7160 01cb 50       		.byte	0x50
 7161 01cc F6080000 		.4byte	.LVL178-.Ltext0
 7162 01d0 FC080000 		.4byte	.LFE96-.Ltext0
 7163 01d4 0400     		.2byte	0x4
 7164 01d6 F3       		.byte	0xf3
 7165 01d7 01       		.uleb128 0x1
 7166 01d8 50       		.byte	0x50
 7167 01d9 9F       		.byte	0x9f
 7168 01da 00000000 		.4byte	0
 7169 01de 00000000 		.4byte	0
 7170              	.LLST87:
 7171 01e2 F2080000 		.4byte	.LVL177-.Ltext0
 7172 01e6 F6080000 		.4byte	.LVL178-.Ltext0
 7173 01ea 0200     		.2byte	0x2
 7174 01ec 70       		.byte	0x70
 7175 01ed 24       		.sleb128 36
 7176 01ee F6080000 		.4byte	.LVL178-.Ltext0
 7177 01f2 F9080000 		.4byte	.LVL179-1-.Ltext0
 7178 01f6 0500     		.2byte	0x5
 7179 01f8 F3       		.byte	0xf3
 7180 01f9 01       		.uleb128 0x1
 7181 01fa 50       		.byte	0x50
 7182 01fb 23       		.byte	0x23
 7183 01fc 24       		.uleb128 0x24
 7184 01fd 00000000 		.4byte	0
 7185 0201 00000000 		.4byte	0
 7186              	.LLST88:
 7187 0205 FE080000 		.4byte	.LFB95-.Ltext0
 7188 0209 00090000 		.4byte	.LCFI22-.Ltext0
 7189 020d 0200     		.2byte	0x2
 7190 020f 7D       		.byte	0x7d
 7191 0210 00       		.sleb128 0
 7192 0211 00090000 		.4byte	.LCFI22-.Ltext0
 7193 0215 4C090000 		.4byte	.LFE95-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 189


 7194 0219 0200     		.2byte	0x2
 7195 021b 7D       		.byte	0x7d
 7196 021c 08       		.sleb128 8
 7197 021d 00000000 		.4byte	0
 7198 0221 00000000 		.4byte	0
 7199              	.LLST89:
 7200 0225 FE080000 		.4byte	.LVL180-.Ltext0
 7201 0229 06090000 		.4byte	.LVL181-.Ltext0
 7202 022d 0100     		.2byte	0x1
 7203 022f 50       		.byte	0x50
 7204 0230 06090000 		.4byte	.LVL181-.Ltext0
 7205 0234 4C090000 		.4byte	.LFE95-.Ltext0
 7206 0238 0400     		.2byte	0x4
 7207 023a F3       		.byte	0xf3
 7208 023b 01       		.uleb128 0x1
 7209 023c 50       		.byte	0x50
 7210 023d 9F       		.byte	0x9f
 7211 023e 00000000 		.4byte	0
 7212 0242 00000000 		.4byte	0
 7213              	.LLST90:
 7214 0246 06090000 		.4byte	.LVL181-.Ltext0
 7215 024a 43090000 		.4byte	.LVL182-1-.Ltext0
 7216 024e 0100     		.2byte	0x1
 7217 0250 50       		.byte	0x50
 7218 0251 46090000 		.4byte	.LVL183-.Ltext0
 7219 0255 49090000 		.4byte	.LVL184-1-.Ltext0
 7220 0259 0100     		.2byte	0x1
 7221 025b 50       		.byte	0x50
 7222 025c 00000000 		.4byte	0
 7223 0260 00000000 		.4byte	0
 7224              	.LLST78:
 7225 0264 48080000 		.4byte	.LFB94-.Ltext0
 7226 0268 4A080000 		.4byte	.LCFI19-.Ltext0
 7227 026c 0200     		.2byte	0x2
 7228 026e 7D       		.byte	0x7d
 7229 026f 00       		.sleb128 0
 7230 0270 4A080000 		.4byte	.LCFI19-.Ltext0
 7231 0274 52080000 		.4byte	.LFE94-.Ltext0
 7232 0278 0200     		.2byte	0x2
 7233 027a 7D       		.byte	0x7d
 7234 027b 08       		.sleb128 8
 7235 027c 00000000 		.4byte	0
 7236 0280 00000000 		.4byte	0
 7237              	.LLST79:
 7238 0284 48080000 		.4byte	.LVL163-.Ltext0
 7239 0288 4C080000 		.4byte	.LVL164-.Ltext0
 7240 028c 0100     		.2byte	0x1
 7241 028e 50       		.byte	0x50
 7242 028f 4C080000 		.4byte	.LVL164-.Ltext0
 7243 0293 52080000 		.4byte	.LFE94-.Ltext0
 7244 0297 0400     		.2byte	0x4
 7245 0299 F3       		.byte	0xf3
 7246 029a 01       		.uleb128 0x1
 7247 029b 50       		.byte	0x50
 7248 029c 9F       		.byte	0x9f
 7249 029d 00000000 		.4byte	0
 7250 02a1 00000000 		.4byte	0
ARM GAS  /tmp/ccpGcYbE.s 			page 190


 7251              	.LLST80:
 7252 02a5 48080000 		.4byte	.LVL163-.Ltext0
 7253 02a9 4C080000 		.4byte	.LVL164-.Ltext0
 7254 02ad 0200     		.2byte	0x2
 7255 02af 70       		.byte	0x70
 7256 02b0 24       		.sleb128 36
 7257 02b1 4C080000 		.4byte	.LVL164-.Ltext0
 7258 02b5 4F080000 		.4byte	.LVL165-1-.Ltext0
 7259 02b9 0500     		.2byte	0x5
 7260 02bb F3       		.byte	0xf3
 7261 02bc 01       		.uleb128 0x1
 7262 02bd 50       		.byte	0x50
 7263 02be 23       		.byte	0x23
 7264 02bf 24       		.uleb128 0x24
 7265 02c0 00000000 		.4byte	0
 7266 02c4 00000000 		.4byte	0
 7267              	.LLST75:
 7268 02c8 0A080000 		.4byte	.LFB93-.Ltext0
 7269 02cc 0E080000 		.4byte	.LCFI18-.Ltext0
 7270 02d0 0200     		.2byte	0x2
 7271 02d2 7D       		.byte	0x7d
 7272 02d3 00       		.sleb128 0
 7273 02d4 0E080000 		.4byte	.LCFI18-.Ltext0
 7274 02d8 46080000 		.4byte	.LFE93-.Ltext0
 7275 02dc 0200     		.2byte	0x2
 7276 02de 7D       		.byte	0x7d
 7277 02df 08       		.sleb128 8
 7278 02e0 00000000 		.4byte	0
 7279 02e4 00000000 		.4byte	0
 7280              	.LLST76:
 7281 02e8 0A080000 		.4byte	.LVL157-.Ltext0
 7282 02ec 40080000 		.4byte	.LVL161-.Ltext0
 7283 02f0 0100     		.2byte	0x1
 7284 02f2 50       		.byte	0x50
 7285 02f3 40080000 		.4byte	.LVL161-.Ltext0
 7286 02f7 46080000 		.4byte	.LFE93-.Ltext0
 7287 02fb 0400     		.2byte	0x4
 7288 02fd F3       		.byte	0xf3
 7289 02fe 01       		.uleb128 0x1
 7290 02ff 50       		.byte	0x50
 7291 0300 9F       		.byte	0x9f
 7292 0301 00000000 		.4byte	0
 7293 0305 00000000 		.4byte	0
 7294              	.LLST77:
 7295 0309 12080000 		.4byte	.LVL158-.Ltext0
 7296 030d 24080000 		.4byte	.LVL159-.Ltext0
 7297 0311 0100     		.2byte	0x1
 7298 0313 53       		.byte	0x53
 7299 0314 24080000 		.4byte	.LVL159-.Ltext0
 7300 0318 36080000 		.4byte	.LVL160-.Ltext0
 7301 031c 0200     		.2byte	0x2
 7302 031e 70       		.byte	0x70
 7303 031f 24       		.sleb128 36
 7304 0320 36080000 		.4byte	.LVL160-.Ltext0
 7305 0324 43080000 		.4byte	.LVL162-1-.Ltext0
 7306 0328 0100     		.2byte	0x1
 7307 032a 53       		.byte	0x53
ARM GAS  /tmp/ccpGcYbE.s 			page 191


 7308 032b 00000000 		.4byte	0
 7309 032f 00000000 		.4byte	0
 7310              	.LLST123:
 7311 0333 EA0C0000 		.4byte	.LVL280-.Ltext0
 7312 0337 EC0C0000 		.4byte	.LVL281-.Ltext0
 7313 033b 0100     		.2byte	0x1
 7314 033d 50       		.byte	0x50
 7315 033e EC0C0000 		.4byte	.LVL281-.Ltext0
 7316 0342 EE0C0000 		.4byte	.LFE92-.Ltext0
 7317 0346 0400     		.2byte	0x4
 7318 0348 F3       		.byte	0xf3
 7319 0349 01       		.uleb128 0x1
 7320 034a 50       		.byte	0x50
 7321 034b 9F       		.byte	0x9f
 7322 034c 00000000 		.4byte	0
 7323 0350 00000000 		.4byte	0
 7324              	.LLST122:
 7325 0354 E40C0000 		.4byte	.LVL278-.Ltext0
 7326 0358 E80C0000 		.4byte	.LVL279-.Ltext0
 7327 035c 0100     		.2byte	0x1
 7328 035e 50       		.byte	0x50
 7329 035f E80C0000 		.4byte	.LVL279-.Ltext0
 7330 0363 EA0C0000 		.4byte	.LFE91-.Ltext0
 7331 0367 0400     		.2byte	0x4
 7332 0369 F3       		.byte	0xf3
 7333 036a 01       		.uleb128 0x1
 7334 036b 50       		.byte	0x50
 7335 036c 9F       		.byte	0x9f
 7336 036d 00000000 		.4byte	0
 7337 0371 00000000 		.4byte	0
 7338              	.LLST100:
 7339 0375 7A0A0000 		.4byte	.LFB83-.Ltext0
 7340 0379 7E0A0000 		.4byte	.LCFI25-.Ltext0
 7341 037d 0200     		.2byte	0x2
 7342 037f 7D       		.byte	0x7d
 7343 0380 00       		.sleb128 0
 7344 0381 7E0A0000 		.4byte	.LCFI25-.Ltext0
 7345 0385 9E0A0000 		.4byte	.LCFI26-.Ltext0
 7346 0389 0200     		.2byte	0x2
 7347 038b 7D       		.byte	0x7d
 7348 038c 10       		.sleb128 16
 7349 038d 9E0A0000 		.4byte	.LCFI26-.Ltext0
 7350 0391 A00A0000 		.4byte	.LCFI27-.Ltext0
 7351 0395 0200     		.2byte	0x2
 7352 0397 7D       		.byte	0x7d
 7353 0398 00       		.sleb128 0
 7354 0399 A00A0000 		.4byte	.LCFI27-.Ltext0
 7355 039d A60A0000 		.4byte	.LCFI28-.Ltext0
 7356 03a1 0200     		.2byte	0x2
 7357 03a3 7D       		.byte	0x7d
 7358 03a4 10       		.sleb128 16
 7359 03a5 A60A0000 		.4byte	.LCFI28-.Ltext0
 7360 03a9 A80A0000 		.4byte	.LCFI29-.Ltext0
 7361 03ad 0200     		.2byte	0x2
 7362 03af 7D       		.byte	0x7d
 7363 03b0 00       		.sleb128 0
 7364 03b1 A80A0000 		.4byte	.LCFI29-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 192


 7365 03b5 460B0000 		.4byte	.LCFI30-.Ltext0
 7366 03b9 0200     		.2byte	0x2
 7367 03bb 7D       		.byte	0x7d
 7368 03bc 10       		.sleb128 16
 7369 03bd 460B0000 		.4byte	.LCFI30-.Ltext0
 7370 03c1 4A0B0000 		.4byte	.LCFI31-.Ltext0
 7371 03c5 0200     		.2byte	0x2
 7372 03c7 7D       		.byte	0x7d
 7373 03c8 00       		.sleb128 0
 7374 03c9 4A0B0000 		.4byte	.LCFI31-.Ltext0
 7375 03cd E80B0000 		.4byte	.LFE83-.Ltext0
 7376 03d1 0200     		.2byte	0x2
 7377 03d3 7D       		.byte	0x7d
 7378 03d4 10       		.sleb128 16
 7379 03d5 00000000 		.4byte	0
 7380 03d9 00000000 		.4byte	0
 7381              	.LLST101:
 7382 03dd 7A0A0000 		.4byte	.LVL213-.Ltext0
 7383 03e1 9F0A0000 		.4byte	.LVL218-1-.Ltext0
 7384 03e5 0100     		.2byte	0x1
 7385 03e7 50       		.byte	0x50
 7386 03e8 9F0A0000 		.4byte	.LVL218-1-.Ltext0
 7387 03ec A00A0000 		.4byte	.LVL218-.Ltext0
 7388 03f0 0400     		.2byte	0x4
 7389 03f2 F3       		.byte	0xf3
 7390 03f3 01       		.uleb128 0x1
 7391 03f4 50       		.byte	0x50
 7392 03f5 9F       		.byte	0x9f
 7393 03f6 A00A0000 		.4byte	.LVL218-.Ltext0
 7394 03fa A20A0000 		.4byte	.LVL219-.Ltext0
 7395 03fe 0100     		.2byte	0x1
 7396 0400 50       		.byte	0x50
 7397 0401 A20A0000 		.4byte	.LVL219-.Ltext0
 7398 0405 A60A0000 		.4byte	.LVL220-.Ltext0
 7399 0409 0100     		.2byte	0x1
 7400 040b 54       		.byte	0x54
 7401 040c A60A0000 		.4byte	.LVL220-.Ltext0
 7402 0410 A70A0000 		.4byte	.LVL221-1-.Ltext0
 7403 0414 0100     		.2byte	0x1
 7404 0416 50       		.byte	0x50
 7405 0417 A70A0000 		.4byte	.LVL221-1-.Ltext0
 7406 041b A80A0000 		.4byte	.LVL221-.Ltext0
 7407 041f 0400     		.2byte	0x4
 7408 0421 F3       		.byte	0xf3
 7409 0422 01       		.uleb128 0x1
 7410 0423 50       		.byte	0x50
 7411 0424 9F       		.byte	0x9f
 7412 0425 A80A0000 		.4byte	.LVL221-.Ltext0
 7413 0429 C60A0000 		.4byte	.LVL223-.Ltext0
 7414 042d 0100     		.2byte	0x1
 7415 042f 50       		.byte	0x50
 7416 0430 C60A0000 		.4byte	.LVL223-.Ltext0
 7417 0434 060B0000 		.4byte	.LVL224-.Ltext0
 7418 0438 0100     		.2byte	0x1
 7419 043a 54       		.byte	0x54
 7420 043b 060B0000 		.4byte	.LVL224-.Ltext0
 7421 043f 090B0000 		.4byte	.LVL225-1-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 193


 7422 0443 0100     		.2byte	0x1
 7423 0445 50       		.byte	0x50
 7424 0446 090B0000 		.4byte	.LVL225-1-.Ltext0
 7425 044a 160B0000 		.4byte	.LVL227-.Ltext0
 7426 044e 0100     		.2byte	0x1
 7427 0450 54       		.byte	0x54
 7428 0451 160B0000 		.4byte	.LVL227-.Ltext0
 7429 0455 2C0B0000 		.4byte	.LVL231-.Ltext0
 7430 0459 0100     		.2byte	0x1
 7431 045b 50       		.byte	0x50
 7432 045c 2C0B0000 		.4byte	.LVL231-.Ltext0
 7433 0460 460B0000 		.4byte	.LVL233-.Ltext0
 7434 0464 0100     		.2byte	0x1
 7435 0466 54       		.byte	0x54
 7436 0467 460B0000 		.4byte	.LVL233-.Ltext0
 7437 046b 4A0B0000 		.4byte	.LVL234-.Ltext0
 7438 046f 0400     		.2byte	0x4
 7439 0471 F3       		.byte	0xf3
 7440 0472 01       		.uleb128 0x1
 7441 0473 50       		.byte	0x50
 7442 0474 9F       		.byte	0x9f
 7443 0475 4A0B0000 		.4byte	.LVL234-.Ltext0
 7444 0479 4D0B0000 		.4byte	.LVL235-1-.Ltext0
 7445 047d 0100     		.2byte	0x1
 7446 047f 50       		.byte	0x50
 7447 0480 4D0B0000 		.4byte	.LVL235-1-.Ltext0
 7448 0484 580B0000 		.4byte	.LVL238-.Ltext0
 7449 0488 0100     		.2byte	0x1
 7450 048a 54       		.byte	0x54
 7451 048b 580B0000 		.4byte	.LVL238-.Ltext0
 7452 048f 5B0B0000 		.4byte	.LVL239-1-.Ltext0
 7453 0493 0100     		.2byte	0x1
 7454 0495 50       		.byte	0x50
 7455 0496 5B0B0000 		.4byte	.LVL239-1-.Ltext0
 7456 049a 600B0000 		.4byte	.LVL240-.Ltext0
 7457 049e 0100     		.2byte	0x1
 7458 04a0 54       		.byte	0x54
 7459 04a1 600B0000 		.4byte	.LVL240-.Ltext0
 7460 04a5 BE0B0000 		.4byte	.LVL252-.Ltext0
 7461 04a9 0100     		.2byte	0x1
 7462 04ab 50       		.byte	0x50
 7463 04ac BE0B0000 		.4byte	.LVL252-.Ltext0
 7464 04b0 E20B0000 		.4byte	.LVL256-.Ltext0
 7465 04b4 0100     		.2byte	0x1
 7466 04b6 54       		.byte	0x54
 7467 04b7 E20B0000 		.4byte	.LVL256-.Ltext0
 7468 04bb E80B0000 		.4byte	.LFE83-.Ltext0
 7469 04bf 0400     		.2byte	0x4
 7470 04c1 F3       		.byte	0xf3
 7471 04c2 01       		.uleb128 0x1
 7472 04c3 50       		.byte	0x50
 7473 04c4 9F       		.byte	0x9f
 7474 04c5 00000000 		.4byte	0
 7475 04c9 00000000 		.4byte	0
 7476              	.LLST102:
 7477 04cd 800A0000 		.4byte	.LVL214-.Ltext0
 7478 04d1 9F0A0000 		.4byte	.LVL218-1-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 194


 7479 04d5 0100     		.2byte	0x1
 7480 04d7 52       		.byte	0x52
 7481 04d8 A80A0000 		.4byte	.LVL221-.Ltext0
 7482 04dc 090B0000 		.4byte	.LVL225-1-.Ltext0
 7483 04e0 0100     		.2byte	0x1
 7484 04e2 52       		.byte	0x52
 7485 04e3 4A0B0000 		.4byte	.LVL234-.Ltext0
 7486 04e7 4D0B0000 		.4byte	.LVL235-1-.Ltext0
 7487 04eb 0100     		.2byte	0x1
 7488 04ed 52       		.byte	0x52
 7489 04ee 600B0000 		.4byte	.LVL240-.Ltext0
 7490 04f2 6C0B0000 		.4byte	.LVL241-.Ltext0
 7491 04f6 0100     		.2byte	0x1
 7492 04f8 52       		.byte	0x52
 7493 04f9 BC0B0000 		.4byte	.LVL251-.Ltext0
 7494 04fd C20B0000 		.4byte	.LVL253-.Ltext0
 7495 0501 0100     		.2byte	0x1
 7496 0503 52       		.byte	0x52
 7497 0504 00000000 		.4byte	0
 7498 0508 00000000 		.4byte	0
 7499              	.LLST103:
 7500 050c 860A0000 		.4byte	.LVL215-.Ltext0
 7501 0510 9F0A0000 		.4byte	.LVL218-1-.Ltext0
 7502 0514 0100     		.2byte	0x1
 7503 0516 51       		.byte	0x51
 7504 0517 A00A0000 		.4byte	.LVL218-.Ltext0
 7505 051b A70A0000 		.4byte	.LVL221-1-.Ltext0
 7506 051f 0100     		.2byte	0x1
 7507 0521 51       		.byte	0x51
 7508 0522 A80A0000 		.4byte	.LVL221-.Ltext0
 7509 0526 090B0000 		.4byte	.LVL225-1-.Ltext0
 7510 052a 0100     		.2byte	0x1
 7511 052c 51       		.byte	0x51
 7512 052d 4A0B0000 		.4byte	.LVL234-.Ltext0
 7513 0531 4D0B0000 		.4byte	.LVL235-1-.Ltext0
 7514 0535 0100     		.2byte	0x1
 7515 0537 51       		.byte	0x51
 7516 0538 600B0000 		.4byte	.LVL240-.Ltext0
 7517 053c 840B0000 		.4byte	.LVL244-.Ltext0
 7518 0540 0100     		.2byte	0x1
 7519 0542 51       		.byte	0x51
 7520 0543 B20B0000 		.4byte	.LVL249-.Ltext0
 7521 0547 B40B0000 		.4byte	.LVL250-.Ltext0
 7522 054b 0100     		.2byte	0x1
 7523 054d 51       		.byte	0x51
 7524 054e BC0B0000 		.4byte	.LVL251-.Ltext0
 7525 0552 DF0B0000 		.4byte	.LVL255-1-.Ltext0
 7526 0556 0100     		.2byte	0x1
 7527 0558 51       		.byte	0x51
 7528 0559 00000000 		.4byte	0
 7529 055d 00000000 		.4byte	0
 7530              	.LLST104:
 7531 0561 880A0000 		.4byte	.LVL216-.Ltext0
 7532 0565 900A0000 		.4byte	.LVL217-.Ltext0
 7533 0569 0100     		.2byte	0x1
 7534 056b 55       		.byte	0x55
 7535 056c A80A0000 		.4byte	.LVL221-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 195


 7536 0570 AC0A0000 		.4byte	.LVL222-.Ltext0
 7537 0574 0100     		.2byte	0x1
 7538 0576 55       		.byte	0x55
 7539 0577 00000000 		.4byte	0
 7540 057b 00000000 		.4byte	0
 7541              	.LLST105:
 7542 057f 880A0000 		.4byte	.LVL216-.Ltext0
 7543 0583 9F0A0000 		.4byte	.LVL218-1-.Ltext0
 7544 0587 0500     		.2byte	0x5
 7545 0589 72       		.byte	0x72
 7546 058a 00       		.sleb128 0
 7547 058b 3F       		.byte	0x3f
 7548 058c 1A       		.byte	0x1a
 7549 058d 9F       		.byte	0x9f
 7550 058e A80A0000 		.4byte	.LVL221-.Ltext0
 7551 0592 090B0000 		.4byte	.LVL225-1-.Ltext0
 7552 0596 0500     		.2byte	0x5
 7553 0598 72       		.byte	0x72
 7554 0599 00       		.sleb128 0
 7555 059a 3F       		.byte	0x3f
 7556 059b 1A       		.byte	0x1a
 7557 059c 9F       		.byte	0x9f
 7558 059d 4A0B0000 		.4byte	.LVL234-.Ltext0
 7559 05a1 4D0B0000 		.4byte	.LVL235-1-.Ltext0
 7560 05a5 0500     		.2byte	0x5
 7561 05a7 72       		.byte	0x72
 7562 05a8 00       		.sleb128 0
 7563 05a9 3F       		.byte	0x3f
 7564 05aa 1A       		.byte	0x1a
 7565 05ab 9F       		.byte	0x9f
 7566 05ac 600B0000 		.4byte	.LVL240-.Ltext0
 7567 05b0 6C0B0000 		.4byte	.LVL241-.Ltext0
 7568 05b4 0500     		.2byte	0x5
 7569 05b6 72       		.byte	0x72
 7570 05b7 00       		.sleb128 0
 7571 05b8 3F       		.byte	0x3f
 7572 05b9 1A       		.byte	0x1a
 7573 05ba 9F       		.byte	0x9f
 7574 05bb BC0B0000 		.4byte	.LVL251-.Ltext0
 7575 05bf C20B0000 		.4byte	.LVL253-.Ltext0
 7576 05c3 0500     		.2byte	0x5
 7577 05c5 72       		.byte	0x72
 7578 05c6 00       		.sleb128 0
 7579 05c7 3F       		.byte	0x3f
 7580 05c8 1A       		.byte	0x1a
 7581 05c9 9F       		.byte	0x9f
 7582 05ca 00000000 		.4byte	0
 7583 05ce 00000000 		.4byte	0
 7584              	.LLST106:
 7585 05d2 880A0000 		.4byte	.LVL216-.Ltext0
 7586 05d6 100B0000 		.4byte	.LVL226-.Ltext0
 7587 05da 0200     		.2byte	0x2
 7588 05dc 30       		.byte	0x30
 7589 05dd 9F       		.byte	0x9f
 7590 05de 100B0000 		.4byte	.LVL226-.Ltext0
 7591 05e2 1A0B0000 		.4byte	.LVL228-.Ltext0
 7592 05e6 0B00     		.2byte	0xb
ARM GAS  /tmp/ccpGcYbE.s 			page 196


 7593 05e8 75       		.byte	0x75
 7594 05e9 00       		.sleb128 0
 7595 05ea 08       		.byte	0x8
 7596 05eb 40       		.byte	0x40
 7597 05ec 1A       		.byte	0x1a
 7598 05ed 30       		.byte	0x30
 7599 05ee 2E       		.byte	0x2e
 7600 05ef 08       		.byte	0x8
 7601 05f0 FF       		.byte	0xff
 7602 05f1 1A       		.byte	0x1a
 7603 05f2 9F       		.byte	0x9f
 7604 05f3 1A0B0000 		.4byte	.LVL228-.Ltext0
 7605 05f7 1C0B0000 		.4byte	.LVL229-.Ltext0
 7606 05fb 0800     		.2byte	0x8
 7607 05fd 75       		.byte	0x75
 7608 05fe 00       		.sleb128 0
 7609 05ff 30       		.byte	0x30
 7610 0600 2E       		.byte	0x2e
 7611 0601 08       		.byte	0x8
 7612 0602 FF       		.byte	0xff
 7613 0603 1A       		.byte	0x1a
 7614 0604 9F       		.byte	0x9f
 7615 0605 4A0B0000 		.4byte	.LVL234-.Ltext0
 7616 0609 500B0000 		.4byte	.LVL236-.Ltext0
 7617 060d 0200     		.2byte	0x2
 7618 060f 30       		.byte	0x30
 7619 0610 9F       		.byte	0x9f
 7620 0611 580B0000 		.4byte	.LVL238-.Ltext0
 7621 0615 600B0000 		.4byte	.LVL240-.Ltext0
 7622 0619 0800     		.2byte	0x8
 7623 061b 75       		.byte	0x75
 7624 061c 00       		.sleb128 0
 7625 061d 30       		.byte	0x30
 7626 061e 2E       		.byte	0x2e
 7627 061f 08       		.byte	0x8
 7628 0620 FF       		.byte	0xff
 7629 0621 1A       		.byte	0x1a
 7630 0622 9F       		.byte	0x9f
 7631 0623 600B0000 		.4byte	.LVL240-.Ltext0
 7632 0627 E00B0000 		.4byte	.LVL255-.Ltext0
 7633 062b 0200     		.2byte	0x2
 7634 062d 30       		.byte	0x30
 7635 062e 9F       		.byte	0x9f
 7636 062f 00000000 		.4byte	0
 7637 0633 00000000 		.4byte	0
 7638              	.LLST107:
 7639 0637 700B0000 		.4byte	.LVL242-.Ltext0
 7640 063b BC0B0000 		.4byte	.LVL251-.Ltext0
 7641 063f 0100     		.2byte	0x1
 7642 0641 50       		.byte	0x50
 7643 0642 00000000 		.4byte	0
 7644 0646 00000000 		.4byte	0
 7645              	.LLST108:
 7646 064a 820B0000 		.4byte	.LVL243-.Ltext0
 7647 064e 900B0000 		.4byte	.LVL245-.Ltext0
 7648 0652 0100     		.2byte	0x1
 7649 0654 52       		.byte	0x52
ARM GAS  /tmp/ccpGcYbE.s 			page 197


 7650 0655 900B0000 		.4byte	.LVL245-.Ltext0
 7651 0659 920B0000 		.4byte	.LVL246-.Ltext0
 7652 065d 0200     		.2byte	0x2
 7653 065f 70       		.byte	0x70
 7654 0660 24       		.sleb128 36
 7655 0661 AE0B0000 		.4byte	.LVL247-.Ltext0
 7656 0665 B00B0000 		.4byte	.LVL248-.Ltext0
 7657 0669 0100     		.2byte	0x1
 7658 066b 52       		.byte	0x52
 7659 066c B00B0000 		.4byte	.LVL248-.Ltext0
 7660 0670 B20B0000 		.4byte	.LVL249-.Ltext0
 7661 0674 0200     		.2byte	0x2
 7662 0676 70       		.byte	0x70
 7663 0677 24       		.sleb128 36
 7664 0678 00000000 		.4byte	0
 7665 067c 00000000 		.4byte	0
 7666              	.LLST109:
 7667 0680 C40B0000 		.4byte	.LVL254-.Ltext0
 7668 0684 E00B0000 		.4byte	.LVL255-.Ltext0
 7669 0688 0100     		.2byte	0x1
 7670 068a 54       		.byte	0x54
 7671 068b 00000000 		.4byte	0
 7672 068f 00000000 		.4byte	0
 7673              	.LLST113:
 7674 0693 FA0B0000 		.4byte	.LFB82-.Ltext0
 7675 0697 FE0B0000 		.4byte	.LCFI33-.Ltext0
 7676 069b 0200     		.2byte	0x2
 7677 069d 7D       		.byte	0x7d
 7678 069e 00       		.sleb128 0
 7679 069f FE0B0000 		.4byte	.LCFI33-.Ltext0
 7680 06a3 9C0C0000 		.4byte	.LFE82-.Ltext0
 7681 06a7 0200     		.2byte	0x2
 7682 06a9 7D       		.byte	0x7d
 7683 06aa 08       		.sleb128 8
 7684 06ab 00000000 		.4byte	0
 7685 06af 00000000 		.4byte	0
 7686              	.LLST114:
 7687 06b3 FA0B0000 		.4byte	.LVL261-.Ltext0
 7688 06b7 0C0C0000 		.4byte	.LVL262-.Ltext0
 7689 06bb 0100     		.2byte	0x1
 7690 06bd 50       		.byte	0x50
 7691 06be 0C0C0000 		.4byte	.LVL262-.Ltext0
 7692 06c2 940C0000 		.4byte	.LVL271-.Ltext0
 7693 06c6 0100     		.2byte	0x1
 7694 06c8 54       		.byte	0x54
 7695 06c9 940C0000 		.4byte	.LVL271-.Ltext0
 7696 06cd 9C0C0000 		.4byte	.LFE82-.Ltext0
 7697 06d1 0400     		.2byte	0x4
 7698 06d3 F3       		.byte	0xf3
 7699 06d4 01       		.uleb128 0x1
 7700 06d5 50       		.byte	0x50
 7701 06d6 9F       		.byte	0x9f
 7702 06d7 00000000 		.4byte	0
 7703 06db 00000000 		.4byte	0
 7704              	.LLST115:
 7705 06df FA0B0000 		.4byte	.LVL261-.Ltext0
 7706 06e3 380C0000 		.4byte	.LVL263-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 198


 7707 06e7 0200     		.2byte	0x2
 7708 06e9 31       		.byte	0x31
 7709 06ea 9F       		.byte	0x9f
 7710 06eb 380C0000 		.4byte	.LVL263-.Ltext0
 7711 06ef 4F0C0000 		.4byte	.LVL264-1-.Ltext0
 7712 06f3 0100     		.2byte	0x1
 7713 06f5 53       		.byte	0x53
 7714 06f6 6E0C0000 		.4byte	.LVL267-.Ltext0
 7715 06fa 8C0C0000 		.4byte	.LVL269-.Ltext0
 7716 06fe 0200     		.2byte	0x2
 7717 0700 31       		.byte	0x31
 7718 0701 9F       		.byte	0x9f
 7719 0702 8C0C0000 		.4byte	.LVL269-.Ltext0
 7720 0706 900C0000 		.4byte	.LVL270-.Ltext0
 7721 070a 0100     		.2byte	0x1
 7722 070c 53       		.byte	0x53
 7723 070d 00000000 		.4byte	0
 7724 0711 00000000 		.4byte	0
 7725              	.LLST73:
 7726 0715 AC070000 		.4byte	.LFB81-.Ltext0
 7727 0719 B0070000 		.4byte	.LCFI17-.Ltext0
 7728 071d 0200     		.2byte	0x2
 7729 071f 7D       		.byte	0x7d
 7730 0720 00       		.sleb128 0
 7731 0721 B0070000 		.4byte	.LCFI17-.Ltext0
 7732 0725 08080000 		.4byte	.LFE81-.Ltext0
 7733 0729 0200     		.2byte	0x2
 7734 072b 7D       		.byte	0x7d
 7735 072c 08       		.sleb128 8
 7736 072d 00000000 		.4byte	0
 7737 0731 00000000 		.4byte	0
 7738              	.LLST74:
 7739 0735 AC070000 		.4byte	.LVL153-.Ltext0
 7740 0739 CC070000 		.4byte	.LVL154-.Ltext0
 7741 073d 0100     		.2byte	0x1
 7742 073f 50       		.byte	0x50
 7743 0740 CC070000 		.4byte	.LVL154-.Ltext0
 7744 0744 08080000 		.4byte	.LFE81-.Ltext0
 7745 0748 0100     		.2byte	0x1
 7746 074a 54       		.byte	0x54
 7747 074b 00000000 		.4byte	0
 7748 074f 00000000 		.4byte	0
 7749              	.LLST69:
 7750 0753 4C070000 		.4byte	.LFB80-.Ltext0
 7751 0757 50070000 		.4byte	.LCFI16-.Ltext0
 7752 075b 0200     		.2byte	0x2
 7753 075d 7D       		.byte	0x7d
 7754 075e 00       		.sleb128 0
 7755 075f 50070000 		.4byte	.LCFI16-.Ltext0
 7756 0763 AC070000 		.4byte	.LFE80-.Ltext0
 7757 0767 0200     		.2byte	0x2
 7758 0769 7D       		.byte	0x7d
 7759 076a 08       		.sleb128 8
 7760 076b 00000000 		.4byte	0
 7761 076f 00000000 		.4byte	0
 7762              	.LLST70:
 7763 0773 4C070000 		.4byte	.LVL142-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 199


 7764 0777 70070000 		.4byte	.LVL147-.Ltext0
 7765 077b 0100     		.2byte	0x1
 7766 077d 50       		.byte	0x50
 7767 077e 70070000 		.4byte	.LVL147-.Ltext0
 7768 0782 AC070000 		.4byte	.LFE80-.Ltext0
 7769 0786 0100     		.2byte	0x1
 7770 0788 54       		.byte	0x54
 7771 0789 00000000 		.4byte	0
 7772 078d 00000000 		.4byte	0
 7773              	.LLST71:
 7774 0791 4C070000 		.4byte	.LVL142-.Ltext0
 7775 0795 52070000 		.4byte	.LVL143-.Ltext0
 7776 0799 0200     		.2byte	0x2
 7777 079b 30       		.byte	0x30
 7778 079c 9F       		.byte	0x9f
 7779 079d 52070000 		.4byte	.LVL143-.Ltext0
 7780 07a1 5E070000 		.4byte	.LVL144-.Ltext0
 7781 07a5 0B00     		.2byte	0xb
 7782 07a7 72       		.byte	0x72
 7783 07a8 00       		.sleb128 0
 7784 07a9 08       		.byte	0x8
 7785 07aa 80       		.byte	0x80
 7786 07ab 1A       		.byte	0x1a
 7787 07ac 30       		.byte	0x30
 7788 07ad 2E       		.byte	0x2e
 7789 07ae 08       		.byte	0x8
 7790 07af FF       		.byte	0xff
 7791 07b0 1A       		.byte	0x1a
 7792 07b1 9F       		.byte	0x9f
 7793 07b2 84070000 		.4byte	.LVL149-.Ltext0
 7794 07b6 8E070000 		.4byte	.LVL150-.Ltext0
 7795 07ba 0B00     		.2byte	0xb
 7796 07bc 73       		.byte	0x73
 7797 07bd 00       		.sleb128 0
 7798 07be 08       		.byte	0x8
 7799 07bf 40       		.byte	0x40
 7800 07c0 1A       		.byte	0x1a
 7801 07c1 30       		.byte	0x30
 7802 07c2 2E       		.byte	0x2e
 7803 07c3 08       		.byte	0x8
 7804 07c4 FF       		.byte	0xff
 7805 07c5 1A       		.byte	0x1a
 7806 07c6 9F       		.byte	0x9f
 7807 07c7 00000000 		.4byte	0
 7808 07cb 00000000 		.4byte	0
 7809              	.LLST72:
 7810 07cf 60070000 		.4byte	.LVL145-.Ltext0
 7811 07d3 6E070000 		.4byte	.LVL146-.Ltext0
 7812 07d7 0100     		.2byte	0x1
 7813 07d9 50       		.byte	0x50
 7814 07da 00000000 		.4byte	0
 7815 07de 00000000 		.4byte	0
 7816              	.LLST68:
 7817 07e2 2C070000 		.4byte	.LVL140-.Ltext0
 7818 07e6 48070000 		.4byte	.LVL141-.Ltext0
 7819 07ea 0100     		.2byte	0x1
 7820 07ec 50       		.byte	0x50
ARM GAS  /tmp/ccpGcYbE.s 			page 200


 7821 07ed 48070000 		.4byte	.LVL141-.Ltext0
 7822 07f1 4C070000 		.4byte	.LFE79-.Ltext0
 7823 07f5 0400     		.2byte	0x4
 7824 07f7 F3       		.byte	0xf3
 7825 07f8 01       		.uleb128 0x1
 7826 07f9 50       		.byte	0x50
 7827 07fa 9F       		.byte	0x9f
 7828 07fb 00000000 		.4byte	0
 7829 07ff 00000000 		.4byte	0
 7830              	.LLST67:
 7831 0803 0C070000 		.4byte	.LVL138-.Ltext0
 7832 0807 28070000 		.4byte	.LVL139-.Ltext0
 7833 080b 0100     		.2byte	0x1
 7834 080d 50       		.byte	0x50
 7835 080e 28070000 		.4byte	.LVL139-.Ltext0
 7836 0812 2C070000 		.4byte	.LFE78-.Ltext0
 7837 0816 0400     		.2byte	0x4
 7838 0818 F3       		.byte	0xf3
 7839 0819 01       		.uleb128 0x1
 7840 081a 50       		.byte	0x50
 7841 081b 9F       		.byte	0x9f
 7842 081c 00000000 		.4byte	0
 7843 0820 00000000 		.4byte	0
 7844              	.LLST61:
 7845 0824 38060000 		.4byte	.LFB77-.Ltext0
 7846 0828 3A060000 		.4byte	.LCFI13-.Ltext0
 7847 082c 0200     		.2byte	0x2
 7848 082e 7D       		.byte	0x7d
 7849 082f 00       		.sleb128 0
 7850 0830 3A060000 		.4byte	.LCFI13-.Ltext0
 7851 0834 F0060000 		.4byte	.LCFI14-.Ltext0
 7852 0838 0200     		.2byte	0x2
 7853 083a 7D       		.byte	0x7d
 7854 083b 20       		.sleb128 32
 7855 083c F0060000 		.4byte	.LCFI14-.Ltext0
 7856 0840 F2060000 		.4byte	.LCFI15-.Ltext0
 7857 0844 0200     		.2byte	0x2
 7858 0846 7D       		.byte	0x7d
 7859 0847 14       		.sleb128 20
 7860 0848 F2060000 		.4byte	.LCFI15-.Ltext0
 7861 084c 0C070000 		.4byte	.LFE77-.Ltext0
 7862 0850 0200     		.2byte	0x2
 7863 0852 7D       		.byte	0x7d
 7864 0853 20       		.sleb128 32
 7865 0854 00000000 		.4byte	0
 7866 0858 00000000 		.4byte	0
 7867              	.LLST62:
 7868 085c 38060000 		.4byte	.LVL130-.Ltext0
 7869 0860 40060000 		.4byte	.LVL131-.Ltext0
 7870 0864 0100     		.2byte	0x1
 7871 0866 50       		.byte	0x50
 7872 0867 40060000 		.4byte	.LVL131-.Ltext0
 7873 086b 0C070000 		.4byte	.LFE77-.Ltext0
 7874 086f 0100     		.2byte	0x1
 7875 0871 55       		.byte	0x55
 7876 0872 00000000 		.4byte	0
 7877 0876 00000000 		.4byte	0
ARM GAS  /tmp/ccpGcYbE.s 			page 201


 7878              	.LLST63:
 7879 087a 38060000 		.4byte	.LVL130-.Ltext0
 7880 087e 62060000 		.4byte	.LVL132-.Ltext0
 7881 0882 0100     		.2byte	0x1
 7882 0884 51       		.byte	0x51
 7883 0885 62060000 		.4byte	.LVL132-.Ltext0
 7884 0889 F2060000 		.4byte	.LVL137-.Ltext0
 7885 088d 0100     		.2byte	0x1
 7886 088f 57       		.byte	0x57
 7887 0890 F2060000 		.4byte	.LVL137-.Ltext0
 7888 0894 0C070000 		.4byte	.LFE77-.Ltext0
 7889 0898 0100     		.2byte	0x1
 7890 089a 51       		.byte	0x51
 7891 089b 00000000 		.4byte	0
 7892 089f 00000000 		.4byte	0
 7893              	.LLST64:
 7894 08a3 38060000 		.4byte	.LVL130-.Ltext0
 7895 08a7 A5060000 		.4byte	.LVL134-1-.Ltext0
 7896 08ab 0100     		.2byte	0x1
 7897 08ad 52       		.byte	0x52
 7898 08ae A5060000 		.4byte	.LVL134-1-.Ltext0
 7899 08b2 F2060000 		.4byte	.LVL137-.Ltext0
 7900 08b6 0400     		.2byte	0x4
 7901 08b8 F3       		.byte	0xf3
 7902 08b9 01       		.uleb128 0x1
 7903 08ba 52       		.byte	0x52
 7904 08bb 9F       		.byte	0x9f
 7905 08bc F2060000 		.4byte	.LVL137-.Ltext0
 7906 08c0 0C070000 		.4byte	.LFE77-.Ltext0
 7907 08c4 0100     		.2byte	0x1
 7908 08c6 52       		.byte	0x52
 7909 08c7 00000000 		.4byte	0
 7910 08cb 00000000 		.4byte	0
 7911              	.LLST65:
 7912 08cf 38060000 		.4byte	.LVL130-.Ltext0
 7913 08d3 A5060000 		.4byte	.LVL134-1-.Ltext0
 7914 08d7 0100     		.2byte	0x1
 7915 08d9 53       		.byte	0x53
 7916 08da A5060000 		.4byte	.LVL134-1-.Ltext0
 7917 08de F2060000 		.4byte	.LVL137-.Ltext0
 7918 08e2 0400     		.2byte	0x4
 7919 08e4 F3       		.byte	0xf3
 7920 08e5 01       		.uleb128 0x1
 7921 08e6 53       		.byte	0x53
 7922 08e7 9F       		.byte	0x9f
 7923 08e8 F2060000 		.4byte	.LVL137-.Ltext0
 7924 08ec 0C070000 		.4byte	.LFE77-.Ltext0
 7925 08f0 0100     		.2byte	0x1
 7926 08f2 53       		.byte	0x53
 7927 08f3 00000000 		.4byte	0
 7928 08f7 00000000 		.4byte	0
 7929              	.LLST66:
 7930 08fb A2060000 		.4byte	.LVL133-.Ltext0
 7931 08ff A6060000 		.4byte	.LVL134-.Ltext0
 7932 0903 0600     		.2byte	0x6
 7933 0905 F2       		.byte	0xf2
 7934 0906 590E0000 		.4byte	.Ldebug_info0+3673
ARM GAS  /tmp/ccpGcYbE.s 			page 202


 7935 090a 00       		.sleb128 0
 7936 090b A6060000 		.4byte	.LVL134-.Ltext0
 7937 090f EE060000 		.4byte	.LVL136-.Ltext0
 7938 0913 0600     		.2byte	0x6
 7939 0915 F2       		.byte	0xf2
 7940 0916 490E0000 		.4byte	.Ldebug_info0+3657
 7941 091a 00       		.sleb128 0
 7942 091b 00000000 		.4byte	0
 7943 091f 00000000 		.4byte	0
 7944              	.LLST56:
 7945 0923 84050000 		.4byte	.LFB76-.Ltext0
 7946 0927 86050000 		.4byte	.LCFI10-.Ltext0
 7947 092b 0200     		.2byte	0x2
 7948 092d 7D       		.byte	0x7d
 7949 092e 00       		.sleb128 0
 7950 092f 86050000 		.4byte	.LCFI10-.Ltext0
 7951 0933 26060000 		.4byte	.LCFI11-.Ltext0
 7952 0937 0200     		.2byte	0x2
 7953 0939 7D       		.byte	0x7d
 7954 093a 20       		.sleb128 32
 7955 093b 26060000 		.4byte	.LCFI11-.Ltext0
 7956 093f 28060000 		.4byte	.LCFI12-.Ltext0
 7957 0943 0200     		.2byte	0x2
 7958 0945 7D       		.byte	0x7d
 7959 0946 14       		.sleb128 20
 7960 0947 28060000 		.4byte	.LCFI12-.Ltext0
 7961 094b 38060000 		.4byte	.LFE76-.Ltext0
 7962 094f 0200     		.2byte	0x2
 7963 0951 7D       		.byte	0x7d
 7964 0952 20       		.sleb128 32
 7965 0953 00000000 		.4byte	0
 7966 0957 00000000 		.4byte	0
 7967              	.LLST57:
 7968 095b 84050000 		.4byte	.LVL121-.Ltext0
 7969 095f 8C050000 		.4byte	.LVL122-.Ltext0
 7970 0963 0100     		.2byte	0x1
 7971 0965 50       		.byte	0x50
 7972 0966 8C050000 		.4byte	.LVL122-.Ltext0
 7973 096a 38060000 		.4byte	.LFE76-.Ltext0
 7974 096e 0100     		.2byte	0x1
 7975 0970 55       		.byte	0x55
 7976 0971 00000000 		.4byte	0
 7977 0975 00000000 		.4byte	0
 7978              	.LLST58:
 7979 0979 84050000 		.4byte	.LVL121-.Ltext0
 7980 097d CA050000 		.4byte	.LVL124-.Ltext0
 7981 0981 0100     		.2byte	0x1
 7982 0983 51       		.byte	0x51
 7983 0984 CA050000 		.4byte	.LVL124-.Ltext0
 7984 0988 28060000 		.4byte	.LVL129-.Ltext0
 7985 098c 0100     		.2byte	0x1
 7986 098e 56       		.byte	0x56
 7987 098f 28060000 		.4byte	.LVL129-.Ltext0
 7988 0993 38060000 		.4byte	.LFE76-.Ltext0
 7989 0997 0100     		.2byte	0x1
 7990 0999 51       		.byte	0x51
 7991 099a 00000000 		.4byte	0
ARM GAS  /tmp/ccpGcYbE.s 			page 203


 7992 099e 00000000 		.4byte	0
 7993              	.LLST59:
 7994 09a2 84050000 		.4byte	.LVL121-.Ltext0
 7995 09a6 C6050000 		.4byte	.LVL123-.Ltext0
 7996 09aa 0100     		.2byte	0x1
 7997 09ac 52       		.byte	0x52
 7998 09ad C6050000 		.4byte	.LVL123-.Ltext0
 7999 09b1 E1050000 		.4byte	.LVL126-1-.Ltext0
 8000 09b5 0200     		.2byte	0x2
 8001 09b7 75       		.byte	0x75
 8002 09b8 30       		.sleb128 48
 8003 09b9 E1050000 		.4byte	.LVL126-1-.Ltext0
 8004 09bd 28060000 		.4byte	.LVL129-.Ltext0
 8005 09c1 0400     		.2byte	0x4
 8006 09c3 F3       		.byte	0xf3
 8007 09c4 01       		.uleb128 0x1
 8008 09c5 52       		.byte	0x52
 8009 09c6 9F       		.byte	0x9f
 8010 09c7 28060000 		.4byte	.LVL129-.Ltext0
 8011 09cb 38060000 		.4byte	.LFE76-.Ltext0
 8012 09cf 0100     		.2byte	0x1
 8013 09d1 52       		.byte	0x52
 8014 09d2 00000000 		.4byte	0
 8015 09d6 00000000 		.4byte	0
 8016              	.LLST60:
 8017 09da DA050000 		.4byte	.LVL125-.Ltext0
 8018 09de 24060000 		.4byte	.LVL128-.Ltext0
 8019 09e2 0600     		.2byte	0x6
 8020 09e4 F2       		.byte	0xf2
 8021 09e5 090F0000 		.4byte	.Ldebug_info0+3849
 8022 09e9 00       		.sleb128 0
 8023 09ea 00000000 		.4byte	0
 8024 09ee 00000000 		.4byte	0
 8025              	.LLST51:
 8026 09f2 12050000 		.4byte	.LFB75-.Ltext0
 8027 09f6 14050000 		.4byte	.LCFI9-.Ltext0
 8028 09fa 0200     		.2byte	0x2
 8029 09fc 7D       		.byte	0x7d
 8030 09fd 00       		.sleb128 0
 8031 09fe 14050000 		.4byte	.LCFI9-.Ltext0
 8032 0a02 84050000 		.4byte	.LFE75-.Ltext0
 8033 0a06 0200     		.2byte	0x2
 8034 0a08 7D       		.byte	0x7d
 8035 0a09 10       		.sleb128 16
 8036 0a0a 00000000 		.4byte	0
 8037 0a0e 00000000 		.4byte	0
 8038              	.LLST52:
 8039 0a12 12050000 		.4byte	.LVL114-.Ltext0
 8040 0a16 1A050000 		.4byte	.LVL115-.Ltext0
 8041 0a1a 0100     		.2byte	0x1
 8042 0a1c 50       		.byte	0x50
 8043 0a1d 1A050000 		.4byte	.LVL115-.Ltext0
 8044 0a21 76050000 		.4byte	.LVL120-.Ltext0
 8045 0a25 0100     		.2byte	0x1
 8046 0a27 55       		.byte	0x55
 8047 0a28 76050000 		.4byte	.LVL120-.Ltext0
 8048 0a2c 84050000 		.4byte	.LFE75-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 204


 8049 0a30 0400     		.2byte	0x4
 8050 0a32 F3       		.byte	0xf3
 8051 0a33 01       		.uleb128 0x1
 8052 0a34 50       		.byte	0x50
 8053 0a35 9F       		.byte	0x9f
 8054 0a36 00000000 		.4byte	0
 8055 0a3a 00000000 		.4byte	0
 8056              	.LLST53:
 8057 0a3e 12050000 		.4byte	.LVL114-.Ltext0
 8058 0a42 59050000 		.4byte	.LVL118-1-.Ltext0
 8059 0a46 0100     		.2byte	0x1
 8060 0a48 51       		.byte	0x51
 8061 0a49 59050000 		.4byte	.LVL118-1-.Ltext0
 8062 0a4d 72050000 		.4byte	.LVL119-.Ltext0
 8063 0a51 0400     		.2byte	0x4
 8064 0a53 F3       		.byte	0xf3
 8065 0a54 01       		.uleb128 0x1
 8066 0a55 51       		.byte	0x51
 8067 0a56 9F       		.byte	0x9f
 8068 0a57 72050000 		.4byte	.LVL119-.Ltext0
 8069 0a5b 84050000 		.4byte	.LFE75-.Ltext0
 8070 0a5f 0100     		.2byte	0x1
 8071 0a61 51       		.byte	0x51
 8072 0a62 00000000 		.4byte	0
 8073 0a66 00000000 		.4byte	0
 8074              	.LLST54:
 8075 0a6a 12050000 		.4byte	.LVL114-.Ltext0
 8076 0a6e 2A050000 		.4byte	.LVL116-.Ltext0
 8077 0a72 0100     		.2byte	0x1
 8078 0a74 52       		.byte	0x52
 8079 0a75 2A050000 		.4byte	.LVL116-.Ltext0
 8080 0a79 84050000 		.4byte	.LFE75-.Ltext0
 8081 0a7d 0400     		.2byte	0x4
 8082 0a7f F3       		.byte	0xf3
 8083 0a80 01       		.uleb128 0x1
 8084 0a81 52       		.byte	0x52
 8085 0a82 9F       		.byte	0x9f
 8086 0a83 00000000 		.4byte	0
 8087 0a87 00000000 		.4byte	0
 8088              	.LLST55:
 8089 0a8b 4C050000 		.4byte	.LVL117-.Ltext0
 8090 0a8f 72050000 		.4byte	.LVL119-.Ltext0
 8091 0a93 0600     		.2byte	0x6
 8092 0a95 F2       		.byte	0xf2
 8093 0a96 B20F0000 		.4byte	.Ldebug_info0+4018
 8094 0a9a 00       		.sleb128 0
 8095 0a9b 00000000 		.4byte	0
 8096 0a9f 00000000 		.4byte	0
 8097              	.LLST47:
 8098 0aa3 B4040000 		.4byte	.LFB74-.Ltext0
 8099 0aa7 B6040000 		.4byte	.LCFI8-.Ltext0
 8100 0aab 0200     		.2byte	0x2
 8101 0aad 7D       		.byte	0x7d
 8102 0aae 00       		.sleb128 0
 8103 0aaf B6040000 		.4byte	.LCFI8-.Ltext0
 8104 0ab3 12050000 		.4byte	.LFE74-.Ltext0
 8105 0ab7 0200     		.2byte	0x2
ARM GAS  /tmp/ccpGcYbE.s 			page 205


 8106 0ab9 7D       		.byte	0x7d
 8107 0aba 0C       		.sleb128 12
 8108 0abb 00000000 		.4byte	0
 8109 0abf 00000000 		.4byte	0
 8110              	.LLST48:
 8111 0ac3 B4040000 		.4byte	.LVL109-.Ltext0
 8112 0ac7 BE040000 		.4byte	.LVL110-.Ltext0
 8113 0acb 0100     		.2byte	0x1
 8114 0acd 50       		.byte	0x50
 8115 0ace BE040000 		.4byte	.LVL110-.Ltext0
 8116 0ad2 12050000 		.4byte	.LFE74-.Ltext0
 8117 0ad6 0100     		.2byte	0x1
 8118 0ad8 55       		.byte	0x55
 8119 0ad9 00000000 		.4byte	0
 8120 0add 00000000 		.4byte	0
 8121              	.LLST49:
 8122 0ae1 B4040000 		.4byte	.LVL109-.Ltext0
 8123 0ae5 E6040000 		.4byte	.LVL112-.Ltext0
 8124 0ae9 0100     		.2byte	0x1
 8125 0aeb 51       		.byte	0x51
 8126 0aec E6040000 		.4byte	.LVL112-.Ltext0
 8127 0af0 0E050000 		.4byte	.LVL113-.Ltext0
 8128 0af4 0200     		.2byte	0x2
 8129 0af6 75       		.byte	0x75
 8130 0af7 24       		.sleb128 36
 8131 0af8 0E050000 		.4byte	.LVL113-.Ltext0
 8132 0afc 12050000 		.4byte	.LFE74-.Ltext0
 8133 0b00 0100     		.2byte	0x1
 8134 0b02 51       		.byte	0x51
 8135 0b03 00000000 		.4byte	0
 8136 0b07 00000000 		.4byte	0
 8137              	.LLST50:
 8138 0b0b B4040000 		.4byte	.LVL109-.Ltext0
 8139 0b0f D6040000 		.4byte	.LVL111-.Ltext0
 8140 0b13 0100     		.2byte	0x1
 8141 0b15 52       		.byte	0x52
 8142 0b16 D6040000 		.4byte	.LVL111-.Ltext0
 8143 0b1a 0E050000 		.4byte	.LVL113-.Ltext0
 8144 0b1e 0200     		.2byte	0x2
 8145 0b20 75       		.byte	0x75
 8146 0b21 2C       		.sleb128 44
 8147 0b22 0E050000 		.4byte	.LVL113-.Ltext0
 8148 0b26 12050000 		.4byte	.LFE74-.Ltext0
 8149 0b2a 0100     		.2byte	0x1
 8150 0b2c 52       		.byte	0x52
 8151 0b2d 00000000 		.4byte	0
 8152 0b31 00000000 		.4byte	0
 8153              	.LLST43:
 8154 0b35 68040000 		.4byte	.LFB73-.Ltext0
 8155 0b39 6E040000 		.4byte	.LCFI7-.Ltext0
 8156 0b3d 0200     		.2byte	0x2
 8157 0b3f 7D       		.byte	0x7d
 8158 0b40 00       		.sleb128 0
 8159 0b41 6E040000 		.4byte	.LCFI7-.Ltext0
 8160 0b45 B4040000 		.4byte	.LFE73-.Ltext0
 8161 0b49 0200     		.2byte	0x2
 8162 0b4b 7D       		.byte	0x7d
ARM GAS  /tmp/ccpGcYbE.s 			page 206


 8163 0b4c 08       		.sleb128 8
 8164 0b4d 00000000 		.4byte	0
 8165 0b51 00000000 		.4byte	0
 8166              	.LLST44:
 8167 0b55 68040000 		.4byte	.LVL103-.Ltext0
 8168 0b59 72040000 		.4byte	.LVL104-.Ltext0
 8169 0b5d 0100     		.2byte	0x1
 8170 0b5f 50       		.byte	0x50
 8171 0b60 72040000 		.4byte	.LVL104-.Ltext0
 8172 0b64 B4040000 		.4byte	.LFE73-.Ltext0
 8173 0b68 0100     		.2byte	0x1
 8174 0b6a 54       		.byte	0x54
 8175 0b6b 00000000 		.4byte	0
 8176 0b6f 00000000 		.4byte	0
 8177              	.LLST45:
 8178 0b73 68040000 		.4byte	.LVL103-.Ltext0
 8179 0b77 96040000 		.4byte	.LVL107-.Ltext0
 8180 0b7b 0100     		.2byte	0x1
 8181 0b7d 51       		.byte	0x51
 8182 0b7e 96040000 		.4byte	.LVL107-.Ltext0
 8183 0b82 B0040000 		.4byte	.LVL108-.Ltext0
 8184 0b86 0200     		.2byte	0x2
 8185 0b88 74       		.byte	0x74
 8186 0b89 2C       		.sleb128 44
 8187 0b8a B0040000 		.4byte	.LVL108-.Ltext0
 8188 0b8e B4040000 		.4byte	.LFE73-.Ltext0
 8189 0b92 0100     		.2byte	0x1
 8190 0b94 51       		.byte	0x51
 8191 0b95 00000000 		.4byte	0
 8192 0b99 00000000 		.4byte	0
 8193              	.LLST46:
 8194 0b9d 68040000 		.4byte	.LVL103-.Ltext0
 8195 0ba1 8A040000 		.4byte	.LVL105-.Ltext0
 8196 0ba5 0100     		.2byte	0x1
 8197 0ba7 52       		.byte	0x52
 8198 0ba8 8A040000 		.4byte	.LVL105-.Ltext0
 8199 0bac 8C040000 		.4byte	.LVL106-.Ltext0
 8200 0bb0 0200     		.2byte	0x2
 8201 0bb2 74       		.byte	0x74
 8202 0bb3 32       		.sleb128 50
 8203 0bb4 8C040000 		.4byte	.LVL106-.Ltext0
 8204 0bb8 B0040000 		.4byte	.LVL108-.Ltext0
 8205 0bbc 0200     		.2byte	0x2
 8206 0bbe 74       		.byte	0x74
 8207 0bbf 30       		.sleb128 48
 8208 0bc0 B0040000 		.4byte	.LVL108-.Ltext0
 8209 0bc4 B4040000 		.4byte	.LFE73-.Ltext0
 8210 0bc8 0100     		.2byte	0x1
 8211 0bca 52       		.byte	0x52
 8212 0bcb 00000000 		.4byte	0
 8213 0bcf 00000000 		.4byte	0
 8214              	.LLST39:
 8215 0bd3 2A040000 		.4byte	.LFB72-.Ltext0
 8216 0bd7 30040000 		.4byte	.LCFI6-.Ltext0
 8217 0bdb 0200     		.2byte	0x2
 8218 0bdd 7D       		.byte	0x7d
 8219 0bde 00       		.sleb128 0
ARM GAS  /tmp/ccpGcYbE.s 			page 207


 8220 0bdf 30040000 		.4byte	.LCFI6-.Ltext0
 8221 0be3 68040000 		.4byte	.LFE72-.Ltext0
 8222 0be7 0200     		.2byte	0x2
 8223 0be9 7D       		.byte	0x7d
 8224 0bea 08       		.sleb128 8
 8225 0beb 00000000 		.4byte	0
 8226 0bef 00000000 		.4byte	0
 8227              	.LLST40:
 8228 0bf3 2A040000 		.4byte	.LVL97-.Ltext0
 8229 0bf7 34040000 		.4byte	.LVL98-.Ltext0
 8230 0bfb 0100     		.2byte	0x1
 8231 0bfd 50       		.byte	0x50
 8232 0bfe 34040000 		.4byte	.LVL98-.Ltext0
 8233 0c02 68040000 		.4byte	.LFE72-.Ltext0
 8234 0c06 0100     		.2byte	0x1
 8235 0c08 54       		.byte	0x54
 8236 0c09 00000000 		.4byte	0
 8237 0c0d 00000000 		.4byte	0
 8238              	.LLST41:
 8239 0c11 2A040000 		.4byte	.LVL97-.Ltext0
 8240 0c15 50040000 		.4byte	.LVL100-.Ltext0
 8241 0c19 0100     		.2byte	0x1
 8242 0c1b 51       		.byte	0x51
 8243 0c1c 50040000 		.4byte	.LVL100-.Ltext0
 8244 0c20 64040000 		.4byte	.LVL102-.Ltext0
 8245 0c24 0200     		.2byte	0x2
 8246 0c26 74       		.byte	0x74
 8247 0c27 24       		.sleb128 36
 8248 0c28 64040000 		.4byte	.LVL102-.Ltext0
 8249 0c2c 68040000 		.4byte	.LFE72-.Ltext0
 8250 0c30 0100     		.2byte	0x1
 8251 0c32 51       		.byte	0x51
 8252 0c33 00000000 		.4byte	0
 8253 0c37 00000000 		.4byte	0
 8254              	.LLST42:
 8255 0c3b 2A040000 		.4byte	.LVL97-.Ltext0
 8256 0c3f 4C040000 		.4byte	.LVL99-.Ltext0
 8257 0c43 0100     		.2byte	0x1
 8258 0c45 52       		.byte	0x52
 8259 0c46 4C040000 		.4byte	.LVL99-.Ltext0
 8260 0c4a 52040000 		.4byte	.LVL101-.Ltext0
 8261 0c4e 0200     		.2byte	0x2
 8262 0c50 74       		.byte	0x74
 8263 0c51 2A       		.sleb128 42
 8264 0c52 52040000 		.4byte	.LVL101-.Ltext0
 8265 0c56 64040000 		.4byte	.LVL102-.Ltext0
 8266 0c5a 0200     		.2byte	0x2
 8267 0c5c 74       		.byte	0x74
 8268 0c5d 28       		.sleb128 40
 8269 0c5e 64040000 		.4byte	.LVL102-.Ltext0
 8270 0c62 68040000 		.4byte	.LFE72-.Ltext0
 8271 0c66 0100     		.2byte	0x1
 8272 0c68 52       		.byte	0x52
 8273 0c69 00000000 		.4byte	0
 8274 0c6d 00000000 		.4byte	0
 8275              	.LLST31:
 8276 0c71 1A030000 		.4byte	.LFB71-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 208


 8277 0c75 1E030000 		.4byte	.LCFI5-.Ltext0
 8278 0c79 0200     		.2byte	0x2
 8279 0c7b 7D       		.byte	0x7d
 8280 0c7c 00       		.sleb128 0
 8281 0c7d 1E030000 		.4byte	.LCFI5-.Ltext0
 8282 0c81 2A040000 		.4byte	.LFE71-.Ltext0
 8283 0c85 0200     		.2byte	0x2
 8284 0c87 7D       		.byte	0x7d
 8285 0c88 18       		.sleb128 24
 8286 0c89 00000000 		.4byte	0
 8287 0c8d 00000000 		.4byte	0
 8288              	.LLST32:
 8289 0c91 1A030000 		.4byte	.LVL71-.Ltext0
 8290 0c95 24030000 		.4byte	.LVL72-.Ltext0
 8291 0c99 0100     		.2byte	0x1
 8292 0c9b 50       		.byte	0x50
 8293 0c9c 24030000 		.4byte	.LVL72-.Ltext0
 8294 0ca0 9C030000 		.4byte	.LVL78-.Ltext0
 8295 0ca4 0100     		.2byte	0x1
 8296 0ca6 54       		.byte	0x54
 8297 0ca7 9C030000 		.4byte	.LVL78-.Ltext0
 8298 0cab 9F030000 		.4byte	.LVL79-1-.Ltext0
 8299 0caf 0100     		.2byte	0x1
 8300 0cb1 50       		.byte	0x50
 8301 0cb2 9F030000 		.4byte	.LVL79-1-.Ltext0
 8302 0cb6 EC030000 		.4byte	.LVL90-.Ltext0
 8303 0cba 0100     		.2byte	0x1
 8304 0cbc 54       		.byte	0x54
 8305 0cbd EC030000 		.4byte	.LVL90-.Ltext0
 8306 0cc1 EF030000 		.4byte	.LVL91-1-.Ltext0
 8307 0cc5 0100     		.2byte	0x1
 8308 0cc7 50       		.byte	0x50
 8309 0cc8 EF030000 		.4byte	.LVL91-1-.Ltext0
 8310 0ccc 2A040000 		.4byte	.LFE71-.Ltext0
 8311 0cd0 0100     		.2byte	0x1
 8312 0cd2 54       		.byte	0x54
 8313 0cd3 00000000 		.4byte	0
 8314 0cd7 00000000 		.4byte	0
 8315              	.LLST33:
 8316 0cdb 1A030000 		.4byte	.LVL71-.Ltext0
 8317 0cdf 55030000 		.4byte	.LVL74-1-.Ltext0
 8318 0ce3 0100     		.2byte	0x1
 8319 0ce5 51       		.byte	0x51
 8320 0ce6 55030000 		.4byte	.LVL74-1-.Ltext0
 8321 0cea A2030000 		.4byte	.LVL80-.Ltext0
 8322 0cee 0100     		.2byte	0x1
 8323 0cf0 56       		.byte	0x56
 8324 0cf1 A8030000 		.4byte	.LVL81-.Ltext0
 8325 0cf5 BA030000 		.4byte	.LVL82-.Ltext0
 8326 0cf9 0100     		.2byte	0x1
 8327 0cfb 56       		.byte	0x56
 8328 0cfc BA030000 		.4byte	.LVL82-.Ltext0
 8329 0d00 DE030000 		.4byte	.LVL86-.Ltext0
 8330 0d04 0100     		.2byte	0x1
 8331 0d06 58       		.byte	0x58
 8332 0d07 DE030000 		.4byte	.LVL86-.Ltext0
 8333 0d0b E2030000 		.4byte	.LVL87-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 209


 8334 0d0f 0100     		.2byte	0x1
 8335 0d11 56       		.byte	0x56
 8336 0d12 E2030000 		.4byte	.LVL87-.Ltext0
 8337 0d16 EC030000 		.4byte	.LVL90-.Ltext0
 8338 0d1a 0100     		.2byte	0x1
 8339 0d1c 58       		.byte	0x58
 8340 0d1d EC030000 		.4byte	.LVL90-.Ltext0
 8341 0d21 06040000 		.4byte	.LVL92-.Ltext0
 8342 0d25 0100     		.2byte	0x1
 8343 0d27 56       		.byte	0x56
 8344 0d28 06040000 		.4byte	.LVL92-.Ltext0
 8345 0d2c 24040000 		.4byte	.LVL96-.Ltext0
 8346 0d30 0100     		.2byte	0x1
 8347 0d32 58       		.byte	0x58
 8348 0d33 24040000 		.4byte	.LVL96-.Ltext0
 8349 0d37 2A040000 		.4byte	.LFE71-.Ltext0
 8350 0d3b 0100     		.2byte	0x1
 8351 0d3d 51       		.byte	0x51
 8352 0d3e 00000000 		.4byte	0
 8353 0d42 00000000 		.4byte	0
 8354              	.LLST34:
 8355 0d46 1A030000 		.4byte	.LVL71-.Ltext0
 8356 0d4a 55030000 		.4byte	.LVL74-1-.Ltext0
 8357 0d4e 0100     		.2byte	0x1
 8358 0d50 52       		.byte	0x52
 8359 0d51 55030000 		.4byte	.LVL74-1-.Ltext0
 8360 0d55 DA030000 		.4byte	.LVL85-.Ltext0
 8361 0d59 0100     		.2byte	0x1
 8362 0d5b 55       		.byte	0x55
 8363 0d5c DE030000 		.4byte	.LVL86-.Ltext0
 8364 0d60 18040000 		.4byte	.LVL94-.Ltext0
 8365 0d64 0100     		.2byte	0x1
 8366 0d66 55       		.byte	0x55
 8367 0d67 1E040000 		.4byte	.LVL95-.Ltext0
 8368 0d6b 2A040000 		.4byte	.LFE71-.Ltext0
 8369 0d6f 0100     		.2byte	0x1
 8370 0d71 52       		.byte	0x52
 8371 0d72 00000000 		.4byte	0
 8372 0d76 00000000 		.4byte	0
 8373              	.LLST35:
 8374 0d7a 1A030000 		.4byte	.LVL71-.Ltext0
 8375 0d7e 40030000 		.4byte	.LVL73-.Ltext0
 8376 0d82 0100     		.2byte	0x1
 8377 0d84 53       		.byte	0x53
 8378 0d85 40030000 		.4byte	.LVL73-.Ltext0
 8379 0d89 2A040000 		.4byte	.LFE71-.Ltext0
 8380 0d8d 0400     		.2byte	0x4
 8381 0d8f F3       		.byte	0xf3
 8382 0d90 01       		.uleb128 0x1
 8383 0d91 53       		.byte	0x53
 8384 0d92 9F       		.byte	0x9f
 8385 0d93 00000000 		.4byte	0
 8386 0d97 00000000 		.4byte	0
 8387              	.LLST36:
 8388 0d9b 1A030000 		.4byte	.LVL71-.Ltext0
 8389 0d9f 7C030000 		.4byte	.LVL77-.Ltext0
 8390 0da3 0200     		.2byte	0x2
ARM GAS  /tmp/ccpGcYbE.s 			page 210


 8391 0da5 91       		.byte	0x91
 8392 0da6 00       		.sleb128 0
 8393 0da7 7C030000 		.4byte	.LVL77-.Ltext0
 8394 0dab 2A040000 		.4byte	.LFE71-.Ltext0
 8395 0daf 0200     		.2byte	0x2
 8396 0db1 91       		.byte	0x91
 8397 0db2 00       		.sleb128 0
 8398 0db3 00000000 		.4byte	0
 8399 0db7 00000000 		.4byte	0
 8400              	.LLST37:
 8401 0dbb A8030000 		.4byte	.LVL81-.Ltext0
 8402 0dbf CA030000 		.4byte	.LVL84-.Ltext0
 8403 0dc3 0100     		.2byte	0x1
 8404 0dc5 56       		.byte	0x56
 8405 0dc6 CA030000 		.4byte	.LVL84-.Ltext0
 8406 0dca DA030000 		.4byte	.LVL85-.Ltext0
 8407 0dce 0100     		.2byte	0x1
 8408 0dd0 55       		.byte	0x55
 8409 0dd1 DE030000 		.4byte	.LVL86-.Ltext0
 8410 0dd5 E4030000 		.4byte	.LVL88-.Ltext0
 8411 0dd9 0100     		.2byte	0x1
 8412 0ddb 56       		.byte	0x56
 8413 0ddc E4030000 		.4byte	.LVL88-.Ltext0
 8414 0de0 EA030000 		.4byte	.LVL89-.Ltext0
 8415 0de4 0100     		.2byte	0x1
 8416 0de6 55       		.byte	0x55
 8417 0de7 EA030000 		.4byte	.LVL89-.Ltext0
 8418 0deb EC030000 		.4byte	.LVL90-.Ltext0
 8419 0def 0300     		.2byte	0x3
 8420 0df1 75       		.byte	0x75
 8421 0df2 7F       		.sleb128 -1
 8422 0df3 9F       		.byte	0x9f
 8423 0df4 00000000 		.4byte	0
 8424 0df8 00000000 		.4byte	0
 8425              	.LLST38:
 8426 0dfc 1A030000 		.4byte	.LVL71-.Ltext0
 8427 0e00 58030000 		.4byte	.LVL75-.Ltext0
 8428 0e04 0200     		.2byte	0x2
 8429 0e06 30       		.byte	0x30
 8430 0e07 9F       		.byte	0x9f
 8431 0e08 58030000 		.4byte	.LVL75-.Ltext0
 8432 0e0c 68030000 		.4byte	.LVL76-.Ltext0
 8433 0e10 0100     		.2byte	0x1
 8434 0e12 50       		.byte	0x50
 8435 0e13 68030000 		.4byte	.LVL76-.Ltext0
 8436 0e17 9C030000 		.4byte	.LVL78-.Ltext0
 8437 0e1b 0100     		.2byte	0x1
 8438 0e1d 57       		.byte	0x57
 8439 0e1e 9C030000 		.4byte	.LVL78-.Ltext0
 8440 0e22 9F030000 		.4byte	.LVL79-1-.Ltext0
 8441 0e26 0100     		.2byte	0x1
 8442 0e28 52       		.byte	0x52
 8443 0e29 9F030000 		.4byte	.LVL79-1-.Ltext0
 8444 0e2d EC030000 		.4byte	.LVL90-.Ltext0
 8445 0e31 0100     		.2byte	0x1
 8446 0e33 57       		.byte	0x57
 8447 0e34 EC030000 		.4byte	.LVL90-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 211


 8448 0e38 EF030000 		.4byte	.LVL91-1-.Ltext0
 8449 0e3c 0100     		.2byte	0x1
 8450 0e3e 52       		.byte	0x52
 8451 0e3f EF030000 		.4byte	.LVL91-1-.Ltext0
 8452 0e43 24040000 		.4byte	.LVL96-.Ltext0
 8453 0e47 0100     		.2byte	0x1
 8454 0e49 57       		.byte	0x57
 8455 0e4a 24040000 		.4byte	.LVL96-.Ltext0
 8456 0e4e 2A040000 		.4byte	.LFE71-.Ltext0
 8457 0e52 0200     		.2byte	0x2
 8458 0e54 30       		.byte	0x30
 8459 0e55 9F       		.byte	0x9f
 8460 0e56 00000000 		.4byte	0
 8461 0e5a 00000000 		.4byte	0
 8462              	.LLST24:
 8463 0e5e 30020000 		.4byte	.LFB70-.Ltext0
 8464 0e62 34020000 		.4byte	.LCFI4-.Ltext0
 8465 0e66 0200     		.2byte	0x2
 8466 0e68 7D       		.byte	0x7d
 8467 0e69 00       		.sleb128 0
 8468 0e6a 34020000 		.4byte	.LCFI4-.Ltext0
 8469 0e6e 1A030000 		.4byte	.LFE70-.Ltext0
 8470 0e72 0200     		.2byte	0x2
 8471 0e74 7D       		.byte	0x7d
 8472 0e75 18       		.sleb128 24
 8473 0e76 00000000 		.4byte	0
 8474 0e7a 00000000 		.4byte	0
 8475              	.LLST25:
 8476 0e7e 30020000 		.4byte	.LVL50-.Ltext0
 8477 0e82 3A020000 		.4byte	.LVL51-.Ltext0
 8478 0e86 0100     		.2byte	0x1
 8479 0e88 50       		.byte	0x50
 8480 0e89 3A020000 		.4byte	.LVL51-.Ltext0
 8481 0e8d A2020000 		.4byte	.LVL57-.Ltext0
 8482 0e91 0100     		.2byte	0x1
 8483 0e93 54       		.byte	0x54
 8484 0e94 A2020000 		.4byte	.LVL57-.Ltext0
 8485 0e98 A5020000 		.4byte	.LVL58-1-.Ltext0
 8486 0e9c 0100     		.2byte	0x1
 8487 0e9e 50       		.byte	0x50
 8488 0e9f A5020000 		.4byte	.LVL58-1-.Ltext0
 8489 0ea3 E0020000 		.4byte	.LVL65-.Ltext0
 8490 0ea7 0100     		.2byte	0x1
 8491 0ea9 54       		.byte	0x54
 8492 0eaa E0020000 		.4byte	.LVL65-.Ltext0
 8493 0eae E3020000 		.4byte	.LVL66-1-.Ltext0
 8494 0eb2 0100     		.2byte	0x1
 8495 0eb4 50       		.byte	0x50
 8496 0eb5 E3020000 		.4byte	.LVL66-1-.Ltext0
 8497 0eb9 1A030000 		.4byte	.LFE70-.Ltext0
 8498 0ebd 0100     		.2byte	0x1
 8499 0ebf 54       		.byte	0x54
 8500 0ec0 00000000 		.4byte	0
 8501 0ec4 00000000 		.4byte	0
 8502              	.LLST26:
 8503 0ec8 30020000 		.4byte	.LVL50-.Ltext0
 8504 0ecc 67020000 		.4byte	.LVL53-1-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 212


 8505 0ed0 0100     		.2byte	0x1
 8506 0ed2 51       		.byte	0x51
 8507 0ed3 67020000 		.4byte	.LVL53-1-.Ltext0
 8508 0ed7 08030000 		.4byte	.LVL68-.Ltext0
 8509 0edb 0100     		.2byte	0x1
 8510 0edd 55       		.byte	0x55
 8511 0ede 0E030000 		.4byte	.LVL69-.Ltext0
 8512 0ee2 14030000 		.4byte	.LVL70-.Ltext0
 8513 0ee6 0100     		.2byte	0x1
 8514 0ee8 52       		.byte	0x52
 8515 0ee9 14030000 		.4byte	.LVL70-.Ltext0
 8516 0eed 1A030000 		.4byte	.LFE70-.Ltext0
 8517 0ef1 0100     		.2byte	0x1
 8518 0ef3 51       		.byte	0x51
 8519 0ef4 00000000 		.4byte	0
 8520 0ef8 00000000 		.4byte	0
 8521              	.LLST27:
 8522 0efc 30020000 		.4byte	.LVL50-.Ltext0
 8523 0f00 67020000 		.4byte	.LVL53-1-.Ltext0
 8524 0f04 0100     		.2byte	0x1
 8525 0f06 52       		.byte	0x52
 8526 0f07 67020000 		.4byte	.LVL53-1-.Ltext0
 8527 0f0b 14030000 		.4byte	.LVL70-.Ltext0
 8528 0f0f 0400     		.2byte	0x4
 8529 0f11 F3       		.byte	0xf3
 8530 0f12 01       		.uleb128 0x1
 8531 0f13 52       		.byte	0x52
 8532 0f14 9F       		.byte	0x9f
 8533 0f15 14030000 		.4byte	.LVL70-.Ltext0
 8534 0f19 1A030000 		.4byte	.LFE70-.Ltext0
 8535 0f1d 0100     		.2byte	0x1
 8536 0f1f 52       		.byte	0x52
 8537 0f20 00000000 		.4byte	0
 8538 0f24 00000000 		.4byte	0
 8539              	.LLST28:
 8540 0f28 30020000 		.4byte	.LVL50-.Ltext0
 8541 0f2c 52020000 		.4byte	.LVL52-.Ltext0
 8542 0f30 0100     		.2byte	0x1
 8543 0f32 53       		.byte	0x53
 8544 0f33 52020000 		.4byte	.LVL52-.Ltext0
 8545 0f37 A2020000 		.4byte	.LVL57-.Ltext0
 8546 0f3b 0100     		.2byte	0x1
 8547 0f3d 56       		.byte	0x56
 8548 0f3e A2020000 		.4byte	.LVL57-.Ltext0
 8549 0f42 A5020000 		.4byte	.LVL58-1-.Ltext0
 8550 0f46 0100     		.2byte	0x1
 8551 0f48 53       		.byte	0x53
 8552 0f49 A5020000 		.4byte	.LVL58-1-.Ltext0
 8553 0f4d E0020000 		.4byte	.LVL65-.Ltext0
 8554 0f51 0100     		.2byte	0x1
 8555 0f53 56       		.byte	0x56
 8556 0f54 E0020000 		.4byte	.LVL65-.Ltext0
 8557 0f58 E3020000 		.4byte	.LVL66-1-.Ltext0
 8558 0f5c 0100     		.2byte	0x1
 8559 0f5e 53       		.byte	0x53
 8560 0f5f E3020000 		.4byte	.LVL66-1-.Ltext0
 8561 0f63 1A030000 		.4byte	.LFE70-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 213


 8562 0f67 0100     		.2byte	0x1
 8563 0f69 56       		.byte	0x56
 8564 0f6a 00000000 		.4byte	0
 8565 0f6e 00000000 		.4byte	0
 8566              	.LLST29:
 8567 0f72 C6020000 		.4byte	.LVL61-.Ltext0
 8568 0f76 D6020000 		.4byte	.LVL62-.Ltext0
 8569 0f7a 0100     		.2byte	0x1
 8570 0f7c 55       		.byte	0x55
 8571 0f7d D6020000 		.4byte	.LVL62-.Ltext0
 8572 0f81 D8020000 		.4byte	.LVL63-.Ltext0
 8573 0f85 0300     		.2byte	0x3
 8574 0f87 75       		.byte	0x75
 8575 0f88 7E       		.sleb128 -2
 8576 0f89 9F       		.byte	0x9f
 8577 0f8a D8020000 		.4byte	.LVL63-.Ltext0
 8578 0f8e DE020000 		.4byte	.LVL64-.Ltext0
 8579 0f92 0100     		.2byte	0x1
 8580 0f94 55       		.byte	0x55
 8581 0f95 DE020000 		.4byte	.LVL64-.Ltext0
 8582 0f99 E0020000 		.4byte	.LVL65-.Ltext0
 8583 0f9d 0300     		.2byte	0x3
 8584 0f9f 75       		.byte	0x75
 8585 0fa0 7F       		.sleb128 -1
 8586 0fa1 9F       		.byte	0x9f
 8587 0fa2 00000000 		.4byte	0
 8588 0fa6 00000000 		.4byte	0
 8589              	.LLST30:
 8590 0faa 30020000 		.4byte	.LVL50-.Ltext0
 8591 0fae 72020000 		.4byte	.LVL54-.Ltext0
 8592 0fb2 0200     		.2byte	0x2
 8593 0fb4 30       		.byte	0x30
 8594 0fb5 9F       		.byte	0x9f
 8595 0fb6 72020000 		.4byte	.LVL54-.Ltext0
 8596 0fba 76020000 		.4byte	.LVL55-.Ltext0
 8597 0fbe 0100     		.2byte	0x1
 8598 0fc0 50       		.byte	0x50
 8599 0fc1 76020000 		.4byte	.LVL55-.Ltext0
 8600 0fc5 A2020000 		.4byte	.LVL57-.Ltext0
 8601 0fc9 0100     		.2byte	0x1
 8602 0fcb 57       		.byte	0x57
 8603 0fcc A2020000 		.4byte	.LVL57-.Ltext0
 8604 0fd0 A5020000 		.4byte	.LVL58-1-.Ltext0
 8605 0fd4 0100     		.2byte	0x1
 8606 0fd6 52       		.byte	0x52
 8607 0fd7 A5020000 		.4byte	.LVL58-1-.Ltext0
 8608 0fdb E0020000 		.4byte	.LVL65-.Ltext0
 8609 0fdf 0100     		.2byte	0x1
 8610 0fe1 57       		.byte	0x57
 8611 0fe2 E0020000 		.4byte	.LVL65-.Ltext0
 8612 0fe6 E3020000 		.4byte	.LVL66-1-.Ltext0
 8613 0fea 0100     		.2byte	0x1
 8614 0fec 52       		.byte	0x52
 8615 0fed E3020000 		.4byte	.LVL66-1-.Ltext0
 8616 0ff1 14030000 		.4byte	.LVL70-.Ltext0
 8617 0ff5 0100     		.2byte	0x1
 8618 0ff7 57       		.byte	0x57
ARM GAS  /tmp/ccpGcYbE.s 			page 214


 8619 0ff8 14030000 		.4byte	.LVL70-.Ltext0
 8620 0ffc 1A030000 		.4byte	.LFE70-.Ltext0
 8621 1000 0200     		.2byte	0x2
 8622 1002 30       		.byte	0x30
 8623 1003 9F       		.byte	0x9f
 8624 1004 00000000 		.4byte	0
 8625 1008 00000000 		.4byte	0
 8626              	.LLST17:
 8627 100c 7E010000 		.4byte	.LFB69-.Ltext0
 8628 1010 82010000 		.4byte	.LCFI3-.Ltext0
 8629 1014 0200     		.2byte	0x2
 8630 1016 7D       		.byte	0x7d
 8631 1017 00       		.sleb128 0
 8632 1018 82010000 		.4byte	.LCFI3-.Ltext0
 8633 101c 30020000 		.4byte	.LFE69-.Ltext0
 8634 1020 0200     		.2byte	0x2
 8635 1022 7D       		.byte	0x7d
 8636 1023 18       		.sleb128 24
 8637 1024 00000000 		.4byte	0
 8638 1028 00000000 		.4byte	0
 8639              	.LLST18:
 8640 102c 7E010000 		.4byte	.LVL33-.Ltext0
 8641 1030 88010000 		.4byte	.LVL34-.Ltext0
 8642 1034 0100     		.2byte	0x1
 8643 1036 50       		.byte	0x50
 8644 1037 88010000 		.4byte	.LVL34-.Ltext0
 8645 103b FA010000 		.4byte	.LVL41-.Ltext0
 8646 103f 0100     		.2byte	0x1
 8647 1041 54       		.byte	0x54
 8648 1042 FA010000 		.4byte	.LVL41-.Ltext0
 8649 1046 FD010000 		.4byte	.LVL42-1-.Ltext0
 8650 104a 0100     		.2byte	0x1
 8651 104c 50       		.byte	0x50
 8652 104d FD010000 		.4byte	.LVL42-1-.Ltext0
 8653 1051 18020000 		.4byte	.LVL45-.Ltext0
 8654 1055 0100     		.2byte	0x1
 8655 1057 54       		.byte	0x54
 8656 1058 18020000 		.4byte	.LVL45-.Ltext0
 8657 105c 1B020000 		.4byte	.LVL46-1-.Ltext0
 8658 1060 0100     		.2byte	0x1
 8659 1062 50       		.byte	0x50
 8660 1063 1B020000 		.4byte	.LVL46-1-.Ltext0
 8661 1067 30020000 		.4byte	.LFE69-.Ltext0
 8662 106b 0100     		.2byte	0x1
 8663 106d 54       		.byte	0x54
 8664 106e 00000000 		.4byte	0
 8665 1072 00000000 		.4byte	0
 8666              	.LLST19:
 8667 1076 7E010000 		.4byte	.LVL33-.Ltext0
 8668 107a B5010000 		.4byte	.LVL36-1-.Ltext0
 8669 107e 0100     		.2byte	0x1
 8670 1080 51       		.byte	0x51
 8671 1081 B5010000 		.4byte	.LVL36-1-.Ltext0
 8672 1085 20020000 		.4byte	.LVL47-.Ltext0
 8673 1089 0100     		.2byte	0x1
 8674 108b 55       		.byte	0x55
 8675 108c 20020000 		.4byte	.LVL47-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 215


 8676 1090 26020000 		.4byte	.LVL48-.Ltext0
 8677 1094 0300     		.2byte	0x3
 8678 1096 75       		.byte	0x75
 8679 1097 01       		.sleb128 1
 8680 1098 9F       		.byte	0x9f
 8681 1099 2A020000 		.4byte	.LVL49-.Ltext0
 8682 109d 30020000 		.4byte	.LFE69-.Ltext0
 8683 10a1 0100     		.2byte	0x1
 8684 10a3 51       		.byte	0x51
 8685 10a4 00000000 		.4byte	0
 8686 10a8 00000000 		.4byte	0
 8687              	.LLST20:
 8688 10ac 7E010000 		.4byte	.LVL33-.Ltext0
 8689 10b0 B5010000 		.4byte	.LVL36-1-.Ltext0
 8690 10b4 0100     		.2byte	0x1
 8691 10b6 52       		.byte	0x52
 8692 10b7 B5010000 		.4byte	.LVL36-1-.Ltext0
 8693 10bb 2A020000 		.4byte	.LVL49-.Ltext0
 8694 10bf 0400     		.2byte	0x4
 8695 10c1 F3       		.byte	0xf3
 8696 10c2 01       		.uleb128 0x1
 8697 10c3 52       		.byte	0x52
 8698 10c4 9F       		.byte	0x9f
 8699 10c5 2A020000 		.4byte	.LVL49-.Ltext0
 8700 10c9 30020000 		.4byte	.LFE69-.Ltext0
 8701 10cd 0100     		.2byte	0x1
 8702 10cf 52       		.byte	0x52
 8703 10d0 00000000 		.4byte	0
 8704 10d4 00000000 		.4byte	0
 8705              	.LLST21:
 8706 10d8 7E010000 		.4byte	.LVL33-.Ltext0
 8707 10dc A0010000 		.4byte	.LVL35-.Ltext0
 8708 10e0 0100     		.2byte	0x1
 8709 10e2 53       		.byte	0x53
 8710 10e3 A0010000 		.4byte	.LVL35-.Ltext0
 8711 10e7 FA010000 		.4byte	.LVL41-.Ltext0
 8712 10eb 0100     		.2byte	0x1
 8713 10ed 56       		.byte	0x56
 8714 10ee FA010000 		.4byte	.LVL41-.Ltext0
 8715 10f2 FD010000 		.4byte	.LVL42-1-.Ltext0
 8716 10f6 0100     		.2byte	0x1
 8717 10f8 53       		.byte	0x53
 8718 10f9 FD010000 		.4byte	.LVL42-1-.Ltext0
 8719 10fd 18020000 		.4byte	.LVL45-.Ltext0
 8720 1101 0100     		.2byte	0x1
 8721 1103 56       		.byte	0x56
 8722 1104 18020000 		.4byte	.LVL45-.Ltext0
 8723 1108 1B020000 		.4byte	.LVL46-1-.Ltext0
 8724 110c 0100     		.2byte	0x1
 8725 110e 53       		.byte	0x53
 8726 110f 1B020000 		.4byte	.LVL46-1-.Ltext0
 8727 1113 30020000 		.4byte	.LFE69-.Ltext0
 8728 1117 0100     		.2byte	0x1
 8729 1119 56       		.byte	0x56
 8730 111a 00000000 		.4byte	0
 8731 111e 00000000 		.4byte	0
 8732              	.LLST22:
ARM GAS  /tmp/ccpGcYbE.s 			page 216


 8733 1122 06020000 		.4byte	.LVL43-.Ltext0
 8734 1126 16020000 		.4byte	.LVL44-.Ltext0
 8735 112a 0100     		.2byte	0x1
 8736 112c 55       		.byte	0x55
 8737 112d 16020000 		.4byte	.LVL44-.Ltext0
 8738 1131 18020000 		.4byte	.LVL45-.Ltext0
 8739 1135 0300     		.2byte	0x3
 8740 1137 75       		.byte	0x75
 8741 1138 7E       		.sleb128 -2
 8742 1139 9F       		.byte	0x9f
 8743 113a 00000000 		.4byte	0
 8744 113e 00000000 		.4byte	0
 8745              	.LLST23:
 8746 1142 7E010000 		.4byte	.LVL33-.Ltext0
 8747 1146 B8010000 		.4byte	.LVL37-.Ltext0
 8748 114a 0200     		.2byte	0x2
 8749 114c 30       		.byte	0x30
 8750 114d 9F       		.byte	0x9f
 8751 114e B8010000 		.4byte	.LVL37-.Ltext0
 8752 1152 C0010000 		.4byte	.LVL38-.Ltext0
 8753 1156 0100     		.2byte	0x1
 8754 1158 50       		.byte	0x50
 8755 1159 C0010000 		.4byte	.LVL38-.Ltext0
 8756 115d FA010000 		.4byte	.LVL41-.Ltext0
 8757 1161 0100     		.2byte	0x1
 8758 1163 57       		.byte	0x57
 8759 1164 FA010000 		.4byte	.LVL41-.Ltext0
 8760 1168 FD010000 		.4byte	.LVL42-1-.Ltext0
 8761 116c 0100     		.2byte	0x1
 8762 116e 52       		.byte	0x52
 8763 116f FD010000 		.4byte	.LVL42-1-.Ltext0
 8764 1173 18020000 		.4byte	.LVL45-.Ltext0
 8765 1177 0100     		.2byte	0x1
 8766 1179 57       		.byte	0x57
 8767 117a 18020000 		.4byte	.LVL45-.Ltext0
 8768 117e 1B020000 		.4byte	.LVL46-1-.Ltext0
 8769 1182 0100     		.2byte	0x1
 8770 1184 52       		.byte	0x52
 8771 1185 1B020000 		.4byte	.LVL46-1-.Ltext0
 8772 1189 2A020000 		.4byte	.LVL49-.Ltext0
 8773 118d 0100     		.2byte	0x1
 8774 118f 57       		.byte	0x57
 8775 1190 2A020000 		.4byte	.LVL49-.Ltext0
 8776 1194 30020000 		.4byte	.LFE69-.Ltext0
 8777 1198 0200     		.2byte	0x2
 8778 119a 30       		.byte	0x30
 8779 119b 9F       		.byte	0x9f
 8780 119c 00000000 		.4byte	0
 8781 11a0 00000000 		.4byte	0
 8782              	.LLST15:
 8783 11a4 52010000 		.4byte	.LFB66-.Ltext0
 8784 11a8 54010000 		.4byte	.LCFI2-.Ltext0
 8785 11ac 0200     		.2byte	0x2
 8786 11ae 7D       		.byte	0x7d
 8787 11af 00       		.sleb128 0
 8788 11b0 54010000 		.4byte	.LCFI2-.Ltext0
 8789 11b4 7E010000 		.4byte	.LFE66-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 217


 8790 11b8 0200     		.2byte	0x2
 8791 11ba 7D       		.byte	0x7d
 8792 11bb 08       		.sleb128 8
 8793 11bc 00000000 		.4byte	0
 8794 11c0 00000000 		.4byte	0
 8795              	.LLST16:
 8796 11c4 52010000 		.4byte	.LVL29-.Ltext0
 8797 11c8 6B010000 		.4byte	.LVL30-1-.Ltext0
 8798 11cc 0100     		.2byte	0x1
 8799 11ce 50       		.byte	0x50
 8800 11cf 6B010000 		.4byte	.LVL30-1-.Ltext0
 8801 11d3 7A010000 		.4byte	.LVL31-.Ltext0
 8802 11d7 0100     		.2byte	0x1
 8803 11d9 54       		.byte	0x54
 8804 11da 7A010000 		.4byte	.LVL31-.Ltext0
 8805 11de 7C010000 		.4byte	.LVL32-.Ltext0
 8806 11e2 0100     		.2byte	0x1
 8807 11e4 50       		.byte	0x50
 8808 11e5 7C010000 		.4byte	.LVL32-.Ltext0
 8809 11e9 7E010000 		.4byte	.LFE66-.Ltext0
 8810 11ed 0100     		.2byte	0x1
 8811 11ef 54       		.byte	0x54
 8812 11f0 00000000 		.4byte	0
 8813 11f4 00000000 		.4byte	0
 8814              	.LLST10:
 8815 11f8 78000000 		.4byte	.LFB65-.Ltext0
 8816 11fc 7A000000 		.4byte	.LCFI1-.Ltext0
 8817 1200 0200     		.2byte	0x2
 8818 1202 7D       		.byte	0x7d
 8819 1203 00       		.sleb128 0
 8820 1204 7A000000 		.4byte	.LCFI1-.Ltext0
 8821 1208 50010000 		.4byte	.LFE65-.Ltext0
 8822 120c 0200     		.2byte	0x2
 8823 120e 7D       		.byte	0x7d
 8824 120f 10       		.sleb128 16
 8825 1210 00000000 		.4byte	0
 8826 1214 00000000 		.4byte	0
 8827              	.LLST11:
 8828 1218 78000000 		.4byte	.LVL8-.Ltext0
 8829 121c 91000000 		.4byte	.LVL9-1-.Ltext0
 8830 1220 0100     		.2byte	0x1
 8831 1222 50       		.byte	0x50
 8832 1223 91000000 		.4byte	.LVL9-1-.Ltext0
 8833 1227 46010000 		.4byte	.LVL26-.Ltext0
 8834 122b 0100     		.2byte	0x1
 8835 122d 55       		.byte	0x55
 8836 122e 46010000 		.4byte	.LVL26-.Ltext0
 8837 1232 48010000 		.4byte	.LVL27-.Ltext0
 8838 1236 0100     		.2byte	0x1
 8839 1238 50       		.byte	0x50
 8840 1239 48010000 		.4byte	.LVL27-.Ltext0
 8841 123d 4A010000 		.4byte	.LVL28-.Ltext0
 8842 1241 0100     		.2byte	0x1
 8843 1243 55       		.byte	0x55
 8844 1244 4A010000 		.4byte	.LVL28-.Ltext0
 8845 1248 50010000 		.4byte	.LFE65-.Ltext0
 8846 124c 0400     		.2byte	0x4
ARM GAS  /tmp/ccpGcYbE.s 			page 218


 8847 124e F3       		.byte	0xf3
 8848 124f 01       		.uleb128 0x1
 8849 1250 50       		.byte	0x50
 8850 1251 9F       		.byte	0x9f
 8851 1252 00000000 		.4byte	0
 8852 1256 00000000 		.4byte	0
 8853              	.LLST12:
 8854 125a 9A000000 		.4byte	.LVL10-.Ltext0
 8855 125e 1A010000 		.4byte	.LVL23-.Ltext0
 8856 1262 0100     		.2byte	0x1
 8857 1264 55       		.byte	0x55
 8858 1265 40010000 		.4byte	.LVL24-.Ltext0
 8859 1269 46010000 		.4byte	.LVL26-.Ltext0
 8860 126d 0100     		.2byte	0x1
 8861 126f 55       		.byte	0x55
 8862 1270 00000000 		.4byte	0
 8863 1274 00000000 		.4byte	0
 8864              	.LLST13:
 8865 1278 9A000000 		.4byte	.LVL10-.Ltext0
 8866 127c A8000000 		.4byte	.LVL11-.Ltext0
 8867 1280 0200     		.2byte	0x2
 8868 1282 30       		.byte	0x30
 8869 1283 9F       		.byte	0x9f
 8870 1284 A8000000 		.4byte	.LVL11-.Ltext0
 8871 1288 BC000000 		.4byte	.LVL13-.Ltext0
 8872 128c 0100     		.2byte	0x1
 8873 128e 51       		.byte	0x51
 8874 128f BC000000 		.4byte	.LVL13-.Ltext0
 8875 1293 C2000000 		.4byte	.LVL14-.Ltext0
 8876 1297 0100     		.2byte	0x1
 8877 1299 53       		.byte	0x53
 8878 129a C2000000 		.4byte	.LVL14-.Ltext0
 8879 129e C4000000 		.4byte	.LVL15-.Ltext0
 8880 12a2 0200     		.2byte	0x2
 8881 12a4 72       		.byte	0x72
 8882 12a5 10       		.sleb128 16
 8883 12a6 C4000000 		.4byte	.LVL15-.Ltext0
 8884 12aa CC000000 		.4byte	.LVL16-.Ltext0
 8885 12ae 0100     		.2byte	0x1
 8886 12b0 51       		.byte	0x51
 8887 12b1 D0000000 		.4byte	.LVL17-.Ltext0
 8888 12b5 D4000000 		.4byte	.LVL18-.Ltext0
 8889 12b9 0100     		.2byte	0x1
 8890 12bb 51       		.byte	0x51
 8891 12bc D4000000 		.4byte	.LVL18-.Ltext0
 8892 12c0 D8000000 		.4byte	.LVL19-.Ltext0
 8893 12c4 0100     		.2byte	0x1
 8894 12c6 53       		.byte	0x53
 8895 12c7 D8000000 		.4byte	.LVL19-.Ltext0
 8896 12cb E0000000 		.4byte	.LVL20-.Ltext0
 8897 12cf 0200     		.2byte	0x2
 8898 12d1 72       		.byte	0x72
 8899 12d2 0C       		.sleb128 12
 8900 12d3 E0000000 		.4byte	.LVL20-.Ltext0
 8901 12d7 E9000000 		.4byte	.LVL21-1-.Ltext0
 8902 12db 0E00     		.2byte	0xe
 8903 12dd 75       		.byte	0x75
ARM GAS  /tmp/ccpGcYbE.s 			page 219


 8904 12de 08       		.sleb128 8
 8905 12df 06       		.byte	0x6
 8906 12e0 75       		.byte	0x75
 8907 12e1 10       		.sleb128 16
 8908 12e2 06       		.byte	0x6
 8909 12e3 21       		.byte	0x21
 8910 12e4 70       		.byte	0x70
 8911 12e5 00       		.sleb128 0
 8912 12e6 21       		.byte	0x21
 8913 12e7 71       		.byte	0x71
 8914 12e8 00       		.sleb128 0
 8915 12e9 21       		.byte	0x21
 8916 12ea 9F       		.byte	0x9f
 8917 12eb 40010000 		.4byte	.LVL24-.Ltext0
 8918 12ef 43010000 		.4byte	.LVL25-1-.Ltext0
 8919 12f3 0E00     		.2byte	0xe
 8920 12f5 75       		.byte	0x75
 8921 12f6 08       		.sleb128 8
 8922 12f7 06       		.byte	0x6
 8923 12f8 75       		.byte	0x75
 8924 12f9 10       		.sleb128 16
 8925 12fa 06       		.byte	0x6
 8926 12fb 21       		.byte	0x21
 8927 12fc 70       		.byte	0x70
 8928 12fd 00       		.sleb128 0
 8929 12fe 21       		.byte	0x21
 8930 12ff 71       		.byte	0x71
 8931 1300 00       		.sleb128 0
 8932 1301 21       		.byte	0x21
 8933 1302 9F       		.byte	0x9f
 8934 1303 00000000 		.4byte	0
 8935 1307 00000000 		.4byte	0
 8936              	.LLST14:
 8937 130b EA000000 		.4byte	.LVL21-.Ltext0
 8938 130f EC000000 		.4byte	.LVL22-.Ltext0
 8939 1313 0100     		.2byte	0x1
 8940 1315 50       		.byte	0x50
 8941 1316 00000000 		.4byte	0
 8942 131a 00000000 		.4byte	0
 8943              	.LLST0:
 8944 131e 1A000000 		.4byte	.LFB128-.Ltext0
 8945 1322 1C000000 		.4byte	.LCFI0-.Ltext0
 8946 1326 0200     		.2byte	0x2
 8947 1328 7D       		.byte	0x7d
 8948 1329 00       		.sleb128 0
 8949 132a 1C000000 		.4byte	.LCFI0-.Ltext0
 8950 132e 76000000 		.4byte	.LFE128-.Ltext0
 8951 1332 0200     		.2byte	0x2
 8952 1334 7D       		.byte	0x7d
 8953 1335 18       		.sleb128 24
 8954 1336 00000000 		.4byte	0
 8955 133a 00000000 		.4byte	0
 8956              	.LLST1:
 8957 133e 1A000000 		.4byte	.LVL1-.Ltext0
 8958 1342 24000000 		.4byte	.LVL2-.Ltext0
 8959 1346 0100     		.2byte	0x1
 8960 1348 50       		.byte	0x50
ARM GAS  /tmp/ccpGcYbE.s 			page 220


 8961 1349 24000000 		.4byte	.LVL2-.Ltext0
 8962 134d 76000000 		.4byte	.LFE128-.Ltext0
 8963 1351 0100     		.2byte	0x1
 8964 1353 54       		.byte	0x54
 8965 1354 00000000 		.4byte	0
 8966 1358 00000000 		.4byte	0
 8967              	.LLST2:
 8968 135c 1A000000 		.4byte	.LVL1-.Ltext0
 8969 1360 24000000 		.4byte	.LVL2-.Ltext0
 8970 1364 0100     		.2byte	0x1
 8971 1366 51       		.byte	0x51
 8972 1367 24000000 		.4byte	.LVL2-.Ltext0
 8973 136b 76000000 		.4byte	.LFE128-.Ltext0
 8974 136f 0100     		.2byte	0x1
 8975 1371 56       		.byte	0x56
 8976 1372 00000000 		.4byte	0
 8977 1376 00000000 		.4byte	0
 8978              	.LLST3:
 8979 137a 1A000000 		.4byte	.LVL1-.Ltext0
 8980 137e 24000000 		.4byte	.LVL2-.Ltext0
 8981 1382 0100     		.2byte	0x1
 8982 1384 52       		.byte	0x52
 8983 1385 24000000 		.4byte	.LVL2-.Ltext0
 8984 1389 76000000 		.4byte	.LFE128-.Ltext0
 8985 138d 0100     		.2byte	0x1
 8986 138f 57       		.byte	0x57
 8987 1390 00000000 		.4byte	0
 8988 1394 00000000 		.4byte	0
 8989              	.LLST4:
 8990 1398 1A000000 		.4byte	.LVL1-.Ltext0
 8991 139c 24000000 		.4byte	.LVL2-.Ltext0
 8992 13a0 0100     		.2byte	0x1
 8993 13a2 53       		.byte	0x53
 8994 13a3 24000000 		.4byte	.LVL2-.Ltext0
 8995 13a7 76000000 		.4byte	.LFE128-.Ltext0
 8996 13ab 0100     		.2byte	0x1
 8997 13ad 55       		.byte	0x55
 8998 13ae 00000000 		.4byte	0
 8999 13b2 00000000 		.4byte	0
 9000              	.LLST5:
 9001 13b6 38000000 		.4byte	.LVL4-.Ltext0
 9002 13ba 68000000 		.4byte	.LVL5-.Ltext0
 9003 13be 0100     		.2byte	0x1
 9004 13c0 56       		.byte	0x56
 9005 13c1 00000000 		.4byte	0
 9006 13c5 00000000 		.4byte	0
 9007              	.LLST6:
 9008 13c9 38000000 		.4byte	.LVL4-.Ltext0
 9009 13cd 68000000 		.4byte	.LVL5-.Ltext0
 9010 13d1 0200     		.2byte	0x2
 9011 13d3 30       		.byte	0x30
 9012 13d4 9F       		.byte	0x9f
 9013 13d5 00000000 		.4byte	0
 9014 13d9 00000000 		.4byte	0
 9015              	.LLST7:
 9016 13dd 38000000 		.4byte	.LVL4-.Ltext0
 9017 13e1 68000000 		.4byte	.LVL5-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 221


 9018 13e5 0100     		.2byte	0x1
 9019 13e7 57       		.byte	0x57
 9020 13e8 00000000 		.4byte	0
 9021 13ec 00000000 		.4byte	0
 9022              	.LLST8:
 9023 13f0 38000000 		.4byte	.LVL4-.Ltext0
 9024 13f4 68000000 		.4byte	.LVL5-.Ltext0
 9025 13f8 0100     		.2byte	0x1
 9026 13fa 55       		.byte	0x55
 9027 13fb 00000000 		.4byte	0
 9028 13ff 00000000 		.4byte	0
 9029              	.LLST9:
 9030 1403 38000000 		.4byte	.LVL4-.Ltext0
 9031 1407 68000000 		.4byte	.LVL5-.Ltext0
 9032 140b 0100     		.2byte	0x1
 9033 140d 54       		.byte	0x54
 9034 140e 00000000 		.4byte	0
 9035 1412 00000000 		.4byte	0
 9036              	.LLST81:
 9037 1416 54080000 		.4byte	.LFB106-.Ltext0
 9038 141a 5A080000 		.4byte	.LCFI20-.Ltext0
 9039 141e 0200     		.2byte	0x2
 9040 1420 7D       		.byte	0x7d
 9041 1421 00       		.sleb128 0
 9042 1422 5A080000 		.4byte	.LCFI20-.Ltext0
 9043 1426 F0080000 		.4byte	.LFE106-.Ltext0
 9044 142a 0200     		.2byte	0x2
 9045 142c 7D       		.byte	0x7d
 9046 142d 08       		.sleb128 8
 9047 142e 00000000 		.4byte	0
 9048 1432 00000000 		.4byte	0
 9049              	.LLST82:
 9050 1436 54080000 		.4byte	.LVL166-.Ltext0
 9051 143a B3080000 		.4byte	.LVL171-1-.Ltext0
 9052 143e 0100     		.2byte	0x1
 9053 1440 50       		.byte	0x50
 9054 1441 B3080000 		.4byte	.LVL171-1-.Ltext0
 9055 1445 B8080000 		.4byte	.LVL172-.Ltext0
 9056 1449 0400     		.2byte	0x4
 9057 144b F3       		.byte	0xf3
 9058 144c 01       		.uleb128 0x1
 9059 144d 50       		.byte	0x50
 9060 144e 9F       		.byte	0x9f
 9061 144f B8080000 		.4byte	.LVL172-.Ltext0
 9062 1453 EE080000 		.4byte	.LVL176-.Ltext0
 9063 1457 0100     		.2byte	0x1
 9064 1459 50       		.byte	0x50
 9065 145a EE080000 		.4byte	.LVL176-.Ltext0
 9066 145e F0080000 		.4byte	.LFE106-.Ltext0
 9067 1462 0400     		.2byte	0x4
 9068 1464 F3       		.byte	0xf3
 9069 1465 01       		.uleb128 0x1
 9070 1466 50       		.byte	0x50
 9071 1467 9F       		.byte	0x9f
 9072 1468 00000000 		.4byte	0
 9073 146c 00000000 		.4byte	0
 9074              	.LLST83:
ARM GAS  /tmp/ccpGcYbE.s 			page 222


 9075 1470 5E080000 		.4byte	.LVL167-.Ltext0
 9076 1474 B3080000 		.4byte	.LVL171-1-.Ltext0
 9077 1478 0100     		.2byte	0x1
 9078 147a 50       		.byte	0x50
 9079 147b B3080000 		.4byte	.LVL171-1-.Ltext0
 9080 147f B8080000 		.4byte	.LVL172-.Ltext0
 9081 1483 0400     		.2byte	0x4
 9082 1485 F3       		.byte	0xf3
 9083 1486 01       		.uleb128 0x1
 9084 1487 50       		.byte	0x50
 9085 1488 9F       		.byte	0x9f
 9086 1489 B8080000 		.4byte	.LVL172-.Ltext0
 9087 148d EC080000 		.4byte	.LVL175-.Ltext0
 9088 1491 0100     		.2byte	0x1
 9089 1493 50       		.byte	0x50
 9090 1494 00000000 		.4byte	0
 9091 1498 00000000 		.4byte	0
 9092              	.LLST84:
 9093 149c 6C080000 		.4byte	.LVL168-.Ltext0
 9094 14a0 78080000 		.4byte	.LVL169-.Ltext0
 9095 14a4 0100     		.2byte	0x1
 9096 14a6 53       		.byte	0x53
 9097 14a7 78080000 		.4byte	.LVL169-.Ltext0
 9098 14ab 7A080000 		.4byte	.LVL170-.Ltext0
 9099 14af 0200     		.2byte	0x2
 9100 14b1 70       		.byte	0x70
 9101 14b2 2C       		.sleb128 44
 9102 14b3 B8080000 		.4byte	.LVL172-.Ltext0
 9103 14b7 C0080000 		.4byte	.LVL173-.Ltext0
 9104 14bb 0100     		.2byte	0x1
 9105 14bd 53       		.byte	0x53
 9106 14be C0080000 		.4byte	.LVL173-.Ltext0
 9107 14c2 C2080000 		.4byte	.LVL174-.Ltext0
 9108 14c6 0200     		.2byte	0x2
 9109 14c8 70       		.byte	0x70
 9110 14c9 2C       		.sleb128 44
 9111 14ca 00000000 		.4byte	0
 9112 14ce 00000000 		.4byte	0
 9113              	.LLST91:
 9114 14d2 4C090000 		.4byte	.LFB107-.Ltext0
 9115 14d6 52090000 		.4byte	.LCFI23-.Ltext0
 9116 14da 0200     		.2byte	0x2
 9117 14dc 7D       		.byte	0x7d
 9118 14dd 00       		.sleb128 0
 9119 14de 52090000 		.4byte	.LCFI23-.Ltext0
 9120 14e2 260A0000 		.4byte	.LFE107-.Ltext0
 9121 14e6 0200     		.2byte	0x2
 9122 14e8 7D       		.byte	0x7d
 9123 14e9 08       		.sleb128 8
 9124 14ea 00000000 		.4byte	0
 9125 14ee 00000000 		.4byte	0
 9126              	.LLST92:
 9127 14f2 4C090000 		.4byte	.LVL185-.Ltext0
 9128 14f6 EF090000 		.4byte	.LVL193-1-.Ltext0
 9129 14fa 0100     		.2byte	0x1
 9130 14fc 50       		.byte	0x50
 9131 14fd EF090000 		.4byte	.LVL193-1-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 223


 9132 1501 F4090000 		.4byte	.LVL194-.Ltext0
 9133 1505 0400     		.2byte	0x4
 9134 1507 F3       		.byte	0xf3
 9135 1508 01       		.uleb128 0x1
 9136 1509 50       		.byte	0x50
 9137 150a 9F       		.byte	0x9f
 9138 150b F4090000 		.4byte	.LVL194-.Ltext0
 9139 150f 240A0000 		.4byte	.LVL201-.Ltext0
 9140 1513 0100     		.2byte	0x1
 9141 1515 50       		.byte	0x50
 9142 1516 240A0000 		.4byte	.LVL201-.Ltext0
 9143 151a 260A0000 		.4byte	.LFE107-.Ltext0
 9144 151e 0400     		.2byte	0x4
 9145 1520 F3       		.byte	0xf3
 9146 1521 01       		.uleb128 0x1
 9147 1522 50       		.byte	0x50
 9148 1523 9F       		.byte	0x9f
 9149 1524 00000000 		.4byte	0
 9150 1528 00000000 		.4byte	0
 9151              	.LLST93:
 9152 152c 56090000 		.4byte	.LVL186-.Ltext0
 9153 1530 EF090000 		.4byte	.LVL193-1-.Ltext0
 9154 1534 0100     		.2byte	0x1
 9155 1536 50       		.byte	0x50
 9156 1537 EF090000 		.4byte	.LVL193-1-.Ltext0
 9157 153b F4090000 		.4byte	.LVL194-.Ltext0
 9158 153f 0400     		.2byte	0x4
 9159 1541 F3       		.byte	0xf3
 9160 1542 01       		.uleb128 0x1
 9161 1543 50       		.byte	0x50
 9162 1544 9F       		.byte	0x9f
 9163 1545 F4090000 		.4byte	.LVL194-.Ltext0
 9164 1549 220A0000 		.4byte	.LVL200-.Ltext0
 9165 154d 0100     		.2byte	0x1
 9166 154f 50       		.byte	0x50
 9167 1550 00000000 		.4byte	0
 9168 1554 00000000 		.4byte	0
 9169              	.LLST94:
 9170 1558 6E090000 		.4byte	.LVL187-.Ltext0
 9171 155c 7E090000 		.4byte	.LVL188-.Ltext0
 9172 1560 0100     		.2byte	0x1
 9173 1562 53       		.byte	0x53
 9174 1563 7E090000 		.4byte	.LVL188-.Ltext0
 9175 1567 80090000 		.4byte	.LVL189-.Ltext0
 9176 156b 0200     		.2byte	0x2
 9177 156d 70       		.byte	0x70
 9178 156e 24       		.sleb128 36
 9179 156f B0090000 		.4byte	.LVL190-.Ltext0
 9180 1573 BC090000 		.4byte	.LVL191-.Ltext0
 9181 1577 0100     		.2byte	0x1
 9182 1579 53       		.byte	0x53
 9183 157a BC090000 		.4byte	.LVL191-.Ltext0
 9184 157e BE090000 		.4byte	.LVL192-.Ltext0
 9185 1582 0200     		.2byte	0x2
 9186 1584 70       		.byte	0x70
 9187 1585 2C       		.sleb128 44
 9188 1586 F4090000 		.4byte	.LVL194-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 224


 9189 158a F6090000 		.4byte	.LVL195-.Ltext0
 9190 158e 0100     		.2byte	0x1
 9191 1590 53       		.byte	0x53
 9192 1591 F6090000 		.4byte	.LVL195-.Ltext0
 9193 1595 F8090000 		.4byte	.LVL196-.Ltext0
 9194 1599 0200     		.2byte	0x2
 9195 159b 70       		.byte	0x70
 9196 159c 24       		.sleb128 36
 9197 159d 020A0000 		.4byte	.LVL197-.Ltext0
 9198 15a1 080A0000 		.4byte	.LVL198-.Ltext0
 9199 15a5 0100     		.2byte	0x1
 9200 15a7 53       		.byte	0x53
 9201 15a8 080A0000 		.4byte	.LVL198-.Ltext0
 9202 15ac 0A0A0000 		.4byte	.LVL199-.Ltext0
 9203 15b0 0200     		.2byte	0x2
 9204 15b2 70       		.byte	0x70
 9205 15b3 2C       		.sleb128 44
 9206 15b4 00000000 		.4byte	0
 9207 15b8 00000000 		.4byte	0
 9208              		.section	.debug_aranges,"",%progbits
 9209 0000 1C000000 		.4byte	0x1c
 9210 0004 0200     		.2byte	0x2
 9211 0006 00000000 		.4byte	.Ldebug_info0
 9212 000a 04       		.byte	0x4
 9213 000b 00       		.byte	0
 9214 000c 0000     		.2byte	0
 9215 000e 0000     		.2byte	0
 9216 0010 00000000 		.4byte	.Ltext0
 9217 0014 EE0C0000 		.4byte	.Letext0-.Ltext0
 9218 0018 00000000 		.4byte	0
 9219 001c 00000000 		.4byte	0
 9220              		.section	.debug_ranges,"",%progbits
 9221              	.Ldebug_ranges0:
 9222 0000 94000000 		.4byte	.LBB8-.Ltext0
 9223 0004 96000000 		.4byte	.LBE8-.Ltext0
 9224 0008 9A000000 		.4byte	.LBB12-.Ltext0
 9225 000c 1A010000 		.4byte	.LBE12-.Ltext0
 9226 0010 40010000 		.4byte	.LBB13-.Ltext0
 9227 0014 46010000 		.4byte	.LBE13-.Ltext0
 9228 0018 00000000 		.4byte	0
 9229 001c 00000000 		.4byte	0
 9230 0020 F2050000 		.4byte	.LBB14-.Ltext0
 9231 0024 FC050000 		.4byte	.LBE14-.Ltext0
 9232 0028 00060000 		.4byte	.LBB15-.Ltext0
 9233 002c 04060000 		.4byte	.LBE15-.Ltext0
 9234 0030 00000000 		.4byte	0
 9235 0034 00000000 		.4byte	0
 9236 0038 BE060000 		.4byte	.LBB16-.Ltext0
 9237 003c C6060000 		.4byte	.LBE16-.Ltext0
 9238 0040 CA060000 		.4byte	.LBB17-.Ltext0
 9239 0044 CE060000 		.4byte	.LBE17-.Ltext0
 9240 0048 00000000 		.4byte	0
 9241 004c 00000000 		.4byte	0
 9242 0050 5E080000 		.4byte	.LBB24-.Ltext0
 9243 0054 B6080000 		.4byte	.LBE24-.Ltext0
 9244 0058 B8080000 		.4byte	.LBB27-.Ltext0
 9245 005c EC080000 		.4byte	.LBE27-.Ltext0
ARM GAS  /tmp/ccpGcYbE.s 			page 225


 9246 0060 00000000 		.4byte	0
 9247 0064 00000000 		.4byte	0
 9248 0068 56090000 		.4byte	.LBB30-.Ltext0
 9249 006c F2090000 		.4byte	.LBE30-.Ltext0
 9250 0070 F4090000 		.4byte	.LBB33-.Ltext0
 9251 0074 220A0000 		.4byte	.LBE33-.Ltext0
 9252 0078 00000000 		.4byte	0
 9253 007c 00000000 		.4byte	0
 9254              		.section	.debug_line,"",%progbits
 9255              	.Ldebug_line0:
 9256 0000 F6080000 		.section	.debug_str,"MS",%progbits,1
 9256      02006701 
 9256      00000201 
 9256      FB0E0D00 
 9256      01010101 
 9257              	.LASF167:
 9258 0000 48414C5F 		.ascii	"HAL_RCC_GetPCLK1Freq\000"
 9258      5243435F 
 9258      47657450 
 9258      434C4B31 
 9258      46726571 
 9259              	.LASF154:
 9260 0015 48414C5F 		.ascii	"HAL_USART_TransmitReceive\000"
 9260      55534152 
 9260      545F5472 
 9260      616E736D 
 9260      69745265 
 9261              	.LASF94:
 9262 002f 55534152 		.ascii	"USART_HandleTypeDef\000"
 9262      545F4861 
 9262      6E646C65 
 9262      54797065 
 9262      44656600 
 9263              	.LASF156:
 9264 0043 48414C5F 		.ascii	"HAL_USART_Receive\000"
 9264      55534152 
 9264      545F5265 
 9264      63656976 
 9264      6500
 9265              	.LASF80:
 9266 0055 48414C5F 		.ascii	"HAL_USART_STATE_BUSY_TX_RX\000"
 9266      55534152 
 9266      545F5354 
 9266      4154455F 
 9266      42555359 
 9267              	.LASF99:
 9268 0070 48414C5F 		.ascii	"HAL_TickFreqTypeDef\000"
 9268      5469636B 
 9268      46726571 
 9268      54797065 
 9268      44656600 
 9269              	.LASF159:
 9270 0084 48414C5F 		.ascii	"HAL_USART_MspInit\000"
 9270      55534152 
 9270      545F4D73 
 9270      70496E69 
 9270      7400
ARM GAS  /tmp/ccpGcYbE.s 			page 226


 9271              	.LASF133:
 9272 0096 48414C5F 		.ascii	"HAL_USART_TxHalfCpltCallback\000"
 9272      55534152 
 9272      545F5478 
 9272      48616C66 
 9272      43706C74 
 9273              	.LASF31:
 9274 00b3 466C6167 		.ascii	"FlagStatus\000"
 9274      53746174 
 9274      757300
 9275              	.LASF48:
 9276 00be 444D415F 		.ascii	"DMA_InitTypeDef\000"
 9276      496E6974 
 9276      54797065 
 9276      44656600 
 9277              	.LASF3:
 9278 00ce 5F5F7569 		.ascii	"__uint8_t\000"
 9278      6E74385F 
 9278      7400
 9279              	.LASF129:
 9280 00d8 48414C5F 		.ascii	"HAL_USART_ErrorCallback\000"
 9280      55534152 
 9280      545F4572 
 9280      726F7243 
 9280      616C6C62 
 9281              	.LASF35:
 9282 00f0 48414C5F 		.ascii	"HAL_BUSY\000"
 9282      42555359 
 9282      00
 9283              	.LASF151:
 9284 00f9 48414C5F 		.ascii	"HAL_USART_TransmitReceive_IT\000"
 9284      55534152 
 9284      545F5472 
 9284      616E736D 
 9284      69745265 
 9285              	.LASF21:
 9286 0116 41504250 		.ascii	"APBPrescTable\000"
 9286      72657363 
 9286      5461626C 
 9286      6500
 9287              	.LASF113:
 9288 0124 55534152 		.ascii	"USART_EndRxTransfer\000"
 9288      545F456E 
 9288      64527854 
 9288      72616E73 
 9288      66657200 
 9289              	.LASF51:
 9290 0138 48414C5F 		.ascii	"HAL_DMA_STATE_BUSY\000"
 9290      444D415F 
 9290      53544154 
 9290      455F4255 
 9290      535900
 9291              	.LASF137:
 9292 014b 63723369 		.ascii	"cr3its\000"
 9292      747300
 9293              	.LASF95:
 9294 0152 48414C5F 		.ascii	"HAL_TICK_FREQ_10HZ\000"
ARM GAS  /tmp/ccpGcYbE.s 			page 227


 9294      5449434B 
 9294      5F465245 
 9294      515F3130 
 9294      485A00
 9295              	.LASF115:
 9296 0165 55534152 		.ascii	"USART_EndTxTransfer\000"
 9296      545F456E 
 9296      64547854 
 9296      72616E73 
 9296      66657200 
 9297              	.LASF128:
 9298 0179 48414C5F 		.ascii	"HAL_USART_GetState\000"
 9298      55534152 
 9298      545F4765 
 9298      74537461 
 9298      746500
 9299              	.LASF11:
 9300 018c 6C6F6E67 		.ascii	"long long unsigned int\000"
 9300      206C6F6E 
 9300      6720756E 
 9300      7369676E 
 9300      65642069 
 9301              	.LASF76:
 9302 01a3 48414C5F 		.ascii	"HAL_USART_STATE_READY\000"
 9302      55534152 
 9302      545F5354 
 9302      4154455F 
 9302      52454144 
 9303              	.LASF18:
 9304 01b9 49544D5F 		.ascii	"ITM_RxBuffer\000"
 9304      52784275 
 9304      66666572 
 9304      00
 9305              	.LASF88:
 9306 01c6 54785866 		.ascii	"TxXferCount\000"
 9306      6572436F 
 9306      756E7400 
 9307              	.LASF134:
 9308 01d2 48414C5F 		.ascii	"HAL_USART_TxCpltCallback\000"
 9308      55534152 
 9308      545F5478 
 9308      43706C74 
 9308      43616C6C 
 9309              	.LASF10:
 9310 01eb 6C6F6E67 		.ascii	"long long int\000"
 9310      206C6F6E 
 9310      6720696E 
 9310      7400
 9311              	.LASF0:
 9312 01f9 7369676E 		.ascii	"signed char\000"
 9312      65642063 
 9312      68617200 
 9313              	.LASF28:
 9314 0205 47545052 		.ascii	"GTPR\000"
 9314      00
 9315              	.LASF67:
 9316 020a 42617564 		.ascii	"BaudRate\000"
ARM GAS  /tmp/ccpGcYbE.s 			page 228


 9316      52617465 
 9316      00
 9317              	.LASF85:
 9318 0213 5F5F5553 		.ascii	"__USART_HandleTypeDef\000"
 9318      4152545F 
 9318      48616E64 
 9318      6C655479 
 9318      70654465 
 9319              	.LASF164:
 9320 0229 48414C5F 		.ascii	"HAL_DMA_Start_IT\000"
 9320      444D415F 
 9320      53746172 
 9320      745F4954 
 9320      00
 9321              	.LASF108:
 9322 023a 55534152 		.ascii	"USART_Transmit_IT\000"
 9322      545F5472 
 9322      616E736D 
 9322      69745F49 
 9322      5400
 9323              	.LASF102:
 9324 024c 746D7072 		.ascii	"tmpreg\000"
 9324      656700
 9325              	.LASF40:
 9326 0253 48414C5F 		.ascii	"HAL_LockTypeDef\000"
 9326      4C6F636B 
 9326      54797065 
 9326      44656600 
 9327              	.LASF161:
 9328 0263 48414C5F 		.ascii	"HAL_USART_Init\000"
 9328      55534152 
 9328      545F496E 
 9328      697400
 9329              	.LASF140:
 9330 0272 41626F72 		.ascii	"AbortCplt\000"
 9330      7443706C 
 9330      7400
 9331              	.LASF60:
 9332 027c 58666572 		.ascii	"XferHalfCpltCallback\000"
 9332      48616C66 
 9332      43706C74 
 9332      43616C6C 
 9332      6261636B 
 9333              	.LASF7:
 9334 0291 6C6F6E67 		.ascii	"long int\000"
 9334      20696E74 
 9334      00
 9335              	.LASF86:
 9336 029a 70547842 		.ascii	"pTxBuffPtr\000"
 9336      75666650 
 9336      747200
 9337              	.LASF42:
 9338 02a5 50657269 		.ascii	"PeriphInc\000"
 9338      7068496E 
 9338      6300
 9339              	.LASF117:
 9340 02af 466C6167 		.ascii	"Flag\000"
ARM GAS  /tmp/ccpGcYbE.s 			page 229


 9340      00
 9341              	.LASF127:
 9342 02b4 48414C5F 		.ascii	"HAL_USART_GetError\000"
 9342      55534152 
 9342      545F4765 
 9342      74457272 
 9342      6F7200
 9343              	.LASF14:
 9344 02c7 75696E74 		.ascii	"uint16_t\000"
 9344      31365F74 
 9344      00
 9345              	.LASF157:
 9346 02d0 48414C5F 		.ascii	"HAL_USART_Transmit\000"
 9346      55534152 
 9346      545F5472 
 9346      616E736D 
 9346      697400
 9347              	.LASF65:
 9348 02e3 4368616E 		.ascii	"ChannelIndex\000"
 9348      6E656C49 
 9348      6E646578 
 9348      00
 9349              	.LASF69:
 9350 02f0 53746F70 		.ascii	"StopBits\000"
 9350      42697473 
 9350      00
 9351              	.LASF119:
 9352 02f9 5469636B 		.ascii	"Tickstart\000"
 9352      73746172 
 9352      7400
 9353              	.LASF58:
 9354 0303 50617265 		.ascii	"Parent\000"
 9354      6E7400
 9355              	.LASF56:
 9356 030a 4C6F636B 		.ascii	"Lock\000"
 9356      00
 9357              	.LASF8:
 9358 030f 5F5F7569 		.ascii	"__uint32_t\000"
 9358      6E743332 
 9358      5F7400
 9359              	.LASF120:
 9360 031a 54696D65 		.ascii	"Timeout\000"
 9360      6F757400 
 9361              	.LASF41:
 9362 0322 44697265 		.ascii	"Direction\000"
 9362      6374696F 
 9362      6E00
 9363              	.LASF147:
 9364 032c 70527844 		.ascii	"pRxData\000"
 9364      61746100 
 9365              	.LASF136:
 9366 0334 63723169 		.ascii	"cr1its\000"
 9366      747300
 9367              	.LASF93:
 9368 033b 68646D61 		.ascii	"hdmarx\000"
 9368      727800
 9369              	.LASF96:
ARM GAS  /tmp/ccpGcYbE.s 			page 230


 9370 0342 48414C5F 		.ascii	"HAL_TICK_FREQ_100HZ\000"
 9370      5449434B 
 9370      5F465245 
 9370      515F3130 
 9370      30485A00 
 9371              	.LASF36:
 9372 0356 48414C5F 		.ascii	"HAL_TIMEOUT\000"
 9372      54494D45 
 9372      4F555400 
 9373              	.LASF27:
 9374 0362 444D415F 		.ascii	"DMA_TypeDef\000"
 9374      54797065 
 9374      44656600 
 9375              	.LASF104:
 9376 036e 68757361 		.ascii	"husart\000"
 9376      727400
 9377              	.LASF12:
 9378 0375 756E7369 		.ascii	"unsigned int\000"
 9378      676E6564 
 9378      20696E74 
 9378      00
 9379              	.LASF49:
 9380 0382 48414C5F 		.ascii	"HAL_DMA_STATE_RESET\000"
 9380      444D415F 
 9380      53544154 
 9380      455F5245 
 9380      53455400 
 9381              	.LASF19:
 9382 0396 53797374 		.ascii	"SystemCoreClock\000"
 9382      656D436F 
 9382      7265436C 
 9382      6F636B00 
 9383              	.LASF101:
 9384 03a6 75775469 		.ascii	"uwTickFreq\000"
 9384      636B4672 
 9384      657100
 9385              	.LASF70:
 9386 03b1 50617269 		.ascii	"Parity\000"
 9386      747900
 9387              	.LASF23:
 9388 03b8 43504152 		.ascii	"CPAR\000"
 9388      00
 9389              	.LASF9:
 9390 03bd 6C6F6E67 		.ascii	"long unsigned int\000"
 9390      20756E73 
 9390      69676E65 
 9390      6420696E 
 9390      7400
 9391              	.LASF162:
 9392 03cf 48414C5F 		.ascii	"HAL_DMA_Abort_IT\000"
 9392      444D415F 
 9392      41626F72 
 9392      745F4954 
 9392      00
 9393              	.LASF141:
 9394 03e0 48414C5F 		.ascii	"HAL_USART_Abort\000"
 9394      55534152 
ARM GAS  /tmp/ccpGcYbE.s 			page 231


 9394      545F4162 
 9394      6F727400 
 9395              	.LASF97:
 9396 03f0 48414C5F 		.ascii	"HAL_TICK_FREQ_1KHZ\000"
 9396      5449434B 
 9396      5F465245 
 9396      515F314B 
 9396      485A00
 9397              	.LASF33:
 9398 0403 48414C5F 		.ascii	"HAL_OK\000"
 9398      4F4B00
 9399              	.LASF105:
 9400 040a 55534152 		.ascii	"USART_TransmitReceive_IT\000"
 9400      545F5472 
 9400      616E736D 
 9400      69745265 
 9400      63656976 
 9401              	.LASF90:
 9402 0423 52785866 		.ascii	"RxXferSize\000"
 9402      65725369 
 9402      7A6500
 9403              	.LASF5:
 9404 042e 73686F72 		.ascii	"short unsigned int\000"
 9404      7420756E 
 9404      7369676E 
 9404      65642069 
 9404      6E7400
 9405              	.LASF47:
 9406 0441 5072696F 		.ascii	"Priority\000"
 9406      72697479 
 9406      00
 9407              	.LASF87:
 9408 044a 54785866 		.ascii	"TxXferSize\000"
 9408      65725369 
 9408      7A6500
 9409              	.LASF124:
 9410 0455 55534152 		.ascii	"USART_DMAReceiveCplt\000"
 9410      545F444D 
 9410      41526563 
 9410      65697665 
 9410      43706C74 
 9411              	.LASF126:
 9412 046a 55534152 		.ascii	"USART_DMATransmitCplt\000"
 9412      545F444D 
 9412      41547261 
 9412      6E736D69 
 9412      7443706C 
 9413              	.LASF64:
 9414 0480 446D6142 		.ascii	"DmaBaseAddress\000"
 9414      61736541 
 9414      64647265 
 9414      737300
 9415              	.LASF138:
 9416 048f 6572726F 		.ascii	"errorflags\000"
 9416      72666C61 
 9416      677300
 9417              	.LASF63:
ARM GAS  /tmp/ccpGcYbE.s 			page 232


 9418 049a 4572726F 		.ascii	"ErrorCode\000"
 9418      72436F64 
 9418      6500
 9419              	.LASF45:
 9420 04a4 4D656D44 		.ascii	"MemDataAlignment\000"
 9420      61746141 
 9420      6C69676E 
 9420      6D656E74 
 9420      00
 9421              	.LASF139:
 9422 04b5 48414C5F 		.ascii	"HAL_USART_Abort_IT\000"
 9422      55534152 
 9422      545F4162 
 9422      6F72745F 
 9422      495400
 9423              	.LASF37:
 9424 04c8 48414C5F 		.ascii	"HAL_StatusTypeDef\000"
 9424      53746174 
 9424      75735479 
 9424      70654465 
 9424      6600
 9425              	.LASF163:
 9426 04da 48414C5F 		.ascii	"HAL_DMA_Abort\000"
 9426      444D415F 
 9426      41626F72 
 9426      7400
 9427              	.LASF20:
 9428 04e8 41484250 		.ascii	"AHBPrescTable\000"
 9428      72657363 
 9428      5461626C 
 9428      6500
 9429              	.LASF132:
 9430 04f6 48414C5F 		.ascii	"HAL_USART_RxCpltCallback\000"
 9430      55534152 
 9430      545F5278 
 9430      43706C74 
 9430      43616C6C 
 9431              	.LASF150:
 9432 050f 48414C5F 		.ascii	"HAL_USART_Transmit_DMA\000"
 9432      55534152 
 9432      545F5472 
 9432      616E736D 
 9432      69745F44 
 9433              	.LASF50:
 9434 0526 48414C5F 		.ascii	"HAL_DMA_STATE_READY\000"
 9434      444D415F 
 9434      53544154 
 9434      455F5245 
 9434      41445900 
 9435              	.LASF74:
 9436 053a 55534152 		.ascii	"USART_InitTypeDef\000"
 9436      545F496E 
 9436      69745479 
 9436      70654465 
 9436      6600
 9437              	.LASF123:
 9438 054c 55534152 		.ascii	"USART_DMARxHalfCplt\000"
ARM GAS  /tmp/ccpGcYbE.s 			page 233


 9438      545F444D 
 9438      41527848 
 9438      616C6643 
 9438      706C7400 
 9439              	.LASF77:
 9440 0560 48414C5F 		.ascii	"HAL_USART_STATE_BUSY\000"
 9440      55534152 
 9440      545F5354 
 9440      4154455F 
 9440      42555359 
 9441              	.LASF152:
 9442 0575 48414C5F 		.ascii	"HAL_USART_Receive_IT\000"
 9442      55534152 
 9442      545F5265 
 9442      63656976 
 9442      655F4954 
 9443              	.LASF125:
 9444 058a 55534152 		.ascii	"USART_DMATxHalfCplt\000"
 9444      545F444D 
 9444      41547848 
 9444      616C6643 
 9444      706C7400 
 9445              	.LASF111:
 9446 059e 68646D61 		.ascii	"hdma\000"
 9446      00
 9447              	.LASF135:
 9448 05a3 69737266 		.ascii	"isrflags\000"
 9448      6C616773 
 9448      00
 9449              	.LASF81:
 9450 05ac 48414C5F 		.ascii	"HAL_USART_STATE_TIMEOUT\000"
 9450      55534152 
 9450      545F5354 
 9450      4154455F 
 9450      54494D45 
 9451              	.LASF112:
 9452 05c4 55534152 		.ascii	"USART_DMAAbortOnError\000"
 9452      545F444D 
 9452      4141626F 
 9452      72744F6E 
 9452      4572726F 
 9453              	.LASF17:
 9454 05da 73697A65 		.ascii	"sizetype\000"
 9454      74797065 
 9454      00
 9455              	.LASF165:
 9456 05e3 48414C5F 		.ascii	"HAL_GetTick\000"
 9456      47657454 
 9456      69636B00 
 9457              	.LASF32:
 9458 05ef 6C6F6E67 		.ascii	"long double\000"
 9458      20646F75 
 9458      626C6500 
 9459              	.LASF110:
 9460 05fb 55534152 		.ascii	"USART_DMATxAbortCallback\000"
 9460      545F444D 
 9460      41547841 
ARM GAS  /tmp/ccpGcYbE.s 			page 234


 9460      626F7274 
 9460      43616C6C 
 9461              	.LASF39:
 9462 0614 48414C5F 		.ascii	"HAL_LOCKED\000"
 9462      4C4F434B 
 9462      454400
 9463              	.LASF146:
 9464 061f 70547844 		.ascii	"pTxData\000"
 9464      61746100 
 9465              	.LASF66:
 9466 0627 444D415F 		.ascii	"DMA_HandleTypeDef\000"
 9466      48616E64 
 9466      6C655479 
 9466      70654465 
 9466      6600
 9467              	.LASF61:
 9468 0639 58666572 		.ascii	"XferErrorCallback\000"
 9468      4572726F 
 9468      7243616C 
 9468      6C626163 
 9468      6B00
 9469              	.LASF82:
 9470 064b 48414C5F 		.ascii	"HAL_USART_STATE_ERROR\000"
 9470      55534152 
 9470      545F5354 
 9470      4154455F 
 9470      4552524F 
 9471              	.LASF92:
 9472 0661 68646D61 		.ascii	"hdmatx\000"
 9472      747800
 9473              	.LASF72:
 9474 0668 434C4B50 		.ascii	"CLKPhase\000"
 9474      68617365 
 9474      00
 9475              	.LASF171:
 9476 0671 48414C5F 		.ascii	"HAL_USART_AbortCpltCallback\000"
 9476      55534152 
 9476      545F4162 
 9476      6F727443 
 9476      706C7443 
 9477              	.LASF79:
 9478 068d 48414C5F 		.ascii	"HAL_USART_STATE_BUSY_RX\000"
 9478      55534152 
 9478      545F5354 
 9478      4154455F 
 9478      42555359 
 9479              	.LASF130:
 9480 06a5 48414C5F 		.ascii	"HAL_USART_TxRxCpltCallback\000"
 9480      55534152 
 9480      545F5478 
 9480      52784370 
 9480      6C744361 
 9481              	.LASF25:
 9482 06c0 444D415F 		.ascii	"DMA_Channel_TypeDef\000"
 9482      4368616E 
 9482      6E656C5F 
 9482      54797065 
ARM GAS  /tmp/ccpGcYbE.s 			page 235


 9482      44656600 
 9483              	.LASF55:
 9484 06d4 496E6974 		.ascii	"Init\000"
 9484      00
 9485              	.LASF83:
 9486 06d9 48414C5F 		.ascii	"HAL_USART_StateTypeDef\000"
 9486      55534152 
 9486      545F5374 
 9486      61746554 
 9486      79706544 
 9487              	.LASF148:
 9488 06f0 53697A65 		.ascii	"Size\000"
 9488      00
 9489              	.LASF54:
 9490 06f5 496E7374 		.ascii	"Instance\000"
 9490      616E6365 
 9490      00
 9491              	.LASF107:
 9492 06fe 55534152 		.ascii	"USART_EndTransmit_IT\000"
 9492      545F456E 
 9492      64547261 
 9492      6E736D69 
 9492      745F4954 
 9493              	.LASF143:
 9494 0713 48414C5F 		.ascii	"HAL_USART_DMAResume\000"
 9494      55534152 
 9494      545F444D 
 9494      41526573 
 9494      756D6500 
 9495              	.LASF30:
 9496 0727 52455345 		.ascii	"RESET\000"
 9496      5400
 9497              	.LASF166:
 9498 072d 48414C5F 		.ascii	"HAL_RCC_GetPCLK2Freq\000"
 9498      5243435F 
 9498      47657450 
 9498      434C4B32 
 9498      46726571 
 9499              	.LASF170:
 9500 0742 2F686F6D 		.ascii	"/home/berndoj/git/stm32tctst/lib/stm32f1hal\000"
 9500      652F6265 
 9500      726E646F 
 9500      6A2F6769 
 9500      742F7374 
 9501              	.LASF15:
 9502 076e 696E7433 		.ascii	"int32_t\000"
 9502      325F7400 
 9503              	.LASF1:
 9504 0776 756E7369 		.ascii	"unsigned char\000"
 9504      676E6564 
 9504      20636861 
 9504      7200
 9505              	.LASF29:
 9506 0784 55534152 		.ascii	"USART_TypeDef\000"
 9506      545F5479 
 9506      70654465 
 9506      6600
ARM GAS  /tmp/ccpGcYbE.s 			page 236


 9507              	.LASF158:
 9508 0792 48414C5F 		.ascii	"HAL_USART_MspDeInit\000"
 9508      55534152 
 9508      545F4D73 
 9508      70446549 
 9508      6E697400 
 9509              	.LASF53:
 9510 07a6 48414C5F 		.ascii	"HAL_DMA_StateTypeDef\000"
 9510      444D415F 
 9510      53746174 
 9510      65547970 
 9510      65446566 
 9511              	.LASF2:
 9512 07bb 73686F72 		.ascii	"short int\000"
 9512      7420696E 
 9512      7400
 9513              	.LASF103:
 9514 07c5 70636C6B 		.ascii	"pclk\000"
 9514      00
 9515              	.LASF155:
 9516 07ca 7469636B 		.ascii	"tickstart\000"
 9516      73746172 
 9516      7400
 9517              	.LASF43:
 9518 07d4 4D656D49 		.ascii	"MemInc\000"
 9518      6E6300
 9519              	.LASF168:
 9520 07db 474E5520 		.ascii	"GNU C11 6.3.1 20170620 -mcpu=cortex-m3 -mthumb -g -"
 9520      43313120 
 9520      362E332E 
 9520      31203230 
 9520      31373036 
 9521 080e 67647761 		.ascii	"gdwarf-2 -Os -fomit-frame-pointer\000"
 9521      72662D32 
 9521      202D4F73 
 9521      202D666F 
 9521      6D69742D 
 9522              	.LASF106:
 9523 0830 55534152 		.ascii	"USART_Receive_IT\000"
 9523      545F5265 
 9523      63656976 
 9523      655F4954 
 9523      00
 9524              	.LASF122:
 9525 0841 646D6172 		.ascii	"dmarequest\000"
 9525      65717565 
 9525      737400
 9526              	.LASF84:
 9527 084c 5F5F444D 		.ascii	"__DMA_HandleTypeDef\000"
 9527      415F4861 
 9527      6E646C65 
 9527      54797065 
 9527      44656600 
 9528              	.LASF16:
 9529 0860 75696E74 		.ascii	"uint32_t\000"
 9529      33325F74 
 9529      00
ARM GAS  /tmp/ccpGcYbE.s 			page 237


 9530              	.LASF68:
 9531 0869 576F7264 		.ascii	"WordLength\000"
 9531      4C656E67 
 9531      746800
 9532              	.LASF34:
 9533 0874 48414C5F 		.ascii	"HAL_ERROR\000"
 9533      4552524F 
 9533      5200
 9534              	.LASF73:
 9535 087e 434C4B4C 		.ascii	"CLKLastBit\000"
 9535      61737442 
 9535      697400
 9536              	.LASF26:
 9537 0889 49464352 		.ascii	"IFCR\000"
 9537      00
 9538              	.LASF100:
 9539 088e 75775469 		.ascii	"uwTickPrio\000"
 9539      636B5072 
 9539      696F00
 9540              	.LASF57:
 9541 0899 53746174 		.ascii	"State\000"
 9541      6500
 9542              	.LASF46:
 9543 089f 4D6F6465 		.ascii	"Mode\000"
 9543      00
 9544              	.LASF4:
 9545 08a4 5F5F7569 		.ascii	"__uint16_t\000"
 9545      6E743136 
 9545      5F7400
 9546              	.LASF169:
 9547 08af 7372632F 		.ascii	"src/stm32f1xx_hal_usart.c\000"
 9547      73746D33 
 9547      32663178 
 9547      785F6861 
 9547      6C5F7573 
 9548              	.LASF121:
 9549 08c9 55534152 		.ascii	"USART_DMAError\000"
 9549      545F444D 
 9549      41457272 
 9549      6F7200
 9550              	.LASF6:
 9551 08d8 5F5F696E 		.ascii	"__int32_t\000"
 9551      7433325F 
 9551      7400
 9552              	.LASF98:
 9553 08e2 48414C5F 		.ascii	"HAL_TICK_FREQ_DEFAULT\000"
 9553      5449434B 
 9553      5F465245 
 9553      515F4445 
 9553      4641554C 
 9554              	.LASF172:
 9555 08f8 48414C5F 		.ascii	"HAL_USART_IRQHandler\000"
 9555      55534152 
 9555      545F4952 
 9555      5148616E 
 9555      646C6572 
 9556              	.LASF78:
ARM GAS  /tmp/ccpGcYbE.s 			page 238


 9557 090d 48414C5F 		.ascii	"HAL_USART_STATE_BUSY_TX\000"
 9557      55534152 
 9557      545F5354 
 9557      4154455F 
 9557      42555359 
 9558              	.LASF44:
 9559 0925 50657269 		.ascii	"PeriphDataAlignment\000"
 9559      70684461 
 9559      7461416C 
 9559      69676E6D 
 9559      656E7400 
 9560              	.LASF131:
 9561 0939 48414C5F 		.ascii	"HAL_USART_RxHalfCpltCallback\000"
 9561      55534152 
 9561      545F5278 
 9561      48616C66 
 9561      43706C74 
 9562              	.LASF144:
 9563 0956 48414C5F 		.ascii	"HAL_USART_DMAPause\000"
 9563      55534152 
 9563      545F444D 
 9563      41506175 
 9563      736500
 9564              	.LASF145:
 9565 0969 48414C5F 		.ascii	"HAL_USART_TransmitReceive_DMA\000"
 9565      55534152 
 9565      545F5472 
 9565      616E736D 
 9565      69745265 
 9566              	.LASF116:
 9567 0987 55534152 		.ascii	"USART_WaitOnFlagUntilTimeout\000"
 9567      545F5761 
 9567      69744F6E 
 9567      466C6167 
 9567      556E7469 
 9568              	.LASF142:
 9569 09a4 48414C5F 		.ascii	"HAL_USART_DMAStop\000"
 9569      55534152 
 9569      545F444D 
 9569      4153746F 
 9569      7000
 9570              	.LASF22:
 9571 09b6 434E4454 		.ascii	"CNDTR\000"
 9571      5200
 9572              	.LASF24:
 9573 09bc 434D4152 		.ascii	"CMAR\000"
 9573      00
 9574              	.LASF109:
 9575 09c1 55534152 		.ascii	"USART_DMARxAbortCallback\000"
 9575      545F444D 
 9575      41527841 
 9575      626F7274 
 9575      43616C6C 
 9576              	.LASF52:
 9577 09da 48414C5F 		.ascii	"HAL_DMA_STATE_TIMEOUT\000"
 9577      444D415F 
 9577      53544154 
ARM GAS  /tmp/ccpGcYbE.s 			page 239


 9577      455F5449 
 9577      4D454F55 
 9578              	.LASF153:
 9579 09f0 48414C5F 		.ascii	"HAL_USART_Transmit_IT\000"
 9579      55534152 
 9579      545F5472 
 9579      616E736D 
 9579      69745F49 
 9580              	.LASF89:
 9581 0a06 70527842 		.ascii	"pRxBuffPtr\000"
 9581      75666650 
 9581      747200
 9582              	.LASF13:
 9583 0a11 75696E74 		.ascii	"uint8_t\000"
 9583      385F7400 
 9584              	.LASF114:
 9585 0a19 55534152 		.ascii	"USART_SetConfig\000"
 9585      545F5365 
 9585      74436F6E 
 9585      66696700 
 9586              	.LASF71:
 9587 0a29 434C4B50 		.ascii	"CLKPolarity\000"
 9587      6F6C6172 
 9587      69747900 
 9588              	.LASF91:
 9589 0a35 52785866 		.ascii	"RxXferCount\000"
 9589      6572436F 
 9589      756E7400 
 9590              	.LASF38:
 9591 0a41 48414C5F 		.ascii	"HAL_UNLOCKED\000"
 9591      554E4C4F 
 9591      434B4544 
 9591      00
 9592              	.LASF118:
 9593 0a4e 53746174 		.ascii	"Status\000"
 9593      757300
 9594              	.LASF75:
 9595 0a55 48414C5F 		.ascii	"HAL_USART_STATE_RESET\000"
 9595      55534152 
 9595      545F5354 
 9595      4154455F 
 9595      52455345 
 9596              	.LASF160:
 9597 0a6b 48414C5F 		.ascii	"HAL_USART_DeInit\000"
 9597      55534152 
 9597      545F4465 
 9597      496E6974 
 9597      00
 9598              	.LASF62:
 9599 0a7c 58666572 		.ascii	"XferAbortCallback\000"
 9599      41626F72 
 9599      7443616C 
 9599      6C626163 
 9599      6B00
 9600              	.LASF59:
 9601 0a8e 58666572 		.ascii	"XferCpltCallback\000"
 9601      43706C74 
ARM GAS  /tmp/ccpGcYbE.s 			page 240


 9601      43616C6C 
 9601      6261636B 
 9601      00
 9602              	.LASF149:
 9603 0a9f 48414C5F 		.ascii	"HAL_USART_Receive_DMA\000"
 9603      55534152 
 9603      545F5265 
 9603      63656976 
 9603      655F444D 
 9604              		.ident	"GCC: (15:6.3.1+svn253039-1build1) 6.3.1 20170620"
ARM GAS  /tmp/ccpGcYbE.s 			page 241


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_usart.c
     /tmp/ccpGcYbE.s:69     .text:0000000000000000 $t
     /tmp/ccpGcYbE.s:75     .text:0000000000000000 USART_EndRxTransfer
     /tmp/ccpGcYbE.s:106    .text:000000000000001a USART_WaitOnFlagUntilTimeout.constprop.4
     /tmp/ccpGcYbE.s:198    .text:0000000000000076 HAL_USART_MspInit
     /tmp/ccpGcYbE.s:215    .text:0000000000000078 HAL_USART_Init
     /tmp/ccpGcYbE.s:387    .text:000000000000014c $d
     /tmp/ccpGcYbE.s:391    .text:0000000000000150 $t
     /tmp/ccpGcYbE.s:398    .text:0000000000000150 HAL_USART_MspDeInit
     /tmp/ccpGcYbE.s:415    .text:0000000000000152 HAL_USART_DeInit
     /tmp/ccpGcYbE.s:470    .text:000000000000017e HAL_USART_Transmit
     /tmp/ccpGcYbE.s:629    .text:0000000000000230 HAL_USART_Receive
     /tmp/ccpGcYbE.s:829    .text:000000000000031a HAL_USART_TransmitReceive
     /tmp/ccpGcYbE.s:1061   .text:000000000000042a HAL_USART_Transmit_IT
     /tmp/ccpGcYbE.s:1136   .text:0000000000000468 HAL_USART_Receive_IT
     /tmp/ccpGcYbE.s:1218   .text:00000000000004b4 HAL_USART_TransmitReceive_IT
     /tmp/ccpGcYbE.s:1313   .text:0000000000000512 HAL_USART_Transmit_DMA
     /tmp/ccpGcYbE.s:1411   .text:0000000000000578 $d
     /tmp/ccpGcYbE.s:2047   .text:000000000000080a USART_DMATransmitCplt
     /tmp/ccpGcYbE.s:2126   .text:0000000000000848 USART_DMATxHalfCplt
     /tmp/ccpGcYbE.s:2646   .text:0000000000000a28 USART_DMAError
     /tmp/ccpGcYbE.s:1417   .text:0000000000000584 $t
     /tmp/ccpGcYbE.s:1424   .text:0000000000000584 HAL_USART_Receive_DMA
     /tmp/ccpGcYbE.s:1579   .text:000000000000062c $d
     /tmp/ccpGcYbE.s:2370   .text:00000000000008fe USART_DMAReceiveCplt
     /tmp/ccpGcYbE.s:2325   .text:00000000000008f2 USART_DMARxHalfCplt
     /tmp/ccpGcYbE.s:1585   .text:0000000000000638 $t
     /tmp/ccpGcYbE.s:1592   .text:0000000000000638 HAL_USART_TransmitReceive_DMA
     /tmp/ccpGcYbE.s:1750   .text:00000000000006f8 $d
     /tmp/ccpGcYbE.s:1758   .text:000000000000070c $t
     /tmp/ccpGcYbE.s:1765   .text:000000000000070c HAL_USART_DMAPause
     /tmp/ccpGcYbE.s:1803   .text:000000000000072c HAL_USART_DMAResume
     /tmp/ccpGcYbE.s:1841   .text:000000000000074c HAL_USART_DMAStop
     /tmp/ccpGcYbE.s:1939   .text:00000000000007ac HAL_USART_Abort
     /tmp/ccpGcYbE.s:2031   .text:0000000000000808 HAL_USART_TxCpltCallback
     /tmp/ccpGcYbE.s:2110   .text:0000000000000846 HAL_USART_TxHalfCpltCallback
     /tmp/ccpGcYbE.s:2155   .text:0000000000000852 HAL_USART_RxCpltCallback
     /tmp/ccpGcYbE.s:2171   .text:0000000000000854 USART_Receive_IT
     /tmp/ccpGcYbE.s:2309   .text:00000000000008f0 HAL_USART_RxHalfCpltCallback
     /tmp/ccpGcYbE.s:2354   .text:00000000000008fc HAL_USART_TxRxCpltCallback
     /tmp/ccpGcYbE.s:2440   .text:000000000000094c USART_TransmitReceive_IT
     /tmp/ccpGcYbE.s:2630   .text:0000000000000a26 HAL_USART_ErrorCallback
     /tmp/ccpGcYbE.s:2735   .text:0000000000000a7a HAL_USART_IRQHandler
     /tmp/ccpGcYbE.s:3076   .text:0000000000000be4 $d
     /tmp/ccpGcYbE.s:3088   .text:0000000000000be8 USART_DMAAbortOnError
     /tmp/ccpGcYbE.s:3082   .text:0000000000000be8 $t
     /tmp/ccpGcYbE.s:3123   .text:0000000000000bf8 HAL_USART_AbortCpltCallback
     /tmp/ccpGcYbE.s:3142   .text:0000000000000bfa HAL_USART_Abort_IT
     /tmp/ccpGcYbE.s:3281   .text:0000000000000c94 $d
     /tmp/ccpGcYbE.s:3342   .text:0000000000000cc0 USART_DMATxAbortCallback
     /tmp/ccpGcYbE.s:3292   .text:0000000000000c9c USART_DMARxAbortCallback
     /tmp/ccpGcYbE.s:3286   .text:0000000000000c9c $t
     /tmp/ccpGcYbE.s:3393   .text:0000000000000ce4 HAL_USART_GetState
     /tmp/ccpGcYbE.s:3416   .text:0000000000000cea HAL_USART_GetError
                     .debug_frame:0000000000000010 $d

ARM GAS  /tmp/ccpGcYbE.s 			page 242


UNDEFINED SYMBOLS
HAL_GetTick
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetPCLK1Freq
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_Abort_IT
