ARM GAS  /tmp/ccnCBS2w.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"stm32f1xx_hal_iwdg.c"
  12              	@ GNU C11 (15:6.3.1+svn253039-1build1) version 6.3.1 20170620 (arm-none-eabi)
  13              	@	compiled by GNU C version 7.2.0, GMP version 6.1.2, MPFR version 4.0.1-rc1, MPC version 1.1.0, is
  14              	@ warning: MPFR header version 4.0.1-rc1 differs from library version 4.0.1.
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I ./inc -I ./inc/Legacy -I ../cmsisstm32f1xx/inc
  17              	@ -I ../cmsiscore/inc -imultilib thumb/v7-m -D__USES_INITFINI__
  18              	@ -D STM32F103x6 -D RUN_FROM_FLASH=1 -D __c src/stm32f1xx_hal_iwdg.c
  19              	@ -mcpu=cortex-m3 -mthumb -auxbase-strip bin/stm32f1xx_hal_iwdg.o -g
  20              	@ -gdwarf-2 -Os -Wall -fomit-frame-pointer -fverbose-asm
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffunction-cse -fgcse
  32              	@ -fgcse-lm -fgnu-runtime -fgnu-unique -fguess-branch-probability
  33              	@ -fhoist-adjacent-loads -fident -fif-conversion -fif-conversion2
  34              	@ -findirect-inlining -finline -finline-atomics -finline-functions
  35              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  36              	@ -fipa-cp-alignment -fipa-icf -fipa-icf-functions -fipa-icf-variables
  37              	@ -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra
  38              	@ -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  39              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  40              	@ -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  41              	@ -fmath-errno -fmerge-constants -fmerge-debug-strings
  42              	@ -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  43              	@ -fpartial-inlining -fpeephole -fpeephole2 -fplt -fprefetch-loop-arrays
  44              	@ -freg-struct-return -freorder-blocks -freorder-functions
  45              	@ -frerun-cse-after-loop -fsched-critical-path-heuristic
  46              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  47              	@ -fsched-last-insn-heuristic -fsched-pressure -fsched-rank-heuristic
  48              	@ -fsched-spec -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  49              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  50              	@ -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types
  51              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstrict-aliasing
  52              	@ -fstrict-overflow -fstrict-volatile-bitfields -fsync-libcalls
  53              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  54              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  55              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  56              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  57              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
ARM GAS  /tmp/ccnCBS2w.s 			page 2


  58              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  59              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  60              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  61              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  62              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  63              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  64              	@ -munaligned-access -mvectorize-with-neon-quad
  65              	
  66              		.text
  67              	.Ltext0:
  68              		.cfi_sections	.debug_frame
  69              		.align	1
  70              		.global	HAL_IWDG_Init
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu softvfp
  75              		.type	HAL_IWDG_Init, %function
  76              	HAL_IWDG_Init:
  77              	.LFB65:
  78              		.file 1 "src/stm32f1xx_hal_iwdg.c"
   1:src/stm32f1xx_hal_iwdg.c **** /**
   2:src/stm32f1xx_hal_iwdg.c ****   ******************************************************************************
   3:src/stm32f1xx_hal_iwdg.c ****   * @file    stm32f1xx_hal_iwdg.c
   4:src/stm32f1xx_hal_iwdg.c ****   * @author  MCD Application Team
   5:src/stm32f1xx_hal_iwdg.c ****   * @brief   IWDG HAL module driver.
   6:src/stm32f1xx_hal_iwdg.c ****   *          This file provides firmware functions to manage the following
   7:src/stm32f1xx_hal_iwdg.c ****   *          functionalities of the Independent Watchdog (IWDG) peripheral:
   8:src/stm32f1xx_hal_iwdg.c ****   *           + Initialization and Start functions
   9:src/stm32f1xx_hal_iwdg.c ****   *           + IO operation functions
  10:src/stm32f1xx_hal_iwdg.c ****   *
  11:src/stm32f1xx_hal_iwdg.c ****   @verbatim
  12:src/stm32f1xx_hal_iwdg.c ****   ==============================================================================
  13:src/stm32f1xx_hal_iwdg.c ****                     ##### IWDG Generic features #####
  14:src/stm32f1xx_hal_iwdg.c ****   ==============================================================================
  15:src/stm32f1xx_hal_iwdg.c ****   [..]
  16:src/stm32f1xx_hal_iwdg.c ****     (+) The IWDG can be started by either software or hardware (configurable
  17:src/stm32f1xx_hal_iwdg.c ****         through option byte).
  18:src/stm32f1xx_hal_iwdg.c **** 
  19:src/stm32f1xx_hal_iwdg.c ****     (+) The IWDG is clocked by Low-Speed clock (LSI) and thus stays active even
  20:src/stm32f1xx_hal_iwdg.c ****         if the main clock fails.
  21:src/stm32f1xx_hal_iwdg.c **** 
  22:src/stm32f1xx_hal_iwdg.c ****     (+) Once the IWDG is started, the LSI is forced ON and both can not be
  23:src/stm32f1xx_hal_iwdg.c ****         disabled. The counter starts counting down from the reset value (0xFFF).
  24:src/stm32f1xx_hal_iwdg.c ****         When it reaches the end of count value (0x000) a reset signal is
  25:src/stm32f1xx_hal_iwdg.c ****         generated (IWDG reset).
  26:src/stm32f1xx_hal_iwdg.c **** 
  27:src/stm32f1xx_hal_iwdg.c ****     (+) Whenever the key value 0x0000 AAAA is written in the IWDG_KR register,
  28:src/stm32f1xx_hal_iwdg.c ****         the IWDG_RLR value is reloaded in the counter and the watchdog reset is
  29:src/stm32f1xx_hal_iwdg.c ****         prevented.
  30:src/stm32f1xx_hal_iwdg.c **** 
  31:src/stm32f1xx_hal_iwdg.c ****     (+) The IWDG is implemented in the VDD voltage domain that is still functional
  32:src/stm32f1xx_hal_iwdg.c ****         in STOP and STANDBY mode (IWDG reset can wake-up from STANDBY).
  33:src/stm32f1xx_hal_iwdg.c ****         IWDGRST flag in RCC_CSR register can be used to inform when an IWDG
  34:src/stm32f1xx_hal_iwdg.c ****         reset occurs.
  35:src/stm32f1xx_hal_iwdg.c **** 
  36:src/stm32f1xx_hal_iwdg.c ****     (+) Debug mode : When the microcontroller enters debug mode (core halted),
ARM GAS  /tmp/ccnCBS2w.s 			page 3


  37:src/stm32f1xx_hal_iwdg.c ****         the IWDG counter either continues to work normally or stops, depending
  38:src/stm32f1xx_hal_iwdg.c ****         on DBG_IWDG_STOP configuration bit in DBG module, accessible through
  39:src/stm32f1xx_hal_iwdg.c ****         __HAL_DBGMCU_FREEZE_IWDG() and __HAL_DBGMCU_UNFREEZE_IWDG() macros
  40:src/stm32f1xx_hal_iwdg.c **** 
  41:src/stm32f1xx_hal_iwdg.c ****     [..] Min-max timeout value @32KHz (LSI): ~125us / ~32.7s
  42:src/stm32f1xx_hal_iwdg.c ****          The IWDG timeout may vary due to LSI frequency dispersion. STM32F1xx
  43:src/stm32f1xx_hal_iwdg.c ****          devices provide the capability to measure the LSI frequency (LSI clock
  44:src/stm32f1xx_hal_iwdg.c ****          connected internally to TIM5 CH4 input capture). The measured value
  45:src/stm32f1xx_hal_iwdg.c ****          can be used to have an IWDG timeout with an acceptable accuracy.
  46:src/stm32f1xx_hal_iwdg.c **** 
  47:src/stm32f1xx_hal_iwdg.c ****                      ##### How to use this driver #####
  48:src/stm32f1xx_hal_iwdg.c ****   ==============================================================================
  49:src/stm32f1xx_hal_iwdg.c ****   [..]
  50:src/stm32f1xx_hal_iwdg.c ****     (#) Use IWDG using HAL_IWDG_Init() function to :
  51:src/stm32f1xx_hal_iwdg.c ****       (++) Enable instance by writing Start keyword in IWDG_KEY register. LSI
  52:src/stm32f1xx_hal_iwdg.c ****            clock is forced ON and IWDG counter starts downcounting.
  53:src/stm32f1xx_hal_iwdg.c ****       (++) Enable write access to configuration register: IWDG_PR & IWDG_RLR.
  54:src/stm32f1xx_hal_iwdg.c ****       (++) Configure the IWDG prescaler and counter reload value. This reload
  55:src/stm32f1xx_hal_iwdg.c ****            value will be loaded in the IWDG counter each time the watchdog is
  56:src/stm32f1xx_hal_iwdg.c ****            reloaded, then the IWDG will start counting down from this value.
  57:src/stm32f1xx_hal_iwdg.c ****       (++) wait for status flags to be reset"
  58:src/stm32f1xx_hal_iwdg.c **** 
  59:src/stm32f1xx_hal_iwdg.c ****     (#) Then the application program must refresh the IWDG counter at regular
  60:src/stm32f1xx_hal_iwdg.c ****         intervals during normal operation to prevent an MCU reset, using
  61:src/stm32f1xx_hal_iwdg.c ****         HAL_IWDG_Refresh() function.
  62:src/stm32f1xx_hal_iwdg.c **** 
  63:src/stm32f1xx_hal_iwdg.c ****      *** IWDG HAL driver macros list ***
  64:src/stm32f1xx_hal_iwdg.c ****      ====================================
  65:src/stm32f1xx_hal_iwdg.c ****      [..]
  66:src/stm32f1xx_hal_iwdg.c ****        Below the list of most used macros in IWDG HAL driver:
  67:src/stm32f1xx_hal_iwdg.c ****       (+) __HAL_IWDG_START: Enable the IWDG peripheral
  68:src/stm32f1xx_hal_iwdg.c ****       (+) __HAL_IWDG_RELOAD_COUNTER: Reloads IWDG counter with value defined in
  69:src/stm32f1xx_hal_iwdg.c ****           the reload register
  70:src/stm32f1xx_hal_iwdg.c **** 
  71:src/stm32f1xx_hal_iwdg.c ****   @endverbatim
  72:src/stm32f1xx_hal_iwdg.c ****   ******************************************************************************
  73:src/stm32f1xx_hal_iwdg.c ****   * @attention
  74:src/stm32f1xx_hal_iwdg.c ****   *
  75:src/stm32f1xx_hal_iwdg.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  76:src/stm32f1xx_hal_iwdg.c ****   * All rights reserved.</center></h2>
  77:src/stm32f1xx_hal_iwdg.c ****   *
  78:src/stm32f1xx_hal_iwdg.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  79:src/stm32f1xx_hal_iwdg.c ****   * the "License"; You may not use this file except in compliance with the
  80:src/stm32f1xx_hal_iwdg.c ****   * License. You may obtain a copy of the License at:
  81:src/stm32f1xx_hal_iwdg.c ****   *                        opensource.org/licenses/BSD-3-Clause
  82:src/stm32f1xx_hal_iwdg.c ****   *
  83:src/stm32f1xx_hal_iwdg.c ****   ******************************************************************************
  84:src/stm32f1xx_hal_iwdg.c ****   */
  85:src/stm32f1xx_hal_iwdg.c **** 
  86:src/stm32f1xx_hal_iwdg.c **** /* Includes ------------------------------------------------------------------*/
  87:src/stm32f1xx_hal_iwdg.c **** #include "stm32f1xx_hal.h"
  88:src/stm32f1xx_hal_iwdg.c **** 
  89:src/stm32f1xx_hal_iwdg.c **** /** @addtogroup STM32F1xx_HAL_Driver
  90:src/stm32f1xx_hal_iwdg.c ****   * @{
  91:src/stm32f1xx_hal_iwdg.c ****   */
  92:src/stm32f1xx_hal_iwdg.c **** 
  93:src/stm32f1xx_hal_iwdg.c **** #ifdef HAL_IWDG_MODULE_ENABLED
ARM GAS  /tmp/ccnCBS2w.s 			page 4


  94:src/stm32f1xx_hal_iwdg.c **** /** @defgroup IWDG IWDG
  95:src/stm32f1xx_hal_iwdg.c ****   * @brief IWDG HAL module driver.
  96:src/stm32f1xx_hal_iwdg.c ****   * @{
  97:src/stm32f1xx_hal_iwdg.c ****   */
  98:src/stm32f1xx_hal_iwdg.c **** 
  99:src/stm32f1xx_hal_iwdg.c **** /* Private typedef -----------------------------------------------------------*/
 100:src/stm32f1xx_hal_iwdg.c **** /* Private define ------------------------------------------------------------*/
 101:src/stm32f1xx_hal_iwdg.c **** /** @defgroup IWDG_Private_Defines IWDG Private Defines
 102:src/stm32f1xx_hal_iwdg.c ****   * @{
 103:src/stm32f1xx_hal_iwdg.c ****   */
 104:src/stm32f1xx_hal_iwdg.c **** /* Status register need 5 RC LSI divided by prescaler clock to be updated. With
 105:src/stm32f1xx_hal_iwdg.c ****    higher prescaler (256), and according to HSI variation, we need to wait at
 106:src/stm32f1xx_hal_iwdg.c ****    least 6 cycles so 48 ms. */
 107:src/stm32f1xx_hal_iwdg.c **** #define HAL_IWDG_DEFAULT_TIMEOUT            48U
 108:src/stm32f1xx_hal_iwdg.c **** /**
 109:src/stm32f1xx_hal_iwdg.c ****   * @}
 110:src/stm32f1xx_hal_iwdg.c ****   */
 111:src/stm32f1xx_hal_iwdg.c **** 
 112:src/stm32f1xx_hal_iwdg.c **** /* Private macro -------------------------------------------------------------*/
 113:src/stm32f1xx_hal_iwdg.c **** /* Private variables ---------------------------------------------------------*/
 114:src/stm32f1xx_hal_iwdg.c **** /* Private function prototypes -----------------------------------------------*/
 115:src/stm32f1xx_hal_iwdg.c **** /* Exported functions --------------------------------------------------------*/
 116:src/stm32f1xx_hal_iwdg.c **** 
 117:src/stm32f1xx_hal_iwdg.c **** /** @addtogroup IWDG_Exported_Functions
 118:src/stm32f1xx_hal_iwdg.c ****   * @{
 119:src/stm32f1xx_hal_iwdg.c ****   */
 120:src/stm32f1xx_hal_iwdg.c **** 
 121:src/stm32f1xx_hal_iwdg.c **** /** @addtogroup IWDG_Exported_Functions_Group1
 122:src/stm32f1xx_hal_iwdg.c ****   *  @brief    Initialization and Start functions.
 123:src/stm32f1xx_hal_iwdg.c ****   *
 124:src/stm32f1xx_hal_iwdg.c **** @verbatim
 125:src/stm32f1xx_hal_iwdg.c ****  ===============================================================================
 126:src/stm32f1xx_hal_iwdg.c ****           ##### Initialization and Start functions #####
 127:src/stm32f1xx_hal_iwdg.c ****  ===============================================================================
 128:src/stm32f1xx_hal_iwdg.c ****  [..]  This section provides functions allowing to:
 129:src/stm32f1xx_hal_iwdg.c ****       (+) Initialize the IWDG according to the specified parameters in the
 130:src/stm32f1xx_hal_iwdg.c ****           IWDG_InitTypeDef of associated handle.
 131:src/stm32f1xx_hal_iwdg.c ****       (+) Once initialization is performed in HAL_IWDG_Init function, Watchdog
 132:src/stm32f1xx_hal_iwdg.c ****           is reloaded in order to exit function with correct time base.
 133:src/stm32f1xx_hal_iwdg.c **** 
 134:src/stm32f1xx_hal_iwdg.c **** @endverbatim
 135:src/stm32f1xx_hal_iwdg.c ****   * @{
 136:src/stm32f1xx_hal_iwdg.c ****   */
 137:src/stm32f1xx_hal_iwdg.c **** 
 138:src/stm32f1xx_hal_iwdg.c **** /**
 139:src/stm32f1xx_hal_iwdg.c ****   * @brief  Initialize the IWDG according to the specified parameters in the
 140:src/stm32f1xx_hal_iwdg.c ****   *         IWDG_InitTypeDef and start watchdog. Before exiting function,
 141:src/stm32f1xx_hal_iwdg.c ****   *         watchdog is refreshed in order to have correct time base.
 142:src/stm32f1xx_hal_iwdg.c ****   * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
 143:src/stm32f1xx_hal_iwdg.c ****   *                the configuration information for the specified IWDG module.
 144:src/stm32f1xx_hal_iwdg.c ****   * @retval HAL status
 145:src/stm32f1xx_hal_iwdg.c ****   */
 146:src/stm32f1xx_hal_iwdg.c **** HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
 147:src/stm32f1xx_hal_iwdg.c **** {
  79              		.loc 1 147 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccnCBS2w.s 			page 5


  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              	.LVL0:
  84 0000 38B5     		push	{r3, r4, r5, lr}	@
  85              	.LCFI0:
  86              		.cfi_def_cfa_offset 16
  87              		.cfi_offset 3, -16
  88              		.cfi_offset 4, -12
  89              		.cfi_offset 5, -8
  90              		.cfi_offset 14, -4
 148:src/stm32f1xx_hal_iwdg.c ****   uint32_t tickstart;
 149:src/stm32f1xx_hal_iwdg.c **** 
 150:src/stm32f1xx_hal_iwdg.c ****   /* Check the IWDG handle allocation */
 151:src/stm32f1xx_hal_iwdg.c ****   if (hiwdg == NULL)
  91              		.loc 1 151 0
  92 0002 0446     		mov	r4, r0	@ hiwdg, hiwdg
  93 0004 D8B1     		cbz	r0, .L5	@ hiwdg,
 152:src/stm32f1xx_hal_iwdg.c ****   {
 153:src/stm32f1xx_hal_iwdg.c ****     return HAL_ERROR;
 154:src/stm32f1xx_hal_iwdg.c ****   }
 155:src/stm32f1xx_hal_iwdg.c **** 
 156:src/stm32f1xx_hal_iwdg.c ****   /* Check the parameters */
 157:src/stm32f1xx_hal_iwdg.c ****   assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 158:src/stm32f1xx_hal_iwdg.c ****   assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 159:src/stm32f1xx_hal_iwdg.c ****   assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 160:src/stm32f1xx_hal_iwdg.c **** 
 161:src/stm32f1xx_hal_iwdg.c ****   /* Enable IWDG. LSI is turned on automaticaly */
 162:src/stm32f1xx_hal_iwdg.c ****   __HAL_IWDG_START(hiwdg);
  94              		.loc 1 162 0
  95 0006 4CF6CC42 		movw	r2, #52428	@ tmp120,
  96 000a 0368     		ldr	r3, [r0]	@ _6, hiwdg_4(D)->Instance
  97 000c 1A60     		str	r2, [r3]	@ tmp120, _6->KR
 163:src/stm32f1xx_hal_iwdg.c **** 
 164:src/stm32f1xx_hal_iwdg.c ****   /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
 165:src/stm32f1xx_hal_iwdg.c ****   IWDG_ENABLE_WRITE_ACCESS(hiwdg);
  98              		.loc 1 165 0
  99 000e 45F25552 		movw	r2, #21845	@ tmp121,
 100 0012 1A60     		str	r2, [r3]	@ tmp121, _6->KR
 166:src/stm32f1xx_hal_iwdg.c **** 
 167:src/stm32f1xx_hal_iwdg.c ****   /* Write to IWDG registers the Prescaler & Reload values to work with */
 168:src/stm32f1xx_hal_iwdg.c ****   hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 101              		.loc 1 168 0
 102 0014 4268     		ldr	r2, [r0, #4]	@ _9, hiwdg_4(D)->Init.Prescaler
 103 0016 5A60     		str	r2, [r3, #4]	@ _9, _6->PR
 169:src/stm32f1xx_hal_iwdg.c ****   hiwdg->Instance->RLR = hiwdg->Init.Reload;
 104              		.loc 1 169 0
 105 0018 8268     		ldr	r2, [r0, #8]	@ _11, hiwdg_4(D)->Init.Reload
 106 001a 9A60     		str	r2, [r3, #8]	@ _11, _6->RLR
 170:src/stm32f1xx_hal_iwdg.c **** 
 171:src/stm32f1xx_hal_iwdg.c ****   /* Check pending flag, if previous update not done, return timeout */
 172:src/stm32f1xx_hal_iwdg.c ****   tickstart = HAL_GetTick();
 107              		.loc 1 172 0
 108 001c FFF7FEFF 		bl	HAL_GetTick	@
 109              	.LVL1:
 110 0020 0546     		mov	r5, r0	@ tickstart,
 111              	.LVL2:
 112              	.L3:
 173:src/stm32f1xx_hal_iwdg.c **** 
ARM GAS  /tmp/ccnCBS2w.s 			page 6


 174:src/stm32f1xx_hal_iwdg.c ****   /* Wait for register to be updated */
 175:src/stm32f1xx_hal_iwdg.c ****   while (hiwdg->Instance->SR != RESET)
 113              		.loc 1 175 0
 114 0022 2368     		ldr	r3, [r4]	@ _15, hiwdg_4(D)->Instance
 115 0024 D868     		ldr	r0, [r3, #12]	@ _16, _15->SR
 116 0026 18B9     		cbnz	r0, .L4	@ _16,
 176:src/stm32f1xx_hal_iwdg.c ****   {
 177:src/stm32f1xx_hal_iwdg.c ****     if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 178:src/stm32f1xx_hal_iwdg.c ****     {
 179:src/stm32f1xx_hal_iwdg.c ****       return HAL_TIMEOUT;
 180:src/stm32f1xx_hal_iwdg.c ****     }
 181:src/stm32f1xx_hal_iwdg.c ****   }
 182:src/stm32f1xx_hal_iwdg.c **** 
 183:src/stm32f1xx_hal_iwdg.c ****   /* Reload IWDG counter with value defined in the reload register */
 184:src/stm32f1xx_hal_iwdg.c ****   __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 117              		.loc 1 184 0
 118 0028 4AF6AA22 		movw	r2, #43690	@ tmp123,
 119 002c 1A60     		str	r2, [r3]	@ tmp123, _15->KR
 185:src/stm32f1xx_hal_iwdg.c **** 
 186:src/stm32f1xx_hal_iwdg.c ****   /* Return function status */
 187:src/stm32f1xx_hal_iwdg.c ****   return HAL_OK;
 120              		.loc 1 187 0
 121 002e 38BD     		pop	{r3, r4, r5, pc}	@
 122              	.LVL3:
 123              	.L4:
 177:src/stm32f1xx_hal_iwdg.c ****     {
 124              		.loc 1 177 0
 125 0030 FFF7FEFF 		bl	HAL_GetTick	@
 126              	.LVL4:
 127 0034 401B     		subs	r0, r0, r5	@ tmp122,, tickstart
 128 0036 3028     		cmp	r0, #48	@ tmp122,
 129 0038 F3D9     		bls	.L3	@,
 179:src/stm32f1xx_hal_iwdg.c ****     }
 130              		.loc 1 179 0
 131 003a 0320     		movs	r0, #3	@ <retval>,
 188:src/stm32f1xx_hal_iwdg.c **** }
 132              		.loc 1 188 0
 133 003c 38BD     		pop	{r3, r4, r5, pc}	@
 134              	.LVL5:
 135              	.L5:
 153:src/stm32f1xx_hal_iwdg.c ****   }
 136              		.loc 1 153 0
 137 003e 0120     		movs	r0, #1	@ <retval>,
 138              	.LVL6:
 139 0040 38BD     		pop	{r3, r4, r5, pc}	@
 140              		.cfi_endproc
 141              	.LFE65:
 142              		.size	HAL_IWDG_Init, .-HAL_IWDG_Init
 143              		.align	1
 144              		.global	HAL_IWDG_Refresh
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu softvfp
 149              		.type	HAL_IWDG_Refresh, %function
 150              	HAL_IWDG_Refresh:
 151              	.LFB66:
ARM GAS  /tmp/ccnCBS2w.s 			page 7


 189:src/stm32f1xx_hal_iwdg.c **** 
 190:src/stm32f1xx_hal_iwdg.c **** /**
 191:src/stm32f1xx_hal_iwdg.c ****   * @}
 192:src/stm32f1xx_hal_iwdg.c ****   */
 193:src/stm32f1xx_hal_iwdg.c **** 
 194:src/stm32f1xx_hal_iwdg.c **** /** @addtogroup IWDG_Exported_Functions_Group2
 195:src/stm32f1xx_hal_iwdg.c ****   *  @brief   IO operation functions
 196:src/stm32f1xx_hal_iwdg.c ****   *
 197:src/stm32f1xx_hal_iwdg.c **** @verbatim
 198:src/stm32f1xx_hal_iwdg.c ****  ===============================================================================
 199:src/stm32f1xx_hal_iwdg.c ****                       ##### IO operation functions #####
 200:src/stm32f1xx_hal_iwdg.c ****  ===============================================================================
 201:src/stm32f1xx_hal_iwdg.c ****  [..]  This section provides functions allowing to:
 202:src/stm32f1xx_hal_iwdg.c ****       (+) Refresh the IWDG.
 203:src/stm32f1xx_hal_iwdg.c **** 
 204:src/stm32f1xx_hal_iwdg.c **** @endverbatim
 205:src/stm32f1xx_hal_iwdg.c ****   * @{
 206:src/stm32f1xx_hal_iwdg.c ****   */
 207:src/stm32f1xx_hal_iwdg.c **** 
 208:src/stm32f1xx_hal_iwdg.c **** /**
 209:src/stm32f1xx_hal_iwdg.c ****   * @brief  Refresh the IWDG.
 210:src/stm32f1xx_hal_iwdg.c ****   * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
 211:src/stm32f1xx_hal_iwdg.c ****   *                the configuration information for the specified IWDG module.
 212:src/stm32f1xx_hal_iwdg.c ****   * @retval HAL status
 213:src/stm32f1xx_hal_iwdg.c ****   */
 214:src/stm32f1xx_hal_iwdg.c **** HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
 215:src/stm32f1xx_hal_iwdg.c **** {
 152              		.loc 1 215 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		@ link register save eliminated.
 157              	.LVL7:
 216:src/stm32f1xx_hal_iwdg.c ****   /* Reload IWDG counter with value defined in the reload register */
 217:src/stm32f1xx_hal_iwdg.c ****   __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 158              		.loc 1 217 0
 159 0042 4AF6AA22 		movw	r2, #43690	@ tmp113,
 160 0046 0368     		ldr	r3, [r0]	@ _3, hiwdg_2(D)->Instance
 218:src/stm32f1xx_hal_iwdg.c **** 
 219:src/stm32f1xx_hal_iwdg.c ****   /* Return function status */
 220:src/stm32f1xx_hal_iwdg.c ****   return HAL_OK;
 221:src/stm32f1xx_hal_iwdg.c **** }
 161              		.loc 1 221 0
 162 0048 0020     		movs	r0, #0	@,
 163              	.LVL8:
 217:src/stm32f1xx_hal_iwdg.c **** 
 164              		.loc 1 217 0
 165 004a 1A60     		str	r2, [r3]	@ tmp113, _3->KR
 166              		.loc 1 221 0
 167 004c 7047     		bx	lr	@
 168              		.cfi_endproc
 169              	.LFE66:
 170              		.size	HAL_IWDG_Refresh, .-HAL_IWDG_Refresh
 171              	.Letext0:
 172              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 173              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 174              		.file 4 "../cmsiscore/inc/core_cm3.h"
ARM GAS  /tmp/ccnCBS2w.s 			page 8


 175              		.file 5 "../cmsisstm32f1xx/inc/system_stm32f1xx.h"
 176              		.file 6 "../cmsisstm32f1xx/inc/stm32f103x6.h"
 177              		.file 7 "../cmsisstm32f1xx/inc/stm32f1xx.h"
 178              		.file 8 "./inc/stm32f1xx_hal_def.h"
 179              		.file 9 "./inc/stm32f1xx_hal_iwdg.h"
 180              		.file 10 "./inc/stm32f1xx_hal.h"
 181              		.section	.debug_info,"",%progbits
 182              	.Ldebug_info0:
 183 0000 FE020000 		.4byte	0x2fe
 184 0004 0200     		.2byte	0x2
 185 0006 00000000 		.4byte	.Ldebug_abbrev0
 186 000a 04       		.byte	0x4
 187 000b 01       		.uleb128 0x1
 188 000c 54010000 		.4byte	.LASF44
 189 0010 0C       		.byte	0xc
 190 0011 D3010000 		.4byte	.LASF45
 191 0015 4A020000 		.4byte	.LASF46
 192 0019 00000000 		.4byte	.Ltext0
 193 001d 4E000000 		.4byte	.Letext0
 194 0021 00000000 		.4byte	.Ldebug_line0
 195 0025 02       		.uleb128 0x2
 196 0026 01       		.byte	0x1
 197 0027 06       		.byte	0x6
 198 0028 C3020000 		.4byte	.LASF0
 199 002c 03       		.uleb128 0x3
 200 002d 00000000 		.4byte	.LASF4
 201 0031 02       		.byte	0x2
 202 0032 1D       		.byte	0x1d
 203 0033 37000000 		.4byte	0x37
 204 0037 02       		.uleb128 0x2
 205 0038 01       		.byte	0x1
 206 0039 08       		.byte	0x8
 207 003a 99000000 		.4byte	.LASF1
 208 003e 02       		.uleb128 0x2
 209 003f 02       		.byte	0x2
 210 0040 05       		.byte	0x5
 211 0041 8A020000 		.4byte	.LASF2
 212 0045 02       		.uleb128 0x2
 213 0046 02       		.byte	0x2
 214 0047 07       		.byte	0x7
 215 0048 44000000 		.4byte	.LASF3
 216 004c 03       		.uleb128 0x3
 217 004d 27000000 		.4byte	.LASF5
 218 0051 02       		.byte	0x2
 219 0052 3F       		.byte	0x3f
 220 0053 57000000 		.4byte	0x57
 221 0057 02       		.uleb128 0x2
 222 0058 04       		.byte	0x4
 223 0059 05       		.byte	0x5
 224 005a AE020000 		.4byte	.LASF6
 225 005e 03       		.uleb128 0x3
 226 005f 11010000 		.4byte	.LASF7
 227 0063 02       		.byte	0x2
 228 0064 41       		.byte	0x41
 229 0065 69000000 		.4byte	0x69
 230 0069 02       		.uleb128 0x2
 231 006a 04       		.byte	0x4
ARM GAS  /tmp/ccnCBS2w.s 			page 9


 232 006b 07       		.byte	0x7
 233 006c B5000000 		.4byte	.LASF8
 234 0070 02       		.uleb128 0x2
 235 0071 08       		.byte	0x8
 236 0072 05       		.byte	0x5
 237 0073 0F020000 		.4byte	.LASF9
 238 0077 02       		.uleb128 0x2
 239 0078 08       		.byte	0x8
 240 0079 07       		.byte	0x7
 241 007a B4010000 		.4byte	.LASF10
 242 007e 04       		.uleb128 0x4
 243 007f 04       		.byte	0x4
 244 0080 05       		.byte	0x5
 245 0081 696E7400 		.ascii	"int\000"
 246 0085 02       		.uleb128 0x2
 247 0086 04       		.byte	0x4
 248 0087 07       		.byte	0x7
 249 0088 61000000 		.4byte	.LASF11
 250 008c 03       		.uleb128 0x3
 251 008d CB010000 		.4byte	.LASF12
 252 0091 03       		.byte	0x3
 253 0092 18       		.byte	0x18
 254 0093 2C000000 		.4byte	0x2c
 255 0097 05       		.uleb128 0x5
 256 0098 8C000000 		.4byte	0x8c
 257 009c 03       		.uleb128 0x3
 258 009d EC010000 		.4byte	.LASF13
 259 00a1 03       		.byte	0x3
 260 00a2 2C       		.byte	0x2c
 261 00a3 4C000000 		.4byte	0x4c
 262 00a7 06       		.uleb128 0x6
 263 00a8 9C000000 		.4byte	0x9c
 264 00ac 03       		.uleb128 0x3
 265 00ad A5020000 		.4byte	.LASF14
 266 00b1 03       		.byte	0x3
 267 00b2 30       		.byte	0x30
 268 00b3 5E000000 		.4byte	0x5e
 269 00b7 06       		.uleb128 0x6
 270 00b8 AC000000 		.4byte	0xac
 271 00bc 02       		.uleb128 0x2
 272 00bd 04       		.byte	0x4
 273 00be 07       		.byte	0x7
 274 00bf F4010000 		.4byte	.LASF15
 275 00c3 07       		.uleb128 0x7
 276 00c4 3E010000 		.4byte	.LASF16
 277 00c8 04       		.byte	0x4
 278 00c9 4807     		.2byte	0x748
 279 00cb A7000000 		.4byte	0xa7
 280 00cf 01       		.byte	0x1
 281 00d0 01       		.byte	0x1
 282 00d1 08       		.uleb128 0x8
 283 00d2 3A020000 		.4byte	.LASF17
 284 00d6 05       		.byte	0x5
 285 00d7 33       		.byte	0x33
 286 00d8 AC000000 		.4byte	0xac
 287 00dc 01       		.byte	0x1
 288 00dd 01       		.byte	0x1
ARM GAS  /tmp/ccnCBS2w.s 			page 10


 289 00de 09       		.uleb128 0x9
 290 00df 97000000 		.4byte	0x97
 291 00e3 EE000000 		.4byte	0xee
 292 00e7 0A       		.uleb128 0xa
 293 00e8 BC000000 		.4byte	0xbc
 294 00ec 0F       		.byte	0xf
 295 00ed 00       		.byte	0
 296 00ee 05       		.uleb128 0x5
 297 00ef DE000000 		.4byte	0xde
 298 00f3 08       		.uleb128 0x8
 299 00f4 A7000000 		.4byte	.LASF18
 300 00f8 05       		.byte	0x5
 301 00f9 34       		.byte	0x34
 302 00fa EE000000 		.4byte	0xee
 303 00fe 01       		.byte	0x1
 304 00ff 01       		.byte	0x1
 305 0100 09       		.uleb128 0x9
 306 0101 97000000 		.4byte	0x97
 307 0105 10010000 		.4byte	0x110
 308 0109 0A       		.uleb128 0xa
 309 010a BC000000 		.4byte	0xbc
 310 010e 07       		.byte	0x7
 311 010f 00       		.byte	0
 312 0110 05       		.uleb128 0x5
 313 0111 00010000 		.4byte	0x100
 314 0115 08       		.uleb128 0x8
 315 0116 30010000 		.4byte	.LASF19
 316 011a 05       		.byte	0x5
 317 011b 35       		.byte	0x35
 318 011c 10010000 		.4byte	0x110
 319 0120 01       		.byte	0x1
 320 0121 01       		.byte	0x1
 321 0122 0B       		.uleb128 0xb
 322 0123 10       		.byte	0x10
 323 0124 06       		.byte	0x6
 324 0125 8D01     		.2byte	0x18d
 325 0127 65010000 		.4byte	0x165
 326 012b 0C       		.uleb128 0xc
 327 012c 4B5200   		.ascii	"KR\000"
 328 012f 06       		.byte	0x6
 329 0130 8F01     		.2byte	0x18f
 330 0132 B7000000 		.4byte	0xb7
 331 0136 02       		.byte	0x2
 332 0137 23       		.byte	0x23
 333 0138 00       		.uleb128 0
 334 0139 0C       		.uleb128 0xc
 335 013a 505200   		.ascii	"PR\000"
 336 013d 06       		.byte	0x6
 337 013e 9001     		.2byte	0x190
 338 0140 B7000000 		.4byte	0xb7
 339 0144 02       		.byte	0x2
 340 0145 23       		.byte	0x23
 341 0146 04       		.uleb128 0x4
 342 0147 0C       		.uleb128 0xc
 343 0148 524C5200 		.ascii	"RLR\000"
 344 014c 06       		.byte	0x6
 345 014d 9101     		.2byte	0x191
ARM GAS  /tmp/ccnCBS2w.s 			page 11


 346 014f B7000000 		.4byte	0xb7
 347 0153 02       		.byte	0x2
 348 0154 23       		.byte	0x23
 349 0155 08       		.uleb128 0x8
 350 0156 0C       		.uleb128 0xc
 351 0157 535200   		.ascii	"SR\000"
 352 015a 06       		.byte	0x6
 353 015b 9201     		.2byte	0x192
 354 015d B7000000 		.4byte	0xb7
 355 0161 02       		.byte	0x2
 356 0162 23       		.byte	0x23
 357 0163 0C       		.uleb128 0xc
 358 0164 00       		.byte	0
 359 0165 0D       		.uleb128 0xd
 360 0166 37000000 		.4byte	.LASF20
 361 016a 06       		.byte	0x6
 362 016b 9301     		.2byte	0x193
 363 016d 22010000 		.4byte	0x122
 364 0171 0E       		.uleb128 0xe
 365 0172 01       		.byte	0x1
 366 0173 37000000 		.4byte	0x37
 367 0177 07       		.byte	0x7
 368 0178 98       		.byte	0x98
 369 0179 8A010000 		.4byte	0x18a
 370 017d 0F       		.uleb128 0xf
 371 017e C7000000 		.4byte	.LASF21
 372 0182 00       		.byte	0
 373 0183 10       		.uleb128 0x10
 374 0184 53455400 		.ascii	"SET\000"
 375 0188 01       		.byte	0x1
 376 0189 00       		.byte	0
 377 018a 02       		.uleb128 0x2
 378 018b 08       		.byte	0x8
 379 018c 04       		.byte	0x4
 380 018d B7020000 		.4byte	.LASF22
 381 0191 0E       		.uleb128 0xe
 382 0192 01       		.byte	0x1
 383 0193 37000000 		.4byte	0x37
 384 0197 08       		.byte	0x8
 385 0198 2A       		.byte	0x2a
 386 0199 B6010000 		.4byte	0x1b6
 387 019d 0F       		.uleb128 0xf
 388 019e 6E000000 		.4byte	.LASF23
 389 01a2 00       		.byte	0
 390 01a3 0F       		.uleb128 0xf
 391 01a4 57000000 		.4byte	.LASF24
 392 01a8 01       		.byte	0x1
 393 01a9 0F       		.uleb128 0xf
 394 01aa 4B010000 		.4byte	.LASF25
 395 01ae 02       		.byte	0x2
 396 01af 0F       		.uleb128 0xf
 397 01b0 05010000 		.4byte	.LASF26
 398 01b4 03       		.byte	0x3
 399 01b5 00       		.byte	0
 400 01b6 03       		.uleb128 0x3
 401 01b7 FD010000 		.4byte	.LASF27
 402 01bb 08       		.byte	0x8
ARM GAS  /tmp/ccnCBS2w.s 			page 12


 403 01bc 2F       		.byte	0x2f
 404 01bd 91010000 		.4byte	0x191
 405 01c1 11       		.uleb128 0x11
 406 01c2 08       		.byte	0x8
 407 01c3 09       		.byte	0x9
 408 01c4 2F       		.byte	0x2f
 409 01c5 E6010000 		.4byte	0x1e6
 410 01c9 12       		.uleb128 0x12
 411 01ca CF020000 		.4byte	.LASF28
 412 01ce 09       		.byte	0x9
 413 01cf 31       		.byte	0x31
 414 01d0 AC000000 		.4byte	0xac
 415 01d4 02       		.byte	0x2
 416 01d5 23       		.byte	0x23
 417 01d6 00       		.uleb128 0
 418 01d7 12       		.uleb128 0x12
 419 01d8 20000000 		.4byte	.LASF29
 420 01dc 09       		.byte	0x9
 421 01dd 34       		.byte	0x34
 422 01de AC000000 		.4byte	0xac
 423 01e2 02       		.byte	0x2
 424 01e3 23       		.byte	0x23
 425 01e4 04       		.uleb128 0x4
 426 01e5 00       		.byte	0
 427 01e6 03       		.uleb128 0x3
 428 01e7 75000000 		.4byte	.LASF30
 429 01eb 09       		.byte	0x9
 430 01ec 37       		.byte	0x37
 431 01ed C1010000 		.4byte	0x1c1
 432 01f1 11       		.uleb128 0x11
 433 01f2 0C       		.byte	0xc
 434 01f3 09       		.byte	0x9
 435 01f4 3C       		.byte	0x3c
 436 01f5 16020000 		.4byte	0x216
 437 01f9 12       		.uleb128 0x12
 438 01fa 81020000 		.4byte	.LASF31
 439 01fe 09       		.byte	0x9
 440 01ff 3E       		.byte	0x3e
 441 0200 16020000 		.4byte	0x216
 442 0204 02       		.byte	0x2
 443 0205 23       		.byte	0x23
 444 0206 00       		.uleb128 0
 445 0207 12       		.uleb128 0x12
 446 0208 E0000000 		.4byte	.LASF32
 447 020c 09       		.byte	0x9
 448 020d 40       		.byte	0x40
 449 020e E6010000 		.4byte	0x1e6
 450 0212 02       		.byte	0x2
 451 0213 23       		.byte	0x23
 452 0214 04       		.uleb128 0x4
 453 0215 00       		.byte	0
 454 0216 13       		.uleb128 0x13
 455 0217 04       		.byte	0x4
 456 0218 65010000 		.4byte	0x165
 457 021c 03       		.uleb128 0x3
 458 021d CD000000 		.4byte	.LASF33
 459 0221 09       		.byte	0x9
ARM GAS  /tmp/ccnCBS2w.s 			page 13


 460 0222 42       		.byte	0x42
 461 0223 F1010000 		.4byte	0x1f1
 462 0227 0E       		.uleb128 0xe
 463 0228 01       		.byte	0x1
 464 0229 37000000 		.4byte	0x37
 465 022d 0A       		.byte	0xa
 466 022e 33       		.byte	0x33
 467 022f 4C020000 		.4byte	0x24c
 468 0233 0F       		.uleb128 0xf
 469 0234 27020000 		.4byte	.LASF34
 470 0238 64       		.byte	0x64
 471 0239 0F       		.uleb128 0xf
 472 023a F1000000 		.4byte	.LASF35
 473 023e 0A       		.byte	0xa
 474 023f 0F       		.uleb128 0xf
 475 0240 86000000 		.4byte	.LASF36
 476 0244 01       		.byte	0x1
 477 0245 0F       		.uleb128 0xf
 478 0246 0A000000 		.4byte	.LASF37
 479 024a 01       		.byte	0x1
 480 024b 00       		.byte	0
 481 024c 03       		.uleb128 0x3
 482 024d 1C010000 		.4byte	.LASF38
 483 0251 0A       		.byte	0xa
 484 0252 38       		.byte	0x38
 485 0253 27020000 		.4byte	0x227
 486 0257 08       		.uleb128 0x8
 487 0258 76020000 		.4byte	.LASF39
 488 025c 0A       		.byte	0xa
 489 025d 3D       		.byte	0x3d
 490 025e AC000000 		.4byte	0xac
 491 0262 01       		.byte	0x1
 492 0263 01       		.byte	0x1
 493 0264 08       		.uleb128 0x8
 494 0265 A9010000 		.4byte	.LASF40
 495 0269 0A       		.byte	0xa
 496 026a 3E       		.byte	0x3e
 497 026b 4C020000 		.4byte	0x24c
 498 026f 01       		.byte	0x1
 499 0270 01       		.byte	0x1
 500 0271 14       		.uleb128 0x14
 501 0272 01       		.byte	0x1
 502 0273 94020000 		.4byte	.LASF41
 503 0277 01       		.byte	0x1
 504 0278 D6       		.byte	0xd6
 505 0279 01       		.byte	0x1
 506 027a B6010000 		.4byte	0x1b6
 507 027e 42000000 		.4byte	.LFB66
 508 0282 4E000000 		.4byte	.LFE66
 509 0286 02       		.byte	0x2
 510 0287 7D       		.byte	0x7d
 511 0288 00       		.sleb128 0
 512 0289 01       		.byte	0x1
 513 028a 9E020000 		.4byte	0x29e
 514 028e 15       		.uleb128 0x15
 515 028f 31000000 		.4byte	.LASF43
 516 0293 01       		.byte	0x1
ARM GAS  /tmp/ccnCBS2w.s 			page 14


 517 0294 D6       		.byte	0xd6
 518 0295 9E020000 		.4byte	0x29e
 519 0299 00000000 		.4byte	.LLST3
 520 029d 00       		.byte	0
 521 029e 13       		.uleb128 0x13
 522 029f 04       		.byte	0x4
 523 02a0 1C020000 		.4byte	0x21c
 524 02a4 16       		.uleb128 0x16
 525 02a5 01       		.byte	0x1
 526 02a6 D9020000 		.4byte	.LASF42
 527 02aa 01       		.byte	0x1
 528 02ab 92       		.byte	0x92
 529 02ac 01       		.byte	0x1
 530 02ad B6010000 		.4byte	0x1b6
 531 02b1 00000000 		.4byte	.LFB65
 532 02b5 42000000 		.4byte	.LFE65
 533 02b9 21000000 		.4byte	.LLST0
 534 02bd 01       		.byte	0x1
 535 02be F3020000 		.4byte	0x2f3
 536 02c2 15       		.uleb128 0x15
 537 02c3 31000000 		.4byte	.LASF43
 538 02c7 01       		.byte	0x1
 539 02c8 92       		.byte	0x92
 540 02c9 9E020000 		.4byte	0x29e
 541 02cd 41000000 		.4byte	.LLST1
 542 02d1 17       		.uleb128 0x17
 543 02d2 1D020000 		.4byte	.LASF47
 544 02d6 01       		.byte	0x1
 545 02d7 94       		.byte	0x94
 546 02d8 AC000000 		.4byte	0xac
 547 02dc 75000000 		.4byte	.LLST2
 548 02e0 18       		.uleb128 0x18
 549 02e1 20000000 		.4byte	.LVL1
 550 02e5 F3020000 		.4byte	0x2f3
 551 02e9 18       		.uleb128 0x18
 552 02ea 34000000 		.4byte	.LVL4
 553 02ee F3020000 		.4byte	0x2f3
 554 02f2 00       		.byte	0
 555 02f3 19       		.uleb128 0x19
 556 02f4 01       		.byte	0x1
 557 02f5 01       		.byte	0x1
 558 02f6 E5000000 		.4byte	.LASF48
 559 02fa E5000000 		.4byte	.LASF48
 560 02fe 0A       		.byte	0xa
 561 02ff 2A01     		.2byte	0x12a
 562 0301 00       		.byte	0
 563              		.section	.debug_abbrev,"",%progbits
 564              	.Ldebug_abbrev0:
 565 0000 01       		.uleb128 0x1
 566 0001 11       		.uleb128 0x11
 567 0002 01       		.byte	0x1
 568 0003 25       		.uleb128 0x25
 569 0004 0E       		.uleb128 0xe
 570 0005 13       		.uleb128 0x13
 571 0006 0B       		.uleb128 0xb
 572 0007 03       		.uleb128 0x3
 573 0008 0E       		.uleb128 0xe
ARM GAS  /tmp/ccnCBS2w.s 			page 15


 574 0009 1B       		.uleb128 0x1b
 575 000a 0E       		.uleb128 0xe
 576 000b 11       		.uleb128 0x11
 577 000c 01       		.uleb128 0x1
 578 000d 12       		.uleb128 0x12
 579 000e 01       		.uleb128 0x1
 580 000f 10       		.uleb128 0x10
 581 0010 06       		.uleb128 0x6
 582 0011 00       		.byte	0
 583 0012 00       		.byte	0
 584 0013 02       		.uleb128 0x2
 585 0014 24       		.uleb128 0x24
 586 0015 00       		.byte	0
 587 0016 0B       		.uleb128 0xb
 588 0017 0B       		.uleb128 0xb
 589 0018 3E       		.uleb128 0x3e
 590 0019 0B       		.uleb128 0xb
 591 001a 03       		.uleb128 0x3
 592 001b 0E       		.uleb128 0xe
 593 001c 00       		.byte	0
 594 001d 00       		.byte	0
 595 001e 03       		.uleb128 0x3
 596 001f 16       		.uleb128 0x16
 597 0020 00       		.byte	0
 598 0021 03       		.uleb128 0x3
 599 0022 0E       		.uleb128 0xe
 600 0023 3A       		.uleb128 0x3a
 601 0024 0B       		.uleb128 0xb
 602 0025 3B       		.uleb128 0x3b
 603 0026 0B       		.uleb128 0xb
 604 0027 49       		.uleb128 0x49
 605 0028 13       		.uleb128 0x13
 606 0029 00       		.byte	0
 607 002a 00       		.byte	0
 608 002b 04       		.uleb128 0x4
 609 002c 24       		.uleb128 0x24
 610 002d 00       		.byte	0
 611 002e 0B       		.uleb128 0xb
 612 002f 0B       		.uleb128 0xb
 613 0030 3E       		.uleb128 0x3e
 614 0031 0B       		.uleb128 0xb
 615 0032 03       		.uleb128 0x3
 616 0033 08       		.uleb128 0x8
 617 0034 00       		.byte	0
 618 0035 00       		.byte	0
 619 0036 05       		.uleb128 0x5
 620 0037 26       		.uleb128 0x26
 621 0038 00       		.byte	0
 622 0039 49       		.uleb128 0x49
 623 003a 13       		.uleb128 0x13
 624 003b 00       		.byte	0
 625 003c 00       		.byte	0
 626 003d 06       		.uleb128 0x6
 627 003e 35       		.uleb128 0x35
 628 003f 00       		.byte	0
 629 0040 49       		.uleb128 0x49
 630 0041 13       		.uleb128 0x13
ARM GAS  /tmp/ccnCBS2w.s 			page 16


 631 0042 00       		.byte	0
 632 0043 00       		.byte	0
 633 0044 07       		.uleb128 0x7
 634 0045 34       		.uleb128 0x34
 635 0046 00       		.byte	0
 636 0047 03       		.uleb128 0x3
 637 0048 0E       		.uleb128 0xe
 638 0049 3A       		.uleb128 0x3a
 639 004a 0B       		.uleb128 0xb
 640 004b 3B       		.uleb128 0x3b
 641 004c 05       		.uleb128 0x5
 642 004d 49       		.uleb128 0x49
 643 004e 13       		.uleb128 0x13
 644 004f 3F       		.uleb128 0x3f
 645 0050 0C       		.uleb128 0xc
 646 0051 3C       		.uleb128 0x3c
 647 0052 0C       		.uleb128 0xc
 648 0053 00       		.byte	0
 649 0054 00       		.byte	0
 650 0055 08       		.uleb128 0x8
 651 0056 34       		.uleb128 0x34
 652 0057 00       		.byte	0
 653 0058 03       		.uleb128 0x3
 654 0059 0E       		.uleb128 0xe
 655 005a 3A       		.uleb128 0x3a
 656 005b 0B       		.uleb128 0xb
 657 005c 3B       		.uleb128 0x3b
 658 005d 0B       		.uleb128 0xb
 659 005e 49       		.uleb128 0x49
 660 005f 13       		.uleb128 0x13
 661 0060 3F       		.uleb128 0x3f
 662 0061 0C       		.uleb128 0xc
 663 0062 3C       		.uleb128 0x3c
 664 0063 0C       		.uleb128 0xc
 665 0064 00       		.byte	0
 666 0065 00       		.byte	0
 667 0066 09       		.uleb128 0x9
 668 0067 01       		.uleb128 0x1
 669 0068 01       		.byte	0x1
 670 0069 49       		.uleb128 0x49
 671 006a 13       		.uleb128 0x13
 672 006b 01       		.uleb128 0x1
 673 006c 13       		.uleb128 0x13
 674 006d 00       		.byte	0
 675 006e 00       		.byte	0
 676 006f 0A       		.uleb128 0xa
 677 0070 21       		.uleb128 0x21
 678 0071 00       		.byte	0
 679 0072 49       		.uleb128 0x49
 680 0073 13       		.uleb128 0x13
 681 0074 2F       		.uleb128 0x2f
 682 0075 0B       		.uleb128 0xb
 683 0076 00       		.byte	0
 684 0077 00       		.byte	0
 685 0078 0B       		.uleb128 0xb
 686 0079 13       		.uleb128 0x13
 687 007a 01       		.byte	0x1
ARM GAS  /tmp/ccnCBS2w.s 			page 17


 688 007b 0B       		.uleb128 0xb
 689 007c 0B       		.uleb128 0xb
 690 007d 3A       		.uleb128 0x3a
 691 007e 0B       		.uleb128 0xb
 692 007f 3B       		.uleb128 0x3b
 693 0080 05       		.uleb128 0x5
 694 0081 01       		.uleb128 0x1
 695 0082 13       		.uleb128 0x13
 696 0083 00       		.byte	0
 697 0084 00       		.byte	0
 698 0085 0C       		.uleb128 0xc
 699 0086 0D       		.uleb128 0xd
 700 0087 00       		.byte	0
 701 0088 03       		.uleb128 0x3
 702 0089 08       		.uleb128 0x8
 703 008a 3A       		.uleb128 0x3a
 704 008b 0B       		.uleb128 0xb
 705 008c 3B       		.uleb128 0x3b
 706 008d 05       		.uleb128 0x5
 707 008e 49       		.uleb128 0x49
 708 008f 13       		.uleb128 0x13
 709 0090 38       		.uleb128 0x38
 710 0091 0A       		.uleb128 0xa
 711 0092 00       		.byte	0
 712 0093 00       		.byte	0
 713 0094 0D       		.uleb128 0xd
 714 0095 16       		.uleb128 0x16
 715 0096 00       		.byte	0
 716 0097 03       		.uleb128 0x3
 717 0098 0E       		.uleb128 0xe
 718 0099 3A       		.uleb128 0x3a
 719 009a 0B       		.uleb128 0xb
 720 009b 3B       		.uleb128 0x3b
 721 009c 05       		.uleb128 0x5
 722 009d 49       		.uleb128 0x49
 723 009e 13       		.uleb128 0x13
 724 009f 00       		.byte	0
 725 00a0 00       		.byte	0
 726 00a1 0E       		.uleb128 0xe
 727 00a2 04       		.uleb128 0x4
 728 00a3 01       		.byte	0x1
 729 00a4 0B       		.uleb128 0xb
 730 00a5 0B       		.uleb128 0xb
 731 00a6 49       		.uleb128 0x49
 732 00a7 13       		.uleb128 0x13
 733 00a8 3A       		.uleb128 0x3a
 734 00a9 0B       		.uleb128 0xb
 735 00aa 3B       		.uleb128 0x3b
 736 00ab 0B       		.uleb128 0xb
 737 00ac 01       		.uleb128 0x1
 738 00ad 13       		.uleb128 0x13
 739 00ae 00       		.byte	0
 740 00af 00       		.byte	0
 741 00b0 0F       		.uleb128 0xf
 742 00b1 28       		.uleb128 0x28
 743 00b2 00       		.byte	0
 744 00b3 03       		.uleb128 0x3
ARM GAS  /tmp/ccnCBS2w.s 			page 18


 745 00b4 0E       		.uleb128 0xe
 746 00b5 1C       		.uleb128 0x1c
 747 00b6 0B       		.uleb128 0xb
 748 00b7 00       		.byte	0
 749 00b8 00       		.byte	0
 750 00b9 10       		.uleb128 0x10
 751 00ba 28       		.uleb128 0x28
 752 00bb 00       		.byte	0
 753 00bc 03       		.uleb128 0x3
 754 00bd 08       		.uleb128 0x8
 755 00be 1C       		.uleb128 0x1c
 756 00bf 0B       		.uleb128 0xb
 757 00c0 00       		.byte	0
 758 00c1 00       		.byte	0
 759 00c2 11       		.uleb128 0x11
 760 00c3 13       		.uleb128 0x13
 761 00c4 01       		.byte	0x1
 762 00c5 0B       		.uleb128 0xb
 763 00c6 0B       		.uleb128 0xb
 764 00c7 3A       		.uleb128 0x3a
 765 00c8 0B       		.uleb128 0xb
 766 00c9 3B       		.uleb128 0x3b
 767 00ca 0B       		.uleb128 0xb
 768 00cb 01       		.uleb128 0x1
 769 00cc 13       		.uleb128 0x13
 770 00cd 00       		.byte	0
 771 00ce 00       		.byte	0
 772 00cf 12       		.uleb128 0x12
 773 00d0 0D       		.uleb128 0xd
 774 00d1 00       		.byte	0
 775 00d2 03       		.uleb128 0x3
 776 00d3 0E       		.uleb128 0xe
 777 00d4 3A       		.uleb128 0x3a
 778 00d5 0B       		.uleb128 0xb
 779 00d6 3B       		.uleb128 0x3b
 780 00d7 0B       		.uleb128 0xb
 781 00d8 49       		.uleb128 0x49
 782 00d9 13       		.uleb128 0x13
 783 00da 38       		.uleb128 0x38
 784 00db 0A       		.uleb128 0xa
 785 00dc 00       		.byte	0
 786 00dd 00       		.byte	0
 787 00de 13       		.uleb128 0x13
 788 00df 0F       		.uleb128 0xf
 789 00e0 00       		.byte	0
 790 00e1 0B       		.uleb128 0xb
 791 00e2 0B       		.uleb128 0xb
 792 00e3 49       		.uleb128 0x49
 793 00e4 13       		.uleb128 0x13
 794 00e5 00       		.byte	0
 795 00e6 00       		.byte	0
 796 00e7 14       		.uleb128 0x14
 797 00e8 2E       		.uleb128 0x2e
 798 00e9 01       		.byte	0x1
 799 00ea 3F       		.uleb128 0x3f
 800 00eb 0C       		.uleb128 0xc
 801 00ec 03       		.uleb128 0x3
ARM GAS  /tmp/ccnCBS2w.s 			page 19


 802 00ed 0E       		.uleb128 0xe
 803 00ee 3A       		.uleb128 0x3a
 804 00ef 0B       		.uleb128 0xb
 805 00f0 3B       		.uleb128 0x3b
 806 00f1 0B       		.uleb128 0xb
 807 00f2 27       		.uleb128 0x27
 808 00f3 0C       		.uleb128 0xc
 809 00f4 49       		.uleb128 0x49
 810 00f5 13       		.uleb128 0x13
 811 00f6 11       		.uleb128 0x11
 812 00f7 01       		.uleb128 0x1
 813 00f8 12       		.uleb128 0x12
 814 00f9 01       		.uleb128 0x1
 815 00fa 40       		.uleb128 0x40
 816 00fb 0A       		.uleb128 0xa
 817 00fc 9742     		.uleb128 0x2117
 818 00fe 0C       		.uleb128 0xc
 819 00ff 01       		.uleb128 0x1
 820 0100 13       		.uleb128 0x13
 821 0101 00       		.byte	0
 822 0102 00       		.byte	0
 823 0103 15       		.uleb128 0x15
 824 0104 05       		.uleb128 0x5
 825 0105 00       		.byte	0
 826 0106 03       		.uleb128 0x3
 827 0107 0E       		.uleb128 0xe
 828 0108 3A       		.uleb128 0x3a
 829 0109 0B       		.uleb128 0xb
 830 010a 3B       		.uleb128 0x3b
 831 010b 0B       		.uleb128 0xb
 832 010c 49       		.uleb128 0x49
 833 010d 13       		.uleb128 0x13
 834 010e 02       		.uleb128 0x2
 835 010f 06       		.uleb128 0x6
 836 0110 00       		.byte	0
 837 0111 00       		.byte	0
 838 0112 16       		.uleb128 0x16
 839 0113 2E       		.uleb128 0x2e
 840 0114 01       		.byte	0x1
 841 0115 3F       		.uleb128 0x3f
 842 0116 0C       		.uleb128 0xc
 843 0117 03       		.uleb128 0x3
 844 0118 0E       		.uleb128 0xe
 845 0119 3A       		.uleb128 0x3a
 846 011a 0B       		.uleb128 0xb
 847 011b 3B       		.uleb128 0x3b
 848 011c 0B       		.uleb128 0xb
 849 011d 27       		.uleb128 0x27
 850 011e 0C       		.uleb128 0xc
 851 011f 49       		.uleb128 0x49
 852 0120 13       		.uleb128 0x13
 853 0121 11       		.uleb128 0x11
 854 0122 01       		.uleb128 0x1
 855 0123 12       		.uleb128 0x12
 856 0124 01       		.uleb128 0x1
 857 0125 40       		.uleb128 0x40
 858 0126 06       		.uleb128 0x6
ARM GAS  /tmp/ccnCBS2w.s 			page 20


 859 0127 9742     		.uleb128 0x2117
 860 0129 0C       		.uleb128 0xc
 861 012a 01       		.uleb128 0x1
 862 012b 13       		.uleb128 0x13
 863 012c 00       		.byte	0
 864 012d 00       		.byte	0
 865 012e 17       		.uleb128 0x17
 866 012f 34       		.uleb128 0x34
 867 0130 00       		.byte	0
 868 0131 03       		.uleb128 0x3
 869 0132 0E       		.uleb128 0xe
 870 0133 3A       		.uleb128 0x3a
 871 0134 0B       		.uleb128 0xb
 872 0135 3B       		.uleb128 0x3b
 873 0136 0B       		.uleb128 0xb
 874 0137 49       		.uleb128 0x49
 875 0138 13       		.uleb128 0x13
 876 0139 02       		.uleb128 0x2
 877 013a 06       		.uleb128 0x6
 878 013b 00       		.byte	0
 879 013c 00       		.byte	0
 880 013d 18       		.uleb128 0x18
 881 013e 898201   		.uleb128 0x4109
 882 0141 00       		.byte	0
 883 0142 11       		.uleb128 0x11
 884 0143 01       		.uleb128 0x1
 885 0144 31       		.uleb128 0x31
 886 0145 13       		.uleb128 0x13
 887 0146 00       		.byte	0
 888 0147 00       		.byte	0
 889 0148 19       		.uleb128 0x19
 890 0149 2E       		.uleb128 0x2e
 891 014a 00       		.byte	0
 892 014b 3F       		.uleb128 0x3f
 893 014c 0C       		.uleb128 0xc
 894 014d 3C       		.uleb128 0x3c
 895 014e 0C       		.uleb128 0xc
 896 014f 8740     		.uleb128 0x2007
 897 0151 0E       		.uleb128 0xe
 898 0152 03       		.uleb128 0x3
 899 0153 0E       		.uleb128 0xe
 900 0154 3A       		.uleb128 0x3a
 901 0155 0B       		.uleb128 0xb
 902 0156 3B       		.uleb128 0x3b
 903 0157 05       		.uleb128 0x5
 904 0158 00       		.byte	0
 905 0159 00       		.byte	0
 906 015a 00       		.byte	0
 907              		.section	.debug_loc,"",%progbits
 908              	.Ldebug_loc0:
 909              	.LLST3:
 910 0000 42000000 		.4byte	.LVL7-.Ltext0
 911 0004 4A000000 		.4byte	.LVL8-.Ltext0
 912 0008 0100     		.2byte	0x1
 913 000a 50       		.byte	0x50
 914 000b 4A000000 		.4byte	.LVL8-.Ltext0
 915 000f 4E000000 		.4byte	.LFE66-.Ltext0
ARM GAS  /tmp/ccnCBS2w.s 			page 21


 916 0013 0400     		.2byte	0x4
 917 0015 F3       		.byte	0xf3
 918 0016 01       		.uleb128 0x1
 919 0017 50       		.byte	0x50
 920 0018 9F       		.byte	0x9f
 921 0019 00000000 		.4byte	0
 922 001d 00000000 		.4byte	0
 923              	.LLST0:
 924 0021 00000000 		.4byte	.LFB65-.Ltext0
 925 0025 02000000 		.4byte	.LCFI0-.Ltext0
 926 0029 0200     		.2byte	0x2
 927 002b 7D       		.byte	0x7d
 928 002c 00       		.sleb128 0
 929 002d 02000000 		.4byte	.LCFI0-.Ltext0
 930 0031 42000000 		.4byte	.LFE65-.Ltext0
 931 0035 0200     		.2byte	0x2
 932 0037 7D       		.byte	0x7d
 933 0038 10       		.sleb128 16
 934 0039 00000000 		.4byte	0
 935 003d 00000000 		.4byte	0
 936              	.LLST1:
 937 0041 00000000 		.4byte	.LVL0-.Ltext0
 938 0045 1F000000 		.4byte	.LVL1-1-.Ltext0
 939 0049 0100     		.2byte	0x1
 940 004b 50       		.byte	0x50
 941 004c 1F000000 		.4byte	.LVL1-1-.Ltext0
 942 0050 3E000000 		.4byte	.LVL5-.Ltext0
 943 0054 0100     		.2byte	0x1
 944 0056 54       		.byte	0x54
 945 0057 3E000000 		.4byte	.LVL5-.Ltext0
 946 005b 40000000 		.4byte	.LVL6-.Ltext0
 947 005f 0100     		.2byte	0x1
 948 0061 50       		.byte	0x50
 949 0062 40000000 		.4byte	.LVL6-.Ltext0
 950 0066 42000000 		.4byte	.LFE65-.Ltext0
 951 006a 0100     		.2byte	0x1
 952 006c 54       		.byte	0x54
 953 006d 00000000 		.4byte	0
 954 0071 00000000 		.4byte	0
 955              	.LLST2:
 956 0075 22000000 		.4byte	.LVL2-.Ltext0
 957 0079 3E000000 		.4byte	.LVL5-.Ltext0
 958 007d 0100     		.2byte	0x1
 959 007f 55       		.byte	0x55
 960 0080 00000000 		.4byte	0
 961 0084 00000000 		.4byte	0
 962              		.section	.debug_aranges,"",%progbits
 963 0000 1C000000 		.4byte	0x1c
 964 0004 0200     		.2byte	0x2
 965 0006 00000000 		.4byte	.Ldebug_info0
 966 000a 04       		.byte	0x4
 967 000b 00       		.byte	0
 968 000c 0000     		.2byte	0
 969 000e 0000     		.2byte	0
 970 0010 00000000 		.4byte	.Ltext0
 971 0014 4E000000 		.4byte	.Letext0-.Ltext0
 972 0018 00000000 		.4byte	0
ARM GAS  /tmp/ccnCBS2w.s 			page 22


 973 001c 00000000 		.4byte	0
 974              		.section	.debug_line,"",%progbits
 975              	.Ldebug_line0:
 976 0000 6B010000 		.section	.debug_str,"MS",%progbits,1
 976      02003701 
 976      00000201 
 976      FB0E0D00 
 976      01010101 
 977              	.LASF4:
 978 0000 5F5F7569 		.ascii	"__uint8_t\000"
 978      6E74385F 
 978      7400
 979              	.LASF37:
 980 000a 48414C5F 		.ascii	"HAL_TICK_FREQ_DEFAULT\000"
 980      5449434B 
 980      5F465245 
 980      515F4445 
 980      4641554C 
 981              	.LASF29:
 982 0020 52656C6F 		.ascii	"Reload\000"
 982      616400
 983              	.LASF5:
 984 0027 5F5F696E 		.ascii	"__int32_t\000"
 984      7433325F 
 984      7400
 985              	.LASF43:
 986 0031 68697764 		.ascii	"hiwdg\000"
 986      6700
 987              	.LASF20:
 988 0037 49574447 		.ascii	"IWDG_TypeDef\000"
 988      5F547970 
 988      65446566 
 988      00
 989              	.LASF3:
 990 0044 73686F72 		.ascii	"short unsigned int\000"
 990      7420756E 
 990      7369676E 
 990      65642069 
 990      6E7400
 991              	.LASF24:
 992 0057 48414C5F 		.ascii	"HAL_ERROR\000"
 992      4552524F 
 992      5200
 993              	.LASF11:
 994 0061 756E7369 		.ascii	"unsigned int\000"
 994      676E6564 
 994      20696E74 
 994      00
 995              	.LASF23:
 996 006e 48414C5F 		.ascii	"HAL_OK\000"
 996      4F4B00
 997              	.LASF30:
 998 0075 49574447 		.ascii	"IWDG_InitTypeDef\000"
 998      5F496E69 
 998      74547970 
 998      65446566 
 998      00
ARM GAS  /tmp/ccnCBS2w.s 			page 23


 999              	.LASF36:
 1000 0086 48414C5F 		.ascii	"HAL_TICK_FREQ_1KHZ\000"
 1000      5449434B 
 1000      5F465245 
 1000      515F314B 
 1000      485A00
 1001              	.LASF1:
 1002 0099 756E7369 		.ascii	"unsigned char\000"
 1002      676E6564 
 1002      20636861 
 1002      7200
 1003              	.LASF18:
 1004 00a7 41484250 		.ascii	"AHBPrescTable\000"
 1004      72657363 
 1004      5461626C 
 1004      6500
 1005              	.LASF8:
 1006 00b5 6C6F6E67 		.ascii	"long unsigned int\000"
 1006      20756E73 
 1006      69676E65 
 1006      6420696E 
 1006      7400
 1007              	.LASF21:
 1008 00c7 52455345 		.ascii	"RESET\000"
 1008      5400
 1009              	.LASF33:
 1010 00cd 49574447 		.ascii	"IWDG_HandleTypeDef\000"
 1010      5F48616E 
 1010      646C6554 
 1010      79706544 
 1010      656600
 1011              	.LASF32:
 1012 00e0 496E6974 		.ascii	"Init\000"
 1012      00
 1013              	.LASF48:
 1014 00e5 48414C5F 		.ascii	"HAL_GetTick\000"
 1014      47657454 
 1014      69636B00 
 1015              	.LASF35:
 1016 00f1 48414C5F 		.ascii	"HAL_TICK_FREQ_100HZ\000"
 1016      5449434B 
 1016      5F465245 
 1016      515F3130 
 1016      30485A00 
 1017              	.LASF26:
 1018 0105 48414C5F 		.ascii	"HAL_TIMEOUT\000"
 1018      54494D45 
 1018      4F555400 
 1019              	.LASF7:
 1020 0111 5F5F7569 		.ascii	"__uint32_t\000"
 1020      6E743332 
 1020      5F7400
 1021              	.LASF38:
 1022 011c 48414C5F 		.ascii	"HAL_TickFreqTypeDef\000"
 1022      5469636B 
 1022      46726571 
 1022      54797065 
ARM GAS  /tmp/ccnCBS2w.s 			page 24


 1022      44656600 
 1023              	.LASF19:
 1024 0130 41504250 		.ascii	"APBPrescTable\000"
 1024      72657363 
 1024      5461626C 
 1024      6500
 1025              	.LASF16:
 1026 013e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1026      52784275 
 1026      66666572 
 1026      00
 1027              	.LASF25:
 1028 014b 48414C5F 		.ascii	"HAL_BUSY\000"
 1028      42555359 
 1028      00
 1029              	.LASF44:
 1030 0154 474E5520 		.ascii	"GNU C11 6.3.1 20170620 -mcpu=cortex-m3 -mthumb -g -"
 1030      43313120 
 1030      362E332E 
 1030      31203230 
 1030      31373036 
 1031 0187 67647761 		.ascii	"gdwarf-2 -Os -fomit-frame-pointer\000"
 1031      72662D32 
 1031      202D4F73 
 1031      202D666F 
 1031      6D69742D 
 1032              	.LASF40:
 1033 01a9 75775469 		.ascii	"uwTickFreq\000"
 1033      636B4672 
 1033      657100
 1034              	.LASF10:
 1035 01b4 6C6F6E67 		.ascii	"long long unsigned int\000"
 1035      206C6F6E 
 1035      6720756E 
 1035      7369676E 
 1035      65642069 
 1036              	.LASF12:
 1037 01cb 75696E74 		.ascii	"uint8_t\000"
 1037      385F7400 
 1038              	.LASF45:
 1039 01d3 7372632F 		.ascii	"src/stm32f1xx_hal_iwdg.c\000"
 1039      73746D33 
 1039      32663178 
 1039      785F6861 
 1039      6C5F6977 
 1040              	.LASF13:
 1041 01ec 696E7433 		.ascii	"int32_t\000"
 1041      325F7400 
 1042              	.LASF15:
 1043 01f4 73697A65 		.ascii	"sizetype\000"
 1043      74797065 
 1043      00
 1044              	.LASF27:
 1045 01fd 48414C5F 		.ascii	"HAL_StatusTypeDef\000"
 1045      53746174 
 1045      75735479 
 1045      70654465 
ARM GAS  /tmp/ccnCBS2w.s 			page 25


 1045      6600
 1046              	.LASF9:
 1047 020f 6C6F6E67 		.ascii	"long long int\000"
 1047      206C6F6E 
 1047      6720696E 
 1047      7400
 1048              	.LASF47:
 1049 021d 7469636B 		.ascii	"tickstart\000"
 1049      73746172 
 1049      7400
 1050              	.LASF34:
 1051 0227 48414C5F 		.ascii	"HAL_TICK_FREQ_10HZ\000"
 1051      5449434B 
 1051      5F465245 
 1051      515F3130 
 1051      485A00
 1052              	.LASF17:
 1053 023a 53797374 		.ascii	"SystemCoreClock\000"
 1053      656D436F 
 1053      7265436C 
 1053      6F636B00 
 1054              	.LASF46:
 1055 024a 2F686F6D 		.ascii	"/home/berndoj/git/stm32tctst/lib/stm32f1hal\000"
 1055      652F6265 
 1055      726E646F 
 1055      6A2F6769 
 1055      742F7374 
 1056              	.LASF39:
 1057 0276 75775469 		.ascii	"uwTickPrio\000"
 1057      636B5072 
 1057      696F00
 1058              	.LASF31:
 1059 0281 496E7374 		.ascii	"Instance\000"
 1059      616E6365 
 1059      00
 1060              	.LASF2:
 1061 028a 73686F72 		.ascii	"short int\000"
 1061      7420696E 
 1061      7400
 1062              	.LASF41:
 1063 0294 48414C5F 		.ascii	"HAL_IWDG_Refresh\000"
 1063      49574447 
 1063      5F526566 
 1063      72657368 
 1063      00
 1064              	.LASF14:
 1065 02a5 75696E74 		.ascii	"uint32_t\000"
 1065      33325F74 
 1065      00
 1066              	.LASF6:
 1067 02ae 6C6F6E67 		.ascii	"long int\000"
 1067      20696E74 
 1067      00
 1068              	.LASF22:
 1069 02b7 6C6F6E67 		.ascii	"long double\000"
 1069      20646F75 
 1069      626C6500 
ARM GAS  /tmp/ccnCBS2w.s 			page 26


 1070              	.LASF0:
 1071 02c3 7369676E 		.ascii	"signed char\000"
 1071      65642063 
 1071      68617200 
 1072              	.LASF28:
 1073 02cf 50726573 		.ascii	"Prescaler\000"
 1073      63616C65 
 1073      7200
 1074              	.LASF42:
 1075 02d9 48414C5F 		.ascii	"HAL_IWDG_Init\000"
 1075      49574447 
 1075      5F496E69 
 1075      7400
 1076              		.ident	"GCC: (15:6.3.1+svn253039-1build1) 6.3.1 20170620"
ARM GAS  /tmp/ccnCBS2w.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_iwdg.c
     /tmp/ccnCBS2w.s:69     .text:0000000000000000 $t
     /tmp/ccnCBS2w.s:76     .text:0000000000000000 HAL_IWDG_Init
     /tmp/ccnCBS2w.s:150    .text:0000000000000042 HAL_IWDG_Refresh
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
