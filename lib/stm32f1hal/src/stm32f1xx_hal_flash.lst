ARM GAS  /tmp/cc10d3Tm.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"stm32f1xx_hal_flash.c"
  12              	@ GNU C11 (15:6.3.1+svn253039-1build1) version 6.3.1 20170620 (arm-none-eabi)
  13              	@	compiled by GNU C version 7.2.0, GMP version 6.1.2, MPFR version 4.0.1-rc1, MPC version 1.1.0, is
  14              	@ warning: MPFR header version 4.0.1-rc1 differs from library version 4.0.1.
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I ./inc -I ./inc/Legacy -I ../cmsisstm32f1xx/inc
  17              	@ -I ../cmsiscore/inc -imultilib thumb/v7-m -D__USES_INITFINI__
  18              	@ -D STM32F103x6 -D RUN_FROM_FLASH=1 src/stm32f1xx_hal_flash.c
  19              	@ -mcpu=cortex-m3 -mthumb -auxbase-strip bin/stm32f1xx_hal_flash.o -g
  20              	@ -gdwarf-2 -Os -Wall -fomit-frame-pointer -fverbose-asm
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffunction-cse -fgcse
  32              	@ -fgcse-lm -fgnu-runtime -fgnu-unique -fguess-branch-probability
  33              	@ -fhoist-adjacent-loads -fident -fif-conversion -fif-conversion2
  34              	@ -findirect-inlining -finline -finline-atomics -finline-functions
  35              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  36              	@ -fipa-cp-alignment -fipa-icf -fipa-icf-functions -fipa-icf-variables
  37              	@ -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra
  38              	@ -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  39              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  40              	@ -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  41              	@ -fmath-errno -fmerge-constants -fmerge-debug-strings
  42              	@ -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  43              	@ -fpartial-inlining -fpeephole -fpeephole2 -fplt -fprefetch-loop-arrays
  44              	@ -freg-struct-return -freorder-blocks -freorder-functions
  45              	@ -frerun-cse-after-loop -fsched-critical-path-heuristic
  46              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  47              	@ -fsched-last-insn-heuristic -fsched-pressure -fsched-rank-heuristic
  48              	@ -fsched-spec -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  49              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  50              	@ -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types
  51              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstrict-aliasing
  52              	@ -fstrict-overflow -fstrict-volatile-bitfields -fsync-libcalls
  53              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  54              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  55              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  56              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  57              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
ARM GAS  /tmp/cc10d3Tm.s 			page 2


  58              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  59              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  60              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  61              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  62              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  63              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  64              	@ -munaligned-access -mvectorize-with-neon-quad
  65              	
  66              		.text
  67              	.Ltext0:
  68              		.cfi_sections	.debug_frame
  69              		.align	1
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu softvfp
  74              		.type	FLASH_SetErrorCode, %function
  75              	FLASH_SetErrorCode:
  76              	.LFB78:
  77              		.file 1 "src/stm32f1xx_hal_flash.c"
   1:src/stm32f1xx_hal_flash.c **** /**
   2:src/stm32f1xx_hal_flash.c ****   ******************************************************************************
   3:src/stm32f1xx_hal_flash.c ****   * @file    stm32f1xx_hal_flash.c
   4:src/stm32f1xx_hal_flash.c ****   * @author  MCD Application Team
   5:src/stm32f1xx_hal_flash.c ****   * @brief   FLASH HAL module driver.
   6:src/stm32f1xx_hal_flash.c ****   *          This file provides firmware functions to manage the following 
   7:src/stm32f1xx_hal_flash.c ****   *          functionalities of the internal FLASH memory:
   8:src/stm32f1xx_hal_flash.c ****   *           + Program operations functions
   9:src/stm32f1xx_hal_flash.c ****   *           + Memory Control functions 
  10:src/stm32f1xx_hal_flash.c ****   *           + Peripheral State functions
  11:src/stm32f1xx_hal_flash.c ****   *         
  12:src/stm32f1xx_hal_flash.c ****   @verbatim
  13:src/stm32f1xx_hal_flash.c ****   ==============================================================================
  14:src/stm32f1xx_hal_flash.c ****                         ##### FLASH peripheral features #####
  15:src/stm32f1xx_hal_flash.c ****   ==============================================================================
  16:src/stm32f1xx_hal_flash.c ****   [..] The Flash memory interface manages CPU AHB I-Code and D-Code accesses 
  17:src/stm32f1xx_hal_flash.c ****        to the Flash memory. It implements the erase and program Flash memory operations 
  18:src/stm32f1xx_hal_flash.c ****        and the read and write protection mechanisms.
  19:src/stm32f1xx_hal_flash.c **** 
  20:src/stm32f1xx_hal_flash.c ****   [..] The Flash memory interface accelerates code execution with a system of instruction
  21:src/stm32f1xx_hal_flash.c ****       prefetch. 
  22:src/stm32f1xx_hal_flash.c **** 
  23:src/stm32f1xx_hal_flash.c ****   [..] The FLASH main features are:
  24:src/stm32f1xx_hal_flash.c ****       (+) Flash memory read operations
  25:src/stm32f1xx_hal_flash.c ****       (+) Flash memory program/erase operations
  26:src/stm32f1xx_hal_flash.c ****       (+) Read / write protections
  27:src/stm32f1xx_hal_flash.c ****       (+) Prefetch on I-Code
  28:src/stm32f1xx_hal_flash.c ****       (+) Option Bytes programming
  29:src/stm32f1xx_hal_flash.c **** 
  30:src/stm32f1xx_hal_flash.c **** 
  31:src/stm32f1xx_hal_flash.c ****                      ##### How to use this driver #####
  32:src/stm32f1xx_hal_flash.c ****   ==============================================================================
  33:src/stm32f1xx_hal_flash.c ****   [..]                             
  34:src/stm32f1xx_hal_flash.c ****       This driver provides functions and macros to configure and program the FLASH 
  35:src/stm32f1xx_hal_flash.c ****       memory of all STM32F1xx devices.
  36:src/stm32f1xx_hal_flash.c ****     
  37:src/stm32f1xx_hal_flash.c ****       (#) FLASH Memory I/O Programming functions: this group includes all needed
ARM GAS  /tmp/cc10d3Tm.s 			page 3


  38:src/stm32f1xx_hal_flash.c ****           functions to erase and program the main memory:
  39:src/stm32f1xx_hal_flash.c ****         (++) Lock and Unlock the FLASH interface
  40:src/stm32f1xx_hal_flash.c ****         (++) Erase function: Erase page, erase all pages
  41:src/stm32f1xx_hal_flash.c ****         (++) Program functions: half word, word and doubleword
  42:src/stm32f1xx_hal_flash.c ****       (#) FLASH Option Bytes Programming functions: this group includes all needed
  43:src/stm32f1xx_hal_flash.c ****           functions to manage the Option Bytes:
  44:src/stm32f1xx_hal_flash.c ****         (++) Lock and Unlock the Option Bytes
  45:src/stm32f1xx_hal_flash.c ****         (++) Set/Reset the write protection
  46:src/stm32f1xx_hal_flash.c ****         (++) Set the Read protection Level
  47:src/stm32f1xx_hal_flash.c ****         (++) Program the user Option Bytes
  48:src/stm32f1xx_hal_flash.c ****         (++) Launch the Option Bytes loader
  49:src/stm32f1xx_hal_flash.c ****         (++) Erase Option Bytes
  50:src/stm32f1xx_hal_flash.c ****         (++) Program the data Option Bytes
  51:src/stm32f1xx_hal_flash.c ****         (++) Get the Write protection.
  52:src/stm32f1xx_hal_flash.c ****         (++) Get the user option bytes.
  53:src/stm32f1xx_hal_flash.c ****     
  54:src/stm32f1xx_hal_flash.c ****       (#) Interrupts and flags management functions : this group 
  55:src/stm32f1xx_hal_flash.c ****           includes all needed functions to:
  56:src/stm32f1xx_hal_flash.c ****         (++) Handle FLASH interrupts
  57:src/stm32f1xx_hal_flash.c ****         (++) Wait for last FLASH operation according to its status
  58:src/stm32f1xx_hal_flash.c ****         (++) Get error flag status
  59:src/stm32f1xx_hal_flash.c **** 
  60:src/stm32f1xx_hal_flash.c ****   [..] In addition to these function, this driver includes a set of macros allowing
  61:src/stm32f1xx_hal_flash.c ****        to handle the following operations:
  62:src/stm32f1xx_hal_flash.c ****       
  63:src/stm32f1xx_hal_flash.c ****       (+) Set/Get the latency
  64:src/stm32f1xx_hal_flash.c ****       (+) Enable/Disable the prefetch buffer
  65:src/stm32f1xx_hal_flash.c ****       (+) Enable/Disable the half cycle access
  66:src/stm32f1xx_hal_flash.c ****       (+) Enable/Disable the FLASH interrupts
  67:src/stm32f1xx_hal_flash.c ****       (+) Monitor the FLASH flags status
  68:src/stm32f1xx_hal_flash.c ****           
  69:src/stm32f1xx_hal_flash.c ****   @endverbatim
  70:src/stm32f1xx_hal_flash.c ****   ******************************************************************************
  71:src/stm32f1xx_hal_flash.c ****   * @attention
  72:src/stm32f1xx_hal_flash.c ****   *
  73:src/stm32f1xx_hal_flash.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  74:src/stm32f1xx_hal_flash.c ****   * All rights reserved.</center></h2>
  75:src/stm32f1xx_hal_flash.c ****   *
  76:src/stm32f1xx_hal_flash.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  77:src/stm32f1xx_hal_flash.c ****   * the "License"; You may not use this file except in compliance with the
  78:src/stm32f1xx_hal_flash.c ****   * License. You may obtain a copy of the License at:
  79:src/stm32f1xx_hal_flash.c ****   *                        opensource.org/licenses/BSD-3-Clause
  80:src/stm32f1xx_hal_flash.c ****   *
  81:src/stm32f1xx_hal_flash.c ****   ******************************************************************************
  82:src/stm32f1xx_hal_flash.c ****   */
  83:src/stm32f1xx_hal_flash.c **** 
  84:src/stm32f1xx_hal_flash.c **** /* Includes ------------------------------------------------------------------*/
  85:src/stm32f1xx_hal_flash.c **** #include "stm32f1xx_hal.h"
  86:src/stm32f1xx_hal_flash.c **** 
  87:src/stm32f1xx_hal_flash.c **** /** @addtogroup STM32F1xx_HAL_Driver
  88:src/stm32f1xx_hal_flash.c ****   * @{
  89:src/stm32f1xx_hal_flash.c ****   */
  90:src/stm32f1xx_hal_flash.c **** 
  91:src/stm32f1xx_hal_flash.c **** #ifdef HAL_FLASH_MODULE_ENABLED
  92:src/stm32f1xx_hal_flash.c **** 
  93:src/stm32f1xx_hal_flash.c **** /** @defgroup FLASH FLASH
  94:src/stm32f1xx_hal_flash.c ****   * @brief FLASH HAL module driver
ARM GAS  /tmp/cc10d3Tm.s 			page 4


  95:src/stm32f1xx_hal_flash.c ****   * @{
  96:src/stm32f1xx_hal_flash.c ****   */
  97:src/stm32f1xx_hal_flash.c **** 
  98:src/stm32f1xx_hal_flash.c **** /* Private typedef -----------------------------------------------------------*/
  99:src/stm32f1xx_hal_flash.c **** /* Private define ------------------------------------------------------------*/
 100:src/stm32f1xx_hal_flash.c **** /** @defgroup FLASH_Private_Constants FLASH Private Constants
 101:src/stm32f1xx_hal_flash.c ****   * @{
 102:src/stm32f1xx_hal_flash.c ****   */
 103:src/stm32f1xx_hal_flash.c **** /**
 104:src/stm32f1xx_hal_flash.c ****   * @}
 105:src/stm32f1xx_hal_flash.c ****   */
 106:src/stm32f1xx_hal_flash.c **** 
 107:src/stm32f1xx_hal_flash.c **** /* Private macro ---------------------------- ---------------------------------*/
 108:src/stm32f1xx_hal_flash.c **** /** @defgroup FLASH_Private_Macros FLASH Private Macros
 109:src/stm32f1xx_hal_flash.c ****   * @{
 110:src/stm32f1xx_hal_flash.c ****   */
 111:src/stm32f1xx_hal_flash.c ****  
 112:src/stm32f1xx_hal_flash.c **** /**
 113:src/stm32f1xx_hal_flash.c ****   * @}
 114:src/stm32f1xx_hal_flash.c ****   */
 115:src/stm32f1xx_hal_flash.c **** 
 116:src/stm32f1xx_hal_flash.c **** /* Private variables ---------------------------------------------------------*/
 117:src/stm32f1xx_hal_flash.c **** /** @defgroup FLASH_Private_Variables FLASH Private Variables
 118:src/stm32f1xx_hal_flash.c ****   * @{
 119:src/stm32f1xx_hal_flash.c ****   */
 120:src/stm32f1xx_hal_flash.c **** /* Variables used for Erase pages under interruption*/
 121:src/stm32f1xx_hal_flash.c **** FLASH_ProcessTypeDef pFlash;
 122:src/stm32f1xx_hal_flash.c **** /**
 123:src/stm32f1xx_hal_flash.c ****   * @}
 124:src/stm32f1xx_hal_flash.c ****   */
 125:src/stm32f1xx_hal_flash.c **** 
 126:src/stm32f1xx_hal_flash.c **** /* Private function prototypes -----------------------------------------------*/
 127:src/stm32f1xx_hal_flash.c **** /** @defgroup FLASH_Private_Functions FLASH Private Functions
 128:src/stm32f1xx_hal_flash.c ****   * @{
 129:src/stm32f1xx_hal_flash.c ****   */
 130:src/stm32f1xx_hal_flash.c **** static  void   FLASH_Program_HalfWord(uint32_t Address, uint16_t Data);
 131:src/stm32f1xx_hal_flash.c **** static  void   FLASH_SetErrorCode(void);
 132:src/stm32f1xx_hal_flash.c **** extern void    FLASH_PageErase(uint32_t PageAddress);
 133:src/stm32f1xx_hal_flash.c **** /**
 134:src/stm32f1xx_hal_flash.c ****   * @}
 135:src/stm32f1xx_hal_flash.c ****   */
 136:src/stm32f1xx_hal_flash.c **** 
 137:src/stm32f1xx_hal_flash.c **** /* Exported functions ---------------------------------------------------------*/
 138:src/stm32f1xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions FLASH Exported Functions
 139:src/stm32f1xx_hal_flash.c ****   * @{
 140:src/stm32f1xx_hal_flash.c ****   */
 141:src/stm32f1xx_hal_flash.c ****   
 142:src/stm32f1xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group1 Programming operation functions 
 143:src/stm32f1xx_hal_flash.c ****   *  @brief   Programming operation functions 
 144:src/stm32f1xx_hal_flash.c ****   *
 145:src/stm32f1xx_hal_flash.c **** @verbatim   
 146:src/stm32f1xx_hal_flash.c **** @endverbatim
 147:src/stm32f1xx_hal_flash.c ****   * @{
 148:src/stm32f1xx_hal_flash.c ****   */
 149:src/stm32f1xx_hal_flash.c **** 
 150:src/stm32f1xx_hal_flash.c **** /**
 151:src/stm32f1xx_hal_flash.c ****   * @brief  Program halfword, word or double word at a specified address
ARM GAS  /tmp/cc10d3Tm.s 			page 5


 152:src/stm32f1xx_hal_flash.c ****   * @note   The function HAL_FLASH_Unlock() should be called before to unlock the FLASH interface
 153:src/stm32f1xx_hal_flash.c ****   *         The function HAL_FLASH_Lock() should be called after to lock the FLASH interface
 154:src/stm32f1xx_hal_flash.c ****   *
 155:src/stm32f1xx_hal_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 156:src/stm32f1xx_hal_flash.c ****   *         the erase operation is performed before the program one.
 157:src/stm32f1xx_hal_flash.c ****   *  
 158:src/stm32f1xx_hal_flash.c ****   * @note   FLASH should be previously erased before new programmation (only exception to this 
 159:src/stm32f1xx_hal_flash.c ****   *         is when 0x0000 is programmed)
 160:src/stm32f1xx_hal_flash.c ****   *
 161:src/stm32f1xx_hal_flash.c ****   * @param  TypeProgram:  Indicate the way to program at a specified address.
 162:src/stm32f1xx_hal_flash.c ****   *                       This parameter can be a value of @ref FLASH_Type_Program
 163:src/stm32f1xx_hal_flash.c ****   * @param  Address:      Specifies the address to be programmed.
 164:src/stm32f1xx_hal_flash.c ****   * @param  Data:         Specifies the data to be programmed
 165:src/stm32f1xx_hal_flash.c ****   * 
 166:src/stm32f1xx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 167:src/stm32f1xx_hal_flash.c ****   */
 168:src/stm32f1xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 169:src/stm32f1xx_hal_flash.c **** {
 170:src/stm32f1xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 171:src/stm32f1xx_hal_flash.c ****   uint8_t index = 0;
 172:src/stm32f1xx_hal_flash.c ****   uint8_t nbiterations = 0;
 173:src/stm32f1xx_hal_flash.c ****   
 174:src/stm32f1xx_hal_flash.c ****   /* Process Locked */
 175:src/stm32f1xx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 176:src/stm32f1xx_hal_flash.c **** 
 177:src/stm32f1xx_hal_flash.c ****   /* Check the parameters */
 178:src/stm32f1xx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 179:src/stm32f1xx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 180:src/stm32f1xx_hal_flash.c **** 
 181:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 182:src/stm32f1xx_hal_flash.c ****   if(Address <= FLASH_BANK1_END)
 183:src/stm32f1xx_hal_flash.c ****   {
 184:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 185:src/stm32f1xx_hal_flash.c ****     /* Wait for last operation to be completed */
 186:src/stm32f1xx_hal_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 187:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 188:src/stm32f1xx_hal_flash.c ****   }
 189:src/stm32f1xx_hal_flash.c ****   else
 190:src/stm32f1xx_hal_flash.c ****   {
 191:src/stm32f1xx_hal_flash.c ****     /* Wait for last operation to be completed */
 192:src/stm32f1xx_hal_flash.c ****     status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
 193:src/stm32f1xx_hal_flash.c ****   }
 194:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 195:src/stm32f1xx_hal_flash.c ****   
 196:src/stm32f1xx_hal_flash.c ****   if(status == HAL_OK)
 197:src/stm32f1xx_hal_flash.c ****   {
 198:src/stm32f1xx_hal_flash.c ****     if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 199:src/stm32f1xx_hal_flash.c ****     {
 200:src/stm32f1xx_hal_flash.c ****       /* Program halfword (16-bit) at a specified address. */
 201:src/stm32f1xx_hal_flash.c ****       nbiterations = 1U;
 202:src/stm32f1xx_hal_flash.c ****     }
 203:src/stm32f1xx_hal_flash.c ****     else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 204:src/stm32f1xx_hal_flash.c ****     {
 205:src/stm32f1xx_hal_flash.c ****       /* Program word (32-bit = 2*16-bit) at a specified address. */
 206:src/stm32f1xx_hal_flash.c ****       nbiterations = 2U;
 207:src/stm32f1xx_hal_flash.c ****     }
 208:src/stm32f1xx_hal_flash.c ****     else
ARM GAS  /tmp/cc10d3Tm.s 			page 6


 209:src/stm32f1xx_hal_flash.c ****     {
 210:src/stm32f1xx_hal_flash.c ****       /* Program double word (64-bit = 4*16-bit) at a specified address. */
 211:src/stm32f1xx_hal_flash.c ****       nbiterations = 4U;
 212:src/stm32f1xx_hal_flash.c ****     }
 213:src/stm32f1xx_hal_flash.c **** 
 214:src/stm32f1xx_hal_flash.c ****     for (index = 0U; index < nbiterations; index++)
 215:src/stm32f1xx_hal_flash.c ****     {
 216:src/stm32f1xx_hal_flash.c ****       FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 217:src/stm32f1xx_hal_flash.c **** 
 218:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 219:src/stm32f1xx_hal_flash.c ****       if(Address <= FLASH_BANK1_END)
 220:src/stm32f1xx_hal_flash.c ****       {
 221:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 222:src/stm32f1xx_hal_flash.c ****         /* Wait for last operation to be completed */
 223:src/stm32f1xx_hal_flash.c ****         status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 224:src/stm32f1xx_hal_flash.c ****     
 225:src/stm32f1xx_hal_flash.c ****         /* If the program operation is completed, disable the PG Bit */
 226:src/stm32f1xx_hal_flash.c ****         CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 227:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 228:src/stm32f1xx_hal_flash.c ****       }
 229:src/stm32f1xx_hal_flash.c ****       else
 230:src/stm32f1xx_hal_flash.c ****       {
 231:src/stm32f1xx_hal_flash.c ****         /* Wait for last operation to be completed */
 232:src/stm32f1xx_hal_flash.c ****         status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
 233:src/stm32f1xx_hal_flash.c ****         
 234:src/stm32f1xx_hal_flash.c ****         /* If the program operation is completed, disable the PG Bit */
 235:src/stm32f1xx_hal_flash.c ****         CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
 236:src/stm32f1xx_hal_flash.c ****       }
 237:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 238:src/stm32f1xx_hal_flash.c ****       /* In case of error, stop programation procedure */
 239:src/stm32f1xx_hal_flash.c ****       if (status != HAL_OK)
 240:src/stm32f1xx_hal_flash.c ****       {
 241:src/stm32f1xx_hal_flash.c ****         break;
 242:src/stm32f1xx_hal_flash.c ****       }
 243:src/stm32f1xx_hal_flash.c ****     }
 244:src/stm32f1xx_hal_flash.c ****   }
 245:src/stm32f1xx_hal_flash.c **** 
 246:src/stm32f1xx_hal_flash.c ****   /* Process Unlocked */
 247:src/stm32f1xx_hal_flash.c ****   __HAL_UNLOCK(&pFlash);
 248:src/stm32f1xx_hal_flash.c **** 
 249:src/stm32f1xx_hal_flash.c ****   return status;
 250:src/stm32f1xx_hal_flash.c **** }
 251:src/stm32f1xx_hal_flash.c **** 
 252:src/stm32f1xx_hal_flash.c **** /**
 253:src/stm32f1xx_hal_flash.c ****   * @brief  Program halfword, word or double word at a specified address  with interrupt enabled.
 254:src/stm32f1xx_hal_flash.c ****   * @note   The function HAL_FLASH_Unlock() should be called before to unlock the FLASH interface
 255:src/stm32f1xx_hal_flash.c ****   *         The function HAL_FLASH_Lock() should be called after to lock the FLASH interface
 256:src/stm32f1xx_hal_flash.c ****   *
 257:src/stm32f1xx_hal_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 258:src/stm32f1xx_hal_flash.c ****   *         the erase operation is performed before the program one.
 259:src/stm32f1xx_hal_flash.c ****   *
 260:src/stm32f1xx_hal_flash.c ****   * @param  TypeProgram: Indicate the way to program at a specified address.
 261:src/stm32f1xx_hal_flash.c ****   *                      This parameter can be a value of @ref FLASH_Type_Program
 262:src/stm32f1xx_hal_flash.c ****   * @param  Address:     Specifies the address to be programmed.
 263:src/stm32f1xx_hal_flash.c ****   * @param  Data:        Specifies the data to be programmed
 264:src/stm32f1xx_hal_flash.c ****   * 
 265:src/stm32f1xx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
ARM GAS  /tmp/cc10d3Tm.s 			page 7


 266:src/stm32f1xx_hal_flash.c ****   */
 267:src/stm32f1xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 268:src/stm32f1xx_hal_flash.c **** {
 269:src/stm32f1xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 270:src/stm32f1xx_hal_flash.c ****   
 271:src/stm32f1xx_hal_flash.c ****   /* Process Locked */
 272:src/stm32f1xx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 273:src/stm32f1xx_hal_flash.c **** 
 274:src/stm32f1xx_hal_flash.c ****   /* Check the parameters */
 275:src/stm32f1xx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 276:src/stm32f1xx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 277:src/stm32f1xx_hal_flash.c **** 
 278:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 279:src/stm32f1xx_hal_flash.c ****   /* If procedure already ongoing, reject the next one */
 280:src/stm32f1xx_hal_flash.c ****   if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 281:src/stm32f1xx_hal_flash.c ****   {
 282:src/stm32f1xx_hal_flash.c ****     return HAL_ERROR;
 283:src/stm32f1xx_hal_flash.c ****   }
 284:src/stm32f1xx_hal_flash.c ****   
 285:src/stm32f1xx_hal_flash.c ****   if(Address <= FLASH_BANK1_END)
 286:src/stm32f1xx_hal_flash.c ****   {
 287:src/stm32f1xx_hal_flash.c ****     /* Enable End of FLASH Operation and Error source interrupts */
 288:src/stm32f1xx_hal_flash.c ****     __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1);
 289:src/stm32f1xx_hal_flash.c **** 
 290:src/stm32f1xx_hal_flash.c ****   }else
 291:src/stm32f1xx_hal_flash.c ****   {
 292:src/stm32f1xx_hal_flash.c ****     /* Enable End of FLASH Operation and Error source interrupts */
 293:src/stm32f1xx_hal_flash.c ****     __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
 294:src/stm32f1xx_hal_flash.c ****   }
 295:src/stm32f1xx_hal_flash.c **** #else
 296:src/stm32f1xx_hal_flash.c ****   /* Enable End of FLASH Operation and Error source interrupts */
 297:src/stm32f1xx_hal_flash.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 298:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 299:src/stm32f1xx_hal_flash.c ****   
 300:src/stm32f1xx_hal_flash.c ****   pFlash.Address = Address;
 301:src/stm32f1xx_hal_flash.c ****   pFlash.Data = Data;
 302:src/stm32f1xx_hal_flash.c **** 
 303:src/stm32f1xx_hal_flash.c ****   if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 304:src/stm32f1xx_hal_flash.c ****   {
 305:src/stm32f1xx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
 306:src/stm32f1xx_hal_flash.c ****     /* Program halfword (16-bit) at a specified address. */
 307:src/stm32f1xx_hal_flash.c ****     pFlash.DataRemaining = 1U;
 308:src/stm32f1xx_hal_flash.c ****   }
 309:src/stm32f1xx_hal_flash.c ****   else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 310:src/stm32f1xx_hal_flash.c ****   {
 311:src/stm32f1xx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
 312:src/stm32f1xx_hal_flash.c ****     /* Program word (32-bit : 2*16-bit) at a specified address. */
 313:src/stm32f1xx_hal_flash.c ****     pFlash.DataRemaining = 2U;
 314:src/stm32f1xx_hal_flash.c ****   }
 315:src/stm32f1xx_hal_flash.c ****   else
 316:src/stm32f1xx_hal_flash.c ****   {
 317:src/stm32f1xx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
 318:src/stm32f1xx_hal_flash.c ****     /* Program double word (64-bit : 4*16-bit) at a specified address. */
 319:src/stm32f1xx_hal_flash.c ****     pFlash.DataRemaining = 4U;
 320:src/stm32f1xx_hal_flash.c ****   }
 321:src/stm32f1xx_hal_flash.c **** 
 322:src/stm32f1xx_hal_flash.c ****   /* Program halfword (16-bit) at a specified address. */
ARM GAS  /tmp/cc10d3Tm.s 			page 8


 323:src/stm32f1xx_hal_flash.c ****   FLASH_Program_HalfWord(Address, (uint16_t)Data);
 324:src/stm32f1xx_hal_flash.c **** 
 325:src/stm32f1xx_hal_flash.c ****   return status;
 326:src/stm32f1xx_hal_flash.c **** }
 327:src/stm32f1xx_hal_flash.c **** 
 328:src/stm32f1xx_hal_flash.c **** /**
 329:src/stm32f1xx_hal_flash.c ****   * @brief This function handles FLASH interrupt request.
 330:src/stm32f1xx_hal_flash.c ****   * @retval None
 331:src/stm32f1xx_hal_flash.c ****   */
 332:src/stm32f1xx_hal_flash.c **** void HAL_FLASH_IRQHandler(void)
 333:src/stm32f1xx_hal_flash.c **** {
 334:src/stm32f1xx_hal_flash.c ****   uint32_t addresstmp = 0U;
 335:src/stm32f1xx_hal_flash.c ****   
 336:src/stm32f1xx_hal_flash.c ****   /* Check FLASH operation error flags */
 337:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 338:src/stm32f1xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) 
 339:src/stm32f1xx_hal_flash.c ****     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
 340:src/stm32f1xx_hal_flash.c **** #else
 341:src/stm32f1xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 342:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 343:src/stm32f1xx_hal_flash.c ****   {
 344:src/stm32f1xx_hal_flash.c ****     /* Return the faulty address */
 345:src/stm32f1xx_hal_flash.c ****     addresstmp = pFlash.Address;
 346:src/stm32f1xx_hal_flash.c ****     /* Reset address */
 347:src/stm32f1xx_hal_flash.c ****     pFlash.Address = 0xFFFFFFFFU;
 348:src/stm32f1xx_hal_flash.c ****   
 349:src/stm32f1xx_hal_flash.c ****     /* Save the Error code */
 350:src/stm32f1xx_hal_flash.c ****     FLASH_SetErrorCode();
 351:src/stm32f1xx_hal_flash.c ****     
 352:src/stm32f1xx_hal_flash.c ****     /* FLASH error interrupt user callback */
 353:src/stm32f1xx_hal_flash.c ****     HAL_FLASH_OperationErrorCallback(addresstmp);
 354:src/stm32f1xx_hal_flash.c **** 
 355:src/stm32f1xx_hal_flash.c ****     /* Stop the procedure ongoing */
 356:src/stm32f1xx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 357:src/stm32f1xx_hal_flash.c ****   }
 358:src/stm32f1xx_hal_flash.c **** 
 359:src/stm32f1xx_hal_flash.c ****   /* Check FLASH End of Operation flag  */
 360:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 361:src/stm32f1xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
 362:src/stm32f1xx_hal_flash.c ****   {
 363:src/stm32f1xx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 364:src/stm32f1xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
 365:src/stm32f1xx_hal_flash.c **** #else
 366:src/stm32f1xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 367:src/stm32f1xx_hal_flash.c ****   {
 368:src/stm32f1xx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 369:src/stm32f1xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 370:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 371:src/stm32f1xx_hal_flash.c ****     
 372:src/stm32f1xx_hal_flash.c ****     /* Process can continue only if no error detected */
 373:src/stm32f1xx_hal_flash.c ****     if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 374:src/stm32f1xx_hal_flash.c ****     {
 375:src/stm32f1xx_hal_flash.c ****       if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 376:src/stm32f1xx_hal_flash.c ****       {
 377:src/stm32f1xx_hal_flash.c ****         /* Nb of pages to erased can be decreased */
 378:src/stm32f1xx_hal_flash.c ****         pFlash.DataRemaining--;
 379:src/stm32f1xx_hal_flash.c **** 
ARM GAS  /tmp/cc10d3Tm.s 			page 9


 380:src/stm32f1xx_hal_flash.c ****         /* Check if there are still pages to erase */
 381:src/stm32f1xx_hal_flash.c ****         if(pFlash.DataRemaining != 0U)
 382:src/stm32f1xx_hal_flash.c ****         {
 383:src/stm32f1xx_hal_flash.c ****           addresstmp = pFlash.Address;
 384:src/stm32f1xx_hal_flash.c ****           /*Indicate user which sector has been erased */
 385:src/stm32f1xx_hal_flash.c ****           HAL_FLASH_EndOfOperationCallback(addresstmp);
 386:src/stm32f1xx_hal_flash.c **** 
 387:src/stm32f1xx_hal_flash.c ****           /*Increment sector number*/
 388:src/stm32f1xx_hal_flash.c ****           addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 389:src/stm32f1xx_hal_flash.c ****           pFlash.Address = addresstmp;
 390:src/stm32f1xx_hal_flash.c **** 
 391:src/stm32f1xx_hal_flash.c ****           /* If the erase operation is completed, disable the PER Bit */
 392:src/stm32f1xx_hal_flash.c ****           CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 393:src/stm32f1xx_hal_flash.c **** 
 394:src/stm32f1xx_hal_flash.c ****           FLASH_PageErase(addresstmp);
 395:src/stm32f1xx_hal_flash.c ****         }
 396:src/stm32f1xx_hal_flash.c ****         else
 397:src/stm32f1xx_hal_flash.c ****         {
 398:src/stm32f1xx_hal_flash.c ****           /* No more pages to Erase, user callback can be called. */
 399:src/stm32f1xx_hal_flash.c ****           /* Reset Sector and stop Erase pages procedure */
 400:src/stm32f1xx_hal_flash.c ****           pFlash.Address = addresstmp = 0xFFFFFFFFU;
 401:src/stm32f1xx_hal_flash.c ****           pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 402:src/stm32f1xx_hal_flash.c ****           /* FLASH EOP interrupt user callback */
 403:src/stm32f1xx_hal_flash.c ****           HAL_FLASH_EndOfOperationCallback(addresstmp);
 404:src/stm32f1xx_hal_flash.c ****         }
 405:src/stm32f1xx_hal_flash.c ****       }
 406:src/stm32f1xx_hal_flash.c ****       else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 407:src/stm32f1xx_hal_flash.c ****       {
 408:src/stm32f1xx_hal_flash.c ****         /* Operation is completed, disable the MER Bit */
 409:src/stm32f1xx_hal_flash.c ****         CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 410:src/stm32f1xx_hal_flash.c **** 
 411:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 412:src/stm32f1xx_hal_flash.c ****         /* Stop Mass Erase procedure if no pending mass erase on other bank */
 413:src/stm32f1xx_hal_flash.c ****         if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
 414:src/stm32f1xx_hal_flash.c ****         {
 415:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 416:src/stm32f1xx_hal_flash.c ****           /* MassErase ended. Return the selected bank */
 417:src/stm32f1xx_hal_flash.c ****           /* FLASH EOP interrupt user callback */
 418:src/stm32f1xx_hal_flash.c ****           HAL_FLASH_EndOfOperationCallback(0U);
 419:src/stm32f1xx_hal_flash.c **** 
 420:src/stm32f1xx_hal_flash.c ****           /* Stop Mass Erase procedure*/
 421:src/stm32f1xx_hal_flash.c ****           pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 422:src/stm32f1xx_hal_flash.c ****         }
 423:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 424:src/stm32f1xx_hal_flash.c ****       }
 425:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 426:src/stm32f1xx_hal_flash.c ****       else
 427:src/stm32f1xx_hal_flash.c ****       {
 428:src/stm32f1xx_hal_flash.c ****         /* Nb of 16-bit data to program can be decreased */
 429:src/stm32f1xx_hal_flash.c ****         pFlash.DataRemaining--;
 430:src/stm32f1xx_hal_flash.c ****         
 431:src/stm32f1xx_hal_flash.c ****         /* Check if there are still 16-bit data to program */
 432:src/stm32f1xx_hal_flash.c ****         if(pFlash.DataRemaining != 0U)
 433:src/stm32f1xx_hal_flash.c ****         {
 434:src/stm32f1xx_hal_flash.c ****           /* Increment address to 16-bit */
 435:src/stm32f1xx_hal_flash.c ****           pFlash.Address += 2U;
 436:src/stm32f1xx_hal_flash.c ****           addresstmp = pFlash.Address;
ARM GAS  /tmp/cc10d3Tm.s 			page 10


 437:src/stm32f1xx_hal_flash.c ****           
 438:src/stm32f1xx_hal_flash.c ****           /* Shift to have next 16-bit data */
 439:src/stm32f1xx_hal_flash.c ****           pFlash.Data = (pFlash.Data >> 16U);
 440:src/stm32f1xx_hal_flash.c ****           
 441:src/stm32f1xx_hal_flash.c ****           /* Operation is completed, disable the PG Bit */
 442:src/stm32f1xx_hal_flash.c ****           CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 443:src/stm32f1xx_hal_flash.c **** 
 444:src/stm32f1xx_hal_flash.c ****           /*Program halfword (16-bit) at a specified address.*/
 445:src/stm32f1xx_hal_flash.c ****           FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 446:src/stm32f1xx_hal_flash.c ****         }
 447:src/stm32f1xx_hal_flash.c ****         else
 448:src/stm32f1xx_hal_flash.c ****         {
 449:src/stm32f1xx_hal_flash.c ****           /* Program ended. Return the selected address */
 450:src/stm32f1xx_hal_flash.c ****           /* FLASH EOP interrupt user callback */
 451:src/stm32f1xx_hal_flash.c ****           if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 452:src/stm32f1xx_hal_flash.c ****           {
 453:src/stm32f1xx_hal_flash.c ****             HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 454:src/stm32f1xx_hal_flash.c ****           }
 455:src/stm32f1xx_hal_flash.c ****           else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 456:src/stm32f1xx_hal_flash.c ****           {
 457:src/stm32f1xx_hal_flash.c ****             HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 458:src/stm32f1xx_hal_flash.c ****           }
 459:src/stm32f1xx_hal_flash.c ****           else 
 460:src/stm32f1xx_hal_flash.c ****           {
 461:src/stm32f1xx_hal_flash.c ****             HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 462:src/stm32f1xx_hal_flash.c ****           }
 463:src/stm32f1xx_hal_flash.c ****         
 464:src/stm32f1xx_hal_flash.c ****           /* Reset Address and stop Program procedure */
 465:src/stm32f1xx_hal_flash.c ****           pFlash.Address = 0xFFFFFFFFU;
 466:src/stm32f1xx_hal_flash.c ****           pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 467:src/stm32f1xx_hal_flash.c ****         }
 468:src/stm32f1xx_hal_flash.c ****       }
 469:src/stm32f1xx_hal_flash.c ****     }
 470:src/stm32f1xx_hal_flash.c ****   }
 471:src/stm32f1xx_hal_flash.c ****   
 472:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 473:src/stm32f1xx_hal_flash.c ****   /* Check FLASH End of Operation flag  */
 474:src/stm32f1xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG( FLASH_FLAG_EOP_BANK2))
 475:src/stm32f1xx_hal_flash.c ****   {
 476:src/stm32f1xx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 477:src/stm32f1xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK2);
 478:src/stm32f1xx_hal_flash.c ****     
 479:src/stm32f1xx_hal_flash.c ****     /* Process can continue only if no error detected */
 480:src/stm32f1xx_hal_flash.c ****     if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 481:src/stm32f1xx_hal_flash.c ****     {
 482:src/stm32f1xx_hal_flash.c ****       if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 483:src/stm32f1xx_hal_flash.c ****       {
 484:src/stm32f1xx_hal_flash.c ****         /* Nb of pages to erased can be decreased */
 485:src/stm32f1xx_hal_flash.c ****         pFlash.DataRemaining--;
 486:src/stm32f1xx_hal_flash.c ****         
 487:src/stm32f1xx_hal_flash.c ****         /* Check if there are still pages to erase*/
 488:src/stm32f1xx_hal_flash.c ****         if(pFlash.DataRemaining != 0U)
 489:src/stm32f1xx_hal_flash.c ****         {
 490:src/stm32f1xx_hal_flash.c ****           /* Indicate user which page address has been erased*/
 491:src/stm32f1xx_hal_flash.c ****           HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 492:src/stm32f1xx_hal_flash.c ****         
 493:src/stm32f1xx_hal_flash.c ****           /* Increment page address to next page */
ARM GAS  /tmp/cc10d3Tm.s 			page 11


 494:src/stm32f1xx_hal_flash.c ****           pFlash.Address += FLASH_PAGE_SIZE;
 495:src/stm32f1xx_hal_flash.c ****           addresstmp = pFlash.Address;
 496:src/stm32f1xx_hal_flash.c **** 
 497:src/stm32f1xx_hal_flash.c ****           /* Operation is completed, disable the PER Bit */
 498:src/stm32f1xx_hal_flash.c ****           CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
 499:src/stm32f1xx_hal_flash.c **** 
 500:src/stm32f1xx_hal_flash.c ****           FLASH_PageErase(addresstmp);
 501:src/stm32f1xx_hal_flash.c ****         }
 502:src/stm32f1xx_hal_flash.c ****         else
 503:src/stm32f1xx_hal_flash.c ****         {
 504:src/stm32f1xx_hal_flash.c ****           /*No more pages to Erase*/
 505:src/stm32f1xx_hal_flash.c ****           
 506:src/stm32f1xx_hal_flash.c ****           /*Reset Address and stop Erase pages procedure*/
 507:src/stm32f1xx_hal_flash.c ****           pFlash.Address = 0xFFFFFFFFU;
 508:src/stm32f1xx_hal_flash.c ****           pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 509:src/stm32f1xx_hal_flash.c **** 
 510:src/stm32f1xx_hal_flash.c ****           /* FLASH EOP interrupt user callback */
 511:src/stm32f1xx_hal_flash.c ****           HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 512:src/stm32f1xx_hal_flash.c ****         }
 513:src/stm32f1xx_hal_flash.c ****       }
 514:src/stm32f1xx_hal_flash.c ****       else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 515:src/stm32f1xx_hal_flash.c ****       {
 516:src/stm32f1xx_hal_flash.c ****         /* Operation is completed, disable the MER Bit */
 517:src/stm32f1xx_hal_flash.c ****         CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
 518:src/stm32f1xx_hal_flash.c **** 
 519:src/stm32f1xx_hal_flash.c ****         if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_MER))
 520:src/stm32f1xx_hal_flash.c ****         {
 521:src/stm32f1xx_hal_flash.c ****           /* MassErase ended. Return the selected bank*/
 522:src/stm32f1xx_hal_flash.c ****           /* FLASH EOP interrupt user callback */
 523:src/stm32f1xx_hal_flash.c ****           HAL_FLASH_EndOfOperationCallback(0U);
 524:src/stm32f1xx_hal_flash.c ****         
 525:src/stm32f1xx_hal_flash.c ****           pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 526:src/stm32f1xx_hal_flash.c ****         }
 527:src/stm32f1xx_hal_flash.c ****       }
 528:src/stm32f1xx_hal_flash.c ****       else
 529:src/stm32f1xx_hal_flash.c ****       {
 530:src/stm32f1xx_hal_flash.c ****         /* Nb of 16-bit data to program can be decreased */
 531:src/stm32f1xx_hal_flash.c ****         pFlash.DataRemaining--;
 532:src/stm32f1xx_hal_flash.c ****         
 533:src/stm32f1xx_hal_flash.c ****         /* Check if there are still 16-bit data to program */
 534:src/stm32f1xx_hal_flash.c ****         if(pFlash.DataRemaining != 0U)
 535:src/stm32f1xx_hal_flash.c ****         {
 536:src/stm32f1xx_hal_flash.c ****           /* Increment address to 16-bit */
 537:src/stm32f1xx_hal_flash.c ****           pFlash.Address += 2U;
 538:src/stm32f1xx_hal_flash.c ****           addresstmp = pFlash.Address;
 539:src/stm32f1xx_hal_flash.c ****           
 540:src/stm32f1xx_hal_flash.c ****           /* Shift to have next 16-bit data */
 541:src/stm32f1xx_hal_flash.c ****           pFlash.Data = (pFlash.Data >> 16U);
 542:src/stm32f1xx_hal_flash.c ****           
 543:src/stm32f1xx_hal_flash.c ****           /* Operation is completed, disable the PG Bit */
 544:src/stm32f1xx_hal_flash.c ****           CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
 545:src/stm32f1xx_hal_flash.c **** 
 546:src/stm32f1xx_hal_flash.c ****           /*Program halfword (16-bit) at a specified address.*/
 547:src/stm32f1xx_hal_flash.c ****           FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 548:src/stm32f1xx_hal_flash.c ****         }
 549:src/stm32f1xx_hal_flash.c ****         else
 550:src/stm32f1xx_hal_flash.c ****         {
ARM GAS  /tmp/cc10d3Tm.s 			page 12


 551:src/stm32f1xx_hal_flash.c ****           /*Program ended. Return the selected address*/
 552:src/stm32f1xx_hal_flash.c ****           /* FLASH EOP interrupt user callback */
 553:src/stm32f1xx_hal_flash.c ****           if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 554:src/stm32f1xx_hal_flash.c ****           {
 555:src/stm32f1xx_hal_flash.c ****             HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 556:src/stm32f1xx_hal_flash.c ****           }
 557:src/stm32f1xx_hal_flash.c ****           else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 558:src/stm32f1xx_hal_flash.c ****           {
 559:src/stm32f1xx_hal_flash.c ****             HAL_FLASH_EndOfOperationCallback(pFlash.Address-2U);
 560:src/stm32f1xx_hal_flash.c ****           }
 561:src/stm32f1xx_hal_flash.c ****           else 
 562:src/stm32f1xx_hal_flash.c ****           {
 563:src/stm32f1xx_hal_flash.c ****             HAL_FLASH_EndOfOperationCallback(pFlash.Address-6U);
 564:src/stm32f1xx_hal_flash.c ****           }
 565:src/stm32f1xx_hal_flash.c ****           
 566:src/stm32f1xx_hal_flash.c ****           /* Reset Address and stop Program procedure*/
 567:src/stm32f1xx_hal_flash.c ****           pFlash.Address = 0xFFFFFFFFU;
 568:src/stm32f1xx_hal_flash.c ****           pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 569:src/stm32f1xx_hal_flash.c ****         }
 570:src/stm32f1xx_hal_flash.c ****       }
 571:src/stm32f1xx_hal_flash.c ****     }
 572:src/stm32f1xx_hal_flash.c ****   }
 573:src/stm32f1xx_hal_flash.c **** #endif 
 574:src/stm32f1xx_hal_flash.c **** 
 575:src/stm32f1xx_hal_flash.c ****   if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 576:src/stm32f1xx_hal_flash.c ****   {
 577:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 578:src/stm32f1xx_hal_flash.c ****     /* Operation is completed, disable the PG, PER and MER Bits for both bank */
 579:src/stm32f1xx_hal_flash.c ****     CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 580:src/stm32f1xx_hal_flash.c ****     CLEAR_BIT(FLASH->CR2, (FLASH_CR2_PG | FLASH_CR2_PER | FLASH_CR2_MER));  
 581:src/stm32f1xx_hal_flash.c ****   
 582:src/stm32f1xx_hal_flash.c ****     /* Disable End of FLASH Operation and Error source interrupts for both banks */
 583:src/stm32f1xx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_
 584:src/stm32f1xx_hal_flash.c **** #else
 585:src/stm32f1xx_hal_flash.c ****     /* Operation is completed, disable the PG, PER and MER Bits */
 586:src/stm32f1xx_hal_flash.c ****     CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 587:src/stm32f1xx_hal_flash.c **** 
 588:src/stm32f1xx_hal_flash.c ****     /* Disable End of FLASH Operation and Error source interrupts */
 589:src/stm32f1xx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 590:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 591:src/stm32f1xx_hal_flash.c **** 
 592:src/stm32f1xx_hal_flash.c ****     /* Process Unlocked */
 593:src/stm32f1xx_hal_flash.c ****     __HAL_UNLOCK(&pFlash);
 594:src/stm32f1xx_hal_flash.c ****   }
 595:src/stm32f1xx_hal_flash.c **** }
 596:src/stm32f1xx_hal_flash.c **** 
 597:src/stm32f1xx_hal_flash.c **** /**
 598:src/stm32f1xx_hal_flash.c ****   * @brief  FLASH end of operation interrupt callback
 599:src/stm32f1xx_hal_flash.c ****   * @param  ReturnValue: The value saved in this parameter depends on the ongoing procedure
 600:src/stm32f1xx_hal_flash.c ****   *                 - Mass Erase: No return value expected
 601:src/stm32f1xx_hal_flash.c ****   *                 - Pages Erase: Address of the page which has been erased 
 602:src/stm32f1xx_hal_flash.c ****   *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
 603:src/stm32f1xx_hal_flash.c ****   *                 - Program: Address which was selected for data program
 604:src/stm32f1xx_hal_flash.c ****   * @retval none
 605:src/stm32f1xx_hal_flash.c ****   */
 606:src/stm32f1xx_hal_flash.c **** __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
 607:src/stm32f1xx_hal_flash.c **** {
ARM GAS  /tmp/cc10d3Tm.s 			page 13


 608:src/stm32f1xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 609:src/stm32f1xx_hal_flash.c ****   UNUSED(ReturnValue);
 610:src/stm32f1xx_hal_flash.c **** 
 611:src/stm32f1xx_hal_flash.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 612:src/stm32f1xx_hal_flash.c ****             the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
 613:src/stm32f1xx_hal_flash.c ****    */ 
 614:src/stm32f1xx_hal_flash.c **** }
 615:src/stm32f1xx_hal_flash.c **** 
 616:src/stm32f1xx_hal_flash.c **** /**
 617:src/stm32f1xx_hal_flash.c ****   * @brief  FLASH operation error interrupt callback
 618:src/stm32f1xx_hal_flash.c ****   * @param  ReturnValue: The value saved in this parameter depends on the ongoing procedure
 619:src/stm32f1xx_hal_flash.c ****   *                 - Mass Erase: No return value expected
 620:src/stm32f1xx_hal_flash.c ****   *                 - Pages Erase: Address of the page which returned an error
 621:src/stm32f1xx_hal_flash.c ****   *                 - Program: Address which was selected for data program
 622:src/stm32f1xx_hal_flash.c ****   * @retval none
 623:src/stm32f1xx_hal_flash.c ****   */
 624:src/stm32f1xx_hal_flash.c **** __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
 625:src/stm32f1xx_hal_flash.c **** {
 626:src/stm32f1xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 627:src/stm32f1xx_hal_flash.c ****   UNUSED(ReturnValue);
 628:src/stm32f1xx_hal_flash.c **** 
 629:src/stm32f1xx_hal_flash.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 630:src/stm32f1xx_hal_flash.c ****             the HAL_FLASH_OperationErrorCallback could be implemented in the user file
 631:src/stm32f1xx_hal_flash.c ****    */ 
 632:src/stm32f1xx_hal_flash.c **** }
 633:src/stm32f1xx_hal_flash.c **** 
 634:src/stm32f1xx_hal_flash.c **** /**
 635:src/stm32f1xx_hal_flash.c ****   * @}
 636:src/stm32f1xx_hal_flash.c ****   */
 637:src/stm32f1xx_hal_flash.c **** 
 638:src/stm32f1xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group2 Peripheral Control functions 
 639:src/stm32f1xx_hal_flash.c ****  *  @brief   management functions 
 640:src/stm32f1xx_hal_flash.c ****  *
 641:src/stm32f1xx_hal_flash.c **** @verbatim   
 642:src/stm32f1xx_hal_flash.c ****  ===============================================================================
 643:src/stm32f1xx_hal_flash.c ****                       ##### Peripheral Control functions #####
 644:src/stm32f1xx_hal_flash.c ****  ===============================================================================  
 645:src/stm32f1xx_hal_flash.c ****     [..]
 646:src/stm32f1xx_hal_flash.c ****     This subsection provides a set of functions allowing to control the FLASH 
 647:src/stm32f1xx_hal_flash.c ****     memory operations.
 648:src/stm32f1xx_hal_flash.c **** 
 649:src/stm32f1xx_hal_flash.c **** @endverbatim
 650:src/stm32f1xx_hal_flash.c ****   * @{
 651:src/stm32f1xx_hal_flash.c ****   */
 652:src/stm32f1xx_hal_flash.c **** 
 653:src/stm32f1xx_hal_flash.c **** /**
 654:src/stm32f1xx_hal_flash.c ****   * @brief  Unlock the FLASH control register access
 655:src/stm32f1xx_hal_flash.c ****   * @retval HAL Status
 656:src/stm32f1xx_hal_flash.c ****   */
 657:src/stm32f1xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Unlock(void)
 658:src/stm32f1xx_hal_flash.c **** {
 659:src/stm32f1xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 660:src/stm32f1xx_hal_flash.c **** 
 661:src/stm32f1xx_hal_flash.c ****   if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 662:src/stm32f1xx_hal_flash.c ****   {
 663:src/stm32f1xx_hal_flash.c ****     /* Authorize the FLASH Registers access */
 664:src/stm32f1xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY1);
ARM GAS  /tmp/cc10d3Tm.s 			page 14


 665:src/stm32f1xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 666:src/stm32f1xx_hal_flash.c **** 
 667:src/stm32f1xx_hal_flash.c ****     /* Verify Flash is unlocked */
 668:src/stm32f1xx_hal_flash.c ****     if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 669:src/stm32f1xx_hal_flash.c ****     {
 670:src/stm32f1xx_hal_flash.c ****       status = HAL_ERROR;
 671:src/stm32f1xx_hal_flash.c ****     }
 672:src/stm32f1xx_hal_flash.c ****   }
 673:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 674:src/stm32f1xx_hal_flash.c ****   if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
 675:src/stm32f1xx_hal_flash.c ****   {
 676:src/stm32f1xx_hal_flash.c ****     /* Authorize the FLASH BANK2 Registers access */
 677:src/stm32f1xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 678:src/stm32f1xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 679:src/stm32f1xx_hal_flash.c ****     
 680:src/stm32f1xx_hal_flash.c ****     /* Verify Flash BANK2 is unlocked */
 681:src/stm32f1xx_hal_flash.c ****     if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
 682:src/stm32f1xx_hal_flash.c ****     {
 683:src/stm32f1xx_hal_flash.c ****       status = HAL_ERROR;
 684:src/stm32f1xx_hal_flash.c ****     }
 685:src/stm32f1xx_hal_flash.c ****   }
 686:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 687:src/stm32f1xx_hal_flash.c **** 
 688:src/stm32f1xx_hal_flash.c ****   return status;
 689:src/stm32f1xx_hal_flash.c **** }
 690:src/stm32f1xx_hal_flash.c **** 
 691:src/stm32f1xx_hal_flash.c **** /**
 692:src/stm32f1xx_hal_flash.c ****   * @brief  Locks the FLASH control register access
 693:src/stm32f1xx_hal_flash.c ****   * @retval HAL Status
 694:src/stm32f1xx_hal_flash.c ****   */
 695:src/stm32f1xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Lock(void)
 696:src/stm32f1xx_hal_flash.c **** {
 697:src/stm32f1xx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 698:src/stm32f1xx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 699:src/stm32f1xx_hal_flash.c ****   
 700:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 701:src/stm32f1xx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
 702:src/stm32f1xx_hal_flash.c ****   SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);
 703:src/stm32f1xx_hal_flash.c **** 
 704:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 705:src/stm32f1xx_hal_flash.c ****   return HAL_OK;  
 706:src/stm32f1xx_hal_flash.c **** }
 707:src/stm32f1xx_hal_flash.c **** 
 708:src/stm32f1xx_hal_flash.c **** /**
 709:src/stm32f1xx_hal_flash.c ****   * @brief  Unlock the FLASH Option Control Registers access.
 710:src/stm32f1xx_hal_flash.c ****   * @retval HAL Status
 711:src/stm32f1xx_hal_flash.c ****   */
 712:src/stm32f1xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
 713:src/stm32f1xx_hal_flash.c **** {
 714:src/stm32f1xx_hal_flash.c ****   if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 715:src/stm32f1xx_hal_flash.c ****   {
 716:src/stm32f1xx_hal_flash.c ****     /* Authorizes the Option Byte register programming */
 717:src/stm32f1xx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 718:src/stm32f1xx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 719:src/stm32f1xx_hal_flash.c ****   }
 720:src/stm32f1xx_hal_flash.c ****   else
 721:src/stm32f1xx_hal_flash.c ****   {
ARM GAS  /tmp/cc10d3Tm.s 			page 15


 722:src/stm32f1xx_hal_flash.c ****     return HAL_ERROR;
 723:src/stm32f1xx_hal_flash.c ****   }  
 724:src/stm32f1xx_hal_flash.c ****   
 725:src/stm32f1xx_hal_flash.c ****   return HAL_OK;  
 726:src/stm32f1xx_hal_flash.c **** }
 727:src/stm32f1xx_hal_flash.c **** 
 728:src/stm32f1xx_hal_flash.c **** /**
 729:src/stm32f1xx_hal_flash.c ****   * @brief  Lock the FLASH Option Control Registers access.
 730:src/stm32f1xx_hal_flash.c ****   * @retval HAL Status 
 731:src/stm32f1xx_hal_flash.c ****   */
 732:src/stm32f1xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
 733:src/stm32f1xx_hal_flash.c **** {
 734:src/stm32f1xx_hal_flash.c ****   /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
 735:src/stm32f1xx_hal_flash.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 736:src/stm32f1xx_hal_flash.c ****   
 737:src/stm32f1xx_hal_flash.c ****   return HAL_OK;  
 738:src/stm32f1xx_hal_flash.c **** }
 739:src/stm32f1xx_hal_flash.c ****   
 740:src/stm32f1xx_hal_flash.c **** /**
 741:src/stm32f1xx_hal_flash.c ****   * @brief  Launch the option byte loading.
 742:src/stm32f1xx_hal_flash.c ****   * @note   This function will reset automatically the MCU.
 743:src/stm32f1xx_hal_flash.c ****   * @retval None
 744:src/stm32f1xx_hal_flash.c ****   */
 745:src/stm32f1xx_hal_flash.c **** void HAL_FLASH_OB_Launch(void)
 746:src/stm32f1xx_hal_flash.c **** {
 747:src/stm32f1xx_hal_flash.c ****   /* Initiates a system reset request to launch the option byte loading */
 748:src/stm32f1xx_hal_flash.c ****   HAL_NVIC_SystemReset();
 749:src/stm32f1xx_hal_flash.c **** }
 750:src/stm32f1xx_hal_flash.c **** 
 751:src/stm32f1xx_hal_flash.c **** /**
 752:src/stm32f1xx_hal_flash.c ****   * @}
 753:src/stm32f1xx_hal_flash.c ****   */  
 754:src/stm32f1xx_hal_flash.c **** 
 755:src/stm32f1xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group3 Peripheral errors functions 
 756:src/stm32f1xx_hal_flash.c ****  *  @brief    Peripheral errors functions 
 757:src/stm32f1xx_hal_flash.c ****  *
 758:src/stm32f1xx_hal_flash.c **** @verbatim   
 759:src/stm32f1xx_hal_flash.c ****  ===============================================================================
 760:src/stm32f1xx_hal_flash.c ****                       ##### Peripheral Errors functions #####
 761:src/stm32f1xx_hal_flash.c ****  ===============================================================================  
 762:src/stm32f1xx_hal_flash.c ****     [..]
 763:src/stm32f1xx_hal_flash.c ****     This subsection permit to get in run-time errors of  the FLASH peripheral.
 764:src/stm32f1xx_hal_flash.c **** 
 765:src/stm32f1xx_hal_flash.c **** @endverbatim
 766:src/stm32f1xx_hal_flash.c ****   * @{
 767:src/stm32f1xx_hal_flash.c ****   */
 768:src/stm32f1xx_hal_flash.c **** 
 769:src/stm32f1xx_hal_flash.c **** /**
 770:src/stm32f1xx_hal_flash.c ****   * @brief  Get the specific FLASH error flag.
 771:src/stm32f1xx_hal_flash.c ****   * @retval FLASH_ErrorCode The returned value can be:
 772:src/stm32f1xx_hal_flash.c ****   *            @ref FLASH_Error_Codes
 773:src/stm32f1xx_hal_flash.c ****   */
 774:src/stm32f1xx_hal_flash.c **** uint32_t HAL_FLASH_GetError(void)
 775:src/stm32f1xx_hal_flash.c **** {
 776:src/stm32f1xx_hal_flash.c ****    return pFlash.ErrorCode;
 777:src/stm32f1xx_hal_flash.c **** }
 778:src/stm32f1xx_hal_flash.c **** 
ARM GAS  /tmp/cc10d3Tm.s 			page 16


 779:src/stm32f1xx_hal_flash.c **** /**
 780:src/stm32f1xx_hal_flash.c ****   * @}
 781:src/stm32f1xx_hal_flash.c ****   */
 782:src/stm32f1xx_hal_flash.c **** 
 783:src/stm32f1xx_hal_flash.c **** /**
 784:src/stm32f1xx_hal_flash.c ****   * @}
 785:src/stm32f1xx_hal_flash.c ****   */
 786:src/stm32f1xx_hal_flash.c **** 
 787:src/stm32f1xx_hal_flash.c **** /** @addtogroup FLASH_Private_Functions
 788:src/stm32f1xx_hal_flash.c ****  * @{
 789:src/stm32f1xx_hal_flash.c ****  */
 790:src/stm32f1xx_hal_flash.c **** 
 791:src/stm32f1xx_hal_flash.c **** /**
 792:src/stm32f1xx_hal_flash.c ****   * @brief  Program a half-word (16-bit) at a specified address.
 793:src/stm32f1xx_hal_flash.c ****   * @param  Address specify the address to be programmed.
 794:src/stm32f1xx_hal_flash.c ****   * @param  Data    specify the data to be programmed.
 795:src/stm32f1xx_hal_flash.c ****   * @retval None
 796:src/stm32f1xx_hal_flash.c ****   */
 797:src/stm32f1xx_hal_flash.c **** static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
 798:src/stm32f1xx_hal_flash.c **** {
 799:src/stm32f1xx_hal_flash.c ****   /* Clean the error context */
 800:src/stm32f1xx_hal_flash.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801:src/stm32f1xx_hal_flash.c ****   
 802:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 803:src/stm32f1xx_hal_flash.c ****   if(Address <= FLASH_BANK1_END)
 804:src/stm32f1xx_hal_flash.c ****   {
 805:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 806:src/stm32f1xx_hal_flash.c ****     /* Proceed to program the new data */
 807:src/stm32f1xx_hal_flash.c ****     SET_BIT(FLASH->CR, FLASH_CR_PG);
 808:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 809:src/stm32f1xx_hal_flash.c ****   }
 810:src/stm32f1xx_hal_flash.c ****   else
 811:src/stm32f1xx_hal_flash.c ****   {
 812:src/stm32f1xx_hal_flash.c ****     /* Proceed to program the new data */
 813:src/stm32f1xx_hal_flash.c ****     SET_BIT(FLASH->CR2, FLASH_CR2_PG);
 814:src/stm32f1xx_hal_flash.c ****   }
 815:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 816:src/stm32f1xx_hal_flash.c **** 
 817:src/stm32f1xx_hal_flash.c ****   /* Write data in the address */
 818:src/stm32f1xx_hal_flash.c ****   *(__IO uint16_t*)Address = Data;
 819:src/stm32f1xx_hal_flash.c **** }
 820:src/stm32f1xx_hal_flash.c **** 
 821:src/stm32f1xx_hal_flash.c **** /**
 822:src/stm32f1xx_hal_flash.c ****   * @brief  Wait for a FLASH operation to complete.
 823:src/stm32f1xx_hal_flash.c ****   * @param  Timeout  maximum flash operation timeout
 824:src/stm32f1xx_hal_flash.c ****   * @retval HAL Status
 825:src/stm32f1xx_hal_flash.c ****   */
 826:src/stm32f1xx_hal_flash.c **** HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
 827:src/stm32f1xx_hal_flash.c **** {
 828:src/stm32f1xx_hal_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
 829:src/stm32f1xx_hal_flash.c ****      Even if the FLASH operation fails, the BUSY flag will be reset and an error
 830:src/stm32f1xx_hal_flash.c ****      flag will be set */
 831:src/stm32f1xx_hal_flash.c ****      
 832:src/stm32f1xx_hal_flash.c ****   uint32_t tickstart = HAL_GetTick();
 833:src/stm32f1xx_hal_flash.c ****      
 834:src/stm32f1xx_hal_flash.c ****   while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 835:src/stm32f1xx_hal_flash.c ****   { 
ARM GAS  /tmp/cc10d3Tm.s 			page 17


 836:src/stm32f1xx_hal_flash.c ****     if (Timeout != HAL_MAX_DELAY)
 837:src/stm32f1xx_hal_flash.c ****     {
 838:src/stm32f1xx_hal_flash.c ****       if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 839:src/stm32f1xx_hal_flash.c ****       {
 840:src/stm32f1xx_hal_flash.c ****         return HAL_TIMEOUT;
 841:src/stm32f1xx_hal_flash.c ****       }
 842:src/stm32f1xx_hal_flash.c ****     }
 843:src/stm32f1xx_hal_flash.c ****   }
 844:src/stm32f1xx_hal_flash.c ****   
 845:src/stm32f1xx_hal_flash.c ****   /* Check FLASH End of Operation flag  */
 846:src/stm32f1xx_hal_flash.c ****   if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 847:src/stm32f1xx_hal_flash.c ****   {
 848:src/stm32f1xx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 849:src/stm32f1xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 850:src/stm32f1xx_hal_flash.c ****   }
 851:src/stm32f1xx_hal_flash.c ****   
 852:src/stm32f1xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 853:src/stm32f1xx_hal_flash.c ****      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 854:src/stm32f1xx_hal_flash.c ****      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 855:src/stm32f1xx_hal_flash.c ****   {
 856:src/stm32f1xx_hal_flash.c ****     /*Save the error code*/
 857:src/stm32f1xx_hal_flash.c ****     FLASH_SetErrorCode();
 858:src/stm32f1xx_hal_flash.c ****     return HAL_ERROR;
 859:src/stm32f1xx_hal_flash.c ****   }
 860:src/stm32f1xx_hal_flash.c **** 
 861:src/stm32f1xx_hal_flash.c ****   /* There is no error flag set */
 862:src/stm32f1xx_hal_flash.c ****   return HAL_OK;
 863:src/stm32f1xx_hal_flash.c **** }
 864:src/stm32f1xx_hal_flash.c **** 
 865:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 866:src/stm32f1xx_hal_flash.c **** /**
 867:src/stm32f1xx_hal_flash.c ****   * @brief  Wait for a FLASH BANK2 operation to complete.
 868:src/stm32f1xx_hal_flash.c ****   * @param  Timeout maximum flash operation timeout
 869:src/stm32f1xx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 870:src/stm32f1xx_hal_flash.c ****   */
 871:src/stm32f1xx_hal_flash.c **** HAL_StatusTypeDef FLASH_WaitForLastOperationBank2(uint32_t Timeout)
 872:src/stm32f1xx_hal_flash.c **** { 
 873:src/stm32f1xx_hal_flash.c ****   /* Wait for the FLASH BANK2 operation to complete by polling on BUSY flag to be reset.
 874:src/stm32f1xx_hal_flash.c ****      Even if the FLASH BANK2 operation fails, the BUSY flag will be reset and an error
 875:src/stm32f1xx_hal_flash.c ****      flag will be set */
 876:src/stm32f1xx_hal_flash.c ****      
 877:src/stm32f1xx_hal_flash.c ****   uint32_t tickstart = HAL_GetTick();
 878:src/stm32f1xx_hal_flash.c ****      
 879:src/stm32f1xx_hal_flash.c ****   while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY_BANK2)) 
 880:src/stm32f1xx_hal_flash.c ****   { 
 881:src/stm32f1xx_hal_flash.c ****     if (Timeout != HAL_MAX_DELAY)
 882:src/stm32f1xx_hal_flash.c ****     {
 883:src/stm32f1xx_hal_flash.c ****       if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 884:src/stm32f1xx_hal_flash.c ****       {
 885:src/stm32f1xx_hal_flash.c ****         return HAL_TIMEOUT;
 886:src/stm32f1xx_hal_flash.c ****       }
 887:src/stm32f1xx_hal_flash.c ****     }
 888:src/stm32f1xx_hal_flash.c ****   }
 889:src/stm32f1xx_hal_flash.c ****   
 890:src/stm32f1xx_hal_flash.c ****   /* Check FLASH End of Operation flag  */
 891:src/stm32f1xx_hal_flash.c ****   if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK2))
 892:src/stm32f1xx_hal_flash.c ****   {
ARM GAS  /tmp/cc10d3Tm.s 			page 18


 893:src/stm32f1xx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 894:src/stm32f1xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK2);
 895:src/stm32f1xx_hal_flash.c ****   }
 896:src/stm32f1xx_hal_flash.c **** 
 897:src/stm32f1xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
 898:src/stm32f1xx_hal_flash.c ****   {
 899:src/stm32f1xx_hal_flash.c ****     /*Save the error code*/
 900:src/stm32f1xx_hal_flash.c ****     FLASH_SetErrorCode();
 901:src/stm32f1xx_hal_flash.c ****     return HAL_ERROR;
 902:src/stm32f1xx_hal_flash.c ****   }
 903:src/stm32f1xx_hal_flash.c **** 
 904:src/stm32f1xx_hal_flash.c ****   /* If there is an error flag set */
 905:src/stm32f1xx_hal_flash.c ****   return HAL_OK;
 906:src/stm32f1xx_hal_flash.c ****   
 907:src/stm32f1xx_hal_flash.c **** }
 908:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 909:src/stm32f1xx_hal_flash.c **** 
 910:src/stm32f1xx_hal_flash.c **** /**
 911:src/stm32f1xx_hal_flash.c ****   * @brief  Set the specific FLASH error flag.
 912:src/stm32f1xx_hal_flash.c ****   * @retval None
 913:src/stm32f1xx_hal_flash.c ****   */
 914:src/stm32f1xx_hal_flash.c **** static void FLASH_SetErrorCode(void)
 915:src/stm32f1xx_hal_flash.c **** {
  78              		.loc 1 915 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83              	.LVL0:
 916:src/stm32f1xx_hal_flash.c ****   uint32_t flags = 0U;
 917:src/stm32f1xx_hal_flash.c ****   
 918:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 919:src/stm32f1xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
 920:src/stm32f1xx_hal_flash.c **** #else
 921:src/stm32f1xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
  84              		.loc 1 921 0
  85 0000 114A     		ldr	r2, .L12	@ tmp125,
  86 0002 D368     		ldr	r3, [r2, #12]	@ _7, MEM[(struct FLASH_TypeDef *)1073881088B].SR
  87 0004 13F01003 		ands	r3, r3, #16	@ tmp126, _7,
  88 0008 05D0     		beq	.L2	@,
 922:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 923:src/stm32f1xx_hal_flash.c ****   {
 924:src/stm32f1xx_hal_flash.c ****     pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
  89              		.loc 1 924 0
  90 000a 1049     		ldr	r1, .L12+4	@ tmp127,
  91 000c CB69     		ldr	r3, [r1, #28]	@ _9, pFlash.ErrorCode
  92 000e 43F00203 		orr	r3, r3, #2	@ _10, _9,
  93 0012 CB61     		str	r3, [r1, #28]	@ _10, pFlash.ErrorCode
  94              	.LVL1:
 925:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 926:src/stm32f1xx_hal_flash.c ****     flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
 927:src/stm32f1xx_hal_flash.c **** #else
 928:src/stm32f1xx_hal_flash.c ****     flags |= FLASH_FLAG_WRPERR;
  95              		.loc 1 928 0
  96 0014 1023     		movs	r3, #16	@ flags,
  97              	.LVL2:
  98              	.L2:
ARM GAS  /tmp/cc10d3Tm.s 			page 19


 929:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 930:src/stm32f1xx_hal_flash.c ****   }
 931:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 932:src/stm32f1xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
 933:src/stm32f1xx_hal_flash.c **** #else
 934:src/stm32f1xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
  99              		.loc 1 934 0
 100 0016 D268     		ldr	r2, [r2, #12]	@ _12, MEM[(struct FLASH_TypeDef *)1073881088B].SR
 101 0018 5007     		lsls	r0, r2, #29	@, _12,
 102 001a 06D5     		bpl	.L3	@,
 935:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 936:src/stm32f1xx_hal_flash.c ****   {
 937:src/stm32f1xx_hal_flash.c ****     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 103              		.loc 1 937 0
 104 001c 0B49     		ldr	r1, .L12+4	@ tmp131,
 938:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 939:src/stm32f1xx_hal_flash.c ****     flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
 940:src/stm32f1xx_hal_flash.c **** #else
 941:src/stm32f1xx_hal_flash.c ****     flags |= FLASH_FLAG_PGERR;
 105              		.loc 1 941 0
 106 001e 43F00403 		orr	r3, r3, #4	@ flags, flags,
 107              	.LVL3:
 937:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 108              		.loc 1 937 0
 109 0022 CA69     		ldr	r2, [r1, #28]	@ _14, pFlash.ErrorCode
 110 0024 42F00102 		orr	r2, r2, #1	@ _15, _14,
 111 0028 CA61     		str	r2, [r1, #28]	@ _15, pFlash.ErrorCode
 112              	.L3:
 942:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 943:src/stm32f1xx_hal_flash.c ****   }
 944:src/stm32f1xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 113              		.loc 1 944 0
 114 002a 074A     		ldr	r2, .L12	@ tmp133,
 115 002c D169     		ldr	r1, [r2, #28]	@ _18, MEM[(struct FLASH_TypeDef *)1073881088B].OBR
 116 002e C907     		lsls	r1, r1, #31	@, _18,
 117 0030 08D5     		bpl	.L4	@,
 945:src/stm32f1xx_hal_flash.c ****   {
 946:src/stm32f1xx_hal_flash.c ****     pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 118              		.loc 1 946 0
 119 0032 0648     		ldr	r0, .L12+4	@ tmp135,
 120 0034 C169     		ldr	r1, [r0, #28]	@ _20, pFlash.ErrorCode
 121 0036 41F00401 		orr	r1, r1, #4	@ _21, _20,
 122 003a C161     		str	r1, [r0, #28]	@ _21, pFlash.ErrorCode
 947:src/stm32f1xx_hal_flash.c ****   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 123              		.loc 1 947 0
 124 003c D169     		ldr	r1, [r2, #28]	@ _23, MEM[(struct FLASH_TypeDef *)1073881088B].OBR
 125 003e 21F00101 		bic	r1, r1, #1	@ _24, _23,
 126 0042 D161     		str	r1, [r2, #28]	@ _24, MEM[(struct FLASH_TypeDef *)1073881088B].OBR
 127              	.L4:
 948:src/stm32f1xx_hal_flash.c ****   }
 949:src/stm32f1xx_hal_flash.c **** 
 950:src/stm32f1xx_hal_flash.c ****   /* Clear FLASH error pending bits */
 951:src/stm32f1xx_hal_flash.c ****   __HAL_FLASH_CLEAR_FLAG(flags);
 128              		.loc 1 951 0
 129 0044 D360     		str	r3, [r2, #12]	@ flags, MEM[(struct FLASH_TypeDef *)1073881088B].SR
 130 0046 7047     		bx	lr	@
 131              	.L13:
ARM GAS  /tmp/cc10d3Tm.s 			page 20


 132              		.align	2
 133              	.L12:
 134 0048 00200240 		.word	1073881088
 135 004c 00000000 		.word	pFlash
 136              		.cfi_endproc
 137              	.LFE78:
 138              		.size	FLASH_SetErrorCode, .-FLASH_SetErrorCode
 139              		.align	1
 140              		.global	HAL_FLASH_Program_IT
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu softvfp
 145              		.type	HAL_FLASH_Program_IT, %function
 146              	HAL_FLASH_Program_IT:
 147              	.LFB66:
 268:src/stm32f1xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 148              		.loc 1 268 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152              	.LVL4:
 153 0050 70B5     		push	{r4, r5, r6, lr}	@
 154              	.LCFI0:
 155              		.cfi_def_cfa_offset 16
 156              		.cfi_offset 4, -16
 157              		.cfi_offset 5, -12
 158              		.cfi_offset 6, -8
 159              		.cfi_offset 14, -4
 268:src/stm32f1xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 160              		.loc 1 268 0
 161 0052 1D46     		mov	r5, r3	@ Data, Data
 272:src/stm32f1xx_hal_flash.c **** 
 162              		.loc 1 272 0
 163 0054 134B     		ldr	r3, .L21	@ tmp121,
 268:src/stm32f1xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 164              		.loc 1 268 0
 165 0056 1446     		mov	r4, r2	@ Data, Data
 272:src/stm32f1xx_hal_flash.c **** 
 166              		.loc 1 272 0
 167 0058 1A7E     		ldrb	r2, [r3, #24]	@ zero_extendqisi2	@ pFlash.Lock, pFlash.Lock
 168              	.LVL5:
 169 005a 012A     		cmp	r2, #1	@ pFlash.Lock,
 170 005c 20D0     		beq	.L19	@,
 272:src/stm32f1xx_hal_flash.c **** 
 171              		.loc 1 272 0 is_stmt 0 discriminator 2
 172 005e 0122     		movs	r2, #1	@ tmp124,
 297:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 173              		.loc 1 297 0 is_stmt 1 discriminator 2
 174 0060 114E     		ldr	r6, .L21+4	@ tmp126,
 272:src/stm32f1xx_hal_flash.c **** 
 175              		.loc 1 272 0 discriminator 2
 176 0062 1A76     		strb	r2, [r3, #24]	@ tmp124, pFlash.Lock
 297:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 177              		.loc 1 297 0 discriminator 2
 178 0064 3269     		ldr	r2, [r6, #16]	@ _7, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 303:src/stm32f1xx_hal_flash.c ****   {
ARM GAS  /tmp/cc10d3Tm.s 			page 21


 179              		.loc 1 303 0 discriminator 2
 180 0066 0128     		cmp	r0, #1	@ TypeProgram,
 297:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 181              		.loc 1 297 0 discriminator 2
 182 0068 42F4A052 		orr	r2, r2, #5120	@ _8, _7,
 183 006c 3261     		str	r2, [r6, #16]	@ _8, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 300:src/stm32f1xx_hal_flash.c ****   pFlash.Data = Data;
 184              		.loc 1 300 0 discriminator 2
 185 006e 9960     		str	r1, [r3, #8]	@ Address, pFlash.Address
 301:src/stm32f1xx_hal_flash.c **** 
 186              		.loc 1 301 0 discriminator 2
 187 0070 C3E90445 		strd	r4, [r3, #16]	@ Data, tmp151,
 303:src/stm32f1xx_hal_flash.c ****   {
 188              		.loc 1 303 0 discriminator 2
 189 0074 0CD1     		bne	.L16	@,
 305:src/stm32f1xx_hal_flash.c ****     /* Program halfword (16-bit) at a specified address. */
 190              		.loc 1 305 0
 191 0076 0322     		movs	r2, #3	@ tmp131,
 192              	.L20:
 311:src/stm32f1xx_hal_flash.c ****     /* Program word (32-bit : 2*16-bit) at a specified address. */
 193              		.loc 1 311 0
 194 0078 1A70     		strb	r2, [r3]	@ tmp152,
 313:src/stm32f1xx_hal_flash.c ****   }
 195              		.loc 1 313 0
 196 007a 5860     		str	r0, [r3, #4]	@ TypeProgram,
 197              	.LVL6:
 198              	.L17:
 199              	.LBB4:
 200              	.LBB5:
 800:src/stm32f1xx_hal_flash.c ****   
 201              		.loc 1 800 0
 202 007c 0020     		movs	r0, #0	@ tmp146,
 807:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 203              		.loc 1 807 0
 204 007e 0A4A     		ldr	r2, .L21+4	@ tmp147,
 800:src/stm32f1xx_hal_flash.c ****   
 205              		.loc 1 800 0
 206 0080 D861     		str	r0, [r3, #28]	@ tmp146, pFlash.ErrorCode
 807:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 207              		.loc 1 807 0
 208 0082 1369     		ldr	r3, [r2, #16]	@ _23, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 209              	.LBE5:
 210              	.LBE4:
 323:src/stm32f1xx_hal_flash.c **** 
 211              		.loc 1 323 0
 212 0084 A4B2     		uxth	r4, r4	@ _21, Data
 213              	.LVL7:
 214              	.LBB7:
 215              	.LBB6:
 807:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 216              		.loc 1 807 0
 217 0086 43F00103 		orr	r3, r3, #1	@ _24, _23,
 218 008a 1361     		str	r3, [r2, #16]	@ _24, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 818:src/stm32f1xx_hal_flash.c **** }
 219              		.loc 1 818 0
 220 008c 0C80     		strh	r4, [r1]	@ movhi	@ _21, *Address.1_25
 221 008e 70BD     		pop	{r4, r5, r6, pc}	@
ARM GAS  /tmp/cc10d3Tm.s 			page 22


 222              	.LVL8:
 223              	.L16:
 224              	.LBE6:
 225              	.LBE7:
 309:src/stm32f1xx_hal_flash.c ****   {
 226              		.loc 1 309 0
 227 0090 0228     		cmp	r0, #2	@ TypeProgram,
 228 0092 4FF00402 		mov	r2, #4	@ tmp152,
 229 0096 EFD0     		beq	.L20	@,
 317:src/stm32f1xx_hal_flash.c ****     /* Program double word (64-bit : 4*16-bit) at a specified address. */
 230              		.loc 1 317 0
 231 0098 0520     		movs	r0, #5	@ tmp141,
 232              	.LVL9:
 233 009a 1870     		strb	r0, [r3]	@ tmp141, pFlash.ProcedureOnGoing
 319:src/stm32f1xx_hal_flash.c ****   }
 234              		.loc 1 319 0
 235 009c 5A60     		str	r2, [r3, #4]	@ tmp152, pFlash.DataRemaining
 236 009e EDE7     		b	.L17	@
 237              	.LVL10:
 238              	.L19:
 272:src/stm32f1xx_hal_flash.c **** 
 239              		.loc 1 272 0
 240 00a0 0220     		movs	r0, #2	@ <retval>,
 241              	.LVL11:
 326:src/stm32f1xx_hal_flash.c **** 
 242              		.loc 1 326 0
 243 00a2 70BD     		pop	{r4, r5, r6, pc}	@
 244              	.L22:
 245              		.align	2
 246              	.L21:
 247 00a4 00000000 		.word	pFlash
 248 00a8 00200240 		.word	1073881088
 249              		.cfi_endproc
 250              	.LFE66:
 251              		.size	HAL_FLASH_Program_IT, .-HAL_FLASH_Program_IT
 252              		.align	1
 253              		.weak	HAL_FLASH_EndOfOperationCallback
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu softvfp
 258              		.type	HAL_FLASH_EndOfOperationCallback, %function
 259              	HAL_FLASH_EndOfOperationCallback:
 260              	.LFB80:
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              		@ link register save eliminated.
 265 00ac 7047     		bx	lr	@
 266              		.cfi_endproc
 267              	.LFE80:
 268              		.size	HAL_FLASH_EndOfOperationCallback, .-HAL_FLASH_EndOfOperationCallback
 269              		.align	1
 270              		.weak	HAL_FLASH_OperationErrorCallback
 271              		.syntax unified
 272              		.thumb
 273              		.thumb_func
ARM GAS  /tmp/cc10d3Tm.s 			page 23


 274              		.fpu softvfp
 275              		.type	HAL_FLASH_OperationErrorCallback, %function
 276              	HAL_FLASH_OperationErrorCallback:
 277              	.LFB69:
 625:src/stm32f1xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 278              		.loc 1 625 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282              		@ link register save eliminated.
 283              	.LVL12:
 284 00ae 7047     		bx	lr	@
 285              		.cfi_endproc
 286              	.LFE69:
 287              		.size	HAL_FLASH_OperationErrorCallback, .-HAL_FLASH_OperationErrorCallback
 288              		.align	1
 289              		.global	HAL_FLASH_IRQHandler
 290              		.syntax unified
 291              		.thumb
 292              		.thumb_func
 293              		.fpu softvfp
 294              		.type	HAL_FLASH_IRQHandler, %function
 295              	HAL_FLASH_IRQHandler:
 296              	.LFB67:
 333:src/stm32f1xx_hal_flash.c ****   uint32_t addresstmp = 0U;
 297              		.loc 1 333 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 0, uses_anonymous_args = 0
 301              	.LVL13:
 341:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 302              		.loc 1 341 0
 303 00b0 424B     		ldr	r3, .L47	@ tmp157,
 333:src/stm32f1xx_hal_flash.c ****   uint32_t addresstmp = 0U;
 304              		.loc 1 333 0
 305 00b2 70B5     		push	{r4, r5, r6, lr}	@
 306              	.LCFI1:
 307              		.cfi_def_cfa_offset 16
 308              		.cfi_offset 4, -16
 309              		.cfi_offset 5, -12
 310              		.cfi_offset 6, -8
 311              		.cfi_offset 14, -4
 341:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 312              		.loc 1 341 0
 313 00b4 DA68     		ldr	r2, [r3, #12]	@ _6, MEM[(struct FLASH_TypeDef *)1073881088B].SR
 314 00b6 424C     		ldr	r4, .L47+4	@ tmp241,
 315 00b8 12F0100F 		tst	r2, #16	@ _6,
 316 00bc 02D1     		bne	.L26	@,
 341:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 317              		.loc 1 341 0 is_stmt 0 discriminator 1
 318 00be DB68     		ldr	r3, [r3, #12]	@ _8, MEM[(struct FLASH_TypeDef *)1073881088B].SR
 319 00c0 5A07     		lsls	r2, r3, #29	@, _8,
 320 00c2 0AD5     		bpl	.L27	@,
 321              	.L26:
 347:src/stm32f1xx_hal_flash.c ****   
 322              		.loc 1 347 0 is_stmt 1
 323 00c4 4FF0FF33 		mov	r3, #-1	@ tmp163,
ARM GAS  /tmp/cc10d3Tm.s 			page 24


 345:src/stm32f1xx_hal_flash.c ****     /* Reset address */
 324              		.loc 1 345 0
 325 00c8 A568     		ldr	r5, [r4, #8]	@ addresstmp, pFlash.Address
 326              	.LVL14:
 347:src/stm32f1xx_hal_flash.c ****   
 327              		.loc 1 347 0
 328 00ca A360     		str	r3, [r4, #8]	@ tmp163, pFlash.Address
 350:src/stm32f1xx_hal_flash.c ****     
 329              		.loc 1 350 0
 330 00cc FFF798FF 		bl	FLASH_SetErrorCode	@
 331              	.LVL15:
 353:src/stm32f1xx_hal_flash.c **** 
 332              		.loc 1 353 0
 333 00d0 2846     		mov	r0, r5	@, addresstmp
 334 00d2 FFF7FEFF 		bl	HAL_FLASH_OperationErrorCallback	@
 335              	.LVL16:
 356:src/stm32f1xx_hal_flash.c ****   }
 336              		.loc 1 356 0
 337 00d6 0023     		movs	r3, #0	@ tmp165,
 338 00d8 2370     		strb	r3, [r4]	@ tmp165, pFlash.ProcedureOnGoing
 339              	.LVL17:
 340              	.L27:
 366:src/stm32f1xx_hal_flash.c ****   {
 341              		.loc 1 366 0
 342 00da 384D     		ldr	r5, .L47	@ tmp167,
 343 00dc EB68     		ldr	r3, [r5, #12]	@ _15, MEM[(struct FLASH_TypeDef *)1073881088B].SR
 344 00de 9B06     		lsls	r3, r3, #26	@, _15,
 345 00e0 18D5     		bpl	.L29	@,
 369:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 346              		.loc 1 369 0 discriminator 2
 347 00e2 2023     		movs	r3, #32	@ tmp170,
 348 00e4 EB60     		str	r3, [r5, #12]	@ tmp170, MEM[(struct FLASH_TypeDef *)1073881088B].SR
 373:src/stm32f1xx_hal_flash.c ****     {
 349              		.loc 1 373 0 discriminator 2
 350 00e6 2378     		ldrb	r3, [r4]	@ zero_extendqisi2	@ pFlash.ProcedureOnGoing, pFlash.ProcedureOnGoing
 351 00e8 A3B1     		cbz	r3, .L29	@ pFlash.ProcedureOnGoing,
 375:src/stm32f1xx_hal_flash.c ****       {
 352              		.loc 1 375 0
 353 00ea 2378     		ldrb	r3, [r4]	@ zero_extendqisi2	@ pFlash.ProcedureOnGoing, pFlash.ProcedureOnGoing
 354 00ec 012B     		cmp	r3, #1	@ pFlash.ProcedureOnGoing,
 355 00ee 27D1     		bne	.L31	@,
 378:src/stm32f1xx_hal_flash.c **** 
 356              		.loc 1 378 0
 357 00f0 6368     		ldr	r3, [r4, #4]	@ _20, pFlash.DataRemaining
 358 00f2 013B     		subs	r3, r3, #1	@ _21, _20,
 359 00f4 6360     		str	r3, [r4, #4]	@ _21, pFlash.DataRemaining
 381:src/stm32f1xx_hal_flash.c ****         {
 360              		.loc 1 381 0
 361 00f6 6368     		ldr	r3, [r4, #4]	@ _23, pFlash.DataRemaining
 362 00f8 DBB1     		cbz	r3, .L32	@ _23,
 383:src/stm32f1xx_hal_flash.c ****           /*Indicate user which sector has been erased */
 363              		.loc 1 383 0
 364 00fa A068     		ldr	r0, [r4, #8]	@ addresstmp, pFlash.Address
 365              	.LVL18:
 385:src/stm32f1xx_hal_flash.c **** 
 366              		.loc 1 385 0
 367 00fc FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback	@
ARM GAS  /tmp/cc10d3Tm.s 			page 25


 368              	.LVL19:
 388:src/stm32f1xx_hal_flash.c ****           pFlash.Address = addresstmp;
 369              		.loc 1 388 0
 370 0100 A068     		ldr	r0, [r4, #8]	@ _29, pFlash.Address
 371 0102 00F58060 		add	r0, r0, #1024	@ addresstmp, _29,
 372              	.LVL20:
 389:src/stm32f1xx_hal_flash.c **** 
 373              		.loc 1 389 0
 374 0106 A060     		str	r0, [r4, #8]	@ addresstmp, pFlash.Address
 392:src/stm32f1xx_hal_flash.c **** 
 375              		.loc 1 392 0
 376 0108 2B69     		ldr	r3, [r5, #16]	@ _32, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 377 010a 23F00203 		bic	r3, r3, #2	@ _33, _32,
 378 010e 2B61     		str	r3, [r5, #16]	@ _33, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 394:src/stm32f1xx_hal_flash.c ****         }
 379              		.loc 1 394 0
 380 0110 FFF7FEFF 		bl	FLASH_PageErase	@
 381              	.LVL21:
 382              	.L29:
 575:src/stm32f1xx_hal_flash.c ****   {
 383              		.loc 1 575 0
 384 0114 2378     		ldrb	r3, [r4]	@ zero_extendqisi2	@ pFlash.ProcedureOnGoing, pFlash.ProcedureOnGoing
 385 0116 03F0FF01 		and	r1, r3, #255	@ _71, pFlash.ProcedureOnGoing,
 386 011a 4BB9     		cbnz	r3, .L25	@ pFlash.ProcedureOnGoing,
 586:src/stm32f1xx_hal_flash.c **** 
 387              		.loc 1 586 0
 388 011c 274B     		ldr	r3, .L47	@ tmp234,
 389 011e 1A69     		ldr	r2, [r3, #16]	@ _72, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 390 0120 22F00702 		bic	r2, r2, #7	@ _73, _72,
 391 0124 1A61     		str	r2, [r3, #16]	@ _73, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 589:src/stm32f1xx_hal_flash.c **** #endif /* FLASH_BANK2_END */
 392              		.loc 1 589 0
 393 0126 1A69     		ldr	r2, [r3, #16]	@ _75, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 394 0128 22F4A052 		bic	r2, r2, #5120	@ _76, _75,
 395 012c 1A61     		str	r2, [r3, #16]	@ _76, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 593:src/stm32f1xx_hal_flash.c ****   }
 396              		.loc 1 593 0
 397 012e 2176     		strb	r1, [r4, #24]	@ _71, pFlash.Lock
 398              	.L25:
 399 0130 70BD     		pop	{r4, r5, r6, pc}	@
 400              	.L32:
 401              	.LVL22:
 400:src/stm32f1xx_hal_flash.c ****           pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 402              		.loc 1 400 0
 403 0132 4FF0FF30 		mov	r0, #-1	@ tmp186,
 404 0136 A060     		str	r0, [r4, #8]	@ tmp186, pFlash.Address
 401:src/stm32f1xx_hal_flash.c ****           /* FLASH EOP interrupt user callback */
 405              		.loc 1 401 0
 406 0138 2370     		strb	r3, [r4]	@ _23, pFlash.ProcedureOnGoing
 403:src/stm32f1xx_hal_flash.c ****         }
 407              		.loc 1 403 0
 408 013a FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback	@
 409              	.LVL23:
 410 013e E9E7     		b	.L29	@
 411              	.LVL24:
 412              	.L31:
 406:src/stm32f1xx_hal_flash.c ****       {
ARM GAS  /tmp/cc10d3Tm.s 			page 26


 413              		.loc 1 406 0
 414 0140 2378     		ldrb	r3, [r4]	@ zero_extendqisi2	@ pFlash.ProcedureOnGoing, pFlash.ProcedureOnGoing
 415 0142 022B     		cmp	r3, #2	@ pFlash.ProcedureOnGoing,
 416 0144 09D1     		bne	.L33	@,
 409:src/stm32f1xx_hal_flash.c **** 
 417              		.loc 1 409 0
 418 0146 2B69     		ldr	r3, [r5, #16]	@ _37, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 418:src/stm32f1xx_hal_flash.c **** 
 419              		.loc 1 418 0
 420 0148 0020     		movs	r0, #0	@,
 409:src/stm32f1xx_hal_flash.c **** 
 421              		.loc 1 409 0
 422 014a 23F00403 		bic	r3, r3, #4	@ _38, _37,
 423 014e 2B61     		str	r3, [r5, #16]	@ _38, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 418:src/stm32f1xx_hal_flash.c **** 
 424              		.loc 1 418 0
 425 0150 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback	@
 426              	.LVL25:
 427              	.L46:
 466:src/stm32f1xx_hal_flash.c ****         }
 428              		.loc 1 466 0
 429 0154 0023     		movs	r3, #0	@ tmp229,
 430 0156 2370     		strb	r3, [r4]	@ tmp229,
 431 0158 DCE7     		b	.L29	@
 432              	.L33:
 429:src/stm32f1xx_hal_flash.c ****         
 433              		.loc 1 429 0
 434 015a 6368     		ldr	r3, [r4, #4]	@ _42, pFlash.DataRemaining
 435 015c 013B     		subs	r3, r3, #1	@ _43, _42,
 436 015e 6360     		str	r3, [r4, #4]	@ _43, pFlash.DataRemaining
 432:src/stm32f1xx_hal_flash.c ****         {
 437              		.loc 1 432 0
 438 0160 6368     		ldr	r3, [r4, #4]	@ _45, pFlash.DataRemaining
 439 0162 D3B1     		cbz	r3, .L34	@ _45,
 435:src/stm32f1xx_hal_flash.c ****           addresstmp = pFlash.Address;
 440              		.loc 1 435 0
 441 0164 A368     		ldr	r3, [r4, #8]	@ _46, pFlash.Address
 442 0166 0233     		adds	r3, r3, #2	@ _47, _46,
 443 0168 A360     		str	r3, [r4, #8]	@ _47, pFlash.Address
 436:src/stm32f1xx_hal_flash.c ****           
 444              		.loc 1 436 0
 445 016a A668     		ldr	r6, [r4, #8]	@ addresstmp, pFlash.Address
 446              	.LVL26:
 439:src/stm32f1xx_hal_flash.c ****           
 447              		.loc 1 439 0
 448 016c D4E90401 		ldrd	r0, [r4, #16]	@ _50, tmp241,
 449 0170 020C     		lsrs	r2, r0, #16	@ _51, _50,
 450 0172 42EA0142 		orr	r2, r2, r1, lsl #16	@ _51, _51, _50,
 451 0176 0B0C     		lsrs	r3, r1, #16	@ _51, _50,
 452 0178 C4E90423 		strd	r2, [r4, #16]	@ _51, tmp241,
 442:src/stm32f1xx_hal_flash.c **** 
 453              		.loc 1 442 0
 454 017c 2B69     		ldr	r3, [r5, #16]	@ _53, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 455 017e 23F00103 		bic	r3, r3, #1	@ _54, _53,
 456 0182 2B61     		str	r3, [r5, #16]	@ _54, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 445:src/stm32f1xx_hal_flash.c ****         }
 457              		.loc 1 445 0
ARM GAS  /tmp/cc10d3Tm.s 			page 27


 458 0184 D4E90423 		ldrd	r2, [r4, #16]	@ _56, tmp241,
 459              	.LBB10:
 460              	.LBB11:
 800:src/stm32f1xx_hal_flash.c ****   
 461              		.loc 1 800 0
 462 0188 0023     		movs	r3, #0	@ tmp211,
 463 018a E361     		str	r3, [r4, #28]	@ tmp211, pFlash.ErrorCode
 807:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 464              		.loc 1 807 0
 465 018c 2B69     		ldr	r3, [r5, #16]	@ _79, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 466              	.LBE11:
 467              	.LBE10:
 445:src/stm32f1xx_hal_flash.c ****         }
 468              		.loc 1 445 0
 469 018e 92B2     		uxth	r2, r2	@ _57, _56
 470              	.LVL27:
 471              	.LBB13:
 472              	.LBB12:
 807:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 473              		.loc 1 807 0
 474 0190 43F00103 		orr	r3, r3, #1	@ _80, _79,
 475 0194 2B61     		str	r3, [r5, #16]	@ _80, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 818:src/stm32f1xx_hal_flash.c **** }
 476              		.loc 1 818 0
 477 0196 3280     		strh	r2, [r6]	@ movhi	@ _57, *Address.1_81
 478 0198 BCE7     		b	.L29	@
 479              	.LVL28:
 480              	.L34:
 481              	.LBE12:
 482              	.LBE13:
 451:src/stm32f1xx_hal_flash.c ****           {
 483              		.loc 1 451 0
 484 019a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2	@ pFlash.ProcedureOnGoing, pFlash.ProcedureOnGoing
 485 019c 032B     		cmp	r3, #3	@ pFlash.ProcedureOnGoing,
 486 019e 06D1     		bne	.L35	@,
 453:src/stm32f1xx_hal_flash.c ****           }
 487              		.loc 1 453 0
 488 01a0 A068     		ldr	r0, [r4, #8]	@ _60, pFlash.Address
 489              	.L45:
 461:src/stm32f1xx_hal_flash.c ****           }
 490              		.loc 1 461 0
 491 01a2 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback	@
 492              	.LVL29:
 465:src/stm32f1xx_hal_flash.c ****           pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 493              		.loc 1 465 0
 494 01a6 4FF0FF33 		mov	r3, #-1	@ tmp227,
 495 01aa A360     		str	r3, [r4, #8]	@ tmp227, pFlash.Address
 496 01ac D2E7     		b	.L46	@
 497              	.L35:
 455:src/stm32f1xx_hal_flash.c ****           {
 498              		.loc 1 455 0
 499 01ae 2378     		ldrb	r3, [r4]	@ zero_extendqisi2	@ pFlash.ProcedureOnGoing, pFlash.ProcedureOnGoing
 457:src/stm32f1xx_hal_flash.c ****           }
 500              		.loc 1 457 0
 501 01b0 A068     		ldr	r0, [r4, #8]	@ _63,
 455:src/stm32f1xx_hal_flash.c ****           {
 502              		.loc 1 455 0
ARM GAS  /tmp/cc10d3Tm.s 			page 28


 503 01b2 042B     		cmp	r3, #4	@ pFlash.ProcedureOnGoing,
 457:src/stm32f1xx_hal_flash.c ****           }
 504              		.loc 1 457 0
 505 01b4 0CBF     		ite	eq
 506 01b6 0238     		subeq	r0, r0, #2	@, _63,
 461:src/stm32f1xx_hal_flash.c ****           }
 507              		.loc 1 461 0
 508 01b8 0638     		subne	r0, r0, #6	@, _66,
 509 01ba F2E7     		b	.L45	@
 510              	.L48:
 511              		.align	2
 512              	.L47:
 513 01bc 00200240 		.word	1073881088
 514 01c0 00000000 		.word	pFlash
 515              		.cfi_endproc
 516              	.LFE67:
 517              		.size	HAL_FLASH_IRQHandler, .-HAL_FLASH_IRQHandler
 518              		.align	1
 519              		.global	HAL_FLASH_Unlock
 520              		.syntax unified
 521              		.thumb
 522              		.thumb_func
 523              		.fpu softvfp
 524              		.type	HAL_FLASH_Unlock, %function
 525              	HAL_FLASH_Unlock:
 526              	.LFB70:
 658:src/stm32f1xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 527              		.loc 1 658 0
 528              		.cfi_startproc
 529              		@ args = 0, pretend = 0, frame = 0
 530              		@ frame_needed = 0, uses_anonymous_args = 0
 531              		@ link register save eliminated.
 532              	.LVL30:
 661:src/stm32f1xx_hal_flash.c ****   {
 533              		.loc 1 661 0
 534 01c4 064B     		ldr	r3, .L52	@ tmp116,
 535 01c6 1869     		ldr	r0, [r3, #16]	@ _4, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 536 01c8 10F08000 		ands	r0, r0, #128	@ tmp117, _4,
 537 01cc 07D0     		beq	.L50	@,
 664:src/stm32f1xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 538              		.loc 1 664 0
 539 01ce 054A     		ldr	r2, .L52+4	@ tmp119,
 540 01d0 5A60     		str	r2, [r3, #4]	@ tmp119, MEM[(struct FLASH_TypeDef *)1073881088B].KEYR
 665:src/stm32f1xx_hal_flash.c **** 
 541              		.loc 1 665 0
 542 01d2 02F18832 		add	r2, r2, #-2004318072	@ tmp121, tmp121,
 543 01d6 5A60     		str	r2, [r3, #4]	@ tmp121, MEM[(struct FLASH_TypeDef *)1073881088B].KEYR
 668:src/stm32f1xx_hal_flash.c ****     {
 544              		.loc 1 668 0
 545 01d8 1869     		ldr	r0, [r3, #16]	@ _8, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 659:src/stm32f1xx_hal_flash.c **** 
 546              		.loc 1 659 0
 547 01da C0F3C010 		ubfx	r0, r0, #7, #1	@ <retval>, _8,,
 548              	.L50:
 549              	.LVL31:
 689:src/stm32f1xx_hal_flash.c **** 
 550              		.loc 1 689 0
ARM GAS  /tmp/cc10d3Tm.s 			page 29


 551 01de 7047     		bx	lr	@
 552              	.L53:
 553              		.align	2
 554              	.L52:
 555 01e0 00200240 		.word	1073881088
 556 01e4 23016745 		.word	1164378403
 557              		.cfi_endproc
 558              	.LFE70:
 559              		.size	HAL_FLASH_Unlock, .-HAL_FLASH_Unlock
 560              		.align	1
 561              		.global	HAL_FLASH_Lock
 562              		.syntax unified
 563              		.thumb
 564              		.thumb_func
 565              		.fpu softvfp
 566              		.type	HAL_FLASH_Lock, %function
 567              	HAL_FLASH_Lock:
 568              	.LFB71:
 696:src/stm32f1xx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 569              		.loc 1 696 0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 0
 572              		@ frame_needed = 0, uses_anonymous_args = 0
 573              		@ link register save eliminated.
 698:src/stm32f1xx_hal_flash.c ****   
 574              		.loc 1 698 0
 575 01e8 034A     		ldr	r2, .L55	@ tmp113,
 706:src/stm32f1xx_hal_flash.c **** 
 576              		.loc 1 706 0
 577 01ea 0020     		movs	r0, #0	@,
 698:src/stm32f1xx_hal_flash.c ****   
 578              		.loc 1 698 0
 579 01ec 1369     		ldr	r3, [r2, #16]	@ _2, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 580 01ee 43F08003 		orr	r3, r3, #128	@ _3, _2,
 581 01f2 1361     		str	r3, [r2, #16]	@ _3, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 706:src/stm32f1xx_hal_flash.c **** 
 582              		.loc 1 706 0
 583 01f4 7047     		bx	lr	@
 584              	.L56:
 585 01f6 00BF     		.align	2
 586              	.L55:
 587 01f8 00200240 		.word	1073881088
 588              		.cfi_endproc
 589              	.LFE71:
 590              		.size	HAL_FLASH_Lock, .-HAL_FLASH_Lock
 591              		.align	1
 592              		.global	HAL_FLASH_OB_Unlock
 593              		.syntax unified
 594              		.thumb
 595              		.thumb_func
 596              		.fpu softvfp
 597              		.type	HAL_FLASH_OB_Unlock, %function
 598              	HAL_FLASH_OB_Unlock:
 599              	.LFB72:
 713:src/stm32f1xx_hal_flash.c ****   if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 600              		.loc 1 713 0
 601              		.cfi_startproc
ARM GAS  /tmp/cc10d3Tm.s 			page 30


 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604              		@ link register save eliminated.
 714:src/stm32f1xx_hal_flash.c ****   {
 605              		.loc 1 714 0
 606 01fc 064B     		ldr	r3, .L60	@ tmp113,
 607 01fe 1869     		ldr	r0, [r3, #16]	@ _4, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 608 0200 10F40070 		ands	r0, r0, #512	@ tmp114, _4,
 717:src/stm32f1xx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 609              		.loc 1 717 0
 610 0204 09BF     		itett	eq
 611 0206 054A     		ldreq	r2, .L60+4	@ tmp116,
 722:src/stm32f1xx_hal_flash.c ****   }  
 612              		.loc 1 722 0
 613 0208 0120     		movne	r0, #1	@ <retval>,
 717:src/stm32f1xx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 614              		.loc 1 717 0
 615 020a 9A60     		streq	r2, [r3, #8]	@ tmp116, MEM[(struct FLASH_TypeDef *)1073881088B].OPTKEYR
 718:src/stm32f1xx_hal_flash.c ****   }
 616              		.loc 1 718 0
 617 020c 02F18832 		addeq	r2, r2, #-2004318072	@ tmp118, tmp118,
 618 0210 08BF     		it	eq
 619 0212 9A60     		streq	r2, [r3, #8]	@ tmp118, MEM[(struct FLASH_TypeDef *)1073881088B].OPTKEYR
 726:src/stm32f1xx_hal_flash.c **** 
 620              		.loc 1 726 0
 621 0214 7047     		bx	lr	@
 622              	.L61:
 623 0216 00BF     		.align	2
 624              	.L60:
 625 0218 00200240 		.word	1073881088
 626 021c 23016745 		.word	1164378403
 627              		.cfi_endproc
 628              	.LFE72:
 629              		.size	HAL_FLASH_OB_Unlock, .-HAL_FLASH_OB_Unlock
 630              		.align	1
 631              		.global	HAL_FLASH_OB_Lock
 632              		.syntax unified
 633              		.thumb
 634              		.thumb_func
 635              		.fpu softvfp
 636              		.type	HAL_FLASH_OB_Lock, %function
 637              	HAL_FLASH_OB_Lock:
 638              	.LFB73:
 733:src/stm32f1xx_hal_flash.c ****   /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
 639              		.loc 1 733 0
 640              		.cfi_startproc
 641              		@ args = 0, pretend = 0, frame = 0
 642              		@ frame_needed = 0, uses_anonymous_args = 0
 643              		@ link register save eliminated.
 735:src/stm32f1xx_hal_flash.c ****   
 644              		.loc 1 735 0
 645 0220 034A     		ldr	r2, .L63	@ tmp113,
 738:src/stm32f1xx_hal_flash.c ****   
 646              		.loc 1 738 0
 647 0222 0020     		movs	r0, #0	@,
 735:src/stm32f1xx_hal_flash.c ****   
 648              		.loc 1 735 0
ARM GAS  /tmp/cc10d3Tm.s 			page 31


 649 0224 1369     		ldr	r3, [r2, #16]	@ _2, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 650 0226 23F40073 		bic	r3, r3, #512	@ _3, _2,
 651 022a 1361     		str	r3, [r2, #16]	@ _3, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 738:src/stm32f1xx_hal_flash.c ****   
 652              		.loc 1 738 0
 653 022c 7047     		bx	lr	@
 654              	.L64:
 655 022e 00BF     		.align	2
 656              	.L63:
 657 0230 00200240 		.word	1073881088
 658              		.cfi_endproc
 659              	.LFE73:
 660              		.size	HAL_FLASH_OB_Lock, .-HAL_FLASH_OB_Lock
 661              		.align	1
 662              		.global	HAL_FLASH_OB_Launch
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu softvfp
 667              		.type	HAL_FLASH_OB_Launch, %function
 668              	HAL_FLASH_OB_Launch:
 669              	.LFB74:
 746:src/stm32f1xx_hal_flash.c ****   /* Initiates a system reset request to launch the option byte loading */
 670              		.loc 1 746 0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 0
 673              		@ frame_needed = 0, uses_anonymous_args = 0
 674              		@ link register save eliminated.
 748:src/stm32f1xx_hal_flash.c **** }
 675              		.loc 1 748 0
 676 0234 FFF7FEBF 		b	HAL_NVIC_SystemReset	@
 677              	.LVL32:
 678              		.cfi_endproc
 679              	.LFE74:
 680              		.size	HAL_FLASH_OB_Launch, .-HAL_FLASH_OB_Launch
 681              		.align	1
 682              		.global	HAL_FLASH_GetError
 683              		.syntax unified
 684              		.thumb
 685              		.thumb_func
 686              		.fpu softvfp
 687              		.type	HAL_FLASH_GetError, %function
 688              	HAL_FLASH_GetError:
 689              	.LFB75:
 775:src/stm32f1xx_hal_flash.c ****    return pFlash.ErrorCode;
 690              		.loc 1 775 0
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 0
 693              		@ frame_needed = 0, uses_anonymous_args = 0
 694              		@ link register save eliminated.
 776:src/stm32f1xx_hal_flash.c **** }
 695              		.loc 1 776 0
 696 0238 014B     		ldr	r3, .L67	@ tmp111,
 697 023a D869     		ldr	r0, [r3, #28]	@ <retval>, pFlash.ErrorCode
 777:src/stm32f1xx_hal_flash.c **** 
 698              		.loc 1 777 0
 699 023c 7047     		bx	lr	@
ARM GAS  /tmp/cc10d3Tm.s 			page 32


 700              	.L68:
 701 023e 00BF     		.align	2
 702              	.L67:
 703 0240 00000000 		.word	pFlash
 704              		.cfi_endproc
 705              	.LFE75:
 706              		.size	HAL_FLASH_GetError, .-HAL_FLASH_GetError
 707              		.align	1
 708              		.global	FLASH_WaitForLastOperation
 709              		.syntax unified
 710              		.thumb
 711              		.thumb_func
 712              		.fpu softvfp
 713              		.type	FLASH_WaitForLastOperation, %function
 714              	FLASH_WaitForLastOperation:
 715              	.LFB77:
 827:src/stm32f1xx_hal_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
 716              		.loc 1 827 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 0, uses_anonymous_args = 0
 720              	.LVL33:
 721 0244 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 722              	.LCFI2:
 723              		.cfi_def_cfa_offset 24
 724              		.cfi_offset 3, -24
 725              		.cfi_offset 4, -20
 726              		.cfi_offset 5, -16
 727              		.cfi_offset 6, -12
 728              		.cfi_offset 7, -8
 729              		.cfi_offset 14, -4
 827:src/stm32f1xx_hal_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
 730              		.loc 1 827 0
 731 0246 0646     		mov	r6, r0	@ Timeout, Timeout
 832:src/stm32f1xx_hal_flash.c ****      
 732              		.loc 1 832 0
 733 0248 FFF7FEFF 		bl	HAL_GetTick	@
 734              	.LVL34:
 834:src/stm32f1xx_hal_flash.c ****   { 
 735              		.loc 1 834 0
 736 024c 114C     		ldr	r4, .L84	@ tmp126,
 832:src/stm32f1xx_hal_flash.c ****      
 737              		.loc 1 832 0
 738 024e 0746     		mov	r7, r0	@ tickstart,
 739              	.LVL35:
 740 0250 2546     		mov	r5, r4	@ tmp139, tmp126
 741              	.LVL36:
 742              	.L71:
 834:src/stm32f1xx_hal_flash.c ****   { 
 743              		.loc 1 834 0
 744 0252 E368     		ldr	r3, [r4, #12]	@ _9, MEM[(struct FLASH_TypeDef *)1073881088B].SR
 745 0254 D807     		lsls	r0, r3, #31	@, _9,
 746 0256 12D4     		bmi	.L75	@,
 846:src/stm32f1xx_hal_flash.c ****   {
 747              		.loc 1 846 0
 748 0258 E368     		ldr	r3, [r4, #12]	@ _15, MEM[(struct FLASH_TypeDef *)1073881088B].SR
 749 025a 9906     		lsls	r1, r3, #26	@, _15,
ARM GAS  /tmp/cc10d3Tm.s 			page 33


 849:src/stm32f1xx_hal_flash.c ****   }
 750              		.loc 1 849 0
 751 025c 44BF     		itt	mi
 752 025e 2023     		movmi	r3, #32	@ tmp131,
 753 0260 E360     		strmi	r3, [r4, #12]	@ tmp131, MEM[(struct FLASH_TypeDef *)1073881088B].SR
 852:src/stm32f1xx_hal_flash.c ****      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 754              		.loc 1 852 0
 755 0262 EB68     		ldr	r3, [r5, #12]	@ _18, MEM[(struct FLASH_TypeDef *)1073881088B].SR
 756 0264 DA06     		lsls	r2, r3, #27	@, _18,
 757 0266 06D4     		bmi	.L77	@,
 853:src/stm32f1xx_hal_flash.c ****      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 758              		.loc 1 853 0 discriminator 1
 759 0268 EB69     		ldr	r3, [r5, #28]	@ _20, MEM[(struct FLASH_TypeDef *)1073881088B].OBR
 852:src/stm32f1xx_hal_flash.c ****      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 760              		.loc 1 852 0 discriminator 1
 761 026a DB07     		lsls	r3, r3, #31	@, _20,
 762 026c 03D4     		bmi	.L77	@,
 854:src/stm32f1xx_hal_flash.c ****   {
 763              		.loc 1 854 0
 764 026e E868     		ldr	r0, [r5, #12]	@ _22, MEM[(struct FLASH_TypeDef *)1073881088B].SR
 853:src/stm32f1xx_hal_flash.c ****      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 765              		.loc 1 853 0
 766 0270 10F00400 		ands	r0, r0, #4	@ tmp137, _22,
 767 0274 02D0     		beq	.L73	@,
 768              	.L77:
 857:src/stm32f1xx_hal_flash.c ****     return HAL_ERROR;
 769              		.loc 1 857 0
 770 0276 FFF7C3FE 		bl	FLASH_SetErrorCode	@
 771              	.LVL37:
 858:src/stm32f1xx_hal_flash.c ****   }
 772              		.loc 1 858 0
 773 027a 0120     		movs	r0, #1	@ <retval>,
 774              	.L73:
 863:src/stm32f1xx_hal_flash.c **** 
 775              		.loc 1 863 0
 776 027c F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 777              	.LVL38:
 778              	.L75:
 836:src/stm32f1xx_hal_flash.c ****     {
 779              		.loc 1 836 0
 780 027e 731C     		adds	r3, r6, #1	@, Timeout,
 781 0280 E7D0     		beq	.L71	@,
 838:src/stm32f1xx_hal_flash.c ****       {
 782              		.loc 1 838 0
 783 0282 0EB9     		cbnz	r6, .L72	@ Timeout,
 784              	.L74:
 840:src/stm32f1xx_hal_flash.c ****       }
 785              		.loc 1 840 0
 786 0284 0320     		movs	r0, #3	@ <retval>,
 787 0286 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 788              	.LVL39:
 789              	.L72:
 838:src/stm32f1xx_hal_flash.c ****       {
 790              		.loc 1 838 0 discriminator 1
 791 0288 FFF7FEFF 		bl	HAL_GetTick	@
 792              	.LVL40:
 793 028c C01B     		subs	r0, r0, r7	@ tmp125,, tickstart
ARM GAS  /tmp/cc10d3Tm.s 			page 34


 794 028e 8642     		cmp	r6, r0	@ Timeout, tmp125
 795 0290 DFD2     		bcs	.L71	@,
 796 0292 F7E7     		b	.L74	@
 797              	.L85:
 798              		.align	2
 799              	.L84:
 800 0294 00200240 		.word	1073881088
 801              		.cfi_endproc
 802              	.LFE77:
 803              		.size	FLASH_WaitForLastOperation, .-FLASH_WaitForLastOperation
 804              		.global	__aeabi_llsr
 805              		.align	1
 806              		.global	HAL_FLASH_Program
 807              		.syntax unified
 808              		.thumb
 809              		.thumb_func
 810              		.fpu softvfp
 811              		.type	HAL_FLASH_Program, %function
 812              	HAL_FLASH_Program:
 813              	.LFB65:
 169:src/stm32f1xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 814              		.loc 1 169 0
 815              		.cfi_startproc
 816              		@ args = 0, pretend = 0, frame = 0
 817              		@ frame_needed = 0, uses_anonymous_args = 0
 818              	.LVL41:
 819 0298 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 820              	.LCFI3:
 821              		.cfi_def_cfa_offset 40
 822              		.cfi_offset 3, -40
 823              		.cfi_offset 4, -36
 824              		.cfi_offset 5, -32
 825              		.cfi_offset 6, -28
 826              		.cfi_offset 7, -24
 827              		.cfi_offset 8, -20
 828              		.cfi_offset 9, -16
 829              		.cfi_offset 10, -12
 830              		.cfi_offset 11, -8
 831              		.cfi_offset 14, -4
 175:src/stm32f1xx_hal_flash.c **** 
 832              		.loc 1 175 0
 833 029c 1F4C     		ldr	r4, .L95	@ tmp128,
 169:src/stm32f1xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 834              		.loc 1 169 0
 835 029e 9946     		mov	r9, r3	@ Data, Data
 175:src/stm32f1xx_hal_flash.c **** 
 836              		.loc 1 175 0
 837 02a0 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2	@ pFlash.Lock, pFlash.Lock
 169:src/stm32f1xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 838              		.loc 1 169 0
 839 02a2 0546     		mov	r5, r0	@ TypeProgram, TypeProgram
 175:src/stm32f1xx_hal_flash.c **** 
 840              		.loc 1 175 0
 841 02a4 012B     		cmp	r3, #1	@ pFlash.Lock,
 169:src/stm32f1xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 842              		.loc 1 169 0
 843 02a6 0F46     		mov	r7, r1	@ Address, Address
ARM GAS  /tmp/cc10d3Tm.s 			page 35


 844 02a8 9046     		mov	r8, r2	@ Data, Data
 175:src/stm32f1xx_hal_flash.c **** 
 845              		.loc 1 175 0
 846 02aa 33D0     		beq	.L91	@,
 175:src/stm32f1xx_hal_flash.c **** 
 847              		.loc 1 175 0 is_stmt 0 discriminator 2
 848 02ac 0123     		movs	r3, #1	@ tmp131,
 186:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 849              		.loc 1 186 0 is_stmt 1 discriminator 2
 850 02ae 4CF25030 		movw	r0, #50000	@,
 851              	.LVL42:
 175:src/stm32f1xx_hal_flash.c **** 
 852              		.loc 1 175 0 discriminator 2
 853 02b2 2376     		strb	r3, [r4, #24]	@ tmp131, pFlash.Lock
 186:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 854              		.loc 1 186 0 discriminator 2
 855 02b4 FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 856              	.LVL43:
 196:src/stm32f1xx_hal_flash.c ****   {
 857              		.loc 1 196 0 discriminator 2
 858 02b8 40BB     		cbnz	r0, .L88	@ <retval>,
 198:src/stm32f1xx_hal_flash.c ****     {
 859              		.loc 1 198 0
 860 02ba 012D     		cmp	r5, #1	@ TypeProgram,
 861 02bc 03D0     		beq	.L89	@,
 211:src/stm32f1xx_hal_flash.c ****     }
 862              		.loc 1 211 0
 863 02be 022D     		cmp	r5, #2	@ TypeProgram,
 864 02c0 0CBF     		ite	eq
 865 02c2 0225     		moveq	r5, #2	@ nbiterations,
 866              	.LVL44:
 867 02c4 0425     		movne	r5, #4	@ nbiterations,
 868              	.L89:
 869              	.LVL45:
 870 02c6 0026     		movs	r6, #0	@ ivtmp.42,
 871              	.LBB16:
 872              	.LBB17:
 800:src/stm32f1xx_hal_flash.c ****   
 873              		.loc 1 800 0
 874 02c8 B246     		mov	r10, r6	@ tmp140, ivtmp.42
 807:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 875              		.loc 1 807 0
 876 02ca DFF854B0 		ldr	fp, .L95+4	@ tmp141,
 877              	.LVL46:
 878              	.L90:
 879              	.LBE17:
 880              	.LBE16:
 216:src/stm32f1xx_hal_flash.c **** 
 881              		.loc 1 216 0
 882 02ce 3201     		lsls	r2, r6, #4	@, ivtmp.42,
 883 02d0 4046     		mov	r0, r8	@, Data
 884 02d2 4946     		mov	r1, r9	@, Data
 885 02d4 FFF7FEFF 		bl	__aeabi_llsr	@
 886              	.LVL47:
 887              	.LBB20:
 888              	.LBB18:
 800:src/stm32f1xx_hal_flash.c ****   
ARM GAS  /tmp/cc10d3Tm.s 			page 36


 889              		.loc 1 800 0
 890 02d8 C4F81CA0 		str	r10, [r4, #28]	@ tmp140, pFlash.ErrorCode
 807:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 891              		.loc 1 807 0
 892 02dc DBF81030 		ldr	r3, [fp, #16]	@ _31, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 893              	.LBE18:
 894              	.LBE20:
 216:src/stm32f1xx_hal_flash.c **** 
 895              		.loc 1 216 0
 896 02e0 80B2     		uxth	r0, r0	@ _22,
 897              	.LVL48:
 898              	.LBB21:
 899              	.LBB19:
 807:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 900              		.loc 1 807 0
 901 02e2 43F00103 		orr	r3, r3, #1	@ _32, _31,
 902 02e6 CBF81030 		str	r3, [fp, #16]	@ _32, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 818:src/stm32f1xx_hal_flash.c **** }
 903              		.loc 1 818 0
 904 02ea 27F81600 		strh	r0, [r7, r6, lsl #1]	@ movhi	@ _22, *_1
 905              	.LVL49:
 906              	.LBE19:
 907              	.LBE21:
 223:src/stm32f1xx_hal_flash.c ****     
 908              		.loc 1 223 0
 909 02ee 4CF25030 		movw	r0, #50000	@,
 910 02f2 FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 911              	.LVL50:
 226:src/stm32f1xx_hal_flash.c **** #if defined(FLASH_BANK2_END)
 912              		.loc 1 226 0
 913 02f6 DBF81030 		ldr	r3, [fp, #16]	@ _26, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 914 02fa 23F00103 		bic	r3, r3, #1	@ _27, _26,
 915 02fe CBF81030 		str	r3, [fp, #16]	@ _27, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 239:src/stm32f1xx_hal_flash.c ****       {
 916              		.loc 1 239 0
 917 0302 18B9     		cbnz	r0, .L88	@ <retval>,
 918              	.LVL51:
 919 0304 0136     		adds	r6, r6, #1	@ ivtmp.42, ivtmp.42,
 920              	.LVL52:
 214:src/stm32f1xx_hal_flash.c ****     {
 921              		.loc 1 214 0 discriminator 2
 922 0306 F3B2     		uxtb	r3, r6	@ ivtmp.42, ivtmp.42
 923 0308 9D42     		cmp	r5, r3	@ nbiterations, ivtmp.42
 924 030a E0D8     		bhi	.L90	@,
 925              	.LVL53:
 926              	.L88:
 247:src/stm32f1xx_hal_flash.c **** 
 927              		.loc 1 247 0
 928 030c 0023     		movs	r3, #0	@ tmp150,
 929 030e 2376     		strb	r3, [r4, #24]	@ tmp150, pFlash.Lock
 249:src/stm32f1xx_hal_flash.c **** }
 930              		.loc 1 249 0
 931 0310 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 932              	.LVL54:
 933              	.L91:
 175:src/stm32f1xx_hal_flash.c **** 
 934              		.loc 1 175 0
ARM GAS  /tmp/cc10d3Tm.s 			page 37


 935 0314 0220     		movs	r0, #2	@ <retval>,
 936              	.LVL55:
 250:src/stm32f1xx_hal_flash.c **** 
 937              		.loc 1 250 0
 938 0316 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 939              	.LVL56:
 940              	.L96:
 941 031a 00BF     		.align	2
 942              	.L95:
 943 031c 00000000 		.word	pFlash
 944 0320 00200240 		.word	1073881088
 945              		.cfi_endproc
 946              	.LFE65:
 947              		.size	HAL_FLASH_Program, .-HAL_FLASH_Program
 948              		.comm	pFlash,32,8
 949              	.Letext0:
 950              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 951              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 952              		.file 4 "../cmsiscore/inc/core_cm3.h"
 953              		.file 5 "../cmsisstm32f1xx/inc/system_stm32f1xx.h"
 954              		.file 6 "../cmsisstm32f1xx/inc/stm32f103x6.h"
 955              		.file 7 "../cmsisstm32f1xx/inc/stm32f1xx.h"
 956              		.file 8 "./inc/stm32f1xx_hal_def.h"
 957              		.file 9 "./inc/stm32f1xx_hal_flash.h"
 958              		.file 10 "./inc/stm32f1xx_hal.h"
 959              		.file 11 "./inc/stm32f1xx_hal_cortex.h"
 960              		.section	.debug_info,"",%progbits
 961              	.Ldebug_info0:
 962 0000 3D070000 		.4byte	0x73d
 963 0004 0200     		.2byte	0x2
 964 0006 00000000 		.4byte	.Ldebug_abbrev0
 965 000a 04       		.byte	0x4
 966 000b 01       		.uleb128 0x1
 967 000c 4C010000 		.4byte	.LASF83
 968 0010 0C       		.byte	0xc
 969 0011 CB000000 		.4byte	.LASF84
 970 0015 BC020000 		.4byte	.LASF85
 971 0019 00000000 		.4byte	.Ltext0
 972 001d 24030000 		.4byte	.Letext0
 973 0021 00000000 		.4byte	.Ldebug_line0
 974 0025 02       		.uleb128 0x2
 975 0026 08       		.byte	0x8
 976 0027 07       		.byte	0x7
 977 0028 08030000 		.4byte	.LASF0
 978 002c 02       		.uleb128 0x2
 979 002d 01       		.byte	0x1
 980 002e 06       		.byte	0x6
 981 002f F6020000 		.4byte	.LASF1
 982 0033 03       		.uleb128 0x3
 983 0034 35020000 		.4byte	.LASF4
 984 0038 02       		.byte	0x2
 985 0039 1D       		.byte	0x1d
 986 003a 3E000000 		.4byte	0x3e
 987 003e 02       		.uleb128 0x2
 988 003f 01       		.byte	0x1
 989 0040 08       		.byte	0x8
 990 0041 AE020000 		.4byte	.LASF2
ARM GAS  /tmp/cc10d3Tm.s 			page 38


 991 0045 02       		.uleb128 0x2
 992 0046 02       		.byte	0x2
 993 0047 05       		.byte	0x5
 994 0048 D7010000 		.4byte	.LASF3
 995 004c 03       		.uleb128 0x3
 996 004d 29010000 		.4byte	.LASF5
 997 0051 02       		.byte	0x2
 998 0052 2B       		.byte	0x2b
 999 0053 57000000 		.4byte	0x57
 1000 0057 02       		.uleb128 0x2
 1001 0058 02       		.byte	0x2
 1002 0059 07       		.byte	0x7
 1003 005a C2030000 		.4byte	.LASF6
 1004 005e 03       		.uleb128 0x3
 1005 005f 7C040000 		.4byte	.LASF7
 1006 0063 02       		.byte	0x2
 1007 0064 3F       		.byte	0x3f
 1008 0065 69000000 		.4byte	0x69
 1009 0069 02       		.uleb128 0x2
 1010 006a 04       		.byte	0x4
 1011 006b 05       		.byte	0x5
 1012 006c 0A020000 		.4byte	.LASF8
 1013 0070 03       		.uleb128 0x3
 1014 0071 71040000 		.4byte	.LASF9
 1015 0075 02       		.byte	0x2
 1016 0076 41       		.byte	0x41
 1017 0077 7B000000 		.4byte	0x7b
 1018 007b 02       		.uleb128 0x2
 1019 007c 04       		.byte	0x4
 1020 007d 07       		.byte	0x7
 1021 007e 4A040000 		.4byte	.LASF10
 1022 0082 02       		.uleb128 0x2
 1023 0083 08       		.byte	0x8
 1024 0084 05       		.byte	0x5
 1025 0085 FC010000 		.4byte	.LASF11
 1026 0089 03       		.uleb128 0x3
 1027 008a 14040000 		.4byte	.LASF12
 1028 008e 02       		.byte	0x2
 1029 008f 5B       		.byte	0x5b
 1030 0090 25000000 		.4byte	0x25
 1031 0094 04       		.uleb128 0x4
 1032 0095 04       		.byte	0x4
 1033 0096 05       		.byte	0x5
 1034 0097 696E7400 		.ascii	"int\000"
 1035 009b 02       		.uleb128 0x2
 1036 009c 04       		.byte	0x4
 1037 009d 07       		.byte	0x7
 1038 009e 33030000 		.4byte	.LASF13
 1039 00a2 03       		.uleb128 0x3
 1040 00a3 A8010000 		.4byte	.LASF14
 1041 00a7 03       		.byte	0x3
 1042 00a8 18       		.byte	0x18
 1043 00a9 33000000 		.4byte	0x33
 1044 00ad 05       		.uleb128 0x5
 1045 00ae A2000000 		.4byte	0xa2
 1046 00b2 03       		.uleb128 0x3
 1047 00b3 40030000 		.4byte	.LASF15
ARM GAS  /tmp/cc10d3Tm.s 			page 39


 1048 00b7 03       		.byte	0x3
 1049 00b8 24       		.byte	0x24
 1050 00b9 4C000000 		.4byte	0x4c
 1051 00bd 03       		.uleb128 0x3
 1052 00be EC030000 		.4byte	.LASF16
 1053 00c2 03       		.byte	0x3
 1054 00c3 2C       		.byte	0x2c
 1055 00c4 5E000000 		.4byte	0x5e
 1056 00c8 06       		.uleb128 0x6
 1057 00c9 BD000000 		.4byte	0xbd
 1058 00cd 03       		.uleb128 0x3
 1059 00ce 1F030000 		.4byte	.LASF17
 1060 00d2 03       		.byte	0x3
 1061 00d3 30       		.byte	0x30
 1062 00d4 70000000 		.4byte	0x70
 1063 00d8 06       		.uleb128 0x6
 1064 00d9 CD000000 		.4byte	0xcd
 1065 00dd 03       		.uleb128 0x3
 1066 00de 44020000 		.4byte	.LASF18
 1067 00e2 03       		.byte	0x3
 1068 00e3 3C       		.byte	0x3c
 1069 00e4 89000000 		.4byte	0x89
 1070 00e8 06       		.uleb128 0x6
 1071 00e9 DD000000 		.4byte	0xdd
 1072 00ed 02       		.uleb128 0x2
 1073 00ee 04       		.byte	0x4
 1074 00ef 07       		.byte	0x7
 1075 00f0 AE000000 		.4byte	.LASF19
 1076 00f4 07       		.uleb128 0x7
 1077 00f5 20050000 		.4byte	.LASF20
 1078 00f9 04       		.byte	0x4
 1079 00fa 4807     		.2byte	0x748
 1080 00fc C8000000 		.4byte	0xc8
 1081 0100 01       		.byte	0x1
 1082 0101 01       		.byte	0x1
 1083 0102 08       		.uleb128 0x8
 1084 0103 51000000 		.4byte	.LASF21
 1085 0107 05       		.byte	0x5
 1086 0108 33       		.byte	0x33
 1087 0109 CD000000 		.4byte	0xcd
 1088 010d 01       		.byte	0x1
 1089 010e 01       		.byte	0x1
 1090 010f 09       		.uleb128 0x9
 1091 0110 AD000000 		.4byte	0xad
 1092 0114 1F010000 		.4byte	0x11f
 1093 0118 0A       		.uleb128 0xa
 1094 0119 ED000000 		.4byte	0xed
 1095 011d 0F       		.byte	0xf
 1096 011e 00       		.byte	0
 1097 011f 05       		.uleb128 0x5
 1098 0120 0F010000 		.4byte	0x10f
 1099 0124 08       		.uleb128 0x8
 1100 0125 3C040000 		.4byte	.LASF22
 1101 0129 05       		.byte	0x5
 1102 012a 34       		.byte	0x34
 1103 012b 1F010000 		.4byte	0x11f
 1104 012f 01       		.byte	0x1
ARM GAS  /tmp/cc10d3Tm.s 			page 40


 1105 0130 01       		.byte	0x1
 1106 0131 09       		.uleb128 0x9
 1107 0132 AD000000 		.4byte	0xad
 1108 0136 41010000 		.4byte	0x141
 1109 013a 0A       		.uleb128 0xa
 1110 013b ED000000 		.4byte	0xed
 1111 013f 07       		.byte	0x7
 1112 0140 00       		.byte	0
 1113 0141 05       		.uleb128 0x5
 1114 0142 31010000 		.4byte	0x131
 1115 0146 08       		.uleb128 0x8
 1116 0147 E8020000 		.4byte	.LASF23
 1117 014b 05       		.byte	0x5
 1118 014c 35       		.byte	0x35
 1119 014d 41010000 		.4byte	0x141
 1120 0151 01       		.byte	0x1
 1121 0152 01       		.byte	0x1
 1122 0153 0B       		.uleb128 0xb
 1123 0154 24       		.byte	0x24
 1124 0155 06       		.byte	0x6
 1125 0156 4001     		.2byte	0x140
 1126 0158 E1010000 		.4byte	0x1e1
 1127 015c 0C       		.uleb128 0xc
 1128 015d 41435200 		.ascii	"ACR\000"
 1129 0161 06       		.byte	0x6
 1130 0162 4201     		.2byte	0x142
 1131 0164 D8000000 		.4byte	0xd8
 1132 0168 02       		.byte	0x2
 1133 0169 23       		.byte	0x23
 1134 016a 00       		.uleb128 0
 1135 016b 0D       		.uleb128 0xd
 1136 016c 8C020000 		.4byte	.LASF24
 1137 0170 06       		.byte	0x6
 1138 0171 4301     		.2byte	0x143
 1139 0173 D8000000 		.4byte	0xd8
 1140 0177 02       		.byte	0x2
 1141 0178 23       		.byte	0x23
 1142 0179 04       		.uleb128 0x4
 1143 017a 0D       		.uleb128 0xd
 1144 017b F4010000 		.4byte	.LASF25
 1145 017f 06       		.byte	0x6
 1146 0180 4401     		.2byte	0x144
 1147 0182 D8000000 		.4byte	0xd8
 1148 0186 02       		.byte	0x2
 1149 0187 23       		.byte	0x23
 1150 0188 08       		.uleb128 0x8
 1151 0189 0C       		.uleb128 0xc
 1152 018a 535200   		.ascii	"SR\000"
 1153 018d 06       		.byte	0x6
 1154 018e 4501     		.2byte	0x145
 1155 0190 D8000000 		.4byte	0xd8
 1156 0194 02       		.byte	0x2
 1157 0195 23       		.byte	0x23
 1158 0196 0C       		.uleb128 0xc
 1159 0197 0C       		.uleb128 0xc
 1160 0198 435200   		.ascii	"CR\000"
 1161 019b 06       		.byte	0x6
ARM GAS  /tmp/cc10d3Tm.s 			page 41


 1162 019c 4601     		.2byte	0x146
 1163 019e D8000000 		.4byte	0xd8
 1164 01a2 02       		.byte	0x2
 1165 01a3 23       		.byte	0x23
 1166 01a4 10       		.uleb128 0x10
 1167 01a5 0C       		.uleb128 0xc
 1168 01a6 415200   		.ascii	"AR\000"
 1169 01a9 06       		.byte	0x6
 1170 01aa 4701     		.2byte	0x147
 1171 01ac D8000000 		.4byte	0xd8
 1172 01b0 02       		.byte	0x2
 1173 01b1 23       		.byte	0x23
 1174 01b2 14       		.uleb128 0x14
 1175 01b3 0D       		.uleb128 0xd
 1176 01b4 EE040000 		.4byte	.LASF26
 1177 01b8 06       		.byte	0x6
 1178 01b9 4801     		.2byte	0x148
 1179 01bb D8000000 		.4byte	0xd8
 1180 01bf 02       		.byte	0x2
 1181 01c0 23       		.byte	0x23
 1182 01c1 18       		.uleb128 0x18
 1183 01c2 0C       		.uleb128 0xc
 1184 01c3 4F425200 		.ascii	"OBR\000"
 1185 01c7 06       		.byte	0x6
 1186 01c8 4901     		.2byte	0x149
 1187 01ca D8000000 		.4byte	0xd8
 1188 01ce 02       		.byte	0x2
 1189 01cf 23       		.byte	0x23
 1190 01d0 1C       		.uleb128 0x1c
 1191 01d1 0D       		.uleb128 0xd
 1192 01d2 3F020000 		.4byte	.LASF27
 1193 01d6 06       		.byte	0x6
 1194 01d7 4A01     		.2byte	0x14a
 1195 01d9 D8000000 		.4byte	0xd8
 1196 01dd 02       		.byte	0x2
 1197 01de 23       		.byte	0x23
 1198 01df 20       		.uleb128 0x20
 1199 01e0 00       		.byte	0
 1200 01e1 0E       		.uleb128 0xe
 1201 01e2 F7040000 		.4byte	.LASF28
 1202 01e6 06       		.byte	0x6
 1203 01e7 4B01     		.2byte	0x14b
 1204 01e9 53010000 		.4byte	0x153
 1205 01ed 0F       		.uleb128 0xf
 1206 01ee 01       		.byte	0x1
 1207 01ef 3E000000 		.4byte	0x3e
 1208 01f3 07       		.byte	0x7
 1209 01f4 98       		.byte	0x98
 1210 01f5 06020000 		.4byte	0x206
 1211 01f9 10       		.uleb128 0x10
 1212 01fa 86040000 		.4byte	.LASF29
 1213 01fe 00       		.byte	0
 1214 01ff 11       		.uleb128 0x11
 1215 0200 53455400 		.ascii	"SET\000"
 1216 0204 01       		.byte	0x1
 1217 0205 00       		.byte	0
 1218 0206 02       		.uleb128 0x2
ARM GAS  /tmp/cc10d3Tm.s 			page 42


 1219 0207 08       		.byte	0x8
 1220 0208 04       		.byte	0x4
 1221 0209 91020000 		.4byte	.LASF30
 1222 020d 0F       		.uleb128 0xf
 1223 020e 01       		.byte	0x1
 1224 020f 3E000000 		.4byte	0x3e
 1225 0213 08       		.byte	0x8
 1226 0214 2A       		.byte	0x2a
 1227 0215 32020000 		.4byte	0x232
 1228 0219 10       		.uleb128 0x10
 1229 021a A1010000 		.4byte	.LASF31
 1230 021e 00       		.byte	0
 1231 021f 10       		.uleb128 0x10
 1232 0220 17000000 		.4byte	.LASF32
 1233 0224 01       		.byte	0x1
 1234 0225 10       		.uleb128 0x10
 1235 0226 E5000000 		.4byte	.LASF33
 1236 022a 02       		.byte	0x2
 1237 022b 10       		.uleb128 0x10
 1238 022c 45000000 		.4byte	.LASF34
 1239 0230 03       		.byte	0x3
 1240 0231 00       		.byte	0
 1241 0232 03       		.uleb128 0x3
 1242 0233 52020000 		.4byte	.LASF35
 1243 0237 08       		.byte	0x8
 1244 0238 2F       		.byte	0x2f
 1245 0239 0D020000 		.4byte	0x20d
 1246 023d 0F       		.uleb128 0xf
 1247 023e 01       		.byte	0x1
 1248 023f 3E000000 		.4byte	0x3e
 1249 0243 08       		.byte	0x8
 1250 0244 35       		.byte	0x35
 1251 0245 56020000 		.4byte	0x256
 1252 0249 10       		.uleb128 0x10
 1253 024a 21000000 		.4byte	.LASF36
 1254 024e 00       		.byte	0
 1255 024f 10       		.uleb128 0x10
 1256 0250 1F040000 		.4byte	.LASF37
 1257 0254 01       		.byte	0x1
 1258 0255 00       		.byte	0
 1259 0256 03       		.uleb128 0x3
 1260 0257 52050000 		.4byte	.LASF38
 1261 025b 08       		.byte	0x8
 1262 025c 38       		.byte	0x38
 1263 025d 3D020000 		.4byte	0x23d
 1264 0261 0F       		.uleb128 0xf
 1265 0262 01       		.byte	0x1
 1266 0263 3E000000 		.4byte	0x3e
 1267 0267 09       		.byte	0x9
 1268 0268 4C       		.byte	0x4c
 1269 0269 92020000 		.4byte	0x292
 1270 026d 10       		.uleb128 0x10
 1271 026e C8040000 		.4byte	.LASF39
 1272 0272 00       		.byte	0
 1273 0273 10       		.uleb128 0x10
 1274 0274 5C040000 		.4byte	.LASF40
 1275 0278 01       		.byte	0x1
ARM GAS  /tmp/cc10d3Tm.s 			page 43


 1276 0279 10       		.uleb128 0x10
 1277 027a 91030000 		.4byte	.LASF41
 1278 027e 02       		.byte	0x2
 1279 027f 10       		.uleb128 0x10
 1280 0280 BC010000 		.4byte	.LASF42
 1281 0284 03       		.byte	0x3
 1282 0285 10       		.uleb128 0x10
 1283 0286 00000000 		.4byte	.LASF43
 1284 028a 04       		.byte	0x4
 1285 028b 10       		.uleb128 0x10
 1286 028c 18020000 		.4byte	.LASF44
 1287 0290 05       		.byte	0x5
 1288 0291 00       		.byte	0
 1289 0292 03       		.uleb128 0x3
 1290 0293 2E000000 		.4byte	.LASF45
 1291 0297 09       		.byte	0x9
 1292 0298 53       		.byte	0x53
 1293 0299 61020000 		.4byte	0x261
 1294 029d 06       		.uleb128 0x6
 1295 029e 92020000 		.4byte	0x292
 1296 02a2 12       		.uleb128 0x12
 1297 02a3 20       		.byte	0x20
 1298 02a4 09       		.byte	0x9
 1299 02a5 58       		.byte	0x58
 1300 02a6 FF020000 		.4byte	0x2ff
 1301 02aa 13       		.uleb128 0x13
 1302 02ab 9D020000 		.4byte	.LASF46
 1303 02af 09       		.byte	0x9
 1304 02b0 5A       		.byte	0x5a
 1305 02b1 9D020000 		.4byte	0x29d
 1306 02b5 02       		.byte	0x2
 1307 02b6 23       		.byte	0x23
 1308 02b7 00       		.uleb128 0
 1309 02b8 13       		.uleb128 0x13
 1310 02b9 2D050000 		.4byte	.LASF47
 1311 02bd 09       		.byte	0x9
 1312 02be 5C       		.byte	0x5c
 1313 02bf D8000000 		.4byte	0xd8
 1314 02c3 02       		.byte	0x2
 1315 02c4 23       		.byte	0x23
 1316 02c5 04       		.uleb128 0x4
 1317 02c6 13       		.uleb128 0x13
 1318 02c7 21010000 		.4byte	.LASF48
 1319 02cb 09       		.byte	0x9
 1320 02cc 5E       		.byte	0x5e
 1321 02cd D8000000 		.4byte	0xd8
 1322 02d1 02       		.byte	0x2
 1323 02d2 23       		.byte	0x23
 1324 02d3 08       		.uleb128 0x8
 1325 02d4 13       		.uleb128 0x13
 1326 02d5 4D020000 		.4byte	.LASF49
 1327 02d9 09       		.byte	0x9
 1328 02da 60       		.byte	0x60
 1329 02db E8000000 		.4byte	0xe8
 1330 02df 02       		.byte	0x2
 1331 02e0 23       		.byte	0x23
 1332 02e1 10       		.uleb128 0x10
ARM GAS  /tmp/cc10d3Tm.s 			page 44


 1333 02e2 13       		.uleb128 0x13
 1334 02e3 13020000 		.4byte	.LASF50
 1335 02e7 09       		.byte	0x9
 1336 02e8 62       		.byte	0x62
 1337 02e9 56020000 		.4byte	0x256
 1338 02ed 02       		.byte	0x2
 1339 02ee 23       		.byte	0x23
 1340 02ef 18       		.uleb128 0x18
 1341 02f0 13       		.uleb128 0x13
 1342 02f1 62050000 		.4byte	.LASF51
 1343 02f5 09       		.byte	0x9
 1344 02f6 64       		.byte	0x64
 1345 02f7 D8000000 		.4byte	0xd8
 1346 02fb 02       		.byte	0x2
 1347 02fc 23       		.byte	0x23
 1348 02fd 1C       		.uleb128 0x1c
 1349 02fe 00       		.byte	0
 1350 02ff 03       		.uleb128 0x3
 1351 0300 77020000 		.4byte	.LASF52
 1352 0304 09       		.byte	0x9
 1353 0305 66       		.byte	0x66
 1354 0306 A2020000 		.4byte	0x2a2
 1355 030a 0F       		.uleb128 0xf
 1356 030b 01       		.byte	0x1
 1357 030c 3E000000 		.4byte	0x3e
 1358 0310 0A       		.byte	0xa
 1359 0311 33       		.byte	0x33
 1360 0312 2F030000 		.4byte	0x32f
 1361 0316 10       		.uleb128 0x10
 1362 0317 64020000 		.4byte	.LASF53
 1363 031b 64       		.byte	0x64
 1364 031c 10       		.uleb128 0x10
 1365 031d 00040000 		.4byte	.LASF54
 1366 0321 0A       		.byte	0xa
 1367 0322 10       		.uleb128 0x10
 1368 0323 7E030000 		.4byte	.LASF55
 1369 0327 01       		.byte	0x1
 1370 0328 10       		.uleb128 0x10
 1371 0329 D8040000 		.4byte	.LASF56
 1372 032d 01       		.byte	0x1
 1373 032e 00       		.byte	0
 1374 032f 03       		.uleb128 0x3
 1375 0330 6A030000 		.4byte	.LASF57
 1376 0334 0A       		.byte	0xa
 1377 0335 38       		.byte	0x38
 1378 0336 0A030000 		.4byte	0x30a
 1379 033a 08       		.uleb128 0x8
 1380 033b 41010000 		.4byte	.LASF58
 1381 033f 0A       		.byte	0xa
 1382 0340 3D       		.byte	0x3d
 1383 0341 CD000000 		.4byte	0xcd
 1384 0345 01       		.byte	0x1
 1385 0346 01       		.byte	0x1
 1386 0347 08       		.uleb128 0x8
 1387 0348 28030000 		.4byte	.LASF59
 1388 034c 0A       		.byte	0xa
 1389 034d 3E       		.byte	0x3e
ARM GAS  /tmp/cc10d3Tm.s 			page 45


 1390 034e 2F030000 		.4byte	0x32f
 1391 0352 01       		.byte	0x1
 1392 0353 01       		.byte	0x1
 1393 0354 14       		.uleb128 0x14
 1394 0355 7C050000 		.4byte	.LASF60
 1395 0359 01       		.byte	0x1
 1396 035a 79       		.byte	0x79
 1397 035b FF020000 		.4byte	0x2ff
 1398 035f 01       		.byte	0x1
 1399 0360 05       		.byte	0x5
 1400 0361 03       		.byte	0x3
 1401 0362 00000000 		.4byte	pFlash
 1402 0366 15       		.uleb128 0x15
 1403 0367 61000000 		.4byte	.LASF86
 1404 036b 01       		.byte	0x1
 1405 036c 9203     		.2byte	0x392
 1406 036e 01       		.byte	0x1
 1407 036f 00000000 		.4byte	.LFB78
 1408 0373 50000000 		.4byte	.LFE78
 1409 0377 02       		.byte	0x2
 1410 0378 7D       		.byte	0x7d
 1411 0379 00       		.sleb128 0
 1412 037a 01       		.byte	0x1
 1413 037b 90030000 		.4byte	0x390
 1414 037f 16       		.uleb128 0x16
 1415 0380 02030000 		.4byte	.LASF61
 1416 0384 01       		.byte	0x1
 1417 0385 9403     		.2byte	0x394
 1418 0387 CD000000 		.4byte	0xcd
 1419 038b 00000000 		.4byte	.LLST0
 1420 038f 00       		.byte	0
 1421 0390 17       		.uleb128 0x17
 1422 0391 01       		.byte	0x1
 1423 0392 05050000 		.4byte	.LASF67
 1424 0396 01       		.byte	0x1
 1425 0397 3A03     		.2byte	0x33a
 1426 0399 01       		.byte	0x1
 1427 039a 32020000 		.4byte	0x232
 1428 039e 44020000 		.4byte	.LFB77
 1429 03a2 98020000 		.4byte	.LFE77
 1430 03a6 2B000000 		.4byte	.LLST11
 1431 03aa 01       		.byte	0x1
 1432 03ab EB030000 		.4byte	0x3eb
 1433 03af 18       		.uleb128 0x18
 1434 03b0 D5030000 		.4byte	.LASF75
 1435 03b4 01       		.byte	0x1
 1436 03b5 3A03     		.2byte	0x33a
 1437 03b7 CD000000 		.4byte	0xcd
 1438 03bb 4B000000 		.4byte	.LLST12
 1439 03bf 16       		.uleb128 0x16
 1440 03c0 BE040000 		.4byte	.LASF62
 1441 03c4 01       		.byte	0x1
 1442 03c5 4003     		.2byte	0x340
 1443 03c7 CD000000 		.4byte	0xcd
 1444 03cb 69000000 		.4byte	.LLST13
 1445 03cf 19       		.uleb128 0x19
 1446 03d0 4C020000 		.4byte	.LVL34
ARM GAS  /tmp/cc10d3Tm.s 			page 46


 1447 03d4 17070000 		.4byte	0x717
 1448 03d8 19       		.uleb128 0x19
 1449 03d9 7A020000 		.4byte	.LVL37
 1450 03dd 66030000 		.4byte	0x366
 1451 03e1 19       		.uleb128 0x19
 1452 03e2 8C020000 		.4byte	.LVL40
 1453 03e6 17070000 		.4byte	0x717
 1454 03ea 00       		.byte	0
 1455 03eb 1A       		.uleb128 0x1a
 1456 03ec 3B050000 		.4byte	.LASF87
 1457 03f0 01       		.byte	0x1
 1458 03f1 1D03     		.2byte	0x31d
 1459 03f3 01       		.byte	0x1
 1460 03f4 01       		.byte	0x1
 1461 03f5 12040000 		.4byte	0x412
 1462 03f9 1B       		.uleb128 0x1b
 1463 03fa 21010000 		.4byte	.LASF48
 1464 03fe 01       		.byte	0x1
 1465 03ff 1D03     		.2byte	0x31d
 1466 0401 CD000000 		.4byte	0xcd
 1467 0405 1B       		.uleb128 0x1b
 1468 0406 4D020000 		.4byte	.LASF49
 1469 040a 01       		.byte	0x1
 1470 040b 1D03     		.2byte	0x31d
 1471 040d B2000000 		.4byte	0xb2
 1472 0411 00       		.byte	0
 1473 0412 1C       		.uleb128 0x1c
 1474 0413 01       		.byte	0x1
 1475 0414 E1010000 		.4byte	.LASF63
 1476 0418 01       		.byte	0x1
 1477 0419 0603     		.2byte	0x306
 1478 041b 01       		.byte	0x1
 1479 041c CD000000 		.4byte	0xcd
 1480 0420 38020000 		.4byte	.LFB75
 1481 0424 44020000 		.4byte	.LFE75
 1482 0428 02       		.byte	0x2
 1483 0429 7D       		.byte	0x7d
 1484 042a 00       		.sleb128 0
 1485 042b 01       		.byte	0x1
 1486 042c 1D       		.uleb128 0x1d
 1487 042d 01       		.byte	0x1
 1488 042e 94000000 		.4byte	.LASF71
 1489 0432 01       		.byte	0x1
 1490 0433 E902     		.2byte	0x2e9
 1491 0435 01       		.byte	0x1
 1492 0436 34020000 		.4byte	.LFB74
 1493 043a 38020000 		.4byte	.LFE74
 1494 043e 02       		.byte	0x2
 1495 043f 7D       		.byte	0x7d
 1496 0440 00       		.sleb128 0
 1497 0441 01       		.byte	0x1
 1498 0442 51040000 		.4byte	0x451
 1499 0446 1E       		.uleb128 0x1e
 1500 0447 38020000 		.4byte	.LVL32
 1501 044b 01       		.byte	0x1
 1502 044c 25070000 		.4byte	0x725
 1503 0450 00       		.byte	0
ARM GAS  /tmp/cc10d3Tm.s 			page 47


 1504 0451 1C       		.uleb128 0x1c
 1505 0452 01       		.byte	0x1
 1506 0453 2A040000 		.4byte	.LASF64
 1507 0457 01       		.byte	0x1
 1508 0458 DC02     		.2byte	0x2dc
 1509 045a 01       		.byte	0x1
 1510 045b 32020000 		.4byte	0x232
 1511 045f 20020000 		.4byte	.LFB73
 1512 0463 34020000 		.4byte	.LFE73
 1513 0467 02       		.byte	0x2
 1514 0468 7D       		.byte	0x7d
 1515 0469 00       		.sleb128 0
 1516 046a 01       		.byte	0x1
 1517 046b 1C       		.uleb128 0x1c
 1518 046c 01       		.byte	0x1
 1519 046d B7000000 		.4byte	.LASF65
 1520 0471 01       		.byte	0x1
 1521 0472 C802     		.2byte	0x2c8
 1522 0474 01       		.byte	0x1
 1523 0475 32020000 		.4byte	0x232
 1524 0479 FC010000 		.4byte	.LFB72
 1525 047d 20020000 		.4byte	.LFE72
 1526 0481 02       		.byte	0x2
 1527 0482 7D       		.byte	0x7d
 1528 0483 00       		.sleb128 0
 1529 0484 01       		.byte	0x1
 1530 0485 1C       		.uleb128 0x1c
 1531 0486 01       		.byte	0x1
 1532 0487 DD030000 		.4byte	.LASF66
 1533 048b 01       		.byte	0x1
 1534 048c B702     		.2byte	0x2b7
 1535 048e 01       		.byte	0x1
 1536 048f 32020000 		.4byte	0x232
 1537 0493 E8010000 		.4byte	.LFB71
 1538 0497 FC010000 		.4byte	.LFE71
 1539 049b 02       		.byte	0x2
 1540 049c 7D       		.byte	0x7d
 1541 049d 00       		.sleb128 0
 1542 049e 01       		.byte	0x1
 1543 049f 1F       		.uleb128 0x1f
 1544 04a0 01       		.byte	0x1
 1545 04a1 AD040000 		.4byte	.LASF68
 1546 04a5 01       		.byte	0x1
 1547 04a6 9102     		.2byte	0x291
 1548 04a8 01       		.byte	0x1
 1549 04a9 32020000 		.4byte	0x232
 1550 04ad C4010000 		.4byte	.LFB70
 1551 04b1 E8010000 		.4byte	.LFE70
 1552 04b5 02       		.byte	0x2
 1553 04b6 7D       		.byte	0x7d
 1554 04b7 00       		.sleb128 0
 1555 04b8 01       		.byte	0x1
 1556 04b9 CE040000 		.4byte	0x4ce
 1557 04bd 16       		.uleb128 0x16
 1558 04be A6030000 		.4byte	.LASF69
 1559 04c2 01       		.byte	0x1
 1560 04c3 9302     		.2byte	0x293
ARM GAS  /tmp/cc10d3Tm.s 			page 48


 1561 04c5 32020000 		.4byte	0x232
 1562 04c9 87000000 		.4byte	.LLST10
 1563 04cd 00       		.byte	0
 1564 04ce 20       		.uleb128 0x20
 1565 04cf 01       		.byte	0x1
 1566 04d0 8C040000 		.4byte	.LASF88
 1567 04d4 01       		.byte	0x1
 1568 04d5 7002     		.2byte	0x270
 1569 04d7 01       		.byte	0x1
 1570 04d8 01       		.byte	0x1
 1571 04d9 EA040000 		.4byte	0x4ea
 1572 04dd 1B       		.uleb128 0x1b
 1573 04de F4030000 		.4byte	.LASF70
 1574 04e2 01       		.byte	0x1
 1575 04e3 7002     		.2byte	0x270
 1576 04e5 CD000000 		.4byte	0xcd
 1577 04e9 00       		.byte	0
 1578 04ea 21       		.uleb128 0x21
 1579 04eb 01       		.byte	0x1
 1580 04ec 49030000 		.4byte	.LASF89
 1581 04f0 01       		.byte	0x1
 1582 04f1 5E02     		.2byte	0x25e
 1583 04f3 01       		.byte	0x1
 1584 04f4 05050000 		.4byte	0x505
 1585 04f8 1B       		.uleb128 0x1b
 1586 04f9 F4030000 		.4byte	.LASF70
 1587 04fd 01       		.byte	0x1
 1588 04fe 5E02     		.2byte	0x25e
 1589 0500 CD000000 		.4byte	0xcd
 1590 0504 00       		.byte	0
 1591 0505 22       		.uleb128 0x22
 1592 0506 01       		.byte	0x1
 1593 0507 AD030000 		.4byte	.LASF72
 1594 050b 01       		.byte	0x1
 1595 050c 4C01     		.2byte	0x14c
 1596 050e 01       		.byte	0x1
 1597 050f B0000000 		.4byte	.LFB67
 1598 0513 C4010000 		.4byte	.LFE67
 1599 0517 A6000000 		.4byte	.LLST6
 1600 051b 01       		.byte	0x1
 1601 051c B7050000 		.4byte	0x5b7
 1602 0520 16       		.uleb128 0x16
 1603 0521 74000000 		.4byte	.LASF73
 1604 0525 01       		.byte	0x1
 1605 0526 4E01     		.2byte	0x14e
 1606 0528 CD000000 		.4byte	0xcd
 1607 052c C6000000 		.4byte	.LLST7
 1608 0530 23       		.uleb128 0x23
 1609 0531 EB030000 		.4byte	0x3eb
 1610 0535 88010000 		.4byte	.LBB10
 1611 0539 18000000 		.4byte	.Ldebug_ranges0+0x18
 1612 053d 01       		.byte	0x1
 1613 053e BD01     		.2byte	0x1bd
 1614 0540 57050000 		.4byte	0x557
 1615 0544 24       		.uleb128 0x24
 1616 0545 05040000 		.4byte	0x405
 1617 0549 13010000 		.4byte	.LLST8
ARM GAS  /tmp/cc10d3Tm.s 			page 49


 1618 054d 24       		.uleb128 0x24
 1619 054e F9030000 		.4byte	0x3f9
 1620 0552 26010000 		.4byte	.LLST9
 1621 0556 00       		.byte	0
 1622 0557 19       		.uleb128 0x19
 1623 0558 D0000000 		.4byte	.LVL15
 1624 055c 66030000 		.4byte	0x366
 1625 0560 25       		.uleb128 0x25
 1626 0561 D6000000 		.4byte	.LVL16
 1627 0565 CE040000 		.4byte	0x4ce
 1628 0569 74050000 		.4byte	0x574
 1629 056d 26       		.uleb128 0x26
 1630 056e 01       		.byte	0x1
 1631 056f 50       		.byte	0x50
 1632 0570 02       		.byte	0x2
 1633 0571 75       		.byte	0x75
 1634 0572 00       		.sleb128 0
 1635 0573 00       		.byte	0
 1636 0574 19       		.uleb128 0x19
 1637 0575 00010000 		.4byte	.LVL19
 1638 0579 EA040000 		.4byte	0x4ea
 1639 057d 19       		.uleb128 0x19
 1640 057e 14010000 		.4byte	.LVL21
 1641 0582 33070000 		.4byte	0x733
 1642 0586 25       		.uleb128 0x25
 1643 0587 3E010000 		.4byte	.LVL23
 1644 058b EA040000 		.4byte	0x4ea
 1645 058f 9A050000 		.4byte	0x59a
 1646 0593 26       		.uleb128 0x26
 1647 0594 01       		.byte	0x1
 1648 0595 50       		.byte	0x50
 1649 0596 02       		.byte	0x2
 1650 0597 09       		.byte	0x9
 1651 0598 FF       		.byte	0xff
 1652 0599 00       		.byte	0
 1653 059a 25       		.uleb128 0x25
 1654 059b 54010000 		.4byte	.LVL25
 1655 059f EA040000 		.4byte	0x4ea
 1656 05a3 AD050000 		.4byte	0x5ad
 1657 05a7 26       		.uleb128 0x26
 1658 05a8 01       		.byte	0x1
 1659 05a9 50       		.byte	0x50
 1660 05aa 01       		.byte	0x1
 1661 05ab 30       		.byte	0x30
 1662 05ac 00       		.byte	0
 1663 05ad 19       		.uleb128 0x19
 1664 05ae A6010000 		.4byte	.LVL29
 1665 05b2 EA040000 		.4byte	0x4ea
 1666 05b6 00       		.byte	0
 1667 05b7 17       		.uleb128 0x17
 1668 05b8 01       		.byte	0x1
 1669 05b9 0C010000 		.4byte	.LASF74
 1670 05bd 01       		.byte	0x1
 1671 05be 0B01     		.2byte	0x10b
 1672 05c0 01       		.byte	0x1
 1673 05c1 32020000 		.4byte	0x232
 1674 05c5 50000000 		.4byte	.LFB66
ARM GAS  /tmp/cc10d3Tm.s 			page 50


 1675 05c9 AC000000 		.4byte	.LFE66
 1676 05cd 39010000 		.4byte	.LLST1
 1677 05d1 01       		.byte	0x1
 1678 05d2 35060000 		.4byte	0x635
 1679 05d6 18       		.uleb128 0x18
 1680 05d7 B0010000 		.4byte	.LASF76
 1681 05db 01       		.byte	0x1
 1682 05dc 0B01     		.2byte	0x10b
 1683 05de CD000000 		.4byte	0xcd
 1684 05e2 59010000 		.4byte	.LLST2
 1685 05e6 27       		.uleb128 0x27
 1686 05e7 21010000 		.4byte	.LASF48
 1687 05eb 01       		.byte	0x1
 1688 05ec 0B01     		.2byte	0x10b
 1689 05ee CD000000 		.4byte	0xcd
 1690 05f2 01       		.byte	0x1
 1691 05f3 51       		.byte	0x51
 1692 05f4 18       		.uleb128 0x18
 1693 05f5 4D020000 		.4byte	.LASF49
 1694 05f9 01       		.byte	0x1
 1695 05fa 0B01     		.2byte	0x10b
 1696 05fc DD000000 		.4byte	0xdd
 1697 0600 AC010000 		.4byte	.LLST3
 1698 0604 28       		.uleb128 0x28
 1699 0605 A6030000 		.4byte	.LASF69
 1700 0609 01       		.byte	0x1
 1701 060a 0D01     		.2byte	0x10d
 1702 060c 32020000 		.4byte	0x232
 1703 0610 00       		.byte	0
 1704 0611 29       		.uleb128 0x29
 1705 0612 EB030000 		.4byte	0x3eb
 1706 0616 7C000000 		.4byte	.LBB4
 1707 061a 00000000 		.4byte	.Ldebug_ranges0+0
 1708 061e 01       		.byte	0x1
 1709 061f 4301     		.2byte	0x143
 1710 0621 24       		.uleb128 0x24
 1711 0622 05040000 		.4byte	0x405
 1712 0626 D4010000 		.4byte	.LLST4
 1713 062a 24       		.uleb128 0x24
 1714 062b F9030000 		.4byte	0x3f9
 1715 062f E7010000 		.4byte	.LLST5
 1716 0633 00       		.byte	0
 1717 0634 00       		.byte	0
 1718 0635 2A       		.uleb128 0x2a
 1719 0636 01       		.byte	0x1
 1720 0637 EE000000 		.4byte	.LASF77
 1721 063b 01       		.byte	0x1
 1722 063c A8       		.byte	0xa8
 1723 063d 01       		.byte	0x1
 1724 063e 32020000 		.4byte	0x232
 1725 0642 98020000 		.4byte	.LFB65
 1726 0646 24030000 		.4byte	.LFE65
 1727 064a FA010000 		.4byte	.LLST14
 1728 064e 01       		.byte	0x1
 1729 064f FA060000 		.4byte	0x6fa
 1730 0653 2B       		.uleb128 0x2b
 1731 0654 B0010000 		.4byte	.LASF76
ARM GAS  /tmp/cc10d3Tm.s 			page 51


 1732 0658 01       		.byte	0x1
 1733 0659 A8       		.byte	0xa8
 1734 065a CD000000 		.4byte	0xcd
 1735 065e 1A020000 		.4byte	.LLST15
 1736 0662 2B       		.uleb128 0x2b
 1737 0663 21010000 		.4byte	.LASF48
 1738 0667 01       		.byte	0x1
 1739 0668 A8       		.byte	0xa8
 1740 0669 CD000000 		.4byte	0xcd
 1741 066d 6A020000 		.4byte	.LLST16
 1742 0671 2B       		.uleb128 0x2b
 1743 0672 4D020000 		.4byte	.LASF49
 1744 0676 01       		.byte	0x1
 1745 0677 A8       		.byte	0xa8
 1746 0678 DD000000 		.4byte	0xdd
 1747 067c 93020000 		.4byte	.LLST17
 1748 0680 2C       		.uleb128 0x2c
 1749 0681 A6030000 		.4byte	.LASF69
 1750 0685 01       		.byte	0x1
 1751 0686 AA       		.byte	0xaa
 1752 0687 32020000 		.4byte	0x232
 1753 068b CB020000 		.4byte	.LLST18
 1754 068f 2C       		.uleb128 0x2c
 1755 0690 A8000000 		.4byte	.LASF78
 1756 0694 01       		.byte	0x1
 1757 0695 AB       		.byte	0xab
 1758 0696 A2000000 		.4byte	0xa2
 1759 069a 24030000 		.4byte	.LLST19
 1760 069e 2C       		.uleb128 0x2c
 1761 069f 34010000 		.4byte	.LASF79
 1762 06a3 01       		.byte	0x1
 1763 06a4 AC       		.byte	0xac
 1764 06a5 A2000000 		.4byte	0xa2
 1765 06a9 5C030000 		.4byte	.LLST20
 1766 06ad 2D       		.uleb128 0x2d
 1767 06ae EB030000 		.4byte	0x3eb
 1768 06b2 C8020000 		.4byte	.LBB16
 1769 06b6 30000000 		.4byte	.Ldebug_ranges0+0x30
 1770 06ba 01       		.byte	0x1
 1771 06bb D8       		.byte	0xd8
 1772 06bc D3060000 		.4byte	0x6d3
 1773 06c0 24       		.uleb128 0x24
 1774 06c1 05040000 		.4byte	0x405
 1775 06c5 87030000 		.4byte	.LLST21
 1776 06c9 24       		.uleb128 0x24
 1777 06ca F9030000 		.4byte	0x3f9
 1778 06ce 9A030000 		.4byte	.LLST22
 1779 06d2 00       		.byte	0
 1780 06d3 25       		.uleb128 0x25
 1781 06d4 B8020000 		.4byte	.LVL43
 1782 06d8 90030000 		.4byte	0x390
 1783 06dc E8060000 		.4byte	0x6e8
 1784 06e0 26       		.uleb128 0x26
 1785 06e1 01       		.byte	0x1
 1786 06e2 50       		.byte	0x50
 1787 06e3 03       		.byte	0x3
 1788 06e4 0A       		.byte	0xa
ARM GAS  /tmp/cc10d3Tm.s 			page 52


 1789 06e5 50C3     		.2byte	0xc350
 1790 06e7 00       		.byte	0
 1791 06e8 2E       		.uleb128 0x2e
 1792 06e9 F6020000 		.4byte	.LVL50
 1793 06ed 90030000 		.4byte	0x390
 1794 06f1 26       		.uleb128 0x26
 1795 06f2 01       		.byte	0x1
 1796 06f3 50       		.byte	0x50
 1797 06f4 03       		.byte	0x3
 1798 06f5 0A       		.byte	0xa
 1799 06f6 50C3     		.2byte	0xc350
 1800 06f8 00       		.byte	0
 1801 06f9 00       		.byte	0
 1802 06fa 2F       		.uleb128 0x2f
 1803 06fb CE040000 		.4byte	0x4ce
 1804 06ff AE000000 		.4byte	.LFB69
 1805 0703 B0000000 		.4byte	.LFE69
 1806 0707 02       		.byte	0x2
 1807 0708 7D       		.byte	0x7d
 1808 0709 00       		.sleb128 0
 1809 070a 01       		.byte	0x1
 1810 070b 17070000 		.4byte	0x717
 1811 070f 30       		.uleb128 0x30
 1812 0710 DD040000 		.4byte	0x4dd
 1813 0714 01       		.byte	0x1
 1814 0715 50       		.byte	0x50
 1815 0716 00       		.byte	0
 1816 0717 31       		.uleb128 0x31
 1817 0718 01       		.byte	0x1
 1818 0719 01       		.byte	0x1
 1819 071a 00010000 		.4byte	.LASF80
 1820 071e 00010000 		.4byte	.LASF80
 1821 0722 0A       		.byte	0xa
 1822 0723 2A01     		.2byte	0x12a
 1823 0725 31       		.uleb128 0x31
 1824 0726 01       		.byte	0x1
 1825 0727 01       		.byte	0x1
 1826 0728 7F000000 		.4byte	.LASF81
 1827 072c 7F000000 		.4byte	.LASF81
 1828 0730 0B       		.byte	0xb
 1829 0731 0A01     		.2byte	0x10a
 1830 0733 32       		.uleb128 0x32
 1831 0734 01       		.byte	0x1
 1832 0735 01       		.byte	0x1
 1833 0736 6C050000 		.4byte	.LASF82
 1834 073a 6C050000 		.4byte	.LASF82
 1835 073e 01       		.byte	0x1
 1836 073f 84       		.byte	0x84
 1837 0740 00       		.byte	0
 1838              		.section	.debug_abbrev,"",%progbits
 1839              	.Ldebug_abbrev0:
 1840 0000 01       		.uleb128 0x1
 1841 0001 11       		.uleb128 0x11
 1842 0002 01       		.byte	0x1
 1843 0003 25       		.uleb128 0x25
 1844 0004 0E       		.uleb128 0xe
 1845 0005 13       		.uleb128 0x13
ARM GAS  /tmp/cc10d3Tm.s 			page 53


 1846 0006 0B       		.uleb128 0xb
 1847 0007 03       		.uleb128 0x3
 1848 0008 0E       		.uleb128 0xe
 1849 0009 1B       		.uleb128 0x1b
 1850 000a 0E       		.uleb128 0xe
 1851 000b 11       		.uleb128 0x11
 1852 000c 01       		.uleb128 0x1
 1853 000d 12       		.uleb128 0x12
 1854 000e 01       		.uleb128 0x1
 1855 000f 10       		.uleb128 0x10
 1856 0010 06       		.uleb128 0x6
 1857 0011 00       		.byte	0
 1858 0012 00       		.byte	0
 1859 0013 02       		.uleb128 0x2
 1860 0014 24       		.uleb128 0x24
 1861 0015 00       		.byte	0
 1862 0016 0B       		.uleb128 0xb
 1863 0017 0B       		.uleb128 0xb
 1864 0018 3E       		.uleb128 0x3e
 1865 0019 0B       		.uleb128 0xb
 1866 001a 03       		.uleb128 0x3
 1867 001b 0E       		.uleb128 0xe
 1868 001c 00       		.byte	0
 1869 001d 00       		.byte	0
 1870 001e 03       		.uleb128 0x3
 1871 001f 16       		.uleb128 0x16
 1872 0020 00       		.byte	0
 1873 0021 03       		.uleb128 0x3
 1874 0022 0E       		.uleb128 0xe
 1875 0023 3A       		.uleb128 0x3a
 1876 0024 0B       		.uleb128 0xb
 1877 0025 3B       		.uleb128 0x3b
 1878 0026 0B       		.uleb128 0xb
 1879 0027 49       		.uleb128 0x49
 1880 0028 13       		.uleb128 0x13
 1881 0029 00       		.byte	0
 1882 002a 00       		.byte	0
 1883 002b 04       		.uleb128 0x4
 1884 002c 24       		.uleb128 0x24
 1885 002d 00       		.byte	0
 1886 002e 0B       		.uleb128 0xb
 1887 002f 0B       		.uleb128 0xb
 1888 0030 3E       		.uleb128 0x3e
 1889 0031 0B       		.uleb128 0xb
 1890 0032 03       		.uleb128 0x3
 1891 0033 08       		.uleb128 0x8
 1892 0034 00       		.byte	0
 1893 0035 00       		.byte	0
 1894 0036 05       		.uleb128 0x5
 1895 0037 26       		.uleb128 0x26
 1896 0038 00       		.byte	0
 1897 0039 49       		.uleb128 0x49
 1898 003a 13       		.uleb128 0x13
 1899 003b 00       		.byte	0
 1900 003c 00       		.byte	0
 1901 003d 06       		.uleb128 0x6
 1902 003e 35       		.uleb128 0x35
ARM GAS  /tmp/cc10d3Tm.s 			page 54


 1903 003f 00       		.byte	0
 1904 0040 49       		.uleb128 0x49
 1905 0041 13       		.uleb128 0x13
 1906 0042 00       		.byte	0
 1907 0043 00       		.byte	0
 1908 0044 07       		.uleb128 0x7
 1909 0045 34       		.uleb128 0x34
 1910 0046 00       		.byte	0
 1911 0047 03       		.uleb128 0x3
 1912 0048 0E       		.uleb128 0xe
 1913 0049 3A       		.uleb128 0x3a
 1914 004a 0B       		.uleb128 0xb
 1915 004b 3B       		.uleb128 0x3b
 1916 004c 05       		.uleb128 0x5
 1917 004d 49       		.uleb128 0x49
 1918 004e 13       		.uleb128 0x13
 1919 004f 3F       		.uleb128 0x3f
 1920 0050 0C       		.uleb128 0xc
 1921 0051 3C       		.uleb128 0x3c
 1922 0052 0C       		.uleb128 0xc
 1923 0053 00       		.byte	0
 1924 0054 00       		.byte	0
 1925 0055 08       		.uleb128 0x8
 1926 0056 34       		.uleb128 0x34
 1927 0057 00       		.byte	0
 1928 0058 03       		.uleb128 0x3
 1929 0059 0E       		.uleb128 0xe
 1930 005a 3A       		.uleb128 0x3a
 1931 005b 0B       		.uleb128 0xb
 1932 005c 3B       		.uleb128 0x3b
 1933 005d 0B       		.uleb128 0xb
 1934 005e 49       		.uleb128 0x49
 1935 005f 13       		.uleb128 0x13
 1936 0060 3F       		.uleb128 0x3f
 1937 0061 0C       		.uleb128 0xc
 1938 0062 3C       		.uleb128 0x3c
 1939 0063 0C       		.uleb128 0xc
 1940 0064 00       		.byte	0
 1941 0065 00       		.byte	0
 1942 0066 09       		.uleb128 0x9
 1943 0067 01       		.uleb128 0x1
 1944 0068 01       		.byte	0x1
 1945 0069 49       		.uleb128 0x49
 1946 006a 13       		.uleb128 0x13
 1947 006b 01       		.uleb128 0x1
 1948 006c 13       		.uleb128 0x13
 1949 006d 00       		.byte	0
 1950 006e 00       		.byte	0
 1951 006f 0A       		.uleb128 0xa
 1952 0070 21       		.uleb128 0x21
 1953 0071 00       		.byte	0
 1954 0072 49       		.uleb128 0x49
 1955 0073 13       		.uleb128 0x13
 1956 0074 2F       		.uleb128 0x2f
 1957 0075 0B       		.uleb128 0xb
 1958 0076 00       		.byte	0
 1959 0077 00       		.byte	0
ARM GAS  /tmp/cc10d3Tm.s 			page 55


 1960 0078 0B       		.uleb128 0xb
 1961 0079 13       		.uleb128 0x13
 1962 007a 01       		.byte	0x1
 1963 007b 0B       		.uleb128 0xb
 1964 007c 0B       		.uleb128 0xb
 1965 007d 3A       		.uleb128 0x3a
 1966 007e 0B       		.uleb128 0xb
 1967 007f 3B       		.uleb128 0x3b
 1968 0080 05       		.uleb128 0x5
 1969 0081 01       		.uleb128 0x1
 1970 0082 13       		.uleb128 0x13
 1971 0083 00       		.byte	0
 1972 0084 00       		.byte	0
 1973 0085 0C       		.uleb128 0xc
 1974 0086 0D       		.uleb128 0xd
 1975 0087 00       		.byte	0
 1976 0088 03       		.uleb128 0x3
 1977 0089 08       		.uleb128 0x8
 1978 008a 3A       		.uleb128 0x3a
 1979 008b 0B       		.uleb128 0xb
 1980 008c 3B       		.uleb128 0x3b
 1981 008d 05       		.uleb128 0x5
 1982 008e 49       		.uleb128 0x49
 1983 008f 13       		.uleb128 0x13
 1984 0090 38       		.uleb128 0x38
 1985 0091 0A       		.uleb128 0xa
 1986 0092 00       		.byte	0
 1987 0093 00       		.byte	0
 1988 0094 0D       		.uleb128 0xd
 1989 0095 0D       		.uleb128 0xd
 1990 0096 00       		.byte	0
 1991 0097 03       		.uleb128 0x3
 1992 0098 0E       		.uleb128 0xe
 1993 0099 3A       		.uleb128 0x3a
 1994 009a 0B       		.uleb128 0xb
 1995 009b 3B       		.uleb128 0x3b
 1996 009c 05       		.uleb128 0x5
 1997 009d 49       		.uleb128 0x49
 1998 009e 13       		.uleb128 0x13
 1999 009f 38       		.uleb128 0x38
 2000 00a0 0A       		.uleb128 0xa
 2001 00a1 00       		.byte	0
 2002 00a2 00       		.byte	0
 2003 00a3 0E       		.uleb128 0xe
 2004 00a4 16       		.uleb128 0x16
 2005 00a5 00       		.byte	0
 2006 00a6 03       		.uleb128 0x3
 2007 00a7 0E       		.uleb128 0xe
 2008 00a8 3A       		.uleb128 0x3a
 2009 00a9 0B       		.uleb128 0xb
 2010 00aa 3B       		.uleb128 0x3b
 2011 00ab 05       		.uleb128 0x5
 2012 00ac 49       		.uleb128 0x49
 2013 00ad 13       		.uleb128 0x13
 2014 00ae 00       		.byte	0
 2015 00af 00       		.byte	0
 2016 00b0 0F       		.uleb128 0xf
ARM GAS  /tmp/cc10d3Tm.s 			page 56


 2017 00b1 04       		.uleb128 0x4
 2018 00b2 01       		.byte	0x1
 2019 00b3 0B       		.uleb128 0xb
 2020 00b4 0B       		.uleb128 0xb
 2021 00b5 49       		.uleb128 0x49
 2022 00b6 13       		.uleb128 0x13
 2023 00b7 3A       		.uleb128 0x3a
 2024 00b8 0B       		.uleb128 0xb
 2025 00b9 3B       		.uleb128 0x3b
 2026 00ba 0B       		.uleb128 0xb
 2027 00bb 01       		.uleb128 0x1
 2028 00bc 13       		.uleb128 0x13
 2029 00bd 00       		.byte	0
 2030 00be 00       		.byte	0
 2031 00bf 10       		.uleb128 0x10
 2032 00c0 28       		.uleb128 0x28
 2033 00c1 00       		.byte	0
 2034 00c2 03       		.uleb128 0x3
 2035 00c3 0E       		.uleb128 0xe
 2036 00c4 1C       		.uleb128 0x1c
 2037 00c5 0B       		.uleb128 0xb
 2038 00c6 00       		.byte	0
 2039 00c7 00       		.byte	0
 2040 00c8 11       		.uleb128 0x11
 2041 00c9 28       		.uleb128 0x28
 2042 00ca 00       		.byte	0
 2043 00cb 03       		.uleb128 0x3
 2044 00cc 08       		.uleb128 0x8
 2045 00cd 1C       		.uleb128 0x1c
 2046 00ce 0B       		.uleb128 0xb
 2047 00cf 00       		.byte	0
 2048 00d0 00       		.byte	0
 2049 00d1 12       		.uleb128 0x12
 2050 00d2 13       		.uleb128 0x13
 2051 00d3 01       		.byte	0x1
 2052 00d4 0B       		.uleb128 0xb
 2053 00d5 0B       		.uleb128 0xb
 2054 00d6 3A       		.uleb128 0x3a
 2055 00d7 0B       		.uleb128 0xb
 2056 00d8 3B       		.uleb128 0x3b
 2057 00d9 0B       		.uleb128 0xb
 2058 00da 01       		.uleb128 0x1
 2059 00db 13       		.uleb128 0x13
 2060 00dc 00       		.byte	0
 2061 00dd 00       		.byte	0
 2062 00de 13       		.uleb128 0x13
 2063 00df 0D       		.uleb128 0xd
 2064 00e0 00       		.byte	0
 2065 00e1 03       		.uleb128 0x3
 2066 00e2 0E       		.uleb128 0xe
 2067 00e3 3A       		.uleb128 0x3a
 2068 00e4 0B       		.uleb128 0xb
 2069 00e5 3B       		.uleb128 0x3b
 2070 00e6 0B       		.uleb128 0xb
 2071 00e7 49       		.uleb128 0x49
 2072 00e8 13       		.uleb128 0x13
 2073 00e9 38       		.uleb128 0x38
ARM GAS  /tmp/cc10d3Tm.s 			page 57


 2074 00ea 0A       		.uleb128 0xa
 2075 00eb 00       		.byte	0
 2076 00ec 00       		.byte	0
 2077 00ed 14       		.uleb128 0x14
 2078 00ee 34       		.uleb128 0x34
 2079 00ef 00       		.byte	0
 2080 00f0 03       		.uleb128 0x3
 2081 00f1 0E       		.uleb128 0xe
 2082 00f2 3A       		.uleb128 0x3a
 2083 00f3 0B       		.uleb128 0xb
 2084 00f4 3B       		.uleb128 0x3b
 2085 00f5 0B       		.uleb128 0xb
 2086 00f6 49       		.uleb128 0x49
 2087 00f7 13       		.uleb128 0x13
 2088 00f8 3F       		.uleb128 0x3f
 2089 00f9 0C       		.uleb128 0xc
 2090 00fa 02       		.uleb128 0x2
 2091 00fb 0A       		.uleb128 0xa
 2092 00fc 00       		.byte	0
 2093 00fd 00       		.byte	0
 2094 00fe 15       		.uleb128 0x15
 2095 00ff 2E       		.uleb128 0x2e
 2096 0100 01       		.byte	0x1
 2097 0101 03       		.uleb128 0x3
 2098 0102 0E       		.uleb128 0xe
 2099 0103 3A       		.uleb128 0x3a
 2100 0104 0B       		.uleb128 0xb
 2101 0105 3B       		.uleb128 0x3b
 2102 0106 05       		.uleb128 0x5
 2103 0107 27       		.uleb128 0x27
 2104 0108 0C       		.uleb128 0xc
 2105 0109 11       		.uleb128 0x11
 2106 010a 01       		.uleb128 0x1
 2107 010b 12       		.uleb128 0x12
 2108 010c 01       		.uleb128 0x1
 2109 010d 40       		.uleb128 0x40
 2110 010e 0A       		.uleb128 0xa
 2111 010f 9742     		.uleb128 0x2117
 2112 0111 0C       		.uleb128 0xc
 2113 0112 01       		.uleb128 0x1
 2114 0113 13       		.uleb128 0x13
 2115 0114 00       		.byte	0
 2116 0115 00       		.byte	0
 2117 0116 16       		.uleb128 0x16
 2118 0117 34       		.uleb128 0x34
 2119 0118 00       		.byte	0
 2120 0119 03       		.uleb128 0x3
 2121 011a 0E       		.uleb128 0xe
 2122 011b 3A       		.uleb128 0x3a
 2123 011c 0B       		.uleb128 0xb
 2124 011d 3B       		.uleb128 0x3b
 2125 011e 05       		.uleb128 0x5
 2126 011f 49       		.uleb128 0x49
 2127 0120 13       		.uleb128 0x13
 2128 0121 02       		.uleb128 0x2
 2129 0122 06       		.uleb128 0x6
 2130 0123 00       		.byte	0
ARM GAS  /tmp/cc10d3Tm.s 			page 58


 2131 0124 00       		.byte	0
 2132 0125 17       		.uleb128 0x17
 2133 0126 2E       		.uleb128 0x2e
 2134 0127 01       		.byte	0x1
 2135 0128 3F       		.uleb128 0x3f
 2136 0129 0C       		.uleb128 0xc
 2137 012a 03       		.uleb128 0x3
 2138 012b 0E       		.uleb128 0xe
 2139 012c 3A       		.uleb128 0x3a
 2140 012d 0B       		.uleb128 0xb
 2141 012e 3B       		.uleb128 0x3b
 2142 012f 05       		.uleb128 0x5
 2143 0130 27       		.uleb128 0x27
 2144 0131 0C       		.uleb128 0xc
 2145 0132 49       		.uleb128 0x49
 2146 0133 13       		.uleb128 0x13
 2147 0134 11       		.uleb128 0x11
 2148 0135 01       		.uleb128 0x1
 2149 0136 12       		.uleb128 0x12
 2150 0137 01       		.uleb128 0x1
 2151 0138 40       		.uleb128 0x40
 2152 0139 06       		.uleb128 0x6
 2153 013a 9742     		.uleb128 0x2117
 2154 013c 0C       		.uleb128 0xc
 2155 013d 01       		.uleb128 0x1
 2156 013e 13       		.uleb128 0x13
 2157 013f 00       		.byte	0
 2158 0140 00       		.byte	0
 2159 0141 18       		.uleb128 0x18
 2160 0142 05       		.uleb128 0x5
 2161 0143 00       		.byte	0
 2162 0144 03       		.uleb128 0x3
 2163 0145 0E       		.uleb128 0xe
 2164 0146 3A       		.uleb128 0x3a
 2165 0147 0B       		.uleb128 0xb
 2166 0148 3B       		.uleb128 0x3b
 2167 0149 05       		.uleb128 0x5
 2168 014a 49       		.uleb128 0x49
 2169 014b 13       		.uleb128 0x13
 2170 014c 02       		.uleb128 0x2
 2171 014d 06       		.uleb128 0x6
 2172 014e 00       		.byte	0
 2173 014f 00       		.byte	0
 2174 0150 19       		.uleb128 0x19
 2175 0151 898201   		.uleb128 0x4109
 2176 0154 00       		.byte	0
 2177 0155 11       		.uleb128 0x11
 2178 0156 01       		.uleb128 0x1
 2179 0157 31       		.uleb128 0x31
 2180 0158 13       		.uleb128 0x13
 2181 0159 00       		.byte	0
 2182 015a 00       		.byte	0
 2183 015b 1A       		.uleb128 0x1a
 2184 015c 2E       		.uleb128 0x2e
 2185 015d 01       		.byte	0x1
 2186 015e 03       		.uleb128 0x3
 2187 015f 0E       		.uleb128 0xe
ARM GAS  /tmp/cc10d3Tm.s 			page 59


 2188 0160 3A       		.uleb128 0x3a
 2189 0161 0B       		.uleb128 0xb
 2190 0162 3B       		.uleb128 0x3b
 2191 0163 05       		.uleb128 0x5
 2192 0164 27       		.uleb128 0x27
 2193 0165 0C       		.uleb128 0xc
 2194 0166 20       		.uleb128 0x20
 2195 0167 0B       		.uleb128 0xb
 2196 0168 01       		.uleb128 0x1
 2197 0169 13       		.uleb128 0x13
 2198 016a 00       		.byte	0
 2199 016b 00       		.byte	0
 2200 016c 1B       		.uleb128 0x1b
 2201 016d 05       		.uleb128 0x5
 2202 016e 00       		.byte	0
 2203 016f 03       		.uleb128 0x3
 2204 0170 0E       		.uleb128 0xe
 2205 0171 3A       		.uleb128 0x3a
 2206 0172 0B       		.uleb128 0xb
 2207 0173 3B       		.uleb128 0x3b
 2208 0174 05       		.uleb128 0x5
 2209 0175 49       		.uleb128 0x49
 2210 0176 13       		.uleb128 0x13
 2211 0177 00       		.byte	0
 2212 0178 00       		.byte	0
 2213 0179 1C       		.uleb128 0x1c
 2214 017a 2E       		.uleb128 0x2e
 2215 017b 00       		.byte	0
 2216 017c 3F       		.uleb128 0x3f
 2217 017d 0C       		.uleb128 0xc
 2218 017e 03       		.uleb128 0x3
 2219 017f 0E       		.uleb128 0xe
 2220 0180 3A       		.uleb128 0x3a
 2221 0181 0B       		.uleb128 0xb
 2222 0182 3B       		.uleb128 0x3b
 2223 0183 05       		.uleb128 0x5
 2224 0184 27       		.uleb128 0x27
 2225 0185 0C       		.uleb128 0xc
 2226 0186 49       		.uleb128 0x49
 2227 0187 13       		.uleb128 0x13
 2228 0188 11       		.uleb128 0x11
 2229 0189 01       		.uleb128 0x1
 2230 018a 12       		.uleb128 0x12
 2231 018b 01       		.uleb128 0x1
 2232 018c 40       		.uleb128 0x40
 2233 018d 0A       		.uleb128 0xa
 2234 018e 9742     		.uleb128 0x2117
 2235 0190 0C       		.uleb128 0xc
 2236 0191 00       		.byte	0
 2237 0192 00       		.byte	0
 2238 0193 1D       		.uleb128 0x1d
 2239 0194 2E       		.uleb128 0x2e
 2240 0195 01       		.byte	0x1
 2241 0196 3F       		.uleb128 0x3f
 2242 0197 0C       		.uleb128 0xc
 2243 0198 03       		.uleb128 0x3
 2244 0199 0E       		.uleb128 0xe
ARM GAS  /tmp/cc10d3Tm.s 			page 60


 2245 019a 3A       		.uleb128 0x3a
 2246 019b 0B       		.uleb128 0xb
 2247 019c 3B       		.uleb128 0x3b
 2248 019d 05       		.uleb128 0x5
 2249 019e 27       		.uleb128 0x27
 2250 019f 0C       		.uleb128 0xc
 2251 01a0 11       		.uleb128 0x11
 2252 01a1 01       		.uleb128 0x1
 2253 01a2 12       		.uleb128 0x12
 2254 01a3 01       		.uleb128 0x1
 2255 01a4 40       		.uleb128 0x40
 2256 01a5 0A       		.uleb128 0xa
 2257 01a6 9742     		.uleb128 0x2117
 2258 01a8 0C       		.uleb128 0xc
 2259 01a9 01       		.uleb128 0x1
 2260 01aa 13       		.uleb128 0x13
 2261 01ab 00       		.byte	0
 2262 01ac 00       		.byte	0
 2263 01ad 1E       		.uleb128 0x1e
 2264 01ae 898201   		.uleb128 0x4109
 2265 01b1 00       		.byte	0
 2266 01b2 11       		.uleb128 0x11
 2267 01b3 01       		.uleb128 0x1
 2268 01b4 9542     		.uleb128 0x2115
 2269 01b6 0C       		.uleb128 0xc
 2270 01b7 31       		.uleb128 0x31
 2271 01b8 13       		.uleb128 0x13
 2272 01b9 00       		.byte	0
 2273 01ba 00       		.byte	0
 2274 01bb 1F       		.uleb128 0x1f
 2275 01bc 2E       		.uleb128 0x2e
 2276 01bd 01       		.byte	0x1
 2277 01be 3F       		.uleb128 0x3f
 2278 01bf 0C       		.uleb128 0xc
 2279 01c0 03       		.uleb128 0x3
 2280 01c1 0E       		.uleb128 0xe
 2281 01c2 3A       		.uleb128 0x3a
 2282 01c3 0B       		.uleb128 0xb
 2283 01c4 3B       		.uleb128 0x3b
 2284 01c5 05       		.uleb128 0x5
 2285 01c6 27       		.uleb128 0x27
 2286 01c7 0C       		.uleb128 0xc
 2287 01c8 49       		.uleb128 0x49
 2288 01c9 13       		.uleb128 0x13
 2289 01ca 11       		.uleb128 0x11
 2290 01cb 01       		.uleb128 0x1
 2291 01cc 12       		.uleb128 0x12
 2292 01cd 01       		.uleb128 0x1
 2293 01ce 40       		.uleb128 0x40
 2294 01cf 0A       		.uleb128 0xa
 2295 01d0 9742     		.uleb128 0x2117
 2296 01d2 0C       		.uleb128 0xc
 2297 01d3 01       		.uleb128 0x1
 2298 01d4 13       		.uleb128 0x13
 2299 01d5 00       		.byte	0
 2300 01d6 00       		.byte	0
 2301 01d7 20       		.uleb128 0x20
ARM GAS  /tmp/cc10d3Tm.s 			page 61


 2302 01d8 2E       		.uleb128 0x2e
 2303 01d9 01       		.byte	0x1
 2304 01da 3F       		.uleb128 0x3f
 2305 01db 0C       		.uleb128 0xc
 2306 01dc 03       		.uleb128 0x3
 2307 01dd 0E       		.uleb128 0xe
 2308 01de 3A       		.uleb128 0x3a
 2309 01df 0B       		.uleb128 0xb
 2310 01e0 3B       		.uleb128 0x3b
 2311 01e1 05       		.uleb128 0x5
 2312 01e2 27       		.uleb128 0x27
 2313 01e3 0C       		.uleb128 0xc
 2314 01e4 20       		.uleb128 0x20
 2315 01e5 0B       		.uleb128 0xb
 2316 01e6 01       		.uleb128 0x1
 2317 01e7 13       		.uleb128 0x13
 2318 01e8 00       		.byte	0
 2319 01e9 00       		.byte	0
 2320 01ea 21       		.uleb128 0x21
 2321 01eb 2E       		.uleb128 0x2e
 2322 01ec 01       		.byte	0x1
 2323 01ed 3F       		.uleb128 0x3f
 2324 01ee 0C       		.uleb128 0xc
 2325 01ef 03       		.uleb128 0x3
 2326 01f0 0E       		.uleb128 0xe
 2327 01f1 3A       		.uleb128 0x3a
 2328 01f2 0B       		.uleb128 0xb
 2329 01f3 3B       		.uleb128 0x3b
 2330 01f4 05       		.uleb128 0x5
 2331 01f5 27       		.uleb128 0x27
 2332 01f6 0C       		.uleb128 0xc
 2333 01f7 01       		.uleb128 0x1
 2334 01f8 13       		.uleb128 0x13
 2335 01f9 00       		.byte	0
 2336 01fa 00       		.byte	0
 2337 01fb 22       		.uleb128 0x22
 2338 01fc 2E       		.uleb128 0x2e
 2339 01fd 01       		.byte	0x1
 2340 01fe 3F       		.uleb128 0x3f
 2341 01ff 0C       		.uleb128 0xc
 2342 0200 03       		.uleb128 0x3
 2343 0201 0E       		.uleb128 0xe
 2344 0202 3A       		.uleb128 0x3a
 2345 0203 0B       		.uleb128 0xb
 2346 0204 3B       		.uleb128 0x3b
 2347 0205 05       		.uleb128 0x5
 2348 0206 27       		.uleb128 0x27
 2349 0207 0C       		.uleb128 0xc
 2350 0208 11       		.uleb128 0x11
 2351 0209 01       		.uleb128 0x1
 2352 020a 12       		.uleb128 0x12
 2353 020b 01       		.uleb128 0x1
 2354 020c 40       		.uleb128 0x40
 2355 020d 06       		.uleb128 0x6
 2356 020e 9742     		.uleb128 0x2117
 2357 0210 0C       		.uleb128 0xc
 2358 0211 01       		.uleb128 0x1
ARM GAS  /tmp/cc10d3Tm.s 			page 62


 2359 0212 13       		.uleb128 0x13
 2360 0213 00       		.byte	0
 2361 0214 00       		.byte	0
 2362 0215 23       		.uleb128 0x23
 2363 0216 1D       		.uleb128 0x1d
 2364 0217 01       		.byte	0x1
 2365 0218 31       		.uleb128 0x31
 2366 0219 13       		.uleb128 0x13
 2367 021a 52       		.uleb128 0x52
 2368 021b 01       		.uleb128 0x1
 2369 021c 55       		.uleb128 0x55
 2370 021d 06       		.uleb128 0x6
 2371 021e 58       		.uleb128 0x58
 2372 021f 0B       		.uleb128 0xb
 2373 0220 59       		.uleb128 0x59
 2374 0221 05       		.uleb128 0x5
 2375 0222 01       		.uleb128 0x1
 2376 0223 13       		.uleb128 0x13
 2377 0224 00       		.byte	0
 2378 0225 00       		.byte	0
 2379 0226 24       		.uleb128 0x24
 2380 0227 05       		.uleb128 0x5
 2381 0228 00       		.byte	0
 2382 0229 31       		.uleb128 0x31
 2383 022a 13       		.uleb128 0x13
 2384 022b 02       		.uleb128 0x2
 2385 022c 06       		.uleb128 0x6
 2386 022d 00       		.byte	0
 2387 022e 00       		.byte	0
 2388 022f 25       		.uleb128 0x25
 2389 0230 898201   		.uleb128 0x4109
 2390 0233 01       		.byte	0x1
 2391 0234 11       		.uleb128 0x11
 2392 0235 01       		.uleb128 0x1
 2393 0236 31       		.uleb128 0x31
 2394 0237 13       		.uleb128 0x13
 2395 0238 01       		.uleb128 0x1
 2396 0239 13       		.uleb128 0x13
 2397 023a 00       		.byte	0
 2398 023b 00       		.byte	0
 2399 023c 26       		.uleb128 0x26
 2400 023d 8A8201   		.uleb128 0x410a
 2401 0240 00       		.byte	0
 2402 0241 02       		.uleb128 0x2
 2403 0242 0A       		.uleb128 0xa
 2404 0243 9142     		.uleb128 0x2111
 2405 0245 0A       		.uleb128 0xa
 2406 0246 00       		.byte	0
 2407 0247 00       		.byte	0
 2408 0248 27       		.uleb128 0x27
 2409 0249 05       		.uleb128 0x5
 2410 024a 00       		.byte	0
 2411 024b 03       		.uleb128 0x3
 2412 024c 0E       		.uleb128 0xe
 2413 024d 3A       		.uleb128 0x3a
 2414 024e 0B       		.uleb128 0xb
 2415 024f 3B       		.uleb128 0x3b
ARM GAS  /tmp/cc10d3Tm.s 			page 63


 2416 0250 05       		.uleb128 0x5
 2417 0251 49       		.uleb128 0x49
 2418 0252 13       		.uleb128 0x13
 2419 0253 02       		.uleb128 0x2
 2420 0254 0A       		.uleb128 0xa
 2421 0255 00       		.byte	0
 2422 0256 00       		.byte	0
 2423 0257 28       		.uleb128 0x28
 2424 0258 34       		.uleb128 0x34
 2425 0259 00       		.byte	0
 2426 025a 03       		.uleb128 0x3
 2427 025b 0E       		.uleb128 0xe
 2428 025c 3A       		.uleb128 0x3a
 2429 025d 0B       		.uleb128 0xb
 2430 025e 3B       		.uleb128 0x3b
 2431 025f 05       		.uleb128 0x5
 2432 0260 49       		.uleb128 0x49
 2433 0261 13       		.uleb128 0x13
 2434 0262 1C       		.uleb128 0x1c
 2435 0263 0B       		.uleb128 0xb
 2436 0264 00       		.byte	0
 2437 0265 00       		.byte	0
 2438 0266 29       		.uleb128 0x29
 2439 0267 1D       		.uleb128 0x1d
 2440 0268 01       		.byte	0x1
 2441 0269 31       		.uleb128 0x31
 2442 026a 13       		.uleb128 0x13
 2443 026b 52       		.uleb128 0x52
 2444 026c 01       		.uleb128 0x1
 2445 026d 55       		.uleb128 0x55
 2446 026e 06       		.uleb128 0x6
 2447 026f 58       		.uleb128 0x58
 2448 0270 0B       		.uleb128 0xb
 2449 0271 59       		.uleb128 0x59
 2450 0272 05       		.uleb128 0x5
 2451 0273 00       		.byte	0
 2452 0274 00       		.byte	0
 2453 0275 2A       		.uleb128 0x2a
 2454 0276 2E       		.uleb128 0x2e
 2455 0277 01       		.byte	0x1
 2456 0278 3F       		.uleb128 0x3f
 2457 0279 0C       		.uleb128 0xc
 2458 027a 03       		.uleb128 0x3
 2459 027b 0E       		.uleb128 0xe
 2460 027c 3A       		.uleb128 0x3a
 2461 027d 0B       		.uleb128 0xb
 2462 027e 3B       		.uleb128 0x3b
 2463 027f 0B       		.uleb128 0xb
 2464 0280 27       		.uleb128 0x27
 2465 0281 0C       		.uleb128 0xc
 2466 0282 49       		.uleb128 0x49
 2467 0283 13       		.uleb128 0x13
 2468 0284 11       		.uleb128 0x11
 2469 0285 01       		.uleb128 0x1
 2470 0286 12       		.uleb128 0x12
 2471 0287 01       		.uleb128 0x1
 2472 0288 40       		.uleb128 0x40
ARM GAS  /tmp/cc10d3Tm.s 			page 64


 2473 0289 06       		.uleb128 0x6
 2474 028a 9642     		.uleb128 0x2116
 2475 028c 0C       		.uleb128 0xc
 2476 028d 01       		.uleb128 0x1
 2477 028e 13       		.uleb128 0x13
 2478 028f 00       		.byte	0
 2479 0290 00       		.byte	0
 2480 0291 2B       		.uleb128 0x2b
 2481 0292 05       		.uleb128 0x5
 2482 0293 00       		.byte	0
 2483 0294 03       		.uleb128 0x3
 2484 0295 0E       		.uleb128 0xe
 2485 0296 3A       		.uleb128 0x3a
 2486 0297 0B       		.uleb128 0xb
 2487 0298 3B       		.uleb128 0x3b
 2488 0299 0B       		.uleb128 0xb
 2489 029a 49       		.uleb128 0x49
 2490 029b 13       		.uleb128 0x13
 2491 029c 02       		.uleb128 0x2
 2492 029d 06       		.uleb128 0x6
 2493 029e 00       		.byte	0
 2494 029f 00       		.byte	0
 2495 02a0 2C       		.uleb128 0x2c
 2496 02a1 34       		.uleb128 0x34
 2497 02a2 00       		.byte	0
 2498 02a3 03       		.uleb128 0x3
 2499 02a4 0E       		.uleb128 0xe
 2500 02a5 3A       		.uleb128 0x3a
 2501 02a6 0B       		.uleb128 0xb
 2502 02a7 3B       		.uleb128 0x3b
 2503 02a8 0B       		.uleb128 0xb
 2504 02a9 49       		.uleb128 0x49
 2505 02aa 13       		.uleb128 0x13
 2506 02ab 02       		.uleb128 0x2
 2507 02ac 06       		.uleb128 0x6
 2508 02ad 00       		.byte	0
 2509 02ae 00       		.byte	0
 2510 02af 2D       		.uleb128 0x2d
 2511 02b0 1D       		.uleb128 0x1d
 2512 02b1 01       		.byte	0x1
 2513 02b2 31       		.uleb128 0x31
 2514 02b3 13       		.uleb128 0x13
 2515 02b4 52       		.uleb128 0x52
 2516 02b5 01       		.uleb128 0x1
 2517 02b6 55       		.uleb128 0x55
 2518 02b7 06       		.uleb128 0x6
 2519 02b8 58       		.uleb128 0x58
 2520 02b9 0B       		.uleb128 0xb
 2521 02ba 59       		.uleb128 0x59
 2522 02bb 0B       		.uleb128 0xb
 2523 02bc 01       		.uleb128 0x1
 2524 02bd 13       		.uleb128 0x13
 2525 02be 00       		.byte	0
 2526 02bf 00       		.byte	0
 2527 02c0 2E       		.uleb128 0x2e
 2528 02c1 898201   		.uleb128 0x4109
 2529 02c4 01       		.byte	0x1
ARM GAS  /tmp/cc10d3Tm.s 			page 65


 2530 02c5 11       		.uleb128 0x11
 2531 02c6 01       		.uleb128 0x1
 2532 02c7 31       		.uleb128 0x31
 2533 02c8 13       		.uleb128 0x13
 2534 02c9 00       		.byte	0
 2535 02ca 00       		.byte	0
 2536 02cb 2F       		.uleb128 0x2f
 2537 02cc 2E       		.uleb128 0x2e
 2538 02cd 01       		.byte	0x1
 2539 02ce 31       		.uleb128 0x31
 2540 02cf 13       		.uleb128 0x13
 2541 02d0 11       		.uleb128 0x11
 2542 02d1 01       		.uleb128 0x1
 2543 02d2 12       		.uleb128 0x12
 2544 02d3 01       		.uleb128 0x1
 2545 02d4 40       		.uleb128 0x40
 2546 02d5 0A       		.uleb128 0xa
 2547 02d6 9742     		.uleb128 0x2117
 2548 02d8 0C       		.uleb128 0xc
 2549 02d9 01       		.uleb128 0x1
 2550 02da 13       		.uleb128 0x13
 2551 02db 00       		.byte	0
 2552 02dc 00       		.byte	0
 2553 02dd 30       		.uleb128 0x30
 2554 02de 05       		.uleb128 0x5
 2555 02df 00       		.byte	0
 2556 02e0 31       		.uleb128 0x31
 2557 02e1 13       		.uleb128 0x13
 2558 02e2 02       		.uleb128 0x2
 2559 02e3 0A       		.uleb128 0xa
 2560 02e4 00       		.byte	0
 2561 02e5 00       		.byte	0
 2562 02e6 31       		.uleb128 0x31
 2563 02e7 2E       		.uleb128 0x2e
 2564 02e8 00       		.byte	0
 2565 02e9 3F       		.uleb128 0x3f
 2566 02ea 0C       		.uleb128 0xc
 2567 02eb 3C       		.uleb128 0x3c
 2568 02ec 0C       		.uleb128 0xc
 2569 02ed 8740     		.uleb128 0x2007
 2570 02ef 0E       		.uleb128 0xe
 2571 02f0 03       		.uleb128 0x3
 2572 02f1 0E       		.uleb128 0xe
 2573 02f2 3A       		.uleb128 0x3a
 2574 02f3 0B       		.uleb128 0xb
 2575 02f4 3B       		.uleb128 0x3b
 2576 02f5 05       		.uleb128 0x5
 2577 02f6 00       		.byte	0
 2578 02f7 00       		.byte	0
 2579 02f8 32       		.uleb128 0x32
 2580 02f9 2E       		.uleb128 0x2e
 2581 02fa 00       		.byte	0
 2582 02fb 3F       		.uleb128 0x3f
 2583 02fc 0C       		.uleb128 0xc
 2584 02fd 3C       		.uleb128 0x3c
 2585 02fe 0C       		.uleb128 0xc
 2586 02ff 8740     		.uleb128 0x2007
ARM GAS  /tmp/cc10d3Tm.s 			page 66


 2587 0301 0E       		.uleb128 0xe
 2588 0302 03       		.uleb128 0x3
 2589 0303 0E       		.uleb128 0xe
 2590 0304 3A       		.uleb128 0x3a
 2591 0305 0B       		.uleb128 0xb
 2592 0306 3B       		.uleb128 0x3b
 2593 0307 0B       		.uleb128 0xb
 2594 0308 00       		.byte	0
 2595 0309 00       		.byte	0
 2596 030a 00       		.byte	0
 2597              		.section	.debug_loc,"",%progbits
 2598              	.Ldebug_loc0:
 2599              	.LLST0:
 2600 0000 00000000 		.4byte	.LVL0-.Ltext0
 2601 0004 14000000 		.4byte	.LVL1-.Ltext0
 2602 0008 0200     		.2byte	0x2
 2603 000a 30       		.byte	0x30
 2604 000b 9F       		.byte	0x9f
 2605 000c 14000000 		.4byte	.LVL1-.Ltext0
 2606 0010 16000000 		.4byte	.LVL2-.Ltext0
 2607 0014 0200     		.2byte	0x2
 2608 0016 40       		.byte	0x40
 2609 0017 9F       		.byte	0x9f
 2610 0018 16000000 		.4byte	.LVL2-.Ltext0
 2611 001c 50000000 		.4byte	.LFE78-.Ltext0
 2612 0020 0100     		.2byte	0x1
 2613 0022 53       		.byte	0x53
 2614 0023 00000000 		.4byte	0
 2615 0027 00000000 		.4byte	0
 2616              	.LLST11:
 2617 002b 44020000 		.4byte	.LFB77-.Ltext0
 2618 002f 46020000 		.4byte	.LCFI2-.Ltext0
 2619 0033 0200     		.2byte	0x2
 2620 0035 7D       		.byte	0x7d
 2621 0036 00       		.sleb128 0
 2622 0037 46020000 		.4byte	.LCFI2-.Ltext0
 2623 003b 98020000 		.4byte	.LFE77-.Ltext0
 2624 003f 0200     		.2byte	0x2
 2625 0041 7D       		.byte	0x7d
 2626 0042 18       		.sleb128 24
 2627 0043 00000000 		.4byte	0
 2628 0047 00000000 		.4byte	0
 2629              	.LLST12:
 2630 004b 44020000 		.4byte	.LVL33-.Ltext0
 2631 004f 4B020000 		.4byte	.LVL34-1-.Ltext0
 2632 0053 0100     		.2byte	0x1
 2633 0055 50       		.byte	0x50
 2634 0056 4B020000 		.4byte	.LVL34-1-.Ltext0
 2635 005a 98020000 		.4byte	.LFE77-.Ltext0
 2636 005e 0100     		.2byte	0x1
 2637 0060 56       		.byte	0x56
 2638 0061 00000000 		.4byte	0
 2639 0065 00000000 		.4byte	0
 2640              	.LLST13:
 2641 0069 50020000 		.4byte	.LVL35-.Ltext0
 2642 006d 52020000 		.4byte	.LVL36-.Ltext0
 2643 0071 0100     		.2byte	0x1
ARM GAS  /tmp/cc10d3Tm.s 			page 67


 2644 0073 50       		.byte	0x50
 2645 0074 52020000 		.4byte	.LVL36-.Ltext0
 2646 0078 98020000 		.4byte	.LFE77-.Ltext0
 2647 007c 0100     		.2byte	0x1
 2648 007e 57       		.byte	0x57
 2649 007f 00000000 		.4byte	0
 2650 0083 00000000 		.4byte	0
 2651              	.LLST10:
 2652 0087 C4010000 		.4byte	.LVL30-.Ltext0
 2653 008b DE010000 		.4byte	.LVL31-.Ltext0
 2654 008f 0200     		.2byte	0x2
 2655 0091 30       		.byte	0x30
 2656 0092 9F       		.byte	0x9f
 2657 0093 DE010000 		.4byte	.LVL31-.Ltext0
 2658 0097 E8010000 		.4byte	.LFE70-.Ltext0
 2659 009b 0100     		.2byte	0x1
 2660 009d 50       		.byte	0x50
 2661 009e 00000000 		.4byte	0
 2662 00a2 00000000 		.4byte	0
 2663              	.LLST6:
 2664 00a6 B0000000 		.4byte	.LFB67-.Ltext0
 2665 00aa B4000000 		.4byte	.LCFI1-.Ltext0
 2666 00ae 0200     		.2byte	0x2
 2667 00b0 7D       		.byte	0x7d
 2668 00b1 00       		.sleb128 0
 2669 00b2 B4000000 		.4byte	.LCFI1-.Ltext0
 2670 00b6 C4010000 		.4byte	.LFE67-.Ltext0
 2671 00ba 0200     		.2byte	0x2
 2672 00bc 7D       		.byte	0x7d
 2673 00bd 10       		.sleb128 16
 2674 00be 00000000 		.4byte	0
 2675 00c2 00000000 		.4byte	0
 2676              	.LLST7:
 2677 00c6 B0000000 		.4byte	.LVL13-.Ltext0
 2678 00ca CA000000 		.4byte	.LVL14-.Ltext0
 2679 00ce 0200     		.2byte	0x2
 2680 00d0 30       		.byte	0x30
 2681 00d1 9F       		.byte	0x9f
 2682 00d2 CA000000 		.4byte	.LVL14-.Ltext0
 2683 00d6 DA000000 		.4byte	.LVL17-.Ltext0
 2684 00da 0100     		.2byte	0x1
 2685 00dc 55       		.byte	0x55
 2686 00dd FC000000 		.4byte	.LVL18-.Ltext0
 2687 00e1 FF000000 		.4byte	.LVL19-1-.Ltext0
 2688 00e5 0100     		.2byte	0x1
 2689 00e7 50       		.byte	0x50
 2690 00e8 06010000 		.4byte	.LVL20-.Ltext0
 2691 00ec 13010000 		.4byte	.LVL21-1-.Ltext0
 2692 00f0 0100     		.2byte	0x1
 2693 00f2 50       		.byte	0x50
 2694 00f3 32010000 		.4byte	.LVL22-.Ltext0
 2695 00f7 40010000 		.4byte	.LVL24-.Ltext0
 2696 00fb 0300     		.2byte	0x3
 2697 00fd 09       		.byte	0x9
 2698 00fe FF       		.byte	0xff
 2699 00ff 9F       		.byte	0x9f
 2700 0100 6C010000 		.4byte	.LVL26-.Ltext0
ARM GAS  /tmp/cc10d3Tm.s 			page 68


 2701 0104 9A010000 		.4byte	.LVL28-.Ltext0
 2702 0108 0100     		.2byte	0x1
 2703 010a 56       		.byte	0x56
 2704 010b 00000000 		.4byte	0
 2705 010f 00000000 		.4byte	0
 2706              	.LLST8:
 2707 0113 90010000 		.4byte	.LVL27-.Ltext0
 2708 0117 9A010000 		.4byte	.LVL28-.Ltext0
 2709 011b 0100     		.2byte	0x1
 2710 011d 52       		.byte	0x52
 2711 011e 00000000 		.4byte	0
 2712 0122 00000000 		.4byte	0
 2713              	.LLST9:
 2714 0126 90010000 		.4byte	.LVL27-.Ltext0
 2715 012a 9A010000 		.4byte	.LVL28-.Ltext0
 2716 012e 0100     		.2byte	0x1
 2717 0130 56       		.byte	0x56
 2718 0131 00000000 		.4byte	0
 2719 0135 00000000 		.4byte	0
 2720              	.LLST1:
 2721 0139 50000000 		.4byte	.LFB66-.Ltext0
 2722 013d 52000000 		.4byte	.LCFI0-.Ltext0
 2723 0141 0200     		.2byte	0x2
 2724 0143 7D       		.byte	0x7d
 2725 0144 00       		.sleb128 0
 2726 0145 52000000 		.4byte	.LCFI0-.Ltext0
 2727 0149 AC000000 		.4byte	.LFE66-.Ltext0
 2728 014d 0200     		.2byte	0x2
 2729 014f 7D       		.byte	0x7d
 2730 0150 10       		.sleb128 16
 2731 0151 00000000 		.4byte	0
 2732 0155 00000000 		.4byte	0
 2733              	.LLST2:
 2734 0159 50000000 		.4byte	.LVL4-.Ltext0
 2735 015d 7C000000 		.4byte	.LVL6-.Ltext0
 2736 0161 0100     		.2byte	0x1
 2737 0163 50       		.byte	0x50
 2738 0164 7C000000 		.4byte	.LVL6-.Ltext0
 2739 0168 90000000 		.4byte	.LVL8-.Ltext0
 2740 016c 0400     		.2byte	0x4
 2741 016e F3       		.byte	0xf3
 2742 016f 01       		.uleb128 0x1
 2743 0170 50       		.byte	0x50
 2744 0171 9F       		.byte	0x9f
 2745 0172 90000000 		.4byte	.LVL8-.Ltext0
 2746 0176 9A000000 		.4byte	.LVL9-.Ltext0
 2747 017a 0100     		.2byte	0x1
 2748 017c 50       		.byte	0x50
 2749 017d 9A000000 		.4byte	.LVL9-.Ltext0
 2750 0181 A0000000 		.4byte	.LVL10-.Ltext0
 2751 0185 0400     		.2byte	0x4
 2752 0187 F3       		.byte	0xf3
 2753 0188 01       		.uleb128 0x1
 2754 0189 50       		.byte	0x50
 2755 018a 9F       		.byte	0x9f
 2756 018b A0000000 		.4byte	.LVL10-.Ltext0
 2757 018f A2000000 		.4byte	.LVL11-.Ltext0
ARM GAS  /tmp/cc10d3Tm.s 			page 69


 2758 0193 0100     		.2byte	0x1
 2759 0195 50       		.byte	0x50
 2760 0196 A2000000 		.4byte	.LVL11-.Ltext0
 2761 019a AC000000 		.4byte	.LFE66-.Ltext0
 2762 019e 0400     		.2byte	0x4
 2763 01a0 F3       		.byte	0xf3
 2764 01a1 01       		.uleb128 0x1
 2765 01a2 50       		.byte	0x50
 2766 01a3 9F       		.byte	0x9f
 2767 01a4 00000000 		.4byte	0
 2768 01a8 00000000 		.4byte	0
 2769              	.LLST3:
 2770 01ac 50000000 		.4byte	.LVL4-.Ltext0
 2771 01b0 5A000000 		.4byte	.LVL5-.Ltext0
 2772 01b4 0600     		.2byte	0x6
 2773 01b6 52       		.byte	0x52
 2774 01b7 93       		.byte	0x93
 2775 01b8 04       		.uleb128 0x4
 2776 01b9 53       		.byte	0x53
 2777 01ba 93       		.byte	0x93
 2778 01bb 04       		.uleb128 0x4
 2779 01bc 5A000000 		.4byte	.LVL5-.Ltext0
 2780 01c0 AC000000 		.4byte	.LFE66-.Ltext0
 2781 01c4 0600     		.2byte	0x6
 2782 01c6 F3       		.byte	0xf3
 2783 01c7 03       		.uleb128 0x3
 2784 01c8 F5       		.byte	0xf5
 2785 01c9 02       		.uleb128 0x2
 2786 01ca 25       		.uleb128 0x25
 2787 01cb 9F       		.byte	0x9f
 2788 01cc 00000000 		.4byte	0
 2789 01d0 00000000 		.4byte	0
 2790              	.LLST4:
 2791 01d4 86000000 		.4byte	.LVL7-.Ltext0
 2792 01d8 90000000 		.4byte	.LVL8-.Ltext0
 2793 01dc 0100     		.2byte	0x1
 2794 01de 54       		.byte	0x54
 2795 01df 00000000 		.4byte	0
 2796 01e3 00000000 		.4byte	0
 2797              	.LLST5:
 2798 01e7 86000000 		.4byte	.LVL7-.Ltext0
 2799 01eb 90000000 		.4byte	.LVL8-.Ltext0
 2800 01ef 0100     		.2byte	0x1
 2801 01f1 51       		.byte	0x51
 2802 01f2 00000000 		.4byte	0
 2803 01f6 00000000 		.4byte	0
 2804              	.LLST14:
 2805 01fa 98020000 		.4byte	.LFB65-.Ltext0
 2806 01fe 9C020000 		.4byte	.LCFI3-.Ltext0
 2807 0202 0200     		.2byte	0x2
 2808 0204 7D       		.byte	0x7d
 2809 0205 00       		.sleb128 0
 2810 0206 9C020000 		.4byte	.LCFI3-.Ltext0
 2811 020a 24030000 		.4byte	.LFE65-.Ltext0
 2812 020e 0200     		.2byte	0x2
 2813 0210 7D       		.byte	0x7d
 2814 0211 28       		.sleb128 40
ARM GAS  /tmp/cc10d3Tm.s 			page 70


 2815 0212 00000000 		.4byte	0
 2816 0216 00000000 		.4byte	0
 2817              	.LLST15:
 2818 021a 98020000 		.4byte	.LVL41-.Ltext0
 2819 021e B2020000 		.4byte	.LVL42-.Ltext0
 2820 0222 0100     		.2byte	0x1
 2821 0224 50       		.byte	0x50
 2822 0225 B2020000 		.4byte	.LVL42-.Ltext0
 2823 0229 C4020000 		.4byte	.LVL44-.Ltext0
 2824 022d 0100     		.2byte	0x1
 2825 022f 55       		.byte	0x55
 2826 0230 C4020000 		.4byte	.LVL44-.Ltext0
 2827 0234 14030000 		.4byte	.LVL54-.Ltext0
 2828 0238 0400     		.2byte	0x4
 2829 023a F3       		.byte	0xf3
 2830 023b 01       		.uleb128 0x1
 2831 023c 50       		.byte	0x50
 2832 023d 9F       		.byte	0x9f
 2833 023e 14030000 		.4byte	.LVL54-.Ltext0
 2834 0242 16030000 		.4byte	.LVL55-.Ltext0
 2835 0246 0100     		.2byte	0x1
 2836 0248 50       		.byte	0x50
 2837 0249 16030000 		.4byte	.LVL55-.Ltext0
 2838 024d 1A030000 		.4byte	.LVL56-.Ltext0
 2839 0251 0100     		.2byte	0x1
 2840 0253 55       		.byte	0x55
 2841 0254 1A030000 		.4byte	.LVL56-.Ltext0
 2842 0258 24030000 		.4byte	.LFE65-.Ltext0
 2843 025c 0400     		.2byte	0x4
 2844 025e F3       		.byte	0xf3
 2845 025f 01       		.uleb128 0x1
 2846 0260 50       		.byte	0x50
 2847 0261 9F       		.byte	0x9f
 2848 0262 00000000 		.4byte	0
 2849 0266 00000000 		.4byte	0
 2850              	.LLST16:
 2851 026a 98020000 		.4byte	.LVL41-.Ltext0
 2852 026e B7020000 		.4byte	.LVL43-1-.Ltext0
 2853 0272 0100     		.2byte	0x1
 2854 0274 51       		.byte	0x51
 2855 0275 B7020000 		.4byte	.LVL43-1-.Ltext0
 2856 0279 14030000 		.4byte	.LVL54-.Ltext0
 2857 027d 0100     		.2byte	0x1
 2858 027f 57       		.byte	0x57
 2859 0280 14030000 		.4byte	.LVL54-.Ltext0
 2860 0284 24030000 		.4byte	.LFE65-.Ltext0
 2861 0288 0100     		.2byte	0x1
 2862 028a 51       		.byte	0x51
 2863 028b 00000000 		.4byte	0
 2864 028f 00000000 		.4byte	0
 2865              	.LLST17:
 2866 0293 98020000 		.4byte	.LVL41-.Ltext0
 2867 0297 B7020000 		.4byte	.LVL43-1-.Ltext0
 2868 029b 0600     		.2byte	0x6
 2869 029d 52       		.byte	0x52
 2870 029e 93       		.byte	0x93
 2871 029f 04       		.uleb128 0x4
ARM GAS  /tmp/cc10d3Tm.s 			page 71


 2872 02a0 53       		.byte	0x53
 2873 02a1 93       		.byte	0x93
 2874 02a2 04       		.uleb128 0x4
 2875 02a3 B7020000 		.4byte	.LVL43-1-.Ltext0
 2876 02a7 14030000 		.4byte	.LVL54-.Ltext0
 2877 02ab 0600     		.2byte	0x6
 2878 02ad F3       		.byte	0xf3
 2879 02ae 03       		.uleb128 0x3
 2880 02af F5       		.byte	0xf5
 2881 02b0 02       		.uleb128 0x2
 2882 02b1 25       		.uleb128 0x25
 2883 02b2 9F       		.byte	0x9f
 2884 02b3 14030000 		.4byte	.LVL54-.Ltext0
 2885 02b7 24030000 		.4byte	.LFE65-.Ltext0
 2886 02bb 0600     		.2byte	0x6
 2887 02bd 52       		.byte	0x52
 2888 02be 93       		.byte	0x93
 2889 02bf 04       		.uleb128 0x4
 2890 02c0 53       		.byte	0x53
 2891 02c1 93       		.byte	0x93
 2892 02c2 04       		.uleb128 0x4
 2893 02c3 00000000 		.4byte	0
 2894 02c7 00000000 		.4byte	0
 2895              	.LLST18:
 2896 02cb 98020000 		.4byte	.LVL41-.Ltext0
 2897 02cf B8020000 		.4byte	.LVL43-.Ltext0
 2898 02d3 0200     		.2byte	0x2
 2899 02d5 31       		.byte	0x31
 2900 02d6 9F       		.byte	0x9f
 2901 02d7 B8020000 		.4byte	.LVL43-.Ltext0
 2902 02db C6020000 		.4byte	.LVL45-.Ltext0
 2903 02df 0100     		.2byte	0x1
 2904 02e1 50       		.byte	0x50
 2905 02e2 C6020000 		.4byte	.LVL45-.Ltext0
 2906 02e6 F6020000 		.4byte	.LVL50-.Ltext0
 2907 02ea 0200     		.2byte	0x2
 2908 02ec 30       		.byte	0x30
 2909 02ed 9F       		.byte	0x9f
 2910 02ee F6020000 		.4byte	.LVL50-.Ltext0
 2911 02f2 04030000 		.4byte	.LVL51-.Ltext0
 2912 02f6 0100     		.2byte	0x1
 2913 02f8 50       		.byte	0x50
 2914 02f9 04030000 		.4byte	.LVL51-.Ltext0
 2915 02fd 0C030000 		.4byte	.LVL53-.Ltext0
 2916 0301 0200     		.2byte	0x2
 2917 0303 30       		.byte	0x30
 2918 0304 9F       		.byte	0x9f
 2919 0305 0C030000 		.4byte	.LVL53-.Ltext0
 2920 0309 14030000 		.4byte	.LVL54-.Ltext0
 2921 030d 0100     		.2byte	0x1
 2922 030f 50       		.byte	0x50
 2923 0310 14030000 		.4byte	.LVL54-.Ltext0
 2924 0314 24030000 		.4byte	.LFE65-.Ltext0
 2925 0318 0200     		.2byte	0x2
 2926 031a 31       		.byte	0x31
 2927 031b 9F       		.byte	0x9f
 2928 031c 00000000 		.4byte	0
ARM GAS  /tmp/cc10d3Tm.s 			page 72


 2929 0320 00000000 		.4byte	0
 2930              	.LLST19:
 2931 0324 98020000 		.4byte	.LVL41-.Ltext0
 2932 0328 CE020000 		.4byte	.LVL46-.Ltext0
 2933 032c 0200     		.2byte	0x2
 2934 032e 30       		.byte	0x30
 2935 032f 9F       		.byte	0x9f
 2936 0330 CE020000 		.4byte	.LVL46-.Ltext0
 2937 0334 04030000 		.4byte	.LVL51-.Ltext0
 2938 0338 0100     		.2byte	0x1
 2939 033a 56       		.byte	0x56
 2940 033b 04030000 		.4byte	.LVL51-.Ltext0
 2941 033f 06030000 		.4byte	.LVL52-.Ltext0
 2942 0343 0300     		.2byte	0x3
 2943 0345 76       		.byte	0x76
 2944 0346 01       		.sleb128 1
 2945 0347 9F       		.byte	0x9f
 2946 0348 14030000 		.4byte	.LVL54-.Ltext0
 2947 034c 24030000 		.4byte	.LFE65-.Ltext0
 2948 0350 0200     		.2byte	0x2
 2949 0352 30       		.byte	0x30
 2950 0353 9F       		.byte	0x9f
 2951 0354 00000000 		.4byte	0
 2952 0358 00000000 		.4byte	0
 2953              	.LLST20:
 2954 035c 98020000 		.4byte	.LVL41-.Ltext0
 2955 0360 C6020000 		.4byte	.LVL45-.Ltext0
 2956 0364 0200     		.2byte	0x2
 2957 0366 30       		.byte	0x30
 2958 0367 9F       		.byte	0x9f
 2959 0368 C6020000 		.4byte	.LVL45-.Ltext0
 2960 036c 0C030000 		.4byte	.LVL53-.Ltext0
 2961 0370 0100     		.2byte	0x1
 2962 0372 55       		.byte	0x55
 2963 0373 14030000 		.4byte	.LVL54-.Ltext0
 2964 0377 24030000 		.4byte	.LFE65-.Ltext0
 2965 037b 0200     		.2byte	0x2
 2966 037d 30       		.byte	0x30
 2967 037e 9F       		.byte	0x9f
 2968 037f 00000000 		.4byte	0
 2969 0383 00000000 		.4byte	0
 2970              	.LLST21:
 2971 0387 E2020000 		.4byte	.LVL48-.Ltext0
 2972 038b EE020000 		.4byte	.LVL49-.Ltext0
 2973 038f 0100     		.2byte	0x1
 2974 0391 50       		.byte	0x50
 2975 0392 00000000 		.4byte	0
 2976 0396 00000000 		.4byte	0
 2977              	.LLST22:
 2978 039a E2020000 		.4byte	.LVL48-.Ltext0
 2979 039e EE020000 		.4byte	.LVL49-.Ltext0
 2980 03a2 0800     		.2byte	0x8
 2981 03a4 76       		.byte	0x76
 2982 03a5 00       		.sleb128 0
 2983 03a6 31       		.byte	0x31
 2984 03a7 24       		.byte	0x24
 2985 03a8 77       		.byte	0x77
ARM GAS  /tmp/cc10d3Tm.s 			page 73


 2986 03a9 00       		.sleb128 0
 2987 03aa 22       		.byte	0x22
 2988 03ab 9F       		.byte	0x9f
 2989 03ac 00000000 		.4byte	0
 2990 03b0 00000000 		.4byte	0
 2991              		.section	.debug_aranges,"",%progbits
 2992 0000 1C000000 		.4byte	0x1c
 2993 0004 0200     		.2byte	0x2
 2994 0006 00000000 		.4byte	.Ldebug_info0
 2995 000a 04       		.byte	0x4
 2996 000b 00       		.byte	0
 2997 000c 0000     		.2byte	0
 2998 000e 0000     		.2byte	0
 2999 0010 00000000 		.4byte	.Ltext0
 3000 0014 24030000 		.4byte	.Letext0-.Ltext0
 3001 0018 00000000 		.4byte	0
 3002 001c 00000000 		.4byte	0
 3003              		.section	.debug_ranges,"",%progbits
 3004              	.Ldebug_ranges0:
 3005 0000 7C000000 		.4byte	.LBB4-.Ltext0
 3006 0004 84000000 		.4byte	.LBE4-.Ltext0
 3007 0008 86000000 		.4byte	.LBB7-.Ltext0
 3008 000c 90000000 		.4byte	.LBE7-.Ltext0
 3009 0010 00000000 		.4byte	0
 3010 0014 00000000 		.4byte	0
 3011 0018 88010000 		.4byte	.LBB10-.Ltext0
 3012 001c 8E010000 		.4byte	.LBE10-.Ltext0
 3013 0020 90010000 		.4byte	.LBB13-.Ltext0
 3014 0024 9A010000 		.4byte	.LBE13-.Ltext0
 3015 0028 00000000 		.4byte	0
 3016 002c 00000000 		.4byte	0
 3017 0030 C8020000 		.4byte	.LBB16-.Ltext0
 3018 0034 CE020000 		.4byte	.LBE16-.Ltext0
 3019 0038 D8020000 		.4byte	.LBB20-.Ltext0
 3020 003c E0020000 		.4byte	.LBE20-.Ltext0
 3021 0040 E2020000 		.4byte	.LBB21-.Ltext0
 3022 0044 EE020000 		.4byte	.LBE21-.Ltext0
 3023 0048 00000000 		.4byte	0
 3024 004c 00000000 		.4byte	0
 3025              		.section	.debug_line,"",%progbits
 3026              	.Ldebug_line0:
 3027 0000 04030000 		.section	.debug_str,"MS",%progbits,1
 3027      02005301 
 3027      00000201 
 3027      FB0E0D00 
 3027      01010101 
 3028              	.LASF43:
 3029 0000 464C4153 		.ascii	"FLASH_PROC_PROGRAMWORD\000"
 3029      485F5052 
 3029      4F435F50 
 3029      524F4752 
 3029      414D574F 
 3030              	.LASF32:
 3031 0017 48414C5F 		.ascii	"HAL_ERROR\000"
 3031      4552524F 
 3031      5200
 3032              	.LASF36:
ARM GAS  /tmp/cc10d3Tm.s 			page 74


 3033 0021 48414C5F 		.ascii	"HAL_UNLOCKED\000"
 3033      554E4C4F 
 3033      434B4544 
 3033      00
 3034              	.LASF45:
 3035 002e 464C4153 		.ascii	"FLASH_ProcedureTypeDef\000"
 3035      485F5072 
 3035      6F636564 
 3035      75726554 
 3035      79706544 
 3036              	.LASF34:
 3037 0045 48414C5F 		.ascii	"HAL_TIMEOUT\000"
 3037      54494D45 
 3037      4F555400 
 3038              	.LASF21:
 3039 0051 53797374 		.ascii	"SystemCoreClock\000"
 3039      656D436F 
 3039      7265436C 
 3039      6F636B00 
 3040              	.LASF86:
 3041 0061 464C4153 		.ascii	"FLASH_SetErrorCode\000"
 3041      485F5365 
 3041      74457272 
 3041      6F72436F 
 3041      646500
 3042              	.LASF73:
 3043 0074 61646472 		.ascii	"addresstmp\000"
 3043      65737374 
 3043      6D7000
 3044              	.LASF81:
 3045 007f 48414C5F 		.ascii	"HAL_NVIC_SystemReset\000"
 3045      4E564943 
 3045      5F537973 
 3045      74656D52 
 3045      65736574 
 3046              	.LASF71:
 3047 0094 48414C5F 		.ascii	"HAL_FLASH_OB_Launch\000"
 3047      464C4153 
 3047      485F4F42 
 3047      5F4C6175 
 3047      6E636800 
 3048              	.LASF78:
 3049 00a8 696E6465 		.ascii	"index\000"
 3049      7800
 3050              	.LASF19:
 3051 00ae 73697A65 		.ascii	"sizetype\000"
 3051      74797065 
 3051      00
 3052              	.LASF65:
 3053 00b7 48414C5F 		.ascii	"HAL_FLASH_OB_Unlock\000"
 3053      464C4153 
 3053      485F4F42 
 3053      5F556E6C 
 3053      6F636B00 
 3054              	.LASF84:
 3055 00cb 7372632F 		.ascii	"src/stm32f1xx_hal_flash.c\000"
 3055      73746D33 
ARM GAS  /tmp/cc10d3Tm.s 			page 75


 3055      32663178 
 3055      785F6861 
 3055      6C5F666C 
 3056              	.LASF33:
 3057 00e5 48414C5F 		.ascii	"HAL_BUSY\000"
 3057      42555359 
 3057      00
 3058              	.LASF77:
 3059 00ee 48414C5F 		.ascii	"HAL_FLASH_Program\000"
 3059      464C4153 
 3059      485F5072 
 3059      6F677261 
 3059      6D00
 3060              	.LASF80:
 3061 0100 48414C5F 		.ascii	"HAL_GetTick\000"
 3061      47657454 
 3061      69636B00 
 3062              	.LASF74:
 3063 010c 48414C5F 		.ascii	"HAL_FLASH_Program_IT\000"
 3063      464C4153 
 3063      485F5072 
 3063      6F677261 
 3063      6D5F4954 
 3064              	.LASF48:
 3065 0121 41646472 		.ascii	"Address\000"
 3065      65737300 
 3066              	.LASF5:
 3067 0129 5F5F7569 		.ascii	"__uint16_t\000"
 3067      6E743136 
 3067      5F7400
 3068              	.LASF79:
 3069 0134 6E626974 		.ascii	"nbiterations\000"
 3069      65726174 
 3069      696F6E73 
 3069      00
 3070              	.LASF58:
 3071 0141 75775469 		.ascii	"uwTickPrio\000"
 3071      636B5072 
 3071      696F00
 3072              	.LASF83:
 3073 014c 474E5520 		.ascii	"GNU C11 6.3.1 20170620 -mcpu=cortex-m3 -mthumb -g -"
 3073      43313120 
 3073      362E332E 
 3073      31203230 
 3073      31373036 
 3074 017f 67647761 		.ascii	"gdwarf-2 -Os -fomit-frame-pointer\000"
 3074      72662D32 
 3074      202D4F73 
 3074      202D666F 
 3074      6D69742D 
 3075              	.LASF31:
 3076 01a1 48414C5F 		.ascii	"HAL_OK\000"
 3076      4F4B00
 3077              	.LASF14:
 3078 01a8 75696E74 		.ascii	"uint8_t\000"
 3078      385F7400 
 3079              	.LASF76:
ARM GAS  /tmp/cc10d3Tm.s 			page 76


 3080 01b0 54797065 		.ascii	"TypeProgram\000"
 3080      50726F67 
 3080      72616D00 
 3081              	.LASF42:
 3082 01bc 464C4153 		.ascii	"FLASH_PROC_PROGRAMHALFWORD\000"
 3082      485F5052 
 3082      4F435F50 
 3082      524F4752 
 3082      414D4841 
 3083              	.LASF3:
 3084 01d7 73686F72 		.ascii	"short int\000"
 3084      7420696E 
 3084      7400
 3085              	.LASF63:
 3086 01e1 48414C5F 		.ascii	"HAL_FLASH_GetError\000"
 3086      464C4153 
 3086      485F4765 
 3086      74457272 
 3086      6F7200
 3087              	.LASF25:
 3088 01f4 4F50544B 		.ascii	"OPTKEYR\000"
 3088      45595200 
 3089              	.LASF11:
 3090 01fc 6C6F6E67 		.ascii	"long long int\000"
 3090      206C6F6E 
 3090      6720696E 
 3090      7400
 3091              	.LASF8:
 3092 020a 6C6F6E67 		.ascii	"long int\000"
 3092      20696E74 
 3092      00
 3093              	.LASF50:
 3094 0213 4C6F636B 		.ascii	"Lock\000"
 3094      00
 3095              	.LASF44:
 3096 0218 464C4153 		.ascii	"FLASH_PROC_PROGRAMDOUBLEWORD\000"
 3096      485F5052 
 3096      4F435F50 
 3096      524F4752 
 3096      414D444F 
 3097              	.LASF4:
 3098 0235 5F5F7569 		.ascii	"__uint8_t\000"
 3098      6E74385F 
 3098      7400
 3099              	.LASF27:
 3100 023f 57525052 		.ascii	"WRPR\000"
 3100      00
 3101              	.LASF18:
 3102 0244 75696E74 		.ascii	"uint64_t\000"
 3102      36345F74 
 3102      00
 3103              	.LASF49:
 3104 024d 44617461 		.ascii	"Data\000"
 3104      00
 3105              	.LASF35:
 3106 0252 48414C5F 		.ascii	"HAL_StatusTypeDef\000"
 3106      53746174 
ARM GAS  /tmp/cc10d3Tm.s 			page 77


 3106      75735479 
 3106      70654465 
 3106      6600
 3107              	.LASF53:
 3108 0264 48414C5F 		.ascii	"HAL_TICK_FREQ_10HZ\000"
 3108      5449434B 
 3108      5F465245 
 3108      515F3130 
 3108      485A00
 3109              	.LASF52:
 3110 0277 464C4153 		.ascii	"FLASH_ProcessTypeDef\000"
 3110      485F5072 
 3110      6F636573 
 3110      73547970 
 3110      65446566 
 3111              	.LASF24:
 3112 028c 4B455952 		.ascii	"KEYR\000"
 3112      00
 3113              	.LASF30:
 3114 0291 6C6F6E67 		.ascii	"long double\000"
 3114      20646F75 
 3114      626C6500 
 3115              	.LASF46:
 3116 029d 50726F63 		.ascii	"ProcedureOnGoing\000"
 3116      65647572 
 3116      654F6E47 
 3116      6F696E67 
 3116      00
 3117              	.LASF2:
 3118 02ae 756E7369 		.ascii	"unsigned char\000"
 3118      676E6564 
 3118      20636861 
 3118      7200
 3119              	.LASF85:
 3120 02bc 2F686F6D 		.ascii	"/home/berndoj/git/stm32tctst/lib/stm32f1hal\000"
 3120      652F6265 
 3120      726E646F 
 3120      6A2F6769 
 3120      742F7374 
 3121              	.LASF23:
 3122 02e8 41504250 		.ascii	"APBPrescTable\000"
 3122      72657363 
 3122      5461626C 
 3122      6500
 3123              	.LASF1:
 3124 02f6 7369676E 		.ascii	"signed char\000"
 3124      65642063 
 3124      68617200 
 3125              	.LASF61:
 3126 0302 666C6167 		.ascii	"flags\000"
 3126      7300
 3127              	.LASF0:
 3128 0308 6C6F6E67 		.ascii	"long long unsigned int\000"
 3128      206C6F6E 
 3128      6720756E 
 3128      7369676E 
 3128      65642069 
ARM GAS  /tmp/cc10d3Tm.s 			page 78


 3129              	.LASF17:
 3130 031f 75696E74 		.ascii	"uint32_t\000"
 3130      33325F74 
 3130      00
 3131              	.LASF59:
 3132 0328 75775469 		.ascii	"uwTickFreq\000"
 3132      636B4672 
 3132      657100
 3133              	.LASF13:
 3134 0333 756E7369 		.ascii	"unsigned int\000"
 3134      676E6564 
 3134      20696E74 
 3134      00
 3135              	.LASF15:
 3136 0340 75696E74 		.ascii	"uint16_t\000"
 3136      31365F74 
 3136      00
 3137              	.LASF89:
 3138 0349 48414C5F 		.ascii	"HAL_FLASH_EndOfOperationCallback\000"
 3138      464C4153 
 3138      485F456E 
 3138      644F664F 
 3138      70657261 
 3139              	.LASF57:
 3140 036a 48414C5F 		.ascii	"HAL_TickFreqTypeDef\000"
 3140      5469636B 
 3140      46726571 
 3140      54797065 
 3140      44656600 
 3141              	.LASF55:
 3142 037e 48414C5F 		.ascii	"HAL_TICK_FREQ_1KHZ\000"
 3142      5449434B 
 3142      5F465245 
 3142      515F314B 
 3142      485A00
 3143              	.LASF41:
 3144 0391 464C4153 		.ascii	"FLASH_PROC_MASSERASE\000"
 3144      485F5052 
 3144      4F435F4D 
 3144      41535345 
 3144      52415345 
 3145              	.LASF69:
 3146 03a6 73746174 		.ascii	"status\000"
 3146      757300
 3147              	.LASF72:
 3148 03ad 48414C5F 		.ascii	"HAL_FLASH_IRQHandler\000"
 3148      464C4153 
 3148      485F4952 
 3148      5148616E 
 3148      646C6572 
 3149              	.LASF6:
 3150 03c2 73686F72 		.ascii	"short unsigned int\000"
 3150      7420756E 
 3150      7369676E 
 3150      65642069 
 3150      6E7400
 3151              	.LASF75:
ARM GAS  /tmp/cc10d3Tm.s 			page 79


 3152 03d5 54696D65 		.ascii	"Timeout\000"
 3152      6F757400 
 3153              	.LASF66:
 3154 03dd 48414C5F 		.ascii	"HAL_FLASH_Lock\000"
 3154      464C4153 
 3154      485F4C6F 
 3154      636B00
 3155              	.LASF16:
 3156 03ec 696E7433 		.ascii	"int32_t\000"
 3156      325F7400 
 3157              	.LASF70:
 3158 03f4 52657475 		.ascii	"ReturnValue\000"
 3158      726E5661 
 3158      6C756500 
 3159              	.LASF54:
 3160 0400 48414C5F 		.ascii	"HAL_TICK_FREQ_100HZ\000"
 3160      5449434B 
 3160      5F465245 
 3160      515F3130 
 3160      30485A00 
 3161              	.LASF12:
 3162 0414 5F5F7569 		.ascii	"__uint64_t\000"
 3162      6E743634 
 3162      5F7400
 3163              	.LASF37:
 3164 041f 48414C5F 		.ascii	"HAL_LOCKED\000"
 3164      4C4F434B 
 3164      454400
 3165              	.LASF64:
 3166 042a 48414C5F 		.ascii	"HAL_FLASH_OB_Lock\000"
 3166      464C4153 
 3166      485F4F42 
 3166      5F4C6F63 
 3166      6B00
 3167              	.LASF22:
 3168 043c 41484250 		.ascii	"AHBPrescTable\000"
 3168      72657363 
 3168      5461626C 
 3168      6500
 3169              	.LASF10:
 3170 044a 6C6F6E67 		.ascii	"long unsigned int\000"
 3170      20756E73 
 3170      69676E65 
 3170      6420696E 
 3170      7400
 3171              	.LASF40:
 3172 045c 464C4153 		.ascii	"FLASH_PROC_PAGEERASE\000"
 3172      485F5052 
 3172      4F435F50 
 3172      41474545 
 3172      52415345 
 3173              	.LASF9:
 3174 0471 5F5F7569 		.ascii	"__uint32_t\000"
 3174      6E743332 
 3174      5F7400
 3175              	.LASF7:
 3176 047c 5F5F696E 		.ascii	"__int32_t\000"
ARM GAS  /tmp/cc10d3Tm.s 			page 80


 3176      7433325F 
 3176      7400
 3177              	.LASF29:
 3178 0486 52455345 		.ascii	"RESET\000"
 3178      5400
 3179              	.LASF88:
 3180 048c 48414C5F 		.ascii	"HAL_FLASH_OperationErrorCallback\000"
 3180      464C4153 
 3180      485F4F70 
 3180      65726174 
 3180      696F6E45 
 3181              	.LASF68:
 3182 04ad 48414C5F 		.ascii	"HAL_FLASH_Unlock\000"
 3182      464C4153 
 3182      485F556E 
 3182      6C6F636B 
 3182      00
 3183              	.LASF62:
 3184 04be 7469636B 		.ascii	"tickstart\000"
 3184      73746172 
 3184      7400
 3185              	.LASF39:
 3186 04c8 464C4153 		.ascii	"FLASH_PROC_NONE\000"
 3186      485F5052 
 3186      4F435F4E 
 3186      4F4E4500 
 3187              	.LASF56:
 3188 04d8 48414C5F 		.ascii	"HAL_TICK_FREQ_DEFAULT\000"
 3188      5449434B 
 3188      5F465245 
 3188      515F4445 
 3188      4641554C 
 3189              	.LASF26:
 3190 04ee 52455345 		.ascii	"RESERVED\000"
 3190      52564544 
 3190      00
 3191              	.LASF28:
 3192 04f7 464C4153 		.ascii	"FLASH_TypeDef\000"
 3192      485F5479 
 3192      70654465 
 3192      6600
 3193              	.LASF67:
 3194 0505 464C4153 		.ascii	"FLASH_WaitForLastOperation\000"
 3194      485F5761 
 3194      6974466F 
 3194      724C6173 
 3194      744F7065 
 3195              	.LASF20:
 3196 0520 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3196      52784275 
 3196      66666572 
 3196      00
 3197              	.LASF47:
 3198 052d 44617461 		.ascii	"DataRemaining\000"
 3198      52656D61 
 3198      696E696E 
 3198      6700
ARM GAS  /tmp/cc10d3Tm.s 			page 81


 3199              	.LASF87:
 3200 053b 464C4153 		.ascii	"FLASH_Program_HalfWord\000"
 3200      485F5072 
 3200      6F677261 
 3200      6D5F4861 
 3200      6C66576F 
 3201              	.LASF38:
 3202 0552 48414C5F 		.ascii	"HAL_LockTypeDef\000"
 3202      4C6F636B 
 3202      54797065 
 3202      44656600 
 3203              	.LASF51:
 3204 0562 4572726F 		.ascii	"ErrorCode\000"
 3204      72436F64 
 3204      6500
 3205              	.LASF82:
 3206 056c 464C4153 		.ascii	"FLASH_PageErase\000"
 3206      485F5061 
 3206      67654572 
 3206      61736500 
 3207              	.LASF60:
 3208 057c 70466C61 		.ascii	"pFlash\000"
 3208      736800
 3209              		.ident	"GCC: (15:6.3.1+svn253039-1build1) 6.3.1 20170620"
ARM GAS  /tmp/cc10d3Tm.s 			page 82


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_flash.c
     /tmp/cc10d3Tm.s:69     .text:0000000000000000 $t
     /tmp/cc10d3Tm.s:75     .text:0000000000000000 FLASH_SetErrorCode
     /tmp/cc10d3Tm.s:134    .text:0000000000000048 $d
                            *COM*:0000000000000020 pFlash
     /tmp/cc10d3Tm.s:139    .text:0000000000000050 $t
     /tmp/cc10d3Tm.s:146    .text:0000000000000050 HAL_FLASH_Program_IT
     /tmp/cc10d3Tm.s:247    .text:00000000000000a4 $d
     /tmp/cc10d3Tm.s:252    .text:00000000000000ac $t
     /tmp/cc10d3Tm.s:259    .text:00000000000000ac HAL_FLASH_EndOfOperationCallback
     /tmp/cc10d3Tm.s:276    .text:00000000000000ae HAL_FLASH_OperationErrorCallback
     /tmp/cc10d3Tm.s:295    .text:00000000000000b0 HAL_FLASH_IRQHandler
     /tmp/cc10d3Tm.s:513    .text:00000000000001bc $d
     /tmp/cc10d3Tm.s:518    .text:00000000000001c4 $t
     /tmp/cc10d3Tm.s:525    .text:00000000000001c4 HAL_FLASH_Unlock
     /tmp/cc10d3Tm.s:555    .text:00000000000001e0 $d
     /tmp/cc10d3Tm.s:560    .text:00000000000001e8 $t
     /tmp/cc10d3Tm.s:567    .text:00000000000001e8 HAL_FLASH_Lock
     /tmp/cc10d3Tm.s:587    .text:00000000000001f8 $d
     /tmp/cc10d3Tm.s:591    .text:00000000000001fc $t
     /tmp/cc10d3Tm.s:598    .text:00000000000001fc HAL_FLASH_OB_Unlock
     /tmp/cc10d3Tm.s:625    .text:0000000000000218 $d
     /tmp/cc10d3Tm.s:630    .text:0000000000000220 $t
     /tmp/cc10d3Tm.s:637    .text:0000000000000220 HAL_FLASH_OB_Lock
     /tmp/cc10d3Tm.s:657    .text:0000000000000230 $d
     /tmp/cc10d3Tm.s:661    .text:0000000000000234 $t
     /tmp/cc10d3Tm.s:668    .text:0000000000000234 HAL_FLASH_OB_Launch
     /tmp/cc10d3Tm.s:688    .text:0000000000000238 HAL_FLASH_GetError
     /tmp/cc10d3Tm.s:703    .text:0000000000000240 $d
     /tmp/cc10d3Tm.s:707    .text:0000000000000244 $t
     /tmp/cc10d3Tm.s:714    .text:0000000000000244 FLASH_WaitForLastOperation
     /tmp/cc10d3Tm.s:800    .text:0000000000000294 $d
     /tmp/cc10d3Tm.s:805    .text:0000000000000298 $t
     /tmp/cc10d3Tm.s:812    .text:0000000000000298 HAL_FLASH_Program
     /tmp/cc10d3Tm.s:943    .text:000000000000031c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
FLASH_PageErase
HAL_NVIC_SystemReset
HAL_GetTick
__aeabi_llsr
