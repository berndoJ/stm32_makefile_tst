ARM GAS  /tmp/cc2ibVgV.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"stm32f1xx_hal_irda.c"
  12              	@ GNU C11 (15:6.3.1+svn253039-1build1) version 6.3.1 20170620 (arm-none-eabi)
  13              	@	compiled by GNU C version 7.2.0, GMP version 6.1.2, MPFR version 4.0.1-rc1, MPC version 1.1.0, is
  14              	@ warning: MPFR header version 4.0.1-rc1 differs from library version 4.0.1.
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I ./inc -I ./inc/Legacy -I ../cmsisstm32f1xx/inc
  17              	@ -I ../cmsiscore/inc -imultilib thumb/v7-m -D__USES_INITFINI__
  18              	@ -D STM32F103x6 -D RUN_FROM_FLASH=1 -D __c src/stm32f1xx_hal_irda.c
  19              	@ -mcpu=cortex-m3 -mthumb -auxbase-strip bin/stm32f1xx_hal_irda.o -g
  20              	@ -gdwarf-2 -Os -Wall -fomit-frame-pointer -fverbose-asm
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffunction-cse -fgcse
  32              	@ -fgcse-lm -fgnu-runtime -fgnu-unique -fguess-branch-probability
  33              	@ -fhoist-adjacent-loads -fident -fif-conversion -fif-conversion2
  34              	@ -findirect-inlining -finline -finline-atomics -finline-functions
  35              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  36              	@ -fipa-cp-alignment -fipa-icf -fipa-icf-functions -fipa-icf-variables
  37              	@ -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra
  38              	@ -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  39              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  40              	@ -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  41              	@ -fmath-errno -fmerge-constants -fmerge-debug-strings
  42              	@ -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  43              	@ -fpartial-inlining -fpeephole -fpeephole2 -fplt -fprefetch-loop-arrays
  44              	@ -freg-struct-return -freorder-blocks -freorder-functions
  45              	@ -frerun-cse-after-loop -fsched-critical-path-heuristic
  46              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  47              	@ -fsched-last-insn-heuristic -fsched-pressure -fsched-rank-heuristic
  48              	@ -fsched-spec -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  49              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  50              	@ -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types
  51              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstrict-aliasing
  52              	@ -fstrict-overflow -fstrict-volatile-bitfields -fsync-libcalls
  53              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  54              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  55              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  56              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  57              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
ARM GAS  /tmp/cc2ibVgV.s 			page 2


  58              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  59              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  60              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  61              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  62              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  63              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  64              	@ -munaligned-access -mvectorize-with-neon-quad
  65              	
  66              		.text
  67              	.Ltext0:
  68              		.cfi_sections	.debug_frame
  69              		.align	1
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu softvfp
  74              		.type	IRDA_EndRxTransfer, %function
  75              	IRDA_EndRxTransfer:
  76              	.LFB102:
  77              		.file 1 "src/stm32f1xx_hal_irda.c"
   1:src/stm32f1xx_hal_irda.c **** /**
   2:src/stm32f1xx_hal_irda.c ****   ******************************************************************************
   3:src/stm32f1xx_hal_irda.c ****   * @file    stm32f1xx_hal_irda.c
   4:src/stm32f1xx_hal_irda.c ****   * @author  MCD Application Team
   5:src/stm32f1xx_hal_irda.c ****   * @brief   IRDA HAL module driver.
   6:src/stm32f1xx_hal_irda.c ****   *          This file provides firmware functions to manage the following
   7:src/stm32f1xx_hal_irda.c ****   *          functionalities of the IrDA SIR ENDEC block (IrDA):
   8:src/stm32f1xx_hal_irda.c ****   *           + Initialization and de-initialization functions
   9:src/stm32f1xx_hal_irda.c ****   *           + IO operation functions
  10:src/stm32f1xx_hal_irda.c ****   *           + Peripheral Control functions
  11:src/stm32f1xx_hal_irda.c ****   *           + Peripheral State and Errors functions
  12:src/stm32f1xx_hal_irda.c ****   @verbatim
  13:src/stm32f1xx_hal_irda.c ****   ==============================================================================
  14:src/stm32f1xx_hal_irda.c ****                         ##### How to use this driver #####
  15:src/stm32f1xx_hal_irda.c ****   ==============================================================================
  16:src/stm32f1xx_hal_irda.c ****   [..]
  17:src/stm32f1xx_hal_irda.c ****     The IRDA HAL driver can be used as follows:
  18:src/stm32f1xx_hal_irda.c **** 
  19:src/stm32f1xx_hal_irda.c ****     (#) Declare a IRDA_HandleTypeDef handle structure (eg. IRDA_HandleTypeDef hirda).
  20:src/stm32f1xx_hal_irda.c ****     (#) Initialize the IRDA low level resources by implementing the HAL_IRDA_MspInit() API:
  21:src/stm32f1xx_hal_irda.c ****         (##) Enable the USARTx interface clock.
  22:src/stm32f1xx_hal_irda.c ****         (##) IRDA pins configuration:
  23:src/stm32f1xx_hal_irda.c ****             (+++) Enable the clock for the IRDA GPIOs.
  24:src/stm32f1xx_hal_irda.c ****             (+++) Configure IRDA pins as alternate function pull-up.
  25:src/stm32f1xx_hal_irda.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_IRDA_Transmit_IT()
  26:src/stm32f1xx_hal_irda.c ****              and HAL_IRDA_Receive_IT() APIs):
  27:src/stm32f1xx_hal_irda.c ****             (+++) Configure the USARTx interrupt priority.
  28:src/stm32f1xx_hal_irda.c ****             (+++) Enable the NVIC USART IRQ handle.
  29:src/stm32f1xx_hal_irda.c ****         (##) DMA Configuration if you need to use DMA process (HAL_IRDA_Transmit_DMA()
  30:src/stm32f1xx_hal_irda.c ****              and HAL_IRDA_Receive_DMA() APIs):
  31:src/stm32f1xx_hal_irda.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  32:src/stm32f1xx_hal_irda.c ****             (+++) Enable the DMAx interface clock.
  33:src/stm32f1xx_hal_irda.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  34:src/stm32f1xx_hal_irda.c ****             (+++) Configure the DMA Tx/Rx channel.
  35:src/stm32f1xx_hal_irda.c ****             (+++) Associate the initialized DMA handle to the IRDA DMA Tx/Rx handle.
  36:src/stm32f1xx_hal_irda.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  37:src/stm32f1xx_hal_irda.c ****             (+++) Configure the IRDAx interrupt priority and enable the NVIC USART IRQ handle
ARM GAS  /tmp/cc2ibVgV.s 			page 3


  38:src/stm32f1xx_hal_irda.c ****                   (used for last byte sending completion detection in DMA non circular mode)
  39:src/stm32f1xx_hal_irda.c **** 
  40:src/stm32f1xx_hal_irda.c ****     (#) Program the Baud Rate, Word Length, Parity, IrDA Mode, Prescaler
  41:src/stm32f1xx_hal_irda.c ****         and Mode(Receiver/Transmitter) in the hirda Init structure.
  42:src/stm32f1xx_hal_irda.c **** 
  43:src/stm32f1xx_hal_irda.c ****     (#) Initialize the IRDA registers by calling the HAL_IRDA_Init() API:
  44:src/stm32f1xx_hal_irda.c ****         (++) This API configures also the low level Hardware GPIO, CLOCK, CORTEX...etc)
  45:src/stm32f1xx_hal_irda.c ****              by calling the customized HAL_IRDA_MspInit() API.
  46:src/stm32f1xx_hal_irda.c **** 
  47:src/stm32f1xx_hal_irda.c ****          -@@- The specific IRDA interrupts (Transmission complete interrupt,
  48:src/stm32f1xx_hal_irda.c ****              RXNE interrupt and Error Interrupts) will be managed using the macros
  49:src/stm32f1xx_hal_irda.c ****              __HAL_IRDA_ENABLE_IT() and __HAL_IRDA_DISABLE_IT() inside the transmit and receive pro
  50:src/stm32f1xx_hal_irda.c **** 
  51:src/stm32f1xx_hal_irda.c ****     (#) Three operation modes are available within this driver :
  52:src/stm32f1xx_hal_irda.c **** 
  53:src/stm32f1xx_hal_irda.c ****     *** Polling mode IO operation ***
  54:src/stm32f1xx_hal_irda.c ****     =================================
  55:src/stm32f1xx_hal_irda.c ****     [..]
  56:src/stm32f1xx_hal_irda.c ****       (+) Send an amount of data in blocking mode using HAL_IRDA_Transmit()
  57:src/stm32f1xx_hal_irda.c ****       (+) Receive an amount of data in blocking mode using HAL_IRDA_Receive()
  58:src/stm32f1xx_hal_irda.c **** 
  59:src/stm32f1xx_hal_irda.c ****     *** Interrupt mode IO operation ***
  60:src/stm32f1xx_hal_irda.c ****     ===================================
  61:src/stm32f1xx_hal_irda.c ****     [..]
  62:src/stm32f1xx_hal_irda.c ****       (+) Send an amount of data in non blocking mode using HAL_IRDA_Transmit_IT()
  63:src/stm32f1xx_hal_irda.c ****       (+) At transmission end of transfer HAL_IRDA_TxCpltCallback is executed and user can
  64:src/stm32f1xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_TxCpltCallback
  65:src/stm32f1xx_hal_irda.c ****       (+) Receive an amount of data in non blocking mode using HAL_IRDA_Receive_IT()
  66:src/stm32f1xx_hal_irda.c ****       (+) At reception end of transfer HAL_IRDA_RxCpltCallback is executed and user can
  67:src/stm32f1xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_RxCpltCallback
  68:src/stm32f1xx_hal_irda.c ****       (+) In case of transfer Error, HAL_IRDA_ErrorCallback() function is executed and user can
  69:src/stm32f1xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_ErrorCallback
  70:src/stm32f1xx_hal_irda.c **** 
  71:src/stm32f1xx_hal_irda.c ****     *** DMA mode IO operation ***
  72:src/stm32f1xx_hal_irda.c ****     =============================
  73:src/stm32f1xx_hal_irda.c ****     [..]
  74:src/stm32f1xx_hal_irda.c ****       (+) Send an amount of data in non blocking mode (DMA) using HAL_IRDA_Transmit_DMA()
  75:src/stm32f1xx_hal_irda.c ****       (+) At transmission end of half transfer HAL_IRDA_TxHalfCpltCallback is executed and user can
  76:src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_TxHalfCpltCallback
  77:src/stm32f1xx_hal_irda.c ****       (+) At transmission end of transfer HAL_IRDA_TxCpltCallback is executed and user can
  78:src/stm32f1xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_TxCpltCallback
  79:src/stm32f1xx_hal_irda.c ****       (+) Receive an amount of data in non blocking mode (DMA) using HAL_IRDA_Receive_DMA()
  80:src/stm32f1xx_hal_irda.c ****       (+) At reception end of half transfer HAL_IRDA_RxHalfCpltCallback is executed and user can
  81:src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_RxHalfCpltCallback
  82:src/stm32f1xx_hal_irda.c ****       (+) At reception end of transfer HAL_IRDA_RxCpltCallback is executed and user can
  83:src/stm32f1xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_RxCpltCallback
  84:src/stm32f1xx_hal_irda.c ****       (+) In case of transfer Error, HAL_IRDA_ErrorCallback() function is executed and user can
  85:src/stm32f1xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_ErrorCallback
  86:src/stm32f1xx_hal_irda.c ****       (+) Pause the DMA Transfer using HAL_IRDA_DMAPause()
  87:src/stm32f1xx_hal_irda.c ****       (+) Resume the DMA Transfer using HAL_IRDA_DMAResume()
  88:src/stm32f1xx_hal_irda.c ****       (+) Stop the DMA Transfer using HAL_IRDA_DMAStop()
  89:src/stm32f1xx_hal_irda.c **** 
  90:src/stm32f1xx_hal_irda.c ****     *** IRDA HAL driver macros list ***
  91:src/stm32f1xx_hal_irda.c ****     ===================================
  92:src/stm32f1xx_hal_irda.c ****     [..]
  93:src/stm32f1xx_hal_irda.c ****       Below the list of most used macros in IRDA HAL driver.
  94:src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/cc2ibVgV.s 			page 4


  95:src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_ENABLE: Enable the IRDA peripheral
  96:src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_DISABLE: Disable the IRDA peripheral
  97:src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_GET_FLAG : Check whether the specified IRDA flag is set or not
  98:src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_CLEAR_FLAG : Clear the specified IRDA pending flag
  99:src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_ENABLE_IT: Enable the specified IRDA interrupt
 100:src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_DISABLE_IT: Disable the specified IRDA interrupt
 101:src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_GET_IT_SOURCE: Check whether the specified IRDA interrupt has occurred or not
 102:src/stm32f1xx_hal_irda.c **** 
 103:src/stm32f1xx_hal_irda.c ****     [..]
 104:src/stm32f1xx_hal_irda.c ****      (@) You can refer to the IRDA HAL driver header file for more useful macros
 105:src/stm32f1xx_hal_irda.c **** 
 106:src/stm32f1xx_hal_irda.c ****     ##### Callback registration #####
 107:src/stm32f1xx_hal_irda.c ****     ==================================
 108:src/stm32f1xx_hal_irda.c **** 
 109:src/stm32f1xx_hal_irda.c ****     [..]
 110:src/stm32f1xx_hal_irda.c ****       The compilation define USE_HAL_IRDA_REGISTER_CALLBACKS when set to 1
 111:src/stm32f1xx_hal_irda.c ****       allows the user to configure dynamically the driver callbacks.
 112:src/stm32f1xx_hal_irda.c **** 
 113:src/stm32f1xx_hal_irda.c ****     [..]
 114:src/stm32f1xx_hal_irda.c ****       Use Function @ref HAL_IRDA_RegisterCallback() to register a user callback.
 115:src/stm32f1xx_hal_irda.c ****       Function @ref HAL_IRDA_RegisterCallback() allows to register following callbacks:
 116:src/stm32f1xx_hal_irda.c ****        (+) TxHalfCpltCallback        : Tx Half Complete Callback.
 117:src/stm32f1xx_hal_irda.c ****        (+) TxCpltCallback            : Tx Complete Callback.
 118:src/stm32f1xx_hal_irda.c ****        (+) RxHalfCpltCallback        : Rx Half Complete Callback.
 119:src/stm32f1xx_hal_irda.c ****        (+) RxCpltCallback            : Rx Complete Callback.
 120:src/stm32f1xx_hal_irda.c ****        (+) ErrorCallback             : Error Callback.
 121:src/stm32f1xx_hal_irda.c ****        (+) AbortCpltCallback         : Abort Complete Callback.
 122:src/stm32f1xx_hal_irda.c ****        (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 123:src/stm32f1xx_hal_irda.c ****        (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 124:src/stm32f1xx_hal_irda.c ****        (+) MspInitCallback           : IRDA MspInit.
 125:src/stm32f1xx_hal_irda.c ****        (+) MspDeInitCallback         : IRDA MspDeInit.
 126:src/stm32f1xx_hal_irda.c ****       This function takes as parameters the HAL peripheral handle, the Callback ID
 127:src/stm32f1xx_hal_irda.c ****       and a pointer to the user callback function.
 128:src/stm32f1xx_hal_irda.c **** 
 129:src/stm32f1xx_hal_irda.c ****     [..]
 130:src/stm32f1xx_hal_irda.c ****       Use function @ref HAL_IRDA_UnRegisterCallback() to reset a callback to the default
 131:src/stm32f1xx_hal_irda.c ****       weak (surcharged) function.
 132:src/stm32f1xx_hal_irda.c ****       @ref HAL_IRDA_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 133:src/stm32f1xx_hal_irda.c ****       and the Callback ID.
 134:src/stm32f1xx_hal_irda.c ****       This function allows to reset following callbacks:
 135:src/stm32f1xx_hal_irda.c ****        (+) TxHalfCpltCallback        : Tx Half Complete Callback.
 136:src/stm32f1xx_hal_irda.c ****        (+) TxCpltCallback            : Tx Complete Callback.
 137:src/stm32f1xx_hal_irda.c ****        (+) RxHalfCpltCallback        : Rx Half Complete Callback.
 138:src/stm32f1xx_hal_irda.c ****        (+) RxCpltCallback            : Rx Complete Callback.
 139:src/stm32f1xx_hal_irda.c ****        (+) ErrorCallback             : Error Callback.
 140:src/stm32f1xx_hal_irda.c ****        (+) AbortCpltCallback         : Abort Complete Callback.
 141:src/stm32f1xx_hal_irda.c ****        (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 142:src/stm32f1xx_hal_irda.c ****        (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 143:src/stm32f1xx_hal_irda.c ****        (+) MspInitCallback           : IRDA MspInit.
 144:src/stm32f1xx_hal_irda.c ****        (+) MspDeInitCallback         : IRDA MspDeInit.
 145:src/stm32f1xx_hal_irda.c **** 
 146:src/stm32f1xx_hal_irda.c ****     [..]
 147:src/stm32f1xx_hal_irda.c ****       By default, after the @ref HAL_IRDA_Init() and when the state is HAL_IRDA_STATE_RESET
 148:src/stm32f1xx_hal_irda.c ****       all callbacks are set to the corresponding weak (surcharged) functions:
 149:src/stm32f1xx_hal_irda.c ****       examples @ref HAL_IRDA_TxCpltCallback(), @ref HAL_IRDA_RxHalfCpltCallback().
 150:src/stm32f1xx_hal_irda.c ****       Exception done for MspInit and MspDeInit functions that are respectively
 151:src/stm32f1xx_hal_irda.c ****       reset to the legacy weak (surcharged) functions in the @ref HAL_IRDA_Init()
ARM GAS  /tmp/cc2ibVgV.s 			page 5


 152:src/stm32f1xx_hal_irda.c ****       and @ref HAL_IRDA_DeInit() only when these callbacks are null (not registered beforehand).
 153:src/stm32f1xx_hal_irda.c ****       If not, MspInit or MspDeInit are not null, the @ref HAL_IRDA_Init() and @ref HAL_IRDA_DeInit(
 154:src/stm32f1xx_hal_irda.c ****       keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 155:src/stm32f1xx_hal_irda.c **** 
 156:src/stm32f1xx_hal_irda.c ****     [..]
 157:src/stm32f1xx_hal_irda.c ****       Callbacks can be registered/unregistered in HAL_IRDA_STATE_READY state only.
 158:src/stm32f1xx_hal_irda.c ****       Exception done MspInit/MspDeInit that can be registered/unregistered
 159:src/stm32f1xx_hal_irda.c ****       in HAL_IRDA_STATE_READY or HAL_IRDA_STATE_RESET state, thus registered (user)
 160:src/stm32f1xx_hal_irda.c ****       MspInit/DeInit callbacks can be used during the Init/DeInit.
 161:src/stm32f1xx_hal_irda.c ****       In that case first register the MspInit/MspDeInit user callbacks
 162:src/stm32f1xx_hal_irda.c ****       using @ref HAL_IRDA_RegisterCallback() before calling @ref HAL_IRDA_DeInit()
 163:src/stm32f1xx_hal_irda.c ****       or @ref HAL_IRDA_Init() function.
 164:src/stm32f1xx_hal_irda.c **** 
 165:src/stm32f1xx_hal_irda.c ****     [..]
 166:src/stm32f1xx_hal_irda.c ****       When The compilation define USE_HAL_IRDA_REGISTER_CALLBACKS is set to 0 or
 167:src/stm32f1xx_hal_irda.c ****       not defined, the callback registration feature is not available
 168:src/stm32f1xx_hal_irda.c ****       and weak (surcharged) callbacks are used.
 169:src/stm32f1xx_hal_irda.c **** 
 170:src/stm32f1xx_hal_irda.c ****   @endverbatim
 171:src/stm32f1xx_hal_irda.c ****      [..]
 172:src/stm32f1xx_hal_irda.c ****        (@) Additionnal remark: If the parity is enabled, then the MSB bit of the data written
 173:src/stm32f1xx_hal_irda.c ****            in the data register is transmitted but is changed by the parity bit.
 174:src/stm32f1xx_hal_irda.c ****            Depending on the frame length defined by the M bit (8-bits or 9-bits),
 175:src/stm32f1xx_hal_irda.c ****            the possible IRDA frame formats are as listed in the following table:
 176:src/stm32f1xx_hal_irda.c ****     +-------------------------------------------------------------+
 177:src/stm32f1xx_hal_irda.c ****     |   M bit |  PCE bit  |            IRDA frame                 |
 178:src/stm32f1xx_hal_irda.c ****     |---------------------|---------------------------------------|
 179:src/stm32f1xx_hal_irda.c ****     |    0    |    0      |    | SB | 8 bit data | 1 STB |        |
 180:src/stm32f1xx_hal_irda.c ****     |---------|-----------|---------------------------------------|
 181:src/stm32f1xx_hal_irda.c ****     |    0    |    1      |    | SB | 7 bit data | PB | 1 STB |   |
 182:src/stm32f1xx_hal_irda.c ****     |---------|-----------|---------------------------------------|
 183:src/stm32f1xx_hal_irda.c ****     |    1    |    0      |    | SB | 9 bit data | 1 STB |        |
 184:src/stm32f1xx_hal_irda.c ****     |---------|-----------|---------------------------------------|
 185:src/stm32f1xx_hal_irda.c ****     |    1    |    1      |    | SB | 8 bit data | PB | 1 STB |   |
 186:src/stm32f1xx_hal_irda.c ****     +-------------------------------------------------------------+
 187:src/stm32f1xx_hal_irda.c ****   ******************************************************************************
 188:src/stm32f1xx_hal_irda.c ****   * @attention
 189:src/stm32f1xx_hal_irda.c ****   *
 190:src/stm32f1xx_hal_irda.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 191:src/stm32f1xx_hal_irda.c ****   * All rights reserved.</center></h2>
 192:src/stm32f1xx_hal_irda.c ****   *
 193:src/stm32f1xx_hal_irda.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 194:src/stm32f1xx_hal_irda.c ****   * the "License"; You may not use this file except in compliance with the
 195:src/stm32f1xx_hal_irda.c ****   * License. You may obtain a copy of the License at:
 196:src/stm32f1xx_hal_irda.c ****   *                        opensource.org/licenses/BSD-3-Clause
 197:src/stm32f1xx_hal_irda.c ****   *
 198:src/stm32f1xx_hal_irda.c ****   ******************************************************************************
 199:src/stm32f1xx_hal_irda.c ****   */
 200:src/stm32f1xx_hal_irda.c **** 
 201:src/stm32f1xx_hal_irda.c **** /* Includes ------------------------------------------------------------------*/
 202:src/stm32f1xx_hal_irda.c **** #include "stm32f1xx_hal.h"
 203:src/stm32f1xx_hal_irda.c **** 
 204:src/stm32f1xx_hal_irda.c **** /** @addtogroup STM32F1xx_HAL_Driver
 205:src/stm32f1xx_hal_irda.c ****   * @{
 206:src/stm32f1xx_hal_irda.c ****   */
 207:src/stm32f1xx_hal_irda.c **** 
 208:src/stm32f1xx_hal_irda.c **** /** @defgroup IRDA IRDA
ARM GAS  /tmp/cc2ibVgV.s 			page 6


 209:src/stm32f1xx_hal_irda.c ****   * @brief HAL IRDA module driver
 210:src/stm32f1xx_hal_irda.c ****   * @{
 211:src/stm32f1xx_hal_irda.c ****   */
 212:src/stm32f1xx_hal_irda.c **** 
 213:src/stm32f1xx_hal_irda.c **** #ifdef HAL_IRDA_MODULE_ENABLED
 214:src/stm32f1xx_hal_irda.c **** 
 215:src/stm32f1xx_hal_irda.c **** /* Private typedef -----------------------------------------------------------*/
 216:src/stm32f1xx_hal_irda.c **** /* Private define ------------------------------------------------------------*/
 217:src/stm32f1xx_hal_irda.c **** /* Private constants ---------------------------------------------------------*/
 218:src/stm32f1xx_hal_irda.c **** /* Private macro -------------------------------------------------------------*/
 219:src/stm32f1xx_hal_irda.c **** /* Private variables ---------------------------------------------------------*/
 220:src/stm32f1xx_hal_irda.c **** /* Private function prototypes -----------------------------------------------*/
 221:src/stm32f1xx_hal_irda.c **** /** @addtogroup IRDA_Private_Functions
 222:src/stm32f1xx_hal_irda.c ****   * @{
 223:src/stm32f1xx_hal_irda.c ****   */
 224:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
 225:src/stm32f1xx_hal_irda.c **** void IRDA_InitCallbacksToDefault(IRDA_HandleTypeDef *hirda);
 226:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 227:src/stm32f1xx_hal_irda.c **** static void IRDA_SetConfig(IRDA_HandleTypeDef *hirda);
 228:src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda);
 229:src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda);
 230:src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Receive_IT(IRDA_HandleTypeDef *hirda);
 231:src/stm32f1xx_hal_irda.c **** static void IRDA_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 232:src/stm32f1xx_hal_irda.c **** static void IRDA_DMATransmitHalfCplt(DMA_HandleTypeDef *hdma);
 233:src/stm32f1xx_hal_irda.c **** static void IRDA_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 234:src/stm32f1xx_hal_irda.c **** static void IRDA_DMAReceiveHalfCplt(DMA_HandleTypeDef *hdma);
 235:src/stm32f1xx_hal_irda.c **** static void IRDA_DMAError(DMA_HandleTypeDef *hdma);
 236:src/stm32f1xx_hal_irda.c **** static void IRDA_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 237:src/stm32f1xx_hal_irda.c **** static void IRDA_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 238:src/stm32f1xx_hal_irda.c **** static void IRDA_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 239:src/stm32f1xx_hal_irda.c **** static void IRDA_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 240:src/stm32f1xx_hal_irda.c **** static void IRDA_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 241:src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, Flag
 242:src/stm32f1xx_hal_irda.c **** static void IRDA_EndTxTransfer(IRDA_HandleTypeDef *hirda);
 243:src/stm32f1xx_hal_irda.c **** static void IRDA_EndRxTransfer(IRDA_HandleTypeDef *hirda);
 244:src/stm32f1xx_hal_irda.c **** /**
 245:src/stm32f1xx_hal_irda.c ****   * @}
 246:src/stm32f1xx_hal_irda.c ****   */
 247:src/stm32f1xx_hal_irda.c **** 
 248:src/stm32f1xx_hal_irda.c **** /* Exported functions --------------------------------------------------------*/
 249:src/stm32f1xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions IrDA Exported Functions
 250:src/stm32f1xx_hal_irda.c ****   * @{
 251:src/stm32f1xx_hal_irda.c ****   */
 252:src/stm32f1xx_hal_irda.c **** 
 253:src/stm32f1xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions_Group1 IrDA Initialization and de-initialization functions
 254:src/stm32f1xx_hal_irda.c ****   *  @brief    Initialization and Configuration functions
 255:src/stm32f1xx_hal_irda.c ****   *
 256:src/stm32f1xx_hal_irda.c **** @verbatim
 257:src/stm32f1xx_hal_irda.c **** 
 258:src/stm32f1xx_hal_irda.c ****   ==============================================================================
 259:src/stm32f1xx_hal_irda.c ****             ##### Initialization and Configuration functions #####
 260:src/stm32f1xx_hal_irda.c ****   ==============================================================================
 261:src/stm32f1xx_hal_irda.c ****     [..]
 262:src/stm32f1xx_hal_irda.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 263:src/stm32f1xx_hal_irda.c ****     in asynchronous IrDA mode.
 264:src/stm32f1xx_hal_irda.c ****       (+) For the asynchronous mode only these parameters can be configured:
 265:src/stm32f1xx_hal_irda.c ****         (++) BaudRate
ARM GAS  /tmp/cc2ibVgV.s 			page 7


 266:src/stm32f1xx_hal_irda.c ****         (++) WordLength
 267:src/stm32f1xx_hal_irda.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 268:src/stm32f1xx_hal_irda.c ****              in the data register is transmitted but is changed by the parity bit.
 269:src/stm32f1xx_hal_irda.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 270:src/stm32f1xx_hal_irda.c ****              please refer to Reference manual for possible IRDA frame formats.
 271:src/stm32f1xx_hal_irda.c ****         (++) Prescaler: A pulse of width less than two and greater than one PSC period(s) may or ma
 272:src/stm32f1xx_hal_irda.c ****              not be rejected. The receiver set up time should be managed by software. The IrDA phys
 273:src/stm32f1xx_hal_irda.c ****              specification specifies a minimum of 10 ms delay between transmission and
 274:src/stm32f1xx_hal_irda.c ****              reception (IrDA is a half duplex protocol).
 275:src/stm32f1xx_hal_irda.c ****         (++) Mode: Receiver/transmitter modes
 276:src/stm32f1xx_hal_irda.c ****         (++) IrDAMode: the IrDA can operate in the Normal mode or in the Low power mode.
 277:src/stm32f1xx_hal_irda.c ****     [..]
 278:src/stm32f1xx_hal_irda.c ****     The HAL_IRDA_Init() API follows IRDA configuration procedures (details for the procedures
 279:src/stm32f1xx_hal_irda.c ****     are available in reference manual).
 280:src/stm32f1xx_hal_irda.c **** 
 281:src/stm32f1xx_hal_irda.c **** @endverbatim
 282:src/stm32f1xx_hal_irda.c ****   * @{
 283:src/stm32f1xx_hal_irda.c ****   */
 284:src/stm32f1xx_hal_irda.c **** 
 285:src/stm32f1xx_hal_irda.c **** /**
 286:src/stm32f1xx_hal_irda.c ****   * @brief  Initializes the IRDA mode according to the specified
 287:src/stm32f1xx_hal_irda.c ****   *         parameters in the IRDA_InitTypeDef and create the associated handle.
 288:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
 289:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 290:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 291:src/stm32f1xx_hal_irda.c ****   */
 292:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)
 293:src/stm32f1xx_hal_irda.c **** {
 294:src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 295:src/stm32f1xx_hal_irda.c ****   if (hirda == NULL)
 296:src/stm32f1xx_hal_irda.c ****   {
 297:src/stm32f1xx_hal_irda.c ****     return HAL_ERROR;
 298:src/stm32f1xx_hal_irda.c ****   }
 299:src/stm32f1xx_hal_irda.c **** 
 300:src/stm32f1xx_hal_irda.c ****   /* Check the IRDA instance parameters */
 301:src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_INSTANCE(hirda->Instance));
 302:src/stm32f1xx_hal_irda.c ****   /* Check the IRDA mode parameter in the IRDA handle */
 303:src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode));
 304:src/stm32f1xx_hal_irda.c **** 
 305:src/stm32f1xx_hal_irda.c ****   if (hirda->gState == HAL_IRDA_STATE_RESET)
 306:src/stm32f1xx_hal_irda.c ****   {
 307:src/stm32f1xx_hal_irda.c ****     /* Allocate lock resource and initialize it */
 308:src/stm32f1xx_hal_irda.c ****     hirda->Lock = HAL_UNLOCKED;
 309:src/stm32f1xx_hal_irda.c **** 
 310:src/stm32f1xx_hal_irda.c **** #if USE_HAL_IRDA_REGISTER_CALLBACKS == 1
 311:src/stm32f1xx_hal_irda.c ****     IRDA_InitCallbacksToDefault(hirda);
 312:src/stm32f1xx_hal_irda.c **** 
 313:src/stm32f1xx_hal_irda.c ****     if (hirda->MspInitCallback == NULL)
 314:src/stm32f1xx_hal_irda.c ****     {
 315:src/stm32f1xx_hal_irda.c ****       hirda->MspInitCallback = HAL_IRDA_MspInit;
 316:src/stm32f1xx_hal_irda.c ****     }
 317:src/stm32f1xx_hal_irda.c **** 
 318:src/stm32f1xx_hal_irda.c ****     /* Init the low level hardware */
 319:src/stm32f1xx_hal_irda.c ****     hirda->MspInitCallback(hirda);
 320:src/stm32f1xx_hal_irda.c **** #else
 321:src/stm32f1xx_hal_irda.c ****     /* Init the low level hardware : GPIO, CLOCK */
 322:src/stm32f1xx_hal_irda.c ****     HAL_IRDA_MspInit(hirda);
ARM GAS  /tmp/cc2ibVgV.s 			page 8


 323:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 324:src/stm32f1xx_hal_irda.c ****   }
 325:src/stm32f1xx_hal_irda.c **** 
 326:src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_BUSY;
 327:src/stm32f1xx_hal_irda.c **** 
 328:src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA peripheral */
 329:src/stm32f1xx_hal_irda.c ****   __HAL_IRDA_DISABLE(hirda);
 330:src/stm32f1xx_hal_irda.c **** 
 331:src/stm32f1xx_hal_irda.c ****   /* Set the IRDA communication parameters */
 332:src/stm32f1xx_hal_irda.c ****   IRDA_SetConfig(hirda);
 333:src/stm32f1xx_hal_irda.c **** 
 334:src/stm32f1xx_hal_irda.c ****   /* In IrDA mode, the following bits must be kept cleared:
 335:src/stm32f1xx_hal_irda.c ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
 336:src/stm32f1xx_hal_irda.c ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
 337:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_STOP | USART_CR2_CLKEN));
 338:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 339:src/stm32f1xx_hal_irda.c **** 
 340:src/stm32f1xx_hal_irda.c ****   /* Enable the IRDA peripheral */
 341:src/stm32f1xx_hal_irda.c ****   __HAL_IRDA_ENABLE(hirda);
 342:src/stm32f1xx_hal_irda.c **** 
 343:src/stm32f1xx_hal_irda.c ****   /* Set the prescaler */
 344:src/stm32f1xx_hal_irda.c ****   MODIFY_REG(hirda->Instance->GTPR, USART_GTPR_PSC, hirda->Init.Prescaler);
 345:src/stm32f1xx_hal_irda.c **** 
 346:src/stm32f1xx_hal_irda.c ****   /* Configure the IrDA mode */
 347:src/stm32f1xx_hal_irda.c ****   MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.IrDAMode);
 348:src/stm32f1xx_hal_irda.c **** 
 349:src/stm32f1xx_hal_irda.c ****   /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
 350:src/stm32f1xx_hal_irda.c ****   SET_BIT(hirda->Instance->CR3, USART_CR3_IREN);
 351:src/stm32f1xx_hal_irda.c **** 
 352:src/stm32f1xx_hal_irda.c ****   /* Initialize the IRDA state*/
 353:src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 354:src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 355:src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 356:src/stm32f1xx_hal_irda.c **** 
 357:src/stm32f1xx_hal_irda.c ****   return HAL_OK;
 358:src/stm32f1xx_hal_irda.c **** }
 359:src/stm32f1xx_hal_irda.c **** 
 360:src/stm32f1xx_hal_irda.c **** /**
 361:src/stm32f1xx_hal_irda.c ****   * @brief  DeInitializes the IRDA peripheral
 362:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
 363:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 364:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 365:src/stm32f1xx_hal_irda.c ****   */
 366:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DeInit(IRDA_HandleTypeDef *hirda)
 367:src/stm32f1xx_hal_irda.c **** {
 368:src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 369:src/stm32f1xx_hal_irda.c ****   if (hirda == NULL)
 370:src/stm32f1xx_hal_irda.c ****   {
 371:src/stm32f1xx_hal_irda.c ****     return HAL_ERROR;
 372:src/stm32f1xx_hal_irda.c ****   }
 373:src/stm32f1xx_hal_irda.c **** 
 374:src/stm32f1xx_hal_irda.c ****   /* Check the parameters */
 375:src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_INSTANCE(hirda->Instance));
 376:src/stm32f1xx_hal_irda.c **** 
 377:src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_BUSY;
 378:src/stm32f1xx_hal_irda.c **** 
 379:src/stm32f1xx_hal_irda.c ****   /* Disable the Peripheral */
ARM GAS  /tmp/cc2ibVgV.s 			page 9


 380:src/stm32f1xx_hal_irda.c ****   __HAL_IRDA_DISABLE(hirda);
 381:src/stm32f1xx_hal_irda.c **** 
 382:src/stm32f1xx_hal_irda.c ****   /* DeInit the low level hardware */
 383:src/stm32f1xx_hal_irda.c **** #if USE_HAL_IRDA_REGISTER_CALLBACKS == 1
 384:src/stm32f1xx_hal_irda.c ****   if (hirda->MspDeInitCallback == NULL)
 385:src/stm32f1xx_hal_irda.c ****   {
 386:src/stm32f1xx_hal_irda.c ****     hirda->MspDeInitCallback = HAL_IRDA_MspDeInit;
 387:src/stm32f1xx_hal_irda.c ****   }
 388:src/stm32f1xx_hal_irda.c ****   /* DeInit the low level hardware */
 389:src/stm32f1xx_hal_irda.c ****   hirda->MspDeInitCallback(hirda);
 390:src/stm32f1xx_hal_irda.c **** #else
 391:src/stm32f1xx_hal_irda.c ****   HAL_IRDA_MspDeInit(hirda);
 392:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 393:src/stm32f1xx_hal_irda.c **** 
 394:src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 395:src/stm32f1xx_hal_irda.c **** 
 396:src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_RESET;
 397:src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_RESET;
 398:src/stm32f1xx_hal_irda.c **** 
 399:src/stm32f1xx_hal_irda.c ****   /* Release Lock */
 400:src/stm32f1xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
 401:src/stm32f1xx_hal_irda.c **** 
 402:src/stm32f1xx_hal_irda.c ****   return HAL_OK;
 403:src/stm32f1xx_hal_irda.c **** }
 404:src/stm32f1xx_hal_irda.c **** 
 405:src/stm32f1xx_hal_irda.c **** /**
 406:src/stm32f1xx_hal_irda.c ****   * @brief  IRDA MSP Init.
 407:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
 408:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 409:src/stm32f1xx_hal_irda.c ****   * @retval None
 410:src/stm32f1xx_hal_irda.c ****   */
 411:src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_MspInit(IRDA_HandleTypeDef *hirda)
 412:src/stm32f1xx_hal_irda.c **** {
 413:src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 414:src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
 415:src/stm32f1xx_hal_irda.c **** 
 416:src/stm32f1xx_hal_irda.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 417:src/stm32f1xx_hal_irda.c ****            the HAL_IRDA_MspInit can be implemented in the user file
 418:src/stm32f1xx_hal_irda.c ****    */
 419:src/stm32f1xx_hal_irda.c **** }
 420:src/stm32f1xx_hal_irda.c **** 
 421:src/stm32f1xx_hal_irda.c **** /**
 422:src/stm32f1xx_hal_irda.c ****   * @brief  IRDA MSP DeInit.
 423:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
 424:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 425:src/stm32f1xx_hal_irda.c ****   * @retval None
 426:src/stm32f1xx_hal_irda.c ****   */
 427:src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_MspDeInit(IRDA_HandleTypeDef *hirda)
 428:src/stm32f1xx_hal_irda.c **** {
 429:src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 430:src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
 431:src/stm32f1xx_hal_irda.c **** 
 432:src/stm32f1xx_hal_irda.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 433:src/stm32f1xx_hal_irda.c ****            the HAL_IRDA_MspDeInit can be implemented in the user file
 434:src/stm32f1xx_hal_irda.c ****    */
 435:src/stm32f1xx_hal_irda.c **** }
 436:src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/cc2ibVgV.s 			page 10


 437:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
 438:src/stm32f1xx_hal_irda.c **** /**
 439:src/stm32f1xx_hal_irda.c ****   * @brief  Register a User IRDA Callback
 440:src/stm32f1xx_hal_irda.c ****   *         To be used instead of the weak predefined callback
 441:src/stm32f1xx_hal_irda.c ****   * @param  hirda irda handle
 442:src/stm32f1xx_hal_irda.c ****   * @param  CallbackID ID of the callback to be registered
 443:src/stm32f1xx_hal_irda.c ****   *         This parameter can be one of the following values:
 444:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 445:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_TX_COMPLETE_CB_ID Tx Complete Callback ID
 446:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 447:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_RX_COMPLETE_CB_ID Rx Complete Callback ID
 448:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_ERROR_CB_ID Error Callback ID
 449:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 450:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 451:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 452:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_MSPINIT_CB_ID MspInit Callback ID
 453:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_MSPDEINIT_CB_ID MspDeInit Callback ID
 454:src/stm32f1xx_hal_irda.c ****   * @param  pCallback pointer to the Callback function
 455:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 456:src/stm32f1xx_hal_irda.c ****   */
 457:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_RegisterCallback(IRDA_HandleTypeDef *hirda, HAL_IRDA_CallbackIDTypeDef C
 458:src/stm32f1xx_hal_irda.c **** {
 459:src/stm32f1xx_hal_irda.c ****   HAL_StatusTypeDef status = HAL_OK;
 460:src/stm32f1xx_hal_irda.c **** 
 461:src/stm32f1xx_hal_irda.c ****   if (pCallback == NULL)
 462:src/stm32f1xx_hal_irda.c ****   {
 463:src/stm32f1xx_hal_irda.c ****     /* Update the error code */
 464:src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode |= HAL_IRDA_ERROR_INVALID_CALLBACK;
 465:src/stm32f1xx_hal_irda.c **** 
 466:src/stm32f1xx_hal_irda.c ****     return HAL_ERROR;
 467:src/stm32f1xx_hal_irda.c ****   }
 468:src/stm32f1xx_hal_irda.c ****   /* Process locked */
 469:src/stm32f1xx_hal_irda.c ****   __HAL_LOCK(hirda);
 470:src/stm32f1xx_hal_irda.c **** 
 471:src/stm32f1xx_hal_irda.c ****   if (hirda->gState == HAL_IRDA_STATE_READY)
 472:src/stm32f1xx_hal_irda.c ****   {
 473:src/stm32f1xx_hal_irda.c ****     switch (CallbackID)
 474:src/stm32f1xx_hal_irda.c ****     {
 475:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_TX_HALFCOMPLETE_CB_ID :
 476:src/stm32f1xx_hal_irda.c ****         hirda->TxHalfCpltCallback = pCallback;
 477:src/stm32f1xx_hal_irda.c ****         break;
 478:src/stm32f1xx_hal_irda.c **** 
 479:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_TX_COMPLETE_CB_ID :
 480:src/stm32f1xx_hal_irda.c ****         hirda->TxCpltCallback = pCallback;
 481:src/stm32f1xx_hal_irda.c ****         break;
 482:src/stm32f1xx_hal_irda.c **** 
 483:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_RX_HALFCOMPLETE_CB_ID :
 484:src/stm32f1xx_hal_irda.c ****         hirda->RxHalfCpltCallback = pCallback;
 485:src/stm32f1xx_hal_irda.c ****         break;
 486:src/stm32f1xx_hal_irda.c **** 
 487:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_RX_COMPLETE_CB_ID :
 488:src/stm32f1xx_hal_irda.c ****         hirda->RxCpltCallback = pCallback;
 489:src/stm32f1xx_hal_irda.c ****         break;
 490:src/stm32f1xx_hal_irda.c **** 
 491:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_ERROR_CB_ID :
 492:src/stm32f1xx_hal_irda.c ****         hirda->ErrorCallback = pCallback;
 493:src/stm32f1xx_hal_irda.c ****         break;
ARM GAS  /tmp/cc2ibVgV.s 			page 11


 494:src/stm32f1xx_hal_irda.c **** 
 495:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_ABORT_COMPLETE_CB_ID :
 496:src/stm32f1xx_hal_irda.c ****         hirda->AbortCpltCallback = pCallback;
 497:src/stm32f1xx_hal_irda.c ****         break;
 498:src/stm32f1xx_hal_irda.c **** 
 499:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_ABORT_TRANSMIT_COMPLETE_CB_ID :
 500:src/stm32f1xx_hal_irda.c ****         hirda->AbortTransmitCpltCallback = pCallback;
 501:src/stm32f1xx_hal_irda.c ****         break;
 502:src/stm32f1xx_hal_irda.c **** 
 503:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_ABORT_RECEIVE_COMPLETE_CB_ID :
 504:src/stm32f1xx_hal_irda.c ****         hirda->AbortReceiveCpltCallback = pCallback;
 505:src/stm32f1xx_hal_irda.c ****         break;
 506:src/stm32f1xx_hal_irda.c **** 
 507:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_MSPINIT_CB_ID :
 508:src/stm32f1xx_hal_irda.c ****         hirda->MspInitCallback = pCallback;
 509:src/stm32f1xx_hal_irda.c ****         break;
 510:src/stm32f1xx_hal_irda.c **** 
 511:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_MSPDEINIT_CB_ID :
 512:src/stm32f1xx_hal_irda.c ****         hirda->MspDeInitCallback = pCallback;
 513:src/stm32f1xx_hal_irda.c ****         break;
 514:src/stm32f1xx_hal_irda.c **** 
 515:src/stm32f1xx_hal_irda.c ****       default :
 516:src/stm32f1xx_hal_irda.c ****         /* Update the error code */
 517:src/stm32f1xx_hal_irda.c ****         hirda->ErrorCode |= HAL_IRDA_ERROR_INVALID_CALLBACK;
 518:src/stm32f1xx_hal_irda.c **** 
 519:src/stm32f1xx_hal_irda.c ****         /* Return error status */
 520:src/stm32f1xx_hal_irda.c ****         status =  HAL_ERROR;
 521:src/stm32f1xx_hal_irda.c ****         break;
 522:src/stm32f1xx_hal_irda.c ****     }
 523:src/stm32f1xx_hal_irda.c ****   }
 524:src/stm32f1xx_hal_irda.c ****   else if (hirda->gState == HAL_IRDA_STATE_RESET)
 525:src/stm32f1xx_hal_irda.c ****   {
 526:src/stm32f1xx_hal_irda.c ****     switch (CallbackID)
 527:src/stm32f1xx_hal_irda.c ****     {
 528:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_MSPINIT_CB_ID :
 529:src/stm32f1xx_hal_irda.c ****         hirda->MspInitCallback = pCallback;
 530:src/stm32f1xx_hal_irda.c ****         break;
 531:src/stm32f1xx_hal_irda.c **** 
 532:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_MSPDEINIT_CB_ID :
 533:src/stm32f1xx_hal_irda.c ****         hirda->MspDeInitCallback = pCallback;
 534:src/stm32f1xx_hal_irda.c ****         break;
 535:src/stm32f1xx_hal_irda.c **** 
 536:src/stm32f1xx_hal_irda.c ****       default :
 537:src/stm32f1xx_hal_irda.c ****         /* Update the error code */
 538:src/stm32f1xx_hal_irda.c ****         hirda->ErrorCode |= HAL_IRDA_ERROR_INVALID_CALLBACK;
 539:src/stm32f1xx_hal_irda.c **** 
 540:src/stm32f1xx_hal_irda.c ****         /* Return error status */
 541:src/stm32f1xx_hal_irda.c ****         status =  HAL_ERROR;
 542:src/stm32f1xx_hal_irda.c ****         break;
 543:src/stm32f1xx_hal_irda.c ****     }
 544:src/stm32f1xx_hal_irda.c ****   }
 545:src/stm32f1xx_hal_irda.c ****   else
 546:src/stm32f1xx_hal_irda.c ****   {
 547:src/stm32f1xx_hal_irda.c ****     /* Update the error code */
 548:src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode |= HAL_IRDA_ERROR_INVALID_CALLBACK;
 549:src/stm32f1xx_hal_irda.c **** 
 550:src/stm32f1xx_hal_irda.c ****     /* Return error status */
ARM GAS  /tmp/cc2ibVgV.s 			page 12


 551:src/stm32f1xx_hal_irda.c ****     status =  HAL_ERROR;
 552:src/stm32f1xx_hal_irda.c ****   }
 553:src/stm32f1xx_hal_irda.c **** 
 554:src/stm32f1xx_hal_irda.c ****   /* Release Lock */
 555:src/stm32f1xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
 556:src/stm32f1xx_hal_irda.c **** 
 557:src/stm32f1xx_hal_irda.c ****   return status;
 558:src/stm32f1xx_hal_irda.c **** }
 559:src/stm32f1xx_hal_irda.c **** 
 560:src/stm32f1xx_hal_irda.c **** /**
 561:src/stm32f1xx_hal_irda.c ****   * @brief  Unregister an IRDA callback
 562:src/stm32f1xx_hal_irda.c ****   *         IRDA callback is redirected to the weak predefined callback
 563:src/stm32f1xx_hal_irda.c ****   * @param  hirda irda handle
 564:src/stm32f1xx_hal_irda.c ****   * @param  CallbackID ID of the callback to be unregistered
 565:src/stm32f1xx_hal_irda.c ****   *         This parameter can be one of the following values:
 566:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 567:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_TX_COMPLETE_CB_ID Tx Complete Callback ID
 568:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 569:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_RX_COMPLETE_CB_ID Rx Complete Callback ID
 570:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_ERROR_CB_ID Error Callback ID
 571:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 572:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 573:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 574:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_MSPINIT_CB_ID MspInit Callback ID
 575:src/stm32f1xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_MSPDEINIT_CB_ID MspDeInit Callback ID
 576:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 577:src/stm32f1xx_hal_irda.c ****   */
 578:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_UnRegisterCallback(IRDA_HandleTypeDef *hirda, HAL_IRDA_CallbackIDTypeDef
 579:src/stm32f1xx_hal_irda.c **** {
 580:src/stm32f1xx_hal_irda.c ****   HAL_StatusTypeDef status = HAL_OK;
 581:src/stm32f1xx_hal_irda.c **** 
 582:src/stm32f1xx_hal_irda.c ****   /* Process locked */
 583:src/stm32f1xx_hal_irda.c ****   __HAL_LOCK(hirda);
 584:src/stm32f1xx_hal_irda.c **** 
 585:src/stm32f1xx_hal_irda.c ****   if (HAL_IRDA_STATE_READY == hirda->gState)
 586:src/stm32f1xx_hal_irda.c ****   {
 587:src/stm32f1xx_hal_irda.c ****     switch (CallbackID)
 588:src/stm32f1xx_hal_irda.c ****     {
 589:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_TX_HALFCOMPLETE_CB_ID :
 590:src/stm32f1xx_hal_irda.c ****         hirda->TxHalfCpltCallback = HAL_IRDA_TxHalfCpltCallback;               /* Legacy weak  TxHa
 591:src/stm32f1xx_hal_irda.c ****         break;
 592:src/stm32f1xx_hal_irda.c **** 
 593:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_TX_COMPLETE_CB_ID :
 594:src/stm32f1xx_hal_irda.c ****         hirda->TxCpltCallback = HAL_IRDA_TxCpltCallback;                       /* Legacy weak TxCpl
 595:src/stm32f1xx_hal_irda.c ****         break;
 596:src/stm32f1xx_hal_irda.c **** 
 597:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_RX_HALFCOMPLETE_CB_ID :
 598:src/stm32f1xx_hal_irda.c ****         hirda->RxHalfCpltCallback = HAL_IRDA_RxHalfCpltCallback;               /* Legacy weak RxHal
 599:src/stm32f1xx_hal_irda.c ****         break;
 600:src/stm32f1xx_hal_irda.c **** 
 601:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_RX_COMPLETE_CB_ID :
 602:src/stm32f1xx_hal_irda.c ****         hirda->RxCpltCallback = HAL_IRDA_RxCpltCallback;                       /* Legacy weak RxCpl
 603:src/stm32f1xx_hal_irda.c ****         break;
 604:src/stm32f1xx_hal_irda.c **** 
 605:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_ERROR_CB_ID :
 606:src/stm32f1xx_hal_irda.c ****         hirda->ErrorCallback = HAL_IRDA_ErrorCallback;                         /* Legacy weak Error
 607:src/stm32f1xx_hal_irda.c ****         break;
ARM GAS  /tmp/cc2ibVgV.s 			page 13


 608:src/stm32f1xx_hal_irda.c **** 
 609:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_ABORT_COMPLETE_CB_ID :
 610:src/stm32f1xx_hal_irda.c ****         hirda->AbortCpltCallback = HAL_IRDA_AbortCpltCallback;                 /* Legacy weak Abort
 611:src/stm32f1xx_hal_irda.c ****         break;
 612:src/stm32f1xx_hal_irda.c **** 
 613:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_ABORT_TRANSMIT_COMPLETE_CB_ID :
 614:src/stm32f1xx_hal_irda.c ****         hirda->AbortTransmitCpltCallback = HAL_IRDA_AbortTransmitCpltCallback; /* Legacy weak Abort
 615:src/stm32f1xx_hal_irda.c ****         break;
 616:src/stm32f1xx_hal_irda.c **** 
 617:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_ABORT_RECEIVE_COMPLETE_CB_ID :
 618:src/stm32f1xx_hal_irda.c ****         hirda->AbortReceiveCpltCallback = HAL_IRDA_AbortReceiveCpltCallback;   /* Legacy weak Abort
 619:src/stm32f1xx_hal_irda.c ****         break;
 620:src/stm32f1xx_hal_irda.c **** 
 621:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_MSPINIT_CB_ID :
 622:src/stm32f1xx_hal_irda.c ****         hirda->MspInitCallback = HAL_IRDA_MspInit;                             /* Legacy weak MspIn
 623:src/stm32f1xx_hal_irda.c ****         break;
 624:src/stm32f1xx_hal_irda.c **** 
 625:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_MSPDEINIT_CB_ID :
 626:src/stm32f1xx_hal_irda.c ****         hirda->MspDeInitCallback = HAL_IRDA_MspDeInit;                         /* Legacy weak MspDe
 627:src/stm32f1xx_hal_irda.c ****         break;
 628:src/stm32f1xx_hal_irda.c **** 
 629:src/stm32f1xx_hal_irda.c ****       default :
 630:src/stm32f1xx_hal_irda.c ****         /* Update the error code */
 631:src/stm32f1xx_hal_irda.c ****         hirda->ErrorCode |= HAL_IRDA_ERROR_INVALID_CALLBACK;
 632:src/stm32f1xx_hal_irda.c **** 
 633:src/stm32f1xx_hal_irda.c ****         /* Return error status */
 634:src/stm32f1xx_hal_irda.c ****         status =  HAL_ERROR;
 635:src/stm32f1xx_hal_irda.c ****         break;
 636:src/stm32f1xx_hal_irda.c ****     }
 637:src/stm32f1xx_hal_irda.c ****   }
 638:src/stm32f1xx_hal_irda.c ****   else if (HAL_IRDA_STATE_RESET == hirda->gState)
 639:src/stm32f1xx_hal_irda.c ****   {
 640:src/stm32f1xx_hal_irda.c ****     switch (CallbackID)
 641:src/stm32f1xx_hal_irda.c ****     {
 642:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_MSPINIT_CB_ID :
 643:src/stm32f1xx_hal_irda.c ****         hirda->MspInitCallback = HAL_IRDA_MspInit;
 644:src/stm32f1xx_hal_irda.c ****         break;
 645:src/stm32f1xx_hal_irda.c **** 
 646:src/stm32f1xx_hal_irda.c ****       case HAL_IRDA_MSPDEINIT_CB_ID :
 647:src/stm32f1xx_hal_irda.c ****         hirda->MspDeInitCallback = HAL_IRDA_MspDeInit;
 648:src/stm32f1xx_hal_irda.c ****         break;
 649:src/stm32f1xx_hal_irda.c **** 
 650:src/stm32f1xx_hal_irda.c ****       default :
 651:src/stm32f1xx_hal_irda.c ****         /* Update the error code */
 652:src/stm32f1xx_hal_irda.c ****         hirda->ErrorCode |= HAL_IRDA_ERROR_INVALID_CALLBACK;
 653:src/stm32f1xx_hal_irda.c **** 
 654:src/stm32f1xx_hal_irda.c ****         /* Return error status */
 655:src/stm32f1xx_hal_irda.c ****         status =  HAL_ERROR;
 656:src/stm32f1xx_hal_irda.c ****         break;
 657:src/stm32f1xx_hal_irda.c ****     }
 658:src/stm32f1xx_hal_irda.c ****   }
 659:src/stm32f1xx_hal_irda.c ****   else
 660:src/stm32f1xx_hal_irda.c ****   {
 661:src/stm32f1xx_hal_irda.c ****     /* Update the error code */
 662:src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode |= HAL_IRDA_ERROR_INVALID_CALLBACK;
 663:src/stm32f1xx_hal_irda.c **** 
 664:src/stm32f1xx_hal_irda.c ****     /* Return error status */
ARM GAS  /tmp/cc2ibVgV.s 			page 14


 665:src/stm32f1xx_hal_irda.c ****     status =  HAL_ERROR;
 666:src/stm32f1xx_hal_irda.c ****   }
 667:src/stm32f1xx_hal_irda.c **** 
 668:src/stm32f1xx_hal_irda.c ****   /* Release Lock */
 669:src/stm32f1xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
 670:src/stm32f1xx_hal_irda.c **** 
 671:src/stm32f1xx_hal_irda.c ****   return status;
 672:src/stm32f1xx_hal_irda.c **** }
 673:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 674:src/stm32f1xx_hal_irda.c **** 
 675:src/stm32f1xx_hal_irda.c **** /**
 676:src/stm32f1xx_hal_irda.c ****   * @}
 677:src/stm32f1xx_hal_irda.c ****   */
 678:src/stm32f1xx_hal_irda.c **** 
 679:src/stm32f1xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions_Group2 IO operation functions
 680:src/stm32f1xx_hal_irda.c ****   *  @brief   IRDA Transmit and Receive functions
 681:src/stm32f1xx_hal_irda.c ****   *
 682:src/stm32f1xx_hal_irda.c **** @verbatim
 683:src/stm32f1xx_hal_irda.c ****   ==============================================================================
 684:src/stm32f1xx_hal_irda.c ****                       ##### IO operation functions #####
 685:src/stm32f1xx_hal_irda.c ****   ==============================================================================
 686:src/stm32f1xx_hal_irda.c ****     [..]
 687:src/stm32f1xx_hal_irda.c ****     This subsection provides a set of functions allowing to manage the IRDA data transfers.
 688:src/stm32f1xx_hal_irda.c ****     IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 689:src/stm32f1xx_hal_irda.c ****     on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver
 690:src/stm32f1xx_hal_irda.c ****     is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 691:src/stm32f1xx_hal_irda.c ****     While receiving data, transmission should be avoided as the data to be transmitted
 692:src/stm32f1xx_hal_irda.c ****     could be corrupted.
 693:src/stm32f1xx_hal_irda.c **** 
 694:src/stm32f1xx_hal_irda.c ****     (#) There are two modes of transfer:
 695:src/stm32f1xx_hal_irda.c ****        (++) Blocking mode: The communication is performed in polling mode.
 696:src/stm32f1xx_hal_irda.c ****             The HAL status of all data processing is returned by the same function
 697:src/stm32f1xx_hal_irda.c ****             after finishing transfer.
 698:src/stm32f1xx_hal_irda.c ****        (++) Non-Blocking mode: The communication is performed using Interrupts
 699:src/stm32f1xx_hal_irda.c ****            or DMA, these API's return the HAL status.
 700:src/stm32f1xx_hal_irda.c ****            The end of the data processing will be indicated through the
 701:src/stm32f1xx_hal_irda.c ****            dedicated IRDA IRQ when using Interrupt mode or the DMA IRQ when
 702:src/stm32f1xx_hal_irda.c ****            using DMA mode.
 703:src/stm32f1xx_hal_irda.c ****            The HAL_IRDA_TxCpltCallback(), HAL_IRDA_RxCpltCallback() user callbacks
 704:src/stm32f1xx_hal_irda.c ****            will be executed respectively at the end of the Transmit or Receive process
 705:src/stm32f1xx_hal_irda.c ****            The HAL_IRDA_ErrorCallback() user callback will be executed when a communication error i
 706:src/stm32f1xx_hal_irda.c **** 
 707:src/stm32f1xx_hal_irda.c ****     (#) Blocking mode APIs are :
 708:src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Transmit()
 709:src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Receive()
 710:src/stm32f1xx_hal_irda.c **** 
 711:src/stm32f1xx_hal_irda.c ****     (#) Non Blocking mode APIs with Interrupt are :
 712:src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Transmit_IT()
 713:src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Receive_IT()
 714:src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_IRQHandler()
 715:src/stm32f1xx_hal_irda.c **** 
 716:src/stm32f1xx_hal_irda.c ****     (#) Non Blocking mode functions with DMA are :
 717:src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Transmit_DMA()
 718:src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Receive_DMA()
 719:src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_DMAPause()
 720:src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_DMAResume()
 721:src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_DMAStop()
ARM GAS  /tmp/cc2ibVgV.s 			page 15


 722:src/stm32f1xx_hal_irda.c **** 
 723:src/stm32f1xx_hal_irda.c ****     (#) A set of Transfer Complete Callbacks are provided in Non Blocking mode:
 724:src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_TxHalfCpltCallback()
 725:src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_TxCpltCallback()
 726:src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_RxHalfCpltCallback()
 727:src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_RxCpltCallback()
 728:src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_ErrorCallback()
 729:src/stm32f1xx_hal_irda.c **** 
 730:src/stm32f1xx_hal_irda.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
 731:src/stm32f1xx_hal_irda.c ****         (+) HAL_IRDA_Abort()
 732:src/stm32f1xx_hal_irda.c ****         (+) HAL_IRDA_AbortTransmit()
 733:src/stm32f1xx_hal_irda.c ****         (+) HAL_IRDA_AbortReceive()
 734:src/stm32f1xx_hal_irda.c ****         (+) HAL_IRDA_Abort_IT()
 735:src/stm32f1xx_hal_irda.c ****         (+) HAL_IRDA_AbortTransmit_IT()
 736:src/stm32f1xx_hal_irda.c ****         (+) HAL_IRDA_AbortReceive_IT()
 737:src/stm32f1xx_hal_irda.c **** 
 738:src/stm32f1xx_hal_irda.c ****     (#) For Abort services based on interrupts (HAL_IRDA_Abortxxx_IT), a set of Abort Complete Call
 739:src/stm32f1xx_hal_irda.c ****         (+) HAL_IRDA_AbortCpltCallback()
 740:src/stm32f1xx_hal_irda.c ****         (+) HAL_IRDA_AbortTransmitCpltCallback()
 741:src/stm32f1xx_hal_irda.c ****         (+) HAL_IRDA_AbortReceiveCpltCallback()
 742:src/stm32f1xx_hal_irda.c **** 
 743:src/stm32f1xx_hal_irda.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
 744:src/stm32f1xx_hal_irda.c ****         Errors are handled as follows :
 745:src/stm32f1xx_hal_irda.c ****         (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but e
 746:src/stm32f1xx_hal_irda.c ****             to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Int
 747:src/stm32f1xx_hal_irda.c ****             Received character is then retrieved and stored in Rx buffer, Error code is set to allo
 748:src/stm32f1xx_hal_irda.c ****             and HAL_IRDA_ErrorCallback() user callback is executed. Transfer is kept ongoing on IRD
 749:src/stm32f1xx_hal_irda.c ****             If user wants to abort it, Abort services should be called by user.
 750:src/stm32f1xx_hal_irda.c ****         (+) Error is considered as Blocking : Transfer could not be completed properly and is abort
 751:src/stm32f1xx_hal_irda.c ****             This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
 752:src/stm32f1xx_hal_irda.c ****             Error code is set to allow user to identify error type, and HAL_IRDA_ErrorCallback() us
 753:src/stm32f1xx_hal_irda.c **** 
 754:src/stm32f1xx_hal_irda.c **** @endverbatim
 755:src/stm32f1xx_hal_irda.c ****   * @{
 756:src/stm32f1xx_hal_irda.c ****   */
 757:src/stm32f1xx_hal_irda.c **** 
 758:src/stm32f1xx_hal_irda.c **** /**
 759:src/stm32f1xx_hal_irda.c ****   * @brief Sends an amount of data in blocking mode.
 760:src/stm32f1xx_hal_irda.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 761:src/stm32f1xx_hal_irda.c ****   *        the sent data is handled as a set of u16. In this case, Size must reflect the number
 762:src/stm32f1xx_hal_irda.c ****   *        of u16 available through pData.
 763:src/stm32f1xx_hal_irda.c ****   * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
 764:src/stm32f1xx_hal_irda.c ****   *              the configuration information for the specified IRDA module.
 765:src/stm32f1xx_hal_irda.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
 766:src/stm32f1xx_hal_irda.c ****   * @param Size  Amount of data elements (u8 or u16) to be sent.
 767:src/stm32f1xx_hal_irda.c ****   * @param Timeout Specify timeout value.
 768:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 769:src/stm32f1xx_hal_irda.c ****   */
 770:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Transmit(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uint3
 771:src/stm32f1xx_hal_irda.c **** {
 772:src/stm32f1xx_hal_irda.c ****   uint16_t *tmp;
 773:src/stm32f1xx_hal_irda.c ****   uint32_t tickstart = 0U;
 774:src/stm32f1xx_hal_irda.c **** 
 775:src/stm32f1xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 776:src/stm32f1xx_hal_irda.c ****   if (hirda->gState == HAL_IRDA_STATE_READY)
 777:src/stm32f1xx_hal_irda.c ****   {
 778:src/stm32f1xx_hal_irda.c ****     if ((pData == NULL) || (Size == 0U))
ARM GAS  /tmp/cc2ibVgV.s 			page 16


 779:src/stm32f1xx_hal_irda.c ****     {
 780:src/stm32f1xx_hal_irda.c ****       return  HAL_ERROR;
 781:src/stm32f1xx_hal_irda.c ****     }
 782:src/stm32f1xx_hal_irda.c **** 
 783:src/stm32f1xx_hal_irda.c ****     /* Process Locked */
 784:src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
 785:src/stm32f1xx_hal_irda.c **** 
 786:src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 787:src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 788:src/stm32f1xx_hal_irda.c **** 
 789:src/stm32f1xx_hal_irda.c ****     /* Init tickstart for timeout managment*/
 790:src/stm32f1xx_hal_irda.c ****     tickstart = HAL_GetTick();
 791:src/stm32f1xx_hal_irda.c **** 
 792:src/stm32f1xx_hal_irda.c ****     hirda->TxXferSize = Size;
 793:src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
 794:src/stm32f1xx_hal_irda.c ****     while (hirda->TxXferCount > 0U)
 795:src/stm32f1xx_hal_irda.c ****     {
 796:src/stm32f1xx_hal_irda.c ****       hirda->TxXferCount--;
 797:src/stm32f1xx_hal_irda.c ****       if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 798:src/stm32f1xx_hal_irda.c ****       {
 799:src/stm32f1xx_hal_irda.c ****         if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800:src/stm32f1xx_hal_irda.c ****         {
 801:src/stm32f1xx_hal_irda.c ****           return HAL_TIMEOUT;
 802:src/stm32f1xx_hal_irda.c ****         }
 803:src/stm32f1xx_hal_irda.c ****         tmp = (uint16_t *) pData;
 804:src/stm32f1xx_hal_irda.c ****         hirda->Instance->DR = (*tmp & (uint16_t)0x01FF);
 805:src/stm32f1xx_hal_irda.c ****         if (hirda->Init.Parity == IRDA_PARITY_NONE)
 806:src/stm32f1xx_hal_irda.c ****         {
 807:src/stm32f1xx_hal_irda.c ****           pData += 2U;
 808:src/stm32f1xx_hal_irda.c ****         }
 809:src/stm32f1xx_hal_irda.c ****         else
 810:src/stm32f1xx_hal_irda.c ****         {
 811:src/stm32f1xx_hal_irda.c ****           pData += 1U;
 812:src/stm32f1xx_hal_irda.c ****         }
 813:src/stm32f1xx_hal_irda.c ****       }
 814:src/stm32f1xx_hal_irda.c ****       else
 815:src/stm32f1xx_hal_irda.c ****       {
 816:src/stm32f1xx_hal_irda.c ****         if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 817:src/stm32f1xx_hal_irda.c ****         {
 818:src/stm32f1xx_hal_irda.c ****           return HAL_TIMEOUT;
 819:src/stm32f1xx_hal_irda.c ****         }
 820:src/stm32f1xx_hal_irda.c ****         hirda->Instance->DR = (*pData++ & (uint8_t)0xFF);
 821:src/stm32f1xx_hal_irda.c ****       }
 822:src/stm32f1xx_hal_irda.c ****     }
 823:src/stm32f1xx_hal_irda.c **** 
 824:src/stm32f1xx_hal_irda.c ****     if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 825:src/stm32f1xx_hal_irda.c ****     {
 826:src/stm32f1xx_hal_irda.c ****       return HAL_TIMEOUT;
 827:src/stm32f1xx_hal_irda.c ****     }
 828:src/stm32f1xx_hal_irda.c **** 
 829:src/stm32f1xx_hal_irda.c ****     /* At end of Tx process, restore hirda->gState to Ready */
 830:src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_READY;
 831:src/stm32f1xx_hal_irda.c **** 
 832:src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
 833:src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 834:src/stm32f1xx_hal_irda.c **** 
 835:src/stm32f1xx_hal_irda.c ****     return HAL_OK;
ARM GAS  /tmp/cc2ibVgV.s 			page 17


 836:src/stm32f1xx_hal_irda.c ****   }
 837:src/stm32f1xx_hal_irda.c ****   else
 838:src/stm32f1xx_hal_irda.c ****   {
 839:src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
 840:src/stm32f1xx_hal_irda.c ****   }
 841:src/stm32f1xx_hal_irda.c **** }
 842:src/stm32f1xx_hal_irda.c **** 
 843:src/stm32f1xx_hal_irda.c **** /**
 844:src/stm32f1xx_hal_irda.c ****   * @brief Receive an amount of data in blocking mode.
 845:src/stm32f1xx_hal_irda.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 846:src/stm32f1xx_hal_irda.c ****   *        the received data is handled as a set of u16. In this case, Size must reflect the number
 847:src/stm32f1xx_hal_irda.c ****   *        of u16 available through pData.
 848:src/stm32f1xx_hal_irda.c ****   * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
 849:src/stm32f1xx_hal_irda.c ****   *              the configuration information for the specified IRDA module.
 850:src/stm32f1xx_hal_irda.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
 851:src/stm32f1xx_hal_irda.c ****   * @param Size  Amount of data elements (u8 or u16) to be received.
 852:src/stm32f1xx_hal_irda.c ****   * @param Timeout Specify timeout value
 853:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 854:src/stm32f1xx_hal_irda.c ****   */
 855:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Receive(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uint32
 856:src/stm32f1xx_hal_irda.c **** {
 857:src/stm32f1xx_hal_irda.c ****   uint16_t *tmp;
 858:src/stm32f1xx_hal_irda.c ****   uint32_t tickstart = 0U;
 859:src/stm32f1xx_hal_irda.c **** 
 860:src/stm32f1xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
 861:src/stm32f1xx_hal_irda.c ****   if (hirda->RxState == HAL_IRDA_STATE_READY)
 862:src/stm32f1xx_hal_irda.c ****   {
 863:src/stm32f1xx_hal_irda.c ****     if ((pData == NULL) || (Size == 0U))
 864:src/stm32f1xx_hal_irda.c ****     {
 865:src/stm32f1xx_hal_irda.c ****       return  HAL_ERROR;
 866:src/stm32f1xx_hal_irda.c ****     }
 867:src/stm32f1xx_hal_irda.c **** 
 868:src/stm32f1xx_hal_irda.c ****     /* Process Locked */
 869:src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
 870:src/stm32f1xx_hal_irda.c **** 
 871:src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 872:src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 873:src/stm32f1xx_hal_irda.c **** 
 874:src/stm32f1xx_hal_irda.c ****     /* Init tickstart for timeout managment*/
 875:src/stm32f1xx_hal_irda.c ****     tickstart = HAL_GetTick();
 876:src/stm32f1xx_hal_irda.c **** 
 877:src/stm32f1xx_hal_irda.c ****     hirda->RxXferSize = Size;
 878:src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = Size;
 879:src/stm32f1xx_hal_irda.c **** 
 880:src/stm32f1xx_hal_irda.c ****     /* Check the remain data to be received */
 881:src/stm32f1xx_hal_irda.c ****     while (hirda->RxXferCount > 0U)
 882:src/stm32f1xx_hal_irda.c ****     {
 883:src/stm32f1xx_hal_irda.c ****       hirda->RxXferCount--;
 884:src/stm32f1xx_hal_irda.c **** 
 885:src/stm32f1xx_hal_irda.c ****       if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 886:src/stm32f1xx_hal_irda.c ****       {
 887:src/stm32f1xx_hal_irda.c ****         if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK
 888:src/stm32f1xx_hal_irda.c ****         {
 889:src/stm32f1xx_hal_irda.c ****           return HAL_TIMEOUT;
 890:src/stm32f1xx_hal_irda.c ****         }
 891:src/stm32f1xx_hal_irda.c ****         tmp = (uint16_t *) pData ;
 892:src/stm32f1xx_hal_irda.c ****         if (hirda->Init.Parity == IRDA_PARITY_NONE)
ARM GAS  /tmp/cc2ibVgV.s 			page 18


 893:src/stm32f1xx_hal_irda.c ****         {
 894:src/stm32f1xx_hal_irda.c ****           *tmp = (uint16_t)(hirda->Instance->DR & (uint16_t)0x01FF);
 895:src/stm32f1xx_hal_irda.c ****           pData += 2U;
 896:src/stm32f1xx_hal_irda.c ****         }
 897:src/stm32f1xx_hal_irda.c ****         else
 898:src/stm32f1xx_hal_irda.c ****         {
 899:src/stm32f1xx_hal_irda.c ****           *tmp = (uint16_t)(hirda->Instance->DR & (uint16_t)0x00FF);
 900:src/stm32f1xx_hal_irda.c ****           pData += 1U;
 901:src/stm32f1xx_hal_irda.c ****         }
 902:src/stm32f1xx_hal_irda.c ****       }
 903:src/stm32f1xx_hal_irda.c ****       else
 904:src/stm32f1xx_hal_irda.c ****       {
 905:src/stm32f1xx_hal_irda.c ****         if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK
 906:src/stm32f1xx_hal_irda.c ****         {
 907:src/stm32f1xx_hal_irda.c ****           return HAL_TIMEOUT;
 908:src/stm32f1xx_hal_irda.c ****         }
 909:src/stm32f1xx_hal_irda.c ****         if (hirda->Init.Parity == IRDA_PARITY_NONE)
 910:src/stm32f1xx_hal_irda.c ****         {
 911:src/stm32f1xx_hal_irda.c ****           *pData++ = (uint8_t)(hirda->Instance->DR & (uint8_t)0x00FF);
 912:src/stm32f1xx_hal_irda.c ****         }
 913:src/stm32f1xx_hal_irda.c ****         else
 914:src/stm32f1xx_hal_irda.c ****         {
 915:src/stm32f1xx_hal_irda.c ****           *pData++ = (uint8_t)(hirda->Instance->DR & (uint8_t)0x007F);
 916:src/stm32f1xx_hal_irda.c ****         }
 917:src/stm32f1xx_hal_irda.c ****       }
 918:src/stm32f1xx_hal_irda.c ****     }
 919:src/stm32f1xx_hal_irda.c **** 
 920:src/stm32f1xx_hal_irda.c ****     /* At end of Rx process, restore hirda->RxState to Ready */
 921:src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
 922:src/stm32f1xx_hal_irda.c **** 
 923:src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
 924:src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 925:src/stm32f1xx_hal_irda.c **** 
 926:src/stm32f1xx_hal_irda.c ****     return HAL_OK;
 927:src/stm32f1xx_hal_irda.c ****   }
 928:src/stm32f1xx_hal_irda.c ****   else
 929:src/stm32f1xx_hal_irda.c ****   {
 930:src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
 931:src/stm32f1xx_hal_irda.c ****   }
 932:src/stm32f1xx_hal_irda.c **** }
 933:src/stm32f1xx_hal_irda.c **** 
 934:src/stm32f1xx_hal_irda.c **** /**
 935:src/stm32f1xx_hal_irda.c ****   * @brief Send an amount of data in non blocking mode.
 936:src/stm32f1xx_hal_irda.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 937:src/stm32f1xx_hal_irda.c ****   *        the sent data is handled as a set of u16. In this case, Size must reflect the number
 938:src/stm32f1xx_hal_irda.c ****   *        of u16 available through pData.
 939:src/stm32f1xx_hal_irda.c ****   * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
 940:src/stm32f1xx_hal_irda.c ****   *              the configuration information for the specified IRDA module.
 941:src/stm32f1xx_hal_irda.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
 942:src/stm32f1xx_hal_irda.c ****   * @param Size  Amount of data elements (u8 or u16) to be sent.
 943:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 944:src/stm32f1xx_hal_irda.c ****   */
 945:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
 946:src/stm32f1xx_hal_irda.c **** {
 947:src/stm32f1xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 948:src/stm32f1xx_hal_irda.c ****   if (hirda->gState == HAL_IRDA_STATE_READY)
 949:src/stm32f1xx_hal_irda.c ****   {
ARM GAS  /tmp/cc2ibVgV.s 			page 19


 950:src/stm32f1xx_hal_irda.c ****     if ((pData == NULL) || (Size == 0U))
 951:src/stm32f1xx_hal_irda.c ****     {
 952:src/stm32f1xx_hal_irda.c ****       return HAL_ERROR;
 953:src/stm32f1xx_hal_irda.c ****     }
 954:src/stm32f1xx_hal_irda.c **** 
 955:src/stm32f1xx_hal_irda.c ****     /* Process Locked */
 956:src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
 957:src/stm32f1xx_hal_irda.c **** 
 958:src/stm32f1xx_hal_irda.c ****     hirda->pTxBuffPtr = pData;
 959:src/stm32f1xx_hal_irda.c ****     hirda->TxXferSize = Size;
 960:src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
 961:src/stm32f1xx_hal_irda.c **** 
 962:src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 963:src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 964:src/stm32f1xx_hal_irda.c **** 
 965:src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
 966:src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 967:src/stm32f1xx_hal_irda.c **** 
 968:src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Transmit Data Register Empty Interrupt */
 969:src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR1, USART_CR1_TXEIE);
 970:src/stm32f1xx_hal_irda.c **** 
 971:src/stm32f1xx_hal_irda.c ****     return HAL_OK;
 972:src/stm32f1xx_hal_irda.c ****   }
 973:src/stm32f1xx_hal_irda.c ****   else
 974:src/stm32f1xx_hal_irda.c ****   {
 975:src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
 976:src/stm32f1xx_hal_irda.c ****   }
 977:src/stm32f1xx_hal_irda.c **** }
 978:src/stm32f1xx_hal_irda.c **** 
 979:src/stm32f1xx_hal_irda.c **** /**
 980:src/stm32f1xx_hal_irda.c ****   * @brief Receive an amount of data in non blocking mode.
 981:src/stm32f1xx_hal_irda.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 982:src/stm32f1xx_hal_irda.c ****   *        the received data is handled as a set of u16. In this case, Size must reflect the number
 983:src/stm32f1xx_hal_irda.c ****   *        of u16 available through pData.
 984:src/stm32f1xx_hal_irda.c ****   * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
 985:src/stm32f1xx_hal_irda.c ****   *              the configuration information for the specified IRDA module.
 986:src/stm32f1xx_hal_irda.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
 987:src/stm32f1xx_hal_irda.c ****   * @param Size  Amount of data elements (u8 or u16) to be received.
 988:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 989:src/stm32f1xx_hal_irda.c ****   */
 990:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Receive_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
 991:src/stm32f1xx_hal_irda.c **** {
 992:src/stm32f1xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
 993:src/stm32f1xx_hal_irda.c ****   if (hirda->RxState == HAL_IRDA_STATE_READY)
 994:src/stm32f1xx_hal_irda.c ****   {
 995:src/stm32f1xx_hal_irda.c ****     if ((pData == NULL) || (Size == 0U))
 996:src/stm32f1xx_hal_irda.c ****     {
 997:src/stm32f1xx_hal_irda.c ****       return HAL_ERROR;
 998:src/stm32f1xx_hal_irda.c ****     }
 999:src/stm32f1xx_hal_irda.c **** 
1000:src/stm32f1xx_hal_irda.c ****     /* Process Locked */
1001:src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
1002:src/stm32f1xx_hal_irda.c **** 
1003:src/stm32f1xx_hal_irda.c ****     hirda->pRxBuffPtr = pData;
1004:src/stm32f1xx_hal_irda.c ****     hirda->RxXferSize = Size;
1005:src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = Size;
1006:src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/cc2ibVgV.s 			page 20


1007:src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1008:src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
1009:src/stm32f1xx_hal_irda.c **** 
1010:src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
1011:src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
1012:src/stm32f1xx_hal_irda.c **** 
1013:src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Parity Error and Data Register Not Empty Interrupts */
1014:src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
1015:src/stm32f1xx_hal_irda.c **** 
1016:src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Error Interrupt: (Frame error, Noise error, Overrun error) */
1017:src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1018:src/stm32f1xx_hal_irda.c **** 
1019:src/stm32f1xx_hal_irda.c ****     return HAL_OK;
1020:src/stm32f1xx_hal_irda.c ****   }
1021:src/stm32f1xx_hal_irda.c ****   else
1022:src/stm32f1xx_hal_irda.c ****   {
1023:src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
1024:src/stm32f1xx_hal_irda.c ****   }
1025:src/stm32f1xx_hal_irda.c **** }
1026:src/stm32f1xx_hal_irda.c **** 
1027:src/stm32f1xx_hal_irda.c **** /**
1028:src/stm32f1xx_hal_irda.c ****   * @brief Send an amount of data in DMA mode.
1029:src/stm32f1xx_hal_irda.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
1030:src/stm32f1xx_hal_irda.c ****   *        the sent data is handled as a set of u16. In this case, Size must reflect the number
1031:src/stm32f1xx_hal_irda.c ****   *        of u16 available through pData.
1032:src/stm32f1xx_hal_irda.c ****   * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
1033:src/stm32f1xx_hal_irda.c ****   *              the configuration information for the specified IRDA module.
1034:src/stm32f1xx_hal_irda.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1035:src/stm32f1xx_hal_irda.c ****   * @param Size  Amount of data elements (u8 or u16) to be sent.
1036:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1037:src/stm32f1xx_hal_irda.c ****   */
1038:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Transmit_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
1039:src/stm32f1xx_hal_irda.c **** {
1040:src/stm32f1xx_hal_irda.c ****   uint32_t *tmp;
1041:src/stm32f1xx_hal_irda.c **** 
1042:src/stm32f1xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
1043:src/stm32f1xx_hal_irda.c ****   if (hirda->gState == HAL_IRDA_STATE_READY)
1044:src/stm32f1xx_hal_irda.c ****   {
1045:src/stm32f1xx_hal_irda.c ****     if ((pData == NULL) || (Size == 0U))
1046:src/stm32f1xx_hal_irda.c ****     {
1047:src/stm32f1xx_hal_irda.c ****       return HAL_ERROR;
1048:src/stm32f1xx_hal_irda.c ****     }
1049:src/stm32f1xx_hal_irda.c **** 
1050:src/stm32f1xx_hal_irda.c ****     /* Process Locked */
1051:src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
1052:src/stm32f1xx_hal_irda.c **** 
1053:src/stm32f1xx_hal_irda.c ****     hirda->pTxBuffPtr = pData;
1054:src/stm32f1xx_hal_irda.c ****     hirda->TxXferSize = Size;
1055:src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
1056:src/stm32f1xx_hal_irda.c **** 
1057:src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1058:src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
1059:src/stm32f1xx_hal_irda.c **** 
1060:src/stm32f1xx_hal_irda.c ****     /* Set the IRDA DMA transfer complete callback */
1061:src/stm32f1xx_hal_irda.c ****     hirda->hdmatx->XferCpltCallback = IRDA_DMATransmitCplt;
1062:src/stm32f1xx_hal_irda.c **** 
1063:src/stm32f1xx_hal_irda.c ****     /* Set the IRDA DMA half transfer complete callback */
ARM GAS  /tmp/cc2ibVgV.s 			page 21


1064:src/stm32f1xx_hal_irda.c ****     hirda->hdmatx->XferHalfCpltCallback = IRDA_DMATransmitHalfCplt;
1065:src/stm32f1xx_hal_irda.c **** 
1066:src/stm32f1xx_hal_irda.c ****     /* Set the DMA error callback */
1067:src/stm32f1xx_hal_irda.c ****     hirda->hdmatx->XferErrorCallback = IRDA_DMAError;
1068:src/stm32f1xx_hal_irda.c **** 
1069:src/stm32f1xx_hal_irda.c ****     /* Set the DMA abort callback */
1070:src/stm32f1xx_hal_irda.c ****     hirda->hdmatx->XferAbortCallback = NULL;
1071:src/stm32f1xx_hal_irda.c **** 
1072:src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA transmit DMA channel */
1073:src/stm32f1xx_hal_irda.c ****     tmp = (uint32_t *)&pData;
1074:src/stm32f1xx_hal_irda.c ****     HAL_DMA_Start_IT(hirda->hdmatx, *(uint32_t *)tmp, (uint32_t)&hirda->Instance->DR, Size);
1075:src/stm32f1xx_hal_irda.c **** 
1076:src/stm32f1xx_hal_irda.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
1077:src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_CLEAR_FLAG(hirda, IRDA_FLAG_TC);
1078:src/stm32f1xx_hal_irda.c **** 
1079:src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
1080:src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
1081:src/stm32f1xx_hal_irda.c **** 
1082:src/stm32f1xx_hal_irda.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1083:src/stm32f1xx_hal_irda.c ****     in the USART CR3 register */
1084:src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1085:src/stm32f1xx_hal_irda.c **** 
1086:src/stm32f1xx_hal_irda.c ****     return HAL_OK;
1087:src/stm32f1xx_hal_irda.c ****   }
1088:src/stm32f1xx_hal_irda.c ****   else
1089:src/stm32f1xx_hal_irda.c ****   {
1090:src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
1091:src/stm32f1xx_hal_irda.c ****   }
1092:src/stm32f1xx_hal_irda.c **** }
1093:src/stm32f1xx_hal_irda.c **** 
1094:src/stm32f1xx_hal_irda.c **** /**
1095:src/stm32f1xx_hal_irda.c ****   * @brief Receives an amount of data in DMA mode.
1096:src/stm32f1xx_hal_irda.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
1097:src/stm32f1xx_hal_irda.c ****   *        the received data is handled as a set of u16. In this case, Size must reflect the number
1098:src/stm32f1xx_hal_irda.c ****   *        of u16 available through pData.
1099:src/stm32f1xx_hal_irda.c ****   * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
1100:src/stm32f1xx_hal_irda.c ****   *              the configuration information for the specified IRDA module.
1101:src/stm32f1xx_hal_irda.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1102:src/stm32f1xx_hal_irda.c ****   * @param Size  Amount of data elements (u8 or u16) to be received.
1103:src/stm32f1xx_hal_irda.c ****   * @note   When the IRDA parity is enabled (PCE = 1) the data received contain the parity bit.
1104:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1105:src/stm32f1xx_hal_irda.c ****   */
1106:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Receive_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
1107:src/stm32f1xx_hal_irda.c **** {
1108:src/stm32f1xx_hal_irda.c ****   uint32_t *tmp;
1109:src/stm32f1xx_hal_irda.c **** 
1110:src/stm32f1xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
1111:src/stm32f1xx_hal_irda.c ****   if (hirda->RxState == HAL_IRDA_STATE_READY)
1112:src/stm32f1xx_hal_irda.c ****   {
1113:src/stm32f1xx_hal_irda.c ****     if ((pData == NULL) || (Size == 0U))
1114:src/stm32f1xx_hal_irda.c ****     {
1115:src/stm32f1xx_hal_irda.c ****       return HAL_ERROR;
1116:src/stm32f1xx_hal_irda.c ****     }
1117:src/stm32f1xx_hal_irda.c **** 
1118:src/stm32f1xx_hal_irda.c ****     /* Process Locked */
1119:src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
1120:src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/cc2ibVgV.s 			page 22


1121:src/stm32f1xx_hal_irda.c ****     hirda->pRxBuffPtr = pData;
1122:src/stm32f1xx_hal_irda.c ****     hirda->RxXferSize = Size;
1123:src/stm32f1xx_hal_irda.c **** 
1124:src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1125:src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
1126:src/stm32f1xx_hal_irda.c **** 
1127:src/stm32f1xx_hal_irda.c ****     /* Set the IRDA DMA transfer complete callback */
1128:src/stm32f1xx_hal_irda.c ****     hirda->hdmarx->XferCpltCallback = IRDA_DMAReceiveCplt;
1129:src/stm32f1xx_hal_irda.c **** 
1130:src/stm32f1xx_hal_irda.c ****     /* Set the IRDA DMA half transfer complete callback */
1131:src/stm32f1xx_hal_irda.c ****     hirda->hdmarx->XferHalfCpltCallback = IRDA_DMAReceiveHalfCplt;
1132:src/stm32f1xx_hal_irda.c **** 
1133:src/stm32f1xx_hal_irda.c ****     /* Set the DMA error callback */
1134:src/stm32f1xx_hal_irda.c ****     hirda->hdmarx->XferErrorCallback = IRDA_DMAError;
1135:src/stm32f1xx_hal_irda.c **** 
1136:src/stm32f1xx_hal_irda.c ****     /* Set the DMA abort callback */
1137:src/stm32f1xx_hal_irda.c ****     hirda->hdmarx->XferAbortCallback = NULL;
1138:src/stm32f1xx_hal_irda.c **** 
1139:src/stm32f1xx_hal_irda.c ****     /* Enable the DMA channel */
1140:src/stm32f1xx_hal_irda.c ****     tmp = (uint32_t *)&pData;
1141:src/stm32f1xx_hal_irda.c ****     HAL_DMA_Start_IT(hirda->hdmarx, (uint32_t)&hirda->Instance->DR, *(uint32_t *)tmp, Size);
1142:src/stm32f1xx_hal_irda.c **** 
1143:src/stm32f1xx_hal_irda.c ****     /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the sec
1144:src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_CLEAR_OREFLAG(hirda);
1145:src/stm32f1xx_hal_irda.c **** 
1146:src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
1147:src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
1148:src/stm32f1xx_hal_irda.c **** 
1149:src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Parity Error Interrupt */
1150:src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
1151:src/stm32f1xx_hal_irda.c **** 
1152:src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Error Interrupt: (Frame error, Noise error, Overrun error) */
1153:src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1154:src/stm32f1xx_hal_irda.c **** 
1155:src/stm32f1xx_hal_irda.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit
1156:src/stm32f1xx_hal_irda.c ****     in the USART CR3 register */
1157:src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1158:src/stm32f1xx_hal_irda.c **** 
1159:src/stm32f1xx_hal_irda.c ****     return HAL_OK;
1160:src/stm32f1xx_hal_irda.c ****   }
1161:src/stm32f1xx_hal_irda.c ****   else
1162:src/stm32f1xx_hal_irda.c ****   {
1163:src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
1164:src/stm32f1xx_hal_irda.c ****   }
1165:src/stm32f1xx_hal_irda.c **** }
1166:src/stm32f1xx_hal_irda.c **** 
1167:src/stm32f1xx_hal_irda.c **** /**
1168:src/stm32f1xx_hal_irda.c ****   * @brief Pauses the DMA Transfer.
1169:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1170:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1171:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1172:src/stm32f1xx_hal_irda.c ****   */
1173:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DMAPause(IRDA_HandleTypeDef *hirda)
1174:src/stm32f1xx_hal_irda.c **** {
1175:src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
1176:src/stm32f1xx_hal_irda.c **** 
1177:src/stm32f1xx_hal_irda.c ****   /* Process Locked */
ARM GAS  /tmp/cc2ibVgV.s 			page 23


1178:src/stm32f1xx_hal_irda.c ****   __HAL_LOCK(hirda);
1179:src/stm32f1xx_hal_irda.c **** 
1180:src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT);
1181:src/stm32f1xx_hal_irda.c ****   if ((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
1182:src/stm32f1xx_hal_irda.c ****   {
1183:src/stm32f1xx_hal_irda.c ****     /* Disable the IRDA DMA Tx request */
1184:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1185:src/stm32f1xx_hal_irda.c ****   }
1186:src/stm32f1xx_hal_irda.c **** 
1187:src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
1188:src/stm32f1xx_hal_irda.c ****   if ((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
1189:src/stm32f1xx_hal_irda.c ****   {
1190:src/stm32f1xx_hal_irda.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
1191:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
1192:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1193:src/stm32f1xx_hal_irda.c **** 
1194:src/stm32f1xx_hal_irda.c ****     /* Disable the IRDA DMA Rx request */
1195:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1196:src/stm32f1xx_hal_irda.c ****   }
1197:src/stm32f1xx_hal_irda.c **** 
1198:src/stm32f1xx_hal_irda.c ****   /* Process Unlocked */
1199:src/stm32f1xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
1200:src/stm32f1xx_hal_irda.c **** 
1201:src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1202:src/stm32f1xx_hal_irda.c **** }
1203:src/stm32f1xx_hal_irda.c **** 
1204:src/stm32f1xx_hal_irda.c **** /**
1205:src/stm32f1xx_hal_irda.c ****   * @brief Resumes the DMA Transfer.
1206:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1207:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1208:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1209:src/stm32f1xx_hal_irda.c ****   */
1210:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DMAResume(IRDA_HandleTypeDef *hirda)
1211:src/stm32f1xx_hal_irda.c **** {
1212:src/stm32f1xx_hal_irda.c ****   /* Process Locked */
1213:src/stm32f1xx_hal_irda.c ****   __HAL_LOCK(hirda);
1214:src/stm32f1xx_hal_irda.c **** 
1215:src/stm32f1xx_hal_irda.c ****   if (hirda->gState == HAL_IRDA_STATE_BUSY_TX)
1216:src/stm32f1xx_hal_irda.c ****   {
1217:src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA DMA Tx request */
1218:src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1219:src/stm32f1xx_hal_irda.c ****   }
1220:src/stm32f1xx_hal_irda.c **** 
1221:src/stm32f1xx_hal_irda.c ****   if (hirda->RxState == HAL_IRDA_STATE_BUSY_RX)
1222:src/stm32f1xx_hal_irda.c ****   {
1223:src/stm32f1xx_hal_irda.c ****     /* Clear the Overrun flag before resuming the Rx transfer */
1224:src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_CLEAR_OREFLAG(hirda);
1225:src/stm32f1xx_hal_irda.c **** 
1226:src/stm32f1xx_hal_irda.c ****     /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
1227:src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
1228:src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1229:src/stm32f1xx_hal_irda.c **** 
1230:src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA DMA Rx request */
1231:src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1232:src/stm32f1xx_hal_irda.c ****   }
1233:src/stm32f1xx_hal_irda.c **** 
1234:src/stm32f1xx_hal_irda.c ****   /* Process Unlocked */
ARM GAS  /tmp/cc2ibVgV.s 			page 24


1235:src/stm32f1xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
1236:src/stm32f1xx_hal_irda.c **** 
1237:src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1238:src/stm32f1xx_hal_irda.c **** }
1239:src/stm32f1xx_hal_irda.c **** 
1240:src/stm32f1xx_hal_irda.c **** /**
1241:src/stm32f1xx_hal_irda.c ****   * @brief Stops the DMA Transfer.
1242:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1243:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1244:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1245:src/stm32f1xx_hal_irda.c ****   */
1246:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DMAStop(IRDA_HandleTypeDef *hirda)
1247:src/stm32f1xx_hal_irda.c **** {
1248:src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
1249:src/stm32f1xx_hal_irda.c ****   /* The Lock is not implemented on this API to allow the user application
1250:src/stm32f1xx_hal_irda.c ****      to call the HAL IRDA API under callbacks HAL_IRDA_TxCpltCallback() / HAL_IRDA_RxCpltCallback()
1251:src/stm32f1xx_hal_irda.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
1252:src/stm32f1xx_hal_irda.c ****      and the correspond call back is executed HAL_IRDA_TxCpltCallback() / HAL_IRDA_RxCpltCallback()
1253:src/stm32f1xx_hal_irda.c ****   */
1254:src/stm32f1xx_hal_irda.c **** 
1255:src/stm32f1xx_hal_irda.c ****   /* Stop IRDA DMA Tx request if ongoing */
1256:src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT);
1257:src/stm32f1xx_hal_irda.c ****   if ((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
1258:src/stm32f1xx_hal_irda.c ****   {
1259:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1260:src/stm32f1xx_hal_irda.c **** 
1261:src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel */
1262:src/stm32f1xx_hal_irda.c ****     if (hirda->hdmatx != NULL)
1263:src/stm32f1xx_hal_irda.c ****     {
1264:src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmatx);
1265:src/stm32f1xx_hal_irda.c ****     }
1266:src/stm32f1xx_hal_irda.c ****     IRDA_EndTxTransfer(hirda);
1267:src/stm32f1xx_hal_irda.c ****   }
1268:src/stm32f1xx_hal_irda.c **** 
1269:src/stm32f1xx_hal_irda.c ****   /* Stop IRDA DMA Rx request if ongoing */
1270:src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
1271:src/stm32f1xx_hal_irda.c ****   if ((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
1272:src/stm32f1xx_hal_irda.c ****   {
1273:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1274:src/stm32f1xx_hal_irda.c **** 
1275:src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel */
1276:src/stm32f1xx_hal_irda.c ****     if (hirda->hdmarx != NULL)
1277:src/stm32f1xx_hal_irda.c ****     {
1278:src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmarx);
1279:src/stm32f1xx_hal_irda.c ****     }
1280:src/stm32f1xx_hal_irda.c ****     IRDA_EndRxTransfer(hirda);
1281:src/stm32f1xx_hal_irda.c ****   }
1282:src/stm32f1xx_hal_irda.c **** 
1283:src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1284:src/stm32f1xx_hal_irda.c **** }
1285:src/stm32f1xx_hal_irda.c **** 
1286:src/stm32f1xx_hal_irda.c **** /**
1287:src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing transfers (blocking mode).
1288:src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1289:src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1290:src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
1291:src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
ARM GAS  /tmp/cc2ibVgV.s 			page 25


1292:src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1293:src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1294:src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
1295:src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1296:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1297:src/stm32f1xx_hal_irda.c **** */
1298:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Abort(IRDA_HandleTypeDef *hirda)
1299:src/stm32f1xx_hal_irda.c **** {
1300:src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1301:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1302:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1303:src/stm32f1xx_hal_irda.c **** 
1304:src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
1305:src/stm32f1xx_hal_irda.c ****   if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1306:src/stm32f1xx_hal_irda.c ****   {
1307:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1308:src/stm32f1xx_hal_irda.c **** 
1309:src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use blocking DMA Abort API (no callback) */
1310:src/stm32f1xx_hal_irda.c ****     if (hirda->hdmatx != NULL)
1311:src/stm32f1xx_hal_irda.c ****     {
1312:src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null.
1313:src/stm32f1xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
1314:src/stm32f1xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = NULL;
1315:src/stm32f1xx_hal_irda.c **** 
1316:src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmatx);
1317:src/stm32f1xx_hal_irda.c ****     }
1318:src/stm32f1xx_hal_irda.c ****   }
1319:src/stm32f1xx_hal_irda.c **** 
1320:src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1321:src/stm32f1xx_hal_irda.c ****   if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1322:src/stm32f1xx_hal_irda.c ****   {
1323:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1324:src/stm32f1xx_hal_irda.c **** 
1325:src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use blocking DMA Abort API (no callback) */
1326:src/stm32f1xx_hal_irda.c ****     if (hirda->hdmarx != NULL)
1327:src/stm32f1xx_hal_irda.c ****     {
1328:src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null.
1329:src/stm32f1xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
1330:src/stm32f1xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = NULL;
1331:src/stm32f1xx_hal_irda.c **** 
1332:src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmarx);
1333:src/stm32f1xx_hal_irda.c ****     }
1334:src/stm32f1xx_hal_irda.c ****   }
1335:src/stm32f1xx_hal_irda.c **** 
1336:src/stm32f1xx_hal_irda.c ****   /* Reset Tx and Rx transfer counters */
1337:src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
1338:src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
1339:src/stm32f1xx_hal_irda.c **** 
1340:src/stm32f1xx_hal_irda.c ****   /* Reset ErrorCode */
1341:src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1342:src/stm32f1xx_hal_irda.c **** 
1343:src/stm32f1xx_hal_irda.c ****   /* Restore hirda->RxState and hirda->gState to Ready */
1344:src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
1345:src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
1346:src/stm32f1xx_hal_irda.c **** 
1347:src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1348:src/stm32f1xx_hal_irda.c **** }
ARM GAS  /tmp/cc2ibVgV.s 			page 26


1349:src/stm32f1xx_hal_irda.c **** 
1350:src/stm32f1xx_hal_irda.c **** /**
1351:src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1352:src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1353:src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1354:src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
1355:src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
1356:src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1357:src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1358:src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
1359:src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1360:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1361:src/stm32f1xx_hal_irda.c **** */
1362:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortTransmit(IRDA_HandleTypeDef *hirda)
1363:src/stm32f1xx_hal_irda.c **** {
1364:src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
1365:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1366:src/stm32f1xx_hal_irda.c **** 
1367:src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
1368:src/stm32f1xx_hal_irda.c ****   if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1369:src/stm32f1xx_hal_irda.c ****   {
1370:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1371:src/stm32f1xx_hal_irda.c **** 
1372:src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use blocking DMA Abort API (no callback) */
1373:src/stm32f1xx_hal_irda.c ****     if (hirda->hdmatx != NULL)
1374:src/stm32f1xx_hal_irda.c ****     {
1375:src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null.
1376:src/stm32f1xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
1377:src/stm32f1xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = NULL;
1378:src/stm32f1xx_hal_irda.c **** 
1379:src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmatx);
1380:src/stm32f1xx_hal_irda.c ****     }
1381:src/stm32f1xx_hal_irda.c ****   }
1382:src/stm32f1xx_hal_irda.c **** 
1383:src/stm32f1xx_hal_irda.c ****   /* Reset Tx transfer counter */
1384:src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
1385:src/stm32f1xx_hal_irda.c **** 
1386:src/stm32f1xx_hal_irda.c ****   /* Restore hirda->gState to Ready */
1387:src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
1388:src/stm32f1xx_hal_irda.c **** 
1389:src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1390:src/stm32f1xx_hal_irda.c **** }
1391:src/stm32f1xx_hal_irda.c **** 
1392:src/stm32f1xx_hal_irda.c **** /**
1393:src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1394:src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1395:src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1396:src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
1397:src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
1398:src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1399:src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1400:src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
1401:src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1402:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1403:src/stm32f1xx_hal_irda.c **** */
1404:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortReceive(IRDA_HandleTypeDef *hirda)
1405:src/stm32f1xx_hal_irda.c **** {
ARM GAS  /tmp/cc2ibVgV.s 			page 27


1406:src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1407:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1408:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1409:src/stm32f1xx_hal_irda.c **** 
1410:src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1411:src/stm32f1xx_hal_irda.c ****   if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1412:src/stm32f1xx_hal_irda.c ****   {
1413:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1414:src/stm32f1xx_hal_irda.c **** 
1415:src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use blocking DMA Abort API (no callback) */
1416:src/stm32f1xx_hal_irda.c ****     if (hirda->hdmarx != NULL)
1417:src/stm32f1xx_hal_irda.c ****     {
1418:src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null.
1419:src/stm32f1xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
1420:src/stm32f1xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = NULL;
1421:src/stm32f1xx_hal_irda.c **** 
1422:src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmarx);
1423:src/stm32f1xx_hal_irda.c ****     }
1424:src/stm32f1xx_hal_irda.c ****   }
1425:src/stm32f1xx_hal_irda.c **** 
1426:src/stm32f1xx_hal_irda.c ****   /* Reset Rx transfer counter */
1427:src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
1428:src/stm32f1xx_hal_irda.c **** 
1429:src/stm32f1xx_hal_irda.c ****   /* Restore hirda->RxState to Ready */
1430:src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
1431:src/stm32f1xx_hal_irda.c **** 
1432:src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1433:src/stm32f1xx_hal_irda.c **** }
1434:src/stm32f1xx_hal_irda.c **** 
1435:src/stm32f1xx_hal_irda.c **** /**
1436:src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1437:src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1438:src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1439:src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
1440:src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
1441:src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1442:src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1443:src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
1444:src/stm32f1xx_hal_irda.c ****   *           - At abort completion, call user abort complete callback
1445:src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1446:src/stm32f1xx_hal_irda.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1447:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1448:src/stm32f1xx_hal_irda.c **** */
1449:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Abort_IT(IRDA_HandleTypeDef *hirda)
1450:src/stm32f1xx_hal_irda.c **** {
1451:src/stm32f1xx_hal_irda.c ****   uint32_t AbortCplt = 0x01U;
1452:src/stm32f1xx_hal_irda.c **** 
1453:src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1454:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1455:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1456:src/stm32f1xx_hal_irda.c **** 
1457:src/stm32f1xx_hal_irda.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to IRDA Handle, DMA Abort complete callbacks sh
1458:src/stm32f1xx_hal_irda.c ****      before any call to DMA Abort functions */
1459:src/stm32f1xx_hal_irda.c ****   /* DMA Tx Handle is valid */
1460:src/stm32f1xx_hal_irda.c ****   if (hirda->hdmatx != NULL)
1461:src/stm32f1xx_hal_irda.c ****   {
1462:src/stm32f1xx_hal_irda.c ****     /* Set DMA Abort Complete callback if IRDA DMA Tx request if enabled.
ARM GAS  /tmp/cc2ibVgV.s 			page 28


1463:src/stm32f1xx_hal_irda.c ****        Otherwise, set it to NULL */
1464:src/stm32f1xx_hal_irda.c ****     if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1465:src/stm32f1xx_hal_irda.c ****     {
1466:src/stm32f1xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = IRDA_DMATxAbortCallback;
1467:src/stm32f1xx_hal_irda.c ****     }
1468:src/stm32f1xx_hal_irda.c ****     else
1469:src/stm32f1xx_hal_irda.c ****     {
1470:src/stm32f1xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = NULL;
1471:src/stm32f1xx_hal_irda.c ****     }
1472:src/stm32f1xx_hal_irda.c ****   }
1473:src/stm32f1xx_hal_irda.c ****   /* DMA Rx Handle is valid */
1474:src/stm32f1xx_hal_irda.c ****   if (hirda->hdmarx != NULL)
1475:src/stm32f1xx_hal_irda.c ****   {
1476:src/stm32f1xx_hal_irda.c ****     /* Set DMA Abort Complete callback if IRDA DMA Rx request if enabled.
1477:src/stm32f1xx_hal_irda.c ****        Otherwise, set it to NULL */
1478:src/stm32f1xx_hal_irda.c ****     if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1479:src/stm32f1xx_hal_irda.c ****     {
1480:src/stm32f1xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = IRDA_DMARxAbortCallback;
1481:src/stm32f1xx_hal_irda.c ****     }
1482:src/stm32f1xx_hal_irda.c ****     else
1483:src/stm32f1xx_hal_irda.c ****     {
1484:src/stm32f1xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = NULL;
1485:src/stm32f1xx_hal_irda.c ****     }
1486:src/stm32f1xx_hal_irda.c ****   }
1487:src/stm32f1xx_hal_irda.c **** 
1488:src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
1489:src/stm32f1xx_hal_irda.c ****   if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1490:src/stm32f1xx_hal_irda.c ****   {
1491:src/stm32f1xx_hal_irda.c ****     /* Disable DMA Tx at IRDA level */
1492:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1493:src/stm32f1xx_hal_irda.c **** 
1494:src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use non blocking DMA Abort API (callback) */
1495:src/stm32f1xx_hal_irda.c ****     if (hirda->hdmatx != NULL)
1496:src/stm32f1xx_hal_irda.c ****     {
1497:src/stm32f1xx_hal_irda.c ****       /* IRDA Tx DMA Abort callback has already been initialised :
1498:src/stm32f1xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1499:src/stm32f1xx_hal_irda.c **** 
1500:src/stm32f1xx_hal_irda.c ****       /* Abort DMA TX */
1501:src/stm32f1xx_hal_irda.c ****       if (HAL_DMA_Abort_IT(hirda->hdmatx) != HAL_OK)
1502:src/stm32f1xx_hal_irda.c ****       {
1503:src/stm32f1xx_hal_irda.c ****         hirda->hdmatx->XferAbortCallback = NULL;
1504:src/stm32f1xx_hal_irda.c ****       }
1505:src/stm32f1xx_hal_irda.c ****       else
1506:src/stm32f1xx_hal_irda.c ****       {
1507:src/stm32f1xx_hal_irda.c ****         AbortCplt = 0x00U;
1508:src/stm32f1xx_hal_irda.c ****       }
1509:src/stm32f1xx_hal_irda.c ****     }
1510:src/stm32f1xx_hal_irda.c ****   }
1511:src/stm32f1xx_hal_irda.c **** 
1512:src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1513:src/stm32f1xx_hal_irda.c ****   if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1514:src/stm32f1xx_hal_irda.c ****   {
1515:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1516:src/stm32f1xx_hal_irda.c **** 
1517:src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use non blocking DMA Abort API (callback) */
1518:src/stm32f1xx_hal_irda.c ****     if (hirda->hdmarx != NULL)
1519:src/stm32f1xx_hal_irda.c ****     {
ARM GAS  /tmp/cc2ibVgV.s 			page 29


1520:src/stm32f1xx_hal_irda.c ****       /* IRDA Rx DMA Abort callback has already been initialised :
1521:src/stm32f1xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1522:src/stm32f1xx_hal_irda.c **** 
1523:src/stm32f1xx_hal_irda.c ****       /* Abort DMA RX */
1524:src/stm32f1xx_hal_irda.c ****       if (HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
1525:src/stm32f1xx_hal_irda.c ****       {
1526:src/stm32f1xx_hal_irda.c ****         hirda->hdmarx->XferAbortCallback = NULL;
1527:src/stm32f1xx_hal_irda.c ****         AbortCplt = 0x01U;
1528:src/stm32f1xx_hal_irda.c ****       }
1529:src/stm32f1xx_hal_irda.c ****       else
1530:src/stm32f1xx_hal_irda.c ****       {
1531:src/stm32f1xx_hal_irda.c ****         AbortCplt = 0x00U;
1532:src/stm32f1xx_hal_irda.c ****       }
1533:src/stm32f1xx_hal_irda.c ****     }
1534:src/stm32f1xx_hal_irda.c ****   }
1535:src/stm32f1xx_hal_irda.c **** 
1536:src/stm32f1xx_hal_irda.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1537:src/stm32f1xx_hal_irda.c ****   if (AbortCplt == 0x01U)
1538:src/stm32f1xx_hal_irda.c ****   {
1539:src/stm32f1xx_hal_irda.c ****     /* Reset Tx and Rx transfer counters */
1540:src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = 0x00U;
1541:src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = 0x00U;
1542:src/stm32f1xx_hal_irda.c **** 
1543:src/stm32f1xx_hal_irda.c ****     /* Reset ErrorCode */
1544:src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1545:src/stm32f1xx_hal_irda.c **** 
1546:src/stm32f1xx_hal_irda.c ****     /* Restore hirda->gState and hirda->RxState to Ready */
1547:src/stm32f1xx_hal_irda.c ****     hirda->gState  = HAL_IRDA_STATE_READY;
1548:src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
1549:src/stm32f1xx_hal_irda.c **** 
1550:src/stm32f1xx_hal_irda.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1551:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
1552:src/stm32f1xx_hal_irda.c ****     /* Call registered Abort complete callback */
1553:src/stm32f1xx_hal_irda.c ****     hirda->AbortCpltCallback(hirda);
1554:src/stm32f1xx_hal_irda.c **** #else
1555:src/stm32f1xx_hal_irda.c ****     /* Call legacy weak Abort complete callback */
1556:src/stm32f1xx_hal_irda.c ****     HAL_IRDA_AbortCpltCallback(hirda);
1557:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
1558:src/stm32f1xx_hal_irda.c ****   }
1559:src/stm32f1xx_hal_irda.c **** 
1560:src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1561:src/stm32f1xx_hal_irda.c **** }
1562:src/stm32f1xx_hal_irda.c **** 
1563:src/stm32f1xx_hal_irda.c **** /**
1564:src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1565:src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1566:src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1567:src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
1568:src/stm32f1xx_hal_irda.c ****   *           - Disable IRDA Interrupts (Tx)
1569:src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1570:src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1571:src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
1572:src/stm32f1xx_hal_irda.c ****   *           - At abort completion, call user abort complete callback
1573:src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1574:src/stm32f1xx_hal_irda.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1575:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1576:src/stm32f1xx_hal_irda.c **** */
ARM GAS  /tmp/cc2ibVgV.s 			page 30


1577:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortTransmit_IT(IRDA_HandleTypeDef *hirda)
1578:src/stm32f1xx_hal_irda.c **** {
1579:src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
1580:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1581:src/stm32f1xx_hal_irda.c **** 
1582:src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
1583:src/stm32f1xx_hal_irda.c ****   if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1584:src/stm32f1xx_hal_irda.c ****   {
1585:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1586:src/stm32f1xx_hal_irda.c **** 
1587:src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use non blocking DMA Abort API (callback) */
1588:src/stm32f1xx_hal_irda.c ****     if (hirda->hdmatx != NULL)
1589:src/stm32f1xx_hal_irda.c ****     {
1590:src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback :
1591:src/stm32f1xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1592:src/stm32f1xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = IRDA_DMATxOnlyAbortCallback;
1593:src/stm32f1xx_hal_irda.c **** 
1594:src/stm32f1xx_hal_irda.c ****       /* Abort DMA TX */
1595:src/stm32f1xx_hal_irda.c ****       if (HAL_DMA_Abort_IT(hirda->hdmatx) != HAL_OK)
1596:src/stm32f1xx_hal_irda.c ****       {
1597:src/stm32f1xx_hal_irda.c ****         /* Call Directly hirda->hdmatx->XferAbortCallback function in case of error */
1598:src/stm32f1xx_hal_irda.c ****         hirda->hdmatx->XferAbortCallback(hirda->hdmatx);
1599:src/stm32f1xx_hal_irda.c ****       }
1600:src/stm32f1xx_hal_irda.c ****     }
1601:src/stm32f1xx_hal_irda.c ****     else
1602:src/stm32f1xx_hal_irda.c ****     {
1603:src/stm32f1xx_hal_irda.c ****       /* Reset Tx transfer counter */
1604:src/stm32f1xx_hal_irda.c ****       hirda->TxXferCount = 0x00U;
1605:src/stm32f1xx_hal_irda.c **** 
1606:src/stm32f1xx_hal_irda.c ****       /* Restore hirda->gState to Ready */
1607:src/stm32f1xx_hal_irda.c ****       hirda->gState = HAL_IRDA_STATE_READY;
1608:src/stm32f1xx_hal_irda.c **** 
1609:src/stm32f1xx_hal_irda.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1610:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
1611:src/stm32f1xx_hal_irda.c ****       /* Call registered Abort Transmit Complete Callback */
1612:src/stm32f1xx_hal_irda.c ****       hirda->AbortTransmitCpltCallback(hirda);
1613:src/stm32f1xx_hal_irda.c **** #else
1614:src/stm32f1xx_hal_irda.c ****       /* Call legacy weak Abort Transmit Complete Callback */
1615:src/stm32f1xx_hal_irda.c ****       HAL_IRDA_AbortTransmitCpltCallback(hirda);
1616:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
1617:src/stm32f1xx_hal_irda.c ****     }
1618:src/stm32f1xx_hal_irda.c ****   }
1619:src/stm32f1xx_hal_irda.c ****   else
1620:src/stm32f1xx_hal_irda.c ****   {
1621:src/stm32f1xx_hal_irda.c ****     /* Reset Tx transfer counter */
1622:src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = 0x00U;
1623:src/stm32f1xx_hal_irda.c **** 
1624:src/stm32f1xx_hal_irda.c ****     /* Restore hirda->gState to Ready */
1625:src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_READY;
1626:src/stm32f1xx_hal_irda.c **** 
1627:src/stm32f1xx_hal_irda.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1628:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
1629:src/stm32f1xx_hal_irda.c ****     /* Call registered Abort Transmit Complete Callback */
1630:src/stm32f1xx_hal_irda.c ****     hirda->AbortTransmitCpltCallback(hirda);
1631:src/stm32f1xx_hal_irda.c **** #else
1632:src/stm32f1xx_hal_irda.c ****     /* Call legacy weak Abort Transmit Complete Callback */
1633:src/stm32f1xx_hal_irda.c ****     HAL_IRDA_AbortTransmitCpltCallback(hirda);
ARM GAS  /tmp/cc2ibVgV.s 			page 31


1634:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
1635:src/stm32f1xx_hal_irda.c ****   }
1636:src/stm32f1xx_hal_irda.c **** 
1637:src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1638:src/stm32f1xx_hal_irda.c **** }
1639:src/stm32f1xx_hal_irda.c **** 
1640:src/stm32f1xx_hal_irda.c **** /**
1641:src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
1642:src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1643:src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1644:src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
1645:src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
1646:src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1647:src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1648:src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
1649:src/stm32f1xx_hal_irda.c ****   *           - At abort completion, call user abort complete callback
1650:src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1651:src/stm32f1xx_hal_irda.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1652:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1653:src/stm32f1xx_hal_irda.c **** */
1654:src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortReceive_IT(IRDA_HandleTypeDef *hirda)
1655:src/stm32f1xx_hal_irda.c **** {
1656:src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1657:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1658:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1659:src/stm32f1xx_hal_irda.c **** 
1660:src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1661:src/stm32f1xx_hal_irda.c ****   if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1662:src/stm32f1xx_hal_irda.c ****   {
1663:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1664:src/stm32f1xx_hal_irda.c **** 
1665:src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use non blocking DMA Abort API (callback) */
1666:src/stm32f1xx_hal_irda.c ****     if (hirda->hdmarx != NULL)
1667:src/stm32f1xx_hal_irda.c ****     {
1668:src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback :
1669:src/stm32f1xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1670:src/stm32f1xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = IRDA_DMARxOnlyAbortCallback;
1671:src/stm32f1xx_hal_irda.c **** 
1672:src/stm32f1xx_hal_irda.c ****       /* Abort DMA RX */
1673:src/stm32f1xx_hal_irda.c ****       if (HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
1674:src/stm32f1xx_hal_irda.c ****       {
1675:src/stm32f1xx_hal_irda.c ****         /* Call Directly hirda->hdmarx->XferAbortCallback function in case of error */
1676:src/stm32f1xx_hal_irda.c ****         hirda->hdmarx->XferAbortCallback(hirda->hdmarx);
1677:src/stm32f1xx_hal_irda.c ****       }
1678:src/stm32f1xx_hal_irda.c ****     }
1679:src/stm32f1xx_hal_irda.c ****     else
1680:src/stm32f1xx_hal_irda.c ****     {
1681:src/stm32f1xx_hal_irda.c ****       /* Reset Rx transfer counter */
1682:src/stm32f1xx_hal_irda.c ****       hirda->RxXferCount = 0x00U;
1683:src/stm32f1xx_hal_irda.c **** 
1684:src/stm32f1xx_hal_irda.c ****       /* Restore hirda->RxState to Ready */
1685:src/stm32f1xx_hal_irda.c ****       hirda->RxState = HAL_IRDA_STATE_READY;
1686:src/stm32f1xx_hal_irda.c **** 
1687:src/stm32f1xx_hal_irda.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1688:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
1689:src/stm32f1xx_hal_irda.c ****       /* Call registered Abort Receive Complete Callback */
1690:src/stm32f1xx_hal_irda.c ****       hirda->AbortReceiveCpltCallback(hirda);
ARM GAS  /tmp/cc2ibVgV.s 			page 32


1691:src/stm32f1xx_hal_irda.c **** #else
1692:src/stm32f1xx_hal_irda.c ****       /* Call legacy weak Abort Receive Complete Callback */
1693:src/stm32f1xx_hal_irda.c ****       HAL_IRDA_AbortReceiveCpltCallback(hirda);
1694:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
1695:src/stm32f1xx_hal_irda.c ****     }
1696:src/stm32f1xx_hal_irda.c ****   }
1697:src/stm32f1xx_hal_irda.c ****   else
1698:src/stm32f1xx_hal_irda.c ****   {
1699:src/stm32f1xx_hal_irda.c ****     /* Reset Rx transfer counter */
1700:src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = 0x00U;
1701:src/stm32f1xx_hal_irda.c **** 
1702:src/stm32f1xx_hal_irda.c ****     /* Restore hirda->RxState to Ready */
1703:src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
1704:src/stm32f1xx_hal_irda.c **** 
1705:src/stm32f1xx_hal_irda.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1706:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
1707:src/stm32f1xx_hal_irda.c ****     /* Call registered Abort Receive Complete Callback */
1708:src/stm32f1xx_hal_irda.c ****     hirda->AbortReceiveCpltCallback(hirda);
1709:src/stm32f1xx_hal_irda.c **** #else
1710:src/stm32f1xx_hal_irda.c ****     /* Call legacy weak Abort Receive Complete Callback */
1711:src/stm32f1xx_hal_irda.c ****     HAL_IRDA_AbortReceiveCpltCallback(hirda);
1712:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
1713:src/stm32f1xx_hal_irda.c ****   }
1714:src/stm32f1xx_hal_irda.c **** 
1715:src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1716:src/stm32f1xx_hal_irda.c **** }
1717:src/stm32f1xx_hal_irda.c **** 
1718:src/stm32f1xx_hal_irda.c **** /**
1719:src/stm32f1xx_hal_irda.c ****   * @brief  This function handles IRDA interrupt request.
1720:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1721:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1722:src/stm32f1xx_hal_irda.c ****   * @retval None
1723:src/stm32f1xx_hal_irda.c ****   */
1724:src/stm32f1xx_hal_irda.c **** void HAL_IRDA_IRQHandler(IRDA_HandleTypeDef *hirda)
1725:src/stm32f1xx_hal_irda.c **** {
1726:src/stm32f1xx_hal_irda.c ****   uint32_t isrflags   = READ_REG(hirda->Instance->SR);
1727:src/stm32f1xx_hal_irda.c ****   uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
1728:src/stm32f1xx_hal_irda.c ****   uint32_t cr3its     = READ_REG(hirda->Instance->CR3);
1729:src/stm32f1xx_hal_irda.c ****   uint32_t errorflags = 0x00U;
1730:src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
1731:src/stm32f1xx_hal_irda.c **** 
1732:src/stm32f1xx_hal_irda.c ****   /* If no error occurs */
1733:src/stm32f1xx_hal_irda.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
1734:src/stm32f1xx_hal_irda.c ****   if (errorflags == RESET)
1735:src/stm32f1xx_hal_irda.c ****   {
1736:src/stm32f1xx_hal_irda.c ****     /* IRDA in mode Receiver -----------------------------------------------*/
1737:src/stm32f1xx_hal_irda.c ****     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
1738:src/stm32f1xx_hal_irda.c ****     {
1739:src/stm32f1xx_hal_irda.c ****       IRDA_Receive_IT(hirda);
1740:src/stm32f1xx_hal_irda.c ****       return;
1741:src/stm32f1xx_hal_irda.c ****     }
1742:src/stm32f1xx_hal_irda.c ****   }
1743:src/stm32f1xx_hal_irda.c **** 
1744:src/stm32f1xx_hal_irda.c ****   /* If some errors occur */
1745:src/stm32f1xx_hal_irda.c ****   if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE
1746:src/stm32f1xx_hal_irda.c ****   {
1747:src/stm32f1xx_hal_irda.c ****     /* IRDA parity error interrupt occurred -------------------------------*/
ARM GAS  /tmp/cc2ibVgV.s 			page 33


1748:src/stm32f1xx_hal_irda.c ****     if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
1749:src/stm32f1xx_hal_irda.c ****     {
1750:src/stm32f1xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_PE;
1751:src/stm32f1xx_hal_irda.c ****     }
1752:src/stm32f1xx_hal_irda.c **** 
1753:src/stm32f1xx_hal_irda.c ****     /* IRDA noise error interrupt occurred --------------------------------*/
1754:src/stm32f1xx_hal_irda.c ****     if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1755:src/stm32f1xx_hal_irda.c ****     {
1756:src/stm32f1xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_NE;
1757:src/stm32f1xx_hal_irda.c ****     }
1758:src/stm32f1xx_hal_irda.c **** 
1759:src/stm32f1xx_hal_irda.c ****     /* IRDA frame error interrupt occurred --------------------------------*/
1760:src/stm32f1xx_hal_irda.c ****     if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1761:src/stm32f1xx_hal_irda.c ****     {
1762:src/stm32f1xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_FE;
1763:src/stm32f1xx_hal_irda.c ****     }
1764:src/stm32f1xx_hal_irda.c **** 
1765:src/stm32f1xx_hal_irda.c ****     /* IRDA Over-Run interrupt occurred -----------------------------------*/
1766:src/stm32f1xx_hal_irda.c ****     if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1767:src/stm32f1xx_hal_irda.c ****     {
1768:src/stm32f1xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_ORE;
1769:src/stm32f1xx_hal_irda.c ****     }
1770:src/stm32f1xx_hal_irda.c ****     /* Call IRDA Error Call back function if need be -----------------------*/
1771:src/stm32f1xx_hal_irda.c ****     if (hirda->ErrorCode != HAL_IRDA_ERROR_NONE)
1772:src/stm32f1xx_hal_irda.c ****     {
1773:src/stm32f1xx_hal_irda.c ****       /* IRDA in mode Receiver ---------------------------------------------*/
1774:src/stm32f1xx_hal_irda.c ****       if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
1775:src/stm32f1xx_hal_irda.c ****       {
1776:src/stm32f1xx_hal_irda.c ****         IRDA_Receive_IT(hirda);
1777:src/stm32f1xx_hal_irda.c ****       }
1778:src/stm32f1xx_hal_irda.c **** 
1779:src/stm32f1xx_hal_irda.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
1780:src/stm32f1xx_hal_irda.c ****          consider error as blocking */
1781:src/stm32f1xx_hal_irda.c ****       dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
1782:src/stm32f1xx_hal_irda.c ****       if (((hirda->ErrorCode & HAL_IRDA_ERROR_ORE) != RESET) || dmarequest)
1783:src/stm32f1xx_hal_irda.c ****       {
1784:src/stm32f1xx_hal_irda.c ****         /* Blocking error : transfer is aborted
1785:src/stm32f1xx_hal_irda.c ****            Set the IRDA state ready to be able to start again the process,
1786:src/stm32f1xx_hal_irda.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
1787:src/stm32f1xx_hal_irda.c ****         IRDA_EndRxTransfer(hirda);
1788:src/stm32f1xx_hal_irda.c **** 
1789:src/stm32f1xx_hal_irda.c ****         /* Disable the IRDA DMA Rx request if enabled */
1790:src/stm32f1xx_hal_irda.c ****         if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1791:src/stm32f1xx_hal_irda.c ****         {
1792:src/stm32f1xx_hal_irda.c ****           CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1793:src/stm32f1xx_hal_irda.c **** 
1794:src/stm32f1xx_hal_irda.c ****           /* Abort the IRDA DMA Rx channel */
1795:src/stm32f1xx_hal_irda.c ****           if (hirda->hdmarx != NULL)
1796:src/stm32f1xx_hal_irda.c ****           {
1797:src/stm32f1xx_hal_irda.c ****             /* Set the IRDA DMA Abort callback :
1798:src/stm32f1xx_hal_irda.c ****             will lead to call HAL_IRDA_ErrorCallback() at end of DMA abort procedure */
1799:src/stm32f1xx_hal_irda.c ****             hirda->hdmarx->XferAbortCallback = IRDA_DMAAbortOnError;
1800:src/stm32f1xx_hal_irda.c **** 
1801:src/stm32f1xx_hal_irda.c ****             /* Abort DMA RX */
1802:src/stm32f1xx_hal_irda.c ****             if (HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
1803:src/stm32f1xx_hal_irda.c ****             {
1804:src/stm32f1xx_hal_irda.c ****               /* Call Directly XferAbortCallback function in case of error */
ARM GAS  /tmp/cc2ibVgV.s 			page 34


1805:src/stm32f1xx_hal_irda.c ****               hirda->hdmarx->XferAbortCallback(hirda->hdmarx);
1806:src/stm32f1xx_hal_irda.c ****             }
1807:src/stm32f1xx_hal_irda.c ****           }
1808:src/stm32f1xx_hal_irda.c ****           else
1809:src/stm32f1xx_hal_irda.c ****           {
1810:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
1811:src/stm32f1xx_hal_irda.c ****             /* Call registered user error callback */
1812:src/stm32f1xx_hal_irda.c ****             hirda->ErrorCallback(hirda);
1813:src/stm32f1xx_hal_irda.c **** #else
1814:src/stm32f1xx_hal_irda.c ****             /* Call legacy weak user error callback */
1815:src/stm32f1xx_hal_irda.c ****             HAL_IRDA_ErrorCallback(hirda);
1816:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
1817:src/stm32f1xx_hal_irda.c ****           }
1818:src/stm32f1xx_hal_irda.c ****         }
1819:src/stm32f1xx_hal_irda.c ****         else
1820:src/stm32f1xx_hal_irda.c ****         {
1821:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
1822:src/stm32f1xx_hal_irda.c ****           /* Call registered user error callback */
1823:src/stm32f1xx_hal_irda.c ****           hirda->ErrorCallback(hirda);
1824:src/stm32f1xx_hal_irda.c **** #else
1825:src/stm32f1xx_hal_irda.c ****           /* Call legacy weak user error callback */
1826:src/stm32f1xx_hal_irda.c ****           HAL_IRDA_ErrorCallback(hirda);
1827:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
1828:src/stm32f1xx_hal_irda.c ****         }
1829:src/stm32f1xx_hal_irda.c ****       }
1830:src/stm32f1xx_hal_irda.c ****       else
1831:src/stm32f1xx_hal_irda.c ****       {
1832:src/stm32f1xx_hal_irda.c ****         /* Non Blocking error : transfer could go on.
1833:src/stm32f1xx_hal_irda.c ****            Error is notified to user through user error callback */
1834:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
1835:src/stm32f1xx_hal_irda.c ****         /* Call registered user error callback */
1836:src/stm32f1xx_hal_irda.c ****         hirda->ErrorCallback(hirda);
1837:src/stm32f1xx_hal_irda.c **** #else
1838:src/stm32f1xx_hal_irda.c ****         /* Call legacy weak user error callback */
1839:src/stm32f1xx_hal_irda.c ****         HAL_IRDA_ErrorCallback(hirda);
1840:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
1841:src/stm32f1xx_hal_irda.c **** 
1842:src/stm32f1xx_hal_irda.c ****         hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1843:src/stm32f1xx_hal_irda.c ****       }
1844:src/stm32f1xx_hal_irda.c ****     }
1845:src/stm32f1xx_hal_irda.c ****     return;
1846:src/stm32f1xx_hal_irda.c ****   } /* End if some error occurs */
1847:src/stm32f1xx_hal_irda.c **** 
1848:src/stm32f1xx_hal_irda.c ****   /* IRDA in mode Transmitter ------------------------------------------------*/
1849:src/stm32f1xx_hal_irda.c ****   if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
1850:src/stm32f1xx_hal_irda.c ****   {
1851:src/stm32f1xx_hal_irda.c ****     IRDA_Transmit_IT(hirda);
1852:src/stm32f1xx_hal_irda.c ****     return;
1853:src/stm32f1xx_hal_irda.c ****   }
1854:src/stm32f1xx_hal_irda.c **** 
1855:src/stm32f1xx_hal_irda.c ****   /* IRDA in mode Transmitter end --------------------------------------------*/
1856:src/stm32f1xx_hal_irda.c ****   if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
1857:src/stm32f1xx_hal_irda.c ****   {
1858:src/stm32f1xx_hal_irda.c ****     IRDA_EndTransmit_IT(hirda);
1859:src/stm32f1xx_hal_irda.c ****     return;
1860:src/stm32f1xx_hal_irda.c ****   }
1861:src/stm32f1xx_hal_irda.c **** }
ARM GAS  /tmp/cc2ibVgV.s 			page 35


1862:src/stm32f1xx_hal_irda.c **** 
1863:src/stm32f1xx_hal_irda.c **** /**
1864:src/stm32f1xx_hal_irda.c ****   * @brief  Tx Transfer complete callback.
1865:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1866:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1867:src/stm32f1xx_hal_irda.c ****   * @retval None
1868:src/stm32f1xx_hal_irda.c ****   */
1869:src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_TxCpltCallback(IRDA_HandleTypeDef *hirda)
1870:src/stm32f1xx_hal_irda.c **** {
1871:src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1872:src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1873:src/stm32f1xx_hal_irda.c **** 
1874:src/stm32f1xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1875:src/stm32f1xx_hal_irda.c ****             the HAL_IRDA_TxCpltCallback can be implemented in the user file.
1876:src/stm32f1xx_hal_irda.c ****    */
1877:src/stm32f1xx_hal_irda.c **** }
1878:src/stm32f1xx_hal_irda.c **** 
1879:src/stm32f1xx_hal_irda.c **** /**
1880:src/stm32f1xx_hal_irda.c ****   * @brief  Tx Half Transfer completed callback.
1881:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1882:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified USART module.
1883:src/stm32f1xx_hal_irda.c ****   * @retval None
1884:src/stm32f1xx_hal_irda.c ****   */
1885:src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_TxHalfCpltCallback(IRDA_HandleTypeDef *hirda)
1886:src/stm32f1xx_hal_irda.c **** {
1887:src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1888:src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1889:src/stm32f1xx_hal_irda.c **** 
1890:src/stm32f1xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1891:src/stm32f1xx_hal_irda.c ****             the HAL_IRDA_TxHalfCpltCallback can be implemented in the user file.
1892:src/stm32f1xx_hal_irda.c ****    */
1893:src/stm32f1xx_hal_irda.c **** }
1894:src/stm32f1xx_hal_irda.c **** 
1895:src/stm32f1xx_hal_irda.c **** /**
1896:src/stm32f1xx_hal_irda.c ****   * @brief  Rx Transfer complete callback.
1897:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1898:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1899:src/stm32f1xx_hal_irda.c ****   * @retval None
1900:src/stm32f1xx_hal_irda.c ****   */
1901:src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_RxCpltCallback(IRDA_HandleTypeDef *hirda)
1902:src/stm32f1xx_hal_irda.c **** {
1903:src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1904:src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1905:src/stm32f1xx_hal_irda.c **** 
1906:src/stm32f1xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1907:src/stm32f1xx_hal_irda.c ****             the HAL_IRDA_RxCpltCallback can be implemented in the user file.
1908:src/stm32f1xx_hal_irda.c ****    */
1909:src/stm32f1xx_hal_irda.c **** }
1910:src/stm32f1xx_hal_irda.c **** 
1911:src/stm32f1xx_hal_irda.c **** /**
1912:src/stm32f1xx_hal_irda.c ****   * @brief  Rx Half Transfer complete callback.
1913:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1914:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1915:src/stm32f1xx_hal_irda.c ****   * @retval None
1916:src/stm32f1xx_hal_irda.c ****   */
1917:src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_RxHalfCpltCallback(IRDA_HandleTypeDef *hirda)
1918:src/stm32f1xx_hal_irda.c **** {
ARM GAS  /tmp/cc2ibVgV.s 			page 36


1919:src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1920:src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1921:src/stm32f1xx_hal_irda.c **** 
1922:src/stm32f1xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1923:src/stm32f1xx_hal_irda.c ****             the HAL_IRDA_RxHalfCpltCallback can be implemented in the user file.
1924:src/stm32f1xx_hal_irda.c ****    */
1925:src/stm32f1xx_hal_irda.c **** }
1926:src/stm32f1xx_hal_irda.c **** 
1927:src/stm32f1xx_hal_irda.c **** /**
1928:src/stm32f1xx_hal_irda.c ****   * @brief  IRDA error callback.
1929:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1930:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1931:src/stm32f1xx_hal_irda.c ****   * @retval None
1932:src/stm32f1xx_hal_irda.c ****   */
1933:src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_ErrorCallback(IRDA_HandleTypeDef *hirda)
1934:src/stm32f1xx_hal_irda.c **** {
1935:src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1936:src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1937:src/stm32f1xx_hal_irda.c **** 
1938:src/stm32f1xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1939:src/stm32f1xx_hal_irda.c ****             the HAL_IRDA_ErrorCallback can be implemented in the user file.
1940:src/stm32f1xx_hal_irda.c ****    */
1941:src/stm32f1xx_hal_irda.c **** }
1942:src/stm32f1xx_hal_irda.c **** 
1943:src/stm32f1xx_hal_irda.c **** /**
1944:src/stm32f1xx_hal_irda.c ****   * @brief  IRDA Abort Complete callback.
1945:src/stm32f1xx_hal_irda.c ****   * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
1946:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1947:src/stm32f1xx_hal_irda.c ****   * @retval None
1948:src/stm32f1xx_hal_irda.c ****   */
1949:src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_AbortCpltCallback(IRDA_HandleTypeDef *hirda)
1950:src/stm32f1xx_hal_irda.c **** {
1951:src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1952:src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1953:src/stm32f1xx_hal_irda.c **** 
1954:src/stm32f1xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1955:src/stm32f1xx_hal_irda.c ****             the HAL_IRDA_AbortCpltCallback can be implemented in the user file.
1956:src/stm32f1xx_hal_irda.c ****    */
1957:src/stm32f1xx_hal_irda.c **** }
1958:src/stm32f1xx_hal_irda.c **** 
1959:src/stm32f1xx_hal_irda.c **** /**
1960:src/stm32f1xx_hal_irda.c ****   * @brief  IRDA Abort Transmit Complete callback.
1961:src/stm32f1xx_hal_irda.c ****   * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
1962:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1963:src/stm32f1xx_hal_irda.c ****   * @retval None
1964:src/stm32f1xx_hal_irda.c ****   */
1965:src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_AbortTransmitCpltCallback(IRDA_HandleTypeDef *hirda)
1966:src/stm32f1xx_hal_irda.c **** {
1967:src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1968:src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1969:src/stm32f1xx_hal_irda.c **** 
1970:src/stm32f1xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1971:src/stm32f1xx_hal_irda.c ****             the HAL_IRDA_AbortTransmitCpltCallback can be implemented in the user file.
1972:src/stm32f1xx_hal_irda.c ****    */
1973:src/stm32f1xx_hal_irda.c **** }
1974:src/stm32f1xx_hal_irda.c **** 
1975:src/stm32f1xx_hal_irda.c **** /**
ARM GAS  /tmp/cc2ibVgV.s 			page 37


1976:src/stm32f1xx_hal_irda.c ****   * @brief  IRDA Abort Receive Complete callback.
1977:src/stm32f1xx_hal_irda.c ****   * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
1978:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1979:src/stm32f1xx_hal_irda.c ****   * @retval None
1980:src/stm32f1xx_hal_irda.c ****   */
1981:src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_AbortReceiveCpltCallback(IRDA_HandleTypeDef *hirda)
1982:src/stm32f1xx_hal_irda.c **** {
1983:src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1984:src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1985:src/stm32f1xx_hal_irda.c **** 
1986:src/stm32f1xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1987:src/stm32f1xx_hal_irda.c ****             the HAL_IRDA_AbortReceiveCpltCallback can be implemented in the user file.
1988:src/stm32f1xx_hal_irda.c ****    */
1989:src/stm32f1xx_hal_irda.c **** }
1990:src/stm32f1xx_hal_irda.c **** 
1991:src/stm32f1xx_hal_irda.c **** /**
1992:src/stm32f1xx_hal_irda.c ****   * @}
1993:src/stm32f1xx_hal_irda.c ****   */
1994:src/stm32f1xx_hal_irda.c **** 
1995:src/stm32f1xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions_Group3 Peripheral State and Errors functions
1996:src/stm32f1xx_hal_irda.c ****   *  @brief   IRDA State and Errors functions
1997:src/stm32f1xx_hal_irda.c ****   *
1998:src/stm32f1xx_hal_irda.c **** @verbatim
1999:src/stm32f1xx_hal_irda.c ****   ==============================================================================
2000:src/stm32f1xx_hal_irda.c ****                   ##### Peripheral State and Errors functions #####
2001:src/stm32f1xx_hal_irda.c ****   ==============================================================================
2002:src/stm32f1xx_hal_irda.c ****   [..]
2003:src/stm32f1xx_hal_irda.c ****     This subsection provides a set of functions allowing to return the State of IrDA
2004:src/stm32f1xx_hal_irda.c ****     communication process and also return Peripheral Errors occurred during communication process
2005:src/stm32f1xx_hal_irda.c ****      (+) HAL_IRDA_GetState() API can be helpful to check in run-time the state of the IrDA peripher
2006:src/stm32f1xx_hal_irda.c ****      (+) HAL_IRDA_GetError() check in run-time errors that could be occurred during communication.
2007:src/stm32f1xx_hal_irda.c **** 
2008:src/stm32f1xx_hal_irda.c **** @endverbatim
2009:src/stm32f1xx_hal_irda.c ****   * @{
2010:src/stm32f1xx_hal_irda.c ****   */
2011:src/stm32f1xx_hal_irda.c **** 
2012:src/stm32f1xx_hal_irda.c **** /**
2013:src/stm32f1xx_hal_irda.c ****   * @brief  Return the IRDA state.
2014:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
2015:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA.
2016:src/stm32f1xx_hal_irda.c ****   * @retval HAL state
2017:src/stm32f1xx_hal_irda.c ****   */
2018:src/stm32f1xx_hal_irda.c **** HAL_IRDA_StateTypeDef HAL_IRDA_GetState(IRDA_HandleTypeDef *hirda)
2019:src/stm32f1xx_hal_irda.c **** {
2020:src/stm32f1xx_hal_irda.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
2021:src/stm32f1xx_hal_irda.c ****   temp1 = hirda->gState;
2022:src/stm32f1xx_hal_irda.c ****   temp2 = hirda->RxState;
2023:src/stm32f1xx_hal_irda.c **** 
2024:src/stm32f1xx_hal_irda.c ****   return (HAL_IRDA_StateTypeDef)(temp1 | temp2);
2025:src/stm32f1xx_hal_irda.c **** }
2026:src/stm32f1xx_hal_irda.c **** 
2027:src/stm32f1xx_hal_irda.c **** /**
2028:src/stm32f1xx_hal_irda.c ****   * @brief  Return the IRDA error code
2029:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
2030:src/stm32f1xx_hal_irda.c ****   *              the configuration information for the specified IRDA.
2031:src/stm32f1xx_hal_irda.c ****   * @retval IRDA Error Code
2032:src/stm32f1xx_hal_irda.c ****   */
ARM GAS  /tmp/cc2ibVgV.s 			page 38


2033:src/stm32f1xx_hal_irda.c **** uint32_t HAL_IRDA_GetError(IRDA_HandleTypeDef *hirda)
2034:src/stm32f1xx_hal_irda.c **** {
2035:src/stm32f1xx_hal_irda.c ****   return hirda->ErrorCode;
2036:src/stm32f1xx_hal_irda.c **** }
2037:src/stm32f1xx_hal_irda.c **** 
2038:src/stm32f1xx_hal_irda.c **** /**
2039:src/stm32f1xx_hal_irda.c ****   * @}
2040:src/stm32f1xx_hal_irda.c ****   */
2041:src/stm32f1xx_hal_irda.c **** 
2042:src/stm32f1xx_hal_irda.c **** /**
2043:src/stm32f1xx_hal_irda.c ****   * @}
2044:src/stm32f1xx_hal_irda.c ****   */
2045:src/stm32f1xx_hal_irda.c **** 
2046:src/stm32f1xx_hal_irda.c **** /** @defgroup IRDA_Private_Functions IRDA Private Functions
2047:src/stm32f1xx_hal_irda.c ****   * @{
2048:src/stm32f1xx_hal_irda.c ****   */
2049:src/stm32f1xx_hal_irda.c **** 
2050:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2051:src/stm32f1xx_hal_irda.c **** /**
2052:src/stm32f1xx_hal_irda.c ****   * @brief  Initialize the callbacks to their default values.
2053:src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
2054:src/stm32f1xx_hal_irda.c ****   * @retval none
2055:src/stm32f1xx_hal_irda.c ****   */
2056:src/stm32f1xx_hal_irda.c **** void IRDA_InitCallbacksToDefault(IRDA_HandleTypeDef *hirda)
2057:src/stm32f1xx_hal_irda.c **** {
2058:src/stm32f1xx_hal_irda.c ****   /* Init the IRDA Callback settings */
2059:src/stm32f1xx_hal_irda.c ****   hirda->TxHalfCpltCallback        = HAL_IRDA_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2060:src/stm32f1xx_hal_irda.c ****   hirda->TxCpltCallback            = HAL_IRDA_TxCpltCallback;            /* Legacy weak TxCpltCallb
2061:src/stm32f1xx_hal_irda.c ****   hirda->RxHalfCpltCallback        = HAL_IRDA_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2062:src/stm32f1xx_hal_irda.c ****   hirda->RxCpltCallback            = HAL_IRDA_RxCpltCallback;            /* Legacy weak RxCpltCallb
2063:src/stm32f1xx_hal_irda.c ****   hirda->ErrorCallback             = HAL_IRDA_ErrorCallback;             /* Legacy weak ErrorCallba
2064:src/stm32f1xx_hal_irda.c ****   hirda->AbortCpltCallback         = HAL_IRDA_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2065:src/stm32f1xx_hal_irda.c ****   hirda->AbortTransmitCpltCallback = HAL_IRDA_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2066:src/stm32f1xx_hal_irda.c ****   hirda->AbortReceiveCpltCallback  = HAL_IRDA_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2067:src/stm32f1xx_hal_irda.c **** 
2068:src/stm32f1xx_hal_irda.c **** }
2069:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
2070:src/stm32f1xx_hal_irda.c **** 
2071:src/stm32f1xx_hal_irda.c **** /**
2072:src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA transmit process complete callback.
2073:src/stm32f1xx_hal_irda.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2074:src/stm32f1xx_hal_irda.c ****   *               the configuration information for the specified DMA.
2075:src/stm32f1xx_hal_irda.c ****   * @retval None
2076:src/stm32f1xx_hal_irda.c ****   */
2077:src/stm32f1xx_hal_irda.c **** static void IRDA_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2078:src/stm32f1xx_hal_irda.c **** {
2079:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2080:src/stm32f1xx_hal_irda.c ****   /* DMA Normal mode */
2081:src/stm32f1xx_hal_irda.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
2082:src/stm32f1xx_hal_irda.c ****   {
2083:src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = 0U;
2084:src/stm32f1xx_hal_irda.c **** 
2085:src/stm32f1xx_hal_irda.c ****     /* Disable the DMA transfer for transmit request by resetting the DMAT bit
2086:src/stm32f1xx_hal_irda.c ****        in the IRDA CR3 register */
2087:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
2088:src/stm32f1xx_hal_irda.c **** 
2089:src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Transmit Complete Interrupt */
ARM GAS  /tmp/cc2ibVgV.s 			page 39


2090:src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
2091:src/stm32f1xx_hal_irda.c ****   }
2092:src/stm32f1xx_hal_irda.c ****   /* DMA Circular mode */
2093:src/stm32f1xx_hal_irda.c ****   else
2094:src/stm32f1xx_hal_irda.c ****   {
2095:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2096:src/stm32f1xx_hal_irda.c ****     /* Call registered Tx complete callback */
2097:src/stm32f1xx_hal_irda.c ****     hirda->TxCpltCallback(hirda);
2098:src/stm32f1xx_hal_irda.c **** #else
2099:src/stm32f1xx_hal_irda.c ****     /* Call legacy weak Tx complete callback */
2100:src/stm32f1xx_hal_irda.c ****     HAL_IRDA_TxCpltCallback(hirda);
2101:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2102:src/stm32f1xx_hal_irda.c ****   }
2103:src/stm32f1xx_hal_irda.c **** }
2104:src/stm32f1xx_hal_irda.c **** 
2105:src/stm32f1xx_hal_irda.c **** /**
2106:src/stm32f1xx_hal_irda.c ****   * @brief DMA IRDA receive process half complete callback
2107:src/stm32f1xx_hal_irda.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2108:src/stm32f1xx_hal_irda.c ****   *               the configuration information for the specified DMA.
2109:src/stm32f1xx_hal_irda.c ****   * @retval None
2110:src/stm32f1xx_hal_irda.c ****   */
2111:src/stm32f1xx_hal_irda.c **** static void IRDA_DMATransmitHalfCplt(DMA_HandleTypeDef *hdma)
2112:src/stm32f1xx_hal_irda.c **** {
2113:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2114:src/stm32f1xx_hal_irda.c **** 
2115:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2116:src/stm32f1xx_hal_irda.c ****   /* Call registered Tx Half complete callback */
2117:src/stm32f1xx_hal_irda.c ****   hirda->TxHalfCpltCallback(hirda);
2118:src/stm32f1xx_hal_irda.c **** #else
2119:src/stm32f1xx_hal_irda.c ****   /* Call legacy weak Tx complete callback */
2120:src/stm32f1xx_hal_irda.c ****   HAL_IRDA_TxHalfCpltCallback(hirda);
2121:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2122:src/stm32f1xx_hal_irda.c **** }
2123:src/stm32f1xx_hal_irda.c **** 
2124:src/stm32f1xx_hal_irda.c **** /**
2125:src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA receive process complete callback.
2126:src/stm32f1xx_hal_irda.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2127:src/stm32f1xx_hal_irda.c ****   *               the configuration information for the specified DMA.
2128:src/stm32f1xx_hal_irda.c ****   * @retval None
2129:src/stm32f1xx_hal_irda.c ****   */
2130:src/stm32f1xx_hal_irda.c **** static void IRDA_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
2131:src/stm32f1xx_hal_irda.c **** {
2132:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2133:src/stm32f1xx_hal_irda.c **** 
2134:src/stm32f1xx_hal_irda.c ****   /* DMA Normal mode */
2135:src/stm32f1xx_hal_irda.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
2136:src/stm32f1xx_hal_irda.c ****   {
2137:src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = 0U;
2138:src/stm32f1xx_hal_irda.c **** 
2139:src/stm32f1xx_hal_irda.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
2140:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
2141:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
2142:src/stm32f1xx_hal_irda.c **** 
2143:src/stm32f1xx_hal_irda.c ****     /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
2144:src/stm32f1xx_hal_irda.c ****        in the IRDA CR3 register */
2145:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
2146:src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/cc2ibVgV.s 			page 40


2147:src/stm32f1xx_hal_irda.c ****     /* At end of Rx process, restore hirda->RxState to Ready */
2148:src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
2149:src/stm32f1xx_hal_irda.c ****   }
2150:src/stm32f1xx_hal_irda.c **** 
2151:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2152:src/stm32f1xx_hal_irda.c ****   /* Call registered Rx complete callback */
2153:src/stm32f1xx_hal_irda.c ****   hirda->RxCpltCallback(hirda);
2154:src/stm32f1xx_hal_irda.c **** #else
2155:src/stm32f1xx_hal_irda.c ****   /* Call legacy weak Rx complete callback */
2156:src/stm32f1xx_hal_irda.c ****   HAL_IRDA_RxCpltCallback(hirda);
2157:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
2158:src/stm32f1xx_hal_irda.c **** }
2159:src/stm32f1xx_hal_irda.c **** 
2160:src/stm32f1xx_hal_irda.c **** /**
2161:src/stm32f1xx_hal_irda.c ****   * @brief DMA IRDA receive process half complete callback.
2162:src/stm32f1xx_hal_irda.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2163:src/stm32f1xx_hal_irda.c ****   *               the configuration information for the specified DMA.
2164:src/stm32f1xx_hal_irda.c ****   * @retval None
2165:src/stm32f1xx_hal_irda.c ****   */
2166:src/stm32f1xx_hal_irda.c **** static void IRDA_DMAReceiveHalfCplt(DMA_HandleTypeDef *hdma)
2167:src/stm32f1xx_hal_irda.c **** {
2168:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2169:src/stm32f1xx_hal_irda.c **** 
2170:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2171:src/stm32f1xx_hal_irda.c ****   /*Call registered Rx Half complete callback*/
2172:src/stm32f1xx_hal_irda.c ****   hirda->RxHalfCpltCallback(hirda);
2173:src/stm32f1xx_hal_irda.c **** #else
2174:src/stm32f1xx_hal_irda.c ****   /* Call legacy weak Rx Half complete callback */
2175:src/stm32f1xx_hal_irda.c ****   HAL_IRDA_RxHalfCpltCallback(hirda);
2176:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2177:src/stm32f1xx_hal_irda.c **** }
2178:src/stm32f1xx_hal_irda.c **** 
2179:src/stm32f1xx_hal_irda.c **** /**
2180:src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA communication error callback.
2181:src/stm32f1xx_hal_irda.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2182:src/stm32f1xx_hal_irda.c ****   *               the configuration information for the specified DMA.
2183:src/stm32f1xx_hal_irda.c ****   * @retval None
2184:src/stm32f1xx_hal_irda.c ****   */
2185:src/stm32f1xx_hal_irda.c **** static void IRDA_DMAError(DMA_HandleTypeDef *hdma)
2186:src/stm32f1xx_hal_irda.c **** {
2187:src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
2188:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2189:src/stm32f1xx_hal_irda.c **** 
2190:src/stm32f1xx_hal_irda.c ****   /* Stop IRDA DMA Tx request if ongoing */
2191:src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT);
2192:src/stm32f1xx_hal_irda.c ****   if ((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
2193:src/stm32f1xx_hal_irda.c ****   {
2194:src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = 0U;
2195:src/stm32f1xx_hal_irda.c ****     IRDA_EndTxTransfer(hirda);
2196:src/stm32f1xx_hal_irda.c ****   }
2197:src/stm32f1xx_hal_irda.c **** 
2198:src/stm32f1xx_hal_irda.c ****   /* Stop IRDA DMA Rx request if ongoing */
2199:src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
2200:src/stm32f1xx_hal_irda.c ****   if ((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
2201:src/stm32f1xx_hal_irda.c ****   {
2202:src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = 0U;
2203:src/stm32f1xx_hal_irda.c ****     IRDA_EndRxTransfer(hirda);
ARM GAS  /tmp/cc2ibVgV.s 			page 41


2204:src/stm32f1xx_hal_irda.c ****   }
2205:src/stm32f1xx_hal_irda.c **** 
2206:src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode |= HAL_IRDA_ERROR_DMA;
2207:src/stm32f1xx_hal_irda.c **** 
2208:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2209:src/stm32f1xx_hal_irda.c ****   /* Call registered user error callback */
2210:src/stm32f1xx_hal_irda.c ****   hirda->ErrorCallback(hirda);
2211:src/stm32f1xx_hal_irda.c **** #else
2212:src/stm32f1xx_hal_irda.c ****   /* Call legacy weak user error callback */
2213:src/stm32f1xx_hal_irda.c ****   HAL_IRDA_ErrorCallback(hirda);
2214:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2215:src/stm32f1xx_hal_irda.c **** }
2216:src/stm32f1xx_hal_irda.c **** 
2217:src/stm32f1xx_hal_irda.c **** /**
2218:src/stm32f1xx_hal_irda.c ****   * @brief  This function handles IRDA Communication Timeout.
2219:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
2220:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA.
2221:src/stm32f1xx_hal_irda.c ****   * @param  Flag specifies the IRDA flag to check.
2222:src/stm32f1xx_hal_irda.c ****   * @param  Status The new Flag status (SET or RESET).
2223:src/stm32f1xx_hal_irda.c ****   * @param  Tickstart Tick start value
2224:src/stm32f1xx_hal_irda.c ****   * @param  Timeout Timeout duration
2225:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
2226:src/stm32f1xx_hal_irda.c ****   */
2227:src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, Flag
2228:src/stm32f1xx_hal_irda.c **** {
2229:src/stm32f1xx_hal_irda.c ****   /* Wait until flag is set */
2230:src/stm32f1xx_hal_irda.c ****   while ((__HAL_IRDA_GET_FLAG(hirda, Flag) ? SET : RESET) == Status)
2231:src/stm32f1xx_hal_irda.c ****   {
2232:src/stm32f1xx_hal_irda.c ****     /* Check for the Timeout */
2233:src/stm32f1xx_hal_irda.c ****     if (Timeout != HAL_MAX_DELAY)
2234:src/stm32f1xx_hal_irda.c ****     {
2235:src/stm32f1xx_hal_irda.c ****       if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
2236:src/stm32f1xx_hal_irda.c ****       {
2237:src/stm32f1xx_hal_irda.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
2238:src/stm32f1xx_hal_irda.c ****         CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
2239:src/stm32f1xx_hal_irda.c ****         CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
2240:src/stm32f1xx_hal_irda.c **** 
2241:src/stm32f1xx_hal_irda.c ****         hirda->gState  = HAL_IRDA_STATE_READY;
2242:src/stm32f1xx_hal_irda.c ****         hirda->RxState = HAL_IRDA_STATE_READY;
2243:src/stm32f1xx_hal_irda.c **** 
2244:src/stm32f1xx_hal_irda.c ****         /* Process Unlocked */
2245:src/stm32f1xx_hal_irda.c ****         __HAL_UNLOCK(hirda);
2246:src/stm32f1xx_hal_irda.c **** 
2247:src/stm32f1xx_hal_irda.c ****         return HAL_TIMEOUT;
2248:src/stm32f1xx_hal_irda.c ****       }
2249:src/stm32f1xx_hal_irda.c ****     }
2250:src/stm32f1xx_hal_irda.c ****   }
2251:src/stm32f1xx_hal_irda.c ****   return HAL_OK;
2252:src/stm32f1xx_hal_irda.c **** }
2253:src/stm32f1xx_hal_irda.c **** 
2254:src/stm32f1xx_hal_irda.c **** /**
2255:src/stm32f1xx_hal_irda.c ****   * @brief  End ongoing Tx transfer on IRDA peripheral (following error detection or Transmit compl
2256:src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
2257:src/stm32f1xx_hal_irda.c ****   * @retval None
2258:src/stm32f1xx_hal_irda.c ****   */
2259:src/stm32f1xx_hal_irda.c **** static void IRDA_EndTxTransfer(IRDA_HandleTypeDef *hirda)
2260:src/stm32f1xx_hal_irda.c **** {
ARM GAS  /tmp/cc2ibVgV.s 			page 42


2261:src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
2262:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
2263:src/stm32f1xx_hal_irda.c **** 
2264:src/stm32f1xx_hal_irda.c ****   /* At end of Tx process, restore hirda->gState to Ready */
2265:src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
2266:src/stm32f1xx_hal_irda.c **** }
2267:src/stm32f1xx_hal_irda.c **** 
2268:src/stm32f1xx_hal_irda.c **** /**
2269:src/stm32f1xx_hal_irda.c ****   * @brief  End ongoing Rx transfer on IRDA peripheral (following error detection or Reception comp
2270:src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
2271:src/stm32f1xx_hal_irda.c ****   * @retval None
2272:src/stm32f1xx_hal_irda.c ****   */
2273:src/stm32f1xx_hal_irda.c **** static void IRDA_EndRxTransfer(IRDA_HandleTypeDef *hirda)
2274:src/stm32f1xx_hal_irda.c **** {
  78              		.loc 1 2274 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83              	.LVL0:
2275:src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2276:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  84              		.loc 1 2276 0
  85 0000 0368     		ldr	r3, [r0]	@ _3, hirda_2(D)->Instance
  86 0002 DA68     		ldr	r2, [r3, #12]	@ _4, _3->CR1
  87 0004 22F49072 		bic	r2, r2, #288	@ _5, _4,
  88 0008 DA60     		str	r2, [r3, #12]	@ _5, _3->CR1
2277:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
  89              		.loc 1 2277 0
  90 000a 5A69     		ldr	r2, [r3, #20]	@ _7, _3->CR3
  91 000c 22F00102 		bic	r2, r2, #1	@ _8, _7,
  92 0010 5A61     		str	r2, [r3, #20]	@ _8, _3->CR3
2278:src/stm32f1xx_hal_irda.c **** 
2279:src/stm32f1xx_hal_irda.c ****   /* At end of Rx process, restore hirda->RxState to Ready */
2280:src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
  93              		.loc 1 2280 0
  94 0012 2023     		movs	r3, #32	@ tmp116,
  95 0014 80F83630 		strb	r3, [r0, #54]	@ tmp116, hirda_2(D)->RxState
  96 0018 7047     		bx	lr	@
  97              		.cfi_endproc
  98              	.LFE102:
  99              		.size	IRDA_EndRxTransfer, .-IRDA_EndRxTransfer
 100              		.align	1
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu softvfp
 105              		.type	IRDA_WaitOnFlagUntilTimeout.constprop.3, %function
 106              	IRDA_WaitOnFlagUntilTimeout.constprop.3:
 107              	.LFB132:
2227:src/stm32f1xx_hal_irda.c **** {
 108              		.loc 1 2227 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              	.LVL1:
 113 001a F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
ARM GAS  /tmp/cc2ibVgV.s 			page 43


 114              	.LCFI0:
 115              		.cfi_def_cfa_offset 24
 116              		.cfi_offset 3, -24
 117              		.cfi_offset 4, -20
 118              		.cfi_offset 5, -16
 119              		.cfi_offset 6, -12
 120              		.cfi_offset 7, -8
 121              		.cfi_offset 14, -4
 122 001c 0446     		mov	r4, r0	@ hirda, hirda
 123 001e 0E46     		mov	r6, r1	@ Flag, Flag
 124 0020 1746     		mov	r7, r2	@ Tickstart, Tickstart
 125 0022 1D46     		mov	r5, r3	@ Timeout, Timeout
 126              	.LVL2:
 127              	.L3:
2230:src/stm32f1xx_hal_irda.c ****   {
 128              		.loc 1 2230 0
 129 0024 2168     		ldr	r1, [r4]	@ _7, hirda_5(D)->Instance
 130              	.L4:
 131 0026 0B68     		ldr	r3, [r1]	@ _8, _7->SR
 132 0028 36EA0303 		bics	r3, r6, r3	@ tmp134, Flag, _8
 133 002c 01D1     		bne	.L8	@,
2251:src/stm32f1xx_hal_irda.c **** }
 134              		.loc 1 2251 0
 135 002e 0020     		movs	r0, #0	@ <retval>,
2252:src/stm32f1xx_hal_irda.c **** 
 136              		.loc 1 2252 0
 137 0030 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 138              	.LVL3:
 139              	.L8:
2233:src/stm32f1xx_hal_irda.c ****     {
 140              		.loc 1 2233 0
 141 0032 6B1C     		adds	r3, r5, #1	@, Timeout,
 142 0034 F7D0     		beq	.L4	@,
2235:src/stm32f1xx_hal_irda.c ****       {
 143              		.loc 1 2235 0
 144 0036 95B9     		cbnz	r5, .L5	@ Timeout,
 145              	.L7:
 146              	.LVL4:
 147              	.LBB4:
 148              	.LBB5:
2238:src/stm32f1xx_hal_irda.c ****         CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 149              		.loc 1 2238 0
 150 0038 2368     		ldr	r3, [r4]	@ _21, hirda_5(D)->Instance
2245:src/stm32f1xx_hal_irda.c **** 
 151              		.loc 1 2245 0
 152 003a 0320     		movs	r0, #3	@ <retval>,
2238:src/stm32f1xx_hal_irda.c ****         CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 153              		.loc 1 2238 0
 154 003c DA68     		ldr	r2, [r3, #12]	@ _22, _21->CR1
 155 003e 22F4D072 		bic	r2, r2, #416	@ _23, _22,
 156 0042 DA60     		str	r2, [r3, #12]	@ _23, _21->CR1
2239:src/stm32f1xx_hal_irda.c **** 
 157              		.loc 1 2239 0
 158 0044 5A69     		ldr	r2, [r3, #20]	@ _24, _21->CR3
 159 0046 22F00102 		bic	r2, r2, #1	@ _25, _24,
 160 004a 5A61     		str	r2, [r3, #20]	@ _25, _21->CR3
2241:src/stm32f1xx_hal_irda.c ****         hirda->RxState = HAL_IRDA_STATE_READY;
ARM GAS  /tmp/cc2ibVgV.s 			page 44


 161              		.loc 1 2241 0
 162 004c 2023     		movs	r3, #32	@ tmp125,
 163 004e 84F83530 		strb	r3, [r4, #53]	@ tmp125, hirda_5(D)->gState
2242:src/stm32f1xx_hal_irda.c **** 
 164              		.loc 1 2242 0
 165 0052 84F83630 		strb	r3, [r4, #54]	@ tmp125, hirda_5(D)->RxState
2245:src/stm32f1xx_hal_irda.c **** 
 166              		.loc 1 2245 0
 167 0056 0023     		movs	r3, #0	@ tmp129,
 168 0058 84F83430 		strb	r3, [r4, #52]	@ tmp129, hirda_5(D)->Lock
 169              	.LVL5:
 170 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 171              	.LVL6:
 172              	.L5:
 173              	.LBE5:
 174              	.LBE4:
2235:src/stm32f1xx_hal_irda.c ****       {
 175              		.loc 1 2235 0
 176 005e FFF7FEFF 		bl	HAL_GetTick	@
 177              	.LVL7:
 178 0062 C01B     		subs	r0, r0, r7	@ tmp131,, Tickstart
 179 0064 8542     		cmp	r5, r0	@ Timeout, tmp131
 180 0066 DDD2     		bcs	.L3	@,
 181 0068 E6E7     		b	.L7	@
 182              		.cfi_endproc
 183              	.LFE132:
 184              		.size	IRDA_WaitOnFlagUntilTimeout.constprop.3, .-IRDA_WaitOnFlagUntilTimeout.constprop.3
 185              		.align	1
 186              		.weak	HAL_IRDA_MspInit
 187              		.syntax unified
 188              		.thumb
 189              		.thumb_func
 190              		.fpu softvfp
 191              		.type	HAL_IRDA_MspInit, %function
 192              	HAL_IRDA_MspInit:
 193              	.LFB131:
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197              		@ link register save eliminated.
 198 006a 7047     		bx	lr	@
 199              		.cfi_endproc
 200              	.LFE131:
 201              		.size	HAL_IRDA_MspInit, .-HAL_IRDA_MspInit
 202              		.align	1
 203              		.global	HAL_IRDA_Init
 204              		.syntax unified
 205              		.thumb
 206              		.thumb_func
 207              		.fpu softvfp
 208              		.type	HAL_IRDA_Init, %function
 209              	HAL_IRDA_Init:
 210              	.LFB65:
 293:src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 211              		.loc 1 293 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc2ibVgV.s 			page 45


 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215              	.LVL8:
 293:src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 216              		.loc 1 293 0
 217 006c 70B5     		push	{r4, r5, r6, lr}	@
 218              	.LCFI1:
 219              		.cfi_def_cfa_offset 16
 220              		.cfi_offset 4, -16
 221              		.cfi_offset 5, -12
 222              		.cfi_offset 6, -8
 223              		.cfi_offset 14, -4
 295:src/stm32f1xx_hal_irda.c ****   {
 224              		.loc 1 295 0
 225 006e 0446     		mov	r4, r0	@ hirda, hirda
 226 0070 0028     		cmp	r0, #0	@ hirda
 227 0072 68D0     		beq	.L17	@
 305:src/stm32f1xx_hal_irda.c ****   {
 228              		.loc 1 305 0
 229 0074 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2	@ hirda_4(D)->gState, hirda_4(D)->gState
 230 0078 03F0FF02 		and	r2, r3, #255	@ _6, hirda_4(D)->gState,
 231 007c 1BB9     		cbnz	r3, .L14	@ hirda_4(D)->gState,
 308:src/stm32f1xx_hal_irda.c **** 
 232              		.loc 1 308 0
 233 007e 80F83420 		strb	r2, [r0, #52]	@ _6, hirda_4(D)->Lock
 322:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 234              		.loc 1 322 0
 235 0082 FFF7FEFF 		bl	HAL_IRDA_MspInit	@
 236              	.LVL9:
 237              	.L14:
 326:src/stm32f1xx_hal_irda.c **** 
 238              		.loc 1 326 0
 239 0086 2423     		movs	r3, #36	@ tmp182,
 240 0088 84F83530 		strb	r3, [r4, #53]	@ tmp182, hirda_4(D)->gState
 329:src/stm32f1xx_hal_irda.c **** 
 241              		.loc 1 329 0
 242 008c 2368     		ldr	r3, [r4]	@ _10, hirda_4(D)->Instance
 243              	.LBB8:
 244              	.LBB9:
2281:src/stm32f1xx_hal_irda.c **** }
2282:src/stm32f1xx_hal_irda.c **** 
2283:src/stm32f1xx_hal_irda.c **** /**
2284:src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA communication abort callback, when initiated by HAL services on Error
2285:src/stm32f1xx_hal_irda.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
2286:src/stm32f1xx_hal_irda.c ****   * @param  hdma DMA handle.
2287:src/stm32f1xx_hal_irda.c ****   * @retval None
2288:src/stm32f1xx_hal_irda.c ****   */
2289:src/stm32f1xx_hal_irda.c **** static void IRDA_DMAAbortOnError(DMA_HandleTypeDef *hdma)
2290:src/stm32f1xx_hal_irda.c **** {
2291:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2292:src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
2293:src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
2294:src/stm32f1xx_hal_irda.c **** 
2295:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2296:src/stm32f1xx_hal_irda.c ****   /* Call registered user error callback */
2297:src/stm32f1xx_hal_irda.c ****   hirda->ErrorCallback(hirda);
2298:src/stm32f1xx_hal_irda.c **** #else
2299:src/stm32f1xx_hal_irda.c ****   /* Call legacy weak user error callback */
ARM GAS  /tmp/cc2ibVgV.s 			page 46


2300:src/stm32f1xx_hal_irda.c ****   HAL_IRDA_ErrorCallback(hirda);
2301:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2302:src/stm32f1xx_hal_irda.c **** }
2303:src/stm32f1xx_hal_irda.c **** 
2304:src/stm32f1xx_hal_irda.c **** /**
2305:src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA Tx communication abort callback, when initiated by user
2306:src/stm32f1xx_hal_irda.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
2307:src/stm32f1xx_hal_irda.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2308:src/stm32f1xx_hal_irda.c ****   *         Abort still ongoing for Rx DMA Handle.
2309:src/stm32f1xx_hal_irda.c ****   * @param  hdma DMA handle.
2310:src/stm32f1xx_hal_irda.c ****   * @retval None
2311:src/stm32f1xx_hal_irda.c ****   */
2312:src/stm32f1xx_hal_irda.c **** static void IRDA_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
2313:src/stm32f1xx_hal_irda.c **** {
2314:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2315:src/stm32f1xx_hal_irda.c **** 
2316:src/stm32f1xx_hal_irda.c ****   hirda->hdmatx->XferAbortCallback = NULL;
2317:src/stm32f1xx_hal_irda.c **** 
2318:src/stm32f1xx_hal_irda.c ****   /* Check if an Abort process is still ongoing */
2319:src/stm32f1xx_hal_irda.c ****   if (hirda->hdmarx != NULL)
2320:src/stm32f1xx_hal_irda.c ****   {
2321:src/stm32f1xx_hal_irda.c ****     if (hirda->hdmarx->XferAbortCallback != NULL)
2322:src/stm32f1xx_hal_irda.c ****     {
2323:src/stm32f1xx_hal_irda.c ****       return;
2324:src/stm32f1xx_hal_irda.c ****     }
2325:src/stm32f1xx_hal_irda.c ****   }
2326:src/stm32f1xx_hal_irda.c **** 
2327:src/stm32f1xx_hal_irda.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2328:src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
2329:src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
2330:src/stm32f1xx_hal_irda.c **** 
2331:src/stm32f1xx_hal_irda.c ****   /* Reset ErrorCode */
2332:src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
2333:src/stm32f1xx_hal_irda.c **** 
2334:src/stm32f1xx_hal_irda.c ****   /* Restore hirda->gState and hirda->RxState to Ready */
2335:src/stm32f1xx_hal_irda.c ****   hirda->gState  = HAL_IRDA_STATE_READY;
2336:src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
2337:src/stm32f1xx_hal_irda.c **** 
2338:src/stm32f1xx_hal_irda.c ****   /* Call user Abort complete callback */
2339:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2340:src/stm32f1xx_hal_irda.c ****   /* Call registered Abort complete callback */
2341:src/stm32f1xx_hal_irda.c ****   hirda->AbortCpltCallback(hirda);
2342:src/stm32f1xx_hal_irda.c **** #else
2343:src/stm32f1xx_hal_irda.c ****   /* Call legacy weak Abort complete callback */
2344:src/stm32f1xx_hal_irda.c ****   HAL_IRDA_AbortCpltCallback(hirda);
2345:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2346:src/stm32f1xx_hal_irda.c **** }
2347:src/stm32f1xx_hal_irda.c **** 
2348:src/stm32f1xx_hal_irda.c **** /**
2349:src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA Rx communication abort callback, when initiated by user
2350:src/stm32f1xx_hal_irda.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
2351:src/stm32f1xx_hal_irda.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2352:src/stm32f1xx_hal_irda.c ****   *         Abort still ongoing for Tx DMA Handle.
2353:src/stm32f1xx_hal_irda.c ****   * @param  hdma DMA handle.
2354:src/stm32f1xx_hal_irda.c ****   * @retval None
2355:src/stm32f1xx_hal_irda.c ****   */
2356:src/stm32f1xx_hal_irda.c **** static void IRDA_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
ARM GAS  /tmp/cc2ibVgV.s 			page 47


2357:src/stm32f1xx_hal_irda.c **** {
2358:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2359:src/stm32f1xx_hal_irda.c **** 
2360:src/stm32f1xx_hal_irda.c ****   hirda->hdmarx->XferAbortCallback = NULL;
2361:src/stm32f1xx_hal_irda.c **** 
2362:src/stm32f1xx_hal_irda.c ****   /* Check if an Abort process is still ongoing */
2363:src/stm32f1xx_hal_irda.c ****   if (hirda->hdmatx != NULL)
2364:src/stm32f1xx_hal_irda.c ****   {
2365:src/stm32f1xx_hal_irda.c ****     if (hirda->hdmatx->XferAbortCallback != NULL)
2366:src/stm32f1xx_hal_irda.c ****     {
2367:src/stm32f1xx_hal_irda.c ****       return;
2368:src/stm32f1xx_hal_irda.c ****     }
2369:src/stm32f1xx_hal_irda.c ****   }
2370:src/stm32f1xx_hal_irda.c **** 
2371:src/stm32f1xx_hal_irda.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2372:src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
2373:src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
2374:src/stm32f1xx_hal_irda.c **** 
2375:src/stm32f1xx_hal_irda.c ****   /* Reset ErrorCode */
2376:src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
2377:src/stm32f1xx_hal_irda.c **** 
2378:src/stm32f1xx_hal_irda.c ****   /* Restore hirda->gState and hirda->RxState to Ready */
2379:src/stm32f1xx_hal_irda.c ****   hirda->gState  = HAL_IRDA_STATE_READY;
2380:src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
2381:src/stm32f1xx_hal_irda.c **** 
2382:src/stm32f1xx_hal_irda.c ****   /* Call user Abort complete callback */
2383:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2384:src/stm32f1xx_hal_irda.c ****   /* Call registered Abort complete callback */
2385:src/stm32f1xx_hal_irda.c ****   hirda->AbortCpltCallback(hirda);
2386:src/stm32f1xx_hal_irda.c **** #else
2387:src/stm32f1xx_hal_irda.c ****   /* Call legacy weak Abort complete callback */
2388:src/stm32f1xx_hal_irda.c ****   HAL_IRDA_AbortCpltCallback(hirda);
2389:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2390:src/stm32f1xx_hal_irda.c **** }
2391:src/stm32f1xx_hal_irda.c **** 
2392:src/stm32f1xx_hal_irda.c **** /**
2393:src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA Tx communication abort callback, when initiated by user by a call to
2394:src/stm32f1xx_hal_irda.c ****   *         HAL_IRDA_AbortTransmit_IT API (Abort only Tx transfer)
2395:src/stm32f1xx_hal_irda.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
2396:src/stm32f1xx_hal_irda.c ****   *         and leads to user Tx Abort Complete callback execution).
2397:src/stm32f1xx_hal_irda.c ****   * @param  hdma DMA handle.
2398:src/stm32f1xx_hal_irda.c ****   * @retval None
2399:src/stm32f1xx_hal_irda.c ****   */
2400:src/stm32f1xx_hal_irda.c **** static void IRDA_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2401:src/stm32f1xx_hal_irda.c **** {
2402:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2403:src/stm32f1xx_hal_irda.c **** 
2404:src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
2405:src/stm32f1xx_hal_irda.c **** 
2406:src/stm32f1xx_hal_irda.c ****   /* Restore hirda->gState to Ready */
2407:src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
2408:src/stm32f1xx_hal_irda.c **** 
2409:src/stm32f1xx_hal_irda.c ****   /* Call user Abort complete callback */
2410:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2411:src/stm32f1xx_hal_irda.c ****   /* Call registered Abort Transmit Complete Callback */
2412:src/stm32f1xx_hal_irda.c ****   hirda->AbortTransmitCpltCallback(hirda);
2413:src/stm32f1xx_hal_irda.c **** #else
ARM GAS  /tmp/cc2ibVgV.s 			page 48


2414:src/stm32f1xx_hal_irda.c ****   /* Call legacy weak Abort Transmit Complete Callback */
2415:src/stm32f1xx_hal_irda.c ****   HAL_IRDA_AbortTransmitCpltCallback(hirda);
2416:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2417:src/stm32f1xx_hal_irda.c **** }
2418:src/stm32f1xx_hal_irda.c **** 
2419:src/stm32f1xx_hal_irda.c **** /**
2420:src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA Rx communication abort callback, when initiated by user by a call to
2421:src/stm32f1xx_hal_irda.c ****   *         HAL_IRDA_AbortReceive_IT API (Abort only Rx transfer)
2422:src/stm32f1xx_hal_irda.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
2423:src/stm32f1xx_hal_irda.c ****   *         and leads to user Rx Abort Complete callback execution).
2424:src/stm32f1xx_hal_irda.c ****   * @param  hdma DMA handle.
2425:src/stm32f1xx_hal_irda.c ****   * @retval None
2426:src/stm32f1xx_hal_irda.c ****   */
2427:src/stm32f1xx_hal_irda.c **** static void IRDA_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2428:src/stm32f1xx_hal_irda.c **** {
2429:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2430:src/stm32f1xx_hal_irda.c **** 
2431:src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
2432:src/stm32f1xx_hal_irda.c **** 
2433:src/stm32f1xx_hal_irda.c ****   /* Restore hirda->RxState to Ready */
2434:src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
2435:src/stm32f1xx_hal_irda.c **** 
2436:src/stm32f1xx_hal_irda.c ****   /* Call user Abort complete callback */
2437:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2438:src/stm32f1xx_hal_irda.c ****   /* Call registered Abort Receive Complete Callback */
2439:src/stm32f1xx_hal_irda.c ****   hirda->AbortReceiveCpltCallback(hirda);
2440:src/stm32f1xx_hal_irda.c **** #else
2441:src/stm32f1xx_hal_irda.c ****   /* Call legacy weak Abort Receive Complete Callback */
2442:src/stm32f1xx_hal_irda.c ****   HAL_IRDA_AbortReceiveCpltCallback(hirda);
2443:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2444:src/stm32f1xx_hal_irda.c **** }
2445:src/stm32f1xx_hal_irda.c **** 
2446:src/stm32f1xx_hal_irda.c **** /**
2447:src/stm32f1xx_hal_irda.c ****  * @brief  Send an amount of data in non blocking mode.
2448:src/stm32f1xx_hal_irda.c ****  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
2449:src/stm32f1xx_hal_irda.c ****  *                the configuration information for the specified IRDA module.
2450:src/stm32f1xx_hal_irda.c ****  * @retval HAL status
2451:src/stm32f1xx_hal_irda.c ****  */
2452:src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda)
2453:src/stm32f1xx_hal_irda.c **** {
2454:src/stm32f1xx_hal_irda.c ****   uint16_t *tmp;
2455:src/stm32f1xx_hal_irda.c **** 
2456:src/stm32f1xx_hal_irda.c ****   /* Check that a Tx process is ongoing */
2457:src/stm32f1xx_hal_irda.c ****   if (hirda->gState == HAL_IRDA_STATE_BUSY_TX)
2458:src/stm32f1xx_hal_irda.c ****   {
2459:src/stm32f1xx_hal_irda.c ****     if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
2460:src/stm32f1xx_hal_irda.c ****     {
2461:src/stm32f1xx_hal_irda.c ****       tmp = (uint16_t *) hirda->pTxBuffPtr;
2462:src/stm32f1xx_hal_irda.c ****       hirda->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
2463:src/stm32f1xx_hal_irda.c ****       if (hirda->Init.Parity == IRDA_PARITY_NONE)
2464:src/stm32f1xx_hal_irda.c ****       {
2465:src/stm32f1xx_hal_irda.c ****         hirda->pTxBuffPtr += 2U;
2466:src/stm32f1xx_hal_irda.c ****       }
2467:src/stm32f1xx_hal_irda.c ****       else
2468:src/stm32f1xx_hal_irda.c ****       {
2469:src/stm32f1xx_hal_irda.c ****         hirda->pTxBuffPtr += 1U;
2470:src/stm32f1xx_hal_irda.c ****       }
ARM GAS  /tmp/cc2ibVgV.s 			page 49


2471:src/stm32f1xx_hal_irda.c ****     }
2472:src/stm32f1xx_hal_irda.c ****     else
2473:src/stm32f1xx_hal_irda.c ****     {
2474:src/stm32f1xx_hal_irda.c ****       hirda->Instance->DR = (uint8_t)(*hirda->pTxBuffPtr++ & (uint8_t)0x00FF);
2475:src/stm32f1xx_hal_irda.c ****     }
2476:src/stm32f1xx_hal_irda.c **** 
2477:src/stm32f1xx_hal_irda.c ****     if (--hirda->TxXferCount == 0U)
2478:src/stm32f1xx_hal_irda.c ****     {
2479:src/stm32f1xx_hal_irda.c ****       /* Disable the IRDA Transmit Data Register Empty Interrupt */
2480:src/stm32f1xx_hal_irda.c ****       CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TXEIE);
2481:src/stm32f1xx_hal_irda.c **** 
2482:src/stm32f1xx_hal_irda.c ****       /* Enable the IRDA Transmit Complete Interrupt */
2483:src/stm32f1xx_hal_irda.c ****       SET_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
2484:src/stm32f1xx_hal_irda.c ****     }
2485:src/stm32f1xx_hal_irda.c **** 
2486:src/stm32f1xx_hal_irda.c ****     return HAL_OK;
2487:src/stm32f1xx_hal_irda.c ****   }
2488:src/stm32f1xx_hal_irda.c ****   else
2489:src/stm32f1xx_hal_irda.c ****   {
2490:src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
2491:src/stm32f1xx_hal_irda.c ****   }
2492:src/stm32f1xx_hal_irda.c **** }
2493:src/stm32f1xx_hal_irda.c **** 
2494:src/stm32f1xx_hal_irda.c **** /**
2495:src/stm32f1xx_hal_irda.c ****   * @brief  Wraps up transmission in non blocking mode.
2496:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
2497:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
2498:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
2499:src/stm32f1xx_hal_irda.c ****   */
2500:src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda)
2501:src/stm32f1xx_hal_irda.c **** {
2502:src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA Transmit Complete Interrupt */
2503:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
2504:src/stm32f1xx_hal_irda.c **** 
2505:src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
2506:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
2507:src/stm32f1xx_hal_irda.c **** 
2508:src/stm32f1xx_hal_irda.c ****   /* Tx process is ended, restore hirda->gState to Ready */
2509:src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
2510:src/stm32f1xx_hal_irda.c **** 
2511:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2512:src/stm32f1xx_hal_irda.c ****   /* Call registered Tx complete callback */
2513:src/stm32f1xx_hal_irda.c ****   hirda->TxCpltCallback(hirda);
2514:src/stm32f1xx_hal_irda.c **** #else
2515:src/stm32f1xx_hal_irda.c ****   /* Call legacy weak Tx complete callback */
2516:src/stm32f1xx_hal_irda.c ****   HAL_IRDA_TxCpltCallback(hirda);
2517:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2518:src/stm32f1xx_hal_irda.c **** 
2519:src/stm32f1xx_hal_irda.c ****   return HAL_OK;
2520:src/stm32f1xx_hal_irda.c **** }
2521:src/stm32f1xx_hal_irda.c **** 
2522:src/stm32f1xx_hal_irda.c **** /**
2523:src/stm32f1xx_hal_irda.c ****   * @brief  Receives an amount of data in non blocking mode.
2524:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
2525:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
2526:src/stm32f1xx_hal_irda.c ****   * @retval HAL status
2527:src/stm32f1xx_hal_irda.c ****   */
ARM GAS  /tmp/cc2ibVgV.s 			page 50


2528:src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Receive_IT(IRDA_HandleTypeDef *hirda)
2529:src/stm32f1xx_hal_irda.c **** {
2530:src/stm32f1xx_hal_irda.c ****   uint16_t *tmp;
2531:src/stm32f1xx_hal_irda.c ****   uint16_t  uhdata;
2532:src/stm32f1xx_hal_irda.c **** 
2533:src/stm32f1xx_hal_irda.c ****   /* Check that a Rx process is ongoing */
2534:src/stm32f1xx_hal_irda.c ****   if (hirda->RxState == HAL_IRDA_STATE_BUSY_RX)
2535:src/stm32f1xx_hal_irda.c ****   {
2536:src/stm32f1xx_hal_irda.c ****     uhdata = (uint16_t) READ_REG(hirda->Instance->DR);
2537:src/stm32f1xx_hal_irda.c ****     if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
2538:src/stm32f1xx_hal_irda.c ****     {
2539:src/stm32f1xx_hal_irda.c ****       tmp = (uint16_t *) hirda->pRxBuffPtr;
2540:src/stm32f1xx_hal_irda.c ****       if (hirda->Init.Parity == IRDA_PARITY_NONE)
2541:src/stm32f1xx_hal_irda.c ****       {
2542:src/stm32f1xx_hal_irda.c ****         *tmp = (uint16_t)(uhdata & (uint16_t)0x01FF);
2543:src/stm32f1xx_hal_irda.c ****         hirda->pRxBuffPtr += 2U;
2544:src/stm32f1xx_hal_irda.c ****       }
2545:src/stm32f1xx_hal_irda.c ****       else
2546:src/stm32f1xx_hal_irda.c ****       {
2547:src/stm32f1xx_hal_irda.c ****         *tmp = (uint16_t)(uhdata & (uint16_t)0x00FF);
2548:src/stm32f1xx_hal_irda.c ****         hirda->pRxBuffPtr += 1U;
2549:src/stm32f1xx_hal_irda.c ****       }
2550:src/stm32f1xx_hal_irda.c ****     }
2551:src/stm32f1xx_hal_irda.c ****     else
2552:src/stm32f1xx_hal_irda.c ****     {
2553:src/stm32f1xx_hal_irda.c ****       if (hirda->Init.Parity == IRDA_PARITY_NONE)
2554:src/stm32f1xx_hal_irda.c ****       {
2555:src/stm32f1xx_hal_irda.c ****         *hirda->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)0x00FF);
2556:src/stm32f1xx_hal_irda.c ****       }
2557:src/stm32f1xx_hal_irda.c ****       else
2558:src/stm32f1xx_hal_irda.c ****       {
2559:src/stm32f1xx_hal_irda.c ****         *hirda->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)0x007F);
2560:src/stm32f1xx_hal_irda.c ****       }
2561:src/stm32f1xx_hal_irda.c ****     }
2562:src/stm32f1xx_hal_irda.c **** 
2563:src/stm32f1xx_hal_irda.c ****     if (--hirda->RxXferCount == 0U)
2564:src/stm32f1xx_hal_irda.c ****     {
2565:src/stm32f1xx_hal_irda.c ****       /* Disable the IRDA Data Register not empty Interrupt */
2566:src/stm32f1xx_hal_irda.c ****       CLEAR_BIT(hirda->Instance->CR1, USART_CR1_RXNEIE);
2567:src/stm32f1xx_hal_irda.c **** 
2568:src/stm32f1xx_hal_irda.c ****       /* Disable the IRDA Parity Error Interrupt */
2569:src/stm32f1xx_hal_irda.c ****       CLEAR_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
2570:src/stm32f1xx_hal_irda.c **** 
2571:src/stm32f1xx_hal_irda.c ****       /* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
2572:src/stm32f1xx_hal_irda.c ****       CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
2573:src/stm32f1xx_hal_irda.c **** 
2574:src/stm32f1xx_hal_irda.c ****       /* Rx process is completed, restore hirda->RxState to Ready */
2575:src/stm32f1xx_hal_irda.c ****       hirda->RxState = HAL_IRDA_STATE_READY;
2576:src/stm32f1xx_hal_irda.c **** 
2577:src/stm32f1xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2578:src/stm32f1xx_hal_irda.c ****       /* Call registered Rx complete callback */
2579:src/stm32f1xx_hal_irda.c ****       hirda->RxCpltCallback(hirda);
2580:src/stm32f1xx_hal_irda.c **** #else
2581:src/stm32f1xx_hal_irda.c ****       /* Call legacy weak Rx complete callback */
2582:src/stm32f1xx_hal_irda.c ****       HAL_IRDA_RxCpltCallback(hirda);
2583:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
2584:src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/cc2ibVgV.s 			page 51


2585:src/stm32f1xx_hal_irda.c ****       return HAL_OK;
2586:src/stm32f1xx_hal_irda.c ****     }
2587:src/stm32f1xx_hal_irda.c ****     return HAL_OK;
2588:src/stm32f1xx_hal_irda.c ****   }
2589:src/stm32f1xx_hal_irda.c ****   else
2590:src/stm32f1xx_hal_irda.c ****   {
2591:src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
2592:src/stm32f1xx_hal_irda.c ****   }
2593:src/stm32f1xx_hal_irda.c **** }
2594:src/stm32f1xx_hal_irda.c **** 
2595:src/stm32f1xx_hal_irda.c **** /**
2596:src/stm32f1xx_hal_irda.c ****   * @brief  Configures the IRDA peripheral.
2597:src/stm32f1xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
2598:src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
2599:src/stm32f1xx_hal_irda.c ****   * @retval None
2600:src/stm32f1xx_hal_irda.c ****   */
2601:src/stm32f1xx_hal_irda.c **** static void IRDA_SetConfig(IRDA_HandleTypeDef *hirda)
2602:src/stm32f1xx_hal_irda.c **** {
2603:src/stm32f1xx_hal_irda.c ****   uint32_t pclk;
2604:src/stm32f1xx_hal_irda.c **** 
2605:src/stm32f1xx_hal_irda.c ****   /* Check the parameters */
2606:src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_INSTANCE(hirda->Instance));
2607:src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_BAUDRATE(hirda->Init.BaudRate));
2608:src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_WORD_LENGTH(hirda->Init.WordLength));
2609:src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_PARITY(hirda->Init.Parity));
2610:src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_MODE(hirda->Init.Mode));
2611:src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode));
2612:src/stm32f1xx_hal_irda.c **** 
2613:src/stm32f1xx_hal_irda.c ****   /*-------------------------- USART CR2 Configuration ------------------------*/
2614:src/stm32f1xx_hal_irda.c ****   /* Clear STOP[13:12] bits */
2615:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR2, USART_CR2_STOP);
2616:src/stm32f1xx_hal_irda.c **** 
2617:src/stm32f1xx_hal_irda.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2618:src/stm32f1xx_hal_irda.c ****   /* Clear M, PCE, PS, TE and RE bits */
2619:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USAR
2620:src/stm32f1xx_hal_irda.c **** 
2621:src/stm32f1xx_hal_irda.c ****   /* Configure the USART Word Length, Parity and mode:
2622:src/stm32f1xx_hal_irda.c ****      Set the M bits according to hirda->Init.WordLength value
2623:src/stm32f1xx_hal_irda.c ****      Set PCE and PS bits according to hirda->Init.Parity value
2624:src/stm32f1xx_hal_irda.c ****      Set TE and RE bits according to hirda->Init.Mode value */
2625:src/stm32f1xx_hal_irda.c ****   /* Write to USART CR1 */
2626:src/stm32f1xx_hal_irda.c ****   SET_BIT(hirda->Instance->CR1, (hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode));
 245              		.loc 1 2626 0
 246 008e E068     		ldr	r0, [r4, #12]	@ hirda_4(D)->Init.Parity, hirda_4(D)->Init.Parity
 247              	.LBE9:
 248              	.LBE8:
 329:src/stm32f1xx_hal_irda.c **** 
 249              		.loc 1 329 0
 250 0090 DA68     		ldr	r2, [r3, #12]	@ _11, _10->CR1
 251 0092 22F40052 		bic	r2, r2, #8192	@ _12, _11,
 252 0096 DA60     		str	r2, [r3, #12]	@ _12, _10->CR1
 253              	.LVL10:
 254              	.LBB12:
 255              	.LBB10:
2615:src/stm32f1xx_hal_irda.c **** 
 256              		.loc 1 2615 0
 257 0098 1A69     		ldr	r2, [r3, #16]	@ _43, _10->CR2
ARM GAS  /tmp/cc2ibVgV.s 			page 52


 258 009a 22F44052 		bic	r2, r2, #12288	@ _44, _43,
 259 009e 1A61     		str	r2, [r3, #16]	@ _44, _10->CR2
2619:src/stm32f1xx_hal_irda.c **** 
 260              		.loc 1 2619 0
 261 00a0 DA68     		ldr	r2, [r3, #12]	@ _45, _10->CR1
 262 00a2 22F4B052 		bic	r2, r2, #5632	@ _46, _45,
 263 00a6 22F00C02 		bic	r2, r2, #12	@ _46, _46,
 264 00aa DA60     		str	r2, [r3, #12]	@ _46, _10->CR1
 265              		.loc 1 2626 0
 266 00ac A268     		ldr	r2, [r4, #8]	@ hirda_4(D)->Init.WordLength, hirda_4(D)->Init.WordLength
 267 00ae D968     		ldr	r1, [r3, #12]	@ _47, _10->CR1
 268 00b0 0243     		orrs	r2, r2, r0	@, tmp185, hirda_4(D)->Init.WordLength, hirda_4(D)->Init.Parity
 269 00b2 2069     		ldr	r0, [r4, #16]	@ hirda_4(D)->Init.Mode, hirda_4(D)->Init.Mode
 270 00b4 0243     		orrs	r2, r2, r0	@, tmp188, tmp185, hirda_4(D)->Init.Mode
 271 00b6 0A43     		orrs	r2, r2, r1	@, _53, tmp188, _47
 272 00b8 DA60     		str	r2, [r3, #12]	@ _53, _10->CR1
2627:src/stm32f1xx_hal_irda.c **** 
2628:src/stm32f1xx_hal_irda.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
2629:src/stm32f1xx_hal_irda.c ****   /* Clear CTSE and RTSE bits */
2630:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 273              		.loc 1 2630 0
 274 00ba 5A69     		ldr	r2, [r3, #20]	@ _54, _10->CR3
 275 00bc 22F44072 		bic	r2, r2, #768	@ _55, _54,
 276 00c0 5A61     		str	r2, [r3, #20]	@ _55, _10->CR3
2631:src/stm32f1xx_hal_irda.c **** 
2632:src/stm32f1xx_hal_irda.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
2633:src/stm32f1xx_hal_irda.c ****   if(hirda->Instance == USART1)
 277              		.loc 1 2633 0
 278 00c2 224A     		ldr	r2, .L19	@ tmp190,
 279 00c4 9342     		cmp	r3, r2	@ _10, tmp190
 280 00c6 3BD1     		bne	.L15	@,
2634:src/stm32f1xx_hal_irda.c ****   {
2635:src/stm32f1xx_hal_irda.c ****     pclk = HAL_RCC_GetPCLK2Freq();
 281              		.loc 1 2635 0
 282 00c8 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq	@
 283              	.LVL11:
 284              	.L18:
2636:src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
2637:src/stm32f1xx_hal_irda.c ****   }
2638:src/stm32f1xx_hal_irda.c ****   else
2639:src/stm32f1xx_hal_irda.c ****   {
2640:src/stm32f1xx_hal_irda.c ****     pclk = HAL_RCC_GetPCLK1Freq();
2641:src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
 285              		.loc 1 2641 0
 286 00cc 1923     		movs	r3, #25	@ tmp214,
 287 00ce 5843     		muls	r0, r3, r0	@ tmp213, tmp214
 288              	.LVL12:
 289 00d0 6268     		ldr	r2, [r4, #4]	@ hirda_4(D)->Init.BaudRate, hirda_4(D)->Init.BaudRate
 290 00d2 2168     		ldr	r1, [r4]	@ _75, hirda_4(D)->Instance
 291 00d4 9200     		lsls	r2, r2, #2	@ tmp215, hirda_4(D)->Init.BaudRate,
 292 00d6 B0FBF2F0 		udiv	r0, r0, r2	@ _80, tmp213, tmp215
 293 00da 6422     		movs	r2, #100	@ tmp221,
 294 00dc B0FBF2F6 		udiv	r6, r0, r2	@ tmp220, _80, tmp221
 295 00e0 02FB1600 		mls	r0, r2, r6, r0	@ tmp224, tmp221, tmp220, _80
 296 00e4 0301     		lsls	r3, r0, #4	@ tmp225, tmp224,
 297 00e6 3233     		adds	r3, r3, #50	@ tmp226, tmp225,
 298 00e8 B3FBF2F3 		udiv	r3, r3, r2	@ tmp228, tmp226, tmp221
ARM GAS  /tmp/cc2ibVgV.s 			page 53


 299 00ec 8D68     		ldr	r5, [r1, #8]	@ _76,
 300 00ee 03EB0613 		add	r3, r3, r6, lsl #4	@ tmp234, tmp228, tmp220,
 301 00f2 2B43     		orrs	r3, r3, r5	@, _91, tmp234, _76
 302 00f4 8B60     		str	r3, [r1, #8]	@ _91,
 303              	.LVL13:
 304              	.LBE10:
 305              	.LBE12:
 337:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 306              		.loc 1 337 0
 307 00f6 2368     		ldr	r3, [r4]	@ _15, hirda_4(D)->Instance
 353:src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 308              		.loc 1 353 0
 309 00f8 0020     		movs	r0, #0	@ tmp239,
 337:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 310              		.loc 1 337 0
 311 00fa 1A69     		ldr	r2, [r3, #16]	@ _16, _15->CR2
 312 00fc 22F4F042 		bic	r2, r2, #30720	@ _17, _16,
 313 0100 1A61     		str	r2, [r3, #16]	@ _17, _15->CR2
 338:src/stm32f1xx_hal_irda.c **** 
 314              		.loc 1 338 0
 315 0102 5A69     		ldr	r2, [r3, #20]	@ _19, _15->CR3
 316 0104 22F02802 		bic	r2, r2, #40	@ _20, _19,
 317 0108 5A61     		str	r2, [r3, #20]	@ _20, _15->CR3
 341:src/stm32f1xx_hal_irda.c **** 
 318              		.loc 1 341 0
 319 010a DA68     		ldr	r2, [r3, #12]	@ _22, _15->CR1
 320 010c 42F40052 		orr	r2, r2, #8192	@ _23, _22,
 321 0110 DA60     		str	r2, [r3, #12]	@ _23, _15->CR1
 344:src/stm32f1xx_hal_irda.c **** 
 322              		.loc 1 344 0
 323 0112 9A69     		ldr	r2, [r3, #24]	@ _25, _15->GTPR
 324 0114 217D     		ldrb	r1, [r4, #20]	@ zero_extendqisi2	@ hirda_4(D)->Init.Prescaler, hirda_4(D)->Init.Prescaler
 325 0116 22F0FF02 		bic	r2, r2, #255	@ tmp235, _25,
 326 011a 0A43     		orrs	r2, r2, r1	@, _29, tmp235, hirda_4(D)->Init.Prescaler
 327 011c 9A61     		str	r2, [r3, #24]	@ _29, _15->GTPR
 347:src/stm32f1xx_hal_irda.c **** 
 328              		.loc 1 347 0
 329 011e 5A69     		ldr	r2, [r3, #20]	@ _31, _15->CR3
 330 0120 A169     		ldr	r1, [r4, #24]	@ hirda_4(D)->Init.IrDAMode, hirda_4(D)->Init.IrDAMode
 331 0122 22F00402 		bic	r2, r2, #4	@ tmp237, _31,
 332 0126 0A43     		orrs	r2, r2, r1	@, _34, tmp237, hirda_4(D)->Init.IrDAMode
 333 0128 5A61     		str	r2, [r3, #20]	@ _34, _15->CR3
 350:src/stm32f1xx_hal_irda.c **** 
 334              		.loc 1 350 0
 335 012a 5A69     		ldr	r2, [r3, #20]	@ _36, _15->CR3
 336 012c 42F00202 		orr	r2, r2, #2	@ _37, _36,
 337 0130 5A61     		str	r2, [r3, #20]	@ _37, _15->CR3
 354:src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 338              		.loc 1 354 0
 339 0132 2023     		movs	r3, #32	@ tmp240,
 353:src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 340              		.loc 1 353 0
 341 0134 A063     		str	r0, [r4, #56]	@ tmp239, hirda_4(D)->ErrorCode
 354:src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 342              		.loc 1 354 0
 343 0136 84F83530 		strb	r3, [r4, #53]	@ tmp240, hirda_4(D)->gState
 355:src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/cc2ibVgV.s 			page 54


 344              		.loc 1 355 0
 345 013a 84F83630 		strb	r3, [r4, #54]	@ tmp240, hirda_4(D)->RxState
 357:src/stm32f1xx_hal_irda.c **** }
 346              		.loc 1 357 0
 347 013e 70BD     		pop	{r4, r5, r6, pc}	@
 348              	.LVL14:
 349              	.L15:
 350              	.LBB13:
 351              	.LBB11:
2640:src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
 352              		.loc 1 2640 0
 353 0140 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq	@
 354              	.LVL15:
 355 0144 C2E7     		b	.L18	@
 356              	.LVL16:
 357              	.L17:
 358              	.LBE11:
 359              	.LBE13:
 297:src/stm32f1xx_hal_irda.c ****   }
 360              		.loc 1 297 0
 361 0146 0120     		movs	r0, #1	@ <retval>,
 362              	.LVL17:
 358:src/stm32f1xx_hal_irda.c **** 
 363              		.loc 1 358 0
 364 0148 70BD     		pop	{r4, r5, r6, pc}	@
 365              	.LVL18:
 366              	.L20:
 367 014a 00BF     		.align	2
 368              	.L19:
 369 014c 00380140 		.word	1073821696
 370              		.cfi_endproc
 371              	.LFE65:
 372              		.size	HAL_IRDA_Init, .-HAL_IRDA_Init
 373              		.align	1
 374              		.weak	HAL_IRDA_MspDeInit
 375              		.syntax unified
 376              		.thumb
 377              		.thumb_func
 378              		.fpu softvfp
 379              		.type	HAL_IRDA_MspDeInit, %function
 380              	HAL_IRDA_MspDeInit:
 381              	.LFB129:
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385              		@ link register save eliminated.
 386 0150 7047     		bx	lr	@
 387              		.cfi_endproc
 388              	.LFE129:
 389              		.size	HAL_IRDA_MspDeInit, .-HAL_IRDA_MspDeInit
 390              		.align	1
 391              		.global	HAL_IRDA_DeInit
 392              		.syntax unified
 393              		.thumb
 394              		.thumb_func
 395              		.fpu softvfp
 396              		.type	HAL_IRDA_DeInit, %function
ARM GAS  /tmp/cc2ibVgV.s 			page 55


 397              	HAL_IRDA_DeInit:
 398              	.LFB66:
 367:src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 399              		.loc 1 367 0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 0
 402              		@ frame_needed = 0, uses_anonymous_args = 0
 403              	.LVL19:
 367:src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 404              		.loc 1 367 0
 405 0152 10B5     		push	{r4, lr}	@
 406              	.LCFI2:
 407              		.cfi_def_cfa_offset 8
 408              		.cfi_offset 4, -8
 409              		.cfi_offset 14, -4
 369:src/stm32f1xx_hal_irda.c ****   {
 410              		.loc 1 369 0
 411 0154 0446     		mov	r4, r0	@ hirda, hirda
 412 0156 90B1     		cbz	r0, .L24	@ hirda,
 377:src/stm32f1xx_hal_irda.c **** 
 413              		.loc 1 377 0
 414 0158 2423     		movs	r3, #36	@ tmp115,
 380:src/stm32f1xx_hal_irda.c **** 
 415              		.loc 1 380 0
 416 015a 0268     		ldr	r2, [r0]	@ _6, hirda_3(D)->Instance
 377:src/stm32f1xx_hal_irda.c **** 
 417              		.loc 1 377 0
 418 015c 80F83530 		strb	r3, [r0, #53]	@ tmp115, hirda_3(D)->gState
 380:src/stm32f1xx_hal_irda.c **** 
 419              		.loc 1 380 0
 420 0160 D368     		ldr	r3, [r2, #12]	@ _7, _6->CR1
 421 0162 23F40053 		bic	r3, r3, #8192	@ _8, _7,
 422 0166 D360     		str	r3, [r2, #12]	@ _8, _6->CR1
 391:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 423              		.loc 1 391 0
 424 0168 FFF7FEFF 		bl	HAL_IRDA_MspDeInit	@
 425              	.LVL20:
 394:src/stm32f1xx_hal_irda.c **** 
 426              		.loc 1 394 0
 427 016c 0020     		movs	r0, #0	@ tmp117,
 428 016e A063     		str	r0, [r4, #56]	@ tmp117, hirda_3(D)->ErrorCode
 400:src/stm32f1xx_hal_irda.c **** 
 429              		.loc 1 400 0
 430 0170 84F83400 		strb	r0, [r4, #52]	@ tmp117, hirda_3(D)->Lock
 396:src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_RESET;
 431              		.loc 1 396 0
 432 0174 84F83500 		strb	r0, [r4, #53]	@ tmp117, hirda_3(D)->gState
 397:src/stm32f1xx_hal_irda.c **** 
 433              		.loc 1 397 0
 434 0178 84F83600 		strb	r0, [r4, #54]	@ tmp117, hirda_3(D)->RxState
 402:src/stm32f1xx_hal_irda.c **** }
 435              		.loc 1 402 0
 436 017c 10BD     		pop	{r4, pc}	@
 437              	.LVL21:
 438              	.L24:
 371:src/stm32f1xx_hal_irda.c ****   }
 439              		.loc 1 371 0
ARM GAS  /tmp/cc2ibVgV.s 			page 56


 440 017e 0120     		movs	r0, #1	@ <retval>,
 441              	.LVL22:
 403:src/stm32f1xx_hal_irda.c **** 
 442              		.loc 1 403 0
 443 0180 10BD     		pop	{r4, pc}	@
 444              		.cfi_endproc
 445              	.LFE66:
 446              		.size	HAL_IRDA_DeInit, .-HAL_IRDA_DeInit
 447              		.align	1
 448              		.global	HAL_IRDA_Transmit
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 452              		.fpu softvfp
 453              		.type	HAL_IRDA_Transmit, %function
 454              	HAL_IRDA_Transmit:
 455              	.LFB69:
 771:src/stm32f1xx_hal_irda.c ****   uint16_t *tmp;
 456              		.loc 1 771 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 0
 459              		@ frame_needed = 0, uses_anonymous_args = 0
 460              	.LVL23:
 461 0182 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 462              	.LCFI3:
 463              		.cfi_def_cfa_offset 24
 464              		.cfi_offset 4, -24
 465              		.cfi_offset 5, -20
 466              		.cfi_offset 6, -16
 467              		.cfi_offset 7, -12
 468              		.cfi_offset 8, -8
 469              		.cfi_offset 14, -4
 771:src/stm32f1xx_hal_irda.c ****   uint16_t *tmp;
 470              		.loc 1 771 0
 471 0186 1F46     		mov	r7, r3	@ Timeout, Timeout
 776:src/stm32f1xx_hal_irda.c ****   {
 472              		.loc 1 776 0
 473 0188 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2	@ hirda_7(D)->gState, hirda_7(D)->gState
 474              	.LVL24:
 771:src/stm32f1xx_hal_irda.c ****   uint16_t *tmp;
 475              		.loc 1 771 0
 476 018c 0446     		mov	r4, r0	@ hirda, hirda
 776:src/stm32f1xx_hal_irda.c ****   {
 477              		.loc 1 776 0
 478 018e 202B     		cmp	r3, #32	@ hirda_7(D)->gState,
 771:src/stm32f1xx_hal_irda.c ****   uint16_t *tmp;
 479              		.loc 1 771 0
 480 0190 0D46     		mov	r5, r1	@ pData, pData
 481 0192 9046     		mov	r8, r2	@ Size, Size
 776:src/stm32f1xx_hal_irda.c ****   {
 482              		.loc 1 776 0
 483 0194 4ED1     		bne	.L37	@,
 778:src/stm32f1xx_hal_irda.c ****     {
 484              		.loc 1 778 0
 485 0196 0029     		cmp	r1, #0	@ pData
 486 0198 49D0     		beq	.L36	@
 778:src/stm32f1xx_hal_irda.c ****     {
ARM GAS  /tmp/cc2ibVgV.s 			page 57


 487              		.loc 1 778 0 is_stmt 0 discriminator 1
 488 019a 002A     		cmp	r2, #0	@ Size
 489 019c 47D0     		beq	.L36	@
 784:src/stm32f1xx_hal_irda.c **** 
 490              		.loc 1 784 0 is_stmt 1
 491 019e 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2	@ hirda_7(D)->Lock, hirda_7(D)->Lock
 492 01a2 012B     		cmp	r3, #1	@ hirda_7(D)->Lock,
 493 01a4 46D0     		beq	.L37	@,
 784:src/stm32f1xx_hal_irda.c **** 
 494              		.loc 1 784 0 is_stmt 0 discriminator 2
 495 01a6 0123     		movs	r3, #1	@ tmp137,
 496 01a8 80F83430 		strb	r3, [r0, #52]	@ tmp137, hirda_7(D)->Lock
 786:src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 497              		.loc 1 786 0 is_stmt 1 discriminator 2
 498 01ac 0023     		movs	r3, #0	@ tmp139,
 499 01ae 8363     		str	r3, [r0, #56]	@ tmp139, hirda_7(D)->ErrorCode
 787:src/stm32f1xx_hal_irda.c **** 
 500              		.loc 1 787 0 discriminator 2
 501 01b0 2123     		movs	r3, #33	@ tmp140,
 502 01b2 80F83530 		strb	r3, [r0, #53]	@ tmp140, hirda_7(D)->gState
 790:src/stm32f1xx_hal_irda.c **** 
 503              		.loc 1 790 0 discriminator 2
 504 01b6 FFF7FEFF 		bl	HAL_GetTick	@
 505              	.LVL25:
 506 01ba 0646     		mov	r6, r0	@ tickstart,
 507              	.LVL26:
 792:src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
 508              		.loc 1 792 0 discriminator 2
 509 01bc A4F82080 		strh	r8, [r4, #32]	@ movhi	@ Size, hirda_7(D)->TxXferSize
 793:src/stm32f1xx_hal_irda.c ****     while (hirda->TxXferCount > 0U)
 510              		.loc 1 793 0 discriminator 2
 511 01c0 A4F82280 		strh	r8, [r4, #34]	@ movhi	@ Size, hirda_7(D)->TxXferCount
 512              	.LVL27:
 513              	.L27:
 794:src/stm32f1xx_hal_irda.c ****     {
 514              		.loc 1 794 0
 515 01c4 638C     		ldrh	r3, [r4, #34]	@, hirda_7(D)->TxXferCount
 516 01c6 9BB2     		uxth	r3, r3	@ _20, hirda_7(D)->TxXferCount
 517 01c8 6BB9     		cbnz	r3, .L33	@ _20,
 824:src/stm32f1xx_hal_irda.c ****     {
 518              		.loc 1 824 0
 519 01ca 3B46     		mov	r3, r7	@, Timeout
 520 01cc 3246     		mov	r2, r6	@, tickstart
 521 01ce 4021     		movs	r1, #64	@,
 522 01d0 2046     		mov	r0, r4	@, hirda
 523 01d2 FFF722FF 		bl	IRDA_WaitOnFlagUntilTimeout.constprop.3	@
 524              	.LVL28:
 525 01d6 A8B9     		cbnz	r0, .L32	@ <retval>,
 830:src/stm32f1xx_hal_irda.c **** 
 526              		.loc 1 830 0
 527 01d8 2023     		movs	r3, #32	@ tmp158,
 833:src/stm32f1xx_hal_irda.c **** 
 528              		.loc 1 833 0
 529 01da 84F83400 		strb	r0, [r4, #52]	@ <retval>, hirda_7(D)->Lock
 830:src/stm32f1xx_hal_irda.c **** 
 530              		.loc 1 830 0
 531 01de 84F83530 		strb	r3, [r4, #53]	@ tmp158, hirda_7(D)->gState
ARM GAS  /tmp/cc2ibVgV.s 			page 58


 835:src/stm32f1xx_hal_irda.c ****   }
 532              		.loc 1 835 0
 533 01e2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 534              	.LVL29:
 535              	.L33:
 796:src/stm32f1xx_hal_irda.c ****       if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 536              		.loc 1 796 0
 537 01e6 638C     		ldrh	r3, [r4, #34]	@, hirda_7(D)->TxXferCount
 799:src/stm32f1xx_hal_irda.c ****         {
 538              		.loc 1 799 0
 539 01e8 3246     		mov	r2, r6	@, tickstart
 796:src/stm32f1xx_hal_irda.c ****       if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 540              		.loc 1 796 0
 541 01ea 013B     		subs	r3, r3, #1	@ tmp146, hirda_7(D)->TxXferCount,
 542 01ec 9BB2     		uxth	r3, r3	@ _23, tmp146
 543 01ee 6384     		strh	r3, [r4, #34]	@ movhi	@ _23, hirda_7(D)->TxXferCount
 797:src/stm32f1xx_hal_irda.c ****       {
 544              		.loc 1 797 0
 545 01f0 A368     		ldr	r3, [r4, #8]	@ hirda_7(D)->Init.WordLength, hirda_7(D)->Init.WordLength
 799:src/stm32f1xx_hal_irda.c ****         {
 546              		.loc 1 799 0
 547 01f2 8021     		movs	r1, #128	@,
 797:src/stm32f1xx_hal_irda.c ****       {
 548              		.loc 1 797 0
 549 01f4 B3F5805F 		cmp	r3, #4096	@ hirda_7(D)->Init.WordLength,
 799:src/stm32f1xx_hal_irda.c ****         {
 550              		.loc 1 799 0
 551 01f8 2046     		mov	r0, r4	@, hirda
 552 01fa 3B46     		mov	r3, r7	@, Timeout
 797:src/stm32f1xx_hal_irda.c ****       {
 553              		.loc 1 797 0
 554 01fc 0ED1     		bne	.L28	@,
 555              	.LVL30:
 799:src/stm32f1xx_hal_irda.c ****         {
 556              		.loc 1 799 0
 557 01fe FFF70CFF 		bl	IRDA_WaitOnFlagUntilTimeout.constprop.3	@
 558              	.LVL31:
 559 0202 10B1     		cbz	r0, .L29	@,
 560              	.L32:
 801:src/stm32f1xx_hal_irda.c ****         }
 561              		.loc 1 801 0
 562 0204 0320     		movs	r0, #3	@ <retval>,
 563 0206 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 564              	.LVL32:
 565              	.L29:
 804:src/stm32f1xx_hal_irda.c ****         if (hirda->Init.Parity == IRDA_PARITY_NONE)
 566              		.loc 1 804 0
 567 020a 2B88     		ldrh	r3, [r5]	@, MEM[(uint16_t *)pData_1]
 568 020c 2268     		ldr	r2, [r4]	@ _36, hirda_7(D)->Instance
 569 020e C3F30803 		ubfx	r3, r3, #0, #9	@ _38, MEM[(uint16_t *)pData_1],,
 570 0212 5360     		str	r3, [r2, #4]	@ _38, _36->DR
 805:src/stm32f1xx_hal_irda.c ****         {
 571              		.loc 1 805 0
 572 0214 E368     		ldr	r3, [r4, #12]	@ hirda_7(D)->Init.Parity, hirda_7(D)->Init.Parity
 573 0216 43B9     		cbnz	r3, .L38	@ hirda_7(D)->Init.Parity,
 807:src/stm32f1xx_hal_irda.c ****         }
 574              		.loc 1 807 0
ARM GAS  /tmp/cc2ibVgV.s 			page 59


 575 0218 0235     		adds	r5, r5, #2	@ pData, pData,
 576              	.LVL33:
 577 021a D3E7     		b	.L27	@
 578              	.LVL34:
 579              	.L28:
 816:src/stm32f1xx_hal_irda.c ****         {
 580              		.loc 1 816 0
 581 021c FFF7FDFE 		bl	IRDA_WaitOnFlagUntilTimeout.constprop.3	@
 582              	.LVL35:
 583 0220 0028     		cmp	r0, #0	@
 584 0222 EFD1     		bne	.L32	@
 585              	.LVL36:
 820:src/stm32f1xx_hal_irda.c ****       }
 586              		.loc 1 820 0
 587 0224 2368     		ldr	r3, [r4]	@ _29, hirda_7(D)->Instance
 588 0226 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2	@ _32, *pData_1
 589 0228 5A60     		str	r2, [r3, #4]	@ _32, _29->DR
 590              	.LVL37:
 591              	.L38:
 592 022a 0135     		adds	r5, r5, #1	@ pData, pData,
 593 022c CAE7     		b	.L27	@
 594              	.LVL38:
 595              	.L36:
 780:src/stm32f1xx_hal_irda.c ****     }
 596              		.loc 1 780 0
 597 022e 0120     		movs	r0, #1	@ <retval>,
 598              	.LVL39:
 599 0230 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 600              	.LVL40:
 601              	.L37:
 839:src/stm32f1xx_hal_irda.c ****   }
 602              		.loc 1 839 0
 603 0234 0220     		movs	r0, #2	@ <retval>,
 604              	.LVL41:
 841:src/stm32f1xx_hal_irda.c **** 
 605              		.loc 1 841 0
 606 0236 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 607              		.cfi_endproc
 608              	.LFE69:
 609              		.size	HAL_IRDA_Transmit, .-HAL_IRDA_Transmit
 610              		.align	1
 611              		.global	HAL_IRDA_Receive
 612              		.syntax unified
 613              		.thumb
 614              		.thumb_func
 615              		.fpu softvfp
 616              		.type	HAL_IRDA_Receive, %function
 617              	HAL_IRDA_Receive:
 618              	.LFB70:
 856:src/stm32f1xx_hal_irda.c ****   uint16_t *tmp;
 619              		.loc 1 856 0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 0, uses_anonymous_args = 0
 623              	.LVL42:
 624 023a 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 625              	.LCFI4:
ARM GAS  /tmp/cc2ibVgV.s 			page 60


 626              		.cfi_def_cfa_offset 24
 627              		.cfi_offset 4, -24
 628              		.cfi_offset 5, -20
 629              		.cfi_offset 6, -16
 630              		.cfi_offset 7, -12
 631              		.cfi_offset 8, -8
 632              		.cfi_offset 14, -4
 856:src/stm32f1xx_hal_irda.c ****   uint16_t *tmp;
 633              		.loc 1 856 0
 634 023e 1F46     		mov	r7, r3	@ Timeout, Timeout
 861:src/stm32f1xx_hal_irda.c ****   {
 635              		.loc 1 861 0
 636 0240 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2	@ hirda_7(D)->RxState, hirda_7(D)->RxState
 637              	.LVL43:
 856:src/stm32f1xx_hal_irda.c ****   uint16_t *tmp;
 638              		.loc 1 856 0
 639 0244 0446     		mov	r4, r0	@ hirda, hirda
 861:src/stm32f1xx_hal_irda.c ****   {
 640              		.loc 1 861 0
 641 0246 202B     		cmp	r3, #32	@ hirda_7(D)->RxState,
 856:src/stm32f1xx_hal_irda.c ****   uint16_t *tmp;
 642              		.loc 1 856 0
 643 0248 0D46     		mov	r5, r1	@ pData, pData
 644 024a 9046     		mov	r8, r2	@ Size, Size
 861:src/stm32f1xx_hal_irda.c ****   {
 645              		.loc 1 861 0
 646 024c 51D1     		bne	.L52	@,
 863:src/stm32f1xx_hal_irda.c ****     {
 647              		.loc 1 863 0
 648 024e 0029     		cmp	r1, #0	@ pData
 649 0250 4CD0     		beq	.L51	@
 863:src/stm32f1xx_hal_irda.c ****     {
 650              		.loc 1 863 0 is_stmt 0 discriminator 1
 651 0252 002A     		cmp	r2, #0	@ Size
 652 0254 4AD0     		beq	.L51	@
 869:src/stm32f1xx_hal_irda.c **** 
 653              		.loc 1 869 0 is_stmt 1
 654 0256 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2	@ hirda_7(D)->Lock, hirda_7(D)->Lock
 655 025a 012B     		cmp	r3, #1	@ hirda_7(D)->Lock,
 656 025c 49D0     		beq	.L52	@,
 869:src/stm32f1xx_hal_irda.c **** 
 657              		.loc 1 869 0 is_stmt 0 discriminator 2
 658 025e 0123     		movs	r3, #1	@ tmp147,
 659 0260 80F83430 		strb	r3, [r0, #52]	@ tmp147, hirda_7(D)->Lock
 871:src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 660              		.loc 1 871 0 is_stmt 1 discriminator 2
 661 0264 0023     		movs	r3, #0	@ tmp149,
 662 0266 8363     		str	r3, [r0, #56]	@ tmp149, hirda_7(D)->ErrorCode
 872:src/stm32f1xx_hal_irda.c **** 
 663              		.loc 1 872 0 discriminator 2
 664 0268 2223     		movs	r3, #34	@ tmp150,
 665 026a 80F83630 		strb	r3, [r0, #54]	@ tmp150, hirda_7(D)->RxState
 875:src/stm32f1xx_hal_irda.c **** 
 666              		.loc 1 875 0 discriminator 2
 667 026e FFF7FEFF 		bl	HAL_GetTick	@
 668              	.LVL44:
 669 0272 0646     		mov	r6, r0	@ tickstart,
ARM GAS  /tmp/cc2ibVgV.s 			page 61


 670              	.LVL45:
 877:src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = Size;
 671              		.loc 1 877 0 discriminator 2
 672 0274 A4F82880 		strh	r8, [r4, #40]	@ movhi	@ Size, hirda_7(D)->RxXferSize
 878:src/stm32f1xx_hal_irda.c **** 
 673              		.loc 1 878 0 discriminator 2
 674 0278 A4F82A80 		strh	r8, [r4, #42]	@ movhi	@ Size, hirda_7(D)->RxXferCount
 675              	.LVL46:
 676              	.L41:
 881:src/stm32f1xx_hal_irda.c ****     {
 677              		.loc 1 881 0
 678 027c 608D     		ldrh	r0, [r4, #42]	@, hirda_7(D)->RxXferCount
 679 027e 80B2     		uxth	r0, r0	@ _20, hirda_7(D)->RxXferCount
 680 0280 30B9     		cbnz	r0, .L48	@ _20,
 921:src/stm32f1xx_hal_irda.c **** 
 681              		.loc 1 921 0
 682 0282 2023     		movs	r3, #32	@ tmp177,
 924:src/stm32f1xx_hal_irda.c **** 
 683              		.loc 1 924 0
 684 0284 84F83400 		strb	r0, [r4, #52]	@ _20, hirda_7(D)->Lock
 921:src/stm32f1xx_hal_irda.c **** 
 685              		.loc 1 921 0
 686 0288 84F83630 		strb	r3, [r4, #54]	@ tmp177, hirda_7(D)->RxState
 926:src/stm32f1xx_hal_irda.c ****   }
 687              		.loc 1 926 0
 688 028c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 689              	.LVL47:
 690              	.L48:
 883:src/stm32f1xx_hal_irda.c **** 
 691              		.loc 1 883 0
 692 0290 638D     		ldrh	r3, [r4, #42]	@, hirda_7(D)->RxXferCount
 887:src/stm32f1xx_hal_irda.c ****         {
 693              		.loc 1 887 0
 694 0292 3246     		mov	r2, r6	@, tickstart
 883:src/stm32f1xx_hal_irda.c **** 
 695              		.loc 1 883 0
 696 0294 013B     		subs	r3, r3, #1	@ tmp156, hirda_7(D)->RxXferCount,
 697 0296 9BB2     		uxth	r3, r3	@ _22, tmp156
 698 0298 6385     		strh	r3, [r4, #42]	@ movhi	@ _22, hirda_7(D)->RxXferCount
 885:src/stm32f1xx_hal_irda.c ****       {
 699              		.loc 1 885 0
 700 029a A368     		ldr	r3, [r4, #8]	@ hirda_7(D)->Init.WordLength, hirda_7(D)->Init.WordLength
 887:src/stm32f1xx_hal_irda.c ****         {
 701              		.loc 1 887 0
 702 029c 2021     		movs	r1, #32	@,
 885:src/stm32f1xx_hal_irda.c ****       {
 703              		.loc 1 885 0
 704 029e B3F5805F 		cmp	r3, #4096	@ hirda_7(D)->Init.WordLength,
 887:src/stm32f1xx_hal_irda.c ****         {
 705              		.loc 1 887 0
 706 02a2 2046     		mov	r0, r4	@, hirda
 707 02a4 3B46     		mov	r3, r7	@, Timeout
 885:src/stm32f1xx_hal_irda.c ****       {
 708              		.loc 1 885 0
 709 02a6 12D1     		bne	.L42	@,
 710              	.LVL48:
 887:src/stm32f1xx_hal_irda.c ****         {
ARM GAS  /tmp/cc2ibVgV.s 			page 62


 711              		.loc 1 887 0
 712 02a8 FFF7B7FE 		bl	IRDA_WaitOnFlagUntilTimeout.constprop.3	@
 713              	.LVL49:
 714 02ac 10B1     		cbz	r0, .L43	@,
 715              	.L46:
 889:src/stm32f1xx_hal_irda.c ****         }
 716              		.loc 1 889 0
 717 02ae 0320     		movs	r0, #3	@ <retval>,
 718 02b0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 719              	.LVL50:
 720              	.L43:
 721 02b4 2368     		ldr	r3, [r4]	@ _43, hirda_7(D)->Instance
 892:src/stm32f1xx_hal_irda.c ****         {
 722              		.loc 1 892 0
 723 02b6 E268     		ldr	r2, [r4, #12]	@ hirda_7(D)->Init.Parity, hirda_7(D)->Init.Parity
 894:src/stm32f1xx_hal_irda.c ****           pData += 2U;
 724              		.loc 1 894 0
 725 02b8 5B68     		ldr	r3, [r3, #4]	@ _50,
 892:src/stm32f1xx_hal_irda.c ****         {
 726              		.loc 1 892 0
 727 02ba 22B9     		cbnz	r2, .L44	@ hirda_7(D)->Init.Parity,
 894:src/stm32f1xx_hal_irda.c ****           pData += 2U;
 728              		.loc 1 894 0
 729 02bc C3F30803 		ubfx	r3, r3, #0, #9	@ tmp162, _50,,
 730 02c0 25F8023B 		strh	r3, [r5], #2	@ movhi	@ tmp162, MEM[(uint16_t *)pData_1]
 731              	.LVL51:
 732 02c4 DAE7     		b	.L41	@
 733              	.LVL52:
 734              	.L44:
 899:src/stm32f1xx_hal_irda.c ****           pData += 1U;
 735              		.loc 1 899 0
 736 02c6 DBB2     		uxtb	r3, r3	@ _44, _44
 737 02c8 25F8013B 		strh	r3, [r5], #1	@ movhi	@ _44, MEM[(uint16_t *)pData_1]
 738              	.LVL53:
 739 02cc D6E7     		b	.L41	@
 740              	.LVL54:
 741              	.L42:
 905:src/stm32f1xx_hal_irda.c ****         {
 742              		.loc 1 905 0
 743 02ce FFF7A4FE 		bl	IRDA_WaitOnFlagUntilTimeout.constprop.3	@
 744              	.LVL55:
 745 02d2 0028     		cmp	r0, #0	@
 746 02d4 EBD1     		bne	.L46	@
 747 02d6 2368     		ldr	r3, [r4]	@ _35, hirda_7(D)->Instance
 909:src/stm32f1xx_hal_irda.c ****         {
 748              		.loc 1 909 0
 749 02d8 E168     		ldr	r1, [r4, #12]	@ hirda_7(D)->Init.Parity, hirda_7(D)->Init.Parity
 750 02da 6A1C     		adds	r2, r5, #1	@ pData, pData,
 911:src/stm32f1xx_hal_irda.c ****         }
 751              		.loc 1 911 0
 752 02dc 5B68     		ldr	r3, [r3, #4]	@ _31,
 909:src/stm32f1xx_hal_irda.c ****         {
 753              		.loc 1 909 0
 754 02de 11B9     		cbnz	r1, .L47	@ hirda_7(D)->Init.Parity,
 755              	.LVL56:
 756              	.L53:
 915:src/stm32f1xx_hal_irda.c ****         }
ARM GAS  /tmp/cc2ibVgV.s 			page 63


 757              		.loc 1 915 0
 758 02e0 2B70     		strb	r3, [r5]	@ tmp173, *pData_1
 759 02e2 1546     		mov	r5, r2	@ pData, pData
 760 02e4 CAE7     		b	.L41	@
 761              	.LVL57:
 762              	.L47:
 763 02e6 03F07F03 		and	r3, r3, #127	@ tmp173, _36,
 764 02ea F9E7     		b	.L53	@
 765              	.LVL58:
 766              	.L51:
 865:src/stm32f1xx_hal_irda.c ****     }
 767              		.loc 1 865 0
 768 02ec 0120     		movs	r0, #1	@ <retval>,
 769              	.LVL59:
 770 02ee BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 771              	.LVL60:
 772              	.L52:
 930:src/stm32f1xx_hal_irda.c ****   }
 773              		.loc 1 930 0
 774 02f2 0220     		movs	r0, #2	@ <retval>,
 775              	.LVL61:
 932:src/stm32f1xx_hal_irda.c **** 
 776              		.loc 1 932 0
 777 02f4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 778              		.cfi_endproc
 779              	.LFE70:
 780              		.size	HAL_IRDA_Receive, .-HAL_IRDA_Receive
 781              		.align	1
 782              		.global	HAL_IRDA_Transmit_IT
 783              		.syntax unified
 784              		.thumb
 785              		.thumb_func
 786              		.fpu softvfp
 787              		.type	HAL_IRDA_Transmit_IT, %function
 788              	HAL_IRDA_Transmit_IT:
 789              	.LFB71:
 946:src/stm32f1xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 790              		.loc 1 946 0
 791              		.cfi_startproc
 792              		@ args = 0, pretend = 0, frame = 0
 793              		@ frame_needed = 0, uses_anonymous_args = 0
 794              		@ link register save eliminated.
 795              	.LVL62:
 948:src/stm32f1xx_hal_irda.c ****   {
 796              		.loc 1 948 0
 797 02f8 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2	@ hirda_4(D)->gState, hirda_4(D)->gState
 798 02fc 202B     		cmp	r3, #32	@ hirda_4(D)->gState,
 799 02fe 18D1     		bne	.L59	@,
 950:src/stm32f1xx_hal_irda.c ****     {
 800              		.loc 1 950 0
 801 0300 A9B1     		cbz	r1, .L58	@ pData,
 950:src/stm32f1xx_hal_irda.c ****     {
 802              		.loc 1 950 0 is_stmt 0 discriminator 1
 803 0302 A2B1     		cbz	r2, .L58	@ Size,
 956:src/stm32f1xx_hal_irda.c **** 
 804              		.loc 1 956 0 is_stmt 1
 805 0304 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2	@ hirda_4(D)->Lock, hirda_4(D)->Lock
ARM GAS  /tmp/cc2ibVgV.s 			page 64


 806 0308 012B     		cmp	r3, #1	@ hirda_4(D)->Lock,
 807 030a 12D0     		beq	.L59	@,
 960:src/stm32f1xx_hal_irda.c **** 
 808              		.loc 1 960 0 discriminator 2
 809 030c 4284     		strh	r2, [r0, #34]	@ movhi	@ Size, hirda_4(D)->TxXferCount
 959:src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
 810              		.loc 1 959 0 discriminator 2
 811 030e 0284     		strh	r2, [r0, #32]	@ movhi	@ Size, hirda_4(D)->TxXferSize
 962:src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 812              		.loc 1 962 0 discriminator 2
 813 0310 0023     		movs	r3, #0	@ tmp125,
 963:src/stm32f1xx_hal_irda.c **** 
 814              		.loc 1 963 0 discriminator 2
 815 0312 2122     		movs	r2, #33	@ tmp126,
 816              	.LVL63:
 958:src/stm32f1xx_hal_irda.c ****     hirda->TxXferSize = Size;
 817              		.loc 1 958 0 discriminator 2
 818 0314 C161     		str	r1, [r0, #28]	@ pData, hirda_4(D)->pTxBuffPtr
 969:src/stm32f1xx_hal_irda.c **** 
 819              		.loc 1 969 0 discriminator 2
 820 0316 0168     		ldr	r1, [r0]	@ _15, hirda_4(D)->Instance
 821              	.LVL64:
 962:src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 822              		.loc 1 962 0 discriminator 2
 823 0318 8363     		str	r3, [r0, #56]	@ tmp125, hirda_4(D)->ErrorCode
 824              	.LVL65:
 963:src/stm32f1xx_hal_irda.c **** 
 825              		.loc 1 963 0 discriminator 2
 826 031a 80F83520 		strb	r2, [r0, #53]	@ tmp126, hirda_4(D)->gState
 969:src/stm32f1xx_hal_irda.c **** 
 827              		.loc 1 969 0 discriminator 2
 828 031e CA68     		ldr	r2, [r1, #12]	@ _16, _15->CR1
 966:src/stm32f1xx_hal_irda.c **** 
 829              		.loc 1 966 0 discriminator 2
 830 0320 80F83430 		strb	r3, [r0, #52]	@ tmp125, hirda_4(D)->Lock
 969:src/stm32f1xx_hal_irda.c **** 
 831              		.loc 1 969 0 discriminator 2
 832 0324 42F08002 		orr	r2, r2, #128	@ _17, _16,
 833 0328 CA60     		str	r2, [r1, #12]	@ _17, _15->CR1
 971:src/stm32f1xx_hal_irda.c ****   }
 834              		.loc 1 971 0 discriminator 2
 835 032a 1846     		mov	r0, r3	@ <retval>, tmp125
 836              	.LVL66:
 837 032c 7047     		bx	lr	@
 838              	.LVL67:
 839              	.L58:
 952:src/stm32f1xx_hal_irda.c ****     }
 840              		.loc 1 952 0
 841 032e 0120     		movs	r0, #1	@ <retval>,
 842              	.LVL68:
 843 0330 7047     		bx	lr	@
 844              	.LVL69:
 845              	.L59:
 975:src/stm32f1xx_hal_irda.c ****   }
 846              		.loc 1 975 0
 847 0332 0220     		movs	r0, #2	@ <retval>,
 848              	.LVL70:
ARM GAS  /tmp/cc2ibVgV.s 			page 65


 977:src/stm32f1xx_hal_irda.c **** 
 849              		.loc 1 977 0
 850 0334 7047     		bx	lr	@
 851              		.cfi_endproc
 852              	.LFE71:
 853              		.size	HAL_IRDA_Transmit_IT, .-HAL_IRDA_Transmit_IT
 854              		.align	1
 855              		.global	HAL_IRDA_Receive_IT
 856              		.syntax unified
 857              		.thumb
 858              		.thumb_func
 859              		.fpu softvfp
 860              		.type	HAL_IRDA_Receive_IT, %function
 861              	HAL_IRDA_Receive_IT:
 862              	.LFB72:
 991:src/stm32f1xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
 863              		.loc 1 991 0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 0
 866              		@ frame_needed = 0, uses_anonymous_args = 0
 867              		@ link register save eliminated.
 868              	.LVL71:
 993:src/stm32f1xx_hal_irda.c ****   {
 869              		.loc 1 993 0
 870 0336 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2	@ hirda_4(D)->RxState, hirda_4(D)->RxState
 871 033a 202B     		cmp	r3, #32	@ hirda_4(D)->RxState,
 872 033c 1CD1     		bne	.L65	@,
 995:src/stm32f1xx_hal_irda.c ****     {
 873              		.loc 1 995 0
 874 033e C9B1     		cbz	r1, .L64	@ pData,
 995:src/stm32f1xx_hal_irda.c ****     {
 875              		.loc 1 995 0 is_stmt 0 discriminator 1
 876 0340 C2B1     		cbz	r2, .L64	@ Size,
1001:src/stm32f1xx_hal_irda.c **** 
 877              		.loc 1 1001 0 is_stmt 1
 878 0342 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2	@ hirda_4(D)->Lock, hirda_4(D)->Lock
 879 0346 012B     		cmp	r3, #1	@ hirda_4(D)->Lock,
 880 0348 16D0     		beq	.L65	@,
1005:src/stm32f1xx_hal_irda.c **** 
 881              		.loc 1 1005 0 discriminator 2
 882 034a 4285     		strh	r2, [r0, #42]	@ movhi	@ Size, hirda_4(D)->RxXferCount
1004:src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = Size;
 883              		.loc 1 1004 0 discriminator 2
 884 034c 0285     		strh	r2, [r0, #40]	@ movhi	@ Size, hirda_4(D)->RxXferSize
1007:src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 885              		.loc 1 1007 0 discriminator 2
 886 034e 0023     		movs	r3, #0	@ tmp127,
1008:src/stm32f1xx_hal_irda.c **** 
 887              		.loc 1 1008 0 discriminator 2
 888 0350 2222     		movs	r2, #34	@ tmp128,
 889              	.LVL72:
1007:src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 890              		.loc 1 1007 0 discriminator 2
 891 0352 8363     		str	r3, [r0, #56]	@ tmp127, hirda_4(D)->ErrorCode
 892              	.LVL73:
1008:src/stm32f1xx_hal_irda.c **** 
 893              		.loc 1 1008 0 discriminator 2
ARM GAS  /tmp/cc2ibVgV.s 			page 66


 894 0354 80F83620 		strb	r2, [r0, #54]	@ tmp128, hirda_4(D)->RxState
1014:src/stm32f1xx_hal_irda.c **** 
 895              		.loc 1 1014 0 discriminator 2
 896 0358 0268     		ldr	r2, [r0]	@ _15, hirda_4(D)->Instance
1003:src/stm32f1xx_hal_irda.c ****     hirda->RxXferSize = Size;
 897              		.loc 1 1003 0 discriminator 2
 898 035a 4162     		str	r1, [r0, #36]	@ pData, hirda_4(D)->pRxBuffPtr
1014:src/stm32f1xx_hal_irda.c **** 
 899              		.loc 1 1014 0 discriminator 2
 900 035c D168     		ldr	r1, [r2, #12]	@ _16, _15->CR1
 901              	.LVL74:
1011:src/stm32f1xx_hal_irda.c **** 
 902              		.loc 1 1011 0 discriminator 2
 903 035e 80F83430 		strb	r3, [r0, #52]	@ tmp127, hirda_4(D)->Lock
1014:src/stm32f1xx_hal_irda.c **** 
 904              		.loc 1 1014 0 discriminator 2
 905 0362 41F49071 		orr	r1, r1, #288	@ _17, _16,
 906 0366 D160     		str	r1, [r2, #12]	@ _17, _15->CR1
1017:src/stm32f1xx_hal_irda.c **** 
 907              		.loc 1 1017 0 discriminator 2
 908 0368 5169     		ldr	r1, [r2, #20]	@ _19, _15->CR3
1019:src/stm32f1xx_hal_irda.c ****   }
 909              		.loc 1 1019 0 discriminator 2
 910 036a 1846     		mov	r0, r3	@ <retval>, tmp127
 911              	.LVL75:
1017:src/stm32f1xx_hal_irda.c **** 
 912              		.loc 1 1017 0 discriminator 2
 913 036c 41F00101 		orr	r1, r1, #1	@ _20, _19,
 914 0370 5161     		str	r1, [r2, #20]	@ _20, _15->CR3
1019:src/stm32f1xx_hal_irda.c ****   }
 915              		.loc 1 1019 0 discriminator 2
 916 0372 7047     		bx	lr	@
 917              	.LVL76:
 918              	.L64:
 997:src/stm32f1xx_hal_irda.c ****     }
 919              		.loc 1 997 0
 920 0374 0120     		movs	r0, #1	@ <retval>,
 921              	.LVL77:
 922 0376 7047     		bx	lr	@
 923              	.LVL78:
 924              	.L65:
1023:src/stm32f1xx_hal_irda.c ****   }
 925              		.loc 1 1023 0
 926 0378 0220     		movs	r0, #2	@ <retval>,
 927              	.LVL79:
1025:src/stm32f1xx_hal_irda.c **** 
 928              		.loc 1 1025 0
 929 037a 7047     		bx	lr	@
 930              		.cfi_endproc
 931              	.LFE72:
 932              		.size	HAL_IRDA_Receive_IT, .-HAL_IRDA_Receive_IT
 933              		.align	1
 934              		.global	HAL_IRDA_Transmit_DMA
 935              		.syntax unified
 936              		.thumb
 937              		.thumb_func
 938              		.fpu softvfp
ARM GAS  /tmp/cc2ibVgV.s 			page 67


 939              		.type	HAL_IRDA_Transmit_DMA, %function
 940              	HAL_IRDA_Transmit_DMA:
 941              	.LFB73:
1039:src/stm32f1xx_hal_irda.c ****   uint32_t *tmp;
 942              		.loc 1 1039 0
 943              		.cfi_startproc
 944              		@ args = 0, pretend = 0, frame = 0
 945              		@ frame_needed = 0, uses_anonymous_args = 0
 946              	.LVL80:
 947 037c 38B5     		push	{r3, r4, r5, lr}	@
 948              	.LCFI5:
 949              		.cfi_def_cfa_offset 16
 950              		.cfi_offset 3, -16
 951              		.cfi_offset 4, -12
 952              		.cfi_offset 5, -8
 953              		.cfi_offset 14, -4
1039:src/stm32f1xx_hal_irda.c ****   uint32_t *tmp;
 954              		.loc 1 1039 0
 955 037e 0446     		mov	r4, r0	@ hirda, hirda
 956 0380 1346     		mov	r3, r2	@ Size, Size
1043:src/stm32f1xx_hal_irda.c ****   {
 957              		.loc 1 1043 0
 958 0382 94F83520 		ldrb	r2, [r4, #53]	@ zero_extendqisi2	@ hirda_4(D)->gState, hirda_4(D)->gState
 959              	.LVL81:
 960 0386 202A     		cmp	r2, #32	@ hirda_4(D)->gState,
 961 0388 2AD1     		bne	.L71	@,
1045:src/stm32f1xx_hal_irda.c ****     {
 962              		.loc 1 1045 0
 963 038a 39B3     		cbz	r1, .L70	@ pData,
1045:src/stm32f1xx_hal_irda.c ****     {
 964              		.loc 1 1045 0 is_stmt 0 discriminator 1
 965 038c 33B3     		cbz	r3, .L70	@ Size,
1051:src/stm32f1xx_hal_irda.c **** 
 966              		.loc 1 1051 0 is_stmt 1
 967 038e 94F83420 		ldrb	r2, [r4, #52]	@ zero_extendqisi2	@ hirda_4(D)->Lock, hirda_4(D)->Lock
 968 0392 012A     		cmp	r2, #1	@ hirda_4(D)->Lock,
 969 0394 24D0     		beq	.L71	@,
1051:src/stm32f1xx_hal_irda.c **** 
 970              		.loc 1 1051 0 is_stmt 0 discriminator 2
 971 0396 0122     		movs	r2, #1	@ tmp129,
1057:src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 972              		.loc 1 1057 0 is_stmt 1 discriminator 2
 973 0398 0025     		movs	r5, #0	@ tmp133,
1051:src/stm32f1xx_hal_irda.c **** 
 974              		.loc 1 1051 0 discriminator 2
 975 039a 84F83420 		strb	r2, [r4, #52]	@ tmp129, hirda_4(D)->Lock
1058:src/stm32f1xx_hal_irda.c **** 
 976              		.loc 1 1058 0 discriminator 2
 977 039e 2122     		movs	r2, #33	@ tmp134,
1055:src/stm32f1xx_hal_irda.c **** 
 978              		.loc 1 1055 0 discriminator 2
 979 03a0 6384     		strh	r3, [r4, #34]	@ movhi	@ Size, hirda_4(D)->TxXferCount
1061:src/stm32f1xx_hal_irda.c **** 
 980              		.loc 1 1061 0 discriminator 2
 981 03a2 E06A     		ldr	r0, [r4, #44]	@ _14, hirda_4(D)->hdmatx
 982              	.LVL82:
1057:src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
ARM GAS  /tmp/cc2ibVgV.s 			page 68


 983              		.loc 1 1057 0 discriminator 2
 984 03a4 A563     		str	r5, [r4, #56]	@ tmp133, hirda_4(D)->ErrorCode
1058:src/stm32f1xx_hal_irda.c **** 
 985              		.loc 1 1058 0 discriminator 2
 986 03a6 84F83520 		strb	r2, [r4, #53]	@ tmp134, hirda_4(D)->gState
1061:src/stm32f1xx_hal_irda.c **** 
 987              		.loc 1 1061 0 discriminator 2
 988 03aa 0E4A     		ldr	r2, .L72	@ tmp136,
1054:src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
 989              		.loc 1 1054 0 discriminator 2
 990 03ac 2384     		strh	r3, [r4, #32]	@ movhi	@ Size, hirda_4(D)->TxXferSize
1053:src/stm32f1xx_hal_irda.c ****     hirda->TxXferSize = Size;
 991              		.loc 1 1053 0 discriminator 2
 992 03ae E161     		str	r1, [r4, #28]	@ pData, hirda_4(D)->pTxBuffPtr
1061:src/stm32f1xx_hal_irda.c **** 
 993              		.loc 1 1061 0 discriminator 2
 994 03b0 8262     		str	r2, [r0, #40]	@ tmp136, _14->XferCpltCallback
1064:src/stm32f1xx_hal_irda.c **** 
 995              		.loc 1 1064 0 discriminator 2
 996 03b2 0D4A     		ldr	r2, .L72+4	@ tmp137,
1070:src/stm32f1xx_hal_irda.c **** 
 997              		.loc 1 1070 0 discriminator 2
 998 03b4 4563     		str	r5, [r0, #52]	@ tmp133, _14->XferAbortCallback
 999              	.LVL83:
1064:src/stm32f1xx_hal_irda.c **** 
 1000              		.loc 1 1064 0 discriminator 2
 1001 03b6 C262     		str	r2, [r0, #44]	@ tmp137, _14->XferHalfCpltCallback
1067:src/stm32f1xx_hal_irda.c **** 
 1002              		.loc 1 1067 0 discriminator 2
 1003 03b8 0C4A     		ldr	r2, .L72+8	@ tmp138,
 1004 03ba 0263     		str	r2, [r0, #48]	@ tmp138, _14->XferErrorCallback
1074:src/stm32f1xx_hal_irda.c **** 
 1005              		.loc 1 1074 0 discriminator 2
 1006 03bc 2268     		ldr	r2, [r4]	@ hirda_4(D)->Instance, hirda_4(D)->Instance
 1007 03be 0432     		adds	r2, r2, #4	@, hirda_4(D)->Instance,
 1008 03c0 FFF7FEFF 		bl	HAL_DMA_Start_IT	@
 1009              	.LVL84:
1077:src/stm32f1xx_hal_irda.c **** 
 1010              		.loc 1 1077 0 discriminator 2
 1011 03c4 6FF04002 		mvn	r2, #64	@ tmp142,
 1012 03c8 2368     		ldr	r3, [r4]	@ _25, hirda_4(D)->Instance
1086:src/stm32f1xx_hal_irda.c ****   }
 1013              		.loc 1 1086 0 discriminator 2
 1014 03ca 2846     		mov	r0, r5	@ <retval>, tmp133
1077:src/stm32f1xx_hal_irda.c **** 
 1015              		.loc 1 1077 0 discriminator 2
 1016 03cc 1A60     		str	r2, [r3]	@ tmp142, _25->SR
1084:src/stm32f1xx_hal_irda.c **** 
 1017              		.loc 1 1084 0 discriminator 2
 1018 03ce 5A69     		ldr	r2, [r3, #20]	@ _28, _25->CR3
1080:src/stm32f1xx_hal_irda.c **** 
 1019              		.loc 1 1080 0 discriminator 2
 1020 03d0 84F83450 		strb	r5, [r4, #52]	@ tmp133, hirda_4(D)->Lock
1084:src/stm32f1xx_hal_irda.c **** 
 1021              		.loc 1 1084 0 discriminator 2
 1022 03d4 42F08002 		orr	r2, r2, #128	@ _29, _28,
 1023 03d8 5A61     		str	r2, [r3, #20]	@ _29, _25->CR3
ARM GAS  /tmp/cc2ibVgV.s 			page 69


1086:src/stm32f1xx_hal_irda.c ****   }
 1024              		.loc 1 1086 0 discriminator 2
 1025 03da 38BD     		pop	{r3, r4, r5, pc}	@
 1026              	.LVL85:
 1027              	.L70:
1047:src/stm32f1xx_hal_irda.c ****     }
 1028              		.loc 1 1047 0
 1029 03dc 0120     		movs	r0, #1	@ <retval>,
 1030              	.LVL86:
 1031 03de 38BD     		pop	{r3, r4, r5, pc}	@
 1032              	.LVL87:
 1033              	.L71:
1090:src/stm32f1xx_hal_irda.c ****   }
 1034              		.loc 1 1090 0
 1035 03e0 0220     		movs	r0, #2	@ <retval>,
 1036              	.LVL88:
1092:src/stm32f1xx_hal_irda.c **** 
 1037              		.loc 1 1092 0
 1038 03e2 38BD     		pop	{r3, r4, r5, pc}	@
 1039              	.LVL89:
 1040              	.L73:
 1041              		.align	2
 1042              	.L72:
 1043 03e4 00000000 		.word	IRDA_DMATransmitCplt
 1044 03e8 00000000 		.word	IRDA_DMATransmitHalfCplt
 1045 03ec 00000000 		.word	IRDA_DMAError
 1046              		.cfi_endproc
 1047              	.LFE73:
 1048              		.size	HAL_IRDA_Transmit_DMA, .-HAL_IRDA_Transmit_DMA
 1049              		.align	1
 1050              		.global	HAL_IRDA_Receive_DMA
 1051              		.syntax unified
 1052              		.thumb
 1053              		.thumb_func
 1054              		.fpu softvfp
 1055              		.type	HAL_IRDA_Receive_DMA, %function
 1056              	HAL_IRDA_Receive_DMA:
 1057              	.LFB74:
1107:src/stm32f1xx_hal_irda.c ****   uint32_t *tmp;
 1058              		.loc 1 1107 0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 8
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062              	.LVL90:
 1063 03f0 1346     		mov	r3, r2	@ Size, Size
1111:src/stm32f1xx_hal_irda.c ****   {
 1064              		.loc 1 1111 0
 1065 03f2 90F83620 		ldrb	r2, [r0, #54]	@ zero_extendqisi2	@ hirda_4(D)->RxState, hirda_4(D)->RxState
 1066              	.LVL91:
1107:src/stm32f1xx_hal_irda.c ****   uint32_t *tmp;
 1067              		.loc 1 1107 0
 1068 03f6 73B5     		push	{r0, r1, r4, r5, r6, lr}	@
 1069              	.LCFI6:
 1070              		.cfi_def_cfa_offset 24
 1071              		.cfi_offset 4, -16
 1072              		.cfi_offset 5, -12
 1073              		.cfi_offset 6, -8
ARM GAS  /tmp/cc2ibVgV.s 			page 70


 1074              		.cfi_offset 14, -4
1111:src/stm32f1xx_hal_irda.c ****   {
 1075              		.loc 1 1111 0
 1076 03f8 202A     		cmp	r2, #32	@ hirda_4(D)->RxState,
1107:src/stm32f1xx_hal_irda.c ****   uint32_t *tmp;
 1077              		.loc 1 1107 0
 1078 03fa 0546     		mov	r5, r0	@ hirda, hirda
1111:src/stm32f1xx_hal_irda.c ****   {
 1079              		.loc 1 1111 0
 1080 03fc 38D1     		bne	.L79	@,
1113:src/stm32f1xx_hal_irda.c ****     {
 1081              		.loc 1 1113 0
 1082 03fe 0029     		cmp	r1, #0	@ pData
 1083 0400 34D0     		beq	.L78	@
1113:src/stm32f1xx_hal_irda.c ****     {
 1084              		.loc 1 1113 0 is_stmt 0 discriminator 1
 1085 0402 002B     		cmp	r3, #0	@ Size
 1086 0404 32D0     		beq	.L78	@
1119:src/stm32f1xx_hal_irda.c **** 
 1087              		.loc 1 1119 0 is_stmt 1
 1088 0406 90F83420 		ldrb	r2, [r0, #52]	@ zero_extendqisi2	@ hirda_4(D)->Lock, hirda_4(D)->Lock
 1089 040a 012A     		cmp	r2, #1	@ hirda_4(D)->Lock,
 1090 040c 30D0     		beq	.L79	@,
1119:src/stm32f1xx_hal_irda.c **** 
 1091              		.loc 1 1119 0 is_stmt 0 discriminator 2
 1092 040e 0122     		movs	r2, #1	@ tmp136,
1124:src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 1093              		.loc 1 1124 0 is_stmt 1 discriminator 2
 1094 0410 0024     		movs	r4, #0	@ tmp139,
1119:src/stm32f1xx_hal_irda.c **** 
 1095              		.loc 1 1119 0 discriminator 2
 1096 0412 80F83420 		strb	r2, [r0, #52]	@ tmp136, hirda_4(D)->Lock
1125:src/stm32f1xx_hal_irda.c **** 
 1097              		.loc 1 1125 0 discriminator 2
 1098 0416 2222     		movs	r2, #34	@ tmp140,
1122:src/stm32f1xx_hal_irda.c **** 
 1099              		.loc 1 1122 0 discriminator 2
 1100 0418 0385     		strh	r3, [r0, #40]	@ movhi	@ Size, hirda_4(D)->RxXferSize
1121:src/stm32f1xx_hal_irda.c ****     hirda->RxXferSize = Size;
 1101              		.loc 1 1121 0 discriminator 2
 1102 041a 4162     		str	r1, [r0, #36]	@ pData, hirda_4(D)->pRxBuffPtr
1124:src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 1103              		.loc 1 1124 0 discriminator 2
 1104 041c 8463     		str	r4, [r0, #56]	@ tmp139, hirda_4(D)->ErrorCode
1125:src/stm32f1xx_hal_irda.c **** 
 1105              		.loc 1 1125 0 discriminator 2
 1106 041e 80F83620 		strb	r2, [r0, #54]	@ tmp140, hirda_4(D)->RxState
1128:src/stm32f1xx_hal_irda.c **** 
 1107              		.loc 1 1128 0 discriminator 2
 1108 0422 006B     		ldr	r0, [r0, #48]	@ _13, hirda_4(D)->hdmarx
 1109              	.LVL92:
 1110 0424 134A     		ldr	r2, .L80	@ tmp142,
1141:src/stm32f1xx_hal_irda.c **** 
 1111              		.loc 1 1141 0 discriminator 2
 1112 0426 2E68     		ldr	r6, [r5]	@ hirda_4(D)->Instance, hirda_4(D)->Instance
1128:src/stm32f1xx_hal_irda.c **** 
 1113              		.loc 1 1128 0 discriminator 2
ARM GAS  /tmp/cc2ibVgV.s 			page 71


 1114 0428 8262     		str	r2, [r0, #40]	@ tmp142, _13->XferCpltCallback
1131:src/stm32f1xx_hal_irda.c **** 
 1115              		.loc 1 1131 0 discriminator 2
 1116 042a 134A     		ldr	r2, .L80+4	@ tmp143,
1137:src/stm32f1xx_hal_irda.c **** 
 1117              		.loc 1 1137 0 discriminator 2
 1118 042c 4463     		str	r4, [r0, #52]	@ tmp139, _13->XferAbortCallback
 1119              	.LVL93:
1131:src/stm32f1xx_hal_irda.c **** 
 1120              		.loc 1 1131 0 discriminator 2
 1121 042e C262     		str	r2, [r0, #44]	@ tmp143, _13->XferHalfCpltCallback
1134:src/stm32f1xx_hal_irda.c **** 
 1122              		.loc 1 1134 0 discriminator 2
 1123 0430 124A     		ldr	r2, .L80+8	@ tmp144,
 1124 0432 0263     		str	r2, [r0, #48]	@ tmp144, _13->XferErrorCallback
1141:src/stm32f1xx_hal_irda.c **** 
 1125              		.loc 1 1141 0 discriminator 2
 1126 0434 0A46     		mov	r2, r1	@, pData
 1127 0436 311D     		adds	r1, r6, #4	@, hirda_4(D)->Instance,
 1128              	.LVL94:
 1129 0438 FFF7FEFF 		bl	HAL_DMA_Start_IT	@
 1130              	.LVL95:
1159:src/stm32f1xx_hal_irda.c ****   }
 1131              		.loc 1 1159 0 discriminator 2
 1132 043c 2046     		mov	r0, r4	@ <retval>, tmp139
 1133              	.LBB14:
1144:src/stm32f1xx_hal_irda.c **** 
 1134              		.loc 1 1144 0 discriminator 2
 1135 043e 2B68     		ldr	r3, [r5]	@ _25, hirda_4(D)->Instance
 1136 0440 0194     		str	r4, [sp, #4]	@ tmp139, tmpreg
 1137 0442 1A68     		ldr	r2, [r3]	@ tmpreg.5_26, _25->SR
 1138 0444 0192     		str	r2, [sp, #4]	@ tmpreg.5_26, tmpreg
 1139 0446 5A68     		ldr	r2, [r3, #4]	@ tmpreg.6_28, _25->DR
 1140              	.LBE14:
1147:src/stm32f1xx_hal_irda.c **** 
 1141              		.loc 1 1147 0 discriminator 2
 1142 0448 85F83440 		strb	r4, [r5, #52]	@ tmp139, hirda_4(D)->Lock
 1143              	.LBB15:
1144:src/stm32f1xx_hal_irda.c **** 
 1144              		.loc 1 1144 0 discriminator 2
 1145 044c 0192     		str	r2, [sp, #4]	@ tmpreg.6_28, tmpreg
 1146 044e 019A     		ldr	r2, [sp, #4]	@ vol.7_30, tmpreg
 1147              	.LBE15:
1150:src/stm32f1xx_hal_irda.c **** 
 1148              		.loc 1 1150 0 discriminator 2
 1149 0450 DA68     		ldr	r2, [r3, #12]	@ _32, _25->CR1
 1150 0452 42F48072 		orr	r2, r2, #256	@ _33, _32,
 1151 0456 DA60     		str	r2, [r3, #12]	@ _33, _25->CR1
1153:src/stm32f1xx_hal_irda.c **** 
 1152              		.loc 1 1153 0 discriminator 2
 1153 0458 5A69     		ldr	r2, [r3, #20]	@ _35, _25->CR3
 1154 045a 42F00102 		orr	r2, r2, #1	@ _36, _35,
 1155 045e 5A61     		str	r2, [r3, #20]	@ _36, _25->CR3
1157:src/stm32f1xx_hal_irda.c **** 
 1156              		.loc 1 1157 0 discriminator 2
 1157 0460 5A69     		ldr	r2, [r3, #20]	@ _38, _25->CR3
 1158 0462 42F04002 		orr	r2, r2, #64	@ _39, _38,
ARM GAS  /tmp/cc2ibVgV.s 			page 72


 1159 0466 5A61     		str	r2, [r3, #20]	@ _39, _25->CR3
 1160              	.LVL96:
 1161              	.L75:
1165:src/stm32f1xx_hal_irda.c **** 
 1162              		.loc 1 1165 0
 1163 0468 02B0     		add	sp, sp, #8	@,,
 1164              	.LCFI7:
 1165              		.cfi_remember_state
 1166              		.cfi_def_cfa_offset 16
 1167              		@ sp needed	@
 1168 046a 70BD     		pop	{r4, r5, r6, pc}	@
 1169              	.LVL97:
 1170              	.L78:
 1171              	.LCFI8:
 1172              		.cfi_restore_state
1115:src/stm32f1xx_hal_irda.c ****     }
 1173              		.loc 1 1115 0
 1174 046c 0120     		movs	r0, #1	@ <retval>,
 1175              	.LVL98:
 1176 046e FBE7     		b	.L75	@
 1177              	.LVL99:
 1178              	.L79:
1163:src/stm32f1xx_hal_irda.c ****   }
 1179              		.loc 1 1163 0
 1180 0470 0220     		movs	r0, #2	@ <retval>,
 1181              	.LVL100:
 1182 0472 F9E7     		b	.L75	@
 1183              	.L81:
 1184              		.align	2
 1185              	.L80:
 1186 0474 00000000 		.word	IRDA_DMAReceiveCplt
 1187 0478 00000000 		.word	IRDA_DMAReceiveHalfCplt
 1188 047c 00000000 		.word	IRDA_DMAError
 1189              		.cfi_endproc
 1190              	.LFE74:
 1191              		.size	HAL_IRDA_Receive_DMA, .-HAL_IRDA_Receive_DMA
 1192              		.align	1
 1193              		.global	HAL_IRDA_DMAPause
 1194              		.syntax unified
 1195              		.thumb
 1196              		.thumb_func
 1197              		.fpu softvfp
 1198              		.type	HAL_IRDA_DMAPause, %function
 1199              	HAL_IRDA_DMAPause:
 1200              	.LFB75:
1174:src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 1201              		.loc 1 1174 0
 1202              		.cfi_startproc
 1203              		@ args = 0, pretend = 0, frame = 0
 1204              		@ frame_needed = 0, uses_anonymous_args = 0
 1205              		@ link register save eliminated.
 1206              	.LVL101:
1178:src/stm32f1xx_hal_irda.c **** 
 1207              		.loc 1 1178 0
 1208 0480 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2	@ hirda_6(D)->Lock, hirda_6(D)->Lock
 1209 0484 012B     		cmp	r3, #1	@ hirda_6(D)->Lock,
 1210 0486 26D0     		beq	.L86	@,
ARM GAS  /tmp/cc2ibVgV.s 			page 73


1178:src/stm32f1xx_hal_irda.c **** 
 1211              		.loc 1 1178 0 is_stmt 0 discriminator 2
 1212 0488 0123     		movs	r3, #1	@ tmp129,
 1213 048a 80F83430 		strb	r3, [r0, #52]	@ tmp129, hirda_6(D)->Lock
1180:src/stm32f1xx_hal_irda.c ****   if ((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 1214              		.loc 1 1180 0 is_stmt 1 discriminator 2
 1215 048e 0368     		ldr	r3, [r0]	@ _9, hirda_6(D)->Instance
 1216 0490 5A69     		ldr	r2, [r3, #20]	@ _10, _9->CR3
 1217              	.LVL102:
1181:src/stm32f1xx_hal_irda.c ****   {
 1218              		.loc 1 1181 0 discriminator 2
 1219 0492 90F83510 		ldrb	r1, [r0, #53]	@ zero_extendqisi2	@ hirda_6(D)->gState, hirda_6(D)->gState
 1220 0496 2129     		cmp	r1, #33	@ hirda_6(D)->gState,
 1221 0498 05D1     		bne	.L84	@,
1181:src/stm32f1xx_hal_irda.c ****   {
 1222              		.loc 1 1181 0 is_stmt 0 discriminator 1
 1223 049a 1106     		lsls	r1, r2, #24	@, _10,
1184:src/stm32f1xx_hal_irda.c ****   }
 1224              		.loc 1 1184 0 is_stmt 1 discriminator 1
 1225 049c 42BF     		ittt	mi
 1226 049e 5A69     		ldrmi	r2, [r3, #20]	@ _13, _9->CR3
 1227              	.LVL103:
 1228 04a0 22F08002 		bicmi	r2, r2, #128	@ _14, _13,
 1229 04a4 5A61     		strmi	r2, [r3, #20]	@ _14, _9->CR3
 1230              	.L84:
1187:src/stm32f1xx_hal_irda.c ****   if ((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 1231              		.loc 1 1187 0
 1232 04a6 5A69     		ldr	r2, [r3, #20]	@ _16, _9->CR3
 1233              	.LVL104:
1188:src/stm32f1xx_hal_irda.c ****   {
 1234              		.loc 1 1188 0
 1235 04a8 90F83610 		ldrb	r1, [r0, #54]	@ zero_extendqisi2	@ hirda_6(D)->RxState, hirda_6(D)->RxState
 1236 04ac 2229     		cmp	r1, #34	@ hirda_6(D)->RxState,
 1237 04ae 0DD1     		bne	.L85	@,
1188:src/stm32f1xx_hal_irda.c ****   {
 1238              		.loc 1 1188 0 is_stmt 0 discriminator 1
 1239 04b0 5206     		lsls	r2, r2, #25	@, _16,
 1240              	.LVL105:
 1241 04b2 0BD5     		bpl	.L85	@,
1191:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1242              		.loc 1 1191 0 is_stmt 1
 1243 04b4 DA68     		ldr	r2, [r3, #12]	@ _19, _9->CR1
 1244 04b6 22F48072 		bic	r2, r2, #256	@ _20, _19,
 1245 04ba DA60     		str	r2, [r3, #12]	@ _20, _9->CR1
1192:src/stm32f1xx_hal_irda.c **** 
 1246              		.loc 1 1192 0
 1247 04bc 5A69     		ldr	r2, [r3, #20]	@ _22, _9->CR3
 1248 04be 22F00102 		bic	r2, r2, #1	@ _23, _22,
 1249 04c2 5A61     		str	r2, [r3, #20]	@ _23, _9->CR3
1195:src/stm32f1xx_hal_irda.c ****   }
 1250              		.loc 1 1195 0
 1251 04c4 5A69     		ldr	r2, [r3, #20]	@ _25, _9->CR3
 1252 04c6 22F04002 		bic	r2, r2, #64	@ _26, _25,
 1253 04ca 5A61     		str	r2, [r3, #20]	@ _26, _9->CR3
 1254              	.L85:
1199:src/stm32f1xx_hal_irda.c **** 
 1255              		.loc 1 1199 0
ARM GAS  /tmp/cc2ibVgV.s 			page 74


 1256 04cc 0023     		movs	r3, #0	@ tmp139,
 1257 04ce 80F83430 		strb	r3, [r0, #52]	@ tmp139, hirda_6(D)->Lock
1201:src/stm32f1xx_hal_irda.c **** }
 1258              		.loc 1 1201 0
 1259 04d2 1846     		mov	r0, r3	@ <retval>, tmp139
 1260              	.LVL106:
 1261 04d4 7047     		bx	lr	@
 1262              	.LVL107:
 1263              	.L86:
1178:src/stm32f1xx_hal_irda.c **** 
 1264              		.loc 1 1178 0
 1265 04d6 0220     		movs	r0, #2	@ <retval>,
 1266              	.LVL108:
1202:src/stm32f1xx_hal_irda.c **** 
 1267              		.loc 1 1202 0
 1268 04d8 7047     		bx	lr	@
 1269              		.cfi_endproc
 1270              	.LFE75:
 1271              		.size	HAL_IRDA_DMAPause, .-HAL_IRDA_DMAPause
 1272              		.align	1
 1273              		.global	HAL_IRDA_DMAResume
 1274              		.syntax unified
 1275              		.thumb
 1276              		.thumb_func
 1277              		.fpu softvfp
 1278              		.type	HAL_IRDA_DMAResume, %function
 1279              	HAL_IRDA_DMAResume:
 1280              	.LFB76:
1211:src/stm32f1xx_hal_irda.c ****   /* Process Locked */
 1281              		.loc 1 1211 0
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 8
 1284              		@ frame_needed = 0, uses_anonymous_args = 0
 1285              		@ link register save eliminated.
 1286              	.LVL109:
1213:src/stm32f1xx_hal_irda.c **** 
 1287              		.loc 1 1213 0
 1288 04da 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2	@ hirda_6(D)->Lock, hirda_6(D)->Lock
1211:src/stm32f1xx_hal_irda.c ****   /* Process Locked */
 1289              		.loc 1 1211 0
 1290 04de 82B0     		sub	sp, sp, #8	@,,
 1291              	.LCFI9:
 1292              		.cfi_def_cfa_offset 8
1213:src/stm32f1xx_hal_irda.c **** 
 1293              		.loc 1 1213 0
 1294 04e0 012B     		cmp	r3, #1	@ hirda_6(D)->Lock,
 1295 04e2 29D0     		beq	.L97	@,
1213:src/stm32f1xx_hal_irda.c **** 
 1296              		.loc 1 1213 0 is_stmt 0 discriminator 2
 1297 04e4 0123     		movs	r3, #1	@ tmp129,
 1298 04e6 80F83430 		strb	r3, [r0, #52]	@ tmp129, hirda_6(D)->Lock
1215:src/stm32f1xx_hal_irda.c ****   {
 1299              		.loc 1 1215 0 is_stmt 1 discriminator 2
 1300 04ea 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2	@ hirda_6(D)->gState, hirda_6(D)->gState
 1301 04ee 212B     		cmp	r3, #33	@ hirda_6(D)->gState,
1218:src/stm32f1xx_hal_irda.c ****   }
 1302              		.loc 1 1218 0 discriminator 2
ARM GAS  /tmp/cc2ibVgV.s 			page 75


 1303 04f0 01BF     		itttt	eq
 1304 04f2 0268     		ldreq	r2, [r0]	@ _10, hirda_6(D)->Instance
 1305 04f4 5369     		ldreq	r3, [r2, #20]	@ _11, _10->CR3
 1306 04f6 43F08003 		orreq	r3, r3, #128	@ _12, _11,
 1307 04fa 5361     		streq	r3, [r2, #20]	@ _12, _10->CR3
1221:src/stm32f1xx_hal_irda.c ****   {
 1308              		.loc 1 1221 0 discriminator 2
 1309 04fc 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2	@ hirda_6(D)->RxState, hirda_6(D)->RxState
 1310 0500 222B     		cmp	r3, #34	@ hirda_6(D)->RxState,
 1311 0502 13D1     		bne	.L96	@,
 1312              	.LBB16:
1224:src/stm32f1xx_hal_irda.c **** 
 1313              		.loc 1 1224 0
 1314 0504 0023     		movs	r3, #0	@ tmp137,
 1315 0506 0193     		str	r3, [sp, #4]	@ tmp137, tmpreg
 1316 0508 0368     		ldr	r3, [r0]	@ _16, hirda_6(D)->Instance
 1317 050a 1A68     		ldr	r2, [r3]	@ tmpreg.8_17, _16->SR
 1318 050c 0192     		str	r2, [sp, #4]	@ tmpreg.8_17, tmpreg
 1319 050e 5A68     		ldr	r2, [r3, #4]	@ tmpreg.9_19, _16->DR
 1320 0510 0192     		str	r2, [sp, #4]	@ tmpreg.9_19, tmpreg
 1321 0512 019A     		ldr	r2, [sp, #4]	@ vol.10_21, tmpreg
 1322              	.LBE16:
1227:src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1323              		.loc 1 1227 0
 1324 0514 DA68     		ldr	r2, [r3, #12]	@ _22, _16->CR1
 1325 0516 42F48072 		orr	r2, r2, #256	@ _23, _22,
 1326 051a DA60     		str	r2, [r3, #12]	@ _23, _16->CR1
1228:src/stm32f1xx_hal_irda.c **** 
 1327              		.loc 1 1228 0
 1328 051c 5A69     		ldr	r2, [r3, #20]	@ _25, _16->CR3
 1329 051e 42F00102 		orr	r2, r2, #1	@ _26, _25,
 1330 0522 5A61     		str	r2, [r3, #20]	@ _26, _16->CR3
1231:src/stm32f1xx_hal_irda.c ****   }
 1331              		.loc 1 1231 0
 1332 0524 5A69     		ldr	r2, [r3, #20]	@ _28, _16->CR3
 1333 0526 42F04002 		orr	r2, r2, #64	@ _29, _28,
 1334 052a 5A61     		str	r2, [r3, #20]	@ _29, _16->CR3
 1335              	.L96:
1235:src/stm32f1xx_hal_irda.c **** 
 1336              		.loc 1 1235 0
 1337 052c 0023     		movs	r3, #0	@ tmp138,
 1338 052e 80F83430 		strb	r3, [r0, #52]	@ tmp138, hirda_6(D)->Lock
1237:src/stm32f1xx_hal_irda.c **** }
 1339              		.loc 1 1237 0
 1340 0532 1846     		mov	r0, r3	@ <retval>, tmp138
 1341              	.LVL110:
 1342              	.L94:
1238:src/stm32f1xx_hal_irda.c **** 
 1343              		.loc 1 1238 0
 1344 0534 02B0     		add	sp, sp, #8	@,,
 1345              	.LCFI10:
 1346              		.cfi_remember_state
 1347              		.cfi_def_cfa_offset 0
 1348              		@ sp needed	@
 1349 0536 7047     		bx	lr	@
 1350              	.LVL111:
 1351              	.L97:
ARM GAS  /tmp/cc2ibVgV.s 			page 76


 1352              	.LCFI11:
 1353              		.cfi_restore_state
1213:src/stm32f1xx_hal_irda.c **** 
 1354              		.loc 1 1213 0
 1355 0538 0220     		movs	r0, #2	@ <retval>,
 1356              	.LVL112:
 1357 053a FBE7     		b	.L94	@
 1358              		.cfi_endproc
 1359              	.LFE76:
 1360              		.size	HAL_IRDA_DMAResume, .-HAL_IRDA_DMAResume
 1361              		.align	1
 1362              		.global	HAL_IRDA_DMAStop
 1363              		.syntax unified
 1364              		.thumb
 1365              		.thumb_func
 1366              		.fpu softvfp
 1367              		.type	HAL_IRDA_DMAStop, %function
 1368              	HAL_IRDA_DMAStop:
 1369              	.LFB77:
1247:src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 1370              		.loc 1 1247 0
 1371              		.cfi_startproc
 1372              		@ args = 0, pretend = 0, frame = 0
 1373              		@ frame_needed = 0, uses_anonymous_args = 0
 1374              	.LVL113:
1256:src/stm32f1xx_hal_irda.c ****   if ((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 1375              		.loc 1 1256 0
 1376 053c 0368     		ldr	r3, [r0]	@ _7, hirda_6(D)->Instance
1247:src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 1377              		.loc 1 1247 0
 1378 053e 10B5     		push	{r4, lr}	@
 1379              	.LCFI12:
 1380              		.cfi_def_cfa_offset 8
 1381              		.cfi_offset 4, -8
 1382              		.cfi_offset 14, -4
1256:src/stm32f1xx_hal_irda.c ****   if ((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 1383              		.loc 1 1256 0
 1384 0540 5A69     		ldr	r2, [r3, #20]	@ _8, _7->CR3
 1385              	.LVL114:
1257:src/stm32f1xx_hal_irda.c ****   {
 1386              		.loc 1 1257 0
 1387 0542 90F83510 		ldrb	r1, [r0, #53]	@ zero_extendqisi2	@ hirda_6(D)->gState, hirda_6(D)->gState
1247:src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 1388              		.loc 1 1247 0
 1389 0546 0446     		mov	r4, r0	@ hirda, hirda
1257:src/stm32f1xx_hal_irda.c ****   {
 1390              		.loc 1 1257 0
 1391 0548 2129     		cmp	r1, #33	@ hirda_6(D)->gState,
 1392 054a 11D1     		bne	.L99	@,
1257:src/stm32f1xx_hal_irda.c ****   {
 1393              		.loc 1 1257 0 is_stmt 0 discriminator 1
 1394 054c 1106     		lsls	r1, r2, #24	@, _8,
 1395 054e 0FD5     		bpl	.L99	@,
1259:src/stm32f1xx_hal_irda.c **** 
 1396              		.loc 1 1259 0 is_stmt 1
 1397 0550 5A69     		ldr	r2, [r3, #20]	@ _11, _7->CR3
 1398              	.LVL115:
ARM GAS  /tmp/cc2ibVgV.s 			page 77


1262:src/stm32f1xx_hal_irda.c ****     {
 1399              		.loc 1 1262 0
 1400 0552 C06A     		ldr	r0, [r0, #44]	@ _14, hirda_6(D)->hdmatx
 1401              	.LVL116:
1259:src/stm32f1xx_hal_irda.c **** 
 1402              		.loc 1 1259 0
 1403 0554 22F08002 		bic	r2, r2, #128	@ _12, _11,
 1404 0558 5A61     		str	r2, [r3, #20]	@ _12, _7->CR3
1262:src/stm32f1xx_hal_irda.c ****     {
 1405              		.loc 1 1262 0
 1406 055a 08B1     		cbz	r0, .L100	@ _14,
1264:src/stm32f1xx_hal_irda.c ****     }
 1407              		.loc 1 1264 0
 1408 055c FFF7FEFF 		bl	HAL_DMA_Abort	@
 1409              	.LVL117:
 1410              	.L100:
 1411              	.LBB19:
 1412              	.LBB20:
2262:src/stm32f1xx_hal_irda.c **** 
 1413              		.loc 1 2262 0
 1414 0560 2268     		ldr	r2, [r4]	@ _27, hirda_6(D)->Instance
 1415 0562 D368     		ldr	r3, [r2, #12]	@ _28, _27->CR1
 1416 0564 23F0C003 		bic	r3, r3, #192	@ _29, _28,
 1417 0568 D360     		str	r3, [r2, #12]	@ _29, _27->CR1
2265:src/stm32f1xx_hal_irda.c **** }
 1418              		.loc 1 2265 0
 1419 056a 2023     		movs	r3, #32	@ tmp133,
 1420 056c 84F83530 		strb	r3, [r4, #53]	@ tmp133, hirda_6(D)->gState
 1421              	.LVL118:
 1422              	.L99:
 1423              	.LBE20:
 1424              	.LBE19:
1270:src/stm32f1xx_hal_irda.c ****   if ((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 1425              		.loc 1 1270 0
 1426 0570 2368     		ldr	r3, [r4]	@ _17, hirda_6(D)->Instance
 1427 0572 5A69     		ldr	r2, [r3, #20]	@ _18, _17->CR3
 1428              	.LVL119:
1271:src/stm32f1xx_hal_irda.c ****   {
 1429              		.loc 1 1271 0
 1430 0574 94F83610 		ldrb	r1, [r4, #54]	@ zero_extendqisi2	@ hirda_6(D)->RxState, hirda_6(D)->RxState
 1431 0578 2229     		cmp	r1, #34	@ hirda_6(D)->RxState,
 1432 057a 0CD1     		bne	.L101	@,
1271:src/stm32f1xx_hal_irda.c ****   {
 1433              		.loc 1 1271 0 is_stmt 0 discriminator 1
 1434 057c 5206     		lsls	r2, r2, #25	@, _18,
 1435              	.LVL120:
 1436 057e 0AD5     		bpl	.L101	@,
1273:src/stm32f1xx_hal_irda.c **** 
 1437              		.loc 1 1273 0 is_stmt 1
 1438 0580 5A69     		ldr	r2, [r3, #20]	@ _21, _17->CR3
1276:src/stm32f1xx_hal_irda.c ****     {
 1439              		.loc 1 1276 0
 1440 0582 206B     		ldr	r0, [r4, #48]	@ _24, hirda_6(D)->hdmarx
1273:src/stm32f1xx_hal_irda.c **** 
 1441              		.loc 1 1273 0
 1442 0584 22F04002 		bic	r2, r2, #64	@ _22, _21,
 1443 0588 5A61     		str	r2, [r3, #20]	@ _22, _17->CR3
ARM GAS  /tmp/cc2ibVgV.s 			page 78


1276:src/stm32f1xx_hal_irda.c ****     {
 1444              		.loc 1 1276 0
 1445 058a 08B1     		cbz	r0, .L102	@ _24,
1278:src/stm32f1xx_hal_irda.c ****     }
 1446              		.loc 1 1278 0
 1447 058c FFF7FEFF 		bl	HAL_DMA_Abort	@
 1448              	.LVL121:
 1449              	.L102:
1280:src/stm32f1xx_hal_irda.c ****   }
 1450              		.loc 1 1280 0
 1451 0590 2046     		mov	r0, r4	@, hirda
 1452 0592 FFF735FD 		bl	IRDA_EndRxTransfer	@
 1453              	.LVL122:
 1454              	.L101:
1284:src/stm32f1xx_hal_irda.c **** 
 1455              		.loc 1 1284 0
 1456 0596 0020     		movs	r0, #0	@,
 1457 0598 10BD     		pop	{r4, pc}	@
 1458              		.cfi_endproc
 1459              	.LFE77:
 1460              		.size	HAL_IRDA_DMAStop, .-HAL_IRDA_DMAStop
 1461              		.align	1
 1462              		.global	HAL_IRDA_Abort
 1463              		.syntax unified
 1464              		.thumb
 1465              		.thumb_func
 1466              		.fpu softvfp
 1467              		.type	HAL_IRDA_Abort, %function
 1468              	HAL_IRDA_Abort:
 1469              	.LFB78:
1299:src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1470              		.loc 1 1299 0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 0
 1473              		@ frame_needed = 0, uses_anonymous_args = 0
 1474              	.LVL123:
1301:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1475              		.loc 1 1301 0
 1476 059a 0368     		ldr	r3, [r0]	@ _5, hirda_4(D)->Instance
1299:src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1477              		.loc 1 1299 0
 1478 059c 10B5     		push	{r4, lr}	@
 1479              	.LCFI13:
 1480              		.cfi_def_cfa_offset 8
 1481              		.cfi_offset 4, -8
 1482              		.cfi_offset 14, -4
1301:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1483              		.loc 1 1301 0
 1484 059e DA68     		ldr	r2, [r3, #12]	@ _6, _5->CR1
1299:src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1485              		.loc 1 1299 0
 1486 05a0 0446     		mov	r4, r0	@ hirda, hirda
1301:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1487              		.loc 1 1301 0
 1488 05a2 22F4F072 		bic	r2, r2, #480	@ _7, _6,
 1489 05a6 DA60     		str	r2, [r3, #12]	@ _7, _5->CR1
1302:src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/cc2ibVgV.s 			page 79


 1490              		.loc 1 1302 0
 1491 05a8 5A69     		ldr	r2, [r3, #20]	@ _9, _5->CR3
 1492 05aa 22F00102 		bic	r2, r2, #1	@ _10, _9,
 1493 05ae 5A61     		str	r2, [r3, #20]	@ _10, _5->CR3
1305:src/stm32f1xx_hal_irda.c ****   {
 1494              		.loc 1 1305 0
 1495 05b0 5A69     		ldr	r2, [r3, #20]	@ _12, _5->CR3
 1496 05b2 1106     		lsls	r1, r2, #24	@, _12,
 1497 05b4 09D5     		bpl	.L117	@,
1307:src/stm32f1xx_hal_irda.c **** 
 1498              		.loc 1 1307 0
 1499 05b6 5A69     		ldr	r2, [r3, #20]	@ _14, _5->CR3
1310:src/stm32f1xx_hal_irda.c ****     {
 1500              		.loc 1 1310 0
 1501 05b8 C06A     		ldr	r0, [r0, #44]	@ _17, hirda_4(D)->hdmatx
 1502              	.LVL124:
1307:src/stm32f1xx_hal_irda.c **** 
 1503              		.loc 1 1307 0
 1504 05ba 22F08002 		bic	r2, r2, #128	@ _15, _14,
 1505 05be 5A61     		str	r2, [r3, #20]	@ _15, _5->CR3
1310:src/stm32f1xx_hal_irda.c ****     {
 1506              		.loc 1 1310 0
 1507 05c0 18B1     		cbz	r0, .L117	@ _17,
1314:src/stm32f1xx_hal_irda.c **** 
 1508              		.loc 1 1314 0
 1509 05c2 0023     		movs	r3, #0	@ tmp129,
 1510 05c4 4363     		str	r3, [r0, #52]	@ tmp129, _17->XferAbortCallback
1316:src/stm32f1xx_hal_irda.c ****     }
 1511              		.loc 1 1316 0
 1512 05c6 FFF7FEFF 		bl	HAL_DMA_Abort	@
 1513              	.LVL125:
 1514              	.L117:
1321:src/stm32f1xx_hal_irda.c ****   {
 1515              		.loc 1 1321 0
 1516 05ca 2368     		ldr	r3, [r4]	@ _20, hirda_4(D)->Instance
 1517 05cc 5A69     		ldr	r2, [r3, #20]	@ _21, _20->CR3
 1518 05ce 5206     		lsls	r2, r2, #25	@, _21,
 1519 05d0 09D5     		bpl	.L120	@,
1323:src/stm32f1xx_hal_irda.c **** 
 1520              		.loc 1 1323 0
 1521 05d2 5A69     		ldr	r2, [r3, #20]	@ _23, _20->CR3
1326:src/stm32f1xx_hal_irda.c ****     {
 1522              		.loc 1 1326 0
 1523 05d4 206B     		ldr	r0, [r4, #48]	@ _26, hirda_4(D)->hdmarx
1323:src/stm32f1xx_hal_irda.c **** 
 1524              		.loc 1 1323 0
 1525 05d6 22F04002 		bic	r2, r2, #64	@ _24, _23,
 1526 05da 5A61     		str	r2, [r3, #20]	@ _24, _20->CR3
1326:src/stm32f1xx_hal_irda.c ****     {
 1527              		.loc 1 1326 0
 1528 05dc 18B1     		cbz	r0, .L120	@ _26,
1330:src/stm32f1xx_hal_irda.c **** 
 1529              		.loc 1 1330 0
 1530 05de 0023     		movs	r3, #0	@ tmp131,
 1531 05e0 4363     		str	r3, [r0, #52]	@ tmp131, _26->XferAbortCallback
1332:src/stm32f1xx_hal_irda.c ****     }
 1532              		.loc 1 1332 0
ARM GAS  /tmp/cc2ibVgV.s 			page 80


 1533 05e2 FFF7FEFF 		bl	HAL_DMA_Abort	@
 1534              	.LVL126:
 1535              	.L120:
1337:src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 1536              		.loc 1 1337 0
 1537 05e6 0020     		movs	r0, #0	@ tmp133,
1344:src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 1538              		.loc 1 1344 0
 1539 05e8 2023     		movs	r3, #32	@ tmp137,
1337:src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 1540              		.loc 1 1337 0
 1541 05ea 6084     		strh	r0, [r4, #34]	@ movhi	@ tmp133, hirda_4(D)->TxXferCount
1338:src/stm32f1xx_hal_irda.c **** 
 1542              		.loc 1 1338 0
 1543 05ec 6085     		strh	r0, [r4, #42]	@ movhi	@ tmp133, hirda_4(D)->RxXferCount
1341:src/stm32f1xx_hal_irda.c **** 
 1544              		.loc 1 1341 0
 1545 05ee A063     		str	r0, [r4, #56]	@ tmp133, hirda_4(D)->ErrorCode
1344:src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 1546              		.loc 1 1344 0
 1547 05f0 84F83630 		strb	r3, [r4, #54]	@ tmp137, hirda_4(D)->RxState
1345:src/stm32f1xx_hal_irda.c **** 
 1548              		.loc 1 1345 0
 1549 05f4 84F83530 		strb	r3, [r4, #53]	@ tmp137, hirda_4(D)->gState
1348:src/stm32f1xx_hal_irda.c **** 
 1550              		.loc 1 1348 0
 1551 05f8 10BD     		pop	{r4, pc}	@
 1552              		.cfi_endproc
 1553              	.LFE78:
 1554              		.size	HAL_IRDA_Abort, .-HAL_IRDA_Abort
 1555              		.align	1
 1556              		.global	HAL_IRDA_AbortTransmit
 1557              		.syntax unified
 1558              		.thumb
 1559              		.thumb_func
 1560              		.fpu softvfp
 1561              		.type	HAL_IRDA_AbortTransmit, %function
 1562              	HAL_IRDA_AbortTransmit:
 1563              	.LFB79:
1363:src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 1564              		.loc 1 1363 0
 1565              		.cfi_startproc
 1566              		@ args = 0, pretend = 0, frame = 0
 1567              		@ frame_needed = 0, uses_anonymous_args = 0
 1568              	.LVL127:
1365:src/stm32f1xx_hal_irda.c **** 
 1569              		.loc 1 1365 0
 1570 05fa 0368     		ldr	r3, [r0]	@ _4, hirda_3(D)->Instance
1363:src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 1571              		.loc 1 1363 0
 1572 05fc 10B5     		push	{r4, lr}	@
 1573              	.LCFI14:
 1574              		.cfi_def_cfa_offset 8
 1575              		.cfi_offset 4, -8
 1576              		.cfi_offset 14, -4
1365:src/stm32f1xx_hal_irda.c **** 
 1577              		.loc 1 1365 0
ARM GAS  /tmp/cc2ibVgV.s 			page 81


 1578 05fe DA68     		ldr	r2, [r3, #12]	@ _5, _4->CR1
1363:src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 1579              		.loc 1 1363 0
 1580 0600 0446     		mov	r4, r0	@ hirda, hirda
1365:src/stm32f1xx_hal_irda.c **** 
 1581              		.loc 1 1365 0
 1582 0602 22F0C002 		bic	r2, r2, #192	@ _6, _5,
 1583 0606 DA60     		str	r2, [r3, #12]	@ _6, _4->CR1
1368:src/stm32f1xx_hal_irda.c ****   {
 1584              		.loc 1 1368 0
 1585 0608 5A69     		ldr	r2, [r3, #20]	@ _8, _4->CR3
 1586 060a 1206     		lsls	r2, r2, #24	@, _8,
 1587 060c 09D5     		bpl	.L130	@,
1370:src/stm32f1xx_hal_irda.c **** 
 1588              		.loc 1 1370 0
 1589 060e 5A69     		ldr	r2, [r3, #20]	@ _10, _4->CR3
1373:src/stm32f1xx_hal_irda.c ****     {
 1590              		.loc 1 1373 0
 1591 0610 C06A     		ldr	r0, [r0, #44]	@ _13, hirda_3(D)->hdmatx
 1592              	.LVL128:
1370:src/stm32f1xx_hal_irda.c **** 
 1593              		.loc 1 1370 0
 1594 0612 22F08002 		bic	r2, r2, #128	@ _11, _10,
 1595 0616 5A61     		str	r2, [r3, #20]	@ _11, _4->CR3
1373:src/stm32f1xx_hal_irda.c ****     {
 1596              		.loc 1 1373 0
 1597 0618 18B1     		cbz	r0, .L130	@ _13,
1377:src/stm32f1xx_hal_irda.c **** 
 1598              		.loc 1 1377 0
 1599 061a 0023     		movs	r3, #0	@ tmp121,
 1600 061c 4363     		str	r3, [r0, #52]	@ tmp121, _13->XferAbortCallback
1379:src/stm32f1xx_hal_irda.c ****     }
 1601              		.loc 1 1379 0
 1602 061e FFF7FEFF 		bl	HAL_DMA_Abort	@
 1603              	.LVL129:
 1604              	.L130:
1384:src/stm32f1xx_hal_irda.c **** 
 1605              		.loc 1 1384 0
 1606 0622 0020     		movs	r0, #0	@ tmp123,
1387:src/stm32f1xx_hal_irda.c **** 
 1607              		.loc 1 1387 0
 1608 0624 2023     		movs	r3, #32	@ tmp124,
1384:src/stm32f1xx_hal_irda.c **** 
 1609              		.loc 1 1384 0
 1610 0626 6084     		strh	r0, [r4, #34]	@ movhi	@ tmp123, hirda_3(D)->TxXferCount
1387:src/stm32f1xx_hal_irda.c **** 
 1611              		.loc 1 1387 0
 1612 0628 84F83530 		strb	r3, [r4, #53]	@ tmp124, hirda_3(D)->gState
1390:src/stm32f1xx_hal_irda.c **** 
 1613              		.loc 1 1390 0
 1614 062c 10BD     		pop	{r4, pc}	@
 1615              		.cfi_endproc
 1616              	.LFE79:
 1617              		.size	HAL_IRDA_AbortTransmit, .-HAL_IRDA_AbortTransmit
 1618              		.align	1
 1619              		.global	HAL_IRDA_AbortReceive
 1620              		.syntax unified
ARM GAS  /tmp/cc2ibVgV.s 			page 82


 1621              		.thumb
 1622              		.thumb_func
 1623              		.fpu softvfp
 1624              		.type	HAL_IRDA_AbortReceive, %function
 1625              	HAL_IRDA_AbortReceive:
 1626              	.LFB80:
1405:src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1627              		.loc 1 1405 0
 1628              		.cfi_startproc
 1629              		@ args = 0, pretend = 0, frame = 0
 1630              		@ frame_needed = 0, uses_anonymous_args = 0
 1631              	.LVL130:
1407:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1632              		.loc 1 1407 0
 1633 062e 0368     		ldr	r3, [r0]	@ _4, hirda_3(D)->Instance
1405:src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1634              		.loc 1 1405 0
 1635 0630 10B5     		push	{r4, lr}	@
 1636              	.LCFI15:
 1637              		.cfi_def_cfa_offset 8
 1638              		.cfi_offset 4, -8
 1639              		.cfi_offset 14, -4
1407:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1640              		.loc 1 1407 0
 1641 0632 DA68     		ldr	r2, [r3, #12]	@ _5, _4->CR1
1405:src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1642              		.loc 1 1405 0
 1643 0634 0446     		mov	r4, r0	@ hirda, hirda
1407:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1644              		.loc 1 1407 0
 1645 0636 22F49072 		bic	r2, r2, #288	@ _6, _5,
 1646 063a DA60     		str	r2, [r3, #12]	@ _6, _4->CR1
1408:src/stm32f1xx_hal_irda.c **** 
 1647              		.loc 1 1408 0
 1648 063c 5A69     		ldr	r2, [r3, #20]	@ _8, _4->CR3
 1649 063e 22F00102 		bic	r2, r2, #1	@ _9, _8,
 1650 0642 5A61     		str	r2, [r3, #20]	@ _9, _4->CR3
1411:src/stm32f1xx_hal_irda.c ****   {
 1651              		.loc 1 1411 0
 1652 0644 5A69     		ldr	r2, [r3, #20]	@ _11, _4->CR3
 1653 0646 5206     		lsls	r2, r2, #25	@, _11,
 1654 0648 09D5     		bpl	.L137	@,
1413:src/stm32f1xx_hal_irda.c **** 
 1655              		.loc 1 1413 0
 1656 064a 5A69     		ldr	r2, [r3, #20]	@ _13, _4->CR3
1416:src/stm32f1xx_hal_irda.c ****     {
 1657              		.loc 1 1416 0
 1658 064c 006B     		ldr	r0, [r0, #48]	@ _16, hirda_3(D)->hdmarx
 1659              	.LVL131:
1413:src/stm32f1xx_hal_irda.c **** 
 1660              		.loc 1 1413 0
 1661 064e 22F04002 		bic	r2, r2, #64	@ _14, _13,
 1662 0652 5A61     		str	r2, [r3, #20]	@ _14, _4->CR3
1416:src/stm32f1xx_hal_irda.c ****     {
 1663              		.loc 1 1416 0
 1664 0654 18B1     		cbz	r0, .L137	@ _16,
1420:src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/cc2ibVgV.s 			page 83


 1665              		.loc 1 1420 0
 1666 0656 0023     		movs	r3, #0	@ tmp123,
 1667 0658 4363     		str	r3, [r0, #52]	@ tmp123, _16->XferAbortCallback
1422:src/stm32f1xx_hal_irda.c ****     }
 1668              		.loc 1 1422 0
 1669 065a FFF7FEFF 		bl	HAL_DMA_Abort	@
 1670              	.LVL132:
 1671              	.L137:
1427:src/stm32f1xx_hal_irda.c **** 
 1672              		.loc 1 1427 0
 1673 065e 0020     		movs	r0, #0	@ tmp125,
1430:src/stm32f1xx_hal_irda.c **** 
 1674              		.loc 1 1430 0
 1675 0660 2023     		movs	r3, #32	@ tmp126,
1427:src/stm32f1xx_hal_irda.c **** 
 1676              		.loc 1 1427 0
 1677 0662 6085     		strh	r0, [r4, #42]	@ movhi	@ tmp125, hirda_3(D)->RxXferCount
1430:src/stm32f1xx_hal_irda.c **** 
 1678              		.loc 1 1430 0
 1679 0664 84F83630 		strb	r3, [r4, #54]	@ tmp126, hirda_3(D)->RxState
1433:src/stm32f1xx_hal_irda.c **** 
 1680              		.loc 1 1433 0
 1681 0668 10BD     		pop	{r4, pc}	@
 1682              		.cfi_endproc
 1683              	.LFE80:
 1684              		.size	HAL_IRDA_AbortReceive, .-HAL_IRDA_AbortReceive
 1685              		.align	1
 1686              		.weak	HAL_IRDA_TxCpltCallback
 1687              		.syntax unified
 1688              		.thumb
 1689              		.thumb_func
 1690              		.fpu softvfp
 1691              		.type	HAL_IRDA_TxCpltCallback, %function
 1692              	HAL_IRDA_TxCpltCallback:
 1693              	.LFB127:
 1694              		.cfi_startproc
 1695              		@ args = 0, pretend = 0, frame = 0
 1696              		@ frame_needed = 0, uses_anonymous_args = 0
 1697              		@ link register save eliminated.
 1698 066a 7047     		bx	lr	@
 1699              		.cfi_endproc
 1700              	.LFE127:
 1701              		.size	HAL_IRDA_TxCpltCallback, .-HAL_IRDA_TxCpltCallback
 1702              		.align	1
 1703              		.syntax unified
 1704              		.thumb
 1705              		.thumb_func
 1706              		.fpu softvfp
 1707              		.type	IRDA_DMATransmitCplt, %function
 1708              	IRDA_DMATransmitCplt:
 1709              	.LFB95:
2078:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 1710              		.loc 1 2078 0
 1711              		.cfi_startproc
 1712              		@ args = 0, pretend = 0, frame = 0
 1713              		@ frame_needed = 0, uses_anonymous_args = 0
 1714              	.LVL133:
ARM GAS  /tmp/cc2ibVgV.s 			page 84


2078:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 1715              		.loc 1 2078 0
 1716 066c 08B5     		push	{r3, lr}	@
 1717              	.LCFI16:
 1718              		.cfi_def_cfa_offset 8
 1719              		.cfi_offset 3, -8
 1720              		.cfi_offset 14, -4
2081:src/stm32f1xx_hal_irda.c ****   {
 1721              		.loc 1 2081 0
 1722 066e 0368     		ldr	r3, [r0]	@ _5, hdma_3(D)->Instance
2079:src/stm32f1xx_hal_irda.c ****   /* DMA Normal mode */
 1723              		.loc 1 2079 0
 1724 0670 426A     		ldr	r2, [r0, #36]	@ hirda, hdma_3(D)->Parent
 1725              	.LVL134:
2081:src/stm32f1xx_hal_irda.c ****   {
 1726              		.loc 1 2081 0
 1727 0672 1B68     		ldr	r3, [r3]	@ _6, _5->CCR
 1728 0674 13F02003 		ands	r3, r3, #32	@ tmp120, _6,
 1729 0678 0AD1     		bne	.L144	@,
2083:src/stm32f1xx_hal_irda.c **** 
 1730              		.loc 1 2083 0
 1731 067a 5384     		strh	r3, [r2, #34]	@ movhi	@ tmp120, hirda_4->TxXferCount
2087:src/stm32f1xx_hal_irda.c **** 
 1732              		.loc 1 2087 0
 1733 067c 1368     		ldr	r3, [r2]	@ _9, hirda_4->Instance
 1734 067e 5A69     		ldr	r2, [r3, #20]	@ _10, _9->CR3
 1735              	.LVL135:
 1736 0680 22F08002 		bic	r2, r2, #128	@ _11, _10,
 1737 0684 5A61     		str	r2, [r3, #20]	@ _11, _9->CR3
2090:src/stm32f1xx_hal_irda.c ****   }
 1738              		.loc 1 2090 0
 1739 0686 DA68     		ldr	r2, [r3, #12]	@ _13, _9->CR1
 1740 0688 42F04002 		orr	r2, r2, #64	@ _14, _13,
 1741 068c DA60     		str	r2, [r3, #12]	@ _14, _9->CR1
 1742 068e 08BD     		pop	{r3, pc}	@
 1743              	.LVL136:
 1744              	.L144:
2100:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 1745              		.loc 1 2100 0
 1746 0690 1046     		mov	r0, r2	@, hirda
 1747              	.LVL137:
 1748 0692 FFF7FEFF 		bl	HAL_IRDA_TxCpltCallback	@
 1749              	.LVL138:
 1750 0696 08BD     		pop	{r3, pc}	@
 1751              		.cfi_endproc
 1752              	.LFE95:
 1753              		.size	IRDA_DMATransmitCplt, .-IRDA_DMATransmitCplt
 1754              		.align	1
 1755              		.weak	HAL_IRDA_TxHalfCpltCallback
 1756              		.syntax unified
 1757              		.thumb
 1758              		.thumb_func
 1759              		.fpu softvfp
 1760              		.type	HAL_IRDA_TxHalfCpltCallback, %function
 1761              	HAL_IRDA_TxHalfCpltCallback:
 1762              	.LFB125:
 1763              		.cfi_startproc
ARM GAS  /tmp/cc2ibVgV.s 			page 85


 1764              		@ args = 0, pretend = 0, frame = 0
 1765              		@ frame_needed = 0, uses_anonymous_args = 0
 1766              		@ link register save eliminated.
 1767 0698 7047     		bx	lr	@
 1768              		.cfi_endproc
 1769              	.LFE125:
 1770              		.size	HAL_IRDA_TxHalfCpltCallback, .-HAL_IRDA_TxHalfCpltCallback
 1771              		.align	1
 1772              		.syntax unified
 1773              		.thumb
 1774              		.thumb_func
 1775              		.fpu softvfp
 1776              		.type	IRDA_DMATransmitHalfCplt, %function
 1777              	IRDA_DMATransmitHalfCplt:
 1778              	.LFB96:
2112:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 1779              		.loc 1 2112 0
 1780              		.cfi_startproc
 1781              		@ args = 0, pretend = 0, frame = 0
 1782              		@ frame_needed = 0, uses_anonymous_args = 0
 1783              	.LVL139:
2112:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 1784              		.loc 1 2112 0
 1785 069a 08B5     		push	{r3, lr}	@
 1786              	.LCFI17:
 1787              		.cfi_def_cfa_offset 8
 1788              		.cfi_offset 3, -8
 1789              		.cfi_offset 14, -4
2120:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 1790              		.loc 1 2120 0
 1791 069c 406A     		ldr	r0, [r0, #36]	@, hdma_2(D)->Parent
 1792              	.LVL140:
 1793 069e FFF7FEFF 		bl	HAL_IRDA_TxHalfCpltCallback	@
 1794              	.LVL141:
 1795 06a2 08BD     		pop	{r3, pc}	@
 1796              		.cfi_endproc
 1797              	.LFE96:
 1798              		.size	IRDA_DMATransmitHalfCplt, .-IRDA_DMATransmitHalfCplt
 1799              		.align	1
 1800              		.weak	HAL_IRDA_RxCpltCallback
 1801              		.syntax unified
 1802              		.thumb
 1803              		.thumb_func
 1804              		.fpu softvfp
 1805              		.type	HAL_IRDA_RxCpltCallback, %function
 1806              	HAL_IRDA_RxCpltCallback:
 1807              	.LFB123:
 1808              		.cfi_startproc
 1809              		@ args = 0, pretend = 0, frame = 0
 1810              		@ frame_needed = 0, uses_anonymous_args = 0
 1811              		@ link register save eliminated.
 1812 06a4 7047     		bx	lr	@
 1813              		.cfi_endproc
 1814              	.LFE123:
 1815              		.size	HAL_IRDA_RxCpltCallback, .-HAL_IRDA_RxCpltCallback
 1816              		.align	1
 1817              		.syntax unified
ARM GAS  /tmp/cc2ibVgV.s 			page 86


 1818              		.thumb
 1819              		.thumb_func
 1820              		.fpu softvfp
 1821              		.type	IRDA_DMAReceiveCplt, %function
 1822              	IRDA_DMAReceiveCplt:
 1823              	.LFB97:
2131:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 1824              		.loc 1 2131 0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 0
 1827              		@ frame_needed = 0, uses_anonymous_args = 0
 1828              	.LVL142:
2131:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 1829              		.loc 1 2131 0
 1830 06a6 08B5     		push	{r3, lr}	@
 1831              	.LCFI18:
 1832              		.cfi_def_cfa_offset 8
 1833              		.cfi_offset 3, -8
 1834              		.cfi_offset 14, -4
2135:src/stm32f1xx_hal_irda.c ****   {
 1835              		.loc 1 2135 0
 1836 06a8 0368     		ldr	r3, [r0]	@ _5, hdma_3(D)->Instance
2132:src/stm32f1xx_hal_irda.c **** 
 1837              		.loc 1 2132 0
 1838 06aa 426A     		ldr	r2, [r0, #36]	@ hirda, hdma_3(D)->Parent
 1839              	.LVL143:
2135:src/stm32f1xx_hal_irda.c ****   {
 1840              		.loc 1 2135 0
 1841 06ac 1B68     		ldr	r3, [r3]	@ _6, _5->CCR
 1842 06ae 13F02003 		ands	r3, r3, #32	@ tmp122, _6,
 1843 06b2 10D1     		bne	.L150	@,
2137:src/stm32f1xx_hal_irda.c **** 
 1844              		.loc 1 2137 0
 1845 06b4 5385     		strh	r3, [r2, #42]	@ movhi	@ tmp122, hirda_4->RxXferCount
2140:src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1846              		.loc 1 2140 0
 1847 06b6 1368     		ldr	r3, [r2]	@ _9, hirda_4->Instance
 1848 06b8 D968     		ldr	r1, [r3, #12]	@ _10, _9->CR1
 1849 06ba 21F48071 		bic	r1, r1, #256	@ _11, _10,
 1850 06be D960     		str	r1, [r3, #12]	@ _11, _9->CR1
2141:src/stm32f1xx_hal_irda.c **** 
 1851              		.loc 1 2141 0
 1852 06c0 5969     		ldr	r1, [r3, #20]	@ _13, _9->CR3
 1853 06c2 21F00101 		bic	r1, r1, #1	@ _14, _13,
 1854 06c6 5961     		str	r1, [r3, #20]	@ _14, _9->CR3
2145:src/stm32f1xx_hal_irda.c **** 
 1855              		.loc 1 2145 0
 1856 06c8 5969     		ldr	r1, [r3, #20]	@ _16, _9->CR3
 1857 06ca 21F04001 		bic	r1, r1, #64	@ _17, _16,
 1858 06ce 5961     		str	r1, [r3, #20]	@ _17, _9->CR3
2148:src/stm32f1xx_hal_irda.c ****   }
 1859              		.loc 1 2148 0
 1860 06d0 2023     		movs	r3, #32	@ tmp125,
 1861 06d2 82F83630 		strb	r3, [r2, #54]	@ tmp125, hirda_4->RxState
 1862              	.L150:
2156:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 1863              		.loc 1 2156 0
ARM GAS  /tmp/cc2ibVgV.s 			page 87


 1864 06d6 1046     		mov	r0, r2	@, hirda
 1865              	.LVL144:
 1866 06d8 FFF7FEFF 		bl	HAL_IRDA_RxCpltCallback	@
 1867              	.LVL145:
 1868 06dc 08BD     		pop	{r3, pc}	@
 1869              		.cfi_endproc
 1870              	.LFE97:
 1871              		.size	IRDA_DMAReceiveCplt, .-IRDA_DMAReceiveCplt
 1872              		.align	1
 1873              		.syntax unified
 1874              		.thumb
 1875              		.thumb_func
 1876              		.fpu softvfp
 1877              		.type	IRDA_Receive_IT, %function
 1878              	IRDA_Receive_IT:
 1879              	.LFB110:
2529:src/stm32f1xx_hal_irda.c ****   uint16_t *tmp;
 1880              		.loc 1 2529 0
 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 0
 1883              		@ frame_needed = 0, uses_anonymous_args = 0
 1884              	.LVL146:
2534:src/stm32f1xx_hal_irda.c ****   {
 1885              		.loc 1 2534 0
 1886 06de 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2	@ hirda_3(D)->RxState, hirda_3(D)->RxState
2529:src/stm32f1xx_hal_irda.c ****   uint16_t *tmp;
 1887              		.loc 1 2529 0
 1888 06e2 10B5     		push	{r4, lr}	@
 1889              	.LCFI19:
 1890              		.cfi_def_cfa_offset 8
 1891              		.cfi_offset 4, -8
 1892              		.cfi_offset 14, -4
2534:src/stm32f1xx_hal_irda.c ****   {
 1893              		.loc 1 2534 0
 1894 06e4 222B     		cmp	r3, #34	@ hirda_3(D)->RxState,
 1895 06e6 35D1     		bne	.L157	@,
 1896              	.LVL147:
 1897              	.LBB23:
 1898              	.LBB24:
2536:src/stm32f1xx_hal_irda.c ****     if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 1899              		.loc 1 2536 0
 1900 06e8 0368     		ldr	r3, [r0]	@ _8, hirda_3(D)->Instance
 1901 06ea C168     		ldr	r1, [r0, #12]	@ hirda_3(D)->Init.Parity, hirda_3(D)->Init.Parity
 1902 06ec 5A68     		ldr	r2, [r3, #4]	@ _9, _8->DR
 1903              	.LVL148:
2537:src/stm32f1xx_hal_irda.c ****     {
 1904              		.loc 1 2537 0
 1905 06ee 8368     		ldr	r3, [r0, #8]	@ hirda_3(D)->Init.WordLength, hirda_3(D)->Init.WordLength
 1906 06f0 B3F5805F 		cmp	r3, #4096	@ hirda_3(D)->Init.WordLength,
 1907 06f4 436A     		ldr	r3, [r0, #36]	@ tmp, hirda_3(D)->pRxBuffPtr
 1908 06f6 23D1     		bne	.L153	@,
2536:src/stm32f1xx_hal_irda.c ****     if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 1909              		.loc 1 2536 0
 1910 06f8 92B2     		uxth	r2, r2	@ uhdata, _9
 1911              	.LVL149:
2540:src/stm32f1xx_hal_irda.c ****       {
 1912              		.loc 1 2540 0
ARM GAS  /tmp/cc2ibVgV.s 			page 88


 1913 06fa E9B9     		cbnz	r1, .L154	@ hirda_3(D)->Init.Parity,
2542:src/stm32f1xx_hal_irda.c ****         hirda->pRxBuffPtr += 2U;
 1914              		.loc 1 2542 0
 1915 06fc C2F30802 		ubfx	r2, r2, #0, #9	@ tmp145, uhdata,,
 1916              	.LVL150:
 1917 0700 23F8022B 		strh	r2, [r3], #2	@ movhi	@ tmp145, *tmp_12
 1918              	.LVL151:
 1919              	.L159:
2548:src/stm32f1xx_hal_irda.c ****       }
 1920              		.loc 1 2548 0
 1921 0704 4362     		str	r3, [r0, #36]	@ tmp151, hirda_3(D)->pRxBuffPtr
 1922              	.LVL152:
 1923              	.L155:
2563:src/stm32f1xx_hal_irda.c ****     {
 1924              		.loc 1 2563 0
 1925 0706 448D     		ldrh	r4, [r0, #42]	@, hirda_3(D)->RxXferCount
 1926 0708 013C     		subs	r4, r4, #1	@ tmp161, hirda_3(D)->RxXferCount,
 1927 070a A4B2     		uxth	r4, r4	@ _27, tmp161
 1928 070c 4485     		strh	r4, [r0, #42]	@ movhi	@ _27, hirda_3(D)->RxXferCount
 1929 070e 8CB9     		cbnz	r4, .L158	@ _27,
2566:src/stm32f1xx_hal_irda.c **** 
 1930              		.loc 1 2566 0
 1931 0710 0368     		ldr	r3, [r0]	@ _28, hirda_3(D)->Instance
 1932 0712 DA68     		ldr	r2, [r3, #12]	@ _29, _28->CR1
 1933 0714 22F02002 		bic	r2, r2, #32	@ _30, _29,
 1934 0718 DA60     		str	r2, [r3, #12]	@ _30, _28->CR1
2569:src/stm32f1xx_hal_irda.c **** 
 1935              		.loc 1 2569 0
 1936 071a DA68     		ldr	r2, [r3, #12]	@ _31, _28->CR1
 1937 071c 22F48072 		bic	r2, r2, #256	@ _32, _31,
 1938 0720 DA60     		str	r2, [r3, #12]	@ _32, _28->CR1
2572:src/stm32f1xx_hal_irda.c **** 
 1939              		.loc 1 2572 0
 1940 0722 5A69     		ldr	r2, [r3, #20]	@ _33, _28->CR3
 1941 0724 22F00102 		bic	r2, r2, #1	@ _34, _33,
 1942 0728 5A61     		str	r2, [r3, #20]	@ _34, _28->CR3
2575:src/stm32f1xx_hal_irda.c **** 
 1943              		.loc 1 2575 0
 1944 072a 2023     		movs	r3, #32	@ tmp163,
 1945 072c 80F83630 		strb	r3, [r0, #54]	@ tmp163, hirda_3(D)->RxState
2582:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 1946              		.loc 1 2582 0
 1947 0730 FFF7FEFF 		bl	HAL_IRDA_RxCpltCallback	@
 1948              	.LVL153:
 1949              	.L158:
2563:src/stm32f1xx_hal_irda.c ****     {
 1950              		.loc 1 2563 0
 1951 0734 0020     		movs	r0, #0	@ <retval>,
 1952              	.LBE24:
 1953              	.LBE23:
2593:src/stm32f1xx_hal_irda.c **** 
 1954              		.loc 1 2593 0
 1955 0736 10BD     		pop	{r4, pc}	@
 1956              	.LVL154:
 1957              	.L154:
 1958              	.LBB26:
 1959              	.LBB25:
ARM GAS  /tmp/cc2ibVgV.s 			page 89


2547:src/stm32f1xx_hal_irda.c ****         hirda->pRxBuffPtr += 1U;
 1960              		.loc 1 2547 0
 1961 0738 D2B2     		uxtb	r2, r2	@ uhdata, uhdata
 1962              	.LVL155:
 1963 073a 23F8012B 		strh	r2, [r3], #1	@ movhi	@ uhdata, *tmp_12
 1964              	.LVL156:
 1965 073e E1E7     		b	.L159	@
 1966              	.LVL157:
 1967              	.L153:
2553:src/stm32f1xx_hal_irda.c ****       {
 1968              		.loc 1 2553 0
 1969 0740 19B9     		cbnz	r1, .L156	@ hirda_3(D)->Init.Parity,
2555:src/stm32f1xx_hal_irda.c ****       }
 1970              		.loc 1 2555 0
 1971 0742 591C     		adds	r1, r3, #1	@ tmp153, tmp,
 1972 0744 4162     		str	r1, [r0, #36]	@ tmp153, hirda_3(D)->pRxBuffPtr
 1973              	.LVL158:
 1974              	.L160:
2559:src/stm32f1xx_hal_irda.c ****       }
 1975              		.loc 1 2559 0
 1976 0746 1A70     		strb	r2, [r3]	@ tmp157,* tmp
 1977 0748 DDE7     		b	.L155	@
 1978              	.LVL159:
 1979              	.L156:
 1980 074a 591C     		adds	r1, r3, #1	@ tmp155, tmp,
 1981 074c 4162     		str	r1, [r0, #36]	@ tmp155, hirda_3(D)->pRxBuffPtr
 1982 074e 02F07F02 		and	r2, r2, #127	@ tmp157, _9,
 1983              	.LVL160:
 1984 0752 F8E7     		b	.L160	@
 1985              	.LVL161:
 1986              	.L157:
 1987              	.LBE25:
 1988              	.LBE26:
2591:src/stm32f1xx_hal_irda.c ****   }
 1989              		.loc 1 2591 0
 1990 0754 0220     		movs	r0, #2	@ <retval>,
 1991              	.LVL162:
 1992 0756 10BD     		pop	{r4, pc}	@
 1993              		.cfi_endproc
 1994              	.LFE110:
 1995              		.size	IRDA_Receive_IT, .-IRDA_Receive_IT
 1996              		.align	1
 1997              		.weak	HAL_IRDA_RxHalfCpltCallback
 1998              		.syntax unified
 1999              		.thumb
 2000              		.thumb_func
 2001              		.fpu softvfp
 2002              		.type	HAL_IRDA_RxHalfCpltCallback, %function
 2003              	HAL_IRDA_RxHalfCpltCallback:
 2004              	.LFB121:
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 0
 2007              		@ frame_needed = 0, uses_anonymous_args = 0
 2008              		@ link register save eliminated.
 2009 0758 7047     		bx	lr	@
 2010              		.cfi_endproc
 2011              	.LFE121:
ARM GAS  /tmp/cc2ibVgV.s 			page 90


 2012              		.size	HAL_IRDA_RxHalfCpltCallback, .-HAL_IRDA_RxHalfCpltCallback
 2013              		.align	1
 2014              		.syntax unified
 2015              		.thumb
 2016              		.thumb_func
 2017              		.fpu softvfp
 2018              		.type	IRDA_DMAReceiveHalfCplt, %function
 2019              	IRDA_DMAReceiveHalfCplt:
 2020              	.LFB98:
2167:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2021              		.loc 1 2167 0
 2022              		.cfi_startproc
 2023              		@ args = 0, pretend = 0, frame = 0
 2024              		@ frame_needed = 0, uses_anonymous_args = 0
 2025              	.LVL163:
2167:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2026              		.loc 1 2167 0
 2027 075a 08B5     		push	{r3, lr}	@
 2028              	.LCFI20:
 2029              		.cfi_def_cfa_offset 8
 2030              		.cfi_offset 3, -8
 2031              		.cfi_offset 14, -4
2175:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2032              		.loc 1 2175 0
 2033 075c 406A     		ldr	r0, [r0, #36]	@, hdma_2(D)->Parent
 2034              	.LVL164:
 2035 075e FFF7FEFF 		bl	HAL_IRDA_RxHalfCpltCallback	@
 2036              	.LVL165:
 2037 0762 08BD     		pop	{r3, pc}	@
 2038              		.cfi_endproc
 2039              	.LFE98:
 2040              		.size	IRDA_DMAReceiveHalfCplt, .-IRDA_DMAReceiveHalfCplt
 2041              		.align	1
 2042              		.weak	HAL_IRDA_ErrorCallback
 2043              		.syntax unified
 2044              		.thumb
 2045              		.thumb_func
 2046              		.fpu softvfp
 2047              		.type	HAL_IRDA_ErrorCallback, %function
 2048              	HAL_IRDA_ErrorCallback:
 2049              	.LFB119:
 2050              		.cfi_startproc
 2051              		@ args = 0, pretend = 0, frame = 0
 2052              		@ frame_needed = 0, uses_anonymous_args = 0
 2053              		@ link register save eliminated.
 2054 0764 7047     		bx	lr	@
 2055              		.cfi_endproc
 2056              	.LFE119:
 2057              		.size	HAL_IRDA_ErrorCallback, .-HAL_IRDA_ErrorCallback
 2058              		.align	1
 2059              		.syntax unified
 2060              		.thumb
 2061              		.thumb_func
 2062              		.fpu softvfp
 2063              		.type	IRDA_DMAError, %function
 2064              	IRDA_DMAError:
 2065              	.LFB99:
ARM GAS  /tmp/cc2ibVgV.s 			page 91


2186:src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 2066              		.loc 1 2186 0
 2067              		.cfi_startproc
 2068              		@ args = 0, pretend = 0, frame = 0
 2069              		@ frame_needed = 0, uses_anonymous_args = 0
 2070              	.LVL166:
2188:src/stm32f1xx_hal_irda.c **** 
 2071              		.loc 1 2188 0
 2072 0766 416A     		ldr	r1, [r0, #36]	@ hirda, hdma_4(D)->Parent
 2073              	.LVL167:
2186:src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 2074              		.loc 1 2186 0
 2075 0768 08B5     		push	{r3, lr}	@
 2076              	.LCFI21:
 2077              		.cfi_def_cfa_offset 8
 2078              		.cfi_offset 3, -8
 2079              		.cfi_offset 14, -4
2191:src/stm32f1xx_hal_irda.c ****   if ((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 2080              		.loc 1 2191 0
 2081 076a 0B68     		ldr	r3, [r1]	@ _6, hirda_5->Instance
 2082 076c 5A69     		ldr	r2, [r3, #20]	@ _7, _6->CR3
 2083              	.LVL168:
2192:src/stm32f1xx_hal_irda.c ****   {
 2084              		.loc 1 2192 0
 2085 076e 91F83500 		ldrb	r0, [r1, #53]	@ zero_extendqisi2	@ hirda_5->gState, hirda_5->gState
 2086              	.LVL169:
 2087 0772 2128     		cmp	r0, #33	@ hirda_5->gState,
 2088 0774 0AD1     		bne	.L165	@,
2192:src/stm32f1xx_hal_irda.c ****   {
 2089              		.loc 1 2192 0 is_stmt 0 discriminator 1
 2090 0776 1206     		lsls	r2, r2, #24	@, _7,
 2091              	.LVL170:
 2092 0778 08D5     		bpl	.L165	@,
2194:src/stm32f1xx_hal_irda.c ****     IRDA_EndTxTransfer(hirda);
 2093              		.loc 1 2194 0 is_stmt 1
 2094 077a 0022     		movs	r2, #0	@ tmp128,
 2095 077c 4A84     		strh	r2, [r1, #34]	@ movhi	@ tmp128, hirda_5->TxXferCount
 2096              	.LVL171:
 2097              	.LBB29:
 2098              	.LBB30:
2262:src/stm32f1xx_hal_irda.c **** 
 2099              		.loc 1 2262 0
 2100 077e DA68     		ldr	r2, [r3, #12]	@ _23, _6->CR1
 2101 0780 22F0C002 		bic	r2, r2, #192	@ _24, _23,
 2102 0784 DA60     		str	r2, [r3, #12]	@ _24, _6->CR1
2265:src/stm32f1xx_hal_irda.c **** }
 2103              		.loc 1 2265 0
 2104 0786 2022     		movs	r2, #32	@ tmp129,
 2105 0788 81F83520 		strb	r2, [r1, #53]	@ tmp129, hirda_5->gState
 2106              	.LVL172:
 2107              	.L165:
 2108              	.LBE30:
 2109              	.LBE29:
2199:src/stm32f1xx_hal_irda.c ****   if ((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 2110              		.loc 1 2199 0
 2111 078c 5B69     		ldr	r3, [r3, #20]	@ _13, _6->CR3
 2112              	.LVL173:
ARM GAS  /tmp/cc2ibVgV.s 			page 92


2200:src/stm32f1xx_hal_irda.c ****   {
 2113              		.loc 1 2200 0
 2114 078e 91F83620 		ldrb	r2, [r1, #54]	@ zero_extendqisi2	@ hirda_5->RxState, hirda_5->RxState
 2115 0792 222A     		cmp	r2, #34	@ hirda_5->RxState,
 2116 0794 06D1     		bne	.L166	@,
2200:src/stm32f1xx_hal_irda.c ****   {
 2117              		.loc 1 2200 0 is_stmt 0 discriminator 1
 2118 0796 5B06     		lsls	r3, r3, #25	@, _13,
 2119              	.LVL174:
 2120 0798 04D5     		bpl	.L166	@,
2202:src/stm32f1xx_hal_irda.c ****     IRDA_EndRxTransfer(hirda);
 2121              		.loc 1 2202 0 is_stmt 1
 2122 079a 0023     		movs	r3, #0	@ tmp136,
2203:src/stm32f1xx_hal_irda.c ****   }
 2123              		.loc 1 2203 0
 2124 079c 0846     		mov	r0, r1	@, hirda
2202:src/stm32f1xx_hal_irda.c ****     IRDA_EndRxTransfer(hirda);
 2125              		.loc 1 2202 0
 2126 079e 4B85     		strh	r3, [r1, #42]	@ movhi	@ tmp136, hirda_5->RxXferCount
2203:src/stm32f1xx_hal_irda.c ****   }
 2127              		.loc 1 2203 0
 2128 07a0 FFF72EFC 		bl	IRDA_EndRxTransfer	@
 2129              	.LVL175:
 2130              	.L166:
2206:src/stm32f1xx_hal_irda.c **** 
 2131              		.loc 1 2206 0
 2132 07a4 8B6B     		ldr	r3, [r1, #56]	@ _18, hirda_5->ErrorCode
2213:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2133              		.loc 1 2213 0
 2134 07a6 0846     		mov	r0, r1	@, hirda
2206:src/stm32f1xx_hal_irda.c **** 
 2135              		.loc 1 2206 0
 2136 07a8 43F01003 		orr	r3, r3, #16	@ _19, _18,
 2137 07ac 8B63     		str	r3, [r1, #56]	@ _19, hirda_5->ErrorCode
2213:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2138              		.loc 1 2213 0
 2139 07ae FFF7FEFF 		bl	HAL_IRDA_ErrorCallback	@
 2140              	.LVL176:
 2141 07b2 08BD     		pop	{r3, pc}	@
 2142              		.cfi_endproc
 2143              	.LFE99:
 2144              		.size	IRDA_DMAError, .-IRDA_DMAError
 2145              		.align	1
 2146              		.global	HAL_IRDA_IRQHandler
 2147              		.syntax unified
 2148              		.thumb
 2149              		.thumb_func
 2150              		.fpu softvfp
 2151              		.type	HAL_IRDA_IRQHandler, %function
 2152              	HAL_IRDA_IRQHandler:
 2153              	.LFB84:
1725:src/stm32f1xx_hal_irda.c ****   uint32_t isrflags   = READ_REG(hirda->Instance->SR);
 2154              		.loc 1 1725 0
 2155              		.cfi_startproc
 2156              		@ args = 0, pretend = 0, frame = 0
 2157              		@ frame_needed = 0, uses_anonymous_args = 0
 2158              	.LVL177:
ARM GAS  /tmp/cc2ibVgV.s 			page 93


1726:src/stm32f1xx_hal_irda.c ****   uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
 2159              		.loc 1 1726 0
 2160 07b4 0368     		ldr	r3, [r0]	@ _9, hirda_8(D)->Instance
1725:src/stm32f1xx_hal_irda.c ****   uint32_t isrflags   = READ_REG(hirda->Instance->SR);
 2161              		.loc 1 1725 0
 2162 07b6 70B5     		push	{r4, r5, r6, lr}	@
 2163              	.LCFI22:
 2164              		.cfi_def_cfa_offset 16
 2165              		.cfi_offset 4, -16
 2166              		.cfi_offset 5, -12
 2167              		.cfi_offset 6, -8
 2168              		.cfi_offset 14, -4
1726:src/stm32f1xx_hal_irda.c ****   uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
 2169              		.loc 1 1726 0
 2170 07b8 1A68     		ldr	r2, [r3]	@ isrflags, _9->SR
 2171              	.LVL178:
1725:src/stm32f1xx_hal_irda.c ****   uint32_t isrflags   = READ_REG(hirda->Instance->SR);
 2172              		.loc 1 1725 0
 2173 07ba 0446     		mov	r4, r0	@ hirda, hirda
1734:src/stm32f1xx_hal_irda.c ****   {
 2174              		.loc 1 1734 0
 2175 07bc 1607     		lsls	r6, r2, #28	@, isrflags,
1727:src/stm32f1xx_hal_irda.c ****   uint32_t cr3its     = READ_REG(hirda->Instance->CR3);
 2176              		.loc 1 1727 0
 2177 07be D968     		ldr	r1, [r3, #12]	@ cr1its, _9->CR1
 2178              	.LVL179:
1728:src/stm32f1xx_hal_irda.c ****   uint32_t errorflags = 0x00U;
 2179              		.loc 1 1728 0
 2180 07c0 5D69     		ldr	r5, [r3, #20]	@ cr3its, _9->CR3
 2181              	.LVL180:
1734:src/stm32f1xx_hal_irda.c ****   {
 2182              		.loc 1 1734 0
 2183 07c2 06D1     		bne	.L174	@,
1737:src/stm32f1xx_hal_irda.c ****     {
 2184              		.loc 1 1737 0
 2185 07c4 9606     		lsls	r6, r2, #26	@, isrflags,
 2186 07c6 59D5     		bpl	.L175	@,
1737:src/stm32f1xx_hal_irda.c ****     {
 2187              		.loc 1 1737 0 is_stmt 0 discriminator 1
 2188 07c8 8D06     		lsls	r5, r1, #26	@, cr1its,
 2189              	.LVL181:
 2190 07ca 57D5     		bpl	.L175	@,
1861:src/stm32f1xx_hal_irda.c **** 
 2191              		.loc 1 1861 0 is_stmt 1
 2192 07cc BDE87040 		pop	{r4, r5, r6, lr}	@
 2193              	.LCFI23:
 2194              		.cfi_remember_state
 2195              		.cfi_restore 14
 2196              		.cfi_restore 6
 2197              		.cfi_restore 5
 2198              		.cfi_restore 4
 2199              		.cfi_def_cfa_offset 0
1739:src/stm32f1xx_hal_irda.c ****       return;
 2200              		.loc 1 1739 0
 2201 07d0 85E7     		b	IRDA_Receive_IT	@
 2202              	.LVL182:
 2203              	.L174:
ARM GAS  /tmp/cc2ibVgV.s 			page 94


 2204              	.LCFI24:
 2205              		.cfi_restore_state
1745:src/stm32f1xx_hal_irda.c ****   {
 2206              		.loc 1 1745 0 discriminator 1
 2207 07d2 15F00105 		ands	r5, r5, #1	@ _17, cr3its,
 2208              	.LVL183:
 2209 07d6 02D1     		bne	.L176	@,
1745:src/stm32f1xx_hal_irda.c ****   {
 2210              		.loc 1 1745 0 is_stmt 0 discriminator 2
 2211 07d8 11F4907F 		tst	r1, #288	@ cr1its,
 2212 07dc 4ED0     		beq	.L175	@,
 2213              	.L176:
1748:src/stm32f1xx_hal_irda.c ****     {
 2214              		.loc 1 1748 0 is_stmt 1
 2215 07de D307     		lsls	r3, r2, #31	@, isrflags,
 2216 07e0 05D5     		bpl	.L177	@,
1748:src/stm32f1xx_hal_irda.c ****     {
 2217              		.loc 1 1748 0 is_stmt 0 discriminator 1
 2218 07e2 CE05     		lsls	r6, r1, #23	@, cr1its,
1750:src/stm32f1xx_hal_irda.c ****     }
 2219              		.loc 1 1750 0 is_stmt 1 discriminator 1
 2220 07e4 42BF     		ittt	mi
 2221 07e6 A36B     		ldrmi	r3, [r4, #56]	@ _21, hirda_8(D)->ErrorCode
 2222 07e8 43F00103 		orrmi	r3, r3, #1	@ _22, _21,
 2223 07ec A363     		strmi	r3, [r4, #56]	@ _22, hirda_8(D)->ErrorCode
 2224              	.L177:
1754:src/stm32f1xx_hal_irda.c ****     {
 2225              		.loc 1 1754 0
 2226 07ee 5007     		lsls	r0, r2, #29	@, isrflags,
 2227              	.LVL184:
 2228 07f0 04D5     		bpl	.L178	@,
1754:src/stm32f1xx_hal_irda.c ****     {
 2229              		.loc 1 1754 0 is_stmt 0 discriminator 1
 2230 07f2 1DB1     		cbz	r5, .L178	@ _17,
1756:src/stm32f1xx_hal_irda.c ****     }
 2231              		.loc 1 1756 0 is_stmt 1
 2232 07f4 A36B     		ldr	r3, [r4, #56]	@ _25, hirda_8(D)->ErrorCode
 2233 07f6 43F00203 		orr	r3, r3, #2	@ _26, _25,
 2234 07fa A363     		str	r3, [r4, #56]	@ _26, hirda_8(D)->ErrorCode
 2235              	.L178:
1760:src/stm32f1xx_hal_irda.c ****     {
 2236              		.loc 1 1760 0
 2237 07fc 9307     		lsls	r3, r2, #30	@, isrflags,
 2238 07fe 04D5     		bpl	.L179	@,
1760:src/stm32f1xx_hal_irda.c ****     {
 2239              		.loc 1 1760 0 is_stmt 0 discriminator 1
 2240 0800 1DB1     		cbz	r5, .L179	@ _17,
1762:src/stm32f1xx_hal_irda.c ****     }
 2241              		.loc 1 1762 0 is_stmt 1
 2242 0802 A36B     		ldr	r3, [r4, #56]	@ _29, hirda_8(D)->ErrorCode
 2243 0804 43F00403 		orr	r3, r3, #4	@ _30, _29,
 2244 0808 A363     		str	r3, [r4, #56]	@ _30, hirda_8(D)->ErrorCode
 2245              	.L179:
1766:src/stm32f1xx_hal_irda.c ****     {
 2246              		.loc 1 1766 0
 2247 080a 1607     		lsls	r6, r2, #28	@, isrflags,
 2248 080c 04D5     		bpl	.L180	@,
ARM GAS  /tmp/cc2ibVgV.s 			page 95


1766:src/stm32f1xx_hal_irda.c ****     {
 2249              		.loc 1 1766 0 is_stmt 0 discriminator 1
 2250 080e 1DB1     		cbz	r5, .L180	@ _17,
1768:src/stm32f1xx_hal_irda.c ****     }
 2251              		.loc 1 1768 0 is_stmt 1
 2252 0810 A36B     		ldr	r3, [r4, #56]	@ _33, hirda_8(D)->ErrorCode
 2253 0812 43F00803 		orr	r3, r3, #8	@ _34, _33,
 2254 0816 A363     		str	r3, [r4, #56]	@ _34, hirda_8(D)->ErrorCode
 2255              	.L180:
1771:src/stm32f1xx_hal_irda.c ****     {
 2256              		.loc 1 1771 0
 2257 0818 A36B     		ldr	r3, [r4, #56]	@ _36, hirda_8(D)->ErrorCode
 2258 081a 002B     		cmp	r3, #0	@ _36
 2259 081c 6AD0     		beq	.L173	@
1774:src/stm32f1xx_hal_irda.c ****       {
 2260              		.loc 1 1774 0
 2261 081e 9506     		lsls	r5, r2, #26	@, isrflags,
 2262 0820 04D5     		bpl	.L183	@,
1774:src/stm32f1xx_hal_irda.c ****       {
 2263              		.loc 1 1774 0 is_stmt 0 discriminator 1
 2264 0822 8806     		lsls	r0, r1, #26	@, cr1its,
 2265 0824 02D5     		bpl	.L183	@,
1776:src/stm32f1xx_hal_irda.c ****       }
 2266              		.loc 1 1776 0 is_stmt 1
 2267 0826 2046     		mov	r0, r4	@, hirda
 2268 0828 FFF759FF 		bl	IRDA_Receive_IT	@
 2269              	.LVL185:
 2270              	.L183:
1781:src/stm32f1xx_hal_irda.c ****       if (((hirda->ErrorCode & HAL_IRDA_ERROR_ORE) != RESET) || dmarequest)
 2271              		.loc 1 1781 0
 2272 082c 2368     		ldr	r3, [r4]	@ _40, hirda_8(D)->Instance
1787:src/stm32f1xx_hal_irda.c **** 
 2273              		.loc 1 1787 0
 2274 082e 2046     		mov	r0, r4	@, hirda
1781:src/stm32f1xx_hal_irda.c ****       if (((hirda->ErrorCode & HAL_IRDA_ERROR_ORE) != RESET) || dmarequest)
 2275              		.loc 1 1781 0
 2276 0830 5D69     		ldr	r5, [r3, #20]	@ _41, _40->CR3
 2277              	.LVL186:
1782:src/stm32f1xx_hal_irda.c ****       {
 2278              		.loc 1 1782 0
 2279 0832 A26B     		ldr	r2, [r4, #56]	@ _43, hirda_8(D)->ErrorCode
 2280 0834 1107     		lsls	r1, r2, #28	@, _43,
 2281 0836 02D4     		bmi	.L184	@,
 2282              	.LVL187:
1782:src/stm32f1xx_hal_irda.c ****       {
 2283              		.loc 1 1782 0 is_stmt 0 discriminator 1
 2284 0838 15F04005 		ands	r5, r5, #64	@ tmp190, _41,
 2285              	.LVL188:
 2286 083c 1AD0     		beq	.L185	@,
 2287              	.LVL189:
 2288              	.L184:
1787:src/stm32f1xx_hal_irda.c **** 
 2289              		.loc 1 1787 0 is_stmt 1
 2290 083e FFF7DFFB 		bl	IRDA_EndRxTransfer	@
 2291              	.LVL190:
1790:src/stm32f1xx_hal_irda.c ****         {
 2292              		.loc 1 1790 0
ARM GAS  /tmp/cc2ibVgV.s 			page 96


 2293 0842 2368     		ldr	r3, [r4]	@ _48, hirda_8(D)->Instance
 2294 0844 5A69     		ldr	r2, [r3, #20]	@ _49, _48->CR3
 2295 0846 5206     		lsls	r2, r2, #25	@, _49,
 2296 0848 10D5     		bpl	.L186	@,
1792:src/stm32f1xx_hal_irda.c **** 
 2297              		.loc 1 1792 0
 2298 084a 5A69     		ldr	r2, [r3, #20]	@ _52, _48->CR3
1795:src/stm32f1xx_hal_irda.c ****           {
 2299              		.loc 1 1795 0
 2300 084c 206B     		ldr	r0, [r4, #48]	@ _55, hirda_8(D)->hdmarx
 2301              	.LVL191:
1792:src/stm32f1xx_hal_irda.c **** 
 2302              		.loc 1 1792 0
 2303 084e 22F04002 		bic	r2, r2, #64	@ _53, _52,
 2304 0852 5A61     		str	r2, [r3, #20]	@ _53, _48->CR3
1795:src/stm32f1xx_hal_irda.c ****           {
 2305              		.loc 1 1795 0
 2306 0854 50B1     		cbz	r0, .L186	@ _55,
1799:src/stm32f1xx_hal_irda.c **** 
 2307              		.loc 1 1799 0
 2308 0856 284B     		ldr	r3, .L253	@ tmp192,
 2309 0858 4363     		str	r3, [r0, #52]	@ tmp192, _55->XferAbortCallback
1802:src/stm32f1xx_hal_irda.c ****             {
 2310              		.loc 1 1802 0
 2311 085a FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 2312              	.LVL192:
 2313 085e 0028     		cmp	r0, #0	@
 2314 0860 48D0     		beq	.L173	@
1805:src/stm32f1xx_hal_irda.c ****             }
 2315              		.loc 1 1805 0
 2316 0862 206B     		ldr	r0, [r4, #48]	@ _59, hirda_8(D)->hdmarx
1861:src/stm32f1xx_hal_irda.c **** 
 2317              		.loc 1 1861 0
 2318 0864 BDE87040 		pop	{r4, r5, r6, lr}	@
 2319              	.LCFI25:
 2320              		.cfi_remember_state
 2321              		.cfi_restore 14
 2322              		.cfi_restore 6
 2323              		.cfi_restore 5
 2324              		.cfi_restore 4
 2325              		.cfi_def_cfa_offset 0
 2326              	.LVL193:
1805:src/stm32f1xx_hal_irda.c ****             }
 2327              		.loc 1 1805 0
 2328 0868 436B     		ldr	r3, [r0, #52]	@ _59->XferAbortCallback, _59->XferAbortCallback
 2329 086a 1847     		bx	r3	@ indirect register sibling call	@ _59->XferAbortCallback
 2330              	.LVL194:
 2331              	.L186:
 2332              	.LCFI26:
 2333              		.cfi_restore_state
1815:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2334              		.loc 1 1815 0
 2335 086c 2046     		mov	r0, r4	@, hirda
 2336 086e FFF7FEFF 		bl	HAL_IRDA_ErrorCallback	@
 2337              	.LVL195:
 2338 0872 70BD     		pop	{r4, r5, r6, pc}	@
 2339              	.LVL196:
ARM GAS  /tmp/cc2ibVgV.s 			page 97


 2340              	.L185:
1839:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2341              		.loc 1 1839 0
 2342 0874 FFF7FEFF 		bl	HAL_IRDA_ErrorCallback	@
 2343              	.LVL197:
1842:src/stm32f1xx_hal_irda.c ****       }
 2344              		.loc 1 1842 0
 2345 0878 A563     		str	r5, [r4, #56]	@ tmp190, hirda_8(D)->ErrorCode
 2346 087a 70BD     		pop	{r4, r5, r6, pc}	@
 2347              	.LVL198:
 2348              	.L175:
1849:src/stm32f1xx_hal_irda.c ****   {
 2349              		.loc 1 1849 0
 2350 087c 1606     		lsls	r6, r2, #24	@, isrflags,
 2351 087e 27D5     		bpl	.L188	@,
1849:src/stm32f1xx_hal_irda.c ****   {
 2352              		.loc 1 1849 0 is_stmt 0 discriminator 1
 2353 0880 0D06     		lsls	r5, r1, #24	@, cr1its,
 2354 0882 25D5     		bpl	.L188	@,
 2355              	.LVL199:
 2356              	.LBB35:
 2357              	.LBB36:
2457:src/stm32f1xx_hal_irda.c ****   {
 2358              		.loc 1 2457 0 is_stmt 1
 2359 0884 94F83520 		ldrb	r2, [r4, #53]	@ zero_extendqisi2	@ hirda_8(D)->gState, hirda_8(D)->gState
 2360              	.LVL200:
 2361 0888 212A     		cmp	r2, #33	@ hirda_8(D)->gState,
 2362 088a 33D1     		bne	.L173	@,
2459:src/stm32f1xx_hal_irda.c ****     {
 2363              		.loc 1 2459 0
 2364 088c A268     		ldr	r2, [r4, #8]	@ hirda_8(D)->Init.WordLength, hirda_8(D)->Init.WordLength
 2365 088e B2F5805F 		cmp	r2, #4096	@ hirda_8(D)->Init.WordLength,
 2366 0892 E269     		ldr	r2, [r4, #28]	@ _80, hirda_8(D)->pTxBuffPtr
 2367 0894 17D1     		bne	.L189	@,
 2368              	.LVL201:
2462:src/stm32f1xx_hal_irda.c ****       if (hirda->Init.Parity == IRDA_PARITY_NONE)
 2369              		.loc 1 2462 0
 2370 0896 1188     		ldrh	r1, [r2]	@, *tmp_71
 2371              	.LVL202:
 2372 0898 C1F30801 		ubfx	r1, r1, #0, #9	@ _75, *tmp_71,,
 2373 089c 5960     		str	r1, [r3, #4]	@ _75, _9->DR
2463:src/stm32f1xx_hal_irda.c ****       {
 2374              		.loc 1 2463 0
 2375 089e E168     		ldr	r1, [r4, #12]	@ hirda_8(D)->Init.Parity, hirda_8(D)->Init.Parity
 2376 08a0 79B9     		cbnz	r1, .L190	@ hirda_8(D)->Init.Parity,
2465:src/stm32f1xx_hal_irda.c ****       }
 2377              		.loc 1 2465 0
 2378 08a2 0232     		adds	r2, r2, #2	@ tmp206, _80,
 2379              	.LVL203:
 2380              	.L252:
2469:src/stm32f1xx_hal_irda.c ****       }
 2381              		.loc 1 2469 0
 2382 08a4 E261     		str	r2, [r4, #28]	@ tmp207, hirda_8(D)->pTxBuffPtr
 2383              	.LVL204:
 2384              	.L191:
2477:src/stm32f1xx_hal_irda.c ****     {
 2385              		.loc 1 2477 0
ARM GAS  /tmp/cc2ibVgV.s 			page 98


 2386 08a6 628C     		ldrh	r2, [r4, #34]	@, hirda_8(D)->TxXferCount
 2387 08a8 013A     		subs	r2, r2, #1	@ tmp211, hirda_8(D)->TxXferCount,
 2388 08aa 92B2     		uxth	r2, r2	@ _85, tmp211
 2389 08ac 6284     		strh	r2, [r4, #34]	@ movhi	@ _85, hirda_8(D)->TxXferCount
 2390 08ae 0ABB     		cbnz	r2, .L173	@ _85,
2480:src/stm32f1xx_hal_irda.c **** 
 2391              		.loc 1 2480 0
 2392 08b0 DA68     		ldr	r2, [r3, #12]	@ _87, _86->CR1
 2393 08b2 22F08002 		bic	r2, r2, #128	@ _88, _87,
 2394 08b6 DA60     		str	r2, [r3, #12]	@ _88, _86->CR1
2483:src/stm32f1xx_hal_irda.c ****     }
 2395              		.loc 1 2483 0
 2396 08b8 DA68     		ldr	r2, [r3, #12]	@ _89, _86->CR1
 2397 08ba 42F04002 		orr	r2, r2, #64	@ _90, _89,
 2398 08be DA60     		str	r2, [r3, #12]	@ _90, _86->CR1
 2399 08c0 70BD     		pop	{r4, r5, r6, pc}	@
 2400              	.LVL205:
 2401              	.L190:
2469:src/stm32f1xx_hal_irda.c ****       }
 2402              		.loc 1 2469 0
 2403 08c2 0132     		adds	r2, r2, #1	@ tmp207, _80,
 2404              	.LVL206:
 2405 08c4 EEE7     		b	.L252	@
 2406              	.LVL207:
 2407              	.L189:
2474:src/stm32f1xx_hal_irda.c ****     }
 2408              		.loc 1 2474 0
 2409 08c6 511C     		adds	r1, r2, #1	@ tmp208, _80,
 2410              	.LVL208:
 2411 08c8 E161     		str	r1, [r4, #28]	@ tmp208, hirda_8(D)->pTxBuffPtr
 2412 08ca 1278     		ldrb	r2, [r2]	@ zero_extendqisi2	@ _83, *_80
 2413 08cc 5A60     		str	r2, [r3, #4]	@ _83, _9->DR
 2414 08ce EAE7     		b	.L191	@
 2415              	.LVL209:
 2416              	.L188:
 2417              	.LBE36:
 2418              	.LBE35:
1856:src/stm32f1xx_hal_irda.c ****   {
 2419              		.loc 1 1856 0
 2420 08d0 5006     		lsls	r0, r2, #25	@, isrflags,
 2421              	.LVL210:
 2422 08d2 0FD5     		bpl	.L173	@,
1856:src/stm32f1xx_hal_irda.c ****   {
 2423              		.loc 1 1856 0 is_stmt 0 discriminator 1
 2424 08d4 4A06     		lsls	r2, r1, #25	@, cr1its,
 2425              	.LVL211:
 2426 08d6 0DD5     		bpl	.L173	@,
 2427              	.LVL212:
 2428              	.LBB37:
 2429              	.LBB38:
2503:src/stm32f1xx_hal_irda.c **** 
 2430              		.loc 1 2503 0 is_stmt 1
 2431 08d8 DA68     		ldr	r2, [r3, #12]	@ _93, _9->CR1
2516:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2432              		.loc 1 2516 0
 2433 08da 2046     		mov	r0, r4	@, hirda
2503:src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/cc2ibVgV.s 			page 99


 2434              		.loc 1 2503 0
 2435 08dc 22F04002 		bic	r2, r2, #64	@ _94, _93,
 2436 08e0 DA60     		str	r2, [r3, #12]	@ _94, _9->CR1
2506:src/stm32f1xx_hal_irda.c **** 
 2437              		.loc 1 2506 0
 2438 08e2 5A69     		ldr	r2, [r3, #20]	@ _95, _9->CR3
 2439 08e4 22F00102 		bic	r2, r2, #1	@ _96, _95,
 2440 08e8 5A61     		str	r2, [r3, #20]	@ _96, _9->CR3
2509:src/stm32f1xx_hal_irda.c **** 
 2441              		.loc 1 2509 0
 2442 08ea 2023     		movs	r3, #32	@ tmp215,
 2443 08ec 84F83530 		strb	r3, [r4, #53]	@ tmp215, hirda_8(D)->gState
2516:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2444              		.loc 1 2516 0
 2445 08f0 FFF7FEFF 		bl	HAL_IRDA_TxCpltCallback	@
 2446              	.LVL213:
 2447              	.L173:
 2448 08f4 70BD     		pop	{r4, r5, r6, pc}	@
 2449              	.LVL214:
 2450              	.L254:
 2451 08f6 00BF     		.align	2
 2452              	.L253:
 2453 08f8 00000000 		.word	IRDA_DMAAbortOnError
 2454              	.LBE38:
 2455              	.LBE37:
 2456              		.cfi_endproc
 2457              	.LFE84:
 2458              		.size	HAL_IRDA_IRQHandler, .-HAL_IRDA_IRQHandler
 2459              		.align	1
 2460              		.syntax unified
 2461              		.thumb
 2462              		.thumb_func
 2463              		.fpu softvfp
 2464              		.type	IRDA_DMAAbortOnError, %function
 2465              	IRDA_DMAAbortOnError:
 2466              	.LFB103:
2290:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2467              		.loc 1 2290 0
 2468              		.cfi_startproc
 2469              		@ args = 0, pretend = 0, frame = 0
 2470              		@ frame_needed = 0, uses_anonymous_args = 0
 2471              	.LVL215:
 2472 08fc 08B5     		push	{r3, lr}	@
 2473              	.LCFI27:
 2474              		.cfi_def_cfa_offset 8
 2475              		.cfi_offset 3, -8
 2476              		.cfi_offset 14, -4
2292:src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
 2477              		.loc 1 2292 0
 2478 08fe 0023     		movs	r3, #0	@ tmp113,
2291:src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 2479              		.loc 1 2291 0
 2480 0900 406A     		ldr	r0, [r0, #36]	@ hirda, hdma_2(D)->Parent
 2481              	.LVL216:
2292:src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
 2482              		.loc 1 2292 0
 2483 0902 4385     		strh	r3, [r0, #42]	@ movhi	@ tmp113, hirda_3->RxXferCount
ARM GAS  /tmp/cc2ibVgV.s 			page 100


2293:src/stm32f1xx_hal_irda.c **** 
 2484              		.loc 1 2293 0
 2485 0904 4384     		strh	r3, [r0, #34]	@ movhi	@ tmp113, hirda_3->TxXferCount
2300:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2486              		.loc 1 2300 0
 2487 0906 FFF7FEFF 		bl	HAL_IRDA_ErrorCallback	@
 2488              	.LVL217:
 2489 090a 08BD     		pop	{r3, pc}	@
 2490              		.cfi_endproc
 2491              	.LFE103:
 2492              		.size	IRDA_DMAAbortOnError, .-IRDA_DMAAbortOnError
 2493              		.align	1
 2494              		.weak	HAL_IRDA_AbortCpltCallback
 2495              		.syntax unified
 2496              		.thumb
 2497              		.thumb_func
 2498              		.fpu softvfp
 2499              		.type	HAL_IRDA_AbortCpltCallback, %function
 2500              	HAL_IRDA_AbortCpltCallback:
 2501              	.LFB117:
 2502              		.cfi_startproc
 2503              		@ args = 0, pretend = 0, frame = 0
 2504              		@ frame_needed = 0, uses_anonymous_args = 0
 2505              		@ link register save eliminated.
 2506 090c 7047     		bx	lr	@
 2507              		.cfi_endproc
 2508              	.LFE117:
 2509              		.size	HAL_IRDA_AbortCpltCallback, .-HAL_IRDA_AbortCpltCallback
 2510              		.align	1
 2511              		.global	HAL_IRDA_Abort_IT
 2512              		.syntax unified
 2513              		.thumb
 2514              		.thumb_func
 2515              		.fpu softvfp
 2516              		.type	HAL_IRDA_Abort_IT, %function
 2517              	HAL_IRDA_Abort_IT:
 2518              	.LFB81:
1450:src/stm32f1xx_hal_irda.c ****   uint32_t AbortCplt = 0x01U;
 2519              		.loc 1 1450 0
 2520              		.cfi_startproc
 2521              		@ args = 0, pretend = 0, frame = 0
 2522              		@ frame_needed = 0, uses_anonymous_args = 0
 2523              	.LVL218:
1454:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 2524              		.loc 1 1454 0
 2525 090e 0368     		ldr	r3, [r0]	@ _10, hirda_9(D)->Instance
1450:src/stm32f1xx_hal_irda.c ****   uint32_t AbortCplt = 0x01U;
 2526              		.loc 1 1450 0
 2527 0910 10B5     		push	{r4, lr}	@
 2528              	.LCFI28:
 2529              		.cfi_def_cfa_offset 8
 2530              		.cfi_offset 4, -8
 2531              		.cfi_offset 14, -4
1454:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 2532              		.loc 1 1454 0
 2533 0912 DA68     		ldr	r2, [r3, #12]	@ _11, _10->CR1
1450:src/stm32f1xx_hal_irda.c ****   uint32_t AbortCplt = 0x01U;
ARM GAS  /tmp/cc2ibVgV.s 			page 101


 2534              		.loc 1 1450 0
 2535 0914 0446     		mov	r4, r0	@ hirda, hirda
1454:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 2536              		.loc 1 1454 0
 2537 0916 22F4F072 		bic	r2, r2, #480	@ _12, _11,
 2538 091a DA60     		str	r2, [r3, #12]	@ _12, _10->CR1
1455:src/stm32f1xx_hal_irda.c **** 
 2539              		.loc 1 1455 0
 2540 091c 5A69     		ldr	r2, [r3, #20]	@ _14, _10->CR3
1460:src/stm32f1xx_hal_irda.c ****   {
 2541              		.loc 1 1460 0
 2542 091e C06A     		ldr	r0, [r0, #44]	@ _17, hirda_9(D)->hdmatx
 2543              	.LVL219:
1455:src/stm32f1xx_hal_irda.c **** 
 2544              		.loc 1 1455 0
 2545 0920 22F00102 		bic	r2, r2, #1	@ _15, _14,
 2546 0924 5A61     		str	r2, [r3, #20]	@ _15, _10->CR3
1460:src/stm32f1xx_hal_irda.c ****   {
 2547              		.loc 1 1460 0
 2548 0926 28B1     		cbz	r0, .L258	@ _17,
1464:src/stm32f1xx_hal_irda.c ****     {
 2549              		.loc 1 1464 0
 2550 0928 5A69     		ldr	r2, [r3, #20]	@ _18, _10->CR3
 2551 092a 12F08002 		ands	r2, r2, #128	@ tmp138, _18,
1466:src/stm32f1xx_hal_irda.c ****     }
 2552              		.loc 1 1466 0
 2553 092e 18BF     		it	ne
 2554 0930 1E4A     		ldrne	r2, .L287	@ tmp139,
1470:src/stm32f1xx_hal_irda.c ****     }
 2555              		.loc 1 1470 0
 2556 0932 4263     		str	r2, [r0, #52]	@ tmp138, _17->XferAbortCallback
 2557              	.L258:
1474:src/stm32f1xx_hal_irda.c ****   {
 2558              		.loc 1 1474 0
 2559 0934 216B     		ldr	r1, [r4, #48]	@ _22, hirda_9(D)->hdmarx
 2560 0936 29B1     		cbz	r1, .L260	@ _22,
1478:src/stm32f1xx_hal_irda.c ****     {
 2561              		.loc 1 1478 0
 2562 0938 5A69     		ldr	r2, [r3, #20]	@ _23, _10->CR3
 2563 093a 12F04002 		ands	r2, r2, #64	@ tmp141, _23,
1480:src/stm32f1xx_hal_irda.c ****     }
 2564              		.loc 1 1480 0
 2565 093e 18BF     		it	ne
 2566 0940 1B4A     		ldrne	r2, .L287+4	@ tmp142,
1484:src/stm32f1xx_hal_irda.c ****     }
 2567              		.loc 1 1484 0
 2568 0942 4A63     		str	r2, [r1, #52]	@ tmp141, _22->XferAbortCallback
 2569              	.L260:
1489:src/stm32f1xx_hal_irda.c ****   {
 2570              		.loc 1 1489 0
 2571 0944 5A69     		ldr	r2, [r3, #20]	@ _27, _10->CR3
 2572 0946 1206     		lsls	r2, r2, #24	@, _27,
 2573 0948 1DD4     		bmi	.L262	@,
 2574              	.L286:
1451:src/stm32f1xx_hal_irda.c **** 
 2575              		.loc 1 1451 0
 2576 094a 0123     		movs	r3, #1	@ AbortCplt,
ARM GAS  /tmp/cc2ibVgV.s 			page 102


 2577              	.L263:
 2578              	.LVL220:
1513:src/stm32f1xx_hal_irda.c ****   {
 2579              		.loc 1 1513 0
 2580 094c 2268     		ldr	r2, [r4]	@ _36, hirda_9(D)->Instance
 2581 094e 5169     		ldr	r1, [r2, #20]	@ _37, _36->CR3
 2582 0950 4906     		lsls	r1, r1, #25	@, _37,
 2583 0952 27D5     		bpl	.L265	@,
1515:src/stm32f1xx_hal_irda.c **** 
 2584              		.loc 1 1515 0
 2585 0954 5169     		ldr	r1, [r2, #20]	@ _39, _36->CR3
1518:src/stm32f1xx_hal_irda.c ****     {
 2586              		.loc 1 1518 0
 2587 0956 206B     		ldr	r0, [r4, #48]	@ _42, hirda_9(D)->hdmarx
1515:src/stm32f1xx_hal_irda.c **** 
 2588              		.loc 1 1515 0
 2589 0958 21F04001 		bic	r1, r1, #64	@ _40, _39,
 2590 095c 5161     		str	r1, [r2, #20]	@ _40, _36->CR3
1518:src/stm32f1xx_hal_irda.c ****     {
 2591              		.loc 1 1518 0
 2592 095e 08B3     		cbz	r0, .L265	@ _42,
1524:src/stm32f1xx_hal_irda.c ****       {
 2593              		.loc 1 1524 0
 2594 0960 FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 2595              	.LVL221:
 2596 0964 00B3     		cbz	r0, .L267	@,
1526:src/stm32f1xx_hal_irda.c ****         AbortCplt = 0x01U;
 2597              		.loc 1 1526 0
 2598 0966 0022     		movs	r2, #0	@ tmp151,
 2599 0968 236B     		ldr	r3, [r4, #48]	@ hirda_9(D)->hdmarx, hirda_9(D)->hdmarx
 2600 096a 5A63     		str	r2, [r3, #52]	@ tmp151, _45->XferAbortCallback
 2601              	.LVL222:
 2602              	.L268:
1540:src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = 0x00U;
 2603              		.loc 1 1540 0
 2604 096c 0023     		movs	r3, #0	@ tmp153,
 2605 096e 6384     		strh	r3, [r4, #34]	@ movhi	@ tmp153, hirda_9(D)->TxXferCount
1541:src/stm32f1xx_hal_irda.c **** 
 2606              		.loc 1 1541 0
 2607 0970 6385     		strh	r3, [r4, #42]	@ movhi	@ tmp153, hirda_9(D)->RxXferCount
1544:src/stm32f1xx_hal_irda.c **** 
 2608              		.loc 1 1544 0
 2609 0972 A363     		str	r3, [r4, #56]	@ tmp153, hirda_9(D)->ErrorCode
1547:src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
 2610              		.loc 1 1547 0
 2611 0974 2023     		movs	r3, #32	@ tmp157,
1556:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2612              		.loc 1 1556 0
 2613 0976 2046     		mov	r0, r4	@, hirda
1547:src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
 2614              		.loc 1 1547 0
 2615 0978 84F83530 		strb	r3, [r4, #53]	@ tmp157, hirda_9(D)->gState
1548:src/stm32f1xx_hal_irda.c **** 
 2616              		.loc 1 1548 0
 2617 097c 84F83630 		strb	r3, [r4, #54]	@ tmp157, hirda_9(D)->RxState
1556:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2618              		.loc 1 1556 0
ARM GAS  /tmp/cc2ibVgV.s 			page 103


 2619 0980 FFF7FEFF 		bl	HAL_IRDA_AbortCpltCallback	@
 2620              	.LVL223:
 2621 0984 10E0     		b	.L267	@
 2622              	.LVL224:
 2623              	.L262:
1492:src/stm32f1xx_hal_irda.c **** 
 2624              		.loc 1 1492 0
 2625 0986 5A69     		ldr	r2, [r3, #20]	@ _29, _10->CR3
 2626 0988 22F08002 		bic	r2, r2, #128	@ _30, _29,
 2627 098c 5A61     		str	r2, [r3, #20]	@ _30, _10->CR3
1495:src/stm32f1xx_hal_irda.c ****     {
 2628              		.loc 1 1495 0
 2629 098e 0028     		cmp	r0, #0	@ _17
 2630 0990 DBD0     		beq	.L286	@
1501:src/stm32f1xx_hal_irda.c ****       {
 2631              		.loc 1 1501 0
 2632 0992 FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 2633              	.LVL225:
 2634 0996 18B1     		cbz	r0, .L270	@ tmp145,
1503:src/stm32f1xx_hal_irda.c ****       }
 2635              		.loc 1 1503 0
 2636 0998 0022     		movs	r2, #0	@ AbortCplt,
 2637 099a E36A     		ldr	r3, [r4, #44]	@ hirda_9(D)->hdmatx, hirda_9(D)->hdmatx
 2638 099c 5A63     		str	r2, [r3, #52]	@ AbortCplt, _34->XferAbortCallback
 2639 099e D4E7     		b	.L286	@
 2640              	.L270:
1507:src/stm32f1xx_hal_irda.c ****       }
 2641              		.loc 1 1507 0
 2642 09a0 0346     		mov	r3, r0	@ AbortCplt, tmp145
 2643 09a2 D3E7     		b	.L263	@
 2644              	.LVL226:
 2645              	.L265:
1537:src/stm32f1xx_hal_irda.c ****   {
 2646              		.loc 1 1537 0
 2647 09a4 002B     		cmp	r3, #0	@ AbortCplt
 2648 09a6 E1D1     		bne	.L268	@
 2649              	.LVL227:
 2650              	.L267:
1561:src/stm32f1xx_hal_irda.c **** 
 2651              		.loc 1 1561 0
 2652 09a8 0020     		movs	r0, #0	@,
 2653 09aa 10BD     		pop	{r4, pc}	@
 2654              	.LVL228:
 2655              	.L288:
 2656              		.align	2
 2657              	.L287:
 2658 09ac 00000000 		.word	IRDA_DMATxAbortCallback
 2659 09b0 00000000 		.word	IRDA_DMARxAbortCallback
 2660              		.cfi_endproc
 2661              	.LFE81:
 2662              		.size	HAL_IRDA_Abort_IT, .-HAL_IRDA_Abort_IT
 2663              		.align	1
 2664              		.syntax unified
 2665              		.thumb
 2666              		.thumb_func
 2667              		.fpu softvfp
 2668              		.type	IRDA_DMARxAbortCallback, %function
ARM GAS  /tmp/cc2ibVgV.s 			page 104


 2669              	IRDA_DMARxAbortCallback:
 2670              	.LFB105:
2357:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2671              		.loc 1 2357 0
 2672              		.cfi_startproc
 2673              		@ args = 0, pretend = 0, frame = 0
 2674              		@ frame_needed = 0, uses_anonymous_args = 0
 2675              	.LVL229:
 2676 09b4 08B5     		push	{r3, lr}	@
 2677              	.LCFI29:
 2678              		.cfi_def_cfa_offset 8
 2679              		.cfi_offset 3, -8
 2680              		.cfi_offset 14, -4
2360:src/stm32f1xx_hal_irda.c **** 
 2681              		.loc 1 2360 0
 2682 09b6 0023     		movs	r3, #0	@ tmp116,
2358:src/stm32f1xx_hal_irda.c **** 
 2683              		.loc 1 2358 0
 2684 09b8 406A     		ldr	r0, [r0, #36]	@ hirda, hdma_3(D)->Parent
 2685              	.LVL230:
2360:src/stm32f1xx_hal_irda.c **** 
 2686              		.loc 1 2360 0
 2687 09ba 026B     		ldr	r2, [r0, #48]	@ hirda_4->hdmarx, hirda_4->hdmarx
 2688 09bc 5363     		str	r3, [r2, #52]	@ tmp116, _5->XferAbortCallback
2363:src/stm32f1xx_hal_irda.c ****   {
 2689              		.loc 1 2363 0
 2690 09be C26A     		ldr	r2, [r0, #44]	@ _7, hirda_4->hdmatx
 2691 09c0 0AB1     		cbz	r2, .L290	@ _7,
2365:src/stm32f1xx_hal_irda.c ****     {
 2692              		.loc 1 2365 0
 2693 09c2 526B     		ldr	r2, [r2, #52]	@ _7->XferAbortCallback, _7->XferAbortCallback
 2694 09c4 4AB9     		cbnz	r2, .L289	@ _7->XferAbortCallback,
 2695              	.L290:
2372:src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 2696              		.loc 1 2372 0
 2697 09c6 4384     		strh	r3, [r0, #34]	@ movhi	@ tmp127, hirda_4->TxXferCount
2373:src/stm32f1xx_hal_irda.c **** 
 2698              		.loc 1 2373 0
 2699 09c8 4385     		strh	r3, [r0, #42]	@ movhi	@ tmp127, hirda_4->RxXferCount
2376:src/stm32f1xx_hal_irda.c **** 
 2700              		.loc 1 2376 0
 2701 09ca 8363     		str	r3, [r0, #56]	@ tmp127, hirda_4->ErrorCode
2379:src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 2702              		.loc 1 2379 0
 2703 09cc 2023     		movs	r3, #32	@ tmp123,
 2704 09ce 80F83530 		strb	r3, [r0, #53]	@ tmp123, hirda_4->gState
2380:src/stm32f1xx_hal_irda.c **** 
 2705              		.loc 1 2380 0
 2706 09d2 80F83630 		strb	r3, [r0, #54]	@ tmp123, hirda_4->RxState
2388:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2707              		.loc 1 2388 0
 2708 09d6 FFF7FEFF 		bl	HAL_IRDA_AbortCpltCallback	@
 2709              	.LVL231:
 2710              	.L289:
 2711 09da 08BD     		pop	{r3, pc}	@
 2712              		.cfi_endproc
 2713              	.LFE105:
ARM GAS  /tmp/cc2ibVgV.s 			page 105


 2714              		.size	IRDA_DMARxAbortCallback, .-IRDA_DMARxAbortCallback
 2715              		.align	1
 2716              		.syntax unified
 2717              		.thumb
 2718              		.thumb_func
 2719              		.fpu softvfp
 2720              		.type	IRDA_DMATxAbortCallback, %function
 2721              	IRDA_DMATxAbortCallback:
 2722              	.LFB104:
2313:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2723              		.loc 1 2313 0
 2724              		.cfi_startproc
 2725              		@ args = 0, pretend = 0, frame = 0
 2726              		@ frame_needed = 0, uses_anonymous_args = 0
 2727              	.LVL232:
 2728 09dc 08B5     		push	{r3, lr}	@
 2729              	.LCFI30:
 2730              		.cfi_def_cfa_offset 8
 2731              		.cfi_offset 3, -8
 2732              		.cfi_offset 14, -4
2316:src/stm32f1xx_hal_irda.c **** 
 2733              		.loc 1 2316 0
 2734 09de 0023     		movs	r3, #0	@ tmp116,
2314:src/stm32f1xx_hal_irda.c **** 
 2735              		.loc 1 2314 0
 2736 09e0 406A     		ldr	r0, [r0, #36]	@ hirda, hdma_3(D)->Parent
 2737              	.LVL233:
2316:src/stm32f1xx_hal_irda.c **** 
 2738              		.loc 1 2316 0
 2739 09e2 C26A     		ldr	r2, [r0, #44]	@ hirda_4->hdmatx, hirda_4->hdmatx
 2740 09e4 5363     		str	r3, [r2, #52]	@ tmp116, _5->XferAbortCallback
2319:src/stm32f1xx_hal_irda.c ****   {
 2741              		.loc 1 2319 0
 2742 09e6 026B     		ldr	r2, [r0, #48]	@ _7, hirda_4->hdmarx
 2743 09e8 0AB1     		cbz	r2, .L296	@ _7,
2321:src/stm32f1xx_hal_irda.c ****     {
 2744              		.loc 1 2321 0
 2745 09ea 526B     		ldr	r2, [r2, #52]	@ _7->XferAbortCallback, _7->XferAbortCallback
 2746 09ec 4AB9     		cbnz	r2, .L295	@ _7->XferAbortCallback,
 2747              	.L296:
2328:src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 2748              		.loc 1 2328 0
 2749 09ee 4384     		strh	r3, [r0, #34]	@ movhi	@ tmp127, hirda_4->TxXferCount
2329:src/stm32f1xx_hal_irda.c **** 
 2750              		.loc 1 2329 0
 2751 09f0 4385     		strh	r3, [r0, #42]	@ movhi	@ tmp127, hirda_4->RxXferCount
2332:src/stm32f1xx_hal_irda.c **** 
 2752              		.loc 1 2332 0
 2753 09f2 8363     		str	r3, [r0, #56]	@ tmp127, hirda_4->ErrorCode
2335:src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 2754              		.loc 1 2335 0
 2755 09f4 2023     		movs	r3, #32	@ tmp123,
 2756 09f6 80F83530 		strb	r3, [r0, #53]	@ tmp123, hirda_4->gState
2336:src/stm32f1xx_hal_irda.c **** 
 2757              		.loc 1 2336 0
 2758 09fa 80F83630 		strb	r3, [r0, #54]	@ tmp123, hirda_4->RxState
2344:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
ARM GAS  /tmp/cc2ibVgV.s 			page 106


 2759              		.loc 1 2344 0
 2760 09fe FFF7FEFF 		bl	HAL_IRDA_AbortCpltCallback	@
 2761              	.LVL234:
 2762              	.L295:
 2763 0a02 08BD     		pop	{r3, pc}	@
 2764              		.cfi_endproc
 2765              	.LFE104:
 2766              		.size	IRDA_DMATxAbortCallback, .-IRDA_DMATxAbortCallback
 2767              		.align	1
 2768              		.weak	HAL_IRDA_AbortTransmitCpltCallback
 2769              		.syntax unified
 2770              		.thumb
 2771              		.thumb_func
 2772              		.fpu softvfp
 2773              		.type	HAL_IRDA_AbortTransmitCpltCallback, %function
 2774              	HAL_IRDA_AbortTransmitCpltCallback:
 2775              	.LFB115:
 2776              		.cfi_startproc
 2777              		@ args = 0, pretend = 0, frame = 0
 2778              		@ frame_needed = 0, uses_anonymous_args = 0
 2779              		@ link register save eliminated.
 2780 0a04 7047     		bx	lr	@
 2781              		.cfi_endproc
 2782              	.LFE115:
 2783              		.size	HAL_IRDA_AbortTransmitCpltCallback, .-HAL_IRDA_AbortTransmitCpltCallback
 2784              		.align	1
 2785              		.global	HAL_IRDA_AbortTransmit_IT
 2786              		.syntax unified
 2787              		.thumb
 2788              		.thumb_func
 2789              		.fpu softvfp
 2790              		.type	HAL_IRDA_AbortTransmit_IT, %function
 2791              	HAL_IRDA_AbortTransmit_IT:
 2792              	.LFB82:
1578:src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 2793              		.loc 1 1578 0
 2794              		.cfi_startproc
 2795              		@ args = 0, pretend = 0, frame = 0
 2796              		@ frame_needed = 0, uses_anonymous_args = 0
 2797              	.LVL235:
1580:src/stm32f1xx_hal_irda.c **** 
 2798              		.loc 1 1580 0
 2799 0a06 0368     		ldr	r3, [r0]	@ _4, hirda_3(D)->Instance
1578:src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 2800              		.loc 1 1578 0
 2801 0a08 10B5     		push	{r4, lr}	@
 2802              	.LCFI31:
 2803              		.cfi_def_cfa_offset 8
 2804              		.cfi_offset 4, -8
 2805              		.cfi_offset 14, -4
1580:src/stm32f1xx_hal_irda.c **** 
 2806              		.loc 1 1580 0
 2807 0a0a DA68     		ldr	r2, [r3, #12]	@ _5, _4->CR1
1578:src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 2808              		.loc 1 1578 0
 2809 0a0c 0446     		mov	r4, r0	@ hirda, hirda
1580:src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/cc2ibVgV.s 			page 107


 2810              		.loc 1 1580 0
 2811 0a0e 22F0C002 		bic	r2, r2, #192	@ _6, _5,
 2812 0a12 DA60     		str	r2, [r3, #12]	@ _6, _4->CR1
1583:src/stm32f1xx_hal_irda.c ****   {
 2813              		.loc 1 1583 0
 2814 0a14 5A69     		ldr	r2, [r3, #20]	@ _8, _4->CR3
 2815 0a16 12F08002 		ands	r2, r2, #128	@ tmp123, _8,
 2816 0a1a 17D0     		beq	.L303	@,
1585:src/stm32f1xx_hal_irda.c **** 
 2817              		.loc 1 1585 0
 2818 0a1c 5A69     		ldr	r2, [r3, #20]	@ _10, _4->CR3
 2819 0a1e 22F08002 		bic	r2, r2, #128	@ _11, _10,
 2820 0a22 5A61     		str	r2, [r3, #20]	@ _11, _4->CR3
1588:src/stm32f1xx_hal_irda.c ****     {
 2821              		.loc 1 1588 0
 2822 0a24 C36A     		ldr	r3, [r0, #44]	@ _13, hirda_3(D)->hdmatx
 2823 0a26 53B1     		cbz	r3, .L304	@ _13,
1592:src/stm32f1xx_hal_irda.c **** 
 2824              		.loc 1 1592 0
 2825 0a28 094A     		ldr	r2, .L310	@ tmp124,
1595:src/stm32f1xx_hal_irda.c ****       {
 2826              		.loc 1 1595 0
 2827 0a2a 1846     		mov	r0, r3	@, _13
 2828              	.LVL236:
1592:src/stm32f1xx_hal_irda.c **** 
 2829              		.loc 1 1592 0
 2830 0a2c 5A63     		str	r2, [r3, #52]	@ tmp124, _13->XferAbortCallback
1595:src/stm32f1xx_hal_irda.c ****       {
 2831              		.loc 1 1595 0
 2832 0a2e FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 2833              	.LVL237:
 2834 0a32 10B1     		cbz	r0, .L305	@,
1598:src/stm32f1xx_hal_irda.c ****       }
 2835              		.loc 1 1598 0
 2836 0a34 E06A     		ldr	r0, [r4, #44]	@ _20, hirda_3(D)->hdmatx
 2837 0a36 436B     		ldr	r3, [r0, #52]	@ _20->XferAbortCallback, _20->XferAbortCallback
 2838 0a38 9847     		blx	r3	@ _20->XferAbortCallback
 2839              	.LVL238:
 2840              	.L305:
1638:src/stm32f1xx_hal_irda.c **** 
 2841              		.loc 1 1638 0
 2842 0a3a 0020     		movs	r0, #0	@,
 2843 0a3c 10BD     		pop	{r4, pc}	@
 2844              	.LVL239:
 2845              	.L304:
1604:src/stm32f1xx_hal_irda.c **** 
 2846              		.loc 1 1604 0
 2847 0a3e 4384     		strh	r3, [r0, #34]	@ movhi	@ _13, hirda_3(D)->TxXferCount
 2848              	.L309:
1625:src/stm32f1xx_hal_irda.c **** 
 2849              		.loc 1 1625 0
 2850 0a40 2023     		movs	r3, #32	@ tmp133,
 2851 0a42 84F83530 		strb	r3, [r4, #53]	@ tmp133,
1633:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2852              		.loc 1 1633 0
 2853 0a46 FFF7FEFF 		bl	HAL_IRDA_AbortTransmitCpltCallback	@
 2854              	.LVL240:
ARM GAS  /tmp/cc2ibVgV.s 			page 108


 2855 0a4a F6E7     		b	.L305	@
 2856              	.LVL241:
 2857              	.L303:
1622:src/stm32f1xx_hal_irda.c **** 
 2858              		.loc 1 1622 0
 2859 0a4c 4284     		strh	r2, [r0, #34]	@ movhi	@ tmp123, hirda_3(D)->TxXferCount
 2860 0a4e F7E7     		b	.L309	@
 2861              	.L311:
 2862              		.align	2
 2863              	.L310:
 2864 0a50 00000000 		.word	IRDA_DMATxOnlyAbortCallback
 2865              		.cfi_endproc
 2866              	.LFE82:
 2867              		.size	HAL_IRDA_AbortTransmit_IT, .-HAL_IRDA_AbortTransmit_IT
 2868              		.align	1
 2869              		.syntax unified
 2870              		.thumb
 2871              		.thumb_func
 2872              		.fpu softvfp
 2873              		.type	IRDA_DMATxOnlyAbortCallback, %function
 2874              	IRDA_DMATxOnlyAbortCallback:
 2875              	.LFB106:
2401:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2876              		.loc 1 2401 0
 2877              		.cfi_startproc
 2878              		@ args = 0, pretend = 0, frame = 0
 2879              		@ frame_needed = 0, uses_anonymous_args = 0
 2880              	.LVL242:
 2881 0a54 08B5     		push	{r3, lr}	@
 2882              	.LCFI32:
 2883              		.cfi_def_cfa_offset 8
 2884              		.cfi_offset 3, -8
 2885              		.cfi_offset 14, -4
2404:src/stm32f1xx_hal_irda.c **** 
 2886              		.loc 1 2404 0
 2887 0a56 0023     		movs	r3, #0	@ tmp113,
2402:src/stm32f1xx_hal_irda.c **** 
 2888              		.loc 1 2402 0
 2889 0a58 406A     		ldr	r0, [r0, #36]	@ hirda, hdma_2(D)->Parent
 2890              	.LVL243:
2404:src/stm32f1xx_hal_irda.c **** 
 2891              		.loc 1 2404 0
 2892 0a5a 4384     		strh	r3, [r0, #34]	@ movhi	@ tmp113, hirda_3->TxXferCount
2407:src/stm32f1xx_hal_irda.c **** 
 2893              		.loc 1 2407 0
 2894 0a5c 2023     		movs	r3, #32	@ tmp114,
 2895 0a5e 80F83530 		strb	r3, [r0, #53]	@ tmp114, hirda_3->gState
2415:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2896              		.loc 1 2415 0
 2897 0a62 FFF7FEFF 		bl	HAL_IRDA_AbortTransmitCpltCallback	@
 2898              	.LVL244:
 2899 0a66 08BD     		pop	{r3, pc}	@
 2900              		.cfi_endproc
 2901              	.LFE106:
 2902              		.size	IRDA_DMATxOnlyAbortCallback, .-IRDA_DMATxOnlyAbortCallback
 2903              		.align	1
 2904              		.weak	HAL_IRDA_AbortReceiveCpltCallback
ARM GAS  /tmp/cc2ibVgV.s 			page 109


 2905              		.syntax unified
 2906              		.thumb
 2907              		.thumb_func
 2908              		.fpu softvfp
 2909              		.type	HAL_IRDA_AbortReceiveCpltCallback, %function
 2910              	HAL_IRDA_AbortReceiveCpltCallback:
 2911              	.LFB92:
1982:src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2912              		.loc 1 1982 0
 2913              		.cfi_startproc
 2914              		@ args = 0, pretend = 0, frame = 0
 2915              		@ frame_needed = 0, uses_anonymous_args = 0
 2916              		@ link register save eliminated.
 2917              	.LVL245:
 2918 0a68 7047     		bx	lr	@
 2919              		.cfi_endproc
 2920              	.LFE92:
 2921              		.size	HAL_IRDA_AbortReceiveCpltCallback, .-HAL_IRDA_AbortReceiveCpltCallback
 2922              		.align	1
 2923              		.global	HAL_IRDA_AbortReceive_IT
 2924              		.syntax unified
 2925              		.thumb
 2926              		.thumb_func
 2927              		.fpu softvfp
 2928              		.type	HAL_IRDA_AbortReceive_IT, %function
 2929              	HAL_IRDA_AbortReceive_IT:
 2930              	.LFB83:
1655:src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2931              		.loc 1 1655 0
 2932              		.cfi_startproc
 2933              		@ args = 0, pretend = 0, frame = 0
 2934              		@ frame_needed = 0, uses_anonymous_args = 0
 2935              	.LVL246:
1657:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 2936              		.loc 1 1657 0
 2937 0a6a 0368     		ldr	r3, [r0]	@ _4, hirda_3(D)->Instance
1655:src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2938              		.loc 1 1655 0
 2939 0a6c 10B5     		push	{r4, lr}	@
 2940              	.LCFI33:
 2941              		.cfi_def_cfa_offset 8
 2942              		.cfi_offset 4, -8
 2943              		.cfi_offset 14, -4
1657:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 2944              		.loc 1 1657 0
 2945 0a6e DA68     		ldr	r2, [r3, #12]	@ _5, _4->CR1
1655:src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2946              		.loc 1 1655 0
 2947 0a70 0446     		mov	r4, r0	@ hirda, hirda
1657:src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 2948              		.loc 1 1657 0
 2949 0a72 22F49072 		bic	r2, r2, #288	@ _6, _5,
 2950 0a76 DA60     		str	r2, [r3, #12]	@ _6, _4->CR1
1658:src/stm32f1xx_hal_irda.c **** 
 2951              		.loc 1 1658 0
 2952 0a78 5A69     		ldr	r2, [r3, #20]	@ _8, _4->CR3
 2953 0a7a 22F00102 		bic	r2, r2, #1	@ _9, _8,
ARM GAS  /tmp/cc2ibVgV.s 			page 110


 2954 0a7e 5A61     		str	r2, [r3, #20]	@ _9, _4->CR3
1661:src/stm32f1xx_hal_irda.c ****   {
 2955              		.loc 1 1661 0
 2956 0a80 5A69     		ldr	r2, [r3, #20]	@ _11, _4->CR3
 2957 0a82 12F04002 		ands	r2, r2, #64	@ tmp125, _11,
 2958 0a86 17D0     		beq	.L315	@,
1663:src/stm32f1xx_hal_irda.c **** 
 2959              		.loc 1 1663 0
 2960 0a88 5A69     		ldr	r2, [r3, #20]	@ _13, _4->CR3
 2961 0a8a 22F04002 		bic	r2, r2, #64	@ _14, _13,
 2962 0a8e 5A61     		str	r2, [r3, #20]	@ _14, _4->CR3
1666:src/stm32f1xx_hal_irda.c ****     {
 2963              		.loc 1 1666 0
 2964 0a90 036B     		ldr	r3, [r0, #48]	@ _16, hirda_3(D)->hdmarx
 2965 0a92 53B1     		cbz	r3, .L316	@ _16,
1670:src/stm32f1xx_hal_irda.c **** 
 2966              		.loc 1 1670 0
 2967 0a94 094A     		ldr	r2, .L322	@ tmp126,
1673:src/stm32f1xx_hal_irda.c ****       {
 2968              		.loc 1 1673 0
 2969 0a96 1846     		mov	r0, r3	@, _16
 2970              	.LVL247:
1670:src/stm32f1xx_hal_irda.c **** 
 2971              		.loc 1 1670 0
 2972 0a98 5A63     		str	r2, [r3, #52]	@ tmp126, _16->XferAbortCallback
1673:src/stm32f1xx_hal_irda.c ****       {
 2973              		.loc 1 1673 0
 2974 0a9a FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 2975              	.LVL248:
 2976 0a9e 10B1     		cbz	r0, .L317	@,
1676:src/stm32f1xx_hal_irda.c ****       }
 2977              		.loc 1 1676 0
 2978 0aa0 206B     		ldr	r0, [r4, #48]	@ _23, hirda_3(D)->hdmarx
 2979 0aa2 436B     		ldr	r3, [r0, #52]	@ _23->XferAbortCallback, _23->XferAbortCallback
 2980 0aa4 9847     		blx	r3	@ _23->XferAbortCallback
 2981              	.LVL249:
 2982              	.L317:
1716:src/stm32f1xx_hal_irda.c **** 
 2983              		.loc 1 1716 0
 2984 0aa6 0020     		movs	r0, #0	@,
 2985 0aa8 10BD     		pop	{r4, pc}	@
 2986              	.LVL250:
 2987              	.L316:
1682:src/stm32f1xx_hal_irda.c **** 
 2988              		.loc 1 1682 0
 2989 0aaa 4385     		strh	r3, [r0, #42]	@ movhi	@ _16, hirda_3(D)->RxXferCount
 2990              	.L321:
1703:src/stm32f1xx_hal_irda.c **** 
 2991              		.loc 1 1703 0
 2992 0aac 2023     		movs	r3, #32	@ tmp135,
 2993 0aae 84F83630 		strb	r3, [r4, #54]	@ tmp135,
1711:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2994              		.loc 1 1711 0
 2995 0ab2 FFF7FEFF 		bl	HAL_IRDA_AbortReceiveCpltCallback	@
 2996              	.LVL251:
 2997 0ab6 F6E7     		b	.L317	@
 2998              	.LVL252:
ARM GAS  /tmp/cc2ibVgV.s 			page 111


 2999              	.L315:
1700:src/stm32f1xx_hal_irda.c **** 
 3000              		.loc 1 1700 0
 3001 0ab8 4285     		strh	r2, [r0, #42]	@ movhi	@ tmp125, hirda_3(D)->RxXferCount
 3002 0aba F7E7     		b	.L321	@
 3003              	.L323:
 3004              		.align	2
 3005              	.L322:
 3006 0abc 00000000 		.word	IRDA_DMARxOnlyAbortCallback
 3007              		.cfi_endproc
 3008              	.LFE83:
 3009              		.size	HAL_IRDA_AbortReceive_IT, .-HAL_IRDA_AbortReceive_IT
 3010              		.align	1
 3011              		.syntax unified
 3012              		.thumb
 3013              		.thumb_func
 3014              		.fpu softvfp
 3015              		.type	IRDA_DMARxOnlyAbortCallback, %function
 3016              	IRDA_DMARxOnlyAbortCallback:
 3017              	.LFB107:
2428:src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3018              		.loc 1 2428 0
 3019              		.cfi_startproc
 3020              		@ args = 0, pretend = 0, frame = 0
 3021              		@ frame_needed = 0, uses_anonymous_args = 0
 3022              	.LVL253:
 3023 0ac0 08B5     		push	{r3, lr}	@
 3024              	.LCFI34:
 3025              		.cfi_def_cfa_offset 8
 3026              		.cfi_offset 3, -8
 3027              		.cfi_offset 14, -4
2431:src/stm32f1xx_hal_irda.c **** 
 3028              		.loc 1 2431 0
 3029 0ac2 0023     		movs	r3, #0	@ tmp113,
2429:src/stm32f1xx_hal_irda.c **** 
 3030              		.loc 1 2429 0
 3031 0ac4 406A     		ldr	r0, [r0, #36]	@ hirda, hdma_2(D)->Parent
 3032              	.LVL254:
2431:src/stm32f1xx_hal_irda.c **** 
 3033              		.loc 1 2431 0
 3034 0ac6 4385     		strh	r3, [r0, #42]	@ movhi	@ tmp113, hirda_3->RxXferCount
2434:src/stm32f1xx_hal_irda.c **** 
 3035              		.loc 1 2434 0
 3036 0ac8 2023     		movs	r3, #32	@ tmp114,
 3037 0aca 80F83630 		strb	r3, [r0, #54]	@ tmp114, hirda_3->RxState
2442:src/stm32f1xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 3038              		.loc 1 2442 0
 3039 0ace FFF7FEFF 		bl	HAL_IRDA_AbortReceiveCpltCallback	@
 3040              	.LVL255:
 3041 0ad2 08BD     		pop	{r3, pc}	@
 3042              		.cfi_endproc
 3043              	.LFE107:
 3044              		.size	IRDA_DMARxOnlyAbortCallback, .-IRDA_DMARxOnlyAbortCallback
 3045              		.align	1
 3046              		.global	HAL_IRDA_GetState
 3047              		.syntax unified
 3048              		.thumb
ARM GAS  /tmp/cc2ibVgV.s 			page 112


 3049              		.thumb_func
 3050              		.fpu softvfp
 3051              		.type	HAL_IRDA_GetState, %function
 3052              	HAL_IRDA_GetState:
 3053              	.LFB93:
2019:src/stm32f1xx_hal_irda.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
 3054              		.loc 1 2019 0
 3055              		.cfi_startproc
 3056              		@ args = 0, pretend = 0, frame = 0
 3057              		@ frame_needed = 0, uses_anonymous_args = 0
 3058              		@ link register save eliminated.
 3059              	.LVL256:
2021:src/stm32f1xx_hal_irda.c ****   temp2 = hirda->RxState;
 3060              		.loc 1 2021 0
 3061 0ad4 90F83520 		ldrb	r2, [r0, #53]	@ zero_extendqisi2	@ hirda_2(D)->gState, hirda_2(D)->gState
 3062              	.LVL257:
2022:src/stm32f1xx_hal_irda.c **** 
 3063              		.loc 1 2022 0
 3064 0ad8 90F83600 		ldrb	r0, [r0, #54]	@ zero_extendqisi2	@ hirda_2(D)->RxState, hirda_2(D)->RxState
 3065              	.LVL258:
2025:src/stm32f1xx_hal_irda.c **** 
 3066              		.loc 1 2025 0
 3067 0adc 1043     		orrs	r0, r0, r2	@,, hirda_2(D)->RxState, hirda_2(D)->gState
 3068              	.LVL259:
 3069 0ade 7047     		bx	lr	@
 3070              		.cfi_endproc
 3071              	.LFE93:
 3072              		.size	HAL_IRDA_GetState, .-HAL_IRDA_GetState
 3073              		.align	1
 3074              		.global	HAL_IRDA_GetError
 3075              		.syntax unified
 3076              		.thumb
 3077              		.thumb_func
 3078              		.fpu softvfp
 3079              		.type	HAL_IRDA_GetError, %function
 3080              	HAL_IRDA_GetError:
 3081              	.LFB94:
2034:src/stm32f1xx_hal_irda.c ****   return hirda->ErrorCode;
 3082              		.loc 1 2034 0
 3083              		.cfi_startproc
 3084              		@ args = 0, pretend = 0, frame = 0
 3085              		@ frame_needed = 0, uses_anonymous_args = 0
 3086              		@ link register save eliminated.
 3087              	.LVL260:
2035:src/stm32f1xx_hal_irda.c **** }
 3088              		.loc 1 2035 0
 3089 0ae0 806B     		ldr	r0, [r0, #56]	@ <retval>, hirda_2(D)->ErrorCode
 3090              	.LVL261:
2036:src/stm32f1xx_hal_irda.c **** 
 3091              		.loc 1 2036 0
 3092 0ae2 7047     		bx	lr	@
 3093              		.cfi_endproc
 3094              	.LFE94:
 3095              		.size	HAL_IRDA_GetError, .-HAL_IRDA_GetError
 3096              	.Letext0:
 3097              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3098              		.file 3 "/usr/include/newlib/sys/_stdint.h"
ARM GAS  /tmp/cc2ibVgV.s 			page 113


 3099              		.file 4 "../cmsiscore/inc/core_cm3.h"
 3100              		.file 5 "../cmsisstm32f1xx/inc/system_stm32f1xx.h"
 3101              		.file 6 "../cmsisstm32f1xx/inc/stm32f103x6.h"
 3102              		.file 7 "../cmsisstm32f1xx/inc/stm32f1xx.h"
 3103              		.file 8 "./inc/stm32f1xx_hal_def.h"
 3104              		.file 9 "./inc/stm32f1xx_hal_dma.h"
 3105              		.file 10 "./inc/stm32f1xx_hal_irda.h"
 3106              		.file 11 "./inc/stm32f1xx_hal.h"
 3107              		.file 12 "./inc/stm32f1xx_hal_rcc.h"
 3108              		.section	.debug_info,"",%progbits
 3109              	.Ldebug_info0:
 3110 0000 19150000 		.4byte	0x1519
 3111 0004 0200     		.2byte	0x2
 3112 0006 00000000 		.4byte	.Ldebug_abbrev0
 3113 000a 04       		.byte	0x4
 3114 000b 01       		.uleb128 0x1
 3115 000c 9B070000 		.4byte	.LASF171
 3116 0010 0C       		.byte	0xc
 3117 0011 E1050000 		.4byte	.LASF172
 3118 0015 FE070000 		.4byte	.LASF173
 3119 0019 00000000 		.4byte	.Ltext0
 3120 001d E40A0000 		.4byte	.Letext0
 3121 0021 00000000 		.4byte	.Ldebug_line0
 3122 0025 02       		.uleb128 0x2
 3123 0026 01       		.byte	0x1
 3124 0027 06       		.byte	0x6
 3125 0028 53010000 		.4byte	.LASF0
 3126 002c 03       		.uleb128 0x3
 3127 002d 91000000 		.4byte	.LASF3
 3128 0031 02       		.byte	0x2
 3129 0032 1D       		.byte	0x1d
 3130 0033 37000000 		.4byte	0x37
 3131 0037 02       		.uleb128 0x2
 3132 0038 01       		.byte	0x1
 3133 0039 08       		.byte	0x8
 3134 003a C1060000 		.4byte	.LASF1
 3135 003e 02       		.uleb128 0x2
 3136 003f 02       		.byte	0x2
 3137 0040 05       		.byte	0x5
 3138 0041 4D070000 		.4byte	.LASF2
 3139 0045 03       		.uleb128 0x3
 3140 0046 9C080000 		.4byte	.LASF4
 3141 004a 02       		.byte	0x2
 3142 004b 2B       		.byte	0x2b
 3143 004c 50000000 		.4byte	0x50
 3144 0050 02       		.uleb128 0x2
 3145 0051 02       		.byte	0x2
 3146 0052 07       		.byte	0x7
 3147 0053 23040000 		.4byte	.LASF5
 3148 0057 03       		.uleb128 0x3
 3149 0058 CF080000 		.4byte	.LASF6
 3150 005c 02       		.byte	0x2
 3151 005d 3F       		.byte	0x3f
 3152 005e 62000000 		.4byte	0x62
 3153 0062 02       		.uleb128 0x2
 3154 0063 04       		.byte	0x4
 3155 0064 05       		.byte	0x5
ARM GAS  /tmp/cc2ibVgV.s 			page 114


 3156 0065 ED010000 		.4byte	.LASF7
 3157 0069 03       		.uleb128 0x3
 3158 006a 03030000 		.4byte	.LASF8
 3159 006e 02       		.byte	0x2
 3160 006f 41       		.byte	0x41
 3161 0070 74000000 		.4byte	0x74
 3162 0074 02       		.uleb128 0x2
 3163 0075 04       		.byte	0x4
 3164 0076 07       		.byte	0x7
 3165 0077 B4030000 		.4byte	.LASF9
 3166 007b 02       		.uleb128 0x2
 3167 007c 08       		.byte	0x8
 3168 007d 05       		.byte	0x5
 3169 007e 45010000 		.4byte	.LASF10
 3170 0082 02       		.uleb128 0x2
 3171 0083 08       		.byte	0x8
 3172 0084 07       		.byte	0x7
 3173 0085 F1000000 		.4byte	.LASF11
 3174 0089 04       		.uleb128 0x4
 3175 008a 04       		.byte	0x4
 3176 008b 05       		.byte	0x5
 3177 008c 696E7400 		.ascii	"int\000"
 3178 0090 02       		.uleb128 0x2
 3179 0091 04       		.byte	0x4
 3180 0092 07       		.byte	0x7
 3181 0093 46030000 		.4byte	.LASF12
 3182 0097 03       		.uleb128 0x3
 3183 0098 F6090000 		.4byte	.LASF13
 3184 009c 03       		.byte	0x3
 3185 009d 18       		.byte	0x18
 3186 009e 2C000000 		.4byte	0x2c
 3187 00a2 05       		.uleb128 0x5
 3188 00a3 97000000 		.4byte	0x97
 3189 00a7 03       		.uleb128 0x3
 3190 00a8 79020000 		.4byte	.LASF14
 3191 00ac 03       		.byte	0x3
 3192 00ad 24       		.byte	0x24
 3193 00ae 45000000 		.4byte	0x45
 3194 00b2 06       		.uleb128 0x6
 3195 00b3 A7000000 		.4byte	0xa7
 3196 00b7 03       		.uleb128 0x3
 3197 00b8 B9060000 		.4byte	.LASF15
 3198 00bc 03       		.byte	0x3
 3199 00bd 2C       		.byte	0x2c
 3200 00be 57000000 		.4byte	0x57
 3201 00c2 06       		.uleb128 0x6
 3202 00c3 B7000000 		.4byte	0xb7
 3203 00c7 03       		.uleb128 0x3
 3204 00c8 63080000 		.4byte	.LASF16
 3205 00cc 03       		.byte	0x3
 3206 00cd 30       		.byte	0x30
 3207 00ce 69000000 		.4byte	0x69
 3208 00d2 06       		.uleb128 0x6
 3209 00d3 C7000000 		.4byte	0xc7
 3210 00d7 02       		.uleb128 0x2
 3211 00d8 04       		.byte	0x4
 3212 00d9 07       		.byte	0x7
ARM GAS  /tmp/cc2ibVgV.s 			page 115


 3213 00da 66050000 		.4byte	.LASF17
 3214 00de 07       		.uleb128 0x7
 3215 00df FE060000 		.4byte	.LASF18
 3216 00e3 04       		.byte	0x4
 3217 00e4 4807     		.2byte	0x748
 3218 00e6 C2000000 		.4byte	0xc2
 3219 00ea 01       		.byte	0x1
 3220 00eb 01       		.byte	0x1
 3221 00ec 08       		.uleb128 0x8
 3222 00ed 7C030000 		.4byte	.LASF19
 3223 00f1 05       		.byte	0x5
 3224 00f2 33       		.byte	0x33
 3225 00f3 C7000000 		.4byte	0xc7
 3226 00f7 01       		.byte	0x1
 3227 00f8 01       		.byte	0x1
 3228 00f9 09       		.uleb128 0x9
 3229 00fa A2000000 		.4byte	0xa2
 3230 00fe 09010000 		.4byte	0x109
 3231 0102 0A       		.uleb128 0xa
 3232 0103 D7000000 		.4byte	0xd7
 3233 0107 0F       		.byte	0xf
 3234 0108 00       		.byte	0
 3235 0109 05       		.uleb128 0x5
 3236 010a F9000000 		.4byte	0xf9
 3237 010e 08       		.uleb128 0x8
 3238 010f FA040000 		.4byte	.LASF20
 3239 0113 05       		.byte	0x5
 3240 0114 34       		.byte	0x34
 3241 0115 09010000 		.4byte	0x109
 3242 0119 01       		.byte	0x1
 3243 011a 01       		.byte	0x1
 3244 011b 09       		.uleb128 0x9
 3245 011c A2000000 		.4byte	0xa2
 3246 0120 2B010000 		.4byte	0x12b
 3247 0124 0A       		.uleb128 0xa
 3248 0125 D7000000 		.4byte	0xd7
 3249 0129 07       		.byte	0x7
 3250 012a 00       		.byte	0
 3251 012b 05       		.uleb128 0x5
 3252 012c 1B010000 		.4byte	0x11b
 3253 0130 08       		.uleb128 0x8
 3254 0131 A4000000 		.4byte	.LASF21
 3255 0135 05       		.byte	0x5
 3256 0136 35       		.byte	0x35
 3257 0137 2B010000 		.4byte	0x12b
 3258 013b 01       		.byte	0x1
 3259 013c 01       		.byte	0x1
 3260 013d 0B       		.uleb128 0xb
 3261 013e 10       		.byte	0x10
 3262 013f 06       		.byte	0x6
 3263 0140 1E01     		.2byte	0x11e
 3264 0142 83010000 		.4byte	0x183
 3265 0146 0C       		.uleb128 0xc
 3266 0147 43435200 		.ascii	"CCR\000"
 3267 014b 06       		.byte	0x6
 3268 014c 2001     		.2byte	0x120
 3269 014e D2000000 		.4byte	0xd2
ARM GAS  /tmp/cc2ibVgV.s 			page 116


 3270 0152 02       		.byte	0x2
 3271 0153 23       		.byte	0x23
 3272 0154 00       		.uleb128 0
 3273 0155 0D       		.uleb128 0xd
 3274 0156 C2090000 		.4byte	.LASF22
 3275 015a 06       		.byte	0x6
 3276 015b 2101     		.2byte	0x121
 3277 015d D2000000 		.4byte	0xd2
 3278 0161 02       		.byte	0x2
 3279 0162 23       		.byte	0x23
 3280 0163 04       		.uleb128 0x4
 3281 0164 0D       		.uleb128 0xd
 3282 0165 9E030000 		.4byte	.LASF23
 3283 0169 06       		.byte	0x6
 3284 016a 2201     		.2byte	0x122
 3285 016c D2000000 		.4byte	0xd2
 3286 0170 02       		.byte	0x2
 3287 0171 23       		.byte	0x23
 3288 0172 08       		.uleb128 0x8
 3289 0173 0D       		.uleb128 0xd
 3290 0174 C8090000 		.4byte	.LASF24
 3291 0178 06       		.byte	0x6
 3292 0179 2301     		.2byte	0x123
 3293 017b D2000000 		.4byte	0xd2
 3294 017f 02       		.byte	0x2
 3295 0180 23       		.byte	0x23
 3296 0181 0C       		.uleb128 0xc
 3297 0182 00       		.byte	0
 3298 0183 0E       		.uleb128 0xe
 3299 0184 4D060000 		.4byte	.LASF25
 3300 0188 06       		.byte	0x6
 3301 0189 2401     		.2byte	0x124
 3302 018b 3D010000 		.4byte	0x13d
 3303 018f 0B       		.uleb128 0xb
 3304 0190 08       		.byte	0x8
 3305 0191 06       		.byte	0x6
 3306 0192 2601     		.2byte	0x126
 3307 0194 B7010000 		.4byte	0x1b7
 3308 0198 0C       		.uleb128 0xc
 3309 0199 49535200 		.ascii	"ISR\000"
 3310 019d 06       		.byte	0x6
 3311 019e 2801     		.2byte	0x128
 3312 01a0 D2000000 		.4byte	0xd2
 3313 01a4 02       		.byte	0x2
 3314 01a5 23       		.byte	0x23
 3315 01a6 00       		.uleb128 0
 3316 01a7 0D       		.uleb128 0xd
 3317 01a8 81080000 		.4byte	.LASF26
 3318 01ac 06       		.byte	0x6
 3319 01ad 2901     		.2byte	0x129
 3320 01af D2000000 		.4byte	0xd2
 3321 01b3 02       		.byte	0x2
 3322 01b4 23       		.byte	0x23
 3323 01b5 04       		.uleb128 0x4
 3324 01b6 00       		.byte	0
 3325 01b7 0E       		.uleb128 0xe
 3326 01b8 3A030000 		.4byte	.LASF27
ARM GAS  /tmp/cc2ibVgV.s 			page 117


 3327 01bc 06       		.byte	0x6
 3328 01bd 2A01     		.2byte	0x12a
 3329 01bf 8F010000 		.4byte	0x18f
 3330 01c3 0B       		.uleb128 0xb
 3331 01c4 1C       		.byte	0x1c
 3332 01c5 06       		.byte	0x6
 3333 01c6 F601     		.2byte	0x1f6
 3334 01c8 34020000 		.4byte	0x234
 3335 01cc 0C       		.uleb128 0xc
 3336 01cd 535200   		.ascii	"SR\000"
 3337 01d0 06       		.byte	0x6
 3338 01d1 F801     		.2byte	0x1f8
 3339 01d3 D2000000 		.4byte	0xd2
 3340 01d7 02       		.byte	0x2
 3341 01d8 23       		.byte	0x23
 3342 01d9 00       		.uleb128 0
 3343 01da 0C       		.uleb128 0xc
 3344 01db 445200   		.ascii	"DR\000"
 3345 01de 06       		.byte	0x6
 3346 01df F901     		.2byte	0x1f9
 3347 01e1 D2000000 		.4byte	0xd2
 3348 01e5 02       		.byte	0x2
 3349 01e6 23       		.byte	0x23
 3350 01e7 04       		.uleb128 0x4
 3351 01e8 0C       		.uleb128 0xc
 3352 01e9 42525200 		.ascii	"BRR\000"
 3353 01ed 06       		.byte	0x6
 3354 01ee FA01     		.2byte	0x1fa
 3355 01f0 D2000000 		.4byte	0xd2
 3356 01f4 02       		.byte	0x2
 3357 01f5 23       		.byte	0x23
 3358 01f6 08       		.uleb128 0x8
 3359 01f7 0C       		.uleb128 0xc
 3360 01f8 43523100 		.ascii	"CR1\000"
 3361 01fc 06       		.byte	0x6
 3362 01fd FB01     		.2byte	0x1fb
 3363 01ff D2000000 		.4byte	0xd2
 3364 0203 02       		.byte	0x2
 3365 0204 23       		.byte	0x23
 3366 0205 0C       		.uleb128 0xc
 3367 0206 0C       		.uleb128 0xc
 3368 0207 43523200 		.ascii	"CR2\000"
 3369 020b 06       		.byte	0x6
 3370 020c FC01     		.2byte	0x1fc
 3371 020e D2000000 		.4byte	0xd2
 3372 0212 02       		.byte	0x2
 3373 0213 23       		.byte	0x23
 3374 0214 10       		.uleb128 0x10
 3375 0215 0C       		.uleb128 0xc
 3376 0216 43523300 		.ascii	"CR3\000"
 3377 021a 06       		.byte	0x6
 3378 021b FD01     		.2byte	0x1fd
 3379 021d D2000000 		.4byte	0xd2
 3380 0221 02       		.byte	0x2
 3381 0222 23       		.byte	0x23
 3382 0223 14       		.uleb128 0x14
 3383 0224 0D       		.uleb128 0xd
ARM GAS  /tmp/cc2ibVgV.s 			page 118


 3384 0225 5F010000 		.4byte	.LASF28
 3385 0229 06       		.byte	0x6
 3386 022a FE01     		.2byte	0x1fe
 3387 022c D2000000 		.4byte	0xd2
 3388 0230 02       		.byte	0x2
 3389 0231 23       		.byte	0x23
 3390 0232 18       		.uleb128 0x18
 3391 0233 00       		.byte	0
 3392 0234 0E       		.uleb128 0xe
 3393 0235 A1040000 		.4byte	.LASF29
 3394 0239 06       		.byte	0x6
 3395 023a FF01     		.2byte	0x1ff
 3396 023c C3010000 		.4byte	0x1c3
 3397 0240 0F       		.uleb128 0xf
 3398 0241 01       		.byte	0x1
 3399 0242 37000000 		.4byte	0x37
 3400 0246 07       		.byte	0x7
 3401 0247 98       		.byte	0x98
 3402 0248 59020000 		.4byte	0x259
 3403 024c 10       		.uleb128 0x10
 3404 024d 86060000 		.4byte	.LASF30
 3405 0251 00       		.byte	0
 3406 0252 11       		.uleb128 0x11
 3407 0253 53455400 		.ascii	"SET\000"
 3408 0257 01       		.byte	0x1
 3409 0258 00       		.byte	0
 3410 0259 03       		.uleb128 0x3
 3411 025a 76000000 		.4byte	.LASF31
 3412 025e 07       		.byte	0x7
 3413 025f 9B       		.byte	0x9b
 3414 0260 40020000 		.4byte	0x240
 3415 0264 02       		.uleb128 0x2
 3416 0265 08       		.byte	0x8
 3417 0266 04       		.byte	0x4
 3418 0267 8E050000 		.4byte	.LASF32
 3419 026b 0F       		.uleb128 0xf
 3420 026c 01       		.byte	0x1
 3421 026d 37000000 		.4byte	0x37
 3422 0271 08       		.byte	0x8
 3423 0272 2A       		.byte	0x2a
 3424 0273 90020000 		.4byte	0x290
 3425 0277 10       		.uleb128 0x10
 3426 0278 00040000 		.4byte	.LASF33
 3427 027c 00       		.byte	0
 3428 027d 10       		.uleb128 0x10
 3429 027e 77080000 		.4byte	.LASF34
 3430 0282 01       		.byte	0x1
 3431 0283 10       		.uleb128 0x10
 3432 0284 9B000000 		.4byte	.LASF35
 3433 0288 02       		.byte	0x2
 3434 0289 10       		.uleb128 0x10
 3435 028a 2E030000 		.4byte	.LASF36
 3436 028e 03       		.byte	0x3
 3437 028f 00       		.byte	0
 3438 0290 03       		.uleb128 0x3
 3439 0291 C5040000 		.4byte	.LASF37
 3440 0295 08       		.byte	0x8
ARM GAS  /tmp/cc2ibVgV.s 			page 119


 3441 0296 2F       		.byte	0x2f
 3442 0297 6B020000 		.4byte	0x26b
 3443 029b 0F       		.uleb128 0xf
 3444 029c 01       		.byte	0x1
 3445 029d 37000000 		.4byte	0x37
 3446 02a1 08       		.byte	0x8
 3447 02a2 35       		.byte	0x35
 3448 02a3 B4020000 		.4byte	0x2b4
 3449 02a7 10       		.uleb128 0x10
 3450 02a8 350A0000 		.4byte	.LASF38
 3451 02ac 00       		.byte	0
 3452 02ad 10       		.uleb128 0x10
 3453 02ae B2050000 		.4byte	.LASF39
 3454 02b2 01       		.byte	0x1
 3455 02b3 00       		.byte	0
 3456 02b4 03       		.uleb128 0x3
 3457 02b5 AD010000 		.4byte	.LASF40
 3458 02b9 08       		.byte	0x8
 3459 02ba 38       		.byte	0x38
 3460 02bb 9B020000 		.4byte	0x29b
 3461 02bf 12       		.uleb128 0x12
 3462 02c0 1C       		.byte	0x1c
 3463 02c1 09       		.byte	0x9
 3464 02c2 30       		.byte	0x30
 3465 02c3 2A030000 		.4byte	0x32a
 3466 02c7 13       		.uleb128 0x13
 3467 02c8 16030000 		.4byte	.LASF41
 3468 02cc 09       		.byte	0x9
 3469 02cd 32       		.byte	0x32
 3470 02ce C7000000 		.4byte	0xc7
 3471 02d2 02       		.byte	0x2
 3472 02d3 23       		.byte	0x23
 3473 02d4 00       		.uleb128 0
 3474 02d5 13       		.uleb128 0x13
 3475 02d6 1D020000 		.4byte	.LASF42
 3476 02da 09       		.byte	0x9
 3477 02db 36       		.byte	0x36
 3478 02dc C7000000 		.4byte	0xc7
 3479 02e0 02       		.byte	0x2
 3480 02e1 23       		.byte	0x23
 3481 02e2 04       		.uleb128 0x4
 3482 02e3 13       		.uleb128 0x13
 3483 02e4 94070000 		.4byte	.LASF43
 3484 02e8 09       		.byte	0x9
 3485 02e9 39       		.byte	0x39
 3486 02ea C7000000 		.4byte	0xc7
 3487 02ee 02       		.byte	0x2
 3488 02ef 23       		.byte	0x23
 3489 02f0 08       		.uleb128 0x8
 3490 02f1 13       		.uleb128 0x13
 3491 02f2 9B090000 		.4byte	.LASF44
 3492 02f6 09       		.byte	0x9
 3493 02f7 3C       		.byte	0x3c
 3494 02f8 C7000000 		.4byte	0xc7
 3495 02fc 02       		.byte	0x2
 3496 02fd 23       		.byte	0x23
 3497 02fe 0C       		.uleb128 0xc
ARM GAS  /tmp/cc2ibVgV.s 			page 120


 3498 02ff 13       		.uleb128 0x13
 3499 0300 90040000 		.4byte	.LASF45
 3500 0304 09       		.byte	0x9
 3501 0305 3F       		.byte	0x3f
 3502 0306 C7000000 		.4byte	0xc7
 3503 030a 02       		.byte	0x2
 3504 030b 23       		.byte	0x23
 3505 030c 10       		.uleb128 0x10
 3506 030d 13       		.uleb128 0x13
 3507 030e 97080000 		.4byte	.LASF46
 3508 0312 09       		.byte	0x9
 3509 0313 42       		.byte	0x42
 3510 0314 C7000000 		.4byte	0xc7
 3511 0318 02       		.byte	0x2
 3512 0319 23       		.byte	0x23
 3513 031a 14       		.uleb128 0x14
 3514 031b 13       		.uleb128 0x13
 3515 031c E2090000 		.4byte	.LASF47
 3516 0320 09       		.byte	0x9
 3517 0321 47       		.byte	0x47
 3518 0322 C7000000 		.4byte	0xc7
 3519 0326 02       		.byte	0x2
 3520 0327 23       		.byte	0x23
 3521 0328 18       		.uleb128 0x18
 3522 0329 00       		.byte	0
 3523 032a 03       		.uleb128 0x3
 3524 032b 81000000 		.4byte	.LASF48
 3525 032f 09       		.byte	0x9
 3526 0330 49       		.byte	0x49
 3527 0331 BF020000 		.4byte	0x2bf
 3528 0335 0F       		.uleb128 0xf
 3529 0336 01       		.byte	0x1
 3530 0337 37000000 		.4byte	0x37
 3531 033b 09       		.byte	0x9
 3532 033c 4F       		.byte	0x4f
 3533 033d 5A030000 		.4byte	0x35a
 3534 0341 10       		.uleb128 0x10
 3535 0342 68030000 		.4byte	.LASF49
 3536 0346 00       		.byte	0
 3537 0347 10       		.uleb128 0x10
 3538 0348 28050000 		.4byte	.LASF50
 3539 034c 01       		.byte	0x1
 3540 034d 10       		.uleb128 0x10
 3541 034e B2000000 		.4byte	.LASF51
 3542 0352 02       		.byte	0x2
 3543 0353 10       		.uleb128 0x10
 3544 0354 34090000 		.4byte	.LASF52
 3545 0358 03       		.byte	0x3
 3546 0359 00       		.byte	0
 3547 035a 03       		.uleb128 0x3
 3548 035b 38070000 		.4byte	.LASF53
 3549 035f 09       		.byte	0x9
 3550 0360 54       		.byte	0x54
 3551 0361 35030000 		.4byte	0x335
 3552 0365 14       		.uleb128 0x14
 3553 0366 4F080000 		.4byte	.LASF174
 3554 036a 44       		.byte	0x44
ARM GAS  /tmp/cc2ibVgV.s 			page 121


 3555 036b 09       		.byte	0x9
 3556 036c 6F       		.byte	0x6f
 3557 036d 1A040000 		.4byte	0x41a
 3558 0371 13       		.uleb128 0x13
 3559 0372 7D060000 		.4byte	.LASF54
 3560 0376 09       		.byte	0x9
 3561 0377 71       		.byte	0x71
 3562 0378 1A040000 		.4byte	0x41a
 3563 037c 02       		.byte	0x2
 3564 037d 23       		.byte	0x23
 3565 037e 00       		.uleb128 0
 3566 037f 13       		.uleb128 0x13
 3567 0380 61060000 		.4byte	.LASF55
 3568 0384 09       		.byte	0x9
 3569 0385 73       		.byte	0x73
 3570 0386 2A030000 		.4byte	0x32a
 3571 038a 02       		.byte	0x2
 3572 038b 23       		.byte	0x23
 3573 038c 04       		.uleb128 0x4
 3574 038d 13       		.uleb128 0x13
 3575 038e FE020000 		.4byte	.LASF56
 3576 0392 09       		.byte	0x9
 3577 0393 75       		.byte	0x75
 3578 0394 B4020000 		.4byte	0x2b4
 3579 0398 02       		.byte	0x2
 3580 0399 23       		.byte	0x23
 3581 039a 20       		.uleb128 0x20
 3582 039b 13       		.uleb128 0x13
 3583 039c 91080000 		.4byte	.LASF57
 3584 03a0 09       		.byte	0x9
 3585 03a1 77       		.byte	0x77
 3586 03a2 5A030000 		.4byte	0x35a
 3587 03a6 02       		.byte	0x2
 3588 03a7 23       		.byte	0x23
 3589 03a8 21       		.uleb128 0x21
 3590 03a9 13       		.uleb128 0x13
 3591 03aa D1020000 		.4byte	.LASF58
 3592 03ae 09       		.byte	0x9
 3593 03af 79       		.byte	0x79
 3594 03b0 20040000 		.4byte	0x420
 3595 03b4 02       		.byte	0x2
 3596 03b5 23       		.byte	0x23
 3597 03b6 24       		.uleb128 0x24
 3598 03b7 13       		.uleb128 0x13
 3599 03b8 B50A0000 		.4byte	.LASF59
 3600 03bc 09       		.byte	0x9
 3601 03bd 7B       		.byte	0x7b
 3602 03be 34040000 		.4byte	0x434
 3603 03c2 02       		.byte	0x2
 3604 03c3 23       		.byte	0x23
 3605 03c4 28       		.uleb128 0x28
 3606 03c5 13       		.uleb128 0x13
 3607 03c6 D8010000 		.4byte	.LASF60
 3608 03ca 09       		.byte	0x9
 3609 03cb 7D       		.byte	0x7d
 3610 03cc 34040000 		.4byte	0x434
 3611 03d0 02       		.byte	0x2
ARM GAS  /tmp/cc2ibVgV.s 			page 122


 3612 03d1 23       		.byte	0x23
 3613 03d2 2C       		.uleb128 0x2c
 3614 03d3 13       		.uleb128 0x13
 3615 03d4 CF050000 		.4byte	.LASF61
 3616 03d8 09       		.byte	0x9
 3617 03d9 7F       		.byte	0x7f
 3618 03da 34040000 		.4byte	0x434
 3619 03de 02       		.byte	0x2
 3620 03df 23       		.byte	0x23
 3621 03e0 30       		.uleb128 0x30
 3622 03e1 13       		.uleb128 0x13
 3623 03e2 A30A0000 		.4byte	.LASF62
 3624 03e6 09       		.byte	0x9
 3625 03e7 81       		.byte	0x81
 3626 03e8 34040000 		.4byte	0x434
 3627 03ec 02       		.byte	0x2
 3628 03ed 23       		.byte	0x23
 3629 03ee 34       		.uleb128 0x34
 3630 03ef 13       		.uleb128 0x13
 3631 03f0 86040000 		.4byte	.LASF63
 3632 03f4 09       		.byte	0x9
 3633 03f5 83       		.byte	0x83
 3634 03f6 D2000000 		.4byte	0xd2
 3635 03fa 02       		.byte	0x2
 3636 03fb 23       		.byte	0x23
 3637 03fc 38       		.uleb128 0x38
 3638 03fd 13       		.uleb128 0x13
 3639 03fe 6C040000 		.4byte	.LASF64
 3640 0402 09       		.byte	0x9
 3641 0403 85       		.byte	0x85
 3642 0404 3A040000 		.4byte	0x43a
 3643 0408 02       		.byte	0x2
 3644 0409 23       		.byte	0x23
 3645 040a 3C       		.uleb128 0x3c
 3646 040b 13       		.uleb128 0x13
 3647 040c A9020000 		.4byte	.LASF65
 3648 0410 09       		.byte	0x9
 3649 0411 87       		.byte	0x87
 3650 0412 C7000000 		.4byte	0xc7
 3651 0416 02       		.byte	0x2
 3652 0417 23       		.byte	0x23
 3653 0418 40       		.uleb128 0x40
 3654 0419 00       		.byte	0
 3655 041a 15       		.uleb128 0x15
 3656 041b 04       		.byte	0x4
 3657 041c 83010000 		.4byte	0x183
 3658 0420 16       		.uleb128 0x16
 3659 0421 04       		.byte	0x4
 3660 0422 17       		.uleb128 0x17
 3661 0423 01       		.byte	0x1
 3662 0424 2E040000 		.4byte	0x42e
 3663 0428 18       		.uleb128 0x18
 3664 0429 2E040000 		.4byte	0x42e
 3665 042d 00       		.byte	0
 3666 042e 15       		.uleb128 0x15
 3667 042f 04       		.byte	0x4
 3668 0430 65030000 		.4byte	0x365
ARM GAS  /tmp/cc2ibVgV.s 			page 123


 3669 0434 15       		.uleb128 0x15
 3670 0435 04       		.byte	0x4
 3671 0436 22040000 		.4byte	0x422
 3672 043a 15       		.uleb128 0x15
 3673 043b 04       		.byte	0x4
 3674 043c B7010000 		.4byte	0x1b7
 3675 0440 03       		.uleb128 0x3
 3676 0441 BD050000 		.4byte	.LASF66
 3677 0445 09       		.byte	0x9
 3678 0446 89       		.byte	0x89
 3679 0447 65030000 		.4byte	0x365
 3680 044b 15       		.uleb128 0x15
 3681 044c 04       		.byte	0x4
 3682 044d 40040000 		.4byte	0x440
 3683 0451 15       		.uleb128 0x15
 3684 0452 04       		.byte	0x4
 3685 0453 97000000 		.4byte	0x97
 3686 0457 15       		.uleb128 0x15
 3687 0458 04       		.byte	0x4
 3688 0459 34020000 		.4byte	0x234
 3689 045d 12       		.uleb128 0x12
 3690 045e 18       		.byte	0x18
 3691 045f 0A       		.byte	0xa
 3692 0460 2E       		.byte	0x2e
 3693 0461 BA040000 		.4byte	0x4ba
 3694 0465 13       		.uleb128 0x13
 3695 0466 64010000 		.4byte	.LASF67
 3696 046a 0A       		.byte	0xa
 3697 046b 30       		.byte	0x30
 3698 046c C7000000 		.4byte	0xc7
 3699 0470 02       		.byte	0x2
 3700 0471 23       		.byte	0x23
 3701 0472 00       		.uleb128 0
 3702 0473 13       		.uleb128 0x13
 3703 0474 6C080000 		.4byte	.LASF68
 3704 0478 0A       		.byte	0xa
 3705 0479 35       		.byte	0x35
 3706 047a C7000000 		.4byte	0xc7
 3707 047e 02       		.byte	0x2
 3708 047f 23       		.byte	0x23
 3709 0480 04       		.uleb128 0x4
 3710 0481 13       		.uleb128 0x13
 3711 0482 97030000 		.4byte	.LASF69
 3712 0486 0A       		.byte	0xa
 3713 0487 38       		.byte	0x38
 3714 0488 C7000000 		.4byte	0xc7
 3715 048c 02       		.byte	0x2
 3716 048d 23       		.byte	0x23
 3717 048e 08       		.uleb128 0x8
 3718 048f 13       		.uleb128 0x13
 3719 0490 97080000 		.4byte	.LASF46
 3720 0494 0A       		.byte	0xa
 3721 0495 3F       		.byte	0x3f
 3722 0496 C7000000 		.4byte	0xc7
 3723 049a 02       		.byte	0x2
 3724 049b 23       		.byte	0x23
 3725 049c 0C       		.uleb128 0xc
ARM GAS  /tmp/cc2ibVgV.s 			page 124


 3726 049d 13       		.uleb128 0x13
 3727 049e 07090000 		.4byte	.LASF70
 3728 04a2 0A       		.byte	0xa
 3729 04a3 42       		.byte	0x42
 3730 04a4 97000000 		.4byte	0x97
 3731 04a8 02       		.byte	0x2
 3732 04a9 23       		.byte	0x23
 3733 04aa 10       		.uleb128 0x10
 3734 04ab 13       		.uleb128 0x13
 3735 04ac 5D050000 		.4byte	.LASF71
 3736 04b0 0A       		.byte	0xa
 3737 04b1 47       		.byte	0x47
 3738 04b2 C7000000 		.4byte	0xc7
 3739 04b6 02       		.byte	0x2
 3740 04b7 23       		.byte	0x23
 3741 04b8 14       		.uleb128 0x14
 3742 04b9 00       		.byte	0
 3743 04ba 03       		.uleb128 0x3
 3744 04bb BD010000 		.4byte	.LASF72
 3745 04bf 0A       		.byte	0xa
 3746 04c0 49       		.byte	0x49
 3747 04c1 5D040000 		.4byte	0x45d
 3748 04c5 0F       		.uleb128 0xf
 3749 04c6 01       		.byte	0x1
 3750 04c7 37000000 		.4byte	0x37
 3751 04cb 0A       		.byte	0xa
 3752 04cc 73       		.byte	0x73
 3753 04cd 02050000 		.4byte	0x502
 3754 04d1 10       		.uleb128 0x10
 3755 04d2 D7040000 		.4byte	.LASF73
 3756 04d6 00       		.byte	0
 3757 04d7 10       		.uleb128 0x10
 3758 04d8 24060000 		.4byte	.LASF74
 3759 04dc 20       		.byte	0x20
 3760 04dd 10       		.uleb128 0x10
 3761 04de 82020000 		.4byte	.LASF75
 3762 04e2 24       		.byte	0x24
 3763 04e3 10       		.uleb128 0x10
 3764 04e4 FE090000 		.4byte	.LASF76
 3765 04e8 21       		.byte	0x21
 3766 04e9 10       		.uleb128 0x10
 3767 04ea 21070000 		.4byte	.LASF77
 3768 04ee 22       		.byte	0x22
 3769 04ef 10       		.uleb128 0x10
 3770 04f0 27020000 		.4byte	.LASF78
 3771 04f4 23       		.byte	0x23
 3772 04f5 10       		.uleb128 0x10
 3773 04f6 D8020000 		.4byte	.LASF79
 3774 04fa A0       		.byte	0xa0
 3775 04fb 10       		.uleb128 0x10
 3776 04fc 53030000 		.4byte	.LASF80
 3777 0500 E0       		.byte	0xe0
 3778 0501 00       		.byte	0
 3779 0502 03       		.uleb128 0x3
 3780 0503 EA030000 		.4byte	.LASF81
 3781 0507 0A       		.byte	0xa
 3782 0508 85       		.byte	0x85
ARM GAS  /tmp/cc2ibVgV.s 			page 125


 3783 0509 C5040000 		.4byte	0x4c5
 3784 050d 06       		.uleb128 0x6
 3785 050e 02050000 		.4byte	0x502
 3786 0512 12       		.uleb128 0x12
 3787 0513 3C       		.byte	0x3c
 3788 0514 0A       		.byte	0xa
 3789 0515 8D       		.byte	0x8d
 3790 0516 DF050000 		.4byte	0x5df
 3791 051a 13       		.uleb128 0x13
 3792 051b 7D060000 		.4byte	.LASF54
 3793 051f 0A       		.byte	0xa
 3794 0520 90       		.byte	0x90
 3795 0521 57040000 		.4byte	0x457
 3796 0525 02       		.byte	0x2
 3797 0526 23       		.byte	0x23
 3798 0527 00       		.uleb128 0
 3799 0528 13       		.uleb128 0x13
 3800 0529 61060000 		.4byte	.LASF55
 3801 052d 0A       		.byte	0xa
 3802 052e 92       		.byte	0x92
 3803 052f BA040000 		.4byte	0x4ba
 3804 0533 02       		.byte	0x2
 3805 0534 23       		.byte	0x23
 3806 0535 04       		.uleb128 0x4
 3807 0536 13       		.uleb128 0x13
 3808 0537 F6010000 		.4byte	.LASF82
 3809 053b 0A       		.byte	0xa
 3810 053c 94       		.byte	0x94
 3811 053d 51040000 		.4byte	0x451
 3812 0541 02       		.byte	0x2
 3813 0542 23       		.byte	0x23
 3814 0543 1C       		.uleb128 0x1c
 3815 0544 13       		.uleb128 0x13
 3816 0545 4E040000 		.4byte	.LASF83
 3817 0549 0A       		.byte	0xa
 3818 054a 96       		.byte	0x96
 3819 054b A7000000 		.4byte	0xa7
 3820 054f 02       		.byte	0x2
 3821 0550 23       		.byte	0x23
 3822 0551 20       		.uleb128 0x20
 3823 0552 13       		.uleb128 0x13
 3824 0553 39010000 		.4byte	.LASF84
 3825 0557 0A       		.byte	0xa
 3826 0558 98       		.byte	0x98
 3827 0559 B2000000 		.4byte	0xb2
 3828 055d 02       		.byte	0x2
 3829 055e 23       		.byte	0x23
 3830 055f 22       		.uleb128 0x22
 3831 0560 13       		.uleb128 0x13
 3832 0561 EB090000 		.4byte	.LASF85
 3833 0565 0A       		.byte	0xa
 3834 0566 9A       		.byte	0x9a
 3835 0567 51040000 		.4byte	0x451
 3836 056b 02       		.byte	0x2
 3837 056c 23       		.byte	0x23
 3838 056d 24       		.uleb128 0x24
 3839 056e 13       		.uleb128 0x13
ARM GAS  /tmp/cc2ibVgV.s 			page 126


 3840 056f 18040000 		.4byte	.LASF86
 3841 0573 0A       		.byte	0xa
 3842 0574 9C       		.byte	0x9c
 3843 0575 A7000000 		.4byte	0xa7
 3844 0579 02       		.byte	0x2
 3845 057a 23       		.byte	0x23
 3846 057b 28       		.uleb128 0x28
 3847 057c 13       		.uleb128 0x13
 3848 057d 150A0000 		.4byte	.LASF87
 3849 0581 0A       		.byte	0xa
 3850 0582 9E       		.byte	0x9e
 3851 0583 B2000000 		.4byte	0xb2
 3852 0587 02       		.byte	0x2
 3853 0588 23       		.byte	0x23
 3854 0589 2A       		.uleb128 0x2a
 3855 058a 13       		.uleb128 0x13
 3856 058b 09060000 		.4byte	.LASF88
 3857 058f 0A       		.byte	0xa
 3858 0590 A0       		.byte	0xa0
 3859 0591 4B040000 		.4byte	0x44b
 3860 0595 02       		.byte	0x2
 3861 0596 23       		.byte	0x23
 3862 0597 2C       		.uleb128 0x2c
 3863 0598 13       		.uleb128 0x13
 3864 0599 27030000 		.4byte	.LASF89
 3865 059d 0A       		.byte	0xa
 3866 059e A2       		.byte	0xa2
 3867 059f 4B040000 		.4byte	0x44b
 3868 05a3 02       		.byte	0x2
 3869 05a4 23       		.byte	0x23
 3870 05a5 30       		.uleb128 0x30
 3871 05a6 13       		.uleb128 0x13
 3872 05a7 FE020000 		.4byte	.LASF56
 3873 05ab 0A       		.byte	0xa
 3874 05ac A4       		.byte	0xa4
 3875 05ad B4020000 		.4byte	0x2b4
 3876 05b1 02       		.byte	0x2
 3877 05b2 23       		.byte	0x23
 3878 05b3 34       		.uleb128 0x34
 3879 05b4 13       		.uleb128 0x13
 3880 05b5 45000000 		.4byte	.LASF90
 3881 05b9 0A       		.byte	0xa
 3882 05ba A6       		.byte	0xa6
 3883 05bb 0D050000 		.4byte	0x50d
 3884 05bf 02       		.byte	0x2
 3885 05c0 23       		.byte	0x23
 3886 05c1 35       		.uleb128 0x35
 3887 05c2 13       		.uleb128 0x13
 3888 05c3 5B0A0000 		.4byte	.LASF91
 3889 05c7 0A       		.byte	0xa
 3890 05c8 AA       		.byte	0xaa
 3891 05c9 0D050000 		.4byte	0x50d
 3892 05cd 02       		.byte	0x2
 3893 05ce 23       		.byte	0x23
 3894 05cf 36       		.uleb128 0x36
 3895 05d0 13       		.uleb128 0x13
 3896 05d1 86040000 		.4byte	.LASF63
ARM GAS  /tmp/cc2ibVgV.s 			page 127


 3897 05d5 0A       		.byte	0xa
 3898 05d6 AD       		.byte	0xad
 3899 05d7 D2000000 		.4byte	0xd2
 3900 05db 02       		.byte	0x2
 3901 05dc 23       		.byte	0x23
 3902 05dd 38       		.uleb128 0x38
 3903 05de 00       		.byte	0
 3904 05df 03       		.uleb128 0x3
 3905 05e0 93010000 		.4byte	.LASF92
 3906 05e4 0A       		.byte	0xa
 3907 05e5 C6       		.byte	0xc6
 3908 05e6 12050000 		.4byte	0x512
 3909 05ea 0F       		.uleb128 0xf
 3910 05eb 01       		.byte	0x1
 3911 05ec 37000000 		.4byte	0x37
 3912 05f0 0B       		.byte	0xb
 3913 05f1 33       		.byte	0x33
 3914 05f2 0F060000 		.4byte	0x60f
 3915 05f6 10       		.uleb128 0x10
 3916 05f7 96020000 		.4byte	.LASF93
 3917 05fb 64       		.byte	0x64
 3918 05fc 10       		.uleb128 0x10
 3919 05fd BB080000 		.4byte	.LASF94
 3920 0601 0A       		.byte	0xa
 3921 0602 10       		.uleb128 0x10
 3922 0603 D7030000 		.4byte	.LASF95
 3923 0607 01       		.byte	0x1
 3924 0608 10       		.uleb128 0x10
 3925 0609 D9080000 		.4byte	.LASF96
 3926 060d 01       		.byte	0x1
 3927 060e 00       		.byte	0
 3928 060f 03       		.uleb128 0x3
 3929 0610 31000000 		.4byte	.LASF97
 3930 0614 0B       		.byte	0xb
 3931 0615 38       		.byte	0x38
 3932 0616 EA050000 		.4byte	0x5ea
 3933 061a 08       		.uleb128 0x8
 3934 061b 86080000 		.4byte	.LASF98
 3935 061f 0B       		.byte	0xb
 3936 0620 3D       		.byte	0x3d
 3937 0621 C7000000 		.4byte	0xc7
 3938 0625 01       		.byte	0x1
 3939 0626 01       		.byte	0x1
 3940 0627 08       		.uleb128 0x8
 3941 0628 8C030000 		.4byte	.LASF99
 3942 062c 0B       		.byte	0xb
 3943 062d 3E       		.byte	0x3e
 3944 062e 0F060000 		.4byte	0x60f
 3945 0632 01       		.byte	0x1
 3946 0633 01       		.byte	0x1
 3947 0634 19       		.uleb128 0x19
 3948 0635 FA050000 		.4byte	.LASF113
 3949 0639 01       		.byte	0x1
 3950 063a 290A     		.2byte	0xa29
 3951 063c 01       		.byte	0x1
 3952 063d 01       		.byte	0x1
 3953 063e 5B060000 		.4byte	0x65b
ARM GAS  /tmp/cc2ibVgV.s 			page 128


 3954 0642 1A       		.uleb128 0x1a
 3955 0643 C60A0000 		.4byte	.LASF100
 3956 0647 01       		.byte	0x1
 3957 0648 290A     		.2byte	0xa29
 3958 064a 5B060000 		.4byte	0x65b
 3959 064e 1B       		.uleb128 0x1b
 3960 064f 57070000 		.4byte	.LASF101
 3961 0653 01       		.byte	0x1
 3962 0654 2B0A     		.2byte	0xa2b
 3963 0656 C7000000 		.4byte	0xc7
 3964 065a 00       		.byte	0
 3965 065b 15       		.uleb128 0x15
 3966 065c 04       		.byte	0x4
 3967 065d DF050000 		.4byte	0x5df
 3968 0661 1C       		.uleb128 0x1c
 3969 0662 29010000 		.4byte	.LASF103
 3970 0666 01       		.byte	0x1
 3971 0667 E009     		.2byte	0x9e0
 3972 0669 01       		.byte	0x1
 3973 066a 90020000 		.4byte	0x290
 3974 066e 01       		.byte	0x1
 3975 066f 98060000 		.4byte	0x698
 3976 0673 1A       		.uleb128 0x1a
 3977 0674 C60A0000 		.4byte	.LASF100
 3978 0678 01       		.byte	0x1
 3979 0679 E009     		.2byte	0x9e0
 3980 067b 5B060000 		.4byte	0x65b
 3981 067f 1D       		.uleb128 0x1d
 3982 0680 746D7000 		.ascii	"tmp\000"
 3983 0684 01       		.byte	0x1
 3984 0685 E209     		.2byte	0x9e2
 3985 0687 98060000 		.4byte	0x698
 3986 068b 1B       		.uleb128 0x1b
 3987 068c 00090000 		.4byte	.LASF102
 3988 0690 01       		.byte	0x1
 3989 0691 E309     		.2byte	0x9e3
 3990 0693 A7000000 		.4byte	0xa7
 3991 0697 00       		.byte	0
 3992 0698 15       		.uleb128 0x15
 3993 0699 04       		.byte	0x4
 3994 069a A7000000 		.4byte	0xa7
 3995 069e 1C       		.uleb128 0x1c
 3996 069f A7080000 		.4byte	.LASF104
 3997 06a3 01       		.byte	0x1
 3998 06a4 C409     		.2byte	0x9c4
 3999 06a6 01       		.byte	0x1
 4000 06a7 90020000 		.4byte	0x290
 4001 06ab 01       		.byte	0x1
 4002 06ac BD060000 		.4byte	0x6bd
 4003 06b0 1A       		.uleb128 0x1a
 4004 06b1 C60A0000 		.4byte	.LASF100
 4005 06b5 01       		.byte	0x1
 4006 06b6 C409     		.2byte	0x9c4
 4007 06b8 5B060000 		.4byte	0x65b
 4008 06bc 00       		.byte	0
 4009 06bd 1C       		.uleb128 0x1c
 4010 06be B6020000 		.4byte	.LASF105
ARM GAS  /tmp/cc2ibVgV.s 			page 129


 4011 06c2 01       		.byte	0x1
 4012 06c3 9409     		.2byte	0x994
 4013 06c5 01       		.byte	0x1
 4014 06c6 90020000 		.4byte	0x290
 4015 06ca 01       		.byte	0x1
 4016 06cb E8060000 		.4byte	0x6e8
 4017 06cf 1A       		.uleb128 0x1a
 4018 06d0 C60A0000 		.4byte	.LASF100
 4019 06d4 01       		.byte	0x1
 4020 06d5 9409     		.2byte	0x994
 4021 06d7 5B060000 		.4byte	0x65b
 4022 06db 1D       		.uleb128 0x1d
 4023 06dc 746D7000 		.ascii	"tmp\000"
 4024 06e0 01       		.byte	0x1
 4025 06e1 9609     		.2byte	0x996
 4026 06e3 98060000 		.4byte	0x698
 4027 06e7 00       		.byte	0
 4028 06e8 1E       		.uleb128 0x1e
 4029 06e9 00000000 		.4byte	.LASF106
 4030 06ed 01       		.byte	0x1
 4031 06ee 7B09     		.2byte	0x97b
 4032 06f0 01       		.byte	0x1
 4033 06f1 C00A0000 		.4byte	.LFB107
 4034 06f5 D40A0000 		.4byte	.LFE107
 4035 06f9 00000000 		.4byte	.LLST111
 4036 06fd 01       		.byte	0x1
 4037 06fe 2C070000 		.4byte	0x72c
 4038 0702 1F       		.uleb128 0x1f
 4039 0703 3C050000 		.4byte	.LASF108
 4040 0707 01       		.byte	0x1
 4041 0708 7B09     		.2byte	0x97b
 4042 070a 4B040000 		.4byte	0x44b
 4043 070e 20000000 		.4byte	.LLST112
 4044 0712 20       		.uleb128 0x20
 4045 0713 C60A0000 		.4byte	.LASF100
 4046 0717 01       		.byte	0x1
 4047 0718 7D09     		.2byte	0x97d
 4048 071a 5B060000 		.4byte	0x65b
 4049 071e 41000000 		.4byte	.LLST113
 4050 0722 21       		.uleb128 0x21
 4051 0723 D20A0000 		.4byte	.LVL255
 4052 0727 E20A0000 		.4byte	0xae2
 4053 072b 00       		.byte	0
 4054 072c 1E       		.uleb128 0x1e
 4055 072d 01020000 		.4byte	.LASF107
 4056 0731 01       		.byte	0x1
 4057 0732 6009     		.2byte	0x960
 4058 0734 01       		.byte	0x1
 4059 0735 540A0000 		.4byte	.LFB106
 4060 0739 680A0000 		.4byte	.LFE106
 4061 073d 54000000 		.4byte	.LLST106
 4062 0741 01       		.byte	0x1
 4063 0742 70070000 		.4byte	0x770
 4064 0746 1F       		.uleb128 0x1f
 4065 0747 3C050000 		.4byte	.LASF108
 4066 074b 01       		.byte	0x1
 4067 074c 6009     		.2byte	0x960
ARM GAS  /tmp/cc2ibVgV.s 			page 130


 4068 074e 4B040000 		.4byte	0x44b
 4069 0752 74000000 		.4byte	.LLST107
 4070 0756 20       		.uleb128 0x20
 4071 0757 C60A0000 		.4byte	.LASF100
 4072 075b 01       		.byte	0x1
 4073 075c 6209     		.2byte	0x962
 4074 075e 5B060000 		.4byte	0x65b
 4075 0762 95000000 		.4byte	.LLST108
 4076 0766 21       		.uleb128 0x21
 4077 0767 660A0000 		.4byte	.LVL244
 4078 076b FE0A0000 		.4byte	0xafe
 4079 076f 00       		.byte	0
 4080 0770 1E       		.uleb128 0x1e
 4081 0771 E6060000 		.4byte	.LASF109
 4082 0775 01       		.byte	0x1
 4083 0776 3409     		.2byte	0x934
 4084 0778 01       		.byte	0x1
 4085 0779 B4090000 		.4byte	.LFB105
 4086 077d DC090000 		.4byte	.LFE105
 4087 0781 A8000000 		.4byte	.LLST98
 4088 0785 01       		.byte	0x1
 4089 0786 B4070000 		.4byte	0x7b4
 4090 078a 1F       		.uleb128 0x1f
 4091 078b 3C050000 		.4byte	.LASF108
 4092 078f 01       		.byte	0x1
 4093 0790 3409     		.2byte	0x934
 4094 0792 4B040000 		.4byte	0x44b
 4095 0796 C8000000 		.4byte	.LLST99
 4096 079a 20       		.uleb128 0x20
 4097 079b C60A0000 		.4byte	.LASF100
 4098 079f 01       		.byte	0x1
 4099 07a0 3609     		.2byte	0x936
 4100 07a2 5B060000 		.4byte	0x65b
 4101 07a6 E9000000 		.4byte	.LLST100
 4102 07aa 21       		.uleb128 0x21
 4103 07ab DA090000 		.4byte	.LVL231
 4104 07af 190B0000 		.4byte	0xb19
 4105 07b3 00       		.byte	0
 4106 07b4 1E       		.uleb128 0x1e
 4107 07b5 A1060000 		.4byte	.LASF110
 4108 07b9 01       		.byte	0x1
 4109 07ba 0809     		.2byte	0x908
 4110 07bc 01       		.byte	0x1
 4111 07bd DC090000 		.4byte	.LFB104
 4112 07c1 040A0000 		.4byte	.LFE104
 4113 07c5 FC000000 		.4byte	.LLST101
 4114 07c9 01       		.byte	0x1
 4115 07ca F8070000 		.4byte	0x7f8
 4116 07ce 1F       		.uleb128 0x1f
 4117 07cf 3C050000 		.4byte	.LASF108
 4118 07d3 01       		.byte	0x1
 4119 07d4 0809     		.2byte	0x908
 4120 07d6 4B040000 		.4byte	0x44b
 4121 07da 1C010000 		.4byte	.LLST102
 4122 07de 20       		.uleb128 0x20
 4123 07df C60A0000 		.4byte	.LASF100
 4124 07e3 01       		.byte	0x1
ARM GAS  /tmp/cc2ibVgV.s 			page 131


 4125 07e4 0A09     		.2byte	0x90a
 4126 07e6 5B060000 		.4byte	0x65b
 4127 07ea 3D010000 		.4byte	.LLST103
 4128 07ee 21       		.uleb128 0x21
 4129 07ef 020A0000 		.4byte	.LVL234
 4130 07f3 190B0000 		.4byte	0xb19
 4131 07f7 00       		.byte	0
 4132 07f8 1E       		.uleb128 0x1e
 4133 07f9 CD090000 		.4byte	.LASF111
 4134 07fd 01       		.byte	0x1
 4135 07fe F108     		.2byte	0x8f1
 4136 0800 01       		.byte	0x1
 4137 0801 FC080000 		.4byte	.LFB103
 4138 0805 0C090000 		.4byte	.LFE103
 4139 0809 50010000 		.4byte	.LLST92
 4140 080d 01       		.byte	0x1
 4141 080e 3C080000 		.4byte	0x83c
 4142 0812 1F       		.uleb128 0x1f
 4143 0813 3C050000 		.4byte	.LASF108
 4144 0817 01       		.byte	0x1
 4145 0818 F108     		.2byte	0x8f1
 4146 081a 4B040000 		.4byte	0x44b
 4147 081e 70010000 		.4byte	.LLST93
 4148 0822 20       		.uleb128 0x20
 4149 0823 C60A0000 		.4byte	.LASF100
 4150 0827 01       		.byte	0x1
 4151 0828 F308     		.2byte	0x8f3
 4152 082a 5B060000 		.4byte	0x65b
 4153 082e 91010000 		.4byte	.LLST94
 4154 0832 21       		.uleb128 0x21
 4155 0833 0A090000 		.4byte	.LVL217
 4156 0837 340B0000 		.4byte	0xb34
 4157 083b 00       		.byte	0
 4158 083c 22       		.uleb128 0x22
 4159 083d 6F050000 		.4byte	.LASF112
 4160 0841 01       		.byte	0x1
 4161 0842 E108     		.2byte	0x8e1
 4162 0844 01       		.byte	0x1
 4163 0845 00000000 		.4byte	.LFB102
 4164 0849 1A000000 		.4byte	.LFE102
 4165 084d 02       		.byte	0x2
 4166 084e 7D       		.byte	0x7d
 4167 084f 00       		.sleb128 0
 4168 0850 01       		.byte	0x1
 4169 0851 64080000 		.4byte	0x864
 4170 0855 23       		.uleb128 0x23
 4171 0856 C60A0000 		.4byte	.LASF100
 4172 085a 01       		.byte	0x1
 4173 085b E108     		.2byte	0x8e1
 4174 085d 5B060000 		.4byte	0x65b
 4175 0861 01       		.byte	0x1
 4176 0862 50       		.byte	0x50
 4177 0863 00       		.byte	0
 4178 0864 19       		.uleb128 0x19
 4179 0865 59040000 		.4byte	.LASF114
 4180 0869 01       		.byte	0x1
 4181 086a D308     		.2byte	0x8d3
ARM GAS  /tmp/cc2ibVgV.s 			page 132


 4182 086c 01       		.byte	0x1
 4183 086d 01       		.byte	0x1
 4184 086e 7F080000 		.4byte	0x87f
 4185 0872 1A       		.uleb128 0x1a
 4186 0873 C60A0000 		.4byte	.LASF100
 4187 0877 01       		.byte	0x1
 4188 0878 D308     		.2byte	0x8d3
 4189 087a 5B060000 		.4byte	0x65b
 4190 087e 00       		.byte	0
 4191 087f 1C       		.uleb128 0x1c
 4192 0880 7F090000 		.4byte	.LASF115
 4193 0884 01       		.byte	0x1
 4194 0885 B308     		.2byte	0x8b3
 4195 0887 01       		.byte	0x1
 4196 0888 90020000 		.4byte	0x290
 4197 088c 01       		.byte	0x1
 4198 088d CE080000 		.4byte	0x8ce
 4199 0891 1A       		.uleb128 0x1a
 4200 0892 C60A0000 		.4byte	.LASF100
 4201 0896 01       		.byte	0x1
 4202 0897 B308     		.2byte	0x8b3
 4203 0899 5B060000 		.4byte	0x65b
 4204 089d 1A       		.uleb128 0x1a
 4205 089e 41020000 		.4byte	.LASF116
 4206 08a2 01       		.byte	0x1
 4207 08a3 B308     		.2byte	0x8b3
 4208 08a5 C7000000 		.4byte	0xc7
 4209 08a9 1A       		.uleb128 0x1a
 4210 08aa 420A0000 		.4byte	.LASF117
 4211 08ae 01       		.byte	0x1
 4212 08af B308     		.2byte	0x8b3
 4213 08b1 59020000 		.4byte	0x259
 4214 08b5 1A       		.uleb128 0x1a
 4215 08b6 C7020000 		.4byte	.LASF118
 4216 08ba 01       		.byte	0x1
 4217 08bb B308     		.2byte	0x8b3
 4218 08bd C7000000 		.4byte	0xc7
 4219 08c1 1A       		.uleb128 0x1a
 4220 08c2 0E030000 		.4byte	.LASF119
 4221 08c6 01       		.byte	0x1
 4222 08c7 B308     		.2byte	0x8b3
 4223 08c9 C7000000 		.4byte	0xc7
 4224 08cd 00       		.byte	0
 4225 08ce 1E       		.uleb128 0x1e
 4226 08cf F0070000 		.4byte	.LASF120
 4227 08d3 01       		.byte	0x1
 4228 08d4 8908     		.2byte	0x889
 4229 08d6 01       		.byte	0x1
 4230 08d7 66070000 		.4byte	.LFB99
 4231 08db B4070000 		.4byte	.LFE99
 4232 08df A4010000 		.4byte	.LLST77
 4233 08e3 01       		.byte	0x1
 4234 08e4 54090000 		.4byte	0x954
 4235 08e8 1F       		.uleb128 0x1f
 4236 08e9 3C050000 		.4byte	.LASF108
 4237 08ed 01       		.byte	0x1
 4238 08ee 8908     		.2byte	0x889
ARM GAS  /tmp/cc2ibVgV.s 			page 133


 4239 08f0 4B040000 		.4byte	0x44b
 4240 08f4 C4010000 		.4byte	.LLST78
 4241 08f8 20       		.uleb128 0x20
 4242 08f9 44080000 		.4byte	.LASF121
 4243 08fd 01       		.byte	0x1
 4244 08fe 8B08     		.2byte	0x88b
 4245 0900 C7000000 		.4byte	0xc7
 4246 0904 E5010000 		.4byte	.LLST79
 4247 0908 20       		.uleb128 0x20
 4248 0909 C60A0000 		.4byte	.LASF100
 4249 090d 01       		.byte	0x1
 4250 090e 8C08     		.2byte	0x88c
 4251 0910 5B060000 		.4byte	0x65b
 4252 0914 23020000 		.4byte	.LLST80
 4253 0918 24       		.uleb128 0x24
 4254 0919 64080000 		.4byte	0x864
 4255 091d 7E070000 		.4byte	.LBB29
 4256 0921 8C070000 		.4byte	.LBE29
 4257 0925 01       		.byte	0x1
 4258 0926 9308     		.2byte	0x893
 4259 0928 36090000 		.4byte	0x936
 4260 092c 25       		.uleb128 0x25
 4261 092d 72080000 		.4byte	0x872
 4262 0931 36020000 		.4byte	.LLST81
 4263 0935 00       		.byte	0
 4264 0936 26       		.uleb128 0x26
 4265 0937 A4070000 		.4byte	.LVL175
 4266 093b 3C080000 		.4byte	0x83c
 4267 093f 4A090000 		.4byte	0x94a
 4268 0943 27       		.uleb128 0x27
 4269 0944 01       		.byte	0x1
 4270 0945 50       		.byte	0x50
 4271 0946 02       		.byte	0x2
 4272 0947 70       		.byte	0x70
 4273 0948 00       		.sleb128 0
 4274 0949 00       		.byte	0
 4275 094a 21       		.uleb128 0x21
 4276 094b B2070000 		.4byte	.LVL176
 4277 094f 340B0000 		.4byte	0xb34
 4278 0953 00       		.byte	0
 4279 0954 1E       		.uleb128 0x1e
 4280 0955 9A050000 		.4byte	.LASF122
 4281 0959 01       		.byte	0x1
 4282 095a 7608     		.2byte	0x876
 4283 095c 01       		.byte	0x1
 4284 095d 5A070000 		.4byte	.LFB98
 4285 0961 64070000 		.4byte	.LFE98
 4286 0965 49020000 		.4byte	.LLST74
 4287 0969 01       		.byte	0x1
 4288 096a 98090000 		.4byte	0x998
 4289 096e 1F       		.uleb128 0x1f
 4290 096f 3C050000 		.4byte	.LASF108
 4291 0973 01       		.byte	0x1
 4292 0974 7608     		.2byte	0x876
 4293 0976 4B040000 		.4byte	0x44b
 4294 097a 69020000 		.4byte	.LLST75
 4295 097e 20       		.uleb128 0x20
ARM GAS  /tmp/cc2ibVgV.s 			page 134


 4296 097f C60A0000 		.4byte	.LASF100
 4297 0983 01       		.byte	0x1
 4298 0984 7808     		.2byte	0x878
 4299 0986 5B060000 		.4byte	0x65b
 4300 098a 8A020000 		.4byte	.LLST76
 4301 098e 21       		.uleb128 0x21
 4302 098f 62070000 		.4byte	.LVL165
 4303 0993 4F0B0000 		.4byte	0xb4f
 4304 0997 00       		.byte	0
 4305 0998 1E       		.uleb128 0x1e
 4306 0999 10060000 		.4byte	.LASF123
 4307 099d 01       		.byte	0x1
 4308 099e 5208     		.2byte	0x852
 4309 09a0 01       		.byte	0x1
 4310 09a1 A6060000 		.4byte	.LFB97
 4311 09a5 DE060000 		.4byte	.LFE97
 4312 09a9 AD020000 		.4byte	.LLST66
 4313 09ad 01       		.byte	0x1
 4314 09ae DC090000 		.4byte	0x9dc
 4315 09b2 1F       		.uleb128 0x1f
 4316 09b3 3C050000 		.4byte	.LASF108
 4317 09b7 01       		.byte	0x1
 4318 09b8 5208     		.2byte	0x852
 4319 09ba 4B040000 		.4byte	0x44b
 4320 09be CD020000 		.4byte	.LLST67
 4321 09c2 20       		.uleb128 0x20
 4322 09c3 C60A0000 		.4byte	.LASF100
 4323 09c7 01       		.byte	0x1
 4324 09c8 5408     		.2byte	0x854
 4325 09ca 5B060000 		.4byte	0x65b
 4326 09ce EE020000 		.4byte	.LLST68
 4327 09d2 21       		.uleb128 0x21
 4328 09d3 DC060000 		.4byte	.LVL145
 4329 09d7 6A0B0000 		.4byte	0xb6a
 4330 09db 00       		.byte	0
 4331 09dc 1E       		.uleb128 0x1e
 4332 09dd 4A090000 		.4byte	.LASF124
 4333 09e1 01       		.byte	0x1
 4334 09e2 3F08     		.2byte	0x83f
 4335 09e4 01       		.byte	0x1
 4336 09e5 9A060000 		.4byte	.LFB96
 4337 09e9 A4060000 		.4byte	.LFE96
 4338 09ed 01030000 		.4byte	.LLST63
 4339 09f1 01       		.byte	0x1
 4340 09f2 200A0000 		.4byte	0xa20
 4341 09f6 1F       		.uleb128 0x1f
 4342 09f7 3C050000 		.4byte	.LASF108
 4343 09fb 01       		.byte	0x1
 4344 09fc 3F08     		.2byte	0x83f
 4345 09fe 4B040000 		.4byte	0x44b
 4346 0a02 21030000 		.4byte	.LLST64
 4347 0a06 20       		.uleb128 0x20
 4348 0a07 C60A0000 		.4byte	.LASF100
 4349 0a0b 01       		.byte	0x1
 4350 0a0c 4108     		.2byte	0x841
 4351 0a0e 5B060000 		.4byte	0x65b
 4352 0a12 42030000 		.4byte	.LLST65
ARM GAS  /tmp/cc2ibVgV.s 			page 135


 4353 0a16 21       		.uleb128 0x21
 4354 0a17 A2060000 		.4byte	.LVL141
 4355 0a1b 850B0000 		.4byte	0xb85
 4356 0a1f 00       		.byte	0
 4357 0a20 1E       		.uleb128 0x1e
 4358 0a21 CC000000 		.4byte	.LASF125
 4359 0a25 01       		.byte	0x1
 4360 0a26 1D08     		.2byte	0x81d
 4361 0a28 01       		.byte	0x1
 4362 0a29 6C060000 		.4byte	.LFB95
 4363 0a2d 98060000 		.4byte	.LFE95
 4364 0a31 65030000 		.4byte	.LLST60
 4365 0a35 01       		.byte	0x1
 4366 0a36 640A0000 		.4byte	0xa64
 4367 0a3a 1F       		.uleb128 0x1f
 4368 0a3b 3C050000 		.4byte	.LASF108
 4369 0a3f 01       		.byte	0x1
 4370 0a40 1D08     		.2byte	0x81d
 4371 0a42 4B040000 		.4byte	0x44b
 4372 0a46 85030000 		.4byte	.LLST61
 4373 0a4a 20       		.uleb128 0x20
 4374 0a4b C60A0000 		.4byte	.LASF100
 4375 0a4f 01       		.byte	0x1
 4376 0a50 1F08     		.2byte	0x81f
 4377 0a52 5B060000 		.4byte	0x65b
 4378 0a56 A6030000 		.4byte	.LLST62
 4379 0a5a 21       		.uleb128 0x21
 4380 0a5b 96060000 		.4byte	.LVL138
 4381 0a5f A00B0000 		.4byte	0xba0
 4382 0a63 00       		.byte	0
 4383 0a64 28       		.uleb128 0x28
 4384 0a65 01       		.byte	0x1
 4385 0a66 490A0000 		.4byte	.LASF126
 4386 0a6a 01       		.byte	0x1
 4387 0a6b F107     		.2byte	0x7f1
 4388 0a6d 01       		.byte	0x1
 4389 0a6e C7000000 		.4byte	0xc7
 4390 0a72 E00A0000 		.4byte	.LFB94
 4391 0a76 E40A0000 		.4byte	.LFE94
 4392 0a7a 02       		.byte	0x2
 4393 0a7b 7D       		.byte	0x7d
 4394 0a7c 00       		.sleb128 0
 4395 0a7d 01       		.byte	0x1
 4396 0a7e 930A0000 		.4byte	0xa93
 4397 0a82 1F       		.uleb128 0x1f
 4398 0a83 C60A0000 		.4byte	.LASF100
 4399 0a87 01       		.byte	0x1
 4400 0a88 F107     		.2byte	0x7f1
 4401 0a8a 5B060000 		.4byte	0x65b
 4402 0a8e D0030000 		.4byte	.LLST117
 4403 0a92 00       		.byte	0
 4404 0a93 28       		.uleb128 0x28
 4405 0a94 01       		.byte	0x1
 4406 0a95 64000000 		.4byte	.LASF127
 4407 0a99 01       		.byte	0x1
 4408 0a9a E207     		.2byte	0x7e2
 4409 0a9c 01       		.byte	0x1
ARM GAS  /tmp/cc2ibVgV.s 			page 136


 4410 0a9d 02050000 		.4byte	0x502
 4411 0aa1 D40A0000 		.4byte	.LFB93
 4412 0aa5 E00A0000 		.4byte	.LFE93
 4413 0aa9 02       		.byte	0x2
 4414 0aaa 7D       		.byte	0x7d
 4415 0aab 00       		.sleb128 0
 4416 0aac 01       		.byte	0x1
 4417 0aad E20A0000 		.4byte	0xae2
 4418 0ab1 1F       		.uleb128 0x1f
 4419 0ab2 C60A0000 		.4byte	.LASF100
 4420 0ab6 01       		.byte	0x1
 4421 0ab7 E207     		.2byte	0x7e2
 4422 0ab9 5B060000 		.4byte	0x65b
 4423 0abd F1030000 		.4byte	.LLST114
 4424 0ac1 20       		.uleb128 0x20
 4425 0ac2 5C070000 		.4byte	.LASF128
 4426 0ac6 01       		.byte	0x1
 4427 0ac7 E407     		.2byte	0x7e4
 4428 0ac9 C7000000 		.4byte	0xc7
 4429 0acd 12040000 		.4byte	.LLST115
 4430 0ad1 20       		.uleb128 0x20
 4431 0ad2 62070000 		.4byte	.LASF129
 4432 0ad6 01       		.byte	0x1
 4433 0ad7 E407     		.2byte	0x7e4
 4434 0ad9 C7000000 		.4byte	0xc7
 4435 0add 31040000 		.4byte	.LLST116
 4436 0ae1 00       		.byte	0
 4437 0ae2 29       		.uleb128 0x29
 4438 0ae3 01       		.byte	0x1
 4439 0ae4 72070000 		.4byte	.LASF175
 4440 0ae8 01       		.byte	0x1
 4441 0ae9 BD07     		.2byte	0x7bd
 4442 0aeb 01       		.byte	0x1
 4443 0aec 01       		.byte	0x1
 4444 0aed FE0A0000 		.4byte	0xafe
 4445 0af1 1A       		.uleb128 0x1a
 4446 0af2 C60A0000 		.4byte	.LASF100
 4447 0af6 01       		.byte	0x1
 4448 0af7 BD07     		.2byte	0x7bd
 4449 0af9 5B060000 		.4byte	0x65b
 4450 0afd 00       		.byte	0
 4451 0afe 2A       		.uleb128 0x2a
 4452 0aff 01       		.byte	0x1
 4453 0b00 11090000 		.4byte	.LASF130
 4454 0b04 01       		.byte	0x1
 4455 0b05 AD07     		.2byte	0x7ad
 4456 0b07 01       		.byte	0x1
 4457 0b08 190B0000 		.4byte	0xb19
 4458 0b0c 1A       		.uleb128 0x1a
 4459 0b0d C60A0000 		.4byte	.LASF100
 4460 0b11 01       		.byte	0x1
 4461 0b12 AD07     		.2byte	0x7ad
 4462 0b14 5B060000 		.4byte	0x65b
 4463 0b18 00       		.byte	0
 4464 0b19 2A       		.uleb128 0x2a
 4465 0b1a 01       		.byte	0x1
 4466 0b1b 08010000 		.4byte	.LASF131
ARM GAS  /tmp/cc2ibVgV.s 			page 137


 4467 0b1f 01       		.byte	0x1
 4468 0b20 9D07     		.2byte	0x79d
 4469 0b22 01       		.byte	0x1
 4470 0b23 340B0000 		.4byte	0xb34
 4471 0b27 1A       		.uleb128 0x1a
 4472 0b28 C60A0000 		.4byte	.LASF100
 4473 0b2c 01       		.byte	0x1
 4474 0b2d 9D07     		.2byte	0x79d
 4475 0b2f 5B060000 		.4byte	0x65b
 4476 0b33 00       		.byte	0
 4477 0b34 2A       		.uleb128 0x2a
 4478 0b35 01       		.byte	0x1
 4479 0b36 62020000 		.4byte	.LASF132
 4480 0b3a 01       		.byte	0x1
 4481 0b3b 8D07     		.2byte	0x78d
 4482 0b3d 01       		.byte	0x1
 4483 0b3e 4F0B0000 		.4byte	0xb4f
 4484 0b42 1A       		.uleb128 0x1a
 4485 0b43 C60A0000 		.4byte	.LASF100
 4486 0b47 01       		.byte	0x1
 4487 0b48 8D07     		.2byte	0x78d
 4488 0b4a 5B060000 		.4byte	0x65b
 4489 0b4e 00       		.byte	0
 4490 0b4f 2A       		.uleb128 0x2a
 4491 0b50 01       		.byte	0x1
 4492 0b51 46020000 		.4byte	.LASF133
 4493 0b55 01       		.byte	0x1
 4494 0b56 7D07     		.2byte	0x77d
 4495 0b58 01       		.byte	0x1
 4496 0b59 6A0B0000 		.4byte	0xb6a
 4497 0b5d 1A       		.uleb128 0x1a
 4498 0b5e C60A0000 		.4byte	.LASF100
 4499 0b62 01       		.byte	0x1
 4500 0b63 7D07     		.2byte	0x77d
 4501 0b65 5B060000 		.4byte	0x65b
 4502 0b69 00       		.byte	0
 4503 0b6a 2A       		.uleb128 0x2a
 4504 0b6b 01       		.byte	0x1
 4505 0b6c 4C000000 		.4byte	.LASF134
 4506 0b70 01       		.byte	0x1
 4507 0b71 6D07     		.2byte	0x76d
 4508 0b73 01       		.byte	0x1
 4509 0b74 850B0000 		.4byte	0xb85
 4510 0b78 1A       		.uleb128 0x1a
 4511 0b79 C60A0000 		.4byte	.LASF100
 4512 0b7d 01       		.byte	0x1
 4513 0b7e 6D07     		.2byte	0x76d
 4514 0b80 5B060000 		.4byte	0x65b
 4515 0b84 00       		.byte	0
 4516 0b85 2A       		.uleb128 0x2a
 4517 0b86 01       		.byte	0x1
 4518 0b87 63090000 		.4byte	.LASF135
 4519 0b8b 01       		.byte	0x1
 4520 0b8c 5D07     		.2byte	0x75d
 4521 0b8e 01       		.byte	0x1
 4522 0b8f A00B0000 		.4byte	0xba0
 4523 0b93 1A       		.uleb128 0x1a
ARM GAS  /tmp/cc2ibVgV.s 			page 138


 4524 0b94 C60A0000 		.4byte	.LASF100
 4525 0b98 01       		.byte	0x1
 4526 0b99 5D07     		.2byte	0x75d
 4527 0b9b 5B060000 		.4byte	0x65b
 4528 0b9f 00       		.byte	0
 4529 0ba0 2A       		.uleb128 0x2a
 4530 0ba1 01       		.byte	0x1
 4531 0ba2 36040000 		.4byte	.LASF136
 4532 0ba6 01       		.byte	0x1
 4533 0ba7 4D07     		.2byte	0x74d
 4534 0ba9 01       		.byte	0x1
 4535 0baa BB0B0000 		.4byte	0xbbb
 4536 0bae 1A       		.uleb128 0x1a
 4537 0baf C60A0000 		.4byte	.LASF100
 4538 0bb3 01       		.byte	0x1
 4539 0bb4 4D07     		.2byte	0x74d
 4540 0bb6 5B060000 		.4byte	0x65b
 4541 0bba 00       		.byte	0
 4542 0bbb 2B       		.uleb128 0x2b
 4543 0bbc 01       		.byte	0x1
 4544 0bbd 39060000 		.4byte	.LASF176
 4545 0bc1 01       		.byte	0x1
 4546 0bc2 BC06     		.2byte	0x6bc
 4547 0bc4 01       		.byte	0x1
 4548 0bc5 B4070000 		.4byte	.LFB84
 4549 0bc9 FC080000 		.4byte	.LFE84
 4550 0bcd 50040000 		.4byte	.LLST82
 4551 0bd1 EE0C0000 		.4byte	0xcee
 4552 0bd5 1F       		.uleb128 0x1f
 4553 0bd6 C60A0000 		.4byte	.LASF100
 4554 0bda 01       		.byte	0x1
 4555 0bdb BC06     		.2byte	0x6bc
 4556 0bdd 5B060000 		.4byte	0x65b
 4557 0be1 A0040000 		.4byte	.LLST83
 4558 0be5 20       		.uleb128 0x20
 4559 0be6 41050000 		.4byte	.LASF137
 4560 0bea 01       		.byte	0x1
 4561 0beb BE06     		.2byte	0x6be
 4562 0bed C7000000 		.4byte	0xc7
 4563 0bf1 40050000 		.4byte	.LLST84
 4564 0bf5 20       		.uleb128 0x20
 4565 0bf6 20030000 		.4byte	.LASF138
 4566 0bfa 01       		.byte	0x1
 4567 0bfb BF06     		.2byte	0x6bf
 4568 0bfd C7000000 		.4byte	0xc7
 4569 0c01 74050000 		.4byte	.LLST85
 4570 0c05 20       		.uleb128 0x20
 4571 0c06 C5000000 		.4byte	.LASF139
 4572 0c0a 01       		.byte	0x1
 4573 0c0b C006     		.2byte	0x6c0
 4574 0c0d C7000000 		.4byte	0xc7
 4575 0c11 B3050000 		.4byte	.LLST86
 4576 0c15 20       		.uleb128 0x20
 4577 0c16 7B040000 		.4byte	.LASF140
 4578 0c1a 01       		.byte	0x1
 4579 0c1b C106     		.2byte	0x6c1
 4580 0c1d C7000000 		.4byte	0xc7
ARM GAS  /tmp/cc2ibVgV.s 			page 139


 4581 0c21 D1050000 		.4byte	.LLST87
 4582 0c25 20       		.uleb128 0x20
 4583 0c26 44080000 		.4byte	.LASF121
 4584 0c2a 01       		.byte	0x1
 4585 0c2b C206     		.2byte	0x6c2
 4586 0c2d C7000000 		.4byte	0xc7
 4587 0c31 15060000 		.4byte	.LLST88
 4588 0c35 24       		.uleb128 0x24
 4589 0c36 BD060000 		.4byte	0x6bd
 4590 0c3a 84080000 		.4byte	.LBB35
 4591 0c3e D0080000 		.4byte	.LBE35
 4592 0c42 01       		.byte	0x1
 4593 0c43 3B07     		.2byte	0x73b
 4594 0c45 660C0000 		.4byte	0xc66
 4595 0c49 25       		.uleb128 0x25
 4596 0c4a CF060000 		.4byte	0x6cf
 4597 0c4e 6E060000 		.4byte	.LLST89
 4598 0c52 2C       		.uleb128 0x2c
 4599 0c53 84080000 		.4byte	.LBB36
 4600 0c57 D0080000 		.4byte	.LBE36
 4601 0c5b 2D       		.uleb128 0x2d
 4602 0c5c DB060000 		.4byte	0x6db
 4603 0c60 81060000 		.4byte	.LLST90
 4604 0c64 00       		.byte	0
 4605 0c65 00       		.byte	0
 4606 0c66 24       		.uleb128 0x24
 4607 0c67 9E060000 		.4byte	0x69e
 4608 0c6b D8080000 		.4byte	.LBB37
 4609 0c6f FC080000 		.4byte	.LBE37
 4610 0c73 01       		.byte	0x1
 4611 0c74 4207     		.2byte	0x742
 4612 0c76 940C0000 		.4byte	0xc94
 4613 0c7a 25       		.uleb128 0x25
 4614 0c7b B0060000 		.4byte	0x6b0
 4615 0c7f B7060000 		.4byte	.LLST91
 4616 0c83 2E       		.uleb128 0x2e
 4617 0c84 F4080000 		.4byte	.LVL213
 4618 0c88 A00B0000 		.4byte	0xba0
 4619 0c8c 27       		.uleb128 0x27
 4620 0c8d 01       		.byte	0x1
 4621 0c8e 50       		.byte	0x50
 4622 0c8f 02       		.byte	0x2
 4623 0c90 74       		.byte	0x74
 4624 0c91 00       		.sleb128 0
 4625 0c92 00       		.byte	0
 4626 0c93 00       		.byte	0
 4627 0c94 2F       		.uleb128 0x2f
 4628 0c95 D2070000 		.4byte	.LVL182
 4629 0c99 01       		.byte	0x1
 4630 0c9a 61060000 		.4byte	0x661
 4631 0c9e AA0C0000 		.4byte	0xcaa
 4632 0ca2 27       		.uleb128 0x27
 4633 0ca3 01       		.byte	0x1
 4634 0ca4 50       		.byte	0x50
 4635 0ca5 03       		.byte	0x3
 4636 0ca6 F3       		.byte	0xf3
 4637 0ca7 01       		.uleb128 0x1
ARM GAS  /tmp/cc2ibVgV.s 			page 140


 4638 0ca8 50       		.byte	0x50
 4639 0ca9 00       		.byte	0
 4640 0caa 26       		.uleb128 0x26
 4641 0cab 2C080000 		.4byte	.LVL185
 4642 0caf 61060000 		.4byte	0x661
 4643 0cb3 BE0C0000 		.4byte	0xcbe
 4644 0cb7 27       		.uleb128 0x27
 4645 0cb8 01       		.byte	0x1
 4646 0cb9 50       		.byte	0x50
 4647 0cba 02       		.byte	0x2
 4648 0cbb 74       		.byte	0x74
 4649 0cbc 00       		.sleb128 0
 4650 0cbd 00       		.byte	0
 4651 0cbe 21       		.uleb128 0x21
 4652 0cbf 42080000 		.4byte	.LVL190
 4653 0cc3 3C080000 		.4byte	0x83c
 4654 0cc7 21       		.uleb128 0x21
 4655 0cc8 5E080000 		.4byte	.LVL192
 4656 0ccc C8140000 		.4byte	0x14c8
 4657 0cd0 26       		.uleb128 0x26
 4658 0cd1 72080000 		.4byte	.LVL195
 4659 0cd5 340B0000 		.4byte	0xb34
 4660 0cd9 E40C0000 		.4byte	0xce4
 4661 0cdd 27       		.uleb128 0x27
 4662 0cde 01       		.byte	0x1
 4663 0cdf 50       		.byte	0x50
 4664 0ce0 02       		.byte	0x2
 4665 0ce1 74       		.byte	0x74
 4666 0ce2 00       		.sleb128 0
 4667 0ce3 00       		.byte	0
 4668 0ce4 21       		.uleb128 0x21
 4669 0ce5 78080000 		.4byte	.LVL197
 4670 0ce9 340B0000 		.4byte	0xb34
 4671 0ced 00       		.byte	0
 4672 0cee 30       		.uleb128 0x30
 4673 0cef 01       		.byte	0x1
 4674 0cf0 630A0000 		.4byte	.LASF141
 4675 0cf4 01       		.byte	0x1
 4676 0cf5 7606     		.2byte	0x676
 4677 0cf7 01       		.byte	0x1
 4678 0cf8 90020000 		.4byte	0x290
 4679 0cfc 6A0A0000 		.4byte	.LFB83
 4680 0d00 C00A0000 		.4byte	.LFE83
 4681 0d04 CA060000 		.4byte	.LLST109
 4682 0d08 01       		.byte	0x1
 4683 0d09 300D0000 		.4byte	0xd30
 4684 0d0d 1F       		.uleb128 0x1f
 4685 0d0e C60A0000 		.4byte	.LASF100
 4686 0d12 01       		.byte	0x1
 4687 0d13 7606     		.2byte	0x676
 4688 0d15 5B060000 		.4byte	0x65b
 4689 0d19 EA060000 		.4byte	.LLST110
 4690 0d1d 21       		.uleb128 0x21
 4691 0d1e 9E0A0000 		.4byte	.LVL248
 4692 0d22 C8140000 		.4byte	0x14c8
 4693 0d26 21       		.uleb128 0x21
 4694 0d27 B60A0000 		.4byte	.LVL251
ARM GAS  /tmp/cc2ibVgV.s 			page 141


 4695 0d2b E20A0000 		.4byte	0xae2
 4696 0d2f 00       		.byte	0
 4697 0d30 30       		.uleb128 0x30
 4698 0d31 01       		.byte	0x1
 4699 0d32 2A080000 		.4byte	.LASF142
 4700 0d36 01       		.byte	0x1
 4701 0d37 2906     		.2byte	0x629
 4702 0d39 01       		.byte	0x1
 4703 0d3a 90020000 		.4byte	0x290
 4704 0d3e 060A0000 		.4byte	.LFB82
 4705 0d42 540A0000 		.4byte	.LFE82
 4706 0d46 29070000 		.4byte	.LLST104
 4707 0d4a 01       		.byte	0x1
 4708 0d4b 720D0000 		.4byte	0xd72
 4709 0d4f 1F       		.uleb128 0x1f
 4710 0d50 C60A0000 		.4byte	.LASF100
 4711 0d54 01       		.byte	0x1
 4712 0d55 2906     		.2byte	0x629
 4713 0d57 5B060000 		.4byte	0x65b
 4714 0d5b 49070000 		.4byte	.LLST105
 4715 0d5f 21       		.uleb128 0x21
 4716 0d60 320A0000 		.4byte	.LVL237
 4717 0d64 C8140000 		.4byte	0x14c8
 4718 0d68 21       		.uleb128 0x21
 4719 0d69 4A0A0000 		.4byte	.LVL240
 4720 0d6d FE0A0000 		.4byte	0xafe
 4721 0d71 00       		.byte	0
 4722 0d72 31       		.uleb128 0x31
 4723 0d73 01       		.byte	0x1
 4724 0d74 16050000 		.4byte	.LASF143
 4725 0d78 01       		.byte	0x1
 4726 0d79 A905     		.2byte	0x5a9
 4727 0d7b 01       		.byte	0x1
 4728 0d7c 90020000 		.4byte	0x290
 4729 0d80 0E090000 		.4byte	.LFB81
 4730 0d84 B4090000 		.4byte	.LFE81
 4731 0d88 88070000 		.4byte	.LLST95
 4732 0d8c 01       		.byte	0x1
 4733 0d8d D80D0000 		.4byte	0xdd8
 4734 0d91 1F       		.uleb128 0x1f
 4735 0d92 C60A0000 		.4byte	.LASF100
 4736 0d96 01       		.byte	0x1
 4737 0d97 A905     		.2byte	0x5a9
 4738 0d99 5B060000 		.4byte	0x65b
 4739 0d9d A8070000 		.4byte	.LLST96
 4740 0da1 20       		.uleb128 0x20
 4741 0da2 CE010000 		.4byte	.LASF144
 4742 0da6 01       		.byte	0x1
 4743 0da7 AB05     		.2byte	0x5ab
 4744 0da9 C7000000 		.4byte	0xc7
 4745 0dad D4070000 		.4byte	.LLST97
 4746 0db1 21       		.uleb128 0x21
 4747 0db2 64090000 		.4byte	.LVL221
 4748 0db6 C8140000 		.4byte	0x14c8
 4749 0dba 26       		.uleb128 0x26
 4750 0dbb 84090000 		.4byte	.LVL223
 4751 0dbf 190B0000 		.4byte	0xb19
ARM GAS  /tmp/cc2ibVgV.s 			page 142


 4752 0dc3 CE0D0000 		.4byte	0xdce
 4753 0dc7 27       		.uleb128 0x27
 4754 0dc8 01       		.byte	0x1
 4755 0dc9 50       		.byte	0x50
 4756 0dca 02       		.byte	0x2
 4757 0dcb 74       		.byte	0x74
 4758 0dcc 00       		.sleb128 0
 4759 0dcd 00       		.byte	0
 4760 0dce 21       		.uleb128 0x21
 4761 0dcf 96090000 		.4byte	.LVL225
 4762 0dd3 C8140000 		.4byte	0x14c8
 4763 0dd7 00       		.byte	0
 4764 0dd8 31       		.uleb128 0x31
 4765 0dd9 01       		.byte	0x1
 4766 0dda AF040000 		.4byte	.LASF145
 4767 0dde 01       		.byte	0x1
 4768 0ddf 7C05     		.2byte	0x57c
 4769 0de1 01       		.byte	0x1
 4770 0de2 90020000 		.4byte	0x290
 4771 0de6 2E060000 		.4byte	.LFB80
 4772 0dea 6A060000 		.4byte	.LFE80
 4773 0dee 0A080000 		.4byte	.LLST58
 4774 0df2 01       		.byte	0x1
 4775 0df3 110E0000 		.4byte	0xe11
 4776 0df7 1F       		.uleb128 0x1f
 4777 0df8 C60A0000 		.4byte	.LASF100
 4778 0dfc 01       		.byte	0x1
 4779 0dfd 7C05     		.2byte	0x57c
 4780 0dff 5B060000 		.4byte	0x65b
 4781 0e03 2A080000 		.4byte	.LLST59
 4782 0e07 21       		.uleb128 0x21
 4783 0e08 5E060000 		.4byte	.LVL132
 4784 0e0c D6140000 		.4byte	0x14d6
 4785 0e10 00       		.byte	0
 4786 0e11 31       		.uleb128 0x31
 4787 0e12 01       		.byte	0x1
 4788 0e13 CF060000 		.4byte	.LASF146
 4789 0e17 01       		.byte	0x1
 4790 0e18 5205     		.2byte	0x552
 4791 0e1a 01       		.byte	0x1
 4792 0e1b 90020000 		.4byte	0x290
 4793 0e1f FA050000 		.4byte	.LFB79
 4794 0e23 2E060000 		.4byte	.LFE79
 4795 0e27 48080000 		.4byte	.LLST56
 4796 0e2b 01       		.byte	0x1
 4797 0e2c 4A0E0000 		.4byte	0xe4a
 4798 0e30 1F       		.uleb128 0x1f
 4799 0e31 C60A0000 		.4byte	.LASF100
 4800 0e35 01       		.byte	0x1
 4801 0e36 5205     		.2byte	0x552
 4802 0e38 5B060000 		.4byte	0x65b
 4803 0e3c 68080000 		.4byte	.LLST57
 4804 0e40 21       		.uleb128 0x21
 4805 0e41 22060000 		.4byte	.LVL129
 4806 0e45 D6140000 		.4byte	0x14d6
 4807 0e49 00       		.byte	0
 4808 0e4a 31       		.uleb128 0x31
ARM GAS  /tmp/cc2ibVgV.s 			page 143


 4809 0e4b 01       		.byte	0x1
 4810 0e4c EF020000 		.4byte	.LASF147
 4811 0e50 01       		.byte	0x1
 4812 0e51 1205     		.2byte	0x512
 4813 0e53 01       		.byte	0x1
 4814 0e54 90020000 		.4byte	0x290
 4815 0e58 9A050000 		.4byte	.LFB78
 4816 0e5c FA050000 		.4byte	.LFE78
 4817 0e60 86080000 		.4byte	.LLST54
 4818 0e64 01       		.byte	0x1
 4819 0e65 8C0E0000 		.4byte	0xe8c
 4820 0e69 1F       		.uleb128 0x1f
 4821 0e6a C60A0000 		.4byte	.LASF100
 4822 0e6e 01       		.byte	0x1
 4823 0e6f 1205     		.2byte	0x512
 4824 0e71 5B060000 		.4byte	0x65b
 4825 0e75 A6080000 		.4byte	.LLST55
 4826 0e79 21       		.uleb128 0x21
 4827 0e7a CA050000 		.4byte	.LVL125
 4828 0e7e D6140000 		.4byte	0x14d6
 4829 0e82 21       		.uleb128 0x21
 4830 0e83 E6050000 		.4byte	.LVL126
 4831 0e87 D6140000 		.4byte	0x14d6
 4832 0e8b 00       		.byte	0
 4833 0e8c 31       		.uleb128 0x31
 4834 0e8d 01       		.byte	0x1
 4835 0e8e A3030000 		.4byte	.LASF148
 4836 0e92 01       		.byte	0x1
 4837 0e93 DE04     		.2byte	0x4de
 4838 0e95 01       		.byte	0x1
 4839 0e96 90020000 		.4byte	0x290
 4840 0e9a 3C050000 		.4byte	.LFB77
 4841 0e9e 9A050000 		.4byte	.LFE77
 4842 0ea2 C4080000 		.4byte	.LLST50
 4843 0ea6 01       		.byte	0x1
 4844 0ea7 0C0F0000 		.4byte	0xf0c
 4845 0eab 1F       		.uleb128 0x1f
 4846 0eac C60A0000 		.4byte	.LASF100
 4847 0eb0 01       		.byte	0x1
 4848 0eb1 DE04     		.2byte	0x4de
 4849 0eb3 5B060000 		.4byte	0x65b
 4850 0eb7 E4080000 		.4byte	.LLST51
 4851 0ebb 20       		.uleb128 0x20
 4852 0ebc 44080000 		.4byte	.LASF121
 4853 0ec0 01       		.byte	0x1
 4854 0ec1 E004     		.2byte	0x4e0
 4855 0ec3 C7000000 		.4byte	0xc7
 4856 0ec7 02090000 		.4byte	.LLST52
 4857 0ecb 24       		.uleb128 0x24
 4858 0ecc 64080000 		.4byte	0x864
 4859 0ed0 60050000 		.4byte	.LBB19
 4860 0ed4 70050000 		.4byte	.LBE19
 4861 0ed8 01       		.byte	0x1
 4862 0ed9 F204     		.2byte	0x4f2
 4863 0edb E90E0000 		.4byte	0xee9
 4864 0edf 25       		.uleb128 0x25
 4865 0ee0 72080000 		.4byte	0x872
ARM GAS  /tmp/cc2ibVgV.s 			page 144


 4866 0ee4 40090000 		.4byte	.LLST53
 4867 0ee8 00       		.byte	0
 4868 0ee9 21       		.uleb128 0x21
 4869 0eea 60050000 		.4byte	.LVL117
 4870 0eee D6140000 		.4byte	0x14d6
 4871 0ef2 21       		.uleb128 0x21
 4872 0ef3 90050000 		.4byte	.LVL121
 4873 0ef7 D6140000 		.4byte	0x14d6
 4874 0efb 2E       		.uleb128 0x2e
 4875 0efc 96050000 		.4byte	.LVL122
 4876 0f00 3C080000 		.4byte	0x83c
 4877 0f04 27       		.uleb128 0x27
 4878 0f05 01       		.byte	0x1
 4879 0f06 50       		.byte	0x50
 4880 0f07 02       		.byte	0x2
 4881 0f08 70       		.byte	0x70
 4882 0f09 00       		.sleb128 0
 4883 0f0a 00       		.byte	0
 4884 0f0b 00       		.byte	0
 4885 0f0c 31       		.uleb128 0x31
 4886 0f0d 01       		.byte	0x1
 4887 0f0e AF090000 		.4byte	.LASF149
 4888 0f12 01       		.byte	0x1
 4889 0f13 BA04     		.2byte	0x4ba
 4890 0f15 01       		.byte	0x1
 4891 0f16 90020000 		.4byte	0x290
 4892 0f1a DA040000 		.4byte	.LFB76
 4893 0f1e 3C050000 		.4byte	.LFE76
 4894 0f22 53090000 		.4byte	.LLST48
 4895 0f26 01       		.byte	0x1
 4896 0f27 550F0000 		.4byte	0xf55
 4897 0f2b 1F       		.uleb128 0x1f
 4898 0f2c C60A0000 		.4byte	.LASF100
 4899 0f30 01       		.byte	0x1
 4900 0f31 BA04     		.2byte	0x4ba
 4901 0f33 5B060000 		.4byte	0x65b
 4902 0f37 8B090000 		.4byte	.LLST49
 4903 0f3b 2C       		.uleb128 0x2c
 4904 0f3c 04050000 		.4byte	.LBB16
 4905 0f40 14050000 		.4byte	.LBE16
 4906 0f44 32       		.uleb128 0x32
 4907 0f45 A6010000 		.4byte	.LASF150
 4908 0f49 01       		.byte	0x1
 4909 0f4a C804     		.2byte	0x4c8
 4910 0f4c D2000000 		.4byte	0xd2
 4911 0f50 02       		.byte	0x2
 4912 0f51 91       		.byte	0x91
 4913 0f52 7C       		.sleb128 -4
 4914 0f53 00       		.byte	0
 4915 0f54 00       		.byte	0
 4916 0f55 28       		.uleb128 0x28
 4917 0f56 01       		.byte	0x1
 4918 0f57 66060000 		.4byte	.LASF151
 4919 0f5b 01       		.byte	0x1
 4920 0f5c 9504     		.2byte	0x495
 4921 0f5e 01       		.byte	0x1
 4922 0f5f 90020000 		.4byte	0x290
ARM GAS  /tmp/cc2ibVgV.s 			page 145


 4923 0f63 80040000 		.4byte	.LFB75
 4924 0f67 DA040000 		.4byte	.LFE75
 4925 0f6b 02       		.byte	0x2
 4926 0f6c 7D       		.byte	0x7d
 4927 0f6d 00       		.sleb128 0
 4928 0f6e 01       		.byte	0x1
 4929 0f6f 940F0000 		.4byte	0xf94
 4930 0f73 1F       		.uleb128 0x1f
 4931 0f74 C60A0000 		.4byte	.LASF100
 4932 0f78 01       		.byte	0x1
 4933 0f79 9504     		.2byte	0x495
 4934 0f7b 5B060000 		.4byte	0x65b
 4935 0f7f C5090000 		.4byte	.LLST46
 4936 0f83 20       		.uleb128 0x20
 4937 0f84 44080000 		.4byte	.LASF121
 4938 0f88 01       		.byte	0x1
 4939 0f89 9704     		.2byte	0x497
 4940 0f8b C7000000 		.4byte	0xc7
 4941 0f8f FF090000 		.4byte	.LLST47
 4942 0f93 00       		.byte	0
 4943 0f94 31       		.uleb128 0x31
 4944 0f95 01       		.byte	0x1
 4945 0f96 6D010000 		.4byte	.LASF152
 4946 0f9a 01       		.byte	0x1
 4947 0f9b 5204     		.2byte	0x452
 4948 0f9d 01       		.byte	0x1
 4949 0f9e 90020000 		.4byte	0x290
 4950 0fa2 F0030000 		.4byte	.LFB74
 4951 0fa6 80040000 		.4byte	.LFE74
 4952 0faa 490A0000 		.4byte	.LLST41
 4953 0fae 01       		.byte	0x1
 4954 0faf 24100000 		.4byte	0x1024
 4955 0fb3 1F       		.uleb128 0x1f
 4956 0fb4 C60A0000 		.4byte	.LASF100
 4957 0fb8 01       		.byte	0x1
 4958 0fb9 5204     		.2byte	0x452
 4959 0fbb 5B060000 		.4byte	0x65b
 4960 0fbf 810A0000 		.4byte	.LLST42
 4961 0fc3 1F       		.uleb128 0x1f
 4962 0fc4 23010000 		.4byte	.LASF153
 4963 0fc8 01       		.byte	0x1
 4964 0fc9 5204     		.2byte	0x452
 4965 0fcb 51040000 		.4byte	0x451
 4966 0fcf CB0A0000 		.4byte	.LLST43
 4967 0fd3 1F       		.uleb128 0x1f
 4968 0fd4 78060000 		.4byte	.LASF154
 4969 0fd8 01       		.byte	0x1
 4970 0fd9 5204     		.2byte	0x452
 4971 0fdb A7000000 		.4byte	0xa7
 4972 0fdf 020B0000 		.4byte	.LLST44
 4973 0fe3 33       		.uleb128 0x33
 4974 0fe4 746D7000 		.ascii	"tmp\000"
 4975 0fe8 01       		.byte	0x1
 4976 0fe9 5404     		.2byte	0x454
 4977 0feb 24100000 		.4byte	0x1024
 4978 0fef 230B0000 		.4byte	.LLST45
 4979 0ff3 34       		.uleb128 0x34
ARM GAS  /tmp/cc2ibVgV.s 			page 146


 4980 0ff4 20000000 		.4byte	.Ldebug_ranges0+0x20
 4981 0ff8 0C100000 		.4byte	0x100c
 4982 0ffc 32       		.uleb128 0x32
 4983 0ffd A6010000 		.4byte	.LASF150
 4984 1001 01       		.byte	0x1
 4985 1002 7804     		.2byte	0x478
 4986 1004 D2000000 		.4byte	0xd2
 4987 1008 02       		.byte	0x2
 4988 1009 91       		.byte	0x91
 4989 100a 6C       		.sleb128 -20
 4990 100b 00       		.byte	0
 4991 100c 2E       		.uleb128 0x2e
 4992 100d 3C040000 		.4byte	.LVL95
 4993 1011 E4140000 		.4byte	0x14e4
 4994 1015 27       		.uleb128 0x27
 4995 1016 01       		.byte	0x1
 4996 1017 51       		.byte	0x51
 4997 1018 02       		.byte	0x2
 4998 1019 76       		.byte	0x76
 4999 101a 04       		.sleb128 4
 5000 101b 27       		.uleb128 0x27
 5001 101c 01       		.byte	0x1
 5002 101d 52       		.byte	0x52
 5003 101e 03       		.byte	0x3
 5004 101f F3       		.byte	0xf3
 5005 1020 01       		.uleb128 0x1
 5006 1021 51       		.byte	0x51
 5007 1022 00       		.byte	0
 5008 1023 00       		.byte	0
 5009 1024 15       		.uleb128 0x15
 5010 1025 04       		.byte	0x4
 5011 1026 C7000000 		.4byte	0xc7
 5012 102a 31       		.uleb128 0x31
 5013 102b 01       		.byte	0x1
 5014 102c 0B070000 		.4byte	.LASF155
 5015 1030 01       		.byte	0x1
 5016 1031 0E04     		.2byte	0x40e
 5017 1033 01       		.byte	0x1
 5018 1034 90020000 		.4byte	0x290
 5019 1038 7C030000 		.4byte	.LFB73
 5020 103c F0030000 		.4byte	.LFE73
 5021 1040 3B0B0000 		.4byte	.LLST36
 5022 1044 01       		.byte	0x1
 5023 1045 9B100000 		.4byte	0x109b
 5024 1049 1F       		.uleb128 0x1f
 5025 104a C60A0000 		.4byte	.LASF100
 5026 104e 01       		.byte	0x1
 5027 104f 0E04     		.2byte	0x40e
 5028 1051 5B060000 		.4byte	0x65b
 5029 1055 5B0B0000 		.4byte	.LLST37
 5030 1059 1F       		.uleb128 0x1f
 5031 105a 23010000 		.4byte	.LASF153
 5032 105e 01       		.byte	0x1
 5033 105f 0E04     		.2byte	0x40e
 5034 1061 51040000 		.4byte	0x451
 5035 1065 B30B0000 		.4byte	.LLST38
 5036 1069 1F       		.uleb128 0x1f
ARM GAS  /tmp/cc2ibVgV.s 			page 147


 5037 106a 78060000 		.4byte	.LASF154
 5038 106e 01       		.byte	0x1
 5039 106f 0E04     		.2byte	0x40e
 5040 1071 A7000000 		.4byte	0xa7
 5041 1075 DF0B0000 		.4byte	.LLST39
 5042 1079 33       		.uleb128 0x33
 5043 107a 746D7000 		.ascii	"tmp\000"
 5044 107e 01       		.byte	0x1
 5045 107f 1004     		.2byte	0x410
 5046 1081 24100000 		.4byte	0x1024
 5047 1085 000C0000 		.4byte	.LLST40
 5048 1089 2E       		.uleb128 0x2e
 5049 108a C4030000 		.4byte	.LVL84
 5050 108e E4140000 		.4byte	0x14e4
 5051 1092 27       		.uleb128 0x27
 5052 1093 01       		.byte	0x1
 5053 1094 51       		.byte	0x51
 5054 1095 03       		.byte	0x3
 5055 1096 F3       		.byte	0xf3
 5056 1097 01       		.uleb128 0x1
 5057 1098 51       		.byte	0x51
 5058 1099 00       		.byte	0
 5059 109a 00       		.byte	0
 5060 109b 28       		.uleb128 0x28
 5061 109c 01       		.byte	0x1
 5062 109d 210A0000 		.4byte	.LASF156
 5063 10a1 01       		.byte	0x1
 5064 10a2 DE03     		.2byte	0x3de
 5065 10a4 01       		.byte	0x1
 5066 10a5 90020000 		.4byte	0x290
 5067 10a9 36030000 		.4byte	.LFB72
 5068 10ad 7C030000 		.4byte	.LFE72
 5069 10b1 02       		.byte	0x2
 5070 10b2 7D       		.byte	0x7d
 5071 10b3 00       		.sleb128 0
 5072 10b4 01       		.byte	0x1
 5073 10b5 EA100000 		.4byte	0x10ea
 5074 10b9 1F       		.uleb128 0x1f
 5075 10ba C60A0000 		.4byte	.LASF100
 5076 10be 01       		.byte	0x1
 5077 10bf DE03     		.2byte	0x3de
 5078 10c1 5B060000 		.4byte	0x65b
 5079 10c5 180C0000 		.4byte	.LLST33
 5080 10c9 1F       		.uleb128 0x1f
 5081 10ca 23010000 		.4byte	.LASF153
 5082 10ce 01       		.byte	0x1
 5083 10cf DE03     		.2byte	0x3de
 5084 10d1 51040000 		.4byte	0x451
 5085 10d5 6B0C0000 		.4byte	.LLST34
 5086 10d9 1F       		.uleb128 0x1f
 5087 10da 78060000 		.4byte	.LASF154
 5088 10de 01       		.byte	0x1
 5089 10df DE03     		.2byte	0x3de
 5090 10e1 A7000000 		.4byte	0xa7
 5091 10e5 A40C0000 		.4byte	.LLST35
 5092 10e9 00       		.byte	0
 5093 10ea 28       		.uleb128 0x28
ARM GAS  /tmp/cc2ibVgV.s 			page 148


 5094 10eb 01       		.byte	0x1
 5095 10ec 8E0A0000 		.4byte	.LASF157
 5096 10f0 01       		.byte	0x1
 5097 10f1 B103     		.2byte	0x3b1
 5098 10f3 01       		.byte	0x1
 5099 10f4 90020000 		.4byte	0x290
 5100 10f8 F8020000 		.4byte	.LFB71
 5101 10fc 36030000 		.4byte	.LFE71
 5102 1100 02       		.byte	0x2
 5103 1101 7D       		.byte	0x7d
 5104 1102 00       		.sleb128 0
 5105 1103 01       		.byte	0x1
 5106 1104 39110000 		.4byte	0x1139
 5107 1108 1F       		.uleb128 0x1f
 5108 1109 C60A0000 		.4byte	.LASF100
 5109 110d 01       		.byte	0x1
 5110 110e B103     		.2byte	0x3b1
 5111 1110 5B060000 		.4byte	0x65b
 5112 1114 E90C0000 		.4byte	.LLST30
 5113 1118 1F       		.uleb128 0x1f
 5114 1119 23010000 		.4byte	.LASF153
 5115 111d 01       		.byte	0x1
 5116 111e B103     		.2byte	0x3b1
 5117 1120 51040000 		.4byte	0x451
 5118 1124 3C0D0000 		.4byte	.LLST31
 5119 1128 1F       		.uleb128 0x1f
 5120 1129 78060000 		.4byte	.LASF154
 5121 112d 01       		.byte	0x1
 5122 112e B103     		.2byte	0x3b1
 5123 1130 A7000000 		.4byte	0xa7
 5124 1134 750D0000 		.4byte	.LLST32
 5125 1138 00       		.byte	0
 5126 1139 31       		.uleb128 0x31
 5127 113a 01       		.byte	0x1
 5128 113b 07040000 		.4byte	.LASF158
 5129 113f 01       		.byte	0x1
 5130 1140 5703     		.2byte	0x357
 5131 1142 01       		.byte	0x1
 5132 1143 90020000 		.4byte	0x290
 5133 1147 3A020000 		.4byte	.LFB70
 5134 114b F8020000 		.4byte	.LFE70
 5135 114f BA0D0000 		.4byte	.LLST23
 5136 1153 01       		.byte	0x1
 5137 1154 F1110000 		.4byte	0x11f1
 5138 1158 1F       		.uleb128 0x1f
 5139 1159 C60A0000 		.4byte	.LASF100
 5140 115d 01       		.byte	0x1
 5141 115e 5703     		.2byte	0x357
 5142 1160 5B060000 		.4byte	0x65b
 5143 1164 DA0D0000 		.4byte	.LLST24
 5144 1168 1F       		.uleb128 0x1f
 5145 1169 23010000 		.4byte	.LASF153
 5146 116d 01       		.byte	0x1
 5147 116e 5703     		.2byte	0x357
 5148 1170 51040000 		.4byte	0x451
 5149 1174 500E0000 		.4byte	.LLST25
 5150 1178 1F       		.uleb128 0x1f
ARM GAS  /tmp/cc2ibVgV.s 			page 149


 5151 1179 78060000 		.4byte	.LASF154
 5152 117d 01       		.byte	0x1
 5153 117e 5703     		.2byte	0x357
 5154 1180 A7000000 		.4byte	0xa7
 5155 1184 840E0000 		.4byte	.LLST26
 5156 1188 1F       		.uleb128 0x1f
 5157 1189 0E030000 		.4byte	.LASF119
 5158 118d 01       		.byte	0x1
 5159 118e 5703     		.2byte	0x357
 5160 1190 C7000000 		.4byte	0xc7
 5161 1194 B00E0000 		.4byte	.LLST27
 5162 1198 33       		.uleb128 0x33
 5163 1199 746D7000 		.ascii	"tmp\000"
 5164 119d 01       		.byte	0x1
 5165 119e 5903     		.2byte	0x359
 5166 11a0 98060000 		.4byte	0x698
 5167 11a4 FA0E0000 		.4byte	.LLST28
 5168 11a8 20       		.uleb128 0x20
 5169 11a9 68070000 		.4byte	.LASF159
 5170 11ad 01       		.byte	0x1
 5171 11ae 5A03     		.2byte	0x35a
 5172 11b0 C7000000 		.4byte	0xc7
 5173 11b4 320F0000 		.4byte	.LLST29
 5174 11b8 21       		.uleb128 0x21
 5175 11b9 72020000 		.4byte	.LVL44
 5176 11bd F2140000 		.4byte	0x14f2
 5177 11c1 26       		.uleb128 0x26
 5178 11c2 AC020000 		.4byte	.LVL49
 5179 11c6 C4130000 		.4byte	0x13c4
 5180 11ca E7110000 		.4byte	0x11e7
 5181 11ce 27       		.uleb128 0x27
 5182 11cf 01       		.byte	0x1
 5183 11d0 50       		.byte	0x50
 5184 11d1 02       		.byte	0x2
 5185 11d2 74       		.byte	0x74
 5186 11d3 00       		.sleb128 0
 5187 11d4 27       		.uleb128 0x27
 5188 11d5 01       		.byte	0x1
 5189 11d6 51       		.byte	0x51
 5190 11d7 02       		.byte	0x2
 5191 11d8 08       		.byte	0x8
 5192 11d9 20       		.byte	0x20
 5193 11da 27       		.uleb128 0x27
 5194 11db 01       		.byte	0x1
 5195 11dc 52       		.byte	0x52
 5196 11dd 02       		.byte	0x2
 5197 11de 76       		.byte	0x76
 5198 11df 00       		.sleb128 0
 5199 11e0 27       		.uleb128 0x27
 5200 11e1 01       		.byte	0x1
 5201 11e2 53       		.byte	0x53
 5202 11e3 02       		.byte	0x2
 5203 11e4 77       		.byte	0x77
 5204 11e5 00       		.sleb128 0
 5205 11e6 00       		.byte	0
 5206 11e7 21       		.uleb128 0x21
 5207 11e8 D2020000 		.4byte	.LVL55
ARM GAS  /tmp/cc2ibVgV.s 			page 150


 5208 11ec C4130000 		.4byte	0x13c4
 5209 11f0 00       		.byte	0
 5210 11f1 31       		.uleb128 0x31
 5211 11f2 01       		.byte	0x1
 5212 11f3 7C0A0000 		.4byte	.LASF160
 5213 11f7 01       		.byte	0x1
 5214 11f8 0203     		.2byte	0x302
 5215 11fa 01       		.byte	0x1
 5216 11fb 90020000 		.4byte	0x290
 5217 11ff 82010000 		.4byte	.LFB69
 5218 1203 3A020000 		.4byte	.LFE69
 5219 1207 940F0000 		.4byte	.LLST16
 5220 120b 01       		.byte	0x1
 5221 120c CF120000 		.4byte	0x12cf
 5222 1210 1F       		.uleb128 0x1f
 5223 1211 C60A0000 		.4byte	.LASF100
 5224 1215 01       		.byte	0x1
 5225 1216 0203     		.2byte	0x302
 5226 1218 5B060000 		.4byte	0x65b
 5227 121c B40F0000 		.4byte	.LLST17
 5228 1220 1F       		.uleb128 0x1f
 5229 1221 23010000 		.4byte	.LASF153
 5230 1225 01       		.byte	0x1
 5231 1226 0203     		.2byte	0x302
 5232 1228 51040000 		.4byte	0x451
 5233 122c 2A100000 		.4byte	.LLST18
 5234 1230 1F       		.uleb128 0x1f
 5235 1231 78060000 		.4byte	.LASF154
 5236 1235 01       		.byte	0x1
 5237 1236 0203     		.2byte	0x302
 5238 1238 A7000000 		.4byte	0xa7
 5239 123c 60100000 		.4byte	.LLST19
 5240 1240 1F       		.uleb128 0x1f
 5241 1241 0E030000 		.4byte	.LASF119
 5242 1245 01       		.byte	0x1
 5243 1246 0203     		.2byte	0x302
 5244 1248 C7000000 		.4byte	0xc7
 5245 124c 8C100000 		.4byte	.LLST20
 5246 1250 33       		.uleb128 0x33
 5247 1251 746D7000 		.ascii	"tmp\000"
 5248 1255 01       		.byte	0x1
 5249 1256 0403     		.2byte	0x304
 5250 1258 98060000 		.4byte	0x698
 5251 125c D6100000 		.4byte	.LLST21
 5252 1260 20       		.uleb128 0x20
 5253 1261 68070000 		.4byte	.LASF159
 5254 1265 01       		.byte	0x1
 5255 1266 0503     		.2byte	0x305
 5256 1268 C7000000 		.4byte	0xc7
 5257 126c F6100000 		.4byte	.LLST22
 5258 1270 21       		.uleb128 0x21
 5259 1271 BA010000 		.4byte	.LVL25
 5260 1275 F2140000 		.4byte	0x14f2
 5261 1279 26       		.uleb128 0x26
 5262 127a D6010000 		.4byte	.LVL28
 5263 127e C4130000 		.4byte	0x13c4
 5264 1282 9F120000 		.4byte	0x129f
ARM GAS  /tmp/cc2ibVgV.s 			page 151


 5265 1286 27       		.uleb128 0x27
 5266 1287 01       		.byte	0x1
 5267 1288 50       		.byte	0x50
 5268 1289 02       		.byte	0x2
 5269 128a 74       		.byte	0x74
 5270 128b 00       		.sleb128 0
 5271 128c 27       		.uleb128 0x27
 5272 128d 01       		.byte	0x1
 5273 128e 51       		.byte	0x51
 5274 128f 02       		.byte	0x2
 5275 1290 08       		.byte	0x8
 5276 1291 40       		.byte	0x40
 5277 1292 27       		.uleb128 0x27
 5278 1293 01       		.byte	0x1
 5279 1294 52       		.byte	0x52
 5280 1295 02       		.byte	0x2
 5281 1296 76       		.byte	0x76
 5282 1297 00       		.sleb128 0
 5283 1298 27       		.uleb128 0x27
 5284 1299 01       		.byte	0x1
 5285 129a 53       		.byte	0x53
 5286 129b 02       		.byte	0x2
 5287 129c 77       		.byte	0x77
 5288 129d 00       		.sleb128 0
 5289 129e 00       		.byte	0
 5290 129f 26       		.uleb128 0x26
 5291 12a0 02020000 		.4byte	.LVL31
 5292 12a4 C4130000 		.4byte	0x13c4
 5293 12a8 C5120000 		.4byte	0x12c5
 5294 12ac 27       		.uleb128 0x27
 5295 12ad 01       		.byte	0x1
 5296 12ae 50       		.byte	0x50
 5297 12af 02       		.byte	0x2
 5298 12b0 74       		.byte	0x74
 5299 12b1 00       		.sleb128 0
 5300 12b2 27       		.uleb128 0x27
 5301 12b3 01       		.byte	0x1
 5302 12b4 51       		.byte	0x51
 5303 12b5 02       		.byte	0x2
 5304 12b6 08       		.byte	0x8
 5305 12b7 80       		.byte	0x80
 5306 12b8 27       		.uleb128 0x27
 5307 12b9 01       		.byte	0x1
 5308 12ba 52       		.byte	0x52
 5309 12bb 02       		.byte	0x2
 5310 12bc 76       		.byte	0x76
 5311 12bd 00       		.sleb128 0
 5312 12be 27       		.uleb128 0x27
 5313 12bf 01       		.byte	0x1
 5314 12c0 53       		.byte	0x53
 5315 12c1 02       		.byte	0x2
 5316 12c2 77       		.byte	0x77
 5317 12c3 00       		.sleb128 0
 5318 12c4 00       		.byte	0
 5319 12c5 21       		.uleb128 0x21
 5320 12c6 20020000 		.4byte	.LVL35
 5321 12ca C4130000 		.4byte	0x13c4
ARM GAS  /tmp/cc2ibVgV.s 			page 152


 5322 12ce 00       		.byte	0
 5323 12cf 2A       		.uleb128 0x2a
 5324 12d0 01       		.byte	0x1
 5325 12d1 4A050000 		.4byte	.LASF161
 5326 12d5 01       		.byte	0x1
 5327 12d6 AB01     		.2byte	0x1ab
 5328 12d8 01       		.byte	0x1
 5329 12d9 EA120000 		.4byte	0x12ea
 5330 12dd 1A       		.uleb128 0x1a
 5331 12de C60A0000 		.4byte	.LASF100
 5332 12e2 01       		.byte	0x1
 5333 12e3 AB01     		.2byte	0x1ab
 5334 12e5 5B060000 		.4byte	0x65b
 5335 12e9 00       		.byte	0
 5336 12ea 2A       		.uleb128 0x2a
 5337 12eb 01       		.byte	0x1
 5338 12ec EF080000 		.4byte	.LASF162
 5339 12f0 01       		.byte	0x1
 5340 12f1 9B01     		.2byte	0x19b
 5341 12f3 01       		.byte	0x1
 5342 12f4 05130000 		.4byte	0x1305
 5343 12f8 1A       		.uleb128 0x1a
 5344 12f9 C60A0000 		.4byte	.LASF100
 5345 12fd 01       		.byte	0x1
 5346 12fe 9B01     		.2byte	0x19b
 5347 1300 5B060000 		.4byte	0x65b
 5348 1304 00       		.byte	0
 5349 1305 31       		.uleb128 0x31
 5350 1306 01       		.byte	0x1
 5351 1307 E1000000 		.4byte	.LASF163
 5352 130b 01       		.byte	0x1
 5353 130c 6E01     		.2byte	0x16e
 5354 130e 01       		.byte	0x1
 5355 130f 90020000 		.4byte	0x290
 5356 1313 52010000 		.4byte	.LFB66
 5357 1317 82010000 		.4byte	.LFE66
 5358 131b 58110000 		.4byte	.LLST14
 5359 131f 01       		.byte	0x1
 5360 1320 45130000 		.4byte	0x1345
 5361 1324 1F       		.uleb128 0x1f
 5362 1325 C60A0000 		.4byte	.LASF100
 5363 1329 01       		.byte	0x1
 5364 132a 6E01     		.2byte	0x16e
 5365 132c 5B060000 		.4byte	0x65b
 5366 1330 78110000 		.4byte	.LLST15
 5367 1334 2E       		.uleb128 0x2e
 5368 1335 6C010000 		.4byte	.LVL20
 5369 1339 CF120000 		.4byte	0x12cf
 5370 133d 27       		.uleb128 0x27
 5371 133e 01       		.byte	0x1
 5372 133f 50       		.byte	0x50
 5373 1340 02       		.byte	0x2
 5374 1341 74       		.byte	0x74
 5375 1342 00       		.sleb128 0
 5376 1343 00       		.byte	0
 5377 1344 00       		.byte	0
 5378 1345 31       		.uleb128 0x31
ARM GAS  /tmp/cc2ibVgV.s 			page 153


 5379 1346 01       		.byte	0x1
 5380 1347 08050000 		.4byte	.LASF164
 5381 134b 01       		.byte	0x1
 5382 134c 2401     		.2byte	0x124
 5383 134e 01       		.byte	0x1
 5384 134f 90020000 		.4byte	0x290
 5385 1353 6C000000 		.4byte	.LFB65
 5386 1357 50010000 		.4byte	.LFE65
 5387 135b AC110000 		.4byte	.LLST10
 5388 135f 01       		.byte	0x1
 5389 1360 C4130000 		.4byte	0x13c4
 5390 1364 1F       		.uleb128 0x1f
 5391 1365 C60A0000 		.4byte	.LASF100
 5392 1369 01       		.byte	0x1
 5393 136a 2401     		.2byte	0x124
 5394 136c 5B060000 		.4byte	0x65b
 5395 1370 CC110000 		.4byte	.LLST11
 5396 1374 35       		.uleb128 0x35
 5397 1375 34060000 		.4byte	0x634
 5398 1379 8E000000 		.4byte	.LBB8
 5399 137d 00000000 		.4byte	.Ldebug_ranges0+0
 5400 1381 01       		.byte	0x1
 5401 1382 4C01     		.2byte	0x14c
 5402 1384 B3130000 		.4byte	0x13b3
 5403 1388 25       		.uleb128 0x25
 5404 1389 42060000 		.4byte	0x642
 5405 138d 0E120000 		.4byte	.LLST12
 5406 1391 36       		.uleb128 0x36
 5407 1392 00000000 		.4byte	.Ldebug_ranges0+0
 5408 1396 2D       		.uleb128 0x2d
 5409 1397 4E060000 		.4byte	0x64e
 5410 139b 2C120000 		.4byte	.LLST13
 5411 139f 21       		.uleb128 0x21
 5412 13a0 CC000000 		.4byte	.LVL11
 5413 13a4 00150000 		.4byte	0x1500
 5414 13a8 21       		.uleb128 0x21
 5415 13a9 44010000 		.4byte	.LVL15
 5416 13ad 0E150000 		.4byte	0x150e
 5417 13b1 00       		.byte	0
 5418 13b2 00       		.byte	0
 5419 13b3 2E       		.uleb128 0x2e
 5420 13b4 86000000 		.4byte	.LVL9
 5421 13b8 EA120000 		.4byte	0x12ea
 5422 13bc 27       		.uleb128 0x27
 5423 13bd 01       		.byte	0x1
 5424 13be 50       		.byte	0x50
 5425 13bf 02       		.byte	0x2
 5426 13c0 74       		.byte	0x74
 5427 13c1 00       		.sleb128 0
 5428 13c2 00       		.byte	0
 5429 13c3 00       		.byte	0
 5430 13c4 37       		.uleb128 0x37
 5431 13c5 7F080000 		.4byte	0x87f
 5432 13c9 1A000000 		.4byte	.LFB132
 5433 13cd 6A000000 		.4byte	.LFE132
 5434 13d1 3F120000 		.4byte	.LLST0
 5435 13d5 01       		.byte	0x1
ARM GAS  /tmp/cc2ibVgV.s 			page 154


 5436 13d6 49140000 		.4byte	0x1449
 5437 13da 25       		.uleb128 0x25
 5438 13db 91080000 		.4byte	0x891
 5439 13df 5F120000 		.4byte	.LLST1
 5440 13e3 25       		.uleb128 0x25
 5441 13e4 9D080000 		.4byte	0x89d
 5442 13e8 7D120000 		.4byte	.LLST2
 5443 13ec 25       		.uleb128 0x25
 5444 13ed B5080000 		.4byte	0x8b5
 5445 13f1 9B120000 		.4byte	.LLST3
 5446 13f5 25       		.uleb128 0x25
 5447 13f6 C1080000 		.4byte	0x8c1
 5448 13fa B9120000 		.4byte	.LLST4
 5449 13fe 38       		.uleb128 0x38
 5450 13ff A9080000 		.4byte	0x8a9
 5451 1403 00       		.byte	0
 5452 1404 39       		.uleb128 0x39
 5453 1405 38000000 		.4byte	.LBB4
 5454 1409 5E000000 		.4byte	.LBE4
 5455 140d 3F140000 		.4byte	0x143f
 5456 1411 25       		.uleb128 0x25
 5457 1412 9D080000 		.4byte	0x89d
 5458 1416 D7120000 		.4byte	.LLST5
 5459 141a 25       		.uleb128 0x25
 5460 141b A9080000 		.4byte	0x8a9
 5461 141f EA120000 		.4byte	.LLST6
 5462 1423 25       		.uleb128 0x25
 5463 1424 B5080000 		.4byte	0x8b5
 5464 1428 FE120000 		.4byte	.LLST7
 5465 142c 25       		.uleb128 0x25
 5466 142d C1080000 		.4byte	0x8c1
 5467 1431 11130000 		.4byte	.LLST8
 5468 1435 25       		.uleb128 0x25
 5469 1436 91080000 		.4byte	0x891
 5470 143a 24130000 		.4byte	.LLST9
 5471 143e 00       		.byte	0
 5472 143f 21       		.uleb128 0x21
 5473 1440 62000000 		.4byte	.LVL7
 5474 1444 F2140000 		.4byte	0x14f2
 5475 1448 00       		.byte	0
 5476 1449 37       		.uleb128 0x37
 5477 144a 61060000 		.4byte	0x661
 5478 144e DE060000 		.4byte	.LFB110
 5479 1452 58070000 		.4byte	.LFE110
 5480 1456 37130000 		.4byte	.LLST69
 5481 145a 01       		.byte	0x1
 5482 145b AB140000 		.4byte	0x14ab
 5483 145f 25       		.uleb128 0x25
 5484 1460 73060000 		.4byte	0x673
 5485 1464 57130000 		.4byte	.LLST70
 5486 1468 3A       		.uleb128 0x3a
 5487 1469 7F060000 		.4byte	0x67f
 5488 146d 3A       		.uleb128 0x3a
 5489 146e 8B060000 		.4byte	0x68b
 5490 1472 36       		.uleb128 0x36
 5491 1473 38000000 		.4byte	.Ldebug_ranges0+0x38
 5492 1477 25       		.uleb128 0x25
ARM GAS  /tmp/cc2ibVgV.s 			page 155


 5493 1478 73060000 		.4byte	0x673
 5494 147c 91130000 		.4byte	.LLST71
 5495 1480 36       		.uleb128 0x36
 5496 1481 38000000 		.4byte	.Ldebug_ranges0+0x38
 5497 1485 2D       		.uleb128 0x2d
 5498 1486 68140000 		.4byte	0x1468
 5499 148a BD130000 		.4byte	.LLST72
 5500 148e 2D       		.uleb128 0x2d
 5501 148f 6D140000 		.4byte	0x146d
 5502 1493 F3130000 		.4byte	.LLST73
 5503 1497 2E       		.uleb128 0x2e
 5504 1498 34070000 		.4byte	.LVL153
 5505 149c 6A0B0000 		.4byte	0xb6a
 5506 14a0 27       		.uleb128 0x27
 5507 14a1 01       		.byte	0x1
 5508 14a2 50       		.byte	0x50
 5509 14a3 03       		.byte	0x3
 5510 14a4 F3       		.byte	0xf3
 5511 14a5 01       		.uleb128 0x1
 5512 14a6 50       		.byte	0x50
 5513 14a7 00       		.byte	0
 5514 14a8 00       		.byte	0
 5515 14a9 00       		.byte	0
 5516 14aa 00       		.byte	0
 5517 14ab 3B       		.uleb128 0x3b
 5518 14ac E20A0000 		.4byte	0xae2
 5519 14b0 680A0000 		.4byte	.LFB92
 5520 14b4 6A0A0000 		.4byte	.LFE92
 5521 14b8 02       		.byte	0x2
 5522 14b9 7D       		.byte	0x7d
 5523 14ba 00       		.sleb128 0
 5524 14bb 01       		.byte	0x1
 5525 14bc C8140000 		.4byte	0x14c8
 5526 14c0 3C       		.uleb128 0x3c
 5527 14c1 F10A0000 		.4byte	0xaf1
 5528 14c5 01       		.byte	0x1
 5529 14c6 50       		.byte	0x50
 5530 14c7 00       		.byte	0
 5531 14c8 3D       		.uleb128 0x3d
 5532 14c9 01       		.byte	0x1
 5533 14ca 01       		.byte	0x1
 5534 14cb C6030000 		.4byte	.LASF165
 5535 14cf C6030000 		.4byte	.LASF165
 5536 14d3 09       		.byte	0x9
 5537 14d4 7C01     		.2byte	0x17c
 5538 14d6 3D       		.uleb128 0x3d
 5539 14d7 01       		.byte	0x1
 5540 14d8 01       		.byte	0x1
 5541 14d9 EC040000 		.4byte	.LASF166
 5542 14dd EC040000 		.4byte	.LASF166
 5543 14e1 09       		.byte	0x9
 5544 14e2 7B01     		.2byte	0x17b
 5545 14e4 3D       		.uleb128 0x3d
 5546 14e5 01       		.byte	0x1
 5547 14e6 01       		.byte	0x1
 5548 14e7 82010000 		.4byte	.LASF167
 5549 14eb 82010000 		.4byte	.LASF167
ARM GAS  /tmp/cc2ibVgV.s 			page 156


 5550 14ef 09       		.byte	0x9
 5551 14f0 7A01     		.2byte	0x17a
 5552 14f2 3D       		.uleb128 0x3d
 5553 14f3 01       		.byte	0x1
 5554 14f4 01       		.byte	0x1
 5555 14f5 82050000 		.4byte	.LASF168
 5556 14f9 82050000 		.4byte	.LASF168
 5557 14fd 0B       		.byte	0xb
 5558 14fe 2A01     		.2byte	0x12a
 5559 1500 3D       		.uleb128 0x3d
 5560 1501 01       		.byte	0x1
 5561 1502 01       		.byte	0x1
 5562 1503 8C060000 		.4byte	.LASF169
 5563 1507 8C060000 		.4byte	.LASF169
 5564 150b 0C       		.byte	0xc
 5565 150c 9704     		.2byte	0x497
 5566 150e 3D       		.uleb128 0x3d
 5567 150f 01       		.byte	0x1
 5568 1510 01       		.byte	0x1
 5569 1511 1C000000 		.4byte	.LASF170
 5570 1515 1C000000 		.4byte	.LASF170
 5571 1519 0C       		.byte	0xc
 5572 151a 9604     		.2byte	0x496
 5573 151c 00       		.byte	0
 5574              		.section	.debug_abbrev,"",%progbits
 5575              	.Ldebug_abbrev0:
 5576 0000 01       		.uleb128 0x1
 5577 0001 11       		.uleb128 0x11
 5578 0002 01       		.byte	0x1
 5579 0003 25       		.uleb128 0x25
 5580 0004 0E       		.uleb128 0xe
 5581 0005 13       		.uleb128 0x13
 5582 0006 0B       		.uleb128 0xb
 5583 0007 03       		.uleb128 0x3
 5584 0008 0E       		.uleb128 0xe
 5585 0009 1B       		.uleb128 0x1b
 5586 000a 0E       		.uleb128 0xe
 5587 000b 11       		.uleb128 0x11
 5588 000c 01       		.uleb128 0x1
 5589 000d 12       		.uleb128 0x12
 5590 000e 01       		.uleb128 0x1
 5591 000f 10       		.uleb128 0x10
 5592 0010 06       		.uleb128 0x6
 5593 0011 00       		.byte	0
 5594 0012 00       		.byte	0
 5595 0013 02       		.uleb128 0x2
 5596 0014 24       		.uleb128 0x24
 5597 0015 00       		.byte	0
 5598 0016 0B       		.uleb128 0xb
 5599 0017 0B       		.uleb128 0xb
 5600 0018 3E       		.uleb128 0x3e
 5601 0019 0B       		.uleb128 0xb
 5602 001a 03       		.uleb128 0x3
 5603 001b 0E       		.uleb128 0xe
 5604 001c 00       		.byte	0
 5605 001d 00       		.byte	0
 5606 001e 03       		.uleb128 0x3
ARM GAS  /tmp/cc2ibVgV.s 			page 157


 5607 001f 16       		.uleb128 0x16
 5608 0020 00       		.byte	0
 5609 0021 03       		.uleb128 0x3
 5610 0022 0E       		.uleb128 0xe
 5611 0023 3A       		.uleb128 0x3a
 5612 0024 0B       		.uleb128 0xb
 5613 0025 3B       		.uleb128 0x3b
 5614 0026 0B       		.uleb128 0xb
 5615 0027 49       		.uleb128 0x49
 5616 0028 13       		.uleb128 0x13
 5617 0029 00       		.byte	0
 5618 002a 00       		.byte	0
 5619 002b 04       		.uleb128 0x4
 5620 002c 24       		.uleb128 0x24
 5621 002d 00       		.byte	0
 5622 002e 0B       		.uleb128 0xb
 5623 002f 0B       		.uleb128 0xb
 5624 0030 3E       		.uleb128 0x3e
 5625 0031 0B       		.uleb128 0xb
 5626 0032 03       		.uleb128 0x3
 5627 0033 08       		.uleb128 0x8
 5628 0034 00       		.byte	0
 5629 0035 00       		.byte	0
 5630 0036 05       		.uleb128 0x5
 5631 0037 26       		.uleb128 0x26
 5632 0038 00       		.byte	0
 5633 0039 49       		.uleb128 0x49
 5634 003a 13       		.uleb128 0x13
 5635 003b 00       		.byte	0
 5636 003c 00       		.byte	0
 5637 003d 06       		.uleb128 0x6
 5638 003e 35       		.uleb128 0x35
 5639 003f 00       		.byte	0
 5640 0040 49       		.uleb128 0x49
 5641 0041 13       		.uleb128 0x13
 5642 0042 00       		.byte	0
 5643 0043 00       		.byte	0
 5644 0044 07       		.uleb128 0x7
 5645 0045 34       		.uleb128 0x34
 5646 0046 00       		.byte	0
 5647 0047 03       		.uleb128 0x3
 5648 0048 0E       		.uleb128 0xe
 5649 0049 3A       		.uleb128 0x3a
 5650 004a 0B       		.uleb128 0xb
 5651 004b 3B       		.uleb128 0x3b
 5652 004c 05       		.uleb128 0x5
 5653 004d 49       		.uleb128 0x49
 5654 004e 13       		.uleb128 0x13
 5655 004f 3F       		.uleb128 0x3f
 5656 0050 0C       		.uleb128 0xc
 5657 0051 3C       		.uleb128 0x3c
 5658 0052 0C       		.uleb128 0xc
 5659 0053 00       		.byte	0
 5660 0054 00       		.byte	0
 5661 0055 08       		.uleb128 0x8
 5662 0056 34       		.uleb128 0x34
 5663 0057 00       		.byte	0
ARM GAS  /tmp/cc2ibVgV.s 			page 158


 5664 0058 03       		.uleb128 0x3
 5665 0059 0E       		.uleb128 0xe
 5666 005a 3A       		.uleb128 0x3a
 5667 005b 0B       		.uleb128 0xb
 5668 005c 3B       		.uleb128 0x3b
 5669 005d 0B       		.uleb128 0xb
 5670 005e 49       		.uleb128 0x49
 5671 005f 13       		.uleb128 0x13
 5672 0060 3F       		.uleb128 0x3f
 5673 0061 0C       		.uleb128 0xc
 5674 0062 3C       		.uleb128 0x3c
 5675 0063 0C       		.uleb128 0xc
 5676 0064 00       		.byte	0
 5677 0065 00       		.byte	0
 5678 0066 09       		.uleb128 0x9
 5679 0067 01       		.uleb128 0x1
 5680 0068 01       		.byte	0x1
 5681 0069 49       		.uleb128 0x49
 5682 006a 13       		.uleb128 0x13
 5683 006b 01       		.uleb128 0x1
 5684 006c 13       		.uleb128 0x13
 5685 006d 00       		.byte	0
 5686 006e 00       		.byte	0
 5687 006f 0A       		.uleb128 0xa
 5688 0070 21       		.uleb128 0x21
 5689 0071 00       		.byte	0
 5690 0072 49       		.uleb128 0x49
 5691 0073 13       		.uleb128 0x13
 5692 0074 2F       		.uleb128 0x2f
 5693 0075 0B       		.uleb128 0xb
 5694 0076 00       		.byte	0
 5695 0077 00       		.byte	0
 5696 0078 0B       		.uleb128 0xb
 5697 0079 13       		.uleb128 0x13
 5698 007a 01       		.byte	0x1
 5699 007b 0B       		.uleb128 0xb
 5700 007c 0B       		.uleb128 0xb
 5701 007d 3A       		.uleb128 0x3a
 5702 007e 0B       		.uleb128 0xb
 5703 007f 3B       		.uleb128 0x3b
 5704 0080 05       		.uleb128 0x5
 5705 0081 01       		.uleb128 0x1
 5706 0082 13       		.uleb128 0x13
 5707 0083 00       		.byte	0
 5708 0084 00       		.byte	0
 5709 0085 0C       		.uleb128 0xc
 5710 0086 0D       		.uleb128 0xd
 5711 0087 00       		.byte	0
 5712 0088 03       		.uleb128 0x3
 5713 0089 08       		.uleb128 0x8
 5714 008a 3A       		.uleb128 0x3a
 5715 008b 0B       		.uleb128 0xb
 5716 008c 3B       		.uleb128 0x3b
 5717 008d 05       		.uleb128 0x5
 5718 008e 49       		.uleb128 0x49
 5719 008f 13       		.uleb128 0x13
 5720 0090 38       		.uleb128 0x38
ARM GAS  /tmp/cc2ibVgV.s 			page 159


 5721 0091 0A       		.uleb128 0xa
 5722 0092 00       		.byte	0
 5723 0093 00       		.byte	0
 5724 0094 0D       		.uleb128 0xd
 5725 0095 0D       		.uleb128 0xd
 5726 0096 00       		.byte	0
 5727 0097 03       		.uleb128 0x3
 5728 0098 0E       		.uleb128 0xe
 5729 0099 3A       		.uleb128 0x3a
 5730 009a 0B       		.uleb128 0xb
 5731 009b 3B       		.uleb128 0x3b
 5732 009c 05       		.uleb128 0x5
 5733 009d 49       		.uleb128 0x49
 5734 009e 13       		.uleb128 0x13
 5735 009f 38       		.uleb128 0x38
 5736 00a0 0A       		.uleb128 0xa
 5737 00a1 00       		.byte	0
 5738 00a2 00       		.byte	0
 5739 00a3 0E       		.uleb128 0xe
 5740 00a4 16       		.uleb128 0x16
 5741 00a5 00       		.byte	0
 5742 00a6 03       		.uleb128 0x3
 5743 00a7 0E       		.uleb128 0xe
 5744 00a8 3A       		.uleb128 0x3a
 5745 00a9 0B       		.uleb128 0xb
 5746 00aa 3B       		.uleb128 0x3b
 5747 00ab 05       		.uleb128 0x5
 5748 00ac 49       		.uleb128 0x49
 5749 00ad 13       		.uleb128 0x13
 5750 00ae 00       		.byte	0
 5751 00af 00       		.byte	0
 5752 00b0 0F       		.uleb128 0xf
 5753 00b1 04       		.uleb128 0x4
 5754 00b2 01       		.byte	0x1
 5755 00b3 0B       		.uleb128 0xb
 5756 00b4 0B       		.uleb128 0xb
 5757 00b5 49       		.uleb128 0x49
 5758 00b6 13       		.uleb128 0x13
 5759 00b7 3A       		.uleb128 0x3a
 5760 00b8 0B       		.uleb128 0xb
 5761 00b9 3B       		.uleb128 0x3b
 5762 00ba 0B       		.uleb128 0xb
 5763 00bb 01       		.uleb128 0x1
 5764 00bc 13       		.uleb128 0x13
 5765 00bd 00       		.byte	0
 5766 00be 00       		.byte	0
 5767 00bf 10       		.uleb128 0x10
 5768 00c0 28       		.uleb128 0x28
 5769 00c1 00       		.byte	0
 5770 00c2 03       		.uleb128 0x3
 5771 00c3 0E       		.uleb128 0xe
 5772 00c4 1C       		.uleb128 0x1c
 5773 00c5 0B       		.uleb128 0xb
 5774 00c6 00       		.byte	0
 5775 00c7 00       		.byte	0
 5776 00c8 11       		.uleb128 0x11
 5777 00c9 28       		.uleb128 0x28
ARM GAS  /tmp/cc2ibVgV.s 			page 160


 5778 00ca 00       		.byte	0
 5779 00cb 03       		.uleb128 0x3
 5780 00cc 08       		.uleb128 0x8
 5781 00cd 1C       		.uleb128 0x1c
 5782 00ce 0B       		.uleb128 0xb
 5783 00cf 00       		.byte	0
 5784 00d0 00       		.byte	0
 5785 00d1 12       		.uleb128 0x12
 5786 00d2 13       		.uleb128 0x13
 5787 00d3 01       		.byte	0x1
 5788 00d4 0B       		.uleb128 0xb
 5789 00d5 0B       		.uleb128 0xb
 5790 00d6 3A       		.uleb128 0x3a
 5791 00d7 0B       		.uleb128 0xb
 5792 00d8 3B       		.uleb128 0x3b
 5793 00d9 0B       		.uleb128 0xb
 5794 00da 01       		.uleb128 0x1
 5795 00db 13       		.uleb128 0x13
 5796 00dc 00       		.byte	0
 5797 00dd 00       		.byte	0
 5798 00de 13       		.uleb128 0x13
 5799 00df 0D       		.uleb128 0xd
 5800 00e0 00       		.byte	0
 5801 00e1 03       		.uleb128 0x3
 5802 00e2 0E       		.uleb128 0xe
 5803 00e3 3A       		.uleb128 0x3a
 5804 00e4 0B       		.uleb128 0xb
 5805 00e5 3B       		.uleb128 0x3b
 5806 00e6 0B       		.uleb128 0xb
 5807 00e7 49       		.uleb128 0x49
 5808 00e8 13       		.uleb128 0x13
 5809 00e9 38       		.uleb128 0x38
 5810 00ea 0A       		.uleb128 0xa
 5811 00eb 00       		.byte	0
 5812 00ec 00       		.byte	0
 5813 00ed 14       		.uleb128 0x14
 5814 00ee 13       		.uleb128 0x13
 5815 00ef 01       		.byte	0x1
 5816 00f0 03       		.uleb128 0x3
 5817 00f1 0E       		.uleb128 0xe
 5818 00f2 0B       		.uleb128 0xb
 5819 00f3 0B       		.uleb128 0xb
 5820 00f4 3A       		.uleb128 0x3a
 5821 00f5 0B       		.uleb128 0xb
 5822 00f6 3B       		.uleb128 0x3b
 5823 00f7 0B       		.uleb128 0xb
 5824 00f8 01       		.uleb128 0x1
 5825 00f9 13       		.uleb128 0x13
 5826 00fa 00       		.byte	0
 5827 00fb 00       		.byte	0
 5828 00fc 15       		.uleb128 0x15
 5829 00fd 0F       		.uleb128 0xf
 5830 00fe 00       		.byte	0
 5831 00ff 0B       		.uleb128 0xb
 5832 0100 0B       		.uleb128 0xb
 5833 0101 49       		.uleb128 0x49
 5834 0102 13       		.uleb128 0x13
ARM GAS  /tmp/cc2ibVgV.s 			page 161


 5835 0103 00       		.byte	0
 5836 0104 00       		.byte	0
 5837 0105 16       		.uleb128 0x16
 5838 0106 0F       		.uleb128 0xf
 5839 0107 00       		.byte	0
 5840 0108 0B       		.uleb128 0xb
 5841 0109 0B       		.uleb128 0xb
 5842 010a 00       		.byte	0
 5843 010b 00       		.byte	0
 5844 010c 17       		.uleb128 0x17
 5845 010d 15       		.uleb128 0x15
 5846 010e 01       		.byte	0x1
 5847 010f 27       		.uleb128 0x27
 5848 0110 0C       		.uleb128 0xc
 5849 0111 01       		.uleb128 0x1
 5850 0112 13       		.uleb128 0x13
 5851 0113 00       		.byte	0
 5852 0114 00       		.byte	0
 5853 0115 18       		.uleb128 0x18
 5854 0116 05       		.uleb128 0x5
 5855 0117 00       		.byte	0
 5856 0118 49       		.uleb128 0x49
 5857 0119 13       		.uleb128 0x13
 5858 011a 00       		.byte	0
 5859 011b 00       		.byte	0
 5860 011c 19       		.uleb128 0x19
 5861 011d 2E       		.uleb128 0x2e
 5862 011e 01       		.byte	0x1
 5863 011f 03       		.uleb128 0x3
 5864 0120 0E       		.uleb128 0xe
 5865 0121 3A       		.uleb128 0x3a
 5866 0122 0B       		.uleb128 0xb
 5867 0123 3B       		.uleb128 0x3b
 5868 0124 05       		.uleb128 0x5
 5869 0125 27       		.uleb128 0x27
 5870 0126 0C       		.uleb128 0xc
 5871 0127 20       		.uleb128 0x20
 5872 0128 0B       		.uleb128 0xb
 5873 0129 01       		.uleb128 0x1
 5874 012a 13       		.uleb128 0x13
 5875 012b 00       		.byte	0
 5876 012c 00       		.byte	0
 5877 012d 1A       		.uleb128 0x1a
 5878 012e 05       		.uleb128 0x5
 5879 012f 00       		.byte	0
 5880 0130 03       		.uleb128 0x3
 5881 0131 0E       		.uleb128 0xe
 5882 0132 3A       		.uleb128 0x3a
 5883 0133 0B       		.uleb128 0xb
 5884 0134 3B       		.uleb128 0x3b
 5885 0135 05       		.uleb128 0x5
 5886 0136 49       		.uleb128 0x49
 5887 0137 13       		.uleb128 0x13
 5888 0138 00       		.byte	0
 5889 0139 00       		.byte	0
 5890 013a 1B       		.uleb128 0x1b
 5891 013b 34       		.uleb128 0x34
ARM GAS  /tmp/cc2ibVgV.s 			page 162


 5892 013c 00       		.byte	0
 5893 013d 03       		.uleb128 0x3
 5894 013e 0E       		.uleb128 0xe
 5895 013f 3A       		.uleb128 0x3a
 5896 0140 0B       		.uleb128 0xb
 5897 0141 3B       		.uleb128 0x3b
 5898 0142 05       		.uleb128 0x5
 5899 0143 49       		.uleb128 0x49
 5900 0144 13       		.uleb128 0x13
 5901 0145 00       		.byte	0
 5902 0146 00       		.byte	0
 5903 0147 1C       		.uleb128 0x1c
 5904 0148 2E       		.uleb128 0x2e
 5905 0149 01       		.byte	0x1
 5906 014a 03       		.uleb128 0x3
 5907 014b 0E       		.uleb128 0xe
 5908 014c 3A       		.uleb128 0x3a
 5909 014d 0B       		.uleb128 0xb
 5910 014e 3B       		.uleb128 0x3b
 5911 014f 05       		.uleb128 0x5
 5912 0150 27       		.uleb128 0x27
 5913 0151 0C       		.uleb128 0xc
 5914 0152 49       		.uleb128 0x49
 5915 0153 13       		.uleb128 0x13
 5916 0154 20       		.uleb128 0x20
 5917 0155 0B       		.uleb128 0xb
 5918 0156 01       		.uleb128 0x1
 5919 0157 13       		.uleb128 0x13
 5920 0158 00       		.byte	0
 5921 0159 00       		.byte	0
 5922 015a 1D       		.uleb128 0x1d
 5923 015b 34       		.uleb128 0x34
 5924 015c 00       		.byte	0
 5925 015d 03       		.uleb128 0x3
 5926 015e 08       		.uleb128 0x8
 5927 015f 3A       		.uleb128 0x3a
 5928 0160 0B       		.uleb128 0xb
 5929 0161 3B       		.uleb128 0x3b
 5930 0162 05       		.uleb128 0x5
 5931 0163 49       		.uleb128 0x49
 5932 0164 13       		.uleb128 0x13
 5933 0165 00       		.byte	0
 5934 0166 00       		.byte	0
 5935 0167 1E       		.uleb128 0x1e
 5936 0168 2E       		.uleb128 0x2e
 5937 0169 01       		.byte	0x1
 5938 016a 03       		.uleb128 0x3
 5939 016b 0E       		.uleb128 0xe
 5940 016c 3A       		.uleb128 0x3a
 5941 016d 0B       		.uleb128 0xb
 5942 016e 3B       		.uleb128 0x3b
 5943 016f 05       		.uleb128 0x5
 5944 0170 27       		.uleb128 0x27
 5945 0171 0C       		.uleb128 0xc
 5946 0172 11       		.uleb128 0x11
 5947 0173 01       		.uleb128 0x1
 5948 0174 12       		.uleb128 0x12
ARM GAS  /tmp/cc2ibVgV.s 			page 163


 5949 0175 01       		.uleb128 0x1
 5950 0176 40       		.uleb128 0x40
 5951 0177 06       		.uleb128 0x6
 5952 0178 9742     		.uleb128 0x2117
 5953 017a 0C       		.uleb128 0xc
 5954 017b 01       		.uleb128 0x1
 5955 017c 13       		.uleb128 0x13
 5956 017d 00       		.byte	0
 5957 017e 00       		.byte	0
 5958 017f 1F       		.uleb128 0x1f
 5959 0180 05       		.uleb128 0x5
 5960 0181 00       		.byte	0
 5961 0182 03       		.uleb128 0x3
 5962 0183 0E       		.uleb128 0xe
 5963 0184 3A       		.uleb128 0x3a
 5964 0185 0B       		.uleb128 0xb
 5965 0186 3B       		.uleb128 0x3b
 5966 0187 05       		.uleb128 0x5
 5967 0188 49       		.uleb128 0x49
 5968 0189 13       		.uleb128 0x13
 5969 018a 02       		.uleb128 0x2
 5970 018b 06       		.uleb128 0x6
 5971 018c 00       		.byte	0
 5972 018d 00       		.byte	0
 5973 018e 20       		.uleb128 0x20
 5974 018f 34       		.uleb128 0x34
 5975 0190 00       		.byte	0
 5976 0191 03       		.uleb128 0x3
 5977 0192 0E       		.uleb128 0xe
 5978 0193 3A       		.uleb128 0x3a
 5979 0194 0B       		.uleb128 0xb
 5980 0195 3B       		.uleb128 0x3b
 5981 0196 05       		.uleb128 0x5
 5982 0197 49       		.uleb128 0x49
 5983 0198 13       		.uleb128 0x13
 5984 0199 02       		.uleb128 0x2
 5985 019a 06       		.uleb128 0x6
 5986 019b 00       		.byte	0
 5987 019c 00       		.byte	0
 5988 019d 21       		.uleb128 0x21
 5989 019e 898201   		.uleb128 0x4109
 5990 01a1 00       		.byte	0
 5991 01a2 11       		.uleb128 0x11
 5992 01a3 01       		.uleb128 0x1
 5993 01a4 31       		.uleb128 0x31
 5994 01a5 13       		.uleb128 0x13
 5995 01a6 00       		.byte	0
 5996 01a7 00       		.byte	0
 5997 01a8 22       		.uleb128 0x22
 5998 01a9 2E       		.uleb128 0x2e
 5999 01aa 01       		.byte	0x1
 6000 01ab 03       		.uleb128 0x3
 6001 01ac 0E       		.uleb128 0xe
 6002 01ad 3A       		.uleb128 0x3a
 6003 01ae 0B       		.uleb128 0xb
 6004 01af 3B       		.uleb128 0x3b
 6005 01b0 05       		.uleb128 0x5
ARM GAS  /tmp/cc2ibVgV.s 			page 164


 6006 01b1 27       		.uleb128 0x27
 6007 01b2 0C       		.uleb128 0xc
 6008 01b3 11       		.uleb128 0x11
 6009 01b4 01       		.uleb128 0x1
 6010 01b5 12       		.uleb128 0x12
 6011 01b6 01       		.uleb128 0x1
 6012 01b7 40       		.uleb128 0x40
 6013 01b8 0A       		.uleb128 0xa
 6014 01b9 9742     		.uleb128 0x2117
 6015 01bb 0C       		.uleb128 0xc
 6016 01bc 01       		.uleb128 0x1
 6017 01bd 13       		.uleb128 0x13
 6018 01be 00       		.byte	0
 6019 01bf 00       		.byte	0
 6020 01c0 23       		.uleb128 0x23
 6021 01c1 05       		.uleb128 0x5
 6022 01c2 00       		.byte	0
 6023 01c3 03       		.uleb128 0x3
 6024 01c4 0E       		.uleb128 0xe
 6025 01c5 3A       		.uleb128 0x3a
 6026 01c6 0B       		.uleb128 0xb
 6027 01c7 3B       		.uleb128 0x3b
 6028 01c8 05       		.uleb128 0x5
 6029 01c9 49       		.uleb128 0x49
 6030 01ca 13       		.uleb128 0x13
 6031 01cb 02       		.uleb128 0x2
 6032 01cc 0A       		.uleb128 0xa
 6033 01cd 00       		.byte	0
 6034 01ce 00       		.byte	0
 6035 01cf 24       		.uleb128 0x24
 6036 01d0 1D       		.uleb128 0x1d
 6037 01d1 01       		.byte	0x1
 6038 01d2 31       		.uleb128 0x31
 6039 01d3 13       		.uleb128 0x13
 6040 01d4 11       		.uleb128 0x11
 6041 01d5 01       		.uleb128 0x1
 6042 01d6 12       		.uleb128 0x12
 6043 01d7 01       		.uleb128 0x1
 6044 01d8 58       		.uleb128 0x58
 6045 01d9 0B       		.uleb128 0xb
 6046 01da 59       		.uleb128 0x59
 6047 01db 05       		.uleb128 0x5
 6048 01dc 01       		.uleb128 0x1
 6049 01dd 13       		.uleb128 0x13
 6050 01de 00       		.byte	0
 6051 01df 00       		.byte	0
 6052 01e0 25       		.uleb128 0x25
 6053 01e1 05       		.uleb128 0x5
 6054 01e2 00       		.byte	0
 6055 01e3 31       		.uleb128 0x31
 6056 01e4 13       		.uleb128 0x13
 6057 01e5 02       		.uleb128 0x2
 6058 01e6 06       		.uleb128 0x6
 6059 01e7 00       		.byte	0
 6060 01e8 00       		.byte	0
 6061 01e9 26       		.uleb128 0x26
 6062 01ea 898201   		.uleb128 0x4109
ARM GAS  /tmp/cc2ibVgV.s 			page 165


 6063 01ed 01       		.byte	0x1
 6064 01ee 11       		.uleb128 0x11
 6065 01ef 01       		.uleb128 0x1
 6066 01f0 31       		.uleb128 0x31
 6067 01f1 13       		.uleb128 0x13
 6068 01f2 01       		.uleb128 0x1
 6069 01f3 13       		.uleb128 0x13
 6070 01f4 00       		.byte	0
 6071 01f5 00       		.byte	0
 6072 01f6 27       		.uleb128 0x27
 6073 01f7 8A8201   		.uleb128 0x410a
 6074 01fa 00       		.byte	0
 6075 01fb 02       		.uleb128 0x2
 6076 01fc 0A       		.uleb128 0xa
 6077 01fd 9142     		.uleb128 0x2111
 6078 01ff 0A       		.uleb128 0xa
 6079 0200 00       		.byte	0
 6080 0201 00       		.byte	0
 6081 0202 28       		.uleb128 0x28
 6082 0203 2E       		.uleb128 0x2e
 6083 0204 01       		.byte	0x1
 6084 0205 3F       		.uleb128 0x3f
 6085 0206 0C       		.uleb128 0xc
 6086 0207 03       		.uleb128 0x3
 6087 0208 0E       		.uleb128 0xe
 6088 0209 3A       		.uleb128 0x3a
 6089 020a 0B       		.uleb128 0xb
 6090 020b 3B       		.uleb128 0x3b
 6091 020c 05       		.uleb128 0x5
 6092 020d 27       		.uleb128 0x27
 6093 020e 0C       		.uleb128 0xc
 6094 020f 49       		.uleb128 0x49
 6095 0210 13       		.uleb128 0x13
 6096 0211 11       		.uleb128 0x11
 6097 0212 01       		.uleb128 0x1
 6098 0213 12       		.uleb128 0x12
 6099 0214 01       		.uleb128 0x1
 6100 0215 40       		.uleb128 0x40
 6101 0216 0A       		.uleb128 0xa
 6102 0217 9742     		.uleb128 0x2117
 6103 0219 0C       		.uleb128 0xc
 6104 021a 01       		.uleb128 0x1
 6105 021b 13       		.uleb128 0x13
 6106 021c 00       		.byte	0
 6107 021d 00       		.byte	0
 6108 021e 29       		.uleb128 0x29
 6109 021f 2E       		.uleb128 0x2e
 6110 0220 01       		.byte	0x1
 6111 0221 3F       		.uleb128 0x3f
 6112 0222 0C       		.uleb128 0xc
 6113 0223 03       		.uleb128 0x3
 6114 0224 0E       		.uleb128 0xe
 6115 0225 3A       		.uleb128 0x3a
 6116 0226 0B       		.uleb128 0xb
 6117 0227 3B       		.uleb128 0x3b
 6118 0228 05       		.uleb128 0x5
 6119 0229 27       		.uleb128 0x27
ARM GAS  /tmp/cc2ibVgV.s 			page 166


 6120 022a 0C       		.uleb128 0xc
 6121 022b 20       		.uleb128 0x20
 6122 022c 0B       		.uleb128 0xb
 6123 022d 01       		.uleb128 0x1
 6124 022e 13       		.uleb128 0x13
 6125 022f 00       		.byte	0
 6126 0230 00       		.byte	0
 6127 0231 2A       		.uleb128 0x2a
 6128 0232 2E       		.uleb128 0x2e
 6129 0233 01       		.byte	0x1
 6130 0234 3F       		.uleb128 0x3f
 6131 0235 0C       		.uleb128 0xc
 6132 0236 03       		.uleb128 0x3
 6133 0237 0E       		.uleb128 0xe
 6134 0238 3A       		.uleb128 0x3a
 6135 0239 0B       		.uleb128 0xb
 6136 023a 3B       		.uleb128 0x3b
 6137 023b 05       		.uleb128 0x5
 6138 023c 27       		.uleb128 0x27
 6139 023d 0C       		.uleb128 0xc
 6140 023e 01       		.uleb128 0x1
 6141 023f 13       		.uleb128 0x13
 6142 0240 00       		.byte	0
 6143 0241 00       		.byte	0
 6144 0242 2B       		.uleb128 0x2b
 6145 0243 2E       		.uleb128 0x2e
 6146 0244 01       		.byte	0x1
 6147 0245 3F       		.uleb128 0x3f
 6148 0246 0C       		.uleb128 0xc
 6149 0247 03       		.uleb128 0x3
 6150 0248 0E       		.uleb128 0xe
 6151 0249 3A       		.uleb128 0x3a
 6152 024a 0B       		.uleb128 0xb
 6153 024b 3B       		.uleb128 0x3b
 6154 024c 05       		.uleb128 0x5
 6155 024d 27       		.uleb128 0x27
 6156 024e 0C       		.uleb128 0xc
 6157 024f 11       		.uleb128 0x11
 6158 0250 01       		.uleb128 0x1
 6159 0251 12       		.uleb128 0x12
 6160 0252 01       		.uleb128 0x1
 6161 0253 40       		.uleb128 0x40
 6162 0254 06       		.uleb128 0x6
 6163 0255 01       		.uleb128 0x1
 6164 0256 13       		.uleb128 0x13
 6165 0257 00       		.byte	0
 6166 0258 00       		.byte	0
 6167 0259 2C       		.uleb128 0x2c
 6168 025a 0B       		.uleb128 0xb
 6169 025b 01       		.byte	0x1
 6170 025c 11       		.uleb128 0x11
 6171 025d 01       		.uleb128 0x1
 6172 025e 12       		.uleb128 0x12
 6173 025f 01       		.uleb128 0x1
 6174 0260 00       		.byte	0
 6175 0261 00       		.byte	0
 6176 0262 2D       		.uleb128 0x2d
ARM GAS  /tmp/cc2ibVgV.s 			page 167


 6177 0263 34       		.uleb128 0x34
 6178 0264 00       		.byte	0
 6179 0265 31       		.uleb128 0x31
 6180 0266 13       		.uleb128 0x13
 6181 0267 02       		.uleb128 0x2
 6182 0268 06       		.uleb128 0x6
 6183 0269 00       		.byte	0
 6184 026a 00       		.byte	0
 6185 026b 2E       		.uleb128 0x2e
 6186 026c 898201   		.uleb128 0x4109
 6187 026f 01       		.byte	0x1
 6188 0270 11       		.uleb128 0x11
 6189 0271 01       		.uleb128 0x1
 6190 0272 31       		.uleb128 0x31
 6191 0273 13       		.uleb128 0x13
 6192 0274 00       		.byte	0
 6193 0275 00       		.byte	0
 6194 0276 2F       		.uleb128 0x2f
 6195 0277 898201   		.uleb128 0x4109
 6196 027a 01       		.byte	0x1
 6197 027b 11       		.uleb128 0x11
 6198 027c 01       		.uleb128 0x1
 6199 027d 9542     		.uleb128 0x2115
 6200 027f 0C       		.uleb128 0xc
 6201 0280 31       		.uleb128 0x31
 6202 0281 13       		.uleb128 0x13
 6203 0282 01       		.uleb128 0x1
 6204 0283 13       		.uleb128 0x13
 6205 0284 00       		.byte	0
 6206 0285 00       		.byte	0
 6207 0286 30       		.uleb128 0x30
 6208 0287 2E       		.uleb128 0x2e
 6209 0288 01       		.byte	0x1
 6210 0289 3F       		.uleb128 0x3f
 6211 028a 0C       		.uleb128 0xc
 6212 028b 03       		.uleb128 0x3
 6213 028c 0E       		.uleb128 0xe
 6214 028d 3A       		.uleb128 0x3a
 6215 028e 0B       		.uleb128 0xb
 6216 028f 3B       		.uleb128 0x3b
 6217 0290 05       		.uleb128 0x5
 6218 0291 27       		.uleb128 0x27
 6219 0292 0C       		.uleb128 0xc
 6220 0293 49       		.uleb128 0x49
 6221 0294 13       		.uleb128 0x13
 6222 0295 11       		.uleb128 0x11
 6223 0296 01       		.uleb128 0x1
 6224 0297 12       		.uleb128 0x12
 6225 0298 01       		.uleb128 0x1
 6226 0299 40       		.uleb128 0x40
 6227 029a 06       		.uleb128 0x6
 6228 029b 9642     		.uleb128 0x2116
 6229 029d 0C       		.uleb128 0xc
 6230 029e 01       		.uleb128 0x1
 6231 029f 13       		.uleb128 0x13
 6232 02a0 00       		.byte	0
 6233 02a1 00       		.byte	0
ARM GAS  /tmp/cc2ibVgV.s 			page 168


 6234 02a2 31       		.uleb128 0x31
 6235 02a3 2E       		.uleb128 0x2e
 6236 02a4 01       		.byte	0x1
 6237 02a5 3F       		.uleb128 0x3f
 6238 02a6 0C       		.uleb128 0xc
 6239 02a7 03       		.uleb128 0x3
 6240 02a8 0E       		.uleb128 0xe
 6241 02a9 3A       		.uleb128 0x3a
 6242 02aa 0B       		.uleb128 0xb
 6243 02ab 3B       		.uleb128 0x3b
 6244 02ac 05       		.uleb128 0x5
 6245 02ad 27       		.uleb128 0x27
 6246 02ae 0C       		.uleb128 0xc
 6247 02af 49       		.uleb128 0x49
 6248 02b0 13       		.uleb128 0x13
 6249 02b1 11       		.uleb128 0x11
 6250 02b2 01       		.uleb128 0x1
 6251 02b3 12       		.uleb128 0x12
 6252 02b4 01       		.uleb128 0x1
 6253 02b5 40       		.uleb128 0x40
 6254 02b6 06       		.uleb128 0x6
 6255 02b7 9742     		.uleb128 0x2117
 6256 02b9 0C       		.uleb128 0xc
 6257 02ba 01       		.uleb128 0x1
 6258 02bb 13       		.uleb128 0x13
 6259 02bc 00       		.byte	0
 6260 02bd 00       		.byte	0
 6261 02be 32       		.uleb128 0x32
 6262 02bf 34       		.uleb128 0x34
 6263 02c0 00       		.byte	0
 6264 02c1 03       		.uleb128 0x3
 6265 02c2 0E       		.uleb128 0xe
 6266 02c3 3A       		.uleb128 0x3a
 6267 02c4 0B       		.uleb128 0xb
 6268 02c5 3B       		.uleb128 0x3b
 6269 02c6 05       		.uleb128 0x5
 6270 02c7 49       		.uleb128 0x49
 6271 02c8 13       		.uleb128 0x13
 6272 02c9 02       		.uleb128 0x2
 6273 02ca 0A       		.uleb128 0xa
 6274 02cb 00       		.byte	0
 6275 02cc 00       		.byte	0
 6276 02cd 33       		.uleb128 0x33
 6277 02ce 34       		.uleb128 0x34
 6278 02cf 00       		.byte	0
 6279 02d0 03       		.uleb128 0x3
 6280 02d1 08       		.uleb128 0x8
 6281 02d2 3A       		.uleb128 0x3a
 6282 02d3 0B       		.uleb128 0xb
 6283 02d4 3B       		.uleb128 0x3b
 6284 02d5 05       		.uleb128 0x5
 6285 02d6 49       		.uleb128 0x49
 6286 02d7 13       		.uleb128 0x13
 6287 02d8 02       		.uleb128 0x2
 6288 02d9 06       		.uleb128 0x6
 6289 02da 00       		.byte	0
 6290 02db 00       		.byte	0
ARM GAS  /tmp/cc2ibVgV.s 			page 169


 6291 02dc 34       		.uleb128 0x34
 6292 02dd 0B       		.uleb128 0xb
 6293 02de 01       		.byte	0x1
 6294 02df 55       		.uleb128 0x55
 6295 02e0 06       		.uleb128 0x6
 6296 02e1 01       		.uleb128 0x1
 6297 02e2 13       		.uleb128 0x13
 6298 02e3 00       		.byte	0
 6299 02e4 00       		.byte	0
 6300 02e5 35       		.uleb128 0x35
 6301 02e6 1D       		.uleb128 0x1d
 6302 02e7 01       		.byte	0x1
 6303 02e8 31       		.uleb128 0x31
 6304 02e9 13       		.uleb128 0x13
 6305 02ea 52       		.uleb128 0x52
 6306 02eb 01       		.uleb128 0x1
 6307 02ec 55       		.uleb128 0x55
 6308 02ed 06       		.uleb128 0x6
 6309 02ee 58       		.uleb128 0x58
 6310 02ef 0B       		.uleb128 0xb
 6311 02f0 59       		.uleb128 0x59
 6312 02f1 05       		.uleb128 0x5
 6313 02f2 01       		.uleb128 0x1
 6314 02f3 13       		.uleb128 0x13
 6315 02f4 00       		.byte	0
 6316 02f5 00       		.byte	0
 6317 02f6 36       		.uleb128 0x36
 6318 02f7 0B       		.uleb128 0xb
 6319 02f8 01       		.byte	0x1
 6320 02f9 55       		.uleb128 0x55
 6321 02fa 06       		.uleb128 0x6
 6322 02fb 00       		.byte	0
 6323 02fc 00       		.byte	0
 6324 02fd 37       		.uleb128 0x37
 6325 02fe 2E       		.uleb128 0x2e
 6326 02ff 01       		.byte	0x1
 6327 0300 31       		.uleb128 0x31
 6328 0301 13       		.uleb128 0x13
 6329 0302 11       		.uleb128 0x11
 6330 0303 01       		.uleb128 0x1
 6331 0304 12       		.uleb128 0x12
 6332 0305 01       		.uleb128 0x1
 6333 0306 40       		.uleb128 0x40
 6334 0307 06       		.uleb128 0x6
 6335 0308 9742     		.uleb128 0x2117
 6336 030a 0C       		.uleb128 0xc
 6337 030b 01       		.uleb128 0x1
 6338 030c 13       		.uleb128 0x13
 6339 030d 00       		.byte	0
 6340 030e 00       		.byte	0
 6341 030f 38       		.uleb128 0x38
 6342 0310 05       		.uleb128 0x5
 6343 0311 00       		.byte	0
 6344 0312 31       		.uleb128 0x31
 6345 0313 13       		.uleb128 0x13
 6346 0314 1C       		.uleb128 0x1c
 6347 0315 0B       		.uleb128 0xb
ARM GAS  /tmp/cc2ibVgV.s 			page 170


 6348 0316 00       		.byte	0
 6349 0317 00       		.byte	0
 6350 0318 39       		.uleb128 0x39
 6351 0319 0B       		.uleb128 0xb
 6352 031a 01       		.byte	0x1
 6353 031b 11       		.uleb128 0x11
 6354 031c 01       		.uleb128 0x1
 6355 031d 12       		.uleb128 0x12
 6356 031e 01       		.uleb128 0x1
 6357 031f 01       		.uleb128 0x1
 6358 0320 13       		.uleb128 0x13
 6359 0321 00       		.byte	0
 6360 0322 00       		.byte	0
 6361 0323 3A       		.uleb128 0x3a
 6362 0324 34       		.uleb128 0x34
 6363 0325 00       		.byte	0
 6364 0326 31       		.uleb128 0x31
 6365 0327 13       		.uleb128 0x13
 6366 0328 00       		.byte	0
 6367 0329 00       		.byte	0
 6368 032a 3B       		.uleb128 0x3b
 6369 032b 2E       		.uleb128 0x2e
 6370 032c 01       		.byte	0x1
 6371 032d 31       		.uleb128 0x31
 6372 032e 13       		.uleb128 0x13
 6373 032f 11       		.uleb128 0x11
 6374 0330 01       		.uleb128 0x1
 6375 0331 12       		.uleb128 0x12
 6376 0332 01       		.uleb128 0x1
 6377 0333 40       		.uleb128 0x40
 6378 0334 0A       		.uleb128 0xa
 6379 0335 9742     		.uleb128 0x2117
 6380 0337 0C       		.uleb128 0xc
 6381 0338 01       		.uleb128 0x1
 6382 0339 13       		.uleb128 0x13
 6383 033a 00       		.byte	0
 6384 033b 00       		.byte	0
 6385 033c 3C       		.uleb128 0x3c
 6386 033d 05       		.uleb128 0x5
 6387 033e 00       		.byte	0
 6388 033f 31       		.uleb128 0x31
 6389 0340 13       		.uleb128 0x13
 6390 0341 02       		.uleb128 0x2
 6391 0342 0A       		.uleb128 0xa
 6392 0343 00       		.byte	0
 6393 0344 00       		.byte	0
 6394 0345 3D       		.uleb128 0x3d
 6395 0346 2E       		.uleb128 0x2e
 6396 0347 00       		.byte	0
 6397 0348 3F       		.uleb128 0x3f
 6398 0349 0C       		.uleb128 0xc
 6399 034a 3C       		.uleb128 0x3c
 6400 034b 0C       		.uleb128 0xc
 6401 034c 8740     		.uleb128 0x2007
 6402 034e 0E       		.uleb128 0xe
 6403 034f 03       		.uleb128 0x3
 6404 0350 0E       		.uleb128 0xe
ARM GAS  /tmp/cc2ibVgV.s 			page 171


 6405 0351 3A       		.uleb128 0x3a
 6406 0352 0B       		.uleb128 0xb
 6407 0353 3B       		.uleb128 0x3b
 6408 0354 05       		.uleb128 0x5
 6409 0355 00       		.byte	0
 6410 0356 00       		.byte	0
 6411 0357 00       		.byte	0
 6412              		.section	.debug_loc,"",%progbits
 6413              	.Ldebug_loc0:
 6414              	.LLST111:
 6415 0000 C00A0000 		.4byte	.LFB107-.Ltext0
 6416 0004 C20A0000 		.4byte	.LCFI34-.Ltext0
 6417 0008 0200     		.2byte	0x2
 6418 000a 7D       		.byte	0x7d
 6419 000b 00       		.sleb128 0
 6420 000c C20A0000 		.4byte	.LCFI34-.Ltext0
 6421 0010 D40A0000 		.4byte	.LFE107-.Ltext0
 6422 0014 0200     		.2byte	0x2
 6423 0016 7D       		.byte	0x7d
 6424 0017 08       		.sleb128 8
 6425 0018 00000000 		.4byte	0
 6426 001c 00000000 		.4byte	0
 6427              	.LLST112:
 6428 0020 C00A0000 		.4byte	.LVL253-.Ltext0
 6429 0024 C60A0000 		.4byte	.LVL254-.Ltext0
 6430 0028 0100     		.2byte	0x1
 6431 002a 50       		.byte	0x50
 6432 002b C60A0000 		.4byte	.LVL254-.Ltext0
 6433 002f D40A0000 		.4byte	.LFE107-.Ltext0
 6434 0033 0400     		.2byte	0x4
 6435 0035 F3       		.byte	0xf3
 6436 0036 01       		.uleb128 0x1
 6437 0037 50       		.byte	0x50
 6438 0038 9F       		.byte	0x9f
 6439 0039 00000000 		.4byte	0
 6440 003d 00000000 		.4byte	0
 6441              	.LLST113:
 6442 0041 C60A0000 		.4byte	.LVL254-.Ltext0
 6443 0045 D10A0000 		.4byte	.LVL255-1-.Ltext0
 6444 0049 0100     		.2byte	0x1
 6445 004b 50       		.byte	0x50
 6446 004c 00000000 		.4byte	0
 6447 0050 00000000 		.4byte	0
 6448              	.LLST106:
 6449 0054 540A0000 		.4byte	.LFB106-.Ltext0
 6450 0058 560A0000 		.4byte	.LCFI32-.Ltext0
 6451 005c 0200     		.2byte	0x2
 6452 005e 7D       		.byte	0x7d
 6453 005f 00       		.sleb128 0
 6454 0060 560A0000 		.4byte	.LCFI32-.Ltext0
 6455 0064 680A0000 		.4byte	.LFE106-.Ltext0
 6456 0068 0200     		.2byte	0x2
 6457 006a 7D       		.byte	0x7d
 6458 006b 08       		.sleb128 8
 6459 006c 00000000 		.4byte	0
 6460 0070 00000000 		.4byte	0
 6461              	.LLST107:
ARM GAS  /tmp/cc2ibVgV.s 			page 172


 6462 0074 540A0000 		.4byte	.LVL242-.Ltext0
 6463 0078 5A0A0000 		.4byte	.LVL243-.Ltext0
 6464 007c 0100     		.2byte	0x1
 6465 007e 50       		.byte	0x50
 6466 007f 5A0A0000 		.4byte	.LVL243-.Ltext0
 6467 0083 680A0000 		.4byte	.LFE106-.Ltext0
 6468 0087 0400     		.2byte	0x4
 6469 0089 F3       		.byte	0xf3
 6470 008a 01       		.uleb128 0x1
 6471 008b 50       		.byte	0x50
 6472 008c 9F       		.byte	0x9f
 6473 008d 00000000 		.4byte	0
 6474 0091 00000000 		.4byte	0
 6475              	.LLST108:
 6476 0095 5A0A0000 		.4byte	.LVL243-.Ltext0
 6477 0099 650A0000 		.4byte	.LVL244-1-.Ltext0
 6478 009d 0100     		.2byte	0x1
 6479 009f 50       		.byte	0x50
 6480 00a0 00000000 		.4byte	0
 6481 00a4 00000000 		.4byte	0
 6482              	.LLST98:
 6483 00a8 B4090000 		.4byte	.LFB105-.Ltext0
 6484 00ac B6090000 		.4byte	.LCFI29-.Ltext0
 6485 00b0 0200     		.2byte	0x2
 6486 00b2 7D       		.byte	0x7d
 6487 00b3 00       		.sleb128 0
 6488 00b4 B6090000 		.4byte	.LCFI29-.Ltext0
 6489 00b8 DC090000 		.4byte	.LFE105-.Ltext0
 6490 00bc 0200     		.2byte	0x2
 6491 00be 7D       		.byte	0x7d
 6492 00bf 08       		.sleb128 8
 6493 00c0 00000000 		.4byte	0
 6494 00c4 00000000 		.4byte	0
 6495              	.LLST99:
 6496 00c8 B4090000 		.4byte	.LVL229-.Ltext0
 6497 00cc BA090000 		.4byte	.LVL230-.Ltext0
 6498 00d0 0100     		.2byte	0x1
 6499 00d2 50       		.byte	0x50
 6500 00d3 BA090000 		.4byte	.LVL230-.Ltext0
 6501 00d7 DC090000 		.4byte	.LFE105-.Ltext0
 6502 00db 0400     		.2byte	0x4
 6503 00dd F3       		.byte	0xf3
 6504 00de 01       		.uleb128 0x1
 6505 00df 50       		.byte	0x50
 6506 00e0 9F       		.byte	0x9f
 6507 00e1 00000000 		.4byte	0
 6508 00e5 00000000 		.4byte	0
 6509              	.LLST100:
 6510 00e9 BA090000 		.4byte	.LVL230-.Ltext0
 6511 00ed D9090000 		.4byte	.LVL231-1-.Ltext0
 6512 00f1 0100     		.2byte	0x1
 6513 00f3 50       		.byte	0x50
 6514 00f4 00000000 		.4byte	0
 6515 00f8 00000000 		.4byte	0
 6516              	.LLST101:
 6517 00fc DC090000 		.4byte	.LFB104-.Ltext0
 6518 0100 DE090000 		.4byte	.LCFI30-.Ltext0
ARM GAS  /tmp/cc2ibVgV.s 			page 173


 6519 0104 0200     		.2byte	0x2
 6520 0106 7D       		.byte	0x7d
 6521 0107 00       		.sleb128 0
 6522 0108 DE090000 		.4byte	.LCFI30-.Ltext0
 6523 010c 040A0000 		.4byte	.LFE104-.Ltext0
 6524 0110 0200     		.2byte	0x2
 6525 0112 7D       		.byte	0x7d
 6526 0113 08       		.sleb128 8
 6527 0114 00000000 		.4byte	0
 6528 0118 00000000 		.4byte	0
 6529              	.LLST102:
 6530 011c DC090000 		.4byte	.LVL232-.Ltext0
 6531 0120 E2090000 		.4byte	.LVL233-.Ltext0
 6532 0124 0100     		.2byte	0x1
 6533 0126 50       		.byte	0x50
 6534 0127 E2090000 		.4byte	.LVL233-.Ltext0
 6535 012b 040A0000 		.4byte	.LFE104-.Ltext0
 6536 012f 0400     		.2byte	0x4
 6537 0131 F3       		.byte	0xf3
 6538 0132 01       		.uleb128 0x1
 6539 0133 50       		.byte	0x50
 6540 0134 9F       		.byte	0x9f
 6541 0135 00000000 		.4byte	0
 6542 0139 00000000 		.4byte	0
 6543              	.LLST103:
 6544 013d E2090000 		.4byte	.LVL233-.Ltext0
 6545 0141 010A0000 		.4byte	.LVL234-1-.Ltext0
 6546 0145 0100     		.2byte	0x1
 6547 0147 50       		.byte	0x50
 6548 0148 00000000 		.4byte	0
 6549 014c 00000000 		.4byte	0
 6550              	.LLST92:
 6551 0150 FC080000 		.4byte	.LFB103-.Ltext0
 6552 0154 FE080000 		.4byte	.LCFI27-.Ltext0
 6553 0158 0200     		.2byte	0x2
 6554 015a 7D       		.byte	0x7d
 6555 015b 00       		.sleb128 0
 6556 015c FE080000 		.4byte	.LCFI27-.Ltext0
 6557 0160 0C090000 		.4byte	.LFE103-.Ltext0
 6558 0164 0200     		.2byte	0x2
 6559 0166 7D       		.byte	0x7d
 6560 0167 08       		.sleb128 8
 6561 0168 00000000 		.4byte	0
 6562 016c 00000000 		.4byte	0
 6563              	.LLST93:
 6564 0170 FC080000 		.4byte	.LVL215-.Ltext0
 6565 0174 02090000 		.4byte	.LVL216-.Ltext0
 6566 0178 0100     		.2byte	0x1
 6567 017a 50       		.byte	0x50
 6568 017b 02090000 		.4byte	.LVL216-.Ltext0
 6569 017f 0C090000 		.4byte	.LFE103-.Ltext0
 6570 0183 0400     		.2byte	0x4
 6571 0185 F3       		.byte	0xf3
 6572 0186 01       		.uleb128 0x1
 6573 0187 50       		.byte	0x50
 6574 0188 9F       		.byte	0x9f
 6575 0189 00000000 		.4byte	0
ARM GAS  /tmp/cc2ibVgV.s 			page 174


 6576 018d 00000000 		.4byte	0
 6577              	.LLST94:
 6578 0191 02090000 		.4byte	.LVL216-.Ltext0
 6579 0195 09090000 		.4byte	.LVL217-1-.Ltext0
 6580 0199 0100     		.2byte	0x1
 6581 019b 50       		.byte	0x50
 6582 019c 00000000 		.4byte	0
 6583 01a0 00000000 		.4byte	0
 6584              	.LLST77:
 6585 01a4 66070000 		.4byte	.LFB99-.Ltext0
 6586 01a8 6A070000 		.4byte	.LCFI21-.Ltext0
 6587 01ac 0200     		.2byte	0x2
 6588 01ae 7D       		.byte	0x7d
 6589 01af 00       		.sleb128 0
 6590 01b0 6A070000 		.4byte	.LCFI21-.Ltext0
 6591 01b4 B4070000 		.4byte	.LFE99-.Ltext0
 6592 01b8 0200     		.2byte	0x2
 6593 01ba 7D       		.byte	0x7d
 6594 01bb 08       		.sleb128 8
 6595 01bc 00000000 		.4byte	0
 6596 01c0 00000000 		.4byte	0
 6597              	.LLST78:
 6598 01c4 66070000 		.4byte	.LVL166-.Ltext0
 6599 01c8 72070000 		.4byte	.LVL169-.Ltext0
 6600 01cc 0100     		.2byte	0x1
 6601 01ce 50       		.byte	0x50
 6602 01cf 72070000 		.4byte	.LVL169-.Ltext0
 6603 01d3 B4070000 		.4byte	.LFE99-.Ltext0
 6604 01d7 0400     		.2byte	0x4
 6605 01d9 F3       		.byte	0xf3
 6606 01da 01       		.uleb128 0x1
 6607 01db 50       		.byte	0x50
 6608 01dc 9F       		.byte	0x9f
 6609 01dd 00000000 		.4byte	0
 6610 01e1 00000000 		.4byte	0
 6611              	.LLST79:
 6612 01e5 66070000 		.4byte	.LVL166-.Ltext0
 6613 01e9 6E070000 		.4byte	.LVL168-.Ltext0
 6614 01ed 0200     		.2byte	0x2
 6615 01ef 30       		.byte	0x30
 6616 01f0 9F       		.byte	0x9f
 6617 01f1 6E070000 		.4byte	.LVL168-.Ltext0
 6618 01f5 78070000 		.4byte	.LVL170-.Ltext0
 6619 01f9 0B00     		.2byte	0xb
 6620 01fb 72       		.byte	0x72
 6621 01fc 00       		.sleb128 0
 6622 01fd 08       		.byte	0x8
 6623 01fe 80       		.byte	0x80
 6624 01ff 1A       		.byte	0x1a
 6625 0200 30       		.byte	0x30
 6626 0201 2E       		.byte	0x2e
 6627 0202 08       		.byte	0x8
 6628 0203 FF       		.byte	0xff
 6629 0204 1A       		.byte	0x1a
 6630 0205 9F       		.byte	0x9f
 6631 0206 8E070000 		.4byte	.LVL173-.Ltext0
 6632 020a 98070000 		.4byte	.LVL174-.Ltext0
ARM GAS  /tmp/cc2ibVgV.s 			page 175


 6633 020e 0B00     		.2byte	0xb
 6634 0210 73       		.byte	0x73
 6635 0211 00       		.sleb128 0
 6636 0212 08       		.byte	0x8
 6637 0213 40       		.byte	0x40
 6638 0214 1A       		.byte	0x1a
 6639 0215 30       		.byte	0x30
 6640 0216 2E       		.byte	0x2e
 6641 0217 08       		.byte	0x8
 6642 0218 FF       		.byte	0xff
 6643 0219 1A       		.byte	0x1a
 6644 021a 9F       		.byte	0x9f
 6645 021b 00000000 		.4byte	0
 6646 021f 00000000 		.4byte	0
 6647              	.LLST80:
 6648 0223 68070000 		.4byte	.LVL167-.Ltext0
 6649 0227 B1070000 		.4byte	.LVL176-1-.Ltext0
 6650 022b 0100     		.2byte	0x1
 6651 022d 51       		.byte	0x51
 6652 022e 00000000 		.4byte	0
 6653 0232 00000000 		.4byte	0
 6654              	.LLST81:
 6655 0236 7E070000 		.4byte	.LVL171-.Ltext0
 6656 023a 8C070000 		.4byte	.LVL172-.Ltext0
 6657 023e 0100     		.2byte	0x1
 6658 0240 51       		.byte	0x51
 6659 0241 00000000 		.4byte	0
 6660 0245 00000000 		.4byte	0
 6661              	.LLST74:
 6662 0249 5A070000 		.4byte	.LFB98-.Ltext0
 6663 024d 5C070000 		.4byte	.LCFI20-.Ltext0
 6664 0251 0200     		.2byte	0x2
 6665 0253 7D       		.byte	0x7d
 6666 0254 00       		.sleb128 0
 6667 0255 5C070000 		.4byte	.LCFI20-.Ltext0
 6668 0259 64070000 		.4byte	.LFE98-.Ltext0
 6669 025d 0200     		.2byte	0x2
 6670 025f 7D       		.byte	0x7d
 6671 0260 08       		.sleb128 8
 6672 0261 00000000 		.4byte	0
 6673 0265 00000000 		.4byte	0
 6674              	.LLST75:
 6675 0269 5A070000 		.4byte	.LVL163-.Ltext0
 6676 026d 5E070000 		.4byte	.LVL164-.Ltext0
 6677 0271 0100     		.2byte	0x1
 6678 0273 50       		.byte	0x50
 6679 0274 5E070000 		.4byte	.LVL164-.Ltext0
 6680 0278 64070000 		.4byte	.LFE98-.Ltext0
 6681 027c 0400     		.2byte	0x4
 6682 027e F3       		.byte	0xf3
 6683 027f 01       		.uleb128 0x1
 6684 0280 50       		.byte	0x50
 6685 0281 9F       		.byte	0x9f
 6686 0282 00000000 		.4byte	0
 6687 0286 00000000 		.4byte	0
 6688              	.LLST76:
 6689 028a 5A070000 		.4byte	.LVL163-.Ltext0
ARM GAS  /tmp/cc2ibVgV.s 			page 176


 6690 028e 5E070000 		.4byte	.LVL164-.Ltext0
 6691 0292 0200     		.2byte	0x2
 6692 0294 70       		.byte	0x70
 6693 0295 24       		.sleb128 36
 6694 0296 5E070000 		.4byte	.LVL164-.Ltext0
 6695 029a 61070000 		.4byte	.LVL165-1-.Ltext0
 6696 029e 0500     		.2byte	0x5
 6697 02a0 F3       		.byte	0xf3
 6698 02a1 01       		.uleb128 0x1
 6699 02a2 50       		.byte	0x50
 6700 02a3 23       		.byte	0x23
 6701 02a4 24       		.uleb128 0x24
 6702 02a5 00000000 		.4byte	0
 6703 02a9 00000000 		.4byte	0
 6704              	.LLST66:
 6705 02ad A6060000 		.4byte	.LFB97-.Ltext0
 6706 02b1 A8060000 		.4byte	.LCFI18-.Ltext0
 6707 02b5 0200     		.2byte	0x2
 6708 02b7 7D       		.byte	0x7d
 6709 02b8 00       		.sleb128 0
 6710 02b9 A8060000 		.4byte	.LCFI18-.Ltext0
 6711 02bd DE060000 		.4byte	.LFE97-.Ltext0
 6712 02c1 0200     		.2byte	0x2
 6713 02c3 7D       		.byte	0x7d
 6714 02c4 08       		.sleb128 8
 6715 02c5 00000000 		.4byte	0
 6716 02c9 00000000 		.4byte	0
 6717              	.LLST67:
 6718 02cd A6060000 		.4byte	.LVL142-.Ltext0
 6719 02d1 D8060000 		.4byte	.LVL144-.Ltext0
 6720 02d5 0100     		.2byte	0x1
 6721 02d7 50       		.byte	0x50
 6722 02d8 D8060000 		.4byte	.LVL144-.Ltext0
 6723 02dc DE060000 		.4byte	.LFE97-.Ltext0
 6724 02e0 0400     		.2byte	0x4
 6725 02e2 F3       		.byte	0xf3
 6726 02e3 01       		.uleb128 0x1
 6727 02e4 50       		.byte	0x50
 6728 02e5 9F       		.byte	0x9f
 6729 02e6 00000000 		.4byte	0
 6730 02ea 00000000 		.4byte	0
 6731              	.LLST68:
 6732 02ee AC060000 		.4byte	.LVL143-.Ltext0
 6733 02f2 DB060000 		.4byte	.LVL145-1-.Ltext0
 6734 02f6 0100     		.2byte	0x1
 6735 02f8 52       		.byte	0x52
 6736 02f9 00000000 		.4byte	0
 6737 02fd 00000000 		.4byte	0
 6738              	.LLST63:
 6739 0301 9A060000 		.4byte	.LFB96-.Ltext0
 6740 0305 9C060000 		.4byte	.LCFI17-.Ltext0
 6741 0309 0200     		.2byte	0x2
 6742 030b 7D       		.byte	0x7d
 6743 030c 00       		.sleb128 0
 6744 030d 9C060000 		.4byte	.LCFI17-.Ltext0
 6745 0311 A4060000 		.4byte	.LFE96-.Ltext0
 6746 0315 0200     		.2byte	0x2
ARM GAS  /tmp/cc2ibVgV.s 			page 177


 6747 0317 7D       		.byte	0x7d
 6748 0318 08       		.sleb128 8
 6749 0319 00000000 		.4byte	0
 6750 031d 00000000 		.4byte	0
 6751              	.LLST64:
 6752 0321 9A060000 		.4byte	.LVL139-.Ltext0
 6753 0325 9E060000 		.4byte	.LVL140-.Ltext0
 6754 0329 0100     		.2byte	0x1
 6755 032b 50       		.byte	0x50
 6756 032c 9E060000 		.4byte	.LVL140-.Ltext0
 6757 0330 A4060000 		.4byte	.LFE96-.Ltext0
 6758 0334 0400     		.2byte	0x4
 6759 0336 F3       		.byte	0xf3
 6760 0337 01       		.uleb128 0x1
 6761 0338 50       		.byte	0x50
 6762 0339 9F       		.byte	0x9f
 6763 033a 00000000 		.4byte	0
 6764 033e 00000000 		.4byte	0
 6765              	.LLST65:
 6766 0342 9A060000 		.4byte	.LVL139-.Ltext0
 6767 0346 9E060000 		.4byte	.LVL140-.Ltext0
 6768 034a 0200     		.2byte	0x2
 6769 034c 70       		.byte	0x70
 6770 034d 24       		.sleb128 36
 6771 034e 9E060000 		.4byte	.LVL140-.Ltext0
 6772 0352 A1060000 		.4byte	.LVL141-1-.Ltext0
 6773 0356 0500     		.2byte	0x5
 6774 0358 F3       		.byte	0xf3
 6775 0359 01       		.uleb128 0x1
 6776 035a 50       		.byte	0x50
 6777 035b 23       		.byte	0x23
 6778 035c 24       		.uleb128 0x24
 6779 035d 00000000 		.4byte	0
 6780 0361 00000000 		.4byte	0
 6781              	.LLST60:
 6782 0365 6C060000 		.4byte	.LFB95-.Ltext0
 6783 0369 6E060000 		.4byte	.LCFI16-.Ltext0
 6784 036d 0200     		.2byte	0x2
 6785 036f 7D       		.byte	0x7d
 6786 0370 00       		.sleb128 0
 6787 0371 6E060000 		.4byte	.LCFI16-.Ltext0
 6788 0375 98060000 		.4byte	.LFE95-.Ltext0
 6789 0379 0200     		.2byte	0x2
 6790 037b 7D       		.byte	0x7d
 6791 037c 08       		.sleb128 8
 6792 037d 00000000 		.4byte	0
 6793 0381 00000000 		.4byte	0
 6794              	.LLST61:
 6795 0385 6C060000 		.4byte	.LVL133-.Ltext0
 6796 0389 92060000 		.4byte	.LVL137-.Ltext0
 6797 038d 0100     		.2byte	0x1
 6798 038f 50       		.byte	0x50
 6799 0390 92060000 		.4byte	.LVL137-.Ltext0
 6800 0394 98060000 		.4byte	.LFE95-.Ltext0
 6801 0398 0400     		.2byte	0x4
 6802 039a F3       		.byte	0xf3
 6803 039b 01       		.uleb128 0x1
ARM GAS  /tmp/cc2ibVgV.s 			page 178


 6804 039c 50       		.byte	0x50
 6805 039d 9F       		.byte	0x9f
 6806 039e 00000000 		.4byte	0
 6807 03a2 00000000 		.4byte	0
 6808              	.LLST62:
 6809 03a6 72060000 		.4byte	.LVL134-.Ltext0
 6810 03aa 80060000 		.4byte	.LVL135-.Ltext0
 6811 03ae 0100     		.2byte	0x1
 6812 03b0 52       		.byte	0x52
 6813 03b1 80060000 		.4byte	.LVL135-.Ltext0
 6814 03b5 90060000 		.4byte	.LVL136-.Ltext0
 6815 03b9 0200     		.2byte	0x2
 6816 03bb 70       		.byte	0x70
 6817 03bc 24       		.sleb128 36
 6818 03bd 90060000 		.4byte	.LVL136-.Ltext0
 6819 03c1 95060000 		.4byte	.LVL138-1-.Ltext0
 6820 03c5 0100     		.2byte	0x1
 6821 03c7 52       		.byte	0x52
 6822 03c8 00000000 		.4byte	0
 6823 03cc 00000000 		.4byte	0
 6824              	.LLST117:
 6825 03d0 E00A0000 		.4byte	.LVL260-.Ltext0
 6826 03d4 E20A0000 		.4byte	.LVL261-.Ltext0
 6827 03d8 0100     		.2byte	0x1
 6828 03da 50       		.byte	0x50
 6829 03db E20A0000 		.4byte	.LVL261-.Ltext0
 6830 03df E40A0000 		.4byte	.LFE94-.Ltext0
 6831 03e3 0400     		.2byte	0x4
 6832 03e5 F3       		.byte	0xf3
 6833 03e6 01       		.uleb128 0x1
 6834 03e7 50       		.byte	0x50
 6835 03e8 9F       		.byte	0x9f
 6836 03e9 00000000 		.4byte	0
 6837 03ed 00000000 		.4byte	0
 6838              	.LLST114:
 6839 03f1 D40A0000 		.4byte	.LVL256-.Ltext0
 6840 03f5 DC0A0000 		.4byte	.LVL258-.Ltext0
 6841 03f9 0100     		.2byte	0x1
 6842 03fb 50       		.byte	0x50
 6843 03fc DC0A0000 		.4byte	.LVL258-.Ltext0
 6844 0400 E00A0000 		.4byte	.LFE93-.Ltext0
 6845 0404 0400     		.2byte	0x4
 6846 0406 F3       		.byte	0xf3
 6847 0407 01       		.uleb128 0x1
 6848 0408 50       		.byte	0x50
 6849 0409 9F       		.byte	0x9f
 6850 040a 00000000 		.4byte	0
 6851 040e 00000000 		.4byte	0
 6852              	.LLST115:
 6853 0412 D40A0000 		.4byte	.LVL256-.Ltext0
 6854 0416 D80A0000 		.4byte	.LVL257-.Ltext0
 6855 041a 0200     		.2byte	0x2
 6856 041c 30       		.byte	0x30
 6857 041d 9F       		.byte	0x9f
 6858 041e D80A0000 		.4byte	.LVL257-.Ltext0
 6859 0422 E00A0000 		.4byte	.LFE93-.Ltext0
 6860 0426 0100     		.2byte	0x1
ARM GAS  /tmp/cc2ibVgV.s 			page 179


 6861 0428 52       		.byte	0x52
 6862 0429 00000000 		.4byte	0
 6863 042d 00000000 		.4byte	0
 6864              	.LLST116:
 6865 0431 D40A0000 		.4byte	.LVL256-.Ltext0
 6866 0435 DC0A0000 		.4byte	.LVL258-.Ltext0
 6867 0439 0200     		.2byte	0x2
 6868 043b 30       		.byte	0x30
 6869 043c 9F       		.byte	0x9f
 6870 043d DC0A0000 		.4byte	.LVL258-.Ltext0
 6871 0441 DE0A0000 		.4byte	.LVL259-.Ltext0
 6872 0445 0100     		.2byte	0x1
 6873 0447 50       		.byte	0x50
 6874 0448 00000000 		.4byte	0
 6875 044c 00000000 		.4byte	0
 6876              	.LLST82:
 6877 0450 B4070000 		.4byte	.LFB84-.Ltext0
 6878 0454 B8070000 		.4byte	.LCFI22-.Ltext0
 6879 0458 0200     		.2byte	0x2
 6880 045a 7D       		.byte	0x7d
 6881 045b 00       		.sleb128 0
 6882 045c B8070000 		.4byte	.LCFI22-.Ltext0
 6883 0460 D0070000 		.4byte	.LCFI23-.Ltext0
 6884 0464 0200     		.2byte	0x2
 6885 0466 7D       		.byte	0x7d
 6886 0467 10       		.sleb128 16
 6887 0468 D0070000 		.4byte	.LCFI23-.Ltext0
 6888 046c D2070000 		.4byte	.LCFI24-.Ltext0
 6889 0470 0200     		.2byte	0x2
 6890 0472 7D       		.byte	0x7d
 6891 0473 00       		.sleb128 0
 6892 0474 D2070000 		.4byte	.LCFI24-.Ltext0
 6893 0478 68080000 		.4byte	.LCFI25-.Ltext0
 6894 047c 0200     		.2byte	0x2
 6895 047e 7D       		.byte	0x7d
 6896 047f 10       		.sleb128 16
 6897 0480 68080000 		.4byte	.LCFI25-.Ltext0
 6898 0484 6C080000 		.4byte	.LCFI26-.Ltext0
 6899 0488 0200     		.2byte	0x2
 6900 048a 7D       		.byte	0x7d
 6901 048b 00       		.sleb128 0
 6902 048c 6C080000 		.4byte	.LCFI26-.Ltext0
 6903 0490 FC080000 		.4byte	.LFE84-.Ltext0
 6904 0494 0200     		.2byte	0x2
 6905 0496 7D       		.byte	0x7d
 6906 0497 10       		.sleb128 16
 6907 0498 00000000 		.4byte	0
 6908 049c 00000000 		.4byte	0
 6909              	.LLST83:
 6910 04a0 B4070000 		.4byte	.LVL177-.Ltext0
 6911 04a4 D1070000 		.4byte	.LVL182-1-.Ltext0
 6912 04a8 0100     		.2byte	0x1
 6913 04aa 50       		.byte	0x50
 6914 04ab D1070000 		.4byte	.LVL182-1-.Ltext0
 6915 04af D2070000 		.4byte	.LVL182-.Ltext0
 6916 04b3 0400     		.2byte	0x4
 6917 04b5 F3       		.byte	0xf3
ARM GAS  /tmp/cc2ibVgV.s 			page 180


 6918 04b6 01       		.uleb128 0x1
 6919 04b7 50       		.byte	0x50
 6920 04b8 9F       		.byte	0x9f
 6921 04b9 D2070000 		.4byte	.LVL182-.Ltext0
 6922 04bd F0070000 		.4byte	.LVL184-.Ltext0
 6923 04c1 0100     		.2byte	0x1
 6924 04c3 50       		.byte	0x50
 6925 04c4 F0070000 		.4byte	.LVL184-.Ltext0
 6926 04c8 38080000 		.4byte	.LVL187-.Ltext0
 6927 04cc 0100     		.2byte	0x1
 6928 04ce 54       		.byte	0x54
 6929 04cf 38080000 		.4byte	.LVL187-.Ltext0
 6930 04d3 4E080000 		.4byte	.LVL191-.Ltext0
 6931 04d7 0100     		.2byte	0x1
 6932 04d9 50       		.byte	0x50
 6933 04da 4E080000 		.4byte	.LVL191-.Ltext0
 6934 04de 68080000 		.4byte	.LVL193-.Ltext0
 6935 04e2 0100     		.2byte	0x1
 6936 04e4 54       		.byte	0x54
 6937 04e5 68080000 		.4byte	.LVL193-.Ltext0
 6938 04e9 6C080000 		.4byte	.LVL194-.Ltext0
 6939 04ed 0400     		.2byte	0x4
 6940 04ef F3       		.byte	0xf3
 6941 04f0 01       		.uleb128 0x1
 6942 04f1 50       		.byte	0x50
 6943 04f2 9F       		.byte	0x9f
 6944 04f3 6C080000 		.4byte	.LVL194-.Ltext0
 6945 04f7 74080000 		.4byte	.LVL196-.Ltext0
 6946 04fb 0100     		.2byte	0x1
 6947 04fd 54       		.byte	0x54
 6948 04fe 74080000 		.4byte	.LVL196-.Ltext0
 6949 0502 77080000 		.4byte	.LVL197-1-.Ltext0
 6950 0506 0100     		.2byte	0x1
 6951 0508 50       		.byte	0x50
 6952 0509 77080000 		.4byte	.LVL197-1-.Ltext0
 6953 050d 7C080000 		.4byte	.LVL198-.Ltext0
 6954 0511 0100     		.2byte	0x1
 6955 0513 54       		.byte	0x54
 6956 0514 7C080000 		.4byte	.LVL198-.Ltext0
 6957 0518 D2080000 		.4byte	.LVL210-.Ltext0
 6958 051c 0100     		.2byte	0x1
 6959 051e 50       		.byte	0x50
 6960 051f D2080000 		.4byte	.LVL210-.Ltext0
 6961 0523 F6080000 		.4byte	.LVL214-.Ltext0
 6962 0527 0100     		.2byte	0x1
 6963 0529 54       		.byte	0x54
 6964 052a F6080000 		.4byte	.LVL214-.Ltext0
 6965 052e FC080000 		.4byte	.LFE84-.Ltext0
 6966 0532 0400     		.2byte	0x4
 6967 0534 F3       		.byte	0xf3
 6968 0535 01       		.uleb128 0x1
 6969 0536 50       		.byte	0x50
 6970 0537 9F       		.byte	0x9f
 6971 0538 00000000 		.4byte	0
 6972 053c 00000000 		.4byte	0
 6973              	.LLST84:
 6974 0540 BA070000 		.4byte	.LVL178-.Ltext0
ARM GAS  /tmp/cc2ibVgV.s 			page 181


 6975 0544 D1070000 		.4byte	.LVL182-1-.Ltext0
 6976 0548 0100     		.2byte	0x1
 6977 054a 52       		.byte	0x52
 6978 054b D2070000 		.4byte	.LVL182-.Ltext0
 6979 054f 2B080000 		.4byte	.LVL185-1-.Ltext0
 6980 0553 0100     		.2byte	0x1
 6981 0555 52       		.byte	0x52
 6982 0556 7C080000 		.4byte	.LVL198-.Ltext0
 6983 055a 88080000 		.4byte	.LVL200-.Ltext0
 6984 055e 0100     		.2byte	0x1
 6985 0560 52       		.byte	0x52
 6986 0561 D0080000 		.4byte	.LVL209-.Ltext0
 6987 0565 D6080000 		.4byte	.LVL211-.Ltext0
 6988 0569 0100     		.2byte	0x1
 6989 056b 52       		.byte	0x52
 6990 056c 00000000 		.4byte	0
 6991 0570 00000000 		.4byte	0
 6992              	.LLST85:
 6993 0574 C0070000 		.4byte	.LVL179-.Ltext0
 6994 0578 D1070000 		.4byte	.LVL182-1-.Ltext0
 6995 057c 0100     		.2byte	0x1
 6996 057e 51       		.byte	0x51
 6997 057f D2070000 		.4byte	.LVL182-.Ltext0
 6998 0583 2B080000 		.4byte	.LVL185-1-.Ltext0
 6999 0587 0100     		.2byte	0x1
 7000 0589 51       		.byte	0x51
 7001 058a 7C080000 		.4byte	.LVL198-.Ltext0
 7002 058e 98080000 		.4byte	.LVL202-.Ltext0
 7003 0592 0100     		.2byte	0x1
 7004 0594 51       		.byte	0x51
 7005 0595 C6080000 		.4byte	.LVL207-.Ltext0
 7006 0599 C8080000 		.4byte	.LVL208-.Ltext0
 7007 059d 0100     		.2byte	0x1
 7008 059f 51       		.byte	0x51
 7009 05a0 D0080000 		.4byte	.LVL209-.Ltext0
 7010 05a4 F3080000 		.4byte	.LVL213-1-.Ltext0
 7011 05a8 0100     		.2byte	0x1
 7012 05aa 51       		.byte	0x51
 7013 05ab 00000000 		.4byte	0
 7014 05af 00000000 		.4byte	0
 7015              	.LLST86:
 7016 05b3 C2070000 		.4byte	.LVL180-.Ltext0
 7017 05b7 CA070000 		.4byte	.LVL181-.Ltext0
 7018 05bb 0100     		.2byte	0x1
 7019 05bd 55       		.byte	0x55
 7020 05be D2070000 		.4byte	.LVL182-.Ltext0
 7021 05c2 D6070000 		.4byte	.LVL183-.Ltext0
 7022 05c6 0100     		.2byte	0x1
 7023 05c8 55       		.byte	0x55
 7024 05c9 00000000 		.4byte	0
 7025 05cd 00000000 		.4byte	0
 7026              	.LLST87:
 7027 05d1 C2070000 		.4byte	.LVL180-.Ltext0
 7028 05d5 D1070000 		.4byte	.LVL182-1-.Ltext0
 7029 05d9 0500     		.2byte	0x5
 7030 05db 72       		.byte	0x72
 7031 05dc 00       		.sleb128 0
ARM GAS  /tmp/cc2ibVgV.s 			page 182


 7032 05dd 3F       		.byte	0x3f
 7033 05de 1A       		.byte	0x1a
 7034 05df 9F       		.byte	0x9f
 7035 05e0 D2070000 		.4byte	.LVL182-.Ltext0
 7036 05e4 2B080000 		.4byte	.LVL185-1-.Ltext0
 7037 05e8 0500     		.2byte	0x5
 7038 05ea 72       		.byte	0x72
 7039 05eb 00       		.sleb128 0
 7040 05ec 3F       		.byte	0x3f
 7041 05ed 1A       		.byte	0x1a
 7042 05ee 9F       		.byte	0x9f
 7043 05ef 7C080000 		.4byte	.LVL198-.Ltext0
 7044 05f3 88080000 		.4byte	.LVL200-.Ltext0
 7045 05f7 0500     		.2byte	0x5
 7046 05f9 72       		.byte	0x72
 7047 05fa 00       		.sleb128 0
 7048 05fb 3F       		.byte	0x3f
 7049 05fc 1A       		.byte	0x1a
 7050 05fd 9F       		.byte	0x9f
 7051 05fe D0080000 		.4byte	.LVL209-.Ltext0
 7052 0602 D6080000 		.4byte	.LVL211-.Ltext0
 7053 0606 0500     		.2byte	0x5
 7054 0608 72       		.byte	0x72
 7055 0609 00       		.sleb128 0
 7056 060a 3F       		.byte	0x3f
 7057 060b 1A       		.byte	0x1a
 7058 060c 9F       		.byte	0x9f
 7059 060d 00000000 		.4byte	0
 7060 0611 00000000 		.4byte	0
 7061              	.LLST88:
 7062 0615 C2070000 		.4byte	.LVL180-.Ltext0
 7063 0619 32080000 		.4byte	.LVL186-.Ltext0
 7064 061d 0200     		.2byte	0x2
 7065 061f 30       		.byte	0x30
 7066 0620 9F       		.byte	0x9f
 7067 0621 32080000 		.4byte	.LVL186-.Ltext0
 7068 0625 3C080000 		.4byte	.LVL188-.Ltext0
 7069 0629 0B00     		.2byte	0xb
 7070 062b 75       		.byte	0x75
 7071 062c 00       		.sleb128 0
 7072 062d 08       		.byte	0x8
 7073 062e 40       		.byte	0x40
 7074 062f 1A       		.byte	0x1a
 7075 0630 30       		.byte	0x30
 7076 0631 2E       		.byte	0x2e
 7077 0632 08       		.byte	0x8
 7078 0633 FF       		.byte	0xff
 7079 0634 1A       		.byte	0x1a
 7080 0635 9F       		.byte	0x9f
 7081 0636 3C080000 		.4byte	.LVL188-.Ltext0
 7082 063a 3E080000 		.4byte	.LVL189-.Ltext0
 7083 063e 0800     		.2byte	0x8
 7084 0640 75       		.byte	0x75
 7085 0641 00       		.sleb128 0
 7086 0642 30       		.byte	0x30
 7087 0643 2E       		.byte	0x2e
 7088 0644 08       		.byte	0x8
ARM GAS  /tmp/cc2ibVgV.s 			page 183


 7089 0645 FF       		.byte	0xff
 7090 0646 1A       		.byte	0x1a
 7091 0647 9F       		.byte	0x9f
 7092 0648 74080000 		.4byte	.LVL196-.Ltext0
 7093 064c 7C080000 		.4byte	.LVL198-.Ltext0
 7094 0650 0800     		.2byte	0x8
 7095 0652 75       		.byte	0x75
 7096 0653 00       		.sleb128 0
 7097 0654 30       		.byte	0x30
 7098 0655 2E       		.byte	0x2e
 7099 0656 08       		.byte	0x8
 7100 0657 FF       		.byte	0xff
 7101 0658 1A       		.byte	0x1a
 7102 0659 9F       		.byte	0x9f
 7103 065a 7C080000 		.4byte	.LVL198-.Ltext0
 7104 065e F4080000 		.4byte	.LVL213-.Ltext0
 7105 0662 0200     		.2byte	0x2
 7106 0664 30       		.byte	0x30
 7107 0665 9F       		.byte	0x9f
 7108 0666 00000000 		.4byte	0
 7109 066a 00000000 		.4byte	0
 7110              	.LLST89:
 7111 066e 84080000 		.4byte	.LVL199-.Ltext0
 7112 0672 D0080000 		.4byte	.LVL209-.Ltext0
 7113 0676 0100     		.2byte	0x1
 7114 0678 50       		.byte	0x50
 7115 0679 00000000 		.4byte	0
 7116 067d 00000000 		.4byte	0
 7117              	.LLST90:
 7118 0681 96080000 		.4byte	.LVL201-.Ltext0
 7119 0685 A4080000 		.4byte	.LVL203-.Ltext0
 7120 0689 0100     		.2byte	0x1
 7121 068b 52       		.byte	0x52
 7122 068c A4080000 		.4byte	.LVL203-.Ltext0
 7123 0690 A6080000 		.4byte	.LVL204-.Ltext0
 7124 0694 0200     		.2byte	0x2
 7125 0696 70       		.byte	0x70
 7126 0697 1C       		.sleb128 28
 7127 0698 C2080000 		.4byte	.LVL205-.Ltext0
 7128 069c C4080000 		.4byte	.LVL206-.Ltext0
 7129 06a0 0100     		.2byte	0x1
 7130 06a2 52       		.byte	0x52
 7131 06a3 C4080000 		.4byte	.LVL206-.Ltext0
 7132 06a7 C6080000 		.4byte	.LVL207-.Ltext0
 7133 06ab 0200     		.2byte	0x2
 7134 06ad 70       		.byte	0x70
 7135 06ae 1C       		.sleb128 28
 7136 06af 00000000 		.4byte	0
 7137 06b3 00000000 		.4byte	0
 7138              	.LLST91:
 7139 06b7 D8080000 		.4byte	.LVL212-.Ltext0
 7140 06bb F4080000 		.4byte	.LVL213-.Ltext0
 7141 06bf 0100     		.2byte	0x1
 7142 06c1 54       		.byte	0x54
 7143 06c2 00000000 		.4byte	0
 7144 06c6 00000000 		.4byte	0
 7145              	.LLST109:
ARM GAS  /tmp/cc2ibVgV.s 			page 184


 7146 06ca 6A0A0000 		.4byte	.LFB83-.Ltext0
 7147 06ce 6E0A0000 		.4byte	.LCFI33-.Ltext0
 7148 06d2 0200     		.2byte	0x2
 7149 06d4 7D       		.byte	0x7d
 7150 06d5 00       		.sleb128 0
 7151 06d6 6E0A0000 		.4byte	.LCFI33-.Ltext0
 7152 06da C00A0000 		.4byte	.LFE83-.Ltext0
 7153 06de 0200     		.2byte	0x2
 7154 06e0 7D       		.byte	0x7d
 7155 06e1 08       		.sleb128 8
 7156 06e2 00000000 		.4byte	0
 7157 06e6 00000000 		.4byte	0
 7158              	.LLST110:
 7159 06ea 6A0A0000 		.4byte	.LVL246-.Ltext0
 7160 06ee 980A0000 		.4byte	.LVL247-.Ltext0
 7161 06f2 0100     		.2byte	0x1
 7162 06f4 50       		.byte	0x50
 7163 06f5 980A0000 		.4byte	.LVL247-.Ltext0
 7164 06f9 AA0A0000 		.4byte	.LVL250-.Ltext0
 7165 06fd 0100     		.2byte	0x1
 7166 06ff 54       		.byte	0x54
 7167 0700 AA0A0000 		.4byte	.LVL250-.Ltext0
 7168 0704 B50A0000 		.4byte	.LVL251-1-.Ltext0
 7169 0708 0100     		.2byte	0x1
 7170 070a 50       		.byte	0x50
 7171 070b B50A0000 		.4byte	.LVL251-1-.Ltext0
 7172 070f B80A0000 		.4byte	.LVL252-.Ltext0
 7173 0713 0100     		.2byte	0x1
 7174 0715 54       		.byte	0x54
 7175 0716 B80A0000 		.4byte	.LVL252-.Ltext0
 7176 071a C00A0000 		.4byte	.LFE83-.Ltext0
 7177 071e 0100     		.2byte	0x1
 7178 0720 50       		.byte	0x50
 7179 0721 00000000 		.4byte	0
 7180 0725 00000000 		.4byte	0
 7181              	.LLST104:
 7182 0729 060A0000 		.4byte	.LFB82-.Ltext0
 7183 072d 0A0A0000 		.4byte	.LCFI31-.Ltext0
 7184 0731 0200     		.2byte	0x2
 7185 0733 7D       		.byte	0x7d
 7186 0734 00       		.sleb128 0
 7187 0735 0A0A0000 		.4byte	.LCFI31-.Ltext0
 7188 0739 540A0000 		.4byte	.LFE82-.Ltext0
 7189 073d 0200     		.2byte	0x2
 7190 073f 7D       		.byte	0x7d
 7191 0740 08       		.sleb128 8
 7192 0741 00000000 		.4byte	0
 7193 0745 00000000 		.4byte	0
 7194              	.LLST105:
 7195 0749 060A0000 		.4byte	.LVL235-.Ltext0
 7196 074d 2C0A0000 		.4byte	.LVL236-.Ltext0
 7197 0751 0100     		.2byte	0x1
 7198 0753 50       		.byte	0x50
 7199 0754 2C0A0000 		.4byte	.LVL236-.Ltext0
 7200 0758 3E0A0000 		.4byte	.LVL239-.Ltext0
 7201 075c 0100     		.2byte	0x1
 7202 075e 54       		.byte	0x54
ARM GAS  /tmp/cc2ibVgV.s 			page 185


 7203 075f 3E0A0000 		.4byte	.LVL239-.Ltext0
 7204 0763 490A0000 		.4byte	.LVL240-1-.Ltext0
 7205 0767 0100     		.2byte	0x1
 7206 0769 50       		.byte	0x50
 7207 076a 490A0000 		.4byte	.LVL240-1-.Ltext0
 7208 076e 4C0A0000 		.4byte	.LVL241-.Ltext0
 7209 0772 0100     		.2byte	0x1
 7210 0774 54       		.byte	0x54
 7211 0775 4C0A0000 		.4byte	.LVL241-.Ltext0
 7212 0779 540A0000 		.4byte	.LFE82-.Ltext0
 7213 077d 0100     		.2byte	0x1
 7214 077f 50       		.byte	0x50
 7215 0780 00000000 		.4byte	0
 7216 0784 00000000 		.4byte	0
 7217              	.LLST95:
 7218 0788 0E090000 		.4byte	.LFB81-.Ltext0
 7219 078c 12090000 		.4byte	.LCFI28-.Ltext0
 7220 0790 0200     		.2byte	0x2
 7221 0792 7D       		.byte	0x7d
 7222 0793 00       		.sleb128 0
 7223 0794 12090000 		.4byte	.LCFI28-.Ltext0
 7224 0798 B4090000 		.4byte	.LFE81-.Ltext0
 7225 079c 0200     		.2byte	0x2
 7226 079e 7D       		.byte	0x7d
 7227 079f 08       		.sleb128 8
 7228 07a0 00000000 		.4byte	0
 7229 07a4 00000000 		.4byte	0
 7230              	.LLST96:
 7231 07a8 0E090000 		.4byte	.LVL218-.Ltext0
 7232 07ac 20090000 		.4byte	.LVL219-.Ltext0
 7233 07b0 0100     		.2byte	0x1
 7234 07b2 50       		.byte	0x50
 7235 07b3 20090000 		.4byte	.LVL219-.Ltext0
 7236 07b7 AC090000 		.4byte	.LVL228-.Ltext0
 7237 07bb 0100     		.2byte	0x1
 7238 07bd 54       		.byte	0x54
 7239 07be AC090000 		.4byte	.LVL228-.Ltext0
 7240 07c2 B4090000 		.4byte	.LFE81-.Ltext0
 7241 07c6 0400     		.2byte	0x4
 7242 07c8 F3       		.byte	0xf3
 7243 07c9 01       		.uleb128 0x1
 7244 07ca 50       		.byte	0x50
 7245 07cb 9F       		.byte	0x9f
 7246 07cc 00000000 		.4byte	0
 7247 07d0 00000000 		.4byte	0
 7248              	.LLST97:
 7249 07d4 0E090000 		.4byte	.LVL218-.Ltext0
 7250 07d8 4C090000 		.4byte	.LVL220-.Ltext0
 7251 07dc 0200     		.2byte	0x2
 7252 07de 31       		.byte	0x31
 7253 07df 9F       		.byte	0x9f
 7254 07e0 4C090000 		.4byte	.LVL220-.Ltext0
 7255 07e4 63090000 		.4byte	.LVL221-1-.Ltext0
 7256 07e8 0100     		.2byte	0x1
 7257 07ea 53       		.byte	0x53
 7258 07eb 86090000 		.4byte	.LVL224-.Ltext0
 7259 07ef A4090000 		.4byte	.LVL226-.Ltext0
ARM GAS  /tmp/cc2ibVgV.s 			page 186


 7260 07f3 0200     		.2byte	0x2
 7261 07f5 31       		.byte	0x31
 7262 07f6 9F       		.byte	0x9f
 7263 07f7 A4090000 		.4byte	.LVL226-.Ltext0
 7264 07fb A8090000 		.4byte	.LVL227-.Ltext0
 7265 07ff 0100     		.2byte	0x1
 7266 0801 53       		.byte	0x53
 7267 0802 00000000 		.4byte	0
 7268 0806 00000000 		.4byte	0
 7269              	.LLST58:
 7270 080a 2E060000 		.4byte	.LFB80-.Ltext0
 7271 080e 32060000 		.4byte	.LCFI15-.Ltext0
 7272 0812 0200     		.2byte	0x2
 7273 0814 7D       		.byte	0x7d
 7274 0815 00       		.sleb128 0
 7275 0816 32060000 		.4byte	.LCFI15-.Ltext0
 7276 081a 6A060000 		.4byte	.LFE80-.Ltext0
 7277 081e 0200     		.2byte	0x2
 7278 0820 7D       		.byte	0x7d
 7279 0821 08       		.sleb128 8
 7280 0822 00000000 		.4byte	0
 7281 0826 00000000 		.4byte	0
 7282              	.LLST59:
 7283 082a 2E060000 		.4byte	.LVL130-.Ltext0
 7284 082e 4E060000 		.4byte	.LVL131-.Ltext0
 7285 0832 0100     		.2byte	0x1
 7286 0834 50       		.byte	0x50
 7287 0835 4E060000 		.4byte	.LVL131-.Ltext0
 7288 0839 6A060000 		.4byte	.LFE80-.Ltext0
 7289 083d 0100     		.2byte	0x1
 7290 083f 54       		.byte	0x54
 7291 0840 00000000 		.4byte	0
 7292 0844 00000000 		.4byte	0
 7293              	.LLST56:
 7294 0848 FA050000 		.4byte	.LFB79-.Ltext0
 7295 084c FE050000 		.4byte	.LCFI14-.Ltext0
 7296 0850 0200     		.2byte	0x2
 7297 0852 7D       		.byte	0x7d
 7298 0853 00       		.sleb128 0
 7299 0854 FE050000 		.4byte	.LCFI14-.Ltext0
 7300 0858 2E060000 		.4byte	.LFE79-.Ltext0
 7301 085c 0200     		.2byte	0x2
 7302 085e 7D       		.byte	0x7d
 7303 085f 08       		.sleb128 8
 7304 0860 00000000 		.4byte	0
 7305 0864 00000000 		.4byte	0
 7306              	.LLST57:
 7307 0868 FA050000 		.4byte	.LVL127-.Ltext0
 7308 086c 12060000 		.4byte	.LVL128-.Ltext0
 7309 0870 0100     		.2byte	0x1
 7310 0872 50       		.byte	0x50
 7311 0873 12060000 		.4byte	.LVL128-.Ltext0
 7312 0877 2E060000 		.4byte	.LFE79-.Ltext0
 7313 087b 0100     		.2byte	0x1
 7314 087d 54       		.byte	0x54
 7315 087e 00000000 		.4byte	0
 7316 0882 00000000 		.4byte	0
ARM GAS  /tmp/cc2ibVgV.s 			page 187


 7317              	.LLST54:
 7318 0886 9A050000 		.4byte	.LFB78-.Ltext0
 7319 088a 9E050000 		.4byte	.LCFI13-.Ltext0
 7320 088e 0200     		.2byte	0x2
 7321 0890 7D       		.byte	0x7d
 7322 0891 00       		.sleb128 0
 7323 0892 9E050000 		.4byte	.LCFI13-.Ltext0
 7324 0896 FA050000 		.4byte	.LFE78-.Ltext0
 7325 089a 0200     		.2byte	0x2
 7326 089c 7D       		.byte	0x7d
 7327 089d 08       		.sleb128 8
 7328 089e 00000000 		.4byte	0
 7329 08a2 00000000 		.4byte	0
 7330              	.LLST55:
 7331 08a6 9A050000 		.4byte	.LVL123-.Ltext0
 7332 08aa BA050000 		.4byte	.LVL124-.Ltext0
 7333 08ae 0100     		.2byte	0x1
 7334 08b0 50       		.byte	0x50
 7335 08b1 BA050000 		.4byte	.LVL124-.Ltext0
 7336 08b5 FA050000 		.4byte	.LFE78-.Ltext0
 7337 08b9 0100     		.2byte	0x1
 7338 08bb 54       		.byte	0x54
 7339 08bc 00000000 		.4byte	0
 7340 08c0 00000000 		.4byte	0
 7341              	.LLST50:
 7342 08c4 3C050000 		.4byte	.LFB77-.Ltext0
 7343 08c8 40050000 		.4byte	.LCFI12-.Ltext0
 7344 08cc 0200     		.2byte	0x2
 7345 08ce 7D       		.byte	0x7d
 7346 08cf 00       		.sleb128 0
 7347 08d0 40050000 		.4byte	.LCFI12-.Ltext0
 7348 08d4 9A050000 		.4byte	.LFE77-.Ltext0
 7349 08d8 0200     		.2byte	0x2
 7350 08da 7D       		.byte	0x7d
 7351 08db 08       		.sleb128 8
 7352 08dc 00000000 		.4byte	0
 7353 08e0 00000000 		.4byte	0
 7354              	.LLST51:
 7355 08e4 3C050000 		.4byte	.LVL113-.Ltext0
 7356 08e8 54050000 		.4byte	.LVL116-.Ltext0
 7357 08ec 0100     		.2byte	0x1
 7358 08ee 50       		.byte	0x50
 7359 08ef 54050000 		.4byte	.LVL116-.Ltext0
 7360 08f3 9A050000 		.4byte	.LFE77-.Ltext0
 7361 08f7 0100     		.2byte	0x1
 7362 08f9 54       		.byte	0x54
 7363 08fa 00000000 		.4byte	0
 7364 08fe 00000000 		.4byte	0
 7365              	.LLST52:
 7366 0902 3C050000 		.4byte	.LVL113-.Ltext0
 7367 0906 42050000 		.4byte	.LVL114-.Ltext0
 7368 090a 0200     		.2byte	0x2
 7369 090c 30       		.byte	0x30
 7370 090d 9F       		.byte	0x9f
 7371 090e 42050000 		.4byte	.LVL114-.Ltext0
 7372 0912 52050000 		.4byte	.LVL115-.Ltext0
 7373 0916 0B00     		.2byte	0xb
ARM GAS  /tmp/cc2ibVgV.s 			page 188


 7374 0918 72       		.byte	0x72
 7375 0919 00       		.sleb128 0
 7376 091a 08       		.byte	0x8
 7377 091b 80       		.byte	0x80
 7378 091c 1A       		.byte	0x1a
 7379 091d 30       		.byte	0x30
 7380 091e 2E       		.byte	0x2e
 7381 091f 08       		.byte	0x8
 7382 0920 FF       		.byte	0xff
 7383 0921 1A       		.byte	0x1a
 7384 0922 9F       		.byte	0x9f
 7385 0923 74050000 		.4byte	.LVL119-.Ltext0
 7386 0927 7E050000 		.4byte	.LVL120-.Ltext0
 7387 092b 0B00     		.2byte	0xb
 7388 092d 72       		.byte	0x72
 7389 092e 00       		.sleb128 0
 7390 092f 08       		.byte	0x8
 7391 0930 40       		.byte	0x40
 7392 0931 1A       		.byte	0x1a
 7393 0932 30       		.byte	0x30
 7394 0933 2E       		.byte	0x2e
 7395 0934 08       		.byte	0x8
 7396 0935 FF       		.byte	0xff
 7397 0936 1A       		.byte	0x1a
 7398 0937 9F       		.byte	0x9f
 7399 0938 00000000 		.4byte	0
 7400 093c 00000000 		.4byte	0
 7401              	.LLST53:
 7402 0940 60050000 		.4byte	.LVL117-.Ltext0
 7403 0944 70050000 		.4byte	.LVL118-.Ltext0
 7404 0948 0100     		.2byte	0x1
 7405 094a 54       		.byte	0x54
 7406 094b 00000000 		.4byte	0
 7407 094f 00000000 		.4byte	0
 7408              	.LLST48:
 7409 0953 DA040000 		.4byte	.LFB76-.Ltext0
 7410 0957 E0040000 		.4byte	.LCFI9-.Ltext0
 7411 095b 0200     		.2byte	0x2
 7412 095d 7D       		.byte	0x7d
 7413 095e 00       		.sleb128 0
 7414 095f E0040000 		.4byte	.LCFI9-.Ltext0
 7415 0963 36050000 		.4byte	.LCFI10-.Ltext0
 7416 0967 0200     		.2byte	0x2
 7417 0969 7D       		.byte	0x7d
 7418 096a 08       		.sleb128 8
 7419 096b 36050000 		.4byte	.LCFI10-.Ltext0
 7420 096f 38050000 		.4byte	.LCFI11-.Ltext0
 7421 0973 0200     		.2byte	0x2
 7422 0975 7D       		.byte	0x7d
 7423 0976 00       		.sleb128 0
 7424 0977 38050000 		.4byte	.LCFI11-.Ltext0
 7425 097b 3C050000 		.4byte	.LFE76-.Ltext0
 7426 097f 0200     		.2byte	0x2
 7427 0981 7D       		.byte	0x7d
 7428 0982 08       		.sleb128 8
 7429 0983 00000000 		.4byte	0
 7430 0987 00000000 		.4byte	0
ARM GAS  /tmp/cc2ibVgV.s 			page 189


 7431              	.LLST49:
 7432 098b DA040000 		.4byte	.LVL109-.Ltext0
 7433 098f 34050000 		.4byte	.LVL110-.Ltext0
 7434 0993 0100     		.2byte	0x1
 7435 0995 50       		.byte	0x50
 7436 0996 34050000 		.4byte	.LVL110-.Ltext0
 7437 099a 38050000 		.4byte	.LVL111-.Ltext0
 7438 099e 0400     		.2byte	0x4
 7439 09a0 F3       		.byte	0xf3
 7440 09a1 01       		.uleb128 0x1
 7441 09a2 50       		.byte	0x50
 7442 09a3 9F       		.byte	0x9f
 7443 09a4 38050000 		.4byte	.LVL111-.Ltext0
 7444 09a8 3A050000 		.4byte	.LVL112-.Ltext0
 7445 09ac 0100     		.2byte	0x1
 7446 09ae 50       		.byte	0x50
 7447 09af 3A050000 		.4byte	.LVL112-.Ltext0
 7448 09b3 3C050000 		.4byte	.LFE76-.Ltext0
 7449 09b7 0400     		.2byte	0x4
 7450 09b9 F3       		.byte	0xf3
 7451 09ba 01       		.uleb128 0x1
 7452 09bb 50       		.byte	0x50
 7453 09bc 9F       		.byte	0x9f
 7454 09bd 00000000 		.4byte	0
 7455 09c1 00000000 		.4byte	0
 7456              	.LLST46:
 7457 09c5 80040000 		.4byte	.LVL101-.Ltext0
 7458 09c9 D4040000 		.4byte	.LVL106-.Ltext0
 7459 09cd 0100     		.2byte	0x1
 7460 09cf 50       		.byte	0x50
 7461 09d0 D4040000 		.4byte	.LVL106-.Ltext0
 7462 09d4 D6040000 		.4byte	.LVL107-.Ltext0
 7463 09d8 0400     		.2byte	0x4
 7464 09da F3       		.byte	0xf3
 7465 09db 01       		.uleb128 0x1
 7466 09dc 50       		.byte	0x50
 7467 09dd 9F       		.byte	0x9f
 7468 09de D6040000 		.4byte	.LVL107-.Ltext0
 7469 09e2 D8040000 		.4byte	.LVL108-.Ltext0
 7470 09e6 0100     		.2byte	0x1
 7471 09e8 50       		.byte	0x50
 7472 09e9 D8040000 		.4byte	.LVL108-.Ltext0
 7473 09ed DA040000 		.4byte	.LFE75-.Ltext0
 7474 09f1 0400     		.2byte	0x4
 7475 09f3 F3       		.byte	0xf3
 7476 09f4 01       		.uleb128 0x1
 7477 09f5 50       		.byte	0x50
 7478 09f6 9F       		.byte	0x9f
 7479 09f7 00000000 		.4byte	0
 7480 09fb 00000000 		.4byte	0
 7481              	.LLST47:
 7482 09ff 80040000 		.4byte	.LVL101-.Ltext0
 7483 0a03 92040000 		.4byte	.LVL102-.Ltext0
 7484 0a07 0200     		.2byte	0x2
 7485 0a09 30       		.byte	0x30
 7486 0a0a 9F       		.byte	0x9f
 7487 0a0b 92040000 		.4byte	.LVL102-.Ltext0
ARM GAS  /tmp/cc2ibVgV.s 			page 190


 7488 0a0f A0040000 		.4byte	.LVL103-.Ltext0
 7489 0a13 0B00     		.2byte	0xb
 7490 0a15 72       		.byte	0x72
 7491 0a16 00       		.sleb128 0
 7492 0a17 08       		.byte	0x8
 7493 0a18 80       		.byte	0x80
 7494 0a19 1A       		.byte	0x1a
 7495 0a1a 30       		.byte	0x30
 7496 0a1b 2E       		.byte	0x2e
 7497 0a1c 08       		.byte	0x8
 7498 0a1d FF       		.byte	0xff
 7499 0a1e 1A       		.byte	0x1a
 7500 0a1f 9F       		.byte	0x9f
 7501 0a20 A8040000 		.4byte	.LVL104-.Ltext0
 7502 0a24 B2040000 		.4byte	.LVL105-.Ltext0
 7503 0a28 0B00     		.2byte	0xb
 7504 0a2a 72       		.byte	0x72
 7505 0a2b 00       		.sleb128 0
 7506 0a2c 08       		.byte	0x8
 7507 0a2d 40       		.byte	0x40
 7508 0a2e 1A       		.byte	0x1a
 7509 0a2f 30       		.byte	0x30
 7510 0a30 2E       		.byte	0x2e
 7511 0a31 08       		.byte	0x8
 7512 0a32 FF       		.byte	0xff
 7513 0a33 1A       		.byte	0x1a
 7514 0a34 9F       		.byte	0x9f
 7515 0a35 D6040000 		.4byte	.LVL107-.Ltext0
 7516 0a39 DA040000 		.4byte	.LFE75-.Ltext0
 7517 0a3d 0200     		.2byte	0x2
 7518 0a3f 30       		.byte	0x30
 7519 0a40 9F       		.byte	0x9f
 7520 0a41 00000000 		.4byte	0
 7521 0a45 00000000 		.4byte	0
 7522              	.LLST41:
 7523 0a49 F0030000 		.4byte	.LFB74-.Ltext0
 7524 0a4d F8030000 		.4byte	.LCFI6-.Ltext0
 7525 0a51 0200     		.2byte	0x2
 7526 0a53 7D       		.byte	0x7d
 7527 0a54 00       		.sleb128 0
 7528 0a55 F8030000 		.4byte	.LCFI6-.Ltext0
 7529 0a59 6A040000 		.4byte	.LCFI7-.Ltext0
 7530 0a5d 0200     		.2byte	0x2
 7531 0a5f 7D       		.byte	0x7d
 7532 0a60 18       		.sleb128 24
 7533 0a61 6A040000 		.4byte	.LCFI7-.Ltext0
 7534 0a65 6C040000 		.4byte	.LCFI8-.Ltext0
 7535 0a69 0200     		.2byte	0x2
 7536 0a6b 7D       		.byte	0x7d
 7537 0a6c 10       		.sleb128 16
 7538 0a6d 6C040000 		.4byte	.LCFI8-.Ltext0
 7539 0a71 80040000 		.4byte	.LFE74-.Ltext0
 7540 0a75 0200     		.2byte	0x2
 7541 0a77 7D       		.byte	0x7d
 7542 0a78 18       		.sleb128 24
 7543 0a79 00000000 		.4byte	0
 7544 0a7d 00000000 		.4byte	0
ARM GAS  /tmp/cc2ibVgV.s 			page 191


 7545              	.LLST42:
 7546 0a81 F0030000 		.4byte	.LVL90-.Ltext0
 7547 0a85 24040000 		.4byte	.LVL92-.Ltext0
 7548 0a89 0100     		.2byte	0x1
 7549 0a8b 50       		.byte	0x50
 7550 0a8c 24040000 		.4byte	.LVL92-.Ltext0
 7551 0a90 6C040000 		.4byte	.LVL97-.Ltext0
 7552 0a94 0100     		.2byte	0x1
 7553 0a96 55       		.byte	0x55
 7554 0a97 6C040000 		.4byte	.LVL97-.Ltext0
 7555 0a9b 6E040000 		.4byte	.LVL98-.Ltext0
 7556 0a9f 0100     		.2byte	0x1
 7557 0aa1 50       		.byte	0x50
 7558 0aa2 6E040000 		.4byte	.LVL98-.Ltext0
 7559 0aa6 70040000 		.4byte	.LVL99-.Ltext0
 7560 0aaa 0100     		.2byte	0x1
 7561 0aac 55       		.byte	0x55
 7562 0aad 70040000 		.4byte	.LVL99-.Ltext0
 7563 0ab1 72040000 		.4byte	.LVL100-.Ltext0
 7564 0ab5 0100     		.2byte	0x1
 7565 0ab7 50       		.byte	0x50
 7566 0ab8 72040000 		.4byte	.LVL100-.Ltext0
 7567 0abc 80040000 		.4byte	.LFE74-.Ltext0
 7568 0ac0 0100     		.2byte	0x1
 7569 0ac2 55       		.byte	0x55
 7570 0ac3 00000000 		.4byte	0
 7571 0ac7 00000000 		.4byte	0
 7572              	.LLST43:
 7573 0acb F0030000 		.4byte	.LVL90-.Ltext0
 7574 0acf 38040000 		.4byte	.LVL94-.Ltext0
 7575 0ad3 0100     		.2byte	0x1
 7576 0ad5 51       		.byte	0x51
 7577 0ad6 38040000 		.4byte	.LVL94-.Ltext0
 7578 0ada 3B040000 		.4byte	.LVL95-1-.Ltext0
 7579 0ade 0100     		.2byte	0x1
 7580 0ae0 52       		.byte	0x52
 7581 0ae1 3B040000 		.4byte	.LVL95-1-.Ltext0
 7582 0ae5 6C040000 		.4byte	.LVL97-.Ltext0
 7583 0ae9 0400     		.2byte	0x4
 7584 0aeb F3       		.byte	0xf3
 7585 0aec 01       		.uleb128 0x1
 7586 0aed 51       		.byte	0x51
 7587 0aee 9F       		.byte	0x9f
 7588 0aef 6C040000 		.4byte	.LVL97-.Ltext0
 7589 0af3 80040000 		.4byte	.LFE74-.Ltext0
 7590 0af7 0100     		.2byte	0x1
 7591 0af9 51       		.byte	0x51
 7592 0afa 00000000 		.4byte	0
 7593 0afe 00000000 		.4byte	0
 7594              	.LLST44:
 7595 0b02 F0030000 		.4byte	.LVL90-.Ltext0
 7596 0b06 F6030000 		.4byte	.LVL91-.Ltext0
 7597 0b0a 0100     		.2byte	0x1
 7598 0b0c 52       		.byte	0x52
 7599 0b0d F6030000 		.4byte	.LVL91-.Ltext0
 7600 0b11 80040000 		.4byte	.LFE74-.Ltext0
 7601 0b15 0400     		.2byte	0x4
ARM GAS  /tmp/cc2ibVgV.s 			page 192


 7602 0b17 F3       		.byte	0xf3
 7603 0b18 01       		.uleb128 0x1
 7604 0b19 52       		.byte	0x52
 7605 0b1a 9F       		.byte	0x9f
 7606 0b1b 00000000 		.4byte	0
 7607 0b1f 00000000 		.4byte	0
 7608              	.LLST45:
 7609 0b23 2E040000 		.4byte	.LVL93-.Ltext0
 7610 0b27 68040000 		.4byte	.LVL96-.Ltext0
 7611 0b2b 0600     		.2byte	0x6
 7612 0b2d F2       		.byte	0xf2
 7613 0b2e C30F0000 		.4byte	.Ldebug_info0+4035
 7614 0b32 00       		.sleb128 0
 7615 0b33 00000000 		.4byte	0
 7616 0b37 00000000 		.4byte	0
 7617              	.LLST36:
 7618 0b3b 7C030000 		.4byte	.LFB73-.Ltext0
 7619 0b3f 7E030000 		.4byte	.LCFI5-.Ltext0
 7620 0b43 0200     		.2byte	0x2
 7621 0b45 7D       		.byte	0x7d
 7622 0b46 00       		.sleb128 0
 7623 0b47 7E030000 		.4byte	.LCFI5-.Ltext0
 7624 0b4b F0030000 		.4byte	.LFE73-.Ltext0
 7625 0b4f 0200     		.2byte	0x2
 7626 0b51 7D       		.byte	0x7d
 7627 0b52 10       		.sleb128 16
 7628 0b53 00000000 		.4byte	0
 7629 0b57 00000000 		.4byte	0
 7630              	.LLST37:
 7631 0b5b 7C030000 		.4byte	.LVL80-.Ltext0
 7632 0b5f A4030000 		.4byte	.LVL82-.Ltext0
 7633 0b63 0100     		.2byte	0x1
 7634 0b65 50       		.byte	0x50
 7635 0b66 A4030000 		.4byte	.LVL82-.Ltext0
 7636 0b6a DC030000 		.4byte	.LVL85-.Ltext0
 7637 0b6e 0100     		.2byte	0x1
 7638 0b70 54       		.byte	0x54
 7639 0b71 DC030000 		.4byte	.LVL85-.Ltext0
 7640 0b75 DE030000 		.4byte	.LVL86-.Ltext0
 7641 0b79 0100     		.2byte	0x1
 7642 0b7b 50       		.byte	0x50
 7643 0b7c DE030000 		.4byte	.LVL86-.Ltext0
 7644 0b80 E0030000 		.4byte	.LVL87-.Ltext0
 7645 0b84 0100     		.2byte	0x1
 7646 0b86 54       		.byte	0x54
 7647 0b87 E0030000 		.4byte	.LVL87-.Ltext0
 7648 0b8b E2030000 		.4byte	.LVL88-.Ltext0
 7649 0b8f 0100     		.2byte	0x1
 7650 0b91 50       		.byte	0x50
 7651 0b92 E2030000 		.4byte	.LVL88-.Ltext0
 7652 0b96 E4030000 		.4byte	.LVL89-.Ltext0
 7653 0b9a 0100     		.2byte	0x1
 7654 0b9c 54       		.byte	0x54
 7655 0b9d E4030000 		.4byte	.LVL89-.Ltext0
 7656 0ba1 F0030000 		.4byte	.LFE73-.Ltext0
 7657 0ba5 0400     		.2byte	0x4
 7658 0ba7 F3       		.byte	0xf3
ARM GAS  /tmp/cc2ibVgV.s 			page 193


 7659 0ba8 01       		.uleb128 0x1
 7660 0ba9 50       		.byte	0x50
 7661 0baa 9F       		.byte	0x9f
 7662 0bab 00000000 		.4byte	0
 7663 0baf 00000000 		.4byte	0
 7664              	.LLST38:
 7665 0bb3 7C030000 		.4byte	.LVL80-.Ltext0
 7666 0bb7 C3030000 		.4byte	.LVL84-1-.Ltext0
 7667 0bbb 0100     		.2byte	0x1
 7668 0bbd 51       		.byte	0x51
 7669 0bbe C3030000 		.4byte	.LVL84-1-.Ltext0
 7670 0bc2 DC030000 		.4byte	.LVL85-.Ltext0
 7671 0bc6 0400     		.2byte	0x4
 7672 0bc8 F3       		.byte	0xf3
 7673 0bc9 01       		.uleb128 0x1
 7674 0bca 51       		.byte	0x51
 7675 0bcb 9F       		.byte	0x9f
 7676 0bcc DC030000 		.4byte	.LVL85-.Ltext0
 7677 0bd0 F0030000 		.4byte	.LFE73-.Ltext0
 7678 0bd4 0100     		.2byte	0x1
 7679 0bd6 51       		.byte	0x51
 7680 0bd7 00000000 		.4byte	0
 7681 0bdb 00000000 		.4byte	0
 7682              	.LLST39:
 7683 0bdf 7C030000 		.4byte	.LVL80-.Ltext0
 7684 0be3 86030000 		.4byte	.LVL81-.Ltext0
 7685 0be7 0100     		.2byte	0x1
 7686 0be9 52       		.byte	0x52
 7687 0bea 86030000 		.4byte	.LVL81-.Ltext0
 7688 0bee F0030000 		.4byte	.LFE73-.Ltext0
 7689 0bf2 0400     		.2byte	0x4
 7690 0bf4 F3       		.byte	0xf3
 7691 0bf5 01       		.uleb128 0x1
 7692 0bf6 52       		.byte	0x52
 7693 0bf7 9F       		.byte	0x9f
 7694 0bf8 00000000 		.4byte	0
 7695 0bfc 00000000 		.4byte	0
 7696              	.LLST40:
 7697 0c00 B6030000 		.4byte	.LVL83-.Ltext0
 7698 0c04 DC030000 		.4byte	.LVL85-.Ltext0
 7699 0c08 0600     		.2byte	0x6
 7700 0c0a F2       		.byte	0xf2
 7701 0c0b 59100000 		.4byte	.Ldebug_info0+4185
 7702 0c0f 00       		.sleb128 0
 7703 0c10 00000000 		.4byte	0
 7704 0c14 00000000 		.4byte	0
 7705              	.LLST33:
 7706 0c18 36030000 		.4byte	.LVL71-.Ltext0
 7707 0c1c 6C030000 		.4byte	.LVL75-.Ltext0
 7708 0c20 0100     		.2byte	0x1
 7709 0c22 50       		.byte	0x50
 7710 0c23 6C030000 		.4byte	.LVL75-.Ltext0
 7711 0c27 74030000 		.4byte	.LVL76-.Ltext0
 7712 0c2b 0400     		.2byte	0x4
 7713 0c2d F3       		.byte	0xf3
 7714 0c2e 01       		.uleb128 0x1
 7715 0c2f 50       		.byte	0x50
ARM GAS  /tmp/cc2ibVgV.s 			page 194


 7716 0c30 9F       		.byte	0x9f
 7717 0c31 74030000 		.4byte	.LVL76-.Ltext0
 7718 0c35 76030000 		.4byte	.LVL77-.Ltext0
 7719 0c39 0100     		.2byte	0x1
 7720 0c3b 50       		.byte	0x50
 7721 0c3c 76030000 		.4byte	.LVL77-.Ltext0
 7722 0c40 78030000 		.4byte	.LVL78-.Ltext0
 7723 0c44 0400     		.2byte	0x4
 7724 0c46 F3       		.byte	0xf3
 7725 0c47 01       		.uleb128 0x1
 7726 0c48 50       		.byte	0x50
 7727 0c49 9F       		.byte	0x9f
 7728 0c4a 78030000 		.4byte	.LVL78-.Ltext0
 7729 0c4e 7A030000 		.4byte	.LVL79-.Ltext0
 7730 0c52 0100     		.2byte	0x1
 7731 0c54 50       		.byte	0x50
 7732 0c55 7A030000 		.4byte	.LVL79-.Ltext0
 7733 0c59 7C030000 		.4byte	.LFE72-.Ltext0
 7734 0c5d 0400     		.2byte	0x4
 7735 0c5f F3       		.byte	0xf3
 7736 0c60 01       		.uleb128 0x1
 7737 0c61 50       		.byte	0x50
 7738 0c62 9F       		.byte	0x9f
 7739 0c63 00000000 		.4byte	0
 7740 0c67 00000000 		.4byte	0
 7741              	.LLST34:
 7742 0c6b 36030000 		.4byte	.LVL71-.Ltext0
 7743 0c6f 5E030000 		.4byte	.LVL74-.Ltext0
 7744 0c73 0100     		.2byte	0x1
 7745 0c75 51       		.byte	0x51
 7746 0c76 5E030000 		.4byte	.LVL74-.Ltext0
 7747 0c7a 6C030000 		.4byte	.LVL75-.Ltext0
 7748 0c7e 0200     		.2byte	0x2
 7749 0c80 70       		.byte	0x70
 7750 0c81 24       		.sleb128 36
 7751 0c82 6C030000 		.4byte	.LVL75-.Ltext0
 7752 0c86 74030000 		.4byte	.LVL76-.Ltext0
 7753 0c8a 0500     		.2byte	0x5
 7754 0c8c F3       		.byte	0xf3
 7755 0c8d 01       		.uleb128 0x1
 7756 0c8e 50       		.byte	0x50
 7757 0c8f 23       		.byte	0x23
 7758 0c90 24       		.uleb128 0x24
 7759 0c91 74030000 		.4byte	.LVL76-.Ltext0
 7760 0c95 7C030000 		.4byte	.LFE72-.Ltext0
 7761 0c99 0100     		.2byte	0x1
 7762 0c9b 51       		.byte	0x51
 7763 0c9c 00000000 		.4byte	0
 7764 0ca0 00000000 		.4byte	0
 7765              	.LLST35:
 7766 0ca4 36030000 		.4byte	.LVL71-.Ltext0
 7767 0ca8 52030000 		.4byte	.LVL72-.Ltext0
 7768 0cac 0100     		.2byte	0x1
 7769 0cae 52       		.byte	0x52
 7770 0caf 52030000 		.4byte	.LVL72-.Ltext0
 7771 0cb3 54030000 		.4byte	.LVL73-.Ltext0
 7772 0cb7 0200     		.2byte	0x2
ARM GAS  /tmp/cc2ibVgV.s 			page 195


 7773 0cb9 70       		.byte	0x70
 7774 0cba 2A       		.sleb128 42
 7775 0cbb 54030000 		.4byte	.LVL73-.Ltext0
 7776 0cbf 6C030000 		.4byte	.LVL75-.Ltext0
 7777 0cc3 0200     		.2byte	0x2
 7778 0cc5 70       		.byte	0x70
 7779 0cc6 28       		.sleb128 40
 7780 0cc7 6C030000 		.4byte	.LVL75-.Ltext0
 7781 0ccb 74030000 		.4byte	.LVL76-.Ltext0
 7782 0ccf 0500     		.2byte	0x5
 7783 0cd1 F3       		.byte	0xf3
 7784 0cd2 01       		.uleb128 0x1
 7785 0cd3 50       		.byte	0x50
 7786 0cd4 23       		.byte	0x23
 7787 0cd5 28       		.uleb128 0x28
 7788 0cd6 74030000 		.4byte	.LVL76-.Ltext0
 7789 0cda 7C030000 		.4byte	.LFE72-.Ltext0
 7790 0cde 0100     		.2byte	0x1
 7791 0ce0 52       		.byte	0x52
 7792 0ce1 00000000 		.4byte	0
 7793 0ce5 00000000 		.4byte	0
 7794              	.LLST30:
 7795 0ce9 F8020000 		.4byte	.LVL62-.Ltext0
 7796 0ced 2C030000 		.4byte	.LVL66-.Ltext0
 7797 0cf1 0100     		.2byte	0x1
 7798 0cf3 50       		.byte	0x50
 7799 0cf4 2C030000 		.4byte	.LVL66-.Ltext0
 7800 0cf8 2E030000 		.4byte	.LVL67-.Ltext0
 7801 0cfc 0400     		.2byte	0x4
 7802 0cfe F3       		.byte	0xf3
 7803 0cff 01       		.uleb128 0x1
 7804 0d00 50       		.byte	0x50
 7805 0d01 9F       		.byte	0x9f
 7806 0d02 2E030000 		.4byte	.LVL67-.Ltext0
 7807 0d06 30030000 		.4byte	.LVL68-.Ltext0
 7808 0d0a 0100     		.2byte	0x1
 7809 0d0c 50       		.byte	0x50
 7810 0d0d 30030000 		.4byte	.LVL68-.Ltext0
 7811 0d11 32030000 		.4byte	.LVL69-.Ltext0
 7812 0d15 0400     		.2byte	0x4
 7813 0d17 F3       		.byte	0xf3
 7814 0d18 01       		.uleb128 0x1
 7815 0d19 50       		.byte	0x50
 7816 0d1a 9F       		.byte	0x9f
 7817 0d1b 32030000 		.4byte	.LVL69-.Ltext0
 7818 0d1f 34030000 		.4byte	.LVL70-.Ltext0
 7819 0d23 0100     		.2byte	0x1
 7820 0d25 50       		.byte	0x50
 7821 0d26 34030000 		.4byte	.LVL70-.Ltext0
 7822 0d2a 36030000 		.4byte	.LFE71-.Ltext0
 7823 0d2e 0400     		.2byte	0x4
 7824 0d30 F3       		.byte	0xf3
 7825 0d31 01       		.uleb128 0x1
 7826 0d32 50       		.byte	0x50
 7827 0d33 9F       		.byte	0x9f
 7828 0d34 00000000 		.4byte	0
 7829 0d38 00000000 		.4byte	0
ARM GAS  /tmp/cc2ibVgV.s 			page 196


 7830              	.LLST31:
 7831 0d3c F8020000 		.4byte	.LVL62-.Ltext0
 7832 0d40 18030000 		.4byte	.LVL64-.Ltext0
 7833 0d44 0100     		.2byte	0x1
 7834 0d46 51       		.byte	0x51
 7835 0d47 18030000 		.4byte	.LVL64-.Ltext0
 7836 0d4b 2C030000 		.4byte	.LVL66-.Ltext0
 7837 0d4f 0200     		.2byte	0x2
 7838 0d51 70       		.byte	0x70
 7839 0d52 1C       		.sleb128 28
 7840 0d53 2C030000 		.4byte	.LVL66-.Ltext0
 7841 0d57 2E030000 		.4byte	.LVL67-.Ltext0
 7842 0d5b 0500     		.2byte	0x5
 7843 0d5d F3       		.byte	0xf3
 7844 0d5e 01       		.uleb128 0x1
 7845 0d5f 50       		.byte	0x50
 7846 0d60 23       		.byte	0x23
 7847 0d61 1C       		.uleb128 0x1c
 7848 0d62 2E030000 		.4byte	.LVL67-.Ltext0
 7849 0d66 36030000 		.4byte	.LFE71-.Ltext0
 7850 0d6a 0100     		.2byte	0x1
 7851 0d6c 51       		.byte	0x51
 7852 0d6d 00000000 		.4byte	0
 7853 0d71 00000000 		.4byte	0
 7854              	.LLST32:
 7855 0d75 F8020000 		.4byte	.LVL62-.Ltext0
 7856 0d79 14030000 		.4byte	.LVL63-.Ltext0
 7857 0d7d 0100     		.2byte	0x1
 7858 0d7f 52       		.byte	0x52
 7859 0d80 14030000 		.4byte	.LVL63-.Ltext0
 7860 0d84 1A030000 		.4byte	.LVL65-.Ltext0
 7861 0d88 0200     		.2byte	0x2
 7862 0d8a 70       		.byte	0x70
 7863 0d8b 22       		.sleb128 34
 7864 0d8c 1A030000 		.4byte	.LVL65-.Ltext0
 7865 0d90 2C030000 		.4byte	.LVL66-.Ltext0
 7866 0d94 0200     		.2byte	0x2
 7867 0d96 70       		.byte	0x70
 7868 0d97 20       		.sleb128 32
 7869 0d98 2C030000 		.4byte	.LVL66-.Ltext0
 7870 0d9c 2E030000 		.4byte	.LVL67-.Ltext0
 7871 0da0 0500     		.2byte	0x5
 7872 0da2 F3       		.byte	0xf3
 7873 0da3 01       		.uleb128 0x1
 7874 0da4 50       		.byte	0x50
 7875 0da5 23       		.byte	0x23
 7876 0da6 20       		.uleb128 0x20
 7877 0da7 2E030000 		.4byte	.LVL67-.Ltext0
 7878 0dab 36030000 		.4byte	.LFE71-.Ltext0
 7879 0daf 0100     		.2byte	0x1
 7880 0db1 52       		.byte	0x52
 7881 0db2 00000000 		.4byte	0
 7882 0db6 00000000 		.4byte	0
 7883              	.LLST23:
 7884 0dba 3A020000 		.4byte	.LFB70-.Ltext0
 7885 0dbe 3E020000 		.4byte	.LCFI4-.Ltext0
 7886 0dc2 0200     		.2byte	0x2
ARM GAS  /tmp/cc2ibVgV.s 			page 197


 7887 0dc4 7D       		.byte	0x7d
 7888 0dc5 00       		.sleb128 0
 7889 0dc6 3E020000 		.4byte	.LCFI4-.Ltext0
 7890 0dca F8020000 		.4byte	.LFE70-.Ltext0
 7891 0dce 0200     		.2byte	0x2
 7892 0dd0 7D       		.byte	0x7d
 7893 0dd1 18       		.sleb128 24
 7894 0dd2 00000000 		.4byte	0
 7895 0dd6 00000000 		.4byte	0
 7896              	.LLST24:
 7897 0dda 3A020000 		.4byte	.LVL42-.Ltext0
 7898 0dde 71020000 		.4byte	.LVL44-1-.Ltext0
 7899 0de2 0100     		.2byte	0x1
 7900 0de4 50       		.byte	0x50
 7901 0de5 71020000 		.4byte	.LVL44-1-.Ltext0
 7902 0de9 A8020000 		.4byte	.LVL48-.Ltext0
 7903 0ded 0100     		.2byte	0x1
 7904 0def 54       		.byte	0x54
 7905 0df0 A8020000 		.4byte	.LVL48-.Ltext0
 7906 0df4 AB020000 		.4byte	.LVL49-1-.Ltext0
 7907 0df8 0100     		.2byte	0x1
 7908 0dfa 50       		.byte	0x50
 7909 0dfb AB020000 		.4byte	.LVL49-1-.Ltext0
 7910 0dff CE020000 		.4byte	.LVL54-.Ltext0
 7911 0e03 0100     		.2byte	0x1
 7912 0e05 54       		.byte	0x54
 7913 0e06 CE020000 		.4byte	.LVL54-.Ltext0
 7914 0e0a D1020000 		.4byte	.LVL55-1-.Ltext0
 7915 0e0e 0100     		.2byte	0x1
 7916 0e10 50       		.byte	0x50
 7917 0e11 D1020000 		.4byte	.LVL55-1-.Ltext0
 7918 0e15 EC020000 		.4byte	.LVL58-.Ltext0
 7919 0e19 0100     		.2byte	0x1
 7920 0e1b 54       		.byte	0x54
 7921 0e1c EC020000 		.4byte	.LVL58-.Ltext0
 7922 0e20 EE020000 		.4byte	.LVL59-.Ltext0
 7923 0e24 0100     		.2byte	0x1
 7924 0e26 50       		.byte	0x50
 7925 0e27 EE020000 		.4byte	.LVL59-.Ltext0
 7926 0e2b F2020000 		.4byte	.LVL60-.Ltext0
 7927 0e2f 0100     		.2byte	0x1
 7928 0e31 54       		.byte	0x54
 7929 0e32 F2020000 		.4byte	.LVL60-.Ltext0
 7930 0e36 F4020000 		.4byte	.LVL61-.Ltext0
 7931 0e3a 0100     		.2byte	0x1
 7932 0e3c 50       		.byte	0x50
 7933 0e3d F4020000 		.4byte	.LVL61-.Ltext0
 7934 0e41 F8020000 		.4byte	.LFE70-.Ltext0
 7935 0e45 0100     		.2byte	0x1
 7936 0e47 54       		.byte	0x54
 7937 0e48 00000000 		.4byte	0
 7938 0e4c 00000000 		.4byte	0
 7939              	.LLST25:
 7940 0e50 3A020000 		.4byte	.LVL42-.Ltext0
 7941 0e54 71020000 		.4byte	.LVL44-1-.Ltext0
 7942 0e58 0100     		.2byte	0x1
 7943 0e5a 51       		.byte	0x51
ARM GAS  /tmp/cc2ibVgV.s 			page 198


 7944 0e5b 71020000 		.4byte	.LVL44-1-.Ltext0
 7945 0e5f E0020000 		.4byte	.LVL56-.Ltext0
 7946 0e63 0100     		.2byte	0x1
 7947 0e65 55       		.byte	0x55
 7948 0e66 E6020000 		.4byte	.LVL57-.Ltext0
 7949 0e6a EC020000 		.4byte	.LVL58-.Ltext0
 7950 0e6e 0100     		.2byte	0x1
 7951 0e70 52       		.byte	0x52
 7952 0e71 EC020000 		.4byte	.LVL58-.Ltext0
 7953 0e75 F8020000 		.4byte	.LFE70-.Ltext0
 7954 0e79 0100     		.2byte	0x1
 7955 0e7b 51       		.byte	0x51
 7956 0e7c 00000000 		.4byte	0
 7957 0e80 00000000 		.4byte	0
 7958              	.LLST26:
 7959 0e84 3A020000 		.4byte	.LVL42-.Ltext0
 7960 0e88 71020000 		.4byte	.LVL44-1-.Ltext0
 7961 0e8c 0100     		.2byte	0x1
 7962 0e8e 52       		.byte	0x52
 7963 0e8f 71020000 		.4byte	.LVL44-1-.Ltext0
 7964 0e93 EC020000 		.4byte	.LVL58-.Ltext0
 7965 0e97 0400     		.2byte	0x4
 7966 0e99 F3       		.byte	0xf3
 7967 0e9a 01       		.uleb128 0x1
 7968 0e9b 52       		.byte	0x52
 7969 0e9c 9F       		.byte	0x9f
 7970 0e9d EC020000 		.4byte	.LVL58-.Ltext0
 7971 0ea1 F8020000 		.4byte	.LFE70-.Ltext0
 7972 0ea5 0100     		.2byte	0x1
 7973 0ea7 52       		.byte	0x52
 7974 0ea8 00000000 		.4byte	0
 7975 0eac 00000000 		.4byte	0
 7976              	.LLST27:
 7977 0eb0 3A020000 		.4byte	.LVL42-.Ltext0
 7978 0eb4 44020000 		.4byte	.LVL43-.Ltext0
 7979 0eb8 0100     		.2byte	0x1
 7980 0eba 53       		.byte	0x53
 7981 0ebb 44020000 		.4byte	.LVL43-.Ltext0
 7982 0ebf A8020000 		.4byte	.LVL48-.Ltext0
 7983 0ec3 0100     		.2byte	0x1
 7984 0ec5 57       		.byte	0x57
 7985 0ec6 A8020000 		.4byte	.LVL48-.Ltext0
 7986 0eca AB020000 		.4byte	.LVL49-1-.Ltext0
 7987 0ece 0100     		.2byte	0x1
 7988 0ed0 53       		.byte	0x53
 7989 0ed1 AB020000 		.4byte	.LVL49-1-.Ltext0
 7990 0ed5 CE020000 		.4byte	.LVL54-.Ltext0
 7991 0ed9 0100     		.2byte	0x1
 7992 0edb 57       		.byte	0x57
 7993 0edc CE020000 		.4byte	.LVL54-.Ltext0
 7994 0ee0 D1020000 		.4byte	.LVL55-1-.Ltext0
 7995 0ee4 0100     		.2byte	0x1
 7996 0ee6 53       		.byte	0x53
 7997 0ee7 D1020000 		.4byte	.LVL55-1-.Ltext0
 7998 0eeb F8020000 		.4byte	.LFE70-.Ltext0
 7999 0eef 0100     		.2byte	0x1
 8000 0ef1 57       		.byte	0x57
ARM GAS  /tmp/cc2ibVgV.s 			page 199


 8001 0ef2 00000000 		.4byte	0
 8002 0ef6 00000000 		.4byte	0
 8003              	.LLST28:
 8004 0efa B4020000 		.4byte	.LVL50-.Ltext0
 8005 0efe C4020000 		.4byte	.LVL51-.Ltext0
 8006 0f02 0100     		.2byte	0x1
 8007 0f04 55       		.byte	0x55
 8008 0f05 C4020000 		.4byte	.LVL51-.Ltext0
 8009 0f09 C6020000 		.4byte	.LVL52-.Ltext0
 8010 0f0d 0300     		.2byte	0x3
 8011 0f0f 75       		.byte	0x75
 8012 0f10 7E       		.sleb128 -2
 8013 0f11 9F       		.byte	0x9f
 8014 0f12 C6020000 		.4byte	.LVL52-.Ltext0
 8015 0f16 CC020000 		.4byte	.LVL53-.Ltext0
 8016 0f1a 0100     		.2byte	0x1
 8017 0f1c 55       		.byte	0x55
 8018 0f1d CC020000 		.4byte	.LVL53-.Ltext0
 8019 0f21 CE020000 		.4byte	.LVL54-.Ltext0
 8020 0f25 0300     		.2byte	0x3
 8021 0f27 75       		.byte	0x75
 8022 0f28 7F       		.sleb128 -1
 8023 0f29 9F       		.byte	0x9f
 8024 0f2a 00000000 		.4byte	0
 8025 0f2e 00000000 		.4byte	0
 8026              	.LLST29:
 8027 0f32 3A020000 		.4byte	.LVL42-.Ltext0
 8028 0f36 74020000 		.4byte	.LVL45-.Ltext0
 8029 0f3a 0200     		.2byte	0x2
 8030 0f3c 30       		.byte	0x30
 8031 0f3d 9F       		.byte	0x9f
 8032 0f3e 74020000 		.4byte	.LVL45-.Ltext0
 8033 0f42 7C020000 		.4byte	.LVL46-.Ltext0
 8034 0f46 0100     		.2byte	0x1
 8035 0f48 50       		.byte	0x50
 8036 0f49 7C020000 		.4byte	.LVL46-.Ltext0
 8037 0f4d A8020000 		.4byte	.LVL48-.Ltext0
 8038 0f51 0100     		.2byte	0x1
 8039 0f53 56       		.byte	0x56
 8040 0f54 A8020000 		.4byte	.LVL48-.Ltext0
 8041 0f58 AB020000 		.4byte	.LVL49-1-.Ltext0
 8042 0f5c 0100     		.2byte	0x1
 8043 0f5e 52       		.byte	0x52
 8044 0f5f AB020000 		.4byte	.LVL49-1-.Ltext0
 8045 0f63 CE020000 		.4byte	.LVL54-.Ltext0
 8046 0f67 0100     		.2byte	0x1
 8047 0f69 56       		.byte	0x56
 8048 0f6a CE020000 		.4byte	.LVL54-.Ltext0
 8049 0f6e D1020000 		.4byte	.LVL55-1-.Ltext0
 8050 0f72 0100     		.2byte	0x1
 8051 0f74 52       		.byte	0x52
 8052 0f75 D1020000 		.4byte	.LVL55-1-.Ltext0
 8053 0f79 EC020000 		.4byte	.LVL58-.Ltext0
 8054 0f7d 0100     		.2byte	0x1
 8055 0f7f 56       		.byte	0x56
 8056 0f80 EC020000 		.4byte	.LVL58-.Ltext0
 8057 0f84 F8020000 		.4byte	.LFE70-.Ltext0
ARM GAS  /tmp/cc2ibVgV.s 			page 200


 8058 0f88 0200     		.2byte	0x2
 8059 0f8a 30       		.byte	0x30
 8060 0f8b 9F       		.byte	0x9f
 8061 0f8c 00000000 		.4byte	0
 8062 0f90 00000000 		.4byte	0
 8063              	.LLST16:
 8064 0f94 82010000 		.4byte	.LFB69-.Ltext0
 8065 0f98 86010000 		.4byte	.LCFI3-.Ltext0
 8066 0f9c 0200     		.2byte	0x2
 8067 0f9e 7D       		.byte	0x7d
 8068 0f9f 00       		.sleb128 0
 8069 0fa0 86010000 		.4byte	.LCFI3-.Ltext0
 8070 0fa4 3A020000 		.4byte	.LFE69-.Ltext0
 8071 0fa8 0200     		.2byte	0x2
 8072 0faa 7D       		.byte	0x7d
 8073 0fab 18       		.sleb128 24
 8074 0fac 00000000 		.4byte	0
 8075 0fb0 00000000 		.4byte	0
 8076              	.LLST17:
 8077 0fb4 82010000 		.4byte	.LVL23-.Ltext0
 8078 0fb8 B9010000 		.4byte	.LVL25-1-.Ltext0
 8079 0fbc 0100     		.2byte	0x1
 8080 0fbe 50       		.byte	0x50
 8081 0fbf B9010000 		.4byte	.LVL25-1-.Ltext0
 8082 0fc3 FE010000 		.4byte	.LVL30-.Ltext0
 8083 0fc7 0100     		.2byte	0x1
 8084 0fc9 54       		.byte	0x54
 8085 0fca FE010000 		.4byte	.LVL30-.Ltext0
 8086 0fce 01020000 		.4byte	.LVL31-1-.Ltext0
 8087 0fd2 0100     		.2byte	0x1
 8088 0fd4 50       		.byte	0x50
 8089 0fd5 01020000 		.4byte	.LVL31-1-.Ltext0
 8090 0fd9 1C020000 		.4byte	.LVL34-.Ltext0
 8091 0fdd 0100     		.2byte	0x1
 8092 0fdf 54       		.byte	0x54
 8093 0fe0 1C020000 		.4byte	.LVL34-.Ltext0
 8094 0fe4 1F020000 		.4byte	.LVL35-1-.Ltext0
 8095 0fe8 0100     		.2byte	0x1
 8096 0fea 50       		.byte	0x50
 8097 0feb 1F020000 		.4byte	.LVL35-1-.Ltext0
 8098 0fef 2E020000 		.4byte	.LVL38-.Ltext0
 8099 0ff3 0100     		.2byte	0x1
 8100 0ff5 54       		.byte	0x54
 8101 0ff6 2E020000 		.4byte	.LVL38-.Ltext0
 8102 0ffa 30020000 		.4byte	.LVL39-.Ltext0
 8103 0ffe 0100     		.2byte	0x1
 8104 1000 50       		.byte	0x50
 8105 1001 30020000 		.4byte	.LVL39-.Ltext0
 8106 1005 34020000 		.4byte	.LVL40-.Ltext0
 8107 1009 0100     		.2byte	0x1
 8108 100b 54       		.byte	0x54
 8109 100c 34020000 		.4byte	.LVL40-.Ltext0
 8110 1010 36020000 		.4byte	.LVL41-.Ltext0
 8111 1014 0100     		.2byte	0x1
 8112 1016 50       		.byte	0x50
 8113 1017 36020000 		.4byte	.LVL41-.Ltext0
 8114 101b 3A020000 		.4byte	.LFE69-.Ltext0
ARM GAS  /tmp/cc2ibVgV.s 			page 201


 8115 101f 0100     		.2byte	0x1
 8116 1021 54       		.byte	0x54
 8117 1022 00000000 		.4byte	0
 8118 1026 00000000 		.4byte	0
 8119              	.LLST18:
 8120 102a 82010000 		.4byte	.LVL23-.Ltext0
 8121 102e B9010000 		.4byte	.LVL25-1-.Ltext0
 8122 1032 0100     		.2byte	0x1
 8123 1034 51       		.byte	0x51
 8124 1035 B9010000 		.4byte	.LVL25-1-.Ltext0
 8125 1039 24020000 		.4byte	.LVL36-.Ltext0
 8126 103d 0100     		.2byte	0x1
 8127 103f 55       		.byte	0x55
 8128 1040 24020000 		.4byte	.LVL36-.Ltext0
 8129 1044 2A020000 		.4byte	.LVL37-.Ltext0
 8130 1048 0300     		.2byte	0x3
 8131 104a 75       		.byte	0x75
 8132 104b 01       		.sleb128 1
 8133 104c 9F       		.byte	0x9f
 8134 104d 2E020000 		.4byte	.LVL38-.Ltext0
 8135 1051 3A020000 		.4byte	.LFE69-.Ltext0
 8136 1055 0100     		.2byte	0x1
 8137 1057 51       		.byte	0x51
 8138 1058 00000000 		.4byte	0
 8139 105c 00000000 		.4byte	0
 8140              	.LLST19:
 8141 1060 82010000 		.4byte	.LVL23-.Ltext0
 8142 1064 B9010000 		.4byte	.LVL25-1-.Ltext0
 8143 1068 0100     		.2byte	0x1
 8144 106a 52       		.byte	0x52
 8145 106b B9010000 		.4byte	.LVL25-1-.Ltext0
 8146 106f 2E020000 		.4byte	.LVL38-.Ltext0
 8147 1073 0400     		.2byte	0x4
 8148 1075 F3       		.byte	0xf3
 8149 1076 01       		.uleb128 0x1
 8150 1077 52       		.byte	0x52
 8151 1078 9F       		.byte	0x9f
 8152 1079 2E020000 		.4byte	.LVL38-.Ltext0
 8153 107d 3A020000 		.4byte	.LFE69-.Ltext0
 8154 1081 0100     		.2byte	0x1
 8155 1083 52       		.byte	0x52
 8156 1084 00000000 		.4byte	0
 8157 1088 00000000 		.4byte	0
 8158              	.LLST20:
 8159 108c 82010000 		.4byte	.LVL23-.Ltext0
 8160 1090 8C010000 		.4byte	.LVL24-.Ltext0
 8161 1094 0100     		.2byte	0x1
 8162 1096 53       		.byte	0x53
 8163 1097 8C010000 		.4byte	.LVL24-.Ltext0
 8164 109b FE010000 		.4byte	.LVL30-.Ltext0
 8165 109f 0100     		.2byte	0x1
 8166 10a1 57       		.byte	0x57
 8167 10a2 FE010000 		.4byte	.LVL30-.Ltext0
 8168 10a6 01020000 		.4byte	.LVL31-1-.Ltext0
 8169 10aa 0100     		.2byte	0x1
 8170 10ac 53       		.byte	0x53
 8171 10ad 01020000 		.4byte	.LVL31-1-.Ltext0
ARM GAS  /tmp/cc2ibVgV.s 			page 202


 8172 10b1 1C020000 		.4byte	.LVL34-.Ltext0
 8173 10b5 0100     		.2byte	0x1
 8174 10b7 57       		.byte	0x57
 8175 10b8 1C020000 		.4byte	.LVL34-.Ltext0
 8176 10bc 1F020000 		.4byte	.LVL35-1-.Ltext0
 8177 10c0 0100     		.2byte	0x1
 8178 10c2 53       		.byte	0x53
 8179 10c3 1F020000 		.4byte	.LVL35-1-.Ltext0
 8180 10c7 3A020000 		.4byte	.LFE69-.Ltext0
 8181 10cb 0100     		.2byte	0x1
 8182 10cd 57       		.byte	0x57
 8183 10ce 00000000 		.4byte	0
 8184 10d2 00000000 		.4byte	0
 8185              	.LLST21:
 8186 10d6 0A020000 		.4byte	.LVL32-.Ltext0
 8187 10da 1A020000 		.4byte	.LVL33-.Ltext0
 8188 10de 0100     		.2byte	0x1
 8189 10e0 55       		.byte	0x55
 8190 10e1 1A020000 		.4byte	.LVL33-.Ltext0
 8191 10e5 1C020000 		.4byte	.LVL34-.Ltext0
 8192 10e9 0300     		.2byte	0x3
 8193 10eb 75       		.byte	0x75
 8194 10ec 7E       		.sleb128 -2
 8195 10ed 9F       		.byte	0x9f
 8196 10ee 00000000 		.4byte	0
 8197 10f2 00000000 		.4byte	0
 8198              	.LLST22:
 8199 10f6 82010000 		.4byte	.LVL23-.Ltext0
 8200 10fa BC010000 		.4byte	.LVL26-.Ltext0
 8201 10fe 0200     		.2byte	0x2
 8202 1100 30       		.byte	0x30
 8203 1101 9F       		.byte	0x9f
 8204 1102 BC010000 		.4byte	.LVL26-.Ltext0
 8205 1106 C4010000 		.4byte	.LVL27-.Ltext0
 8206 110a 0100     		.2byte	0x1
 8207 110c 50       		.byte	0x50
 8208 110d C4010000 		.4byte	.LVL27-.Ltext0
 8209 1111 FE010000 		.4byte	.LVL30-.Ltext0
 8210 1115 0100     		.2byte	0x1
 8211 1117 56       		.byte	0x56
 8212 1118 FE010000 		.4byte	.LVL30-.Ltext0
 8213 111c 01020000 		.4byte	.LVL31-1-.Ltext0
 8214 1120 0100     		.2byte	0x1
 8215 1122 52       		.byte	0x52
 8216 1123 01020000 		.4byte	.LVL31-1-.Ltext0
 8217 1127 1C020000 		.4byte	.LVL34-.Ltext0
 8218 112b 0100     		.2byte	0x1
 8219 112d 56       		.byte	0x56
 8220 112e 1C020000 		.4byte	.LVL34-.Ltext0
 8221 1132 1F020000 		.4byte	.LVL35-1-.Ltext0
 8222 1136 0100     		.2byte	0x1
 8223 1138 52       		.byte	0x52
 8224 1139 1F020000 		.4byte	.LVL35-1-.Ltext0
 8225 113d 2E020000 		.4byte	.LVL38-.Ltext0
 8226 1141 0100     		.2byte	0x1
 8227 1143 56       		.byte	0x56
 8228 1144 2E020000 		.4byte	.LVL38-.Ltext0
ARM GAS  /tmp/cc2ibVgV.s 			page 203


 8229 1148 3A020000 		.4byte	.LFE69-.Ltext0
 8230 114c 0200     		.2byte	0x2
 8231 114e 30       		.byte	0x30
 8232 114f 9F       		.byte	0x9f
 8233 1150 00000000 		.4byte	0
 8234 1154 00000000 		.4byte	0
 8235              	.LLST14:
 8236 1158 52010000 		.4byte	.LFB66-.Ltext0
 8237 115c 54010000 		.4byte	.LCFI2-.Ltext0
 8238 1160 0200     		.2byte	0x2
 8239 1162 7D       		.byte	0x7d
 8240 1163 00       		.sleb128 0
 8241 1164 54010000 		.4byte	.LCFI2-.Ltext0
 8242 1168 82010000 		.4byte	.LFE66-.Ltext0
 8243 116c 0200     		.2byte	0x2
 8244 116e 7D       		.byte	0x7d
 8245 116f 08       		.sleb128 8
 8246 1170 00000000 		.4byte	0
 8247 1174 00000000 		.4byte	0
 8248              	.LLST15:
 8249 1178 52010000 		.4byte	.LVL19-.Ltext0
 8250 117c 6B010000 		.4byte	.LVL20-1-.Ltext0
 8251 1180 0100     		.2byte	0x1
 8252 1182 50       		.byte	0x50
 8253 1183 6B010000 		.4byte	.LVL20-1-.Ltext0
 8254 1187 7E010000 		.4byte	.LVL21-.Ltext0
 8255 118b 0100     		.2byte	0x1
 8256 118d 54       		.byte	0x54
 8257 118e 7E010000 		.4byte	.LVL21-.Ltext0
 8258 1192 80010000 		.4byte	.LVL22-.Ltext0
 8259 1196 0100     		.2byte	0x1
 8260 1198 50       		.byte	0x50
 8261 1199 80010000 		.4byte	.LVL22-.Ltext0
 8262 119d 82010000 		.4byte	.LFE66-.Ltext0
 8263 11a1 0100     		.2byte	0x1
 8264 11a3 54       		.byte	0x54
 8265 11a4 00000000 		.4byte	0
 8266 11a8 00000000 		.4byte	0
 8267              	.LLST10:
 8268 11ac 6C000000 		.4byte	.LFB65-.Ltext0
 8269 11b0 6E000000 		.4byte	.LCFI1-.Ltext0
 8270 11b4 0200     		.2byte	0x2
 8271 11b6 7D       		.byte	0x7d
 8272 11b7 00       		.sleb128 0
 8273 11b8 6E000000 		.4byte	.LCFI1-.Ltext0
 8274 11bc 50010000 		.4byte	.LFE65-.Ltext0
 8275 11c0 0200     		.2byte	0x2
 8276 11c2 7D       		.byte	0x7d
 8277 11c3 10       		.sleb128 16
 8278 11c4 00000000 		.4byte	0
 8279 11c8 00000000 		.4byte	0
 8280              	.LLST11:
 8281 11cc 6C000000 		.4byte	.LVL8-.Ltext0
 8282 11d0 85000000 		.4byte	.LVL9-1-.Ltext0
 8283 11d4 0100     		.2byte	0x1
 8284 11d6 50       		.byte	0x50
 8285 11d7 85000000 		.4byte	.LVL9-1-.Ltext0
ARM GAS  /tmp/cc2ibVgV.s 			page 204


 8286 11db 46010000 		.4byte	.LVL16-.Ltext0
 8287 11df 0100     		.2byte	0x1
 8288 11e1 54       		.byte	0x54
 8289 11e2 46010000 		.4byte	.LVL16-.Ltext0
 8290 11e6 48010000 		.4byte	.LVL17-.Ltext0
 8291 11ea 0100     		.2byte	0x1
 8292 11ec 50       		.byte	0x50
 8293 11ed 48010000 		.4byte	.LVL17-.Ltext0
 8294 11f1 4A010000 		.4byte	.LVL18-.Ltext0
 8295 11f5 0100     		.2byte	0x1
 8296 11f7 54       		.byte	0x54
 8297 11f8 4A010000 		.4byte	.LVL18-.Ltext0
 8298 11fc 50010000 		.4byte	.LFE65-.Ltext0
 8299 1200 0400     		.2byte	0x4
 8300 1202 F3       		.byte	0xf3
 8301 1203 01       		.uleb128 0x1
 8302 1204 50       		.byte	0x50
 8303 1205 9F       		.byte	0x9f
 8304 1206 00000000 		.4byte	0
 8305 120a 00000000 		.4byte	0
 8306              	.LLST12:
 8307 120e 98000000 		.4byte	.LVL10-.Ltext0
 8308 1212 F6000000 		.4byte	.LVL13-.Ltext0
 8309 1216 0100     		.2byte	0x1
 8310 1218 54       		.byte	0x54
 8311 1219 40010000 		.4byte	.LVL14-.Ltext0
 8312 121d 46010000 		.4byte	.LVL16-.Ltext0
 8313 1221 0100     		.2byte	0x1
 8314 1223 54       		.byte	0x54
 8315 1224 00000000 		.4byte	0
 8316 1228 00000000 		.4byte	0
 8317              	.LLST13:
 8318 122c CC000000 		.4byte	.LVL11-.Ltext0
 8319 1230 D0000000 		.4byte	.LVL12-.Ltext0
 8320 1234 0100     		.2byte	0x1
 8321 1236 50       		.byte	0x50
 8322 1237 00000000 		.4byte	0
 8323 123b 00000000 		.4byte	0
 8324              	.LLST0:
 8325 123f 1A000000 		.4byte	.LFB132-.Ltext0
 8326 1243 1C000000 		.4byte	.LCFI0-.Ltext0
 8327 1247 0200     		.2byte	0x2
 8328 1249 7D       		.byte	0x7d
 8329 124a 00       		.sleb128 0
 8330 124b 1C000000 		.4byte	.LCFI0-.Ltext0
 8331 124f 6A000000 		.4byte	.LFE132-.Ltext0
 8332 1253 0200     		.2byte	0x2
 8333 1255 7D       		.byte	0x7d
 8334 1256 18       		.sleb128 24
 8335 1257 00000000 		.4byte	0
 8336 125b 00000000 		.4byte	0
 8337              	.LLST1:
 8338 125f 1A000000 		.4byte	.LVL1-.Ltext0
 8339 1263 24000000 		.4byte	.LVL2-.Ltext0
 8340 1267 0100     		.2byte	0x1
 8341 1269 50       		.byte	0x50
 8342 126a 24000000 		.4byte	.LVL2-.Ltext0
ARM GAS  /tmp/cc2ibVgV.s 			page 205


 8343 126e 6A000000 		.4byte	.LFE132-.Ltext0
 8344 1272 0100     		.2byte	0x1
 8345 1274 54       		.byte	0x54
 8346 1275 00000000 		.4byte	0
 8347 1279 00000000 		.4byte	0
 8348              	.LLST2:
 8349 127d 1A000000 		.4byte	.LVL1-.Ltext0
 8350 1281 24000000 		.4byte	.LVL2-.Ltext0
 8351 1285 0100     		.2byte	0x1
 8352 1287 51       		.byte	0x51
 8353 1288 24000000 		.4byte	.LVL2-.Ltext0
 8354 128c 6A000000 		.4byte	.LFE132-.Ltext0
 8355 1290 0100     		.2byte	0x1
 8356 1292 56       		.byte	0x56
 8357 1293 00000000 		.4byte	0
 8358 1297 00000000 		.4byte	0
 8359              	.LLST3:
 8360 129b 1A000000 		.4byte	.LVL1-.Ltext0
 8361 129f 24000000 		.4byte	.LVL2-.Ltext0
 8362 12a3 0100     		.2byte	0x1
 8363 12a5 52       		.byte	0x52
 8364 12a6 24000000 		.4byte	.LVL2-.Ltext0
 8365 12aa 6A000000 		.4byte	.LFE132-.Ltext0
 8366 12ae 0100     		.2byte	0x1
 8367 12b0 57       		.byte	0x57
 8368 12b1 00000000 		.4byte	0
 8369 12b5 00000000 		.4byte	0
 8370              	.LLST4:
 8371 12b9 1A000000 		.4byte	.LVL1-.Ltext0
 8372 12bd 24000000 		.4byte	.LVL2-.Ltext0
 8373 12c1 0100     		.2byte	0x1
 8374 12c3 53       		.byte	0x53
 8375 12c4 24000000 		.4byte	.LVL2-.Ltext0
 8376 12c8 6A000000 		.4byte	.LFE132-.Ltext0
 8377 12cc 0100     		.2byte	0x1
 8378 12ce 55       		.byte	0x55
 8379 12cf 00000000 		.4byte	0
 8380 12d3 00000000 		.4byte	0
 8381              	.LLST5:
 8382 12d7 38000000 		.4byte	.LVL4-.Ltext0
 8383 12db 5C000000 		.4byte	.LVL5-.Ltext0
 8384 12df 0100     		.2byte	0x1
 8385 12e1 56       		.byte	0x56
 8386 12e2 00000000 		.4byte	0
 8387 12e6 00000000 		.4byte	0
 8388              	.LLST6:
 8389 12ea 38000000 		.4byte	.LVL4-.Ltext0
 8390 12ee 5C000000 		.4byte	.LVL5-.Ltext0
 8391 12f2 0200     		.2byte	0x2
 8392 12f4 30       		.byte	0x30
 8393 12f5 9F       		.byte	0x9f
 8394 12f6 00000000 		.4byte	0
 8395 12fa 00000000 		.4byte	0
 8396              	.LLST7:
 8397 12fe 38000000 		.4byte	.LVL4-.Ltext0
 8398 1302 5C000000 		.4byte	.LVL5-.Ltext0
 8399 1306 0100     		.2byte	0x1
ARM GAS  /tmp/cc2ibVgV.s 			page 206


 8400 1308 57       		.byte	0x57
 8401 1309 00000000 		.4byte	0
 8402 130d 00000000 		.4byte	0
 8403              	.LLST8:
 8404 1311 38000000 		.4byte	.LVL4-.Ltext0
 8405 1315 5C000000 		.4byte	.LVL5-.Ltext0
 8406 1319 0100     		.2byte	0x1
 8407 131b 55       		.byte	0x55
 8408 131c 00000000 		.4byte	0
 8409 1320 00000000 		.4byte	0
 8410              	.LLST9:
 8411 1324 38000000 		.4byte	.LVL4-.Ltext0
 8412 1328 5C000000 		.4byte	.LVL5-.Ltext0
 8413 132c 0100     		.2byte	0x1
 8414 132e 54       		.byte	0x54
 8415 132f 00000000 		.4byte	0
 8416 1333 00000000 		.4byte	0
 8417              	.LLST69:
 8418 1337 DE060000 		.4byte	.LFB110-.Ltext0
 8419 133b E4060000 		.4byte	.LCFI19-.Ltext0
 8420 133f 0200     		.2byte	0x2
 8421 1341 7D       		.byte	0x7d
 8422 1342 00       		.sleb128 0
 8423 1343 E4060000 		.4byte	.LCFI19-.Ltext0
 8424 1347 58070000 		.4byte	.LFE110-.Ltext0
 8425 134b 0200     		.2byte	0x2
 8426 134d 7D       		.byte	0x7d
 8427 134e 08       		.sleb128 8
 8428 134f 00000000 		.4byte	0
 8429 1353 00000000 		.4byte	0
 8430              	.LLST70:
 8431 1357 DE060000 		.4byte	.LVL146-.Ltext0
 8432 135b 33070000 		.4byte	.LVL153-1-.Ltext0
 8433 135f 0100     		.2byte	0x1
 8434 1361 50       		.byte	0x50
 8435 1362 33070000 		.4byte	.LVL153-1-.Ltext0
 8436 1366 38070000 		.4byte	.LVL154-.Ltext0
 8437 136a 0400     		.2byte	0x4
 8438 136c F3       		.byte	0xf3
 8439 136d 01       		.uleb128 0x1
 8440 136e 50       		.byte	0x50
 8441 136f 9F       		.byte	0x9f
 8442 1370 38070000 		.4byte	.LVL154-.Ltext0
 8443 1374 56070000 		.4byte	.LVL162-.Ltext0
 8444 1378 0100     		.2byte	0x1
 8445 137a 50       		.byte	0x50
 8446 137b 56070000 		.4byte	.LVL162-.Ltext0
 8447 137f 58070000 		.4byte	.LFE110-.Ltext0
 8448 1383 0400     		.2byte	0x4
 8449 1385 F3       		.byte	0xf3
 8450 1386 01       		.uleb128 0x1
 8451 1387 50       		.byte	0x50
 8452 1388 9F       		.byte	0x9f
 8453 1389 00000000 		.4byte	0
 8454 138d 00000000 		.4byte	0
 8455              	.LLST71:
 8456 1391 E8060000 		.4byte	.LVL147-.Ltext0
ARM GAS  /tmp/cc2ibVgV.s 			page 207


 8457 1395 33070000 		.4byte	.LVL153-1-.Ltext0
 8458 1399 0100     		.2byte	0x1
 8459 139b 50       		.byte	0x50
 8460 139c 33070000 		.4byte	.LVL153-1-.Ltext0
 8461 13a0 38070000 		.4byte	.LVL154-.Ltext0
 8462 13a4 0400     		.2byte	0x4
 8463 13a6 F3       		.byte	0xf3
 8464 13a7 01       		.uleb128 0x1
 8465 13a8 50       		.byte	0x50
 8466 13a9 9F       		.byte	0x9f
 8467 13aa 38070000 		.4byte	.LVL154-.Ltext0
 8468 13ae 54070000 		.4byte	.LVL161-.Ltext0
 8469 13b2 0100     		.2byte	0x1
 8470 13b4 50       		.byte	0x50
 8471 13b5 00000000 		.4byte	0
 8472 13b9 00000000 		.4byte	0
 8473              	.LLST72:
 8474 13bd FA060000 		.4byte	.LVL149-.Ltext0
 8475 13c1 04070000 		.4byte	.LVL151-.Ltext0
 8476 13c5 0100     		.2byte	0x1
 8477 13c7 53       		.byte	0x53
 8478 13c8 04070000 		.4byte	.LVL151-.Ltext0
 8479 13cc 06070000 		.4byte	.LVL152-.Ltext0
 8480 13d0 0200     		.2byte	0x2
 8481 13d2 70       		.byte	0x70
 8482 13d3 24       		.sleb128 36
 8483 13d4 38070000 		.4byte	.LVL154-.Ltext0
 8484 13d8 3E070000 		.4byte	.LVL156-.Ltext0
 8485 13dc 0100     		.2byte	0x1
 8486 13de 53       		.byte	0x53
 8487 13df 3E070000 		.4byte	.LVL156-.Ltext0
 8488 13e3 40070000 		.4byte	.LVL157-.Ltext0
 8489 13e7 0200     		.2byte	0x2
 8490 13e9 70       		.byte	0x70
 8491 13ea 24       		.sleb128 36
 8492 13eb 00000000 		.4byte	0
 8493 13ef 00000000 		.4byte	0
 8494              	.LLST73:
 8495 13f3 EE060000 		.4byte	.LVL148-.Ltext0
 8496 13f7 00070000 		.4byte	.LVL150-.Ltext0
 8497 13fb 0100     		.2byte	0x1
 8498 13fd 52       		.byte	0x52
 8499 13fe 38070000 		.4byte	.LVL154-.Ltext0
 8500 1402 3A070000 		.4byte	.LVL155-.Ltext0
 8501 1406 0100     		.2byte	0x1
 8502 1408 52       		.byte	0x52
 8503 1409 40070000 		.4byte	.LVL157-.Ltext0
 8504 140d 46070000 		.4byte	.LVL158-.Ltext0
 8505 1411 0100     		.2byte	0x1
 8506 1413 52       		.byte	0x52
 8507 1414 4A070000 		.4byte	.LVL159-.Ltext0
 8508 1418 52070000 		.4byte	.LVL160-.Ltext0
 8509 141c 0100     		.2byte	0x1
 8510 141e 52       		.byte	0x52
 8511 141f 00000000 		.4byte	0
 8512 1423 00000000 		.4byte	0
 8513              		.section	.debug_aranges,"",%progbits
ARM GAS  /tmp/cc2ibVgV.s 			page 208


 8514 0000 1C000000 		.4byte	0x1c
 8515 0004 0200     		.2byte	0x2
 8516 0006 00000000 		.4byte	.Ldebug_info0
 8517 000a 04       		.byte	0x4
 8518 000b 00       		.byte	0
 8519 000c 0000     		.2byte	0
 8520 000e 0000     		.2byte	0
 8521 0010 00000000 		.4byte	.Ltext0
 8522 0014 E40A0000 		.4byte	.Letext0-.Ltext0
 8523 0018 00000000 		.4byte	0
 8524 001c 00000000 		.4byte	0
 8525              		.section	.debug_ranges,"",%progbits
 8526              	.Ldebug_ranges0:
 8527 0000 8E000000 		.4byte	.LBB8-.Ltext0
 8528 0004 90000000 		.4byte	.LBE8-.Ltext0
 8529 0008 98000000 		.4byte	.LBB12-.Ltext0
 8530 000c F6000000 		.4byte	.LBE12-.Ltext0
 8531 0010 40010000 		.4byte	.LBB13-.Ltext0
 8532 0014 46010000 		.4byte	.LBE13-.Ltext0
 8533 0018 00000000 		.4byte	0
 8534 001c 00000000 		.4byte	0
 8535 0020 3E040000 		.4byte	.LBB14-.Ltext0
 8536 0024 48040000 		.4byte	.LBE14-.Ltext0
 8537 0028 4C040000 		.4byte	.LBB15-.Ltext0
 8538 002c 50040000 		.4byte	.LBE15-.Ltext0
 8539 0030 00000000 		.4byte	0
 8540 0034 00000000 		.4byte	0
 8541 0038 E8060000 		.4byte	.LBB23-.Ltext0
 8542 003c 36070000 		.4byte	.LBE23-.Ltext0
 8543 0040 38070000 		.4byte	.LBB26-.Ltext0
 8544 0044 54070000 		.4byte	.LBE26-.Ltext0
 8545 0048 00000000 		.4byte	0
 8546 004c 00000000 		.4byte	0
 8547              		.section	.debug_line,"",%progbits
 8548              	.Ldebug_line0:
 8549 0000 44070000 		.section	.debug_str,"MS",%progbits,1
 8549      02006501 
 8549      00000201 
 8549      FB0E0D00 
 8549      01010101 
 8550              	.LASF106:
 8551 0000 49524441 		.ascii	"IRDA_DMARxOnlyAbortCallback\000"
 8551      5F444D41 
 8551      52784F6E 
 8551      6C794162 
 8551      6F727443 
 8552              	.LASF170:
 8553 001c 48414C5F 		.ascii	"HAL_RCC_GetPCLK1Freq\000"
 8553      5243435F 
 8553      47657450 
 8553      434C4B31 
 8553      46726571 
 8554              	.LASF97:
 8555 0031 48414C5F 		.ascii	"HAL_TickFreqTypeDef\000"
 8555      5469636B 
 8555      46726571 
 8555      54797065 
ARM GAS  /tmp/cc2ibVgV.s 			page 209


 8555      44656600 
 8556              	.LASF90:
 8557 0045 67537461 		.ascii	"gState\000"
 8557      746500
 8558              	.LASF134:
 8559 004c 48414C5F 		.ascii	"HAL_IRDA_RxCpltCallback\000"
 8559      49524441 
 8559      5F527843 
 8559      706C7443 
 8559      616C6C62 
 8560              	.LASF127:
 8561 0064 48414C5F 		.ascii	"HAL_IRDA_GetState\000"
 8561      49524441 
 8561      5F476574 
 8561      53746174 
 8561      6500
 8562              	.LASF31:
 8563 0076 466C6167 		.ascii	"FlagStatus\000"
 8563      53746174 
 8563      757300
 8564              	.LASF48:
 8565 0081 444D415F 		.ascii	"DMA_InitTypeDef\000"
 8565      496E6974 
 8565      54797065 
 8565      44656600 
 8566              	.LASF3:
 8567 0091 5F5F7569 		.ascii	"__uint8_t\000"
 8567      6E74385F 
 8567      7400
 8568              	.LASF35:
 8569 009b 48414C5F 		.ascii	"HAL_BUSY\000"
 8569      42555359 
 8569      00
 8570              	.LASF21:
 8571 00a4 41504250 		.ascii	"APBPrescTable\000"
 8571      72657363 
 8571      5461626C 
 8571      6500
 8572              	.LASF51:
 8573 00b2 48414C5F 		.ascii	"HAL_DMA_STATE_BUSY\000"
 8573      444D415F 
 8573      53544154 
 8573      455F4255 
 8573      535900
 8574              	.LASF139:
 8575 00c5 63723369 		.ascii	"cr3its\000"
 8575      747300
 8576              	.LASF125:
 8577 00cc 49524441 		.ascii	"IRDA_DMATransmitCplt\000"
 8577      5F444D41 
 8577      5472616E 
 8577      736D6974 
 8577      43706C74 
 8578              	.LASF163:
 8579 00e1 48414C5F 		.ascii	"HAL_IRDA_DeInit\000"
 8579      49524441 
 8579      5F446549 
ARM GAS  /tmp/cc2ibVgV.s 			page 210


 8579      6E697400 
 8580              	.LASF11:
 8581 00f1 6C6F6E67 		.ascii	"long long unsigned int\000"
 8581      206C6F6E 
 8581      6720756E 
 8581      7369676E 
 8581      65642069 
 8582              	.LASF131:
 8583 0108 48414C5F 		.ascii	"HAL_IRDA_AbortCpltCallback\000"
 8583      49524441 
 8583      5F41626F 
 8583      72744370 
 8583      6C744361 
 8584              	.LASF153:
 8585 0123 70446174 		.ascii	"pData\000"
 8585      6100
 8586              	.LASF103:
 8587 0129 49524441 		.ascii	"IRDA_Receive_IT\000"
 8587      5F526563 
 8587      65697665 
 8587      5F495400 
 8588              	.LASF84:
 8589 0139 54785866 		.ascii	"TxXferCount\000"
 8589      6572436F 
 8589      756E7400 
 8590              	.LASF10:
 8591 0145 6C6F6E67 		.ascii	"long long int\000"
 8591      206C6F6E 
 8591      6720696E 
 8591      7400
 8592              	.LASF0:
 8593 0153 7369676E 		.ascii	"signed char\000"
 8593      65642063 
 8593      68617200 
 8594              	.LASF28:
 8595 015f 47545052 		.ascii	"GTPR\000"
 8595      00
 8596              	.LASF67:
 8597 0164 42617564 		.ascii	"BaudRate\000"
 8597      52617465 
 8597      00
 8598              	.LASF152:
 8599 016d 48414C5F 		.ascii	"HAL_IRDA_Receive_DMA\000"
 8599      49524441 
 8599      5F526563 
 8599      65697665 
 8599      5F444D41 
 8600              	.LASF167:
 8601 0182 48414C5F 		.ascii	"HAL_DMA_Start_IT\000"
 8601      444D415F 
 8601      53746172 
 8601      745F4954 
 8601      00
 8602              	.LASF92:
 8603 0193 49524441 		.ascii	"IRDA_HandleTypeDef\000"
 8603      5F48616E 
 8603      646C6554 
ARM GAS  /tmp/cc2ibVgV.s 			page 211


 8603      79706544 
 8603      656600
 8604              	.LASF150:
 8605 01a6 746D7072 		.ascii	"tmpreg\000"
 8605      656700
 8606              	.LASF40:
 8607 01ad 48414C5F 		.ascii	"HAL_LockTypeDef\000"
 8607      4C6F636B 
 8607      54797065 
 8607      44656600 
 8608              	.LASF72:
 8609 01bd 49524441 		.ascii	"IRDA_InitTypeDef\000"
 8609      5F496E69 
 8609      74547970 
 8609      65446566 
 8609      00
 8610              	.LASF144:
 8611 01ce 41626F72 		.ascii	"AbortCplt\000"
 8611      7443706C 
 8611      7400
 8612              	.LASF60:
 8613 01d8 58666572 		.ascii	"XferHalfCpltCallback\000"
 8613      48616C66 
 8613      43706C74 
 8613      43616C6C 
 8613      6261636B 
 8614              	.LASF7:
 8615 01ed 6C6F6E67 		.ascii	"long int\000"
 8615      20696E74 
 8615      00
 8616              	.LASF82:
 8617 01f6 70547842 		.ascii	"pTxBuffPtr\000"
 8617      75666650 
 8617      747200
 8618              	.LASF107:
 8619 0201 49524441 		.ascii	"IRDA_DMATxOnlyAbortCallback\000"
 8619      5F444D41 
 8619      54784F6E 
 8619      6C794162 
 8619      6F727443 
 8620              	.LASF42:
 8621 021d 50657269 		.ascii	"PeriphInc\000"
 8621      7068496E 
 8621      6300
 8622              	.LASF78:
 8623 0227 48414C5F 		.ascii	"HAL_IRDA_STATE_BUSY_TX_RX\000"
 8623      49524441 
 8623      5F535441 
 8623      54455F42 
 8623      5553595F 
 8624              	.LASF116:
 8625 0241 466C6167 		.ascii	"Flag\000"
 8625      00
 8626              	.LASF133:
 8627 0246 48414C5F 		.ascii	"HAL_IRDA_RxHalfCpltCallback\000"
 8627      49524441 
 8627      5F527848 
ARM GAS  /tmp/cc2ibVgV.s 			page 212


 8627      616C6643 
 8627      706C7443 
 8628              	.LASF132:
 8629 0262 48414C5F 		.ascii	"HAL_IRDA_ErrorCallback\000"
 8629      49524441 
 8629      5F457272 
 8629      6F724361 
 8629      6C6C6261 
 8630              	.LASF14:
 8631 0279 75696E74 		.ascii	"uint16_t\000"
 8631      31365F74 
 8631      00
 8632              	.LASF75:
 8633 0282 48414C5F 		.ascii	"HAL_IRDA_STATE_BUSY\000"
 8633      49524441 
 8633      5F535441 
 8633      54455F42 
 8633      55535900 
 8634              	.LASF93:
 8635 0296 48414C5F 		.ascii	"HAL_TICK_FREQ_10HZ\000"
 8635      5449434B 
 8635      5F465245 
 8635      515F3130 
 8635      485A00
 8636              	.LASF65:
 8637 02a9 4368616E 		.ascii	"ChannelIndex\000"
 8637      6E656C49 
 8637      6E646578 
 8637      00
 8638              	.LASF105:
 8639 02b6 49524441 		.ascii	"IRDA_Transmit_IT\000"
 8639      5F547261 
 8639      6E736D69 
 8639      745F4954 
 8639      00
 8640              	.LASF118:
 8641 02c7 5469636B 		.ascii	"Tickstart\000"
 8641      73746172 
 8641      7400
 8642              	.LASF58:
 8643 02d1 50617265 		.ascii	"Parent\000"
 8643      6E7400
 8644              	.LASF79:
 8645 02d8 48414C5F 		.ascii	"HAL_IRDA_STATE_TIMEOUT\000"
 8645      49524441 
 8645      5F535441 
 8645      54455F54 
 8645      494D454F 
 8646              	.LASF147:
 8647 02ef 48414C5F 		.ascii	"HAL_IRDA_Abort\000"
 8647      49524441 
 8647      5F41626F 
 8647      727400
 8648              	.LASF56:
 8649 02fe 4C6F636B 		.ascii	"Lock\000"
 8649      00
 8650              	.LASF8:
ARM GAS  /tmp/cc2ibVgV.s 			page 213


 8651 0303 5F5F7569 		.ascii	"__uint32_t\000"
 8651      6E743332 
 8651      5F7400
 8652              	.LASF119:
 8653 030e 54696D65 		.ascii	"Timeout\000"
 8653      6F757400 
 8654              	.LASF41:
 8655 0316 44697265 		.ascii	"Direction\000"
 8655      6374696F 
 8655      6E00
 8656              	.LASF138:
 8657 0320 63723169 		.ascii	"cr1its\000"
 8657      747300
 8658              	.LASF89:
 8659 0327 68646D61 		.ascii	"hdmarx\000"
 8659      727800
 8660              	.LASF36:
 8661 032e 48414C5F 		.ascii	"HAL_TIMEOUT\000"
 8661      54494D45 
 8661      4F555400 
 8662              	.LASF27:
 8663 033a 444D415F 		.ascii	"DMA_TypeDef\000"
 8663      54797065 
 8663      44656600 
 8664              	.LASF12:
 8665 0346 756E7369 		.ascii	"unsigned int\000"
 8665      676E6564 
 8665      20696E74 
 8665      00
 8666              	.LASF80:
 8667 0353 48414C5F 		.ascii	"HAL_IRDA_STATE_ERROR\000"
 8667      49524441 
 8667      5F535441 
 8667      54455F45 
 8667      52524F52 
 8668              	.LASF49:
 8669 0368 48414C5F 		.ascii	"HAL_DMA_STATE_RESET\000"
 8669      444D415F 
 8669      53544154 
 8669      455F5245 
 8669      53455400 
 8670              	.LASF19:
 8671 037c 53797374 		.ascii	"SystemCoreClock\000"
 8671      656D436F 
 8671      7265436C 
 8671      6F636B00 
 8672              	.LASF99:
 8673 038c 75775469 		.ascii	"uwTickFreq\000"
 8673      636B4672 
 8673      657100
 8674              	.LASF69:
 8675 0397 50617269 		.ascii	"Parity\000"
 8675      747900
 8676              	.LASF23:
 8677 039e 43504152 		.ascii	"CPAR\000"
 8677      00
 8678              	.LASF148:
ARM GAS  /tmp/cc2ibVgV.s 			page 214


 8679 03a3 48414C5F 		.ascii	"HAL_IRDA_DMAStop\000"
 8679      49524441 
 8679      5F444D41 
 8679      53746F70 
 8679      00
 8680              	.LASF9:
 8681 03b4 6C6F6E67 		.ascii	"long unsigned int\000"
 8681      20756E73 
 8681      69676E65 
 8681      6420696E 
 8681      7400
 8682              	.LASF165:
 8683 03c6 48414C5F 		.ascii	"HAL_DMA_Abort_IT\000"
 8683      444D415F 
 8683      41626F72 
 8683      745F4954 
 8683      00
 8684              	.LASF95:
 8685 03d7 48414C5F 		.ascii	"HAL_TICK_FREQ_1KHZ\000"
 8685      5449434B 
 8685      5F465245 
 8685      515F314B 
 8685      485A00
 8686              	.LASF81:
 8687 03ea 48414C5F 		.ascii	"HAL_IRDA_StateTypeDef\000"
 8687      49524441 
 8687      5F537461 
 8687      74655479 
 8687      70654465 
 8688              	.LASF33:
 8689 0400 48414C5F 		.ascii	"HAL_OK\000"
 8689      4F4B00
 8690              	.LASF158:
 8691 0407 48414C5F 		.ascii	"HAL_IRDA_Receive\000"
 8691      49524441 
 8691      5F526563 
 8691      65697665 
 8691      00
 8692              	.LASF86:
 8693 0418 52785866 		.ascii	"RxXferSize\000"
 8693      65725369 
 8693      7A6500
 8694              	.LASF5:
 8695 0423 73686F72 		.ascii	"short unsigned int\000"
 8695      7420756E 
 8695      7369676E 
 8695      65642069 
 8695      6E7400
 8696              	.LASF136:
 8697 0436 48414C5F 		.ascii	"HAL_IRDA_TxCpltCallback\000"
 8697      49524441 
 8697      5F547843 
 8697      706C7443 
 8697      616C6C62 
 8698              	.LASF83:
 8699 044e 54785866 		.ascii	"TxXferSize\000"
 8699      65725369 
ARM GAS  /tmp/cc2ibVgV.s 			page 215


 8699      7A6500
 8700              	.LASF114:
 8701 0459 49524441 		.ascii	"IRDA_EndTxTransfer\000"
 8701      5F456E64 
 8701      54785472 
 8701      616E7366 
 8701      657200
 8702              	.LASF64:
 8703 046c 446D6142 		.ascii	"DmaBaseAddress\000"
 8703      61736541 
 8703      64647265 
 8703      737300
 8704              	.LASF140:
 8705 047b 6572726F 		.ascii	"errorflags\000"
 8705      72666C61 
 8705      677300
 8706              	.LASF63:
 8707 0486 4572726F 		.ascii	"ErrorCode\000"
 8707      72436F64 
 8707      6500
 8708              	.LASF45:
 8709 0490 4D656D44 		.ascii	"MemDataAlignment\000"
 8709      61746141 
 8709      6C69676E 
 8709      6D656E74 
 8709      00
 8710              	.LASF29:
 8711 04a1 55534152 		.ascii	"USART_TypeDef\000"
 8711      545F5479 
 8711      70654465 
 8711      6600
 8712              	.LASF145:
 8713 04af 48414C5F 		.ascii	"HAL_IRDA_AbortReceive\000"
 8713      49524441 
 8713      5F41626F 
 8713      72745265 
 8713      63656976 
 8714              	.LASF37:
 8715 04c5 48414C5F 		.ascii	"HAL_StatusTypeDef\000"
 8715      53746174 
 8715      75735479 
 8715      70654465 
 8715      6600
 8716              	.LASF73:
 8717 04d7 48414C5F 		.ascii	"HAL_IRDA_STATE_RESET\000"
 8717      49524441 
 8717      5F535441 
 8717      54455F52 
 8717      45534554 
 8718              	.LASF166:
 8719 04ec 48414C5F 		.ascii	"HAL_DMA_Abort\000"
 8719      444D415F 
 8719      41626F72 
 8719      7400
 8720              	.LASF20:
 8721 04fa 41484250 		.ascii	"AHBPrescTable\000"
 8721      72657363 
ARM GAS  /tmp/cc2ibVgV.s 			page 216


 8721      5461626C 
 8721      6500
 8722              	.LASF164:
 8723 0508 48414C5F 		.ascii	"HAL_IRDA_Init\000"
 8723      49524441 
 8723      5F496E69 
 8723      7400
 8724              	.LASF143:
 8725 0516 48414C5F 		.ascii	"HAL_IRDA_Abort_IT\000"
 8725      49524441 
 8725      5F41626F 
 8725      72745F49 
 8725      5400
 8726              	.LASF50:
 8727 0528 48414C5F 		.ascii	"HAL_DMA_STATE_READY\000"
 8727      444D415F 
 8727      53544154 
 8727      455F5245 
 8727      41445900 
 8728              	.LASF108:
 8729 053c 68646D61 		.ascii	"hdma\000"
 8729      00
 8730              	.LASF137:
 8731 0541 69737266 		.ascii	"isrflags\000"
 8731      6C616773 
 8731      00
 8732              	.LASF161:
 8733 054a 48414C5F 		.ascii	"HAL_IRDA_MspDeInit\000"
 8733      49524441 
 8733      5F4D7370 
 8733      4465496E 
 8733      697400
 8734              	.LASF71:
 8735 055d 49724441 		.ascii	"IrDAMode\000"
 8735      4D6F6465 
 8735      00
 8736              	.LASF17:
 8737 0566 73697A65 		.ascii	"sizetype\000"
 8737      74797065 
 8737      00
 8738              	.LASF112:
 8739 056f 49524441 		.ascii	"IRDA_EndRxTransfer\000"
 8739      5F456E64 
 8739      52785472 
 8739      616E7366 
 8739      657200
 8740              	.LASF168:
 8741 0582 48414C5F 		.ascii	"HAL_GetTick\000"
 8741      47657454 
 8741      69636B00 
 8742              	.LASF32:
 8743 058e 6C6F6E67 		.ascii	"long double\000"
 8743      20646F75 
 8743      626C6500 
 8744              	.LASF122:
 8745 059a 49524441 		.ascii	"IRDA_DMAReceiveHalfCplt\000"
 8745      5F444D41 
ARM GAS  /tmp/cc2ibVgV.s 			page 217


 8745      52656365 
 8745      69766548 
 8745      616C6643 
 8746              	.LASF39:
 8747 05b2 48414C5F 		.ascii	"HAL_LOCKED\000"
 8747      4C4F434B 
 8747      454400
 8748              	.LASF66:
 8749 05bd 444D415F 		.ascii	"DMA_HandleTypeDef\000"
 8749      48616E64 
 8749      6C655479 
 8749      70654465 
 8749      6600
 8750              	.LASF61:
 8751 05cf 58666572 		.ascii	"XferErrorCallback\000"
 8751      4572726F 
 8751      7243616C 
 8751      6C626163 
 8751      6B00
 8752              	.LASF172:
 8753 05e1 7372632F 		.ascii	"src/stm32f1xx_hal_irda.c\000"
 8753      73746D33 
 8753      32663178 
 8753      785F6861 
 8753      6C5F6972 
 8754              	.LASF113:
 8755 05fa 49524441 		.ascii	"IRDA_SetConfig\000"
 8755      5F536574 
 8755      436F6E66 
 8755      696700
 8756              	.LASF88:
 8757 0609 68646D61 		.ascii	"hdmatx\000"
 8757      747800
 8758              	.LASF123:
 8759 0610 49524441 		.ascii	"IRDA_DMAReceiveCplt\000"
 8759      5F444D41 
 8759      52656365 
 8759      69766543 
 8759      706C7400 
 8760              	.LASF74:
 8761 0624 48414C5F 		.ascii	"HAL_IRDA_STATE_READY\000"
 8761      49524441 
 8761      5F535441 
 8761      54455F52 
 8761      45414459 
 8762              	.LASF176:
 8763 0639 48414C5F 		.ascii	"HAL_IRDA_IRQHandler\000"
 8763      49524441 
 8763      5F495251 
 8763      48616E64 
 8763      6C657200 
 8764              	.LASF25:
 8765 064d 444D415F 		.ascii	"DMA_Channel_TypeDef\000"
 8765      4368616E 
 8765      6E656C5F 
 8765      54797065 
 8765      44656600 
ARM GAS  /tmp/cc2ibVgV.s 			page 218


 8766              	.LASF55:
 8767 0661 496E6974 		.ascii	"Init\000"
 8767      00
 8768              	.LASF151:
 8769 0666 48414C5F 		.ascii	"HAL_IRDA_DMAPause\000"
 8769      49524441 
 8769      5F444D41 
 8769      50617573 
 8769      6500
 8770              	.LASF154:
 8771 0678 53697A65 		.ascii	"Size\000"
 8771      00
 8772              	.LASF54:
 8773 067d 496E7374 		.ascii	"Instance\000"
 8773      616E6365 
 8773      00
 8774              	.LASF30:
 8775 0686 52455345 		.ascii	"RESET\000"
 8775      5400
 8776              	.LASF169:
 8777 068c 48414C5F 		.ascii	"HAL_RCC_GetPCLK2Freq\000"
 8777      5243435F 
 8777      47657450 
 8777      434C4B32 
 8777      46726571 
 8778              	.LASF110:
 8779 06a1 49524441 		.ascii	"IRDA_DMATxAbortCallback\000"
 8779      5F444D41 
 8779      54784162 
 8779      6F727443 
 8779      616C6C62 
 8780              	.LASF15:
 8781 06b9 696E7433 		.ascii	"int32_t\000"
 8781      325F7400 
 8782              	.LASF1:
 8783 06c1 756E7369 		.ascii	"unsigned char\000"
 8783      676E6564 
 8783      20636861 
 8783      7200
 8784              	.LASF146:
 8785 06cf 48414C5F 		.ascii	"HAL_IRDA_AbortTransmit\000"
 8785      49524441 
 8785      5F41626F 
 8785      72745472 
 8785      616E736D 
 8786              	.LASF109:
 8787 06e6 49524441 		.ascii	"IRDA_DMARxAbortCallback\000"
 8787      5F444D41 
 8787      52784162 
 8787      6F727443 
 8787      616C6C62 
 8788              	.LASF18:
 8789 06fe 49544D5F 		.ascii	"ITM_RxBuffer\000"
 8789      52784275 
 8789      66666572 
 8789      00
 8790              	.LASF155:
ARM GAS  /tmp/cc2ibVgV.s 			page 219


 8791 070b 48414C5F 		.ascii	"HAL_IRDA_Transmit_DMA\000"
 8791      49524441 
 8791      5F547261 
 8791      6E736D69 
 8791      745F444D 
 8792              	.LASF77:
 8793 0721 48414C5F 		.ascii	"HAL_IRDA_STATE_BUSY_RX\000"
 8793      49524441 
 8793      5F535441 
 8793      54455F42 
 8793      5553595F 
 8794              	.LASF53:
 8795 0738 48414C5F 		.ascii	"HAL_DMA_StateTypeDef\000"
 8795      444D415F 
 8795      53746174 
 8795      65547970 
 8795      65446566 
 8796              	.LASF2:
 8797 074d 73686F72 		.ascii	"short int\000"
 8797      7420696E 
 8797      7400
 8798              	.LASF101:
 8799 0757 70636C6B 		.ascii	"pclk\000"
 8799      00
 8800              	.LASF128:
 8801 075c 74656D70 		.ascii	"temp1\000"
 8801      3100
 8802              	.LASF129:
 8803 0762 74656D70 		.ascii	"temp2\000"
 8803      3200
 8804              	.LASF159:
 8805 0768 7469636B 		.ascii	"tickstart\000"
 8805      73746172 
 8805      7400
 8806              	.LASF175:
 8807 0772 48414C5F 		.ascii	"HAL_IRDA_AbortReceiveCpltCallback\000"
 8807      49524441 
 8807      5F41626F 
 8807      72745265 
 8807      63656976 
 8808              	.LASF43:
 8809 0794 4D656D49 		.ascii	"MemInc\000"
 8809      6E6300
 8810              	.LASF171:
 8811 079b 474E5520 		.ascii	"GNU C11 6.3.1 20170620 -mcpu=cortex-m3 -mthumb -g -"
 8811      43313120 
 8811      362E332E 
 8811      31203230 
 8811      31373036 
 8812 07ce 67647761 		.ascii	"gdwarf-2 -Os -fomit-frame-pointer\000"
 8812      72662D32 
 8812      202D4F73 
 8812      202D666F 
 8812      6D69742D 
 8813              	.LASF120:
 8814 07f0 49524441 		.ascii	"IRDA_DMAError\000"
 8814      5F444D41 
ARM GAS  /tmp/cc2ibVgV.s 			page 220


 8814      4572726F 
 8814      7200
 8815              	.LASF173:
 8816 07fe 2F686F6D 		.ascii	"/home/berndoj/git/stm32tctst/lib/stm32f1hal\000"
 8816      652F6265 
 8816      726E646F 
 8816      6A2F6769 
 8816      742F7374 
 8817              	.LASF142:
 8818 082a 48414C5F 		.ascii	"HAL_IRDA_AbortTransmit_IT\000"
 8818      49524441 
 8818      5F41626F 
 8818      72745472 
 8818      616E736D 
 8819              	.LASF121:
 8820 0844 646D6172 		.ascii	"dmarequest\000"
 8820      65717565 
 8820      737400
 8821              	.LASF174:
 8822 084f 5F5F444D 		.ascii	"__DMA_HandleTypeDef\000"
 8822      415F4861 
 8822      6E646C65 
 8822      54797065 
 8822      44656600 
 8823              	.LASF16:
 8824 0863 75696E74 		.ascii	"uint32_t\000"
 8824      33325F74 
 8824      00
 8825              	.LASF68:
 8826 086c 576F7264 		.ascii	"WordLength\000"
 8826      4C656E67 
 8826      746800
 8827              	.LASF34:
 8828 0877 48414C5F 		.ascii	"HAL_ERROR\000"
 8828      4552524F 
 8828      5200
 8829              	.LASF26:
 8830 0881 49464352 		.ascii	"IFCR\000"
 8830      00
 8831              	.LASF98:
 8832 0886 75775469 		.ascii	"uwTickPrio\000"
 8832      636B5072 
 8832      696F00
 8833              	.LASF57:
 8834 0891 53746174 		.ascii	"State\000"
 8834      6500
 8835              	.LASF46:
 8836 0897 4D6F6465 		.ascii	"Mode\000"
 8836      00
 8837              	.LASF4:
 8838 089c 5F5F7569 		.ascii	"__uint16_t\000"
 8838      6E743136 
 8838      5F7400
 8839              	.LASF104:
 8840 08a7 49524441 		.ascii	"IRDA_EndTransmit_IT\000"
 8840      5F456E64 
 8840      5472616E 
ARM GAS  /tmp/cc2ibVgV.s 			page 221


 8840      736D6974 
 8840      5F495400 
 8841              	.LASF94:
 8842 08bb 48414C5F 		.ascii	"HAL_TICK_FREQ_100HZ\000"
 8842      5449434B 
 8842      5F465245 
 8842      515F3130 
 8842      30485A00 
 8843              	.LASF6:
 8844 08cf 5F5F696E 		.ascii	"__int32_t\000"
 8844      7433325F 
 8844      7400
 8845              	.LASF96:
 8846 08d9 48414C5F 		.ascii	"HAL_TICK_FREQ_DEFAULT\000"
 8846      5449434B 
 8846      5F465245 
 8846      515F4445 
 8846      4641554C 
 8847              	.LASF162:
 8848 08ef 48414C5F 		.ascii	"HAL_IRDA_MspInit\000"
 8848      49524441 
 8848      5F4D7370 
 8848      496E6974 
 8848      00
 8849              	.LASF102:
 8850 0900 75686461 		.ascii	"uhdata\000"
 8850      746100
 8851              	.LASF70:
 8852 0907 50726573 		.ascii	"Prescaler\000"
 8852      63616C65 
 8852      7200
 8853              	.LASF130:
 8854 0911 48414C5F 		.ascii	"HAL_IRDA_AbortTransmitCpltCallback\000"
 8854      49524441 
 8854      5F41626F 
 8854      72745472 
 8854      616E736D 
 8855              	.LASF52:
 8856 0934 48414C5F 		.ascii	"HAL_DMA_STATE_TIMEOUT\000"
 8856      444D415F 
 8856      53544154 
 8856      455F5449 
 8856      4D454F55 
 8857              	.LASF124:
 8858 094a 49524441 		.ascii	"IRDA_DMATransmitHalfCplt\000"
 8858      5F444D41 
 8858      5472616E 
 8858      736D6974 
 8858      48616C66 
 8859              	.LASF135:
 8860 0963 48414C5F 		.ascii	"HAL_IRDA_TxHalfCpltCallback\000"
 8860      49524441 
 8860      5F547848 
 8860      616C6643 
 8860      706C7443 
 8861              	.LASF115:
 8862 097f 49524441 		.ascii	"IRDA_WaitOnFlagUntilTimeout\000"
ARM GAS  /tmp/cc2ibVgV.s 			page 222


 8862      5F576169 
 8862      744F6E46 
 8862      6C616755 
 8862      6E74696C 
 8863              	.LASF44:
 8864 099b 50657269 		.ascii	"PeriphDataAlignment\000"
 8864      70684461 
 8864      7461416C 
 8864      69676E6D 
 8864      656E7400 
 8865              	.LASF149:
 8866 09af 48414C5F 		.ascii	"HAL_IRDA_DMAResume\000"
 8866      49524441 
 8866      5F444D41 
 8866      52657375 
 8866      6D6500
 8867              	.LASF22:
 8868 09c2 434E4454 		.ascii	"CNDTR\000"
 8868      5200
 8869              	.LASF24:
 8870 09c8 434D4152 		.ascii	"CMAR\000"
 8870      00
 8871              	.LASF111:
 8872 09cd 49524441 		.ascii	"IRDA_DMAAbortOnError\000"
 8872      5F444D41 
 8872      41626F72 
 8872      744F6E45 
 8872      72726F72 
 8873              	.LASF47:
 8874 09e2 5072696F 		.ascii	"Priority\000"
 8874      72697479 
 8874      00
 8875              	.LASF85:
 8876 09eb 70527842 		.ascii	"pRxBuffPtr\000"
 8876      75666650 
 8876      747200
 8877              	.LASF13:
 8878 09f6 75696E74 		.ascii	"uint8_t\000"
 8878      385F7400 
 8879              	.LASF76:
 8880 09fe 48414C5F 		.ascii	"HAL_IRDA_STATE_BUSY_TX\000"
 8880      49524441 
 8880      5F535441 
 8880      54455F42 
 8880      5553595F 
 8881              	.LASF87:
 8882 0a15 52785866 		.ascii	"RxXferCount\000"
 8882      6572436F 
 8882      756E7400 
 8883              	.LASF156:
 8884 0a21 48414C5F 		.ascii	"HAL_IRDA_Receive_IT\000"
 8884      49524441 
 8884      5F526563 
 8884      65697665 
 8884      5F495400 
 8885              	.LASF38:
 8886 0a35 48414C5F 		.ascii	"HAL_UNLOCKED\000"
ARM GAS  /tmp/cc2ibVgV.s 			page 223


 8886      554E4C4F 
 8886      434B4544 
 8886      00
 8887              	.LASF117:
 8888 0a42 53746174 		.ascii	"Status\000"
 8888      757300
 8889              	.LASF126:
 8890 0a49 48414C5F 		.ascii	"HAL_IRDA_GetError\000"
 8890      49524441 
 8890      5F476574 
 8890      4572726F 
 8890      7200
 8891              	.LASF91:
 8892 0a5b 52785374 		.ascii	"RxState\000"
 8892      61746500 
 8893              	.LASF141:
 8894 0a63 48414C5F 		.ascii	"HAL_IRDA_AbortReceive_IT\000"
 8894      49524441 
 8894      5F41626F 
 8894      72745265 
 8894      63656976 
 8895              	.LASF160:
 8896 0a7c 48414C5F 		.ascii	"HAL_IRDA_Transmit\000"
 8896      49524441 
 8896      5F547261 
 8896      6E736D69 
 8896      7400
 8897              	.LASF157:
 8898 0a8e 48414C5F 		.ascii	"HAL_IRDA_Transmit_IT\000"
 8898      49524441 
 8898      5F547261 
 8898      6E736D69 
 8898      745F4954 
 8899              	.LASF62:
 8900 0aa3 58666572 		.ascii	"XferAbortCallback\000"
 8900      41626F72 
 8900      7443616C 
 8900      6C626163 
 8900      6B00
 8901              	.LASF59:
 8902 0ab5 58666572 		.ascii	"XferCpltCallback\000"
 8902      43706C74 
 8902      43616C6C 
 8902      6261636B 
 8902      00
 8903              	.LASF100:
 8904 0ac6 68697264 		.ascii	"hirda\000"
 8904      6100
 8905              		.ident	"GCC: (15:6.3.1+svn253039-1build1) 6.3.1 20170620"
ARM GAS  /tmp/cc2ibVgV.s 			page 224


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_irda.c
     /tmp/cc2ibVgV.s:69     .text:0000000000000000 $t
     /tmp/cc2ibVgV.s:75     .text:0000000000000000 IRDA_EndRxTransfer
     /tmp/cc2ibVgV.s:106    .text:000000000000001a IRDA_WaitOnFlagUntilTimeout.constprop.3
     /tmp/cc2ibVgV.s:192    .text:000000000000006a HAL_IRDA_MspInit
     /tmp/cc2ibVgV.s:209    .text:000000000000006c HAL_IRDA_Init
     /tmp/cc2ibVgV.s:369    .text:000000000000014c $d
     /tmp/cc2ibVgV.s:373    .text:0000000000000150 $t
     /tmp/cc2ibVgV.s:380    .text:0000000000000150 HAL_IRDA_MspDeInit
     /tmp/cc2ibVgV.s:397    .text:0000000000000152 HAL_IRDA_DeInit
     /tmp/cc2ibVgV.s:454    .text:0000000000000182 HAL_IRDA_Transmit
     /tmp/cc2ibVgV.s:617    .text:000000000000023a HAL_IRDA_Receive
     /tmp/cc2ibVgV.s:788    .text:00000000000002f8 HAL_IRDA_Transmit_IT
     /tmp/cc2ibVgV.s:861    .text:0000000000000336 HAL_IRDA_Receive_IT
     /tmp/cc2ibVgV.s:940    .text:000000000000037c HAL_IRDA_Transmit_DMA
     /tmp/cc2ibVgV.s:1043   .text:00000000000003e4 $d
     /tmp/cc2ibVgV.s:1708   .text:000000000000066c IRDA_DMATransmitCplt
     /tmp/cc2ibVgV.s:1777   .text:000000000000069a IRDA_DMATransmitHalfCplt
     /tmp/cc2ibVgV.s:2064   .text:0000000000000766 IRDA_DMAError
     /tmp/cc2ibVgV.s:1049   .text:00000000000003f0 $t
     /tmp/cc2ibVgV.s:1056   .text:00000000000003f0 HAL_IRDA_Receive_DMA
     /tmp/cc2ibVgV.s:1186   .text:0000000000000474 $d
     /tmp/cc2ibVgV.s:1822   .text:00000000000006a6 IRDA_DMAReceiveCplt
     /tmp/cc2ibVgV.s:2019   .text:000000000000075a IRDA_DMAReceiveHalfCplt
     /tmp/cc2ibVgV.s:1192   .text:0000000000000480 $t
     /tmp/cc2ibVgV.s:1199   .text:0000000000000480 HAL_IRDA_DMAPause
     /tmp/cc2ibVgV.s:1279   .text:00000000000004da HAL_IRDA_DMAResume
     /tmp/cc2ibVgV.s:1368   .text:000000000000053c HAL_IRDA_DMAStop
     /tmp/cc2ibVgV.s:1468   .text:000000000000059a HAL_IRDA_Abort
     /tmp/cc2ibVgV.s:1562   .text:00000000000005fa HAL_IRDA_AbortTransmit
     /tmp/cc2ibVgV.s:1625   .text:000000000000062e HAL_IRDA_AbortReceive
     /tmp/cc2ibVgV.s:1692   .text:000000000000066a HAL_IRDA_TxCpltCallback
     /tmp/cc2ibVgV.s:1761   .text:0000000000000698 HAL_IRDA_TxHalfCpltCallback
     /tmp/cc2ibVgV.s:1806   .text:00000000000006a4 HAL_IRDA_RxCpltCallback
     /tmp/cc2ibVgV.s:1878   .text:00000000000006de IRDA_Receive_IT
     /tmp/cc2ibVgV.s:2003   .text:0000000000000758 HAL_IRDA_RxHalfCpltCallback
     /tmp/cc2ibVgV.s:2048   .text:0000000000000764 HAL_IRDA_ErrorCallback
     /tmp/cc2ibVgV.s:2152   .text:00000000000007b4 HAL_IRDA_IRQHandler
     /tmp/cc2ibVgV.s:2453   .text:00000000000008f8 $d
     /tmp/cc2ibVgV.s:2465   .text:00000000000008fc IRDA_DMAAbortOnError
     /tmp/cc2ibVgV.s:2459   .text:00000000000008fc $t
     /tmp/cc2ibVgV.s:2500   .text:000000000000090c HAL_IRDA_AbortCpltCallback
     /tmp/cc2ibVgV.s:2517   .text:000000000000090e HAL_IRDA_Abort_IT
     /tmp/cc2ibVgV.s:2658   .text:00000000000009ac $d
     /tmp/cc2ibVgV.s:2721   .text:00000000000009dc IRDA_DMATxAbortCallback
     /tmp/cc2ibVgV.s:2669   .text:00000000000009b4 IRDA_DMARxAbortCallback
     /tmp/cc2ibVgV.s:2663   .text:00000000000009b4 $t
     /tmp/cc2ibVgV.s:2774   .text:0000000000000a04 HAL_IRDA_AbortTransmitCpltCallback
     /tmp/cc2ibVgV.s:2791   .text:0000000000000a06 HAL_IRDA_AbortTransmit_IT
     /tmp/cc2ibVgV.s:2864   .text:0000000000000a50 $d
     /tmp/cc2ibVgV.s:2874   .text:0000000000000a54 IRDA_DMATxOnlyAbortCallback
     /tmp/cc2ibVgV.s:2868   .text:0000000000000a54 $t
     /tmp/cc2ibVgV.s:2910   .text:0000000000000a68 HAL_IRDA_AbortReceiveCpltCallback
     /tmp/cc2ibVgV.s:2929   .text:0000000000000a6a HAL_IRDA_AbortReceive_IT
     /tmp/cc2ibVgV.s:3006   .text:0000000000000abc $d
     /tmp/cc2ibVgV.s:3016   .text:0000000000000ac0 IRDA_DMARxOnlyAbortCallback
ARM GAS  /tmp/cc2ibVgV.s 			page 225


     /tmp/cc2ibVgV.s:3010   .text:0000000000000ac0 $t
     /tmp/cc2ibVgV.s:3052   .text:0000000000000ad4 HAL_IRDA_GetState
     /tmp/cc2ibVgV.s:3080   .text:0000000000000ae0 HAL_IRDA_GetError
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetPCLK1Freq
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_Abort_IT
