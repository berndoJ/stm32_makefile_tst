ARM GAS  /tmp/ccdPJtdr.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"stm32f1xx_hal_spi.c"
  12              	@ GNU C11 (15:6.3.1+svn253039-1build1) version 6.3.1 20170620 (arm-none-eabi)
  13              	@	compiled by GNU C version 7.2.0, GMP version 6.1.2, MPFR version 4.0.1-rc1, MPC version 1.1.0, is
  14              	@ warning: MPFR header version 4.0.1-rc1 differs from library version 4.0.1.
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I ./inc -I ./inc/Legacy -I ../cmsisstm32f1xx/inc
  17              	@ -I ../cmsiscore/inc -imultilib thumb/v7-m -D__USES_INITFINI__
  18              	@ -D STM32F103x6 -D RUN_FROM_FLASH=1 -D __c src/stm32f1xx_hal_spi.c
  19              	@ -mcpu=cortex-m3 -mthumb -auxbase-strip bin/stm32f1xx_hal_spi.o -g
  20              	@ -gdwarf-2 -Os -Wall -fomit-frame-pointer -fverbose-asm
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffunction-cse -fgcse
  32              	@ -fgcse-lm -fgnu-runtime -fgnu-unique -fguess-branch-probability
  33              	@ -fhoist-adjacent-loads -fident -fif-conversion -fif-conversion2
  34              	@ -findirect-inlining -finline -finline-atomics -finline-functions
  35              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  36              	@ -fipa-cp-alignment -fipa-icf -fipa-icf-functions -fipa-icf-variables
  37              	@ -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra
  38              	@ -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  39              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  40              	@ -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  41              	@ -fmath-errno -fmerge-constants -fmerge-debug-strings
  42              	@ -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  43              	@ -fpartial-inlining -fpeephole -fpeephole2 -fplt -fprefetch-loop-arrays
  44              	@ -freg-struct-return -freorder-blocks -freorder-functions
  45              	@ -frerun-cse-after-loop -fsched-critical-path-heuristic
  46              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  47              	@ -fsched-last-insn-heuristic -fsched-pressure -fsched-rank-heuristic
  48              	@ -fsched-spec -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  49              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  50              	@ -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types
  51              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstrict-aliasing
  52              	@ -fstrict-overflow -fstrict-volatile-bitfields -fsync-libcalls
  53              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  54              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  55              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  56              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  57              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
ARM GAS  /tmp/ccdPJtdr.s 			page 2


  58              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  59              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  60              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  61              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  62              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  63              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  64              	@ -munaligned-access -mvectorize-with-neon-quad
  65              	
  66              		.text
  67              	.Ltext0:
  68              		.cfi_sections	.debug_frame
  69              		.align	1
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu softvfp
  74              		.type	SPI_AbortRx_ISR, %function
  75              	SPI_AbortRx_ISR:
  76              	.LFB122:
  77              		.file 1 "src/stm32f1xx_hal_spi.c"
   1:src/stm32f1xx_hal_spi.c **** /**
   2:src/stm32f1xx_hal_spi.c ****   ******************************************************************************
   3:src/stm32f1xx_hal_spi.c ****   * @file    stm32f1xx_hal_spi.c
   4:src/stm32f1xx_hal_spi.c ****   * @author  MCD Application Team
   5:src/stm32f1xx_hal_spi.c ****   * @brief   SPI HAL module driver.
   6:src/stm32f1xx_hal_spi.c ****   *          This file provides firmware functions to manage the following
   7:src/stm32f1xx_hal_spi.c ****   *          functionalities of the Serial Peripheral Interface (SPI) peripheral:
   8:src/stm32f1xx_hal_spi.c ****   *           + Initialization and de-initialization functions
   9:src/stm32f1xx_hal_spi.c ****   *           + IO operation functions
  10:src/stm32f1xx_hal_spi.c ****   *           + Peripheral Control functions
  11:src/stm32f1xx_hal_spi.c ****   *           + Peripheral State functions
  12:src/stm32f1xx_hal_spi.c ****   *
  13:src/stm32f1xx_hal_spi.c ****   @verbatim
  14:src/stm32f1xx_hal_spi.c ****   ==============================================================================
  15:src/stm32f1xx_hal_spi.c ****                         ##### How to use this driver #####
  16:src/stm32f1xx_hal_spi.c ****   ==============================================================================
  17:src/stm32f1xx_hal_spi.c ****     [..]
  18:src/stm32f1xx_hal_spi.c ****       The SPI HAL driver can be used as follows:
  19:src/stm32f1xx_hal_spi.c **** 
  20:src/stm32f1xx_hal_spi.c ****       (#) Declare a SPI_HandleTypeDef handle structure, for example:
  21:src/stm32f1xx_hal_spi.c ****           SPI_HandleTypeDef  hspi;
  22:src/stm32f1xx_hal_spi.c **** 
  23:src/stm32f1xx_hal_spi.c ****       (#)Initialize the SPI low level resources by implementing the HAL_SPI_MspInit() API:
  24:src/stm32f1xx_hal_spi.c ****           (##) Enable the SPIx interface clock
  25:src/stm32f1xx_hal_spi.c ****           (##) SPI pins configuration
  26:src/stm32f1xx_hal_spi.c ****               (+++) Enable the clock for the SPI GPIOs
  27:src/stm32f1xx_hal_spi.c ****               (+++) Configure these SPI pins as alternate function push-pull
  28:src/stm32f1xx_hal_spi.c ****           (##) NVIC configuration if you need to use interrupt process
  29:src/stm32f1xx_hal_spi.c ****               (+++) Configure the SPIx interrupt priority
  30:src/stm32f1xx_hal_spi.c ****               (+++) Enable the NVIC SPI IRQ handle
  31:src/stm32f1xx_hal_spi.c ****           (##) DMA Configuration if you need to use DMA process
  32:src/stm32f1xx_hal_spi.c ****               (+++) Declare a DMA_HandleTypeDef handle structure for the transmit or receive Stream
  33:src/stm32f1xx_hal_spi.c ****               (+++) Enable the DMAx clock
  34:src/stm32f1xx_hal_spi.c ****               (+++) Configure the DMA handle parameters
  35:src/stm32f1xx_hal_spi.c ****               (+++) Configure the DMA Tx or Rx Stream/Channel
  36:src/stm32f1xx_hal_spi.c ****               (+++) Associate the initialized hdma_tx(or _rx)  handle to the hspi DMA Tx or Rx hand
  37:src/stm32f1xx_hal_spi.c ****               (+++) Configure the priority and enable the NVIC for the transfer complete interrupt 
ARM GAS  /tmp/ccdPJtdr.s 			page 3


  38:src/stm32f1xx_hal_spi.c **** 
  39:src/stm32f1xx_hal_spi.c ****       (#) Program the Mode, BidirectionalMode , Data size, Baudrate Prescaler, NSS
  40:src/stm32f1xx_hal_spi.c ****           management, Clock polarity and phase, FirstBit and CRC configuration in the hspi Init str
  41:src/stm32f1xx_hal_spi.c **** 
  42:src/stm32f1xx_hal_spi.c ****       (#) Initialize the SPI registers by calling the HAL_SPI_Init() API:
  43:src/stm32f1xx_hal_spi.c ****           (++) This API configures also the low level Hardware GPIO, CLOCK, CORTEX...etc)
  44:src/stm32f1xx_hal_spi.c ****               by calling the customized HAL_SPI_MspInit() API.
  45:src/stm32f1xx_hal_spi.c ****      [..]
  46:src/stm32f1xx_hal_spi.c ****        Circular mode restriction:
  47:src/stm32f1xx_hal_spi.c ****       (#) The DMA circular mode cannot be used when the SPI is configured in these modes:
  48:src/stm32f1xx_hal_spi.c ****           (##) Master 2Lines RxOnly
  49:src/stm32f1xx_hal_spi.c ****           (##) Master 1Line Rx
  50:src/stm32f1xx_hal_spi.c ****       (#) The CRC feature is not managed when the DMA circular mode is enabled
  51:src/stm32f1xx_hal_spi.c ****       (#) When the SPI DMA Pause/Stop features are used, we must use the following APIs
  52:src/stm32f1xx_hal_spi.c ****           the HAL_SPI_DMAPause()/ HAL_SPI_DMAStop() only under the SPI callbacks
  53:src/stm32f1xx_hal_spi.c ****      [..]
  54:src/stm32f1xx_hal_spi.c ****        Master Receive mode restriction:
  55:src/stm32f1xx_hal_spi.c ****       (#) In Master unidirectional receive-only mode (MSTR =1, BIDIMODE=0, RXONLY=1) or
  56:src/stm32f1xx_hal_spi.c ****           bidirectional receive mode (MSTR=1, BIDIMODE=1, BIDIOE=0), to ensure that the SPI
  57:src/stm32f1xx_hal_spi.c ****           does not initiate a new transfer the following procedure has to be respected:
  58:src/stm32f1xx_hal_spi.c ****           (##) HAL_SPI_DeInit()
  59:src/stm32f1xx_hal_spi.c ****           (##) HAL_SPI_Init()
  60:src/stm32f1xx_hal_spi.c ****      [..]
  61:src/stm32f1xx_hal_spi.c ****        Callback registration:
  62:src/stm32f1xx_hal_spi.c **** 
  63:src/stm32f1xx_hal_spi.c ****       (#) The compilation flag USE_HAL_SPI_REGISTER_CALLBACKS when set to 1U
  64:src/stm32f1xx_hal_spi.c ****           allows the user to configure dynamically the driver callbacks.
  65:src/stm32f1xx_hal_spi.c ****           Use Functions HAL_SPI_RegisterCallback() to register an interrupt callback.
  66:src/stm32f1xx_hal_spi.c **** 
  67:src/stm32f1xx_hal_spi.c ****           Function HAL_SPI_RegisterCallback() allows to register following callbacks:
  68:src/stm32f1xx_hal_spi.c ****             (++) TxCpltCallback        : SPI Tx Completed callback
  69:src/stm32f1xx_hal_spi.c ****             (++) RxCpltCallback        : SPI Rx Completed callback
  70:src/stm32f1xx_hal_spi.c ****             (++) TxRxCpltCallback      : SPI TxRx Completed callback
  71:src/stm32f1xx_hal_spi.c ****             (++) TxHalfCpltCallback    : SPI Tx Half Completed callback
  72:src/stm32f1xx_hal_spi.c ****             (++) RxHalfCpltCallback    : SPI Rx Half Completed callback
  73:src/stm32f1xx_hal_spi.c ****             (++) TxRxHalfCpltCallback  : SPI TxRx Half Completed callback
  74:src/stm32f1xx_hal_spi.c ****             (++) ErrorCallback         : SPI Error callback
  75:src/stm32f1xx_hal_spi.c ****             (++) AbortCpltCallback     : SPI Abort callback
  76:src/stm32f1xx_hal_spi.c ****             (++) MspInitCallback       : SPI Msp Init callback
  77:src/stm32f1xx_hal_spi.c ****             (++) MspDeInitCallback     : SPI Msp DeInit callback
  78:src/stm32f1xx_hal_spi.c ****           This function takes as parameters the HAL peripheral handle, the Callback ID
  79:src/stm32f1xx_hal_spi.c ****           and a pointer to the user callback function.
  80:src/stm32f1xx_hal_spi.c **** 
  81:src/stm32f1xx_hal_spi.c **** 
  82:src/stm32f1xx_hal_spi.c ****       (#) Use function HAL_SPI_UnRegisterCallback to reset a callback to the default
  83:src/stm32f1xx_hal_spi.c ****           weak function.
  84:src/stm32f1xx_hal_spi.c ****           HAL_SPI_UnRegisterCallback takes as parameters the HAL peripheral handle,
  85:src/stm32f1xx_hal_spi.c ****           and the Callback ID.
  86:src/stm32f1xx_hal_spi.c ****           This function allows to reset following callbacks:
  87:src/stm32f1xx_hal_spi.c ****             (++) TxCpltCallback        : SPI Tx Completed callback
  88:src/stm32f1xx_hal_spi.c ****             (++) RxCpltCallback        : SPI Rx Completed callback
  89:src/stm32f1xx_hal_spi.c ****             (++) TxRxCpltCallback      : SPI TxRx Completed callback
  90:src/stm32f1xx_hal_spi.c ****             (++) TxHalfCpltCallback    : SPI Tx Half Completed callback
  91:src/stm32f1xx_hal_spi.c ****             (++) RxHalfCpltCallback    : SPI Rx Half Completed callback
  92:src/stm32f1xx_hal_spi.c ****             (++) TxRxHalfCpltCallback  : SPI TxRx Half Completed callback
  93:src/stm32f1xx_hal_spi.c ****             (++) ErrorCallback         : SPI Error callback
  94:src/stm32f1xx_hal_spi.c ****             (++) AbortCpltCallback     : SPI Abort callback
ARM GAS  /tmp/ccdPJtdr.s 			page 4


  95:src/stm32f1xx_hal_spi.c ****             (++) MspInitCallback       : SPI Msp Init callback
  96:src/stm32f1xx_hal_spi.c ****             (++) MspDeInitCallback     : SPI Msp DeInit callback
  97:src/stm32f1xx_hal_spi.c **** 
  98:src/stm32f1xx_hal_spi.c ****        [..]
  99:src/stm32f1xx_hal_spi.c ****        By default, after the HAL_SPI_Init() and when the state is HAL_SPI_STATE_RESET
 100:src/stm32f1xx_hal_spi.c ****        all callbacks are set to the corresponding weak functions:
 101:src/stm32f1xx_hal_spi.c ****        examples HAL_SPI_MasterTxCpltCallback(), HAL_SPI_MasterRxCpltCallback().
 102:src/stm32f1xx_hal_spi.c ****        Exception done for MspInit and MspDeInit functions that are
 103:src/stm32f1xx_hal_spi.c ****        reset to the legacy weak functions in the HAL_SPI_Init()/ HAL_SPI_DeInit() only when
 104:src/stm32f1xx_hal_spi.c ****        these callbacks are null (not registered beforehand).
 105:src/stm32f1xx_hal_spi.c ****        If MspInit or MspDeInit are not null, the HAL_SPI_Init()/ HAL_SPI_DeInit()
 106:src/stm32f1xx_hal_spi.c ****        keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state
 107:src/stm32f1xx_hal_spi.c **** 
 108:src/stm32f1xx_hal_spi.c ****        [..]
 109:src/stm32f1xx_hal_spi.c ****        Callbacks can be registered/unregistered in HAL_SPI_STATE_READY state only.
 110:src/stm32f1xx_hal_spi.c ****        Exception done MspInit/MspDeInit functions that can be registered/unregistered
 111:src/stm32f1xx_hal_spi.c ****        in HAL_SPI_STATE_READY or HAL_SPI_STATE_RESET state,
 112:src/stm32f1xx_hal_spi.c ****        thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 113:src/stm32f1xx_hal_spi.c ****        Then, the user first registers the MspInit/MspDeInit user callbacks
 114:src/stm32f1xx_hal_spi.c ****        using HAL_SPI_RegisterCallback() before calling HAL_SPI_DeInit()
 115:src/stm32f1xx_hal_spi.c ****        or HAL_SPI_Init() function.
 116:src/stm32f1xx_hal_spi.c **** 
 117:src/stm32f1xx_hal_spi.c ****        [..]
 118:src/stm32f1xx_hal_spi.c ****        When the compilation define USE_HAL_PPP_REGISTER_CALLBACKS is set to 0 or
 119:src/stm32f1xx_hal_spi.c ****        not defined, the callback registering feature is not available
 120:src/stm32f1xx_hal_spi.c ****        and weak (surcharged) callbacks are used.
 121:src/stm32f1xx_hal_spi.c **** 
 122:src/stm32f1xx_hal_spi.c ****      [..]
 123:src/stm32f1xx_hal_spi.c ****        Using the HAL it is not possible to reach all supported SPI frequency with the different SPI
 124:src/stm32f1xx_hal_spi.c ****        the following table resume the max SPI frequency reached with data size 8bits/16bits,
 125:src/stm32f1xx_hal_spi.c ****          according to frequency of the APBx Peripheral Clock (fPCLK) used by the SPI instance.
 126:src/stm32f1xx_hal_spi.c **** 
 127:src/stm32f1xx_hal_spi.c ****   @endverbatim
 128:src/stm32f1xx_hal_spi.c **** 
 129:src/stm32f1xx_hal_spi.c ****   Additional table :
 130:src/stm32f1xx_hal_spi.c **** 
 131:src/stm32f1xx_hal_spi.c ****        DataSize = SPI_DATASIZE_8BIT:
 132:src/stm32f1xx_hal_spi.c ****        +-------------------------------------------------------------------------------------------
 133:src/stm32f1xx_hal_spi.c ****        |         |                | 2Lines Fullduplex   |     2Lines RxOnly    |         1Line     
 134:src/stm32f1xx_hal_spi.c ****        | Process | Tranfert mode  |---------------------|----------------------|-------------------
 135:src/stm32f1xx_hal_spi.c ****        |         |                |  Master  |  Slave   |  Master   |  Slave   |  Master   |  Slave
 136:src/stm32f1xx_hal_spi.c ****        |===========================================================================================
 137:src/stm32f1xx_hal_spi.c ****        |    T    |     Polling    | Fpclk/2  | Fpclk/2  |    NA     |    NA    |    NA     |   NA  
 138:src/stm32f1xx_hal_spi.c ****        |    X    |----------------|----------|----------|-----------|----------|-----------|-------
 139:src/stm32f1xx_hal_spi.c ****        |    /    |     Interrupt  | Fpclk/4  | Fpclk/8  |    NA     |    NA    |    NA     |   NA  
 140:src/stm32f1xx_hal_spi.c ****        |    R    |----------------|----------|----------|-----------|----------|-----------|-------
 141:src/stm32f1xx_hal_spi.c ****        |    X    |       DMA      | Fpclk/2  | Fpclk/2  |    NA     |    NA    |    NA     |   NA  
 142:src/stm32f1xx_hal_spi.c ****        |=========|================|==========|==========|===========|==========|===========|=======
 143:src/stm32f1xx_hal_spi.c ****        |         |     Polling    | Fpclk/2  | Fpclk/2  | Fpclk/64  | Fpclk/2  | Fpclk/64  | Fpclk/
 144:src/stm32f1xx_hal_spi.c ****        |         |----------------|----------|----------|-----------|----------|-----------|-------
 145:src/stm32f1xx_hal_spi.c ****        |    R    |     Interrupt  | Fpclk/8  | Fpclk/8  | Fpclk/64  | Fpclk/2  | Fpclk/64  | Fpclk/
 146:src/stm32f1xx_hal_spi.c ****        |    X    |----------------|----------|----------|-----------|----------|-----------|-------
 147:src/stm32f1xx_hal_spi.c ****        |         |       DMA      | Fpclk/2  | Fpclk/2  | Fpclk/64  | Fpclk/2  | Fpclk/128 | Fpclk/
 148:src/stm32f1xx_hal_spi.c ****        |=========|================|==========|==========|===========|==========|===========|=======
 149:src/stm32f1xx_hal_spi.c ****        |         |     Polling    | Fpclk/2  | Fpclk/4  |     NA    |    NA    | Fpclk/2   | Fpclk/
 150:src/stm32f1xx_hal_spi.c ****        |         |----------------|----------|----------|-----------|----------|-----------|-------
 151:src/stm32f1xx_hal_spi.c ****        |    T    |     Interrupt  | Fpclk/2  | Fpclk/4  |     NA    |    NA    | Fpclk/2   | Fpclk/
ARM GAS  /tmp/ccdPJtdr.s 			page 5


 152:src/stm32f1xx_hal_spi.c ****        |    X    |----------------|----------|----------|-----------|----------|-----------|-------
 153:src/stm32f1xx_hal_spi.c ****        |         |       DMA      | Fpclk/2  | Fpclk/2  |     NA    |    NA    | Fpclk/2   | Fpclk/
 154:src/stm32f1xx_hal_spi.c ****        +-------------------------------------------------------------------------------------------
 155:src/stm32f1xx_hal_spi.c **** 
 156:src/stm32f1xx_hal_spi.c ****        DataSize = SPI_DATASIZE_16BIT:
 157:src/stm32f1xx_hal_spi.c ****        +-------------------------------------------------------------------------------------------
 158:src/stm32f1xx_hal_spi.c ****        |         |                | 2Lines Fullduplex   |     2Lines RxOnly    |         1Line     
 159:src/stm32f1xx_hal_spi.c ****        | Process | Tranfert mode  |---------------------|----------------------|-------------------
 160:src/stm32f1xx_hal_spi.c ****        |         |                |  Master  |  Slave   |  Master   |  Slave   |  Master   |  Slave
 161:src/stm32f1xx_hal_spi.c ****        |===========================================================================================
 162:src/stm32f1xx_hal_spi.c ****        |    T    |     Polling    | Fpclk/2  | Fpclk/2  |    NA     |    NA    |    NA     |   NA  
 163:src/stm32f1xx_hal_spi.c ****        |    X    |----------------|----------|----------|-----------|----------|-----------|-------
 164:src/stm32f1xx_hal_spi.c ****        |    /    |     Interrupt  | Fpclk/4  | Fpclk/4  |    NA     |    NA    |    NA     |   NA  
 165:src/stm32f1xx_hal_spi.c ****        |    R    |----------------|----------|----------|-----------|----------|-----------|-------
 166:src/stm32f1xx_hal_spi.c ****        |    X    |       DMA      | Fpclk/2  | Fpclk/2  |    NA     |    NA    |    NA     |   NA  
 167:src/stm32f1xx_hal_spi.c ****        |=========|================|==========|==========|===========|==========|===========|=======
 168:src/stm32f1xx_hal_spi.c ****        |         |     Polling    | Fpclk/2  | Fpclk/2  | Fpclk/64  | Fpclk/2  | Fpclk/32  | Fpclk/
 169:src/stm32f1xx_hal_spi.c ****        |         |----------------|----------|----------|-----------|----------|-----------|-------
 170:src/stm32f1xx_hal_spi.c ****        |    R    |     Interrupt  | Fpclk/4  | Fpclk/4  | Fpclk/64  | Fpclk/2  | Fpclk/64  | Fpclk/
 171:src/stm32f1xx_hal_spi.c ****        |    X    |----------------|----------|----------|-----------|----------|-----------|-------
 172:src/stm32f1xx_hal_spi.c ****        |         |       DMA      | Fpclk/2  | Fpclk/2  | Fpclk/64  | Fpclk/2  | Fpclk/128 | Fpclk/
 173:src/stm32f1xx_hal_spi.c ****        |=========|================|==========|==========|===========|==========|===========|=======
 174:src/stm32f1xx_hal_spi.c ****        |         |     Polling    | Fpclk/2  | Fpclk/2  |     NA    |    NA    | Fpclk/2   | Fpclk/
 175:src/stm32f1xx_hal_spi.c ****        |         |----------------|----------|----------|-----------|----------|-----------|-------
 176:src/stm32f1xx_hal_spi.c ****        |    T    |     Interrupt  | Fpclk/2  | Fpclk/2  |     NA    |    NA    | Fpclk/2   | Fpclk/
 177:src/stm32f1xx_hal_spi.c ****        |    X    |----------------|----------|----------|-----------|----------|-----------|-------
 178:src/stm32f1xx_hal_spi.c ****        |         |       DMA      | Fpclk/2  | Fpclk/2  |     NA    |    NA    | Fpclk/2   | Fpclk/
 179:src/stm32f1xx_hal_spi.c ****        +-------------------------------------------------------------------------------------------
 180:src/stm32f1xx_hal_spi.c ****        @note The max SPI frequency depend on SPI data size (8bits, 16bits),
 181:src/stm32f1xx_hal_spi.c ****              SPI mode(2 Lines fullduplex, 2 lines RxOnly, 1 line TX/RX) and Process mode (Polling, 
 182:src/stm32f1xx_hal_spi.c ****        @note
 183:src/stm32f1xx_hal_spi.c ****             (#) TX/RX processes are HAL_SPI_TransmitReceive(), HAL_SPI_TransmitReceive_IT() and HAL
 184:src/stm32f1xx_hal_spi.c ****             (#) RX processes are HAL_SPI_Receive(), HAL_SPI_Receive_IT() and HAL_SPI_Receive_DMA()
 185:src/stm32f1xx_hal_spi.c ****             (#) TX processes are HAL_SPI_Transmit(), HAL_SPI_Transmit_IT() and HAL_SPI_Transmit_DMA
 186:src/stm32f1xx_hal_spi.c **** 
 187:src/stm32f1xx_hal_spi.c ****   ******************************************************************************
 188:src/stm32f1xx_hal_spi.c ****   * @attention
 189:src/stm32f1xx_hal_spi.c ****   *
 190:src/stm32f1xx_hal_spi.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 191:src/stm32f1xx_hal_spi.c ****   * All rights reserved.</center></h2>
 192:src/stm32f1xx_hal_spi.c ****   *
 193:src/stm32f1xx_hal_spi.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 194:src/stm32f1xx_hal_spi.c ****   * the "License"; You may not use this file except in compliance with the
 195:src/stm32f1xx_hal_spi.c ****   * License. You may obtain a copy of the License at:
 196:src/stm32f1xx_hal_spi.c ****   *                        opensource.org/licenses/BSD-3-Clause
 197:src/stm32f1xx_hal_spi.c ****   *
 198:src/stm32f1xx_hal_spi.c ****   ******************************************************************************
 199:src/stm32f1xx_hal_spi.c ****   */
 200:src/stm32f1xx_hal_spi.c **** 
 201:src/stm32f1xx_hal_spi.c **** /* Includes ------------------------------------------------------------------*/
 202:src/stm32f1xx_hal_spi.c **** #include "stm32f1xx_hal.h"
 203:src/stm32f1xx_hal_spi.c **** 
 204:src/stm32f1xx_hal_spi.c **** /** @addtogroup STM32F1xx_HAL_Driver
 205:src/stm32f1xx_hal_spi.c ****   * @{
 206:src/stm32f1xx_hal_spi.c ****   */
 207:src/stm32f1xx_hal_spi.c **** 
 208:src/stm32f1xx_hal_spi.c **** /** @defgroup SPI SPI
ARM GAS  /tmp/ccdPJtdr.s 			page 6


 209:src/stm32f1xx_hal_spi.c ****   * @brief SPI HAL module driver
 210:src/stm32f1xx_hal_spi.c ****   * @{
 211:src/stm32f1xx_hal_spi.c ****   */
 212:src/stm32f1xx_hal_spi.c **** #ifdef HAL_SPI_MODULE_ENABLED
 213:src/stm32f1xx_hal_spi.c **** 
 214:src/stm32f1xx_hal_spi.c **** /* Private typedef -----------------------------------------------------------*/
 215:src/stm32f1xx_hal_spi.c **** /* Private defines -----------------------------------------------------------*/
 216:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U) && defined(SPI_CRC_ERROR_WORKAROUND_FEATURE)
 217:src/stm32f1xx_hal_spi.c **** /* CRC WORKAOUND FEATURE: Variable used to determine if device is impacted by implementation
 218:src/stm32f1xx_hal_spi.c ****  * of workaround related to wrong CRC errors detection on SPI2. Conditions in which this workaround
 219:src/stm32f1xx_hal_spi.c ****  * has to be applied, are:
 220:src/stm32f1xx_hal_spi.c ****  *  - STM32F101CDE/STM32F103CDE
 221:src/stm32f1xx_hal_spi.c ****  *  - Revision ID : Z
 222:src/stm32f1xx_hal_spi.c ****  *  - SPI2
 223:src/stm32f1xx_hal_spi.c ****  *  - In receive only mode, with CRC calculation enabled, at the end of the CRC reception,
 224:src/stm32f1xx_hal_spi.c ****  *     the software needs to check the CRCERR flag. If it is found set, read back the SPI_RXCRC:
 225:src/stm32f1xx_hal_spi.c ****  *       + If the value is 0, the complete data transfer is successful.
 226:src/stm32f1xx_hal_spi.c ****  *       + Otherwise, one or more errors have been detected during the data transfer by CPU or DMA.
 227:src/stm32f1xx_hal_spi.c ****  *    If CRCERR is found reset, the complete data transfer is considered successful.
 228:src/stm32f1xx_hal_spi.c ****  *
 229:src/stm32f1xx_hal_spi.c ****  * Check RevisionID value for identifying if Device is Rev Z (0x0001) in order to enable workaround
 230:src/stm32f1xx_hal_spi.c ****  * CRC errors wrongly detected
 231:src/stm32f1xx_hal_spi.c ****  */
 232:src/stm32f1xx_hal_spi.c **** /* Pb is that ES_STM32F10xxCDE also identify an issue in Debug registers access while not in Debug 
 233:src/stm32f1xx_hal_spi.c ****  * Revision ID information is only available in Debug mode, so Workaround could not be implemented
 234:src/stm32f1xx_hal_spi.c ****  * to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
 235:src/stm32f1xx_hal_spi.c ****  * So, in case of Revison Z F101 or F103 devices, below define should be assigned to 1.
 236:src/stm32f1xx_hal_spi.c ****  */
 237:src/stm32f1xx_hal_spi.c **** #define  USE_SPI_CRC_ERROR_WORKAROUND   0U
 238:src/stm32f1xx_hal_spi.c **** #endif
 239:src/stm32f1xx_hal_spi.c **** /** @defgroup SPI_Private_Constants SPI Private Constants
 240:src/stm32f1xx_hal_spi.c ****   * @{
 241:src/stm32f1xx_hal_spi.c ****   */
 242:src/stm32f1xx_hal_spi.c **** #define SPI_DEFAULT_TIMEOUT 100U
 243:src/stm32f1xx_hal_spi.c **** /**
 244:src/stm32f1xx_hal_spi.c ****   * @}
 245:src/stm32f1xx_hal_spi.c ****   */
 246:src/stm32f1xx_hal_spi.c **** 
 247:src/stm32f1xx_hal_spi.c **** /* Private macros ------------------------------------------------------------*/
 248:src/stm32f1xx_hal_spi.c **** /* Private variables ---------------------------------------------------------*/
 249:src/stm32f1xx_hal_spi.c **** /* Private function prototypes -----------------------------------------------*/
 250:src/stm32f1xx_hal_spi.c **** /** @defgroup SPI_Private_Functions SPI Private Functions
 251:src/stm32f1xx_hal_spi.c ****   * @{
 252:src/stm32f1xx_hal_spi.c ****   */
 253:src/stm32f1xx_hal_spi.c **** static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 254:src/stm32f1xx_hal_spi.c **** static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 255:src/stm32f1xx_hal_spi.c **** static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma);
 256:src/stm32f1xx_hal_spi.c **** static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma);
 257:src/stm32f1xx_hal_spi.c **** static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma);
 258:src/stm32f1xx_hal_spi.c **** static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma);
 259:src/stm32f1xx_hal_spi.c **** static void SPI_DMAError(DMA_HandleTypeDef *hdma);
 260:src/stm32f1xx_hal_spi.c **** static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 261:src/stm32f1xx_hal_spi.c **** static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 262:src/stm32f1xx_hal_spi.c **** static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 263:src/stm32f1xx_hal_spi.c **** static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, Flag
 264:src/stm32f1xx_hal_spi.c ****                                                        uint32_t Timeout, uint32_t Tickstart);
 265:src/stm32f1xx_hal_spi.c **** static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi);
ARM GAS  /tmp/ccdPJtdr.s 			page 7


 266:src/stm32f1xx_hal_spi.c **** static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi);
 267:src/stm32f1xx_hal_spi.c **** static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi);
 268:src/stm32f1xx_hal_spi.c **** static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi);
 269:src/stm32f1xx_hal_spi.c **** static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi);
 270:src/stm32f1xx_hal_spi.c **** static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi);
 271:src/stm32f1xx_hal_spi.c **** static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi);
 272:src/stm32f1xx_hal_spi.c **** static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi);
 273:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 274:src/stm32f1xx_hal_spi.c **** static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi);
 275:src/stm32f1xx_hal_spi.c **** static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi);
 276:src/stm32f1xx_hal_spi.c **** static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi);
 277:src/stm32f1xx_hal_spi.c **** static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi);
 278:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 279:src/stm32f1xx_hal_spi.c **** static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi);
 280:src/stm32f1xx_hal_spi.c **** static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi);
 281:src/stm32f1xx_hal_spi.c **** static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi);
 282:src/stm32f1xx_hal_spi.c **** static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi);
 283:src/stm32f1xx_hal_spi.c **** static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi);
 284:src/stm32f1xx_hal_spi.c **** static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t T
 285:src/stm32f1xx_hal_spi.c **** static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t
 286:src/stm32f1xx_hal_spi.c **** /**
 287:src/stm32f1xx_hal_spi.c ****   * @}
 288:src/stm32f1xx_hal_spi.c ****   */
 289:src/stm32f1xx_hal_spi.c **** 
 290:src/stm32f1xx_hal_spi.c **** /* Exported functions --------------------------------------------------------*/
 291:src/stm32f1xx_hal_spi.c **** /** @defgroup SPI_Exported_Functions SPI Exported Functions
 292:src/stm32f1xx_hal_spi.c ****   * @{
 293:src/stm32f1xx_hal_spi.c ****   */
 294:src/stm32f1xx_hal_spi.c **** 
 295:src/stm32f1xx_hal_spi.c **** /** @defgroup SPI_Exported_Functions_Group1 Initialization and de-initialization functions
 296:src/stm32f1xx_hal_spi.c ****   *  @brief    Initialization and Configuration functions
 297:src/stm32f1xx_hal_spi.c ****   *
 298:src/stm32f1xx_hal_spi.c **** @verbatim
 299:src/stm32f1xx_hal_spi.c ****  ===============================================================================
 300:src/stm32f1xx_hal_spi.c ****               ##### Initialization and de-initialization functions #####
 301:src/stm32f1xx_hal_spi.c ****  ===============================================================================
 302:src/stm32f1xx_hal_spi.c ****     [..]  This subsection provides a set of functions allowing to initialize and
 303:src/stm32f1xx_hal_spi.c ****           de-initialize the SPIx peripheral:
 304:src/stm32f1xx_hal_spi.c **** 
 305:src/stm32f1xx_hal_spi.c ****       (+) User must implement HAL_SPI_MspInit() function in which he configures
 306:src/stm32f1xx_hal_spi.c ****           all related peripherals resources (CLOCK, GPIO, DMA, IT and NVIC ).
 307:src/stm32f1xx_hal_spi.c **** 
 308:src/stm32f1xx_hal_spi.c ****       (+) Call the function HAL_SPI_Init() to configure the selected device with
 309:src/stm32f1xx_hal_spi.c ****           the selected configuration:
 310:src/stm32f1xx_hal_spi.c ****         (++) Mode
 311:src/stm32f1xx_hal_spi.c ****         (++) Direction
 312:src/stm32f1xx_hal_spi.c ****         (++) Data Size
 313:src/stm32f1xx_hal_spi.c ****         (++) Clock Polarity and Phase
 314:src/stm32f1xx_hal_spi.c ****         (++) NSS Management
 315:src/stm32f1xx_hal_spi.c ****         (++) BaudRate Prescaler
 316:src/stm32f1xx_hal_spi.c ****         (++) FirstBit
 317:src/stm32f1xx_hal_spi.c ****         (++) TIMode
 318:src/stm32f1xx_hal_spi.c ****         (++) CRC Calculation
 319:src/stm32f1xx_hal_spi.c ****         (++) CRC Polynomial if CRC enabled
 320:src/stm32f1xx_hal_spi.c **** 
 321:src/stm32f1xx_hal_spi.c ****       (+) Call the function HAL_SPI_DeInit() to restore the default configuration
 322:src/stm32f1xx_hal_spi.c ****           of the selected SPIx peripheral.
ARM GAS  /tmp/ccdPJtdr.s 			page 8


 323:src/stm32f1xx_hal_spi.c **** 
 324:src/stm32f1xx_hal_spi.c **** @endverbatim
 325:src/stm32f1xx_hal_spi.c ****   * @{
 326:src/stm32f1xx_hal_spi.c ****   */
 327:src/stm32f1xx_hal_spi.c **** 
 328:src/stm32f1xx_hal_spi.c **** /**
 329:src/stm32f1xx_hal_spi.c ****   * @brief  Initialize the SPI according to the specified parameters
 330:src/stm32f1xx_hal_spi.c ****   *         in the SPI_InitTypeDef and initialize the associated handle.
 331:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 332:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
 333:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
 334:src/stm32f1xx_hal_spi.c ****   */
 335:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
 336:src/stm32f1xx_hal_spi.c **** {
 337:src/stm32f1xx_hal_spi.c ****   /* Check the SPI handle allocation */
 338:src/stm32f1xx_hal_spi.c ****   if (hspi == NULL)
 339:src/stm32f1xx_hal_spi.c ****   {
 340:src/stm32f1xx_hal_spi.c ****     return HAL_ERROR;
 341:src/stm32f1xx_hal_spi.c ****   }
 342:src/stm32f1xx_hal_spi.c **** 
 343:src/stm32f1xx_hal_spi.c ****   /* Check the parameters */
 344:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 345:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_MODE(hspi->Init.Mode));
 346:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 347:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 348:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_NSS(hspi->Init.NSS));
 349:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 350:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 351:src/stm32f1xx_hal_spi.c ****   /* TI mode is not supported on this device.
 352:src/stm32f1xx_hal_spi.c ****      TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
 353:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 354:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 355:src/stm32f1xx_hal_spi.c ****   {
 356:src/stm32f1xx_hal_spi.c ****     assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 357:src/stm32f1xx_hal_spi.c ****     assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 358:src/stm32f1xx_hal_spi.c ****   }
 359:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 360:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
 361:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 362:src/stm32f1xx_hal_spi.c ****   {
 363:src/stm32f1xx_hal_spi.c ****     assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 364:src/stm32f1xx_hal_spi.c ****   }
 365:src/stm32f1xx_hal_spi.c **** #else
 366:src/stm32f1xx_hal_spi.c ****   hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 367:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 368:src/stm32f1xx_hal_spi.c **** 
 369:src/stm32f1xx_hal_spi.c ****   if (hspi->State == HAL_SPI_STATE_RESET)
 370:src/stm32f1xx_hal_spi.c ****   {
 371:src/stm32f1xx_hal_spi.c ****     /* Allocate lock resource and initialize it */
 372:src/stm32f1xx_hal_spi.c ****     hspi->Lock = HAL_UNLOCKED;
 373:src/stm32f1xx_hal_spi.c **** 
 374:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
 375:src/stm32f1xx_hal_spi.c ****     /* Init the SPI Callback settings */
 376:src/stm32f1xx_hal_spi.c ****     hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       
 377:src/stm32f1xx_hal_spi.c ****     hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       
 378:src/stm32f1xx_hal_spi.c ****     hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     
 379:src/stm32f1xx_hal_spi.c ****     hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   
ARM GAS  /tmp/ccdPJtdr.s 			page 9


 380:src/stm32f1xx_hal_spi.c ****     hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   
 381:src/stm32f1xx_hal_spi.c ****     hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback 
 382:src/stm32f1xx_hal_spi.c ****     hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        
 383:src/stm32f1xx_hal_spi.c ****     hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    
 384:src/stm32f1xx_hal_spi.c **** 
 385:src/stm32f1xx_hal_spi.c ****     if (hspi->MspInitCallback == NULL)
 386:src/stm32f1xx_hal_spi.c ****     {
 387:src/stm32f1xx_hal_spi.c ****       hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 388:src/stm32f1xx_hal_spi.c ****     }
 389:src/stm32f1xx_hal_spi.c **** 
 390:src/stm32f1xx_hal_spi.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC... */
 391:src/stm32f1xx_hal_spi.c ****     hspi->MspInitCallback(hspi);
 392:src/stm32f1xx_hal_spi.c **** #else
 393:src/stm32f1xx_hal_spi.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC... */
 394:src/stm32f1xx_hal_spi.c ****     HAL_SPI_MspInit(hspi);
 395:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 396:src/stm32f1xx_hal_spi.c ****   }
 397:src/stm32f1xx_hal_spi.c **** 
 398:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_BUSY;
 399:src/stm32f1xx_hal_spi.c **** 
 400:src/stm32f1xx_hal_spi.c ****   /* Disable the selected SPI peripheral */
 401:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_DISABLE(hspi);
 402:src/stm32f1xx_hal_spi.c **** 
 403:src/stm32f1xx_hal_spi.c ****   /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
 404:src/stm32f1xx_hal_spi.c ****   /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
 405:src/stm32f1xx_hal_spi.c ****   Communication speed, First bit and CRC calculation state */
 406:src/stm32f1xx_hal_spi.c ****   WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 407:src/stm32f1xx_hal_spi.c ****                                   hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & 
 408:src/stm32f1xx_hal_spi.c ****                                   hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.
 409:src/stm32f1xx_hal_spi.c **** 
 410:src/stm32f1xx_hal_spi.c ****   /* Configure : NSS management */
 411:src/stm32f1xx_hal_spi.c ****   WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 412:src/stm32f1xx_hal_spi.c **** 
 413:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 414:src/stm32f1xx_hal_spi.c ****   /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
 415:src/stm32f1xx_hal_spi.c ****   /* Configure : CRC Polynomial */
 416:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 417:src/stm32f1xx_hal_spi.c ****   {
 418:src/stm32f1xx_hal_spi.c ****     WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 419:src/stm32f1xx_hal_spi.c ****   }
 420:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 421:src/stm32f1xx_hal_spi.c **** 
 422:src/stm32f1xx_hal_spi.c **** #if defined(SPI_I2SCFGR_I2SMOD)
 423:src/stm32f1xx_hal_spi.c ****   /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
 424:src/stm32f1xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 425:src/stm32f1xx_hal_spi.c **** #endif /* SPI_I2SCFGR_I2SMOD */
 426:src/stm32f1xx_hal_spi.c **** 
 427:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 428:src/stm32f1xx_hal_spi.c ****   hspi->State     = HAL_SPI_STATE_READY;
 429:src/stm32f1xx_hal_spi.c **** 
 430:src/stm32f1xx_hal_spi.c ****   return HAL_OK;
 431:src/stm32f1xx_hal_spi.c **** }
 432:src/stm32f1xx_hal_spi.c **** 
 433:src/stm32f1xx_hal_spi.c **** /**
 434:src/stm32f1xx_hal_spi.c ****   * @brief  De-Initialize the SPI peripheral.
 435:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 436:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
ARM GAS  /tmp/ccdPJtdr.s 			page 10


 437:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
 438:src/stm32f1xx_hal_spi.c ****   */
 439:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
 440:src/stm32f1xx_hal_spi.c **** {
 441:src/stm32f1xx_hal_spi.c ****   /* Check the SPI handle allocation */
 442:src/stm32f1xx_hal_spi.c ****   if (hspi == NULL)
 443:src/stm32f1xx_hal_spi.c ****   {
 444:src/stm32f1xx_hal_spi.c ****     return HAL_ERROR;
 445:src/stm32f1xx_hal_spi.c ****   }
 446:src/stm32f1xx_hal_spi.c **** 
 447:src/stm32f1xx_hal_spi.c ****   /* Check SPI Instance parameter */
 448:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 449:src/stm32f1xx_hal_spi.c **** 
 450:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_BUSY;
 451:src/stm32f1xx_hal_spi.c **** 
 452:src/stm32f1xx_hal_spi.c ****   /* Disable the SPI Peripheral Clock */
 453:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_DISABLE(hspi);
 454:src/stm32f1xx_hal_spi.c **** 
 455:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
 456:src/stm32f1xx_hal_spi.c ****   if (hspi->MspDeInitCallback == NULL)
 457:src/stm32f1xx_hal_spi.c ****   {
 458:src/stm32f1xx_hal_spi.c ****     hspi->MspDeInitCallback = HAL_SPI_MspDeInit; /* Legacy weak MspDeInit  */
 459:src/stm32f1xx_hal_spi.c ****   }
 460:src/stm32f1xx_hal_spi.c **** 
 461:src/stm32f1xx_hal_spi.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
 462:src/stm32f1xx_hal_spi.c ****   hspi->MspDeInitCallback(hspi);
 463:src/stm32f1xx_hal_spi.c **** #else
 464:src/stm32f1xx_hal_spi.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
 465:src/stm32f1xx_hal_spi.c ****   HAL_SPI_MspDeInit(hspi);
 466:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 467:src/stm32f1xx_hal_spi.c **** 
 468:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 469:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_RESET;
 470:src/stm32f1xx_hal_spi.c **** 
 471:src/stm32f1xx_hal_spi.c ****   /* Release Lock */
 472:src/stm32f1xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
 473:src/stm32f1xx_hal_spi.c **** 
 474:src/stm32f1xx_hal_spi.c ****   return HAL_OK;
 475:src/stm32f1xx_hal_spi.c **** }
 476:src/stm32f1xx_hal_spi.c **** 
 477:src/stm32f1xx_hal_spi.c **** /**
 478:src/stm32f1xx_hal_spi.c ****   * @brief  Initialize the SPI MSP.
 479:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 480:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
 481:src/stm32f1xx_hal_spi.c ****   * @retval None
 482:src/stm32f1xx_hal_spi.c ****   */
 483:src/stm32f1xx_hal_spi.c **** __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
 484:src/stm32f1xx_hal_spi.c **** {
 485:src/stm32f1xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
 486:src/stm32f1xx_hal_spi.c ****   UNUSED(hspi);
 487:src/stm32f1xx_hal_spi.c **** 
 488:src/stm32f1xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 489:src/stm32f1xx_hal_spi.c ****             the HAL_SPI_MspInit should be implemented in the user file
 490:src/stm32f1xx_hal_spi.c ****    */
 491:src/stm32f1xx_hal_spi.c **** }
 492:src/stm32f1xx_hal_spi.c **** 
 493:src/stm32f1xx_hal_spi.c **** /**
ARM GAS  /tmp/ccdPJtdr.s 			page 11


 494:src/stm32f1xx_hal_spi.c ****   * @brief  De-Initialize the SPI MSP.
 495:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 496:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
 497:src/stm32f1xx_hal_spi.c ****   * @retval None
 498:src/stm32f1xx_hal_spi.c ****   */
 499:src/stm32f1xx_hal_spi.c **** __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
 500:src/stm32f1xx_hal_spi.c **** {
 501:src/stm32f1xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
 502:src/stm32f1xx_hal_spi.c ****   UNUSED(hspi);
 503:src/stm32f1xx_hal_spi.c **** 
 504:src/stm32f1xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 505:src/stm32f1xx_hal_spi.c ****             the HAL_SPI_MspDeInit should be implemented in the user file
 506:src/stm32f1xx_hal_spi.c ****    */
 507:src/stm32f1xx_hal_spi.c **** }
 508:src/stm32f1xx_hal_spi.c **** 
 509:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
 510:src/stm32f1xx_hal_spi.c **** /**
 511:src/stm32f1xx_hal_spi.c ****   * @brief  Register a User SPI Callback
 512:src/stm32f1xx_hal_spi.c ****   *         To be used instead of the weak predefined callback
 513:src/stm32f1xx_hal_spi.c ****   * @param  hspi Pointer to a SPI_HandleTypeDef structure that contains
 514:src/stm32f1xx_hal_spi.c ****   *                the configuration information for the specified SPI.
 515:src/stm32f1xx_hal_spi.c ****   * @param  CallbackID ID of the callback to be registered
 516:src/stm32f1xx_hal_spi.c ****   * @param  pCallback pointer to the Callback function
 517:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
 518:src/stm32f1xx_hal_spi.c ****   */
 519:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef Callb
 520:src/stm32f1xx_hal_spi.c ****                                            pSPI_CallbackTypeDef pCallback)
 521:src/stm32f1xx_hal_spi.c **** {
 522:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef status = HAL_OK;
 523:src/stm32f1xx_hal_spi.c **** 
 524:src/stm32f1xx_hal_spi.c ****   if (pCallback == NULL)
 525:src/stm32f1xx_hal_spi.c ****   {
 526:src/stm32f1xx_hal_spi.c ****     /* Update the error code */
 527:src/stm32f1xx_hal_spi.c ****     hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 528:src/stm32f1xx_hal_spi.c **** 
 529:src/stm32f1xx_hal_spi.c ****     return HAL_ERROR;
 530:src/stm32f1xx_hal_spi.c ****   }
 531:src/stm32f1xx_hal_spi.c ****   /* Process locked */
 532:src/stm32f1xx_hal_spi.c ****   __HAL_LOCK(hspi);
 533:src/stm32f1xx_hal_spi.c **** 
 534:src/stm32f1xx_hal_spi.c ****   if (HAL_SPI_STATE_READY == hspi->State)
 535:src/stm32f1xx_hal_spi.c ****   {
 536:src/stm32f1xx_hal_spi.c ****     switch (CallbackID)
 537:src/stm32f1xx_hal_spi.c ****     {
 538:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_TX_COMPLETE_CB_ID :
 539:src/stm32f1xx_hal_spi.c ****         hspi->TxCpltCallback = pCallback;
 540:src/stm32f1xx_hal_spi.c ****         break;
 541:src/stm32f1xx_hal_spi.c **** 
 542:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_RX_COMPLETE_CB_ID :
 543:src/stm32f1xx_hal_spi.c ****         hspi->RxCpltCallback = pCallback;
 544:src/stm32f1xx_hal_spi.c ****         break;
 545:src/stm32f1xx_hal_spi.c **** 
 546:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_TX_RX_COMPLETE_CB_ID :
 547:src/stm32f1xx_hal_spi.c ****         hspi->TxRxCpltCallback = pCallback;
 548:src/stm32f1xx_hal_spi.c ****         break;
 549:src/stm32f1xx_hal_spi.c **** 
 550:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
ARM GAS  /tmp/ccdPJtdr.s 			page 12


 551:src/stm32f1xx_hal_spi.c ****         hspi->TxHalfCpltCallback = pCallback;
 552:src/stm32f1xx_hal_spi.c ****         break;
 553:src/stm32f1xx_hal_spi.c **** 
 554:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
 555:src/stm32f1xx_hal_spi.c ****         hspi->RxHalfCpltCallback = pCallback;
 556:src/stm32f1xx_hal_spi.c ****         break;
 557:src/stm32f1xx_hal_spi.c **** 
 558:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
 559:src/stm32f1xx_hal_spi.c ****         hspi->TxRxHalfCpltCallback = pCallback;
 560:src/stm32f1xx_hal_spi.c ****         break;
 561:src/stm32f1xx_hal_spi.c **** 
 562:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_ERROR_CB_ID :
 563:src/stm32f1xx_hal_spi.c ****         hspi->ErrorCallback = pCallback;
 564:src/stm32f1xx_hal_spi.c ****         break;
 565:src/stm32f1xx_hal_spi.c **** 
 566:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_ABORT_CB_ID :
 567:src/stm32f1xx_hal_spi.c ****         hspi->AbortCpltCallback = pCallback;
 568:src/stm32f1xx_hal_spi.c ****         break;
 569:src/stm32f1xx_hal_spi.c **** 
 570:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_MSPINIT_CB_ID :
 571:src/stm32f1xx_hal_spi.c ****         hspi->MspInitCallback = pCallback;
 572:src/stm32f1xx_hal_spi.c ****         break;
 573:src/stm32f1xx_hal_spi.c **** 
 574:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_MSPDEINIT_CB_ID :
 575:src/stm32f1xx_hal_spi.c ****         hspi->MspDeInitCallback = pCallback;
 576:src/stm32f1xx_hal_spi.c ****         break;
 577:src/stm32f1xx_hal_spi.c **** 
 578:src/stm32f1xx_hal_spi.c ****       default :
 579:src/stm32f1xx_hal_spi.c ****         /* Update the error code */
 580:src/stm32f1xx_hal_spi.c ****         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 581:src/stm32f1xx_hal_spi.c **** 
 582:src/stm32f1xx_hal_spi.c ****         /* Return error status */
 583:src/stm32f1xx_hal_spi.c ****         status =  HAL_ERROR;
 584:src/stm32f1xx_hal_spi.c ****         break;
 585:src/stm32f1xx_hal_spi.c ****     }
 586:src/stm32f1xx_hal_spi.c ****   }
 587:src/stm32f1xx_hal_spi.c ****   else if (HAL_SPI_STATE_RESET == hspi->State)
 588:src/stm32f1xx_hal_spi.c ****   {
 589:src/stm32f1xx_hal_spi.c ****     switch (CallbackID)
 590:src/stm32f1xx_hal_spi.c ****     {
 591:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_MSPINIT_CB_ID :
 592:src/stm32f1xx_hal_spi.c ****         hspi->MspInitCallback = pCallback;
 593:src/stm32f1xx_hal_spi.c ****         break;
 594:src/stm32f1xx_hal_spi.c **** 
 595:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_MSPDEINIT_CB_ID :
 596:src/stm32f1xx_hal_spi.c ****         hspi->MspDeInitCallback = pCallback;
 597:src/stm32f1xx_hal_spi.c ****         break;
 598:src/stm32f1xx_hal_spi.c **** 
 599:src/stm32f1xx_hal_spi.c ****       default :
 600:src/stm32f1xx_hal_spi.c ****         /* Update the error code */
 601:src/stm32f1xx_hal_spi.c ****         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 602:src/stm32f1xx_hal_spi.c **** 
 603:src/stm32f1xx_hal_spi.c ****         /* Return error status */
 604:src/stm32f1xx_hal_spi.c ****         status =  HAL_ERROR;
 605:src/stm32f1xx_hal_spi.c ****         break;
 606:src/stm32f1xx_hal_spi.c ****     }
 607:src/stm32f1xx_hal_spi.c ****   }
ARM GAS  /tmp/ccdPJtdr.s 			page 13


 608:src/stm32f1xx_hal_spi.c ****   else
 609:src/stm32f1xx_hal_spi.c ****   {
 610:src/stm32f1xx_hal_spi.c ****     /* Update the error code */
 611:src/stm32f1xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 612:src/stm32f1xx_hal_spi.c **** 
 613:src/stm32f1xx_hal_spi.c ****     /* Return error status */
 614:src/stm32f1xx_hal_spi.c ****     status =  HAL_ERROR;
 615:src/stm32f1xx_hal_spi.c ****   }
 616:src/stm32f1xx_hal_spi.c **** 
 617:src/stm32f1xx_hal_spi.c ****   /* Release Lock */
 618:src/stm32f1xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
 619:src/stm32f1xx_hal_spi.c ****   return status;
 620:src/stm32f1xx_hal_spi.c **** }
 621:src/stm32f1xx_hal_spi.c **** 
 622:src/stm32f1xx_hal_spi.c **** /**
 623:src/stm32f1xx_hal_spi.c ****   * @brief  Unregister an SPI Callback
 624:src/stm32f1xx_hal_spi.c ****   *         SPI callback is redirected to the weak predefined callback
 625:src/stm32f1xx_hal_spi.c ****   * @param  hspi Pointer to a SPI_HandleTypeDef structure that contains
 626:src/stm32f1xx_hal_spi.c ****   *                the configuration information for the specified SPI.
 627:src/stm32f1xx_hal_spi.c ****   * @param  CallbackID ID of the callback to be unregistered
 628:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
 629:src/stm32f1xx_hal_spi.c ****   */
 630:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_UnRegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef Cal
 631:src/stm32f1xx_hal_spi.c **** {
 632:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef status = HAL_OK;
 633:src/stm32f1xx_hal_spi.c **** 
 634:src/stm32f1xx_hal_spi.c ****   /* Process locked */
 635:src/stm32f1xx_hal_spi.c ****   __HAL_LOCK(hspi);
 636:src/stm32f1xx_hal_spi.c **** 
 637:src/stm32f1xx_hal_spi.c ****   if (HAL_SPI_STATE_READY == hspi->State)
 638:src/stm32f1xx_hal_spi.c ****   {
 639:src/stm32f1xx_hal_spi.c ****     switch (CallbackID)
 640:src/stm32f1xx_hal_spi.c ****     {
 641:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_TX_COMPLETE_CB_ID :
 642:src/stm32f1xx_hal_spi.c ****         hspi->TxCpltCallback = HAL_SPI_TxCpltCallback;             /* Legacy weak TxCpltCallback   
 643:src/stm32f1xx_hal_spi.c ****         break;
 644:src/stm32f1xx_hal_spi.c **** 
 645:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_RX_COMPLETE_CB_ID :
 646:src/stm32f1xx_hal_spi.c ****         hspi->RxCpltCallback = HAL_SPI_RxCpltCallback;             /* Legacy weak RxCpltCallback   
 647:src/stm32f1xx_hal_spi.c ****         break;
 648:src/stm32f1xx_hal_spi.c **** 
 649:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_TX_RX_COMPLETE_CB_ID :
 650:src/stm32f1xx_hal_spi.c ****         hspi->TxRxCpltCallback = HAL_SPI_TxRxCpltCallback;         /* Legacy weak TxRxCpltCallback 
 651:src/stm32f1xx_hal_spi.c ****         break;
 652:src/stm32f1xx_hal_spi.c **** 
 653:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
 654:src/stm32f1xx_hal_spi.c ****         hspi->TxHalfCpltCallback = HAL_SPI_TxHalfCpltCallback;     /* Legacy weak TxHalfCpltCallbac
 655:src/stm32f1xx_hal_spi.c ****         break;
 656:src/stm32f1xx_hal_spi.c **** 
 657:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
 658:src/stm32f1xx_hal_spi.c ****         hspi->RxHalfCpltCallback = HAL_SPI_RxHalfCpltCallback;     /* Legacy weak RxHalfCpltCallbac
 659:src/stm32f1xx_hal_spi.c ****         break;
 660:src/stm32f1xx_hal_spi.c **** 
 661:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
 662:src/stm32f1xx_hal_spi.c ****         hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallb
 663:src/stm32f1xx_hal_spi.c ****         break;
 664:src/stm32f1xx_hal_spi.c **** 
ARM GAS  /tmp/ccdPJtdr.s 			page 14


 665:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_ERROR_CB_ID :
 666:src/stm32f1xx_hal_spi.c ****         hspi->ErrorCallback = HAL_SPI_ErrorCallback;               /* Legacy weak ErrorCallback    
 667:src/stm32f1xx_hal_spi.c ****         break;
 668:src/stm32f1xx_hal_spi.c **** 
 669:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_ABORT_CB_ID :
 670:src/stm32f1xx_hal_spi.c ****         hspi->AbortCpltCallback = HAL_SPI_AbortCpltCallback;       /* Legacy weak AbortCpltCallback
 671:src/stm32f1xx_hal_spi.c ****         break;
 672:src/stm32f1xx_hal_spi.c **** 
 673:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_MSPINIT_CB_ID :
 674:src/stm32f1xx_hal_spi.c ****         hspi->MspInitCallback = HAL_SPI_MspInit;                   /* Legacy weak MspInit          
 675:src/stm32f1xx_hal_spi.c ****         break;
 676:src/stm32f1xx_hal_spi.c **** 
 677:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_MSPDEINIT_CB_ID :
 678:src/stm32f1xx_hal_spi.c ****         hspi->MspDeInitCallback = HAL_SPI_MspDeInit;               /* Legacy weak MspDeInit        
 679:src/stm32f1xx_hal_spi.c ****         break;
 680:src/stm32f1xx_hal_spi.c **** 
 681:src/stm32f1xx_hal_spi.c ****       default :
 682:src/stm32f1xx_hal_spi.c ****         /* Update the error code */
 683:src/stm32f1xx_hal_spi.c ****         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 684:src/stm32f1xx_hal_spi.c **** 
 685:src/stm32f1xx_hal_spi.c ****         /* Return error status */
 686:src/stm32f1xx_hal_spi.c ****         status =  HAL_ERROR;
 687:src/stm32f1xx_hal_spi.c ****         break;
 688:src/stm32f1xx_hal_spi.c ****     }
 689:src/stm32f1xx_hal_spi.c ****   }
 690:src/stm32f1xx_hal_spi.c ****   else if (HAL_SPI_STATE_RESET == hspi->State)
 691:src/stm32f1xx_hal_spi.c ****   {
 692:src/stm32f1xx_hal_spi.c ****     switch (CallbackID)
 693:src/stm32f1xx_hal_spi.c ****     {
 694:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_MSPINIT_CB_ID :
 695:src/stm32f1xx_hal_spi.c ****         hspi->MspInitCallback = HAL_SPI_MspInit;                   /* Legacy weak MspInit          
 696:src/stm32f1xx_hal_spi.c ****         break;
 697:src/stm32f1xx_hal_spi.c **** 
 698:src/stm32f1xx_hal_spi.c ****       case HAL_SPI_MSPDEINIT_CB_ID :
 699:src/stm32f1xx_hal_spi.c ****         hspi->MspDeInitCallback = HAL_SPI_MspDeInit;               /* Legacy weak MspDeInit        
 700:src/stm32f1xx_hal_spi.c ****         break;
 701:src/stm32f1xx_hal_spi.c **** 
 702:src/stm32f1xx_hal_spi.c ****       default :
 703:src/stm32f1xx_hal_spi.c ****         /* Update the error code */
 704:src/stm32f1xx_hal_spi.c ****         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 705:src/stm32f1xx_hal_spi.c **** 
 706:src/stm32f1xx_hal_spi.c ****         /* Return error status */
 707:src/stm32f1xx_hal_spi.c ****         status =  HAL_ERROR;
 708:src/stm32f1xx_hal_spi.c ****         break;
 709:src/stm32f1xx_hal_spi.c ****     }
 710:src/stm32f1xx_hal_spi.c ****   }
 711:src/stm32f1xx_hal_spi.c ****   else
 712:src/stm32f1xx_hal_spi.c ****   {
 713:src/stm32f1xx_hal_spi.c ****     /* Update the error code */
 714:src/stm32f1xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 715:src/stm32f1xx_hal_spi.c **** 
 716:src/stm32f1xx_hal_spi.c ****     /* Return error status */
 717:src/stm32f1xx_hal_spi.c ****     status =  HAL_ERROR;
 718:src/stm32f1xx_hal_spi.c ****   }
 719:src/stm32f1xx_hal_spi.c **** 
 720:src/stm32f1xx_hal_spi.c ****   /* Release Lock */
 721:src/stm32f1xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
ARM GAS  /tmp/ccdPJtdr.s 			page 15


 722:src/stm32f1xx_hal_spi.c ****   return status;
 723:src/stm32f1xx_hal_spi.c **** }
 724:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 725:src/stm32f1xx_hal_spi.c **** /**
 726:src/stm32f1xx_hal_spi.c ****   * @}
 727:src/stm32f1xx_hal_spi.c ****   */
 728:src/stm32f1xx_hal_spi.c **** 
 729:src/stm32f1xx_hal_spi.c **** /** @defgroup SPI_Exported_Functions_Group2 IO operation functions
 730:src/stm32f1xx_hal_spi.c ****   *  @brief   Data transfers functions
 731:src/stm32f1xx_hal_spi.c ****   *
 732:src/stm32f1xx_hal_spi.c **** @verbatim
 733:src/stm32f1xx_hal_spi.c ****   ==============================================================================
 734:src/stm32f1xx_hal_spi.c ****                       ##### IO operation functions #####
 735:src/stm32f1xx_hal_spi.c ****  ===============================================================================
 736:src/stm32f1xx_hal_spi.c ****  [..]
 737:src/stm32f1xx_hal_spi.c ****     This subsection provides a set of functions allowing to manage the SPI
 738:src/stm32f1xx_hal_spi.c ****     data transfers.
 739:src/stm32f1xx_hal_spi.c **** 
 740:src/stm32f1xx_hal_spi.c ****     [..] The SPI supports master and slave mode :
 741:src/stm32f1xx_hal_spi.c **** 
 742:src/stm32f1xx_hal_spi.c ****     (#) There are two modes of transfer:
 743:src/stm32f1xx_hal_spi.c ****        (++) Blocking mode: The communication is performed in polling mode.
 744:src/stm32f1xx_hal_spi.c ****             The HAL status of all data processing is returned by the same function
 745:src/stm32f1xx_hal_spi.c ****             after finishing transfer.
 746:src/stm32f1xx_hal_spi.c ****        (++) No-Blocking mode: The communication is performed using Interrupts
 747:src/stm32f1xx_hal_spi.c ****             or DMA, These APIs return the HAL status.
 748:src/stm32f1xx_hal_spi.c ****             The end of the data processing will be indicated through the
 749:src/stm32f1xx_hal_spi.c ****             dedicated SPI IRQ when using Interrupt mode or the DMA IRQ when
 750:src/stm32f1xx_hal_spi.c ****             using DMA mode.
 751:src/stm32f1xx_hal_spi.c ****             The HAL_SPI_TxCpltCallback(), HAL_SPI_RxCpltCallback() and HAL_SPI_TxRxCpltCallback() u
 752:src/stm32f1xx_hal_spi.c ****             will be executed respectively at the end of the transmit or Receive process
 753:src/stm32f1xx_hal_spi.c ****             The HAL_SPI_ErrorCallback()user callback will be executed when a communication error is
 754:src/stm32f1xx_hal_spi.c **** 
 755:src/stm32f1xx_hal_spi.c ****     (#) APIs provided for these 2 transfer modes (Blocking mode or Non blocking mode using either I
 756:src/stm32f1xx_hal_spi.c ****         exist for 1Line (simplex) and 2Lines (full duplex) modes.
 757:src/stm32f1xx_hal_spi.c **** 
 758:src/stm32f1xx_hal_spi.c **** @endverbatim
 759:src/stm32f1xx_hal_spi.c ****   * @{
 760:src/stm32f1xx_hal_spi.c ****   */
 761:src/stm32f1xx_hal_spi.c **** 
 762:src/stm32f1xx_hal_spi.c **** /**
 763:src/stm32f1xx_hal_spi.c ****   * @brief  Transmit an amount of data in blocking mode.
 764:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 765:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
 766:src/stm32f1xx_hal_spi.c ****   * @param  pData pointer to data buffer
 767:src/stm32f1xx_hal_spi.c ****   * @param  Size amount of data to be sent
 768:src/stm32f1xx_hal_spi.c ****   * @param  Timeout Timeout duration
 769:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
 770:src/stm32f1xx_hal_spi.c ****   */
 771:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t
 772:src/stm32f1xx_hal_spi.c **** {
 773:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 774:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 775:src/stm32f1xx_hal_spi.c ****   uint16_t initial_TxXferCount;
 776:src/stm32f1xx_hal_spi.c **** 
 777:src/stm32f1xx_hal_spi.c ****   /* Check Direction parameter */
 778:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
ARM GAS  /tmp/ccdPJtdr.s 			page 16


 779:src/stm32f1xx_hal_spi.c **** 
 780:src/stm32f1xx_hal_spi.c ****   /* Process Locked */
 781:src/stm32f1xx_hal_spi.c ****   __HAL_LOCK(hspi);
 782:src/stm32f1xx_hal_spi.c **** 
 783:src/stm32f1xx_hal_spi.c ****   /* Init tickstart for timeout management*/
 784:src/stm32f1xx_hal_spi.c ****   tickstart = HAL_GetTick();
 785:src/stm32f1xx_hal_spi.c ****   initial_TxXferCount = Size;
 786:src/stm32f1xx_hal_spi.c **** 
 787:src/stm32f1xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_READY)
 788:src/stm32f1xx_hal_spi.c ****   {
 789:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_BUSY;
 790:src/stm32f1xx_hal_spi.c ****     goto error;
 791:src/stm32f1xx_hal_spi.c ****   }
 792:src/stm32f1xx_hal_spi.c **** 
 793:src/stm32f1xx_hal_spi.c ****   if ((pData == NULL) || (Size == 0U))
 794:src/stm32f1xx_hal_spi.c ****   {
 795:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
 796:src/stm32f1xx_hal_spi.c ****     goto error;
 797:src/stm32f1xx_hal_spi.c ****   }
 798:src/stm32f1xx_hal_spi.c **** 
 799:src/stm32f1xx_hal_spi.c ****   /* Set the transaction information */
 800:src/stm32f1xx_hal_spi.c ****   hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pData;
 803:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = Size;
 804:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = Size;
 805:src/stm32f1xx_hal_spi.c **** 
 806:src/stm32f1xx_hal_spi.c ****   /*Init field not used in handle to zero */
 807:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)NULL;
 808:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = 0U;
 809:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = 0U;
 810:src/stm32f1xx_hal_spi.c ****   hspi->TxISR       = NULL;
 811:src/stm32f1xx_hal_spi.c ****   hspi->RxISR       = NULL;
 812:src/stm32f1xx_hal_spi.c **** 
 813:src/stm32f1xx_hal_spi.c ****   /* Configure communication direction : 1Line */
 814:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 815:src/stm32f1xx_hal_spi.c ****   {
 816:src/stm32f1xx_hal_spi.c ****     SPI_1LINE_TX(hspi);
 817:src/stm32f1xx_hal_spi.c ****   }
 818:src/stm32f1xx_hal_spi.c **** 
 819:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 820:src/stm32f1xx_hal_spi.c ****   /* Reset CRC Calculation */
 821:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 822:src/stm32f1xx_hal_spi.c ****   {
 823:src/stm32f1xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
 824:src/stm32f1xx_hal_spi.c ****   }
 825:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 826:src/stm32f1xx_hal_spi.c **** 
 827:src/stm32f1xx_hal_spi.c ****   /* Check if the SPI is already enabled */
 828:src/stm32f1xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 829:src/stm32f1xx_hal_spi.c ****   {
 830:src/stm32f1xx_hal_spi.c ****     /* Enable SPI peripheral */
 831:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
 832:src/stm32f1xx_hal_spi.c ****   }
 833:src/stm32f1xx_hal_spi.c **** 
 834:src/stm32f1xx_hal_spi.c ****   /* Transmit data in 16 Bit mode */
 835:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
ARM GAS  /tmp/ccdPJtdr.s 			page 17


 836:src/stm32f1xx_hal_spi.c ****   {
 837:src/stm32f1xx_hal_spi.c ****     if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 838:src/stm32f1xx_hal_spi.c ****     {
 839:src/stm32f1xx_hal_spi.c ****       hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 840:src/stm32f1xx_hal_spi.c ****       hspi->pTxBuffPtr += sizeof(uint16_t);
 841:src/stm32f1xx_hal_spi.c ****       hspi->TxXferCount--;
 842:src/stm32f1xx_hal_spi.c ****     }
 843:src/stm32f1xx_hal_spi.c ****     /* Transmit data in 16 Bit mode */
 844:src/stm32f1xx_hal_spi.c ****     while (hspi->TxXferCount > 0U)
 845:src/stm32f1xx_hal_spi.c ****     {
 846:src/stm32f1xx_hal_spi.c ****       /* Wait until TXE flag is set to send data */
 847:src/stm32f1xx_hal_spi.c ****       if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 848:src/stm32f1xx_hal_spi.c ****       {
 849:src/stm32f1xx_hal_spi.c ****         hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 850:src/stm32f1xx_hal_spi.c ****         hspi->pTxBuffPtr += sizeof(uint16_t);
 851:src/stm32f1xx_hal_spi.c ****         hspi->TxXferCount--;
 852:src/stm32f1xx_hal_spi.c ****       }
 853:src/stm32f1xx_hal_spi.c ****       else
 854:src/stm32f1xx_hal_spi.c ****       {
 855:src/stm32f1xx_hal_spi.c ****         /* Timeout management */
 856:src/stm32f1xx_hal_spi.c ****         if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout =
 857:src/stm32f1xx_hal_spi.c ****         {
 858:src/stm32f1xx_hal_spi.c ****           errorcode = HAL_TIMEOUT;
 859:src/stm32f1xx_hal_spi.c ****           goto error;
 860:src/stm32f1xx_hal_spi.c ****         }
 861:src/stm32f1xx_hal_spi.c ****       }
 862:src/stm32f1xx_hal_spi.c ****     }
 863:src/stm32f1xx_hal_spi.c ****   }
 864:src/stm32f1xx_hal_spi.c ****   /* Transmit data in 8 Bit mode */
 865:src/stm32f1xx_hal_spi.c ****   else
 866:src/stm32f1xx_hal_spi.c ****   {
 867:src/stm32f1xx_hal_spi.c ****     if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 868:src/stm32f1xx_hal_spi.c ****     {
 869:src/stm32f1xx_hal_spi.c ****       *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 870:src/stm32f1xx_hal_spi.c ****       hspi->pTxBuffPtr += sizeof(uint8_t);
 871:src/stm32f1xx_hal_spi.c ****       hspi->TxXferCount--;
 872:src/stm32f1xx_hal_spi.c ****     }
 873:src/stm32f1xx_hal_spi.c ****     while (hspi->TxXferCount > 0U)
 874:src/stm32f1xx_hal_spi.c ****     {
 875:src/stm32f1xx_hal_spi.c ****       /* Wait until TXE flag is set to send data */
 876:src/stm32f1xx_hal_spi.c ****       if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 877:src/stm32f1xx_hal_spi.c ****       {
 878:src/stm32f1xx_hal_spi.c ****         *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 879:src/stm32f1xx_hal_spi.c ****         hspi->pTxBuffPtr += sizeof(uint8_t);
 880:src/stm32f1xx_hal_spi.c ****         hspi->TxXferCount--;
 881:src/stm32f1xx_hal_spi.c ****       }
 882:src/stm32f1xx_hal_spi.c ****       else
 883:src/stm32f1xx_hal_spi.c ****       {
 884:src/stm32f1xx_hal_spi.c ****         /* Timeout management */
 885:src/stm32f1xx_hal_spi.c ****         if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout =
 886:src/stm32f1xx_hal_spi.c ****         {
 887:src/stm32f1xx_hal_spi.c ****           errorcode = HAL_TIMEOUT;
 888:src/stm32f1xx_hal_spi.c ****           goto error;
 889:src/stm32f1xx_hal_spi.c ****         }
 890:src/stm32f1xx_hal_spi.c ****       }
 891:src/stm32f1xx_hal_spi.c ****     }
 892:src/stm32f1xx_hal_spi.c ****   }
ARM GAS  /tmp/ccdPJtdr.s 			page 18


 893:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 894:src/stm32f1xx_hal_spi.c ****   /* Enable CRC Transmission */
 895:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 896:src/stm32f1xx_hal_spi.c ****   {
 897:src/stm32f1xx_hal_spi.c ****     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 898:src/stm32f1xx_hal_spi.c ****   }
 899:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 900:src/stm32f1xx_hal_spi.c **** 
 901:src/stm32f1xx_hal_spi.c ****   /* Check the end of the transaction */
 902:src/stm32f1xx_hal_spi.c ****   if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 903:src/stm32f1xx_hal_spi.c ****   {
 904:src/stm32f1xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 905:src/stm32f1xx_hal_spi.c ****   }
 906:src/stm32f1xx_hal_spi.c **** 
 907:src/stm32f1xx_hal_spi.c ****   /* Clear overrun flag in 2 Lines communication mode because received is not read */
 908:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 909:src/stm32f1xx_hal_spi.c ****   {
 910:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_CLEAR_OVRFLAG(hspi);
 911:src/stm32f1xx_hal_spi.c ****   }
 912:src/stm32f1xx_hal_spi.c **** 
 913:src/stm32f1xx_hal_spi.c ****   if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 914:src/stm32f1xx_hal_spi.c ****   {
 915:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
 916:src/stm32f1xx_hal_spi.c ****   }
 917:src/stm32f1xx_hal_spi.c **** 
 918:src/stm32f1xx_hal_spi.c **** error:
 919:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
 920:src/stm32f1xx_hal_spi.c ****   /* Process Unlocked */
 921:src/stm32f1xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
 922:src/stm32f1xx_hal_spi.c ****   return errorcode;
 923:src/stm32f1xx_hal_spi.c **** }
 924:src/stm32f1xx_hal_spi.c **** 
 925:src/stm32f1xx_hal_spi.c **** /**
 926:src/stm32f1xx_hal_spi.c ****   * @brief  Receive an amount of data in blocking mode.
 927:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 928:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
 929:src/stm32f1xx_hal_spi.c ****   * @param  pData pointer to data buffer
 930:src/stm32f1xx_hal_spi.c ****   * @param  Size amount of data to be received
 931:src/stm32f1xx_hal_spi.c ****   * @param  Timeout Timeout duration
 932:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
 933:src/stm32f1xx_hal_spi.c ****   */
 934:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t 
 935:src/stm32f1xx_hal_spi.c **** {
 936:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 937:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 938:src/stm32f1xx_hal_spi.c **** 
 939:src/stm32f1xx_hal_spi.c ****   if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 940:src/stm32f1xx_hal_spi.c ****   {
 941:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_BUSY_RX;
 942:src/stm32f1xx_hal_spi.c ****     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line 
 943:src/stm32f1xx_hal_spi.c ****     return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 944:src/stm32f1xx_hal_spi.c ****   }
 945:src/stm32f1xx_hal_spi.c **** 
 946:src/stm32f1xx_hal_spi.c ****   /* Process Locked */
 947:src/stm32f1xx_hal_spi.c ****   __HAL_LOCK(hspi);
 948:src/stm32f1xx_hal_spi.c **** 
 949:src/stm32f1xx_hal_spi.c ****   /* Init tickstart for timeout management*/
ARM GAS  /tmp/ccdPJtdr.s 			page 19


 950:src/stm32f1xx_hal_spi.c ****   tickstart = HAL_GetTick();
 951:src/stm32f1xx_hal_spi.c **** 
 952:src/stm32f1xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_READY)
 953:src/stm32f1xx_hal_spi.c ****   {
 954:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_BUSY;
 955:src/stm32f1xx_hal_spi.c ****     goto error;
 956:src/stm32f1xx_hal_spi.c ****   }
 957:src/stm32f1xx_hal_spi.c **** 
 958:src/stm32f1xx_hal_spi.c ****   if ((pData == NULL) || (Size == 0U))
 959:src/stm32f1xx_hal_spi.c ****   {
 960:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
 961:src/stm32f1xx_hal_spi.c ****     goto error;
 962:src/stm32f1xx_hal_spi.c ****   }
 963:src/stm32f1xx_hal_spi.c **** 
 964:src/stm32f1xx_hal_spi.c ****   /* Set the transaction information */
 965:src/stm32f1xx_hal_spi.c ****   hspi->State       = HAL_SPI_STATE_BUSY_RX;
 966:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 967:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pData;
 968:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = Size;
 969:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = Size;
 970:src/stm32f1xx_hal_spi.c **** 
 971:src/stm32f1xx_hal_spi.c ****   /*Init field not used in handle to zero */
 972:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)NULL;
 973:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = 0U;
 974:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = 0U;
 975:src/stm32f1xx_hal_spi.c ****   hspi->RxISR       = NULL;
 976:src/stm32f1xx_hal_spi.c ****   hspi->TxISR       = NULL;
 977:src/stm32f1xx_hal_spi.c **** 
 978:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 979:src/stm32f1xx_hal_spi.c ****   /* Reset CRC Calculation */
 980:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 981:src/stm32f1xx_hal_spi.c ****   {
 982:src/stm32f1xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
 983:src/stm32f1xx_hal_spi.c ****     /* this is done to handle the CRCNEXT before the latest data */
 984:src/stm32f1xx_hal_spi.c ****     hspi->RxXferCount--;
 985:src/stm32f1xx_hal_spi.c ****   }
 986:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 987:src/stm32f1xx_hal_spi.c **** 
 988:src/stm32f1xx_hal_spi.c ****   /* Configure communication direction: 1Line */
 989:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 990:src/stm32f1xx_hal_spi.c ****   {
 991:src/stm32f1xx_hal_spi.c ****     SPI_1LINE_RX(hspi);
 992:src/stm32f1xx_hal_spi.c ****   }
 993:src/stm32f1xx_hal_spi.c **** 
 994:src/stm32f1xx_hal_spi.c ****   /* Check if the SPI is already enabled */
 995:src/stm32f1xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 996:src/stm32f1xx_hal_spi.c ****   {
 997:src/stm32f1xx_hal_spi.c ****     /* Enable SPI peripheral */
 998:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
 999:src/stm32f1xx_hal_spi.c ****   }
1000:src/stm32f1xx_hal_spi.c **** 
1001:src/stm32f1xx_hal_spi.c ****   /* Receive data in 8 Bit mode */
1002:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
1003:src/stm32f1xx_hal_spi.c ****   {
1004:src/stm32f1xx_hal_spi.c ****     /* Transfer loop */
1005:src/stm32f1xx_hal_spi.c ****     while (hspi->RxXferCount > 0U)
1006:src/stm32f1xx_hal_spi.c ****     {
ARM GAS  /tmp/ccdPJtdr.s 			page 20


1007:src/stm32f1xx_hal_spi.c ****       /* Check the RXNE flag */
1008:src/stm32f1xx_hal_spi.c ****       if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
1009:src/stm32f1xx_hal_spi.c ****       {
1010:src/stm32f1xx_hal_spi.c ****         /* read the received data */
1011:src/stm32f1xx_hal_spi.c ****         (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
1012:src/stm32f1xx_hal_spi.c ****         hspi->pRxBuffPtr += sizeof(uint8_t);
1013:src/stm32f1xx_hal_spi.c ****         hspi->RxXferCount--;
1014:src/stm32f1xx_hal_spi.c ****       }
1015:src/stm32f1xx_hal_spi.c ****       else
1016:src/stm32f1xx_hal_spi.c ****       {
1017:src/stm32f1xx_hal_spi.c ****         /* Timeout management */
1018:src/stm32f1xx_hal_spi.c ****         if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout =
1019:src/stm32f1xx_hal_spi.c ****         {
1020:src/stm32f1xx_hal_spi.c ****           errorcode = HAL_TIMEOUT;
1021:src/stm32f1xx_hal_spi.c ****           goto error;
1022:src/stm32f1xx_hal_spi.c ****         }
1023:src/stm32f1xx_hal_spi.c ****       }
1024:src/stm32f1xx_hal_spi.c ****     }
1025:src/stm32f1xx_hal_spi.c ****   }
1026:src/stm32f1xx_hal_spi.c ****   else
1027:src/stm32f1xx_hal_spi.c ****   {
1028:src/stm32f1xx_hal_spi.c ****     /* Transfer loop */
1029:src/stm32f1xx_hal_spi.c ****     while (hspi->RxXferCount > 0U)
1030:src/stm32f1xx_hal_spi.c ****     {
1031:src/stm32f1xx_hal_spi.c ****       /* Check the RXNE flag */
1032:src/stm32f1xx_hal_spi.c ****       if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
1033:src/stm32f1xx_hal_spi.c ****       {
1034:src/stm32f1xx_hal_spi.c ****         *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
1035:src/stm32f1xx_hal_spi.c ****         hspi->pRxBuffPtr += sizeof(uint16_t);
1036:src/stm32f1xx_hal_spi.c ****         hspi->RxXferCount--;
1037:src/stm32f1xx_hal_spi.c ****       }
1038:src/stm32f1xx_hal_spi.c ****       else
1039:src/stm32f1xx_hal_spi.c ****       {
1040:src/stm32f1xx_hal_spi.c ****         /* Timeout management */
1041:src/stm32f1xx_hal_spi.c ****         if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout =
1042:src/stm32f1xx_hal_spi.c ****         {
1043:src/stm32f1xx_hal_spi.c ****           errorcode = HAL_TIMEOUT;
1044:src/stm32f1xx_hal_spi.c ****           goto error;
1045:src/stm32f1xx_hal_spi.c ****         }
1046:src/stm32f1xx_hal_spi.c ****       }
1047:src/stm32f1xx_hal_spi.c ****     }
1048:src/stm32f1xx_hal_spi.c ****   }
1049:src/stm32f1xx_hal_spi.c **** 
1050:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1051:src/stm32f1xx_hal_spi.c ****   /* Handle the CRC Transmission */
1052:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
1053:src/stm32f1xx_hal_spi.c ****   {
1054:src/stm32f1xx_hal_spi.c ****     /* freeze the CRC before the latest data */
1055:src/stm32f1xx_hal_spi.c ****     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
1056:src/stm32f1xx_hal_spi.c **** 
1057:src/stm32f1xx_hal_spi.c ****     /* Check if CRCNEXT is well reseted by hardware */
1058:src/stm32f1xx_hal_spi.c ****     if (READ_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT))
1059:src/stm32f1xx_hal_spi.c ****     {
1060:src/stm32f1xx_hal_spi.c ****       /* Workaround to force CRCNEXT bit to zero in case of CRCNEXT is not reset automatically by h
1061:src/stm32f1xx_hal_spi.c ****       CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
1062:src/stm32f1xx_hal_spi.c ****     }
1063:src/stm32f1xx_hal_spi.c ****     /* Read the latest data */
ARM GAS  /tmp/ccdPJtdr.s 			page 21


1064:src/stm32f1xx_hal_spi.c ****     if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
1065:src/stm32f1xx_hal_spi.c ****     {
1066:src/stm32f1xx_hal_spi.c ****       /* the latest data has not been received */
1067:src/stm32f1xx_hal_spi.c ****       errorcode = HAL_TIMEOUT;
1068:src/stm32f1xx_hal_spi.c ****       goto error;
1069:src/stm32f1xx_hal_spi.c ****     }
1070:src/stm32f1xx_hal_spi.c **** 
1071:src/stm32f1xx_hal_spi.c ****     /* Receive last data in 16 Bit mode */
1072:src/stm32f1xx_hal_spi.c ****     if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
1073:src/stm32f1xx_hal_spi.c ****     {
1074:src/stm32f1xx_hal_spi.c ****       *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
1075:src/stm32f1xx_hal_spi.c ****     }
1076:src/stm32f1xx_hal_spi.c ****     /* Receive last data in 8 Bit mode */
1077:src/stm32f1xx_hal_spi.c ****     else
1078:src/stm32f1xx_hal_spi.c ****     {
1079:src/stm32f1xx_hal_spi.c ****       (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
1080:src/stm32f1xx_hal_spi.c ****     }
1081:src/stm32f1xx_hal_spi.c **** 
1082:src/stm32f1xx_hal_spi.c ****     /* Wait the CRC data */
1083:src/stm32f1xx_hal_spi.c ****     if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
1084:src/stm32f1xx_hal_spi.c ****     {
1085:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
1086:src/stm32f1xx_hal_spi.c ****       errorcode = HAL_TIMEOUT;
1087:src/stm32f1xx_hal_spi.c ****       goto error;
1088:src/stm32f1xx_hal_spi.c ****     }
1089:src/stm32f1xx_hal_spi.c **** 
1090:src/stm32f1xx_hal_spi.c ****     /* Read CRC to Flush DR and RXNE flag */
1091:src/stm32f1xx_hal_spi.c ****     READ_REG(hspi->Instance->DR);
1092:src/stm32f1xx_hal_spi.c ****   }
1093:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1094:src/stm32f1xx_hal_spi.c **** 
1095:src/stm32f1xx_hal_spi.c ****   /* Check the end of the transaction */
1096:src/stm32f1xx_hal_spi.c ****   if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
1097:src/stm32f1xx_hal_spi.c ****   {
1098:src/stm32f1xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
1099:src/stm32f1xx_hal_spi.c ****   }
1100:src/stm32f1xx_hal_spi.c **** 
1101:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1102:src/stm32f1xx_hal_spi.c ****   /* Check if CRC error occurred */
1103:src/stm32f1xx_hal_spi.c ****   if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
1104:src/stm32f1xx_hal_spi.c ****   {
1105:src/stm32f1xx_hal_spi.c ****     /* Check if CRC error is valid or not (workaround to be applied or not) */
1106:src/stm32f1xx_hal_spi.c ****     if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
1107:src/stm32f1xx_hal_spi.c ****     {
1108:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
1109:src/stm32f1xx_hal_spi.c **** 
1110:src/stm32f1xx_hal_spi.c ****       /* Reset CRC Calculation */
1111:src/stm32f1xx_hal_spi.c ****       SPI_RESET_CRC(hspi);
1112:src/stm32f1xx_hal_spi.c ****     }
1113:src/stm32f1xx_hal_spi.c ****     else
1114:src/stm32f1xx_hal_spi.c ****     {
1115:src/stm32f1xx_hal_spi.c ****       __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
1116:src/stm32f1xx_hal_spi.c ****     }
1117:src/stm32f1xx_hal_spi.c ****   }
1118:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1119:src/stm32f1xx_hal_spi.c **** 
1120:src/stm32f1xx_hal_spi.c ****   if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
ARM GAS  /tmp/ccdPJtdr.s 			page 22


1121:src/stm32f1xx_hal_spi.c ****   {
1122:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
1123:src/stm32f1xx_hal_spi.c ****   }
1124:src/stm32f1xx_hal_spi.c **** 
1125:src/stm32f1xx_hal_spi.c **** error :
1126:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
1127:src/stm32f1xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
1128:src/stm32f1xx_hal_spi.c ****   return errorcode;
1129:src/stm32f1xx_hal_spi.c **** }
1130:src/stm32f1xx_hal_spi.c **** 
1131:src/stm32f1xx_hal_spi.c **** /**
1132:src/stm32f1xx_hal_spi.c ****   * @brief  Transmit and Receive an amount of data in blocking mode.
1133:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
1134:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
1135:src/stm32f1xx_hal_spi.c ****   * @param  pTxData pointer to transmission data buffer
1136:src/stm32f1xx_hal_spi.c ****   * @param  pRxData pointer to reception data buffer
1137:src/stm32f1xx_hal_spi.c ****   * @param  Size amount of data to be sent and received
1138:src/stm32f1xx_hal_spi.c ****   * @param  Timeout Timeout duration
1139:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
1140:src/stm32f1xx_hal_spi.c ****   */
1141:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxDa
1142:src/stm32f1xx_hal_spi.c ****                                           uint32_t Timeout)
1143:src/stm32f1xx_hal_spi.c **** {
1144:src/stm32f1xx_hal_spi.c ****   uint16_t             initial_TxXferCount;
1145:src/stm32f1xx_hal_spi.c ****   uint32_t             tmp_mode;
1146:src/stm32f1xx_hal_spi.c ****   HAL_SPI_StateTypeDef tmp_state;
1147:src/stm32f1xx_hal_spi.c ****   uint32_t             tickstart;
1148:src/stm32f1xx_hal_spi.c **** 
1149:src/stm32f1xx_hal_spi.c ****   /* Variable used to alternate Rx and Tx during transfer */
1150:src/stm32f1xx_hal_spi.c ****   uint32_t             txallowed = 1U;
1151:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef    errorcode = HAL_OK;
1152:src/stm32f1xx_hal_spi.c **** 
1153:src/stm32f1xx_hal_spi.c ****   /* Check Direction parameter */
1154:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
1155:src/stm32f1xx_hal_spi.c **** 
1156:src/stm32f1xx_hal_spi.c ****   /* Process Locked */
1157:src/stm32f1xx_hal_spi.c ****   __HAL_LOCK(hspi);
1158:src/stm32f1xx_hal_spi.c **** 
1159:src/stm32f1xx_hal_spi.c ****   /* Init tickstart for timeout management*/
1160:src/stm32f1xx_hal_spi.c ****   tickstart = HAL_GetTick();
1161:src/stm32f1xx_hal_spi.c **** 
1162:src/stm32f1xx_hal_spi.c ****   /* Init temporary variables */
1163:src/stm32f1xx_hal_spi.c ****   tmp_state           = hspi->State;
1164:src/stm32f1xx_hal_spi.c ****   tmp_mode            = hspi->Init.Mode;
1165:src/stm32f1xx_hal_spi.c ****   initial_TxXferCount = Size;
1166:src/stm32f1xx_hal_spi.c **** 
1167:src/stm32f1xx_hal_spi.c ****   if (!((tmp_state == HAL_SPI_STATE_READY) || \
1168:src/stm32f1xx_hal_spi.c ****         ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_st
1169:src/stm32f1xx_hal_spi.c ****   {
1170:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_BUSY;
1171:src/stm32f1xx_hal_spi.c ****     goto error;
1172:src/stm32f1xx_hal_spi.c ****   }
1173:src/stm32f1xx_hal_spi.c **** 
1174:src/stm32f1xx_hal_spi.c ****   if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
1175:src/stm32f1xx_hal_spi.c ****   {
1176:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
1177:src/stm32f1xx_hal_spi.c ****     goto error;
ARM GAS  /tmp/ccdPJtdr.s 			page 23


1178:src/stm32f1xx_hal_spi.c ****   }
1179:src/stm32f1xx_hal_spi.c **** 
1180:src/stm32f1xx_hal_spi.c ****   /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
1181:src/stm32f1xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_BUSY_RX)
1182:src/stm32f1xx_hal_spi.c ****   {
1183:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
1184:src/stm32f1xx_hal_spi.c ****   }
1185:src/stm32f1xx_hal_spi.c **** 
1186:src/stm32f1xx_hal_spi.c ****   /* Set the transaction information */
1187:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
1188:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pRxData;
1189:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = Size;
1190:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = Size;
1191:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pTxData;
1192:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = Size;
1193:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = Size;
1194:src/stm32f1xx_hal_spi.c **** 
1195:src/stm32f1xx_hal_spi.c ****   /*Init field not used in handle to zero */
1196:src/stm32f1xx_hal_spi.c ****   hspi->RxISR       = NULL;
1197:src/stm32f1xx_hal_spi.c ****   hspi->TxISR       = NULL;
1198:src/stm32f1xx_hal_spi.c **** 
1199:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1200:src/stm32f1xx_hal_spi.c ****   /* Reset CRC Calculation */
1201:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
1202:src/stm32f1xx_hal_spi.c ****   {
1203:src/stm32f1xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
1204:src/stm32f1xx_hal_spi.c ****   }
1205:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1206:src/stm32f1xx_hal_spi.c **** 
1207:src/stm32f1xx_hal_spi.c ****   /* Check if the SPI is already enabled */
1208:src/stm32f1xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
1209:src/stm32f1xx_hal_spi.c ****   {
1210:src/stm32f1xx_hal_spi.c ****     /* Enable SPI peripheral */
1211:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
1212:src/stm32f1xx_hal_spi.c ****   }
1213:src/stm32f1xx_hal_spi.c **** 
1214:src/stm32f1xx_hal_spi.c ****   /* Transmit and Receive data in 16 Bit mode */
1215:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
1216:src/stm32f1xx_hal_spi.c ****   {
1217:src/stm32f1xx_hal_spi.c ****     if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
1218:src/stm32f1xx_hal_spi.c ****     {
1219:src/stm32f1xx_hal_spi.c ****       hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
1220:src/stm32f1xx_hal_spi.c ****       hspi->pTxBuffPtr += sizeof(uint16_t);
1221:src/stm32f1xx_hal_spi.c ****       hspi->TxXferCount--;
1222:src/stm32f1xx_hal_spi.c ****     }
1223:src/stm32f1xx_hal_spi.c ****     while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
1224:src/stm32f1xx_hal_spi.c ****     {
1225:src/stm32f1xx_hal_spi.c ****       /* Check TXE flag */
1226:src/stm32f1xx_hal_spi.c ****       if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U)
1227:src/stm32f1xx_hal_spi.c ****       {
1228:src/stm32f1xx_hal_spi.c ****         hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
1229:src/stm32f1xx_hal_spi.c ****         hspi->pTxBuffPtr += sizeof(uint16_t);
1230:src/stm32f1xx_hal_spi.c ****         hspi->TxXferCount--;
1231:src/stm32f1xx_hal_spi.c ****         /* Next Data is a reception (Rx). Tx not allowed */
1232:src/stm32f1xx_hal_spi.c ****         txallowed = 0U;
1233:src/stm32f1xx_hal_spi.c **** 
1234:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
ARM GAS  /tmp/ccdPJtdr.s 			page 24


1235:src/stm32f1xx_hal_spi.c ****         /* Enable CRC Transmission */
1236:src/stm32f1xx_hal_spi.c ****         if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
1237:src/stm32f1xx_hal_spi.c ****         {
1238:src/stm32f1xx_hal_spi.c ****           SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
1239:src/stm32f1xx_hal_spi.c ****         }
1240:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1241:src/stm32f1xx_hal_spi.c ****       }
1242:src/stm32f1xx_hal_spi.c **** 
1243:src/stm32f1xx_hal_spi.c ****       /* Check RXNE flag */
1244:src/stm32f1xx_hal_spi.c ****       if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
1245:src/stm32f1xx_hal_spi.c ****       {
1246:src/stm32f1xx_hal_spi.c ****         *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
1247:src/stm32f1xx_hal_spi.c ****         hspi->pRxBuffPtr += sizeof(uint16_t);
1248:src/stm32f1xx_hal_spi.c ****         hspi->RxXferCount--;
1249:src/stm32f1xx_hal_spi.c ****         /* Next Data is a Transmission (Tx). Tx is allowed */
1250:src/stm32f1xx_hal_spi.c ****         txallowed = 1U;
1251:src/stm32f1xx_hal_spi.c ****       }
1252:src/stm32f1xx_hal_spi.c ****       if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
1253:src/stm32f1xx_hal_spi.c ****       {
1254:src/stm32f1xx_hal_spi.c ****         errorcode = HAL_TIMEOUT;
1255:src/stm32f1xx_hal_spi.c ****         goto error;
1256:src/stm32f1xx_hal_spi.c ****       }
1257:src/stm32f1xx_hal_spi.c ****     }
1258:src/stm32f1xx_hal_spi.c ****   }
1259:src/stm32f1xx_hal_spi.c ****   /* Transmit and Receive data in 8 Bit mode */
1260:src/stm32f1xx_hal_spi.c ****   else
1261:src/stm32f1xx_hal_spi.c ****   {
1262:src/stm32f1xx_hal_spi.c ****     if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
1263:src/stm32f1xx_hal_spi.c ****     {
1264:src/stm32f1xx_hal_spi.c ****       *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
1265:src/stm32f1xx_hal_spi.c ****       hspi->pTxBuffPtr += sizeof(uint8_t);
1266:src/stm32f1xx_hal_spi.c ****       hspi->TxXferCount--;
1267:src/stm32f1xx_hal_spi.c ****     }
1268:src/stm32f1xx_hal_spi.c ****     while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
1269:src/stm32f1xx_hal_spi.c ****     {
1270:src/stm32f1xx_hal_spi.c ****       /* Check TXE flag */
1271:src/stm32f1xx_hal_spi.c ****       if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U)
1272:src/stm32f1xx_hal_spi.c ****       {
1273:src/stm32f1xx_hal_spi.c ****         *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
1274:src/stm32f1xx_hal_spi.c ****         hspi->pTxBuffPtr++;
1275:src/stm32f1xx_hal_spi.c ****         hspi->TxXferCount--;
1276:src/stm32f1xx_hal_spi.c ****         /* Next Data is a reception (Rx). Tx not allowed */
1277:src/stm32f1xx_hal_spi.c ****         txallowed = 0U;
1278:src/stm32f1xx_hal_spi.c **** 
1279:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1280:src/stm32f1xx_hal_spi.c ****         /* Enable CRC Transmission */
1281:src/stm32f1xx_hal_spi.c ****         if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
1282:src/stm32f1xx_hal_spi.c ****         {
1283:src/stm32f1xx_hal_spi.c ****           SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
1284:src/stm32f1xx_hal_spi.c ****         }
1285:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1286:src/stm32f1xx_hal_spi.c ****       }
1287:src/stm32f1xx_hal_spi.c **** 
1288:src/stm32f1xx_hal_spi.c ****       /* Wait until RXNE flag is reset */
1289:src/stm32f1xx_hal_spi.c ****       if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
1290:src/stm32f1xx_hal_spi.c ****       {
1291:src/stm32f1xx_hal_spi.c ****         (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
ARM GAS  /tmp/ccdPJtdr.s 			page 25


1292:src/stm32f1xx_hal_spi.c ****         hspi->pRxBuffPtr++;
1293:src/stm32f1xx_hal_spi.c ****         hspi->RxXferCount--;
1294:src/stm32f1xx_hal_spi.c ****         /* Next Data is a Transmission (Tx). Tx is allowed */
1295:src/stm32f1xx_hal_spi.c ****         txallowed = 1U;
1296:src/stm32f1xx_hal_spi.c ****       }
1297:src/stm32f1xx_hal_spi.c ****       if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout =
1298:src/stm32f1xx_hal_spi.c ****       {
1299:src/stm32f1xx_hal_spi.c ****         errorcode = HAL_TIMEOUT;
1300:src/stm32f1xx_hal_spi.c ****         goto error;
1301:src/stm32f1xx_hal_spi.c ****       }
1302:src/stm32f1xx_hal_spi.c ****     }
1303:src/stm32f1xx_hal_spi.c ****   }
1304:src/stm32f1xx_hal_spi.c **** 
1305:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1306:src/stm32f1xx_hal_spi.c ****   /* Read CRC from DR to close CRC calculation process */
1307:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
1308:src/stm32f1xx_hal_spi.c ****   {
1309:src/stm32f1xx_hal_spi.c ****     /* Wait until TXE flag */
1310:src/stm32f1xx_hal_spi.c ****     if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
1311:src/stm32f1xx_hal_spi.c ****     {
1312:src/stm32f1xx_hal_spi.c ****       /* Error on the CRC reception */
1313:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
1314:src/stm32f1xx_hal_spi.c ****       errorcode = HAL_TIMEOUT;
1315:src/stm32f1xx_hal_spi.c ****       goto error;
1316:src/stm32f1xx_hal_spi.c ****     }
1317:src/stm32f1xx_hal_spi.c ****     /* Read CRC */
1318:src/stm32f1xx_hal_spi.c ****     READ_REG(hspi->Instance->DR);
1319:src/stm32f1xx_hal_spi.c ****   }
1320:src/stm32f1xx_hal_spi.c **** 
1321:src/stm32f1xx_hal_spi.c ****   /* Check if CRC error occurred */
1322:src/stm32f1xx_hal_spi.c ****   if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
1323:src/stm32f1xx_hal_spi.c ****   {
1324:src/stm32f1xx_hal_spi.c ****     /* Check if CRC error is valid or not (workaround to be applied or not) */
1325:src/stm32f1xx_hal_spi.c ****     if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
1326:src/stm32f1xx_hal_spi.c ****     {
1327:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
1328:src/stm32f1xx_hal_spi.c **** 
1329:src/stm32f1xx_hal_spi.c ****       /* Reset CRC Calculation */
1330:src/stm32f1xx_hal_spi.c ****       SPI_RESET_CRC(hspi);
1331:src/stm32f1xx_hal_spi.c **** 
1332:src/stm32f1xx_hal_spi.c ****       errorcode = HAL_ERROR;
1333:src/stm32f1xx_hal_spi.c ****     }
1334:src/stm32f1xx_hal_spi.c ****     else
1335:src/stm32f1xx_hal_spi.c ****     {
1336:src/stm32f1xx_hal_spi.c ****       __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
1337:src/stm32f1xx_hal_spi.c ****     }
1338:src/stm32f1xx_hal_spi.c ****   }
1339:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1340:src/stm32f1xx_hal_spi.c **** 
1341:src/stm32f1xx_hal_spi.c ****   /* Check the end of the transaction */
1342:src/stm32f1xx_hal_spi.c ****   if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
1343:src/stm32f1xx_hal_spi.c ****   {
1344:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
1345:src/stm32f1xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
1346:src/stm32f1xx_hal_spi.c ****     goto error;
1347:src/stm32f1xx_hal_spi.c ****   }
1348:src/stm32f1xx_hal_spi.c **** 
ARM GAS  /tmp/ccdPJtdr.s 			page 26


1349:src/stm32f1xx_hal_spi.c ****   /* Clear overrun flag in 2 Lines communication mode because received is not read */
1350:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
1351:src/stm32f1xx_hal_spi.c ****   {
1352:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_CLEAR_OVRFLAG(hspi);
1353:src/stm32f1xx_hal_spi.c ****   }
1354:src/stm32f1xx_hal_spi.c **** 
1355:src/stm32f1xx_hal_spi.c **** error :
1356:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
1357:src/stm32f1xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
1358:src/stm32f1xx_hal_spi.c ****   return errorcode;
1359:src/stm32f1xx_hal_spi.c **** }
1360:src/stm32f1xx_hal_spi.c **** 
1361:src/stm32f1xx_hal_spi.c **** /**
1362:src/stm32f1xx_hal_spi.c ****   * @brief  Transmit an amount of data in non-blocking mode with Interrupt.
1363:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
1364:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
1365:src/stm32f1xx_hal_spi.c ****   * @param  pData pointer to data buffer
1366:src/stm32f1xx_hal_spi.c ****   * @param  Size amount of data to be sent
1367:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
1368:src/stm32f1xx_hal_spi.c ****   */
1369:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
1370:src/stm32f1xx_hal_spi.c **** {
1371:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
1372:src/stm32f1xx_hal_spi.c **** 
1373:src/stm32f1xx_hal_spi.c ****   /* Check Direction parameter */
1374:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
1375:src/stm32f1xx_hal_spi.c **** 
1376:src/stm32f1xx_hal_spi.c ****   /* Process Locked */
1377:src/stm32f1xx_hal_spi.c ****   __HAL_LOCK(hspi);
1378:src/stm32f1xx_hal_spi.c **** 
1379:src/stm32f1xx_hal_spi.c ****   if ((pData == NULL) || (Size == 0U))
1380:src/stm32f1xx_hal_spi.c ****   {
1381:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
1382:src/stm32f1xx_hal_spi.c ****     goto error;
1383:src/stm32f1xx_hal_spi.c ****   }
1384:src/stm32f1xx_hal_spi.c **** 
1385:src/stm32f1xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_READY)
1386:src/stm32f1xx_hal_spi.c ****   {
1387:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_BUSY;
1388:src/stm32f1xx_hal_spi.c ****     goto error;
1389:src/stm32f1xx_hal_spi.c ****   }
1390:src/stm32f1xx_hal_spi.c **** 
1391:src/stm32f1xx_hal_spi.c ****   /* Set the transaction information */
1392:src/stm32f1xx_hal_spi.c ****   hspi->State       = HAL_SPI_STATE_BUSY_TX;
1393:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
1394:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pData;
1395:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = Size;
1396:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = Size;
1397:src/stm32f1xx_hal_spi.c **** 
1398:src/stm32f1xx_hal_spi.c ****   /* Init field not used in handle to zero */
1399:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)NULL;
1400:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = 0U;
1401:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = 0U;
1402:src/stm32f1xx_hal_spi.c ****   hspi->RxISR       = NULL;
1403:src/stm32f1xx_hal_spi.c **** 
1404:src/stm32f1xx_hal_spi.c ****   /* Set the function for IT treatment */
1405:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
ARM GAS  /tmp/ccdPJtdr.s 			page 27


1406:src/stm32f1xx_hal_spi.c ****   {
1407:src/stm32f1xx_hal_spi.c ****     hspi->TxISR = SPI_TxISR_16BIT;
1408:src/stm32f1xx_hal_spi.c ****   }
1409:src/stm32f1xx_hal_spi.c ****   else
1410:src/stm32f1xx_hal_spi.c ****   {
1411:src/stm32f1xx_hal_spi.c ****     hspi->TxISR = SPI_TxISR_8BIT;
1412:src/stm32f1xx_hal_spi.c ****   }
1413:src/stm32f1xx_hal_spi.c **** 
1414:src/stm32f1xx_hal_spi.c ****   /* Configure communication direction : 1Line */
1415:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
1416:src/stm32f1xx_hal_spi.c ****   {
1417:src/stm32f1xx_hal_spi.c ****     SPI_1LINE_TX(hspi);
1418:src/stm32f1xx_hal_spi.c ****   }
1419:src/stm32f1xx_hal_spi.c **** 
1420:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1421:src/stm32f1xx_hal_spi.c ****   /* Reset CRC Calculation */
1422:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
1423:src/stm32f1xx_hal_spi.c ****   {
1424:src/stm32f1xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
1425:src/stm32f1xx_hal_spi.c ****   }
1426:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1427:src/stm32f1xx_hal_spi.c **** 
1428:src/stm32f1xx_hal_spi.c ****   /* Enable TXE and ERR interrupt */
1429:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
1430:src/stm32f1xx_hal_spi.c **** 
1431:src/stm32f1xx_hal_spi.c **** 
1432:src/stm32f1xx_hal_spi.c ****   /* Check if the SPI is already enabled */
1433:src/stm32f1xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
1434:src/stm32f1xx_hal_spi.c ****   {
1435:src/stm32f1xx_hal_spi.c ****     /* Enable SPI peripheral */
1436:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
1437:src/stm32f1xx_hal_spi.c ****   }
1438:src/stm32f1xx_hal_spi.c **** 
1439:src/stm32f1xx_hal_spi.c **** error :
1440:src/stm32f1xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
1441:src/stm32f1xx_hal_spi.c ****   return errorcode;
1442:src/stm32f1xx_hal_spi.c **** }
1443:src/stm32f1xx_hal_spi.c **** 
1444:src/stm32f1xx_hal_spi.c **** /**
1445:src/stm32f1xx_hal_spi.c ****   * @brief  Receive an amount of data in non-blocking mode with Interrupt.
1446:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
1447:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
1448:src/stm32f1xx_hal_spi.c ****   * @param  pData pointer to data buffer
1449:src/stm32f1xx_hal_spi.c ****   * @param  Size amount of data to be sent
1450:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
1451:src/stm32f1xx_hal_spi.c ****   */
1452:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
1453:src/stm32f1xx_hal_spi.c **** {
1454:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
1455:src/stm32f1xx_hal_spi.c **** 
1456:src/stm32f1xx_hal_spi.c ****   if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
1457:src/stm32f1xx_hal_spi.c ****   {
1458:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_BUSY_RX;
1459:src/stm32f1xx_hal_spi.c ****     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line 
1460:src/stm32f1xx_hal_spi.c ****     return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
1461:src/stm32f1xx_hal_spi.c ****   }
1462:src/stm32f1xx_hal_spi.c **** 
ARM GAS  /tmp/ccdPJtdr.s 			page 28


1463:src/stm32f1xx_hal_spi.c ****   /* Process Locked */
1464:src/stm32f1xx_hal_spi.c ****   __HAL_LOCK(hspi);
1465:src/stm32f1xx_hal_spi.c **** 
1466:src/stm32f1xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_READY)
1467:src/stm32f1xx_hal_spi.c ****   {
1468:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_BUSY;
1469:src/stm32f1xx_hal_spi.c ****     goto error;
1470:src/stm32f1xx_hal_spi.c ****   }
1471:src/stm32f1xx_hal_spi.c **** 
1472:src/stm32f1xx_hal_spi.c ****   if ((pData == NULL) || (Size == 0U))
1473:src/stm32f1xx_hal_spi.c ****   {
1474:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
1475:src/stm32f1xx_hal_spi.c ****     goto error;
1476:src/stm32f1xx_hal_spi.c ****   }
1477:src/stm32f1xx_hal_spi.c **** 
1478:src/stm32f1xx_hal_spi.c ****   /* Set the transaction information */
1479:src/stm32f1xx_hal_spi.c ****   hspi->State       = HAL_SPI_STATE_BUSY_RX;
1480:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
1481:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pData;
1482:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = Size;
1483:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = Size;
1484:src/stm32f1xx_hal_spi.c **** 
1485:src/stm32f1xx_hal_spi.c ****   /* Init field not used in handle to zero */
1486:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)NULL;
1487:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = 0U;
1488:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = 0U;
1489:src/stm32f1xx_hal_spi.c ****   hspi->TxISR       = NULL;
1490:src/stm32f1xx_hal_spi.c **** 
1491:src/stm32f1xx_hal_spi.c ****   /* Set the function for IT treatment */
1492:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
1493:src/stm32f1xx_hal_spi.c ****   {
1494:src/stm32f1xx_hal_spi.c ****     hspi->RxISR = SPI_RxISR_16BIT;
1495:src/stm32f1xx_hal_spi.c ****   }
1496:src/stm32f1xx_hal_spi.c ****   else
1497:src/stm32f1xx_hal_spi.c ****   {
1498:src/stm32f1xx_hal_spi.c ****     hspi->RxISR = SPI_RxISR_8BIT;
1499:src/stm32f1xx_hal_spi.c ****   }
1500:src/stm32f1xx_hal_spi.c **** 
1501:src/stm32f1xx_hal_spi.c ****   /* Configure communication direction : 1Line */
1502:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
1503:src/stm32f1xx_hal_spi.c ****   {
1504:src/stm32f1xx_hal_spi.c ****     SPI_1LINE_RX(hspi);
1505:src/stm32f1xx_hal_spi.c ****   }
1506:src/stm32f1xx_hal_spi.c **** 
1507:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1508:src/stm32f1xx_hal_spi.c ****   /* Reset CRC Calculation */
1509:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
1510:src/stm32f1xx_hal_spi.c ****   {
1511:src/stm32f1xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
1512:src/stm32f1xx_hal_spi.c ****   }
1513:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1514:src/stm32f1xx_hal_spi.c **** 
1515:src/stm32f1xx_hal_spi.c ****   /* Enable TXE and ERR interrupt */
1516:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
1517:src/stm32f1xx_hal_spi.c **** 
1518:src/stm32f1xx_hal_spi.c ****   /* Note : The SPI must be enabled after unlocking current process
1519:src/stm32f1xx_hal_spi.c ****             to avoid the risk of SPI interrupt handle execution before current
ARM GAS  /tmp/ccdPJtdr.s 			page 29


1520:src/stm32f1xx_hal_spi.c ****             process unlock */
1521:src/stm32f1xx_hal_spi.c **** 
1522:src/stm32f1xx_hal_spi.c ****   /* Check if the SPI is already enabled */
1523:src/stm32f1xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
1524:src/stm32f1xx_hal_spi.c ****   {
1525:src/stm32f1xx_hal_spi.c ****     /* Enable SPI peripheral */
1526:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
1527:src/stm32f1xx_hal_spi.c ****   }
1528:src/stm32f1xx_hal_spi.c **** 
1529:src/stm32f1xx_hal_spi.c **** error :
1530:src/stm32f1xx_hal_spi.c ****   /* Process Unlocked */
1531:src/stm32f1xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
1532:src/stm32f1xx_hal_spi.c ****   return errorcode;
1533:src/stm32f1xx_hal_spi.c **** }
1534:src/stm32f1xx_hal_spi.c **** 
1535:src/stm32f1xx_hal_spi.c **** /**
1536:src/stm32f1xx_hal_spi.c ****   * @brief  Transmit and Receive an amount of data in non-blocking mode with Interrupt.
1537:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
1538:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
1539:src/stm32f1xx_hal_spi.c ****   * @param  pTxData pointer to transmission data buffer
1540:src/stm32f1xx_hal_spi.c ****   * @param  pRxData pointer to reception data buffer
1541:src/stm32f1xx_hal_spi.c ****   * @param  Size amount of data to be sent and received
1542:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
1543:src/stm32f1xx_hal_spi.c ****   */
1544:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pR
1545:src/stm32f1xx_hal_spi.c **** {
1546:src/stm32f1xx_hal_spi.c ****   uint32_t             tmp_mode;
1547:src/stm32f1xx_hal_spi.c ****   HAL_SPI_StateTypeDef tmp_state;
1548:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef    errorcode = HAL_OK;
1549:src/stm32f1xx_hal_spi.c **** 
1550:src/stm32f1xx_hal_spi.c ****   /* Check Direction parameter */
1551:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
1552:src/stm32f1xx_hal_spi.c **** 
1553:src/stm32f1xx_hal_spi.c ****   /* Process locked */
1554:src/stm32f1xx_hal_spi.c ****   __HAL_LOCK(hspi);
1555:src/stm32f1xx_hal_spi.c **** 
1556:src/stm32f1xx_hal_spi.c ****   /* Init temporary variables */
1557:src/stm32f1xx_hal_spi.c ****   tmp_state           = hspi->State;
1558:src/stm32f1xx_hal_spi.c ****   tmp_mode            = hspi->Init.Mode;
1559:src/stm32f1xx_hal_spi.c **** 
1560:src/stm32f1xx_hal_spi.c ****   if (!((tmp_state == HAL_SPI_STATE_READY) || \
1561:src/stm32f1xx_hal_spi.c ****         ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_st
1562:src/stm32f1xx_hal_spi.c ****   {
1563:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_BUSY;
1564:src/stm32f1xx_hal_spi.c ****     goto error;
1565:src/stm32f1xx_hal_spi.c ****   }
1566:src/stm32f1xx_hal_spi.c **** 
1567:src/stm32f1xx_hal_spi.c ****   if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
1568:src/stm32f1xx_hal_spi.c ****   {
1569:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
1570:src/stm32f1xx_hal_spi.c ****     goto error;
1571:src/stm32f1xx_hal_spi.c ****   }
1572:src/stm32f1xx_hal_spi.c **** 
1573:src/stm32f1xx_hal_spi.c ****   /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
1574:src/stm32f1xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_BUSY_RX)
1575:src/stm32f1xx_hal_spi.c ****   {
1576:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
ARM GAS  /tmp/ccdPJtdr.s 			page 30


1577:src/stm32f1xx_hal_spi.c ****   }
1578:src/stm32f1xx_hal_spi.c **** 
1579:src/stm32f1xx_hal_spi.c ****   /* Set the transaction information */
1580:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
1581:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pTxData;
1582:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = Size;
1583:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = Size;
1584:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pRxData;
1585:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = Size;
1586:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = Size;
1587:src/stm32f1xx_hal_spi.c **** 
1588:src/stm32f1xx_hal_spi.c ****   /* Set the function for IT treatment */
1589:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
1590:src/stm32f1xx_hal_spi.c ****   {
1591:src/stm32f1xx_hal_spi.c ****     hspi->RxISR     = SPI_2linesRxISR_16BIT;
1592:src/stm32f1xx_hal_spi.c ****     hspi->TxISR     = SPI_2linesTxISR_16BIT;
1593:src/stm32f1xx_hal_spi.c ****   }
1594:src/stm32f1xx_hal_spi.c ****   else
1595:src/stm32f1xx_hal_spi.c ****   {
1596:src/stm32f1xx_hal_spi.c ****     hspi->RxISR     = SPI_2linesRxISR_8BIT;
1597:src/stm32f1xx_hal_spi.c ****     hspi->TxISR     = SPI_2linesTxISR_8BIT;
1598:src/stm32f1xx_hal_spi.c ****   }
1599:src/stm32f1xx_hal_spi.c **** 
1600:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1601:src/stm32f1xx_hal_spi.c ****   /* Reset CRC Calculation */
1602:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
1603:src/stm32f1xx_hal_spi.c ****   {
1604:src/stm32f1xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
1605:src/stm32f1xx_hal_spi.c ****   }
1606:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1607:src/stm32f1xx_hal_spi.c **** 
1608:src/stm32f1xx_hal_spi.c ****   /* Enable TXE, RXNE and ERR interrupt */
1609:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
1610:src/stm32f1xx_hal_spi.c **** 
1611:src/stm32f1xx_hal_spi.c ****   /* Check if the SPI is already enabled */
1612:src/stm32f1xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
1613:src/stm32f1xx_hal_spi.c ****   {
1614:src/stm32f1xx_hal_spi.c ****     /* Enable SPI peripheral */
1615:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
1616:src/stm32f1xx_hal_spi.c ****   }
1617:src/stm32f1xx_hal_spi.c **** 
1618:src/stm32f1xx_hal_spi.c **** error :
1619:src/stm32f1xx_hal_spi.c ****   /* Process Unlocked */
1620:src/stm32f1xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
1621:src/stm32f1xx_hal_spi.c ****   return errorcode;
1622:src/stm32f1xx_hal_spi.c **** }
1623:src/stm32f1xx_hal_spi.c **** 
1624:src/stm32f1xx_hal_spi.c **** /**
1625:src/stm32f1xx_hal_spi.c ****   * @brief  Transmit an amount of data in non-blocking mode with DMA.
1626:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
1627:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
1628:src/stm32f1xx_hal_spi.c ****   * @param  pData pointer to data buffer
1629:src/stm32f1xx_hal_spi.c ****   * @param  Size amount of data to be sent
1630:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
1631:src/stm32f1xx_hal_spi.c ****   */
1632:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
1633:src/stm32f1xx_hal_spi.c **** {
ARM GAS  /tmp/ccdPJtdr.s 			page 31


1634:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
1635:src/stm32f1xx_hal_spi.c **** 
1636:src/stm32f1xx_hal_spi.c ****   /* Check tx dma handle */
1637:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
1638:src/stm32f1xx_hal_spi.c **** 
1639:src/stm32f1xx_hal_spi.c ****   /* Check Direction parameter */
1640:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
1641:src/stm32f1xx_hal_spi.c **** 
1642:src/stm32f1xx_hal_spi.c ****   /* Process Locked */
1643:src/stm32f1xx_hal_spi.c ****   __HAL_LOCK(hspi);
1644:src/stm32f1xx_hal_spi.c **** 
1645:src/stm32f1xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_READY)
1646:src/stm32f1xx_hal_spi.c ****   {
1647:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_BUSY;
1648:src/stm32f1xx_hal_spi.c ****     goto error;
1649:src/stm32f1xx_hal_spi.c ****   }
1650:src/stm32f1xx_hal_spi.c **** 
1651:src/stm32f1xx_hal_spi.c ****   if ((pData == NULL) || (Size == 0U))
1652:src/stm32f1xx_hal_spi.c ****   {
1653:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
1654:src/stm32f1xx_hal_spi.c ****     goto error;
1655:src/stm32f1xx_hal_spi.c ****   }
1656:src/stm32f1xx_hal_spi.c **** 
1657:src/stm32f1xx_hal_spi.c ****   /* Set the transaction information */
1658:src/stm32f1xx_hal_spi.c ****   hspi->State       = HAL_SPI_STATE_BUSY_TX;
1659:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
1660:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pData;
1661:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = Size;
1662:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = Size;
1663:src/stm32f1xx_hal_spi.c **** 
1664:src/stm32f1xx_hal_spi.c ****   /* Init field not used in handle to zero */
1665:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)NULL;
1666:src/stm32f1xx_hal_spi.c ****   hspi->TxISR       = NULL;
1667:src/stm32f1xx_hal_spi.c ****   hspi->RxISR       = NULL;
1668:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = 0U;
1669:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = 0U;
1670:src/stm32f1xx_hal_spi.c **** 
1671:src/stm32f1xx_hal_spi.c ****   /* Configure communication direction : 1Line */
1672:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
1673:src/stm32f1xx_hal_spi.c ****   {
1674:src/stm32f1xx_hal_spi.c ****     SPI_1LINE_TX(hspi);
1675:src/stm32f1xx_hal_spi.c ****   }
1676:src/stm32f1xx_hal_spi.c **** 
1677:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1678:src/stm32f1xx_hal_spi.c ****   /* Reset CRC Calculation */
1679:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
1680:src/stm32f1xx_hal_spi.c ****   {
1681:src/stm32f1xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
1682:src/stm32f1xx_hal_spi.c ****   }
1683:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1684:src/stm32f1xx_hal_spi.c **** 
1685:src/stm32f1xx_hal_spi.c ****   /* Set the SPI TxDMA Half transfer complete callback */
1686:src/stm32f1xx_hal_spi.c ****   hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
1687:src/stm32f1xx_hal_spi.c **** 
1688:src/stm32f1xx_hal_spi.c ****   /* Set the SPI TxDMA transfer complete callback */
1689:src/stm32f1xx_hal_spi.c ****   hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
1690:src/stm32f1xx_hal_spi.c **** 
ARM GAS  /tmp/ccdPJtdr.s 			page 32


1691:src/stm32f1xx_hal_spi.c ****   /* Set the DMA error callback */
1692:src/stm32f1xx_hal_spi.c ****   hspi->hdmatx->XferErrorCallback = SPI_DMAError;
1693:src/stm32f1xx_hal_spi.c **** 
1694:src/stm32f1xx_hal_spi.c ****   /* Set the DMA AbortCpltCallback */
1695:src/stm32f1xx_hal_spi.c ****   hspi->hdmatx->XferAbortCallback = NULL;
1696:src/stm32f1xx_hal_spi.c **** 
1697:src/stm32f1xx_hal_spi.c ****   /* Enable the Tx DMA Stream/Channel */
1698:src/stm32f1xx_hal_spi.c ****   if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instanc
1699:src/stm32f1xx_hal_spi.c ****                                  hspi->TxXferCount))
1700:src/stm32f1xx_hal_spi.c ****   {
1701:src/stm32f1xx_hal_spi.c ****     /* Update SPI error code */
1702:src/stm32f1xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
1703:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
1704:src/stm32f1xx_hal_spi.c **** 
1705:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
1706:src/stm32f1xx_hal_spi.c ****     goto error;
1707:src/stm32f1xx_hal_spi.c ****   }
1708:src/stm32f1xx_hal_spi.c **** 
1709:src/stm32f1xx_hal_spi.c ****   /* Check if the SPI is already enabled */
1710:src/stm32f1xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
1711:src/stm32f1xx_hal_spi.c ****   {
1712:src/stm32f1xx_hal_spi.c ****     /* Enable SPI peripheral */
1713:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
1714:src/stm32f1xx_hal_spi.c ****   }
1715:src/stm32f1xx_hal_spi.c **** 
1716:src/stm32f1xx_hal_spi.c ****   /* Enable the SPI Error Interrupt Bit */
1717:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
1718:src/stm32f1xx_hal_spi.c **** 
1719:src/stm32f1xx_hal_spi.c ****   /* Enable Tx DMA Request */
1720:src/stm32f1xx_hal_spi.c ****   SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
1721:src/stm32f1xx_hal_spi.c **** 
1722:src/stm32f1xx_hal_spi.c **** error :
1723:src/stm32f1xx_hal_spi.c ****   /* Process Unlocked */
1724:src/stm32f1xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
1725:src/stm32f1xx_hal_spi.c ****   return errorcode;
1726:src/stm32f1xx_hal_spi.c **** }
1727:src/stm32f1xx_hal_spi.c **** 
1728:src/stm32f1xx_hal_spi.c **** /**
1729:src/stm32f1xx_hal_spi.c ****   * @brief  Receive an amount of data in non-blocking mode with DMA.
1730:src/stm32f1xx_hal_spi.c ****   * @note   In case of MASTER mode and SPI_DIRECTION_2LINES direction, hdmatx shall be defined.
1731:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
1732:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
1733:src/stm32f1xx_hal_spi.c ****   * @param  pData pointer to data buffer
1734:src/stm32f1xx_hal_spi.c ****   * @note   When the CRC feature is enabled the pData Length must be Size + 1.
1735:src/stm32f1xx_hal_spi.c ****   * @param  Size amount of data to be sent
1736:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
1737:src/stm32f1xx_hal_spi.c ****   */
1738:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
1739:src/stm32f1xx_hal_spi.c **** {
1740:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
1741:src/stm32f1xx_hal_spi.c **** 
1742:src/stm32f1xx_hal_spi.c ****   /* Check rx dma handle */
1743:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
1744:src/stm32f1xx_hal_spi.c **** 
1745:src/stm32f1xx_hal_spi.c ****   if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
1746:src/stm32f1xx_hal_spi.c ****   {
1747:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_BUSY_RX;
ARM GAS  /tmp/ccdPJtdr.s 			page 33


1748:src/stm32f1xx_hal_spi.c **** 
1749:src/stm32f1xx_hal_spi.c ****     /* Check tx dma handle */
1750:src/stm32f1xx_hal_spi.c ****     assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
1751:src/stm32f1xx_hal_spi.c **** 
1752:src/stm32f1xx_hal_spi.c ****     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line 
1753:src/stm32f1xx_hal_spi.c ****     return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
1754:src/stm32f1xx_hal_spi.c ****   }
1755:src/stm32f1xx_hal_spi.c **** 
1756:src/stm32f1xx_hal_spi.c ****   /* Process Locked */
1757:src/stm32f1xx_hal_spi.c ****   __HAL_LOCK(hspi);
1758:src/stm32f1xx_hal_spi.c **** 
1759:src/stm32f1xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_READY)
1760:src/stm32f1xx_hal_spi.c ****   {
1761:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_BUSY;
1762:src/stm32f1xx_hal_spi.c ****     goto error;
1763:src/stm32f1xx_hal_spi.c ****   }
1764:src/stm32f1xx_hal_spi.c **** 
1765:src/stm32f1xx_hal_spi.c ****   if ((pData == NULL) || (Size == 0U))
1766:src/stm32f1xx_hal_spi.c ****   {
1767:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
1768:src/stm32f1xx_hal_spi.c ****     goto error;
1769:src/stm32f1xx_hal_spi.c ****   }
1770:src/stm32f1xx_hal_spi.c **** 
1771:src/stm32f1xx_hal_spi.c ****   /* Set the transaction information */
1772:src/stm32f1xx_hal_spi.c ****   hspi->State       = HAL_SPI_STATE_BUSY_RX;
1773:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
1774:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pData;
1775:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = Size;
1776:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = Size;
1777:src/stm32f1xx_hal_spi.c **** 
1778:src/stm32f1xx_hal_spi.c ****   /*Init field not used in handle to zero */
1779:src/stm32f1xx_hal_spi.c ****   hspi->RxISR       = NULL;
1780:src/stm32f1xx_hal_spi.c ****   hspi->TxISR       = NULL;
1781:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = 0U;
1782:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = 0U;
1783:src/stm32f1xx_hal_spi.c **** 
1784:src/stm32f1xx_hal_spi.c ****   /* Configure communication direction : 1Line */
1785:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
1786:src/stm32f1xx_hal_spi.c ****   {
1787:src/stm32f1xx_hal_spi.c ****     SPI_1LINE_RX(hspi);
1788:src/stm32f1xx_hal_spi.c ****   }
1789:src/stm32f1xx_hal_spi.c **** 
1790:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1791:src/stm32f1xx_hal_spi.c ****   /* Reset CRC Calculation */
1792:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
1793:src/stm32f1xx_hal_spi.c ****   {
1794:src/stm32f1xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
1795:src/stm32f1xx_hal_spi.c ****   }
1796:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1797:src/stm32f1xx_hal_spi.c **** 
1798:src/stm32f1xx_hal_spi.c ****   /* Set the SPI RxDMA Half transfer complete callback */
1799:src/stm32f1xx_hal_spi.c ****   hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
1800:src/stm32f1xx_hal_spi.c **** 
1801:src/stm32f1xx_hal_spi.c ****   /* Set the SPI Rx DMA transfer complete callback */
1802:src/stm32f1xx_hal_spi.c ****   hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
1803:src/stm32f1xx_hal_spi.c **** 
1804:src/stm32f1xx_hal_spi.c ****   /* Set the DMA error callback */
ARM GAS  /tmp/ccdPJtdr.s 			page 34


1805:src/stm32f1xx_hal_spi.c ****   hspi->hdmarx->XferErrorCallback = SPI_DMAError;
1806:src/stm32f1xx_hal_spi.c **** 
1807:src/stm32f1xx_hal_spi.c ****   /* Set the DMA AbortCpltCallback */
1808:src/stm32f1xx_hal_spi.c ****   hspi->hdmarx->XferAbortCallback = NULL;
1809:src/stm32f1xx_hal_spi.c **** 
1810:src/stm32f1xx_hal_spi.c ****   /* Enable the Rx DMA Stream/Channel  */
1811:src/stm32f1xx_hal_spi.c ****   if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBu
1812:src/stm32f1xx_hal_spi.c ****                                  hspi->RxXferCount))
1813:src/stm32f1xx_hal_spi.c ****   {
1814:src/stm32f1xx_hal_spi.c ****     /* Update SPI error code */
1815:src/stm32f1xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
1816:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
1817:src/stm32f1xx_hal_spi.c **** 
1818:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
1819:src/stm32f1xx_hal_spi.c ****     goto error;
1820:src/stm32f1xx_hal_spi.c ****   }
1821:src/stm32f1xx_hal_spi.c **** 
1822:src/stm32f1xx_hal_spi.c ****   /* Check if the SPI is already enabled */
1823:src/stm32f1xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
1824:src/stm32f1xx_hal_spi.c ****   {
1825:src/stm32f1xx_hal_spi.c ****     /* Enable SPI peripheral */
1826:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
1827:src/stm32f1xx_hal_spi.c ****   }
1828:src/stm32f1xx_hal_spi.c **** 
1829:src/stm32f1xx_hal_spi.c ****   /* Enable the SPI Error Interrupt Bit */
1830:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
1831:src/stm32f1xx_hal_spi.c **** 
1832:src/stm32f1xx_hal_spi.c ****   /* Enable Rx DMA Request */
1833:src/stm32f1xx_hal_spi.c ****   SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
1834:src/stm32f1xx_hal_spi.c **** 
1835:src/stm32f1xx_hal_spi.c **** error:
1836:src/stm32f1xx_hal_spi.c ****   /* Process Unlocked */
1837:src/stm32f1xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
1838:src/stm32f1xx_hal_spi.c ****   return errorcode;
1839:src/stm32f1xx_hal_spi.c **** }
1840:src/stm32f1xx_hal_spi.c **** 
1841:src/stm32f1xx_hal_spi.c **** /**
1842:src/stm32f1xx_hal_spi.c ****   * @brief  Transmit and Receive an amount of data in non-blocking mode with DMA.
1843:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
1844:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
1845:src/stm32f1xx_hal_spi.c ****   * @param  pTxData pointer to transmission data buffer
1846:src/stm32f1xx_hal_spi.c ****   * @param  pRxData pointer to reception data buffer
1847:src/stm32f1xx_hal_spi.c ****   * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
1848:src/stm32f1xx_hal_spi.c ****   * @param  Size amount of data to be sent
1849:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
1850:src/stm32f1xx_hal_spi.c ****   */
1851:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *p
1852:src/stm32f1xx_hal_spi.c ****                                               uint16_t Size)
1853:src/stm32f1xx_hal_spi.c **** {
1854:src/stm32f1xx_hal_spi.c ****   uint32_t             tmp_mode;
1855:src/stm32f1xx_hal_spi.c ****   HAL_SPI_StateTypeDef tmp_state;
1856:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
1857:src/stm32f1xx_hal_spi.c **** 
1858:src/stm32f1xx_hal_spi.c ****   /* Check rx & tx dma handles */
1859:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
1860:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
1861:src/stm32f1xx_hal_spi.c **** 
ARM GAS  /tmp/ccdPJtdr.s 			page 35


1862:src/stm32f1xx_hal_spi.c ****   /* Check Direction parameter */
1863:src/stm32f1xx_hal_spi.c ****   assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
1864:src/stm32f1xx_hal_spi.c **** 
1865:src/stm32f1xx_hal_spi.c ****   /* Process locked */
1866:src/stm32f1xx_hal_spi.c ****   __HAL_LOCK(hspi);
1867:src/stm32f1xx_hal_spi.c **** 
1868:src/stm32f1xx_hal_spi.c ****   /* Init temporary variables */
1869:src/stm32f1xx_hal_spi.c ****   tmp_state           = hspi->State;
1870:src/stm32f1xx_hal_spi.c ****   tmp_mode            = hspi->Init.Mode;
1871:src/stm32f1xx_hal_spi.c **** 
1872:src/stm32f1xx_hal_spi.c ****   if (!((tmp_state == HAL_SPI_STATE_READY) ||
1873:src/stm32f1xx_hal_spi.c ****         ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_st
1874:src/stm32f1xx_hal_spi.c ****   {
1875:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_BUSY;
1876:src/stm32f1xx_hal_spi.c ****     goto error;
1877:src/stm32f1xx_hal_spi.c ****   }
1878:src/stm32f1xx_hal_spi.c **** 
1879:src/stm32f1xx_hal_spi.c ****   if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
1880:src/stm32f1xx_hal_spi.c ****   {
1881:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
1882:src/stm32f1xx_hal_spi.c ****     goto error;
1883:src/stm32f1xx_hal_spi.c ****   }
1884:src/stm32f1xx_hal_spi.c **** 
1885:src/stm32f1xx_hal_spi.c ****   /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
1886:src/stm32f1xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_BUSY_RX)
1887:src/stm32f1xx_hal_spi.c ****   {
1888:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
1889:src/stm32f1xx_hal_spi.c ****   }
1890:src/stm32f1xx_hal_spi.c **** 
1891:src/stm32f1xx_hal_spi.c ****   /* Set the transaction information */
1892:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
1893:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pTxData;
1894:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = Size;
1895:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = Size;
1896:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pRxData;
1897:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = Size;
1898:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = Size;
1899:src/stm32f1xx_hal_spi.c **** 
1900:src/stm32f1xx_hal_spi.c ****   /* Init field not used in handle to zero */
1901:src/stm32f1xx_hal_spi.c ****   hspi->RxISR       = NULL;
1902:src/stm32f1xx_hal_spi.c ****   hspi->TxISR       = NULL;
1903:src/stm32f1xx_hal_spi.c **** 
1904:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1905:src/stm32f1xx_hal_spi.c ****   /* Reset CRC Calculation */
1906:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
1907:src/stm32f1xx_hal_spi.c ****   {
1908:src/stm32f1xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
1909:src/stm32f1xx_hal_spi.c ****   }
1910:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1911:src/stm32f1xx_hal_spi.c **** 
1912:src/stm32f1xx_hal_spi.c ****   /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback *
1913:src/stm32f1xx_hal_spi.c ****   if (hspi->State == HAL_SPI_STATE_BUSY_RX)
1914:src/stm32f1xx_hal_spi.c ****   {
1915:src/stm32f1xx_hal_spi.c ****     /* Set the SPI Rx DMA Half transfer complete callback */
1916:src/stm32f1xx_hal_spi.c ****     hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
1917:src/stm32f1xx_hal_spi.c ****     hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
1918:src/stm32f1xx_hal_spi.c ****   }
ARM GAS  /tmp/ccdPJtdr.s 			page 36


1919:src/stm32f1xx_hal_spi.c ****   else
1920:src/stm32f1xx_hal_spi.c ****   {
1921:src/stm32f1xx_hal_spi.c ****     /* Set the SPI Tx/Rx DMA Half transfer complete callback */
1922:src/stm32f1xx_hal_spi.c ****     hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
1923:src/stm32f1xx_hal_spi.c ****     hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
1924:src/stm32f1xx_hal_spi.c ****   }
1925:src/stm32f1xx_hal_spi.c **** 
1926:src/stm32f1xx_hal_spi.c ****   /* Set the DMA error callback */
1927:src/stm32f1xx_hal_spi.c ****   hspi->hdmarx->XferErrorCallback = SPI_DMAError;
1928:src/stm32f1xx_hal_spi.c **** 
1929:src/stm32f1xx_hal_spi.c ****   /* Set the DMA AbortCpltCallback */
1930:src/stm32f1xx_hal_spi.c ****   hspi->hdmarx->XferAbortCallback = NULL;
1931:src/stm32f1xx_hal_spi.c **** 
1932:src/stm32f1xx_hal_spi.c ****   /* Enable the Rx DMA Stream/Channel  */
1933:src/stm32f1xx_hal_spi.c ****   if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBu
1934:src/stm32f1xx_hal_spi.c ****                                  hspi->RxXferCount))
1935:src/stm32f1xx_hal_spi.c ****   {
1936:src/stm32f1xx_hal_spi.c ****     /* Update SPI error code */
1937:src/stm32f1xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
1938:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
1939:src/stm32f1xx_hal_spi.c **** 
1940:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
1941:src/stm32f1xx_hal_spi.c ****     goto error;
1942:src/stm32f1xx_hal_spi.c ****   }
1943:src/stm32f1xx_hal_spi.c **** 
1944:src/stm32f1xx_hal_spi.c ****   /* Enable Rx DMA Request */
1945:src/stm32f1xx_hal_spi.c ****   SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
1946:src/stm32f1xx_hal_spi.c **** 
1947:src/stm32f1xx_hal_spi.c ****   /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
1948:src/stm32f1xx_hal_spi.c ****   is performed in DMA reception complete callback  */
1949:src/stm32f1xx_hal_spi.c ****   hspi->hdmatx->XferHalfCpltCallback = NULL;
1950:src/stm32f1xx_hal_spi.c ****   hspi->hdmatx->XferCpltCallback     = NULL;
1951:src/stm32f1xx_hal_spi.c ****   hspi->hdmatx->XferErrorCallback    = NULL;
1952:src/stm32f1xx_hal_spi.c ****   hspi->hdmatx->XferAbortCallback    = NULL;
1953:src/stm32f1xx_hal_spi.c **** 
1954:src/stm32f1xx_hal_spi.c ****   /* Enable the Tx DMA Stream/Channel  */
1955:src/stm32f1xx_hal_spi.c ****   if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instanc
1956:src/stm32f1xx_hal_spi.c ****                                  hspi->TxXferCount))
1957:src/stm32f1xx_hal_spi.c ****   {
1958:src/stm32f1xx_hal_spi.c ****     /* Update SPI error code */
1959:src/stm32f1xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
1960:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
1961:src/stm32f1xx_hal_spi.c **** 
1962:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
1963:src/stm32f1xx_hal_spi.c ****     goto error;
1964:src/stm32f1xx_hal_spi.c ****   }
1965:src/stm32f1xx_hal_spi.c **** 
1966:src/stm32f1xx_hal_spi.c ****   /* Check if the SPI is already enabled */
1967:src/stm32f1xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
1968:src/stm32f1xx_hal_spi.c ****   {
1969:src/stm32f1xx_hal_spi.c ****     /* Enable SPI peripheral */
1970:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
1971:src/stm32f1xx_hal_spi.c ****   }
1972:src/stm32f1xx_hal_spi.c ****   /* Enable the SPI Error Interrupt Bit */
1973:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
1974:src/stm32f1xx_hal_spi.c **** 
1975:src/stm32f1xx_hal_spi.c ****   /* Enable Tx DMA Request */
ARM GAS  /tmp/ccdPJtdr.s 			page 37


1976:src/stm32f1xx_hal_spi.c ****   SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
1977:src/stm32f1xx_hal_spi.c **** 
1978:src/stm32f1xx_hal_spi.c **** error :
1979:src/stm32f1xx_hal_spi.c ****   /* Process Unlocked */
1980:src/stm32f1xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
1981:src/stm32f1xx_hal_spi.c ****   return errorcode;
1982:src/stm32f1xx_hal_spi.c **** }
1983:src/stm32f1xx_hal_spi.c **** 
1984:src/stm32f1xx_hal_spi.c **** /**
1985:src/stm32f1xx_hal_spi.c ****   * @brief  Abort ongoing transfer (blocking mode).
1986:src/stm32f1xx_hal_spi.c ****   * @param  hspi SPI handle.
1987:src/stm32f1xx_hal_spi.c ****   * @note   This procedure could be used for aborting any ongoing transfer (Tx and Rx),
1988:src/stm32f1xx_hal_spi.c ****   *         started in Interrupt or DMA mode.
1989:src/stm32f1xx_hal_spi.c ****   *         This procedure performs following operations :
1990:src/stm32f1xx_hal_spi.c ****   *           - Disable SPI Interrupts (depending of transfer direction)
1991:src/stm32f1xx_hal_spi.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1992:src/stm32f1xx_hal_spi.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1993:src/stm32f1xx_hal_spi.c ****   *           - Set handle State to READY
1994:src/stm32f1xx_hal_spi.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1995:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
1996:src/stm32f1xx_hal_spi.c ****   */
1997:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
1998:src/stm32f1xx_hal_spi.c **** {
1999:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode;
2000:src/stm32f1xx_hal_spi.c ****   __IO uint32_t count;
2001:src/stm32f1xx_hal_spi.c ****   __IO uint32_t resetcount;
2002:src/stm32f1xx_hal_spi.c **** 
2003:src/stm32f1xx_hal_spi.c ****   /* Initialized local variable  */
2004:src/stm32f1xx_hal_spi.c ****   errorcode = HAL_OK;
2005:src/stm32f1xx_hal_spi.c ****   resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
2006:src/stm32f1xx_hal_spi.c ****   count = resetcount;
2007:src/stm32f1xx_hal_spi.c **** 
2008:src/stm32f1xx_hal_spi.c ****   /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
2009:src/stm32f1xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
2010:src/stm32f1xx_hal_spi.c **** 
2011:src/stm32f1xx_hal_spi.c ****   /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
2012:src/stm32f1xx_hal_spi.c ****   if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
2013:src/stm32f1xx_hal_spi.c ****   {
2014:src/stm32f1xx_hal_spi.c ****     hspi->TxISR = SPI_AbortTx_ISR;
2015:src/stm32f1xx_hal_spi.c ****     /* Wait HAL_SPI_STATE_ABORT state */
2016:src/stm32f1xx_hal_spi.c ****     do
2017:src/stm32f1xx_hal_spi.c ****     {
2018:src/stm32f1xx_hal_spi.c ****       if (count == 0U)
2019:src/stm32f1xx_hal_spi.c ****       {
2020:src/stm32f1xx_hal_spi.c ****         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2021:src/stm32f1xx_hal_spi.c ****         break;
2022:src/stm32f1xx_hal_spi.c ****       }
2023:src/stm32f1xx_hal_spi.c ****       count--;
2024:src/stm32f1xx_hal_spi.c ****     } while (hspi->State != HAL_SPI_STATE_ABORT);
2025:src/stm32f1xx_hal_spi.c ****     /* Reset Timeout Counter */
2026:src/stm32f1xx_hal_spi.c ****     count = resetcount;
2027:src/stm32f1xx_hal_spi.c ****   }
2028:src/stm32f1xx_hal_spi.c **** 
2029:src/stm32f1xx_hal_spi.c ****   if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
2030:src/stm32f1xx_hal_spi.c ****   {
2031:src/stm32f1xx_hal_spi.c ****     hspi->RxISR = SPI_AbortRx_ISR;
2032:src/stm32f1xx_hal_spi.c ****     /* Wait HAL_SPI_STATE_ABORT state */
ARM GAS  /tmp/ccdPJtdr.s 			page 38


2033:src/stm32f1xx_hal_spi.c ****     do
2034:src/stm32f1xx_hal_spi.c ****     {
2035:src/stm32f1xx_hal_spi.c ****       if (count == 0U)
2036:src/stm32f1xx_hal_spi.c ****       {
2037:src/stm32f1xx_hal_spi.c ****         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2038:src/stm32f1xx_hal_spi.c ****         break;
2039:src/stm32f1xx_hal_spi.c ****       }
2040:src/stm32f1xx_hal_spi.c ****       count--;
2041:src/stm32f1xx_hal_spi.c ****     } while (hspi->State != HAL_SPI_STATE_ABORT);
2042:src/stm32f1xx_hal_spi.c ****     /* Reset Timeout Counter */
2043:src/stm32f1xx_hal_spi.c ****     count = resetcount;
2044:src/stm32f1xx_hal_spi.c ****   }
2045:src/stm32f1xx_hal_spi.c **** 
2046:src/stm32f1xx_hal_spi.c ****   /* Disable the SPI DMA Tx request if enabled */
2047:src/stm32f1xx_hal_spi.c ****   if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
2048:src/stm32f1xx_hal_spi.c ****   {
2049:src/stm32f1xx_hal_spi.c ****     /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
2050:src/stm32f1xx_hal_spi.c ****     if (hspi->hdmatx != NULL)
2051:src/stm32f1xx_hal_spi.c ****     {
2052:src/stm32f1xx_hal_spi.c ****       /* Set the SPI DMA Abort callback :
2053:src/stm32f1xx_hal_spi.c ****       will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
2054:src/stm32f1xx_hal_spi.c ****       hspi->hdmatx->XferAbortCallback = NULL;
2055:src/stm32f1xx_hal_spi.c **** 
2056:src/stm32f1xx_hal_spi.c ****       /* Abort DMA Tx Handle linked to SPI Peripheral */
2057:src/stm32f1xx_hal_spi.c ****       if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
2058:src/stm32f1xx_hal_spi.c ****       {
2059:src/stm32f1xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2060:src/stm32f1xx_hal_spi.c ****       }
2061:src/stm32f1xx_hal_spi.c **** 
2062:src/stm32f1xx_hal_spi.c ****       /* Disable Tx DMA Request */
2063:src/stm32f1xx_hal_spi.c ****       CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
2064:src/stm32f1xx_hal_spi.c **** 
2065:src/stm32f1xx_hal_spi.c ****       /* Wait until TXE flag is set */
2066:src/stm32f1xx_hal_spi.c ****       do
2067:src/stm32f1xx_hal_spi.c ****       {
2068:src/stm32f1xx_hal_spi.c ****         if (count == 0U)
2069:src/stm32f1xx_hal_spi.c ****         {
2070:src/stm32f1xx_hal_spi.c ****           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2071:src/stm32f1xx_hal_spi.c ****           break;
2072:src/stm32f1xx_hal_spi.c ****         }
2073:src/stm32f1xx_hal_spi.c ****         count--;
2074:src/stm32f1xx_hal_spi.c ****       } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
2075:src/stm32f1xx_hal_spi.c ****     }
2076:src/stm32f1xx_hal_spi.c ****   }
2077:src/stm32f1xx_hal_spi.c **** 
2078:src/stm32f1xx_hal_spi.c ****   /* Disable the SPI DMA Rx request if enabled */
2079:src/stm32f1xx_hal_spi.c ****   if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
2080:src/stm32f1xx_hal_spi.c ****   {
2081:src/stm32f1xx_hal_spi.c ****     /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
2082:src/stm32f1xx_hal_spi.c ****     if (hspi->hdmarx != NULL)
2083:src/stm32f1xx_hal_spi.c ****     {
2084:src/stm32f1xx_hal_spi.c ****       /* Set the SPI DMA Abort callback :
2085:src/stm32f1xx_hal_spi.c ****       will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
2086:src/stm32f1xx_hal_spi.c ****       hspi->hdmarx->XferAbortCallback = NULL;
2087:src/stm32f1xx_hal_spi.c **** 
2088:src/stm32f1xx_hal_spi.c ****       /* Abort DMA Rx Handle linked to SPI Peripheral */
2089:src/stm32f1xx_hal_spi.c ****       if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
ARM GAS  /tmp/ccdPJtdr.s 			page 39


2090:src/stm32f1xx_hal_spi.c ****       {
2091:src/stm32f1xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2092:src/stm32f1xx_hal_spi.c ****       }
2093:src/stm32f1xx_hal_spi.c **** 
2094:src/stm32f1xx_hal_spi.c ****       /* Disable peripheral */
2095:src/stm32f1xx_hal_spi.c ****       __HAL_SPI_DISABLE(hspi);
2096:src/stm32f1xx_hal_spi.c **** 
2097:src/stm32f1xx_hal_spi.c ****       /* Disable Rx DMA Request */
2098:src/stm32f1xx_hal_spi.c ****       CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
2099:src/stm32f1xx_hal_spi.c ****     }
2100:src/stm32f1xx_hal_spi.c ****   }
2101:src/stm32f1xx_hal_spi.c ****   /* Reset Tx and Rx transfer counters */
2102:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = 0U;
2103:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = 0U;
2104:src/stm32f1xx_hal_spi.c **** 
2105:src/stm32f1xx_hal_spi.c ****   /* Check error during Abort procedure */
2106:src/stm32f1xx_hal_spi.c ****   if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
2107:src/stm32f1xx_hal_spi.c ****   {
2108:src/stm32f1xx_hal_spi.c ****     /* return HAL_Error in case of error during Abort procedure */
2109:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
2110:src/stm32f1xx_hal_spi.c ****   }
2111:src/stm32f1xx_hal_spi.c ****   else
2112:src/stm32f1xx_hal_spi.c ****   {
2113:src/stm32f1xx_hal_spi.c ****     /* Reset errorCode */
2114:src/stm32f1xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2115:src/stm32f1xx_hal_spi.c ****   }
2116:src/stm32f1xx_hal_spi.c **** 
2117:src/stm32f1xx_hal_spi.c ****   /* Clear the Error flags in the SR register */
2118:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_CLEAR_OVRFLAG(hspi);
2119:src/stm32f1xx_hal_spi.c **** 
2120:src/stm32f1xx_hal_spi.c ****   /* Restore hspi->state to ready */
2121:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
2122:src/stm32f1xx_hal_spi.c **** 
2123:src/stm32f1xx_hal_spi.c ****   return errorcode;
2124:src/stm32f1xx_hal_spi.c **** }
2125:src/stm32f1xx_hal_spi.c **** 
2126:src/stm32f1xx_hal_spi.c **** /**
2127:src/stm32f1xx_hal_spi.c ****   * @brief  Abort ongoing transfer (Interrupt mode).
2128:src/stm32f1xx_hal_spi.c ****   * @param  hspi SPI handle.
2129:src/stm32f1xx_hal_spi.c ****   * @note   This procedure could be used for aborting any ongoing transfer (Tx and Rx),
2130:src/stm32f1xx_hal_spi.c ****   *         started in Interrupt or DMA mode.
2131:src/stm32f1xx_hal_spi.c ****   *         This procedure performs following operations :
2132:src/stm32f1xx_hal_spi.c ****   *           - Disable SPI Interrupts (depending of transfer direction)
2133:src/stm32f1xx_hal_spi.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2134:src/stm32f1xx_hal_spi.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2135:src/stm32f1xx_hal_spi.c ****   *           - Set handle State to READY
2136:src/stm32f1xx_hal_spi.c ****   *           - At abort completion, call user abort complete callback
2137:src/stm32f1xx_hal_spi.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2138:src/stm32f1xx_hal_spi.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2139:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
2140:src/stm32f1xx_hal_spi.c ****   */
2141:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
2142:src/stm32f1xx_hal_spi.c **** {
2143:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode;
2144:src/stm32f1xx_hal_spi.c ****   uint32_t abortcplt ;
2145:src/stm32f1xx_hal_spi.c ****   __IO uint32_t count;
2146:src/stm32f1xx_hal_spi.c ****   __IO uint32_t resetcount;
ARM GAS  /tmp/ccdPJtdr.s 			page 40


2147:src/stm32f1xx_hal_spi.c **** 
2148:src/stm32f1xx_hal_spi.c ****   /* Initialized local variable  */
2149:src/stm32f1xx_hal_spi.c ****   errorcode = HAL_OK;
2150:src/stm32f1xx_hal_spi.c ****   abortcplt = 1U;
2151:src/stm32f1xx_hal_spi.c ****   resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
2152:src/stm32f1xx_hal_spi.c ****   count = resetcount;
2153:src/stm32f1xx_hal_spi.c **** 
2154:src/stm32f1xx_hal_spi.c ****   /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
2155:src/stm32f1xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
2156:src/stm32f1xx_hal_spi.c **** 
2157:src/stm32f1xx_hal_spi.c ****   /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
2158:src/stm32f1xx_hal_spi.c ****   if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
2159:src/stm32f1xx_hal_spi.c ****   {
2160:src/stm32f1xx_hal_spi.c ****     hspi->TxISR = SPI_AbortTx_ISR;
2161:src/stm32f1xx_hal_spi.c ****     /* Wait HAL_SPI_STATE_ABORT state */
2162:src/stm32f1xx_hal_spi.c ****     do
2163:src/stm32f1xx_hal_spi.c ****     {
2164:src/stm32f1xx_hal_spi.c ****       if (count == 0U)
2165:src/stm32f1xx_hal_spi.c ****       {
2166:src/stm32f1xx_hal_spi.c ****         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2167:src/stm32f1xx_hal_spi.c ****         break;
2168:src/stm32f1xx_hal_spi.c ****       }
2169:src/stm32f1xx_hal_spi.c ****       count--;
2170:src/stm32f1xx_hal_spi.c ****     } while (hspi->State != HAL_SPI_STATE_ABORT);
2171:src/stm32f1xx_hal_spi.c ****     /* Reset Timeout Counter */
2172:src/stm32f1xx_hal_spi.c ****     count = resetcount;
2173:src/stm32f1xx_hal_spi.c ****   }
2174:src/stm32f1xx_hal_spi.c **** 
2175:src/stm32f1xx_hal_spi.c ****   if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
2176:src/stm32f1xx_hal_spi.c ****   {
2177:src/stm32f1xx_hal_spi.c ****     hspi->RxISR = SPI_AbortRx_ISR;
2178:src/stm32f1xx_hal_spi.c ****     /* Wait HAL_SPI_STATE_ABORT state */
2179:src/stm32f1xx_hal_spi.c ****     do
2180:src/stm32f1xx_hal_spi.c ****     {
2181:src/stm32f1xx_hal_spi.c ****       if (count == 0U)
2182:src/stm32f1xx_hal_spi.c ****       {
2183:src/stm32f1xx_hal_spi.c ****         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2184:src/stm32f1xx_hal_spi.c ****         break;
2185:src/stm32f1xx_hal_spi.c ****       }
2186:src/stm32f1xx_hal_spi.c ****       count--;
2187:src/stm32f1xx_hal_spi.c ****     } while (hspi->State != HAL_SPI_STATE_ABORT);
2188:src/stm32f1xx_hal_spi.c ****     /* Reset Timeout Counter */
2189:src/stm32f1xx_hal_spi.c ****     count = resetcount;
2190:src/stm32f1xx_hal_spi.c ****   }
2191:src/stm32f1xx_hal_spi.c **** 
2192:src/stm32f1xx_hal_spi.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks sho
2193:src/stm32f1xx_hal_spi.c ****      before any call to DMA Abort functions */
2194:src/stm32f1xx_hal_spi.c ****   /* DMA Tx Handle is valid */
2195:src/stm32f1xx_hal_spi.c ****   if (hspi->hdmatx != NULL)
2196:src/stm32f1xx_hal_spi.c ****   {
2197:src/stm32f1xx_hal_spi.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
2198:src/stm32f1xx_hal_spi.c ****        Otherwise, set it to NULL */
2199:src/stm32f1xx_hal_spi.c ****     if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
2200:src/stm32f1xx_hal_spi.c ****     {
2201:src/stm32f1xx_hal_spi.c ****       hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
2202:src/stm32f1xx_hal_spi.c ****     }
2203:src/stm32f1xx_hal_spi.c ****     else
ARM GAS  /tmp/ccdPJtdr.s 			page 41


2204:src/stm32f1xx_hal_spi.c ****     {
2205:src/stm32f1xx_hal_spi.c ****       hspi->hdmatx->XferAbortCallback = NULL;
2206:src/stm32f1xx_hal_spi.c ****     }
2207:src/stm32f1xx_hal_spi.c ****   }
2208:src/stm32f1xx_hal_spi.c ****   /* DMA Rx Handle is valid */
2209:src/stm32f1xx_hal_spi.c ****   if (hspi->hdmarx != NULL)
2210:src/stm32f1xx_hal_spi.c ****   {
2211:src/stm32f1xx_hal_spi.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
2212:src/stm32f1xx_hal_spi.c ****        Otherwise, set it to NULL */
2213:src/stm32f1xx_hal_spi.c ****     if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
2214:src/stm32f1xx_hal_spi.c ****     {
2215:src/stm32f1xx_hal_spi.c ****       hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
2216:src/stm32f1xx_hal_spi.c ****     }
2217:src/stm32f1xx_hal_spi.c ****     else
2218:src/stm32f1xx_hal_spi.c ****     {
2219:src/stm32f1xx_hal_spi.c ****       hspi->hdmarx->XferAbortCallback = NULL;
2220:src/stm32f1xx_hal_spi.c ****     }
2221:src/stm32f1xx_hal_spi.c ****   }
2222:src/stm32f1xx_hal_spi.c **** 
2223:src/stm32f1xx_hal_spi.c ****   /* Disable the SPI DMA Tx request if enabled */
2224:src/stm32f1xx_hal_spi.c ****   if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
2225:src/stm32f1xx_hal_spi.c ****   {
2226:src/stm32f1xx_hal_spi.c ****     /* Abort the SPI DMA Tx Stream/Channel */
2227:src/stm32f1xx_hal_spi.c ****     if (hspi->hdmatx != NULL)
2228:src/stm32f1xx_hal_spi.c ****     {
2229:src/stm32f1xx_hal_spi.c ****       /* Abort DMA Tx Handle linked to SPI Peripheral */
2230:src/stm32f1xx_hal_spi.c ****       if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
2231:src/stm32f1xx_hal_spi.c ****       {
2232:src/stm32f1xx_hal_spi.c ****         hspi->hdmatx->XferAbortCallback = NULL;
2233:src/stm32f1xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2234:src/stm32f1xx_hal_spi.c ****       }
2235:src/stm32f1xx_hal_spi.c ****       else
2236:src/stm32f1xx_hal_spi.c ****       {
2237:src/stm32f1xx_hal_spi.c ****         abortcplt = 0U;
2238:src/stm32f1xx_hal_spi.c ****       }
2239:src/stm32f1xx_hal_spi.c ****     }
2240:src/stm32f1xx_hal_spi.c ****   }
2241:src/stm32f1xx_hal_spi.c ****   /* Disable the SPI DMA Rx request if enabled */
2242:src/stm32f1xx_hal_spi.c ****   if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
2243:src/stm32f1xx_hal_spi.c ****   {
2244:src/stm32f1xx_hal_spi.c ****     /* Abort the SPI DMA Rx Stream/Channel */
2245:src/stm32f1xx_hal_spi.c ****     if (hspi->hdmarx != NULL)
2246:src/stm32f1xx_hal_spi.c ****     {
2247:src/stm32f1xx_hal_spi.c ****       /* Abort DMA Rx Handle linked to SPI Peripheral */
2248:src/stm32f1xx_hal_spi.c ****       if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
2249:src/stm32f1xx_hal_spi.c ****       {
2250:src/stm32f1xx_hal_spi.c ****         hspi->hdmarx->XferAbortCallback = NULL;
2251:src/stm32f1xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2252:src/stm32f1xx_hal_spi.c ****       }
2253:src/stm32f1xx_hal_spi.c ****       else
2254:src/stm32f1xx_hal_spi.c ****       {
2255:src/stm32f1xx_hal_spi.c ****         abortcplt = 0U;
2256:src/stm32f1xx_hal_spi.c ****       }
2257:src/stm32f1xx_hal_spi.c ****     }
2258:src/stm32f1xx_hal_spi.c ****   }
2259:src/stm32f1xx_hal_spi.c **** 
2260:src/stm32f1xx_hal_spi.c ****   if (abortcplt == 1U)
ARM GAS  /tmp/ccdPJtdr.s 			page 42


2261:src/stm32f1xx_hal_spi.c ****   {
2262:src/stm32f1xx_hal_spi.c ****     /* Reset Tx and Rx transfer counters */
2263:src/stm32f1xx_hal_spi.c ****     hspi->RxXferCount = 0U;
2264:src/stm32f1xx_hal_spi.c ****     hspi->TxXferCount = 0U;
2265:src/stm32f1xx_hal_spi.c **** 
2266:src/stm32f1xx_hal_spi.c ****     /* Check error during Abort procedure */
2267:src/stm32f1xx_hal_spi.c ****     if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
2268:src/stm32f1xx_hal_spi.c ****     {
2269:src/stm32f1xx_hal_spi.c ****       /* return HAL_Error in case of error during Abort procedure */
2270:src/stm32f1xx_hal_spi.c ****       errorcode = HAL_ERROR;
2271:src/stm32f1xx_hal_spi.c ****     }
2272:src/stm32f1xx_hal_spi.c ****     else
2273:src/stm32f1xx_hal_spi.c ****     {
2274:src/stm32f1xx_hal_spi.c ****       /* Reset errorCode */
2275:src/stm32f1xx_hal_spi.c ****       hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2276:src/stm32f1xx_hal_spi.c ****     }
2277:src/stm32f1xx_hal_spi.c **** 
2278:src/stm32f1xx_hal_spi.c ****     /* Clear the Error flags in the SR register */
2279:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_CLEAR_OVRFLAG(hspi);
2280:src/stm32f1xx_hal_spi.c **** 
2281:src/stm32f1xx_hal_spi.c ****     /* Restore hspi->State to Ready */
2282:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
2283:src/stm32f1xx_hal_spi.c **** 
2284:src/stm32f1xx_hal_spi.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2285:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
2286:src/stm32f1xx_hal_spi.c ****     hspi->AbortCpltCallback(hspi);
2287:src/stm32f1xx_hal_spi.c **** #else
2288:src/stm32f1xx_hal_spi.c ****     HAL_SPI_AbortCpltCallback(hspi);
2289:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
2290:src/stm32f1xx_hal_spi.c ****   }
2291:src/stm32f1xx_hal_spi.c **** 
2292:src/stm32f1xx_hal_spi.c ****   return errorcode;
2293:src/stm32f1xx_hal_spi.c **** }
2294:src/stm32f1xx_hal_spi.c **** 
2295:src/stm32f1xx_hal_spi.c **** /**
2296:src/stm32f1xx_hal_spi.c ****   * @brief  Pause the DMA Transfer.
2297:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2298:src/stm32f1xx_hal_spi.c ****   *               the configuration information for the specified SPI module.
2299:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
2300:src/stm32f1xx_hal_spi.c ****   */
2301:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
2302:src/stm32f1xx_hal_spi.c **** {
2303:src/stm32f1xx_hal_spi.c ****   /* Process Locked */
2304:src/stm32f1xx_hal_spi.c ****   __HAL_LOCK(hspi);
2305:src/stm32f1xx_hal_spi.c **** 
2306:src/stm32f1xx_hal_spi.c ****   /* Disable the SPI DMA Tx & Rx requests */
2307:src/stm32f1xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2308:src/stm32f1xx_hal_spi.c **** 
2309:src/stm32f1xx_hal_spi.c ****   /* Process Unlocked */
2310:src/stm32f1xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
2311:src/stm32f1xx_hal_spi.c **** 
2312:src/stm32f1xx_hal_spi.c ****   return HAL_OK;
2313:src/stm32f1xx_hal_spi.c **** }
2314:src/stm32f1xx_hal_spi.c **** 
2315:src/stm32f1xx_hal_spi.c **** /**
2316:src/stm32f1xx_hal_spi.c ****   * @brief  Resume the DMA Transfer.
2317:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
ARM GAS  /tmp/ccdPJtdr.s 			page 43


2318:src/stm32f1xx_hal_spi.c ****   *               the configuration information for the specified SPI module.
2319:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
2320:src/stm32f1xx_hal_spi.c ****   */
2321:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
2322:src/stm32f1xx_hal_spi.c **** {
2323:src/stm32f1xx_hal_spi.c ****   /* Process Locked */
2324:src/stm32f1xx_hal_spi.c ****   __HAL_LOCK(hspi);
2325:src/stm32f1xx_hal_spi.c **** 
2326:src/stm32f1xx_hal_spi.c ****   /* Enable the SPI DMA Tx & Rx requests */
2327:src/stm32f1xx_hal_spi.c ****   SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2328:src/stm32f1xx_hal_spi.c **** 
2329:src/stm32f1xx_hal_spi.c ****   /* Process Unlocked */
2330:src/stm32f1xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
2331:src/stm32f1xx_hal_spi.c **** 
2332:src/stm32f1xx_hal_spi.c ****   return HAL_OK;
2333:src/stm32f1xx_hal_spi.c **** }
2334:src/stm32f1xx_hal_spi.c **** 
2335:src/stm32f1xx_hal_spi.c **** /**
2336:src/stm32f1xx_hal_spi.c ****   * @brief  Stop the DMA Transfer.
2337:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2338:src/stm32f1xx_hal_spi.c ****   *               the configuration information for the specified SPI module.
2339:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
2340:src/stm32f1xx_hal_spi.c ****   */
2341:src/stm32f1xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
2342:src/stm32f1xx_hal_spi.c **** {
2343:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
2344:src/stm32f1xx_hal_spi.c ****   /* The Lock is not implemented on this API to allow the user application
2345:src/stm32f1xx_hal_spi.c ****      to call the HAL SPI API under callbacks HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() o
2346:src/stm32f1xx_hal_spi.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
2347:src/stm32f1xx_hal_spi.c ****      and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() 
2348:src/stm32f1xx_hal_spi.c ****      */
2349:src/stm32f1xx_hal_spi.c **** 
2350:src/stm32f1xx_hal_spi.c ****   /* Abort the SPI DMA tx Stream/Channel  */
2351:src/stm32f1xx_hal_spi.c ****   if (hspi->hdmatx != NULL)
2352:src/stm32f1xx_hal_spi.c ****   {
2353:src/stm32f1xx_hal_spi.c ****     if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
2354:src/stm32f1xx_hal_spi.c ****     {
2355:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2356:src/stm32f1xx_hal_spi.c ****       errorcode = HAL_ERROR;
2357:src/stm32f1xx_hal_spi.c ****     }
2358:src/stm32f1xx_hal_spi.c ****   }
2359:src/stm32f1xx_hal_spi.c ****   /* Abort the SPI DMA rx Stream/Channel  */
2360:src/stm32f1xx_hal_spi.c ****   if (hspi->hdmarx != NULL)
2361:src/stm32f1xx_hal_spi.c ****   {
2362:src/stm32f1xx_hal_spi.c ****     if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
2363:src/stm32f1xx_hal_spi.c ****     {
2364:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2365:src/stm32f1xx_hal_spi.c ****       errorcode = HAL_ERROR;
2366:src/stm32f1xx_hal_spi.c ****     }
2367:src/stm32f1xx_hal_spi.c ****   }
2368:src/stm32f1xx_hal_spi.c **** 
2369:src/stm32f1xx_hal_spi.c ****   /* Disable the SPI DMA Tx & Rx requests */
2370:src/stm32f1xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2371:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
2372:src/stm32f1xx_hal_spi.c ****   return errorcode;
2373:src/stm32f1xx_hal_spi.c **** }
2374:src/stm32f1xx_hal_spi.c **** 
ARM GAS  /tmp/ccdPJtdr.s 			page 44


2375:src/stm32f1xx_hal_spi.c **** /**
2376:src/stm32f1xx_hal_spi.c ****   * @brief  Handle SPI interrupt request.
2377:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2378:src/stm32f1xx_hal_spi.c ****   *               the configuration information for the specified SPI module.
2379:src/stm32f1xx_hal_spi.c ****   * @retval None
2380:src/stm32f1xx_hal_spi.c ****   */
2381:src/stm32f1xx_hal_spi.c **** void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
2382:src/stm32f1xx_hal_spi.c **** {
2383:src/stm32f1xx_hal_spi.c ****   uint32_t itsource = hspi->Instance->CR2;
2384:src/stm32f1xx_hal_spi.c ****   uint32_t itflag   = hspi->Instance->SR;
2385:src/stm32f1xx_hal_spi.c **** 
2386:src/stm32f1xx_hal_spi.c ****   /* SPI in mode Receiver ----------------------------------------------------*/
2387:src/stm32f1xx_hal_spi.c ****   if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
2388:src/stm32f1xx_hal_spi.c ****       (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXN
2389:src/stm32f1xx_hal_spi.c ****   {
2390:src/stm32f1xx_hal_spi.c ****     hspi->RxISR(hspi);
2391:src/stm32f1xx_hal_spi.c ****     return;
2392:src/stm32f1xx_hal_spi.c ****   }
2393:src/stm32f1xx_hal_spi.c **** 
2394:src/stm32f1xx_hal_spi.c ****   /* SPI in mode Transmitter -------------------------------------------------*/
2395:src/stm32f1xx_hal_spi.c ****   if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE)
2396:src/stm32f1xx_hal_spi.c ****   {
2397:src/stm32f1xx_hal_spi.c ****     hspi->TxISR(hspi);
2398:src/stm32f1xx_hal_spi.c ****     return;
2399:src/stm32f1xx_hal_spi.c ****   }
2400:src/stm32f1xx_hal_spi.c **** 
2401:src/stm32f1xx_hal_spi.c ****   /* SPI in Error Treatment --------------------------------------------------*/
2402:src/stm32f1xx_hal_spi.c ****   if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) !=
2403:src/stm32f1xx_hal_spi.c ****        && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
2404:src/stm32f1xx_hal_spi.c ****   {
2405:src/stm32f1xx_hal_spi.c ****     /* SPI Overrun error interrupt occurred ----------------------------------*/
2406:src/stm32f1xx_hal_spi.c ****     if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
2407:src/stm32f1xx_hal_spi.c ****     {
2408:src/stm32f1xx_hal_spi.c ****       if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2409:src/stm32f1xx_hal_spi.c ****       {
2410:src/stm32f1xx_hal_spi.c ****         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2411:src/stm32f1xx_hal_spi.c ****         __HAL_SPI_CLEAR_OVRFLAG(hspi);
2412:src/stm32f1xx_hal_spi.c ****       }
2413:src/stm32f1xx_hal_spi.c ****       else
2414:src/stm32f1xx_hal_spi.c ****       {
2415:src/stm32f1xx_hal_spi.c ****         __HAL_SPI_CLEAR_OVRFLAG(hspi);
2416:src/stm32f1xx_hal_spi.c ****         return;
2417:src/stm32f1xx_hal_spi.c ****       }
2418:src/stm32f1xx_hal_spi.c ****     }
2419:src/stm32f1xx_hal_spi.c **** 
2420:src/stm32f1xx_hal_spi.c ****     /* SPI Mode Fault error interrupt occurred -------------------------------*/
2421:src/stm32f1xx_hal_spi.c ****     if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
2422:src/stm32f1xx_hal_spi.c ****     {
2423:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2424:src/stm32f1xx_hal_spi.c ****       __HAL_SPI_CLEAR_MODFFLAG(hspi);
2425:src/stm32f1xx_hal_spi.c ****     }
2426:src/stm32f1xx_hal_spi.c **** 
2427:src/stm32f1xx_hal_spi.c ****     /* SPI Frame error interrupt occurred ------------------------------------*/
2428:src/stm32f1xx_hal_spi.c **** 
2429:src/stm32f1xx_hal_spi.c ****     if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2430:src/stm32f1xx_hal_spi.c ****     {
2431:src/stm32f1xx_hal_spi.c ****       /* Disable all interrupts */
ARM GAS  /tmp/ccdPJtdr.s 			page 45


2432:src/stm32f1xx_hal_spi.c ****       __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
2433:src/stm32f1xx_hal_spi.c **** 
2434:src/stm32f1xx_hal_spi.c ****       hspi->State = HAL_SPI_STATE_READY;
2435:src/stm32f1xx_hal_spi.c ****       /* Disable the SPI DMA requests if enabled */
2436:src/stm32f1xx_hal_spi.c ****       if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)
2437:src/stm32f1xx_hal_spi.c ****       {
2438:src/stm32f1xx_hal_spi.c ****         CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
2439:src/stm32f1xx_hal_spi.c **** 
2440:src/stm32f1xx_hal_spi.c ****         /* Abort the SPI DMA Rx channel */
2441:src/stm32f1xx_hal_spi.c ****         if (hspi->hdmarx != NULL)
2442:src/stm32f1xx_hal_spi.c ****         {
2443:src/stm32f1xx_hal_spi.c ****           /* Set the SPI DMA Abort callback :
2444:src/stm32f1xx_hal_spi.c ****           will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
2445:src/stm32f1xx_hal_spi.c ****           hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
2446:src/stm32f1xx_hal_spi.c ****           if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
2447:src/stm32f1xx_hal_spi.c ****           {
2448:src/stm32f1xx_hal_spi.c ****             SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2449:src/stm32f1xx_hal_spi.c ****           }
2450:src/stm32f1xx_hal_spi.c ****         }
2451:src/stm32f1xx_hal_spi.c ****         /* Abort the SPI DMA Tx channel */
2452:src/stm32f1xx_hal_spi.c ****         if (hspi->hdmatx != NULL)
2453:src/stm32f1xx_hal_spi.c ****         {
2454:src/stm32f1xx_hal_spi.c ****           /* Set the SPI DMA Abort callback :
2455:src/stm32f1xx_hal_spi.c ****           will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
2456:src/stm32f1xx_hal_spi.c ****           hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2457:src/stm32f1xx_hal_spi.c ****           if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
2458:src/stm32f1xx_hal_spi.c ****           {
2459:src/stm32f1xx_hal_spi.c ****             SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2460:src/stm32f1xx_hal_spi.c ****           }
2461:src/stm32f1xx_hal_spi.c ****         }
2462:src/stm32f1xx_hal_spi.c ****       }
2463:src/stm32f1xx_hal_spi.c ****       else
2464:src/stm32f1xx_hal_spi.c ****       {
2465:src/stm32f1xx_hal_spi.c ****         /* Call user error callback */
2466:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
2467:src/stm32f1xx_hal_spi.c ****         hspi->ErrorCallback(hspi);
2468:src/stm32f1xx_hal_spi.c **** #else
2469:src/stm32f1xx_hal_spi.c ****         HAL_SPI_ErrorCallback(hspi);
2470:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
2471:src/stm32f1xx_hal_spi.c ****       }
2472:src/stm32f1xx_hal_spi.c ****     }
2473:src/stm32f1xx_hal_spi.c ****     return;
2474:src/stm32f1xx_hal_spi.c ****   }
2475:src/stm32f1xx_hal_spi.c **** }
2476:src/stm32f1xx_hal_spi.c **** 
2477:src/stm32f1xx_hal_spi.c **** /**
2478:src/stm32f1xx_hal_spi.c ****   * @brief  Tx Transfer completed callback.
2479:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2480:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
2481:src/stm32f1xx_hal_spi.c ****   * @retval None
2482:src/stm32f1xx_hal_spi.c ****   */
2483:src/stm32f1xx_hal_spi.c **** __weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
2484:src/stm32f1xx_hal_spi.c **** {
2485:src/stm32f1xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
2486:src/stm32f1xx_hal_spi.c ****   UNUSED(hspi);
2487:src/stm32f1xx_hal_spi.c **** 
2488:src/stm32f1xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
ARM GAS  /tmp/ccdPJtdr.s 			page 46


2489:src/stm32f1xx_hal_spi.c ****             the HAL_SPI_TxCpltCallback should be implemented in the user file
2490:src/stm32f1xx_hal_spi.c ****    */
2491:src/stm32f1xx_hal_spi.c **** }
2492:src/stm32f1xx_hal_spi.c **** 
2493:src/stm32f1xx_hal_spi.c **** /**
2494:src/stm32f1xx_hal_spi.c ****   * @brief  Rx Transfer completed callback.
2495:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2496:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
2497:src/stm32f1xx_hal_spi.c ****   * @retval None
2498:src/stm32f1xx_hal_spi.c ****   */
2499:src/stm32f1xx_hal_spi.c **** __weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
2500:src/stm32f1xx_hal_spi.c **** {
2501:src/stm32f1xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
2502:src/stm32f1xx_hal_spi.c ****   UNUSED(hspi);
2503:src/stm32f1xx_hal_spi.c **** 
2504:src/stm32f1xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2505:src/stm32f1xx_hal_spi.c ****             the HAL_SPI_RxCpltCallback should be implemented in the user file
2506:src/stm32f1xx_hal_spi.c ****    */
2507:src/stm32f1xx_hal_spi.c **** }
2508:src/stm32f1xx_hal_spi.c **** 
2509:src/stm32f1xx_hal_spi.c **** /**
2510:src/stm32f1xx_hal_spi.c ****   * @brief  Tx and Rx Transfer completed callback.
2511:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2512:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
2513:src/stm32f1xx_hal_spi.c ****   * @retval None
2514:src/stm32f1xx_hal_spi.c ****   */
2515:src/stm32f1xx_hal_spi.c **** __weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
2516:src/stm32f1xx_hal_spi.c **** {
2517:src/stm32f1xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
2518:src/stm32f1xx_hal_spi.c ****   UNUSED(hspi);
2519:src/stm32f1xx_hal_spi.c **** 
2520:src/stm32f1xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2521:src/stm32f1xx_hal_spi.c ****             the HAL_SPI_TxRxCpltCallback should be implemented in the user file
2522:src/stm32f1xx_hal_spi.c ****    */
2523:src/stm32f1xx_hal_spi.c **** }
2524:src/stm32f1xx_hal_spi.c **** 
2525:src/stm32f1xx_hal_spi.c **** /**
2526:src/stm32f1xx_hal_spi.c ****   * @brief  Tx Half Transfer completed callback.
2527:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2528:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
2529:src/stm32f1xx_hal_spi.c ****   * @retval None
2530:src/stm32f1xx_hal_spi.c ****   */
2531:src/stm32f1xx_hal_spi.c **** __weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
2532:src/stm32f1xx_hal_spi.c **** {
2533:src/stm32f1xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
2534:src/stm32f1xx_hal_spi.c ****   UNUSED(hspi);
2535:src/stm32f1xx_hal_spi.c **** 
2536:src/stm32f1xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2537:src/stm32f1xx_hal_spi.c ****             the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
2538:src/stm32f1xx_hal_spi.c ****    */
2539:src/stm32f1xx_hal_spi.c **** }
2540:src/stm32f1xx_hal_spi.c **** 
2541:src/stm32f1xx_hal_spi.c **** /**
2542:src/stm32f1xx_hal_spi.c ****   * @brief  Rx Half Transfer completed callback.
2543:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2544:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
2545:src/stm32f1xx_hal_spi.c ****   * @retval None
ARM GAS  /tmp/ccdPJtdr.s 			page 47


2546:src/stm32f1xx_hal_spi.c ****   */
2547:src/stm32f1xx_hal_spi.c **** __weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
2548:src/stm32f1xx_hal_spi.c **** {
2549:src/stm32f1xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
2550:src/stm32f1xx_hal_spi.c ****   UNUSED(hspi);
2551:src/stm32f1xx_hal_spi.c **** 
2552:src/stm32f1xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2553:src/stm32f1xx_hal_spi.c ****             the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
2554:src/stm32f1xx_hal_spi.c ****    */
2555:src/stm32f1xx_hal_spi.c **** }
2556:src/stm32f1xx_hal_spi.c **** 
2557:src/stm32f1xx_hal_spi.c **** /**
2558:src/stm32f1xx_hal_spi.c ****   * @brief  Tx and Rx Half Transfer callback.
2559:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2560:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
2561:src/stm32f1xx_hal_spi.c ****   * @retval None
2562:src/stm32f1xx_hal_spi.c ****   */
2563:src/stm32f1xx_hal_spi.c **** __weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
2564:src/stm32f1xx_hal_spi.c **** {
2565:src/stm32f1xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
2566:src/stm32f1xx_hal_spi.c ****   UNUSED(hspi);
2567:src/stm32f1xx_hal_spi.c **** 
2568:src/stm32f1xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2569:src/stm32f1xx_hal_spi.c ****             the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
2570:src/stm32f1xx_hal_spi.c ****    */
2571:src/stm32f1xx_hal_spi.c **** }
2572:src/stm32f1xx_hal_spi.c **** 
2573:src/stm32f1xx_hal_spi.c **** /**
2574:src/stm32f1xx_hal_spi.c ****   * @brief  SPI error callback.
2575:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2576:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
2577:src/stm32f1xx_hal_spi.c ****   * @retval None
2578:src/stm32f1xx_hal_spi.c ****   */
2579:src/stm32f1xx_hal_spi.c **** __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
2580:src/stm32f1xx_hal_spi.c **** {
2581:src/stm32f1xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
2582:src/stm32f1xx_hal_spi.c ****   UNUSED(hspi);
2583:src/stm32f1xx_hal_spi.c **** 
2584:src/stm32f1xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2585:src/stm32f1xx_hal_spi.c ****             the HAL_SPI_ErrorCallback should be implemented in the user file
2586:src/stm32f1xx_hal_spi.c ****    */
2587:src/stm32f1xx_hal_spi.c ****   /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
2588:src/stm32f1xx_hal_spi.c ****             and user can use HAL_SPI_GetError() API to check the latest error occurred
2589:src/stm32f1xx_hal_spi.c ****    */
2590:src/stm32f1xx_hal_spi.c **** }
2591:src/stm32f1xx_hal_spi.c **** 
2592:src/stm32f1xx_hal_spi.c **** /**
2593:src/stm32f1xx_hal_spi.c ****   * @brief  SPI Abort Complete callback.
2594:src/stm32f1xx_hal_spi.c ****   * @param  hspi SPI handle.
2595:src/stm32f1xx_hal_spi.c ****   * @retval None
2596:src/stm32f1xx_hal_spi.c ****   */
2597:src/stm32f1xx_hal_spi.c **** __weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
2598:src/stm32f1xx_hal_spi.c **** {
2599:src/stm32f1xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
2600:src/stm32f1xx_hal_spi.c ****   UNUSED(hspi);
2601:src/stm32f1xx_hal_spi.c **** 
2602:src/stm32f1xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
ARM GAS  /tmp/ccdPJtdr.s 			page 48


2603:src/stm32f1xx_hal_spi.c ****             the HAL_SPI_AbortCpltCallback can be implemented in the user file.
2604:src/stm32f1xx_hal_spi.c ****    */
2605:src/stm32f1xx_hal_spi.c **** }
2606:src/stm32f1xx_hal_spi.c **** 
2607:src/stm32f1xx_hal_spi.c **** /**
2608:src/stm32f1xx_hal_spi.c ****   * @}
2609:src/stm32f1xx_hal_spi.c ****   */
2610:src/stm32f1xx_hal_spi.c **** 
2611:src/stm32f1xx_hal_spi.c **** /** @defgroup SPI_Exported_Functions_Group3 Peripheral State and Errors functions
2612:src/stm32f1xx_hal_spi.c ****   * @brief   SPI control functions
2613:src/stm32f1xx_hal_spi.c ****   *
2614:src/stm32f1xx_hal_spi.c **** @verbatim
2615:src/stm32f1xx_hal_spi.c ****  ===============================================================================
2616:src/stm32f1xx_hal_spi.c ****                       ##### Peripheral State and Errors functions #####
2617:src/stm32f1xx_hal_spi.c ****  ===============================================================================
2618:src/stm32f1xx_hal_spi.c ****     [..]
2619:src/stm32f1xx_hal_spi.c ****     This subsection provides a set of functions allowing to control the SPI.
2620:src/stm32f1xx_hal_spi.c ****      (+) HAL_SPI_GetState() API can be helpful to check in run-time the state of the SPI peripheral
2621:src/stm32f1xx_hal_spi.c ****      (+) HAL_SPI_GetError() check in run-time Errors occurring during communication
2622:src/stm32f1xx_hal_spi.c **** @endverbatim
2623:src/stm32f1xx_hal_spi.c ****   * @{
2624:src/stm32f1xx_hal_spi.c ****   */
2625:src/stm32f1xx_hal_spi.c **** 
2626:src/stm32f1xx_hal_spi.c **** /**
2627:src/stm32f1xx_hal_spi.c ****   * @brief  Return the SPI handle state.
2628:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2629:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
2630:src/stm32f1xx_hal_spi.c ****   * @retval SPI state
2631:src/stm32f1xx_hal_spi.c ****   */
2632:src/stm32f1xx_hal_spi.c **** HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
2633:src/stm32f1xx_hal_spi.c **** {
2634:src/stm32f1xx_hal_spi.c ****   /* Return SPI handle state */
2635:src/stm32f1xx_hal_spi.c ****   return hspi->State;
2636:src/stm32f1xx_hal_spi.c **** }
2637:src/stm32f1xx_hal_spi.c **** 
2638:src/stm32f1xx_hal_spi.c **** /**
2639:src/stm32f1xx_hal_spi.c ****   * @brief  Return the SPI error code.
2640:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2641:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
2642:src/stm32f1xx_hal_spi.c ****   * @retval SPI error code in bitmap format
2643:src/stm32f1xx_hal_spi.c ****   */
2644:src/stm32f1xx_hal_spi.c **** uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
2645:src/stm32f1xx_hal_spi.c **** {
2646:src/stm32f1xx_hal_spi.c ****   /* Return SPI ErrorCode */
2647:src/stm32f1xx_hal_spi.c ****   return hspi->ErrorCode;
2648:src/stm32f1xx_hal_spi.c **** }
2649:src/stm32f1xx_hal_spi.c **** 
2650:src/stm32f1xx_hal_spi.c **** /**
2651:src/stm32f1xx_hal_spi.c ****   * @}
2652:src/stm32f1xx_hal_spi.c ****   */
2653:src/stm32f1xx_hal_spi.c **** 
2654:src/stm32f1xx_hal_spi.c **** /**
2655:src/stm32f1xx_hal_spi.c ****   * @}
2656:src/stm32f1xx_hal_spi.c ****   */
2657:src/stm32f1xx_hal_spi.c **** 
2658:src/stm32f1xx_hal_spi.c **** /** @addtogroup SPI_Private_Functions
2659:src/stm32f1xx_hal_spi.c ****   * @brief   Private functions
ARM GAS  /tmp/ccdPJtdr.s 			page 49


2660:src/stm32f1xx_hal_spi.c ****   * @{
2661:src/stm32f1xx_hal_spi.c ****   */
2662:src/stm32f1xx_hal_spi.c **** 
2663:src/stm32f1xx_hal_spi.c **** /**
2664:src/stm32f1xx_hal_spi.c ****   * @brief  DMA SPI transmit process complete callback.
2665:src/stm32f1xx_hal_spi.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2666:src/stm32f1xx_hal_spi.c ****   *               the configuration information for the specified DMA module.
2667:src/stm32f1xx_hal_spi.c ****   * @retval None
2668:src/stm32f1xx_hal_spi.c ****   */
2669:src/stm32f1xx_hal_spi.c **** static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2670:src/stm32f1xx_hal_spi.c **** {
2671:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
2672:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
2673:src/stm32f1xx_hal_spi.c **** 
2674:src/stm32f1xx_hal_spi.c ****   /* Init tickstart for timeout management*/
2675:src/stm32f1xx_hal_spi.c ****   tickstart = HAL_GetTick();
2676:src/stm32f1xx_hal_spi.c **** 
2677:src/stm32f1xx_hal_spi.c ****   /* DMA Normal Mode */
2678:src/stm32f1xx_hal_spi.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
2679:src/stm32f1xx_hal_spi.c ****   {
2680:src/stm32f1xx_hal_spi.c ****     /* Disable ERR interrupt */
2681:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
2682:src/stm32f1xx_hal_spi.c **** 
2683:src/stm32f1xx_hal_spi.c ****     /* Disable Tx DMA Request */
2684:src/stm32f1xx_hal_spi.c ****     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
2685:src/stm32f1xx_hal_spi.c **** 
2686:src/stm32f1xx_hal_spi.c ****     /* Check the end of the transaction */
2687:src/stm32f1xx_hal_spi.c ****     if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
2688:src/stm32f1xx_hal_spi.c ****     {
2689:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2690:src/stm32f1xx_hal_spi.c ****     }
2691:src/stm32f1xx_hal_spi.c **** 
2692:src/stm32f1xx_hal_spi.c ****     /* Clear overrun flag in 2 Lines communication mode because received data is not read */
2693:src/stm32f1xx_hal_spi.c ****     if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
2694:src/stm32f1xx_hal_spi.c ****     {
2695:src/stm32f1xx_hal_spi.c ****       __HAL_SPI_CLEAR_OVRFLAG(hspi);
2696:src/stm32f1xx_hal_spi.c ****     }
2697:src/stm32f1xx_hal_spi.c **** 
2698:src/stm32f1xx_hal_spi.c ****     hspi->TxXferCount = 0U;
2699:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
2700:src/stm32f1xx_hal_spi.c **** 
2701:src/stm32f1xx_hal_spi.c ****     if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2702:src/stm32f1xx_hal_spi.c ****     {
2703:src/stm32f1xx_hal_spi.c ****       /* Call user error callback */
2704:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
2705:src/stm32f1xx_hal_spi.c ****       hspi->ErrorCallback(hspi);
2706:src/stm32f1xx_hal_spi.c **** #else
2707:src/stm32f1xx_hal_spi.c ****       HAL_SPI_ErrorCallback(hspi);
2708:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
2709:src/stm32f1xx_hal_spi.c ****       return;
2710:src/stm32f1xx_hal_spi.c ****     }
2711:src/stm32f1xx_hal_spi.c ****   }
2712:src/stm32f1xx_hal_spi.c ****   /* Call user Tx complete callback */
2713:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
2714:src/stm32f1xx_hal_spi.c ****   hspi->TxCpltCallback(hspi);
2715:src/stm32f1xx_hal_spi.c **** #else
2716:src/stm32f1xx_hal_spi.c ****   HAL_SPI_TxCpltCallback(hspi);
ARM GAS  /tmp/ccdPJtdr.s 			page 50


2717:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
2718:src/stm32f1xx_hal_spi.c **** }
2719:src/stm32f1xx_hal_spi.c **** 
2720:src/stm32f1xx_hal_spi.c **** /**
2721:src/stm32f1xx_hal_spi.c ****   * @brief  DMA SPI receive process complete callback.
2722:src/stm32f1xx_hal_spi.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2723:src/stm32f1xx_hal_spi.c ****   *               the configuration information for the specified DMA module.
2724:src/stm32f1xx_hal_spi.c ****   * @retval None
2725:src/stm32f1xx_hal_spi.c ****   */
2726:src/stm32f1xx_hal_spi.c **** static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
2727:src/stm32f1xx_hal_spi.c **** {
2728:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
2729:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
2730:src/stm32f1xx_hal_spi.c **** 
2731:src/stm32f1xx_hal_spi.c ****   /* Init tickstart for timeout management*/
2732:src/stm32f1xx_hal_spi.c ****   tickstart = HAL_GetTick();
2733:src/stm32f1xx_hal_spi.c **** 
2734:src/stm32f1xx_hal_spi.c ****   /* DMA Normal Mode */
2735:src/stm32f1xx_hal_spi.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
2736:src/stm32f1xx_hal_spi.c ****   {
2737:src/stm32f1xx_hal_spi.c ****     /* Disable ERR interrupt */
2738:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
2739:src/stm32f1xx_hal_spi.c **** 
2740:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
2741:src/stm32f1xx_hal_spi.c ****     /* CRC handling */
2742:src/stm32f1xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
2743:src/stm32f1xx_hal_spi.c ****     {
2744:src/stm32f1xx_hal_spi.c ****       /* Wait until RXNE flag */
2745:src/stm32f1xx_hal_spi.c ****       if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) !
2746:src/stm32f1xx_hal_spi.c ****       {
2747:src/stm32f1xx_hal_spi.c ****         /* Error on the CRC reception */
2748:src/stm32f1xx_hal_spi.c ****         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
2749:src/stm32f1xx_hal_spi.c ****       }
2750:src/stm32f1xx_hal_spi.c ****       /* Read CRC */
2751:src/stm32f1xx_hal_spi.c ****       READ_REG(hspi->Instance->DR);
2752:src/stm32f1xx_hal_spi.c ****     }
2753:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
2754:src/stm32f1xx_hal_spi.c **** 
2755:src/stm32f1xx_hal_spi.c ****     /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) *
2756:src/stm32f1xx_hal_spi.c ****     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2757:src/stm32f1xx_hal_spi.c **** 
2758:src/stm32f1xx_hal_spi.c ****     /* Check the end of the transaction */
2759:src/stm32f1xx_hal_spi.c ****     if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
2760:src/stm32f1xx_hal_spi.c ****     {
2761:src/stm32f1xx_hal_spi.c ****       hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
2762:src/stm32f1xx_hal_spi.c ****     }
2763:src/stm32f1xx_hal_spi.c **** 
2764:src/stm32f1xx_hal_spi.c ****     hspi->RxXferCount = 0U;
2765:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
2766:src/stm32f1xx_hal_spi.c **** 
2767:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
2768:src/stm32f1xx_hal_spi.c ****     /* Check if CRC error occurred */
2769:src/stm32f1xx_hal_spi.c ****     if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
2770:src/stm32f1xx_hal_spi.c ****     {
2771:src/stm32f1xx_hal_spi.c ****       /* Check if CRC error is valid or not (workaround to be applied or not) */
2772:src/stm32f1xx_hal_spi.c ****       if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
2773:src/stm32f1xx_hal_spi.c ****       {
ARM GAS  /tmp/ccdPJtdr.s 			page 51


2774:src/stm32f1xx_hal_spi.c ****         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
2775:src/stm32f1xx_hal_spi.c **** 
2776:src/stm32f1xx_hal_spi.c ****         /* Reset CRC Calculation */
2777:src/stm32f1xx_hal_spi.c ****         SPI_RESET_CRC(hspi);
2778:src/stm32f1xx_hal_spi.c ****       }
2779:src/stm32f1xx_hal_spi.c ****       else
2780:src/stm32f1xx_hal_spi.c ****       {
2781:src/stm32f1xx_hal_spi.c ****         __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
2782:src/stm32f1xx_hal_spi.c ****       }
2783:src/stm32f1xx_hal_spi.c ****     }
2784:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
2785:src/stm32f1xx_hal_spi.c **** 
2786:src/stm32f1xx_hal_spi.c ****     if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2787:src/stm32f1xx_hal_spi.c ****     {
2788:src/stm32f1xx_hal_spi.c ****       /* Call user error callback */
2789:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
2790:src/stm32f1xx_hal_spi.c ****       hspi->ErrorCallback(hspi);
2791:src/stm32f1xx_hal_spi.c **** #else
2792:src/stm32f1xx_hal_spi.c ****       HAL_SPI_ErrorCallback(hspi);
2793:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
2794:src/stm32f1xx_hal_spi.c ****       return;
2795:src/stm32f1xx_hal_spi.c ****     }
2796:src/stm32f1xx_hal_spi.c ****   }
2797:src/stm32f1xx_hal_spi.c ****   /* Call user Rx complete callback */
2798:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
2799:src/stm32f1xx_hal_spi.c ****   hspi->RxCpltCallback(hspi);
2800:src/stm32f1xx_hal_spi.c **** #else
2801:src/stm32f1xx_hal_spi.c ****   HAL_SPI_RxCpltCallback(hspi);
2802:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
2803:src/stm32f1xx_hal_spi.c **** }
2804:src/stm32f1xx_hal_spi.c **** 
2805:src/stm32f1xx_hal_spi.c **** /**
2806:src/stm32f1xx_hal_spi.c ****   * @brief  DMA SPI transmit receive process complete callback.
2807:src/stm32f1xx_hal_spi.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2808:src/stm32f1xx_hal_spi.c ****   *               the configuration information for the specified DMA module.
2809:src/stm32f1xx_hal_spi.c ****   * @retval None
2810:src/stm32f1xx_hal_spi.c ****   */
2811:src/stm32f1xx_hal_spi.c **** static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
2812:src/stm32f1xx_hal_spi.c **** {
2813:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
2814:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
2815:src/stm32f1xx_hal_spi.c **** 
2816:src/stm32f1xx_hal_spi.c ****   /* Init tickstart for timeout management*/
2817:src/stm32f1xx_hal_spi.c ****   tickstart = HAL_GetTick();
2818:src/stm32f1xx_hal_spi.c **** 
2819:src/stm32f1xx_hal_spi.c ****   /* DMA Normal Mode */
2820:src/stm32f1xx_hal_spi.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
2821:src/stm32f1xx_hal_spi.c ****   {
2822:src/stm32f1xx_hal_spi.c ****     /* Disable ERR interrupt */
2823:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
2824:src/stm32f1xx_hal_spi.c **** 
2825:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
2826:src/stm32f1xx_hal_spi.c ****     /* CRC handling */
2827:src/stm32f1xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
2828:src/stm32f1xx_hal_spi.c ****     {
2829:src/stm32f1xx_hal_spi.c ****       /* Wait the CRC data */
2830:src/stm32f1xx_hal_spi.c ****       if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) !
ARM GAS  /tmp/ccdPJtdr.s 			page 52


2831:src/stm32f1xx_hal_spi.c ****       {
2832:src/stm32f1xx_hal_spi.c ****         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
2833:src/stm32f1xx_hal_spi.c ****       }
2834:src/stm32f1xx_hal_spi.c ****       /* Read CRC to Flush DR and RXNE flag */
2835:src/stm32f1xx_hal_spi.c ****       READ_REG(hspi->Instance->DR);
2836:src/stm32f1xx_hal_spi.c ****     }
2837:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
2838:src/stm32f1xx_hal_spi.c **** 
2839:src/stm32f1xx_hal_spi.c ****     /* Check the end of the transaction */
2840:src/stm32f1xx_hal_spi.c ****     if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
2841:src/stm32f1xx_hal_spi.c ****     {
2842:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2843:src/stm32f1xx_hal_spi.c ****     }
2844:src/stm32f1xx_hal_spi.c **** 
2845:src/stm32f1xx_hal_spi.c ****     /* Disable Rx/Tx DMA Request */
2846:src/stm32f1xx_hal_spi.c ****     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2847:src/stm32f1xx_hal_spi.c **** 
2848:src/stm32f1xx_hal_spi.c ****     hspi->TxXferCount = 0U;
2849:src/stm32f1xx_hal_spi.c ****     hspi->RxXferCount = 0U;
2850:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
2851:src/stm32f1xx_hal_spi.c **** 
2852:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
2853:src/stm32f1xx_hal_spi.c ****     /* Check if CRC error occurred */
2854:src/stm32f1xx_hal_spi.c ****     if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
2855:src/stm32f1xx_hal_spi.c ****     {
2856:src/stm32f1xx_hal_spi.c ****       /* Check if CRC error is valid or not (workaround to be applied or not) */
2857:src/stm32f1xx_hal_spi.c ****       if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
2858:src/stm32f1xx_hal_spi.c ****       {
2859:src/stm32f1xx_hal_spi.c ****         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
2860:src/stm32f1xx_hal_spi.c **** 
2861:src/stm32f1xx_hal_spi.c ****         /* Reset CRC Calculation */
2862:src/stm32f1xx_hal_spi.c ****         SPI_RESET_CRC(hspi);
2863:src/stm32f1xx_hal_spi.c ****       }
2864:src/stm32f1xx_hal_spi.c ****       else
2865:src/stm32f1xx_hal_spi.c ****       {
2866:src/stm32f1xx_hal_spi.c ****         __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
2867:src/stm32f1xx_hal_spi.c ****       }
2868:src/stm32f1xx_hal_spi.c ****     }
2869:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
2870:src/stm32f1xx_hal_spi.c **** 
2871:src/stm32f1xx_hal_spi.c ****     if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2872:src/stm32f1xx_hal_spi.c ****     {
2873:src/stm32f1xx_hal_spi.c ****       /* Call user error callback */
2874:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
2875:src/stm32f1xx_hal_spi.c ****       hspi->ErrorCallback(hspi);
2876:src/stm32f1xx_hal_spi.c **** #else
2877:src/stm32f1xx_hal_spi.c ****       HAL_SPI_ErrorCallback(hspi);
2878:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
2879:src/stm32f1xx_hal_spi.c ****       return;
2880:src/stm32f1xx_hal_spi.c ****     }
2881:src/stm32f1xx_hal_spi.c ****   }
2882:src/stm32f1xx_hal_spi.c ****   /* Call user TxRx complete callback */
2883:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
2884:src/stm32f1xx_hal_spi.c ****   hspi->TxRxCpltCallback(hspi);
2885:src/stm32f1xx_hal_spi.c **** #else
2886:src/stm32f1xx_hal_spi.c ****   HAL_SPI_TxRxCpltCallback(hspi);
2887:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
ARM GAS  /tmp/ccdPJtdr.s 			page 53


2888:src/stm32f1xx_hal_spi.c **** }
2889:src/stm32f1xx_hal_spi.c **** 
2890:src/stm32f1xx_hal_spi.c **** /**
2891:src/stm32f1xx_hal_spi.c ****   * @brief  DMA SPI half transmit process complete callback.
2892:src/stm32f1xx_hal_spi.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2893:src/stm32f1xx_hal_spi.c ****   *               the configuration information for the specified DMA module.
2894:src/stm32f1xx_hal_spi.c ****   * @retval None
2895:src/stm32f1xx_hal_spi.c ****   */
2896:src/stm32f1xx_hal_spi.c **** static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
2897:src/stm32f1xx_hal_spi.c **** {
2898:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
2899:src/stm32f1xx_hal_spi.c **** 
2900:src/stm32f1xx_hal_spi.c ****   /* Call user Tx half complete callback */
2901:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
2902:src/stm32f1xx_hal_spi.c ****   hspi->TxHalfCpltCallback(hspi);
2903:src/stm32f1xx_hal_spi.c **** #else
2904:src/stm32f1xx_hal_spi.c ****   HAL_SPI_TxHalfCpltCallback(hspi);
2905:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
2906:src/stm32f1xx_hal_spi.c **** }
2907:src/stm32f1xx_hal_spi.c **** 
2908:src/stm32f1xx_hal_spi.c **** /**
2909:src/stm32f1xx_hal_spi.c ****   * @brief  DMA SPI half receive process complete callback
2910:src/stm32f1xx_hal_spi.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2911:src/stm32f1xx_hal_spi.c ****   *               the configuration information for the specified DMA module.
2912:src/stm32f1xx_hal_spi.c ****   * @retval None
2913:src/stm32f1xx_hal_spi.c ****   */
2914:src/stm32f1xx_hal_spi.c **** static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
2915:src/stm32f1xx_hal_spi.c **** {
2916:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
2917:src/stm32f1xx_hal_spi.c **** 
2918:src/stm32f1xx_hal_spi.c ****   /* Call user Rx half complete callback */
2919:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
2920:src/stm32f1xx_hal_spi.c ****   hspi->RxHalfCpltCallback(hspi);
2921:src/stm32f1xx_hal_spi.c **** #else
2922:src/stm32f1xx_hal_spi.c ****   HAL_SPI_RxHalfCpltCallback(hspi);
2923:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
2924:src/stm32f1xx_hal_spi.c **** }
2925:src/stm32f1xx_hal_spi.c **** 
2926:src/stm32f1xx_hal_spi.c **** /**
2927:src/stm32f1xx_hal_spi.c ****   * @brief  DMA SPI half transmit receive process complete callback.
2928:src/stm32f1xx_hal_spi.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2929:src/stm32f1xx_hal_spi.c ****   *               the configuration information for the specified DMA module.
2930:src/stm32f1xx_hal_spi.c ****   * @retval None
2931:src/stm32f1xx_hal_spi.c ****   */
2932:src/stm32f1xx_hal_spi.c **** static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
2933:src/stm32f1xx_hal_spi.c **** {
2934:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
2935:src/stm32f1xx_hal_spi.c **** 
2936:src/stm32f1xx_hal_spi.c ****   /* Call user TxRx half complete callback */
2937:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
2938:src/stm32f1xx_hal_spi.c ****   hspi->TxRxHalfCpltCallback(hspi);
2939:src/stm32f1xx_hal_spi.c **** #else
2940:src/stm32f1xx_hal_spi.c ****   HAL_SPI_TxRxHalfCpltCallback(hspi);
2941:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
2942:src/stm32f1xx_hal_spi.c **** }
2943:src/stm32f1xx_hal_spi.c **** 
2944:src/stm32f1xx_hal_spi.c **** /**
ARM GAS  /tmp/ccdPJtdr.s 			page 54


2945:src/stm32f1xx_hal_spi.c ****   * @brief  DMA SPI communication error callback.
2946:src/stm32f1xx_hal_spi.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2947:src/stm32f1xx_hal_spi.c ****   *               the configuration information for the specified DMA module.
2948:src/stm32f1xx_hal_spi.c ****   * @retval None
2949:src/stm32f1xx_hal_spi.c ****   */
2950:src/stm32f1xx_hal_spi.c **** static void SPI_DMAError(DMA_HandleTypeDef *hdma)
2951:src/stm32f1xx_hal_spi.c **** {
2952:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
2953:src/stm32f1xx_hal_spi.c **** 
2954:src/stm32f1xx_hal_spi.c ****   /* Stop the disable DMA transfer on SPI side */
2955:src/stm32f1xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2956:src/stm32f1xx_hal_spi.c **** 
2957:src/stm32f1xx_hal_spi.c ****   SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2958:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
2959:src/stm32f1xx_hal_spi.c ****   /* Call user error callback */
2960:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
2961:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCallback(hspi);
2962:src/stm32f1xx_hal_spi.c **** #else
2963:src/stm32f1xx_hal_spi.c ****   HAL_SPI_ErrorCallback(hspi);
2964:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
2965:src/stm32f1xx_hal_spi.c **** }
2966:src/stm32f1xx_hal_spi.c **** 
2967:src/stm32f1xx_hal_spi.c **** /**
2968:src/stm32f1xx_hal_spi.c ****   * @brief  DMA SPI communication abort callback, when initiated by HAL services on Error
2969:src/stm32f1xx_hal_spi.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
2970:src/stm32f1xx_hal_spi.c ****   * @param  hdma DMA handle.
2971:src/stm32f1xx_hal_spi.c ****   * @retval None
2972:src/stm32f1xx_hal_spi.c ****   */
2973:src/stm32f1xx_hal_spi.c **** static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
2974:src/stm32f1xx_hal_spi.c **** {
2975:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
2976:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = 0U;
2977:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = 0U;
2978:src/stm32f1xx_hal_spi.c **** 
2979:src/stm32f1xx_hal_spi.c ****   /* Call user error callback */
2980:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
2981:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCallback(hspi);
2982:src/stm32f1xx_hal_spi.c **** #else
2983:src/stm32f1xx_hal_spi.c ****   HAL_SPI_ErrorCallback(hspi);
2984:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
2985:src/stm32f1xx_hal_spi.c **** }
2986:src/stm32f1xx_hal_spi.c **** 
2987:src/stm32f1xx_hal_spi.c **** /**
2988:src/stm32f1xx_hal_spi.c ****   * @brief  DMA SPI Tx communication abort callback, when initiated by user
2989:src/stm32f1xx_hal_spi.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
2990:src/stm32f1xx_hal_spi.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2991:src/stm32f1xx_hal_spi.c ****   *         Abort still ongoing for Rx DMA Handle.
2992:src/stm32f1xx_hal_spi.c ****   * @param  hdma DMA handle.
2993:src/stm32f1xx_hal_spi.c ****   * @retval None
2994:src/stm32f1xx_hal_spi.c ****   */
2995:src/stm32f1xx_hal_spi.c **** static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
2996:src/stm32f1xx_hal_spi.c **** {
2997:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
2998:src/stm32f1xx_hal_spi.c ****   __IO uint32_t count;
2999:src/stm32f1xx_hal_spi.c **** 
3000:src/stm32f1xx_hal_spi.c ****   hspi->hdmatx->XferAbortCallback = NULL;
3001:src/stm32f1xx_hal_spi.c ****   count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
ARM GAS  /tmp/ccdPJtdr.s 			page 55


3002:src/stm32f1xx_hal_spi.c **** 
3003:src/stm32f1xx_hal_spi.c ****   /* Disable Tx DMA Request */
3004:src/stm32f1xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
3005:src/stm32f1xx_hal_spi.c **** 
3006:src/stm32f1xx_hal_spi.c ****   /* Wait until TXE flag is set */
3007:src/stm32f1xx_hal_spi.c ****   do
3008:src/stm32f1xx_hal_spi.c ****   {
3009:src/stm32f1xx_hal_spi.c ****     if (count == 0U)
3010:src/stm32f1xx_hal_spi.c ****     {
3011:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
3012:src/stm32f1xx_hal_spi.c ****       break;
3013:src/stm32f1xx_hal_spi.c ****     }
3014:src/stm32f1xx_hal_spi.c ****     count--;
3015:src/stm32f1xx_hal_spi.c ****   } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
3016:src/stm32f1xx_hal_spi.c **** 
3017:src/stm32f1xx_hal_spi.c ****   /* Check if an Abort process is still ongoing */
3018:src/stm32f1xx_hal_spi.c ****   if (hspi->hdmarx != NULL)
3019:src/stm32f1xx_hal_spi.c ****   {
3020:src/stm32f1xx_hal_spi.c ****     if (hspi->hdmarx->XferAbortCallback != NULL)
3021:src/stm32f1xx_hal_spi.c ****     {
3022:src/stm32f1xx_hal_spi.c ****       return;
3023:src/stm32f1xx_hal_spi.c ****     }
3024:src/stm32f1xx_hal_spi.c ****   }
3025:src/stm32f1xx_hal_spi.c **** 
3026:src/stm32f1xx_hal_spi.c ****   /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete 
3027:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = 0U;
3028:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = 0U;
3029:src/stm32f1xx_hal_spi.c **** 
3030:src/stm32f1xx_hal_spi.c ****   /* Check no error during Abort procedure */
3031:src/stm32f1xx_hal_spi.c ****   if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
3032:src/stm32f1xx_hal_spi.c ****   {
3033:src/stm32f1xx_hal_spi.c ****     /* Reset errorCode */
3034:src/stm32f1xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_NONE;
3035:src/stm32f1xx_hal_spi.c ****   }
3036:src/stm32f1xx_hal_spi.c **** 
3037:src/stm32f1xx_hal_spi.c ****   /* Clear the Error flags in the SR register */
3038:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_CLEAR_OVRFLAG(hspi);
3039:src/stm32f1xx_hal_spi.c **** 
3040:src/stm32f1xx_hal_spi.c ****   /* Restore hspi->State to Ready */
3041:src/stm32f1xx_hal_spi.c ****   hspi->State  = HAL_SPI_STATE_READY;
3042:src/stm32f1xx_hal_spi.c **** 
3043:src/stm32f1xx_hal_spi.c ****   /* Call user Abort complete callback */
3044:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
3045:src/stm32f1xx_hal_spi.c ****   hspi->AbortCpltCallback(hspi);
3046:src/stm32f1xx_hal_spi.c **** #else
3047:src/stm32f1xx_hal_spi.c ****   HAL_SPI_AbortCpltCallback(hspi);
3048:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
3049:src/stm32f1xx_hal_spi.c **** }
3050:src/stm32f1xx_hal_spi.c **** 
3051:src/stm32f1xx_hal_spi.c **** /**
3052:src/stm32f1xx_hal_spi.c ****   * @brief  DMA SPI Rx communication abort callback, when initiated by user
3053:src/stm32f1xx_hal_spi.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
3054:src/stm32f1xx_hal_spi.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3055:src/stm32f1xx_hal_spi.c ****   *         Abort still ongoing for Tx DMA Handle.
3056:src/stm32f1xx_hal_spi.c ****   * @param  hdma DMA handle.
3057:src/stm32f1xx_hal_spi.c ****   * @retval None
3058:src/stm32f1xx_hal_spi.c ****   */
ARM GAS  /tmp/ccdPJtdr.s 			page 56


3059:src/stm32f1xx_hal_spi.c **** static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
3060:src/stm32f1xx_hal_spi.c **** {
3061:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
3062:src/stm32f1xx_hal_spi.c **** 
3063:src/stm32f1xx_hal_spi.c ****   /* Disable SPI Peripheral */
3064:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_DISABLE(hspi);
3065:src/stm32f1xx_hal_spi.c **** 
3066:src/stm32f1xx_hal_spi.c ****   hspi->hdmarx->XferAbortCallback = NULL;
3067:src/stm32f1xx_hal_spi.c **** 
3068:src/stm32f1xx_hal_spi.c ****   /* Disable Rx DMA Request */
3069:src/stm32f1xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
3070:src/stm32f1xx_hal_spi.c **** 
3071:src/stm32f1xx_hal_spi.c ****   /* Check Busy flag */
3072:src/stm32f1xx_hal_spi.c ****   if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
3073:src/stm32f1xx_hal_spi.c ****   {
3074:src/stm32f1xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
3075:src/stm32f1xx_hal_spi.c ****   }
3076:src/stm32f1xx_hal_spi.c **** 
3077:src/stm32f1xx_hal_spi.c ****   /* Check if an Abort process is still ongoing */
3078:src/stm32f1xx_hal_spi.c ****   if (hspi->hdmatx != NULL)
3079:src/stm32f1xx_hal_spi.c ****   {
3080:src/stm32f1xx_hal_spi.c ****     if (hspi->hdmatx->XferAbortCallback != NULL)
3081:src/stm32f1xx_hal_spi.c ****     {
3082:src/stm32f1xx_hal_spi.c ****       return;
3083:src/stm32f1xx_hal_spi.c ****     }
3084:src/stm32f1xx_hal_spi.c ****   }
3085:src/stm32f1xx_hal_spi.c **** 
3086:src/stm32f1xx_hal_spi.c ****   /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete 
3087:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = 0U;
3088:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = 0U;
3089:src/stm32f1xx_hal_spi.c **** 
3090:src/stm32f1xx_hal_spi.c ****   /* Check no error during Abort procedure */
3091:src/stm32f1xx_hal_spi.c ****   if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
3092:src/stm32f1xx_hal_spi.c ****   {
3093:src/stm32f1xx_hal_spi.c ****     /* Reset errorCode */
3094:src/stm32f1xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_NONE;
3095:src/stm32f1xx_hal_spi.c ****   }
3096:src/stm32f1xx_hal_spi.c **** 
3097:src/stm32f1xx_hal_spi.c ****   /* Clear the Error flags in the SR register */
3098:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_CLEAR_OVRFLAG(hspi);
3099:src/stm32f1xx_hal_spi.c **** 
3100:src/stm32f1xx_hal_spi.c ****   /* Restore hspi->State to Ready */
3101:src/stm32f1xx_hal_spi.c ****   hspi->State  = HAL_SPI_STATE_READY;
3102:src/stm32f1xx_hal_spi.c **** 
3103:src/stm32f1xx_hal_spi.c ****   /* Call user Abort complete callback */
3104:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
3105:src/stm32f1xx_hal_spi.c ****   hspi->AbortCpltCallback(hspi);
3106:src/stm32f1xx_hal_spi.c **** #else
3107:src/stm32f1xx_hal_spi.c ****   HAL_SPI_AbortCpltCallback(hspi);
3108:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
3109:src/stm32f1xx_hal_spi.c **** }
3110:src/stm32f1xx_hal_spi.c **** 
3111:src/stm32f1xx_hal_spi.c **** /**
3112:src/stm32f1xx_hal_spi.c ****   * @brief  Rx 8-bit handler for Transmit and Receive in Interrupt mode.
3113:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3114:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3115:src/stm32f1xx_hal_spi.c ****   * @retval None
ARM GAS  /tmp/ccdPJtdr.s 			page 57


3116:src/stm32f1xx_hal_spi.c ****   */
3117:src/stm32f1xx_hal_spi.c **** static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
3118:src/stm32f1xx_hal_spi.c **** {
3119:src/stm32f1xx_hal_spi.c ****   /* Receive data in 8bit mode */
3120:src/stm32f1xx_hal_spi.c ****   *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
3121:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr++;
3122:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount--;
3123:src/stm32f1xx_hal_spi.c **** 
3124:src/stm32f1xx_hal_spi.c ****   /* Check end of the reception */
3125:src/stm32f1xx_hal_spi.c ****   if (hspi->RxXferCount == 0U)
3126:src/stm32f1xx_hal_spi.c ****   {
3127:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3128:src/stm32f1xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3129:src/stm32f1xx_hal_spi.c ****     {
3130:src/stm32f1xx_hal_spi.c ****       hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
3131:src/stm32f1xx_hal_spi.c ****       return;
3132:src/stm32f1xx_hal_spi.c ****     }
3133:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3134:src/stm32f1xx_hal_spi.c **** 
3135:src/stm32f1xx_hal_spi.c ****     /* Disable RXNE  and ERR interrupt */
3136:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
3137:src/stm32f1xx_hal_spi.c **** 
3138:src/stm32f1xx_hal_spi.c ****     if (hspi->TxXferCount == 0U)
3139:src/stm32f1xx_hal_spi.c ****     {
3140:src/stm32f1xx_hal_spi.c ****       SPI_CloseRxTx_ISR(hspi);
3141:src/stm32f1xx_hal_spi.c ****     }
3142:src/stm32f1xx_hal_spi.c ****   }
3143:src/stm32f1xx_hal_spi.c **** }
3144:src/stm32f1xx_hal_spi.c **** 
3145:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3146:src/stm32f1xx_hal_spi.c **** /**
3147:src/stm32f1xx_hal_spi.c ****   * @brief  Rx 8-bit handler for Transmit and Receive in Interrupt mode.
3148:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3149:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3150:src/stm32f1xx_hal_spi.c ****   * @retval None
3151:src/stm32f1xx_hal_spi.c ****   */
3152:src/stm32f1xx_hal_spi.c **** static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
3153:src/stm32f1xx_hal_spi.c **** {
3154:src/stm32f1xx_hal_spi.c ****   /* Read 8bit CRC to flush Data Regsiter */
3155:src/stm32f1xx_hal_spi.c ****   READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
3156:src/stm32f1xx_hal_spi.c **** 
3157:src/stm32f1xx_hal_spi.c ****   /* Disable RXNE and ERR interrupt */
3158:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
3159:src/stm32f1xx_hal_spi.c **** 
3160:src/stm32f1xx_hal_spi.c ****   if (hspi->TxXferCount == 0U)
3161:src/stm32f1xx_hal_spi.c ****   {
3162:src/stm32f1xx_hal_spi.c ****     SPI_CloseRxTx_ISR(hspi);
3163:src/stm32f1xx_hal_spi.c ****   }
3164:src/stm32f1xx_hal_spi.c **** }
3165:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3166:src/stm32f1xx_hal_spi.c **** 
3167:src/stm32f1xx_hal_spi.c **** /**
3168:src/stm32f1xx_hal_spi.c ****   * @brief  Tx 8-bit handler for Transmit and Receive in Interrupt mode.
3169:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3170:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3171:src/stm32f1xx_hal_spi.c ****   * @retval None
3172:src/stm32f1xx_hal_spi.c ****   */
ARM GAS  /tmp/ccdPJtdr.s 			page 58


3173:src/stm32f1xx_hal_spi.c **** static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
3174:src/stm32f1xx_hal_spi.c **** {
3175:src/stm32f1xx_hal_spi.c ****   *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
3176:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr++;
3177:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount--;
3178:src/stm32f1xx_hal_spi.c **** 
3179:src/stm32f1xx_hal_spi.c ****   /* Check the end of the transmission */
3180:src/stm32f1xx_hal_spi.c ****   if (hspi->TxXferCount == 0U)
3181:src/stm32f1xx_hal_spi.c ****   {
3182:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3183:src/stm32f1xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3184:src/stm32f1xx_hal_spi.c ****     {
3185:src/stm32f1xx_hal_spi.c ****       /* Set CRC Next Bit to send CRC */
3186:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
3187:src/stm32f1xx_hal_spi.c ****       /* Disable TXE interrupt */
3188:src/stm32f1xx_hal_spi.c ****       __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
3189:src/stm32f1xx_hal_spi.c ****       return;
3190:src/stm32f1xx_hal_spi.c ****     }
3191:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3192:src/stm32f1xx_hal_spi.c **** 
3193:src/stm32f1xx_hal_spi.c ****     /* Disable TXE interrupt */
3194:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
3195:src/stm32f1xx_hal_spi.c **** 
3196:src/stm32f1xx_hal_spi.c ****     if (hspi->RxXferCount == 0U)
3197:src/stm32f1xx_hal_spi.c ****     {
3198:src/stm32f1xx_hal_spi.c ****       SPI_CloseRxTx_ISR(hspi);
3199:src/stm32f1xx_hal_spi.c ****     }
3200:src/stm32f1xx_hal_spi.c ****   }
3201:src/stm32f1xx_hal_spi.c **** }
3202:src/stm32f1xx_hal_spi.c **** 
3203:src/stm32f1xx_hal_spi.c **** /**
3204:src/stm32f1xx_hal_spi.c ****   * @brief  Rx 16-bit handler for Transmit and Receive in Interrupt mode.
3205:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3206:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3207:src/stm32f1xx_hal_spi.c ****   * @retval None
3208:src/stm32f1xx_hal_spi.c ****   */
3209:src/stm32f1xx_hal_spi.c **** static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
3210:src/stm32f1xx_hal_spi.c **** {
3211:src/stm32f1xx_hal_spi.c ****   /* Receive data in 16 Bit mode */
3212:src/stm32f1xx_hal_spi.c ****   *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
3213:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr += sizeof(uint16_t);
3214:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount--;
3215:src/stm32f1xx_hal_spi.c **** 
3216:src/stm32f1xx_hal_spi.c ****   if (hspi->RxXferCount == 0U)
3217:src/stm32f1xx_hal_spi.c ****   {
3218:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3219:src/stm32f1xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3220:src/stm32f1xx_hal_spi.c ****     {
3221:src/stm32f1xx_hal_spi.c ****       hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
3222:src/stm32f1xx_hal_spi.c ****       return;
3223:src/stm32f1xx_hal_spi.c ****     }
3224:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3225:src/stm32f1xx_hal_spi.c **** 
3226:src/stm32f1xx_hal_spi.c ****     /* Disable RXNE interrupt */
3227:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
3228:src/stm32f1xx_hal_spi.c **** 
3229:src/stm32f1xx_hal_spi.c ****     if (hspi->TxXferCount == 0U)
ARM GAS  /tmp/ccdPJtdr.s 			page 59


3230:src/stm32f1xx_hal_spi.c ****     {
3231:src/stm32f1xx_hal_spi.c ****       SPI_CloseRxTx_ISR(hspi);
3232:src/stm32f1xx_hal_spi.c ****     }
3233:src/stm32f1xx_hal_spi.c ****   }
3234:src/stm32f1xx_hal_spi.c **** }
3235:src/stm32f1xx_hal_spi.c **** 
3236:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3237:src/stm32f1xx_hal_spi.c **** /**
3238:src/stm32f1xx_hal_spi.c ****   * @brief  Manage the CRC 16-bit receive for Transmit and Receive in Interrupt mode.
3239:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3240:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3241:src/stm32f1xx_hal_spi.c ****   * @retval None
3242:src/stm32f1xx_hal_spi.c ****   */
3243:src/stm32f1xx_hal_spi.c **** static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
3244:src/stm32f1xx_hal_spi.c **** {
3245:src/stm32f1xx_hal_spi.c ****   /* Read 16bit CRC to flush Data Regsiter */
3246:src/stm32f1xx_hal_spi.c ****   READ_REG(hspi->Instance->DR);
3247:src/stm32f1xx_hal_spi.c **** 
3248:src/stm32f1xx_hal_spi.c ****   /* Disable RXNE interrupt */
3249:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
3250:src/stm32f1xx_hal_spi.c **** 
3251:src/stm32f1xx_hal_spi.c ****   SPI_CloseRxTx_ISR(hspi);
3252:src/stm32f1xx_hal_spi.c **** }
3253:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3254:src/stm32f1xx_hal_spi.c **** 
3255:src/stm32f1xx_hal_spi.c **** /**
3256:src/stm32f1xx_hal_spi.c ****   * @brief  Tx 16-bit handler for Transmit and Receive in Interrupt mode.
3257:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3258:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3259:src/stm32f1xx_hal_spi.c ****   * @retval None
3260:src/stm32f1xx_hal_spi.c ****   */
3261:src/stm32f1xx_hal_spi.c **** static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
3262:src/stm32f1xx_hal_spi.c **** {
3263:src/stm32f1xx_hal_spi.c ****   /* Transmit data in 16 Bit mode */
3264:src/stm32f1xx_hal_spi.c ****   hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
3265:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr += sizeof(uint16_t);
3266:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount--;
3267:src/stm32f1xx_hal_spi.c **** 
3268:src/stm32f1xx_hal_spi.c ****   /* Enable CRC Transmission */
3269:src/stm32f1xx_hal_spi.c ****   if (hspi->TxXferCount == 0U)
3270:src/stm32f1xx_hal_spi.c ****   {
3271:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3272:src/stm32f1xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3273:src/stm32f1xx_hal_spi.c ****     {
3274:src/stm32f1xx_hal_spi.c ****       /* Set CRC Next Bit to send CRC */
3275:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
3276:src/stm32f1xx_hal_spi.c ****       /* Disable TXE interrupt */
3277:src/stm32f1xx_hal_spi.c ****       __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
3278:src/stm32f1xx_hal_spi.c ****       return;
3279:src/stm32f1xx_hal_spi.c ****     }
3280:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3281:src/stm32f1xx_hal_spi.c **** 
3282:src/stm32f1xx_hal_spi.c ****     /* Disable TXE interrupt */
3283:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
3284:src/stm32f1xx_hal_spi.c **** 
3285:src/stm32f1xx_hal_spi.c ****     if (hspi->RxXferCount == 0U)
3286:src/stm32f1xx_hal_spi.c ****     {
ARM GAS  /tmp/ccdPJtdr.s 			page 60


3287:src/stm32f1xx_hal_spi.c ****       SPI_CloseRxTx_ISR(hspi);
3288:src/stm32f1xx_hal_spi.c ****     }
3289:src/stm32f1xx_hal_spi.c ****   }
3290:src/stm32f1xx_hal_spi.c **** }
3291:src/stm32f1xx_hal_spi.c **** 
3292:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3293:src/stm32f1xx_hal_spi.c **** /**
3294:src/stm32f1xx_hal_spi.c ****   * @brief  Manage the CRC 8-bit receive in Interrupt context.
3295:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3296:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3297:src/stm32f1xx_hal_spi.c ****   * @retval None
3298:src/stm32f1xx_hal_spi.c ****   */
3299:src/stm32f1xx_hal_spi.c **** static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
3300:src/stm32f1xx_hal_spi.c **** {
3301:src/stm32f1xx_hal_spi.c ****   /* Read 8bit CRC to flush Data Register */
3302:src/stm32f1xx_hal_spi.c ****   READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
3303:src/stm32f1xx_hal_spi.c **** 
3304:src/stm32f1xx_hal_spi.c ****   SPI_CloseRx_ISR(hspi);
3305:src/stm32f1xx_hal_spi.c **** }
3306:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3307:src/stm32f1xx_hal_spi.c **** 
3308:src/stm32f1xx_hal_spi.c **** /**
3309:src/stm32f1xx_hal_spi.c ****   * @brief  Manage the receive 8-bit in Interrupt context.
3310:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3311:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3312:src/stm32f1xx_hal_spi.c ****   * @retval None
3313:src/stm32f1xx_hal_spi.c ****   */
3314:src/stm32f1xx_hal_spi.c **** static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
3315:src/stm32f1xx_hal_spi.c **** {
3316:src/stm32f1xx_hal_spi.c ****   *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
3317:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr++;
3318:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount--;
3319:src/stm32f1xx_hal_spi.c **** 
3320:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3321:src/stm32f1xx_hal_spi.c ****   /* Enable CRC Transmission */
3322:src/stm32f1xx_hal_spi.c ****   if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
3323:src/stm32f1xx_hal_spi.c ****   {
3324:src/stm32f1xx_hal_spi.c ****     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
3325:src/stm32f1xx_hal_spi.c ****   }
3326:src/stm32f1xx_hal_spi.c ****   /* Check if CRCNEXT is well reseted by hardware */
3327:src/stm32f1xx_hal_spi.c ****   if (READ_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT))
3328:src/stm32f1xx_hal_spi.c ****   {
3329:src/stm32f1xx_hal_spi.c ****     /* Workaround to force CRCNEXT bit to zero in case of CRCNEXT is not reset automatically by har
3330:src/stm32f1xx_hal_spi.c ****     CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
3331:src/stm32f1xx_hal_spi.c ****   }
3332:src/stm32f1xx_hal_spi.c **** 
3333:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3334:src/stm32f1xx_hal_spi.c **** 
3335:src/stm32f1xx_hal_spi.c ****   if (hspi->RxXferCount == 0U)
3336:src/stm32f1xx_hal_spi.c ****   {
3337:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3338:src/stm32f1xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3339:src/stm32f1xx_hal_spi.c ****     {
3340:src/stm32f1xx_hal_spi.c ****       hspi->RxISR =  SPI_RxISR_8BITCRC;
3341:src/stm32f1xx_hal_spi.c ****       return;
3342:src/stm32f1xx_hal_spi.c ****     }
3343:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
ARM GAS  /tmp/ccdPJtdr.s 			page 61


3344:src/stm32f1xx_hal_spi.c ****     SPI_CloseRx_ISR(hspi);
3345:src/stm32f1xx_hal_spi.c ****   }
3346:src/stm32f1xx_hal_spi.c **** }
3347:src/stm32f1xx_hal_spi.c **** 
3348:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3349:src/stm32f1xx_hal_spi.c **** /**
3350:src/stm32f1xx_hal_spi.c ****   * @brief  Manage the CRC 16-bit receive in Interrupt context.
3351:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3352:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3353:src/stm32f1xx_hal_spi.c ****   * @retval None
3354:src/stm32f1xx_hal_spi.c ****   */
3355:src/stm32f1xx_hal_spi.c **** static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
3356:src/stm32f1xx_hal_spi.c **** {
3357:src/stm32f1xx_hal_spi.c ****   /* Read 16bit CRC to flush Data Register */
3358:src/stm32f1xx_hal_spi.c ****   READ_REG(hspi->Instance->DR);
3359:src/stm32f1xx_hal_spi.c **** 
3360:src/stm32f1xx_hal_spi.c ****   /* Disable RXNE and ERR interrupt */
3361:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
3362:src/stm32f1xx_hal_spi.c **** 
3363:src/stm32f1xx_hal_spi.c ****   SPI_CloseRx_ISR(hspi);
3364:src/stm32f1xx_hal_spi.c **** }
3365:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3366:src/stm32f1xx_hal_spi.c **** 
3367:src/stm32f1xx_hal_spi.c **** /**
3368:src/stm32f1xx_hal_spi.c ****   * @brief  Manage the 16-bit receive in Interrupt context.
3369:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3370:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3371:src/stm32f1xx_hal_spi.c ****   * @retval None
3372:src/stm32f1xx_hal_spi.c ****   */
3373:src/stm32f1xx_hal_spi.c **** static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
3374:src/stm32f1xx_hal_spi.c **** {
3375:src/stm32f1xx_hal_spi.c ****   *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
3376:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr += sizeof(uint16_t);
3377:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount--;
3378:src/stm32f1xx_hal_spi.c **** 
3379:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3380:src/stm32f1xx_hal_spi.c ****   /* Enable CRC Transmission */
3381:src/stm32f1xx_hal_spi.c ****   if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
3382:src/stm32f1xx_hal_spi.c ****   {
3383:src/stm32f1xx_hal_spi.c ****     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
3384:src/stm32f1xx_hal_spi.c ****   }
3385:src/stm32f1xx_hal_spi.c ****   /* Check if CRCNEXT is well reseted by hardware */
3386:src/stm32f1xx_hal_spi.c ****   if (READ_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT))
3387:src/stm32f1xx_hal_spi.c ****   {
3388:src/stm32f1xx_hal_spi.c ****     /* Workaround to force CRCNEXT bit to zero in case of CRCNEXT is not reset automatically by har
3389:src/stm32f1xx_hal_spi.c ****     CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
3390:src/stm32f1xx_hal_spi.c ****   }
3391:src/stm32f1xx_hal_spi.c **** 
3392:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3393:src/stm32f1xx_hal_spi.c **** 
3394:src/stm32f1xx_hal_spi.c ****   if (hspi->RxXferCount == 0U)
3395:src/stm32f1xx_hal_spi.c ****   {
3396:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3397:src/stm32f1xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3398:src/stm32f1xx_hal_spi.c ****     {
3399:src/stm32f1xx_hal_spi.c ****       hspi->RxISR = SPI_RxISR_16BITCRC;
3400:src/stm32f1xx_hal_spi.c ****       return;
ARM GAS  /tmp/ccdPJtdr.s 			page 62


3401:src/stm32f1xx_hal_spi.c ****     }
3402:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3403:src/stm32f1xx_hal_spi.c ****     SPI_CloseRx_ISR(hspi);
3404:src/stm32f1xx_hal_spi.c ****   }
3405:src/stm32f1xx_hal_spi.c **** }
3406:src/stm32f1xx_hal_spi.c **** 
3407:src/stm32f1xx_hal_spi.c **** /**
3408:src/stm32f1xx_hal_spi.c ****   * @brief  Handle the data 8-bit transmit in Interrupt mode.
3409:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3410:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3411:src/stm32f1xx_hal_spi.c ****   * @retval None
3412:src/stm32f1xx_hal_spi.c ****   */
3413:src/stm32f1xx_hal_spi.c **** static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
3414:src/stm32f1xx_hal_spi.c **** {
3415:src/stm32f1xx_hal_spi.c ****   *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
3416:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr++;
3417:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount--;
3418:src/stm32f1xx_hal_spi.c **** 
3419:src/stm32f1xx_hal_spi.c ****   if (hspi->TxXferCount == 0U)
3420:src/stm32f1xx_hal_spi.c ****   {
3421:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3422:src/stm32f1xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3423:src/stm32f1xx_hal_spi.c ****     {
3424:src/stm32f1xx_hal_spi.c ****       /* Enable CRC Transmission */
3425:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
3426:src/stm32f1xx_hal_spi.c ****     }
3427:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3428:src/stm32f1xx_hal_spi.c ****     SPI_CloseTx_ISR(hspi);
3429:src/stm32f1xx_hal_spi.c ****   }
3430:src/stm32f1xx_hal_spi.c **** }
3431:src/stm32f1xx_hal_spi.c **** 
3432:src/stm32f1xx_hal_spi.c **** /**
3433:src/stm32f1xx_hal_spi.c ****   * @brief  Handle the data 16-bit transmit in Interrupt mode.
3434:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3435:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3436:src/stm32f1xx_hal_spi.c ****   * @retval None
3437:src/stm32f1xx_hal_spi.c ****   */
3438:src/stm32f1xx_hal_spi.c **** static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
3439:src/stm32f1xx_hal_spi.c **** {
3440:src/stm32f1xx_hal_spi.c ****   /* Transmit data in 16 Bit mode */
3441:src/stm32f1xx_hal_spi.c ****   hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
3442:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr += sizeof(uint16_t);
3443:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount--;
3444:src/stm32f1xx_hal_spi.c **** 
3445:src/stm32f1xx_hal_spi.c ****   if (hspi->TxXferCount == 0U)
3446:src/stm32f1xx_hal_spi.c ****   {
3447:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3448:src/stm32f1xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3449:src/stm32f1xx_hal_spi.c ****     {
3450:src/stm32f1xx_hal_spi.c ****       /* Enable CRC Transmission */
3451:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
3452:src/stm32f1xx_hal_spi.c ****     }
3453:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3454:src/stm32f1xx_hal_spi.c ****     SPI_CloseTx_ISR(hspi);
3455:src/stm32f1xx_hal_spi.c ****   }
3456:src/stm32f1xx_hal_spi.c **** }
3457:src/stm32f1xx_hal_spi.c **** 
ARM GAS  /tmp/ccdPJtdr.s 			page 63


3458:src/stm32f1xx_hal_spi.c **** /**
3459:src/stm32f1xx_hal_spi.c ****   * @brief  Handle SPI Communication Timeout.
3460:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3461:src/stm32f1xx_hal_spi.c ****   *              the configuration information for SPI module.
3462:src/stm32f1xx_hal_spi.c ****   * @param  Flag SPI flag to check
3463:src/stm32f1xx_hal_spi.c ****   * @param  State flag state to check
3464:src/stm32f1xx_hal_spi.c ****   * @param  Timeout Timeout duration
3465:src/stm32f1xx_hal_spi.c ****   * @param  Tickstart tick start value
3466:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
3467:src/stm32f1xx_hal_spi.c ****   */
3468:src/stm32f1xx_hal_spi.c **** static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, Flag
3469:src/stm32f1xx_hal_spi.c ****                                                        uint32_t Timeout, uint32_t Tickstart)
3470:src/stm32f1xx_hal_spi.c **** {
3471:src/stm32f1xx_hal_spi.c ****   while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
3472:src/stm32f1xx_hal_spi.c ****   {
3473:src/stm32f1xx_hal_spi.c ****     if (Timeout != HAL_MAX_DELAY)
3474:src/stm32f1xx_hal_spi.c ****     {
3475:src/stm32f1xx_hal_spi.c ****       if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
3476:src/stm32f1xx_hal_spi.c ****       {
3477:src/stm32f1xx_hal_spi.c ****         /* Disable the SPI and reset the CRC: the CRC value should be cleared
3478:src/stm32f1xx_hal_spi.c ****         on both master and slave sides in order to resynchronize the master
3479:src/stm32f1xx_hal_spi.c ****         and slave for their respective CRC calculation */
3480:src/stm32f1xx_hal_spi.c **** 
3481:src/stm32f1xx_hal_spi.c ****         /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
3482:src/stm32f1xx_hal_spi.c ****         __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
3483:src/stm32f1xx_hal_spi.c **** 
3484:src/stm32f1xx_hal_spi.c ****         if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
3485:src/stm32f1xx_hal_spi.c ****                                                      || (hspi->Init.Direction == SPI_DIRECTION_2LIN
3486:src/stm32f1xx_hal_spi.c ****         {
3487:src/stm32f1xx_hal_spi.c ****           /* Disable SPI peripheral */
3488:src/stm32f1xx_hal_spi.c ****           __HAL_SPI_DISABLE(hspi);
3489:src/stm32f1xx_hal_spi.c ****         }
3490:src/stm32f1xx_hal_spi.c **** 
3491:src/stm32f1xx_hal_spi.c ****         /* Reset CRC Calculation */
3492:src/stm32f1xx_hal_spi.c ****         if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3493:src/stm32f1xx_hal_spi.c ****         {
3494:src/stm32f1xx_hal_spi.c ****           SPI_RESET_CRC(hspi);
3495:src/stm32f1xx_hal_spi.c ****         }
3496:src/stm32f1xx_hal_spi.c **** 
3497:src/stm32f1xx_hal_spi.c ****         hspi->State = HAL_SPI_STATE_READY;
3498:src/stm32f1xx_hal_spi.c **** 
3499:src/stm32f1xx_hal_spi.c ****         /* Process Unlocked */
3500:src/stm32f1xx_hal_spi.c ****         __HAL_UNLOCK(hspi);
3501:src/stm32f1xx_hal_spi.c **** 
3502:src/stm32f1xx_hal_spi.c ****         return HAL_TIMEOUT;
3503:src/stm32f1xx_hal_spi.c ****       }
3504:src/stm32f1xx_hal_spi.c ****     }
3505:src/stm32f1xx_hal_spi.c ****   }
3506:src/stm32f1xx_hal_spi.c **** 
3507:src/stm32f1xx_hal_spi.c ****   return HAL_OK;
3508:src/stm32f1xx_hal_spi.c **** }
3509:src/stm32f1xx_hal_spi.c **** 
3510:src/stm32f1xx_hal_spi.c **** /**
3511:src/stm32f1xx_hal_spi.c ****   * @brief  Handle the check of the RX transaction complete.
3512:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3513:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3514:src/stm32f1xx_hal_spi.c ****   * @param  Timeout Timeout duration
ARM GAS  /tmp/ccdPJtdr.s 			page 64


3515:src/stm32f1xx_hal_spi.c ****   * @param  Tickstart tick start value
3516:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
3517:src/stm32f1xx_hal_spi.c ****   */
3518:src/stm32f1xx_hal_spi.c **** static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t 
3519:src/stm32f1xx_hal_spi.c **** {
3520:src/stm32f1xx_hal_spi.c ****   if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
3521:src/stm32f1xx_hal_spi.c ****                                                || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXO
3522:src/stm32f1xx_hal_spi.c ****   {
3523:src/stm32f1xx_hal_spi.c ****     /* Disable SPI peripheral */
3524:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_DISABLE(hspi);
3525:src/stm32f1xx_hal_spi.c ****   }
3526:src/stm32f1xx_hal_spi.c **** 
3527:src/stm32f1xx_hal_spi.c ****   if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)
3528:src/stm32f1xx_hal_spi.c ****   {
3529:src/stm32f1xx_hal_spi.c ****     /* Wait the RXNE reset */
3530:src/stm32f1xx_hal_spi.c ****     if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
3531:src/stm32f1xx_hal_spi.c ****     {
3532:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
3533:src/stm32f1xx_hal_spi.c ****       return HAL_TIMEOUT;
3534:src/stm32f1xx_hal_spi.c ****     }
3535:src/stm32f1xx_hal_spi.c ****   }
3536:src/stm32f1xx_hal_spi.c ****   else
3537:src/stm32f1xx_hal_spi.c ****   {
3538:src/stm32f1xx_hal_spi.c ****     /* Control the BSY flag */
3539:src/stm32f1xx_hal_spi.c ****     if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
3540:src/stm32f1xx_hal_spi.c ****     {
3541:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
3542:src/stm32f1xx_hal_spi.c ****       return HAL_TIMEOUT;
3543:src/stm32f1xx_hal_spi.c ****     }
3544:src/stm32f1xx_hal_spi.c ****   }
3545:src/stm32f1xx_hal_spi.c ****   return HAL_OK;
3546:src/stm32f1xx_hal_spi.c **** }
3547:src/stm32f1xx_hal_spi.c **** 
3548:src/stm32f1xx_hal_spi.c **** /**
3549:src/stm32f1xx_hal_spi.c ****   * @brief  Handle the check of the RXTX or TX transaction complete.
3550:src/stm32f1xx_hal_spi.c ****   * @param  hspi SPI handle
3551:src/stm32f1xx_hal_spi.c ****   * @param  Timeout Timeout duration
3552:src/stm32f1xx_hal_spi.c ****   * @param  Tickstart tick start value
3553:src/stm32f1xx_hal_spi.c ****   * @retval HAL status
3554:src/stm32f1xx_hal_spi.c ****   */
3555:src/stm32f1xx_hal_spi.c **** static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t
3556:src/stm32f1xx_hal_spi.c **** {
3557:src/stm32f1xx_hal_spi.c ****   /* Control the BSY flag */
3558:src/stm32f1xx_hal_spi.c ****   if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
3559:src/stm32f1xx_hal_spi.c ****   {
3560:src/stm32f1xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
3561:src/stm32f1xx_hal_spi.c ****     return HAL_TIMEOUT;
3562:src/stm32f1xx_hal_spi.c ****   }
3563:src/stm32f1xx_hal_spi.c ****   return HAL_OK;
3564:src/stm32f1xx_hal_spi.c **** }
3565:src/stm32f1xx_hal_spi.c **** 
3566:src/stm32f1xx_hal_spi.c **** /**
3567:src/stm32f1xx_hal_spi.c ****   * @brief  Handle the end of the RXTX transaction.
3568:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3569:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3570:src/stm32f1xx_hal_spi.c ****   * @retval None
3571:src/stm32f1xx_hal_spi.c ****   */
ARM GAS  /tmp/ccdPJtdr.s 			page 65


3572:src/stm32f1xx_hal_spi.c **** static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
3573:src/stm32f1xx_hal_spi.c **** {
3574:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
3575:src/stm32f1xx_hal_spi.c ****   __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
3576:src/stm32f1xx_hal_spi.c **** 
3577:src/stm32f1xx_hal_spi.c ****   /* Init tickstart for timeout managment*/
3578:src/stm32f1xx_hal_spi.c ****   tickstart = HAL_GetTick();
3579:src/stm32f1xx_hal_spi.c **** 
3580:src/stm32f1xx_hal_spi.c ****   /* Disable ERR interrupt */
3581:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
3582:src/stm32f1xx_hal_spi.c **** 
3583:src/stm32f1xx_hal_spi.c ****   /* Wait until TXE flag is set */
3584:src/stm32f1xx_hal_spi.c ****   do
3585:src/stm32f1xx_hal_spi.c ****   {
3586:src/stm32f1xx_hal_spi.c ****     if (count == 0U)
3587:src/stm32f1xx_hal_spi.c ****     {
3588:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
3589:src/stm32f1xx_hal_spi.c ****       break;
3590:src/stm32f1xx_hal_spi.c ****     }
3591:src/stm32f1xx_hal_spi.c ****     count--;
3592:src/stm32f1xx_hal_spi.c ****   } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
3593:src/stm32f1xx_hal_spi.c **** 
3594:src/stm32f1xx_hal_spi.c ****   /* Check the end of the transaction */
3595:src/stm32f1xx_hal_spi.c ****   if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
3596:src/stm32f1xx_hal_spi.c ****   {
3597:src/stm32f1xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
3598:src/stm32f1xx_hal_spi.c ****   }
3599:src/stm32f1xx_hal_spi.c **** 
3600:src/stm32f1xx_hal_spi.c ****   /* Clear overrun flag in 2 Lines communication mode because received is not read */
3601:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
3602:src/stm32f1xx_hal_spi.c ****   {
3603:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_CLEAR_OVRFLAG(hspi);
3604:src/stm32f1xx_hal_spi.c ****   }
3605:src/stm32f1xx_hal_spi.c **** 
3606:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3607:src/stm32f1xx_hal_spi.c ****   /* Check if CRC error occurred */
3608:src/stm32f1xx_hal_spi.c ****   if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
3609:src/stm32f1xx_hal_spi.c ****   {
3610:src/stm32f1xx_hal_spi.c ****     /* Check if CRC error is valid or not (workaround to be applied or not) */
3611:src/stm32f1xx_hal_spi.c ****     if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
3612:src/stm32f1xx_hal_spi.c ****     {
3613:src/stm32f1xx_hal_spi.c ****       hspi->State = HAL_SPI_STATE_READY;
3614:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
3615:src/stm32f1xx_hal_spi.c **** 
3616:src/stm32f1xx_hal_spi.c ****       /* Reset CRC Calculation */
3617:src/stm32f1xx_hal_spi.c ****       SPI_RESET_CRC(hspi);
3618:src/stm32f1xx_hal_spi.c **** 
3619:src/stm32f1xx_hal_spi.c ****       /* Call user error callback */
3620:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
3621:src/stm32f1xx_hal_spi.c ****       hspi->ErrorCallback(hspi);
3622:src/stm32f1xx_hal_spi.c **** #else
3623:src/stm32f1xx_hal_spi.c ****       HAL_SPI_ErrorCallback(hspi);
3624:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
3625:src/stm32f1xx_hal_spi.c ****     }
3626:src/stm32f1xx_hal_spi.c ****     else
3627:src/stm32f1xx_hal_spi.c ****     {
3628:src/stm32f1xx_hal_spi.c ****       __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
ARM GAS  /tmp/ccdPJtdr.s 			page 66


3629:src/stm32f1xx_hal_spi.c ****     }
3630:src/stm32f1xx_hal_spi.c ****   }
3631:src/stm32f1xx_hal_spi.c ****   else
3632:src/stm32f1xx_hal_spi.c ****   {
3633:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3634:src/stm32f1xx_hal_spi.c ****     if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
3635:src/stm32f1xx_hal_spi.c ****     {
3636:src/stm32f1xx_hal_spi.c ****       if (hspi->State == HAL_SPI_STATE_BUSY_RX)
3637:src/stm32f1xx_hal_spi.c ****       {
3638:src/stm32f1xx_hal_spi.c ****         hspi->State = HAL_SPI_STATE_READY;
3639:src/stm32f1xx_hal_spi.c ****         /* Call user Rx complete callback */
3640:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
3641:src/stm32f1xx_hal_spi.c ****         hspi->RxCpltCallback(hspi);
3642:src/stm32f1xx_hal_spi.c **** #else
3643:src/stm32f1xx_hal_spi.c ****         HAL_SPI_RxCpltCallback(hspi);
3644:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
3645:src/stm32f1xx_hal_spi.c ****       }
3646:src/stm32f1xx_hal_spi.c ****       else
3647:src/stm32f1xx_hal_spi.c ****       {
3648:src/stm32f1xx_hal_spi.c ****         hspi->State = HAL_SPI_STATE_READY;
3649:src/stm32f1xx_hal_spi.c ****         /* Call user TxRx complete callback */
3650:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
3651:src/stm32f1xx_hal_spi.c ****         hspi->TxRxCpltCallback(hspi);
3652:src/stm32f1xx_hal_spi.c **** #else
3653:src/stm32f1xx_hal_spi.c ****         HAL_SPI_TxRxCpltCallback(hspi);
3654:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
3655:src/stm32f1xx_hal_spi.c ****       }
3656:src/stm32f1xx_hal_spi.c ****     }
3657:src/stm32f1xx_hal_spi.c ****     else
3658:src/stm32f1xx_hal_spi.c ****     {
3659:src/stm32f1xx_hal_spi.c ****       hspi->State = HAL_SPI_STATE_READY;
3660:src/stm32f1xx_hal_spi.c ****       /* Call user error callback */
3661:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
3662:src/stm32f1xx_hal_spi.c ****       hspi->ErrorCallback(hspi);
3663:src/stm32f1xx_hal_spi.c **** #else
3664:src/stm32f1xx_hal_spi.c ****       HAL_SPI_ErrorCallback(hspi);
3665:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
3666:src/stm32f1xx_hal_spi.c ****     }
3667:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3668:src/stm32f1xx_hal_spi.c ****   }
3669:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3670:src/stm32f1xx_hal_spi.c **** }
3671:src/stm32f1xx_hal_spi.c **** 
3672:src/stm32f1xx_hal_spi.c **** /**
3673:src/stm32f1xx_hal_spi.c ****   * @brief  Handle the end of the RX transaction.
3674:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3675:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3676:src/stm32f1xx_hal_spi.c ****   * @retval None
3677:src/stm32f1xx_hal_spi.c ****   */
3678:src/stm32f1xx_hal_spi.c **** static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
3679:src/stm32f1xx_hal_spi.c **** {
3680:src/stm32f1xx_hal_spi.c ****   /* Disable RXNE and ERR interrupt */
3681:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
3682:src/stm32f1xx_hal_spi.c **** 
3683:src/stm32f1xx_hal_spi.c ****   /* Check the end of the transaction */
3684:src/stm32f1xx_hal_spi.c ****   if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
3685:src/stm32f1xx_hal_spi.c ****   {
ARM GAS  /tmp/ccdPJtdr.s 			page 67


3686:src/stm32f1xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
3687:src/stm32f1xx_hal_spi.c ****   }
3688:src/stm32f1xx_hal_spi.c **** 
3689:src/stm32f1xx_hal_spi.c ****   /* Clear overrun flag in 2 Lines communication mode because received is not read */
3690:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
3691:src/stm32f1xx_hal_spi.c ****   {
3692:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_CLEAR_OVRFLAG(hspi);
3693:src/stm32f1xx_hal_spi.c ****   }
3694:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
3695:src/stm32f1xx_hal_spi.c **** 
3696:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3697:src/stm32f1xx_hal_spi.c ****   /* Check if CRC error occurred */
3698:src/stm32f1xx_hal_spi.c ****   if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
3699:src/stm32f1xx_hal_spi.c ****   {
3700:src/stm32f1xx_hal_spi.c ****     /* Check if CRC error is valid or not (workaround to be applied or not) */
3701:src/stm32f1xx_hal_spi.c ****     if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
3702:src/stm32f1xx_hal_spi.c ****     {
3703:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
3704:src/stm32f1xx_hal_spi.c **** 
3705:src/stm32f1xx_hal_spi.c ****       /* Reset CRC Calculation */
3706:src/stm32f1xx_hal_spi.c ****       SPI_RESET_CRC(hspi);
3707:src/stm32f1xx_hal_spi.c **** 
3708:src/stm32f1xx_hal_spi.c ****       /* Call user error callback */
3709:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
3710:src/stm32f1xx_hal_spi.c ****       hspi->ErrorCallback(hspi);
3711:src/stm32f1xx_hal_spi.c **** #else
3712:src/stm32f1xx_hal_spi.c ****       HAL_SPI_ErrorCallback(hspi);
3713:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
3714:src/stm32f1xx_hal_spi.c ****     }
3715:src/stm32f1xx_hal_spi.c ****     else
3716:src/stm32f1xx_hal_spi.c ****     {
3717:src/stm32f1xx_hal_spi.c ****       __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
3718:src/stm32f1xx_hal_spi.c ****     }
3719:src/stm32f1xx_hal_spi.c ****   }
3720:src/stm32f1xx_hal_spi.c ****   else
3721:src/stm32f1xx_hal_spi.c ****   {
3722:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3723:src/stm32f1xx_hal_spi.c ****     if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
3724:src/stm32f1xx_hal_spi.c ****     {
3725:src/stm32f1xx_hal_spi.c ****       /* Call user Rx complete callback */
3726:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
3727:src/stm32f1xx_hal_spi.c ****       hspi->RxCpltCallback(hspi);
3728:src/stm32f1xx_hal_spi.c **** #else
3729:src/stm32f1xx_hal_spi.c ****       HAL_SPI_RxCpltCallback(hspi);
3730:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
3731:src/stm32f1xx_hal_spi.c ****     }
3732:src/stm32f1xx_hal_spi.c ****     else
3733:src/stm32f1xx_hal_spi.c ****     {
3734:src/stm32f1xx_hal_spi.c ****       /* Call user error callback */
3735:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
3736:src/stm32f1xx_hal_spi.c ****       hspi->ErrorCallback(hspi);
3737:src/stm32f1xx_hal_spi.c **** #else
3738:src/stm32f1xx_hal_spi.c ****       HAL_SPI_ErrorCallback(hspi);
3739:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
3740:src/stm32f1xx_hal_spi.c ****     }
3741:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3742:src/stm32f1xx_hal_spi.c ****   }
ARM GAS  /tmp/ccdPJtdr.s 			page 68


3743:src/stm32f1xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3744:src/stm32f1xx_hal_spi.c **** }
3745:src/stm32f1xx_hal_spi.c **** 
3746:src/stm32f1xx_hal_spi.c **** /**
3747:src/stm32f1xx_hal_spi.c ****   * @brief  Handle the end of the TX transaction.
3748:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3749:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3750:src/stm32f1xx_hal_spi.c ****   * @retval None
3751:src/stm32f1xx_hal_spi.c ****   */
3752:src/stm32f1xx_hal_spi.c **** static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
3753:src/stm32f1xx_hal_spi.c **** {
3754:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
3755:src/stm32f1xx_hal_spi.c ****   __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
3756:src/stm32f1xx_hal_spi.c **** 
3757:src/stm32f1xx_hal_spi.c ****   /* Init tickstart for timeout management*/
3758:src/stm32f1xx_hal_spi.c ****   tickstart = HAL_GetTick();
3759:src/stm32f1xx_hal_spi.c **** 
3760:src/stm32f1xx_hal_spi.c ****   /* Wait until TXE flag is set */
3761:src/stm32f1xx_hal_spi.c ****   do
3762:src/stm32f1xx_hal_spi.c ****   {
3763:src/stm32f1xx_hal_spi.c ****     if (count == 0U)
3764:src/stm32f1xx_hal_spi.c ****     {
3765:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
3766:src/stm32f1xx_hal_spi.c ****       break;
3767:src/stm32f1xx_hal_spi.c ****     }
3768:src/stm32f1xx_hal_spi.c ****     count--;
3769:src/stm32f1xx_hal_spi.c ****   } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
3770:src/stm32f1xx_hal_spi.c **** 
3771:src/stm32f1xx_hal_spi.c ****   /* Disable TXE and ERR interrupt */
3772:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
3773:src/stm32f1xx_hal_spi.c **** 
3774:src/stm32f1xx_hal_spi.c ****   /* Check the end of the transaction */
3775:src/stm32f1xx_hal_spi.c ****   if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
3776:src/stm32f1xx_hal_spi.c ****   {
3777:src/stm32f1xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
3778:src/stm32f1xx_hal_spi.c ****   }
3779:src/stm32f1xx_hal_spi.c **** 
3780:src/stm32f1xx_hal_spi.c ****   /* Clear overrun flag in 2 Lines communication mode because received is not read */
3781:src/stm32f1xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
3782:src/stm32f1xx_hal_spi.c ****   {
3783:src/stm32f1xx_hal_spi.c ****     __HAL_SPI_CLEAR_OVRFLAG(hspi);
3784:src/stm32f1xx_hal_spi.c ****   }
3785:src/stm32f1xx_hal_spi.c **** 
3786:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
3787:src/stm32f1xx_hal_spi.c ****   if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
3788:src/stm32f1xx_hal_spi.c ****   {
3789:src/stm32f1xx_hal_spi.c ****     /* Call user error callback */
3790:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
3791:src/stm32f1xx_hal_spi.c ****     hspi->ErrorCallback(hspi);
3792:src/stm32f1xx_hal_spi.c **** #else
3793:src/stm32f1xx_hal_spi.c ****     HAL_SPI_ErrorCallback(hspi);
3794:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
3795:src/stm32f1xx_hal_spi.c ****   }
3796:src/stm32f1xx_hal_spi.c ****   else
3797:src/stm32f1xx_hal_spi.c ****   {
3798:src/stm32f1xx_hal_spi.c ****     /* Call user Rx complete callback */
3799:src/stm32f1xx_hal_spi.c **** #if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
ARM GAS  /tmp/ccdPJtdr.s 			page 69


3800:src/stm32f1xx_hal_spi.c ****     hspi->TxCpltCallback(hspi);
3801:src/stm32f1xx_hal_spi.c **** #else
3802:src/stm32f1xx_hal_spi.c ****     HAL_SPI_TxCpltCallback(hspi);
3803:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
3804:src/stm32f1xx_hal_spi.c ****   }
3805:src/stm32f1xx_hal_spi.c **** }
3806:src/stm32f1xx_hal_spi.c **** 
3807:src/stm32f1xx_hal_spi.c **** /**
3808:src/stm32f1xx_hal_spi.c ****   * @brief  Handle abort a Rx transaction.
3809:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3810:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3811:src/stm32f1xx_hal_spi.c ****   * @retval None
3812:src/stm32f1xx_hal_spi.c ****   */
3813:src/stm32f1xx_hal_spi.c **** static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
3814:src/stm32f1xx_hal_spi.c **** {
  78              		.loc 1 3814 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 8
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83              	.LVL0:
3815:src/stm32f1xx_hal_spi.c ****   __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
  84              		.loc 1 3815 0
  85 0000 45F6C052 		movw	r2, #24000	@ tmp132,
  86 0004 114B     		ldr	r3, .L7	@ tmp128,
3814:src/stm32f1xx_hal_spi.c ****   __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
  87              		.loc 1 3814 0
  88 0006 82B0     		sub	sp, sp, #8	@,,
  89              	.LCFI0:
  90              		.cfi_def_cfa_offset 8
  91              		.loc 1 3815 0
  92 0008 1B68     		ldr	r3, [r3]	@ SystemCoreClock, SystemCoreClock
  93 000a B3FBF2F2 		udiv	r2, r3, r2	@ tmp131, SystemCoreClock, tmp132
  94 000e 6423     		movs	r3, #100	@ tmp133,
  95 0010 5343     		muls	r3, r2, r3	@ count.54_6, tmp131
  96 0012 0193     		str	r3, [sp, #4]	@ count.54_6, count
  97              	.L4:
3816:src/stm32f1xx_hal_spi.c **** 
3817:src/stm32f1xx_hal_spi.c ****   /* Wait until TXE flag is set */
3818:src/stm32f1xx_hal_spi.c ****   do
3819:src/stm32f1xx_hal_spi.c ****   {
3820:src/stm32f1xx_hal_spi.c ****     if (count == 0U)
  98              		.loc 1 3820 0
  99 0014 019A     		ldr	r2, [sp, #4]	@ count.55_8, count
 100 0016 0368     		ldr	r3, [r0]	@ _19, hspi_12(D)->Instance
 101 0018 8AB9     		cbnz	r2, .L2	@ count.55_8,
3821:src/stm32f1xx_hal_spi.c ****     {
3822:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 102              		.loc 1 3822 0
 103 001a 426D     		ldr	r2, [r0, #84]	@ _16, hspi_12(D)->ErrorCode
 104 001c 42F04002 		orr	r2, r2, #64	@ _17, _16,
 105 0020 4265     		str	r2, [r0, #84]	@ _17, hspi_12(D)->ErrorCode
 106              	.L3:
3823:src/stm32f1xx_hal_spi.c ****       break;
3824:src/stm32f1xx_hal_spi.c ****     }
3825:src/stm32f1xx_hal_spi.c ****     count--;
3826:src/stm32f1xx_hal_spi.c ****   } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
ARM GAS  /tmp/ccdPJtdr.s 			page 70


3827:src/stm32f1xx_hal_spi.c **** 
3828:src/stm32f1xx_hal_spi.c ****   /* Disable SPI Peripheral */
3829:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_DISABLE(hspi);
 107              		.loc 1 3829 0
 108 0022 1A68     		ldr	r2, [r3]	@ _20, _19->CR1
 109 0024 22F04002 		bic	r2, r2, #64	@ _21, _20,
 110 0028 1A60     		str	r2, [r3]	@ _21, _19->CR1
3830:src/stm32f1xx_hal_spi.c **** 
3831:src/stm32f1xx_hal_spi.c ****   /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
3832:src/stm32f1xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 111              		.loc 1 3832 0
 112 002a 5A68     		ldr	r2, [r3, #4]	@ _23, _19->CR2
 113 002c 22F0E002 		bic	r2, r2, #224	@ _24, _23,
 114 0030 5A60     		str	r2, [r3, #4]	@ _24, _19->CR2
3833:src/stm32f1xx_hal_spi.c **** 
3834:src/stm32f1xx_hal_spi.c ****   /* Read CRC to flush Data Register */
3835:src/stm32f1xx_hal_spi.c ****   READ_REG(hspi->Instance->DR);
 115              		.loc 1 3835 0
 116 0032 DB68     		ldr	r3, [r3, #12]	@ vol.58_26, _19->DR
3836:src/stm32f1xx_hal_spi.c **** 
3837:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_ABORT;
 117              		.loc 1 3837 0
 118 0034 0723     		movs	r3, #7	@ tmp135,
 119 0036 80F85130 		strb	r3, [r0, #81]	@ tmp135, hspi_12(D)->State
3838:src/stm32f1xx_hal_spi.c **** }
 120              		.loc 1 3838 0
 121 003a 02B0     		add	sp, sp, #8	@,,
 122              	.LCFI1:
 123              		.cfi_remember_state
 124              		.cfi_def_cfa_offset 0
 125              		@ sp needed	@
 126 003c 7047     		bx	lr	@
 127              	.L2:
 128              	.LCFI2:
 129              		.cfi_restore_state
3825:src/stm32f1xx_hal_spi.c ****   } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 130              		.loc 1 3825 0
 131 003e 019A     		ldr	r2, [sp, #4]	@ count.56_9, count
 132 0040 013A     		subs	r2, r2, #1	@ count.57_10, count.56_9,
 133 0042 0192     		str	r2, [sp, #4]	@ count.57_10, count
3826:src/stm32f1xx_hal_spi.c **** 
 134              		.loc 1 3826 0
 135 0044 9A68     		ldr	r2, [r3, #8]	@ _14, _13->SR
 136 0046 9207     		lsls	r2, r2, #30	@, _14,
 137 0048 E4D5     		bpl	.L4	@,
 138 004a EAE7     		b	.L3	@
 139              	.L8:
 140              		.align	2
 141              	.L7:
 142 004c 00000000 		.word	SystemCoreClock
 143              		.cfi_endproc
 144              	.LFE122:
 145              		.size	SPI_AbortRx_ISR, .-SPI_AbortRx_ISR
 146              		.align	1
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
ARM GAS  /tmp/ccdPJtdr.s 			page 71


 150              		.fpu softvfp
 151              		.type	SPI_AbortTx_ISR, %function
 152              	SPI_AbortTx_ISR:
 153              	.LFB123:
3839:src/stm32f1xx_hal_spi.c **** 
3840:src/stm32f1xx_hal_spi.c **** /**
3841:src/stm32f1xx_hal_spi.c ****   * @brief  Handle abort a Tx or Rx/Tx transaction.
3842:src/stm32f1xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3843:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3844:src/stm32f1xx_hal_spi.c ****   * @retval None
3845:src/stm32f1xx_hal_spi.c ****   */
3846:src/stm32f1xx_hal_spi.c **** static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
3847:src/stm32f1xx_hal_spi.c **** {
 154              		.loc 1 3847 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              		@ link register save eliminated.
 159              	.LVL1:
3848:src/stm32f1xx_hal_spi.c ****   /* Disable TXEIE interrupt */
3849:src/stm32f1xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 160              		.loc 1 3849 0
 161 0050 0368     		ldr	r3, [r0]	@ _3, hspi_2(D)->Instance
 162 0052 5A68     		ldr	r2, [r3, #4]	@ _4, _3->CR2
 163 0054 22F08002 		bic	r2, r2, #128	@ _5, _4,
 164 0058 5A60     		str	r2, [r3, #4]	@ _5, _3->CR2
3850:src/stm32f1xx_hal_spi.c **** 
3851:src/stm32f1xx_hal_spi.c ****   /* Disable SPI Peripheral */
3852:src/stm32f1xx_hal_spi.c ****   __HAL_SPI_DISABLE(hspi);
 165              		.loc 1 3852 0
 166 005a 1A68     		ldr	r2, [r3]	@ _7, _3->CR1
 167 005c 22F04002 		bic	r2, r2, #64	@ _8, _7,
 168 0060 1A60     		str	r2, [r3]	@ _8, _3->CR1
3853:src/stm32f1xx_hal_spi.c **** 
3854:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_ABORT;
 169              		.loc 1 3854 0
 170 0062 0723     		movs	r3, #7	@ tmp116,
 171 0064 80F85130 		strb	r3, [r0, #81]	@ tmp116, hspi_2(D)->State
 172 0068 7047     		bx	lr	@
 173              		.cfi_endproc
 174              	.LFE123:
 175              		.size	SPI_AbortTx_ISR, .-SPI_AbortTx_ISR
 176              		.align	1
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 180              		.fpu softvfp
 181              		.type	SPI_WaitFlagStateUntilTimeout, %function
 182              	SPI_WaitFlagStateUntilTimeout:
 183              	.LFB116:
3470:src/stm32f1xx_hal_spi.c ****   while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 184              		.loc 1 3470 0
 185              		.cfi_startproc
 186              		@ args = 4, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              	.LVL2:
 189 006a 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
ARM GAS  /tmp/ccdPJtdr.s 			page 72


 190              	.LCFI3:
 191              		.cfi_def_cfa_offset 24
 192              		.cfi_offset 4, -24
 193              		.cfi_offset 5, -20
 194              		.cfi_offset 6, -16
 195              		.cfi_offset 7, -12
 196              		.cfi_offset 8, -8
 197              		.cfi_offset 14, -4
 198 006e 0446     		mov	r4, r0	@ hspi, hspi
 199 0070 8846     		mov	r8, r1	@ Flag, Flag
 200 0072 1646     		mov	r6, r2	@ State, State
 201 0074 1D46     		mov	r5, r3	@ Timeout, Timeout
 202 0076 069F     		ldr	r7, [sp, #24]	@ Tickstart, Tickstart
 203              	.LVL3:
 204              	.L11:
3471:src/stm32f1xx_hal_spi.c ****   {
 205              		.loc 1 3471 0
 206 0078 2268     		ldr	r2, [r4]	@ _5, hspi_4(D)->Instance
 207              	.L12:
 208 007a 9368     		ldr	r3, [r2, #8]	@ _6, _5->SR
 209 007c 38EA0303 		bics	r3, r8, r3	@ tmp147, Flag, _6
 210 0080 0CBF     		ite	eq
 211 0082 0123     		moveq	r3, #1	@ tmp145,
 212 0084 0023     		movne	r3, #0	@ tmp145,
 213 0086 B342     		cmp	r3, r6	@ tmp145, State
 214 0088 02D1     		bne	.L17	@,
3507:src/stm32f1xx_hal_spi.c **** }
 215              		.loc 1 3507 0
 216 008a 0020     		movs	r0, #0	@ <retval>,
3508:src/stm32f1xx_hal_spi.c **** 
 217              		.loc 1 3508 0
 218 008c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 219              	.LVL4:
 220              	.L17:
3473:src/stm32f1xx_hal_spi.c ****     {
 221              		.loc 1 3473 0
 222 0090 6B1C     		adds	r3, r5, #1	@, Timeout,
 223 0092 F2D0     		beq	.L12	@,
3475:src/stm32f1xx_hal_spi.c ****       {
 224              		.loc 1 3475 0
 225 0094 FFF7FEFF 		bl	HAL_GetTick	@
 226              	.LVL5:
 227 0098 C01B     		subs	r0, r0, r7	@ tmp136,, Tickstart
 228 009a 8542     		cmp	r5, r0	@ Timeout, tmp136
 229 009c ECD8     		bhi	.L11	@,
 230              	.LVL6:
 231              	.LBB20:
 232              	.LBB21:
3482:src/stm32f1xx_hal_spi.c **** 
 233              		.loc 1 3482 0
 234 009e 2368     		ldr	r3, [r4]	@ _22, hspi_4(D)->Instance
 235 00a0 5A68     		ldr	r2, [r3, #4]	@ _23, _22->CR2
 236 00a2 22F0E002 		bic	r2, r2, #224	@ _24, _23,
 237 00a6 5A60     		str	r2, [r3, #4]	@ _24, _22->CR2
3484:src/stm32f1xx_hal_spi.c ****                                                      || (hspi->Init.Direction == SPI_DIRECTION_2LIN
 238              		.loc 1 3484 0
 239 00a8 6268     		ldr	r2, [r4, #4]	@ hspi_4(D)->Init.Mode, hspi_4(D)->Init.Mode
ARM GAS  /tmp/ccdPJtdr.s 			page 73


 240 00aa B2F5827F 		cmp	r2, #260	@ hspi_4(D)->Init.Mode,
 241 00ae 0AD1     		bne	.L13	@,
 242 00b0 A268     		ldr	r2, [r4, #8]	@ _26, hspi_4(D)->Init.Direction
 243 00b2 B2F5004F 		cmp	r2, #32768	@ _26,
 244 00b6 02D0     		beq	.L14	@,
3485:src/stm32f1xx_hal_spi.c ****         {
 245              		.loc 1 3485 0
 246 00b8 B2F5806F 		cmp	r2, #1024	@ _26,
 247 00bc 03D1     		bne	.L13	@,
 248              	.L14:
3488:src/stm32f1xx_hal_spi.c ****         }
 249              		.loc 1 3488 0
 250 00be 1A68     		ldr	r2, [r3]	@ _27, _22->CR1
 251 00c0 22F04002 		bic	r2, r2, #64	@ _28, _27,
 252 00c4 1A60     		str	r2, [r3]	@ _28, _22->CR1
 253              	.L13:
3492:src/stm32f1xx_hal_spi.c ****         {
 254              		.loc 1 3492 0
 255 00c6 A26A     		ldr	r2, [r4, #40]	@ hspi_4(D)->Init.CRCCalculation, hspi_4(D)->Init.CRCCalculation
 256 00c8 B2F5005F 		cmp	r2, #8192	@ hspi_4(D)->Init.CRCCalculation,
 257 00cc 07D1     		bne	.L15	@,
3494:src/stm32f1xx_hal_spi.c ****         }
 258              		.loc 1 3494 0
 259 00ce 1A68     		ldr	r2, [r3]	@ _30, _22->CR1
 260 00d0 22F40052 		bic	r2, r2, #8192	@ _31, _30,
 261 00d4 1A60     		str	r2, [r3]	@ _31, _22->CR1
 262 00d6 1A68     		ldr	r2, [r3]	@ _32, _22->CR1
 263 00d8 42F40052 		orr	r2, r2, #8192	@ _33, _32,
 264 00dc 1A60     		str	r2, [r3]	@ _33, _22->CR1
 265              	.L15:
3497:src/stm32f1xx_hal_spi.c **** 
 266              		.loc 1 3497 0
 267 00de 0123     		movs	r3, #1	@ tmp139,
 268 00e0 84F85130 		strb	r3, [r4, #81]	@ tmp139, hspi_4(D)->State
3500:src/stm32f1xx_hal_spi.c **** 
 269              		.loc 1 3500 0
 270 00e4 0023     		movs	r3, #0	@ tmp141,
 271 00e6 0320     		movs	r0, #3	@ <retval>,
 272 00e8 84F85030 		strb	r3, [r4, #80]	@ tmp141, hspi_4(D)->Lock
 273              	.LVL7:
 274 00ec BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 275              	.LBE21:
 276              	.LBE20:
 277              		.cfi_endproc
 278              	.LFE116:
 279              		.size	SPI_WaitFlagStateUntilTimeout, .-SPI_WaitFlagStateUntilTimeout
 280              		.align	1
 281              		.syntax unified
 282              		.thumb
 283              		.thumb_func
 284              		.fpu softvfp
 285              		.type	SPI_EndRxTxTransaction, %function
 286              	SPI_EndRxTxTransaction:
 287              	.LFB118:
3556:src/stm32f1xx_hal_spi.c ****   /* Control the BSY flag */
 288              		.loc 1 3556 0
 289              		.cfi_startproc
ARM GAS  /tmp/ccdPJtdr.s 			page 74


 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              	.LVL8:
 293 00f0 13B5     		push	{r0, r1, r4, lr}	@
 294              	.LCFI4:
 295              		.cfi_def_cfa_offset 16
 296              		.cfi_offset 4, -8
 297              		.cfi_offset 14, -4
3558:src/stm32f1xx_hal_spi.c ****   {
 298              		.loc 1 3558 0
 299 00f2 0B46     		mov	r3, r1	@, Timeout
 300 00f4 0092     		str	r2, [sp]	@ Tickstart,
 301 00f6 8021     		movs	r1, #128	@,
 302              	.LVL9:
 303 00f8 0022     		movs	r2, #0	@,
 304              	.LVL10:
3556:src/stm32f1xx_hal_spi.c ****   /* Control the BSY flag */
 305              		.loc 1 3556 0
 306 00fa 0446     		mov	r4, r0	@ hspi, hspi
3558:src/stm32f1xx_hal_spi.c ****   {
 307              		.loc 1 3558 0
 308 00fc FFF7B5FF 		bl	SPI_WaitFlagStateUntilTimeout	@
 309              	.LVL11:
 310 0100 20B1     		cbz	r0, .L25	@ <retval>,
3561:src/stm32f1xx_hal_spi.c ****   }
 311              		.loc 1 3561 0
 312 0102 0320     		movs	r0, #3	@ <retval>,
3560:src/stm32f1xx_hal_spi.c ****     return HAL_TIMEOUT;
 313              		.loc 1 3560 0
 314 0104 636D     		ldr	r3, [r4, #84]	@ _9, hspi_4(D)->ErrorCode
 315 0106 43F02003 		orr	r3, r3, #32	@ _10, _9,
 316 010a 6365     		str	r3, [r4, #84]	@ _10, hspi_4(D)->ErrorCode
 317              	.L25:
3564:src/stm32f1xx_hal_spi.c **** 
 318              		.loc 1 3564 0
 319 010c 02B0     		add	sp, sp, #8	@,,
 320              	.LCFI5:
 321              		.cfi_def_cfa_offset 8
 322              		@ sp needed	@
 323 010e 10BD     		pop	{r4, pc}	@
 324              		.cfi_endproc
 325              	.LFE118:
 326              		.size	SPI_EndRxTxTransaction, .-SPI_EndRxTxTransaction
 327              		.align	1
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu softvfp
 332              		.type	SPI_EndRxTransaction, %function
 333              	SPI_EndRxTransaction:
 334              	.LFB117:
3519:src/stm32f1xx_hal_spi.c ****   if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 335              		.loc 1 3519 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              	.LVL12:
ARM GAS  /tmp/ccdPJtdr.s 			page 75


 340 0110 37B5     		push	{r0, r1, r2, r4, r5, lr}	@
 341              	.LCFI6:
 342              		.cfi_def_cfa_offset 24
 343              		.cfi_offset 4, -12
 344              		.cfi_offset 5, -8
 345              		.cfi_offset 14, -4
3519:src/stm32f1xx_hal_spi.c ****   if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 346              		.loc 1 3519 0
 347 0112 0B46     		mov	r3, r1	@ Timeout, Timeout
3520:src/stm32f1xx_hal_spi.c ****                                                || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXO
 348              		.loc 1 3520 0
 349 0114 4168     		ldr	r1, [r0, #4]	@ hspi_5(D)->Init.Mode, hspi_5(D)->Init.Mode
 350              	.LVL13:
3519:src/stm32f1xx_hal_spi.c ****   if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 351              		.loc 1 3519 0
 352 0116 0446     		mov	r4, r0	@ hspi, hspi
3520:src/stm32f1xx_hal_spi.c ****                                                || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXO
 353              		.loc 1 3520 0
 354 0118 B1F5827F 		cmp	r1, #260	@ hspi_5(D)->Init.Mode,
 355 011c 18D1     		bne	.L30	@,
3520:src/stm32f1xx_hal_spi.c ****                                                || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXO
 356              		.loc 1 3520 0 is_stmt 0 discriminator 1
 357 011e 8068     		ldr	r0, [r0, #8]	@ _7, hspi_5(D)->Init.Direction
 358              	.LVL14:
 359 0120 B0F5004F 		cmp	r0, #32768	@ _7,
 360 0124 02D0     		beq	.L31	@,
3521:src/stm32f1xx_hal_spi.c ****   {
 361              		.loc 1 3521 0 is_stmt 1
 362 0126 B0F5806F 		cmp	r0, #1024	@ _7,
 363 012a 11D1     		bne	.L30	@,
 364              	.L31:
3524:src/stm32f1xx_hal_spi.c ****   }
 365              		.loc 1 3524 0
 366 012c 2168     		ldr	r1, [r4]	@ _9, hspi_5(D)->Instance
3527:src/stm32f1xx_hal_spi.c ****   {
 367              		.loc 1 3527 0
 368 012e B0F5806F 		cmp	r0, #1024	@ _7,
3524:src/stm32f1xx_hal_spi.c ****   }
 369              		.loc 1 3524 0
 370 0132 0D68     		ldr	r5, [r1]	@ _11, _9->CR1
 371 0134 25F04005 		bic	r5, r5, #64	@ _12, _11,
 372 0138 0D60     		str	r5, [r1]	@ _12, _9->CR1
3527:src/stm32f1xx_hal_spi.c ****   {
 373              		.loc 1 3527 0
 374 013a 09D1     		bne	.L30	@,
 375              	.LVL15:
 376              	.LBB24:
 377              	.LBB25:
3530:src/stm32f1xx_hal_spi.c ****     {
 378              		.loc 1 3530 0
 379 013c 0092     		str	r2, [sp]	@ Tickstart,
 380 013e 0121     		movs	r1, #1	@,
 381 0140 0022     		movs	r2, #0	@,
 382              	.LVL16:
 383              	.L42:
 384 0142 2046     		mov	r0, r4	@, hspi
 385 0144 FFF791FF 		bl	SPI_WaitFlagStateUntilTimeout	@
ARM GAS  /tmp/ccdPJtdr.s 			page 76


 386              	.LVL17:
 387 0148 30B9     		cbnz	r0, .L41	@,
3545:src/stm32f1xx_hal_spi.c **** }
 388              		.loc 1 3545 0
 389 014a 0020     		movs	r0, #0	@ <retval>,
 390              	.L33:
 391              	.LBE25:
 392              	.LBE24:
3546:src/stm32f1xx_hal_spi.c **** 
 393              		.loc 1 3546 0
 394 014c 03B0     		add	sp, sp, #12	@,,
 395              	.LCFI7:
 396              		.cfi_remember_state
 397              		.cfi_def_cfa_offset 12
 398              		@ sp needed	@
 399 014e 30BD     		pop	{r4, r5, pc}	@
 400              	.LVL18:
 401              	.L30:
 402              	.LCFI8:
 403              		.cfi_restore_state
3539:src/stm32f1xx_hal_spi.c ****     {
 404              		.loc 1 3539 0
 405 0150 0092     		str	r2, [sp]	@ Tickstart,
 406 0152 8021     		movs	r1, #128	@,
 407 0154 0022     		movs	r2, #0	@,
 408              	.LVL19:
 409 0156 F4E7     		b	.L42	@
 410              	.LVL20:
 411              	.L41:
3541:src/stm32f1xx_hal_spi.c ****       return HAL_TIMEOUT;
 412              		.loc 1 3541 0
 413 0158 636D     		ldr	r3, [r4, #84]	@ _19,
3542:src/stm32f1xx_hal_spi.c ****     }
 414              		.loc 1 3542 0
 415 015a 0320     		movs	r0, #3	@ <retval>,
3541:src/stm32f1xx_hal_spi.c ****       return HAL_TIMEOUT;
 416              		.loc 1 3541 0
 417 015c 43F02003 		orr	r3, r3, #32	@ _20, _19,
 418 0160 6365     		str	r3, [r4, #84]	@ _20,
3542:src/stm32f1xx_hal_spi.c ****     }
 419              		.loc 1 3542 0
 420 0162 F3E7     		b	.L33	@
 421              		.cfi_endproc
 422              	.LFE117:
 423              		.size	SPI_EndRxTransaction, .-SPI_EndRxTransaction
 424              		.align	1
 425              		.weak	HAL_SPI_MspInit
 426              		.syntax unified
 427              		.thumb
 428              		.thumb_func
 429              		.fpu softvfp
 430              		.type	HAL_SPI_MspInit, %function
 431              	HAL_SPI_MspInit:
 432              	.LFB152:
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 0
 435              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccdPJtdr.s 			page 77


 436              		@ link register save eliminated.
 437 0164 7047     		bx	lr	@
 438              		.cfi_endproc
 439              	.LFE152:
 440              		.size	HAL_SPI_MspInit, .-HAL_SPI_MspInit
 441              		.align	1
 442              		.global	HAL_SPI_Init
 443              		.syntax unified
 444              		.thumb
 445              		.thumb_func
 446              		.fpu softvfp
 447              		.type	HAL_SPI_Init, %function
 448              	HAL_SPI_Init:
 449              	.LFB65:
 336:src/stm32f1xx_hal_spi.c ****   /* Check the SPI handle allocation */
 450              		.loc 1 336 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 0, uses_anonymous_args = 0
 454              	.LVL21:
 336:src/stm32f1xx_hal_spi.c ****   /* Check the SPI handle allocation */
 455              		.loc 1 336 0
 456 0166 38B5     		push	{r3, r4, r5, lr}	@
 457              	.LCFI9:
 458              		.cfi_def_cfa_offset 16
 459              		.cfi_offset 3, -16
 460              		.cfi_offset 4, -12
 461              		.cfi_offset 5, -8
 462              		.cfi_offset 14, -4
 338:src/stm32f1xx_hal_spi.c ****   {
 463              		.loc 1 338 0
 464 0168 0446     		mov	r4, r0	@ hspi, hspi
 465 016a 0028     		cmp	r0, #0	@ hspi
 466 016c 3FD0     		beq	.L48	@
 369:src/stm32f1xx_hal_spi.c ****   {
 467              		.loc 1 369 0
 468 016e 90F85130 		ldrb	r3, [r0, #81]	@ zero_extendqisi2	@ hspi_5(D)->State, hspi_5(D)->State
 469 0172 03F0FF02 		and	r2, r3, #255	@ _7, hspi_5(D)->State,
 470 0176 1BB9     		cbnz	r3, .L46	@ hspi_5(D)->State,
 372:src/stm32f1xx_hal_spi.c **** 
 471              		.loc 1 372 0
 472 0178 80F85020 		strb	r2, [r0, #80]	@ _7, hspi_5(D)->Lock
 394:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 473              		.loc 1 394 0
 474 017c FFF7FEFF 		bl	HAL_SPI_MspInit	@
 475              	.LVL22:
 476              	.L46:
 398:src/stm32f1xx_hal_spi.c **** 
 477              		.loc 1 398 0
 478 0180 0223     		movs	r3, #2	@ tmp144,
 401:src/stm32f1xx_hal_spi.c **** 
 479              		.loc 1 401 0
 480 0182 2268     		ldr	r2, [r4]	@ _11, hspi_5(D)->Instance
 398:src/stm32f1xx_hal_spi.c **** 
 481              		.loc 1 398 0
 482 0184 84F85130 		strb	r3, [r4, #81]	@ tmp144, hspi_5(D)->State
 401:src/stm32f1xx_hal_spi.c **** 
ARM GAS  /tmp/ccdPJtdr.s 			page 78


 483              		.loc 1 401 0
 484 0188 1368     		ldr	r3, [r2]	@ _12, _11->CR1
 406:src/stm32f1xx_hal_spi.c ****                                   hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & 
 485              		.loc 1 406 0
 486 018a A568     		ldr	r5, [r4, #8]	@ hspi_5(D)->Init.Direction, hspi_5(D)->Init.Direction
 401:src/stm32f1xx_hal_spi.c **** 
 487              		.loc 1 401 0
 488 018c 23F04003 		bic	r3, r3, #64	@ _13, _12,
 489 0190 1360     		str	r3, [r2]	@ _13, _11->CR1
 406:src/stm32f1xx_hal_spi.c ****                                   hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & 
 490              		.loc 1 406 0
 491 0192 6368     		ldr	r3, [r4, #4]	@ hspi_5(D)->Init.Mode, hspi_5(D)->Init.Mode
 492 0194 A06A     		ldr	r0, [r4, #40]	@ _31, hspi_5(D)->Init.CRCCalculation
 493 0196 2B43     		orrs	r3, r3, r5	@, tmp146, hspi_5(D)->Init.Mode, hspi_5(D)->Init.Direction
 494 0198 E568     		ldr	r5, [r4, #12]	@ hspi_5(D)->Init.DataSize, hspi_5(D)->Init.DataSize
 495 019a A169     		ldr	r1, [r4, #24]	@ _24, hspi_5(D)->Init.NSS
 496 019c 2B43     		orrs	r3, r3, r5	@, tmp149, tmp146, hspi_5(D)->Init.DataSize
 497 019e 2569     		ldr	r5, [r4, #16]	@ hspi_5(D)->Init.CLKPolarity, hspi_5(D)->Init.CLKPolarity
 416:src/stm32f1xx_hal_spi.c ****   {
 498              		.loc 1 416 0
 499 01a0 B0F5005F 		cmp	r0, #8192	@ _31,
 406:src/stm32f1xx_hal_spi.c ****                                   hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & 
 500              		.loc 1 406 0
 501 01a4 43EA0503 		orr	r3, r3, r5	@ tmp151, tmp149, hspi_5(D)->Init.CLKPolarity
 502 01a8 6569     		ldr	r5, [r4, #20]	@ hspi_5(D)->Init.CLKPhase, hspi_5(D)->Init.CLKPhase
 503 01aa 43EA0503 		orr	r3, r3, r5	@ tmp153, tmp151, hspi_5(D)->Init.CLKPhase
 504 01ae E569     		ldr	r5, [r4, #28]	@ hspi_5(D)->Init.BaudRatePrescaler, hspi_5(D)->Init.BaudRatePrescaler
 505 01b0 43EA0503 		orr	r3, r3, r5	@ tmp155, tmp153, hspi_5(D)->Init.BaudRatePrescaler
 506 01b4 256A     		ldr	r5, [r4, #32]	@ hspi_5(D)->Init.FirstBit, hspi_5(D)->Init.FirstBit
 507 01b6 43EA0503 		orr	r3, r3, r5	@ tmp157, tmp155, hspi_5(D)->Init.FirstBit
 508 01ba 43EA0003 		orr	r3, r3, r0	@ tmp159, tmp157, _31
 509 01be 01F40075 		and	r5, r1, #512	@ tmp160, _24,
 510 01c2 43EA0503 		orr	r3, r3, r5	@ _32, tmp159, tmp160
 511 01c6 1360     		str	r3, [r2]	@ _32, _11->CR1
 411:src/stm32f1xx_hal_spi.c **** 
 512              		.loc 1 411 0
 513 01c8 4FEA1141 		lsr	r1, r1, #16	@ tmp161, _24,
 418:src/stm32f1xx_hal_spi.c ****   }
 514              		.loc 1 418 0
 515 01cc 08BF     		it	eq
 516 01ce E36A     		ldreq	r3, [r4, #44]	@ _37, hspi_5(D)->Init.CRCPolynomial
 411:src/stm32f1xx_hal_spi.c **** 
 517              		.loc 1 411 0
 518 01d0 01F00401 		and	r1, r1, #4	@ _35, tmp161,
 519 01d4 5160     		str	r1, [r2, #4]	@ _35, _11->CR2
 418:src/stm32f1xx_hal_spi.c ****   }
 520              		.loc 1 418 0
 521 01d6 08BF     		it	eq
 522 01d8 1361     		streq	r3, [r2, #16]	@ _37, _11->CRCPR
 424:src/stm32f1xx_hal_spi.c **** #endif /* SPI_I2SCFGR_I2SMOD */
 523              		.loc 1 424 0
 524 01da D369     		ldr	r3, [r2, #28]	@ _39, _11->I2SCFGR
 427:src/stm32f1xx_hal_spi.c ****   hspi->State     = HAL_SPI_STATE_READY;
 525              		.loc 1 427 0
 526 01dc 0020     		movs	r0, #0	@ tmp162,
 424:src/stm32f1xx_hal_spi.c **** #endif /* SPI_I2SCFGR_I2SMOD */
 527              		.loc 1 424 0
ARM GAS  /tmp/ccdPJtdr.s 			page 79


 528 01de 23F40063 		bic	r3, r3, #2048	@ _40, _39,
 529 01e2 D361     		str	r3, [r2, #28]	@ _40, _11->I2SCFGR
 428:src/stm32f1xx_hal_spi.c **** 
 530              		.loc 1 428 0
 531 01e4 0123     		movs	r3, #1	@ tmp163,
 427:src/stm32f1xx_hal_spi.c ****   hspi->State     = HAL_SPI_STATE_READY;
 532              		.loc 1 427 0
 533 01e6 6065     		str	r0, [r4, #84]	@ tmp162, hspi_5(D)->ErrorCode
 428:src/stm32f1xx_hal_spi.c **** 
 534              		.loc 1 428 0
 535 01e8 84F85130 		strb	r3, [r4, #81]	@ tmp163, hspi_5(D)->State
 430:src/stm32f1xx_hal_spi.c **** }
 536              		.loc 1 430 0
 537 01ec 38BD     		pop	{r3, r4, r5, pc}	@
 538              	.LVL23:
 539              	.L48:
 340:src/stm32f1xx_hal_spi.c ****   }
 540              		.loc 1 340 0
 541 01ee 0120     		movs	r0, #1	@ <retval>,
 542              	.LVL24:
 431:src/stm32f1xx_hal_spi.c **** 
 543              		.loc 1 431 0
 544 01f0 38BD     		pop	{r3, r4, r5, pc}	@
 545              		.cfi_endproc
 546              	.LFE65:
 547              		.size	HAL_SPI_Init, .-HAL_SPI_Init
 548              		.align	1
 549              		.weak	HAL_SPI_MspDeInit
 550              		.syntax unified
 551              		.thumb
 552              		.thumb_func
 553              		.fpu softvfp
 554              		.type	HAL_SPI_MspDeInit, %function
 555              	HAL_SPI_MspDeInit:
 556              	.LFB150:
 557              		.cfi_startproc
 558              		@ args = 0, pretend = 0, frame = 0
 559              		@ frame_needed = 0, uses_anonymous_args = 0
 560              		@ link register save eliminated.
 561 01f2 7047     		bx	lr	@
 562              		.cfi_endproc
 563              	.LFE150:
 564              		.size	HAL_SPI_MspDeInit, .-HAL_SPI_MspDeInit
 565              		.align	1
 566              		.global	HAL_SPI_DeInit
 567              		.syntax unified
 568              		.thumb
 569              		.thumb_func
 570              		.fpu softvfp
 571              		.type	HAL_SPI_DeInit, %function
 572              	HAL_SPI_DeInit:
 573              	.LFB66:
 440:src/stm32f1xx_hal_spi.c ****   /* Check the SPI handle allocation */
 574              		.loc 1 440 0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 0
 577              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccdPJtdr.s 			page 80


 578              	.LVL25:
 440:src/stm32f1xx_hal_spi.c ****   /* Check the SPI handle allocation */
 579              		.loc 1 440 0
 580 01f4 10B5     		push	{r4, lr}	@
 581              	.LCFI10:
 582              		.cfi_def_cfa_offset 8
 583              		.cfi_offset 4, -8
 584              		.cfi_offset 14, -4
 442:src/stm32f1xx_hal_spi.c ****   {
 585              		.loc 1 442 0
 586 01f6 0446     		mov	r4, r0	@ hspi, hspi
 587 01f8 80B1     		cbz	r0, .L52	@ hspi,
 450:src/stm32f1xx_hal_spi.c **** 
 588              		.loc 1 450 0
 589 01fa 0223     		movs	r3, #2	@ tmp115,
 453:src/stm32f1xx_hal_spi.c **** 
 590              		.loc 1 453 0
 591 01fc 0268     		ldr	r2, [r0]	@ _6, hspi_3(D)->Instance
 450:src/stm32f1xx_hal_spi.c **** 
 592              		.loc 1 450 0
 593 01fe 80F85130 		strb	r3, [r0, #81]	@ tmp115, hspi_3(D)->State
 453:src/stm32f1xx_hal_spi.c **** 
 594              		.loc 1 453 0
 595 0202 1368     		ldr	r3, [r2]	@ _7, _6->CR1
 596 0204 23F04003 		bic	r3, r3, #64	@ _8, _7,
 597 0208 1360     		str	r3, [r2]	@ _8, _6->CR1
 465:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 598              		.loc 1 465 0
 599 020a FFF7FEFF 		bl	HAL_SPI_MspDeInit	@
 600              	.LVL26:
 468:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_RESET;
 601              		.loc 1 468 0
 602 020e 0020     		movs	r0, #0	@ tmp117,
 603 0210 6065     		str	r0, [r4, #84]	@ tmp117, hspi_3(D)->ErrorCode
 472:src/stm32f1xx_hal_spi.c **** 
 604              		.loc 1 472 0
 605 0212 84F85000 		strb	r0, [r4, #80]	@ tmp117, hspi_3(D)->Lock
 469:src/stm32f1xx_hal_spi.c **** 
 606              		.loc 1 469 0
 607 0216 84F85100 		strb	r0, [r4, #81]	@ tmp117, hspi_3(D)->State
 474:src/stm32f1xx_hal_spi.c **** }
 608              		.loc 1 474 0
 609 021a 10BD     		pop	{r4, pc}	@
 610              	.LVL27:
 611              	.L52:
 444:src/stm32f1xx_hal_spi.c ****   }
 612              		.loc 1 444 0
 613 021c 0120     		movs	r0, #1	@ <retval>,
 614              	.LVL28:
 475:src/stm32f1xx_hal_spi.c **** 
 615              		.loc 1 475 0
 616 021e 10BD     		pop	{r4, pc}	@
 617              		.cfi_endproc
 618              	.LFE66:
 619              		.size	HAL_SPI_DeInit, .-HAL_SPI_DeInit
 620              		.align	1
 621              		.global	HAL_SPI_Transmit
ARM GAS  /tmp/ccdPJtdr.s 			page 81


 622              		.syntax unified
 623              		.thumb
 624              		.thumb_func
 625              		.fpu softvfp
 626              		.type	HAL_SPI_Transmit, %function
 627              	HAL_SPI_Transmit:
 628              	.LFB69:
 772:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 629              		.loc 1 772 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 8
 632              		@ frame_needed = 0, uses_anonymous_args = 0
 633              	.LVL29:
 634 0220 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}	@
 635              	.LCFI11:
 636              		.cfi_def_cfa_offset 32
 637              		.cfi_offset 4, -24
 638              		.cfi_offset 5, -20
 639              		.cfi_offset 6, -16
 640              		.cfi_offset 7, -12
 641              		.cfi_offset 8, -8
 642              		.cfi_offset 14, -4
 772:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 643              		.loc 1 772 0
 644 0224 1E46     		mov	r6, r3	@ Timeout, Timeout
 781:src/stm32f1xx_hal_spi.c **** 
 645              		.loc 1 781 0
 646 0226 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2	@ hspi_15(D)->Lock, hspi_15(D)->Lock
 647              	.LVL30:
 772:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 648              		.loc 1 772 0
 649 022a 0446     		mov	r4, r0	@ hspi, hspi
 781:src/stm32f1xx_hal_spi.c **** 
 650              		.loc 1 781 0
 651 022c 012B     		cmp	r3, #1	@ hspi_15(D)->Lock,
 772:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 652              		.loc 1 772 0
 653 022e 0D46     		mov	r5, r1	@ pData, pData
 654 0230 9046     		mov	r8, r2	@ Size, Size
 781:src/stm32f1xx_hal_spi.c **** 
 655              		.loc 1 781 0
 656 0232 00F0AF80 		beq	.L78	@,
 781:src/stm32f1xx_hal_spi.c **** 
 657              		.loc 1 781 0 is_stmt 0 discriminator 2
 658 0236 0123     		movs	r3, #1	@ tmp183,
 659 0238 80F85030 		strb	r3, [r0, #80]	@ tmp183, hspi_15(D)->Lock
 784:src/stm32f1xx_hal_spi.c ****   initial_TxXferCount = Size;
 660              		.loc 1 784 0 is_stmt 1 discriminator 2
 661 023c FFF7FEFF 		bl	HAL_GetTick	@
 662              	.LVL31:
 663 0240 0746     		mov	r7, r0	@ tickstart,
 664              	.LVL32:
 787:src/stm32f1xx_hal_spi.c ****   {
 665              		.loc 1 787 0 discriminator 2
 666 0242 94F85100 		ldrb	r0, [r4, #81]	@ zero_extendqisi2	@ hspi_15(D)->State, hspi_15(D)->State
 667              	.LVL33:
 668 0246 C0B2     		uxtb	r0, r0	@ _21, hspi_15(D)->State
ARM GAS  /tmp/ccdPJtdr.s 			page 82


 669 0248 0128     		cmp	r0, #1	@ _21,
 670 024a 40F0A180 		bne	.L79	@,
 793:src/stm32f1xx_hal_spi.c ****   {
 671              		.loc 1 793 0
 672 024e 002D     		cmp	r5, #0	@ pData
 673 0250 74D0     		beq	.L55	@
 793:src/stm32f1xx_hal_spi.c ****   {
 674              		.loc 1 793 0 is_stmt 0 discriminator 1
 675 0252 B8F1000F 		cmp	r8, #0	@ Size
 676 0256 71D0     		beq	.L55	@
 800:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 677              		.loc 1 800 0 is_stmt 1
 678 0258 0323     		movs	r3, #3	@ tmp188,
 801:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pData;
 679              		.loc 1 801 0
 680 025a 0020     		movs	r0, #0	@ tmp190,
 800:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 681              		.loc 1 800 0
 682 025c 84F85130 		strb	r3, [r4, #81]	@ tmp188, hspi_15(D)->State
 814:src/stm32f1xx_hal_spi.c ****   {
 683              		.loc 1 814 0
 684 0260 A368     		ldr	r3, [r4, #8]	@ hspi_15(D)->Init.Direction, hspi_15(D)->Init.Direction
 801:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pData;
 685              		.loc 1 801 0
 686 0262 6065     		str	r0, [r4, #84]	@ tmp190, hspi_15(D)->ErrorCode
 807:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = 0U;
 687              		.loc 1 807 0
 688 0264 A063     		str	r0, [r4, #56]	@ tmp190, hspi_15(D)->pRxBuffPtr
 804:src/stm32f1xx_hal_spi.c **** 
 689              		.loc 1 804 0
 690 0266 A4F83680 		strh	r8, [r4, #54]	@ movhi	@ Size, hspi_15(D)->TxXferCount
 808:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = 0U;
 691              		.loc 1 808 0
 692 026a A087     		strh	r0, [r4, #60]	@ movhi	@ tmp190, hspi_15(D)->RxXferSize
 809:src/stm32f1xx_hal_spi.c ****   hspi->TxISR       = NULL;
 693              		.loc 1 809 0
 694 026c E087     		strh	r0, [r4, #62]	@ movhi	@ tmp190, hspi_15(D)->RxXferCount
 810:src/stm32f1xx_hal_spi.c ****   hspi->RxISR       = NULL;
 695              		.loc 1 810 0
 696 026e 6064     		str	r0, [r4, #68]	@ tmp190, hspi_15(D)->TxISR
 811:src/stm32f1xx_hal_spi.c **** 
 697              		.loc 1 811 0
 698 0270 2064     		str	r0, [r4, #64]	@ tmp190, hspi_15(D)->RxISR
 699 0272 2068     		ldr	r0, [r4]	@ _34, hspi_15(D)->Instance
 814:src/stm32f1xx_hal_spi.c ****   {
 700              		.loc 1 814 0
 701 0274 B3F5004F 		cmp	r3, #32768	@ hspi_15(D)->Init.Direction,
 816:src/stm32f1xx_hal_spi.c ****   }
 702              		.loc 1 816 0
 703 0278 08BF     		it	eq
 704 027a 0368     		ldreq	r3, [r0]	@ _36, _34->CR1
 802:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = Size;
 705              		.loc 1 802 0
 706 027c 2563     		str	r5, [r4, #48]	@ pData, hspi_15(D)->pTxBuffPtr
 816:src/stm32f1xx_hal_spi.c ****   }
 707              		.loc 1 816 0
 708 027e 08BF     		it	eq
ARM GAS  /tmp/ccdPJtdr.s 			page 83


 709 0280 43F48043 		orreq	r3, r3, #16384	@ _37, _36,
 803:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = Size;
 710              		.loc 1 803 0
 711 0284 A4F83480 		strh	r8, [r4, #52]	@ movhi	@ Size, hspi_15(D)->TxXferSize
 816:src/stm32f1xx_hal_spi.c ****   }
 712              		.loc 1 816 0
 713 0288 08BF     		it	eq
 714 028a 0360     		streq	r3, [r0]	@ _37, _34->CR1
 821:src/stm32f1xx_hal_spi.c ****   {
 715              		.loc 1 821 0
 716 028c A36A     		ldr	r3, [r4, #40]	@ hspi_15(D)->Init.CRCCalculation, hspi_15(D)->Init.CRCCalculation
 717 028e B3F5005F 		cmp	r3, #8192	@ hspi_15(D)->Init.CRCCalculation,
 718 0292 07D1     		bne	.L57	@,
 823:src/stm32f1xx_hal_spi.c ****   }
 719              		.loc 1 823 0
 720 0294 0368     		ldr	r3, [r0]	@ _42, _40->CR1
 721 0296 23F40053 		bic	r3, r3, #8192	@ _43, _42,
 722 029a 0360     		str	r3, [r0]	@ _43, _40->CR1
 723 029c 0368     		ldr	r3, [r0]	@ _47, _40->CR1
 724 029e 43F40053 		orr	r3, r3, #8192	@ _48, _47,
 725 02a2 0360     		str	r3, [r0]	@ _48, _40->CR1
 726              	.L57:
 828:src/stm32f1xx_hal_spi.c ****   {
 727              		.loc 1 828 0
 728 02a4 0368     		ldr	r3, [r0]	@ _51, _50->CR1
 729 02a6 5B06     		lsls	r3, r3, #25	@, _51,
 831:src/stm32f1xx_hal_spi.c ****   }
 730              		.loc 1 831 0
 731 02a8 5EBF     		ittt	pl
 732 02aa 0368     		ldrpl	r3, [r0]	@ _53, _50->CR1
 733 02ac 43F04003 		orrpl	r3, r3, #64	@ _54, _53,
 734 02b0 0360     		strpl	r3, [r0]	@ _54, _50->CR1
 835:src/stm32f1xx_hal_spi.c ****   {
 735              		.loc 1 835 0
 736 02b2 E368     		ldr	r3, [r4, #12]	@ hspi_15(D)->Init.DataSize, hspi_15(D)->Init.DataSize
 737 02b4 B3F5006F 		cmp	r3, #2048	@ hspi_15(D)->Init.DataSize,
 738 02b8 6368     		ldr	r3, [r4, #4]	@ hspi_15(D)->Init.Mode, hspi_15(D)->Init.Mode
 739 02ba 48D1     		bne	.L59	@,
 837:src/stm32f1xx_hal_spi.c ****     {
 740              		.loc 1 837 0
 741 02bc 13B1     		cbz	r3, .L60	@ hspi_15(D)->Init.Mode,
 837:src/stm32f1xx_hal_spi.c ****     {
 742              		.loc 1 837 0 is_stmt 0 discriminator 1
 743 02be B8F1010F 		cmp	r8, #1	@ Size,
 744 02c2 07D1     		bne	.L62	@,
 745              	.L60:
 839:src/stm32f1xx_hal_spi.c ****       hspi->pTxBuffPtr += sizeof(uint16_t);
 746              		.loc 1 839 0 is_stmt 1
 747 02c4 35F8023B 		ldrh	r3, [r5], #2	@ _59, MEM[(uint16_t *)pData_22(D)]
 748              	.LVL34:
 749 02c8 C360     		str	r3, [r0, #12]	@ _59, _50->DR
 840:src/stm32f1xx_hal_spi.c ****       hspi->TxXferCount--;
 750              		.loc 1 840 0
 751 02ca 2563     		str	r5, [r4, #48]	@ tmp205, hspi_15(D)->pTxBuffPtr
 752              	.LVL35:
 753              	.L94:
 851:src/stm32f1xx_hal_spi.c ****       }
ARM GAS  /tmp/ccdPJtdr.s 			page 84


 754              		.loc 1 851 0
 755 02cc E38E     		ldrh	r3, [r4, #54]	@,
 756 02ce 013B     		subs	r3, r3, #1	@ tmp214, hspi_15(D)->TxXferCount,
 757 02d0 9BB2     		uxth	r3, r3	@ _77, tmp214
 758 02d2 E386     		strh	r3, [r4, #54]	@ movhi	@ _77,
 759              	.L62:
 844:src/stm32f1xx_hal_spi.c ****     {
 760              		.loc 1 844 0
 761 02d4 E38E     		ldrh	r3, [r4, #54]	@, hspi_15(D)->TxXferCount
 762 02d6 9BB2     		uxth	r3, r3	@ _66, hspi_15(D)->TxXferCount
 763 02d8 F3B9     		cbnz	r3, .L65	@ _66,
 764              	.L75:
 895:src/stm32f1xx_hal_spi.c ****   {
 765              		.loc 1 895 0
 766 02da A36A     		ldr	r3, [r4, #40]	@ hspi_15(D)->Init.CRCCalculation, hspi_15(D)->Init.CRCCalculation
 767 02dc B3F5005F 		cmp	r3, #8192	@ hspi_15(D)->Init.CRCCalculation,
 768 02e0 04D1     		bne	.L67	@,
 897:src/stm32f1xx_hal_spi.c ****   }
 769              		.loc 1 897 0
 770 02e2 2268     		ldr	r2, [r4]	@ _109, hspi_15(D)->Instance
 771 02e4 1368     		ldr	r3, [r2]	@ _110, _109->CR1
 772 02e6 43F48053 		orr	r3, r3, #4096	@ _111, _110,
 773 02ea 1360     		str	r3, [r2]	@ _111, _109->CR1
 774              	.L67:
 902:src/stm32f1xx_hal_spi.c ****   {
 775              		.loc 1 902 0
 776 02ec 3A46     		mov	r2, r7	@, tickstart
 777 02ee 3146     		mov	r1, r6	@, Timeout
 778 02f0 2046     		mov	r0, r4	@, hspi
 779 02f2 FFF7FDFE 		bl	SPI_EndRxTxTransaction	@
 780              	.LVL36:
 781 02f6 08B1     		cbz	r0, .L76	@,
 904:src/stm32f1xx_hal_spi.c ****   }
 782              		.loc 1 904 0
 783 02f8 2023     		movs	r3, #32	@ tmp241,
 784 02fa 6365     		str	r3, [r4, #84]	@ tmp241, hspi_15(D)->ErrorCode
 785              	.L76:
 908:src/stm32f1xx_hal_spi.c ****   {
 786              		.loc 1 908 0
 787 02fc A368     		ldr	r3, [r4, #8]	@ hspi_15(D)->Init.Direction, hspi_15(D)->Init.Direction
 788 02fe 33B9     		cbnz	r3, .L77	@ hspi_15(D)->Init.Direction,
 789              	.LBB26:
 910:src/stm32f1xx_hal_spi.c ****   }
 790              		.loc 1 910 0
 791 0300 0193     		str	r3, [sp, #4]	@ hspi_15(D)->Init.Direction, tmpreg_ovr
 792 0302 2368     		ldr	r3, [r4]	@ _118, hspi_15(D)->Instance
 793 0304 DA68     		ldr	r2, [r3, #12]	@ tmpreg_ovr.0_119, _118->DR
 794 0306 0192     		str	r2, [sp, #4]	@ tmpreg_ovr.0_119, tmpreg_ovr
 795 0308 9B68     		ldr	r3, [r3, #8]	@ tmpreg_ovr.1_121, _118->SR
 796 030a 0193     		str	r3, [sp, #4]	@ tmpreg_ovr.1_121, tmpreg_ovr
 797 030c 019B     		ldr	r3, [sp, #4]	@ vol.2_123, tmpreg_ovr
 798              	.L77:
 799              	.LBE26:
 913:src/stm32f1xx_hal_spi.c ****   {
 800              		.loc 1 913 0
 801 030e 606D     		ldr	r0, [r4, #84]	@ _124, hspi_15(D)->ErrorCode
 789:src/stm32f1xx_hal_spi.c ****     goto error;
ARM GAS  /tmp/ccdPJtdr.s 			page 85


 802              		.loc 1 789 0
 803 0310 0030     		adds	r0, r0, #0	@ <retval>, _124,
 804 0312 18BF     		it	ne
 805 0314 0120     		movne	r0, #1	@ <retval>,
 806 0316 11E0     		b	.L55	@
 807              	.L65:
 847:src/stm32f1xx_hal_spi.c ****       {
 808              		.loc 1 847 0
 809 0318 2268     		ldr	r2, [r4]	@ _67, hspi_15(D)->Instance
 810 031a 9368     		ldr	r3, [r2, #8]	@ _68, _67->SR
 811 031c 9807     		lsls	r0, r3, #30	@, _68,
 812 031e 05D5     		bpl	.L63	@,
 849:src/stm32f1xx_hal_spi.c ****         hspi->pTxBuffPtr += sizeof(uint16_t);
 813              		.loc 1 849 0
 814 0320 236B     		ldr	r3, [r4, #48]	@ tmp211, hspi_15(D)->pTxBuffPtr
 815 0322 33F8021B 		ldrh	r1, [r3], #2	@ _72, MEM[(uint16_t *)_70]
 816 0326 D160     		str	r1, [r2, #12]	@ _72, _67->DR
 850:src/stm32f1xx_hal_spi.c ****         hspi->TxXferCount--;
 817              		.loc 1 850 0
 818 0328 2363     		str	r3, [r4, #48]	@ tmp211, hspi_15(D)->pTxBuffPtr
 819 032a CFE7     		b	.L94	@
 820              	.L63:
 856:src/stm32f1xx_hal_spi.c ****         {
 821              		.loc 1 856 0
 822 032c FFF7FEFF 		bl	HAL_GetTick	@
 823              	.LVL37:
 824 0330 C01B     		subs	r0, r0, r7	@ tmp216,, tickstart
 825 0332 B042     		cmp	r0, r6	@ tmp216, Timeout
 826 0334 CED3     		bcc	.L62	@,
 856:src/stm32f1xx_hal_spi.c ****         {
 827              		.loc 1 856 0 is_stmt 0 discriminator 3
 828 0336 711C     		adds	r1, r6, #1	@, Timeout,
 829 0338 CCD0     		beq	.L62	@,
 830              	.L73:
 858:src/stm32f1xx_hal_spi.c ****           goto error;
 831              		.loc 1 858 0 is_stmt 1
 832 033a 0320     		movs	r0, #3	@ <retval>,
 833              	.L55:
 834              	.LVL38:
 919:src/stm32f1xx_hal_spi.c ****   /* Process Unlocked */
 835              		.loc 1 919 0
 836 033c 0123     		movs	r3, #1	@ tmp246,
 837 033e 84F85130 		strb	r3, [r4, #81]	@ tmp246, hspi_15(D)->State
 921:src/stm32f1xx_hal_spi.c ****   return errorcode;
 838              		.loc 1 921 0
 839 0342 0023     		movs	r3, #0	@ tmp248,
 840 0344 84F85030 		strb	r3, [r4, #80]	@ tmp248, hspi_15(D)->Lock
 841              	.LVL39:
 842              	.L54:
 923:src/stm32f1xx_hal_spi.c **** 
 843              		.loc 1 923 0
 844 0348 02B0     		add	sp, sp, #8	@,,
 845              	.LCFI12:
 846              		.cfi_remember_state
 847              		.cfi_def_cfa_offset 24
 848              		@ sp needed	@
 849 034a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
ARM GAS  /tmp/ccdPJtdr.s 			page 86


 850              	.LVL40:
 851              	.L59:
 852              	.LCFI13:
 853              		.cfi_restore_state
 867:src/stm32f1xx_hal_spi.c ****     {
 854              		.loc 1 867 0
 855 034e 13B1     		cbz	r3, .L68	@ hspi_15(D)->Init.Mode,
 867:src/stm32f1xx_hal_spi.c ****     {
 856              		.loc 1 867 0 is_stmt 0 discriminator 1
 857 0350 B8F1010F 		cmp	r8, #1	@ Size,
 858 0354 08D1     		bne	.L70	@,
 859              	.L68:
 869:src/stm32f1xx_hal_spi.c ****       hspi->pTxBuffPtr += sizeof(uint8_t);
 860              		.loc 1 869 0 is_stmt 1
 861 0356 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2	@ _84, *pData_22(D)
 862 0358 0373     		strb	r3, [r0, #12]	@ _84, MEM[(volatile uint8_t *)_50 + 12B]
 863              	.L95:
 879:src/stm32f1xx_hal_spi.c ****         hspi->TxXferCount--;
 864              		.loc 1 879 0
 865 035a 236B     		ldr	r3, [r4, #48]	@ hspi_15(D)->pTxBuffPtr, hspi_15(D)->pTxBuffPtr
 866 035c 0133     		adds	r3, r3, #1	@ tmp231, hspi_15(D)->pTxBuffPtr,
 867 035e 2363     		str	r3, [r4, #48]	@ tmp231, hspi_15(D)->pTxBuffPtr
 880:src/stm32f1xx_hal_spi.c ****       }
 868              		.loc 1 880 0
 869 0360 E38E     		ldrh	r3, [r4, #54]	@,
 870 0362 013B     		subs	r3, r3, #1	@ tmp235, hspi_15(D)->TxXferCount,
 871 0364 9BB2     		uxth	r3, r3	@ _103, tmp235
 872 0366 E386     		strh	r3, [r4, #54]	@ movhi	@ _103,
 873              	.L70:
 873:src/stm32f1xx_hal_spi.c ****     {
 874              		.loc 1 873 0
 875 0368 E38E     		ldrh	r3, [r4, #54]	@, hspi_15(D)->TxXferCount
 876 036a 9BB2     		uxth	r3, r3	@ _92, hspi_15(D)->TxXferCount
 877 036c 002B     		cmp	r3, #0	@ _92
 878 036e B4D0     		beq	.L75	@
 876:src/stm32f1xx_hal_spi.c ****       {
 879              		.loc 1 876 0
 880 0370 2368     		ldr	r3, [r4]	@ _93, hspi_15(D)->Instance
 881 0372 9A68     		ldr	r2, [r3, #8]	@ _94, _93->SR
 882 0374 9207     		lsls	r2, r2, #30	@, _94,
 883 0376 03D5     		bpl	.L71	@,
 878:src/stm32f1xx_hal_spi.c ****         hspi->pTxBuffPtr += sizeof(uint8_t);
 884              		.loc 1 878 0
 885 0378 226B     		ldr	r2, [r4, #48]	@ hspi_15(D)->pTxBuffPtr, hspi_15(D)->pTxBuffPtr
 886 037a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2	@ _97, *_96
 887 037c 1A73     		strb	r2, [r3, #12]	@ _97, MEM[(volatile uint8_t *)_93 + 12B]
 888 037e ECE7     		b	.L95	@
 889              	.L71:
 885:src/stm32f1xx_hal_spi.c ****         {
 890              		.loc 1 885 0
 891 0380 FFF7FEFF 		bl	HAL_GetTick	@
 892              	.LVL41:
 893 0384 C01B     		subs	r0, r0, r7	@ tmp237,, tickstart
 894 0386 8642     		cmp	r6, r0	@ Timeout, tmp237
 895 0388 EED8     		bhi	.L70	@,
 885:src/stm32f1xx_hal_spi.c ****         {
 896              		.loc 1 885 0 is_stmt 0 discriminator 3
ARM GAS  /tmp/ccdPJtdr.s 			page 87


 897 038a 731C     		adds	r3, r6, #1	@, Timeout,
 898 038c ECD0     		beq	.L70	@,
 899 038e D4E7     		b	.L73	@
 900              	.L79:
 789:src/stm32f1xx_hal_spi.c ****     goto error;
 901              		.loc 1 789 0 is_stmt 1
 902 0390 0220     		movs	r0, #2	@ <retval>,
 903 0392 D3E7     		b	.L55	@
 904              	.LVL42:
 905              	.L78:
 781:src/stm32f1xx_hal_spi.c **** 
 906              		.loc 1 781 0
 907 0394 0220     		movs	r0, #2	@ <retval>,
 908              	.LVL43:
 909 0396 D7E7     		b	.L54	@
 910              		.cfi_endproc
 911              	.LFE69:
 912              		.size	HAL_SPI_Transmit, .-HAL_SPI_Transmit
 913              		.align	1
 914              		.global	HAL_SPI_TransmitReceive
 915              		.syntax unified
 916              		.thumb
 917              		.thumb_func
 918              		.fpu softvfp
 919              		.type	HAL_SPI_TransmitReceive, %function
 920              	HAL_SPI_TransmitReceive:
 921              	.LFB71:
1143:src/stm32f1xx_hal_spi.c ****   uint16_t             initial_TxXferCount;
 922              		.loc 1 1143 0
 923              		.cfi_startproc
 924              		@ args = 4, pretend = 0, frame = 8
 925              		@ frame_needed = 0, uses_anonymous_args = 0
 926              	.LVL44:
 927 0398 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 928              	.LCFI14:
 929              		.cfi_def_cfa_offset 28
 930              		.cfi_offset 4, -28
 931              		.cfi_offset 5, -24
 932              		.cfi_offset 6, -20
 933              		.cfi_offset 7, -16
 934              		.cfi_offset 8, -12
 935              		.cfi_offset 9, -8
 936              		.cfi_offset 14, -4
 937 039c 9846     		mov	r8, r3	@ Size, Size
1157:src/stm32f1xx_hal_spi.c **** 
 938              		.loc 1 1157 0
 939 039e 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2	@ hspi_3(D)->Lock, hspi_3(D)->Lock
 940              	.LVL45:
1143:src/stm32f1xx_hal_spi.c ****   uint16_t             initial_TxXferCount;
 941              		.loc 1 1143 0
 942 03a2 85B0     		sub	sp, sp, #20	@,,
 943              	.LCFI15:
 944              		.cfi_def_cfa_offset 48
1157:src/stm32f1xx_hal_spi.c **** 
 945              		.loc 1 1157 0
 946 03a4 012B     		cmp	r3, #1	@ hspi_3(D)->Lock,
1143:src/stm32f1xx_hal_spi.c ****   uint16_t             initial_TxXferCount;
ARM GAS  /tmp/ccdPJtdr.s 			page 88


 947              		.loc 1 1143 0
 948 03a6 0446     		mov	r4, r0	@ hspi, hspi
 949 03a8 0D46     		mov	r5, r1	@ pTxData, pTxData
 950 03aa 9146     		mov	r9, r2	@ pRxData, pRxData
 951 03ac 0C9E     		ldr	r6, [sp, #48]	@ Timeout, Timeout
1157:src/stm32f1xx_hal_spi.c **** 
 952              		.loc 1 1157 0
 953 03ae 00F03481 		beq	.L129	@,
 954              	.LVL46:
 955              	.LBB30:
 956              	.LBB31:
 957 03b2 0123     		movs	r3, #1	@ tmp225,
 958 03b4 80F85030 		strb	r3, [r0, #80]	@ tmp225, hspi_3(D)->Lock
1160:src/stm32f1xx_hal_spi.c **** 
 959              		.loc 1 1160 0
 960 03b8 FFF7FEFF 		bl	HAL_GetTick	@
 961              	.LVL47:
1163:src/stm32f1xx_hal_spi.c ****   tmp_mode            = hspi->Init.Mode;
 962              		.loc 1 1163 0
 963 03bc 94F85130 		ldrb	r3, [r4, #81]	@ zero_extendqisi2	@ hspi_3(D)->State, hspi_3(D)->State
1160:src/stm32f1xx_hal_spi.c **** 
 964              		.loc 1 1160 0
 965 03c0 0746     		mov	r7, r0	@ tickstart,
 966              	.LVL48:
1163:src/stm32f1xx_hal_spi.c ****   tmp_mode            = hspi->Init.Mode;
 967              		.loc 1 1163 0
 968 03c2 DBB2     		uxtb	r3, r3	@ tmp_state, hspi_3(D)->State
 969              	.LVL49:
1167:src/stm32f1xx_hal_spi.c ****         ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_st
 970              		.loc 1 1167 0
 971 03c4 012B     		cmp	r3, #1	@ tmp_state,
1164:src/stm32f1xx_hal_spi.c ****   initial_TxXferCount = Size;
 972              		.loc 1 1164 0
 973 03c6 6168     		ldr	r1, [r4, #4]	@ tmp_mode, hspi_3(D)->Init.Mode
 974              	.LVL50:
1167:src/stm32f1xx_hal_spi.c ****         ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_st
 975              		.loc 1 1167 0
 976 03c8 0AD0     		beq	.L98	@,
 977 03ca B1F5827F 		cmp	r1, #260	@ tmp_mode,
 978 03ce 40F02281 		bne	.L132	@,
1168:src/stm32f1xx_hal_spi.c ****   {
 979              		.loc 1 1168 0
 980 03d2 A068     		ldr	r0, [r4, #8]	@ hspi_3(D)->Init.Direction, hspi_3(D)->Init.Direction
 981              	.LVL51:
 982 03d4 0028     		cmp	r0, #0	@ hspi_3(D)->Init.Direction
 983 03d6 40F01E81 		bne	.L132	@
 984 03da 042B     		cmp	r3, #4	@ tmp_state,
 985 03dc 40F01B81 		bne	.L132	@,
 986              	.L98:
1174:src/stm32f1xx_hal_spi.c ****   {
 987              		.loc 1 1174 0
 988 03e0 002D     		cmp	r5, #0	@ pTxData
 989 03e2 00F00A81 		beq	.L135	@
 990 03e6 B9F1000F 		cmp	r9, #0	@ pRxData
 991 03ea 00F00681 		beq	.L135	@
 992 03ee B8F1000F 		cmp	r8, #0	@ Size
 993 03f2 00F00281 		beq	.L135	@
ARM GAS  /tmp/ccdPJtdr.s 			page 89


1181:src/stm32f1xx_hal_spi.c ****   {
 994              		.loc 1 1181 0
 995 03f6 94F85130 		ldrb	r3, [r4, #81]	@ zero_extendqisi2	@ hspi_3(D)->State, hspi_3(D)->State
 996              	.LVL52:
1188:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = Size;
 997              		.loc 1 1188 0
 998 03fa C4F83890 		str	r9, [r4, #56]	@ pRxData, hspi_3(D)->pRxBuffPtr
1181:src/stm32f1xx_hal_spi.c ****   {
 999              		.loc 1 1181 0
 1000 03fe 042B     		cmp	r3, #4	@ hspi_3(D)->State,
1183:src/stm32f1xx_hal_spi.c ****   }
 1001              		.loc 1 1183 0
 1002 0400 1CBF     		itt	ne
 1003 0402 0523     		movne	r3, #5	@ tmp234,
 1004 0404 84F85130 		strbne	r3, [r4, #81]	@ tmp234, hspi_3(D)->State
1187:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 1005              		.loc 1 1187 0
 1006 0408 0023     		movs	r3, #0	@ tmp236,
 1007 040a 6365     		str	r3, [r4, #84]	@ tmp236, hspi_3(D)->ErrorCode
1196:src/stm32f1xx_hal_spi.c ****   hspi->TxISR       = NULL;
 1008              		.loc 1 1196 0
 1009 040c 2364     		str	r3, [r4, #64]	@ tmp236, hspi_3(D)->RxISR
1197:src/stm32f1xx_hal_spi.c **** 
 1010              		.loc 1 1197 0
 1011 040e 6364     		str	r3, [r4, #68]	@ tmp236, hspi_3(D)->TxISR
1201:src/stm32f1xx_hal_spi.c ****   {
 1012              		.loc 1 1201 0
 1013 0410 A36A     		ldr	r3, [r4, #40]	@ hspi_3(D)->Init.CRCCalculation, hspi_3(D)->Init.CRCCalculation
1189:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = Size;
 1014              		.loc 1 1189 0
 1015 0412 A4F83E80 		strh	r8, [r4, #62]	@ movhi	@ Size, hspi_3(D)->RxXferCount
1201:src/stm32f1xx_hal_spi.c ****   {
 1016              		.loc 1 1201 0
 1017 0416 B3F5005F 		cmp	r3, #8192	@ hspi_3(D)->Init.CRCCalculation,
1190:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 1018              		.loc 1 1190 0
 1019 041a A4F83C80 		strh	r8, [r4, #60]	@ movhi	@ Size, hspi_3(D)->RxXferSize
1191:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = Size;
 1020              		.loc 1 1191 0
 1021 041e 2563     		str	r5, [r4, #48]	@ pTxData, hspi_3(D)->pTxBuffPtr
1192:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = Size;
 1022              		.loc 1 1192 0
 1023 0420 A4F83680 		strh	r8, [r4, #54]	@ movhi	@ Size, hspi_3(D)->TxXferCount
1193:src/stm32f1xx_hal_spi.c **** 
 1024              		.loc 1 1193 0
 1025 0424 A4F83480 		strh	r8, [r4, #52]	@ movhi	@ Size, hspi_3(D)->TxXferSize
 1026 0428 2268     		ldr	r2, [r4]	@ _23, hspi_3(D)->Instance
1201:src/stm32f1xx_hal_spi.c ****   {
 1027              		.loc 1 1201 0
 1028 042a 07D1     		bne	.L101	@,
1203:src/stm32f1xx_hal_spi.c ****   }
 1029              		.loc 1 1203 0
 1030 042c 1368     		ldr	r3, [r2]	@ _19, _18->CR1
 1031 042e 23F40053 		bic	r3, r3, #8192	@ _20, _19,
 1032 0432 1360     		str	r3, [r2]	@ _20, _18->CR1
 1033 0434 1368     		ldr	r3, [r2]	@ _21, _18->CR1
 1034 0436 43F40053 		orr	r3, r3, #8192	@ _22, _21,
ARM GAS  /tmp/ccdPJtdr.s 			page 90


 1035 043a 1360     		str	r3, [r2]	@ _22, _18->CR1
 1036              	.L101:
1208:src/stm32f1xx_hal_spi.c ****   {
 1037              		.loc 1 1208 0
 1038 043c 1368     		ldr	r3, [r2]	@ _24, _23->CR1
 1039 043e 5B06     		lsls	r3, r3, #25	@, _24,
1211:src/stm32f1xx_hal_spi.c ****   }
 1040              		.loc 1 1211 0
 1041 0440 5EBF     		ittt	pl
 1042 0442 1368     		ldrpl	r3, [r2]	@ _26, _23->CR1
 1043 0444 43F04003 		orrpl	r3, r3, #64	@ _27, _26,
 1044 0448 1360     		strpl	r3, [r2]	@ _27, _23->CR1
1215:src/stm32f1xx_hal_spi.c ****   {
 1045              		.loc 1 1215 0
 1046 044a E368     		ldr	r3, [r4, #12]	@ hspi_3(D)->Init.DataSize, hspi_3(D)->Init.DataSize
 1047 044c B3F5006F 		cmp	r3, #2048	@ hspi_3(D)->Init.DataSize,
 1048 0450 67D1     		bne	.L103	@,
1217:src/stm32f1xx_hal_spi.c ****     {
 1049              		.loc 1 1217 0
 1050 0452 11B1     		cbz	r1, .L104	@ tmp_mode,
 1051 0454 B8F1010F 		cmp	r8, #1	@ Size,
 1052 0458 07D1     		bne	.L105	@,
 1053              	.L104:
1219:src/stm32f1xx_hal_spi.c ****       hspi->pTxBuffPtr += sizeof(uint16_t);
 1054              		.loc 1 1219 0
 1055 045a 35F8023B 		ldrh	r3, [r5], #2	@ _30, MEM[(uint16_t *)pTxData_6(D)]
 1056              	.LVL53:
 1057 045e D360     		str	r3, [r2, #12]	@ _30, _23->DR
1221:src/stm32f1xx_hal_spi.c ****     }
 1058              		.loc 1 1221 0
 1059 0460 E38E     		ldrh	r3, [r4, #54]	@, hspi_3(D)->TxXferCount
1220:src/stm32f1xx_hal_spi.c ****       hspi->TxXferCount--;
 1060              		.loc 1 1220 0
 1061 0462 2563     		str	r5, [r4, #48]	@ tmp246, hspi_3(D)->pTxBuffPtr
 1062              	.LVL54:
1221:src/stm32f1xx_hal_spi.c ****     }
 1063              		.loc 1 1221 0
 1064 0464 013B     		subs	r3, r3, #1	@ tmp249, hspi_3(D)->TxXferCount,
 1065 0466 9BB2     		uxth	r3, r3	@ _33, tmp249
 1066 0468 E386     		strh	r3, [r4, #54]	@ movhi	@ _33, hspi_3(D)->TxXferCount
 1067              	.LVL55:
 1068              	.L105:
1250:src/stm32f1xx_hal_spi.c ****       }
 1069              		.loc 1 1250 0
 1070 046a 0125     		movs	r5, #1	@ txallowed,
 1071              	.LVL56:
 1072              	.L106:
1223:src/stm32f1xx_hal_spi.c ****     {
 1073              		.loc 1 1223 0
 1074 046c E38E     		ldrh	r3, [r4, #54]	@, hspi_3(D)->TxXferCount
 1075 046e 9BB2     		uxth	r3, r3	@ _60, hspi_3(D)->TxXferCount
 1076 0470 B3B9     		cbnz	r3, .L112	@ _60,
 1077 0472 E38F     		ldrh	r3, [r4, #62]	@, hspi_3(D)->RxXferCount
 1078 0474 9BB2     		uxth	r3, r3	@ _61, hspi_3(D)->RxXferCount
 1079 0476 9BB9     		cbnz	r3, .L112	@ _61,
 1080              	.L125:
1307:src/stm32f1xx_hal_spi.c ****   {
ARM GAS  /tmp/ccdPJtdr.s 			page 91


 1081              		.loc 1 1307 0
 1082 0478 A36A     		ldr	r3, [r4, #40]	@ hspi_3(D)->Init.CRCCalculation, hspi_3(D)->Init.CRCCalculation
 1083 047a B3F5005F 		cmp	r3, #8192	@ hspi_3(D)->Init.CRCCalculation,
 1084 047e 40F0A280 		bne	.L114	@,
1310:src/stm32f1xx_hal_spi.c ****     {
 1085              		.loc 1 1310 0
 1086 0482 0122     		movs	r2, #1	@,
 1087 0484 0097     		str	r7, [sp]	@ tickstart,
 1088 0486 3346     		mov	r3, r6	@, Timeout
 1089 0488 1146     		mov	r1, r2	@,
 1090 048a 2046     		mov	r0, r4	@, hspi
 1091 048c FFF7EDFD 		bl	SPI_WaitFlagStateUntilTimeout	@
 1092              	.LVL57:
 1093 0490 0028     		cmp	r0, #0	@
 1094 0492 00F09680 		beq	.L126	@
1313:src/stm32f1xx_hal_spi.c ****       errorcode = HAL_TIMEOUT;
 1095              		.loc 1 1313 0
 1096 0496 636D     		ldr	r3, [r4, #84]	@ _100, hspi_3(D)->ErrorCode
 1097 0498 43F00203 		orr	r3, r3, #2	@ _101, _100,
 1098 049c 6365     		str	r3, [r4, #84]	@ _101, hspi_3(D)->ErrorCode
 1099 049e 1FE0     		b	.L176	@
 1100              	.L112:
1226:src/stm32f1xx_hal_spi.c ****       {
 1101              		.loc 1 1226 0
 1102 04a0 2268     		ldr	r2, [r4]	@ _34, hspi_3(D)->Instance
 1103 04a2 9368     		ldr	r3, [r2, #8]	@ _35, _34->SR
 1104 04a4 9807     		lsls	r0, r3, #30	@, _35,
 1105 04a6 04D5     		bpl	.L107	@,
 1106 04a8 E38E     		ldrh	r3, [r4, #54]	@, hspi_3(D)->TxXferCount
 1107 04aa 9BB2     		uxth	r3, r3	@ _37, hspi_3(D)->TxXferCount
 1108 04ac 0BB1     		cbz	r3, .L107	@ _37,
 1109 04ae 15BB     		cbnz	r5, .L108	@ txallowed,
 1110              	.LVL58:
 1111              	.L109:
 1112              	.LBE31:
 1113              	.LBE30:
1143:src/stm32f1xx_hal_spi.c ****   uint16_t             initial_TxXferCount;
 1114              		.loc 1 1143 0
 1115 04b0 0025     		movs	r5, #0	@ txallowed,
 1116              	.L107:
 1117              	.LVL59:
 1118              	.LBB35:
 1119              	.LBB33:
1244:src/stm32f1xx_hal_spi.c ****       {
 1120              		.loc 1 1244 0
 1121 04b2 9368     		ldr	r3, [r2, #8]	@ _49, _34->SR
 1122 04b4 D907     		lsls	r1, r3, #31	@, _49,
 1123 04b6 0CD5     		bpl	.L110	@,
 1124 04b8 E38F     		ldrh	r3, [r4, #62]	@, hspi_3(D)->RxXferCount
 1125 04ba 9BB2     		uxth	r3, r3	@ _51, hspi_3(D)->RxXferCount
 1126 04bc 4BB1     		cbz	r3, .L110	@ _51,
1250:src/stm32f1xx_hal_spi.c ****       }
 1127              		.loc 1 1250 0
 1128 04be 0125     		movs	r5, #1	@ txallowed,
 1129              	.LVL60:
1246:src/stm32f1xx_hal_spi.c ****         hspi->pRxBuffPtr += sizeof(uint16_t);
 1130              		.loc 1 1246 0
ARM GAS  /tmp/ccdPJtdr.s 			page 92


 1131 04c0 D268     		ldr	r2, [r2, #12]	@ _53, _34->DR
 1132 04c2 A36B     		ldr	r3, [r4, #56]	@ tmp266, hspi_3(D)->pRxBuffPtr
 1133 04c4 23F8022B 		strh	r2, [r3], #2	@ movhi	@ _53, MEM[(uint16_t *)_52]
1247:src/stm32f1xx_hal_spi.c ****         hspi->RxXferCount--;
 1134              		.loc 1 1247 0
 1135 04c8 A363     		str	r3, [r4, #56]	@ tmp266, hspi_3(D)->pRxBuffPtr
1248:src/stm32f1xx_hal_spi.c ****         /* Next Data is a Transmission (Tx). Tx is allowed */
 1136              		.loc 1 1248 0
 1137 04ca E38F     		ldrh	r3, [r4, #62]	@, hspi_3(D)->RxXferCount
 1138 04cc 013B     		subs	r3, r3, #1	@ tmp269, hspi_3(D)->RxXferCount,
 1139 04ce 9BB2     		uxth	r3, r3	@ _57, tmp269
 1140 04d0 E387     		strh	r3, [r4, #62]	@ movhi	@ _57, hspi_3(D)->RxXferCount
 1141              	.LVL61:
 1142              	.L110:
1252:src/stm32f1xx_hal_spi.c ****       {
 1143              		.loc 1 1252 0
 1144 04d2 FFF7FEFF 		bl	HAL_GetTick	@
 1145              	.LVL62:
 1146 04d6 C01B     		subs	r0, r0, r7	@ tmp271,, tickstart
 1147 04d8 8642     		cmp	r6, r0	@ Timeout, tmp271
 1148 04da C7D8     		bhi	.L106	@,
 1149 04dc 731C     		adds	r3, r6, #1	@, Timeout,
 1150 04de C5D0     		beq	.L106	@,
 1151              	.L176:
 1152              	.LVL63:
1314:src/stm32f1xx_hal_spi.c ****       goto error;
 1153              		.loc 1 1314 0
 1154 04e0 0325     		movs	r5, #3	@ <retval>,
 1155              	.LVL64:
 1156              	.L99:
1356:src/stm32f1xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
 1157              		.loc 1 1356 0
 1158 04e2 0123     		movs	r3, #1	@ tmp319,
 1159 04e4 84F85130 		strb	r3, [r4, #81]	@ tmp319, hspi_3(D)->State
1357:src/stm32f1xx_hal_spi.c ****   return errorcode;
 1160              		.loc 1 1357 0
 1161 04e8 0023     		movs	r3, #0	@ tmp321,
 1162 04ea 84F85030 		strb	r3, [r4, #80]	@ tmp321, hspi_3(D)->Lock
 1163              	.LVL65:
 1164              	.L97:
 1165              	.LBE33:
 1166              	.LBE35:
1359:src/stm32f1xx_hal_spi.c **** 
 1167              		.loc 1 1359 0
 1168 04ee 2846     		mov	r0, r5	@, <retval>
 1169 04f0 05B0     		add	sp, sp, #20	@,,
 1170              	.LCFI16:
 1171              		.cfi_remember_state
 1172              		.cfi_def_cfa_offset 28
 1173              		@ sp needed	@
 1174 04f2 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}	@
 1175              	.LVL66:
 1176              	.L108:
 1177              	.LCFI17:
 1178              		.cfi_restore_state
 1179              	.LBB36:
 1180              	.LBB34:
ARM GAS  /tmp/ccdPJtdr.s 			page 93


1228:src/stm32f1xx_hal_spi.c ****         hspi->pTxBuffPtr += sizeof(uint16_t);
 1181              		.loc 1 1228 0
 1182 04f6 236B     		ldr	r3, [r4, #48]	@ tmp254, hspi_3(D)->pTxBuffPtr
 1183 04f8 33F8021B 		ldrh	r1, [r3], #2	@ _41, MEM[(uint16_t *)_39]
 1184 04fc D160     		str	r1, [r2, #12]	@ _41, _34->DR
1229:src/stm32f1xx_hal_spi.c ****         hspi->TxXferCount--;
 1185              		.loc 1 1229 0
 1186 04fe 2363     		str	r3, [r4, #48]	@ tmp254, hspi_3(D)->pTxBuffPtr
1230:src/stm32f1xx_hal_spi.c ****         /* Next Data is a reception (Rx). Tx not allowed */
 1187              		.loc 1 1230 0
 1188 0500 E38E     		ldrh	r3, [r4, #54]	@, hspi_3(D)->TxXferCount
 1189 0502 013B     		subs	r3, r3, #1	@ tmp257, hspi_3(D)->TxXferCount,
 1190 0504 9BB2     		uxth	r3, r3	@ _44, tmp257
 1191 0506 E386     		strh	r3, [r4, #54]	@ movhi	@ _44, hspi_3(D)->TxXferCount
 1192              	.LVL67:
1236:src/stm32f1xx_hal_spi.c ****         {
 1193              		.loc 1 1236 0
 1194 0508 E58E     		ldrh	r5, [r4, #54]	@, hspi_3(D)->TxXferCount
 1195 050a ADB2     		uxth	r5, r5	@ _45, hspi_3(D)->TxXferCount
 1196 050c 002D     		cmp	r5, #0	@ _45
 1197 050e CFD1     		bne	.L109	@
 1198 0510 A36A     		ldr	r3, [r4, #40]	@ hspi_3(D)->Init.CRCCalculation, hspi_3(D)->Init.CRCCalculation
 1199 0512 B3F5005F 		cmp	r3, #8192	@ hspi_3(D)->Init.CRCCalculation,
 1200 0516 CBD1     		bne	.L109	@,
1238:src/stm32f1xx_hal_spi.c ****         }
 1201              		.loc 1 1238 0
 1202 0518 1368     		ldr	r3, [r2]	@ _47, _34->CR1
 1203 051a 43F48053 		orr	r3, r3, #4096	@ _48, _47,
 1204 051e 1360     		str	r3, [r2]	@ _48, _34->CR1
 1205 0520 C7E7     		b	.L107	@
 1206              	.LVL68:
 1207              	.L103:
1262:src/stm32f1xx_hal_spi.c ****     {
 1208              		.loc 1 1262 0
 1209 0522 11B1     		cbz	r1, .L115	@ tmp_mode,
 1210 0524 B8F1010F 		cmp	r8, #1	@ Size,
 1211 0528 08D1     		bne	.L116	@,
 1212              	.L115:
1264:src/stm32f1xx_hal_spi.c ****       hspi->pTxBuffPtr += sizeof(uint8_t);
 1213              		.loc 1 1264 0
 1214 052a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2	@ _62, *pTxData_6(D)
 1215 052c 1373     		strb	r3, [r2, #12]	@ _62, MEM[(volatile uint8_t *)_23 + 12B]
1265:src/stm32f1xx_hal_spi.c ****       hspi->TxXferCount--;
 1216              		.loc 1 1265 0
 1217 052e 236B     		ldr	r3, [r4, #48]	@ hspi_3(D)->pTxBuffPtr, hspi_3(D)->pTxBuffPtr
 1218 0530 0133     		adds	r3, r3, #1	@ tmp278, hspi_3(D)->pTxBuffPtr,
 1219 0532 2363     		str	r3, [r4, #48]	@ tmp278, hspi_3(D)->pTxBuffPtr
1266:src/stm32f1xx_hal_spi.c ****     }
 1220              		.loc 1 1266 0
 1221 0534 E38E     		ldrh	r3, [r4, #54]	@, hspi_3(D)->TxXferCount
 1222 0536 013B     		subs	r3, r3, #1	@ tmp282, hspi_3(D)->TxXferCount,
 1223 0538 9BB2     		uxth	r3, r3	@ _66, tmp282
 1224 053a E386     		strh	r3, [r4, #54]	@ movhi	@ _66, hspi_3(D)->TxXferCount
 1225              	.L116:
1295:src/stm32f1xx_hal_spi.c ****       }
 1226              		.loc 1 1295 0
 1227 053c 0125     		movs	r5, #1	@ txallowed,
ARM GAS  /tmp/ccdPJtdr.s 			page 94


 1228              	.LVL69:
 1229              	.L117:
1268:src/stm32f1xx_hal_spi.c ****     {
 1230              		.loc 1 1268 0
 1231 053e E38E     		ldrh	r3, [r4, #54]	@, hspi_3(D)->TxXferCount
 1232 0540 9BB2     		uxth	r3, r3	@ _96, hspi_3(D)->TxXferCount
 1233 0542 1BB9     		cbnz	r3, .L124	@ _96,
 1234 0544 E38F     		ldrh	r3, [r4, #62]	@, hspi_3(D)->RxXferCount
 1235 0546 9BB2     		uxth	r3, r3	@ _97, hspi_3(D)->RxXferCount
 1236 0548 002B     		cmp	r3, #0	@ _97
 1237 054a 95D0     		beq	.L125	@
 1238              	.L124:
1271:src/stm32f1xx_hal_spi.c ****       {
 1239              		.loc 1 1271 0
 1240 054c 2268     		ldr	r2, [r4]	@ _67, hspi_3(D)->Instance
 1241 054e 9368     		ldr	r3, [r2, #8]	@ _68, _67->SR
 1242 0550 9807     		lsls	r0, r3, #30	@, _68,
 1243 0552 04D5     		bpl	.L118	@,
 1244 0554 E38E     		ldrh	r3, [r4, #54]	@, hspi_3(D)->TxXferCount
 1245 0556 9BB2     		uxth	r3, r3	@ _70, hspi_3(D)->TxXferCount
 1246 0558 0BB1     		cbz	r3, .L118	@ _70,
 1247 055a D5B9     		cbnz	r5, .L119	@ txallowed,
 1248              	.LVL70:
 1249              	.L120:
1250:src/stm32f1xx_hal_spi.c ****       }
 1250              		.loc 1 1250 0
 1251 055c 0025     		movs	r5, #0	@ txallowed,
 1252              	.L118:
 1253              	.LVL71:
1289:src/stm32f1xx_hal_spi.c ****       {
 1254              		.loc 1 1289 0
 1255 055e 2268     		ldr	r2, [r4]	@ _83, hspi_3(D)->Instance
 1256 0560 9368     		ldr	r3, [r2, #8]	@ _84, _83->SR
 1257 0562 D907     		lsls	r1, r3, #31	@, _84,
 1258 0564 0DD5     		bpl	.L121	@,
 1259 0566 E38F     		ldrh	r3, [r4, #62]	@, hspi_3(D)->RxXferCount
 1260 0568 9BB2     		uxth	r3, r3	@ _86, hspi_3(D)->RxXferCount
 1261 056a 53B1     		cbz	r3, .L121	@ _86,
1295:src/stm32f1xx_hal_spi.c ****       }
 1262              		.loc 1 1295 0
 1263 056c 0125     		movs	r5, #1	@ txallowed,
 1264              	.LVL72:
1291:src/stm32f1xx_hal_spi.c ****         hspi->pRxBuffPtr++;
 1265              		.loc 1 1291 0
 1266 056e D268     		ldr	r2, [r2, #12]	@ _88, _83->DR
 1267 0570 A36B     		ldr	r3, [r4, #56]	@ _87, hspi_3(D)->pRxBuffPtr
 1268 0572 1A70     		strb	r2, [r3]	@ _88, *_87
1292:src/stm32f1xx_hal_spi.c ****         hspi->RxXferCount--;
 1269              		.loc 1 1292 0
 1270 0574 A36B     		ldr	r3, [r4, #56]	@ hspi_3(D)->pRxBuffPtr, hspi_3(D)->pRxBuffPtr
 1271 0576 0133     		adds	r3, r3, #1	@ tmp302, hspi_3(D)->pRxBuffPtr,
 1272 0578 A363     		str	r3, [r4, #56]	@ tmp302, hspi_3(D)->pRxBuffPtr
1293:src/stm32f1xx_hal_spi.c ****         /* Next Data is a Transmission (Tx). Tx is allowed */
 1273              		.loc 1 1293 0
 1274 057a E38F     		ldrh	r3, [r4, #62]	@, hspi_3(D)->RxXferCount
 1275 057c 013B     		subs	r3, r3, #1	@ tmp306, hspi_3(D)->RxXferCount,
 1276 057e 9BB2     		uxth	r3, r3	@ _93, tmp306
ARM GAS  /tmp/ccdPJtdr.s 			page 95


 1277 0580 E387     		strh	r3, [r4, #62]	@ movhi	@ _93, hspi_3(D)->RxXferCount
 1278              	.LVL73:
 1279              	.L121:
1297:src/stm32f1xx_hal_spi.c ****       {
 1280              		.loc 1 1297 0
 1281 0582 FFF7FEFF 		bl	HAL_GetTick	@
 1282              	.LVL74:
 1283 0586 C01B     		subs	r0, r0, r7	@ tmp308,, tickstart
 1284 0588 8642     		cmp	r6, r0	@ Timeout, tmp308
 1285 058a D8D8     		bhi	.L117	@,
 1286 058c 731C     		adds	r3, r6, #1	@, Timeout,
 1287 058e D6D0     		beq	.L117	@,
 1288 0590 A6E7     		b	.L176	@
 1289              	.L119:
1273:src/stm32f1xx_hal_spi.c ****         hspi->pTxBuffPtr++;
 1290              		.loc 1 1273 0
 1291 0592 236B     		ldr	r3, [r4, #48]	@ hspi_3(D)->pTxBuffPtr, hspi_3(D)->pTxBuffPtr
 1292 0594 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2	@ _73, *_72
 1293 0596 1373     		strb	r3, [r2, #12]	@ _73, MEM[(volatile uint8_t *)_67 + 12B]
1274:src/stm32f1xx_hal_spi.c ****         hspi->TxXferCount--;
 1294              		.loc 1 1274 0
 1295 0598 236B     		ldr	r3, [r4, #48]	@ hspi_3(D)->pTxBuffPtr, hspi_3(D)->pTxBuffPtr
 1296 059a 0133     		adds	r3, r3, #1	@ tmp289, hspi_3(D)->pTxBuffPtr,
 1297 059c 2363     		str	r3, [r4, #48]	@ tmp289, hspi_3(D)->pTxBuffPtr
1275:src/stm32f1xx_hal_spi.c ****         /* Next Data is a reception (Rx). Tx not allowed */
 1298              		.loc 1 1275 0
 1299 059e E38E     		ldrh	r3, [r4, #54]	@, hspi_3(D)->TxXferCount
 1300 05a0 013B     		subs	r3, r3, #1	@ tmp293, hspi_3(D)->TxXferCount,
 1301 05a2 9BB2     		uxth	r3, r3	@ _77, tmp293
 1302 05a4 E386     		strh	r3, [r4, #54]	@ movhi	@ _77, hspi_3(D)->TxXferCount
 1303              	.LVL75:
1281:src/stm32f1xx_hal_spi.c ****         {
 1304              		.loc 1 1281 0
 1305 05a6 E58E     		ldrh	r5, [r4, #54]	@, hspi_3(D)->TxXferCount
 1306 05a8 ADB2     		uxth	r5, r5	@ _78, hspi_3(D)->TxXferCount
 1307 05aa 002D     		cmp	r5, #0	@ _78
 1308 05ac D6D1     		bne	.L120	@
 1309 05ae A36A     		ldr	r3, [r4, #40]	@ hspi_3(D)->Init.CRCCalculation, hspi_3(D)->Init.CRCCalculation
 1310 05b0 B3F5005F 		cmp	r3, #8192	@ hspi_3(D)->Init.CRCCalculation,
 1311 05b4 D2D1     		bne	.L120	@,
1283:src/stm32f1xx_hal_spi.c ****         }
 1312              		.loc 1 1283 0
 1313 05b6 2268     		ldr	r2, [r4]	@ _80, hspi_3(D)->Instance
 1314 05b8 1368     		ldr	r3, [r2]	@ _81, _80->CR1
 1315 05ba 43F48053 		orr	r3, r3, #4096	@ _82, _81,
 1316 05be 1360     		str	r3, [r2]	@ _82, _80->CR1
 1317 05c0 CDE7     		b	.L118	@
 1318              	.LVL76:
 1319              	.L126:
1318:src/stm32f1xx_hal_spi.c ****   }
 1320              		.loc 1 1318 0
 1321 05c2 2368     		ldr	r3, [r4]	@ _102, hspi_3(D)->Instance
 1322 05c4 DB68     		ldr	r3, [r3, #12]	@ vol.4_103, _102->DR
 1323              	.L114:
1322:src/stm32f1xx_hal_spi.c ****   {
 1324              		.loc 1 1322 0
 1325 05c6 2368     		ldr	r3, [r4]	@ _104, hspi_3(D)->Instance
ARM GAS  /tmp/ccdPJtdr.s 			page 96


 1326 05c8 9D68     		ldr	r5, [r3, #8]	@ _105, _104->SR
 1327              	.LVL77:
 1328 05ca 15F01005 		ands	r5, r5, #16	@ tmp314, _105,
 1329 05ce 0CD0     		beq	.L127	@,
1332:src/stm32f1xx_hal_spi.c ****     }
 1330              		.loc 1 1332 0
 1331 05d0 0125     		movs	r5, #1	@ <retval>,
1327:src/stm32f1xx_hal_spi.c **** 
 1332              		.loc 1 1327 0
 1333 05d2 626D     		ldr	r2, [r4, #84]	@ _107, hspi_3(D)->ErrorCode
 1334 05d4 42F00202 		orr	r2, r2, #2	@ _108, _107,
 1335 05d8 6265     		str	r2, [r4, #84]	@ _108, hspi_3(D)->ErrorCode
1330:src/stm32f1xx_hal_spi.c **** 
 1336              		.loc 1 1330 0
 1337 05da 1A68     		ldr	r2, [r3]	@ _109, _104->CR1
 1338 05dc 22F40052 		bic	r2, r2, #8192	@ _110, _109,
 1339 05e0 1A60     		str	r2, [r3]	@ _110, _104->CR1
 1340 05e2 1A68     		ldr	r2, [r3]	@ _111, _104->CR1
 1341 05e4 42F40052 		orr	r2, r2, #8192	@ _112, _111,
 1342 05e8 1A60     		str	r2, [r3]	@ _112, _104->CR1
 1343              	.LVL78:
 1344              	.L127:
1342:src/stm32f1xx_hal_spi.c ****   {
 1345              		.loc 1 1342 0
 1346 05ea 3A46     		mov	r2, r7	@, tickstart
 1347 05ec 3146     		mov	r1, r6	@, Timeout
 1348 05ee 2046     		mov	r0, r4	@, hspi
 1349 05f0 FFF77EFD 		bl	SPI_EndRxTxTransaction	@
 1350              	.LVL79:
 1351 05f4 18B1     		cbz	r0, .L128	@,
 1352              	.LVL80:
1345:src/stm32f1xx_hal_spi.c ****     goto error;
 1353              		.loc 1 1345 0
 1354 05f6 2023     		movs	r3, #32	@ tmp316,
 1355 05f8 6365     		str	r3, [r4, #84]	@ tmp316, hspi_3(D)->ErrorCode
 1356              	.LVL81:
 1357              	.L135:
1176:src/stm32f1xx_hal_spi.c ****     goto error;
 1358              		.loc 1 1176 0
 1359 05fa 0125     		movs	r5, #1	@ <retval>,
 1360 05fc 71E7     		b	.L99	@
 1361              	.LVL82:
 1362              	.L128:
1350:src/stm32f1xx_hal_spi.c ****   {
 1363              		.loc 1 1350 0
 1364 05fe A368     		ldr	r3, [r4, #8]	@ hspi_3(D)->Init.Direction, hspi_3(D)->Init.Direction
 1365 0600 002B     		cmp	r3, #0	@ hspi_3(D)->Init.Direction
 1366 0602 7FF46EAF 		bne	.L99	@
 1367              	.LBB32:
1352:src/stm32f1xx_hal_spi.c ****   }
 1368              		.loc 1 1352 0
 1369 0606 0393     		str	r3, [sp, #12]	@ hspi_3(D)->Init.Direction, tmpreg_ovr
 1370 0608 2368     		ldr	r3, [r4]	@ _115, hspi_3(D)->Instance
 1371 060a DA68     		ldr	r2, [r3, #12]	@ tmpreg_ovr.5_116, _115->DR
 1372 060c 0392     		str	r2, [sp, #12]	@ tmpreg_ovr.5_116, tmpreg_ovr
 1373 060e 9B68     		ldr	r3, [r3, #8]	@ tmpreg_ovr.6_117, _115->SR
 1374 0610 0393     		str	r3, [sp, #12]	@ tmpreg_ovr.6_117, tmpreg_ovr
ARM GAS  /tmp/ccdPJtdr.s 			page 97


 1375 0612 039B     		ldr	r3, [sp, #12]	@ vol.7_118, tmpreg_ovr
 1376 0614 65E7     		b	.L99	@
 1377              	.LVL83:
 1378              	.L132:
 1379              	.LBE32:
1170:src/stm32f1xx_hal_spi.c ****     goto error;
 1380              		.loc 1 1170 0
 1381 0616 0225     		movs	r5, #2	@ <retval>,
 1382              	.LVL84:
 1383 0618 63E7     		b	.L99	@
 1384              	.LVL85:
 1385              	.L129:
 1386              	.LBE34:
 1387              	.LBE36:
1157:src/stm32f1xx_hal_spi.c **** 
 1388              		.loc 1 1157 0
 1389 061a 0225     		movs	r5, #2	@ <retval>,
 1390 061c 67E7     		b	.L97	@
 1391              		.cfi_endproc
 1392              	.LFE71:
 1393              		.size	HAL_SPI_TransmitReceive, .-HAL_SPI_TransmitReceive
 1394              		.align	1
 1395              		.global	HAL_SPI_Receive
 1396              		.syntax unified
 1397              		.thumb
 1398              		.thumb_func
 1399              		.fpu softvfp
 1400              		.type	HAL_SPI_Receive, %function
 1401              	HAL_SPI_Receive:
 1402              	.LFB70:
 935:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 1403              		.loc 1 935 0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 0
 1406              		@ frame_needed = 0, uses_anonymous_args = 0
 1407              	.LVL86:
 1408 061e 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}	@
 1409              	.LCFI18:
 1410              		.cfi_def_cfa_offset 32
 1411              		.cfi_offset 4, -24
 1412              		.cfi_offset 5, -20
 1413              		.cfi_offset 6, -16
 1414              		.cfi_offset 7, -12
 1415              		.cfi_offset 8, -8
 1416              		.cfi_offset 14, -4
 935:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 1417              		.loc 1 935 0
 1418 0622 1D46     		mov	r5, r3	@ Timeout, Timeout
 939:src/stm32f1xx_hal_spi.c ****   {
 1419              		.loc 1 939 0
 1420 0624 4368     		ldr	r3, [r0, #4]	@ hspi_17(D)->Init.Mode, hspi_17(D)->Init.Mode
 1421              	.LVL87:
 935:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 1422              		.loc 1 935 0
 1423 0626 0446     		mov	r4, r0	@ hspi, hspi
 939:src/stm32f1xx_hal_spi.c ****   {
 1424              		.loc 1 939 0
ARM GAS  /tmp/ccdPJtdr.s 			page 98


 1425 0628 B3F5827F 		cmp	r3, #260	@ hspi_17(D)->Init.Mode,
 935:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 1426              		.loc 1 935 0
 1427 062c 8846     		mov	r8, r1	@ pData, pData
 1428 062e 1746     		mov	r7, r2	@ Size, Size
 939:src/stm32f1xx_hal_spi.c ****   {
 1429              		.loc 1 939 0
 1430 0630 0CD1     		bne	.L178	@,
 939:src/stm32f1xx_hal_spi.c ****   {
 1431              		.loc 1 939 0 is_stmt 0 discriminator 1
 1432 0632 8368     		ldr	r3, [r0, #8]	@ hspi_17(D)->Init.Direction, hspi_17(D)->Init.Direction
 1433 0634 53B9     		cbnz	r3, .L178	@ hspi_17(D)->Init.Direction,
 941:src/stm32f1xx_hal_spi.c ****     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line 
 1434              		.loc 1 941 0 is_stmt 1
 1435 0636 0423     		movs	r3, #4	@ tmp198,
 1436 0638 80F85130 		strb	r3, [r0, #81]	@ tmp198, hspi_17(D)->State
 943:src/stm32f1xx_hal_spi.c ****   }
 1437              		.loc 1 943 0
 1438 063c 1346     		mov	r3, r2	@, Size
 1439 063e 0095     		str	r5, [sp]	@ Timeout,
 1440 0640 0A46     		mov	r2, r1	@, pData
 1441              	.LVL88:
 1442 0642 FFF7FEFF 		bl	HAL_SPI_TransmitReceive	@
 1443              	.LVL89:
 1444              	.L179:
1129:src/stm32f1xx_hal_spi.c **** 
 1445              		.loc 1 1129 0
 1446 0646 02B0     		add	sp, sp, #8	@,,
 1447              	.LCFI19:
 1448              		.cfi_remember_state
 1449              		.cfi_def_cfa_offset 24
 1450              		@ sp needed	@
 1451 0648 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1452              	.LVL90:
 1453              	.L178:
 1454              	.LCFI20:
 1455              		.cfi_restore_state
 947:src/stm32f1xx_hal_spi.c **** 
 1456              		.loc 1 947 0
 1457 064c 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2	@ hspi_17(D)->Lock, hspi_17(D)->Lock
 1458 0650 012B     		cmp	r3, #1	@ hspi_17(D)->Lock,
 1459 0652 00F0CE80 		beq	.L202	@,
 947:src/stm32f1xx_hal_spi.c **** 
 1460              		.loc 1 947 0 is_stmt 0 discriminator 2
 1461 0656 0123     		movs	r3, #1	@ tmp202,
 1462 0658 84F85030 		strb	r3, [r4, #80]	@ tmp202, hspi_17(D)->Lock
 950:src/stm32f1xx_hal_spi.c **** 
 1463              		.loc 1 950 0 is_stmt 1 discriminator 2
 1464 065c FFF7FEFF 		bl	HAL_GetTick	@
 1465              	.LVL91:
 1466 0660 0646     		mov	r6, r0	@ tickstart,
 1467              	.LVL92:
 952:src/stm32f1xx_hal_spi.c ****   {
 1468              		.loc 1 952 0 discriminator 2
 1469 0662 94F85100 		ldrb	r0, [r4, #81]	@ zero_extendqisi2	@ hspi_17(D)->State, hspi_17(D)->State
 1470              	.LVL93:
 1471 0666 C0B2     		uxtb	r0, r0	@ _30, hspi_17(D)->State
ARM GAS  /tmp/ccdPJtdr.s 			page 99


 1472 0668 0128     		cmp	r0, #1	@ _30,
 1473 066a 40F0C080 		bne	.L203	@,
 958:src/stm32f1xx_hal_spi.c ****   {
 1474              		.loc 1 958 0
 1475 066e B8F1000F 		cmp	r8, #0	@ pData
 1476 0672 00F08E80 		beq	.L180	@
 958:src/stm32f1xx_hal_spi.c ****   {
 1477              		.loc 1 958 0 is_stmt 0 discriminator 1
 1478 0676 002F     		cmp	r7, #0	@ Size
 1479 0678 00F08B80 		beq	.L180	@
 965:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 1480              		.loc 1 965 0 is_stmt 1
 1481 067c 0423     		movs	r3, #4	@ tmp207,
 1482 067e 84F85130 		strb	r3, [r4, #81]	@ tmp207, hspi_17(D)->State
 966:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pData;
 1483              		.loc 1 966 0
 1484 0682 0023     		movs	r3, #0	@ tmp209,
 1485 0684 6365     		str	r3, [r4, #84]	@ tmp209, hspi_17(D)->ErrorCode
 972:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = 0U;
 1486              		.loc 1 972 0
 1487 0686 2363     		str	r3, [r4, #48]	@ tmp209, hspi_17(D)->pTxBuffPtr
 969:src/stm32f1xx_hal_spi.c **** 
 1488              		.loc 1 969 0
 1489 0688 E787     		strh	r7, [r4, #62]	@ movhi	@ Size, hspi_17(D)->RxXferCount
 973:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = 0U;
 1490              		.loc 1 973 0
 1491 068a A386     		strh	r3, [r4, #52]	@ movhi	@ tmp209, hspi_17(D)->TxXferSize
 974:src/stm32f1xx_hal_spi.c ****   hspi->RxISR       = NULL;
 1492              		.loc 1 974 0
 1493 068c E386     		strh	r3, [r4, #54]	@ movhi	@ tmp209, hspi_17(D)->TxXferCount
 975:src/stm32f1xx_hal_spi.c ****   hspi->TxISR       = NULL;
 1494              		.loc 1 975 0
 1495 068e 2364     		str	r3, [r4, #64]	@ tmp209, hspi_17(D)->RxISR
 976:src/stm32f1xx_hal_spi.c **** 
 1496              		.loc 1 976 0
 1497 0690 6364     		str	r3, [r4, #68]	@ tmp209, hspi_17(D)->TxISR
 980:src/stm32f1xx_hal_spi.c ****   {
 1498              		.loc 1 980 0
 1499 0692 A36A     		ldr	r3, [r4, #40]	@ hspi_17(D)->Init.CRCCalculation, hspi_17(D)->Init.CRCCalculation
 967:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = Size;
 1500              		.loc 1 967 0
 1501 0694 C4F83880 		str	r8, [r4, #56]	@ pData, hspi_17(D)->pRxBuffPtr
 980:src/stm32f1xx_hal_spi.c ****   {
 1502              		.loc 1 980 0
 1503 0698 B3F5005F 		cmp	r3, #8192	@ hspi_17(D)->Init.CRCCalculation,
 968:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = Size;
 1504              		.loc 1 968 0
 1505 069c A787     		strh	r7, [r4, #60]	@ movhi	@ Size, hspi_17(D)->RxXferSize
 1506 069e 2368     		ldr	r3, [r4]	@ _42, hspi_17(D)->Instance
 980:src/stm32f1xx_hal_spi.c ****   {
 1507              		.loc 1 980 0
 1508 06a0 0BD1     		bne	.L181	@,
 982:src/stm32f1xx_hal_spi.c ****     /* this is done to handle the CRCNEXT before the latest data */
 1509              		.loc 1 982 0
 1510 06a2 1A68     		ldr	r2, [r3]	@ _44, _42->CR1
 1511 06a4 22F40052 		bic	r2, r2, #8192	@ _45, _44,
 1512 06a8 1A60     		str	r2, [r3]	@ _45, _42->CR1
ARM GAS  /tmp/ccdPJtdr.s 			page 100


 1513 06aa 1A68     		ldr	r2, [r3]	@ _49, _42->CR1
 1514 06ac 42F40052 		orr	r2, r2, #8192	@ _50, _49,
 1515 06b0 1A60     		str	r2, [r3]	@ _50, _42->CR1
 984:src/stm32f1xx_hal_spi.c ****   }
 1516              		.loc 1 984 0
 1517 06b2 E28F     		ldrh	r2, [r4, #62]	@, hspi_17(D)->RxXferCount
 1518 06b4 013A     		subs	r2, r2, #1	@ tmp222, hspi_17(D)->RxXferCount,
 1519 06b6 92B2     		uxth	r2, r2	@ _53, tmp222
 1520 06b8 E287     		strh	r2, [r4, #62]	@ movhi	@ _53, hspi_17(D)->RxXferCount
 1521              	.L181:
 989:src/stm32f1xx_hal_spi.c ****   {
 1522              		.loc 1 989 0
 1523 06ba A268     		ldr	r2, [r4, #8]	@ hspi_17(D)->Init.Direction, hspi_17(D)->Init.Direction
 1524 06bc B2F5004F 		cmp	r2, #32768	@ hspi_17(D)->Init.Direction,
 991:src/stm32f1xx_hal_spi.c ****   }
 1525              		.loc 1 991 0
 1526 06c0 02BF     		ittt	eq
 1527 06c2 1A68     		ldreq	r2, [r3]	@ _58, _56->CR1
 1528 06c4 22F48042 		biceq	r2, r2, #16384	@ _59, _58,
 1529 06c8 1A60     		streq	r2, [r3]	@ _59, _56->CR1
 995:src/stm32f1xx_hal_spi.c ****   {
 1530              		.loc 1 995 0
 1531 06ca 1A68     		ldr	r2, [r3]	@ _62, _61->CR1
 1532 06cc 5106     		lsls	r1, r2, #25	@, _62,
 998:src/stm32f1xx_hal_spi.c ****   }
 1533              		.loc 1 998 0
 1534 06ce 5EBF     		ittt	pl
 1535 06d0 1A68     		ldrpl	r2, [r3]	@ _64, _61->CR1
 1536 06d2 42F04002 		orrpl	r2, r2, #64	@ _65, _64,
 1537 06d6 1A60     		strpl	r2, [r3]	@ _65, _61->CR1
1002:src/stm32f1xx_hal_spi.c ****   {
 1538              		.loc 1 1002 0
 1539 06d8 E368     		ldr	r3, [r4, #12]	@ hspi_17(D)->Init.DataSize, hspi_17(D)->Init.DataSize
 1540 06da F3B1     		cbz	r3, .L184	@ hspi_17(D)->Init.DataSize,
 1541              	.L185:
1029:src/stm32f1xx_hal_spi.c ****     {
 1542              		.loc 1 1029 0
 1543 06dc E38F     		ldrh	r3, [r4, #62]	@, hspi_17(D)->RxXferCount
 1544 06de 9BB2     		uxth	r3, r3	@ _84, hspi_17(D)->RxXferCount
 1545 06e0 FBB1     		cbz	r3, .L195	@ _84,
1032:src/stm32f1xx_hal_spi.c ****       {
 1546              		.loc 1 1032 0
 1547 06e2 2368     		ldr	r3, [r4]	@ _85, hspi_17(D)->Instance
 1548 06e4 9A68     		ldr	r2, [r3, #8]	@ _86, _85->SR
 1549 06e6 D707     		lsls	r7, r2, #31	@, _86,
 1550 06e8 5AD5     		bpl	.L191	@,
1034:src/stm32f1xx_hal_spi.c ****         hspi->pRxBuffPtr += sizeof(uint16_t);
 1551              		.loc 1 1034 0
 1552 06ea DA68     		ldr	r2, [r3, #12]	@ _89, _85->DR
 1553 06ec A36B     		ldr	r3, [r4, #56]	@ tmp244, hspi_17(D)->pRxBuffPtr
 1554 06ee 23F8022B 		strh	r2, [r3], #2	@ movhi	@ _89, MEM[(uint16_t *)_88]
1035:src/stm32f1xx_hal_spi.c ****         hspi->RxXferCount--;
 1555              		.loc 1 1035 0
 1556 06f2 A363     		str	r3, [r4, #56]	@ tmp244, hspi_17(D)->pRxBuffPtr
1036:src/stm32f1xx_hal_spi.c ****       }
 1557              		.loc 1 1036 0
 1558 06f4 E38F     		ldrh	r3, [r4, #62]	@, hspi_17(D)->RxXferCount
ARM GAS  /tmp/ccdPJtdr.s 			page 101


 1559 06f6 013B     		subs	r3, r3, #1	@ tmp247, hspi_17(D)->RxXferCount,
 1560 06f8 9BB2     		uxth	r3, r3	@ _95, tmp247
 1561 06fa E387     		strh	r3, [r4, #62]	@ movhi	@ _95, hspi_17(D)->RxXferCount
 1562 06fc EEE7     		b	.L185	@
 1563              	.L188:
1008:src/stm32f1xx_hal_spi.c ****       {
 1564              		.loc 1 1008 0
 1565 06fe 2368     		ldr	r3, [r4]	@ _69, hspi_17(D)->Instance
 1566 0700 9A68     		ldr	r2, [r3, #8]	@ _70, _69->SR
 1567 0702 D207     		lsls	r2, r2, #31	@, _70,
 1568 0704 3DD5     		bpl	.L186	@,
1011:src/stm32f1xx_hal_spi.c ****         hspi->pRxBuffPtr += sizeof(uint8_t);
 1569              		.loc 1 1011 0
 1570 0706 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2	@ MEM[(volatile uint8_t *)_69 + 12B], MEM[(volatile uint8_t 
 1571 0708 A26B     		ldr	r2, [r4, #56]	@ _72, hspi_17(D)->pRxBuffPtr
 1572 070a 1370     		strb	r3, [r2]	@ MEM[(volatile uint8_t *)_69 + 12B], *_72
1012:src/stm32f1xx_hal_spi.c ****         hspi->RxXferCount--;
 1573              		.loc 1 1012 0
 1574 070c A36B     		ldr	r3, [r4, #56]	@ hspi_17(D)->pRxBuffPtr, hspi_17(D)->pRxBuffPtr
 1575 070e 0133     		adds	r3, r3, #1	@ tmp232, hspi_17(D)->pRxBuffPtr,
 1576 0710 A363     		str	r3, [r4, #56]	@ tmp232, hspi_17(D)->pRxBuffPtr
1013:src/stm32f1xx_hal_spi.c ****       }
 1577              		.loc 1 1013 0
 1578 0712 E38F     		ldrh	r3, [r4, #62]	@, hspi_17(D)->RxXferCount
 1579 0714 013B     		subs	r3, r3, #1	@ tmp236, hspi_17(D)->RxXferCount,
 1580 0716 9BB2     		uxth	r3, r3	@ _79, tmp236
 1581 0718 E387     		strh	r3, [r4, #62]	@ movhi	@ _79, hspi_17(D)->RxXferCount
 1582              	.L184:
1005:src/stm32f1xx_hal_spi.c ****     {
 1583              		.loc 1 1005 0
 1584 071a E38F     		ldrh	r3, [r4, #62]	@, hspi_17(D)->RxXferCount
 1585 071c 9BB2     		uxth	r3, r3	@ _68, hspi_17(D)->RxXferCount
 1586 071e 002B     		cmp	r3, #0	@ _68
 1587 0720 EDD1     		bne	.L188	@
 1588              	.L195:
1052:src/stm32f1xx_hal_spi.c ****   {
 1589              		.loc 1 1052 0
 1590 0722 A36A     		ldr	r3, [r4, #40]	@ hspi_17(D)->Init.CRCCalculation, hspi_17(D)->Init.CRCCalculation
 1591 0724 B3F5005F 		cmp	r3, #8192	@ hspi_17(D)->Init.CRCCalculation,
 1592 0728 44D1     		bne	.L190	@,
1055:src/stm32f1xx_hal_spi.c **** 
 1593              		.loc 1 1055 0
 1594 072a 2368     		ldr	r3, [r4]	@ _101, hspi_17(D)->Instance
1064:src/stm32f1xx_hal_spi.c ****     {
 1595              		.loc 1 1064 0
 1596 072c 2046     		mov	r0, r4	@, hspi
1055:src/stm32f1xx_hal_spi.c **** 
 1597              		.loc 1 1055 0
 1598 072e 1A68     		ldr	r2, [r3]	@ _102, _101->CR1
 1599 0730 42F48052 		orr	r2, r2, #4096	@ _103, _102,
 1600 0734 1A60     		str	r2, [r3]	@ _103, _101->CR1
1058:src/stm32f1xx_hal_spi.c ****     {
 1601              		.loc 1 1058 0
 1602 0736 1A68     		ldr	r2, [r3]	@ _105, _101->CR1
 1603 0738 D104     		lsls	r1, r2, #19	@, _105,
1061:src/stm32f1xx_hal_spi.c ****     }
 1604              		.loc 1 1061 0
ARM GAS  /tmp/ccdPJtdr.s 			page 102


 1605 073a 42BF     		ittt	mi
 1606 073c 1A68     		ldrmi	r2, [r3]	@ _107, _101->CR1
 1607 073e 22F48052 		bicmi	r2, r2, #4096	@ _108, _107,
 1608 0742 1A60     		strmi	r2, [r3]	@ _108, _101->CR1
1064:src/stm32f1xx_hal_spi.c ****     {
 1609              		.loc 1 1064 0
 1610 0744 0122     		movs	r2, #1	@,
 1611 0746 0096     		str	r6, [sp]	@ tickstart,
 1612 0748 2B46     		mov	r3, r5	@, Timeout
 1613 074a 1146     		mov	r1, r2	@,
 1614 074c FFF78DFC 		bl	SPI_WaitFlagStateUntilTimeout	@
 1615              	.LVL94:
 1616 0750 F0B9     		cbnz	r0, .L220	@,
1072:src/stm32f1xx_hal_spi.c ****     {
 1617              		.loc 1 1072 0
 1618 0752 E368     		ldr	r3, [r4, #12]	@ hspi_17(D)->Init.DataSize, hspi_17(D)->Init.DataSize
 1619 0754 2268     		ldr	r2, [r4]	@ _119, hspi_17(D)->Instance
 1620 0756 B3F5006F 		cmp	r3, #2048	@ hspi_17(D)->Init.DataSize,
1074:src/stm32f1xx_hal_spi.c ****     }
 1621              		.loc 1 1074 0
 1622 075a 0CBF     		ite	eq
 1623 075c D268     		ldreq	r2, [r2, #12]	@ _115, _114->DR
1079:src/stm32f1xx_hal_spi.c ****     }
 1624              		.loc 1 1079 0
 1625 075e 127B     		ldrbne	r2, [r2, #12]	@ zero_extendqisi2	@ MEM[(volatile uint8_t *)_119 + 12B], MEM[(volatile uint8
 1626 0760 A36B     		ldr	r3, [r4, #56]	@ _118, hspi_17(D)->pRxBuffPtr
1083:src/stm32f1xx_hal_spi.c ****     {
 1627              		.loc 1 1083 0
 1628 0762 2046     		mov	r0, r4	@, hspi
1074:src/stm32f1xx_hal_spi.c ****     }
 1629              		.loc 1 1074 0
 1630 0764 0CBF     		ite	eq
 1631 0766 1A80     		strheq	r2, [r3]	@ movhi	@ _115, MEM[(uint16_t *)_113]
1079:src/stm32f1xx_hal_spi.c ****     }
 1632              		.loc 1 1079 0
 1633 0768 1A70     		strbne	r2, [r3]	@ MEM[(volatile uint8_t *)_119 + 12B], *_118
1083:src/stm32f1xx_hal_spi.c ****     {
 1634              		.loc 1 1083 0
 1635 076a 0122     		movs	r2, #1	@,
 1636 076c 0096     		str	r6, [sp]	@ tickstart,
 1637 076e 2B46     		mov	r3, r5	@, Timeout
 1638 0770 1146     		mov	r1, r2	@,
 1639 0772 FFF77AFC 		bl	SPI_WaitFlagStateUntilTimeout	@
 1640              	.LVL95:
 1641 0776 D8B1     		cbz	r0, .L199	@,
1085:src/stm32f1xx_hal_spi.c ****       errorcode = HAL_TIMEOUT;
 1642              		.loc 1 1085 0
 1643 0778 636D     		ldr	r3, [r4, #84]	@ _124, hspi_17(D)->ErrorCode
 1644 077a 43F00203 		orr	r3, r3, #2	@ _125, _124,
 1645 077e 6365     		str	r3, [r4, #84]	@ _125, hspi_17(D)->ErrorCode
 1646 0780 06E0     		b	.L220	@
 1647              	.L186:
1018:src/stm32f1xx_hal_spi.c ****         {
 1648              		.loc 1 1018 0
 1649 0782 FFF7FEFF 		bl	HAL_GetTick	@
 1650              	.LVL96:
 1651 0786 801B     		subs	r0, r0, r6	@ tmp238,, tickstart
ARM GAS  /tmp/ccdPJtdr.s 			page 103


 1652 0788 8542     		cmp	r5, r0	@ Timeout, tmp238
 1653 078a C6D8     		bhi	.L184	@,
1018:src/stm32f1xx_hal_spi.c ****         {
 1654              		.loc 1 1018 0 is_stmt 0 discriminator 3
 1655 078c 6B1C     		adds	r3, r5, #1	@, Timeout,
 1656 078e C4D0     		beq	.L184	@,
 1657              	.L220:
 1658              	.LVL97:
1086:src/stm32f1xx_hal_spi.c ****       goto error;
 1659              		.loc 1 1086 0 is_stmt 1
 1660 0790 0320     		movs	r0, #3	@ <retval>,
 1661              	.LVL98:
 1662              	.L180:
1126:src/stm32f1xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
 1663              		.loc 1 1126 0
 1664 0792 0123     		movs	r3, #1	@ tmp267,
 1665 0794 84F85130 		strb	r3, [r4, #81]	@ tmp267, hspi_17(D)->State
1127:src/stm32f1xx_hal_spi.c ****   return errorcode;
 1666              		.loc 1 1127 0
 1667 0798 0023     		movs	r3, #0	@ tmp269,
 1668 079a 84F85030 		strb	r3, [r4, #80]	@ tmp269, hspi_17(D)->Lock
1128:src/stm32f1xx_hal_spi.c **** }
 1669              		.loc 1 1128 0
 1670 079e 52E7     		b	.L179	@
 1671              	.LVL99:
 1672              	.L191:
1041:src/stm32f1xx_hal_spi.c ****         {
 1673              		.loc 1 1041 0
 1674 07a0 FFF7FEFF 		bl	HAL_GetTick	@
 1675              	.LVL100:
 1676 07a4 801B     		subs	r0, r0, r6	@ tmp249,, tickstart
 1677 07a6 8542     		cmp	r5, r0	@ Timeout, tmp249
 1678 07a8 98D8     		bhi	.L185	@,
1041:src/stm32f1xx_hal_spi.c ****         {
 1679              		.loc 1 1041 0 is_stmt 0 discriminator 3
 1680 07aa 681C     		adds	r0, r5, #1	@, Timeout,
 1681 07ac 96D0     		beq	.L185	@,
 1682 07ae EFE7     		b	.L220	@
 1683              	.L199:
1091:src/stm32f1xx_hal_spi.c ****   }
 1684              		.loc 1 1091 0 is_stmt 1
 1685 07b0 2368     		ldr	r3, [r4]	@ _127, hspi_17(D)->Instance
 1686 07b2 DB68     		ldr	r3, [r3, #12]	@ vol.3_128, _127->DR
 1687              	.L190:
1096:src/stm32f1xx_hal_spi.c ****   {
 1688              		.loc 1 1096 0
 1689 07b4 3246     		mov	r2, r6	@, tickstart
 1690 07b6 2946     		mov	r1, r5	@, Timeout
 1691 07b8 2046     		mov	r0, r4	@, hspi
 1692 07ba FFF7A9FC 		bl	SPI_EndRxTransaction	@
 1693              	.LVL101:
 1694 07be 08B1     		cbz	r0, .L200	@,
1098:src/stm32f1xx_hal_spi.c ****   }
 1695              		.loc 1 1098 0
 1696 07c0 2023     		movs	r3, #32	@ tmp263,
 1697 07c2 6365     		str	r3, [r4, #84]	@ tmp263, hspi_17(D)->ErrorCode
 1698              	.L200:
ARM GAS  /tmp/ccdPJtdr.s 			page 104


1103:src/stm32f1xx_hal_spi.c ****   {
 1699              		.loc 1 1103 0
 1700 07c4 2368     		ldr	r3, [r4]	@ _132, hspi_17(D)->Instance
 1701 07c6 9A68     		ldr	r2, [r3, #8]	@ _133, _132->SR
 1702 07c8 D206     		lsls	r2, r2, #27	@, _133,
 1703 07ca 0BD5     		bpl	.L201	@,
1108:src/stm32f1xx_hal_spi.c **** 
 1704              		.loc 1 1108 0
 1705 07cc 626D     		ldr	r2, [r4, #84]	@ _135, hspi_17(D)->ErrorCode
 1706 07ce 42F00202 		orr	r2, r2, #2	@ _136, _135,
 1707 07d2 6265     		str	r2, [r4, #84]	@ _136, hspi_17(D)->ErrorCode
1111:src/stm32f1xx_hal_spi.c ****     }
 1708              		.loc 1 1111 0
 1709 07d4 1A68     		ldr	r2, [r3]	@ _138, _132->CR1
 1710 07d6 22F40052 		bic	r2, r2, #8192	@ _139, _138,
 1711 07da 1A60     		str	r2, [r3]	@ _139, _132->CR1
 1712 07dc 1A68     		ldr	r2, [r3]	@ _141, _132->CR1
 1713 07de 42F40052 		orr	r2, r2, #8192	@ _142, _141,
 1714 07e2 1A60     		str	r2, [r3]	@ _142, _132->CR1
 1715              	.L201:
1120:src/stm32f1xx_hal_spi.c ****   {
 1716              		.loc 1 1120 0
 1717 07e4 606D     		ldr	r0, [r4, #84]	@ _144, hspi_17(D)->ErrorCode
 954:src/stm32f1xx_hal_spi.c ****     goto error;
 1718              		.loc 1 954 0
 1719 07e6 0030     		adds	r0, r0, #0	@ <retval>, _144,
 1720 07e8 18BF     		it	ne
 1721 07ea 0120     		movne	r0, #1	@ <retval>,
 1722 07ec D1E7     		b	.L180	@
 1723              	.L203:
 1724 07ee 0220     		movs	r0, #2	@ <retval>,
 1725 07f0 CFE7     		b	.L180	@
 1726              	.LVL102:
 1727              	.L202:
 947:src/stm32f1xx_hal_spi.c **** 
 1728              		.loc 1 947 0
 1729 07f2 0220     		movs	r0, #2	@ <retval>,
 1730              	.LVL103:
 1731 07f4 27E7     		b	.L179	@
 1732              		.cfi_endproc
 1733              	.LFE70:
 1734              		.size	HAL_SPI_Receive, .-HAL_SPI_Receive
 1735              		.align	1
 1736              		.global	HAL_SPI_Transmit_IT
 1737              		.syntax unified
 1738              		.thumb
 1739              		.thumb_func
 1740              		.fpu softvfp
 1741              		.type	HAL_SPI_Transmit_IT, %function
 1742              	HAL_SPI_Transmit_IT:
 1743              	.LFB72:
1370:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 1744              		.loc 1 1370 0
 1745              		.cfi_startproc
 1746              		@ args = 0, pretend = 0, frame = 0
 1747              		@ frame_needed = 0, uses_anonymous_args = 0
 1748              		@ link register save eliminated.
ARM GAS  /tmp/ccdPJtdr.s 			page 105


 1749              	.LVL104:
1370:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 1750              		.loc 1 1370 0
 1751 07f6 0346     		mov	r3, r0	@ hspi, hspi
1377:src/stm32f1xx_hal_spi.c **** 
 1752              		.loc 1 1377 0
 1753 07f8 90F85000 		ldrb	r0, [r0, #80]	@ zero_extendqisi2	@ hspi_9(D)->Lock, hspi_9(D)->Lock
 1754              	.LVL105:
 1755 07fc 0128     		cmp	r0, #1	@ hspi_9(D)->Lock,
 1756 07fe 45D0     		beq	.L228	@,
1377:src/stm32f1xx_hal_spi.c **** 
 1757              		.loc 1 1377 0 is_stmt 0 discriminator 2
 1758 0800 0120     		movs	r0, #1	@ tmp135,
 1759 0802 83F85000 		strb	r0, [r3, #80]	@ tmp135, hspi_9(D)->Lock
1379:src/stm32f1xx_hal_spi.c ****   {
 1760              		.loc 1 1379 0 is_stmt 1 discriminator 2
 1761 0806 0029     		cmp	r1, #0	@ pData
 1762 0808 36D0     		beq	.L223	@
1379:src/stm32f1xx_hal_spi.c ****   {
 1763              		.loc 1 1379 0 is_stmt 0 discriminator 1
 1764 080a 002A     		cmp	r2, #0	@ Size
 1765 080c 34D0     		beq	.L223	@
1385:src/stm32f1xx_hal_spi.c ****   {
 1766              		.loc 1 1385 0 is_stmt 1
 1767 080e 93F85100 		ldrb	r0, [r3, #81]	@ zero_extendqisi2	@ hspi_9(D)->State, hspi_9(D)->State
 1768 0812 0128     		cmp	r0, #1	@ hspi_9(D)->State,
 1769 0814 36D1     		bne	.L231	@,
1392:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 1770              		.loc 1 1392 0
 1771 0816 0320     		movs	r0, #3	@ tmp140,
 1772 0818 83F85100 		strb	r0, [r3, #81]	@ tmp140, hspi_9(D)->State
1393:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pData;
 1773              		.loc 1 1393 0
 1774 081c 0020     		movs	r0, #0	@ tmp142,
1395:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = Size;
 1775              		.loc 1 1395 0
 1776 081e 9A86     		strh	r2, [r3, #52]	@ movhi	@ Size, hspi_9(D)->TxXferSize
1393:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pData;
 1777              		.loc 1 1393 0
 1778 0820 5865     		str	r0, [r3, #84]	@ tmp142, hspi_9(D)->ErrorCode
1396:src/stm32f1xx_hal_spi.c **** 
 1779              		.loc 1 1396 0
 1780 0822 DA86     		strh	r2, [r3, #54]	@ movhi	@ Size, hspi_9(D)->TxXferCount
1405:src/stm32f1xx_hal_spi.c ****   {
 1781              		.loc 1 1405 0
 1782 0824 DA68     		ldr	r2, [r3, #12]	@ hspi_9(D)->Init.DataSize, hspi_9(D)->Init.DataSize
 1783              	.LVL106:
1394:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = Size;
 1784              		.loc 1 1394 0
 1785 0826 1963     		str	r1, [r3, #48]	@ pData, hspi_9(D)->pTxBuffPtr
1399:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = 0U;
 1786              		.loc 1 1399 0
 1787 0828 9863     		str	r0, [r3, #56]	@ tmp142, hspi_9(D)->pRxBuffPtr
1400:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = 0U;
 1788              		.loc 1 1400 0
 1789 082a 9887     		strh	r0, [r3, #60]	@ movhi	@ tmp142, hspi_9(D)->RxXferSize
1401:src/stm32f1xx_hal_spi.c ****   hspi->RxISR       = NULL;
ARM GAS  /tmp/ccdPJtdr.s 			page 106


 1790              		.loc 1 1401 0
 1791 082c D887     		strh	r0, [r3, #62]	@ movhi	@ tmp142, hspi_9(D)->RxXferCount
1402:src/stm32f1xx_hal_spi.c **** 
 1792              		.loc 1 1402 0
 1793 082e 1864     		str	r0, [r3, #64]	@ tmp142, hspi_9(D)->RxISR
1405:src/stm32f1xx_hal_spi.c ****   {
 1794              		.loc 1 1405 0
 1795 0830 32B3     		cbz	r2, .L224	@ hspi_9(D)->Init.DataSize,
1407:src/stm32f1xx_hal_spi.c ****   }
 1796              		.loc 1 1407 0
 1797 0832 174A     		ldr	r2, .L234	@ tmp152,
 1798              	.L233:
1411:src/stm32f1xx_hal_spi.c ****   }
 1799              		.loc 1 1411 0
 1800 0834 5A64     		str	r2, [r3, #68]	@ tmp153, hspi_9(D)->TxISR
1415:src/stm32f1xx_hal_spi.c ****   {
 1801              		.loc 1 1415 0
 1802 0836 9A68     		ldr	r2, [r3, #8]	@ hspi_9(D)->Init.Direction, hspi_9(D)->Init.Direction
 1803 0838 B2F5004F 		cmp	r2, #32768	@ hspi_9(D)->Init.Direction,
 1804 083c 1A68     		ldr	r2, [r3]	@ _28, hspi_9(D)->Instance
1417:src/stm32f1xx_hal_spi.c ****   }
 1805              		.loc 1 1417 0
 1806 083e 02BF     		ittt	eq
 1807 0840 1168     		ldreq	r1, [r2]	@ _29, _28->CR1
 1808              	.LVL107:
 1809 0842 41F48041 		orreq	r1, r1, #16384	@ _30, _29,
 1810 0846 1160     		streq	r1, [r2]	@ _30, _28->CR1
1422:src/stm32f1xx_hal_spi.c ****   {
 1811              		.loc 1 1422 0
 1812 0848 996A     		ldr	r1, [r3, #40]	@ hspi_9(D)->Init.CRCCalculation, hspi_9(D)->Init.CRCCalculation
 1813 084a B1F5005F 		cmp	r1, #8192	@ hspi_9(D)->Init.CRCCalculation,
 1814 084e 07D1     		bne	.L227	@,
1424:src/stm32f1xx_hal_spi.c ****   }
 1815              		.loc 1 1424 0
 1816 0850 1168     		ldr	r1, [r2]	@ _34, _33->CR1
 1817 0852 21F40051 		bic	r1, r1, #8192	@ _35, _34,
 1818 0856 1160     		str	r1, [r2]	@ _35, _33->CR1
 1819 0858 1168     		ldr	r1, [r2]	@ _37, _33->CR1
 1820 085a 41F40051 		orr	r1, r1, #8192	@ _38, _37,
 1821 085e 1160     		str	r1, [r2]	@ _38, _33->CR1
 1822              	.L227:
1429:src/stm32f1xx_hal_spi.c **** 
 1823              		.loc 1 1429 0
 1824 0860 5168     		ldr	r1, [r2, #4]	@ _41, _40->CR2
 1825 0862 41F0A001 		orr	r1, r1, #160	@ _42, _41,
 1826 0866 5160     		str	r1, [r2, #4]	@ _42, _40->CR2
1433:src/stm32f1xx_hal_spi.c ****   {
 1827              		.loc 1 1433 0
 1828 0868 1068     		ldr	r0, [r2]	@ _44, _40->CR1
 1829 086a 10F04000 		ands	r0, r0, #64	@ tmp156, _44,
 1830 086e 0BD1     		bne	.L232	@,
1436:src/stm32f1xx_hal_spi.c ****   }
 1831              		.loc 1 1436 0
 1832 0870 1168     		ldr	r1, [r2]	@ _46, _40->CR1
 1833 0872 41F04001 		orr	r1, r1, #64	@ _47, _46,
 1834 0876 1160     		str	r1, [r2]	@ _47, _40->CR1
 1835              	.LVL108:
ARM GAS  /tmp/ccdPJtdr.s 			page 107


 1836              	.L223:
1440:src/stm32f1xx_hal_spi.c ****   return errorcode;
 1837              		.loc 1 1440 0
 1838 0878 0022     		movs	r2, #0	@ tmp157,
 1839 087a 83F85020 		strb	r2, [r3, #80]	@ tmp157, hspi_9(D)->Lock
1441:src/stm32f1xx_hal_spi.c **** }
 1840              		.loc 1 1441 0
 1841 087e 7047     		bx	lr	@
 1842              	.LVL109:
 1843              	.L224:
1411:src/stm32f1xx_hal_spi.c ****   }
 1844              		.loc 1 1411 0
 1845 0880 044A     		ldr	r2, .L234+4	@ tmp153,
 1846 0882 D7E7     		b	.L233	@
 1847              	.LVL110:
 1848              	.L231:
1387:src/stm32f1xx_hal_spi.c ****     goto error;
 1849              		.loc 1 1387 0
 1850 0884 0220     		movs	r0, #2	@ <retval>,
 1851 0886 F7E7     		b	.L223	@
 1852              	.LVL111:
 1853              	.L232:
1371:src/stm32f1xx_hal_spi.c **** 
 1854              		.loc 1 1371 0
 1855 0888 0020     		movs	r0, #0	@ <retval>,
 1856 088a F5E7     		b	.L223	@
 1857              	.LVL112:
 1858              	.L228:
1377:src/stm32f1xx_hal_spi.c **** 
 1859              		.loc 1 1377 0
 1860 088c 0220     		movs	r0, #2	@ <retval>,
1442:src/stm32f1xx_hal_spi.c **** 
 1861              		.loc 1 1442 0
 1862 088e 7047     		bx	lr	@
 1863              	.L235:
 1864              		.align	2
 1865              	.L234:
 1866 0890 00000000 		.word	SPI_TxISR_16BIT
 1867 0894 00000000 		.word	SPI_TxISR_8BIT
 1868              		.cfi_endproc
 1869              	.LFE72:
 1870              		.size	HAL_SPI_Transmit_IT, .-HAL_SPI_Transmit_IT
 1871              		.align	1
 1872              		.global	HAL_SPI_TransmitReceive_IT
 1873              		.syntax unified
 1874              		.thumb
 1875              		.thumb_func
 1876              		.fpu softvfp
 1877              		.type	HAL_SPI_TransmitReceive_IT, %function
 1878              	HAL_SPI_TransmitReceive_IT:
 1879              	.LFB74:
1545:src/stm32f1xx_hal_spi.c ****   uint32_t             tmp_mode;
 1880              		.loc 1 1545 0
 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 0
 1883              		@ frame_needed = 0, uses_anonymous_args = 0
 1884              	.LVL113:
ARM GAS  /tmp/ccdPJtdr.s 			page 108


 1885 0898 30B5     		push	{r4, r5, lr}	@
 1886              	.LCFI21:
 1887              		.cfi_def_cfa_offset 12
 1888              		.cfi_offset 4, -12
 1889              		.cfi_offset 5, -8
 1890              		.cfi_offset 14, -4
1545:src/stm32f1xx_hal_spi.c ****   uint32_t             tmp_mode;
 1891              		.loc 1 1545 0
 1892 089a 0446     		mov	r4, r0	@ hspi, hspi
1554:src/stm32f1xx_hal_spi.c **** 
 1893              		.loc 1 1554 0
 1894 089c 90F85000 		ldrb	r0, [r0, #80]	@ zero_extendqisi2	@ hspi_3(D)->Lock, hspi_3(D)->Lock
 1895              	.LVL114:
 1896 08a0 0128     		cmp	r0, #1	@ hspi_3(D)->Lock,
 1897 08a2 52D0     		beq	.L244	@,
 1898              	.LVL115:
 1899              	.LBB39:
 1900              	.LBB40:
 1901 08a4 0120     		movs	r0, #1	@ tmp135,
 1902 08a6 84F85000 		strb	r0, [r4, #80]	@ tmp135, hspi_3(D)->Lock
1557:src/stm32f1xx_hal_spi.c ****   tmp_mode            = hspi->Init.Mode;
 1903              		.loc 1 1557 0
 1904 08aa 94F85100 		ldrb	r0, [r4, #81]	@ zero_extendqisi2	@ hspi_3(D)->State, hspi_3(D)->State
 1905 08ae C0B2     		uxtb	r0, r0	@ tmp_state, hspi_3(D)->State
 1906              	.LVL116:
1560:src/stm32f1xx_hal_spi.c ****         ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_st
 1907              		.loc 1 1560 0
 1908 08b0 0128     		cmp	r0, #1	@ tmp_state,
 1909 08b2 08D0     		beq	.L238	@,
 1910 08b4 6568     		ldr	r5, [r4, #4]	@ hspi_3(D)->Init.Mode, hspi_3(D)->Init.Mode
 1911 08b6 B5F5827F 		cmp	r5, #260	@ hspi_3(D)->Init.Mode,
 1912 08ba 40D1     		bne	.L247	@,
1561:src/stm32f1xx_hal_spi.c ****   {
 1913              		.loc 1 1561 0
 1914 08bc A568     		ldr	r5, [r4, #8]	@ hspi_3(D)->Init.Direction, hspi_3(D)->Init.Direction
 1915 08be 002D     		cmp	r5, #0	@ hspi_3(D)->Init.Direction
 1916 08c0 3DD1     		bne	.L247	@
 1917 08c2 0428     		cmp	r0, #4	@ tmp_state,
 1918 08c4 3BD1     		bne	.L247	@,
 1919              	.L238:
1567:src/stm32f1xx_hal_spi.c ****   {
 1920              		.loc 1 1567 0
 1921 08c6 0029     		cmp	r1, #0	@ pTxData
 1922 08c8 3BD0     		beq	.L250	@
 1923 08ca 002A     		cmp	r2, #0	@ pRxData
 1924 08cc 39D0     		beq	.L250	@
 1925 08ce 002B     		cmp	r3, #0	@ Size
 1926 08d0 37D0     		beq	.L250	@
1574:src/stm32f1xx_hal_spi.c ****   {
 1927              		.loc 1 1574 0
 1928 08d2 94F85100 		ldrb	r0, [r4, #81]	@ zero_extendqisi2	@ hspi_3(D)->State, hspi_3(D)->State
 1929              	.LVL117:
1582:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = Size;
 1930              		.loc 1 1582 0
 1931 08d6 A386     		strh	r3, [r4, #52]	@ movhi	@ Size, hspi_3(D)->TxXferSize
1574:src/stm32f1xx_hal_spi.c ****   {
 1932              		.loc 1 1574 0
ARM GAS  /tmp/ccdPJtdr.s 			page 109


 1933 08d8 0428     		cmp	r0, #4	@ hspi_3(D)->State,
1576:src/stm32f1xx_hal_spi.c ****   }
 1934              		.loc 1 1576 0
 1935 08da 1CBF     		itt	ne
 1936 08dc 0520     		movne	r0, #5	@ tmp145,
 1937 08de 84F85100 		strbne	r0, [r4, #81]	@ tmp145, hspi_3(D)->State
1580:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 1938              		.loc 1 1580 0
 1939 08e2 0020     		movs	r0, #0	@ tmp147,
1585:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = Size;
 1940              		.loc 1 1585 0
 1941 08e4 A387     		strh	r3, [r4, #60]	@ movhi	@ Size, hspi_3(D)->RxXferSize
1580:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 1942              		.loc 1 1580 0
 1943 08e6 6065     		str	r0, [r4, #84]	@ tmp147, hspi_3(D)->ErrorCode
1583:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 1944              		.loc 1 1583 0
 1945 08e8 E386     		strh	r3, [r4, #54]	@ movhi	@ Size, hspi_3(D)->TxXferCount
1586:src/stm32f1xx_hal_spi.c **** 
 1946              		.loc 1 1586 0
 1947 08ea E387     		strh	r3, [r4, #62]	@ movhi	@ Size, hspi_3(D)->RxXferCount
1589:src/stm32f1xx_hal_spi.c ****   {
 1948              		.loc 1 1589 0
 1949 08ec E368     		ldr	r3, [r4, #12]	@ hspi_3(D)->Init.DataSize, hspi_3(D)->Init.DataSize
 1950              	.LVL118:
1581:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = Size;
 1951              		.loc 1 1581 0
 1952 08ee 2163     		str	r1, [r4, #48]	@ pTxData, hspi_3(D)->pTxBuffPtr
1584:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = Size;
 1953              		.loc 1 1584 0
 1954 08f0 A263     		str	r2, [r4, #56]	@ pRxData, hspi_3(D)->pRxBuffPtr
1589:src/stm32f1xx_hal_spi.c ****   {
 1955              		.loc 1 1589 0
 1956 08f2 03B3     		cbz	r3, .L241	@ hspi_3(D)->Init.DataSize,
1591:src/stm32f1xx_hal_spi.c ****     hspi->TxISR     = SPI_2linesTxISR_16BIT;
 1957              		.loc 1 1591 0
 1958 08f4 164B     		ldr	r3, .L259	@ tmp153,
 1959 08f6 2364     		str	r3, [r4, #64]	@ tmp153, hspi_3(D)->RxISR
1592:src/stm32f1xx_hal_spi.c ****   }
 1960              		.loc 1 1592 0
 1961 08f8 164B     		ldr	r3, .L259+4	@ tmp154,
 1962              	.L258:
1597:src/stm32f1xx_hal_spi.c ****   }
 1963              		.loc 1 1597 0
 1964 08fa 6364     		str	r3, [r4, #68]	@ tmp156, hspi_3(D)->TxISR
1602:src/stm32f1xx_hal_spi.c ****   {
 1965              		.loc 1 1602 0
 1966 08fc A36A     		ldr	r3, [r4, #40]	@ hspi_3(D)->Init.CRCCalculation, hspi_3(D)->Init.CRCCalculation
 1967 08fe B3F5005F 		cmp	r3, #8192	@ hspi_3(D)->Init.CRCCalculation,
 1968 0902 2368     		ldr	r3, [r4]	@ _22, hspi_3(D)->Instance
 1969 0904 07D1     		bne	.L243	@,
1604:src/stm32f1xx_hal_spi.c ****   }
 1970              		.loc 1 1604 0
 1971 0906 1A68     		ldr	r2, [r3]	@ _18, _17->CR1
 1972              	.LVL119:
 1973 0908 22F40052 		bic	r2, r2, #8192	@ _19, _18,
 1974 090c 1A60     		str	r2, [r3]	@ _19, _17->CR1
ARM GAS  /tmp/ccdPJtdr.s 			page 110


 1975 090e 1A68     		ldr	r2, [r3]	@ _20, _17->CR1
 1976 0910 42F40052 		orr	r2, r2, #8192	@ _21, _20,
 1977 0914 1A60     		str	r2, [r3]	@ _21, _17->CR1
 1978              	.L243:
1609:src/stm32f1xx_hal_spi.c **** 
 1979              		.loc 1 1609 0
 1980 0916 5A68     		ldr	r2, [r3, #4]	@ _23, _22->CR2
 1981 0918 42F0E002 		orr	r2, r2, #224	@ _24, _23,
 1982 091c 5A60     		str	r2, [r3, #4]	@ _24, _22->CR2
1612:src/stm32f1xx_hal_spi.c ****   {
 1983              		.loc 1 1612 0
 1984 091e 1868     		ldr	r0, [r3]	@ _25, _22->CR1
 1985 0920 10F04000 		ands	r0, r0, #64	@ tmp158, _25,
 1986 0924 0FD1     		bne	.L251	@,
1615:src/stm32f1xx_hal_spi.c ****   }
 1987              		.loc 1 1615 0
 1988 0926 1A68     		ldr	r2, [r3]	@ _27, _22->CR1
 1989 0928 42F04002 		orr	r2, r2, #64	@ _28, _27,
 1990 092c 1A60     		str	r2, [r3]	@ _28, _22->CR1
 1991              	.LVL120:
 1992              	.L239:
1620:src/stm32f1xx_hal_spi.c ****   return errorcode;
 1993              		.loc 1 1620 0
 1994 092e 0023     		movs	r3, #0	@ tmp159,
 1995 0930 84F85030 		strb	r3, [r4, #80]	@ tmp159, hspi_3(D)->Lock
 1996              	.LVL121:
 1997 0934 30BD     		pop	{r4, r5, pc}	@
 1998              	.LVL122:
 1999              	.L241:
1596:src/stm32f1xx_hal_spi.c ****     hspi->TxISR     = SPI_2linesTxISR_8BIT;
 2000              		.loc 1 1596 0
 2001 0936 084B     		ldr	r3, .L259+8	@ tmp155,
 2002 0938 2364     		str	r3, [r4, #64]	@ tmp155, hspi_3(D)->RxISR
1597:src/stm32f1xx_hal_spi.c ****   }
 2003              		.loc 1 1597 0
 2004 093a 084B     		ldr	r3, .L259+12	@ tmp156,
 2005 093c DDE7     		b	.L258	@
 2006              	.LVL123:
 2007              	.L247:
1563:src/stm32f1xx_hal_spi.c ****     goto error;
 2008              		.loc 1 1563 0
 2009 093e 0220     		movs	r0, #2	@ <retval>,
 2010              	.LVL124:
 2011 0940 F5E7     		b	.L239	@
 2012              	.LVL125:
 2013              	.L250:
1569:src/stm32f1xx_hal_spi.c ****     goto error;
 2014              		.loc 1 1569 0
 2015 0942 0120     		movs	r0, #1	@ <retval>,
 2016              	.LVL126:
 2017 0944 F3E7     		b	.L239	@
 2018              	.LVL127:
 2019              	.L251:
1548:src/stm32f1xx_hal_spi.c **** 
 2020              		.loc 1 1548 0
 2021 0946 0020     		movs	r0, #0	@ <retval>,
 2022 0948 F1E7     		b	.L239	@
ARM GAS  /tmp/ccdPJtdr.s 			page 111


 2023              	.LVL128:
 2024              	.L244:
 2025              	.LBE40:
 2026              	.LBE39:
1554:src/stm32f1xx_hal_spi.c **** 
 2027              		.loc 1 1554 0
 2028 094a 0220     		movs	r0, #2	@ <retval>,
1622:src/stm32f1xx_hal_spi.c **** 
 2029              		.loc 1 1622 0
 2030 094c 30BD     		pop	{r4, r5, pc}	@
 2031              	.LVL129:
 2032              	.L260:
 2033 094e 00BF     		.align	2
 2034              	.L259:
 2035 0950 00000000 		.word	SPI_2linesRxISR_16BIT
 2036 0954 00000000 		.word	SPI_2linesTxISR_16BIT
 2037 0958 00000000 		.word	SPI_2linesRxISR_8BIT
 2038 095c 00000000 		.word	SPI_2linesTxISR_8BIT
 2039              		.cfi_endproc
 2040              	.LFE74:
 2041              		.size	HAL_SPI_TransmitReceive_IT, .-HAL_SPI_TransmitReceive_IT
 2042              		.align	1
 2043              		.global	HAL_SPI_Receive_IT
 2044              		.syntax unified
 2045              		.thumb
 2046              		.thumb_func
 2047              		.fpu softvfp
 2048              		.type	HAL_SPI_Receive_IT, %function
 2049              	HAL_SPI_Receive_IT:
 2050              	.LFB73:
1453:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 2051              		.loc 1 1453 0
 2052              		.cfi_startproc
 2053              		@ args = 0, pretend = 0, frame = 0
 2054              		@ frame_needed = 0, uses_anonymous_args = 0
 2055              		@ link register save eliminated.
 2056              	.LVL130:
 2057 0960 1346     		mov	r3, r2	@ Size, Size
1456:src/stm32f1xx_hal_spi.c ****   {
 2058              		.loc 1 1456 0
 2059 0962 8268     		ldr	r2, [r0, #8]	@ _10, hspi_9(D)->Init.Direction
 2060              	.LVL131:
1453:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 2061              		.loc 1 1453 0
 2062 0964 70B4     		push	{r4, r5, r6}	@
 2063              	.LCFI22:
 2064              		.cfi_def_cfa_offset 12
 2065              		.cfi_offset 4, -12
 2066              		.cfi_offset 5, -8
 2067              		.cfi_offset 6, -4
1453:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 2068              		.loc 1 1453 0
 2069 0966 0446     		mov	r4, r0	@ hspi, hspi
 2070 0968 0D46     		mov	r5, r1	@ pData, pData
1456:src/stm32f1xx_hal_spi.c ****   {
 2071              		.loc 1 1456 0
 2072 096a 52B9     		cbnz	r2, .L262	@ _10,
ARM GAS  /tmp/ccdPJtdr.s 			page 112


1456:src/stm32f1xx_hal_spi.c ****   {
 2073              		.loc 1 1456 0 is_stmt 0 discriminator 1
 2074 096c 4668     		ldr	r6, [r0, #4]	@ hspi_9(D)->Init.Mode, hspi_9(D)->Init.Mode
 2075 096e B6F5827F 		cmp	r6, #260	@ hspi_9(D)->Init.Mode,
 2076 0972 06D1     		bne	.L262	@,
1458:src/stm32f1xx_hal_spi.c ****     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line 
 2077              		.loc 1 1458 0 is_stmt 1
 2078 0974 0422     		movs	r2, #4	@ tmp136,
1533:src/stm32f1xx_hal_spi.c **** 
 2079              		.loc 1 1533 0
 2080 0976 70BC     		pop	{r4, r5, r6}	@
 2081              	.LCFI23:
 2082              		.cfi_remember_state
 2083              		.cfi_restore 6
 2084              		.cfi_restore 5
 2085              		.cfi_restore 4
 2086              		.cfi_def_cfa_offset 0
1458:src/stm32f1xx_hal_spi.c ****     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line 
 2087              		.loc 1 1458 0
 2088 0978 80F85120 		strb	r2, [r0, #81]	@ tmp136, hspi_9(D)->State
1460:src/stm32f1xx_hal_spi.c ****   }
 2089              		.loc 1 1460 0
 2090 097c 0A46     		mov	r2, r1	@, pData
 2091 097e FFF7FEBF 		b	HAL_SPI_TransmitReceive_IT	@
 2092              	.LVL132:
 2093              	.L262:
 2094              	.LCFI24:
 2095              		.cfi_restore_state
1464:src/stm32f1xx_hal_spi.c **** 
 2096              		.loc 1 1464 0
 2097 0982 94F85010 		ldrb	r1, [r4, #80]	@ zero_extendqisi2	@ hspi_9(D)->Lock, hspi_9(D)->Lock
 2098              	.LVL133:
 2099 0986 0129     		cmp	r1, #1	@ hspi_9(D)->Lock,
 2100 0988 46D0     		beq	.L269	@,
1464:src/stm32f1xx_hal_spi.c **** 
 2101              		.loc 1 1464 0 is_stmt 0 discriminator 2
 2102 098a 0121     		movs	r1, #1	@ tmp140,
1466:src/stm32f1xx_hal_spi.c ****   {
 2103              		.loc 1 1466 0 is_stmt 1 discriminator 2
 2104 098c 94F85100 		ldrb	r0, [r4, #81]	@ zero_extendqisi2	@ hspi_9(D)->State, hspi_9(D)->State
 2105              	.LVL134:
1464:src/stm32f1xx_hal_spi.c **** 
 2106              		.loc 1 1464 0 discriminator 2
 2107 0990 84F85010 		strb	r1, [r4, #80]	@ tmp140, hspi_9(D)->Lock
1466:src/stm32f1xx_hal_spi.c ****   {
 2108              		.loc 1 1466 0 discriminator 2
 2109 0994 C0B2     		uxtb	r0, r0	@ _19, hspi_9(D)->State
 2110 0996 8842     		cmp	r0, r1	@ _19,
 2111 0998 3AD1     		bne	.L270	@,
1472:src/stm32f1xx_hal_spi.c ****   {
 2112              		.loc 1 1472 0
 2113 099a 002D     		cmp	r5, #0	@ pData
 2114 099c 31D0     		beq	.L264	@
1472:src/stm32f1xx_hal_spi.c ****   {
 2115              		.loc 1 1472 0 is_stmt 0 discriminator 1
 2116 099e 002B     		cmp	r3, #0	@ Size
 2117 09a0 2FD0     		beq	.L264	@
ARM GAS  /tmp/ccdPJtdr.s 			page 113


1479:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 2118              		.loc 1 1479 0 is_stmt 1
 2119 09a2 0421     		movs	r1, #4	@ tmp145,
 2120 09a4 84F85110 		strb	r1, [r4, #81]	@ tmp145, hspi_9(D)->State
1480:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pData;
 2121              		.loc 1 1480 0
 2122 09a8 0021     		movs	r1, #0	@ tmp147,
1482:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = Size;
 2123              		.loc 1 1482 0
 2124 09aa A387     		strh	r3, [r4, #60]	@ movhi	@ Size, hspi_9(D)->RxXferSize
1480:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pData;
 2125              		.loc 1 1480 0
 2126 09ac 6165     		str	r1, [r4, #84]	@ tmp147, hspi_9(D)->ErrorCode
1483:src/stm32f1xx_hal_spi.c **** 
 2127              		.loc 1 1483 0
 2128 09ae E387     		strh	r3, [r4, #62]	@ movhi	@ Size, hspi_9(D)->RxXferCount
1492:src/stm32f1xx_hal_spi.c ****   {
 2129              		.loc 1 1492 0
 2130 09b0 E368     		ldr	r3, [r4, #12]	@ hspi_9(D)->Init.DataSize, hspi_9(D)->Init.DataSize
1481:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = Size;
 2131              		.loc 1 1481 0
 2132 09b2 A563     		str	r5, [r4, #56]	@ pData, hspi_9(D)->pRxBuffPtr
1486:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = 0U;
 2133              		.loc 1 1486 0
 2134 09b4 2163     		str	r1, [r4, #48]	@ tmp147, hspi_9(D)->pTxBuffPtr
1487:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = 0U;
 2135              		.loc 1 1487 0
 2136 09b6 A186     		strh	r1, [r4, #52]	@ movhi	@ tmp147, hspi_9(D)->TxXferSize
1488:src/stm32f1xx_hal_spi.c ****   hspi->TxISR       = NULL;
 2137              		.loc 1 1488 0
 2138 09b8 E186     		strh	r1, [r4, #54]	@ movhi	@ tmp147, hspi_9(D)->TxXferCount
1489:src/stm32f1xx_hal_spi.c **** 
 2139              		.loc 1 1489 0
 2140 09ba 6164     		str	r1, [r4, #68]	@ tmp147, hspi_9(D)->TxISR
1492:src/stm32f1xx_hal_spi.c ****   {
 2141              		.loc 1 1492 0
 2142 09bc 33B3     		cbz	r3, .L265	@ hspi_9(D)->Init.DataSize,
1494:src/stm32f1xx_hal_spi.c ****   }
 2143              		.loc 1 1494 0
 2144 09be 174B     		ldr	r3, .L275	@ tmp157,
 2145              	.L274:
1498:src/stm32f1xx_hal_spi.c ****   }
 2146              		.loc 1 1498 0
 2147 09c0 2364     		str	r3, [r4, #64]	@ tmp158, hspi_9(D)->RxISR
 2148 09c2 2368     		ldr	r3, [r4]	@ _32, hspi_9(D)->Instance
1502:src/stm32f1xx_hal_spi.c ****   {
 2149              		.loc 1 1502 0
 2150 09c4 B2F5004F 		cmp	r2, #32768	@ _10,
1504:src/stm32f1xx_hal_spi.c ****   }
 2151              		.loc 1 1504 0
 2152 09c8 02BF     		ittt	eq
 2153 09ca 1A68     		ldreq	r2, [r3]	@ _33, _32->CR1
 2154 09cc 22F48042 		biceq	r2, r2, #16384	@ _34, _33,
 2155 09d0 1A60     		streq	r2, [r3]	@ _34, _32->CR1
1509:src/stm32f1xx_hal_spi.c ****   {
 2156              		.loc 1 1509 0
 2157 09d2 A26A     		ldr	r2, [r4, #40]	@ hspi_9(D)->Init.CRCCalculation, hspi_9(D)->Init.CRCCalculation
ARM GAS  /tmp/ccdPJtdr.s 			page 114


 2158 09d4 B2F5005F 		cmp	r2, #8192	@ hspi_9(D)->Init.CRCCalculation,
 2159 09d8 07D1     		bne	.L268	@,
1511:src/stm32f1xx_hal_spi.c ****   }
 2160              		.loc 1 1511 0
 2161 09da 1A68     		ldr	r2, [r3]	@ _38, _37->CR1
 2162 09dc 22F40052 		bic	r2, r2, #8192	@ _39, _38,
 2163 09e0 1A60     		str	r2, [r3]	@ _39, _37->CR1
 2164 09e2 1A68     		ldr	r2, [r3]	@ _41, _37->CR1
 2165 09e4 42F40052 		orr	r2, r2, #8192	@ _42, _41,
 2166 09e8 1A60     		str	r2, [r3]	@ _42, _37->CR1
 2167              	.L268:
1516:src/stm32f1xx_hal_spi.c **** 
 2168              		.loc 1 1516 0
 2169 09ea 5A68     		ldr	r2, [r3, #4]	@ _45, _44->CR2
 2170 09ec 42F06002 		orr	r2, r2, #96	@ _46, _45,
 2171 09f0 5A60     		str	r2, [r3, #4]	@ _46, _44->CR2
1523:src/stm32f1xx_hal_spi.c ****   {
 2172              		.loc 1 1523 0
 2173 09f2 1868     		ldr	r0, [r3]	@ _48, _44->CR1
 2174 09f4 10F04000 		ands	r0, r0, #64	@ tmp160, _48,
 2175 09f8 0CD1     		bne	.L273	@,
1526:src/stm32f1xx_hal_spi.c ****   }
 2176              		.loc 1 1526 0
 2177 09fa 1A68     		ldr	r2, [r3]	@ _50, _44->CR1
 2178 09fc 42F04002 		orr	r2, r2, #64	@ _51, _50,
 2179 0a00 1A60     		str	r2, [r3]	@ _51, _44->CR1
 2180              	.L264:
 2181              	.LVL135:
1531:src/stm32f1xx_hal_spi.c ****   return errorcode;
 2182              		.loc 1 1531 0
 2183 0a02 0023     		movs	r3, #0	@ tmp161,
 2184 0a04 84F85030 		strb	r3, [r4, #80]	@ tmp161, hspi_9(D)->Lock
 2185              	.LVL136:
 2186              	.L263:
1533:src/stm32f1xx_hal_spi.c **** 
 2187              		.loc 1 1533 0
 2188 0a08 70BC     		pop	{r4, r5, r6}	@
 2189              	.LCFI25:
 2190              		.cfi_remember_state
 2191              		.cfi_restore 6
 2192              		.cfi_restore 5
 2193              		.cfi_restore 4
 2194              		.cfi_def_cfa_offset 0
 2195              	.LVL137:
 2196 0a0a 7047     		bx	lr	@
 2197              	.LVL138:
 2198              	.L265:
 2199              	.LCFI26:
 2200              		.cfi_restore_state
1498:src/stm32f1xx_hal_spi.c ****   }
 2201              		.loc 1 1498 0
 2202 0a0c 044B     		ldr	r3, .L275+4	@ tmp158,
 2203 0a0e D7E7     		b	.L274	@
 2204              	.L270:
1468:src/stm32f1xx_hal_spi.c ****     goto error;
 2205              		.loc 1 1468 0
 2206 0a10 0220     		movs	r0, #2	@ <retval>,
ARM GAS  /tmp/ccdPJtdr.s 			page 115


 2207 0a12 F6E7     		b	.L264	@
 2208              	.L273:
1454:src/stm32f1xx_hal_spi.c **** 
 2209              		.loc 1 1454 0
 2210 0a14 0020     		movs	r0, #0	@ <retval>,
 2211 0a16 F4E7     		b	.L264	@
 2212              	.LVL139:
 2213              	.L269:
1464:src/stm32f1xx_hal_spi.c **** 
 2214              		.loc 1 1464 0
 2215 0a18 0220     		movs	r0, #2	@ <retval>,
 2216              	.LVL140:
 2217 0a1a F5E7     		b	.L263	@
 2218              	.L276:
 2219              		.align	2
 2220              	.L275:
 2221 0a1c 00000000 		.word	SPI_RxISR_16BIT
 2222 0a20 00000000 		.word	SPI_RxISR_8BIT
 2223              		.cfi_endproc
 2224              	.LFE73:
 2225              		.size	HAL_SPI_Receive_IT, .-HAL_SPI_Receive_IT
 2226              		.align	1
 2227              		.global	HAL_SPI_Transmit_DMA
 2228              		.syntax unified
 2229              		.thumb
 2230              		.thumb_func
 2231              		.fpu softvfp
 2232              		.type	HAL_SPI_Transmit_DMA, %function
 2233              	HAL_SPI_Transmit_DMA:
 2234              	.LFB75:
1633:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 2235              		.loc 1 1633 0
 2236              		.cfi_startproc
 2237              		@ args = 0, pretend = 0, frame = 0
 2238              		@ frame_needed = 0, uses_anonymous_args = 0
 2239              	.LVL141:
1643:src/stm32f1xx_hal_spi.c **** 
 2240              		.loc 1 1643 0
 2241 0a24 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2	@ hspi_9(D)->Lock, hspi_9(D)->Lock
1633:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 2242              		.loc 1 1633 0
 2243 0a28 10B5     		push	{r4, lr}	@
 2244              	.LCFI27:
 2245              		.cfi_def_cfa_offset 8
 2246              		.cfi_offset 4, -8
 2247              		.cfi_offset 14, -4
1643:src/stm32f1xx_hal_spi.c **** 
 2248              		.loc 1 1643 0
 2249 0a2a 012B     		cmp	r3, #1	@ hspi_9(D)->Lock,
1633:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 2250              		.loc 1 1633 0
 2251 0a2c 0446     		mov	r4, r0	@ hspi, hspi
1643:src/stm32f1xx_hal_spi.c **** 
 2252              		.loc 1 1643 0
 2253 0a2e 5BD0     		beq	.L284	@,
1643:src/stm32f1xx_hal_spi.c **** 
 2254              		.loc 1 1643 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/ccdPJtdr.s 			page 116


 2255 0a30 0123     		movs	r3, #1	@ tmp145,
 2256 0a32 80F85030 		strb	r3, [r0, #80]	@ tmp145, hspi_9(D)->Lock
1645:src/stm32f1xx_hal_spi.c ****   {
 2257              		.loc 1 1645 0 is_stmt 1 discriminator 2
 2258 0a36 90F85100 		ldrb	r0, [r0, #81]	@ zero_extendqisi2	@ hspi_9(D)->State, hspi_9(D)->State
 2259              	.LVL142:
 2260 0a3a C0B2     		uxtb	r0, r0	@ _12, hspi_9(D)->State
 2261 0a3c 9842     		cmp	r0, r3	@ _12,
 2262 0a3e 51D1     		bne	.L285	@,
1651:src/stm32f1xx_hal_spi.c ****   {
 2263              		.loc 1 1651 0
 2264 0a40 0029     		cmp	r1, #0	@ pData
 2265 0a42 3AD0     		beq	.L279	@
1651:src/stm32f1xx_hal_spi.c ****   {
 2266              		.loc 1 1651 0 is_stmt 0 discriminator 1
 2267 0a44 002A     		cmp	r2, #0	@ Size
 2268 0a46 38D0     		beq	.L279	@
1658:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 2269              		.loc 1 1658 0 is_stmt 1
 2270 0a48 0323     		movs	r3, #3	@ tmp150,
 2271 0a4a 84F85130 		strb	r3, [r4, #81]	@ tmp150, hspi_9(D)->State
1659:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pData;
 2272              		.loc 1 1659 0
 2273 0a4e 0023     		movs	r3, #0	@ tmp152,
 2274 0a50 6365     		str	r3, [r4, #84]	@ tmp152, hspi_9(D)->ErrorCode
1665:src/stm32f1xx_hal_spi.c ****   hspi->TxISR       = NULL;
 2275              		.loc 1 1665 0
 2276 0a52 A363     		str	r3, [r4, #56]	@ tmp152, hspi_9(D)->pRxBuffPtr
1662:src/stm32f1xx_hal_spi.c **** 
 2277              		.loc 1 1662 0
 2278 0a54 E286     		strh	r2, [r4, #54]	@ movhi	@ Size, hspi_9(D)->TxXferCount
1666:src/stm32f1xx_hal_spi.c ****   hspi->RxISR       = NULL;
 2279              		.loc 1 1666 0
 2280 0a56 6364     		str	r3, [r4, #68]	@ tmp152, hspi_9(D)->TxISR
1669:src/stm32f1xx_hal_spi.c **** 
 2281              		.loc 1 1669 0
 2282 0a58 E387     		strh	r3, [r4, #62]	@ movhi	@ tmp152, hspi_9(D)->RxXferCount
1667:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = 0U;
 2283              		.loc 1 1667 0
 2284 0a5a 2364     		str	r3, [r4, #64]	@ tmp152, hspi_9(D)->RxISR
1668:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = 0U;
 2285              		.loc 1 1668 0
 2286 0a5c A387     		strh	r3, [r4, #60]	@ movhi	@ tmp152, hspi_9(D)->RxXferSize
1672:src/stm32f1xx_hal_spi.c ****   {
 2287              		.loc 1 1672 0
 2288 0a5e A368     		ldr	r3, [r4, #8]	@ hspi_9(D)->Init.Direction, hspi_9(D)->Init.Direction
1661:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = Size;
 2289              		.loc 1 1661 0
 2290 0a60 A286     		strh	r2, [r4, #52]	@ movhi	@ Size, hspi_9(D)->TxXferSize
 2291 0a62 2268     		ldr	r2, [r4]	@ _26, hspi_9(D)->Instance
 2292              	.LVL143:
1672:src/stm32f1xx_hal_spi.c ****   {
 2293              		.loc 1 1672 0
 2294 0a64 B3F5004F 		cmp	r3, #32768	@ hspi_9(D)->Init.Direction,
1674:src/stm32f1xx_hal_spi.c ****   }
 2295              		.loc 1 1674 0
 2296 0a68 08BF     		it	eq
ARM GAS  /tmp/ccdPJtdr.s 			page 117


 2297 0a6a 1368     		ldreq	r3, [r2]	@ _27, _26->CR1
1660:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = Size;
 2298              		.loc 1 1660 0
 2299 0a6c 2163     		str	r1, [r4, #48]	@ pData, hspi_9(D)->pTxBuffPtr
1674:src/stm32f1xx_hal_spi.c ****   }
 2300              		.loc 1 1674 0
 2301 0a6e 04BF     		itt	eq
 2302 0a70 43F48043 		orreq	r3, r3, #16384	@ _28, _27,
 2303 0a74 1360     		streq	r3, [r2]	@ _28, _26->CR1
1679:src/stm32f1xx_hal_spi.c ****   {
 2304              		.loc 1 1679 0
 2305 0a76 A36A     		ldr	r3, [r4, #40]	@ hspi_9(D)->Init.CRCCalculation, hspi_9(D)->Init.CRCCalculation
 2306 0a78 B3F5005F 		cmp	r3, #8192	@ hspi_9(D)->Init.CRCCalculation,
 2307 0a7c 07D1     		bne	.L281	@,
1681:src/stm32f1xx_hal_spi.c ****   }
 2308              		.loc 1 1681 0
 2309 0a7e 1368     		ldr	r3, [r2]	@ _32, _31->CR1
 2310 0a80 23F40053 		bic	r3, r3, #8192	@ _33, _32,
 2311 0a84 1360     		str	r3, [r2]	@ _33, _31->CR1
 2312 0a86 1368     		ldr	r3, [r2]	@ _35, _31->CR1
 2313 0a88 43F40053 		orr	r3, r3, #8192	@ _36, _35,
 2314 0a8c 1360     		str	r3, [r2]	@ _36, _31->CR1
 2315              	.L281:
1686:src/stm32f1xx_hal_spi.c **** 
 2316              		.loc 1 1686 0
 2317 0a8e A06C     		ldr	r0, [r4, #72]	@ _38, hspi_9(D)->hdmatx
 2318 0a90 164B     		ldr	r3, .L288	@ tmp164,
1698:src/stm32f1xx_hal_spi.c ****                                  hspi->TxXferCount))
 2319              		.loc 1 1698 0
 2320 0a92 0C32     		adds	r2, r2, #12	@, _26,
1686:src/stm32f1xx_hal_spi.c **** 
 2321              		.loc 1 1686 0
 2322 0a94 C362     		str	r3, [r0, #44]	@ tmp164, _38->XferHalfCpltCallback
1689:src/stm32f1xx_hal_spi.c **** 
 2323              		.loc 1 1689 0
 2324 0a96 164B     		ldr	r3, .L288+4	@ tmp165,
 2325 0a98 8362     		str	r3, [r0, #40]	@ tmp165, _38->XferCpltCallback
1692:src/stm32f1xx_hal_spi.c **** 
 2326              		.loc 1 1692 0
 2327 0a9a 164B     		ldr	r3, .L288+8	@ tmp166,
 2328 0a9c 0363     		str	r3, [r0, #48]	@ tmp166, _38->XferErrorCallback
1695:src/stm32f1xx_hal_spi.c **** 
 2329              		.loc 1 1695 0
 2330 0a9e 0023     		movs	r3, #0	@ tmp167,
 2331 0aa0 4363     		str	r3, [r0, #52]	@ tmp167, _38->XferAbortCallback
1699:src/stm32f1xx_hal_spi.c ****   {
 2332              		.loc 1 1699 0
 2333 0aa2 E38E     		ldrh	r3, [r4, #54]	@, hspi_9(D)->TxXferCount
1698:src/stm32f1xx_hal_spi.c ****                                  hspi->TxXferCount))
 2334              		.loc 1 1698 0
 2335 0aa4 9BB2     		uxth	r3, r3	@, hspi_9(D)->TxXferCount
 2336 0aa6 FFF7FEFF 		bl	HAL_DMA_Start_IT	@
 2337              	.LVL144:
 2338 0aaa 50B1     		cbz	r0, .L282	@ <retval>,
1705:src/stm32f1xx_hal_spi.c ****     goto error;
 2339              		.loc 1 1705 0
 2340 0aac 0120     		movs	r0, #1	@ tmp173,
ARM GAS  /tmp/ccdPJtdr.s 			page 118


1702:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
 2341              		.loc 1 1702 0
 2342 0aae 636D     		ldr	r3, [r4, #84]	@ _51, hspi_9(D)->ErrorCode
 2343 0ab0 43F01003 		orr	r3, r3, #16	@ _52, _51,
 2344 0ab4 6365     		str	r3, [r4, #84]	@ _52, hspi_9(D)->ErrorCode
 2345              	.LVL145:
1705:src/stm32f1xx_hal_spi.c ****     goto error;
 2346              		.loc 1 1705 0
 2347 0ab6 84F85100 		strb	r0, [r4, #81]	@ tmp173, hspi_9(D)->State
 2348              	.LVL146:
 2349              	.L279:
1724:src/stm32f1xx_hal_spi.c ****   return errorcode;
 2350              		.loc 1 1724 0
 2351 0aba 0023     		movs	r3, #0	@ tmp176,
 2352 0abc 84F85030 		strb	r3, [r4, #80]	@ tmp176, hspi_9(D)->Lock
1725:src/stm32f1xx_hal_spi.c **** }
 2353              		.loc 1 1725 0
 2354 0ac0 10BD     		pop	{r4, pc}	@
 2355              	.LVL147:
 2356              	.L282:
1710:src/stm32f1xx_hal_spi.c ****   {
 2357              		.loc 1 1710 0
 2358 0ac2 2368     		ldr	r3, [r4]	@ _55, hspi_9(D)->Instance
 2359 0ac4 1A68     		ldr	r2, [r3]	@ _56, _55->CR1
 2360 0ac6 5206     		lsls	r2, r2, #25	@, _56,
1713:src/stm32f1xx_hal_spi.c ****   }
 2361              		.loc 1 1713 0
 2362 0ac8 5EBF     		ittt	pl
 2363 0aca 1A68     		ldrpl	r2, [r3]	@ _58, _55->CR1
 2364 0acc 42F04002 		orrpl	r2, r2, #64	@ _59, _58,
 2365 0ad0 1A60     		strpl	r2, [r3]	@ _59, _55->CR1
1717:src/stm32f1xx_hal_spi.c **** 
 2366              		.loc 1 1717 0
 2367 0ad2 5A68     		ldr	r2, [r3, #4]	@ _61, _55->CR2
 2368 0ad4 42F02002 		orr	r2, r2, #32	@ _62, _61,
 2369 0ad8 5A60     		str	r2, [r3, #4]	@ _62, _55->CR2
1720:src/stm32f1xx_hal_spi.c **** 
 2370              		.loc 1 1720 0
 2371 0ada 5A68     		ldr	r2, [r3, #4]	@ _64, _55->CR2
 2372 0adc 42F00202 		orr	r2, r2, #2	@ _65, _64,
 2373 0ae0 5A60     		str	r2, [r3, #4]	@ _65, _55->CR2
 2374 0ae2 EAE7     		b	.L279	@
 2375              	.LVL148:
 2376              	.L285:
1647:src/stm32f1xx_hal_spi.c ****     goto error;
 2377              		.loc 1 1647 0
 2378 0ae4 0220     		movs	r0, #2	@ <retval>,
 2379 0ae6 E8E7     		b	.L279	@
 2380              	.LVL149:
 2381              	.L284:
1643:src/stm32f1xx_hal_spi.c **** 
 2382              		.loc 1 1643 0
 2383 0ae8 0220     		movs	r0, #2	@ <retval>,
 2384              	.LVL150:
1726:src/stm32f1xx_hal_spi.c **** 
 2385              		.loc 1 1726 0
 2386 0aea 10BD     		pop	{r4, pc}	@
ARM GAS  /tmp/ccdPJtdr.s 			page 119


 2387              	.LVL151:
 2388              	.L289:
 2389              		.align	2
 2390              	.L288:
 2391 0aec 00000000 		.word	SPI_DMAHalfTransmitCplt
 2392 0af0 00000000 		.word	SPI_DMATransmitCplt
 2393 0af4 00000000 		.word	SPI_DMAError
 2394              		.cfi_endproc
 2395              	.LFE75:
 2396              		.size	HAL_SPI_Transmit_DMA, .-HAL_SPI_Transmit_DMA
 2397              		.align	1
 2398              		.global	HAL_SPI_TransmitReceive_DMA
 2399              		.syntax unified
 2400              		.thumb
 2401              		.thumb_func
 2402              		.fpu softvfp
 2403              		.type	HAL_SPI_TransmitReceive_DMA, %function
 2404              	HAL_SPI_TransmitReceive_DMA:
 2405              	.LFB77:
1853:src/stm32f1xx_hal_spi.c ****   uint32_t             tmp_mode;
 2406              		.loc 1 1853 0
 2407              		.cfi_startproc
 2408              		@ args = 0, pretend = 0, frame = 0
 2409              		@ frame_needed = 0, uses_anonymous_args = 0
 2410              	.LVL152:
 2411 0af8 38B5     		push	{r3, r4, r5, lr}	@
 2412              	.LCFI28:
 2413              		.cfi_def_cfa_offset 16
 2414              		.cfi_offset 3, -16
 2415              		.cfi_offset 4, -12
 2416              		.cfi_offset 5, -8
 2417              		.cfi_offset 14, -4
1853:src/stm32f1xx_hal_spi.c ****   uint32_t             tmp_mode;
 2418              		.loc 1 1853 0
 2419 0afa 0446     		mov	r4, r0	@ hspi, hspi
1866:src/stm32f1xx_hal_spi.c **** 
 2420              		.loc 1 1866 0
 2421 0afc 90F85000 		ldrb	r0, [r0, #80]	@ zero_extendqisi2	@ hspi_3(D)->Lock, hspi_3(D)->Lock
 2422              	.LVL153:
 2423 0b00 0128     		cmp	r0, #1	@ hspi_3(D)->Lock,
 2424 0b02 7FD0     		beq	.L301	@,
 2425              	.LVL154:
 2426              	.LBB43:
 2427              	.LBB44:
 2428 0b04 0120     		movs	r0, #1	@ tmp161,
 2429 0b06 84F85000 		strb	r0, [r4, #80]	@ tmp161, hspi_3(D)->Lock
1869:src/stm32f1xx_hal_spi.c ****   tmp_mode            = hspi->Init.Mode;
 2430              		.loc 1 1869 0
 2431 0b0a 94F85100 		ldrb	r0, [r4, #81]	@ zero_extendqisi2	@ hspi_3(D)->State, hspi_3(D)->State
 2432 0b0e C0B2     		uxtb	r0, r0	@ tmp_state, hspi_3(D)->State
 2433              	.LVL155:
1872:src/stm32f1xx_hal_spi.c ****         ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_st
 2434              		.loc 1 1872 0
 2435 0b10 0128     		cmp	r0, #1	@ tmp_state,
 2436 0b12 08D0     		beq	.L292	@,
 2437 0b14 6568     		ldr	r5, [r4, #4]	@ hspi_3(D)->Init.Mode, hspi_3(D)->Init.Mode
 2438 0b16 B5F5827F 		cmp	r5, #260	@ hspi_3(D)->Init.Mode,
ARM GAS  /tmp/ccdPJtdr.s 			page 120


 2439 0b1a 6FD1     		bne	.L304	@,
1873:src/stm32f1xx_hal_spi.c ****   {
 2440              		.loc 1 1873 0
 2441 0b1c A568     		ldr	r5, [r4, #8]	@ hspi_3(D)->Init.Direction, hspi_3(D)->Init.Direction
 2442 0b1e 002D     		cmp	r5, #0	@ hspi_3(D)->Init.Direction
 2443 0b20 6CD1     		bne	.L304	@
 2444 0b22 0428     		cmp	r0, #4	@ tmp_state,
 2445 0b24 6AD1     		bne	.L304	@,
 2446              	.L292:
1879:src/stm32f1xx_hal_spi.c ****   {
 2447              		.loc 1 1879 0
 2448 0b26 0029     		cmp	r1, #0	@ pTxData
 2449 0b28 6AD0     		beq	.L307	@
 2450 0b2a 002A     		cmp	r2, #0	@ pRxData
 2451 0b2c 68D0     		beq	.L307	@
 2452 0b2e 002B     		cmp	r3, #0	@ Size
 2453 0b30 66D0     		beq	.L307	@
1886:src/stm32f1xx_hal_spi.c ****   {
 2454              		.loc 1 1886 0
 2455 0b32 94F85100 		ldrb	r0, [r4, #81]	@ zero_extendqisi2	@ hspi_3(D)->State, hspi_3(D)->State
 2456              	.LVL156:
1894:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = Size;
 2457              		.loc 1 1894 0
 2458 0b36 A386     		strh	r3, [r4, #52]	@ movhi	@ Size, hspi_3(D)->TxXferSize
1886:src/stm32f1xx_hal_spi.c ****   {
 2459              		.loc 1 1886 0
 2460 0b38 0428     		cmp	r0, #4	@ hspi_3(D)->State,
1888:src/stm32f1xx_hal_spi.c ****   }
 2461              		.loc 1 1888 0
 2462 0b3a 1CBF     		itt	ne
 2463 0b3c 0520     		movne	r0, #5	@ tmp171,
 2464 0b3e 84F85100 		strbne	r0, [r4, #81]	@ tmp171, hspi_3(D)->State
1892:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 2465              		.loc 1 1892 0
 2466 0b42 0020     		movs	r0, #0	@ tmp173,
1897:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = Size;
 2467              		.loc 1 1897 0
 2468 0b44 A387     		strh	r3, [r4, #60]	@ movhi	@ Size, hspi_3(D)->RxXferSize
1892:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 2469              		.loc 1 1892 0
 2470 0b46 6065     		str	r0, [r4, #84]	@ tmp173, hspi_3(D)->ErrorCode
1895:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 2471              		.loc 1 1895 0
 2472 0b48 E386     		strh	r3, [r4, #54]	@ movhi	@ Size, hspi_3(D)->TxXferCount
1898:src/stm32f1xx_hal_spi.c **** 
 2473              		.loc 1 1898 0
 2474 0b4a E387     		strh	r3, [r4, #62]	@ movhi	@ Size, hspi_3(D)->RxXferCount
1906:src/stm32f1xx_hal_spi.c ****   {
 2475              		.loc 1 1906 0
 2476 0b4c A36A     		ldr	r3, [r4, #40]	@ hspi_3(D)->Init.CRCCalculation, hspi_3(D)->Init.CRCCalculation
 2477              	.LVL157:
1893:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = Size;
 2478              		.loc 1 1893 0
 2479 0b4e 2163     		str	r1, [r4, #48]	@ pTxData, hspi_3(D)->pTxBuffPtr
1906:src/stm32f1xx_hal_spi.c ****   {
 2480              		.loc 1 1906 0
 2481 0b50 B3F5005F 		cmp	r3, #8192	@ hspi_3(D)->Init.CRCCalculation,
ARM GAS  /tmp/ccdPJtdr.s 			page 121


1896:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = Size;
 2482              		.loc 1 1896 0
 2483 0b54 A263     		str	r2, [r4, #56]	@ pRxData, hspi_3(D)->pRxBuffPtr
1901:src/stm32f1xx_hal_spi.c ****   hspi->TxISR       = NULL;
 2484              		.loc 1 1901 0
 2485 0b56 2064     		str	r0, [r4, #64]	@ tmp173, hspi_3(D)->RxISR
1902:src/stm32f1xx_hal_spi.c **** 
 2486              		.loc 1 1902 0
 2487 0b58 6064     		str	r0, [r4, #68]	@ tmp173, hspi_3(D)->TxISR
 2488 0b5a 2168     		ldr	r1, [r4]	@ _16, hspi_3(D)->Instance
 2489              	.LVL158:
1906:src/stm32f1xx_hal_spi.c ****   {
 2490              		.loc 1 1906 0
 2491 0b5c 07D1     		bne	.L295	@,
1908:src/stm32f1xx_hal_spi.c ****   }
 2492              		.loc 1 1908 0
 2493 0b5e 0B68     		ldr	r3, [r1]	@ _17, _16->CR1
 2494 0b60 23F40053 		bic	r3, r3, #8192	@ _18, _17,
 2495 0b64 0B60     		str	r3, [r1]	@ _18, _16->CR1
 2496 0b66 0B68     		ldr	r3, [r1]	@ _19, _16->CR1
 2497 0b68 43F40053 		orr	r3, r3, #8192	@ _20, _19,
 2498 0b6c 0B60     		str	r3, [r1]	@ _20, _16->CR1
 2499              	.L295:
1913:src/stm32f1xx_hal_spi.c ****   {
 2500              		.loc 1 1913 0
 2501 0b6e 94F85130 		ldrb	r3, [r4, #81]	@ zero_extendqisi2	@ hspi_3(D)->State, hspi_3(D)->State
 2502 0b72 E06C     		ldr	r0, [r4, #76]	@ _24, hspi_3(D)->hdmarx
 2503 0b74 042B     		cmp	r3, #4	@ hspi_3(D)->State,
1916:src/stm32f1xx_hal_spi.c ****     hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 2504              		.loc 1 1916 0
 2505 0b76 0BBF     		itete	eq
 2506 0b78 234B     		ldreq	r3, .L316	@ tmp184,
1922:src/stm32f1xx_hal_spi.c ****     hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 2507              		.loc 1 1922 0
 2508 0b7a 244B     		ldrne	r3, .L316+4	@ tmp186,
1916:src/stm32f1xx_hal_spi.c ****     hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 2509              		.loc 1 1916 0
 2510 0b7c C362     		streq	r3, [r0, #44]	@ tmp184, _22->XferHalfCpltCallback
1922:src/stm32f1xx_hal_spi.c ****     hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 2511              		.loc 1 1922 0
 2512 0b7e C362     		strne	r3, [r0, #44]	@ tmp186, _23->XferHalfCpltCallback
1917:src/stm32f1xx_hal_spi.c ****   }
 2513              		.loc 1 1917 0
 2514 0b80 0CBF     		ite	eq
 2515 0b82 234B     		ldreq	r3, .L316+8	@ tmp185,
1923:src/stm32f1xx_hal_spi.c ****   }
 2516              		.loc 1 1923 0
 2517 0b84 234B     		ldrne	r3, .L316+12	@ tmp187,
1933:src/stm32f1xx_hal_spi.c ****                                  hspi->RxXferCount))
 2518              		.loc 1 1933 0
 2519 0b86 0C31     		adds	r1, r1, #12	@, _16,
1923:src/stm32f1xx_hal_spi.c ****   }
 2520              		.loc 1 1923 0
 2521 0b88 8362     		str	r3, [r0, #40]	@ tmp187,
1927:src/stm32f1xx_hal_spi.c **** 
 2522              		.loc 1 1927 0
 2523 0b8a 234B     		ldr	r3, .L316+16	@ tmp188,
ARM GAS  /tmp/ccdPJtdr.s 			page 122


 2524 0b8c 0363     		str	r3, [r0, #48]	@ tmp188, _24->XferErrorCallback
1930:src/stm32f1xx_hal_spi.c **** 
 2525              		.loc 1 1930 0
 2526 0b8e 0023     		movs	r3, #0	@ tmp189,
 2527 0b90 4363     		str	r3, [r0, #52]	@ tmp189, _24->XferAbortCallback
1934:src/stm32f1xx_hal_spi.c ****   {
 2528              		.loc 1 1934 0
 2529 0b92 E38F     		ldrh	r3, [r4, #62]	@, hspi_3(D)->RxXferCount
1933:src/stm32f1xx_hal_spi.c ****                                  hspi->RxXferCount))
 2530              		.loc 1 1933 0
 2531 0b94 9BB2     		uxth	r3, r3	@, hspi_3(D)->RxXferCount
 2532 0b96 FFF7FEFF 		bl	HAL_DMA_Start_IT	@
 2533              	.LVL159:
 2534 0b9a 0346     		mov	r3, r0	@ tmp194,
 2535 0b9c 50B1     		cbz	r0, .L298	@ tmp194,
 2536              	.L315:
1962:src/stm32f1xx_hal_spi.c ****     goto error;
 2537              		.loc 1 1962 0
 2538 0b9e 0120     		movs	r0, #1	@ tmp205,
1959:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
 2539              		.loc 1 1959 0
 2540 0ba0 636D     		ldr	r3, [r4, #84]	@ _46,
 2541 0ba2 43F01003 		orr	r3, r3, #16	@ _47, _46,
 2542 0ba6 6365     		str	r3, [r4, #84]	@ _47,
 2543              	.LVL160:
1962:src/stm32f1xx_hal_spi.c ****     goto error;
 2544              		.loc 1 1962 0
 2545 0ba8 84F85100 		strb	r0, [r4, #81]	@ tmp205,
 2546              	.LVL161:
 2547              	.L293:
1980:src/stm32f1xx_hal_spi.c ****   return errorcode;
 2548              		.loc 1 1980 0
 2549 0bac 0023     		movs	r3, #0	@ tmp208,
 2550 0bae 84F85030 		strb	r3, [r4, #80]	@ tmp208, hspi_3(D)->Lock
 2551              	.LVL162:
 2552 0bb2 38BD     		pop	{r3, r4, r5, pc}	@
 2553              	.LVL163:
 2554              	.L298:
1945:src/stm32f1xx_hal_spi.c **** 
 2555              		.loc 1 1945 0
 2556 0bb4 2268     		ldr	r2, [r4]	@ _35, hspi_3(D)->Instance
1949:src/stm32f1xx_hal_spi.c ****   hspi->hdmatx->XferCpltCallback     = NULL;
 2557              		.loc 1 1949 0
 2558 0bb6 A06C     		ldr	r0, [r4, #72]	@ _38, hspi_3(D)->hdmatx
1945:src/stm32f1xx_hal_spi.c **** 
 2559              		.loc 1 1945 0
 2560 0bb8 5168     		ldr	r1, [r2, #4]	@ _36, _35->CR2
1955:src/stm32f1xx_hal_spi.c ****                                  hspi->TxXferCount))
 2561              		.loc 1 1955 0
 2562 0bba 0C32     		adds	r2, r2, #12	@, _35,
1945:src/stm32f1xx_hal_spi.c **** 
 2563              		.loc 1 1945 0
 2564 0bbc 41F00101 		orr	r1, r1, #1	@ _37, _36,
 2565 0bc0 42F8081C 		str	r1, [r2, #-8]	@ _37, _35->CR2
1949:src/stm32f1xx_hal_spi.c ****   hspi->hdmatx->XferCpltCallback     = NULL;
 2566              		.loc 1 1949 0
 2567 0bc4 C362     		str	r3, [r0, #44]	@ tmp194, _38->XferHalfCpltCallback
ARM GAS  /tmp/ccdPJtdr.s 			page 123


1950:src/stm32f1xx_hal_spi.c ****   hspi->hdmatx->XferErrorCallback    = NULL;
 2568              		.loc 1 1950 0
 2569 0bc6 8362     		str	r3, [r0, #40]	@ tmp194, _38->XferCpltCallback
1951:src/stm32f1xx_hal_spi.c ****   hspi->hdmatx->XferAbortCallback    = NULL;
 2570              		.loc 1 1951 0
 2571 0bc8 0363     		str	r3, [r0, #48]	@ tmp194, _38->XferErrorCallback
1952:src/stm32f1xx_hal_spi.c **** 
 2572              		.loc 1 1952 0
 2573 0bca 4363     		str	r3, [r0, #52]	@ tmp194, _38->XferAbortCallback
1956:src/stm32f1xx_hal_spi.c ****   {
 2574              		.loc 1 1956 0
 2575 0bcc E38E     		ldrh	r3, [r4, #54]	@, hspi_3(D)->TxXferCount
1955:src/stm32f1xx_hal_spi.c ****                                  hspi->TxXferCount))
 2576              		.loc 1 1955 0
 2577 0bce 216B     		ldr	r1, [r4, #48]	@, hspi_3(D)->pTxBuffPtr
 2578 0bd0 9BB2     		uxth	r3, r3	@, hspi_3(D)->TxXferCount
 2579 0bd2 FFF7FEFF 		bl	HAL_DMA_Start_IT	@
 2580              	.LVL164:
 2581 0bd6 0028     		cmp	r0, #0	@ <retval>
 2582 0bd8 E1D1     		bne	.L315	@
1967:src/stm32f1xx_hal_spi.c ****   {
 2583              		.loc 1 1967 0
 2584 0bda 2368     		ldr	r3, [r4]	@ _48, hspi_3(D)->Instance
 2585 0bdc 1A68     		ldr	r2, [r3]	@ _49, _48->CR1
 2586 0bde 5206     		lsls	r2, r2, #25	@, _49,
1970:src/stm32f1xx_hal_spi.c ****   }
 2587              		.loc 1 1970 0
 2588 0be0 5EBF     		ittt	pl
 2589 0be2 1A68     		ldrpl	r2, [r3]	@ _51, _48->CR1
 2590 0be4 42F04002 		orrpl	r2, r2, #64	@ _52, _51,
 2591 0be8 1A60     		strpl	r2, [r3]	@ _52, _48->CR1
1973:src/stm32f1xx_hal_spi.c **** 
 2592              		.loc 1 1973 0
 2593 0bea 5A68     		ldr	r2, [r3, #4]	@ _53, _48->CR2
 2594 0bec 42F02002 		orr	r2, r2, #32	@ _54, _53,
 2595 0bf0 5A60     		str	r2, [r3, #4]	@ _54, _48->CR2
1976:src/stm32f1xx_hal_spi.c **** 
 2596              		.loc 1 1976 0
 2597 0bf2 5A68     		ldr	r2, [r3, #4]	@ _55, _48->CR2
 2598 0bf4 42F00202 		orr	r2, r2, #2	@ _56, _55,
 2599 0bf8 5A60     		str	r2, [r3, #4]	@ _56, _48->CR2
 2600 0bfa D7E7     		b	.L293	@
 2601              	.LVL165:
 2602              	.L304:
1875:src/stm32f1xx_hal_spi.c ****     goto error;
 2603              		.loc 1 1875 0
 2604 0bfc 0220     		movs	r0, #2	@ <retval>,
 2605              	.LVL166:
 2606 0bfe D5E7     		b	.L293	@
 2607              	.LVL167:
 2608              	.L307:
1881:src/stm32f1xx_hal_spi.c ****     goto error;
 2609              		.loc 1 1881 0
 2610 0c00 0120     		movs	r0, #1	@ <retval>,
 2611              	.LVL168:
 2612 0c02 D3E7     		b	.L293	@
 2613              	.LVL169:
ARM GAS  /tmp/ccdPJtdr.s 			page 124


 2614              	.L301:
 2615              	.LBE44:
 2616              	.LBE43:
1866:src/stm32f1xx_hal_spi.c **** 
 2617              		.loc 1 1866 0
 2618 0c04 0220     		movs	r0, #2	@ <retval>,
1982:src/stm32f1xx_hal_spi.c **** 
 2619              		.loc 1 1982 0
 2620 0c06 38BD     		pop	{r3, r4, r5, pc}	@
 2621              	.LVL170:
 2622              	.L317:
 2623              		.align	2
 2624              	.L316:
 2625 0c08 00000000 		.word	SPI_DMAHalfReceiveCplt
 2626 0c0c 00000000 		.word	SPI_DMAHalfTransmitReceiveCplt
 2627 0c10 00000000 		.word	SPI_DMAReceiveCplt
 2628 0c14 00000000 		.word	SPI_DMATransmitReceiveCplt
 2629 0c18 00000000 		.word	SPI_DMAError
 2630              		.cfi_endproc
 2631              	.LFE77:
 2632              		.size	HAL_SPI_TransmitReceive_DMA, .-HAL_SPI_TransmitReceive_DMA
 2633              		.align	1
 2634              		.global	HAL_SPI_Receive_DMA
 2635              		.syntax unified
 2636              		.thumb
 2637              		.thumb_func
 2638              		.fpu softvfp
 2639              		.type	HAL_SPI_Receive_DMA, %function
 2640              	HAL_SPI_Receive_DMA:
 2641              	.LFB76:
1739:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 2642              		.loc 1 1739 0
 2643              		.cfi_startproc
 2644              		@ args = 0, pretend = 0, frame = 0
 2645              		@ frame_needed = 0, uses_anonymous_args = 0
 2646              	.LVL171:
 2647 0c1c 1346     		mov	r3, r2	@ Size, Size
1745:src/stm32f1xx_hal_spi.c ****   {
 2648              		.loc 1 1745 0
 2649 0c1e 8268     		ldr	r2, [r0, #8]	@ _10, hspi_9(D)->Init.Direction
 2650              	.LVL172:
1739:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 2651              		.loc 1 1739 0
 2652 0c20 70B5     		push	{r4, r5, r6, lr}	@
 2653              	.LCFI29:
 2654              		.cfi_def_cfa_offset 16
 2655              		.cfi_offset 4, -16
 2656              		.cfi_offset 5, -12
 2657              		.cfi_offset 6, -8
 2658              		.cfi_offset 14, -4
1739:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 2659              		.loc 1 1739 0
 2660 0c22 0446     		mov	r4, r0	@ hspi, hspi
 2661 0c24 0D46     		mov	r5, r1	@ pData, pData
1745:src/stm32f1xx_hal_spi.c ****   {
 2662              		.loc 1 1745 0
 2663 0c26 5AB9     		cbnz	r2, .L319	@ _10,
ARM GAS  /tmp/ccdPJtdr.s 			page 125


1745:src/stm32f1xx_hal_spi.c ****   {
 2664              		.loc 1 1745 0 is_stmt 0 discriminator 1
 2665 0c28 4668     		ldr	r6, [r0, #4]	@ hspi_9(D)->Init.Mode, hspi_9(D)->Init.Mode
 2666 0c2a B6F5827F 		cmp	r6, #260	@ hspi_9(D)->Init.Mode,
 2667 0c2e 07D1     		bne	.L319	@,
1747:src/stm32f1xx_hal_spi.c **** 
 2668              		.loc 1 1747 0 is_stmt 1
 2669 0c30 0422     		movs	r2, #4	@ tmp146,
1839:src/stm32f1xx_hal_spi.c **** 
 2670              		.loc 1 1839 0
 2671 0c32 BDE87040 		pop	{r4, r5, r6, lr}	@
 2672              	.LCFI30:
 2673              		.cfi_remember_state
 2674              		.cfi_restore 14
 2675              		.cfi_restore 6
 2676              		.cfi_restore 5
 2677              		.cfi_restore 4
 2678              		.cfi_def_cfa_offset 0
1747:src/stm32f1xx_hal_spi.c **** 
 2679              		.loc 1 1747 0
 2680 0c36 80F85120 		strb	r2, [r0, #81]	@ tmp146, hspi_9(D)->State
1753:src/stm32f1xx_hal_spi.c ****   }
 2681              		.loc 1 1753 0
 2682 0c3a 0A46     		mov	r2, r1	@, pData
 2683 0c3c FFF7FEBF 		b	HAL_SPI_TransmitReceive_DMA	@
 2684              	.LVL173:
 2685              	.L319:
 2686              	.LCFI31:
 2687              		.cfi_restore_state
1757:src/stm32f1xx_hal_spi.c **** 
 2688              		.loc 1 1757 0
 2689 0c40 94F85010 		ldrb	r1, [r4, #80]	@ zero_extendqisi2	@ hspi_9(D)->Lock, hspi_9(D)->Lock
 2690              	.LVL174:
 2691 0c44 0129     		cmp	r1, #1	@ hspi_9(D)->Lock,
 2692 0c46 5AD0     		beq	.L326	@,
1757:src/stm32f1xx_hal_spi.c **** 
 2693              		.loc 1 1757 0 is_stmt 0 discriminator 2
 2694 0c48 0121     		movs	r1, #1	@ tmp150,
1759:src/stm32f1xx_hal_spi.c ****   {
 2695              		.loc 1 1759 0 is_stmt 1 discriminator 2
 2696 0c4a 94F85100 		ldrb	r0, [r4, #81]	@ zero_extendqisi2	@ hspi_9(D)->State, hspi_9(D)->State
 2697              	.LVL175:
1757:src/stm32f1xx_hal_spi.c **** 
 2698              		.loc 1 1757 0 discriminator 2
 2699 0c4e 84F85010 		strb	r1, [r4, #80]	@ tmp150, hspi_9(D)->Lock
1759:src/stm32f1xx_hal_spi.c ****   {
 2700              		.loc 1 1759 0 discriminator 2
 2701 0c52 C0B2     		uxtb	r0, r0	@ _19, hspi_9(D)->State
 2702 0c54 8842     		cmp	r0, r1	@ _19,
 2703 0c56 50D1     		bne	.L327	@,
1765:src/stm32f1xx_hal_spi.c ****   {
 2704              		.loc 1 1765 0
 2705 0c58 002D     		cmp	r5, #0	@ pData
 2706 0c5a 39D0     		beq	.L321	@
1765:src/stm32f1xx_hal_spi.c ****   {
 2707              		.loc 1 1765 0 is_stmt 0 discriminator 1
 2708 0c5c 002B     		cmp	r3, #0	@ Size
ARM GAS  /tmp/ccdPJtdr.s 			page 126


 2709 0c5e 37D0     		beq	.L321	@
1772:src/stm32f1xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 2710              		.loc 1 1772 0 is_stmt 1
 2711 0c60 0421     		movs	r1, #4	@ tmp155,
 2712 0c62 84F85110 		strb	r1, [r4, #81]	@ tmp155, hspi_9(D)->State
1773:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pData;
 2713              		.loc 1 1773 0
 2714 0c66 0021     		movs	r1, #0	@ tmp157,
 2715 0c68 6165     		str	r1, [r4, #84]	@ tmp157, hspi_9(D)->ErrorCode
1779:src/stm32f1xx_hal_spi.c ****   hspi->TxISR       = NULL;
 2716              		.loc 1 1779 0
 2717 0c6a 2164     		str	r1, [r4, #64]	@ tmp157, hspi_9(D)->RxISR
1776:src/stm32f1xx_hal_spi.c **** 
 2718              		.loc 1 1776 0
 2719 0c6c E387     		strh	r3, [r4, #62]	@ movhi	@ Size, hspi_9(D)->RxXferCount
1780:src/stm32f1xx_hal_spi.c ****   hspi->TxXferSize  = 0U;
 2720              		.loc 1 1780 0
 2721 0c6e 6164     		str	r1, [r4, #68]	@ tmp157, hspi_9(D)->TxISR
1782:src/stm32f1xx_hal_spi.c **** 
 2722              		.loc 1 1782 0
 2723 0c70 E186     		strh	r1, [r4, #54]	@ movhi	@ tmp157, hspi_9(D)->TxXferCount
1781:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = 0U;
 2724              		.loc 1 1781 0
 2725 0c72 A186     		strh	r1, [r4, #52]	@ movhi	@ tmp157, hspi_9(D)->TxXferSize
 2726 0c74 2168     		ldr	r1, [r4]	@ _29, hspi_9(D)->Instance
1785:src/stm32f1xx_hal_spi.c ****   {
 2727              		.loc 1 1785 0
 2728 0c76 B2F5004F 		cmp	r2, #32768	@ _10,
1775:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = Size;
 2729              		.loc 1 1775 0
 2730 0c7a A387     		strh	r3, [r4, #60]	@ movhi	@ Size, hspi_9(D)->RxXferSize
1787:src/stm32f1xx_hal_spi.c ****   }
 2731              		.loc 1 1787 0
 2732 0c7c 08BF     		it	eq
 2733 0c7e 0B68     		ldreq	r3, [r1]	@ _30, _29->CR1
1774:src/stm32f1xx_hal_spi.c ****   hspi->RxXferSize  = Size;
 2734              		.loc 1 1774 0
 2735 0c80 A563     		str	r5, [r4, #56]	@ pData, hspi_9(D)->pRxBuffPtr
1787:src/stm32f1xx_hal_spi.c ****   }
 2736              		.loc 1 1787 0
 2737 0c82 04BF     		itt	eq
 2738 0c84 23F48043 		biceq	r3, r3, #16384	@ _31, _30,
 2739 0c88 0B60     		streq	r3, [r1]	@ _31, _29->CR1
1792:src/stm32f1xx_hal_spi.c ****   {
 2740              		.loc 1 1792 0
 2741 0c8a A36A     		ldr	r3, [r4, #40]	@ hspi_9(D)->Init.CRCCalculation, hspi_9(D)->Init.CRCCalculation
 2742 0c8c B3F5005F 		cmp	r3, #8192	@ hspi_9(D)->Init.CRCCalculation,
 2743 0c90 07D1     		bne	.L323	@,
1794:src/stm32f1xx_hal_spi.c ****   }
 2744              		.loc 1 1794 0
 2745 0c92 0B68     		ldr	r3, [r1]	@ _35, _34->CR1
 2746 0c94 23F40053 		bic	r3, r3, #8192	@ _36, _35,
 2747 0c98 0B60     		str	r3, [r1]	@ _36, _34->CR1
 2748 0c9a 0B68     		ldr	r3, [r1]	@ _38, _34->CR1
 2749 0c9c 43F40053 		orr	r3, r3, #8192	@ _39, _38,
 2750 0ca0 0B60     		str	r3, [r1]	@ _39, _34->CR1
 2751              	.L323:
ARM GAS  /tmp/ccdPJtdr.s 			page 127


1799:src/stm32f1xx_hal_spi.c **** 
 2752              		.loc 1 1799 0
 2753 0ca2 E06C     		ldr	r0, [r4, #76]	@ _41, hspi_9(D)->hdmarx
 2754 0ca4 174B     		ldr	r3, .L330	@ tmp167,
1811:src/stm32f1xx_hal_spi.c ****                                  hspi->RxXferCount))
 2755              		.loc 1 1811 0
 2756 0ca6 2A46     		mov	r2, r5	@, pData
1799:src/stm32f1xx_hal_spi.c **** 
 2757              		.loc 1 1799 0
 2758 0ca8 C362     		str	r3, [r0, #44]	@ tmp167, _41->XferHalfCpltCallback
1802:src/stm32f1xx_hal_spi.c **** 
 2759              		.loc 1 1802 0
 2760 0caa 174B     		ldr	r3, .L330+4	@ tmp168,
1811:src/stm32f1xx_hal_spi.c ****                                  hspi->RxXferCount))
 2761              		.loc 1 1811 0
 2762 0cac 0C31     		adds	r1, r1, #12	@, _29,
1802:src/stm32f1xx_hal_spi.c **** 
 2763              		.loc 1 1802 0
 2764 0cae 8362     		str	r3, [r0, #40]	@ tmp168, _41->XferCpltCallback
1805:src/stm32f1xx_hal_spi.c **** 
 2765              		.loc 1 1805 0
 2766 0cb0 164B     		ldr	r3, .L330+8	@ tmp169,
 2767 0cb2 0363     		str	r3, [r0, #48]	@ tmp169, _41->XferErrorCallback
1808:src/stm32f1xx_hal_spi.c **** 
 2768              		.loc 1 1808 0
 2769 0cb4 0023     		movs	r3, #0	@ tmp170,
 2770 0cb6 4363     		str	r3, [r0, #52]	@ tmp170, _41->XferAbortCallback
1812:src/stm32f1xx_hal_spi.c ****   {
 2771              		.loc 1 1812 0
 2772 0cb8 E38F     		ldrh	r3, [r4, #62]	@, hspi_9(D)->RxXferCount
1811:src/stm32f1xx_hal_spi.c ****                                  hspi->RxXferCount))
 2773              		.loc 1 1811 0
 2774 0cba 9BB2     		uxth	r3, r3	@, hspi_9(D)->RxXferCount
 2775 0cbc FFF7FEFF 		bl	HAL_DMA_Start_IT	@
 2776              	.LVL176:
 2777 0cc0 50B1     		cbz	r0, .L324	@ <retval>,
1818:src/stm32f1xx_hal_spi.c ****     goto error;
 2778              		.loc 1 1818 0
 2779 0cc2 0120     		movs	r0, #1	@ tmp176,
1815:src/stm32f1xx_hal_spi.c ****     errorcode = HAL_ERROR;
 2780              		.loc 1 1815 0
 2781 0cc4 636D     		ldr	r3, [r4, #84]	@ _54, hspi_9(D)->ErrorCode
 2782 0cc6 43F01003 		orr	r3, r3, #16	@ _55, _54,
 2783 0cca 6365     		str	r3, [r4, #84]	@ _55, hspi_9(D)->ErrorCode
 2784              	.LVL177:
1818:src/stm32f1xx_hal_spi.c ****     goto error;
 2785              		.loc 1 1818 0
 2786 0ccc 84F85100 		strb	r0, [r4, #81]	@ tmp176, hspi_9(D)->State
 2787              	.LVL178:
 2788              	.L321:
1837:src/stm32f1xx_hal_spi.c ****   return errorcode;
 2789              		.loc 1 1837 0
 2790 0cd0 0023     		movs	r3, #0	@ tmp179,
 2791 0cd2 84F85030 		strb	r3, [r4, #80]	@ tmp179, hspi_9(D)->Lock
1838:src/stm32f1xx_hal_spi.c **** }
 2792              		.loc 1 1838 0
 2793 0cd6 70BD     		pop	{r4, r5, r6, pc}	@
ARM GAS  /tmp/ccdPJtdr.s 			page 128


 2794              	.LVL179:
 2795              	.L324:
1823:src/stm32f1xx_hal_spi.c ****   {
 2796              		.loc 1 1823 0
 2797 0cd8 2368     		ldr	r3, [r4]	@ _58, hspi_9(D)->Instance
 2798 0cda 1A68     		ldr	r2, [r3]	@ _59, _58->CR1
 2799 0cdc 5206     		lsls	r2, r2, #25	@, _59,
1826:src/stm32f1xx_hal_spi.c ****   }
 2800              		.loc 1 1826 0
 2801 0cde 5EBF     		ittt	pl
 2802 0ce0 1A68     		ldrpl	r2, [r3]	@ _61, _58->CR1
 2803 0ce2 42F04002 		orrpl	r2, r2, #64	@ _62, _61,
 2804 0ce6 1A60     		strpl	r2, [r3]	@ _62, _58->CR1
1830:src/stm32f1xx_hal_spi.c **** 
 2805              		.loc 1 1830 0
 2806 0ce8 5A68     		ldr	r2, [r3, #4]	@ _64, _58->CR2
 2807 0cea 42F02002 		orr	r2, r2, #32	@ _65, _64,
 2808 0cee 5A60     		str	r2, [r3, #4]	@ _65, _58->CR2
1833:src/stm32f1xx_hal_spi.c **** 
 2809              		.loc 1 1833 0
 2810 0cf0 5A68     		ldr	r2, [r3, #4]	@ _67, _58->CR2
 2811 0cf2 42F00102 		orr	r2, r2, #1	@ _68, _67,
 2812 0cf6 5A60     		str	r2, [r3, #4]	@ _68, _58->CR2
 2813 0cf8 EAE7     		b	.L321	@
 2814              	.L327:
1761:src/stm32f1xx_hal_spi.c ****     goto error;
 2815              		.loc 1 1761 0
 2816 0cfa 0220     		movs	r0, #2	@ <retval>,
 2817 0cfc E8E7     		b	.L321	@
 2818              	.LVL180:
 2819              	.L326:
1757:src/stm32f1xx_hal_spi.c **** 
 2820              		.loc 1 1757 0
 2821 0cfe 0220     		movs	r0, #2	@ <retval>,
 2822              	.LVL181:
1839:src/stm32f1xx_hal_spi.c **** 
 2823              		.loc 1 1839 0
 2824 0d00 70BD     		pop	{r4, r5, r6, pc}	@
 2825              	.LVL182:
 2826              	.L331:
 2827 0d02 00BF     		.align	2
 2828              	.L330:
 2829 0d04 00000000 		.word	SPI_DMAHalfReceiveCplt
 2830 0d08 00000000 		.word	SPI_DMAReceiveCplt
 2831 0d0c 00000000 		.word	SPI_DMAError
 2832              		.cfi_endproc
 2833              	.LFE76:
 2834              		.size	HAL_SPI_Receive_DMA, .-HAL_SPI_Receive_DMA
 2835              		.align	1
 2836              		.global	HAL_SPI_Abort
 2837              		.syntax unified
 2838              		.thumb
 2839              		.thumb_func
 2840              		.fpu softvfp
 2841              		.type	HAL_SPI_Abort, %function
 2842              	HAL_SPI_Abort:
 2843              	.LFB78:
ARM GAS  /tmp/ccdPJtdr.s 			page 129


1998:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode;
 2844              		.loc 1 1998 0
 2845              		.cfi_startproc
 2846              		@ args = 0, pretend = 0, frame = 16
 2847              		@ frame_needed = 0, uses_anonymous_args = 0
 2848              	.LVL183:
 2849 0d10 1FB5     		push	{r0, r1, r2, r3, r4, lr}	@
 2850              	.LCFI32:
 2851              		.cfi_def_cfa_offset 24
 2852              		.cfi_offset 4, -8
 2853              		.cfi_offset 14, -4
2005:src/stm32f1xx_hal_spi.c ****   count = resetcount;
 2854              		.loc 1 2005 0
 2855 0d12 45F6C052 		movw	r2, #24000	@ tmp170,
 2856 0d16 434B     		ldr	r3, .L376	@ tmp166,
1998:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode;
 2857              		.loc 1 1998 0
 2858 0d18 0446     		mov	r4, r0	@ hspi, hspi
2005:src/stm32f1xx_hal_spi.c ****   count = resetcount;
 2859              		.loc 1 2005 0
 2860 0d1a 1B68     		ldr	r3, [r3]	@ SystemCoreClock, SystemCoreClock
 2861 0d1c B3FBF2F2 		udiv	r2, r3, r2	@ tmp169, SystemCoreClock, tmp170
 2862 0d20 6423     		movs	r3, #100	@ tmp171,
 2863 0d22 5343     		muls	r3, r2, r3	@ resetcount.37_17, tmp169
 2864 0d24 0293     		str	r3, [sp, #8]	@ resetcount.37_17, resetcount
2006:src/stm32f1xx_hal_spi.c **** 
 2865              		.loc 1 2006 0
 2866 0d26 029B     		ldr	r3, [sp, #8]	@ resetcount.38_19, resetcount
 2867 0d28 0193     		str	r3, [sp, #4]	@ resetcount.38_19, count
2009:src/stm32f1xx_hal_spi.c **** 
 2868              		.loc 1 2009 0
 2869 0d2a 0368     		ldr	r3, [r0]	@ _22, hspi_21(D)->Instance
 2870 0d2c 5A68     		ldr	r2, [r3, #4]	@ _23, _22->CR2
 2871 0d2e 22F02002 		bic	r2, r2, #32	@ _24, _23,
 2872 0d32 5A60     		str	r2, [r3, #4]	@ _24, _22->CR2
2012:src/stm32f1xx_hal_spi.c ****   {
 2873              		.loc 1 2012 0
 2874 0d34 5A68     		ldr	r2, [r3, #4]	@ _26, _22->CR2
 2875 0d36 1206     		lsls	r2, r2, #24	@, _26,
 2876 0d38 0AD5     		bpl	.L333	@,
2014:src/stm32f1xx_hal_spi.c ****     /* Wait HAL_SPI_STATE_ABORT state */
 2877              		.loc 1 2014 0
 2878 0d3a 3B4A     		ldr	r2, .L376+4	@ tmp173,
 2879 0d3c 4264     		str	r2, [r0, #68]	@ tmp173, hspi_21(D)->TxISR
 2880              	.L336:
2018:src/stm32f1xx_hal_spi.c ****       {
 2881              		.loc 1 2018 0
 2882 0d3e 019A     		ldr	r2, [sp, #4]	@ count.39_29, count
 2883 0d40 002A     		cmp	r2, #0	@ count.39_29
 2884 0d42 57D1     		bne	.L334	@
2020:src/stm32f1xx_hal_spi.c ****         break;
 2885              		.loc 1 2020 0
 2886 0d44 626D     		ldr	r2, [r4, #84]	@ _34, hspi_21(D)->ErrorCode
 2887 0d46 42F04002 		orr	r2, r2, #64	@ _35, _34,
 2888 0d4a 6265     		str	r2, [r4, #84]	@ _35, hspi_21(D)->ErrorCode
 2889              	.L335:
2026:src/stm32f1xx_hal_spi.c ****   }
ARM GAS  /tmp/ccdPJtdr.s 			page 130


 2890              		.loc 1 2026 0
 2891 0d4c 029A     		ldr	r2, [sp, #8]	@ resetcount.42_37, resetcount
 2892 0d4e 0192     		str	r2, [sp, #4]	@ resetcount.42_37, count
 2893              	.L333:
2029:src/stm32f1xx_hal_spi.c ****   {
 2894              		.loc 1 2029 0
 2895 0d50 5A68     		ldr	r2, [r3, #4]	@ _39, _22->CR2
 2896 0d52 5006     		lsls	r0, r2, #25	@, _39,
 2897              	.LVL184:
 2898 0d54 0AD5     		bpl	.L337	@,
2031:src/stm32f1xx_hal_spi.c ****     /* Wait HAL_SPI_STATE_ABORT state */
 2899              		.loc 1 2031 0
 2900 0d56 354A     		ldr	r2, .L376+8	@ tmp178,
 2901 0d58 2264     		str	r2, [r4, #64]	@ tmp178, hspi_21(D)->RxISR
 2902              	.L340:
2035:src/stm32f1xx_hal_spi.c ****       {
 2903              		.loc 1 2035 0
 2904 0d5a 019A     		ldr	r2, [sp, #4]	@ count.43_42, count
 2905 0d5c 002A     		cmp	r2, #0	@ count.43_42
 2906 0d5e 51D1     		bne	.L338	@
2037:src/stm32f1xx_hal_spi.c ****         break;
 2907              		.loc 1 2037 0
 2908 0d60 626D     		ldr	r2, [r4, #84]	@ _47, hspi_21(D)->ErrorCode
 2909 0d62 42F04002 		orr	r2, r2, #64	@ _48, _47,
 2910 0d66 6265     		str	r2, [r4, #84]	@ _48, hspi_21(D)->ErrorCode
 2911              	.L339:
2043:src/stm32f1xx_hal_spi.c ****   }
 2912              		.loc 1 2043 0
 2913 0d68 029A     		ldr	r2, [sp, #8]	@ resetcount.46_50, resetcount
 2914 0d6a 0192     		str	r2, [sp, #4]	@ resetcount.46_50, count
 2915              	.L337:
2047:src/stm32f1xx_hal_spi.c ****   {
 2916              		.loc 1 2047 0
 2917 0d6c 5B68     		ldr	r3, [r3, #4]	@ _52, _22->CR2
 2918 0d6e 9907     		lsls	r1, r3, #30	@, _52,
 2919 0d70 14D5     		bpl	.L342	@,
2050:src/stm32f1xx_hal_spi.c ****     {
 2920              		.loc 1 2050 0
 2921 0d72 A06C     		ldr	r0, [r4, #72]	@ _54, hspi_21(D)->hdmatx
 2922 0d74 90B1     		cbz	r0, .L342	@ _54,
2054:src/stm32f1xx_hal_spi.c **** 
 2923              		.loc 1 2054 0
 2924 0d76 0023     		movs	r3, #0	@ tmp183,
 2925 0d78 4363     		str	r3, [r0, #52]	@ tmp183, _54->XferAbortCallback
2057:src/stm32f1xx_hal_spi.c ****       {
 2926              		.loc 1 2057 0
 2927 0d7a FFF7FEFF 		bl	HAL_DMA_Abort	@
 2928              	.LVL185:
 2929 0d7e 08B1     		cbz	r0, .L344	@,
2059:src/stm32f1xx_hal_spi.c ****       }
 2930              		.loc 1 2059 0
 2931 0d80 4023     		movs	r3, #64	@ tmp185,
 2932 0d82 6365     		str	r3, [r4, #84]	@ tmp185, hspi_21(D)->ErrorCode
 2933              	.L344:
2063:src/stm32f1xx_hal_spi.c **** 
 2934              		.loc 1 2063 0
 2935 0d84 2368     		ldr	r3, [r4]	@ _59, hspi_21(D)->Instance
ARM GAS  /tmp/ccdPJtdr.s 			page 131


 2936 0d86 5A68     		ldr	r2, [r3, #4]	@ _60, _59->CR2
 2937 0d88 22F00202 		bic	r2, r2, #2	@ _61, _60,
 2938 0d8c 5A60     		str	r2, [r3, #4]	@ _61, _59->CR2
 2939              	.L346:
2068:src/stm32f1xx_hal_spi.c ****         {
 2940              		.loc 1 2068 0
 2941 0d8e 019A     		ldr	r2, [sp, #4]	@ count.47_63, count
 2942 0d90 002A     		cmp	r2, #0	@ count.47_63
 2943 0d92 3FD1     		bne	.L345	@
2070:src/stm32f1xx_hal_spi.c ****           break;
 2944              		.loc 1 2070 0
 2945 0d94 636D     		ldr	r3, [r4, #84]	@ _69, hspi_21(D)->ErrorCode
 2946 0d96 43F04003 		orr	r3, r3, #64	@ _70, _69,
 2947 0d9a 6365     		str	r3, [r4, #84]	@ _70, hspi_21(D)->ErrorCode
 2948              	.L342:
2079:src/stm32f1xx_hal_spi.c ****   {
 2949              		.loc 1 2079 0
 2950 0d9c 2368     		ldr	r3, [r4]	@ _72, hspi_21(D)->Instance
 2951 0d9e 5B68     		ldr	r3, [r3, #4]	@ _73, _72->CR2
 2952 0da0 DB07     		lsls	r3, r3, #31	@, _73,
 2953 0da2 11D5     		bpl	.L347	@,
2082:src/stm32f1xx_hal_spi.c ****     {
 2954              		.loc 1 2082 0
 2955 0da4 E06C     		ldr	r0, [r4, #76]	@ _75, hspi_21(D)->hdmarx
 2956 0da6 78B1     		cbz	r0, .L347	@ _75,
2086:src/stm32f1xx_hal_spi.c **** 
 2957              		.loc 1 2086 0
 2958 0da8 0023     		movs	r3, #0	@ tmp188,
 2959 0daa 4363     		str	r3, [r0, #52]	@ tmp188, _75->XferAbortCallback
2089:src/stm32f1xx_hal_spi.c ****       {
 2960              		.loc 1 2089 0
 2961 0dac FFF7FEFF 		bl	HAL_DMA_Abort	@
 2962              	.LVL186:
 2963 0db0 08B1     		cbz	r0, .L348	@,
2091:src/stm32f1xx_hal_spi.c ****       }
 2964              		.loc 1 2091 0
 2965 0db2 4023     		movs	r3, #64	@ tmp190,
 2966 0db4 6365     		str	r3, [r4, #84]	@ tmp190, hspi_21(D)->ErrorCode
 2967              	.L348:
2095:src/stm32f1xx_hal_spi.c **** 
 2968              		.loc 1 2095 0
 2969 0db6 2368     		ldr	r3, [r4]	@ _80, hspi_21(D)->Instance
 2970 0db8 1A68     		ldr	r2, [r3]	@ _81, _80->CR1
 2971 0dba 22F04002 		bic	r2, r2, #64	@ _82, _81,
 2972 0dbe 1A60     		str	r2, [r3]	@ _82, _80->CR1
2098:src/stm32f1xx_hal_spi.c ****     }
 2973              		.loc 1 2098 0
 2974 0dc0 5A68     		ldr	r2, [r3, #4]	@ _84, _80->CR2
 2975 0dc2 22F00102 		bic	r2, r2, #1	@ _85, _84,
 2976 0dc6 5A60     		str	r2, [r3, #4]	@ _85, _80->CR2
 2977              	.L347:
2102:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = 0U;
 2978              		.loc 1 2102 0
 2979 0dc8 0023     		movs	r3, #0	@ tmp192,
 2980 0dca E387     		strh	r3, [r4, #62]	@ movhi	@ tmp192, hspi_21(D)->RxXferCount
2103:src/stm32f1xx_hal_spi.c **** 
 2981              		.loc 1 2103 0
ARM GAS  /tmp/ccdPJtdr.s 			page 132


 2982 0dcc E386     		strh	r3, [r4, #54]	@ movhi	@ tmp192, hspi_21(D)->TxXferCount
2106:src/stm32f1xx_hal_spi.c ****   {
 2983              		.loc 1 2106 0
 2984 0dce 626D     		ldr	r2, [r4, #84]	@ _89, hspi_21(D)->ErrorCode
 2985 0dd0 402A     		cmp	r2, #64	@ _89,
2114:src/stm32f1xx_hal_spi.c ****   }
 2986              		.loc 1 2114 0
 2987 0dd2 1CBF     		itt	ne
 2988 0dd4 6365     		strne	r3, [r4, #84]	@ tmp200, hspi_21(D)->ErrorCode
2004:src/stm32f1xx_hal_spi.c ****   resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 2989              		.loc 1 2004 0
 2990 0dd6 1846     		movne	r0, r3	@ <retval>, tmp200
 2991              	.LBB45:
2118:src/stm32f1xx_hal_spi.c **** 
 2992              		.loc 1 2118 0
 2993 0dd8 0393     		str	r3, [sp, #12]	@ tmp200, tmpreg_ovr
 2994 0dda 2368     		ldr	r3, [r4]	@ _92, hspi_21(D)->Instance
 2995              	.LBE45:
2109:src/stm32f1xx_hal_spi.c ****   }
 2996              		.loc 1 2109 0
 2997 0ddc 08BF     		it	eq
 2998 0dde 0120     		moveq	r0, #1	@ <retval>,
 2999              	.LVL187:
 3000              	.LBB46:
2118:src/stm32f1xx_hal_spi.c **** 
 3001              		.loc 1 2118 0
 3002 0de0 DA68     		ldr	r2, [r3, #12]	@ tmpreg_ovr.50_93, _92->DR
 3003 0de2 0392     		str	r2, [sp, #12]	@ tmpreg_ovr.50_93, tmpreg_ovr
 3004 0de4 9B68     		ldr	r3, [r3, #8]	@ tmpreg_ovr.51_95, _92->SR
 3005 0de6 0393     		str	r3, [sp, #12]	@ tmpreg_ovr.51_95, tmpreg_ovr
 3006 0de8 039B     		ldr	r3, [sp, #12]	@ vol.52_97, tmpreg_ovr
 3007              	.LBE46:
2121:src/stm32f1xx_hal_spi.c **** 
 3008              		.loc 1 2121 0
 3009 0dea 0123     		movs	r3, #1	@ tmp197,
 3010 0dec 84F85130 		strb	r3, [r4, #81]	@ tmp197, hspi_21(D)->State
2124:src/stm32f1xx_hal_spi.c **** 
 3011              		.loc 1 2124 0
 3012 0df0 04B0     		add	sp, sp, #16	@,,
 3013              	.LCFI33:
 3014              		.cfi_remember_state
 3015              		.cfi_def_cfa_offset 8
 3016              		@ sp needed	@
 3017 0df2 10BD     		pop	{r4, pc}	@
 3018              	.LVL188:
 3019              	.L334:
 3020              	.LCFI34:
 3021              		.cfi_restore_state
2023:src/stm32f1xx_hal_spi.c ****     } while (hspi->State != HAL_SPI_STATE_ABORT);
 3022              		.loc 1 2023 0
 3023 0df4 019A     		ldr	r2, [sp, #4]	@ count.40_30, count
 3024 0df6 013A     		subs	r2, r2, #1	@ count.41_31, count.40_30,
 3025 0df8 0192     		str	r2, [sp, #4]	@ count.41_31, count
2024:src/stm32f1xx_hal_spi.c ****     /* Reset Timeout Counter */
 3026              		.loc 1 2024 0
 3027 0dfa 94F85120 		ldrb	r2, [r4, #81]	@ zero_extendqisi2	@ hspi_21(D)->State, hspi_21(D)->State
 3028 0dfe 072A     		cmp	r2, #7	@ hspi_21(D)->State,
ARM GAS  /tmp/ccdPJtdr.s 			page 133


 3029 0e00 9DD1     		bne	.L336	@,
 3030 0e02 A3E7     		b	.L335	@
 3031              	.LVL189:
 3032              	.L338:
2040:src/stm32f1xx_hal_spi.c ****     } while (hspi->State != HAL_SPI_STATE_ABORT);
 3033              		.loc 1 2040 0
 3034 0e04 019A     		ldr	r2, [sp, #4]	@ count.44_43, count
 3035 0e06 013A     		subs	r2, r2, #1	@ count.45_44, count.44_43,
 3036 0e08 0192     		str	r2, [sp, #4]	@ count.45_44, count
2041:src/stm32f1xx_hal_spi.c ****     /* Reset Timeout Counter */
 3037              		.loc 1 2041 0
 3038 0e0a 94F85120 		ldrb	r2, [r4, #81]	@ zero_extendqisi2	@ hspi_21(D)->State, hspi_21(D)->State
 3039 0e0e 072A     		cmp	r2, #7	@ hspi_21(D)->State,
 3040 0e10 A3D1     		bne	.L340	@,
 3041 0e12 A9E7     		b	.L339	@
 3042              	.L345:
2073:src/stm32f1xx_hal_spi.c ****       } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 3043              		.loc 1 2073 0
 3044 0e14 019A     		ldr	r2, [sp, #4]	@ count.48_64, count
 3045 0e16 013A     		subs	r2, r2, #1	@ count.49_65, count.48_64,
 3046 0e18 0192     		str	r2, [sp, #4]	@ count.49_65, count
2074:src/stm32f1xx_hal_spi.c ****     }
 3047              		.loc 1 2074 0
 3048 0e1a 9A68     		ldr	r2, [r3, #8]	@ _67, _59->SR
 3049 0e1c 9207     		lsls	r2, r2, #30	@, _67,
 3050 0e1e B6D5     		bpl	.L346	@,
 3051 0e20 BCE7     		b	.L342	@
 3052              	.L377:
 3053 0e22 00BF     		.align	2
 3054              	.L376:
 3055 0e24 00000000 		.word	SystemCoreClock
 3056 0e28 00000000 		.word	SPI_AbortTx_ISR
 3057 0e2c 00000000 		.word	SPI_AbortRx_ISR
 3058              		.cfi_endproc
 3059              	.LFE78:
 3060              		.size	HAL_SPI_Abort, .-HAL_SPI_Abort
 3061              		.align	1
 3062              		.global	HAL_SPI_DMAPause
 3063              		.syntax unified
 3064              		.thumb
 3065              		.thumb_func
 3066              		.fpu softvfp
 3067              		.type	HAL_SPI_DMAPause, %function
 3068              	HAL_SPI_DMAPause:
 3069              	.LFB80:
2302:src/stm32f1xx_hal_spi.c ****   /* Process Locked */
 3070              		.loc 1 2302 0
 3071              		.cfi_startproc
 3072              		@ args = 0, pretend = 0, frame = 0
 3073              		@ frame_needed = 0, uses_anonymous_args = 0
 3074              		@ link register save eliminated.
 3075              	.LVL190:
2304:src/stm32f1xx_hal_spi.c **** 
 3076              		.loc 1 2304 0
 3077 0e30 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2	@ hspi_4(D)->Lock, hspi_4(D)->Lock
 3078 0e34 012B     		cmp	r3, #1	@ hspi_4(D)->Lock,
2307:src/stm32f1xx_hal_spi.c **** 
ARM GAS  /tmp/ccdPJtdr.s 			page 134


 3079              		.loc 1 2307 0
 3080 0e36 1FBF     		itttt	ne
 3081 0e38 0268     		ldrne	r2, [r0]	@ _6, hspi_4(D)->Instance
 3082 0e3a 5368     		ldrne	r3, [r2, #4]	@ _7, _6->CR2
 3083 0e3c 23F00303 		bicne	r3, r3, #3	@ _8, _7,
 3084 0e40 5360     		strne	r3, [r2, #4]	@ _8, _6->CR2
2310:src/stm32f1xx_hal_spi.c **** 
 3085              		.loc 1 2310 0
 3086 0e42 1DBF     		ittte	ne
 3087 0e44 0023     		movne	r3, #0	@ tmp117,
 3088 0e46 80F85030 		strbne	r3, [r0, #80]	@ tmp117, hspi_4(D)->Lock
2312:src/stm32f1xx_hal_spi.c **** }
 3089              		.loc 1 2312 0
 3090 0e4a 1846     		movne	r0, r3	@ <retval>, tmp117
 3091              	.LVL191:
2304:src/stm32f1xx_hal_spi.c **** 
 3092              		.loc 1 2304 0
 3093 0e4c 0220     		moveq	r0, #2	@ <retval>,
2313:src/stm32f1xx_hal_spi.c **** 
 3094              		.loc 1 2313 0
 3095 0e4e 7047     		bx	lr	@
 3096              		.cfi_endproc
 3097              	.LFE80:
 3098              		.size	HAL_SPI_DMAPause, .-HAL_SPI_DMAPause
 3099              		.align	1
 3100              		.global	HAL_SPI_DMAResume
 3101              		.syntax unified
 3102              		.thumb
 3103              		.thumb_func
 3104              		.fpu softvfp
 3105              		.type	HAL_SPI_DMAResume, %function
 3106              	HAL_SPI_DMAResume:
 3107              	.LFB81:
2322:src/stm32f1xx_hal_spi.c ****   /* Process Locked */
 3108              		.loc 1 2322 0
 3109              		.cfi_startproc
 3110              		@ args = 0, pretend = 0, frame = 0
 3111              		@ frame_needed = 0, uses_anonymous_args = 0
 3112              		@ link register save eliminated.
 3113              	.LVL192:
2324:src/stm32f1xx_hal_spi.c **** 
 3114              		.loc 1 2324 0
 3115 0e50 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2	@ hspi_4(D)->Lock, hspi_4(D)->Lock
 3116 0e54 012B     		cmp	r3, #1	@ hspi_4(D)->Lock,
2327:src/stm32f1xx_hal_spi.c **** 
 3117              		.loc 1 2327 0
 3118 0e56 1FBF     		itttt	ne
 3119 0e58 0268     		ldrne	r2, [r0]	@ _6, hspi_4(D)->Instance
 3120 0e5a 5368     		ldrne	r3, [r2, #4]	@ _7, _6->CR2
 3121 0e5c 43F00303 		orrne	r3, r3, #3	@ _8, _7,
 3122 0e60 5360     		strne	r3, [r2, #4]	@ _8, _6->CR2
2330:src/stm32f1xx_hal_spi.c **** 
 3123              		.loc 1 2330 0
 3124 0e62 1DBF     		ittte	ne
 3125 0e64 0023     		movne	r3, #0	@ tmp117,
 3126 0e66 80F85030 		strbne	r3, [r0, #80]	@ tmp117, hspi_4(D)->Lock
2332:src/stm32f1xx_hal_spi.c **** }
ARM GAS  /tmp/ccdPJtdr.s 			page 135


 3127              		.loc 1 2332 0
 3128 0e6a 1846     		movne	r0, r3	@ <retval>, tmp117
 3129              	.LVL193:
2324:src/stm32f1xx_hal_spi.c **** 
 3130              		.loc 1 2324 0
 3131 0e6c 0220     		moveq	r0, #2	@ <retval>,
2333:src/stm32f1xx_hal_spi.c **** 
 3132              		.loc 1 2333 0
 3133 0e6e 7047     		bx	lr	@
 3134              		.cfi_endproc
 3135              	.LFE81:
 3136              		.size	HAL_SPI_DMAResume, .-HAL_SPI_DMAResume
 3137              		.align	1
 3138              		.global	HAL_SPI_DMAStop
 3139              		.syntax unified
 3140              		.thumb
 3141              		.thumb_func
 3142              		.fpu softvfp
 3143              		.type	HAL_SPI_DMAStop, %function
 3144              	HAL_SPI_DMAStop:
 3145              	.LFB82:
2342:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 3146              		.loc 1 2342 0
 3147              		.cfi_startproc
 3148              		@ args = 0, pretend = 0, frame = 0
 3149              		@ frame_needed = 0, uses_anonymous_args = 0
 3150              	.LVL194:
 3151 0e70 38B5     		push	{r3, r4, r5, lr}	@
 3152              	.LCFI35:
 3153              		.cfi_def_cfa_offset 16
 3154              		.cfi_offset 3, -16
 3155              		.cfi_offset 4, -12
 3156              		.cfi_offset 5, -8
 3157              		.cfi_offset 14, -4
2342:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 3158              		.loc 1 2342 0
 3159 0e72 0446     		mov	r4, r0	@ hspi, hspi
2351:src/stm32f1xx_hal_spi.c ****   {
 3160              		.loc 1 2351 0
 3161 0e74 806C     		ldr	r0, [r0, #72]	@ _7, hspi_6(D)->hdmatx
 3162              	.LVL195:
 3163 0e76 A0B9     		cbnz	r0, .L385	@ _7,
 3164              	.L387:
2343:src/stm32f1xx_hal_spi.c ****   /* The Lock is not implemented on this API to allow the user application
 3165              		.loc 1 2343 0
 3166 0e78 0025     		movs	r5, #0	@ <retval>,
 3167              	.LVL196:
 3168              	.L386:
2360:src/stm32f1xx_hal_spi.c ****   {
 3169              		.loc 1 2360 0
 3170 0e7a E06C     		ldr	r0, [r4, #76]	@ _13, hspi_6(D)->hdmarx
 3171 0e7c 38B1     		cbz	r0, .L388	@ _13,
2362:src/stm32f1xx_hal_spi.c ****     {
 3172              		.loc 1 2362 0
 3173 0e7e FFF7FEFF 		bl	HAL_DMA_Abort	@
 3174              	.LVL197:
 3175 0e82 20B1     		cbz	r0, .L388	@,
ARM GAS  /tmp/ccdPJtdr.s 			page 136


2365:src/stm32f1xx_hal_spi.c ****     }
 3176              		.loc 1 2365 0
 3177 0e84 0125     		movs	r5, #1	@ <retval>,
 3178              	.LVL198:
2364:src/stm32f1xx_hal_spi.c ****       errorcode = HAL_ERROR;
 3179              		.loc 1 2364 0
 3180 0e86 636D     		ldr	r3, [r4, #84]	@ _16, hspi_6(D)->ErrorCode
 3181 0e88 43F01003 		orr	r3, r3, #16	@ _17, _16,
 3182 0e8c 6365     		str	r3, [r4, #84]	@ _17, hspi_6(D)->ErrorCode
 3183              	.LVL199:
 3184              	.L388:
2370:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
 3185              		.loc 1 2370 0
 3186 0e8e 2268     		ldr	r2, [r4]	@ _19, hspi_6(D)->Instance
2373:src/stm32f1xx_hal_spi.c **** 
 3187              		.loc 1 2373 0
 3188 0e90 2846     		mov	r0, r5	@, <retval>
2370:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
 3189              		.loc 1 2370 0
 3190 0e92 5368     		ldr	r3, [r2, #4]	@ _20, _19->CR2
 3191 0e94 23F00303 		bic	r3, r3, #3	@ _21, _20,
 3192 0e98 5360     		str	r3, [r2, #4]	@ _21, _19->CR2
2371:src/stm32f1xx_hal_spi.c ****   return errorcode;
 3193              		.loc 1 2371 0
 3194 0e9a 0123     		movs	r3, #1	@ tmp125,
 3195 0e9c 84F85130 		strb	r3, [r4, #81]	@ tmp125, hspi_6(D)->State
2373:src/stm32f1xx_hal_spi.c **** 
 3196              		.loc 1 2373 0
 3197 0ea0 38BD     		pop	{r3, r4, r5, pc}	@
 3198              	.LVL200:
 3199              	.L385:
2353:src/stm32f1xx_hal_spi.c ****     {
 3200              		.loc 1 2353 0
 3201 0ea2 FFF7FEFF 		bl	HAL_DMA_Abort	@
 3202              	.LVL201:
 3203 0ea6 0028     		cmp	r0, #0	@
 3204 0ea8 E6D0     		beq	.L387	@
2355:src/stm32f1xx_hal_spi.c ****       errorcode = HAL_ERROR;
 3205              		.loc 1 2355 0
 3206 0eaa 636D     		ldr	r3, [r4, #84]	@ _10, hspi_6(D)->ErrorCode
2356:src/stm32f1xx_hal_spi.c ****     }
 3207              		.loc 1 2356 0
 3208 0eac 0125     		movs	r5, #1	@ <retval>,
2355:src/stm32f1xx_hal_spi.c ****       errorcode = HAL_ERROR;
 3209              		.loc 1 2355 0
 3210 0eae 43F01003 		orr	r3, r3, #16	@ _11, _10,
 3211 0eb2 6365     		str	r3, [r4, #84]	@ _11, hspi_6(D)->ErrorCode
 3212              	.LVL202:
 3213 0eb4 E1E7     		b	.L386	@
 3214              		.cfi_endproc
 3215              	.LFE82:
 3216              		.size	HAL_SPI_DMAStop, .-HAL_SPI_DMAStop
 3217              		.align	1
 3218              		.weak	HAL_SPI_TxCpltCallback
 3219              		.syntax unified
 3220              		.thumb
 3221              		.thumb_func
ARM GAS  /tmp/ccdPJtdr.s 			page 137


 3222              		.fpu softvfp
 3223              		.type	HAL_SPI_TxCpltCallback, %function
 3224              	HAL_SPI_TxCpltCallback:
 3225              	.LFB148:
 3226              		.cfi_startproc
 3227              		@ args = 0, pretend = 0, frame = 0
 3228              		@ frame_needed = 0, uses_anonymous_args = 0
 3229              		@ link register save eliminated.
 3230 0eb6 7047     		bx	lr	@
 3231              		.cfi_endproc
 3232              	.LFE148:
 3233              		.size	HAL_SPI_TxCpltCallback, .-HAL_SPI_TxCpltCallback
 3234              		.align	1
 3235              		.weak	HAL_SPI_RxCpltCallback
 3236              		.syntax unified
 3237              		.thumb
 3238              		.thumb_func
 3239              		.fpu softvfp
 3240              		.type	HAL_SPI_RxCpltCallback, %function
 3241              	HAL_SPI_RxCpltCallback:
 3242              	.LFB146:
 3243              		.cfi_startproc
 3244              		@ args = 0, pretend = 0, frame = 0
 3245              		@ frame_needed = 0, uses_anonymous_args = 0
 3246              		@ link register save eliminated.
 3247 0eb8 7047     		bx	lr	@
 3248              		.cfi_endproc
 3249              	.LFE146:
 3250              		.size	HAL_SPI_RxCpltCallback, .-HAL_SPI_RxCpltCallback
 3251              		.align	1
 3252              		.weak	HAL_SPI_TxRxCpltCallback
 3253              		.syntax unified
 3254              		.thumb
 3255              		.thumb_func
 3256              		.fpu softvfp
 3257              		.type	HAL_SPI_TxRxCpltCallback, %function
 3258              	HAL_SPI_TxRxCpltCallback:
 3259              	.LFB144:
 3260              		.cfi_startproc
 3261              		@ args = 0, pretend = 0, frame = 0
 3262              		@ frame_needed = 0, uses_anonymous_args = 0
 3263              		@ link register save eliminated.
 3264 0eba 7047     		bx	lr	@
 3265              		.cfi_endproc
 3266              	.LFE144:
 3267              		.size	HAL_SPI_TxRxCpltCallback, .-HAL_SPI_TxRxCpltCallback
 3268              		.align	1
 3269              		.weak	HAL_SPI_TxHalfCpltCallback
 3270              		.syntax unified
 3271              		.thumb
 3272              		.thumb_func
 3273              		.fpu softvfp
 3274              		.type	HAL_SPI_TxHalfCpltCallback, %function
 3275              	HAL_SPI_TxHalfCpltCallback:
 3276              	.LFB142:
 3277              		.cfi_startproc
 3278              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccdPJtdr.s 			page 138


 3279              		@ frame_needed = 0, uses_anonymous_args = 0
 3280              		@ link register save eliminated.
 3281 0ebc 7047     		bx	lr	@
 3282              		.cfi_endproc
 3283              	.LFE142:
 3284              		.size	HAL_SPI_TxHalfCpltCallback, .-HAL_SPI_TxHalfCpltCallback
 3285              		.align	1
 3286              		.syntax unified
 3287              		.thumb
 3288              		.thumb_func
 3289              		.fpu softvfp
 3290              		.type	SPI_DMAHalfTransmitCplt, %function
 3291              	SPI_DMAHalfTransmitCplt:
 3292              	.LFB97:
2897:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 3293              		.loc 1 2897 0
 3294              		.cfi_startproc
 3295              		@ args = 0, pretend = 0, frame = 0
 3296              		@ frame_needed = 0, uses_anonymous_args = 0
 3297              	.LVL203:
2897:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 3298              		.loc 1 2897 0
 3299 0ebe 08B5     		push	{r3, lr}	@
 3300              	.LCFI36:
 3301              		.cfi_def_cfa_offset 8
 3302              		.cfi_offset 3, -8
 3303              		.cfi_offset 14, -4
2904:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 3304              		.loc 1 2904 0
 3305 0ec0 406A     		ldr	r0, [r0, #36]	@, hdma_2(D)->Parent
 3306              	.LVL204:
 3307 0ec2 FFF7FEFF 		bl	HAL_SPI_TxHalfCpltCallback	@
 3308              	.LVL205:
 3309 0ec6 08BD     		pop	{r3, pc}	@
 3310              		.cfi_endproc
 3311              	.LFE97:
 3312              		.size	SPI_DMAHalfTransmitCplt, .-SPI_DMAHalfTransmitCplt
 3313              		.align	1
 3314              		.weak	HAL_SPI_RxHalfCpltCallback
 3315              		.syntax unified
 3316              		.thumb
 3317              		.thumb_func
 3318              		.fpu softvfp
 3319              		.type	HAL_SPI_RxHalfCpltCallback, %function
 3320              	HAL_SPI_RxHalfCpltCallback:
 3321              	.LFB140:
 3322              		.cfi_startproc
 3323              		@ args = 0, pretend = 0, frame = 0
 3324              		@ frame_needed = 0, uses_anonymous_args = 0
 3325              		@ link register save eliminated.
 3326 0ec8 7047     		bx	lr	@
 3327              		.cfi_endproc
 3328              	.LFE140:
 3329              		.size	HAL_SPI_RxHalfCpltCallback, .-HAL_SPI_RxHalfCpltCallback
 3330              		.align	1
 3331              		.syntax unified
 3332              		.thumb
ARM GAS  /tmp/ccdPJtdr.s 			page 139


 3333              		.thumb_func
 3334              		.fpu softvfp
 3335              		.type	SPI_DMAHalfReceiveCplt, %function
 3336              	SPI_DMAHalfReceiveCplt:
 3337              	.LFB98:
2915:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 3338              		.loc 1 2915 0
 3339              		.cfi_startproc
 3340              		@ args = 0, pretend = 0, frame = 0
 3341              		@ frame_needed = 0, uses_anonymous_args = 0
 3342              	.LVL206:
2915:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 3343              		.loc 1 2915 0
 3344 0eca 08B5     		push	{r3, lr}	@
 3345              	.LCFI37:
 3346              		.cfi_def_cfa_offset 8
 3347              		.cfi_offset 3, -8
 3348              		.cfi_offset 14, -4
2922:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 3349              		.loc 1 2922 0
 3350 0ecc 406A     		ldr	r0, [r0, #36]	@, hdma_2(D)->Parent
 3351              	.LVL207:
 3352 0ece FFF7FEFF 		bl	HAL_SPI_RxHalfCpltCallback	@
 3353              	.LVL208:
 3354 0ed2 08BD     		pop	{r3, pc}	@
 3355              		.cfi_endproc
 3356              	.LFE98:
 3357              		.size	SPI_DMAHalfReceiveCplt, .-SPI_DMAHalfReceiveCplt
 3358              		.align	1
 3359              		.weak	HAL_SPI_TxRxHalfCpltCallback
 3360              		.syntax unified
 3361              		.thumb
 3362              		.thumb_func
 3363              		.fpu softvfp
 3364              		.type	HAL_SPI_TxRxHalfCpltCallback, %function
 3365              	HAL_SPI_TxRxHalfCpltCallback:
 3366              	.LFB138:
 3367              		.cfi_startproc
 3368              		@ args = 0, pretend = 0, frame = 0
 3369              		@ frame_needed = 0, uses_anonymous_args = 0
 3370              		@ link register save eliminated.
 3371 0ed4 7047     		bx	lr	@
 3372              		.cfi_endproc
 3373              	.LFE138:
 3374              		.size	HAL_SPI_TxRxHalfCpltCallback, .-HAL_SPI_TxRxHalfCpltCallback
 3375              		.align	1
 3376              		.syntax unified
 3377              		.thumb
 3378              		.thumb_func
 3379              		.fpu softvfp
 3380              		.type	SPI_DMAHalfTransmitReceiveCplt, %function
 3381              	SPI_DMAHalfTransmitReceiveCplt:
 3382              	.LFB99:
2933:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 3383              		.loc 1 2933 0
 3384              		.cfi_startproc
 3385              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccdPJtdr.s 			page 140


 3386              		@ frame_needed = 0, uses_anonymous_args = 0
 3387              	.LVL209:
2933:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 3388              		.loc 1 2933 0
 3389 0ed6 08B5     		push	{r3, lr}	@
 3390              	.LCFI38:
 3391              		.cfi_def_cfa_offset 8
 3392              		.cfi_offset 3, -8
 3393              		.cfi_offset 14, -4
2940:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 3394              		.loc 1 2940 0
 3395 0ed8 406A     		ldr	r0, [r0, #36]	@, hdma_2(D)->Parent
 3396              	.LVL210:
 3397 0eda FFF7FEFF 		bl	HAL_SPI_TxRxHalfCpltCallback	@
 3398              	.LVL211:
 3399 0ede 08BD     		pop	{r3, pc}	@
 3400              		.cfi_endproc
 3401              	.LFE99:
 3402              		.size	SPI_DMAHalfTransmitReceiveCplt, .-SPI_DMAHalfTransmitReceiveCplt
 3403              		.align	1
 3404              		.weak	HAL_SPI_ErrorCallback
 3405              		.syntax unified
 3406              		.thumb
 3407              		.thumb_func
 3408              		.fpu softvfp
 3409              		.type	HAL_SPI_ErrorCallback, %function
 3410              	HAL_SPI_ErrorCallback:
 3411              	.LFB136:
 3412              		.cfi_startproc
 3413              		@ args = 0, pretend = 0, frame = 0
 3414              		@ frame_needed = 0, uses_anonymous_args = 0
 3415              		@ link register save eliminated.
 3416 0ee0 7047     		bx	lr	@
 3417              		.cfi_endproc
 3418              	.LFE136:
 3419              		.size	HAL_SPI_ErrorCallback, .-HAL_SPI_ErrorCallback
 3420              		.align	1
 3421              		.syntax unified
 3422              		.thumb
 3423              		.thumb_func
 3424              		.fpu softvfp
 3425              		.type	SPI_CloseTx_ISR, %function
 3426              	SPI_CloseTx_ISR:
 3427              	.LFB121:
3753:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 3428              		.loc 1 3753 0
 3429              		.cfi_startproc
 3430              		@ args = 0, pretend = 0, frame = 8
 3431              		@ frame_needed = 0, uses_anonymous_args = 0
 3432              	.LVL212:
3755:src/stm32f1xx_hal_spi.c **** 
 3433              		.loc 1 3755 0
 3434 0ee2 45F6C052 		movw	r2, #24000	@ tmp139,
 3435 0ee6 1E4B     		ldr	r3, .L421	@ tmp135,
3753:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 3436              		.loc 1 3753 0
 3437 0ee8 13B5     		push	{r0, r1, r4, lr}	@
ARM GAS  /tmp/ccdPJtdr.s 			page 141


 3438              	.LCFI39:
 3439              		.cfi_def_cfa_offset 16
 3440              		.cfi_offset 4, -8
 3441              		.cfi_offset 14, -4
3755:src/stm32f1xx_hal_spi.c **** 
 3442              		.loc 1 3755 0
 3443 0eea 1B68     		ldr	r3, [r3]	@ SystemCoreClock, SystemCoreClock
3753:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 3444              		.loc 1 3753 0
 3445 0eec 0446     		mov	r4, r0	@ hspi, hspi
3755:src/stm32f1xx_hal_spi.c **** 
 3446              		.loc 1 3755 0
 3447 0eee B3FBF2F2 		udiv	r2, r3, r2	@ tmp138, SystemCoreClock, tmp139
 3448 0ef2 6423     		movs	r3, #100	@ tmp140,
 3449 0ef4 5343     		muls	r3, r2, r3	@ count.9_9, tmp138
 3450 0ef6 0093     		str	r3, [sp]	@ count.9_9, count
3758:src/stm32f1xx_hal_spi.c **** 
 3451              		.loc 1 3758 0
 3452 0ef8 FFF7FEFF 		bl	HAL_GetTick	@
 3453              	.LVL213:
 3454 0efc 0246     		mov	r2, r0	@ tickstart,
 3455              	.LVL214:
 3456              	.L411:
3763:src/stm32f1xx_hal_spi.c ****     {
 3457              		.loc 1 3763 0
 3458 0efe 0099     		ldr	r1, [sp]	@ count.10_13, count
 3459 0f00 2368     		ldr	r3, [r4]	@ _24, hspi_17(D)->Instance
 3460 0f02 19BB     		cbnz	r1, .L409	@ count.10_13,
3765:src/stm32f1xx_hal_spi.c ****       break;
 3461              		.loc 1 3765 0
 3462 0f04 616D     		ldr	r1, [r4, #84]	@ _21, hspi_17(D)->ErrorCode
 3463 0f06 41F02001 		orr	r1, r1, #32	@ _22, _21,
 3464 0f0a 6165     		str	r1, [r4, #84]	@ _22, hspi_17(D)->ErrorCode
 3465              	.L410:
3772:src/stm32f1xx_hal_spi.c **** 
 3466              		.loc 1 3772 0
 3467 0f0c 5968     		ldr	r1, [r3, #4]	@ _25, _24->CR2
3775:src/stm32f1xx_hal_spi.c ****   {
 3468              		.loc 1 3775 0
 3469 0f0e 2046     		mov	r0, r4	@, hspi
 3470              	.LVL215:
3772:src/stm32f1xx_hal_spi.c **** 
 3471              		.loc 1 3772 0
 3472 0f10 21F0A001 		bic	r1, r1, #160	@ _26, _25,
 3473 0f14 5960     		str	r1, [r3, #4]	@ _26, _24->CR2
3775:src/stm32f1xx_hal_spi.c ****   {
 3474              		.loc 1 3775 0
 3475 0f16 6421     		movs	r1, #100	@,
 3476 0f18 FFF7EAF8 		bl	SPI_EndRxTxTransaction	@
 3477              	.LVL216:
 3478 0f1c 18B1     		cbz	r0, .L412	@,
3777:src/stm32f1xx_hal_spi.c ****   }
 3479              		.loc 1 3777 0
 3480 0f1e 636D     		ldr	r3, [r4, #84]	@ _30, hspi_17(D)->ErrorCode
 3481 0f20 43F02003 		orr	r3, r3, #32	@ _31, _30,
 3482 0f24 6365     		str	r3, [r4, #84]	@ _31, hspi_17(D)->ErrorCode
 3483              	.L412:
ARM GAS  /tmp/ccdPJtdr.s 			page 142


3781:src/stm32f1xx_hal_spi.c ****   {
 3484              		.loc 1 3781 0
 3485 0f26 A368     		ldr	r3, [r4, #8]	@ hspi_17(D)->Init.Direction, hspi_17(D)->Init.Direction
 3486 0f28 33B9     		cbnz	r3, .L413	@ hspi_17(D)->Init.Direction,
 3487              	.LBB47:
3783:src/stm32f1xx_hal_spi.c ****   }
 3488              		.loc 1 3783 0
 3489 0f2a 0193     		str	r3, [sp, #4]	@ hspi_17(D)->Init.Direction, tmpreg_ovr
 3490 0f2c 2368     		ldr	r3, [r4]	@ _35, hspi_17(D)->Instance
 3491 0f2e DA68     		ldr	r2, [r3, #12]	@ tmpreg_ovr.13_36, _35->DR
 3492 0f30 0192     		str	r2, [sp, #4]	@ tmpreg_ovr.13_36, tmpreg_ovr
 3493 0f32 9B68     		ldr	r3, [r3, #8]	@ tmpreg_ovr.14_38, _35->SR
 3494 0f34 0193     		str	r3, [sp, #4]	@ tmpreg_ovr.14_38, tmpreg_ovr
 3495 0f36 019B     		ldr	r3, [sp, #4]	@ vol.15_40, tmpreg_ovr
 3496              	.L413:
 3497              	.LBE47:
3786:src/stm32f1xx_hal_spi.c ****   if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 3498              		.loc 1 3786 0
 3499 0f38 0123     		movs	r3, #1	@ tmp145,
 3500 0f3a 84F85130 		strb	r3, [r4, #81]	@ tmp145, hspi_17(D)->State
3787:src/stm32f1xx_hal_spi.c ****   {
 3501              		.loc 1 3787 0
 3502 0f3e 636D     		ldr	r3, [r4, #84]	@ _42, hspi_17(D)->ErrorCode
3793:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 3503              		.loc 1 3793 0
 3504 0f40 2046     		mov	r0, r4	@, hspi
3787:src/stm32f1xx_hal_spi.c ****   {
 3505              		.loc 1 3787 0
 3506 0f42 53B1     		cbz	r3, .L414	@ _42,
 3507              	.LVL217:
3793:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 3508              		.loc 1 3793 0
 3509 0f44 FFF7FEFF 		bl	HAL_SPI_ErrorCallback	@
 3510              	.LVL218:
 3511              	.L408:
3805:src/stm32f1xx_hal_spi.c **** 
 3512              		.loc 1 3805 0
 3513 0f48 02B0     		add	sp, sp, #8	@,,
 3514              	.LCFI40:
 3515              		.cfi_remember_state
 3516              		.cfi_def_cfa_offset 8
 3517              		@ sp needed	@
 3518 0f4a 10BD     		pop	{r4, pc}	@
 3519              	.LVL219:
 3520              	.L409:
 3521              	.LCFI41:
 3522              		.cfi_restore_state
3768:src/stm32f1xx_hal_spi.c ****   } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 3523              		.loc 1 3768 0
 3524 0f4c 0099     		ldr	r1, [sp]	@ count.11_14, count
 3525 0f4e 0139     		subs	r1, r1, #1	@ count.12_15, count.11_14,
 3526 0f50 0091     		str	r1, [sp]	@ count.12_15, count
3769:src/stm32f1xx_hal_spi.c **** 
 3527              		.loc 1 3769 0
 3528 0f52 9968     		ldr	r1, [r3, #8]	@ _19, _18->SR
 3529 0f54 8907     		lsls	r1, r1, #30	@, _19,
 3530 0f56 D2D5     		bpl	.L411	@,
ARM GAS  /tmp/ccdPJtdr.s 			page 143


 3531 0f58 D8E7     		b	.L410	@
 3532              	.LVL220:
 3533              	.L414:
3802:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 3534              		.loc 1 3802 0
 3535 0f5a FFF7FEFF 		bl	HAL_SPI_TxCpltCallback	@
 3536              	.LVL221:
3805:src/stm32f1xx_hal_spi.c **** 
 3537              		.loc 1 3805 0
 3538 0f5e F3E7     		b	.L408	@
 3539              	.L422:
 3540              		.align	2
 3541              	.L421:
 3542 0f60 00000000 		.word	SystemCoreClock
 3543              		.cfi_endproc
 3544              	.LFE121:
 3545              		.size	SPI_CloseTx_ISR, .-SPI_CloseTx_ISR
 3546              		.align	1
 3547              		.syntax unified
 3548              		.thumb
 3549              		.thumb_func
 3550              		.fpu softvfp
 3551              		.type	SPI_TxISR_8BIT, %function
 3552              	SPI_TxISR_8BIT:
 3553              	.LFB114:
3414:src/stm32f1xx_hal_spi.c ****   *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 3554              		.loc 1 3414 0
 3555              		.cfi_startproc
 3556              		@ args = 0, pretend = 0, frame = 0
 3557              		@ frame_needed = 0, uses_anonymous_args = 0
 3558              		@ link register save eliminated.
 3559              	.LVL222:
3415:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr++;
 3560              		.loc 1 3415 0
 3561 0f64 026B     		ldr	r2, [r0, #48]	@ hspi_2(D)->pTxBuffPtr, hspi_2(D)->pTxBuffPtr
 3562 0f66 0368     		ldr	r3, [r0]	@ _3, hspi_2(D)->Instance
 3563 0f68 1278     		ldrb	r2, [r2]	@ zero_extendqisi2	@ _6, *_5
 3564 0f6a 1A73     		strb	r2, [r3, #12]	@ _6, MEM[(volatile uint8_t *)_3 + 12B]
3416:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount--;
 3565              		.loc 1 3416 0
 3566 0f6c 036B     		ldr	r3, [r0, #48]	@ hspi_2(D)->pTxBuffPtr, hspi_2(D)->pTxBuffPtr
 3567 0f6e 0133     		adds	r3, r3, #1	@ tmp125, hspi_2(D)->pTxBuffPtr,
 3568 0f70 0363     		str	r3, [r0, #48]	@ tmp125, hspi_2(D)->pTxBuffPtr
3417:src/stm32f1xx_hal_spi.c **** 
 3569              		.loc 1 3417 0
 3570 0f72 C38E     		ldrh	r3, [r0, #54]	@, hspi_2(D)->TxXferCount
 3571 0f74 013B     		subs	r3, r3, #1	@ tmp129, hspi_2(D)->TxXferCount,
 3572 0f76 9BB2     		uxth	r3, r3	@ _12, tmp129
 3573 0f78 C386     		strh	r3, [r0, #54]	@ movhi	@ _12, hspi_2(D)->TxXferCount
3419:src/stm32f1xx_hal_spi.c ****   {
 3574              		.loc 1 3419 0
 3575 0f7a C38E     		ldrh	r3, [r0, #54]	@, hspi_2(D)->TxXferCount
 3576 0f7c 9BB2     		uxth	r3, r3	@ _14, hspi_2(D)->TxXferCount
 3577 0f7e 4BB9     		cbnz	r3, .L423	@ _14,
 3578              	.LVL223:
 3579              	.LBB50:
 3580              	.LBB51:
ARM GAS  /tmp/ccdPJtdr.s 			page 144


3422:src/stm32f1xx_hal_spi.c ****     {
 3581              		.loc 1 3422 0
 3582 0f80 836A     		ldr	r3, [r0, #40]	@ hspi_2(D)->Init.CRCCalculation, hspi_2(D)->Init.CRCCalculation
 3583 0f82 B3F5005F 		cmp	r3, #8192	@ hspi_2(D)->Init.CRCCalculation,
3425:src/stm32f1xx_hal_spi.c ****     }
 3584              		.loc 1 3425 0
 3585 0f86 01BF     		itttt	eq
 3586 0f88 0268     		ldreq	r2, [r0]	@ _17, hspi_2(D)->Instance
 3587 0f8a 1368     		ldreq	r3, [r2]	@ _18, _17->CR1
 3588 0f8c 43F48053 		orreq	r3, r3, #4096	@ _19, _18,
 3589 0f90 1360     		streq	r3, [r2]	@ _19, _17->CR1
3428:src/stm32f1xx_hal_spi.c ****   }
 3590              		.loc 1 3428 0
 3591 0f92 A6E7     		b	SPI_CloseTx_ISR	@
 3592              	.LVL224:
 3593              	.L423:
 3594 0f94 7047     		bx	lr	@
 3595              	.LBE51:
 3596              	.LBE50:
 3597              		.cfi_endproc
 3598              	.LFE114:
 3599              		.size	SPI_TxISR_8BIT, .-SPI_TxISR_8BIT
 3600              		.align	1
 3601              		.syntax unified
 3602              		.thumb
 3603              		.thumb_func
 3604              		.fpu softvfp
 3605              		.type	SPI_TxISR_16BIT, %function
 3606              	SPI_TxISR_16BIT:
 3607              	.LFB115:
3439:src/stm32f1xx_hal_spi.c ****   /* Transmit data in 16 Bit mode */
 3608              		.loc 1 3439 0
 3609              		.cfi_startproc
 3610              		@ args = 0, pretend = 0, frame = 0
 3611              		@ frame_needed = 0, uses_anonymous_args = 0
 3612              		@ link register save eliminated.
 3613              	.LVL225:
3441:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr += sizeof(uint16_t);
 3614              		.loc 1 3441 0
 3615 0f96 036B     		ldr	r3, [r0, #48]	@ tmp122, hspi_4(D)->pTxBuffPtr
 3616 0f98 0268     		ldr	r2, [r0]	@ _5, hspi_4(D)->Instance
 3617 0f9a 33F8021B 		ldrh	r1, [r3], #2	@ _8, MEM[(uint16_t *)_6]
 3618 0f9e D160     		str	r1, [r2, #12]	@ _8, _5->DR
3442:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount--;
 3619              		.loc 1 3442 0
 3620 0fa0 0363     		str	r3, [r0, #48]	@ tmp122, hspi_4(D)->pTxBuffPtr
3443:src/stm32f1xx_hal_spi.c **** 
 3621              		.loc 1 3443 0
 3622 0fa2 C38E     		ldrh	r3, [r0, #54]	@, hspi_4(D)->TxXferCount
 3623 0fa4 013B     		subs	r3, r3, #1	@ tmp125, hspi_4(D)->TxXferCount,
 3624 0fa6 9BB2     		uxth	r3, r3	@ _13, tmp125
 3625 0fa8 C386     		strh	r3, [r0, #54]	@ movhi	@ _13, hspi_4(D)->TxXferCount
3445:src/stm32f1xx_hal_spi.c ****   {
 3626              		.loc 1 3445 0
 3627 0faa C38E     		ldrh	r3, [r0, #54]	@, hspi_4(D)->TxXferCount
 3628 0fac 9BB2     		uxth	r3, r3	@ _15, hspi_4(D)->TxXferCount
 3629 0fae 43B9     		cbnz	r3, .L426	@ _15,
ARM GAS  /tmp/ccdPJtdr.s 			page 145


3448:src/stm32f1xx_hal_spi.c ****     {
 3630              		.loc 1 3448 0
 3631 0fb0 836A     		ldr	r3, [r0, #40]	@ hspi_4(D)->Init.CRCCalculation, hspi_4(D)->Init.CRCCalculation
 3632 0fb2 B3F5005F 		cmp	r3, #8192	@ hspi_4(D)->Init.CRCCalculation,
3451:src/stm32f1xx_hal_spi.c ****     }
 3633              		.loc 1 3451 0
 3634 0fb6 02BF     		ittt	eq
 3635 0fb8 1368     		ldreq	r3, [r2]	@ _17, _5->CR1
 3636 0fba 43F48053 		orreq	r3, r3, #4096	@ _18, _17,
 3637 0fbe 1360     		streq	r3, [r2]	@ _18, _5->CR1
3454:src/stm32f1xx_hal_spi.c ****   }
 3638              		.loc 1 3454 0
 3639 0fc0 8FE7     		b	SPI_CloseTx_ISR	@
 3640              	.LVL226:
 3641              	.L426:
 3642 0fc2 7047     		bx	lr	@
 3643              		.cfi_endproc
 3644              	.LFE115:
 3645              		.size	SPI_TxISR_16BIT, .-SPI_TxISR_16BIT
 3646              		.align	1
 3647              		.syntax unified
 3648              		.thumb
 3649              		.thumb_func
 3650              		.fpu softvfp
 3651              		.type	SPI_DMAError, %function
 3652              	SPI_DMAError:
 3653              	.LFB100:
2951:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 3654              		.loc 1 2951 0
 3655              		.cfi_startproc
 3656              		@ args = 0, pretend = 0, frame = 0
 3657              		@ frame_needed = 0, uses_anonymous_args = 0
 3658              	.LVL227:
2952:src/stm32f1xx_hal_spi.c **** 
 3659              		.loc 1 2952 0
 3660 0fc4 406A     		ldr	r0, [r0, #36]	@ hspi, hdma_2(D)->Parent
 3661              	.LVL228:
2951:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 3662              		.loc 1 2951 0
 3663 0fc6 08B5     		push	{r3, lr}	@
 3664              	.LCFI42:
 3665              		.cfi_def_cfa_offset 8
 3666              		.cfi_offset 3, -8
 3667              		.cfi_offset 14, -4
2955:src/stm32f1xx_hal_spi.c **** 
 3668              		.loc 1 2955 0
 3669 0fc8 0268     		ldr	r2, [r0]	@ _4, hspi_3->Instance
 3670 0fca 5368     		ldr	r3, [r2, #4]	@ _5, _4->CR2
 3671 0fcc 23F00303 		bic	r3, r3, #3	@ _6, _5,
 3672 0fd0 5360     		str	r3, [r2, #4]	@ _6, _4->CR2
2957:src/stm32f1xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
 3673              		.loc 1 2957 0
 3674 0fd2 436D     		ldr	r3, [r0, #84]	@ _8, hspi_3->ErrorCode
 3675 0fd4 43F01003 		orr	r3, r3, #16	@ _9, _8,
 3676 0fd8 4365     		str	r3, [r0, #84]	@ _9, hspi_3->ErrorCode
2958:src/stm32f1xx_hal_spi.c ****   /* Call user error callback */
 3677              		.loc 1 2958 0
ARM GAS  /tmp/ccdPJtdr.s 			page 146


 3678 0fda 0123     		movs	r3, #1	@ tmp117,
 3679 0fdc 80F85130 		strb	r3, [r0, #81]	@ tmp117, hspi_3->State
2963:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 3680              		.loc 1 2963 0
 3681 0fe0 FFF7FEFF 		bl	HAL_SPI_ErrorCallback	@
 3682              	.LVL229:
 3683 0fe4 08BD     		pop	{r3, pc}	@
 3684              		.cfi_endproc
 3685              	.LFE100:
 3686              		.size	SPI_DMAError, .-SPI_DMAError
 3687              		.align	1
 3688              		.syntax unified
 3689              		.thumb
 3690              		.thumb_func
 3691              		.fpu softvfp
 3692              		.type	SPI_DMATransmitCplt, %function
 3693              	SPI_DMATransmitCplt:
 3694              	.LFB94:
2670:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 3695              		.loc 1 2670 0
 3696              		.cfi_startproc
 3697              		@ args = 0, pretend = 0, frame = 8
 3698              		@ frame_needed = 0, uses_anonymous_args = 0
 3699              	.LVL230:
 3700 0fe6 37B5     		push	{r0, r1, r2, r4, r5, lr}	@
 3701              	.LCFI43:
 3702              		.cfi_def_cfa_offset 24
 3703              		.cfi_offset 4, -12
 3704              		.cfi_offset 5, -8
 3705              		.cfi_offset 14, -4
2670:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 3706              		.loc 1 2670 0
 3707 0fe8 0546     		mov	r5, r0	@ hdma, hdma
2671:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 3708              		.loc 1 2671 0
 3709 0fea 446A     		ldr	r4, [r0, #36]	@ hspi, hdma_6(D)->Parent
 3710              	.LVL231:
2675:src/stm32f1xx_hal_spi.c **** 
 3711              		.loc 1 2675 0
 3712 0fec FFF7FEFF 		bl	HAL_GetTick	@
 3713              	.LVL232:
2678:src/stm32f1xx_hal_spi.c ****   {
 3714              		.loc 1 2678 0
 3715 0ff0 2B68     		ldr	r3, [r5]	@ _10, hdma_6(D)->Instance
2675:src/stm32f1xx_hal_spi.c **** 
 3716              		.loc 1 2675 0
 3717 0ff2 0246     		mov	r2, r0	@ tickstart,
 3718              	.LVL233:
2678:src/stm32f1xx_hal_spi.c ****   {
 3719              		.loc 1 2678 0
 3720 0ff4 1B68     		ldr	r3, [r3]	@ _11, _10->CCR
 3721 0ff6 9B06     		lsls	r3, r3, #26	@, _11,
 3722 0ff8 26D4     		bmi	.L431	@,
2681:src/stm32f1xx_hal_spi.c **** 
 3723              		.loc 1 2681 0
 3724 0ffa 2368     		ldr	r3, [r4]	@ _13, hspi_7->Instance
2687:src/stm32f1xx_hal_spi.c ****     {
ARM GAS  /tmp/ccdPJtdr.s 			page 147


 3725              		.loc 1 2687 0
 3726 0ffc 2046     		mov	r0, r4	@, hspi
 3727              	.LVL234:
2681:src/stm32f1xx_hal_spi.c **** 
 3728              		.loc 1 2681 0
 3729 0ffe 5968     		ldr	r1, [r3, #4]	@ _14, _13->CR2
 3730 1000 21F02001 		bic	r1, r1, #32	@ _15, _14,
 3731 1004 5960     		str	r1, [r3, #4]	@ _15, _13->CR2
2684:src/stm32f1xx_hal_spi.c **** 
 3732              		.loc 1 2684 0
 3733 1006 5968     		ldr	r1, [r3, #4]	@ _17, _13->CR2
 3734 1008 21F00201 		bic	r1, r1, #2	@ _18, _17,
 3735 100c 5960     		str	r1, [r3, #4]	@ _18, _13->CR2
2687:src/stm32f1xx_hal_spi.c ****     {
 3736              		.loc 1 2687 0
 3737 100e 6421     		movs	r1, #100	@,
 3738 1010 FFF76EF8 		bl	SPI_EndRxTxTransaction	@
 3739              	.LVL235:
 3740 1014 18B1     		cbz	r0, .L432	@,
2689:src/stm32f1xx_hal_spi.c ****     }
 3741              		.loc 1 2689 0
 3742 1016 636D     		ldr	r3, [r4, #84]	@ _22, hspi_7->ErrorCode
 3743 1018 43F02003 		orr	r3, r3, #32	@ _23, _22,
 3744 101c 6365     		str	r3, [r4, #84]	@ _23, hspi_7->ErrorCode
 3745              	.L432:
2693:src/stm32f1xx_hal_spi.c ****     {
 3746              		.loc 1 2693 0
 3747 101e A368     		ldr	r3, [r4, #8]	@ hspi_7->Init.Direction, hspi_7->Init.Direction
 3748 1020 33B9     		cbnz	r3, .L433	@ hspi_7->Init.Direction,
 3749              	.LBB52:
2695:src/stm32f1xx_hal_spi.c ****     }
 3750              		.loc 1 2695 0
 3751 1022 0193     		str	r3, [sp, #4]	@ hspi_7->Init.Direction, tmpreg_ovr
 3752 1024 2368     		ldr	r3, [r4]	@ _27, hspi_7->Instance
 3753 1026 DA68     		ldr	r2, [r3, #12]	@ tmpreg_ovr.31_28, _27->DR
 3754 1028 0192     		str	r2, [sp, #4]	@ tmpreg_ovr.31_28, tmpreg_ovr
 3755 102a 9B68     		ldr	r3, [r3, #8]	@ tmpreg_ovr.32_30, _27->SR
 3756 102c 0193     		str	r3, [sp, #4]	@ tmpreg_ovr.32_30, tmpreg_ovr
 3757 102e 019B     		ldr	r3, [sp, #4]	@ vol.33_32, tmpreg_ovr
 3758              	.L433:
 3759              	.LBE52:
2698:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
 3760              		.loc 1 2698 0
 3761 1030 0023     		movs	r3, #0	@ tmp135,
 3762 1032 E386     		strh	r3, [r4, #54]	@ movhi	@ tmp135, hspi_7->TxXferCount
2699:src/stm32f1xx_hal_spi.c **** 
 3763              		.loc 1 2699 0
 3764 1034 0123     		movs	r3, #1	@ tmp136,
 3765 1036 84F85130 		strb	r3, [r4, #81]	@ tmp136, hspi_7->State
2701:src/stm32f1xx_hal_spi.c ****     {
 3766              		.loc 1 2701 0
 3767 103a 636D     		ldr	r3, [r4, #84]	@ _35, hspi_7->ErrorCode
 3768 103c 23B1     		cbz	r3, .L431	@ _35,
2707:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 3769              		.loc 1 2707 0
 3770 103e 2046     		mov	r0, r4	@, hspi
 3771 1040 FFF7FEFF 		bl	HAL_SPI_ErrorCallback	@
ARM GAS  /tmp/ccdPJtdr.s 			page 148


 3772              	.LVL236:
 3773              	.L430:
2718:src/stm32f1xx_hal_spi.c **** 
 3774              		.loc 1 2718 0
 3775 1044 03B0     		add	sp, sp, #12	@,,
 3776              	.LCFI44:
 3777              		.cfi_remember_state
 3778              		.cfi_def_cfa_offset 12
 3779              		@ sp needed	@
 3780 1046 30BD     		pop	{r4, r5, pc}	@
 3781              	.LVL237:
 3782              	.L431:
 3783              	.LCFI45:
 3784              		.cfi_restore_state
2716:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 3785              		.loc 1 2716 0
 3786 1048 2046     		mov	r0, r4	@, hspi
 3787 104a FFF7FEFF 		bl	HAL_SPI_TxCpltCallback	@
 3788              	.LVL238:
 3789 104e F9E7     		b	.L430	@
 3790              		.cfi_endproc
 3791              	.LFE94:
 3792              		.size	SPI_DMATransmitCplt, .-SPI_DMATransmitCplt
 3793              		.align	1
 3794              		.global	HAL_SPI_IRQHandler
 3795              		.syntax unified
 3796              		.thumb
 3797              		.thumb_func
 3798              		.fpu softvfp
 3799              		.type	HAL_SPI_IRQHandler, %function
 3800              	HAL_SPI_IRQHandler:
 3801              	.LFB83:
2382:src/stm32f1xx_hal_spi.c ****   uint32_t itsource = hspi->Instance->CR2;
 3802              		.loc 1 2382 0
 3803              		.cfi_startproc
 3804              		@ args = 0, pretend = 0, frame = 16
 3805              		@ frame_needed = 0, uses_anonymous_args = 0
 3806              	.LVL239:
2383:src/stm32f1xx_hal_spi.c ****   uint32_t itflag   = hspi->Instance->SR;
 3807              		.loc 1 2383 0
 3808 1050 0368     		ldr	r3, [r0]	@ _7, hspi_6(D)->Instance
2382:src/stm32f1xx_hal_spi.c ****   uint32_t itsource = hspi->Instance->CR2;
 3809              		.loc 1 2382 0
 3810 1052 30B5     		push	{r4, r5, lr}	@
 3811              	.LCFI46:
 3812              		.cfi_def_cfa_offset 12
 3813              		.cfi_offset 4, -12
 3814              		.cfi_offset 5, -8
 3815              		.cfi_offset 14, -4
2383:src/stm32f1xx_hal_spi.c ****   uint32_t itflag   = hspi->Instance->SR;
 3816              		.loc 1 2383 0
 3817 1054 5968     		ldr	r1, [r3, #4]	@ itsource, _7->CR2
 3818              	.LVL240:
2384:src/stm32f1xx_hal_spi.c **** 
 3819              		.loc 1 2384 0
 3820 1056 9A68     		ldr	r2, [r3, #8]	@ itflag, _7->SR
 3821              	.LVL241:
ARM GAS  /tmp/ccdPJtdr.s 			page 149


2382:src/stm32f1xx_hal_spi.c ****   uint32_t itsource = hspi->Instance->CR2;
 3822              		.loc 1 2382 0
 3823 1058 85B0     		sub	sp, sp, #20	@,,
 3824              	.LCFI47:
 3825              		.cfi_def_cfa_offset 32
2387:src/stm32f1xx_hal_spi.c ****       (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXN
 3826              		.loc 1 2387 0
 3827 105a 02F04105 		and	r5, r2, #65	@ tmp153, itflag,
 3828 105e 012D     		cmp	r5, #1	@ tmp153,
2382:src/stm32f1xx_hal_spi.c ****   uint32_t itsource = hspi->Instance->CR2;
 3829              		.loc 1 2382 0
 3830 1060 0446     		mov	r4, r0	@ hspi, hspi
2387:src/stm32f1xx_hal_spi.c ****       (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXN
 3831              		.loc 1 2387 0
 3832 1062 05D1     		bne	.L442	@,
2388:src/stm32f1xx_hal_spi.c ****   {
 3833              		.loc 1 2388 0
 3834 1064 4D06     		lsls	r5, r1, #25	@, itsource,
 3835 1066 03D5     		bpl	.L442	@,
2390:src/stm32f1xx_hal_spi.c ****     return;
 3836              		.loc 1 2390 0
 3837 1068 036C     		ldr	r3, [r0, #64]	@ hspi_6(D)->RxISR, hspi_6(D)->RxISR
 3838              	.L484:
2397:src/stm32f1xx_hal_spi.c ****     return;
 3839              		.loc 1 2397 0
 3840 106a 9847     		blx	r3	@ hspi_6(D)->TxISR
 3841              	.LVL242:
 3842              	.L441:
2475:src/stm32f1xx_hal_spi.c **** 
 3843              		.loc 1 2475 0
 3844 106c 05B0     		add	sp, sp, #20	@,,
 3845              	.LCFI48:
 3846              		.cfi_remember_state
 3847              		.cfi_def_cfa_offset 12
 3848              		@ sp needed	@
 3849 106e 30BD     		pop	{r4, r5, pc}	@
 3850              	.LVL243:
 3851              	.L442:
 3852              	.LCFI49:
 3853              		.cfi_restore_state
2395:src/stm32f1xx_hal_spi.c ****   {
 3854              		.loc 1 2395 0
 3855 1070 9007     		lsls	r0, r2, #30	@, itflag,
 3856              	.LVL244:
 3857 1072 04D5     		bpl	.L444	@,
2395:src/stm32f1xx_hal_spi.c ****   {
 3858              		.loc 1 2395 0 is_stmt 0 discriminator 1
 3859 1074 0D06     		lsls	r5, r1, #24	@, itsource,
 3860 1076 02D5     		bpl	.L444	@,
2397:src/stm32f1xx_hal_spi.c ****     return;
 3861              		.loc 1 2397 0 is_stmt 1
 3862 1078 636C     		ldr	r3, [r4, #68]	@ hspi_6(D)->TxISR, hspi_6(D)->TxISR
 3863 107a 2046     		mov	r0, r4	@, hspi
 3864 107c F5E7     		b	.L484	@
 3865              	.L444:
2402:src/stm32f1xx_hal_spi.c ****        && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 3866              		.loc 1 2402 0
ARM GAS  /tmp/ccdPJtdr.s 			page 150


 3867 107e 12F0600F 		tst	r2, #96	@ itflag,
 3868 1082 F3D0     		beq	.L441	@,
2403:src/stm32f1xx_hal_spi.c ****   {
 3869              		.loc 1 2403 0
 3870 1084 8806     		lsls	r0, r1, #26	@, itsource,
 3871 1086 F1D5     		bpl	.L441	@,
2406:src/stm32f1xx_hal_spi.c ****     {
 3872              		.loc 1 2406 0
 3873 1088 5506     		lsls	r5, r2, #25	@, itflag,
 3874 108a 0ED5     		bpl	.L447	@,
2408:src/stm32f1xx_hal_spi.c ****       {
 3875              		.loc 1 2408 0
 3876 108c 94F85100 		ldrb	r0, [r4, #81]	@ zero_extendqisi2	@ hspi_6(D)->State, hspi_6(D)->State
 3877 1090 0025     		movs	r5, #0	@ tmp176,
 3878 1092 0328     		cmp	r0, #3	@ hspi_6(D)->State,
 3879 1094 41D0     		beq	.L448	@,
2410:src/stm32f1xx_hal_spi.c ****         __HAL_SPI_CLEAR_OVRFLAG(hspi);
 3880              		.loc 1 2410 0
 3881 1096 606D     		ldr	r0, [r4, #84]	@ _28, hspi_6(D)->ErrorCode
 3882 1098 40F00400 		orr	r0, r0, #4	@ _29, _28,
 3883 109c 6065     		str	r0, [r4, #84]	@ _29, hspi_6(D)->ErrorCode
 3884              	.LBB53:
2411:src/stm32f1xx_hal_spi.c ****       }
 3885              		.loc 1 2411 0
 3886 109e 0195     		str	r5, [sp, #4]	@ tmp176, tmpreg_ovr
 3887 10a0 D868     		ldr	r0, [r3, #12]	@ tmpreg_ovr.84_32, _7->DR
 3888 10a2 0190     		str	r0, [sp, #4]	@ tmpreg_ovr.84_32, tmpreg_ovr
 3889 10a4 9868     		ldr	r0, [r3, #8]	@ tmpreg_ovr.85_34, _7->SR
 3890 10a6 0190     		str	r0, [sp, #4]	@ tmpreg_ovr.85_34, tmpreg_ovr
 3891 10a8 0198     		ldr	r0, [sp, #4]	@ vol.86_36, tmpreg_ovr
 3892              	.L447:
 3893              	.LBE53:
2421:src/stm32f1xx_hal_spi.c ****     {
 3894              		.loc 1 2421 0
 3895 10aa 9006     		lsls	r0, r2, #26	@, itflag,
 3896 10ac 0CD5     		bpl	.L449	@,
2423:src/stm32f1xx_hal_spi.c ****       __HAL_SPI_CLEAR_MODFFLAG(hspi);
 3897              		.loc 1 2423 0
 3898 10ae 626D     		ldr	r2, [r4, #84]	@ _38, hspi_6(D)->ErrorCode
 3899              	.LVL245:
 3900 10b0 42F00102 		orr	r2, r2, #1	@ _39, _38,
 3901 10b4 6265     		str	r2, [r4, #84]	@ _39, hspi_6(D)->ErrorCode
 3902              	.LBB54:
2424:src/stm32f1xx_hal_spi.c ****     }
 3903              		.loc 1 2424 0
 3904 10b6 0022     		movs	r2, #0	@ tmp168,
 3905 10b8 0392     		str	r2, [sp, #12]	@ tmp168, tmpreg_modf
 3906 10ba 9A68     		ldr	r2, [r3, #8]	@ tmpreg_modf.90_42, _7->SR
 3907 10bc 0392     		str	r2, [sp, #12]	@ tmpreg_modf.90_42, tmpreg_modf
 3908 10be 1A68     		ldr	r2, [r3]	@ _44, _7->CR1
 3909 10c0 22F04002 		bic	r2, r2, #64	@ _45, _44,
 3910 10c4 1A60     		str	r2, [r3]	@ _45, _7->CR1
 3911 10c6 039A     		ldr	r2, [sp, #12]	@ vol.91_47, tmpreg_modf
 3912              	.L449:
 3913              	.LBE54:
2429:src/stm32f1xx_hal_spi.c ****     {
 3914              		.loc 1 2429 0
ARM GAS  /tmp/ccdPJtdr.s 			page 151


 3915 10c8 626D     		ldr	r2, [r4, #84]	@ _48, hspi_6(D)->ErrorCode
 3916 10ca 002A     		cmp	r2, #0	@ _48
 3917 10cc CED0     		beq	.L441	@
2432:src/stm32f1xx_hal_spi.c **** 
 3918              		.loc 1 2432 0
 3919 10ce 5A68     		ldr	r2, [r3, #4]	@ _49, _7->CR2
 3920 10d0 22F0E002 		bic	r2, r2, #224	@ _50, _49,
 3921 10d4 5A60     		str	r2, [r3, #4]	@ _50, _7->CR2
2434:src/stm32f1xx_hal_spi.c ****       /* Disable the SPI DMA requests if enabled */
 3922              		.loc 1 2434 0
 3923 10d6 0122     		movs	r2, #1	@ tmp169,
 3924 10d8 84F85120 		strb	r2, [r4, #81]	@ tmp169, hspi_6(D)->State
2436:src/stm32f1xx_hal_spi.c ****       {
 3925              		.loc 1 2436 0
 3926 10dc 8A07     		lsls	r2, r1, #30	@, itsource,
 3927 10de 23D0     		beq	.L450	@,
2438:src/stm32f1xx_hal_spi.c **** 
 3928              		.loc 1 2438 0
 3929 10e0 5A68     		ldr	r2, [r3, #4]	@ _54, _7->CR2
2441:src/stm32f1xx_hal_spi.c ****         {
 3930              		.loc 1 2441 0
 3931 10e2 E06C     		ldr	r0, [r4, #76]	@ _57, hspi_6(D)->hdmarx
2438:src/stm32f1xx_hal_spi.c **** 
 3932              		.loc 1 2438 0
 3933 10e4 22F00302 		bic	r2, r2, #3	@ _55, _54,
 3934 10e8 5A60     		str	r2, [r3, #4]	@ _55, _7->CR2
2441:src/stm32f1xx_hal_spi.c ****         {
 3935              		.loc 1 2441 0
 3936 10ea 40B1     		cbz	r0, .L452	@ _57,
2445:src/stm32f1xx_hal_spi.c ****           if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 3937              		.loc 1 2445 0
 3938 10ec 104B     		ldr	r3, .L485	@ tmp172,
 3939 10ee 4363     		str	r3, [r0, #52]	@ tmp172, _57->XferAbortCallback
2446:src/stm32f1xx_hal_spi.c ****           {
 3940              		.loc 1 2446 0
 3941 10f0 FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 3942              	.LVL246:
 3943 10f4 18B1     		cbz	r0, .L452	@,
2448:src/stm32f1xx_hal_spi.c ****           }
 3944              		.loc 1 2448 0
 3945 10f6 636D     		ldr	r3, [r4, #84]	@ _61, hspi_6(D)->ErrorCode
 3946 10f8 43F04003 		orr	r3, r3, #64	@ _62, _61,
 3947 10fc 6365     		str	r3, [r4, #84]	@ _62, hspi_6(D)->ErrorCode
 3948              	.L452:
2452:src/stm32f1xx_hal_spi.c ****         {
 3949              		.loc 1 2452 0
 3950 10fe A06C     		ldr	r0, [r4, #72]	@ _64, hspi_6(D)->hdmatx
 3951 1100 0028     		cmp	r0, #0	@ _64
 3952 1102 B3D0     		beq	.L441	@
2456:src/stm32f1xx_hal_spi.c ****           if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 3953              		.loc 1 2456 0
 3954 1104 0A4B     		ldr	r3, .L485	@ tmp174,
 3955 1106 4363     		str	r3, [r0, #52]	@ tmp174, _64->XferAbortCallback
2457:src/stm32f1xx_hal_spi.c ****           {
 3956              		.loc 1 2457 0
 3957 1108 FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 3958              	.LVL247:
ARM GAS  /tmp/ccdPJtdr.s 			page 152


 3959 110c 0028     		cmp	r0, #0	@
 3960 110e ADD0     		beq	.L441	@
2459:src/stm32f1xx_hal_spi.c ****           }
 3961              		.loc 1 2459 0
 3962 1110 636D     		ldr	r3, [r4, #84]	@ _68, hspi_6(D)->ErrorCode
 3963 1112 43F04003 		orr	r3, r3, #64	@ _69, _68,
 3964 1116 6365     		str	r3, [r4, #84]	@ _69, hspi_6(D)->ErrorCode
 3965 1118 A8E7     		b	.L441	@
 3966              	.LVL248:
 3967              	.L448:
 3968              	.LBB55:
2415:src/stm32f1xx_hal_spi.c ****         return;
 3969              		.loc 1 2415 0
 3970 111a 0295     		str	r5, [sp, #8]	@ tmp176, tmpreg_ovr
 3971 111c DA68     		ldr	r2, [r3, #12]	@ tmpreg_ovr.87_23, _7->DR
 3972              	.LVL249:
 3973 111e 0292     		str	r2, [sp, #8]	@ tmpreg_ovr.87_23, tmpreg_ovr
 3974 1120 9B68     		ldr	r3, [r3, #8]	@ tmpreg_ovr.88_25, _7->SR
 3975 1122 0293     		str	r3, [sp, #8]	@ tmpreg_ovr.88_25, tmpreg_ovr
 3976 1124 029B     		ldr	r3, [sp, #8]	@ vol.89_27, tmpreg_ovr
 3977              	.LBE55:
2416:src/stm32f1xx_hal_spi.c ****       }
 3978              		.loc 1 2416 0
 3979 1126 A1E7     		b	.L441	@
 3980              	.L450:
2469:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 3981              		.loc 1 2469 0
 3982 1128 2046     		mov	r0, r4	@, hspi
 3983 112a FFF7FEFF 		bl	HAL_SPI_ErrorCallback	@
 3984              	.LVL250:
 3985 112e 9DE7     		b	.L441	@
 3986              	.L486:
 3987              		.align	2
 3988              	.L485:
 3989 1130 00000000 		.word	SPI_DMAAbortOnError
 3990              		.cfi_endproc
 3991              	.LFE83:
 3992              		.size	HAL_SPI_IRQHandler, .-HAL_SPI_IRQHandler
 3993              		.align	1
 3994              		.syntax unified
 3995              		.thumb
 3996              		.thumb_func
 3997              		.fpu softvfp
 3998              		.type	SPI_DMAAbortOnError, %function
 3999              	SPI_DMAAbortOnError:
 4000              	.LFB101:
2974:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 4001              		.loc 1 2974 0
 4002              		.cfi_startproc
 4003              		@ args = 0, pretend = 0, frame = 0
 4004              		@ frame_needed = 0, uses_anonymous_args = 0
 4005              	.LVL251:
 4006 1134 08B5     		push	{r3, lr}	@
 4007              	.LCFI50:
 4008              		.cfi_def_cfa_offset 8
 4009              		.cfi_offset 3, -8
 4010              		.cfi_offset 14, -4
ARM GAS  /tmp/ccdPJtdr.s 			page 153


2976:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = 0U;
 4011              		.loc 1 2976 0
 4012 1136 0023     		movs	r3, #0	@ tmp113,
2975:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount = 0U;
 4013              		.loc 1 2975 0
 4014 1138 406A     		ldr	r0, [r0, #36]	@ hspi, hdma_2(D)->Parent
 4015              	.LVL252:
2976:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = 0U;
 4016              		.loc 1 2976 0
 4017 113a C387     		strh	r3, [r0, #62]	@ movhi	@ tmp113, hspi_3->RxXferCount
2977:src/stm32f1xx_hal_spi.c **** 
 4018              		.loc 1 2977 0
 4019 113c C386     		strh	r3, [r0, #54]	@ movhi	@ tmp113, hspi_3->TxXferCount
2983:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 4020              		.loc 1 2983 0
 4021 113e FFF7FEFF 		bl	HAL_SPI_ErrorCallback	@
 4022              	.LVL253:
 4023 1142 08BD     		pop	{r3, pc}	@
 4024              		.cfi_endproc
 4025              	.LFE101:
 4026              		.size	SPI_DMAAbortOnError, .-SPI_DMAAbortOnError
 4027              		.align	1
 4028              		.syntax unified
 4029              		.thumb
 4030              		.thumb_func
 4031              		.fpu softvfp
 4032              		.type	SPI_CloseRx_ISR, %function
 4033              	SPI_CloseRx_ISR:
 4034              	.LFB120:
3679:src/stm32f1xx_hal_spi.c ****   /* Disable RXNE and ERR interrupt */
 4035              		.loc 1 3679 0
 4036              		.cfi_startproc
 4037              		@ args = 0, pretend = 0, frame = 8
 4038              		@ frame_needed = 0, uses_anonymous_args = 0
 4039              	.LVL254:
3681:src/stm32f1xx_hal_spi.c **** 
 4040              		.loc 1 3681 0
 4041 1144 0268     		ldr	r2, [r0]	@ _6, hspi_5(D)->Instance
3679:src/stm32f1xx_hal_spi.c ****   /* Disable RXNE and ERR interrupt */
 4042              		.loc 1 3679 0
 4043 1146 13B5     		push	{r0, r1, r4, lr}	@
 4044              	.LCFI51:
 4045              		.cfi_def_cfa_offset 16
 4046              		.cfi_offset 4, -8
 4047              		.cfi_offset 14, -4
3681:src/stm32f1xx_hal_spi.c **** 
 4048              		.loc 1 3681 0
 4049 1148 5368     		ldr	r3, [r2, #4]	@ _7, _6->CR2
3679:src/stm32f1xx_hal_spi.c ****   /* Disable RXNE and ERR interrupt */
 4050              		.loc 1 3679 0
 4051 114a 0446     		mov	r4, r0	@ hspi, hspi
3681:src/stm32f1xx_hal_spi.c **** 
 4052              		.loc 1 3681 0
 4053 114c 23F06003 		bic	r3, r3, #96	@ _8, _7,
 4054 1150 5360     		str	r3, [r2, #4]	@ _8, _6->CR2
3684:src/stm32f1xx_hal_spi.c ****   {
 4055              		.loc 1 3684 0
ARM GAS  /tmp/ccdPJtdr.s 			page 154


 4056 1152 FFF7FEFF 		bl	HAL_GetTick	@
 4057              	.LVL255:
 4058 1156 6421     		movs	r1, #100	@,
 4059 1158 0246     		mov	r2, r0	@,
 4060 115a 2046     		mov	r0, r4	@, hspi
 4061 115c FEF7D8FF 		bl	SPI_EndRxTransaction	@
 4062              	.LVL256:
 4063 1160 18B1     		cbz	r0, .L489	@,
3686:src/stm32f1xx_hal_spi.c ****   }
 4064              		.loc 1 3686 0
 4065 1162 636D     		ldr	r3, [r4, #84]	@ _14, hspi_5(D)->ErrorCode
 4066 1164 43F02003 		orr	r3, r3, #32	@ _15, _14,
 4067 1168 6365     		str	r3, [r4, #84]	@ _15, hspi_5(D)->ErrorCode
 4068              	.L489:
3690:src/stm32f1xx_hal_spi.c ****   {
 4069              		.loc 1 3690 0
 4070 116a A268     		ldr	r2, [r4, #8]	@ hspi_5(D)->Init.Direction, hspi_5(D)->Init.Direction
 4071 116c 2368     		ldr	r3, [r4]	@ _26, hspi_5(D)->Instance
 4072 116e 2AB9     		cbnz	r2, .L490	@ hspi_5(D)->Init.Direction,
 4073              	.LBB56:
3692:src/stm32f1xx_hal_spi.c ****   }
 4074              		.loc 1 3692 0
 4075 1170 0192     		str	r2, [sp, #4]	@ hspi_5(D)->Init.Direction, tmpreg_ovr
 4076 1172 DA68     		ldr	r2, [r3, #12]	@ tmpreg_ovr.17_20, _19->DR
 4077 1174 0192     		str	r2, [sp, #4]	@ tmpreg_ovr.17_20, tmpreg_ovr
 4078 1176 9A68     		ldr	r2, [r3, #8]	@ tmpreg_ovr.18_22, _19->SR
 4079 1178 0192     		str	r2, [sp, #4]	@ tmpreg_ovr.18_22, tmpreg_ovr
 4080 117a 019A     		ldr	r2, [sp, #4]	@ vol.19_24, tmpreg_ovr
 4081              	.L490:
 4082              	.LBE56:
3694:src/stm32f1xx_hal_spi.c **** 
 4083              		.loc 1 3694 0
 4084 117c 0122     		movs	r2, #1	@ tmp136,
 4085 117e 84F85120 		strb	r2, [r4, #81]	@ tmp136, hspi_5(D)->State
3698:src/stm32f1xx_hal_spi.c ****   {
 4086              		.loc 1 3698 0
 4087 1182 9A68     		ldr	r2, [r3, #8]	@ _27, _26->SR
 4088 1184 D206     		lsls	r2, r2, #27	@, _27,
 4089 1186 0FD5     		bpl	.L491	@,
3712:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 4090              		.loc 1 3712 0
 4091 1188 2046     		mov	r0, r4	@, hspi
3703:src/stm32f1xx_hal_spi.c **** 
 4092              		.loc 1 3703 0
 4093 118a 626D     		ldr	r2, [r4, #84]	@ _29, hspi_5(D)->ErrorCode
 4094 118c 42F00202 		orr	r2, r2, #2	@ _30, _29,
 4095 1190 6265     		str	r2, [r4, #84]	@ _30, hspi_5(D)->ErrorCode
3706:src/stm32f1xx_hal_spi.c **** 
 4096              		.loc 1 3706 0
 4097 1192 1A68     		ldr	r2, [r3]	@ _32, _26->CR1
 4098 1194 22F40052 		bic	r2, r2, #8192	@ _33, _32,
 4099 1198 1A60     		str	r2, [r3]	@ _33, _26->CR1
 4100 119a 1A68     		ldr	r2, [r3]	@ _35, _26->CR1
 4101 119c 42F40052 		orr	r2, r2, #8192	@ _36, _35,
 4102 11a0 1A60     		str	r2, [r3]	@ _36, _26->CR1
 4103              	.LVL257:
 4104              	.L493:
ARM GAS  /tmp/ccdPJtdr.s 			page 155


3738:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 4105              		.loc 1 3738 0
 4106 11a2 FFF7FEFF 		bl	HAL_SPI_ErrorCallback	@
 4107              	.LVL258:
3744:src/stm32f1xx_hal_spi.c **** 
 4108              		.loc 1 3744 0
 4109 11a6 05E0     		b	.L488	@
 4110              	.L491:
3723:src/stm32f1xx_hal_spi.c ****     {
 4111              		.loc 1 3723 0
 4112 11a8 636D     		ldr	r3, [r4, #84]	@ _39, hspi_5(D)->ErrorCode
3729:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 4113              		.loc 1 3729 0
 4114 11aa 2046     		mov	r0, r4	@, hspi
3723:src/stm32f1xx_hal_spi.c ****     {
 4115              		.loc 1 3723 0
 4116 11ac 002B     		cmp	r3, #0	@ _39
 4117 11ae F8D1     		bne	.L493	@
 4118              	.LVL259:
3729:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 4119              		.loc 1 3729 0
 4120 11b0 FFF7FEFF 		bl	HAL_SPI_RxCpltCallback	@
 4121              	.LVL260:
 4122              	.L488:
3744:src/stm32f1xx_hal_spi.c **** 
 4123              		.loc 1 3744 0
 4124 11b4 02B0     		add	sp, sp, #8	@,,
 4125              	.LCFI52:
 4126              		.cfi_def_cfa_offset 8
 4127              		@ sp needed	@
 4128 11b6 10BD     		pop	{r4, pc}	@
 4129              		.cfi_endproc
 4130              	.LFE120:
 4131              		.size	SPI_CloseRx_ISR, .-SPI_CloseRx_ISR
 4132              		.align	1
 4133              		.syntax unified
 4134              		.thumb
 4135              		.thumb_func
 4136              		.fpu softvfp
 4137              		.type	SPI_RxISR_8BIT, %function
 4138              	SPI_RxISR_8BIT:
 4139              	.LFB111:
3315:src/stm32f1xx_hal_spi.c ****   *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 4140              		.loc 1 3315 0
 4141              		.cfi_startproc
 4142              		@ args = 0, pretend = 0, frame = 0
 4143              		@ frame_needed = 0, uses_anonymous_args = 0
 4144              		@ link register save eliminated.
 4145              	.LVL261:
3316:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr++;
 4146              		.loc 1 3316 0
 4147 11b8 0268     		ldr	r2, [r0]	@ _6, hspi_4(D)->Instance
 4148 11ba 836B     		ldr	r3, [r0, #56]	@ _5, hspi_4(D)->pRxBuffPtr
 4149 11bc 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2	@ MEM[(volatile uint8_t *)_6 + 12B], MEM[(volatile uint8_t *
 4150 11be 1A70     		strb	r2, [r3]	@ MEM[(volatile uint8_t *)_6 + 12B], *_5
3317:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount--;
 4151              		.loc 1 3317 0
ARM GAS  /tmp/ccdPJtdr.s 			page 156


 4152 11c0 836B     		ldr	r3, [r0, #56]	@ hspi_4(D)->pRxBuffPtr, hspi_4(D)->pRxBuffPtr
 4153 11c2 0133     		adds	r3, r3, #1	@ tmp134, hspi_4(D)->pRxBuffPtr,
 4154 11c4 8363     		str	r3, [r0, #56]	@ tmp134, hspi_4(D)->pRxBuffPtr
3318:src/stm32f1xx_hal_spi.c **** 
 4155              		.loc 1 3318 0
 4156 11c6 C38F     		ldrh	r3, [r0, #62]	@, hspi_4(D)->RxXferCount
 4157 11c8 013B     		subs	r3, r3, #1	@ tmp138, hspi_4(D)->RxXferCount,
 4158 11ca 9BB2     		uxth	r3, r3	@ _13, tmp138
 4159 11cc C387     		strh	r3, [r0, #62]	@ movhi	@ _13, hspi_4(D)->RxXferCount
3322:src/stm32f1xx_hal_spi.c ****   {
 4160              		.loc 1 3322 0
 4161 11ce C38F     		ldrh	r3, [r0, #62]	@, hspi_4(D)->RxXferCount
 4162 11d0 9BB2     		uxth	r3, r3	@ _15, hspi_4(D)->RxXferCount
 4163 11d2 012B     		cmp	r3, #1	@ _15,
 4164 11d4 0368     		ldr	r3, [r0]	@ _22, hspi_4(D)->Instance
 4165 11d6 07D1     		bne	.L498	@,
3322:src/stm32f1xx_hal_spi.c ****   {
 4166              		.loc 1 3322 0 is_stmt 0 discriminator 1
 4167 11d8 826A     		ldr	r2, [r0, #40]	@ hspi_4(D)->Init.CRCCalculation, hspi_4(D)->Init.CRCCalculation
 4168 11da B2F5005F 		cmp	r2, #8192	@ hspi_4(D)->Init.CRCCalculation,
3324:src/stm32f1xx_hal_spi.c ****   }
 4169              		.loc 1 3324 0 is_stmt 1 discriminator 1
 4170 11de 02BF     		ittt	eq
 4171 11e0 1A68     		ldreq	r2, [r3]	@ _19, _17->CR1
 4172 11e2 42F48052 		orreq	r2, r2, #4096	@ _20, _19,
 4173 11e6 1A60     		streq	r2, [r3]	@ _20, _17->CR1
 4174              	.L498:
3327:src/stm32f1xx_hal_spi.c ****   {
 4175              		.loc 1 3327 0
 4176 11e8 1A68     		ldr	r2, [r3]	@ _23, _22->CR1
 4177 11ea D204     		lsls	r2, r2, #19	@, _23,
3330:src/stm32f1xx_hal_spi.c ****   }
 4178              		.loc 1 3330 0
 4179 11ec 42BF     		ittt	mi
 4180 11ee 1A68     		ldrmi	r2, [r3]	@ _26, _22->CR1
 4181 11f0 22F48052 		bicmi	r2, r2, #4096	@ _27, _26,
 4182 11f4 1A60     		strmi	r2, [r3]	@ _27, _22->CR1
3335:src/stm32f1xx_hal_spi.c ****   {
 4183              		.loc 1 3335 0
 4184 11f6 C38F     		ldrh	r3, [r0, #62]	@, hspi_4(D)->RxXferCount
 4185 11f8 9BB2     		uxth	r3, r3	@ _29, hspi_4(D)->RxXferCount
 4186 11fa 3BB9     		cbnz	r3, .L497	@ _29,
 4187              	.LVL262:
 4188              	.LBB59:
 4189              	.LBB60:
3338:src/stm32f1xx_hal_spi.c ****     {
 4190              		.loc 1 3338 0
 4191 11fc 836A     		ldr	r3, [r0, #40]	@ hspi_4(D)->Init.CRCCalculation, hspi_4(D)->Init.CRCCalculation
 4192 11fe B3F5005F 		cmp	r3, #8192	@ hspi_4(D)->Init.CRCCalculation,
 4193 1202 02D1     		bne	.L501	@,
3340:src/stm32f1xx_hal_spi.c ****       return;
 4194              		.loc 1 3340 0
 4195 1204 024B     		ldr	r3, .L505	@ tmp147,
 4196 1206 0364     		str	r3, [r0, #64]	@ tmp147, hspi_4(D)->RxISR
 4197 1208 7047     		bx	lr	@
 4198              	.L501:
3344:src/stm32f1xx_hal_spi.c ****   }
ARM GAS  /tmp/ccdPJtdr.s 			page 157


 4199              		.loc 1 3344 0
 4200 120a 9BE7     		b	SPI_CloseRx_ISR	@
 4201              	.LVL263:
 4202              	.L497:
 4203 120c 7047     		bx	lr	@
 4204              	.L506:
 4205 120e 00BF     		.align	2
 4206              	.L505:
 4207 1210 00000000 		.word	SPI_RxISR_8BITCRC
 4208              	.LBE60:
 4209              	.LBE59:
 4210              		.cfi_endproc
 4211              	.LFE111:
 4212              		.size	SPI_RxISR_8BIT, .-SPI_RxISR_8BIT
 4213              		.align	1
 4214              		.syntax unified
 4215              		.thumb
 4216              		.thumb_func
 4217              		.fpu softvfp
 4218              		.type	SPI_RxISR_8BITCRC, %function
 4219              	SPI_RxISR_8BITCRC:
 4220              	.LFB110:
3300:src/stm32f1xx_hal_spi.c ****   /* Read 8bit CRC to flush Data Register */
 4221              		.loc 1 3300 0
 4222              		.cfi_startproc
 4223              		@ args = 0, pretend = 0, frame = 0
 4224              		@ frame_needed = 0, uses_anonymous_args = 0
 4225              		@ link register save eliminated.
 4226              	.LVL264:
3302:src/stm32f1xx_hal_spi.c **** 
 4227              		.loc 1 3302 0
 4228 1214 0368     		ldr	r3, [r0]	@ _3, hspi_2(D)->Instance
 4229 1216 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2	@ MEM[(volatile uint8_t *)_3 + 12B], MEM[(volatile uint8_t *
3304:src/stm32f1xx_hal_spi.c **** }
 4230              		.loc 1 3304 0
 4231 1218 94E7     		b	SPI_CloseRx_ISR	@
 4232              	.LVL265:
 4233              		.cfi_endproc
 4234              	.LFE110:
 4235              		.size	SPI_RxISR_8BITCRC, .-SPI_RxISR_8BITCRC
 4236              		.align	1
 4237              		.syntax unified
 4238              		.thumb
 4239              		.thumb_func
 4240              		.fpu softvfp
 4241              		.type	SPI_RxISR_16BIT, %function
 4242              	SPI_RxISR_16BIT:
 4243              	.LFB113:
3374:src/stm32f1xx_hal_spi.c ****   *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 4244              		.loc 1 3374 0
 4245              		.cfi_startproc
 4246              		@ args = 0, pretend = 0, frame = 0
 4247              		@ frame_needed = 0, uses_anonymous_args = 0
 4248              		@ link register save eliminated.
 4249              	.LVL266:
3375:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr += sizeof(uint16_t);
 4250              		.loc 1 3375 0
ARM GAS  /tmp/ccdPJtdr.s 			page 158


 4251 121a 0368     		ldr	r3, [r0]	@ _6, hspi_4(D)->Instance
 4252 121c 826B     		ldr	r2, [r0, #56]	@ tmp129, hspi_4(D)->pRxBuffPtr
 4253 121e D968     		ldr	r1, [r3, #12]	@ _7, _6->DR
 4254 1220 22F8021B 		strh	r1, [r2], #2	@ movhi	@ _7, MEM[(uint16_t *)_5]
3376:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount--;
 4255              		.loc 1 3376 0
 4256 1224 8263     		str	r2, [r0, #56]	@ tmp129, hspi_4(D)->pRxBuffPtr
3377:src/stm32f1xx_hal_spi.c **** 
 4257              		.loc 1 3377 0
 4258 1226 C28F     		ldrh	r2, [r0, #62]	@, hspi_4(D)->RxXferCount
 4259 1228 013A     		subs	r2, r2, #1	@ tmp132, hspi_4(D)->RxXferCount,
 4260 122a 92B2     		uxth	r2, r2	@ _14, tmp132
 4261 122c C287     		strh	r2, [r0, #62]	@ movhi	@ _14, hspi_4(D)->RxXferCount
3381:src/stm32f1xx_hal_spi.c ****   {
 4262              		.loc 1 3381 0
 4263 122e C28F     		ldrh	r2, [r0, #62]	@, hspi_4(D)->RxXferCount
 4264 1230 92B2     		uxth	r2, r2	@ _16, hspi_4(D)->RxXferCount
 4265 1232 012A     		cmp	r2, #1	@ _16,
 4266 1234 07D1     		bne	.L509	@,
3381:src/stm32f1xx_hal_spi.c ****   {
 4267              		.loc 1 3381 0 is_stmt 0 discriminator 1
 4268 1236 826A     		ldr	r2, [r0, #40]	@ hspi_4(D)->Init.CRCCalculation, hspi_4(D)->Init.CRCCalculation
 4269 1238 B2F5005F 		cmp	r2, #8192	@ hspi_4(D)->Init.CRCCalculation,
3383:src/stm32f1xx_hal_spi.c ****   }
 4270              		.loc 1 3383 0 is_stmt 1 discriminator 1
 4271 123c 02BF     		ittt	eq
 4272 123e 1A68     		ldreq	r2, [r3]	@ _19, _6->CR1
 4273 1240 42F48052 		orreq	r2, r2, #4096	@ _20, _19,
 4274 1244 1A60     		streq	r2, [r3]	@ _20, _6->CR1
 4275              	.L509:
3386:src/stm32f1xx_hal_spi.c ****   {
 4276              		.loc 1 3386 0
 4277 1246 1A68     		ldr	r2, [r3]	@ _22, _6->CR1
 4278 1248 D204     		lsls	r2, r2, #19	@, _22,
3389:src/stm32f1xx_hal_spi.c ****   }
 4279              		.loc 1 3389 0
 4280 124a 42BF     		ittt	mi
 4281 124c 1A68     		ldrmi	r2, [r3]	@ _24, _6->CR1
 4282 124e 22F48052 		bicmi	r2, r2, #4096	@ _25, _24,
 4283 1252 1A60     		strmi	r2, [r3]	@ _25, _6->CR1
3394:src/stm32f1xx_hal_spi.c ****   {
 4284              		.loc 1 3394 0
 4285 1254 C38F     		ldrh	r3, [r0, #62]	@, hspi_4(D)->RxXferCount
 4286 1256 9BB2     		uxth	r3, r3	@ _27, hspi_4(D)->RxXferCount
 4287 1258 3BB9     		cbnz	r3, .L508	@ _27,
 4288              	.LVL267:
 4289              	.LBB63:
 4290              	.LBB64:
3397:src/stm32f1xx_hal_spi.c ****     {
 4291              		.loc 1 3397 0
 4292 125a 836A     		ldr	r3, [r0, #40]	@ hspi_4(D)->Init.CRCCalculation, hspi_4(D)->Init.CRCCalculation
 4293 125c B3F5005F 		cmp	r3, #8192	@ hspi_4(D)->Init.CRCCalculation,
 4294 1260 02D1     		bne	.L512	@,
3399:src/stm32f1xx_hal_spi.c ****       return;
 4295              		.loc 1 3399 0
 4296 1262 024B     		ldr	r3, .L516	@ tmp141,
 4297 1264 0364     		str	r3, [r0, #64]	@ tmp141, hspi_4(D)->RxISR
ARM GAS  /tmp/ccdPJtdr.s 			page 159


 4298 1266 7047     		bx	lr	@
 4299              	.L512:
3403:src/stm32f1xx_hal_spi.c ****   }
 4300              		.loc 1 3403 0
 4301 1268 6CE7     		b	SPI_CloseRx_ISR	@
 4302              	.LVL268:
 4303              	.L508:
 4304 126a 7047     		bx	lr	@
 4305              	.L517:
 4306              		.align	2
 4307              	.L516:
 4308 126c 00000000 		.word	SPI_RxISR_16BITCRC
 4309              	.LBE64:
 4310              	.LBE63:
 4311              		.cfi_endproc
 4312              	.LFE113:
 4313              		.size	SPI_RxISR_16BIT, .-SPI_RxISR_16BIT
 4314              		.align	1
 4315              		.syntax unified
 4316              		.thumb
 4317              		.thumb_func
 4318              		.fpu softvfp
 4319              		.type	SPI_RxISR_16BITCRC, %function
 4320              	SPI_RxISR_16BITCRC:
 4321              	.LFB112:
3356:src/stm32f1xx_hal_spi.c ****   /* Read 16bit CRC to flush Data Register */
 4322              		.loc 1 3356 0
 4323              		.cfi_startproc
 4324              		@ args = 0, pretend = 0, frame = 0
 4325              		@ frame_needed = 0, uses_anonymous_args = 0
 4326              		@ link register save eliminated.
 4327              	.LVL269:
3358:src/stm32f1xx_hal_spi.c **** 
 4328              		.loc 1 3358 0
 4329 1270 0368     		ldr	r3, [r0]	@ _3, hspi_2(D)->Instance
 4330 1272 DA68     		ldr	r2, [r3, #12]	@ vol.20_4, _3->DR
3361:src/stm32f1xx_hal_spi.c **** 
 4331              		.loc 1 3361 0
 4332 1274 5A68     		ldr	r2, [r3, #4]	@ _5, _3->CR2
 4333 1276 22F06002 		bic	r2, r2, #96	@ _6, _5,
 4334 127a 5A60     		str	r2, [r3, #4]	@ _6, _3->CR2
3363:src/stm32f1xx_hal_spi.c **** }
 4335              		.loc 1 3363 0
 4336 127c 62E7     		b	SPI_CloseRx_ISR	@
 4337              	.LVL270:
 4338              		.cfi_endproc
 4339              	.LFE112:
 4340              		.size	SPI_RxISR_16BITCRC, .-SPI_RxISR_16BITCRC
 4341              		.align	1
 4342              		.syntax unified
 4343              		.thumb
 4344              		.thumb_func
 4345              		.fpu softvfp
 4346              		.type	SPI_CloseRxTx_ISR, %function
 4347              	SPI_CloseRxTx_ISR:
 4348              	.LFB119:
3573:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
ARM GAS  /tmp/ccdPJtdr.s 			page 160


 4349              		.loc 1 3573 0
 4350              		.cfi_startproc
 4351              		@ args = 0, pretend = 0, frame = 8
 4352              		@ frame_needed = 0, uses_anonymous_args = 0
 4353              	.LVL271:
3575:src/stm32f1xx_hal_spi.c **** 
 4354              		.loc 1 3575 0
 4355 127e 45F6C052 		movw	r2, #24000	@ tmp148,
 4356 1282 2E4B     		ldr	r3, .L535	@ tmp144,
3573:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 4357              		.loc 1 3573 0
 4358 1284 13B5     		push	{r0, r1, r4, lr}	@
 4359              	.LCFI53:
 4360              		.cfi_def_cfa_offset 16
 4361              		.cfi_offset 4, -8
 4362              		.cfi_offset 14, -4
3575:src/stm32f1xx_hal_spi.c **** 
 4363              		.loc 1 3575 0
 4364 1286 1B68     		ldr	r3, [r3]	@ SystemCoreClock, SystemCoreClock
3573:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 4365              		.loc 1 3573 0
 4366 1288 0446     		mov	r4, r0	@ hspi, hspi
3575:src/stm32f1xx_hal_spi.c **** 
 4367              		.loc 1 3575 0
 4368 128a B3FBF2F2 		udiv	r2, r3, r2	@ tmp147, SystemCoreClock, tmp148
 4369 128e 6423     		movs	r3, #100	@ tmp149,
 4370 1290 5343     		muls	r3, r2, r3	@ count.22_9, tmp147
 4371 1292 0093     		str	r3, [sp]	@ count.22_9, count
3578:src/stm32f1xx_hal_spi.c **** 
 4372              		.loc 1 3578 0
 4373 1294 FFF7FEFF 		bl	HAL_GetTick	@
 4374              	.LVL272:
 4375 1298 0246     		mov	r2, r0	@ tickstart,
 4376              	.LVL273:
3581:src/stm32f1xx_hal_spi.c **** 
 4377              		.loc 1 3581 0
 4378 129a 2368     		ldr	r3, [r4]	@ _14, hspi_13(D)->Instance
 4379 129c 5968     		ldr	r1, [r3, #4]	@ _15, _14->CR2
 4380 129e 21F02001 		bic	r1, r1, #32	@ _16, _15,
 4381 12a2 5960     		str	r1, [r3, #4]	@ _16, _14->CR2
 4382              	.L522:
3586:src/stm32f1xx_hal_spi.c ****     {
 4383              		.loc 1 3586 0
 4384 12a4 0099     		ldr	r1, [sp]	@ count.23_18, count
 4385 12a6 0029     		cmp	r1, #0	@ count.23_18
 4386 12a8 2DD1     		bne	.L520	@
3588:src/stm32f1xx_hal_spi.c ****       break;
 4387              		.loc 1 3588 0
 4388 12aa 636D     		ldr	r3, [r4, #84]	@ _24, hspi_13(D)->ErrorCode
 4389 12ac 43F02003 		orr	r3, r3, #32	@ _25, _24,
 4390 12b0 6365     		str	r3, [r4, #84]	@ _25, hspi_13(D)->ErrorCode
 4391              	.L521:
3595:src/stm32f1xx_hal_spi.c ****   {
 4392              		.loc 1 3595 0
 4393 12b2 6421     		movs	r1, #100	@,
 4394 12b4 2046     		mov	r0, r4	@, hspi
 4395              	.LVL274:
ARM GAS  /tmp/ccdPJtdr.s 			page 161


 4396 12b6 FEF71BFF 		bl	SPI_EndRxTxTransaction	@
 4397              	.LVL275:
 4398 12ba 18B1     		cbz	r0, .L523	@,
3597:src/stm32f1xx_hal_spi.c ****   }
 4399              		.loc 1 3597 0
 4400 12bc 636D     		ldr	r3, [r4, #84]	@ _29, hspi_13(D)->ErrorCode
 4401 12be 43F02003 		orr	r3, r3, #32	@ _30, _29,
 4402 12c2 6365     		str	r3, [r4, #84]	@ _30, hspi_13(D)->ErrorCode
 4403              	.L523:
3601:src/stm32f1xx_hal_spi.c ****   {
 4404              		.loc 1 3601 0
 4405 12c4 A268     		ldr	r2, [r4, #8]	@ hspi_13(D)->Init.Direction, hspi_13(D)->Init.Direction
 4406 12c6 2368     		ldr	r3, [r4]	@ _40, hspi_13(D)->Instance
 4407 12c8 2AB9     		cbnz	r2, .L524	@ hspi_13(D)->Init.Direction,
 4408              	.LBB65:
3603:src/stm32f1xx_hal_spi.c ****   }
 4409              		.loc 1 3603 0
 4410 12ca 0192     		str	r2, [sp, #4]	@ hspi_13(D)->Init.Direction, tmpreg_ovr
 4411 12cc DA68     		ldr	r2, [r3, #12]	@ tmpreg_ovr.26_35, _34->DR
 4412 12ce 0192     		str	r2, [sp, #4]	@ tmpreg_ovr.26_35, tmpreg_ovr
 4413 12d0 9A68     		ldr	r2, [r3, #8]	@ tmpreg_ovr.27_37, _34->SR
 4414 12d2 0192     		str	r2, [sp, #4]	@ tmpreg_ovr.27_37, tmpreg_ovr
 4415 12d4 019A     		ldr	r2, [sp, #4]	@ vol.28_39, tmpreg_ovr
 4416              	.L524:
 4417              	.LBE65:
3608:src/stm32f1xx_hal_spi.c ****   {
 4418              		.loc 1 3608 0
 4419 12d6 9A68     		ldr	r2, [r3, #8]	@ _41, _40->SR
 4420 12d8 12F0100F 		tst	r2, #16	@ _41,
 4421 12dc 4FF00102 		mov	r2, #1	@ tmp167,
 4422 12e0 18D0     		beq	.L525	@,
3613:src/stm32f1xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 4423              		.loc 1 3613 0
 4424 12e2 84F85120 		strb	r2, [r4, #81]	@ tmp167, hspi_13(D)->State
3614:src/stm32f1xx_hal_spi.c **** 
 4425              		.loc 1 3614 0
 4426 12e6 626D     		ldr	r2, [r4, #84]	@ _44, hspi_13(D)->ErrorCode
 4427 12e8 42F00202 		orr	r2, r2, #2	@ _45, _44,
 4428 12ec 6265     		str	r2, [r4, #84]	@ _45, hspi_13(D)->ErrorCode
3617:src/stm32f1xx_hal_spi.c **** 
 4429              		.loc 1 3617 0
 4430 12ee 1A68     		ldr	r2, [r3]	@ _47, _40->CR1
 4431 12f0 22F40052 		bic	r2, r2, #8192	@ _48, _47,
 4432 12f4 1A60     		str	r2, [r3]	@ _48, _40->CR1
 4433 12f6 1A68     		ldr	r2, [r3]	@ _50, _40->CR1
 4434 12f8 42F40052 		orr	r2, r2, #8192	@ _51, _50,
 4435 12fc 1A60     		str	r2, [r3]	@ _51, _40->CR1
 4436              	.L534:
3664:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 4437              		.loc 1 3664 0
 4438 12fe 2046     		mov	r0, r4	@, hspi
 4439 1300 FFF7FEFF 		bl	HAL_SPI_ErrorCallback	@
 4440              	.LVL276:
3670:src/stm32f1xx_hal_spi.c **** 
 4441              		.loc 1 3670 0
 4442 1304 11E0     		b	.L519	@
 4443              	.LVL277:
ARM GAS  /tmp/ccdPJtdr.s 			page 162


 4444              	.L520:
3591:src/stm32f1xx_hal_spi.c ****   } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 4445              		.loc 1 3591 0
 4446 1306 0099     		ldr	r1, [sp]	@ count.24_19, count
 4447 1308 0139     		subs	r1, r1, #1	@ count.25_20, count.24_19,
 4448 130a 0091     		str	r1, [sp]	@ count.25_20, count
3592:src/stm32f1xx_hal_spi.c **** 
 4449              		.loc 1 3592 0
 4450 130c 9968     		ldr	r1, [r3, #8]	@ _22, _14->SR
 4451 130e 8907     		lsls	r1, r1, #30	@, _22,
 4452 1310 C8D5     		bpl	.L522	@,
 4453 1312 CEE7     		b	.L521	@
 4454              	.LVL278:
 4455              	.L525:
3634:src/stm32f1xx_hal_spi.c ****     {
 4456              		.loc 1 3634 0
 4457 1314 636D     		ldr	r3, [r4, #84]	@ _54, hspi_13(D)->ErrorCode
 4458 1316 6BB9     		cbnz	r3, .L527	@ _54,
3636:src/stm32f1xx_hal_spi.c ****       {
 4459              		.loc 1 3636 0
 4460 1318 94F85130 		ldrb	r3, [r4, #81]	@ zero_extendqisi2	@ hspi_13(D)->State, hspi_13(D)->State
3643:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 4461              		.loc 1 3643 0
 4462 131c 2046     		mov	r0, r4	@, hspi
3636:src/stm32f1xx_hal_spi.c ****       {
 4463              		.loc 1 3636 0
 4464 131e 042B     		cmp	r3, #4	@ hspi_13(D)->State,
3638:src/stm32f1xx_hal_spi.c ****         /* Call user Rx complete callback */
 4465              		.loc 1 3638 0
 4466 1320 84F85120 		strb	r2, [r4, #81]	@ tmp167,
3636:src/stm32f1xx_hal_spi.c ****       {
 4467              		.loc 1 3636 0
 4468 1324 03D1     		bne	.L528	@,
 4469              	.LVL279:
3643:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 4470              		.loc 1 3643 0
 4471 1326 FFF7FEFF 		bl	HAL_SPI_RxCpltCallback	@
 4472              	.LVL280:
 4473              	.L519:
3670:src/stm32f1xx_hal_spi.c **** 
 4474              		.loc 1 3670 0
 4475 132a 02B0     		add	sp, sp, #8	@,,
 4476              	.LCFI54:
 4477              		.cfi_remember_state
 4478              		.cfi_def_cfa_offset 8
 4479              		@ sp needed	@
 4480 132c 10BD     		pop	{r4, pc}	@
 4481              	.LVL281:
 4482              	.L528:
 4483              	.LCFI55:
 4484              		.cfi_restore_state
3653:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 4485              		.loc 1 3653 0
 4486 132e FFF7FEFF 		bl	HAL_SPI_TxRxCpltCallback	@
 4487              	.LVL282:
 4488 1332 FAE7     		b	.L519	@
 4489              	.L527:
ARM GAS  /tmp/ccdPJtdr.s 			page 163


3659:src/stm32f1xx_hal_spi.c ****       /* Call user error callback */
 4490              		.loc 1 3659 0
 4491 1334 84F85120 		strb	r2, [r4, #81]	@ tmp167, hspi_13(D)->State
 4492 1338 E1E7     		b	.L534	@
 4493              	.L536:
 4494 133a 00BF     		.align	2
 4495              	.L535:
 4496 133c 00000000 		.word	SystemCoreClock
 4497              		.cfi_endproc
 4498              	.LFE119:
 4499              		.size	SPI_CloseRxTx_ISR, .-SPI_CloseRxTx_ISR
 4500              		.align	1
 4501              		.syntax unified
 4502              		.thumb
 4503              		.thumb_func
 4504              		.fpu softvfp
 4505              		.type	SPI_2linesTxISR_8BIT, %function
 4506              	SPI_2linesTxISR_8BIT:
 4507              	.LFB106:
3174:src/stm32f1xx_hal_spi.c ****   *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 4508              		.loc 1 3174 0
 4509              		.cfi_startproc
 4510              		@ args = 0, pretend = 0, frame = 0
 4511              		@ frame_needed = 0, uses_anonymous_args = 0
 4512              		@ link register save eliminated.
 4513              	.LVL283:
3175:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr++;
 4514              		.loc 1 3175 0
 4515 1340 016B     		ldr	r1, [r0, #48]	@ hspi_2(D)->pTxBuffPtr, hspi_2(D)->pTxBuffPtr
 4516 1342 0268     		ldr	r2, [r0]	@ _3, hspi_2(D)->Instance
 4517 1344 0978     		ldrb	r1, [r1]	@ zero_extendqisi2	@ _5, *_4
 4518 1346 1173     		strb	r1, [r2, #12]	@ _5, MEM[(volatile uint8_t *)_3 + 12B]
3176:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount--;
 4519              		.loc 1 3176 0
 4520 1348 026B     		ldr	r2, [r0, #48]	@ hspi_2(D)->pTxBuffPtr, hspi_2(D)->pTxBuffPtr
 4521 134a 0132     		adds	r2, r2, #1	@ tmp131, hspi_2(D)->pTxBuffPtr,
 4522 134c 0263     		str	r2, [r0, #48]	@ tmp131, hspi_2(D)->pTxBuffPtr
3177:src/stm32f1xx_hal_spi.c **** 
 4523              		.loc 1 3177 0
 4524 134e C28E     		ldrh	r2, [r0, #54]	@, hspi_2(D)->TxXferCount
 4525 1350 013A     		subs	r2, r2, #1	@ tmp135, hspi_2(D)->TxXferCount,
 4526 1352 92B2     		uxth	r2, r2	@ _11, tmp135
 4527 1354 C286     		strh	r2, [r0, #54]	@ movhi	@ _11, hspi_2(D)->TxXferCount
3180:src/stm32f1xx_hal_spi.c ****   {
 4528              		.loc 1 3180 0
 4529 1356 C28E     		ldrh	r2, [r0, #54]	@, hspi_2(D)->TxXferCount
 4530 1358 92B2     		uxth	r2, r2	@ _13, hspi_2(D)->TxXferCount
 4531 135a AAB9     		cbnz	r2, .L537	@ _13,
3183:src/stm32f1xx_hal_spi.c ****     {
 4532              		.loc 1 3183 0
 4533 135c 826A     		ldr	r2, [r0, #40]	@ hspi_2(D)->Init.CRCCalculation, hspi_2(D)->Init.CRCCalculation
 4534 135e B2F5005F 		cmp	r2, #8192	@ hspi_2(D)->Init.CRCCalculation,
 4535 1362 0268     		ldr	r2, [r0]	@ _17, hspi_2(D)->Instance
 4536 1364 08D1     		bne	.L540	@,
 4537              	.LVL284:
 4538              	.LBB68:
 4539              	.LBB69:
ARM GAS  /tmp/ccdPJtdr.s 			page 164


3186:src/stm32f1xx_hal_spi.c ****       /* Disable TXE interrupt */
 4540              		.loc 1 3186 0
 4541 1366 1368     		ldr	r3, [r2]	@ _24, _23->CR1
 4542 1368 43F48053 		orr	r3, r3, #4096	@ _25, _24,
 4543 136c 1360     		str	r3, [r2]	@ _25, _23->CR1
3188:src/stm32f1xx_hal_spi.c ****       return;
 4544              		.loc 1 3188 0
 4545 136e 5368     		ldr	r3, [r2, #4]	@ _26, _23->CR2
 4546 1370 23F08003 		bic	r3, r3, #128	@ _27, _26,
 4547 1374 5360     		str	r3, [r2, #4]	@ _27, _23->CR2
 4548 1376 7047     		bx	lr	@
 4549              	.LVL285:
 4550              	.L540:
 4551              	.LBE69:
 4552              	.LBE68:
3194:src/stm32f1xx_hal_spi.c **** 
 4553              		.loc 1 3194 0
 4554 1378 5168     		ldr	r1, [r2, #4]	@ _18, _17->CR2
 4555 137a 21F08001 		bic	r1, r1, #128	@ _19, _18,
 4556 137e 5160     		str	r1, [r2, #4]	@ _19, _17->CR2
3196:src/stm32f1xx_hal_spi.c ****     {
 4557              		.loc 1 3196 0
 4558 1380 C38F     		ldrh	r3, [r0, #62]	@, hspi_2(D)->RxXferCount
 4559 1382 9BB2     		uxth	r3, r3	@ _21, hspi_2(D)->RxXferCount
 4560 1384 03B9     		cbnz	r3, .L537	@ _21,
3198:src/stm32f1xx_hal_spi.c ****     }
 4561              		.loc 1 3198 0
 4562 1386 7AE7     		b	SPI_CloseRxTx_ISR	@
 4563              	.LVL286:
 4564              	.L537:
 4565 1388 7047     		bx	lr	@
 4566              		.cfi_endproc
 4567              	.LFE106:
 4568              		.size	SPI_2linesTxISR_8BIT, .-SPI_2linesTxISR_8BIT
 4569              		.align	1
 4570              		.syntax unified
 4571              		.thumb
 4572              		.thumb_func
 4573              		.fpu softvfp
 4574              		.type	SPI_2linesRxISR_8BIT, %function
 4575              	SPI_2linesRxISR_8BIT:
 4576              	.LFB104:
3118:src/stm32f1xx_hal_spi.c ****   /* Receive data in 8bit mode */
 4577              		.loc 1 3118 0
 4578              		.cfi_startproc
 4579              		@ args = 0, pretend = 0, frame = 0
 4580              		@ frame_needed = 0, uses_anonymous_args = 0
 4581              		@ link register save eliminated.
 4582              	.LVL287:
3120:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr++;
 4583              		.loc 1 3120 0
 4584 138a 0168     		ldr	r1, [r0]	@ _4, hspi_2(D)->Instance
 4585 138c 826B     		ldr	r2, [r0, #56]	@ _3, hspi_2(D)->pRxBuffPtr
 4586 138e 097B     		ldrb	r1, [r1, #12]	@ zero_extendqisi2	@ MEM[(volatile uint8_t *)_4 + 12B], MEM[(volatile uint8_t *
 4587 1390 1170     		strb	r1, [r2]	@ MEM[(volatile uint8_t *)_4 + 12B], *_3
3121:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount--;
 4588              		.loc 1 3121 0
ARM GAS  /tmp/ccdPJtdr.s 			page 165


 4589 1392 826B     		ldr	r2, [r0, #56]	@ hspi_2(D)->pRxBuffPtr, hspi_2(D)->pRxBuffPtr
 4590 1394 0132     		adds	r2, r2, #1	@ tmp128, hspi_2(D)->pRxBuffPtr,
 4591 1396 8263     		str	r2, [r0, #56]	@ tmp128, hspi_2(D)->pRxBuffPtr
3122:src/stm32f1xx_hal_spi.c **** 
 4592              		.loc 1 3122 0
 4593 1398 C28F     		ldrh	r2, [r0, #62]	@, hspi_2(D)->RxXferCount
 4594 139a 013A     		subs	r2, r2, #1	@ tmp132, hspi_2(D)->RxXferCount,
 4595 139c 92B2     		uxth	r2, r2	@ _12, tmp132
 4596 139e C287     		strh	r2, [r0, #62]	@ movhi	@ _12, hspi_2(D)->RxXferCount
3125:src/stm32f1xx_hal_spi.c ****   {
 4597              		.loc 1 3125 0
 4598 13a0 C28F     		ldrh	r2, [r0, #62]	@, hspi_2(D)->RxXferCount
 4599 13a2 92B2     		uxth	r2, r2	@ _14, hspi_2(D)->RxXferCount
 4600 13a4 7AB9     		cbnz	r2, .L542	@ _14,
3128:src/stm32f1xx_hal_spi.c ****     {
 4601              		.loc 1 3128 0
 4602 13a6 826A     		ldr	r2, [r0, #40]	@ hspi_2(D)->Init.CRCCalculation, hspi_2(D)->Init.CRCCalculation
 4603 13a8 B2F5005F 		cmp	r2, #8192	@ hspi_2(D)->Init.CRCCalculation,
 4604 13ac 02D1     		bne	.L545	@,
3130:src/stm32f1xx_hal_spi.c ****       return;
 4605              		.loc 1 3130 0
 4606 13ae 064A     		ldr	r2, .L547	@ tmp137,
 4607 13b0 0264     		str	r2, [r0, #64]	@ tmp137, hspi_2(D)->RxISR
3131:src/stm32f1xx_hal_spi.c ****     }
 4608              		.loc 1 3131 0
 4609 13b2 7047     		bx	lr	@
 4610              	.L545:
 4611              	.LVL288:
 4612              	.LBB72:
 4613              	.LBB73:
3136:src/stm32f1xx_hal_spi.c **** 
 4614              		.loc 1 3136 0
 4615 13b4 0168     		ldr	r1, [r0]	@ _18, hspi_2(D)->Instance
 4616 13b6 4A68     		ldr	r2, [r1, #4]	@ _19, _18->CR2
 4617 13b8 22F06002 		bic	r2, r2, #96	@ _20, _19,
 4618 13bc 4A60     		str	r2, [r1, #4]	@ _20, _18->CR2
3138:src/stm32f1xx_hal_spi.c ****     {
 4619              		.loc 1 3138 0
 4620 13be C38E     		ldrh	r3, [r0, #54]	@, hspi_2(D)->TxXferCount
 4621 13c0 9BB2     		uxth	r3, r3	@ _21, hspi_2(D)->TxXferCount
 4622 13c2 03B9     		cbnz	r3, .L542	@ _21,
3140:src/stm32f1xx_hal_spi.c ****     }
 4623              		.loc 1 3140 0
 4624 13c4 5BE7     		b	SPI_CloseRxTx_ISR	@
 4625              	.LVL289:
 4626              	.L542:
 4627 13c6 7047     		bx	lr	@
 4628              	.L548:
 4629              		.align	2
 4630              	.L547:
 4631 13c8 00000000 		.word	SPI_2linesRxISR_8BITCRC
 4632              	.LBE73:
 4633              	.LBE72:
 4634              		.cfi_endproc
 4635              	.LFE104:
 4636              		.size	SPI_2linesRxISR_8BIT, .-SPI_2linesRxISR_8BIT
 4637              		.align	1
ARM GAS  /tmp/ccdPJtdr.s 			page 166


 4638              		.syntax unified
 4639              		.thumb
 4640              		.thumb_func
 4641              		.fpu softvfp
 4642              		.type	SPI_2linesRxISR_8BITCRC, %function
 4643              	SPI_2linesRxISR_8BITCRC:
 4644              	.LFB105:
3153:src/stm32f1xx_hal_spi.c ****   /* Read 8bit CRC to flush Data Regsiter */
 4645              		.loc 1 3153 0
 4646              		.cfi_startproc
 4647              		@ args = 0, pretend = 0, frame = 0
 4648              		@ frame_needed = 0, uses_anonymous_args = 0
 4649              		@ link register save eliminated.
 4650              	.LVL290:
3155:src/stm32f1xx_hal_spi.c **** 
 4651              		.loc 1 3155 0
 4652 13cc 0368     		ldr	r3, [r0]	@ _4, hspi_3(D)->Instance
 4653 13ce 1A7B     		ldrb	r2, [r3, #12]	@ zero_extendqisi2	@ MEM[(volatile uint8_t *)_4 + 12B], MEM[(volatile uint8_t *
3158:src/stm32f1xx_hal_spi.c **** 
 4654              		.loc 1 3158 0
 4655 13d0 5A68     		ldr	r2, [r3, #4]	@ _6, _4->CR2
 4656 13d2 22F06002 		bic	r2, r2, #96	@ _7, _6,
 4657 13d6 5A60     		str	r2, [r3, #4]	@ _7, _4->CR2
3160:src/stm32f1xx_hal_spi.c ****   {
 4658              		.loc 1 3160 0
 4659 13d8 C38E     		ldrh	r3, [r0, #54]	@, hspi_3(D)->TxXferCount
 4660 13da 9BB2     		uxth	r3, r3	@ _9, hspi_3(D)->TxXferCount
 4661 13dc 03B9     		cbnz	r3, .L549	@ _9,
3162:src/stm32f1xx_hal_spi.c ****   }
 4662              		.loc 1 3162 0
 4663 13de 4EE7     		b	SPI_CloseRxTx_ISR	@
 4664              	.LVL291:
 4665              	.L549:
 4666 13e0 7047     		bx	lr	@
 4667              		.cfi_endproc
 4668              	.LFE105:
 4669              		.size	SPI_2linesRxISR_8BITCRC, .-SPI_2linesRxISR_8BITCRC
 4670              		.align	1
 4671              		.syntax unified
 4672              		.thumb
 4673              		.thumb_func
 4674              		.fpu softvfp
 4675              		.type	SPI_2linesTxISR_16BIT, %function
 4676              	SPI_2linesTxISR_16BIT:
 4677              	.LFB109:
3262:src/stm32f1xx_hal_spi.c ****   /* Transmit data in 16 Bit mode */
 4678              		.loc 1 3262 0
 4679              		.cfi_startproc
 4680              		@ args = 0, pretend = 0, frame = 0
 4681              		@ frame_needed = 0, uses_anonymous_args = 0
 4682              		@ link register save eliminated.
 4683              	.LVL292:
3264:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr += sizeof(uint16_t);
 4684              		.loc 1 3264 0
 4685 13e2 016B     		ldr	r1, [r0, #48]	@ tmp127, hspi_3(D)->pTxBuffPtr
3262:src/stm32f1xx_hal_spi.c ****   /* Transmit data in 16 Bit mode */
 4686              		.loc 1 3262 0
ARM GAS  /tmp/ccdPJtdr.s 			page 167


 4687 13e4 10B4     		push	{r4}	@
 4688              	.LCFI56:
 4689              		.cfi_def_cfa_offset 4
 4690              		.cfi_offset 4, -4
3264:src/stm32f1xx_hal_spi.c ****   hspi->pTxBuffPtr += sizeof(uint16_t);
 4691              		.loc 1 3264 0
 4692 13e6 0268     		ldr	r2, [r0]	@ _4, hspi_3(D)->Instance
 4693 13e8 31F8024B 		ldrh	r4, [r1], #2	@ _7, MEM[(uint16_t *)_5]
 4694 13ec D460     		str	r4, [r2, #12]	@ _7, _4->DR
3265:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount--;
 4695              		.loc 1 3265 0
 4696 13ee 0163     		str	r1, [r0, #48]	@ tmp127, hspi_3(D)->pTxBuffPtr
3266:src/stm32f1xx_hal_spi.c **** 
 4697              		.loc 1 3266 0
 4698 13f0 C18E     		ldrh	r1, [r0, #54]	@, hspi_3(D)->TxXferCount
 4699 13f2 0139     		subs	r1, r1, #1	@ tmp130, hspi_3(D)->TxXferCount,
 4700 13f4 89B2     		uxth	r1, r1	@ _12, tmp130
 4701 13f6 C186     		strh	r1, [r0, #54]	@ movhi	@ _12, hspi_3(D)->TxXferCount
3269:src/stm32f1xx_hal_spi.c ****   {
 4702              		.loc 1 3269 0
 4703 13f8 C18E     		ldrh	r1, [r0, #54]	@, hspi_3(D)->TxXferCount
 4704 13fa 89B2     		uxth	r1, r1	@ _14, hspi_3(D)->TxXferCount
 4705 13fc 59B9     		cbnz	r1, .L551	@ _14,
3272:src/stm32f1xx_hal_spi.c ****     {
 4706              		.loc 1 3272 0
 4707 13fe 816A     		ldr	r1, [r0, #40]	@ hspi_3(D)->Init.CRCCalculation, hspi_3(D)->Init.CRCCalculation
 4708 1400 B1F5005F 		cmp	r1, #8192	@ hspi_3(D)->Init.CRCCalculation,
 4709 1404 09D1     		bne	.L554	@,
3275:src/stm32f1xx_hal_spi.c ****       /* Disable TXE interrupt */
 4710              		.loc 1 3275 0
 4711 1406 1368     		ldr	r3, [r2]	@ _16, _4->CR1
 4712 1408 43F48053 		orr	r3, r3, #4096	@ _17, _16,
 4713 140c 1360     		str	r3, [r2]	@ _17, _4->CR1
3277:src/stm32f1xx_hal_spi.c ****       return;
 4714              		.loc 1 3277 0
 4715 140e 5368     		ldr	r3, [r2, #4]	@ _19, _4->CR2
 4716 1410 23F08003 		bic	r3, r3, #128	@ _20, _19,
 4717 1414 5360     		str	r3, [r2, #4]	@ _20, _4->CR2
 4718              	.L551:
3290:src/stm32f1xx_hal_spi.c **** 
 4719              		.loc 1 3290 0
 4720 1416 10BC     		pop	{r4}	@
 4721              	.LCFI57:
 4722              		.cfi_remember_state
 4723              		.cfi_restore 4
 4724              		.cfi_def_cfa_offset 0
 4725 1418 7047     		bx	lr	@
 4726              	.L554:
 4727              	.LCFI58:
 4728              		.cfi_restore_state
3283:src/stm32f1xx_hal_spi.c **** 
 4729              		.loc 1 3283 0
 4730 141a 5168     		ldr	r1, [r2, #4]	@ _22, _4->CR2
 4731 141c 21F08001 		bic	r1, r1, #128	@ _23, _22,
 4732 1420 5160     		str	r1, [r2, #4]	@ _23, _4->CR2
3285:src/stm32f1xx_hal_spi.c ****     {
 4733              		.loc 1 3285 0
ARM GAS  /tmp/ccdPJtdr.s 			page 168


 4734 1422 C38F     		ldrh	r3, [r0, #62]	@, hspi_3(D)->RxXferCount
 4735 1424 9BB2     		uxth	r3, r3	@ _25, hspi_3(D)->RxXferCount
 4736 1426 002B     		cmp	r3, #0	@ _25
 4737 1428 F5D1     		bne	.L551	@
3290:src/stm32f1xx_hal_spi.c **** 
 4738              		.loc 1 3290 0
 4739 142a 10BC     		pop	{r4}	@
 4740              	.LCFI59:
 4741              		.cfi_restore 4
 4742              		.cfi_def_cfa_offset 0
3287:src/stm32f1xx_hal_spi.c ****     }
 4743              		.loc 1 3287 0
 4744 142c 27E7     		b	SPI_CloseRxTx_ISR	@
 4745              	.LVL293:
 4746              		.cfi_endproc
 4747              	.LFE109:
 4748              		.size	SPI_2linesTxISR_16BIT, .-SPI_2linesTxISR_16BIT
 4749              		.align	1
 4750              		.syntax unified
 4751              		.thumb
 4752              		.thumb_func
 4753              		.fpu softvfp
 4754              		.type	SPI_2linesRxISR_16BIT, %function
 4755              	SPI_2linesRxISR_16BIT:
 4756              	.LFB107:
3210:src/stm32f1xx_hal_spi.c ****   /* Receive data in 16 Bit mode */
 4757              		.loc 1 3210 0
 4758              		.cfi_startproc
 4759              		@ args = 0, pretend = 0, frame = 0
 4760              		@ frame_needed = 0, uses_anonymous_args = 0
 4761              		@ link register save eliminated.
 4762              	.LVL294:
3212:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr += sizeof(uint16_t);
 4763              		.loc 1 3212 0
 4764 142e 0168     		ldr	r1, [r0]	@ _5, hspi_3(D)->Instance
 4765 1430 826B     		ldr	r2, [r0, #56]	@ tmp124, hspi_3(D)->pRxBuffPtr
3210:src/stm32f1xx_hal_spi.c ****   /* Receive data in 16 Bit mode */
 4766              		.loc 1 3210 0
 4767 1432 10B4     		push	{r4}	@
 4768              	.LCFI60:
 4769              		.cfi_def_cfa_offset 4
 4770              		.cfi_offset 4, -4
3212:src/stm32f1xx_hal_spi.c ****   hspi->pRxBuffPtr += sizeof(uint16_t);
 4771              		.loc 1 3212 0
 4772 1434 CC68     		ldr	r4, [r1, #12]	@ _6, _5->DR
 4773 1436 22F8024B 		strh	r4, [r2], #2	@ movhi	@ _6, MEM[(uint16_t *)_4]
3213:src/stm32f1xx_hal_spi.c ****   hspi->RxXferCount--;
 4774              		.loc 1 3213 0
 4775 143a 8263     		str	r2, [r0, #56]	@ tmp124, hspi_3(D)->pRxBuffPtr
3214:src/stm32f1xx_hal_spi.c **** 
 4776              		.loc 1 3214 0
 4777 143c C28F     		ldrh	r2, [r0, #62]	@, hspi_3(D)->RxXferCount
 4778 143e 013A     		subs	r2, r2, #1	@ tmp127, hspi_3(D)->RxXferCount,
 4779 1440 92B2     		uxth	r2, r2	@ _12, tmp127
 4780 1442 C287     		strh	r2, [r0, #62]	@ movhi	@ _12, hspi_3(D)->RxXferCount
3216:src/stm32f1xx_hal_spi.c ****   {
 4781              		.loc 1 3216 0
ARM GAS  /tmp/ccdPJtdr.s 			page 169


 4782 1444 C28F     		ldrh	r2, [r0, #62]	@, hspi_3(D)->RxXferCount
 4783 1446 92B2     		uxth	r2, r2	@ _14, hspi_3(D)->RxXferCount
 4784 1448 2AB9     		cbnz	r2, .L556	@ _14,
3219:src/stm32f1xx_hal_spi.c ****     {
 4785              		.loc 1 3219 0
 4786 144a 826A     		ldr	r2, [r0, #40]	@ hspi_3(D)->Init.CRCCalculation, hspi_3(D)->Init.CRCCalculation
 4787 144c B2F5005F 		cmp	r2, #8192	@ hspi_3(D)->Init.CRCCalculation,
 4788 1450 03D1     		bne	.L559	@,
3221:src/stm32f1xx_hal_spi.c ****       return;
 4789              		.loc 1 3221 0
 4790 1452 074A     		ldr	r2, .L561	@ tmp132,
 4791 1454 0264     		str	r2, [r0, #64]	@ tmp132, hspi_3(D)->RxISR
 4792              	.L556:
3234:src/stm32f1xx_hal_spi.c **** 
 4793              		.loc 1 3234 0
 4794 1456 10BC     		pop	{r4}	@
 4795              	.LCFI61:
 4796              		.cfi_remember_state
 4797              		.cfi_restore 4
 4798              		.cfi_def_cfa_offset 0
 4799 1458 7047     		bx	lr	@
 4800              	.L559:
 4801              	.LCFI62:
 4802              		.cfi_restore_state
3227:src/stm32f1xx_hal_spi.c **** 
 4803              		.loc 1 3227 0
 4804 145a 4A68     		ldr	r2, [r1, #4]	@ _17, _5->CR2
 4805 145c 22F04002 		bic	r2, r2, #64	@ _18, _17,
 4806 1460 4A60     		str	r2, [r1, #4]	@ _18, _5->CR2
3229:src/stm32f1xx_hal_spi.c ****     {
 4807              		.loc 1 3229 0
 4808 1462 C38E     		ldrh	r3, [r0, #54]	@, hspi_3(D)->TxXferCount
 4809 1464 9BB2     		uxth	r3, r3	@ _20, hspi_3(D)->TxXferCount
 4810 1466 002B     		cmp	r3, #0	@ _20
 4811 1468 F5D1     		bne	.L556	@
3234:src/stm32f1xx_hal_spi.c **** 
 4812              		.loc 1 3234 0
 4813 146a 10BC     		pop	{r4}	@
 4814              	.LCFI63:
 4815              		.cfi_restore 4
 4816              		.cfi_def_cfa_offset 0
3231:src/stm32f1xx_hal_spi.c ****     }
 4817              		.loc 1 3231 0
 4818 146c 07E7     		b	SPI_CloseRxTx_ISR	@
 4819              	.LVL295:
 4820              	.L562:
 4821 146e 00BF     		.align	2
 4822              	.L561:
 4823 1470 00000000 		.word	SPI_2linesRxISR_16BITCRC
 4824              		.cfi_endproc
 4825              	.LFE107:
 4826              		.size	SPI_2linesRxISR_16BIT, .-SPI_2linesRxISR_16BIT
 4827              		.align	1
 4828              		.syntax unified
 4829              		.thumb
 4830              		.thumb_func
 4831              		.fpu softvfp
ARM GAS  /tmp/ccdPJtdr.s 			page 170


 4832              		.type	SPI_2linesRxISR_16BITCRC, %function
 4833              	SPI_2linesRxISR_16BITCRC:
 4834              	.LFB108:
3244:src/stm32f1xx_hal_spi.c ****   /* Read 16bit CRC to flush Data Regsiter */
 4835              		.loc 1 3244 0
 4836              		.cfi_startproc
 4837              		@ args = 0, pretend = 0, frame = 0
 4838              		@ frame_needed = 0, uses_anonymous_args = 0
 4839              		@ link register save eliminated.
 4840              	.LVL296:
3246:src/stm32f1xx_hal_spi.c **** 
 4841              		.loc 1 3246 0
 4842 1474 0368     		ldr	r3, [r0]	@ _3, hspi_2(D)->Instance
 4843 1476 DA68     		ldr	r2, [r3, #12]	@ vol.30_4, _3->DR
3249:src/stm32f1xx_hal_spi.c **** 
 4844              		.loc 1 3249 0
 4845 1478 5A68     		ldr	r2, [r3, #4]	@ _5, _3->CR2
 4846 147a 22F04002 		bic	r2, r2, #64	@ _6, _5,
 4847 147e 5A60     		str	r2, [r3, #4]	@ _6, _3->CR2
3251:src/stm32f1xx_hal_spi.c **** }
 4848              		.loc 1 3251 0
 4849 1480 FDE6     		b	SPI_CloseRxTx_ISR	@
 4850              	.LVL297:
 4851              		.cfi_endproc
 4852              	.LFE108:
 4853              		.size	SPI_2linesRxISR_16BITCRC, .-SPI_2linesRxISR_16BITCRC
 4854              		.align	1
 4855              		.syntax unified
 4856              		.thumb
 4857              		.thumb_func
 4858              		.fpu softvfp
 4859              		.type	SPI_DMAReceiveCplt, %function
 4860              	SPI_DMAReceiveCplt:
 4861              	.LFB95:
2727:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 4862              		.loc 1 2727 0
 4863              		.cfi_startproc
 4864              		@ args = 0, pretend = 0, frame = 0
 4865              		@ frame_needed = 0, uses_anonymous_args = 0
 4866              	.LVL298:
 4867 1482 73B5     		push	{r0, r1, r4, r5, r6, lr}	@
 4868              	.LCFI64:
 4869              		.cfi_def_cfa_offset 24
 4870              		.cfi_offset 4, -16
 4871              		.cfi_offset 5, -12
 4872              		.cfi_offset 6, -8
 4873              		.cfi_offset 14, -4
2727:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 4874              		.loc 1 2727 0
 4875 1484 0646     		mov	r6, r0	@ hdma, hdma
2728:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 4876              		.loc 1 2728 0
 4877 1486 446A     		ldr	r4, [r0, #36]	@ hspi, hdma_8(D)->Parent
 4878              	.LVL299:
2732:src/stm32f1xx_hal_spi.c **** 
 4879              		.loc 1 2732 0
 4880 1488 FFF7FEFF 		bl	HAL_GetTick	@
ARM GAS  /tmp/ccdPJtdr.s 			page 171


 4881              	.LVL300:
2735:src/stm32f1xx_hal_spi.c ****   {
 4882              		.loc 1 2735 0
 4883 148c 3368     		ldr	r3, [r6]	@ _12, hdma_8(D)->Instance
2732:src/stm32f1xx_hal_spi.c **** 
 4884              		.loc 1 2732 0
 4885 148e 0546     		mov	r5, r0	@ tickstart,
 4886              	.LVL301:
2735:src/stm32f1xx_hal_spi.c ****   {
 4887              		.loc 1 2735 0
 4888 1490 1B68     		ldr	r3, [r3]	@ _13, _12->CCR
 4889 1492 9906     		lsls	r1, r3, #26	@, _13,
 4890 1494 3FD4     		bmi	.L565	@,
2738:src/stm32f1xx_hal_spi.c **** 
 4891              		.loc 1 2738 0
 4892 1496 2268     		ldr	r2, [r4]	@ _15, hspi_9->Instance
 4893 1498 5368     		ldr	r3, [r2, #4]	@ _16, _15->CR2
 4894 149a 23F02003 		bic	r3, r3, #32	@ _17, _16,
 4895 149e 5360     		str	r3, [r2, #4]	@ _17, _15->CR2
2742:src/stm32f1xx_hal_spi.c ****     {
 4896              		.loc 1 2742 0
 4897 14a0 A36A     		ldr	r3, [r4, #40]	@ hspi_9->Init.CRCCalculation, hspi_9->Init.CRCCalculation
 4898 14a2 B3F5005F 		cmp	r3, #8192	@ hspi_9->Init.CRCCalculation,
 4899 14a6 0DD1     		bne	.L566	@,
2745:src/stm32f1xx_hal_spi.c ****       {
 4900              		.loc 1 2745 0
 4901 14a8 0122     		movs	r2, #1	@,
 4902 14aa 0090     		str	r0, [sp]	@ tickstart,
 4903 14ac 6423     		movs	r3, #100	@,
 4904 14ae 1146     		mov	r1, r2	@,
 4905 14b0 2046     		mov	r0, r4	@, hspi
 4906              	.LVL302:
 4907 14b2 FEF7DAFD 		bl	SPI_WaitFlagStateUntilTimeout	@
 4908              	.LVL303:
 4909 14b6 18B1     		cbz	r0, .L567	@,
2748:src/stm32f1xx_hal_spi.c ****       }
 4910              		.loc 1 2748 0
 4911 14b8 636D     		ldr	r3, [r4, #84]	@ _22, hspi_9->ErrorCode
 4912 14ba 43F00203 		orr	r3, r3, #2	@ _23, _22,
 4913 14be 6365     		str	r3, [r4, #84]	@ _23, hspi_9->ErrorCode
 4914              	.L567:
2751:src/stm32f1xx_hal_spi.c ****     }
 4915              		.loc 1 2751 0
 4916 14c0 2368     		ldr	r3, [r4]	@ _25, hspi_9->Instance
 4917 14c2 DB68     		ldr	r3, [r3, #12]	@ vol.34_26, _25->DR
 4918              	.L566:
2756:src/stm32f1xx_hal_spi.c **** 
 4919              		.loc 1 2756 0
 4920 14c4 2268     		ldr	r2, [r4]	@ _27, hspi_9->Instance
2759:src/stm32f1xx_hal_spi.c ****     {
 4921              		.loc 1 2759 0
 4922 14c6 6421     		movs	r1, #100	@,
2756:src/stm32f1xx_hal_spi.c **** 
 4923              		.loc 1 2756 0
 4924 14c8 5368     		ldr	r3, [r2, #4]	@ _28, _27->CR2
2759:src/stm32f1xx_hal_spi.c ****     {
 4925              		.loc 1 2759 0
ARM GAS  /tmp/ccdPJtdr.s 			page 172


 4926 14ca 2046     		mov	r0, r4	@, hspi
2756:src/stm32f1xx_hal_spi.c **** 
 4927              		.loc 1 2756 0
 4928 14cc 23F00303 		bic	r3, r3, #3	@ _29, _28,
 4929 14d0 5360     		str	r3, [r2, #4]	@ _29, _27->CR2
2759:src/stm32f1xx_hal_spi.c ****     {
 4930              		.loc 1 2759 0
 4931 14d2 2A46     		mov	r2, r5	@, tickstart
 4932 14d4 FEF71CFE 		bl	SPI_EndRxTransaction	@
 4933              	.LVL304:
 4934 14d8 08B1     		cbz	r0, .L568	@,
2761:src/stm32f1xx_hal_spi.c ****     }
 4935              		.loc 1 2761 0
 4936 14da 2023     		movs	r3, #32	@ tmp143,
 4937 14dc 6365     		str	r3, [r4, #84]	@ tmp143, hspi_9->ErrorCode
 4938              	.L568:
2764:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
 4939              		.loc 1 2764 0
 4940 14de 0023     		movs	r3, #0	@ tmp145,
 4941 14e0 E387     		strh	r3, [r4, #62]	@ movhi	@ tmp145, hspi_9->RxXferCount
2765:src/stm32f1xx_hal_spi.c **** 
 4942              		.loc 1 2765 0
 4943 14e2 0123     		movs	r3, #1	@ tmp146,
 4944 14e4 84F85130 		strb	r3, [r4, #81]	@ tmp146, hspi_9->State
2769:src/stm32f1xx_hal_spi.c ****     {
 4945              		.loc 1 2769 0
 4946 14e8 2368     		ldr	r3, [r4]	@ _36, hspi_9->Instance
 4947 14ea 9A68     		ldr	r2, [r3, #8]	@ _37, _36->SR
 4948 14ec D206     		lsls	r2, r2, #27	@, _37,
 4949 14ee 0BD5     		bpl	.L569	@,
2774:src/stm32f1xx_hal_spi.c **** 
 4950              		.loc 1 2774 0
 4951 14f0 626D     		ldr	r2, [r4, #84]	@ _39, hspi_9->ErrorCode
 4952 14f2 42F00202 		orr	r2, r2, #2	@ _40, _39,
 4953 14f6 6265     		str	r2, [r4, #84]	@ _40, hspi_9->ErrorCode
2777:src/stm32f1xx_hal_spi.c ****       }
 4954              		.loc 1 2777 0
 4955 14f8 1A68     		ldr	r2, [r3]	@ _42, _36->CR1
 4956 14fa 22F40052 		bic	r2, r2, #8192	@ _43, _42,
 4957 14fe 1A60     		str	r2, [r3]	@ _43, _36->CR1
 4958 1500 1A68     		ldr	r2, [r3]	@ _45, _36->CR1
 4959 1502 42F40052 		orr	r2, r2, #8192	@ _46, _45,
 4960 1506 1A60     		str	r2, [r3]	@ _46, _36->CR1
 4961              	.L569:
2786:src/stm32f1xx_hal_spi.c ****     {
 4962              		.loc 1 2786 0
 4963 1508 636D     		ldr	r3, [r4, #84]	@ _48, hspi_9->ErrorCode
 4964 150a 23B1     		cbz	r3, .L565	@ _48,
2792:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 4965              		.loc 1 2792 0
 4966 150c 2046     		mov	r0, r4	@, hspi
 4967 150e FFF7FEFF 		bl	HAL_SPI_ErrorCallback	@
 4968              	.LVL305:
 4969              	.L564:
2803:src/stm32f1xx_hal_spi.c **** 
 4970              		.loc 1 2803 0
 4971 1512 02B0     		add	sp, sp, #8	@,,
ARM GAS  /tmp/ccdPJtdr.s 			page 173


 4972              	.LCFI65:
 4973              		.cfi_remember_state
 4974              		.cfi_def_cfa_offset 16
 4975              		@ sp needed	@
 4976 1514 70BD     		pop	{r4, r5, r6, pc}	@
 4977              	.LVL306:
 4978              	.L565:
 4979              	.LCFI66:
 4980              		.cfi_restore_state
2801:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 4981              		.loc 1 2801 0
 4982 1516 2046     		mov	r0, r4	@, hspi
 4983 1518 FFF7FEFF 		bl	HAL_SPI_RxCpltCallback	@
 4984              	.LVL307:
 4985 151c F9E7     		b	.L564	@
 4986              		.cfi_endproc
 4987              	.LFE95:
 4988              		.size	SPI_DMAReceiveCplt, .-SPI_DMAReceiveCplt
 4989              		.align	1
 4990              		.syntax unified
 4991              		.thumb
 4992              		.thumb_func
 4993              		.fpu softvfp
 4994              		.type	SPI_DMATransmitReceiveCplt, %function
 4995              	SPI_DMATransmitReceiveCplt:
 4996              	.LFB96:
2812:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 4997              		.loc 1 2812 0
 4998              		.cfi_startproc
 4999              		@ args = 0, pretend = 0, frame = 0
 5000              		@ frame_needed = 0, uses_anonymous_args = 0
 5001              	.LVL308:
 5002 151e 73B5     		push	{r0, r1, r4, r5, r6, lr}	@
 5003              	.LCFI67:
 5004              		.cfi_def_cfa_offset 24
 5005              		.cfi_offset 4, -16
 5006              		.cfi_offset 5, -12
 5007              		.cfi_offset 6, -8
 5008              		.cfi_offset 14, -4
2812:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 5009              		.loc 1 2812 0
 5010 1520 0646     		mov	r6, r0	@ hdma, hdma
2813:src/stm32f1xx_hal_spi.c ****   uint32_t tickstart;
 5011              		.loc 1 2813 0
 5012 1522 446A     		ldr	r4, [r0, #36]	@ hspi, hdma_8(D)->Parent
 5013              	.LVL309:
2817:src/stm32f1xx_hal_spi.c **** 
 5014              		.loc 1 2817 0
 5015 1524 FFF7FEFF 		bl	HAL_GetTick	@
 5016              	.LVL310:
2820:src/stm32f1xx_hal_spi.c ****   {
 5017              		.loc 1 2820 0
 5018 1528 3368     		ldr	r3, [r6]	@ _12, hdma_8(D)->Instance
2817:src/stm32f1xx_hal_spi.c **** 
 5019              		.loc 1 2817 0
 5020 152a 0546     		mov	r5, r0	@ tickstart,
 5021              	.LVL311:
ARM GAS  /tmp/ccdPJtdr.s 			page 174


2820:src/stm32f1xx_hal_spi.c ****   {
 5022              		.loc 1 2820 0
 5023 152c 1B68     		ldr	r3, [r3]	@ _13, _12->CCR
 5024 152e 9906     		lsls	r1, r3, #26	@, _13,
 5025 1530 41D4     		bmi	.L584	@,
2823:src/stm32f1xx_hal_spi.c **** 
 5026              		.loc 1 2823 0
 5027 1532 2268     		ldr	r2, [r4]	@ _15, hspi_9->Instance
 5028 1534 5368     		ldr	r3, [r2, #4]	@ _16, _15->CR2
 5029 1536 23F02003 		bic	r3, r3, #32	@ _17, _16,
 5030 153a 5360     		str	r3, [r2, #4]	@ _17, _15->CR2
2827:src/stm32f1xx_hal_spi.c ****     {
 5031              		.loc 1 2827 0
 5032 153c A36A     		ldr	r3, [r4, #40]	@ hspi_9->Init.CRCCalculation, hspi_9->Init.CRCCalculation
 5033 153e B3F5005F 		cmp	r3, #8192	@ hspi_9->Init.CRCCalculation,
 5034 1542 0DD1     		bne	.L585	@,
2830:src/stm32f1xx_hal_spi.c ****       {
 5035              		.loc 1 2830 0
 5036 1544 0122     		movs	r2, #1	@,
 5037 1546 0090     		str	r0, [sp]	@ tickstart,
 5038 1548 6423     		movs	r3, #100	@,
 5039 154a 1146     		mov	r1, r2	@,
 5040 154c 2046     		mov	r0, r4	@, hspi
 5041              	.LVL312:
 5042 154e FEF78CFD 		bl	SPI_WaitFlagStateUntilTimeout	@
 5043              	.LVL313:
 5044 1552 18B1     		cbz	r0, .L586	@,
2832:src/stm32f1xx_hal_spi.c ****       }
 5045              		.loc 1 2832 0
 5046 1554 636D     		ldr	r3, [r4, #84]	@ _22, hspi_9->ErrorCode
 5047 1556 43F00203 		orr	r3, r3, #2	@ _23, _22,
 5048 155a 6365     		str	r3, [r4, #84]	@ _23, hspi_9->ErrorCode
 5049              	.L586:
2835:src/stm32f1xx_hal_spi.c ****     }
 5050              		.loc 1 2835 0
 5051 155c 2368     		ldr	r3, [r4]	@ _25, hspi_9->Instance
 5052 155e DB68     		ldr	r3, [r3, #12]	@ vol.35_26, _25->DR
 5053              	.L585:
2840:src/stm32f1xx_hal_spi.c ****     {
 5054              		.loc 1 2840 0
 5055 1560 2A46     		mov	r2, r5	@, tickstart
 5056 1562 6421     		movs	r1, #100	@,
 5057 1564 2046     		mov	r0, r4	@, hspi
 5058 1566 FEF7C3FD 		bl	SPI_EndRxTxTransaction	@
 5059              	.LVL314:
 5060 156a 18B1     		cbz	r0, .L587	@,
2842:src/stm32f1xx_hal_spi.c ****     }
 5061              		.loc 1 2842 0
 5062 156c 636D     		ldr	r3, [r4, #84]	@ _29, hspi_9->ErrorCode
 5063 156e 43F02003 		orr	r3, r3, #32	@ _30, _29,
 5064 1572 6365     		str	r3, [r4, #84]	@ _30, hspi_9->ErrorCode
 5065              	.L587:
2846:src/stm32f1xx_hal_spi.c **** 
 5066              		.loc 1 2846 0
 5067 1574 2368     		ldr	r3, [r4]	@ _32, hspi_9->Instance
 5068 1576 5A68     		ldr	r2, [r3, #4]	@ _33, _32->CR2
 5069 1578 22F00302 		bic	r2, r2, #3	@ _34, _33,
ARM GAS  /tmp/ccdPJtdr.s 			page 175


 5070 157c 5A60     		str	r2, [r3, #4]	@ _34, _32->CR2
2848:src/stm32f1xx_hal_spi.c ****     hspi->RxXferCount = 0U;
 5071              		.loc 1 2848 0
 5072 157e 0022     		movs	r2, #0	@ tmp145,
 5073 1580 E286     		strh	r2, [r4, #54]	@ movhi	@ tmp145, hspi_9->TxXferCount
2849:src/stm32f1xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
 5074              		.loc 1 2849 0
 5075 1582 E287     		strh	r2, [r4, #62]	@ movhi	@ tmp145, hspi_9->RxXferCount
2850:src/stm32f1xx_hal_spi.c **** 
 5076              		.loc 1 2850 0
 5077 1584 0122     		movs	r2, #1	@ tmp148,
 5078 1586 84F85120 		strb	r2, [r4, #81]	@ tmp148, hspi_9->State
2854:src/stm32f1xx_hal_spi.c ****     {
 5079              		.loc 1 2854 0
 5080 158a 9A68     		ldr	r2, [r3, #8]	@ _39, _32->SR
 5081 158c D206     		lsls	r2, r2, #27	@, _39,
 5082 158e 0BD5     		bpl	.L588	@,
2859:src/stm32f1xx_hal_spi.c **** 
 5083              		.loc 1 2859 0
 5084 1590 626D     		ldr	r2, [r4, #84]	@ _41, hspi_9->ErrorCode
 5085 1592 42F00202 		orr	r2, r2, #2	@ _42, _41,
 5086 1596 6265     		str	r2, [r4, #84]	@ _42, hspi_9->ErrorCode
2862:src/stm32f1xx_hal_spi.c ****       }
 5087              		.loc 1 2862 0
 5088 1598 1A68     		ldr	r2, [r3]	@ _44, _32->CR1
 5089 159a 22F40052 		bic	r2, r2, #8192	@ _45, _44,
 5090 159e 1A60     		str	r2, [r3]	@ _45, _32->CR1
 5091 15a0 1A68     		ldr	r2, [r3]	@ _47, _32->CR1
 5092 15a2 42F40052 		orr	r2, r2, #8192	@ _48, _47,
 5093 15a6 1A60     		str	r2, [r3]	@ _48, _32->CR1
 5094              	.L588:
2871:src/stm32f1xx_hal_spi.c ****     {
 5095              		.loc 1 2871 0
 5096 15a8 636D     		ldr	r3, [r4, #84]	@ _50, hspi_9->ErrorCode
 5097 15aa 23B1     		cbz	r3, .L584	@ _50,
2877:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 5098              		.loc 1 2877 0
 5099 15ac 2046     		mov	r0, r4	@, hspi
 5100 15ae FFF7FEFF 		bl	HAL_SPI_ErrorCallback	@
 5101              	.LVL315:
 5102              	.L583:
2888:src/stm32f1xx_hal_spi.c **** 
 5103              		.loc 1 2888 0
 5104 15b2 02B0     		add	sp, sp, #8	@,,
 5105              	.LCFI68:
 5106              		.cfi_remember_state
 5107              		.cfi_def_cfa_offset 16
 5108              		@ sp needed	@
 5109 15b4 70BD     		pop	{r4, r5, r6, pc}	@
 5110              	.LVL316:
 5111              	.L584:
 5112              	.LCFI69:
 5113              		.cfi_restore_state
2886:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 5114              		.loc 1 2886 0
 5115 15b6 2046     		mov	r0, r4	@, hspi
 5116 15b8 FFF7FEFF 		bl	HAL_SPI_TxRxCpltCallback	@
ARM GAS  /tmp/ccdPJtdr.s 			page 176


 5117              	.LVL317:
 5118 15bc F9E7     		b	.L583	@
 5119              		.cfi_endproc
 5120              	.LFE96:
 5121              		.size	SPI_DMATransmitReceiveCplt, .-SPI_DMATransmitReceiveCplt
 5122              		.align	1
 5123              		.weak	HAL_SPI_AbortCpltCallback
 5124              		.syntax unified
 5125              		.thumb
 5126              		.thumb_func
 5127              		.fpu softvfp
 5128              		.type	HAL_SPI_AbortCpltCallback, %function
 5129              	HAL_SPI_AbortCpltCallback:
 5130              	.LFB91:
2598:src/stm32f1xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
 5131              		.loc 1 2598 0
 5132              		.cfi_startproc
 5133              		@ args = 0, pretend = 0, frame = 0
 5134              		@ frame_needed = 0, uses_anonymous_args = 0
 5135              		@ link register save eliminated.
 5136              	.LVL318:
 5137 15be 7047     		bx	lr	@
 5138              		.cfi_endproc
 5139              	.LFE91:
 5140              		.size	HAL_SPI_AbortCpltCallback, .-HAL_SPI_AbortCpltCallback
 5141              		.align	1
 5142              		.global	HAL_SPI_Abort_IT
 5143              		.syntax unified
 5144              		.thumb
 5145              		.thumb_func
 5146              		.fpu softvfp
 5147              		.type	HAL_SPI_Abort_IT, %function
 5148              	HAL_SPI_Abort_IT:
 5149              	.LFB79:
2142:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode;
 5150              		.loc 1 2142 0
 5151              		.cfi_startproc
 5152              		@ args = 0, pretend = 0, frame = 16
 5153              		@ frame_needed = 0, uses_anonymous_args = 0
 5154              	.LVL319:
2151:src/stm32f1xx_hal_spi.c ****   count = resetcount;
 5155              		.loc 1 2151 0
 5156 15c0 45F6C052 		movw	r2, #24000	@ tmp163,
 5157 15c4 424B     		ldr	r3, .L646	@ tmp159,
2142:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode;
 5158              		.loc 1 2142 0
 5159 15c6 30B5     		push	{r4, r5, lr}	@
 5160              	.LCFI70:
 5161              		.cfi_def_cfa_offset 12
 5162              		.cfi_offset 4, -12
 5163              		.cfi_offset 5, -8
 5164              		.cfi_offset 14, -4
2151:src/stm32f1xx_hal_spi.c ****   count = resetcount;
 5165              		.loc 1 2151 0
 5166 15c8 1B68     		ldr	r3, [r3]	@ SystemCoreClock, SystemCoreClock
2142:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode;
 5167              		.loc 1 2142 0
ARM GAS  /tmp/ccdPJtdr.s 			page 177


 5168 15ca 85B0     		sub	sp, sp, #20	@,,
 5169              	.LCFI71:
 5170              		.cfi_def_cfa_offset 32
2151:src/stm32f1xx_hal_spi.c ****   count = resetcount;
 5171              		.loc 1 2151 0
 5172 15cc B3FBF2F2 		udiv	r2, r3, r2	@ tmp162, SystemCoreClock, tmp163
 5173 15d0 6423     		movs	r3, #100	@ tmp164,
 5174 15d2 5343     		muls	r3, r2, r3	@ resetcount.60_20, tmp162
 5175 15d4 0293     		str	r3, [sp, #8]	@ resetcount.60_20, resetcount
2152:src/stm32f1xx_hal_spi.c **** 
 5176              		.loc 1 2152 0
 5177 15d6 029B     		ldr	r3, [sp, #8]	@ resetcount.61_22, resetcount
2142:src/stm32f1xx_hal_spi.c ****   HAL_StatusTypeDef errorcode;
 5178              		.loc 1 2142 0
 5179 15d8 0446     		mov	r4, r0	@ hspi, hspi
2152:src/stm32f1xx_hal_spi.c **** 
 5180              		.loc 1 2152 0
 5181 15da 0193     		str	r3, [sp, #4]	@ resetcount.61_22, count
2155:src/stm32f1xx_hal_spi.c **** 
 5182              		.loc 1 2155 0
 5183 15dc 0368     		ldr	r3, [r0]	@ _25, hspi_24(D)->Instance
 5184 15de 5A68     		ldr	r2, [r3, #4]	@ _26, _25->CR2
 5185 15e0 22F02002 		bic	r2, r2, #32	@ _27, _26,
 5186 15e4 5A60     		str	r2, [r3, #4]	@ _27, _25->CR2
2158:src/stm32f1xx_hal_spi.c ****   {
 5187              		.loc 1 2158 0
 5188 15e6 5A68     		ldr	r2, [r3, #4]	@ _29, _25->CR2
 5189 15e8 1006     		lsls	r0, r2, #24	@, _29,
 5190              	.LVL320:
 5191 15ea 0AD5     		bpl	.L604	@,
2160:src/stm32f1xx_hal_spi.c ****     /* Wait HAL_SPI_STATE_ABORT state */
 5192              		.loc 1 2160 0
 5193 15ec 394A     		ldr	r2, .L646+4	@ tmp166,
 5194 15ee 6264     		str	r2, [r4, #68]	@ tmp166, hspi_24(D)->TxISR
 5195              	.L607:
2164:src/stm32f1xx_hal_spi.c ****       {
 5196              		.loc 1 2164 0
 5197 15f0 019A     		ldr	r2, [sp, #4]	@ count.62_32, count
 5198 15f2 002A     		cmp	r2, #0	@ count.62_32
 5199 15f4 3DD1     		bne	.L605	@
2166:src/stm32f1xx_hal_spi.c ****         break;
 5200              		.loc 1 2166 0
 5201 15f6 626D     		ldr	r2, [r4, #84]	@ _37, hspi_24(D)->ErrorCode
 5202 15f8 42F04002 		orr	r2, r2, #64	@ _38, _37,
 5203 15fc 6265     		str	r2, [r4, #84]	@ _38, hspi_24(D)->ErrorCode
 5204              	.L606:
2172:src/stm32f1xx_hal_spi.c ****   }
 5205              		.loc 1 2172 0
 5206 15fe 029A     		ldr	r2, [sp, #8]	@ resetcount.65_40, resetcount
 5207 1600 0192     		str	r2, [sp, #4]	@ resetcount.65_40, count
 5208              	.L604:
2175:src/stm32f1xx_hal_spi.c ****   {
 5209              		.loc 1 2175 0
 5210 1602 5A68     		ldr	r2, [r3, #4]	@ _42, _25->CR2
 5211 1604 5106     		lsls	r1, r2, #25	@, _42,
 5212 1606 0AD5     		bpl	.L608	@,
2177:src/stm32f1xx_hal_spi.c ****     /* Wait HAL_SPI_STATE_ABORT state */
ARM GAS  /tmp/ccdPJtdr.s 			page 178


 5213              		.loc 1 2177 0
 5214 1608 334A     		ldr	r2, .L646+8	@ tmp171,
 5215 160a 2264     		str	r2, [r4, #64]	@ tmp171, hspi_24(D)->RxISR
 5216              	.L611:
2181:src/stm32f1xx_hal_spi.c ****       {
 5217              		.loc 1 2181 0
 5218 160c 019A     		ldr	r2, [sp, #4]	@ count.66_45, count
 5219 160e 002A     		cmp	r2, #0	@ count.66_45
 5220 1610 37D1     		bne	.L609	@
2183:src/stm32f1xx_hal_spi.c ****         break;
 5221              		.loc 1 2183 0
 5222 1612 626D     		ldr	r2, [r4, #84]	@ _50, hspi_24(D)->ErrorCode
 5223 1614 42F04002 		orr	r2, r2, #64	@ _51, _50,
 5224 1618 6265     		str	r2, [r4, #84]	@ _51, hspi_24(D)->ErrorCode
 5225              	.L610:
2189:src/stm32f1xx_hal_spi.c ****   }
 5226              		.loc 1 2189 0
 5227 161a 029A     		ldr	r2, [sp, #8]	@ resetcount.69_53, resetcount
 5228 161c 0192     		str	r2, [sp, #4]	@ resetcount.69_53, count
 5229              	.L608:
2195:src/stm32f1xx_hal_spi.c ****   {
 5230              		.loc 1 2195 0
 5231 161e A06C     		ldr	r0, [r4, #72]	@ _55, hspi_24(D)->hdmatx
 5232 1620 28B1     		cbz	r0, .L612	@ _55,
2199:src/stm32f1xx_hal_spi.c ****     {
 5233              		.loc 1 2199 0
 5234 1622 5A68     		ldr	r2, [r3, #4]	@ _56, _25->CR2
 5235 1624 12F00202 		ands	r2, r2, #2	@ tmp175, _56,
2201:src/stm32f1xx_hal_spi.c ****     }
 5236              		.loc 1 2201 0
 5237 1628 18BF     		it	ne
 5238 162a 2C4A     		ldrne	r2, .L646+12	@ tmp176,
2205:src/stm32f1xx_hal_spi.c ****     }
 5239              		.loc 1 2205 0
 5240 162c 4263     		str	r2, [r0, #52]	@ tmp175, _55->XferAbortCallback
 5241              	.L612:
2209:src/stm32f1xx_hal_spi.c ****   {
 5242              		.loc 1 2209 0
 5243 162e E16C     		ldr	r1, [r4, #76]	@ _60, hspi_24(D)->hdmarx
 5244 1630 29B1     		cbz	r1, .L614	@ _60,
2213:src/stm32f1xx_hal_spi.c ****     {
 5245              		.loc 1 2213 0
 5246 1632 5A68     		ldr	r2, [r3, #4]	@ _61, _25->CR2
 5247 1634 12F00102 		ands	r2, r2, #1	@ tmp178, _61,
2215:src/stm32f1xx_hal_spi.c ****     }
 5248              		.loc 1 2215 0
 5249 1638 18BF     		it	ne
 5250 163a 294A     		ldrne	r2, .L646+16	@ tmp179,
2219:src/stm32f1xx_hal_spi.c ****     }
 5251              		.loc 1 2219 0
 5252 163c 4A63     		str	r2, [r1, #52]	@ tmp178, _60->XferAbortCallback
 5253              	.L614:
2224:src/stm32f1xx_hal_spi.c ****   {
 5254              		.loc 1 2224 0
 5255 163e 5B68     		ldr	r3, [r3, #4]	@ _65, _25->CR2
 5256 1640 9A07     		lsls	r2, r3, #30	@, _65,
 5257 1642 08D5     		bpl	.L623	@,
ARM GAS  /tmp/ccdPJtdr.s 			page 179


2227:src/stm32f1xx_hal_spi.c ****     {
 5258              		.loc 1 2227 0
 5259 1644 38B1     		cbz	r0, .L623	@ _55,
2230:src/stm32f1xx_hal_spi.c ****       {
 5260              		.loc 1 2230 0
 5261 1646 FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 5262              	.LVL321:
 5263 164a 10B3     		cbz	r0, .L624	@ tmp182,
2232:src/stm32f1xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 5264              		.loc 1 2232 0
 5265 164c 0022     		movs	r2, #0	@ abortcplt,
 5266 164e A36C     		ldr	r3, [r4, #72]	@ hspi_24(D)->hdmatx, hspi_24(D)->hdmatx
 5267 1650 5A63     		str	r2, [r3, #52]	@ abortcplt, _69->XferAbortCallback
2233:src/stm32f1xx_hal_spi.c ****       }
 5268              		.loc 1 2233 0
 5269 1652 4023     		movs	r3, #64	@ tmp185,
 5270 1654 6365     		str	r3, [r4, #84]	@ tmp185, hspi_24(D)->ErrorCode
 5271              	.L623:
2150:src/stm32f1xx_hal_spi.c ****   resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 5272              		.loc 1 2150 0
 5273 1656 0125     		movs	r5, #1	@ abortcplt,
 5274              	.L616:
 5275              	.LVL322:
2242:src/stm32f1xx_hal_spi.c ****   {
 5276              		.loc 1 2242 0
 5277 1658 2368     		ldr	r3, [r4]	@ _72, hspi_24(D)->Instance
 5278 165a 5B68     		ldr	r3, [r3, #4]	@ _73, _72->CR2
 5279 165c DB07     		lsls	r3, r3, #31	@, _73,
 5280 165e 1FD5     		bpl	.L617	@,
2245:src/stm32f1xx_hal_spi.c ****     {
 5281              		.loc 1 2245 0
 5282 1660 E06C     		ldr	r0, [r4, #76]	@ _75, hspi_24(D)->hdmarx
 5283 1662 E8B1     		cbz	r0, .L617	@ _75,
2248:src/stm32f1xx_hal_spi.c ****       {
 5284              		.loc 1 2248 0
 5285 1664 FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 5286              	.LVL323:
 5287 1668 A8B9     		cbnz	r0, .L618	@,
 5288              	.L620:
2149:src/stm32f1xx_hal_spi.c ****   abortcplt = 1U;
 5289              		.loc 1 2149 0
 5290 166a 0025     		movs	r5, #0	@ <retval>,
 5291              	.LVL324:
 5292              	.L619:
2293:src/stm32f1xx_hal_spi.c **** 
 5293              		.loc 1 2293 0
 5294 166c 2846     		mov	r0, r5	@, <retval>
 5295 166e 05B0     		add	sp, sp, #20	@,,
 5296              	.LCFI72:
 5297              		.cfi_remember_state
 5298              		.cfi_def_cfa_offset 12
 5299              		@ sp needed	@
 5300 1670 30BD     		pop	{r4, r5, pc}	@
 5301              	.LVL325:
 5302              	.L605:
 5303              	.LCFI73:
 5304              		.cfi_restore_state
ARM GAS  /tmp/ccdPJtdr.s 			page 180


2169:src/stm32f1xx_hal_spi.c ****     } while (hspi->State != HAL_SPI_STATE_ABORT);
 5305              		.loc 1 2169 0
 5306 1672 019A     		ldr	r2, [sp, #4]	@ count.63_33, count
 5307 1674 013A     		subs	r2, r2, #1	@ count.64_34, count.63_33,
 5308 1676 0192     		str	r2, [sp, #4]	@ count.64_34, count
2170:src/stm32f1xx_hal_spi.c ****     /* Reset Timeout Counter */
 5309              		.loc 1 2170 0
 5310 1678 94F85120 		ldrb	r2, [r4, #81]	@ zero_extendqisi2	@ hspi_24(D)->State, hspi_24(D)->State
 5311 167c 072A     		cmp	r2, #7	@ hspi_24(D)->State,
 5312 167e B7D1     		bne	.L607	@,
 5313 1680 BDE7     		b	.L606	@
 5314              	.L609:
2186:src/stm32f1xx_hal_spi.c ****     } while (hspi->State != HAL_SPI_STATE_ABORT);
 5315              		.loc 1 2186 0
 5316 1682 019A     		ldr	r2, [sp, #4]	@ count.67_46, count
 5317 1684 013A     		subs	r2, r2, #1	@ count.68_47, count.67_46,
 5318 1686 0192     		str	r2, [sp, #4]	@ count.68_47, count
2187:src/stm32f1xx_hal_spi.c ****     /* Reset Timeout Counter */
 5319              		.loc 1 2187 0
 5320 1688 94F85120 		ldrb	r2, [r4, #81]	@ zero_extendqisi2	@ hspi_24(D)->State, hspi_24(D)->State
 5321 168c 072A     		cmp	r2, #7	@ hspi_24(D)->State,
 5322 168e BDD1     		bne	.L611	@,
 5323 1690 C3E7     		b	.L610	@
 5324              	.L624:
2237:src/stm32f1xx_hal_spi.c ****       }
 5325              		.loc 1 2237 0
 5326 1692 0546     		mov	r5, r0	@ abortcplt, tmp182
 5327 1694 E0E7     		b	.L616	@
 5328              	.LVL326:
 5329              	.L618:
2250:src/stm32f1xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 5330              		.loc 1 2250 0
 5331 1696 0022     		movs	r2, #0	@ tmp189,
 5332 1698 E36C     		ldr	r3, [r4, #76]	@ hspi_24(D)->hdmarx, hspi_24(D)->hdmarx
 5333 169a 5A63     		str	r2, [r3, #52]	@ tmp189, _78->XferAbortCallback
2251:src/stm32f1xx_hal_spi.c ****       }
 5334              		.loc 1 2251 0
 5335 169c 4023     		movs	r3, #64	@ tmp190,
 5336 169e 6365     		str	r3, [r4, #84]	@ tmp190, hspi_24(D)->ErrorCode
 5337              	.L617:
2260:src/stm32f1xx_hal_spi.c ****   {
 5338              		.loc 1 2260 0
 5339 16a0 002D     		cmp	r5, #0	@ abortcplt
 5340 16a2 E2D0     		beq	.L620	@
 5341              	.LVL327:
2263:src/stm32f1xx_hal_spi.c ****     hspi->TxXferCount = 0U;
 5342              		.loc 1 2263 0
 5343 16a4 0023     		movs	r3, #0	@ tmp192,
 5344 16a6 E387     		strh	r3, [r4, #62]	@ movhi	@ tmp192, hspi_24(D)->RxXferCount
2264:src/stm32f1xx_hal_spi.c **** 
 5345              		.loc 1 2264 0
 5346 16a8 E386     		strh	r3, [r4, #54]	@ movhi	@ tmp192, hspi_24(D)->TxXferCount
2267:src/stm32f1xx_hal_spi.c ****     {
 5347              		.loc 1 2267 0
 5348 16aa 626D     		ldr	r2, [r4, #84]	@ _83, hspi_24(D)->ErrorCode
2288:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 5349              		.loc 1 2288 0
ARM GAS  /tmp/ccdPJtdr.s 			page 181


 5350 16ac 2046     		mov	r0, r4	@, hspi
2267:src/stm32f1xx_hal_spi.c ****     {
 5351              		.loc 1 2267 0
 5352 16ae 402A     		cmp	r2, #64	@ _83,
2275:src/stm32f1xx_hal_spi.c ****     }
 5353              		.loc 1 2275 0
 5354 16b0 1CBF     		itt	ne
 5355 16b2 6365     		strne	r3, [r4, #84]	@ tmp201, hspi_24(D)->ErrorCode
2149:src/stm32f1xx_hal_spi.c ****   abortcplt = 1U;
 5356              		.loc 1 2149 0
 5357 16b4 1D46     		movne	r5, r3	@ <retval>, tmp201
 5358              	.LVL328:
 5359              	.LBB74:
2279:src/stm32f1xx_hal_spi.c **** 
 5360              		.loc 1 2279 0
 5361 16b6 0393     		str	r3, [sp, #12]	@ tmp201, tmpreg_ovr
 5362 16b8 2368     		ldr	r3, [r4]	@ _86, hspi_24(D)->Instance
 5363 16ba DA68     		ldr	r2, [r3, #12]	@ tmpreg_ovr.70_87, _86->DR
 5364 16bc 0392     		str	r2, [sp, #12]	@ tmpreg_ovr.70_87, tmpreg_ovr
 5365 16be 9B68     		ldr	r3, [r3, #8]	@ tmpreg_ovr.71_89, _86->SR
 5366 16c0 0393     		str	r3, [sp, #12]	@ tmpreg_ovr.71_89, tmpreg_ovr
 5367 16c2 039B     		ldr	r3, [sp, #12]	@ vol.72_91, tmpreg_ovr
 5368              	.LBE74:
2282:src/stm32f1xx_hal_spi.c **** 
 5369              		.loc 1 2282 0
 5370 16c4 0123     		movs	r3, #1	@ tmp197,
 5371 16c6 84F85130 		strb	r3, [r4, #81]	@ tmp197, hspi_24(D)->State
2288:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 5372              		.loc 1 2288 0
 5373 16ca FFF7FEFF 		bl	HAL_SPI_AbortCpltCallback	@
 5374              	.LVL329:
 5375 16ce CDE7     		b	.L619	@
 5376              	.L647:
 5377              		.align	2
 5378              	.L646:
 5379 16d0 00000000 		.word	SystemCoreClock
 5380 16d4 00000000 		.word	SPI_AbortTx_ISR
 5381 16d8 00000000 		.word	SPI_AbortRx_ISR
 5382 16dc 00000000 		.word	SPI_DMATxAbortCallback
 5383 16e0 00000000 		.word	SPI_DMARxAbortCallback
 5384              		.cfi_endproc
 5385              	.LFE79:
 5386              		.size	HAL_SPI_Abort_IT, .-HAL_SPI_Abort_IT
 5387              		.align	1
 5388              		.syntax unified
 5389              		.thumb
 5390              		.thumb_func
 5391              		.fpu softvfp
 5392              		.type	SPI_DMARxAbortCallback, %function
 5393              	SPI_DMARxAbortCallback:
 5394              	.LFB103:
3060:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 5395              		.loc 1 3060 0
 5396              		.cfi_startproc
 5397              		@ args = 0, pretend = 0, frame = 8
 5398              		@ frame_needed = 0, uses_anonymous_args = 0
 5399              	.LVL330:
ARM GAS  /tmp/ccdPJtdr.s 			page 182


 5400 16e4 13B5     		push	{r0, r1, r4, lr}	@
 5401              	.LCFI74:
 5402              		.cfi_def_cfa_offset 16
 5403              		.cfi_offset 4, -8
 5404              		.cfi_offset 14, -4
3066:src/stm32f1xx_hal_spi.c **** 
 5405              		.loc 1 3066 0
 5406 16e6 0021     		movs	r1, #0	@ tmp130,
3061:src/stm32f1xx_hal_spi.c **** 
 5407              		.loc 1 3061 0
 5408 16e8 446A     		ldr	r4, [r0, #36]	@ hspi, hdma_5(D)->Parent
 5409              	.LVL331:
3064:src/stm32f1xx_hal_spi.c **** 
 5410              		.loc 1 3064 0
 5411 16ea 2368     		ldr	r3, [r4]	@ _7, hspi_6->Instance
 5412 16ec 1A68     		ldr	r2, [r3]	@ _8, _7->CR1
 5413 16ee 22F04002 		bic	r2, r2, #64	@ _9, _8,
 5414 16f2 1A60     		str	r2, [r3]	@ _9, _7->CR1
3066:src/stm32f1xx_hal_spi.c **** 
 5415              		.loc 1 3066 0
 5416 16f4 E26C     		ldr	r2, [r4, #76]	@ hspi_6->hdmarx, hspi_6->hdmarx
 5417 16f6 5163     		str	r1, [r2, #52]	@ tmp130, _11->XferAbortCallback
3069:src/stm32f1xx_hal_spi.c **** 
 5418              		.loc 1 3069 0
 5419 16f8 5A68     		ldr	r2, [r3, #4]	@ _13, _7->CR2
 5420 16fa 22F00102 		bic	r2, r2, #1	@ _14, _13,
 5421 16fe 5A60     		str	r2, [r3, #4]	@ _14, _7->CR2
3072:src/stm32f1xx_hal_spi.c ****   {
 5422              		.loc 1 3072 0
 5423 1700 FFF7FEFF 		bl	HAL_GetTick	@
 5424              	.LVL332:
 5425 1704 6421     		movs	r1, #100	@,
 5426 1706 0246     		mov	r2, r0	@,
 5427 1708 2046     		mov	r0, r4	@, hspi
 5428 170a FEF7F1FC 		bl	SPI_EndRxTxTransaction	@
 5429              	.LVL333:
 5430 170e 18B1     		cbz	r0, .L649	@,
3074:src/stm32f1xx_hal_spi.c ****   }
 5431              		.loc 1 3074 0
 5432 1710 636D     		ldr	r3, [r4, #84]	@ _20, hspi_6->ErrorCode
 5433 1712 43F04003 		orr	r3, r3, #64	@ _21, _20,
 5434 1716 6365     		str	r3, [r4, #84]	@ _21, hspi_6->ErrorCode
 5435              	.L649:
3078:src/stm32f1xx_hal_spi.c ****   {
 5436              		.loc 1 3078 0
 5437 1718 A36C     		ldr	r3, [r4, #72]	@ _23, hspi_6->hdmatx
 5438 171a 0BB1     		cbz	r3, .L650	@ _23,
3080:src/stm32f1xx_hal_spi.c ****     {
 5439              		.loc 1 3080 0
 5440 171c 5B6B     		ldr	r3, [r3, #52]	@ _23->XferAbortCallback, _23->XferAbortCallback
 5441 171e 9BB9     		cbnz	r3, .L648	@ _23->XferAbortCallback,
 5442              	.L650:
3087:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = 0U;
 5443              		.loc 1 3087 0
 5444 1720 0023     		movs	r3, #0	@ tmp134,
 5445 1722 E387     		strh	r3, [r4, #62]	@ movhi	@ tmp134, hspi_6->RxXferCount
3088:src/stm32f1xx_hal_spi.c **** 
ARM GAS  /tmp/ccdPJtdr.s 			page 183


 5446              		.loc 1 3088 0
 5447 1724 E386     		strh	r3, [r4, #54]	@ movhi	@ tmp134, hspi_6->TxXferCount
3091:src/stm32f1xx_hal_spi.c ****   {
 5448              		.loc 1 3091 0
 5449 1726 626D     		ldr	r2, [r4, #84]	@ _27, hspi_6->ErrorCode
3107:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 5450              		.loc 1 3107 0
 5451 1728 2046     		mov	r0, r4	@, hspi
3091:src/stm32f1xx_hal_spi.c ****   {
 5452              		.loc 1 3091 0
 5453 172a 402A     		cmp	r2, #64	@ _27,
3094:src/stm32f1xx_hal_spi.c ****   }
 5454              		.loc 1 3094 0
 5455 172c 18BF     		it	ne
 5456 172e 6365     		strne	r3, [r4, #84]	@ tmp141, hspi_6->ErrorCode
 5457              	.LBB75:
3098:src/stm32f1xx_hal_spi.c **** 
 5458              		.loc 1 3098 0
 5459 1730 0193     		str	r3, [sp, #4]	@ tmp141, tmpreg_ovr
 5460 1732 2368     		ldr	r3, [r4]	@ _30, hspi_6->Instance
 5461 1734 DA68     		ldr	r2, [r3, #12]	@ tmpreg_ovr.73_31, _30->DR
 5462 1736 0192     		str	r2, [sp, #4]	@ tmpreg_ovr.73_31, tmpreg_ovr
 5463 1738 9B68     		ldr	r3, [r3, #8]	@ tmpreg_ovr.74_33, _30->SR
 5464 173a 0193     		str	r3, [sp, #4]	@ tmpreg_ovr.74_33, tmpreg_ovr
 5465 173c 019B     		ldr	r3, [sp, #4]	@ vol.75_35, tmpreg_ovr
 5466              	.LBE75:
3101:src/stm32f1xx_hal_spi.c **** 
 5467              		.loc 1 3101 0
 5468 173e 0123     		movs	r3, #1	@ tmp139,
 5469 1740 84F85130 		strb	r3, [r4, #81]	@ tmp139, hspi_6->State
3107:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 5470              		.loc 1 3107 0
 5471 1744 FFF7FEFF 		bl	HAL_SPI_AbortCpltCallback	@
 5472              	.LVL334:
 5473              	.L648:
3109:src/stm32f1xx_hal_spi.c **** 
 5474              		.loc 1 3109 0
 5475 1748 02B0     		add	sp, sp, #8	@,,
 5476              	.LCFI75:
 5477              		.cfi_def_cfa_offset 8
 5478              		@ sp needed	@
 5479 174a 10BD     		pop	{r4, pc}	@
 5480              		.cfi_endproc
 5481              	.LFE103:
 5482              		.size	SPI_DMARxAbortCallback, .-SPI_DMARxAbortCallback
 5483              		.align	1
 5484              		.syntax unified
 5485              		.thumb
 5486              		.thumb_func
 5487              		.fpu softvfp
 5488              		.type	SPI_DMATxAbortCallback, %function
 5489              	SPI_DMATxAbortCallback:
 5490              	.LFB102:
2996:src/stm32f1xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogati
 5491              		.loc 1 2996 0
 5492              		.cfi_startproc
 5493              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccdPJtdr.s 			page 184


 5494              		@ frame_needed = 0, uses_anonymous_args = 0
 5495              	.LVL335:
 5496 174c 07B5     		push	{r0, r1, r2, lr}	@
 5497              	.LCFI76:
 5498              		.cfi_def_cfa_offset 16
 5499              		.cfi_offset 14, -4
3000:src/stm32f1xx_hal_spi.c ****   count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 5500              		.loc 1 3000 0
 5501 174e 0022     		movs	r2, #0	@ tmp133,
2997:src/stm32f1xx_hal_spi.c ****   __IO uint32_t count;
 5502              		.loc 1 2997 0
 5503 1750 406A     		ldr	r0, [r0, #36]	@ hspi, hdma_6(D)->Parent
 5504              	.LVL336:
3000:src/stm32f1xx_hal_spi.c ****   count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 5505              		.loc 1 3000 0
 5506 1752 836C     		ldr	r3, [r0, #72]	@ hspi_7->hdmatx, hspi_7->hdmatx
 5507 1754 5A63     		str	r2, [r3, #52]	@ tmp133, _8->XferAbortCallback
3001:src/stm32f1xx_hal_spi.c **** 
 5508              		.loc 1 3001 0
 5509 1756 45F6C052 		movw	r2, #24000	@ tmp138,
 5510 175a 194B     		ldr	r3, .L677	@ tmp134,
 5511 175c 1B68     		ldr	r3, [r3]	@ SystemCoreClock, SystemCoreClock
 5512 175e B3FBF2F2 		udiv	r2, r3, r2	@ tmp137, SystemCoreClock, tmp138
 5513 1762 6423     		movs	r3, #100	@ tmp139,
 5514 1764 5343     		muls	r3, r2, r3	@ count.77_12, tmp137
3004:src/stm32f1xx_hal_spi.c **** 
 5515              		.loc 1 3004 0
 5516 1766 0268     		ldr	r2, [r0]	@ _14, hspi_7->Instance
3001:src/stm32f1xx_hal_spi.c **** 
 5517              		.loc 1 3001 0
 5518 1768 0093     		str	r3, [sp]	@ count.77_12, count
3004:src/stm32f1xx_hal_spi.c **** 
 5519              		.loc 1 3004 0
 5520 176a 5368     		ldr	r3, [r2, #4]	@ _15, _14->CR2
 5521 176c 23F00203 		bic	r3, r3, #2	@ _16, _15,
 5522 1770 5360     		str	r3, [r2, #4]	@ _16, _14->CR2
 5523              	.L665:
3009:src/stm32f1xx_hal_spi.c ****     {
 5524              		.loc 1 3009 0
 5525 1772 009B     		ldr	r3, [sp]	@ count.78_18, count
 5526 1774 E3B9     		cbnz	r3, .L663	@ count.78_18,
3011:src/stm32f1xx_hal_spi.c ****       break;
 5527              		.loc 1 3011 0
 5528 1776 436D     		ldr	r3, [r0, #84]	@ _24, hspi_7->ErrorCode
 5529 1778 43F04003 		orr	r3, r3, #64	@ _25, _24,
 5530 177c 4365     		str	r3, [r0, #84]	@ _25, hspi_7->ErrorCode
 5531              	.L664:
3018:src/stm32f1xx_hal_spi.c ****   {
 5532              		.loc 1 3018 0
 5533 177e C36C     		ldr	r3, [r0, #76]	@ _27, hspi_7->hdmarx
 5534 1780 0BB1     		cbz	r3, .L666	@ _27,
3020:src/stm32f1xx_hal_spi.c ****     {
 5535              		.loc 1 3020 0
 5536 1782 5B6B     		ldr	r3, [r3, #52]	@ _27->XferAbortCallback, _27->XferAbortCallback
 5537 1784 8BB9     		cbnz	r3, .L662	@ _27->XferAbortCallback,
 5538              	.L666:
3027:src/stm32f1xx_hal_spi.c ****   hspi->TxXferCount = 0U;
ARM GAS  /tmp/ccdPJtdr.s 			page 185


 5539              		.loc 1 3027 0
 5540 1786 0023     		movs	r3, #0	@ tmp143,
 5541 1788 C387     		strh	r3, [r0, #62]	@ movhi	@ tmp143, hspi_7->RxXferCount
3028:src/stm32f1xx_hal_spi.c **** 
 5542              		.loc 1 3028 0
 5543 178a C386     		strh	r3, [r0, #54]	@ movhi	@ tmp143, hspi_7->TxXferCount
3031:src/stm32f1xx_hal_spi.c ****   {
 5544              		.loc 1 3031 0
 5545 178c 416D     		ldr	r1, [r0, #84]	@ _31, hspi_7->ErrorCode
 5546 178e 4029     		cmp	r1, #64	@ _31,
3034:src/stm32f1xx_hal_spi.c ****   }
 5547              		.loc 1 3034 0
 5548 1790 18BF     		it	ne
 5549 1792 4365     		strne	r3, [r0, #84]	@ tmp150, hspi_7->ErrorCode
 5550              	.LBB76:
3038:src/stm32f1xx_hal_spi.c **** 
 5551              		.loc 1 3038 0
 5552 1794 0193     		str	r3, [sp, #4]	@ tmp150, tmpreg_ovr
 5553 1796 D368     		ldr	r3, [r2, #12]	@ tmpreg_ovr.81_34, _14->DR
 5554 1798 0193     		str	r3, [sp, #4]	@ tmpreg_ovr.81_34, tmpreg_ovr
 5555 179a 9368     		ldr	r3, [r2, #8]	@ tmpreg_ovr.82_36, _14->SR
 5556 179c 0193     		str	r3, [sp, #4]	@ tmpreg_ovr.82_36, tmpreg_ovr
 5557 179e 019B     		ldr	r3, [sp, #4]	@ vol.83_38, tmpreg_ovr
 5558              	.LBE76:
3041:src/stm32f1xx_hal_spi.c **** 
 5559              		.loc 1 3041 0
 5560 17a0 0123     		movs	r3, #1	@ tmp148,
 5561 17a2 80F85130 		strb	r3, [r0, #81]	@ tmp148, hspi_7->State
3047:src/stm32f1xx_hal_spi.c **** #endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
 5562              		.loc 1 3047 0
 5563 17a6 FFF7FEFF 		bl	HAL_SPI_AbortCpltCallback	@
 5564              	.LVL337:
 5565              	.L662:
3049:src/stm32f1xx_hal_spi.c **** 
 5566              		.loc 1 3049 0
 5567 17aa 03B0     		add	sp, sp, #12	@,,
 5568              	.LCFI77:
 5569              		.cfi_remember_state
 5570              		.cfi_def_cfa_offset 4
 5571              		@ sp needed	@
 5572 17ac 5DF804FB 		ldr	pc, [sp], #4	@
 5573              	.LVL338:
 5574              	.L663:
 5575              	.LCFI78:
 5576              		.cfi_restore_state
3014:src/stm32f1xx_hal_spi.c ****   } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 5577              		.loc 1 3014 0
 5578 17b0 009B     		ldr	r3, [sp]	@ count.79_19, count
 5579 17b2 013B     		subs	r3, r3, #1	@ count.80_20, count.79_19,
 5580 17b4 0093     		str	r3, [sp]	@ count.80_20, count
3015:src/stm32f1xx_hal_spi.c **** 
 5581              		.loc 1 3015 0
 5582 17b6 9368     		ldr	r3, [r2, #8]	@ _22, _14->SR
 5583 17b8 9B07     		lsls	r3, r3, #30	@, _22,
 5584 17ba DAD5     		bpl	.L665	@,
 5585 17bc DFE7     		b	.L664	@
 5586              	.L678:
ARM GAS  /tmp/ccdPJtdr.s 			page 186


 5587 17be 00BF     		.align	2
 5588              	.L677:
 5589 17c0 00000000 		.word	SystemCoreClock
 5590              		.cfi_endproc
 5591              	.LFE102:
 5592              		.size	SPI_DMATxAbortCallback, .-SPI_DMATxAbortCallback
 5593              		.align	1
 5594              		.global	HAL_SPI_GetState
 5595              		.syntax unified
 5596              		.thumb
 5597              		.thumb_func
 5598              		.fpu softvfp
 5599              		.type	HAL_SPI_GetState, %function
 5600              	HAL_SPI_GetState:
 5601              	.LFB92:
2633:src/stm32f1xx_hal_spi.c ****   /* Return SPI handle state */
 5602              		.loc 1 2633 0
 5603              		.cfi_startproc
 5604              		@ args = 0, pretend = 0, frame = 0
 5605              		@ frame_needed = 0, uses_anonymous_args = 0
 5606              		@ link register save eliminated.
 5607              	.LVL339:
2635:src/stm32f1xx_hal_spi.c **** }
 5608              		.loc 1 2635 0
 5609 17c4 90F85100 		ldrb	r0, [r0, #81]	@ zero_extendqisi2	@ hspi_2(D)->State, hspi_2(D)->State
 5610              	.LVL340:
2636:src/stm32f1xx_hal_spi.c **** 
 5611              		.loc 1 2636 0
 5612 17c8 7047     		bx	lr	@
 5613              		.cfi_endproc
 5614              	.LFE92:
 5615              		.size	HAL_SPI_GetState, .-HAL_SPI_GetState
 5616              		.align	1
 5617              		.global	HAL_SPI_GetError
 5618              		.syntax unified
 5619              		.thumb
 5620              		.thumb_func
 5621              		.fpu softvfp
 5622              		.type	HAL_SPI_GetError, %function
 5623              	HAL_SPI_GetError:
 5624              	.LFB93:
2645:src/stm32f1xx_hal_spi.c ****   /* Return SPI ErrorCode */
 5625              		.loc 1 2645 0
 5626              		.cfi_startproc
 5627              		@ args = 0, pretend = 0, frame = 0
 5628              		@ frame_needed = 0, uses_anonymous_args = 0
 5629              		@ link register save eliminated.
 5630              	.LVL341:
2647:src/stm32f1xx_hal_spi.c **** }
 5631              		.loc 1 2647 0
 5632 17ca 406D     		ldr	r0, [r0, #84]	@ <retval>, hspi_2(D)->ErrorCode
 5633              	.LVL342:
2648:src/stm32f1xx_hal_spi.c **** 
 5634              		.loc 1 2648 0
 5635 17cc 7047     		bx	lr	@
 5636              		.cfi_endproc
 5637              	.LFE93:
ARM GAS  /tmp/ccdPJtdr.s 			page 187


 5638              		.size	HAL_SPI_GetError, .-HAL_SPI_GetError
 5639              		.align	1
 5640              		.global	SPI_ISCRCErrorValid
 5641              		.syntax unified
 5642              		.thumb
 5643              		.thumb_func
 5644              		.fpu softvfp
 5645              		.type	SPI_ISCRCErrorValid, %function
 5646              	SPI_ISCRCErrorValid:
 5647              	.LFB124:
3855:src/stm32f1xx_hal_spi.c **** }
3856:src/stm32f1xx_hal_spi.c **** 
3857:src/stm32f1xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3858:src/stm32f1xx_hal_spi.c **** /**
3859:src/stm32f1xx_hal_spi.c ****   * @brief  Checks if encountered CRC error could be corresponding to wrongly detected errors
3860:src/stm32f1xx_hal_spi.c ****   *         according to SPI instance, Device type, and revision ID.
3861:src/stm32f1xx_hal_spi.c ****   * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
3862:src/stm32f1xx_hal_spi.c ****   *               the configuration information for SPI module.
3863:src/stm32f1xx_hal_spi.c ****   * @retval CRC error validity (SPI_INVALID_CRC_ERROR or SPI_VALID_CRC_ERROR).
3864:src/stm32f1xx_hal_spi.c ****   */
3865:src/stm32f1xx_hal_spi.c **** uint8_t SPI_ISCRCErrorValid(SPI_HandleTypeDef *hspi)
3866:src/stm32f1xx_hal_spi.c **** {
 5648              		.loc 1 3866 0
 5649              		.cfi_startproc
 5650              		@ args = 0, pretend = 0, frame = 0
 5651              		@ frame_needed = 0, uses_anonymous_args = 0
 5652              		@ link register save eliminated.
 5653              	.LVL343:
3867:src/stm32f1xx_hal_spi.c **** #if defined(SPI_CRC_ERROR_WORKAROUND_FEATURE) && (USE_SPI_CRC_ERROR_WORKAROUND != 0U)
3868:src/stm32f1xx_hal_spi.c ****   /* Check how to handle this CRC error (workaround to be applied or not) */
3869:src/stm32f1xx_hal_spi.c ****   /* If CRC errors could be wrongly detected (issue 2.15.2 in STM32F10xxC/D/E silicon limitations E
3870:src/stm32f1xx_hal_spi.c ****   if(hspi->Instance == SPI2)
3871:src/stm32f1xx_hal_spi.c ****   {
3872:src/stm32f1xx_hal_spi.c ****     if(hspi->Instance->RXCRCR == 0U)
3873:src/stm32f1xx_hal_spi.c ****     {
3874:src/stm32f1xx_hal_spi.c ****       return (SPI_INVALID_CRC_ERROR);
3875:src/stm32f1xx_hal_spi.c ****     }
3876:src/stm32f1xx_hal_spi.c ****   }
3877:src/stm32f1xx_hal_spi.c **** #endif
3878:src/stm32f1xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
3879:src/stm32f1xx_hal_spi.c ****   UNUSED(hspi);
3880:src/stm32f1xx_hal_spi.c **** 
3881:src/stm32f1xx_hal_spi.c ****   return (SPI_VALID_CRC_ERROR);
3882:src/stm32f1xx_hal_spi.c **** }
 5654              		.loc 1 3882 0
 5655 17ce 0120     		movs	r0, #1	@,
 5656              	.LVL344:
 5657 17d0 7047     		bx	lr	@
 5658              		.cfi_endproc
 5659              	.LFE124:
 5660              		.size	SPI_ISCRCErrorValid, .-SPI_ISCRCErrorValid
 5661              	.Letext0:
 5662              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 5663              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 5664              		.file 4 "../cmsiscore/inc/core_cm3.h"
 5665              		.file 5 "../cmsisstm32f1xx/inc/system_stm32f1xx.h"
 5666              		.file 6 "../cmsisstm32f1xx/inc/stm32f103x6.h"
ARM GAS  /tmp/ccdPJtdr.s 			page 188


 5667              		.file 7 "../cmsisstm32f1xx/inc/stm32f1xx.h"
 5668              		.file 8 "./inc/stm32f1xx_hal_def.h"
 5669              		.file 9 "./inc/stm32f1xx_hal_dma.h"
 5670              		.file 10 "./inc/stm32f1xx_hal_spi.h"
 5671              		.file 11 "./inc/stm32f1xx_hal.h"
 5672 17d2 00BF     		.section	.debug_info,"",%progbits
 5673              	.Ldebug_info0:
 5674 0000 63200000 		.4byte	0x2063
 5675 0004 0200     		.2byte	0x2
 5676 0006 00000000 		.4byte	.Ldebug_abbrev0
 5677 000a 04       		.byte	0x4
 5678 000b 01       		.uleb128 0x1
 5679 000c 4E080000 		.4byte	.LASF192
 5680 0010 0C       		.byte	0xc
 5681 0011 54050000 		.4byte	.LASF193
 5682 0015 87070000 		.4byte	.LASF194
 5683 0019 00000000 		.4byte	.Ltext0
 5684 001d D2170000 		.4byte	.Letext0
 5685 0021 00000000 		.4byte	.Ldebug_line0
 5686 0025 02       		.uleb128 0x2
 5687 0026 01       		.byte	0x1
 5688 0027 06       		.byte	0x6
 5689 0028 D0010000 		.4byte	.LASF0
 5690 002c 03       		.uleb128 0x3
 5691 002d AE000000 		.4byte	.LASF3
 5692 0031 02       		.byte	0x2
 5693 0032 1D       		.byte	0x1d
 5694 0033 37000000 		.4byte	0x37
 5695 0037 02       		.uleb128 0x2
 5696 0038 01       		.byte	0x1
 5697 0039 08       		.byte	0x8
 5698 003a BB070000 		.4byte	.LASF1
 5699 003e 02       		.uleb128 0x2
 5700 003f 02       		.byte	0x2
 5701 0040 05       		.byte	0x5
 5702 0041 F2070000 		.4byte	.LASF2
 5703 0045 03       		.uleb128 0x3
 5704 0046 4B090000 		.4byte	.LASF4
 5705 004a 02       		.byte	0x2
 5706 004b 2B       		.byte	0x2b
 5707 004c 50000000 		.4byte	0x50
 5708 0050 02       		.uleb128 0x2
 5709 0051 02       		.byte	0x2
 5710 0052 07       		.byte	0x7
 5711 0053 E1040000 		.4byte	.LASF5
 5712 0057 03       		.uleb128 0x3
 5713 0058 83090000 		.4byte	.LASF6
 5714 005c 02       		.byte	0x2
 5715 005d 3F       		.byte	0x3f
 5716 005e 62000000 		.4byte	0x62
 5717 0062 02       		.uleb128 0x2
 5718 0063 04       		.byte	0x4
 5719 0064 05       		.byte	0x5
 5720 0065 A7020000 		.4byte	.LASF7
 5721 0069 03       		.uleb128 0x3
 5722 006a 8C030000 		.4byte	.LASF8
 5723 006e 02       		.byte	0x2
ARM GAS  /tmp/ccdPJtdr.s 			page 189


 5724 006f 41       		.byte	0x41
 5725 0070 74000000 		.4byte	0x74
 5726 0074 02       		.uleb128 0x2
 5727 0075 04       		.byte	0x4
 5728 0076 07       		.byte	0x7
 5729 0077 49040000 		.4byte	.LASF9
 5730 007b 02       		.uleb128 0x2
 5731 007c 08       		.byte	0x8
 5732 007d 05       		.byte	0x5
 5733 007e C2010000 		.4byte	.LASF10
 5734 0082 02       		.uleb128 0x2
 5735 0083 08       		.byte	0x8
 5736 0084 07       		.byte	0x7
 5737 0085 F2000000 		.4byte	.LASF11
 5738 0089 04       		.uleb128 0x4
 5739 008a 04       		.byte	0x4
 5740 008b 05       		.byte	0x5
 5741 008c 696E7400 		.ascii	"int\000"
 5742 0090 02       		.uleb128 0x2
 5743 0091 04       		.byte	0x4
 5744 0092 07       		.byte	0x7
 5745 0093 2E090000 		.4byte	.LASF12
 5746 0097 03       		.uleb128 0x3
 5747 0098 EF0A0000 		.4byte	.LASF13
 5748 009c 03       		.byte	0x3
 5749 009d 18       		.byte	0x18
 5750 009e 2C000000 		.4byte	0x2c
 5751 00a2 05       		.uleb128 0x5
 5752 00a3 97000000 		.4byte	0x97
 5753 00a7 03       		.uleb128 0x3
 5754 00a8 F3020000 		.4byte	.LASF14
 5755 00ac 03       		.byte	0x3
 5756 00ad 24       		.byte	0x24
 5757 00ae 45000000 		.4byte	0x45
 5758 00b2 06       		.uleb128 0x6
 5759 00b3 A7000000 		.4byte	0xa7
 5760 00b7 03       		.uleb128 0x3
 5761 00b8 B3070000 		.4byte	.LASF15
 5762 00bc 03       		.byte	0x3
 5763 00bd 2C       		.byte	0x2c
 5764 00be 57000000 		.4byte	0x57
 5765 00c2 06       		.uleb128 0x6
 5766 00c3 B7000000 		.4byte	0xb7
 5767 00c7 03       		.uleb128 0x3
 5768 00c8 CB080000 		.4byte	.LASF16
 5769 00cc 03       		.byte	0x3
 5770 00cd 30       		.byte	0x30
 5771 00ce 69000000 		.4byte	0x69
 5772 00d2 06       		.uleb128 0x6
 5773 00d3 C7000000 		.4byte	0xc7
 5774 00d7 02       		.uleb128 0x2
 5775 00d8 04       		.byte	0x4
 5776 00d9 07       		.byte	0x7
 5777 00da 5D060000 		.4byte	.LASF17
 5778 00de 07       		.uleb128 0x7
 5779 00df 46010000 		.4byte	.LASF18
 5780 00e3 04       		.byte	0x4
ARM GAS  /tmp/ccdPJtdr.s 			page 190


 5781 00e4 4807     		.2byte	0x748
 5782 00e6 C2000000 		.4byte	0xc2
 5783 00ea 01       		.byte	0x1
 5784 00eb 01       		.byte	0x1
 5785 00ec 08       		.uleb128 0x8
 5786 00ed 29040000 		.4byte	.LASF19
 5787 00f1 05       		.byte	0x5
 5788 00f2 33       		.byte	0x33
 5789 00f3 C7000000 		.4byte	0xc7
 5790 00f7 01       		.byte	0x1
 5791 00f8 01       		.byte	0x1
 5792 00f9 09       		.uleb128 0x9
 5793 00fa A2000000 		.4byte	0xa2
 5794 00fe 09010000 		.4byte	0x109
 5795 0102 0A       		.uleb128 0xa
 5796 0103 D7000000 		.4byte	0xd7
 5797 0107 0F       		.byte	0xf
 5798 0108 00       		.byte	0
 5799 0109 05       		.uleb128 0x5
 5800 010a F9000000 		.4byte	0xf9
 5801 010e 08       		.uleb128 0x8
 5802 010f B7050000 		.4byte	.LASF20
 5803 0113 05       		.byte	0x5
 5804 0114 34       		.byte	0x34
 5805 0115 09010000 		.4byte	0x109
 5806 0119 01       		.byte	0x1
 5807 011a 01       		.byte	0x1
 5808 011b 09       		.uleb128 0x9
 5809 011c A2000000 		.4byte	0xa2
 5810 0120 2B010000 		.4byte	0x12b
 5811 0124 0A       		.uleb128 0xa
 5812 0125 D7000000 		.4byte	0xd7
 5813 0129 07       		.byte	0x7
 5814 012a 00       		.byte	0
 5815 012b 05       		.uleb128 0x5
 5816 012c 1B010000 		.4byte	0x11b
 5817 0130 08       		.uleb128 0x8
 5818 0131 D0000000 		.4byte	.LASF21
 5819 0135 05       		.byte	0x5
 5820 0136 35       		.byte	0x35
 5821 0137 2B010000 		.4byte	0x12b
 5822 013b 01       		.byte	0x1
 5823 013c 01       		.byte	0x1
 5824 013d 0B       		.uleb128 0xb
 5825 013e 10       		.byte	0x10
 5826 013f 06       		.byte	0x6
 5827 0140 1E01     		.2byte	0x11e
 5828 0142 83010000 		.4byte	0x183
 5829 0146 0C       		.uleb128 0xc
 5830 0147 43435200 		.ascii	"CCR\000"
 5831 014b 06       		.byte	0x6
 5832 014c 2001     		.2byte	0x120
 5833 014e D2000000 		.4byte	0xd2
 5834 0152 02       		.byte	0x2
 5835 0153 23       		.byte	0x23
 5836 0154 00       		.uleb128 0
 5837 0155 0D       		.uleb128 0xd
ARM GAS  /tmp/ccdPJtdr.s 			page 191


 5838 0156 A20A0000 		.4byte	.LASF22
 5839 015a 06       		.byte	0x6
 5840 015b 2101     		.2byte	0x121
 5841 015d D2000000 		.4byte	0xd2
 5842 0161 02       		.byte	0x2
 5843 0162 23       		.byte	0x23
 5844 0163 04       		.uleb128 0x4
 5845 0164 0D       		.uleb128 0xd
 5846 0165 44040000 		.4byte	.LASF23
 5847 0169 06       		.byte	0x6
 5848 016a 2201     		.2byte	0x122
 5849 016c D2000000 		.4byte	0xd2
 5850 0170 02       		.byte	0x2
 5851 0171 23       		.byte	0x23
 5852 0172 08       		.uleb128 0x8
 5853 0173 0D       		.uleb128 0xd
 5854 0174 A80A0000 		.4byte	.LASF24
 5855 0178 06       		.byte	0x6
 5856 0179 2301     		.2byte	0x123
 5857 017b D2000000 		.4byte	0xd2
 5858 017f 02       		.byte	0x2
 5859 0180 23       		.byte	0x23
 5860 0181 0C       		.uleb128 0xc
 5861 0182 00       		.byte	0
 5862 0183 0E       		.uleb128 0xe
 5863 0184 D0090000 		.4byte	.LASF25
 5864 0188 06       		.byte	0x6
 5865 0189 2401     		.2byte	0x124
 5866 018b 3D010000 		.4byte	0x13d
 5867 018f 0B       		.uleb128 0xb
 5868 0190 08       		.byte	0x8
 5869 0191 06       		.byte	0x6
 5870 0192 2601     		.2byte	0x126
 5871 0194 B7010000 		.4byte	0x1b7
 5872 0198 0C       		.uleb128 0xc
 5873 0199 49535200 		.ascii	"ISR\000"
 5874 019d 06       		.byte	0x6
 5875 019e 2801     		.2byte	0x128
 5876 01a0 D2000000 		.4byte	0xd2
 5877 01a4 02       		.byte	0x2
 5878 01a5 23       		.byte	0x23
 5879 01a6 00       		.uleb128 0
 5880 01a7 0D       		.uleb128 0xd
 5881 01a8 F7080000 		.4byte	.LASF26
 5882 01ac 06       		.byte	0x6
 5883 01ad 2901     		.2byte	0x129
 5884 01af D2000000 		.4byte	0xd2
 5885 01b3 02       		.byte	0x2
 5886 01b4 23       		.byte	0x23
 5887 01b5 04       		.uleb128 0x4
 5888 01b6 00       		.byte	0
 5889 01b7 0E       		.uleb128 0xe
 5890 01b8 FD030000 		.4byte	.LASF27
 5891 01bc 06       		.byte	0x6
 5892 01bd 2A01     		.2byte	0x12a
 5893 01bf 8F010000 		.4byte	0x18f
 5894 01c3 0B       		.uleb128 0xb
ARM GAS  /tmp/ccdPJtdr.s 			page 192


 5895 01c4 20       		.byte	0x20
 5896 01c5 06       		.byte	0x6
 5897 01c6 C901     		.2byte	0x1c9
 5898 01c8 43020000 		.4byte	0x243
 5899 01cc 0C       		.uleb128 0xc
 5900 01cd 43523100 		.ascii	"CR1\000"
 5901 01d1 06       		.byte	0x6
 5902 01d2 CB01     		.2byte	0x1cb
 5903 01d4 D2000000 		.4byte	0xd2
 5904 01d8 02       		.byte	0x2
 5905 01d9 23       		.byte	0x23
 5906 01da 00       		.uleb128 0
 5907 01db 0C       		.uleb128 0xc
 5908 01dc 43523200 		.ascii	"CR2\000"
 5909 01e0 06       		.byte	0x6
 5910 01e1 CC01     		.2byte	0x1cc
 5911 01e3 D2000000 		.4byte	0xd2
 5912 01e7 02       		.byte	0x2
 5913 01e8 23       		.byte	0x23
 5914 01e9 04       		.uleb128 0x4
 5915 01ea 0C       		.uleb128 0xc
 5916 01eb 535200   		.ascii	"SR\000"
 5917 01ee 06       		.byte	0x6
 5918 01ef CD01     		.2byte	0x1cd
 5919 01f1 D2000000 		.4byte	0xd2
 5920 01f5 02       		.byte	0x2
 5921 01f6 23       		.byte	0x23
 5922 01f7 08       		.uleb128 0x8
 5923 01f8 0C       		.uleb128 0xc
 5924 01f9 445200   		.ascii	"DR\000"
 5925 01fc 06       		.byte	0x6
 5926 01fd CE01     		.2byte	0x1ce
 5927 01ff D2000000 		.4byte	0xd2
 5928 0203 02       		.byte	0x2
 5929 0204 23       		.byte	0x23
 5930 0205 0C       		.uleb128 0xc
 5931 0206 0D       		.uleb128 0xd
 5932 0207 09010000 		.4byte	.LASF28
 5933 020b 06       		.byte	0x6
 5934 020c CF01     		.2byte	0x1cf
 5935 020e D2000000 		.4byte	0xd2
 5936 0212 02       		.byte	0x2
 5937 0213 23       		.byte	0x23
 5938 0214 10       		.uleb128 0x10
 5939 0215 0D       		.uleb128 0xd
 5940 0216 40000000 		.4byte	.LASF29
 5941 021a 06       		.byte	0x6
 5942 021b D001     		.2byte	0x1d0
 5943 021d D2000000 		.4byte	0xd2
 5944 0221 02       		.byte	0x2
 5945 0222 23       		.byte	0x23
 5946 0223 14       		.uleb128 0x14
 5947 0224 0D       		.uleb128 0xd
 5948 0225 80030000 		.4byte	.LASF30
 5949 0229 06       		.byte	0x6
 5950 022a D101     		.2byte	0x1d1
 5951 022c D2000000 		.4byte	0xd2
ARM GAS  /tmp/ccdPJtdr.s 			page 193


 5952 0230 02       		.byte	0x2
 5953 0231 23       		.byte	0x23
 5954 0232 18       		.uleb128 0x18
 5955 0233 0D       		.uleb128 0xd
 5956 0234 9C060000 		.4byte	.LASF31
 5957 0238 06       		.byte	0x6
 5958 0239 D201     		.2byte	0x1d2
 5959 023b D2000000 		.4byte	0xd2
 5960 023f 02       		.byte	0x2
 5961 0240 23       		.byte	0x23
 5962 0241 1C       		.uleb128 0x1c
 5963 0242 00       		.byte	0
 5964 0243 0E       		.uleb128 0xe
 5965 0244 FC080000 		.4byte	.LASF32
 5966 0248 06       		.byte	0x6
 5967 0249 D301     		.2byte	0x1d3
 5968 024b C3010000 		.4byte	0x1c3
 5969 024f 0F       		.uleb128 0xf
 5970 0250 01       		.byte	0x1
 5971 0251 37000000 		.4byte	0x37
 5972 0255 07       		.byte	0x7
 5973 0256 98       		.byte	0x98
 5974 0257 68020000 		.4byte	0x268
 5975 025b 10       		.uleb128 0x10
 5976 025c 54070000 		.4byte	.LASF33
 5977 0260 00       		.byte	0
 5978 0261 11       		.uleb128 0x11
 5979 0262 53455400 		.ascii	"SET\000"
 5980 0266 01       		.byte	0x1
 5981 0267 00       		.byte	0
 5982 0268 03       		.uleb128 0x3
 5983 0269 57000000 		.4byte	.LASF34
 5984 026d 07       		.byte	0x7
 5985 026e 9B       		.byte	0x9b
 5986 026f 4F020000 		.4byte	0x24f
 5987 0273 02       		.uleb128 0x2
 5988 0274 08       		.byte	0x8
 5989 0275 04       		.byte	0x4
 5990 0276 90060000 		.4byte	.LASF35
 5991 027a 0F       		.uleb128 0xf
 5992 027b 01       		.byte	0x1
 5993 027c 37000000 		.4byte	0x37
 5994 0280 08       		.byte	0x8
 5995 0281 2A       		.byte	0x2a
 5996 0282 9F020000 		.4byte	0x29f
 5997 0286 10       		.uleb128 0x10
 5998 0287 AB040000 		.4byte	.LASF36
 5999 028b 00       		.byte	0
 6000 028c 10       		.uleb128 0x10
 6001 028d 2B0A0000 		.4byte	.LASF37
 6002 0291 01       		.byte	0x1
 6003 0292 10       		.uleb128 0x10
 6004 0293 780B0000 		.4byte	.LASF38
 6005 0297 02       		.byte	0x2
 6006 0298 10       		.uleb128 0x10
 6007 0299 F1030000 		.4byte	.LASF39
 6008 029d 03       		.byte	0x3
ARM GAS  /tmp/ccdPJtdr.s 			page 194


 6009 029e 00       		.byte	0
 6010 029f 03       		.uleb128 0x3
 6011 02a0 85050000 		.4byte	.LASF40
 6012 02a4 08       		.byte	0x8
 6013 02a5 2F       		.byte	0x2f
 6014 02a6 7A020000 		.4byte	0x27a
 6015 02aa 0F       		.uleb128 0xf
 6016 02ab 01       		.byte	0x1
 6017 02ac 37000000 		.4byte	0x37
 6018 02b0 08       		.byte	0x8
 6019 02b1 35       		.byte	0x35
 6020 02b2 C3020000 		.4byte	0x2c3
 6021 02b6 10       		.uleb128 0x10
 6022 02b7 570B0000 		.4byte	.LASF41
 6023 02bb 00       		.byte	0
 6024 02bc 10       		.uleb128 0x10
 6025 02bd A4060000 		.4byte	.LASF42
 6026 02c1 01       		.byte	0x1
 6027 02c2 00       		.byte	0
 6028 02c3 03       		.uleb128 0x3
 6029 02c4 62020000 		.4byte	.LASF43
 6030 02c8 08       		.byte	0x8
 6031 02c9 38       		.byte	0x38
 6032 02ca AA020000 		.4byte	0x2aa
 6033 02ce 12       		.uleb128 0x12
 6034 02cf 1C       		.byte	0x1c
 6035 02d0 09       		.byte	0x9
 6036 02d1 30       		.byte	0x30
 6037 02d2 39030000 		.4byte	0x339
 6038 02d6 13       		.uleb128 0x13
 6039 02d7 9F030000 		.4byte	.LASF44
 6040 02db 09       		.byte	0x9
 6041 02dc 32       		.byte	0x32
 6042 02dd C7000000 		.4byte	0xc7
 6043 02e1 02       		.byte	0x2
 6044 02e2 23       		.byte	0x23
 6045 02e3 00       		.uleb128 0
 6046 02e4 13       		.uleb128 0x13
 6047 02e5 D1020000 		.4byte	.LASF45
 6048 02e9 09       		.byte	0x9
 6049 02ea 36       		.byte	0x36
 6050 02eb C7000000 		.4byte	0xc7
 6051 02ef 02       		.byte	0x2
 6052 02f0 23       		.byte	0x23
 6053 02f1 04       		.uleb128 0x4
 6054 02f2 13       		.uleb128 0x13
 6055 02f3 23080000 		.4byte	.LASF46
 6056 02f7 09       		.byte	0x9
 6057 02f8 39       		.byte	0x39
 6058 02f9 C7000000 		.4byte	0xc7
 6059 02fd 02       		.byte	0x2
 6060 02fe 23       		.byte	0x23
 6061 02ff 08       		.uleb128 0x8
 6062 0300 13       		.uleb128 0x13
 6063 0301 480A0000 		.4byte	.LASF47
 6064 0305 09       		.byte	0x9
 6065 0306 3C       		.byte	0x3c
ARM GAS  /tmp/ccdPJtdr.s 			page 195


 6066 0307 C7000000 		.4byte	0xc7
 6067 030b 02       		.byte	0x2
 6068 030c 23       		.byte	0x23
 6069 030d 0C       		.uleb128 0xc
 6070 030e 13       		.uleb128 0x13
 6071 030f 43050000 		.4byte	.LASF48
 6072 0313 09       		.byte	0x9
 6073 0314 3F       		.byte	0x3f
 6074 0315 C7000000 		.4byte	0xc7
 6075 0319 02       		.byte	0x2
 6076 031a 23       		.byte	0x23
 6077 031b 10       		.uleb128 0x10
 6078 031c 13       		.uleb128 0x13
 6079 031d 6A030000 		.4byte	.LASF49
 6080 0321 09       		.byte	0x9
 6081 0322 42       		.byte	0x42
 6082 0323 C7000000 		.4byte	0xc7
 6083 0327 02       		.byte	0x2
 6084 0328 23       		.byte	0x23
 6085 0329 14       		.uleb128 0x14
 6086 032a 13       		.uleb128 0x13
 6087 032b DB0A0000 		.4byte	.LASF50
 6088 032f 09       		.byte	0x9
 6089 0330 47       		.byte	0x47
 6090 0331 C7000000 		.4byte	0xc7
 6091 0335 02       		.byte	0x2
 6092 0336 23       		.byte	0x23
 6093 0337 18       		.uleb128 0x18
 6094 0338 00       		.byte	0
 6095 0339 03       		.uleb128 0x3
 6096 033a 62000000 		.4byte	.LASF51
 6097 033e 09       		.byte	0x9
 6098 033f 49       		.byte	0x49
 6099 0340 CE020000 		.4byte	0x2ce
 6100 0344 0F       		.uleb128 0xf
 6101 0345 01       		.byte	0x1
 6102 0346 37000000 		.4byte	0x37
 6103 034a 09       		.byte	0x9
 6104 034b 4F       		.byte	0x4f
 6105 034c 69030000 		.4byte	0x369
 6106 0350 10       		.uleb128 0x10
 6107 0351 15040000 		.4byte	.LASF52
 6108 0355 00       		.byte	0
 6109 0356 10       		.uleb128 0x10
 6110 0357 D9050000 		.4byte	.LASF53
 6111 035b 01       		.byte	0x1
 6112 035c 10       		.uleb128 0x10
 6113 035d FC070000 		.4byte	.LASF54
 6114 0361 02       		.byte	0x2
 6115 0362 10       		.uleb128 0x10
 6116 0363 C50A0000 		.4byte	.LASF55
 6117 0367 03       		.byte	0x3
 6118 0368 00       		.byte	0
 6119 0369 03       		.uleb128 0x3
 6120 036a DD070000 		.4byte	.LASF56
 6121 036e 09       		.byte	0x9
 6122 036f 54       		.byte	0x54
ARM GAS  /tmp/ccdPJtdr.s 			page 196


 6123 0370 44030000 		.4byte	0x344
 6124 0374 14       		.uleb128 0x14
 6125 0375 B7080000 		.4byte	.LASF88
 6126 0379 44       		.byte	0x44
 6127 037a 09       		.byte	0x9
 6128 037b 6F       		.byte	0x6f
 6129 037c 29040000 		.4byte	0x429
 6130 0380 13       		.uleb128 0x13
 6131 0381 2D070000 		.4byte	.LASF57
 6132 0385 09       		.byte	0x9
 6133 0386 71       		.byte	0x71
 6134 0387 29040000 		.4byte	0x429
 6135 038b 02       		.byte	0x2
 6136 038c 23       		.byte	0x23
 6137 038d 00       		.uleb128 0
 6138 038e 13       		.uleb128 0x13
 6139 038f 1D070000 		.4byte	.LASF58
 6140 0393 09       		.byte	0x9
 6141 0394 73       		.byte	0x73
 6142 0395 39030000 		.4byte	0x339
 6143 0399 02       		.byte	0x2
 6144 039a 23       		.byte	0x23
 6145 039b 04       		.uleb128 0x4
 6146 039c 13       		.uleb128 0x13
 6147 039d 87030000 		.4byte	.LASF59
 6148 03a1 09       		.byte	0x9
 6149 03a2 75       		.byte	0x75
 6150 03a3 C3020000 		.4byte	0x2c3
 6151 03a7 02       		.byte	0x2
 6152 03a8 23       		.byte	0x23
 6153 03a9 20       		.uleb128 0x20
 6154 03aa 13       		.uleb128 0x13
 6155 03ab 06000000 		.4byte	.LASF60
 6156 03af 09       		.byte	0x9
 6157 03b0 77       		.byte	0x77
 6158 03b1 69030000 		.4byte	0x369
 6159 03b5 02       		.byte	0x2
 6160 03b6 23       		.byte	0x23
 6161 03b7 21       		.uleb128 0x21
 6162 03b8 13       		.uleb128 0x13
 6163 03b9 6F030000 		.4byte	.LASF61
 6164 03bd 09       		.byte	0x9
 6165 03be 79       		.byte	0x79
 6166 03bf 2F040000 		.4byte	0x42f
 6167 03c3 02       		.byte	0x2
 6168 03c4 23       		.byte	0x23
 6169 03c5 24       		.uleb128 0x24
 6170 03c6 13       		.uleb128 0x13
 6171 03c7 9E0B0000 		.4byte	.LASF62
 6172 03cb 09       		.byte	0x9
 6173 03cc 7B       		.byte	0x7b
 6174 03cd 43040000 		.4byte	0x443
 6175 03d1 02       		.byte	0x2
 6176 03d2 23       		.byte	0x23
 6177 03d3 28       		.uleb128 0x28
 6178 03d4 13       		.uleb128 0x13
 6179 03d5 F7010000 		.4byte	.LASF63
ARM GAS  /tmp/ccdPJtdr.s 			page 197


 6180 03d9 09       		.byte	0x9
 6181 03da 7D       		.byte	0x7d
 6182 03db 43040000 		.4byte	0x443
 6183 03df 02       		.byte	0x2
 6184 03e0 23       		.byte	0x23
 6185 03e1 2C       		.uleb128 0x2c
 6186 03e2 13       		.uleb128 0x13
 6187 03e3 D8060000 		.4byte	.LASF64
 6188 03e7 09       		.byte	0x9
 6189 03e8 7F       		.byte	0x7f
 6190 03e9 43040000 		.4byte	0x443
 6191 03ed 02       		.byte	0x2
 6192 03ee 23       		.byte	0x23
 6193 03ef 30       		.uleb128 0x30
 6194 03f0 13       		.uleb128 0x13
 6195 03f1 8C0B0000 		.4byte	.LASF65
 6196 03f5 09       		.byte	0x9
 6197 03f6 81       		.byte	0x81
 6198 03f7 43040000 		.4byte	0x443
 6199 03fb 02       		.byte	0x2
 6200 03fc 23       		.byte	0x23
 6201 03fd 34       		.uleb128 0x34
 6202 03fe 13       		.uleb128 0x13
 6203 03ff 39050000 		.4byte	.LASF66
 6204 0403 09       		.byte	0x9
 6205 0404 83       		.byte	0x83
 6206 0405 D2000000 		.4byte	0xd2
 6207 0409 02       		.byte	0x2
 6208 040a 23       		.byte	0x23
 6209 040b 38       		.uleb128 0x38
 6210 040c 13       		.uleb128 0x13
 6211 040d 10050000 		.4byte	.LASF67
 6212 0411 09       		.byte	0x9
 6213 0412 85       		.byte	0x85
 6214 0413 49040000 		.4byte	0x449
 6215 0417 02       		.byte	0x2
 6216 0418 23       		.byte	0x23
 6217 0419 3C       		.uleb128 0x3c
 6218 041a 13       		.uleb128 0x13
 6219 041b 33030000 		.4byte	.LASF68
 6220 041f 09       		.byte	0x9
 6221 0420 87       		.byte	0x87
 6222 0421 C7000000 		.4byte	0xc7
 6223 0425 02       		.byte	0x2
 6224 0426 23       		.byte	0x23
 6225 0427 40       		.uleb128 0x40
 6226 0428 00       		.byte	0
 6227 0429 15       		.uleb128 0x15
 6228 042a 04       		.byte	0x4
 6229 042b 83010000 		.4byte	0x183
 6230 042f 16       		.uleb128 0x16
 6231 0430 04       		.byte	0x4
 6232 0431 17       		.uleb128 0x17
 6233 0432 01       		.byte	0x1
 6234 0433 3D040000 		.4byte	0x43d
 6235 0437 18       		.uleb128 0x18
 6236 0438 3D040000 		.4byte	0x43d
ARM GAS  /tmp/ccdPJtdr.s 			page 198


 6237 043c 00       		.byte	0
 6238 043d 15       		.uleb128 0x15
 6239 043e 04       		.byte	0x4
 6240 043f 74030000 		.4byte	0x374
 6241 0443 15       		.uleb128 0x15
 6242 0444 04       		.byte	0x4
 6243 0445 31040000 		.4byte	0x431
 6244 0449 15       		.uleb128 0x15
 6245 044a 04       		.byte	0x4
 6246 044b B7010000 		.4byte	0x1b7
 6247 044f 03       		.uleb128 0x3
 6248 0450 C6060000 		.4byte	.LASF69
 6249 0454 09       		.byte	0x9
 6250 0455 89       		.byte	0x89
 6251 0456 74030000 		.4byte	0x374
 6252 045a 15       		.uleb128 0x15
 6253 045b 04       		.byte	0x4
 6254 045c 4F040000 		.4byte	0x44f
 6255 0460 15       		.uleb128 0x15
 6256 0461 04       		.byte	0x4
 6257 0462 97000000 		.4byte	0x97
 6258 0466 12       		.uleb128 0x12
 6259 0467 2C       		.byte	0x2c
 6260 0468 0A       		.byte	0xa
 6261 0469 2F       		.byte	0x2f
 6262 046a 09050000 		.4byte	0x509
 6263 046e 13       		.uleb128 0x13
 6264 046f 6A030000 		.4byte	.LASF49
 6265 0473 0A       		.byte	0xa
 6266 0474 31       		.byte	0x31
 6267 0475 C7000000 		.4byte	0xc7
 6268 0479 02       		.byte	0x2
 6269 047a 23       		.byte	0x23
 6270 047b 00       		.uleb128 0
 6271 047c 13       		.uleb128 0x13
 6272 047d 9F030000 		.4byte	.LASF44
 6273 0481 0A       		.byte	0xa
 6274 0482 34       		.byte	0x34
 6275 0483 C7000000 		.4byte	0xc7
 6276 0487 02       		.byte	0x2
 6277 0488 23       		.byte	0x23
 6278 0489 04       		.uleb128 0x4
 6279 048a 13       		.uleb128 0x13
 6280 048b 56090000 		.4byte	.LASF70
 6281 048f 0A       		.byte	0xa
 6282 0490 37       		.byte	0x37
 6283 0491 C7000000 		.4byte	0xc7
 6284 0495 02       		.byte	0x2
 6285 0496 23       		.byte	0x23
 6286 0497 08       		.uleb128 0x8
 6287 0498 13       		.uleb128 0x13
 6288 0499 ED050000 		.4byte	.LASF71
 6289 049d 0A       		.byte	0xa
 6290 049e 3A       		.byte	0x3a
 6291 049f C7000000 		.4byte	0xc7
 6292 04a3 02       		.byte	0x2
 6293 04a4 23       		.byte	0x23
ARM GAS  /tmp/ccdPJtdr.s 			page 199


 6294 04a5 0C       		.uleb128 0xc
 6295 04a6 13       		.uleb128 0x13
 6296 04a7 F1060000 		.4byte	.LASF72
 6297 04ab 0A       		.byte	0xa
 6298 04ac 3D       		.byte	0x3d
 6299 04ad C7000000 		.4byte	0xc7
 6300 04b1 02       		.byte	0x2
 6301 04b2 23       		.byte	0x23
 6302 04b3 10       		.uleb128 0x10
 6303 04b4 19       		.uleb128 0x19
 6304 04b5 4E535300 		.ascii	"NSS\000"
 6305 04b9 0A       		.byte	0xa
 6306 04ba 40       		.byte	0x40
 6307 04bb C7000000 		.4byte	0xc7
 6308 04bf 02       		.byte	0x2
 6309 04c0 23       		.byte	0x23
 6310 04c1 14       		.uleb128 0x14
 6311 04c2 13       		.uleb128 0x13
 6312 04c3 A5050000 		.4byte	.LASF73
 6313 04c7 0A       		.byte	0xa
 6314 04c8 44       		.byte	0x44
 6315 04c9 C7000000 		.4byte	0xc7
 6316 04cd 02       		.byte	0x2
 6317 04ce 23       		.byte	0x23
 6318 04cf 18       		.uleb128 0x18
 6319 04d0 13       		.uleb128 0x13
 6320 04d1 FA060000 		.4byte	.LASF74
 6321 04d5 0A       		.byte	0xa
 6322 04d6 4A       		.byte	0x4a
 6323 04d7 C7000000 		.4byte	0xc7
 6324 04db 02       		.byte	0x2
 6325 04dc 23       		.byte	0x23
 6326 04dd 1C       		.uleb128 0x1c
 6327 04de 13       		.uleb128 0x13
 6328 04df 9B0A0000 		.4byte	.LASF75
 6329 04e3 0A       		.byte	0xa
 6330 04e4 4D       		.byte	0x4d
 6331 04e5 C7000000 		.4byte	0xc7
 6332 04e9 02       		.byte	0x2
 6333 04ea 23       		.byte	0x23
 6334 04eb 20       		.uleb128 0x20
 6335 04ec 13       		.uleb128 0x13
 6336 04ed F70A0000 		.4byte	.LASF76
 6337 04f1 0A       		.byte	0xa
 6338 04f2 50       		.byte	0x50
 6339 04f3 C7000000 		.4byte	0xc7
 6340 04f7 02       		.byte	0x2
 6341 04f8 23       		.byte	0x23
 6342 04f9 24       		.uleb128 0x24
 6343 04fa 13       		.uleb128 0x13
 6344 04fb DE000000 		.4byte	.LASF77
 6345 04ff 0A       		.byte	0xa
 6346 0500 53       		.byte	0x53
 6347 0501 C7000000 		.4byte	0xc7
 6348 0505 02       		.byte	0x2
 6349 0506 23       		.byte	0x23
 6350 0507 28       		.uleb128 0x28
ARM GAS  /tmp/ccdPJtdr.s 			page 200


 6351 0508 00       		.byte	0
 6352 0509 03       		.uleb128 0x3
 6353 050a 47000000 		.4byte	.LASF78
 6354 050e 0A       		.byte	0xa
 6355 050f 55       		.byte	0x55
 6356 0510 66040000 		.4byte	0x466
 6357 0514 0F       		.uleb128 0xf
 6358 0515 01       		.byte	0x1
 6359 0516 37000000 		.4byte	0x37
 6360 051a 0A       		.byte	0xa
 6361 051b 5B       		.byte	0x5b
 6362 051c 51050000 		.4byte	0x551
 6363 0520 10       		.uleb128 0x10
 6364 0521 A3080000 		.4byte	.LASF79
 6365 0525 00       		.byte	0
 6366 0526 10       		.uleb128 0x10
 6367 0527 5C0A0000 		.4byte	.LASF80
 6368 052b 01       		.byte	0x1
 6369 052c 10       		.uleb128 0x10
 6370 052d E0020000 		.4byte	.LASF81
 6371 0531 02       		.byte	0x2
 6372 0532 10       		.uleb128 0x10
 6373 0533 BB020000 		.4byte	.LASF82
 6374 0537 03       		.byte	0x3
 6375 0538 10       		.uleb128 0x10
 6376 0539 72000000 		.4byte	.LASF83
 6377 053d 04       		.byte	0x4
 6378 053e 10       		.uleb128 0x10
 6379 053f 2E060000 		.4byte	.LASF84
 6380 0543 05       		.byte	0x5
 6381 0544 10       		.uleb128 0x10
 6382 0545 36070000 		.4byte	.LASF85
 6383 0549 06       		.byte	0x6
 6384 054a 10       		.uleb128 0x10
 6385 054b 3A080000 		.4byte	.LASF86
 6386 054f 07       		.byte	0x7
 6387 0550 00       		.byte	0
 6388 0551 03       		.uleb128 0x3
 6389 0552 E4090000 		.4byte	.LASF87
 6390 0556 0A       		.byte	0xa
 6391 0557 64       		.byte	0x64
 6392 0558 14050000 		.4byte	0x514
 6393 055c 06       		.uleb128 0x6
 6394 055d 51050000 		.4byte	0x551
 6395 0561 14       		.uleb128 0x14
 6396 0562 B2040000 		.4byte	.LASF89
 6397 0566 58       		.byte	0x58
 6398 0567 0A       		.byte	0xa
 6399 0568 69       		.byte	0x69
 6400 0569 40060000 		.4byte	0x640
 6401 056d 13       		.uleb128 0x13
 6402 056e 2D070000 		.4byte	.LASF57
 6403 0572 0A       		.byte	0xa
 6404 0573 6B       		.byte	0x6b
 6405 0574 40060000 		.4byte	0x640
 6406 0578 02       		.byte	0x2
 6407 0579 23       		.byte	0x23
ARM GAS  /tmp/ccdPJtdr.s 			page 201


 6408 057a 00       		.uleb128 0
 6409 057b 13       		.uleb128 0x13
 6410 057c 1D070000 		.4byte	.LASF58
 6411 0580 0A       		.byte	0xa
 6412 0581 6D       		.byte	0x6d
 6413 0582 09050000 		.4byte	0x509
 6414 0586 02       		.byte	0x2
 6415 0587 23       		.byte	0x23
 6416 0588 04       		.uleb128 0x4
 6417 0589 13       		.uleb128 0x13
 6418 058a B0020000 		.4byte	.LASF90
 6419 058e 0A       		.byte	0xa
 6420 058f 6F       		.byte	0x6f
 6421 0590 60040000 		.4byte	0x460
 6422 0594 02       		.byte	0x2
 6423 0595 23       		.byte	0x23
 6424 0596 30       		.uleb128 0x30
 6425 0597 13       		.uleb128 0x13
 6426 0598 05050000 		.4byte	.LASF91
 6427 059c 0A       		.byte	0xa
 6428 059d 71       		.byte	0x71
 6429 059e A7000000 		.4byte	0xa7
 6430 05a2 02       		.byte	0x2
 6431 05a3 23       		.byte	0x23
 6432 05a4 34       		.uleb128 0x34
 6433 05a5 13       		.uleb128 0x13
 6434 05a6 B6010000 		.4byte	.LASF92
 6435 05aa 0A       		.byte	0xa
 6436 05ab 73       		.byte	0x73
 6437 05ac B2000000 		.4byte	0xb2
 6438 05b0 02       		.byte	0x2
 6439 05b1 23       		.byte	0x23
 6440 05b2 36       		.uleb128 0x36
 6441 05b3 13       		.uleb128 0x13
 6442 05b4 E40A0000 		.4byte	.LASF93
 6443 05b8 0A       		.byte	0xa
 6444 05b9 75       		.byte	0x75
 6445 05ba 60040000 		.4byte	0x460
 6446 05be 02       		.byte	0x2
 6447 05bf 23       		.byte	0x23
 6448 05c0 38       		.uleb128 0x38
 6449 05c1 13       		.uleb128 0x13
 6450 05c2 D6040000 		.4byte	.LASF94
 6451 05c6 0A       		.byte	0xa
 6452 05c7 77       		.byte	0x77
 6453 05c8 A7000000 		.4byte	0xa7
 6454 05cc 02       		.byte	0x2
 6455 05cd 23       		.byte	0x23
 6456 05ce 3C       		.uleb128 0x3c
 6457 05cf 13       		.uleb128 0x13
 6458 05d0 350B0000 		.4byte	.LASF95
 6459 05d4 0A       		.byte	0xa
 6460 05d5 79       		.byte	0x79
 6461 05d6 B2000000 		.4byte	0xb2
 6462 05da 02       		.byte	0x2
 6463 05db 23       		.byte	0x23
 6464 05dc 3E       		.uleb128 0x3e
ARM GAS  /tmp/ccdPJtdr.s 			page 202


 6465 05dd 13       		.uleb128 0x13
 6466 05de EC000000 		.4byte	.LASF96
 6467 05e2 0A       		.byte	0xa
 6468 05e3 7B       		.byte	0x7b
 6469 05e4 58060000 		.4byte	0x658
 6470 05e8 02       		.byte	0x2
 6471 05e9 23       		.byte	0x23
 6472 05ea 40       		.uleb128 0x40
 6473 05eb 13       		.uleb128 0x13
 6474 05ec 410B0000 		.4byte	.LASF97
 6475 05f0 0A       		.byte	0xa
 6476 05f1 7D       		.byte	0x7d
 6477 05f2 58060000 		.4byte	0x658
 6478 05f6 02       		.byte	0x2
 6479 05f7 23       		.byte	0x23
 6480 05f8 44       		.uleb128 0x44
 6481 05f9 13       		.uleb128 0x13
 6482 05fa EA060000 		.4byte	.LASF98
 6483 05fe 0A       		.byte	0xa
 6484 05ff 7F       		.byte	0x7f
 6485 0600 5A040000 		.4byte	0x45a
 6486 0604 02       		.byte	0x2
 6487 0605 23       		.byte	0x23
 6488 0606 48       		.uleb128 0x48
 6489 0607 13       		.uleb128 0x13
 6490 0608 C4030000 		.4byte	.LASF99
 6491 060c 0A       		.byte	0xa
 6492 060d 81       		.byte	0x81
 6493 060e 5A040000 		.4byte	0x45a
 6494 0612 02       		.byte	0x2
 6495 0613 23       		.byte	0x23
 6496 0614 4C       		.uleb128 0x4c
 6497 0615 13       		.uleb128 0x13
 6498 0616 87030000 		.4byte	.LASF59
 6499 061a 0A       		.byte	0xa
 6500 061b 83       		.byte	0x83
 6501 061c C3020000 		.4byte	0x2c3
 6502 0620 02       		.byte	0x2
 6503 0621 23       		.byte	0x23
 6504 0622 50       		.uleb128 0x50
 6505 0623 13       		.uleb128 0x13
 6506 0624 06000000 		.4byte	.LASF60
 6507 0628 0A       		.byte	0xa
 6508 0629 85       		.byte	0x85
 6509 062a 5C050000 		.4byte	0x55c
 6510 062e 02       		.byte	0x2
 6511 062f 23       		.byte	0x23
 6512 0630 51       		.uleb128 0x51
 6513 0631 13       		.uleb128 0x13
 6514 0632 39050000 		.4byte	.LASF66
 6515 0636 0A       		.byte	0xa
 6516 0637 87       		.byte	0x87
 6517 0638 D2000000 		.4byte	0xd2
 6518 063c 02       		.byte	0x2
 6519 063d 23       		.byte	0x23
 6520 063e 54       		.uleb128 0x54
 6521 063f 00       		.byte	0
ARM GAS  /tmp/ccdPJtdr.s 			page 203


 6522 0640 15       		.uleb128 0x15
 6523 0641 04       		.byte	0x4
 6524 0642 43020000 		.4byte	0x243
 6525 0646 17       		.uleb128 0x17
 6526 0647 01       		.byte	0x1
 6527 0648 52060000 		.4byte	0x652
 6528 064c 18       		.uleb128 0x18
 6529 064d 52060000 		.4byte	0x652
 6530 0651 00       		.byte	0
 6531 0652 15       		.uleb128 0x15
 6532 0653 04       		.byte	0x4
 6533 0654 61050000 		.4byte	0x561
 6534 0658 15       		.uleb128 0x15
 6535 0659 04       		.byte	0x4
 6536 065a 46060000 		.4byte	0x646
 6537 065e 03       		.uleb128 0x3
 6538 065f 87020000 		.4byte	.LASF100
 6539 0663 0A       		.byte	0xa
 6540 0664 96       		.byte	0x96
 6541 0665 61050000 		.4byte	0x561
 6542 0669 0F       		.uleb128 0xf
 6543 066a 01       		.byte	0x1
 6544 066b 37000000 		.4byte	0x37
 6545 066f 0B       		.byte	0xb
 6546 0670 33       		.byte	0x33
 6547 0671 8E060000 		.4byte	0x68e
 6548 0675 10       		.uleb128 0x10
 6549 0676 11030000 		.4byte	.LASF101
 6550 067a 64       		.byte	0x64
 6551 067b 10       		.uleb128 0x10
 6552 067c 6F090000 		.4byte	.LASF102
 6553 0680 0A       		.byte	0xa
 6554 0681 10       		.uleb128 0x10
 6555 0682 57030000 		.4byte	.LASF103
 6556 0686 01       		.byte	0x1
 6557 0687 10       		.uleb128 0x10
 6558 0688 2A000000 		.4byte	.LASF104
 6559 068c 01       		.byte	0x1
 6560 068d 00       		.byte	0
 6561 068e 03       		.uleb128 0x3
 6562 068f 0C000000 		.4byte	.LASF105
 6563 0693 0B       		.byte	0xb
 6564 0694 38       		.byte	0x38
 6565 0695 69060000 		.4byte	0x669
 6566 0699 08       		.uleb128 0x8
 6567 069a 08090000 		.4byte	.LASF106
 6568 069e 0B       		.byte	0xb
 6569 069f 3D       		.byte	0x3d
 6570 06a0 C7000000 		.4byte	0xc7
 6571 06a4 01       		.byte	0x1
 6572 06a5 01       		.byte	0x1
 6573 06a6 08       		.uleb128 0x8
 6574 06a7 39040000 		.4byte	.LASF107
 6575 06ab 0B       		.byte	0xb
 6576 06ac 3E       		.byte	0x3e
 6577 06ad 8E060000 		.4byte	0x68e
 6578 06b1 01       		.byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 204


 6579 06b2 01       		.byte	0x1
 6580 06b3 1A       		.uleb128 0x1a
 6581 06b4 01       		.byte	0x1
 6582 06b5 870A0000 		.4byte	.LASF165
 6583 06b9 01       		.byte	0x1
 6584 06ba 190F     		.2byte	0xf19
 6585 06bc 01       		.byte	0x1
 6586 06bd 97000000 		.4byte	0x97
 6587 06c1 01       		.byte	0x1
 6588 06c2 D3060000 		.4byte	0x6d3
 6589 06c6 1B       		.uleb128 0x1b
 6590 06c7 5D020000 		.4byte	.LASF110
 6591 06cb 01       		.byte	0x1
 6592 06cc 190F     		.2byte	0xf19
 6593 06ce D3060000 		.4byte	0x6d3
 6594 06d2 00       		.byte	0
 6595 06d3 15       		.uleb128 0x15
 6596 06d4 04       		.byte	0x4
 6597 06d5 5E060000 		.4byte	0x65e
 6598 06d9 1C       		.uleb128 0x1c
 6599 06da 5F090000 		.4byte	.LASF108
 6600 06de 01       		.byte	0x1
 6601 06df 060F     		.2byte	0xf06
 6602 06e1 01       		.byte	0x1
 6603 06e2 50000000 		.4byte	.LFB123
 6604 06e6 6A000000 		.4byte	.LFE123
 6605 06ea 02       		.byte	0x2
 6606 06eb 7D       		.byte	0x7d
 6607 06ec 00       		.sleb128 0
 6608 06ed 01       		.byte	0x1
 6609 06ee 01070000 		.4byte	0x701
 6610 06f2 1D       		.uleb128 0x1d
 6611 06f3 5D020000 		.4byte	.LASF110
 6612 06f7 01       		.byte	0x1
 6613 06f8 060F     		.2byte	0xf06
 6614 06fa D3060000 		.4byte	0x6d3
 6615 06fe 01       		.byte	0x1
 6616 06ff 50       		.byte	0x50
 6617 0700 00       		.byte	0
 6618 0701 1E       		.uleb128 0x1e
 6619 0702 3B090000 		.4byte	.LASF109
 6620 0706 01       		.byte	0x1
 6621 0707 E50E     		.2byte	0xee5
 6622 0709 01       		.byte	0x1
 6623 070a 00000000 		.4byte	.LFB122
 6624 070e 50000000 		.4byte	.LFE122
 6625 0712 00000000 		.4byte	.LLST0
 6626 0716 01       		.byte	0x1
 6627 0717 39070000 		.4byte	0x739
 6628 071b 1D       		.uleb128 0x1d
 6629 071c 5D020000 		.4byte	.LASF110
 6630 0720 01       		.byte	0x1
 6631 0721 E50E     		.2byte	0xee5
 6632 0723 D3060000 		.4byte	0x6d3
 6633 0727 01       		.byte	0x1
 6634 0728 50       		.byte	0x50
 6635 0729 1F       		.uleb128 0x1f
ARM GAS  /tmp/ccdPJtdr.s 			page 205


 6636 072a 00000000 		.4byte	.LASF112
 6637 072e 01       		.byte	0x1
 6638 072f E70E     		.2byte	0xee7
 6639 0731 D2000000 		.4byte	0xd2
 6640 0735 02       		.byte	0x2
 6641 0736 91       		.byte	0x91
 6642 0737 7C       		.sleb128 -4
 6643 0738 00       		.byte	0
 6644 0739 1E       		.uleb128 0x1e
 6645 073a 250B0000 		.4byte	.LASF111
 6646 073e 01       		.byte	0x1
 6647 073f A80E     		.2byte	0xea8
 6648 0741 01       		.byte	0x1
 6649 0742 E20E0000 		.4byte	.LFB121
 6650 0746 640F0000 		.4byte	.LFE121
 6651 074a 38000000 		.4byte	.LLST114
 6652 074e 01       		.byte	0x1
 6653 074f E0070000 		.4byte	0x7e0
 6654 0753 20       		.uleb128 0x20
 6655 0754 5D020000 		.4byte	.LASF110
 6656 0758 01       		.byte	0x1
 6657 0759 A80E     		.2byte	0xea8
 6658 075b D3060000 		.4byte	0x6d3
 6659 075f 70000000 		.4byte	.LLST115
 6660 0763 21       		.uleb128 0x21
 6661 0764 19080000 		.4byte	.LASF113
 6662 0768 01       		.byte	0x1
 6663 0769 AA0E     		.2byte	0xeaa
 6664 076b C7000000 		.4byte	0xc7
 6665 076f BA000000 		.4byte	.LLST116
 6666 0773 1F       		.uleb128 0x1f
 6667 0774 00000000 		.4byte	.LASF112
 6668 0778 01       		.byte	0x1
 6669 0779 AB0E     		.2byte	0xeab
 6670 077b D2000000 		.4byte	0xd2
 6671 077f 02       		.byte	0x2
 6672 0780 91       		.byte	0x91
 6673 0781 70       		.sleb128 -16
 6674 0782 22       		.uleb128 0x22
 6675 0783 2A0F0000 		.4byte	.LBB47
 6676 0787 380F0000 		.4byte	.LBE47
 6677 078b 9F070000 		.4byte	0x79f
 6678 078f 1F       		.uleb128 0x1f
 6679 0790 810B0000 		.4byte	.LASF114
 6680 0794 01       		.byte	0x1
 6681 0795 C70E     		.2byte	0xec7
 6682 0797 D2000000 		.4byte	0xd2
 6683 079b 02       		.byte	0x2
 6684 079c 91       		.byte	0x91
 6685 079d 74       		.sleb128 -12
 6686 079e 00       		.byte	0
 6687 079f 23       		.uleb128 0x23
 6688 07a0 FC0E0000 		.4byte	.LVL213
 6689 07a4 2E200000 		.4byte	0x202e
 6690 07a8 24       		.uleb128 0x24
 6691 07a9 1C0F0000 		.4byte	.LVL216
 6692 07ad 1F090000 		.4byte	0x91f
ARM GAS  /tmp/ccdPJtdr.s 			page 206


 6693 07b1 C2070000 		.4byte	0x7c2
 6694 07b5 25       		.uleb128 0x25
 6695 07b6 01       		.byte	0x1
 6696 07b7 50       		.byte	0x50
 6697 07b8 02       		.byte	0x2
 6698 07b9 74       		.byte	0x74
 6699 07ba 00       		.sleb128 0
 6700 07bb 25       		.uleb128 0x25
 6701 07bc 01       		.byte	0x1
 6702 07bd 51       		.byte	0x51
 6703 07be 02       		.byte	0x2
 6704 07bf 08       		.byte	0x8
 6705 07c0 64       		.byte	0x64
 6706 07c1 00       		.byte	0
 6707 07c2 24       		.uleb128 0x24
 6708 07c3 480F0000 		.4byte	.LVL218
 6709 07c7 31110000 		.4byte	0x1131
 6710 07cb D6070000 		.4byte	0x7d6
 6711 07cf 25       		.uleb128 0x25
 6712 07d0 01       		.byte	0x1
 6713 07d1 50       		.byte	0x50
 6714 07d2 02       		.byte	0x2
 6715 07d3 74       		.byte	0x74
 6716 07d4 00       		.sleb128 0
 6717 07d5 00       		.byte	0
 6718 07d6 23       		.uleb128 0x23
 6719 07d7 5E0F0000 		.4byte	.LVL221
 6720 07db D3110000 		.4byte	0x11d3
 6721 07df 00       		.byte	0
 6722 07e0 1E       		.uleb128 0x1e
 6723 07e1 C6040000 		.4byte	.LASF115
 6724 07e5 01       		.byte	0x1
 6725 07e6 5E0E     		.2byte	0xe5e
 6726 07e8 01       		.byte	0x1
 6727 07e9 44110000 		.4byte	.LFB120
 6728 07ed B8110000 		.4byte	.LFE120
 6729 07f1 E3000000 		.4byte	.LLST133
 6730 07f5 01       		.byte	0x1
 6731 07f6 64080000 		.4byte	0x864
 6732 07fa 20       		.uleb128 0x20
 6733 07fb 5D020000 		.4byte	.LASF110
 6734 07ff 01       		.byte	0x1
 6735 0800 5E0E     		.2byte	0xe5e
 6736 0802 D3060000 		.4byte	0x6d3
 6737 0806 0F010000 		.4byte	.LLST134
 6738 080a 22       		.uleb128 0x22
 6739 080b 70110000 		.4byte	.LBB56
 6740 080f 7C110000 		.4byte	.LBE56
 6741 0813 27080000 		.4byte	0x827
 6742 0817 1F       		.uleb128 0x1f
 6743 0818 810B0000 		.4byte	.LASF114
 6744 081c 01       		.byte	0x1
 6745 081d 6C0E     		.2byte	0xe6c
 6746 081f D2000000 		.4byte	0xd2
 6747 0823 02       		.byte	0x2
 6748 0824 91       		.byte	0x91
 6749 0825 74       		.sleb128 -12
ARM GAS  /tmp/ccdPJtdr.s 			page 207


 6750 0826 00       		.byte	0
 6751 0827 23       		.uleb128 0x23
 6752 0828 56110000 		.4byte	.LVL255
 6753 082c 2E200000 		.4byte	0x202e
 6754 0830 24       		.uleb128 0x24
 6755 0831 60110000 		.4byte	.LVL256
 6756 0835 98090000 		.4byte	0x998
 6757 0839 4A080000 		.4byte	0x84a
 6758 083d 25       		.uleb128 0x25
 6759 083e 01       		.byte	0x1
 6760 083f 50       		.byte	0x50
 6761 0840 02       		.byte	0x2
 6762 0841 74       		.byte	0x74
 6763 0842 00       		.sleb128 0
 6764 0843 25       		.uleb128 0x25
 6765 0844 01       		.byte	0x1
 6766 0845 51       		.byte	0x51
 6767 0846 02       		.byte	0x2
 6768 0847 08       		.byte	0x8
 6769 0848 64       		.byte	0x64
 6770 0849 00       		.byte	0
 6771 084a 23       		.uleb128 0x23
 6772 084b A6110000 		.4byte	.LVL258
 6773 084f 31110000 		.4byte	0x1131
 6774 0853 26       		.uleb128 0x26
 6775 0854 B4110000 		.4byte	.LVL260
 6776 0858 B8110000 		.4byte	0x11b8
 6777 085c 25       		.uleb128 0x25
 6778 085d 01       		.byte	0x1
 6779 085e 50       		.byte	0x50
 6780 085f 02       		.byte	0x2
 6781 0860 74       		.byte	0x74
 6782 0861 00       		.sleb128 0
 6783 0862 00       		.byte	0
 6784 0863 00       		.byte	0
 6785 0864 1E       		.uleb128 0x1e
 6786 0865 D4080000 		.4byte	.LASF116
 6787 0869 01       		.byte	0x1
 6788 086a F40D     		.2byte	0xdf4
 6789 086c 01       		.byte	0x1
 6790 086d 7E120000 		.4byte	.LFB119
 6791 0871 40130000 		.4byte	.LFE119
 6792 0875 59010000 		.4byte	.LLST141
 6793 0879 01       		.byte	0x1
 6794 087a 1F090000 		.4byte	0x91f
 6795 087e 20       		.uleb128 0x20
 6796 087f 5D020000 		.4byte	.LASF110
 6797 0883 01       		.byte	0x1
 6798 0884 F40D     		.2byte	0xdf4
 6799 0886 D3060000 		.4byte	0x6d3
 6800 088a 91010000 		.4byte	.LLST142
 6801 088e 21       		.uleb128 0x21
 6802 088f 19080000 		.4byte	.LASF113
 6803 0893 01       		.byte	0x1
 6804 0894 F60D     		.2byte	0xdf6
 6805 0896 C7000000 		.4byte	0xc7
 6806 089a DB010000 		.4byte	.LLST143
ARM GAS  /tmp/ccdPJtdr.s 			page 208


 6807 089e 1F       		.uleb128 0x1f
 6808 089f 00000000 		.4byte	.LASF112
 6809 08a3 01       		.byte	0x1
 6810 08a4 F70D     		.2byte	0xdf7
 6811 08a6 D2000000 		.4byte	0xd2
 6812 08aa 02       		.byte	0x2
 6813 08ab 91       		.byte	0x91
 6814 08ac 70       		.sleb128 -16
 6815 08ad 22       		.uleb128 0x22
 6816 08ae CA120000 		.4byte	.LBB65
 6817 08b2 D6120000 		.4byte	.LBE65
 6818 08b6 CA080000 		.4byte	0x8ca
 6819 08ba 1F       		.uleb128 0x1f
 6820 08bb 810B0000 		.4byte	.LASF114
 6821 08bf 01       		.byte	0x1
 6822 08c0 130E     		.2byte	0xe13
 6823 08c2 D2000000 		.4byte	0xd2
 6824 08c6 02       		.byte	0x2
 6825 08c7 91       		.byte	0x91
 6826 08c8 74       		.sleb128 -12
 6827 08c9 00       		.byte	0
 6828 08ca 23       		.uleb128 0x23
 6829 08cb 98120000 		.4byte	.LVL272
 6830 08cf 2E200000 		.4byte	0x202e
 6831 08d3 24       		.uleb128 0x24
 6832 08d4 BA120000 		.4byte	.LVL275
 6833 08d8 1F090000 		.4byte	0x91f
 6834 08dc ED080000 		.4byte	0x8ed
 6835 08e0 25       		.uleb128 0x25
 6836 08e1 01       		.byte	0x1
 6837 08e2 50       		.byte	0x50
 6838 08e3 02       		.byte	0x2
 6839 08e4 74       		.byte	0x74
 6840 08e5 00       		.sleb128 0
 6841 08e6 25       		.uleb128 0x25
 6842 08e7 01       		.byte	0x1
 6843 08e8 51       		.byte	0x51
 6844 08e9 02       		.byte	0x2
 6845 08ea 08       		.byte	0x8
 6846 08eb 64       		.byte	0x64
 6847 08ec 00       		.byte	0
 6848 08ed 24       		.uleb128 0x24
 6849 08ee 04130000 		.4byte	.LVL276
 6850 08f2 31110000 		.4byte	0x1131
 6851 08f6 01090000 		.4byte	0x901
 6852 08fa 25       		.uleb128 0x25
 6853 08fb 01       		.byte	0x1
 6854 08fc 50       		.byte	0x50
 6855 08fd 02       		.byte	0x2
 6856 08fe 74       		.byte	0x74
 6857 08ff 00       		.sleb128 0
 6858 0900 00       		.byte	0
 6859 0901 24       		.uleb128 0x24
 6860 0902 2A130000 		.4byte	.LVL280
 6861 0906 B8110000 		.4byte	0x11b8
 6862 090a 15090000 		.4byte	0x915
 6863 090e 25       		.uleb128 0x25
ARM GAS  /tmp/ccdPJtdr.s 			page 209


 6864 090f 01       		.byte	0x1
 6865 0910 50       		.byte	0x50
 6866 0911 02       		.byte	0x2
 6867 0912 74       		.byte	0x74
 6868 0913 00       		.sleb128 0
 6869 0914 00       		.byte	0
 6870 0915 23       		.uleb128 0x23
 6871 0916 32130000 		.4byte	.LVL282
 6872 091a 9D110000 		.4byte	0x119d
 6873 091e 00       		.byte	0
 6874 091f 27       		.uleb128 0x27
 6875 0920 39020000 		.4byte	.LASF195
 6876 0924 01       		.byte	0x1
 6877 0925 E30D     		.2byte	0xde3
 6878 0927 01       		.byte	0x1
 6879 0928 9F020000 		.4byte	0x29f
 6880 092c F0000000 		.4byte	.LFB118
 6881 0930 10010000 		.4byte	.LFE118
 6882 0934 04020000 		.4byte	.LLST12
 6883 0938 01       		.byte	0x1
 6884 0939 98090000 		.4byte	0x998
 6885 093d 20       		.uleb128 0x20
 6886 093e 5D020000 		.4byte	.LASF110
 6887 0942 01       		.byte	0x1
 6888 0943 E30D     		.2byte	0xde3
 6889 0945 D3060000 		.4byte	0x6d3
 6890 0949 30020000 		.4byte	.LLST13
 6891 094d 20       		.uleb128 0x20
 6892 094e 97030000 		.4byte	.LASF117
 6893 0952 01       		.byte	0x1
 6894 0953 E30D     		.2byte	0xde3
 6895 0955 C7000000 		.4byte	0xc7
 6896 0959 4E020000 		.4byte	.LLST14
 6897 095d 20       		.uleb128 0x20
 6898 095e 4A070000 		.4byte	.LASF118
 6899 0962 01       		.byte	0x1
 6900 0963 E30D     		.2byte	0xde3
 6901 0965 C7000000 		.4byte	0xc7
 6902 0969 7A020000 		.4byte	.LLST15
 6903 096d 26       		.uleb128 0x26
 6904 096e 00010000 		.4byte	.LVL11
 6905 0972 CF090000 		.4byte	0x9cf
 6906 0976 25       		.uleb128 0x25
 6907 0977 01       		.byte	0x1
 6908 0978 50       		.byte	0x50
 6909 0979 02       		.byte	0x2
 6910 097a 74       		.byte	0x74
 6911 097b 00       		.sleb128 0
 6912 097c 25       		.uleb128 0x25
 6913 097d 01       		.byte	0x1
 6914 097e 51       		.byte	0x51
 6915 097f 02       		.byte	0x2
 6916 0980 08       		.byte	0x8
 6917 0981 80       		.byte	0x80
 6918 0982 25       		.uleb128 0x25
 6919 0983 01       		.byte	0x1
 6920 0984 52       		.byte	0x52
ARM GAS  /tmp/ccdPJtdr.s 			page 210


 6921 0985 01       		.byte	0x1
 6922 0986 30       		.byte	0x30
 6923 0987 25       		.uleb128 0x25
 6924 0988 01       		.byte	0x1
 6925 0989 53       		.byte	0x53
 6926 098a 03       		.byte	0x3
 6927 098b F3       		.byte	0xf3
 6928 098c 01       		.uleb128 0x1
 6929 098d 51       		.byte	0x51
 6930 098e 25       		.uleb128 0x25
 6931 098f 02       		.byte	0x2
 6932 0990 7D       		.byte	0x7d
 6933 0991 00       		.sleb128 0
 6934 0992 03       		.byte	0x3
 6935 0993 F3       		.byte	0xf3
 6936 0994 01       		.uleb128 0x1
 6937 0995 52       		.byte	0x52
 6938 0996 00       		.byte	0
 6939 0997 00       		.byte	0
 6940 0998 28       		.uleb128 0x28
 6941 0999 FC020000 		.4byte	.LASF119
 6942 099d 01       		.byte	0x1
 6943 099e BE0D     		.2byte	0xdbe
 6944 09a0 01       		.byte	0x1
 6945 09a1 9F020000 		.4byte	0x29f
 6946 09a5 01       		.byte	0x1
 6947 09a6 CF090000 		.4byte	0x9cf
 6948 09aa 1B       		.uleb128 0x1b
 6949 09ab 5D020000 		.4byte	.LASF110
 6950 09af 01       		.byte	0x1
 6951 09b0 BE0D     		.2byte	0xdbe
 6952 09b2 D3060000 		.4byte	0x6d3
 6953 09b6 1B       		.uleb128 0x1b
 6954 09b7 97030000 		.4byte	.LASF117
 6955 09bb 01       		.byte	0x1
 6956 09bc BE0D     		.2byte	0xdbe
 6957 09be C7000000 		.4byte	0xc7
 6958 09c2 1B       		.uleb128 0x1b
 6959 09c3 4A070000 		.4byte	.LASF118
 6960 09c7 01       		.byte	0x1
 6961 09c8 BE0D     		.2byte	0xdbe
 6962 09ca C7000000 		.4byte	0xc7
 6963 09ce 00       		.byte	0
 6964 09cf 28       		.uleb128 0x28
 6965 09d0 72060000 		.4byte	.LASF120
 6966 09d4 01       		.byte	0x1
 6967 09d5 8C0D     		.2byte	0xd8c
 6968 09d7 01       		.byte	0x1
 6969 09d8 9F020000 		.4byte	0x29f
 6970 09dc 01       		.byte	0x1
 6971 09dd 1E0A0000 		.4byte	0xa1e
 6972 09e1 1B       		.uleb128 0x1b
 6973 09e2 5D020000 		.4byte	.LASF110
 6974 09e6 01       		.byte	0x1
 6975 09e7 8C0D     		.2byte	0xd8c
 6976 09e9 D3060000 		.4byte	0x6d3
 6977 09ed 1B       		.uleb128 0x1b
ARM GAS  /tmp/ccdPJtdr.s 			page 211


 6978 09ee DB020000 		.4byte	.LASF121
 6979 09f2 01       		.byte	0x1
 6980 09f3 8C0D     		.2byte	0xd8c
 6981 09f5 C7000000 		.4byte	0xc7
 6982 09f9 1B       		.uleb128 0x1b
 6983 09fa 06000000 		.4byte	.LASF60
 6984 09fe 01       		.byte	0x1
 6985 09ff 8C0D     		.2byte	0xd8c
 6986 0a01 68020000 		.4byte	0x268
 6987 0a05 1B       		.uleb128 0x1b
 6988 0a06 97030000 		.4byte	.LASF117
 6989 0a0a 01       		.byte	0x1
 6990 0a0b 8D0D     		.2byte	0xd8d
 6991 0a0d C7000000 		.4byte	0xc7
 6992 0a11 1B       		.uleb128 0x1b
 6993 0a12 4A070000 		.4byte	.LASF118
 6994 0a16 01       		.byte	0x1
 6995 0a17 8D0D     		.2byte	0xd8d
 6996 0a19 C7000000 		.4byte	0xc7
 6997 0a1d 00       		.byte	0
 6998 0a1e 1C       		.uleb128 0x1c
 6999 0a1f 03070000 		.4byte	.LASF122
 7000 0a23 01       		.byte	0x1
 7001 0a24 6E0D     		.2byte	0xd6e
 7002 0a26 01       		.byte	0x1
 7003 0a27 960F0000 		.4byte	.LFB115
 7004 0a2b C40F0000 		.4byte	.LFE115
 7005 0a2f 02       		.byte	0x2
 7006 0a30 7D       		.byte	0x7d
 7007 0a31 00       		.sleb128 0
 7008 0a32 01       		.byte	0x1
 7009 0a33 5A0A0000 		.4byte	0xa5a
 7010 0a37 20       		.uleb128 0x20
 7011 0a38 5D020000 		.4byte	.LASF110
 7012 0a3c 01       		.byte	0x1
 7013 0a3d 6E0D     		.2byte	0xd6e
 7014 0a3f 52060000 		.4byte	0x652
 7015 0a43 A7020000 		.4byte	.LLST119
 7016 0a47 29       		.uleb128 0x29
 7017 0a48 C20F0000 		.4byte	.LVL226
 7018 0a4c 01       		.byte	0x1
 7019 0a4d 39070000 		.4byte	0x739
 7020 0a51 25       		.uleb128 0x25
 7021 0a52 01       		.byte	0x1
 7022 0a53 50       		.byte	0x50
 7023 0a54 03       		.byte	0x3
 7024 0a55 F3       		.byte	0xf3
 7025 0a56 01       		.uleb128 0x1
 7026 0a57 50       		.byte	0x50
 7027 0a58 00       		.byte	0
 7028 0a59 00       		.byte	0
 7029 0a5a 2A       		.uleb128 0x2a
 7030 0a5b 24030000 		.4byte	.LASF123
 7031 0a5f 01       		.byte	0x1
 7032 0a60 550D     		.2byte	0xd55
 7033 0a62 01       		.byte	0x1
 7034 0a63 01       		.byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 212


 7035 0a64 750A0000 		.4byte	0xa75
 7036 0a68 1B       		.uleb128 0x1b
 7037 0a69 5D020000 		.4byte	.LASF110
 7038 0a6d 01       		.byte	0x1
 7039 0a6e 550D     		.2byte	0xd55
 7040 0a70 52060000 		.4byte	0x652
 7041 0a74 00       		.byte	0
 7042 0a75 2A       		.uleb128 0x2a
 7043 0a76 2A080000 		.4byte	.LASF124
 7044 0a7a 01       		.byte	0x1
 7045 0a7b 2D0D     		.2byte	0xd2d
 7046 0a7d 01       		.byte	0x1
 7047 0a7e 01       		.byte	0x1
 7048 0a7f 900A0000 		.4byte	0xa90
 7049 0a83 1B       		.uleb128 0x1b
 7050 0a84 5D020000 		.4byte	.LASF110
 7051 0a88 01       		.byte	0x1
 7052 0a89 2D0D     		.2byte	0xd2d
 7053 0a8b 52060000 		.4byte	0x652
 7054 0a8f 00       		.byte	0
 7055 0a90 1C       		.uleb128 0x1c
 7056 0a91 350A0000 		.4byte	.LASF125
 7057 0a95 01       		.byte	0x1
 7058 0a96 1B0D     		.2byte	0xd1b
 7059 0a98 01       		.byte	0x1
 7060 0a99 70120000 		.4byte	.LFB112
 7061 0a9d 7E120000 		.4byte	.LFE112
 7062 0aa1 02       		.byte	0x2
 7063 0aa2 7D       		.byte	0x7d
 7064 0aa3 00       		.sleb128 0
 7065 0aa4 01       		.byte	0x1
 7066 0aa5 CC0A0000 		.4byte	0xacc
 7067 0aa9 20       		.uleb128 0x20
 7068 0aaa 5D020000 		.4byte	.LASF110
 7069 0aae 01       		.byte	0x1
 7070 0aaf 1B0D     		.2byte	0xd1b
 7071 0ab1 52060000 		.4byte	0x652
 7072 0ab5 D3020000 		.4byte	.LLST140
 7073 0ab9 29       		.uleb128 0x29
 7074 0aba 7E120000 		.4byte	.LVL270
 7075 0abe 01       		.byte	0x1
 7076 0abf E0070000 		.4byte	0x7e0
 7077 0ac3 25       		.uleb128 0x25
 7078 0ac4 01       		.byte	0x1
 7079 0ac5 50       		.byte	0x50
 7080 0ac6 03       		.byte	0x3
 7081 0ac7 F3       		.byte	0xf3
 7082 0ac8 01       		.uleb128 0x1
 7083 0ac9 50       		.byte	0x50
 7084 0aca 00       		.byte	0
 7085 0acb 00       		.byte	0
 7086 0acc 2A       		.uleb128 0x2a
 7087 0acd B7060000 		.4byte	.LASF126
 7088 0ad1 01       		.byte	0x1
 7089 0ad2 F20C     		.2byte	0xcf2
 7090 0ad4 01       		.byte	0x1
 7091 0ad5 01       		.byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 213


 7092 0ad6 E70A0000 		.4byte	0xae7
 7093 0ada 1B       		.uleb128 0x1b
 7094 0adb 5D020000 		.4byte	.LASF110
 7095 0adf 01       		.byte	0x1
 7096 0ae0 F20C     		.2byte	0xcf2
 7097 0ae2 52060000 		.4byte	0x652
 7098 0ae6 00       		.byte	0
 7099 0ae7 1C       		.uleb128 0x1c
 7100 0ae8 190A0000 		.4byte	.LASF127
 7101 0aec 01       		.byte	0x1
 7102 0aed E30C     		.2byte	0xce3
 7103 0aef 01       		.byte	0x1
 7104 0af0 14120000 		.4byte	.LFB110
 7105 0af4 1A120000 		.4byte	.LFE110
 7106 0af8 02       		.byte	0x2
 7107 0af9 7D       		.byte	0x7d
 7108 0afa 00       		.sleb128 0
 7109 0afb 01       		.byte	0x1
 7110 0afc 230B0000 		.4byte	0xb23
 7111 0b00 20       		.uleb128 0x20
 7112 0b01 5D020000 		.4byte	.LASF110
 7113 0b05 01       		.byte	0x1
 7114 0b06 E30C     		.2byte	0xce3
 7115 0b08 52060000 		.4byte	0x652
 7116 0b0c F4020000 		.4byte	.LLST137
 7117 0b10 29       		.uleb128 0x29
 7118 0b11 1A120000 		.4byte	.LVL265
 7119 0b15 01       		.byte	0x1
 7120 0b16 E0070000 		.4byte	0x7e0
 7121 0b1a 25       		.uleb128 0x25
 7122 0b1b 01       		.byte	0x1
 7123 0b1c 50       		.byte	0x50
 7124 0b1d 03       		.byte	0x3
 7125 0b1e F3       		.byte	0xf3
 7126 0b1f 01       		.uleb128 0x1
 7127 0b20 50       		.byte	0x50
 7128 0b21 00       		.byte	0
 7129 0b22 00       		.byte	0
 7130 0b23 1E       		.uleb128 0x1e
 7131 0b24 88000000 		.4byte	.LASF128
 7132 0b28 01       		.byte	0x1
 7133 0b29 BD0C     		.2byte	0xcbd
 7134 0b2b 01       		.byte	0x1
 7135 0b2c E2130000 		.4byte	.LFB109
 7136 0b30 2E140000 		.4byte	.LFE109
 7137 0b34 15030000 		.4byte	.LLST149
 7138 0b38 01       		.byte	0x1
 7139 0b39 580B0000 		.4byte	0xb58
 7140 0b3d 20       		.uleb128 0x20
 7141 0b3e 5D020000 		.4byte	.LASF110
 7142 0b42 01       		.byte	0x1
 7143 0b43 BD0C     		.2byte	0xcbd
 7144 0b45 52060000 		.4byte	0x652
 7145 0b49 59030000 		.4byte	.LLST150
 7146 0b4d 2B       		.uleb128 0x2b
 7147 0b4e 2E140000 		.4byte	.LVL293
 7148 0b52 01       		.byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 214


 7149 0b53 64080000 		.4byte	0x864
 7150 0b57 00       		.byte	0
 7151 0b58 1C       		.uleb128 0x1c
 7152 0b59 6C050000 		.4byte	.LASF129
 7153 0b5d 01       		.byte	0x1
 7154 0b5e AB0C     		.2byte	0xcab
 7155 0b60 01       		.byte	0x1
 7156 0b61 74140000 		.4byte	.LFB108
 7157 0b65 82140000 		.4byte	.LFE108
 7158 0b69 02       		.byte	0x2
 7159 0b6a 7D       		.byte	0x7d
 7160 0b6b 00       		.sleb128 0
 7161 0b6c 01       		.byte	0x1
 7162 0b6d 940B0000 		.4byte	0xb94
 7163 0b71 20       		.uleb128 0x20
 7164 0b72 5D020000 		.4byte	.LASF110
 7165 0b76 01       		.byte	0x1
 7166 0b77 AB0C     		.2byte	0xcab
 7167 0b79 52060000 		.4byte	0x652
 7168 0b7d 7A030000 		.4byte	.LLST153
 7169 0b81 29       		.uleb128 0x29
 7170 0b82 82140000 		.4byte	.LVL297
 7171 0b86 01       		.byte	0x1
 7172 0b87 64080000 		.4byte	0x864
 7173 0b8b 25       		.uleb128 0x25
 7174 0b8c 01       		.byte	0x1
 7175 0b8d 50       		.byte	0x50
 7176 0b8e 03       		.byte	0x3
 7177 0b8f F3       		.byte	0xf3
 7178 0b90 01       		.uleb128 0x1
 7179 0b91 50       		.byte	0x50
 7180 0b92 00       		.byte	0
 7181 0b93 00       		.byte	0
 7182 0b94 1E       		.uleb128 0x1e
 7183 0b95 A0010000 		.4byte	.LASF130
 7184 0b99 01       		.byte	0x1
 7185 0b9a 890C     		.2byte	0xc89
 7186 0b9c 01       		.byte	0x1
 7187 0b9d 2E140000 		.4byte	.LFB107
 7188 0ba1 74140000 		.4byte	.LFE107
 7189 0ba5 9B030000 		.4byte	.LLST151
 7190 0ba9 01       		.byte	0x1
 7191 0baa C90B0000 		.4byte	0xbc9
 7192 0bae 20       		.uleb128 0x20
 7193 0baf 5D020000 		.4byte	.LASF110
 7194 0bb3 01       		.byte	0x1
 7195 0bb4 890C     		.2byte	0xc89
 7196 0bb6 52060000 		.4byte	0x652
 7197 0bba DF030000 		.4byte	.LLST152
 7198 0bbe 2B       		.uleb128 0x2b
 7199 0bbf 6E140000 		.4byte	.LVL295
 7200 0bc3 01       		.byte	0x1
 7201 0bc4 64080000 		.4byte	0x864
 7202 0bc8 00       		.byte	0
 7203 0bc9 2A       		.uleb128 0x2a
 7204 0bca CB030000 		.4byte	.LASF131
 7205 0bce 01       		.byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 215


 7206 0bcf 650C     		.2byte	0xc65
 7207 0bd1 01       		.byte	0x1
 7208 0bd2 01       		.byte	0x1
 7209 0bd3 E40B0000 		.4byte	0xbe4
 7210 0bd7 1B       		.uleb128 0x1b
 7211 0bd8 5D020000 		.4byte	.LASF110
 7212 0bdc 01       		.byte	0x1
 7213 0bdd 650C     		.2byte	0xc65
 7214 0bdf 52060000 		.4byte	0x652
 7215 0be3 00       		.byte	0
 7216 0be4 1C       		.uleb128 0x1c
 7217 0be5 AD0A0000 		.4byte	.LASF132
 7218 0be9 01       		.byte	0x1
 7219 0bea 500C     		.2byte	0xc50
 7220 0bec 01       		.byte	0x1
 7221 0bed CC130000 		.4byte	.LFB105
 7222 0bf1 E2130000 		.4byte	.LFE105
 7223 0bf5 02       		.byte	0x2
 7224 0bf6 7D       		.byte	0x7d
 7225 0bf7 00       		.sleb128 0
 7226 0bf8 01       		.byte	0x1
 7227 0bf9 200C0000 		.4byte	0xc20
 7228 0bfd 20       		.uleb128 0x20
 7229 0bfe 5D020000 		.4byte	.LASF110
 7230 0c02 01       		.byte	0x1
 7231 0c03 500C     		.2byte	0xc50
 7232 0c05 52060000 		.4byte	0x652
 7233 0c09 00040000 		.4byte	.LLST148
 7234 0c0d 29       		.uleb128 0x29
 7235 0c0e E0130000 		.4byte	.LVL291
 7236 0c12 01       		.byte	0x1
 7237 0c13 64080000 		.4byte	0x864
 7238 0c17 25       		.uleb128 0x25
 7239 0c18 01       		.byte	0x1
 7240 0c19 50       		.byte	0x50
 7241 0c1a 03       		.byte	0x3
 7242 0c1b F3       		.byte	0xf3
 7243 0c1c 01       		.uleb128 0x1
 7244 0c1d 50       		.byte	0x50
 7245 0c1e 00       		.byte	0
 7246 0c1f 00       		.byte	0
 7247 0c20 2A       		.uleb128 0x2a
 7248 0c21 72020000 		.4byte	.LASF133
 7249 0c25 01       		.byte	0x1
 7250 0c26 2D0C     		.2byte	0xc2d
 7251 0c28 01       		.byte	0x1
 7252 0c29 01       		.byte	0x1
 7253 0c2a 3B0C0000 		.4byte	0xc3b
 7254 0c2e 1B       		.uleb128 0x1b
 7255 0c2f 5D020000 		.4byte	.LASF110
 7256 0c33 01       		.byte	0x1
 7257 0c34 2D0C     		.2byte	0xc2d
 7258 0c36 52060000 		.4byte	0x652
 7259 0c3a 00       		.byte	0
 7260 0c3b 1E       		.uleb128 0x1e
 7261 0c3c 40030000 		.4byte	.LASF134
 7262 0c40 01       		.byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 216


 7263 0c41 F30B     		.2byte	0xbf3
 7264 0c43 01       		.byte	0x1
 7265 0c44 E4160000 		.4byte	.LFB103
 7266 0c48 4C170000 		.4byte	.LFE103
 7267 0c4c 2C040000 		.4byte	.LLST164
 7268 0c50 01       		.byte	0x1
 7269 0c51 C40C0000 		.4byte	0xcc4
 7270 0c55 20       		.uleb128 0x20
 7271 0c56 0D060000 		.4byte	.LASF135
 7272 0c5a 01       		.byte	0x1
 7273 0c5b F30B     		.2byte	0xbf3
 7274 0c5d 5A040000 		.4byte	0x45a
 7275 0c61 58040000 		.4byte	.LLST165
 7276 0c65 1F       		.uleb128 0x1f
 7277 0c66 5D020000 		.4byte	.LASF110
 7278 0c6a 01       		.byte	0x1
 7279 0c6b F50B     		.2byte	0xbf5
 7280 0c6d D3060000 		.4byte	0x6d3
 7281 0c71 01       		.byte	0x1
 7282 0c72 54       		.byte	0x54
 7283 0c73 22       		.uleb128 0x22
 7284 0c74 30170000 		.4byte	.LBB75
 7285 0c78 3E170000 		.4byte	.LBE75
 7286 0c7c 900C0000 		.4byte	0xc90
 7287 0c80 1F       		.uleb128 0x1f
 7288 0c81 810B0000 		.4byte	.LASF114
 7289 0c85 01       		.byte	0x1
 7290 0c86 1A0C     		.2byte	0xc1a
 7291 0c88 D2000000 		.4byte	0xd2
 7292 0c8c 02       		.byte	0x2
 7293 0c8d 91       		.byte	0x91
 7294 0c8e 74       		.sleb128 -12
 7295 0c8f 00       		.byte	0
 7296 0c90 23       		.uleb128 0x23
 7297 0c91 04170000 		.4byte	.LVL332
 7298 0c95 2E200000 		.4byte	0x202e
 7299 0c99 24       		.uleb128 0x24
 7300 0c9a 0E170000 		.4byte	.LVL333
 7301 0c9e 1F090000 		.4byte	0x91f
 7302 0ca2 B30C0000 		.4byte	0xcb3
 7303 0ca6 25       		.uleb128 0x25
 7304 0ca7 01       		.byte	0x1
 7305 0ca8 50       		.byte	0x50
 7306 0ca9 02       		.byte	0x2
 7307 0caa 74       		.byte	0x74
 7308 0cab 00       		.sleb128 0
 7309 0cac 25       		.uleb128 0x25
 7310 0cad 01       		.byte	0x1
 7311 0cae 51       		.byte	0x51
 7312 0caf 02       		.byte	0x2
 7313 0cb0 08       		.byte	0x8
 7314 0cb1 64       		.byte	0x64
 7315 0cb2 00       		.byte	0
 7316 0cb3 26       		.uleb128 0x26
 7317 0cb4 48170000 		.4byte	.LVL334
 7318 0cb8 15110000 		.4byte	0x1115
 7319 0cbc 25       		.uleb128 0x25
ARM GAS  /tmp/ccdPJtdr.s 			page 217


 7320 0cbd 01       		.byte	0x1
 7321 0cbe 50       		.byte	0x50
 7322 0cbf 02       		.byte	0x2
 7323 0cc0 74       		.byte	0x74
 7324 0cc1 00       		.sleb128 0
 7325 0cc2 00       		.byte	0
 7326 0cc3 00       		.byte	0
 7327 0cc4 1E       		.uleb128 0x1e
 7328 0cc5 700A0000 		.4byte	.LASF136
 7329 0cc9 01       		.byte	0x1
 7330 0cca B30B     		.2byte	0xbb3
 7331 0ccc 01       		.byte	0x1
 7332 0ccd 4C170000 		.4byte	.LFB102
 7333 0cd1 C4170000 		.4byte	.LFE102
 7334 0cd5 79040000 		.4byte	.LLST166
 7335 0cd9 01       		.byte	0x1
 7336 0cda 340D0000 		.4byte	0xd34
 7337 0cde 20       		.uleb128 0x20
 7338 0cdf 0D060000 		.4byte	.LASF135
 7339 0ce3 01       		.byte	0x1
 7340 0ce4 B30B     		.2byte	0xbb3
 7341 0ce6 5A040000 		.4byte	0x45a
 7342 0cea B1040000 		.4byte	.LLST167
 7343 0cee 21       		.uleb128 0x21
 7344 0cef 5D020000 		.4byte	.LASF110
 7345 0cf3 01       		.byte	0x1
 7346 0cf4 B50B     		.2byte	0xbb5
 7347 0cf6 D3060000 		.4byte	0x6d3
 7348 0cfa D2040000 		.4byte	.LLST168
 7349 0cfe 1F       		.uleb128 0x1f
 7350 0cff 00000000 		.4byte	.LASF112
 7351 0d03 01       		.byte	0x1
 7352 0d04 B60B     		.2byte	0xbb6
 7353 0d06 D2000000 		.4byte	0xd2
 7354 0d0a 02       		.byte	0x2
 7355 0d0b 91       		.byte	0x91
 7356 0d0c 70       		.sleb128 -16
 7357 0d0d 22       		.uleb128 0x22
 7358 0d0e 94170000 		.4byte	.LBB76
 7359 0d12 A0170000 		.4byte	.LBE76
 7360 0d16 2A0D0000 		.4byte	0xd2a
 7361 0d1a 1F       		.uleb128 0x1f
 7362 0d1b 810B0000 		.4byte	.LASF114
 7363 0d1f 01       		.byte	0x1
 7364 0d20 DE0B     		.2byte	0xbde
 7365 0d22 D2000000 		.4byte	0xd2
 7366 0d26 02       		.byte	0x2
 7367 0d27 91       		.byte	0x91
 7368 0d28 74       		.sleb128 -12
 7369 0d29 00       		.byte	0
 7370 0d2a 23       		.uleb128 0x23
 7371 0d2b AA170000 		.4byte	.LVL337
 7372 0d2f 15110000 		.4byte	0x1115
 7373 0d33 00       		.byte	0
 7374 0d34 1E       		.uleb128 0x1e
 7375 0d35 C80B0000 		.4byte	.LASF137
 7376 0d39 01       		.byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 218


 7377 0d3a 9D0B     		.2byte	0xb9d
 7378 0d3c 01       		.byte	0x1
 7379 0d3d 34110000 		.4byte	.LFB101
 7380 0d41 44110000 		.4byte	.LFE101
 7381 0d45 F0040000 		.4byte	.LLST130
 7382 0d49 01       		.byte	0x1
 7383 0d4a 780D0000 		.4byte	0xd78
 7384 0d4e 20       		.uleb128 0x20
 7385 0d4f 0D060000 		.4byte	.LASF135
 7386 0d53 01       		.byte	0x1
 7387 0d54 9D0B     		.2byte	0xb9d
 7388 0d56 5A040000 		.4byte	0x45a
 7389 0d5a 10050000 		.4byte	.LLST131
 7390 0d5e 21       		.uleb128 0x21
 7391 0d5f 5D020000 		.4byte	.LASF110
 7392 0d63 01       		.byte	0x1
 7393 0d64 9F0B     		.2byte	0xb9f
 7394 0d66 D3060000 		.4byte	0x6d3
 7395 0d6a 31050000 		.4byte	.LLST132
 7396 0d6e 23       		.uleb128 0x23
 7397 0d6f 42110000 		.4byte	.LVL253
 7398 0d73 31110000 		.4byte	0x1131
 7399 0d77 00       		.byte	0
 7400 0d78 1E       		.uleb128 0x1e
 7401 0d79 50020000 		.4byte	.LASF138
 7402 0d7d 01       		.byte	0x1
 7403 0d7e 860B     		.2byte	0xb86
 7404 0d80 01       		.byte	0x1
 7405 0d81 C40F0000 		.4byte	.LFB100
 7406 0d85 E60F0000 		.4byte	.LFE100
 7407 0d89 44050000 		.4byte	.LLST120
 7408 0d8d 01       		.byte	0x1
 7409 0d8e BC0D0000 		.4byte	0xdbc
 7410 0d92 20       		.uleb128 0x20
 7411 0d93 0D060000 		.4byte	.LASF135
 7412 0d97 01       		.byte	0x1
 7413 0d98 860B     		.2byte	0xb86
 7414 0d9a 5A040000 		.4byte	0x45a
 7415 0d9e 64050000 		.4byte	.LLST121
 7416 0da2 21       		.uleb128 0x21
 7417 0da3 5D020000 		.4byte	.LASF110
 7418 0da7 01       		.byte	0x1
 7419 0da8 880B     		.2byte	0xb88
 7420 0daa D3060000 		.4byte	0x6d3
 7421 0dae 85050000 		.4byte	.LLST122
 7422 0db2 23       		.uleb128 0x23
 7423 0db3 E40F0000 		.4byte	.LVL229
 7424 0db7 31110000 		.4byte	0x1131
 7425 0dbb 00       		.byte	0
 7426 0dbc 1E       		.uleb128 0x1e
 7427 0dbd 81010000 		.4byte	.LASF139
 7428 0dc1 01       		.byte	0x1
 7429 0dc2 740B     		.2byte	0xb74
 7430 0dc4 01       		.byte	0x1
 7431 0dc5 D60E0000 		.4byte	.LFB99
 7432 0dc9 E00E0000 		.4byte	.LFE99
 7433 0dcd 98050000 		.4byte	.LLST111
ARM GAS  /tmp/ccdPJtdr.s 			page 219


 7434 0dd1 01       		.byte	0x1
 7435 0dd2 000E0000 		.4byte	0xe00
 7436 0dd6 20       		.uleb128 0x20
 7437 0dd7 0D060000 		.4byte	.LASF135
 7438 0ddb 01       		.byte	0x1
 7439 0ddc 740B     		.2byte	0xb74
 7440 0dde 5A040000 		.4byte	0x45a
 7441 0de2 B8050000 		.4byte	.LLST112
 7442 0de6 21       		.uleb128 0x21
 7443 0de7 5D020000 		.4byte	.LASF110
 7444 0deb 01       		.byte	0x1
 7445 0dec 760B     		.2byte	0xb76
 7446 0dee D3060000 		.4byte	0x6d3
 7447 0df2 D9050000 		.4byte	.LLST113
 7448 0df6 23       		.uleb128 0x23
 7449 0df7 DE0E0000 		.4byte	.LVL211
 7450 0dfb 4C110000 		.4byte	0x114c
 7451 0dff 00       		.byte	0
 7452 0e00 1E       		.uleb128 0x1e
 7453 0e01 53010000 		.4byte	.LASF140
 7454 0e05 01       		.byte	0x1
 7455 0e06 620B     		.2byte	0xb62
 7456 0e08 01       		.byte	0x1
 7457 0e09 CA0E0000 		.4byte	.LFB98
 7458 0e0d D40E0000 		.4byte	.LFE98
 7459 0e11 FC050000 		.4byte	.LLST108
 7460 0e15 01       		.byte	0x1
 7461 0e16 440E0000 		.4byte	0xe44
 7462 0e1a 20       		.uleb128 0x20
 7463 0e1b 0D060000 		.4byte	.LASF135
 7464 0e1f 01       		.byte	0x1
 7465 0e20 620B     		.2byte	0xb62
 7466 0e22 5A040000 		.4byte	0x45a
 7467 0e26 1C060000 		.4byte	.LLST109
 7468 0e2a 21       		.uleb128 0x21
 7469 0e2b 5D020000 		.4byte	.LASF110
 7470 0e2f 01       		.byte	0x1
 7471 0e30 640B     		.2byte	0xb64
 7472 0e32 D3060000 		.4byte	0x6d3
 7473 0e36 3D060000 		.4byte	.LLST110
 7474 0e3a 23       		.uleb128 0x23
 7475 0e3b D20E0000 		.4byte	.LVL208
 7476 0e3f 67110000 		.4byte	0x1167
 7477 0e43 00       		.byte	0
 7478 0e44 1E       		.uleb128 0x1e
 7479 0e45 B8000000 		.4byte	.LASF141
 7480 0e49 01       		.byte	0x1
 7481 0e4a 500B     		.2byte	0xb50
 7482 0e4c 01       		.byte	0x1
 7483 0e4d BE0E0000 		.4byte	.LFB97
 7484 0e51 C80E0000 		.4byte	.LFE97
 7485 0e55 60060000 		.4byte	.LLST105
 7486 0e59 01       		.byte	0x1
 7487 0e5a 880E0000 		.4byte	0xe88
 7488 0e5e 20       		.uleb128 0x20
 7489 0e5f 0D060000 		.4byte	.LASF135
 7490 0e63 01       		.byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 220


 7491 0e64 500B     		.2byte	0xb50
 7492 0e66 5A040000 		.4byte	0x45a
 7493 0e6a 80060000 		.4byte	.LLST106
 7494 0e6e 21       		.uleb128 0x21
 7495 0e6f 5D020000 		.4byte	.LASF110
 7496 0e73 01       		.byte	0x1
 7497 0e74 520B     		.2byte	0xb52
 7498 0e76 D3060000 		.4byte	0x6d3
 7499 0e7a A1060000 		.4byte	.LLST107
 7500 0e7e 23       		.uleb128 0x23
 7501 0e7f C60E0000 		.4byte	.LVL205
 7502 0e83 82110000 		.4byte	0x1182
 7503 0e87 00       		.byte	0
 7504 0e88 1E       		.uleb128 0x1e
 7505 0e89 6C070000 		.4byte	.LASF142
 7506 0e8d 01       		.byte	0x1
 7507 0e8e FB0A     		.2byte	0xafb
 7508 0e90 01       		.byte	0x1
 7509 0e91 1E150000 		.4byte	.LFB96
 7510 0e95 BE150000 		.4byte	.LFE96
 7511 0e99 C4060000 		.4byte	.LLST157
 7512 0e9d 01       		.byte	0x1
 7513 0e9e 490F0000 		.4byte	0xf49
 7514 0ea2 20       		.uleb128 0x20
 7515 0ea3 0D060000 		.4byte	.LASF135
 7516 0ea7 01       		.byte	0x1
 7517 0ea8 FB0A     		.2byte	0xafb
 7518 0eaa 5A040000 		.4byte	0x45a
 7519 0eae FC060000 		.4byte	.LLST158
 7520 0eb2 1F       		.uleb128 0x1f
 7521 0eb3 5D020000 		.4byte	.LASF110
 7522 0eb7 01       		.byte	0x1
 7523 0eb8 FD0A     		.2byte	0xafd
 7524 0eba D3060000 		.4byte	0x6d3
 7525 0ebe 01       		.byte	0x1
 7526 0ebf 54       		.byte	0x54
 7527 0ec0 21       		.uleb128 0x21
 7528 0ec1 19080000 		.4byte	.LASF113
 7529 0ec5 01       		.byte	0x1
 7530 0ec6 FE0A     		.2byte	0xafe
 7531 0ec8 C7000000 		.4byte	0xc7
 7532 0ecc 1A070000 		.4byte	.LLST159
 7533 0ed0 23       		.uleb128 0x23
 7534 0ed1 28150000 		.4byte	.LVL310
 7535 0ed5 2E200000 		.4byte	0x202e
 7536 0ed9 24       		.uleb128 0x24
 7537 0eda 52150000 		.4byte	.LVL313
 7538 0ede CF090000 		.4byte	0x9cf
 7539 0ee2 040F0000 		.4byte	0xf04
 7540 0ee6 25       		.uleb128 0x25
 7541 0ee7 01       		.byte	0x1
 7542 0ee8 50       		.byte	0x50
 7543 0ee9 02       		.byte	0x2
 7544 0eea 74       		.byte	0x74
 7545 0eeb 00       		.sleb128 0
 7546 0eec 25       		.uleb128 0x25
 7547 0eed 01       		.byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 221


 7548 0eee 51       		.byte	0x51
 7549 0eef 01       		.byte	0x1
 7550 0ef0 31       		.byte	0x31
 7551 0ef1 25       		.uleb128 0x25
 7552 0ef2 01       		.byte	0x1
 7553 0ef3 52       		.byte	0x52
 7554 0ef4 01       		.byte	0x1
 7555 0ef5 31       		.byte	0x31
 7556 0ef6 25       		.uleb128 0x25
 7557 0ef7 01       		.byte	0x1
 7558 0ef8 53       		.byte	0x53
 7559 0ef9 02       		.byte	0x2
 7560 0efa 08       		.byte	0x8
 7561 0efb 64       		.byte	0x64
 7562 0efc 25       		.uleb128 0x25
 7563 0efd 02       		.byte	0x2
 7564 0efe 7D       		.byte	0x7d
 7565 0eff 00       		.sleb128 0
 7566 0f00 02       		.byte	0x2
 7567 0f01 75       		.byte	0x75
 7568 0f02 00       		.sleb128 0
 7569 0f03 00       		.byte	0
 7570 0f04 24       		.uleb128 0x24
 7571 0f05 6A150000 		.4byte	.LVL314
 7572 0f09 1F090000 		.4byte	0x91f
 7573 0f0d 240F0000 		.4byte	0xf24
 7574 0f11 25       		.uleb128 0x25
 7575 0f12 01       		.byte	0x1
 7576 0f13 50       		.byte	0x50
 7577 0f14 02       		.byte	0x2
 7578 0f15 74       		.byte	0x74
 7579 0f16 00       		.sleb128 0
 7580 0f17 25       		.uleb128 0x25
 7581 0f18 01       		.byte	0x1
 7582 0f19 51       		.byte	0x51
 7583 0f1a 02       		.byte	0x2
 7584 0f1b 08       		.byte	0x8
 7585 0f1c 64       		.byte	0x64
 7586 0f1d 25       		.uleb128 0x25
 7587 0f1e 01       		.byte	0x1
 7588 0f1f 52       		.byte	0x52
 7589 0f20 02       		.byte	0x2
 7590 0f21 75       		.byte	0x75
 7591 0f22 00       		.sleb128 0
 7592 0f23 00       		.byte	0
 7593 0f24 24       		.uleb128 0x24
 7594 0f25 B2150000 		.4byte	.LVL315
 7595 0f29 31110000 		.4byte	0x1131
 7596 0f2d 380F0000 		.4byte	0xf38
 7597 0f31 25       		.uleb128 0x25
 7598 0f32 01       		.byte	0x1
 7599 0f33 50       		.byte	0x50
 7600 0f34 02       		.byte	0x2
 7601 0f35 74       		.byte	0x74
 7602 0f36 00       		.sleb128 0
 7603 0f37 00       		.byte	0
 7604 0f38 26       		.uleb128 0x26
ARM GAS  /tmp/ccdPJtdr.s 			page 222


 7605 0f39 BC150000 		.4byte	.LVL317
 7606 0f3d 9D110000 		.4byte	0x119d
 7607 0f41 25       		.uleb128 0x25
 7608 0f42 01       		.byte	0x1
 7609 0f43 50       		.byte	0x50
 7610 0f44 02       		.byte	0x2
 7611 0f45 74       		.byte	0x74
 7612 0f46 00       		.sleb128 0
 7613 0f47 00       		.byte	0
 7614 0f48 00       		.byte	0
 7615 0f49 1E       		.uleb128 0x1e
 7616 0f4a B1030000 		.4byte	.LASF143
 7617 0f4e 01       		.byte	0x1
 7618 0f4f A60A     		.2byte	0xaa6
 7619 0f51 01       		.byte	0x1
 7620 0f52 82140000 		.4byte	.LFB95
 7621 0f56 1E150000 		.4byte	.LFE95
 7622 0f5a 38070000 		.4byte	.LLST154
 7623 0f5e 01       		.byte	0x1
 7624 0f5f 0A100000 		.4byte	0x100a
 7625 0f63 20       		.uleb128 0x20
 7626 0f64 0D060000 		.4byte	.LASF135
 7627 0f68 01       		.byte	0x1
 7628 0f69 A60A     		.2byte	0xaa6
 7629 0f6b 5A040000 		.4byte	0x45a
 7630 0f6f 70070000 		.4byte	.LLST155
 7631 0f73 1F       		.uleb128 0x1f
 7632 0f74 5D020000 		.4byte	.LASF110
 7633 0f78 01       		.byte	0x1
 7634 0f79 A80A     		.2byte	0xaa8
 7635 0f7b D3060000 		.4byte	0x6d3
 7636 0f7f 01       		.byte	0x1
 7637 0f80 54       		.byte	0x54
 7638 0f81 21       		.uleb128 0x21
 7639 0f82 19080000 		.4byte	.LASF113
 7640 0f86 01       		.byte	0x1
 7641 0f87 A90A     		.2byte	0xaa9
 7642 0f89 C7000000 		.4byte	0xc7
 7643 0f8d 8E070000 		.4byte	.LLST156
 7644 0f91 23       		.uleb128 0x23
 7645 0f92 8C140000 		.4byte	.LVL300
 7646 0f96 2E200000 		.4byte	0x202e
 7647 0f9a 24       		.uleb128 0x24
 7648 0f9b B6140000 		.4byte	.LVL303
 7649 0f9f CF090000 		.4byte	0x9cf
 7650 0fa3 C50F0000 		.4byte	0xfc5
 7651 0fa7 25       		.uleb128 0x25
 7652 0fa8 01       		.byte	0x1
 7653 0fa9 50       		.byte	0x50
 7654 0faa 02       		.byte	0x2
 7655 0fab 74       		.byte	0x74
 7656 0fac 00       		.sleb128 0
 7657 0fad 25       		.uleb128 0x25
 7658 0fae 01       		.byte	0x1
 7659 0faf 51       		.byte	0x51
 7660 0fb0 01       		.byte	0x1
 7661 0fb1 31       		.byte	0x31
ARM GAS  /tmp/ccdPJtdr.s 			page 223


 7662 0fb2 25       		.uleb128 0x25
 7663 0fb3 01       		.byte	0x1
 7664 0fb4 52       		.byte	0x52
 7665 0fb5 01       		.byte	0x1
 7666 0fb6 31       		.byte	0x31
 7667 0fb7 25       		.uleb128 0x25
 7668 0fb8 01       		.byte	0x1
 7669 0fb9 53       		.byte	0x53
 7670 0fba 02       		.byte	0x2
 7671 0fbb 08       		.byte	0x8
 7672 0fbc 64       		.byte	0x64
 7673 0fbd 25       		.uleb128 0x25
 7674 0fbe 02       		.byte	0x2
 7675 0fbf 7D       		.byte	0x7d
 7676 0fc0 00       		.sleb128 0
 7677 0fc1 02       		.byte	0x2
 7678 0fc2 75       		.byte	0x75
 7679 0fc3 00       		.sleb128 0
 7680 0fc4 00       		.byte	0
 7681 0fc5 24       		.uleb128 0x24
 7682 0fc6 D8140000 		.4byte	.LVL304
 7683 0fca 98090000 		.4byte	0x998
 7684 0fce E50F0000 		.4byte	0xfe5
 7685 0fd2 25       		.uleb128 0x25
 7686 0fd3 01       		.byte	0x1
 7687 0fd4 50       		.byte	0x50
 7688 0fd5 02       		.byte	0x2
 7689 0fd6 74       		.byte	0x74
 7690 0fd7 00       		.sleb128 0
 7691 0fd8 25       		.uleb128 0x25
 7692 0fd9 01       		.byte	0x1
 7693 0fda 51       		.byte	0x51
 7694 0fdb 02       		.byte	0x2
 7695 0fdc 08       		.byte	0x8
 7696 0fdd 64       		.byte	0x64
 7697 0fde 25       		.uleb128 0x25
 7698 0fdf 01       		.byte	0x1
 7699 0fe0 52       		.byte	0x52
 7700 0fe1 02       		.byte	0x2
 7701 0fe2 75       		.byte	0x75
 7702 0fe3 00       		.sleb128 0
 7703 0fe4 00       		.byte	0
 7704 0fe5 24       		.uleb128 0x24
 7705 0fe6 12150000 		.4byte	.LVL305
 7706 0fea 31110000 		.4byte	0x1131
 7707 0fee F90F0000 		.4byte	0xff9
 7708 0ff2 25       		.uleb128 0x25
 7709 0ff3 01       		.byte	0x1
 7710 0ff4 50       		.byte	0x50
 7711 0ff5 02       		.byte	0x2
 7712 0ff6 74       		.byte	0x74
 7713 0ff7 00       		.sleb128 0
 7714 0ff8 00       		.byte	0
 7715 0ff9 26       		.uleb128 0x26
 7716 0ffa 1C150000 		.4byte	.LVL307
 7717 0ffe B8110000 		.4byte	0x11b8
 7718 1002 25       		.uleb128 0x25
ARM GAS  /tmp/ccdPJtdr.s 			page 224


 7719 1003 01       		.byte	0x1
 7720 1004 50       		.byte	0x50
 7721 1005 02       		.byte	0x2
 7722 1006 74       		.byte	0x74
 7723 1007 00       		.sleb128 0
 7724 1008 00       		.byte	0
 7725 1009 00       		.byte	0
 7726 100a 1E       		.uleb128 0x1e
 7727 100b C9070000 		.4byte	.LASF144
 7728 100f 01       		.byte	0x1
 7729 1010 6D0A     		.2byte	0xa6d
 7730 1012 01       		.byte	0x1
 7731 1013 E60F0000 		.4byte	.LFB94
 7732 1017 50100000 		.4byte	.LFE94
 7733 101b AC070000 		.4byte	.LLST123
 7734 101f 01       		.byte	0x1
 7735 1020 B7100000 		.4byte	0x10b7
 7736 1024 20       		.uleb128 0x20
 7737 1025 0D060000 		.4byte	.LASF135
 7738 1029 01       		.byte	0x1
 7739 102a 6D0A     		.2byte	0xa6d
 7740 102c 5A040000 		.4byte	0x45a
 7741 1030 E4070000 		.4byte	.LLST124
 7742 1034 1F       		.uleb128 0x1f
 7743 1035 5D020000 		.4byte	.LASF110
 7744 1039 01       		.byte	0x1
 7745 103a 6F0A     		.2byte	0xa6f
 7746 103c D3060000 		.4byte	0x6d3
 7747 1040 01       		.byte	0x1
 7748 1041 54       		.byte	0x54
 7749 1042 21       		.uleb128 0x21
 7750 1043 19080000 		.4byte	.LASF113
 7751 1047 01       		.byte	0x1
 7752 1048 700A     		.2byte	0xa70
 7753 104a C7000000 		.4byte	0xc7
 7754 104e 02080000 		.4byte	.LLST125
 7755 1052 22       		.uleb128 0x22
 7756 1053 22100000 		.4byte	.LBB52
 7757 1057 30100000 		.4byte	.LBE52
 7758 105b 6F100000 		.4byte	0x106f
 7759 105f 1F       		.uleb128 0x1f
 7760 1060 810B0000 		.4byte	.LASF114
 7761 1064 01       		.byte	0x1
 7762 1065 870A     		.2byte	0xa87
 7763 1067 D2000000 		.4byte	0xd2
 7764 106b 02       		.byte	0x2
 7765 106c 91       		.byte	0x91
 7766 106d 6C       		.sleb128 -20
 7767 106e 00       		.byte	0
 7768 106f 23       		.uleb128 0x23
 7769 1070 F00F0000 		.4byte	.LVL232
 7770 1074 2E200000 		.4byte	0x202e
 7771 1078 24       		.uleb128 0x24
 7772 1079 14100000 		.4byte	.LVL235
 7773 107d 1F090000 		.4byte	0x91f
 7774 1081 92100000 		.4byte	0x1092
 7775 1085 25       		.uleb128 0x25
ARM GAS  /tmp/ccdPJtdr.s 			page 225


 7776 1086 01       		.byte	0x1
 7777 1087 50       		.byte	0x50
 7778 1088 02       		.byte	0x2
 7779 1089 74       		.byte	0x74
 7780 108a 00       		.sleb128 0
 7781 108b 25       		.uleb128 0x25
 7782 108c 01       		.byte	0x1
 7783 108d 51       		.byte	0x51
 7784 108e 02       		.byte	0x2
 7785 108f 08       		.byte	0x8
 7786 1090 64       		.byte	0x64
 7787 1091 00       		.byte	0
 7788 1092 24       		.uleb128 0x24
 7789 1093 44100000 		.4byte	.LVL236
 7790 1097 31110000 		.4byte	0x1131
 7791 109b A6100000 		.4byte	0x10a6
 7792 109f 25       		.uleb128 0x25
 7793 10a0 01       		.byte	0x1
 7794 10a1 50       		.byte	0x50
 7795 10a2 02       		.byte	0x2
 7796 10a3 74       		.byte	0x74
 7797 10a4 00       		.sleb128 0
 7798 10a5 00       		.byte	0
 7799 10a6 26       		.uleb128 0x26
 7800 10a7 4E100000 		.4byte	.LVL238
 7801 10ab D3110000 		.4byte	0x11d3
 7802 10af 25       		.uleb128 0x25
 7803 10b0 01       		.byte	0x1
 7804 10b1 50       		.byte	0x50
 7805 10b2 02       		.byte	0x2
 7806 10b3 74       		.byte	0x74
 7807 10b4 00       		.sleb128 0
 7808 10b5 00       		.byte	0
 7809 10b6 00       		.byte	0
 7810 10b7 2C       		.uleb128 0x2c
 7811 10b8 01       		.byte	0x1
 7812 10b9 BF090000 		.4byte	.LASF145
 7813 10bd 01       		.byte	0x1
 7814 10be 540A     		.2byte	0xa54
 7815 10c0 01       		.byte	0x1
 7816 10c1 C7000000 		.4byte	0xc7
 7817 10c5 CA170000 		.4byte	.LFB93
 7818 10c9 CE170000 		.4byte	.LFE93
 7819 10cd 02       		.byte	0x2
 7820 10ce 7D       		.byte	0x7d
 7821 10cf 00       		.sleb128 0
 7822 10d0 01       		.byte	0x1
 7823 10d1 E6100000 		.4byte	0x10e6
 7824 10d5 20       		.uleb128 0x20
 7825 10d6 5D020000 		.4byte	.LASF110
 7826 10da 01       		.byte	0x1
 7827 10db 540A     		.2byte	0xa54
 7828 10dd D3060000 		.4byte	0x6d3
 7829 10e1 20080000 		.4byte	.LLST170
 7830 10e5 00       		.byte	0
 7831 10e6 2C       		.uleb128 0x2c
 7832 10e7 01       		.byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 226


 7833 10e8 F4040000 		.4byte	.LASF146
 7834 10ec 01       		.byte	0x1
 7835 10ed 480A     		.2byte	0xa48
 7836 10ef 01       		.byte	0x1
 7837 10f0 51050000 		.4byte	0x551
 7838 10f4 C4170000 		.4byte	.LFB92
 7839 10f8 CA170000 		.4byte	.LFE92
 7840 10fc 02       		.byte	0x2
 7841 10fd 7D       		.byte	0x7d
 7842 10fe 00       		.sleb128 0
 7843 10ff 01       		.byte	0x1
 7844 1100 15110000 		.4byte	0x1115
 7845 1104 20       		.uleb128 0x20
 7846 1105 5D020000 		.4byte	.LASF110
 7847 1109 01       		.byte	0x1
 7848 110a 480A     		.2byte	0xa48
 7849 110c D3060000 		.4byte	0x6d3
 7850 1110 41080000 		.4byte	.LLST169
 7851 1114 00       		.byte	0
 7852 1115 2D       		.uleb128 0x2d
 7853 1116 01       		.byte	0x1
 7854 1117 1F050000 		.4byte	.LASF196
 7855 111b 01       		.byte	0x1
 7856 111c 250A     		.2byte	0xa25
 7857 111e 01       		.byte	0x1
 7858 111f 01       		.byte	0x1
 7859 1120 31110000 		.4byte	0x1131
 7860 1124 1B       		.uleb128 0x1b
 7861 1125 5D020000 		.4byte	.LASF110
 7862 1129 01       		.byte	0x1
 7863 112a 250A     		.2byte	0xa25
 7864 112c D3060000 		.4byte	0x6d3
 7865 1130 00       		.byte	0
 7866 1131 2E       		.uleb128 0x2e
 7867 1132 01       		.byte	0x1
 7868 1133 47060000 		.4byte	.LASF147
 7869 1137 01       		.byte	0x1
 7870 1138 130A     		.2byte	0xa13
 7871 113a 01       		.byte	0x1
 7872 113b 4C110000 		.4byte	0x114c
 7873 113f 1B       		.uleb128 0x1b
 7874 1140 5D020000 		.4byte	.LASF110
 7875 1144 01       		.byte	0x1
 7876 1145 130A     		.2byte	0xa13
 7877 1147 D3060000 		.4byte	0x6d3
 7878 114b 00       		.byte	0
 7879 114c 2E       		.uleb128 0x2e
 7880 114d 01       		.byte	0x1
 7881 114e 6C040000 		.4byte	.LASF148
 7882 1152 01       		.byte	0x1
 7883 1153 030A     		.2byte	0xa03
 7884 1155 01       		.byte	0x1
 7885 1156 67110000 		.4byte	0x1167
 7886 115a 1B       		.uleb128 0x1b
 7887 115b 5D020000 		.4byte	.LASF110
 7888 115f 01       		.byte	0x1
 7889 1160 030A     		.2byte	0xa03
ARM GAS  /tmp/ccdPJtdr.s 			page 227


 7890 1162 D3060000 		.4byte	0x6d3
 7891 1166 00       		.byte	0
 7892 1167 2E       		.uleb128 0x2e
 7893 1168 01       		.byte	0x1
 7894 1169 DC010000 		.4byte	.LASF149
 7895 116d 01       		.byte	0x1
 7896 116e F309     		.2byte	0x9f3
 7897 1170 01       		.byte	0x1
 7898 1171 82110000 		.4byte	0x1182
 7899 1175 1B       		.uleb128 0x1b
 7900 1176 5D020000 		.4byte	.LASF110
 7901 117a 01       		.byte	0x1
 7902 117b F309     		.2byte	0x9f3
 7903 117d D3060000 		.4byte	0x6d3
 7904 1181 00       		.byte	0
 7905 1182 2E       		.uleb128 0x2e
 7906 1183 01       		.byte	0x1
 7907 1184 13090000 		.4byte	.LASF150
 7908 1188 01       		.byte	0x1
 7909 1189 E309     		.2byte	0x9e3
 7910 118b 01       		.byte	0x1
 7911 118c 9D110000 		.4byte	0x119d
 7912 1190 1B       		.uleb128 0x1b
 7913 1191 5D020000 		.4byte	.LASF110
 7914 1195 01       		.byte	0x1
 7915 1196 E309     		.2byte	0x9e3
 7916 1198 D3060000 		.4byte	0x6d3
 7917 119c 00       		.byte	0
 7918 119d 2E       		.uleb128 0x2e
 7919 119e 01       		.byte	0x1
 7920 119f 92040000 		.4byte	.LASF151
 7921 11a3 01       		.byte	0x1
 7922 11a4 D309     		.2byte	0x9d3
 7923 11a6 01       		.byte	0x1
 7924 11a7 B8110000 		.4byte	0x11b8
 7925 11ab 1B       		.uleb128 0x1b
 7926 11ac 5D020000 		.4byte	.LASF110
 7927 11b0 01       		.byte	0x1
 7928 11b1 D309     		.2byte	0x9d3
 7929 11b3 D3060000 		.4byte	0x6d3
 7930 11b7 00       		.byte	0
 7931 11b8 2E       		.uleb128 0x2e
 7932 11b9 01       		.byte	0x1
 7933 11ba 1A010000 		.4byte	.LASF152
 7934 11be 01       		.byte	0x1
 7935 11bf C309     		.2byte	0x9c3
 7936 11c1 01       		.byte	0x1
 7937 11c2 D3110000 		.4byte	0x11d3
 7938 11c6 1B       		.uleb128 0x1b
 7939 11c7 5D020000 		.4byte	.LASF110
 7940 11cb 01       		.byte	0x1
 7941 11cc C309     		.2byte	0x9c3
 7942 11ce D3060000 		.4byte	0x6d3
 7943 11d2 00       		.byte	0
 7944 11d3 2E       		.uleb128 0x2e
 7945 11d4 01       		.byte	0x1
 7946 11d5 8D090000 		.4byte	.LASF153
ARM GAS  /tmp/ccdPJtdr.s 			page 228


 7947 11d9 01       		.byte	0x1
 7948 11da B309     		.2byte	0x9b3
 7949 11dc 01       		.byte	0x1
 7950 11dd EE110000 		.4byte	0x11ee
 7951 11e1 1B       		.uleb128 0x1b
 7952 11e2 5D020000 		.4byte	.LASF110
 7953 11e6 01       		.byte	0x1
 7954 11e7 B309     		.2byte	0x9b3
 7955 11e9 D3060000 		.4byte	0x6d3
 7956 11ed 00       		.byte	0
 7957 11ee 2F       		.uleb128 0x2f
 7958 11ef 01       		.byte	0x1
 7959 11f0 0C020000 		.4byte	.LASF197
 7960 11f4 01       		.byte	0x1
 7961 11f5 4D09     		.2byte	0x94d
 7962 11f7 01       		.byte	0x1
 7963 11f8 50100000 		.4byte	.LFB83
 7964 11fc 34110000 		.4byte	.LFE83
 7965 1200 62080000 		.4byte	.LLST126
 7966 1204 01       		.byte	0x1
 7967 1205 B3120000 		.4byte	0x12b3
 7968 1209 20       		.uleb128 0x20
 7969 120a 5D020000 		.4byte	.LASF110
 7970 120e 01       		.byte	0x1
 7971 120f 4D09     		.2byte	0x94d
 7972 1211 D3060000 		.4byte	0x6d3
 7973 1215 A6080000 		.4byte	.LLST127
 7974 1219 21       		.uleb128 0x21
 7975 121a 1F020000 		.4byte	.LASF154
 7976 121e 01       		.byte	0x1
 7977 121f 4F09     		.2byte	0x94f
 7978 1221 C7000000 		.4byte	0xc7
 7979 1225 DA080000 		.4byte	.LLST128
 7980 1229 21       		.uleb128 0x21
 7981 122a AF0B0000 		.4byte	.LASF155
 7982 122e 01       		.byte	0x1
 7983 122f 5009     		.2byte	0x950
 7984 1231 C7000000 		.4byte	0xc7
 7985 1235 03090000 		.4byte	.LLST129
 7986 1239 22       		.uleb128 0x22
 7987 123a 9E100000 		.4byte	.LBB53
 7988 123e AA100000 		.4byte	.LBE53
 7989 1242 56120000 		.4byte	0x1256
 7990 1246 1F       		.uleb128 0x1f
 7991 1247 810B0000 		.4byte	.LASF114
 7992 124b 01       		.byte	0x1
 7993 124c 6B09     		.2byte	0x96b
 7994 124e D2000000 		.4byte	0xd2
 7995 1252 02       		.byte	0x2
 7996 1253 91       		.byte	0x91
 7997 1254 64       		.sleb128 -28
 7998 1255 00       		.byte	0
 7999 1256 22       		.uleb128 0x22
 8000 1257 1A110000 		.4byte	.LBB55
 8001 125b 26110000 		.4byte	.LBE55
 8002 125f 73120000 		.4byte	0x1273
 8003 1263 1F       		.uleb128 0x1f
ARM GAS  /tmp/ccdPJtdr.s 			page 229


 8004 1264 810B0000 		.4byte	.LASF114
 8005 1268 01       		.byte	0x1
 8006 1269 6F09     		.2byte	0x96f
 8007 126b D2000000 		.4byte	0xd2
 8008 126f 02       		.byte	0x2
 8009 1270 91       		.byte	0x91
 8010 1271 68       		.sleb128 -24
 8011 1272 00       		.byte	0
 8012 1273 22       		.uleb128 0x22
 8013 1274 B6100000 		.4byte	.LBB54
 8014 1278 C8100000 		.4byte	.LBE54
 8015 127c 90120000 		.4byte	0x1290
 8016 1280 1F       		.uleb128 0x1f
 8017 1281 09040000 		.4byte	.LASF156
 8018 1285 01       		.byte	0x1
 8019 1286 7809     		.2byte	0x978
 8020 1288 D2000000 		.4byte	0xd2
 8021 128c 02       		.byte	0x2
 8022 128d 91       		.byte	0x91
 8023 128e 6C       		.sleb128 -20
 8024 128f 00       		.byte	0
 8025 1290 23       		.uleb128 0x23
 8026 1291 F4100000 		.4byte	.LVL246
 8027 1295 3C200000 		.4byte	0x203c
 8028 1299 23       		.uleb128 0x23
 8029 129a 0C110000 		.4byte	.LVL247
 8030 129e 3C200000 		.4byte	0x203c
 8031 12a2 26       		.uleb128 0x26
 8032 12a3 2E110000 		.4byte	.LVL250
 8033 12a7 31110000 		.4byte	0x1131
 8034 12ab 25       		.uleb128 0x25
 8035 12ac 01       		.byte	0x1
 8036 12ad 50       		.byte	0x50
 8037 12ae 02       		.byte	0x2
 8038 12af 74       		.byte	0x74
 8039 12b0 00       		.sleb128 0
 8040 12b1 00       		.byte	0
 8041 12b2 00       		.byte	0
 8042 12b3 30       		.uleb128 0x30
 8043 12b4 01       		.byte	0x1
 8044 12b5 150B0000 		.4byte	.LASF157
 8045 12b9 01       		.byte	0x1
 8046 12ba 2509     		.2byte	0x925
 8047 12bc 01       		.byte	0x1
 8048 12bd 9F020000 		.4byte	0x29f
 8049 12c1 700E0000 		.4byte	.LFB82
 8050 12c5 B60E0000 		.4byte	.LFE82
 8051 12c9 2C090000 		.4byte	.LLST102
 8052 12cd 01       		.byte	0x1
 8053 12ce 05130000 		.4byte	0x1305
 8054 12d2 20       		.uleb128 0x20
 8055 12d3 5D020000 		.4byte	.LASF110
 8056 12d7 01       		.byte	0x1
 8057 12d8 2509     		.2byte	0x925
 8058 12da D3060000 		.4byte	0x6d3
 8059 12de 4C090000 		.4byte	.LLST103
 8060 12e2 21       		.uleb128 0x21
ARM GAS  /tmp/ccdPJtdr.s 			page 230


 8061 12e3 0F080000 		.4byte	.LASF158
 8062 12e7 01       		.byte	0x1
 8063 12e8 2709     		.2byte	0x927
 8064 12ea 9F020000 		.4byte	0x29f
 8065 12ee 6A090000 		.4byte	.LLST104
 8066 12f2 23       		.uleb128 0x23
 8067 12f3 820E0000 		.4byte	.LVL197
 8068 12f7 4A200000 		.4byte	0x204a
 8069 12fb 23       		.uleb128 0x23
 8070 12fc A60E0000 		.4byte	.LVL201
 8071 1300 4A200000 		.4byte	0x204a
 8072 1304 00       		.byte	0
 8073 1305 2C       		.uleb128 0x2c
 8074 1306 01       		.byte	0x1
 8075 1307 B60B0000 		.4byte	.LASF159
 8076 130b 01       		.byte	0x1
 8077 130c 1109     		.2byte	0x911
 8078 130e 01       		.byte	0x1
 8079 130f 9F020000 		.4byte	0x29f
 8080 1313 500E0000 		.4byte	.LFB81
 8081 1317 700E0000 		.4byte	.LFE81
 8082 131b 02       		.byte	0x2
 8083 131c 7D       		.byte	0x7d
 8084 131d 00       		.sleb128 0
 8085 131e 01       		.byte	0x1
 8086 131f 34130000 		.4byte	0x1334
 8087 1323 20       		.uleb128 0x20
 8088 1324 5D020000 		.4byte	.LASF110
 8089 1328 01       		.byte	0x1
 8090 1329 1109     		.2byte	0x911
 8091 132b D3060000 		.4byte	0x6d3
 8092 132f AC090000 		.4byte	.LLST101
 8093 1333 00       		.byte	0
 8094 1334 2C       		.uleb128 0x2c
 8095 1335 01       		.byte	0x1
 8096 1336 E6080000 		.4byte	.LASF160
 8097 133a 01       		.byte	0x1
 8098 133b FD08     		.2byte	0x8fd
 8099 133d 01       		.byte	0x1
 8100 133e 9F020000 		.4byte	0x29f
 8101 1342 300E0000 		.4byte	.LFB80
 8102 1346 500E0000 		.4byte	.LFE80
 8103 134a 02       		.byte	0x2
 8104 134b 7D       		.byte	0x7d
 8105 134c 00       		.sleb128 0
 8106 134d 01       		.byte	0x1
 8107 134e 63130000 		.4byte	0x1363
 8108 1352 20       		.uleb128 0x20
 8109 1353 5D020000 		.4byte	.LASF110
 8110 1357 01       		.byte	0x1
 8111 1358 FD08     		.2byte	0x8fd
 8112 135a D3060000 		.4byte	0x6d3
 8113 135e CD090000 		.4byte	.LLST100
 8114 1362 00       		.byte	0
 8115 1363 30       		.uleb128 0x30
 8116 1364 01       		.byte	0x1
 8117 1365 E0030000 		.4byte	.LASF161
ARM GAS  /tmp/ccdPJtdr.s 			page 231


 8118 1369 01       		.byte	0x1
 8119 136a 5D08     		.2byte	0x85d
 8120 136c 01       		.byte	0x1
 8121 136d 9F020000 		.4byte	0x29f
 8122 1371 C0150000 		.4byte	.LFB79
 8123 1375 E4160000 		.4byte	.LFE79
 8124 1379 EE090000 		.4byte	.LLST160
 8125 137d 01       		.byte	0x1
 8126 137e 10140000 		.4byte	0x1410
 8127 1382 20       		.uleb128 0x20
 8128 1383 5D020000 		.4byte	.LASF110
 8129 1387 01       		.byte	0x1
 8130 1388 5D08     		.2byte	0x85d
 8131 138a D3060000 		.4byte	0x6d3
 8132 138e 320A0000 		.4byte	.LLST161
 8133 1392 21       		.uleb128 0x21
 8134 1393 0F080000 		.4byte	.LASF158
 8135 1397 01       		.byte	0x1
 8136 1398 5F08     		.2byte	0x85f
 8137 139a 9F020000 		.4byte	0x29f
 8138 139e 500A0000 		.4byte	.LLST162
 8139 13a2 21       		.uleb128 0x21
 8140 13a3 13070000 		.4byte	.LASF162
 8141 13a7 01       		.byte	0x1
 8142 13a8 6008     		.2byte	0x860
 8143 13aa C7000000 		.4byte	0xc7
 8144 13ae 860A0000 		.4byte	.LLST163
 8145 13b2 1F       		.uleb128 0x1f
 8146 13b3 00000000 		.4byte	.LASF112
 8147 13b7 01       		.byte	0x1
 8148 13b8 6108     		.2byte	0x861
 8149 13ba D2000000 		.4byte	0xd2
 8150 13be 02       		.byte	0x2
 8151 13bf 91       		.byte	0x91
 8152 13c0 64       		.sleb128 -28
 8153 13c1 1F       		.uleb128 0x1f
 8154 13c2 0F010000 		.4byte	.LASF163
 8155 13c6 01       		.byte	0x1
 8156 13c7 6208     		.2byte	0x862
 8157 13c9 D2000000 		.4byte	0xd2
 8158 13cd 02       		.byte	0x2
 8159 13ce 91       		.byte	0x91
 8160 13cf 68       		.sleb128 -24
 8161 13d0 22       		.uleb128 0x22
 8162 13d1 B6160000 		.4byte	.LBB74
 8163 13d5 C4160000 		.4byte	.LBE74
 8164 13d9 ED130000 		.4byte	0x13ed
 8165 13dd 1F       		.uleb128 0x1f
 8166 13de 810B0000 		.4byte	.LASF114
 8167 13e2 01       		.byte	0x1
 8168 13e3 E708     		.2byte	0x8e7
 8169 13e5 D2000000 		.4byte	0xd2
 8170 13e9 02       		.byte	0x2
 8171 13ea 91       		.byte	0x91
 8172 13eb 6C       		.sleb128 -20
 8173 13ec 00       		.byte	0
 8174 13ed 23       		.uleb128 0x23
ARM GAS  /tmp/ccdPJtdr.s 			page 232


 8175 13ee 4A160000 		.4byte	.LVL321
 8176 13f2 3C200000 		.4byte	0x203c
 8177 13f6 23       		.uleb128 0x23
 8178 13f7 68160000 		.4byte	.LVL323
 8179 13fb 3C200000 		.4byte	0x203c
 8180 13ff 26       		.uleb128 0x26
 8181 1400 CE160000 		.4byte	.LVL329
 8182 1404 15110000 		.4byte	0x1115
 8183 1408 25       		.uleb128 0x25
 8184 1409 01       		.byte	0x1
 8185 140a 50       		.byte	0x50
 8186 140b 02       		.byte	0x2
 8187 140c 74       		.byte	0x74
 8188 140d 00       		.sleb128 0
 8189 140e 00       		.byte	0
 8190 140f 00       		.byte	0
 8191 1410 30       		.uleb128 0x30
 8192 1411 01       		.byte	0x1
 8193 1412 99020000 		.4byte	.LASF164
 8194 1416 01       		.byte	0x1
 8195 1417 CD07     		.2byte	0x7cd
 8196 1419 01       		.byte	0x1
 8197 141a 9F020000 		.4byte	0x29f
 8198 141e 100D0000 		.4byte	.LFB78
 8199 1422 300E0000 		.4byte	.LFE78
 8200 1426 C80A0000 		.4byte	.LLST97
 8201 142a 01       		.byte	0x1
 8202 142b 99140000 		.4byte	0x1499
 8203 142f 20       		.uleb128 0x20
 8204 1430 5D020000 		.4byte	.LASF110
 8205 1434 01       		.byte	0x1
 8206 1435 CD07     		.2byte	0x7cd
 8207 1437 D3060000 		.4byte	0x6d3
 8208 143b 000B0000 		.4byte	.LLST98
 8209 143f 21       		.uleb128 0x21
 8210 1440 0F080000 		.4byte	.LASF158
 8211 1444 01       		.byte	0x1
 8212 1445 CF07     		.2byte	0x7cf
 8213 1447 9F020000 		.4byte	0x29f
 8214 144b 340B0000 		.4byte	.LLST99
 8215 144f 1F       		.uleb128 0x1f
 8216 1450 00000000 		.4byte	.LASF112
 8217 1454 01       		.byte	0x1
 8218 1455 D007     		.2byte	0x7d0
 8219 1457 D2000000 		.4byte	0xd2
 8220 145b 02       		.byte	0x2
 8221 145c 91       		.byte	0x91
 8222 145d 6C       		.sleb128 -20
 8223 145e 1F       		.uleb128 0x1f
 8224 145f 0F010000 		.4byte	.LASF163
 8225 1463 01       		.byte	0x1
 8226 1464 D107     		.2byte	0x7d1
 8227 1466 D2000000 		.4byte	0xd2
 8228 146a 02       		.byte	0x2
 8229 146b 91       		.byte	0x91
 8230 146c 70       		.sleb128 -16
 8231 146d 31       		.uleb128 0x31
ARM GAS  /tmp/ccdPJtdr.s 			page 233


 8232 146e 20000000 		.4byte	.Ldebug_ranges0+0x20
 8233 1472 86140000 		.4byte	0x1486
 8234 1476 1F       		.uleb128 0x1f
 8235 1477 810B0000 		.4byte	.LASF114
 8236 147b 01       		.byte	0x1
 8237 147c 4608     		.2byte	0x846
 8238 147e D2000000 		.4byte	0xd2
 8239 1482 02       		.byte	0x2
 8240 1483 91       		.byte	0x91
 8241 1484 74       		.sleb128 -12
 8242 1485 00       		.byte	0
 8243 1486 23       		.uleb128 0x23
 8244 1487 7E0D0000 		.4byte	.LVL185
 8245 148b 4A200000 		.4byte	0x204a
 8246 148f 23       		.uleb128 0x23
 8247 1490 B00D0000 		.4byte	.LVL186
 8248 1494 4A200000 		.4byte	0x204a
 8249 1498 00       		.byte	0
 8250 1499 1A       		.uleb128 0x1a
 8251 149a 01       		.byte	0x1
 8252 149b 12060000 		.4byte	.LASF166
 8253 149f 01       		.byte	0x1
 8254 14a0 3B07     		.2byte	0x73b
 8255 14a2 01       		.byte	0x1
 8256 14a3 9F020000 		.4byte	0x29f
 8257 14a7 01       		.byte	0x1
 8258 14a8 09150000 		.4byte	0x1509
 8259 14ac 1B       		.uleb128 0x1b
 8260 14ad 5D020000 		.4byte	.LASF110
 8261 14b1 01       		.byte	0x1
 8262 14b2 3B07     		.2byte	0x73b
 8263 14b4 D3060000 		.4byte	0x6d3
 8264 14b8 1B       		.uleb128 0x1b
 8265 14b9 AF060000 		.4byte	.LASF167
 8266 14bd 01       		.byte	0x1
 8267 14be 3B07     		.2byte	0x73b
 8268 14c0 60040000 		.4byte	0x460
 8269 14c4 1B       		.uleb128 0x1b
 8270 14c5 A9030000 		.4byte	.LASF168
 8271 14c9 01       		.byte	0x1
 8272 14ca 3B07     		.2byte	0x73b
 8273 14cc 60040000 		.4byte	0x460
 8274 14d0 1B       		.uleb128 0x1b
 8275 14d1 28070000 		.4byte	.LASF169
 8276 14d5 01       		.byte	0x1
 8277 14d6 3C07     		.2byte	0x73c
 8278 14d8 A7000000 		.4byte	0xa7
 8279 14dc 32       		.uleb128 0x32
 8280 14dd 89040000 		.4byte	.LASF170
 8281 14e1 01       		.byte	0x1
 8282 14e2 3E07     		.2byte	0x73e
 8283 14e4 C7000000 		.4byte	0xc7
 8284 14e8 32       		.uleb128 0x32
 8285 14e9 20000000 		.4byte	.LASF171
 8286 14ed 01       		.byte	0x1
 8287 14ee 3F07     		.2byte	0x73f
 8288 14f0 51050000 		.4byte	0x551
ARM GAS  /tmp/ccdPJtdr.s 			page 234


 8289 14f4 32       		.uleb128 0x32
 8290 14f5 0F080000 		.4byte	.LASF158
 8291 14f9 01       		.byte	0x1
 8292 14fa 4007     		.2byte	0x740
 8293 14fc 9F020000 		.4byte	0x29f
 8294 1500 33       		.uleb128 0x33
 8295 1501 22070000 		.4byte	.LASF175
 8296 1505 01       		.byte	0x1
 8297 1506 BA07     		.2byte	0x7ba
 8298 1508 00       		.byte	0
 8299 1509 30       		.uleb128 0x30
 8300 150a 01       		.byte	0x1
 8301 150b C5050000 		.4byte	.LASF172
 8302 150f 01       		.byte	0x1
 8303 1510 CA06     		.2byte	0x6ca
 8304 1512 01       		.byte	0x1
 8305 1513 9F020000 		.4byte	0x29f
 8306 1517 1C0C0000 		.4byte	.LFB76
 8307 151b 100D0000 		.4byte	.LFE76
 8308 151f 5F0B0000 		.4byte	.LLST92
 8309 1523 01       		.byte	0x1
 8310 1524 A9150000 		.4byte	0x15a9
 8311 1528 20       		.uleb128 0x20
 8312 1529 5D020000 		.4byte	.LASF110
 8313 152d 01       		.byte	0x1
 8314 152e CA06     		.2byte	0x6ca
 8315 1530 D3060000 		.4byte	0x6d3
 8316 1534 970B0000 		.4byte	.LLST93
 8317 1538 20       		.uleb128 0x20
 8318 1539 6A010000 		.4byte	.LASF173
 8319 153d 01       		.byte	0x1
 8320 153e CA06     		.2byte	0x6ca
 8321 1540 60040000 		.4byte	0x460
 8322 1544 F20B0000 		.4byte	.LLST94
 8323 1548 20       		.uleb128 0x20
 8324 1549 28070000 		.4byte	.LASF169
 8325 154d 01       		.byte	0x1
 8326 154e CA06     		.2byte	0x6ca
 8327 1550 A7000000 		.4byte	0xa7
 8328 1554 370C0000 		.4byte	.LLST95
 8329 1558 21       		.uleb128 0x21
 8330 1559 0F080000 		.4byte	.LASF158
 8331 155d 01       		.byte	0x1
 8332 155e CC06     		.2byte	0x6cc
 8333 1560 9F020000 		.4byte	0x29f
 8334 1564 580C0000 		.4byte	.LLST96
 8335 1568 34       		.uleb128 0x34
 8336 1569 22070000 		.4byte	.LASF175
 8337 156d 01       		.byte	0x1
 8338 156e 2B07     		.2byte	0x72b
 8339 1570 D00C0000 		.4byte	.L321
 8340 1574 35       		.uleb128 0x35
 8341 1575 400C0000 		.4byte	.LVL173
 8342 1579 01       		.byte	0x1
 8343 157a 99140000 		.4byte	0x1499
 8344 157e 98150000 		.4byte	0x1598
 8345 1582 25       		.uleb128 0x25
ARM GAS  /tmp/ccdPJtdr.s 			page 235


 8346 1583 01       		.byte	0x1
 8347 1584 50       		.byte	0x50
 8348 1585 03       		.byte	0x3
 8349 1586 F3       		.byte	0xf3
 8350 1587 01       		.uleb128 0x1
 8351 1588 50       		.byte	0x50
 8352 1589 25       		.uleb128 0x25
 8353 158a 01       		.byte	0x1
 8354 158b 51       		.byte	0x51
 8355 158c 03       		.byte	0x3
 8356 158d F3       		.byte	0xf3
 8357 158e 01       		.uleb128 0x1
 8358 158f 51       		.byte	0x51
 8359 1590 25       		.uleb128 0x25
 8360 1591 01       		.byte	0x1
 8361 1592 52       		.byte	0x52
 8362 1593 03       		.byte	0x3
 8363 1594 F3       		.byte	0xf3
 8364 1595 01       		.uleb128 0x1
 8365 1596 51       		.byte	0x51
 8366 1597 00       		.byte	0
 8367 1598 26       		.uleb128 0x26
 8368 1599 C00C0000 		.4byte	.LVL176
 8369 159d 58200000 		.4byte	0x2058
 8370 15a1 25       		.uleb128 0x25
 8371 15a2 01       		.byte	0x1
 8372 15a3 52       		.byte	0x52
 8373 15a4 02       		.byte	0x2
 8374 15a5 75       		.byte	0x75
 8375 15a6 00       		.sleb128 0
 8376 15a7 00       		.byte	0
 8377 15a8 00       		.byte	0
 8378 15a9 30       		.uleb128 0x30
 8379 15aa 01       		.byte	0x1
 8380 15ab 31010000 		.4byte	.LASF174
 8381 15af 01       		.byte	0x1
 8382 15b0 6006     		.2byte	0x660
 8383 15b2 01       		.byte	0x1
 8384 15b3 9F020000 		.4byte	0x29f
 8385 15b7 240A0000 		.4byte	.LFB75
 8386 15bb F80A0000 		.4byte	.LFE75
 8387 15bf 8F0C0000 		.4byte	.LLST76
 8388 15c3 01       		.byte	0x1
 8389 15c4 1E160000 		.4byte	0x161e
 8390 15c8 20       		.uleb128 0x20
 8391 15c9 5D020000 		.4byte	.LASF110
 8392 15cd 01       		.byte	0x1
 8393 15ce 6006     		.2byte	0x660
 8394 15d0 D3060000 		.4byte	0x6d3
 8395 15d4 AF0C0000 		.4byte	.LLST77
 8396 15d8 20       		.uleb128 0x20
 8397 15d9 6A010000 		.4byte	.LASF173
 8398 15dd 01       		.byte	0x1
 8399 15de 6006     		.2byte	0x660
 8400 15e0 60040000 		.4byte	0x460
 8401 15e4 F10C0000 		.4byte	.LLST78
 8402 15e8 20       		.uleb128 0x20
ARM GAS  /tmp/ccdPJtdr.s 			page 236


 8403 15e9 28070000 		.4byte	.LASF169
 8404 15ed 01       		.byte	0x1
 8405 15ee 6006     		.2byte	0x660
 8406 15f0 A7000000 		.4byte	0xa7
 8407 15f4 1D0D0000 		.4byte	.LLST79
 8408 15f8 21       		.uleb128 0x21
 8409 15f9 0F080000 		.4byte	.LASF158
 8410 15fd 01       		.byte	0x1
 8411 15fe 6206     		.2byte	0x662
 8412 1600 9F020000 		.4byte	0x29f
 8413 1604 550D0000 		.4byte	.LLST80
 8414 1608 34       		.uleb128 0x34
 8415 1609 22070000 		.4byte	.LASF175
 8416 160d 01       		.byte	0x1
 8417 160e BA06     		.2byte	0x6ba
 8418 1610 BA0A0000 		.4byte	.L279
 8419 1614 23       		.uleb128 0x23
 8420 1615 AA0A0000 		.4byte	.LVL144
 8421 1619 58200000 		.4byte	0x2058
 8422 161d 00       		.byte	0
 8423 161e 1A       		.uleb128 0x1a
 8424 161f 01       		.byte	0x1
 8425 1620 A4090000 		.4byte	.LASF176
 8426 1624 01       		.byte	0x1
 8427 1625 0806     		.2byte	0x608
 8428 1627 01       		.byte	0x1
 8429 1628 9F020000 		.4byte	0x29f
 8430 162c 01       		.byte	0x1
 8431 162d 8E160000 		.4byte	0x168e
 8432 1631 1B       		.uleb128 0x1b
 8433 1632 5D020000 		.4byte	.LASF110
 8434 1636 01       		.byte	0x1
 8435 1637 0806     		.2byte	0x608
 8436 1639 D3060000 		.4byte	0x6d3
 8437 163d 1B       		.uleb128 0x1b
 8438 163e AF060000 		.4byte	.LASF167
 8439 1642 01       		.byte	0x1
 8440 1643 0806     		.2byte	0x608
 8441 1645 60040000 		.4byte	0x460
 8442 1649 1B       		.uleb128 0x1b
 8443 164a A9030000 		.4byte	.LASF168
 8444 164e 01       		.byte	0x1
 8445 164f 0806     		.2byte	0x608
 8446 1651 60040000 		.4byte	0x460
 8447 1655 1B       		.uleb128 0x1b
 8448 1656 28070000 		.4byte	.LASF169
 8449 165a 01       		.byte	0x1
 8450 165b 0806     		.2byte	0x608
 8451 165d A7000000 		.4byte	0xa7
 8452 1661 32       		.uleb128 0x32
 8453 1662 89040000 		.4byte	.LASF170
 8454 1666 01       		.byte	0x1
 8455 1667 0A06     		.2byte	0x60a
 8456 1669 C7000000 		.4byte	0xc7
 8457 166d 32       		.uleb128 0x32
 8458 166e 20000000 		.4byte	.LASF171
 8459 1672 01       		.byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 237


 8460 1673 0B06     		.2byte	0x60b
 8461 1675 51050000 		.4byte	0x551
 8462 1679 32       		.uleb128 0x32
 8463 167a 0F080000 		.4byte	.LASF158
 8464 167e 01       		.byte	0x1
 8465 167f 0C06     		.2byte	0x60c
 8466 1681 9F020000 		.4byte	0x29f
 8467 1685 33       		.uleb128 0x33
 8468 1686 22070000 		.4byte	.LASF175
 8469 168a 01       		.byte	0x1
 8470 168b 5206     		.2byte	0x652
 8471 168d 00       		.byte	0
 8472 168e 30       		.uleb128 0x30
 8473 168f 01       		.byte	0x1
 8474 1690 060A0000 		.4byte	.LASF177
 8475 1694 01       		.byte	0x1
 8476 1695 AC05     		.2byte	0x5ac
 8477 1697 01       		.byte	0x1
 8478 1698 9F020000 		.4byte	0x29f
 8479 169c 60090000 		.4byte	.LFB73
 8480 16a0 240A0000 		.4byte	.LFE73
 8481 16a4 8C0D0000 		.4byte	.LLST71
 8482 16a8 01       		.byte	0x1
 8483 16a9 18170000 		.4byte	0x1718
 8484 16ad 20       		.uleb128 0x20
 8485 16ae 5D020000 		.4byte	.LASF110
 8486 16b2 01       		.byte	0x1
 8487 16b3 AC05     		.2byte	0x5ac
 8488 16b5 D3060000 		.4byte	0x6d3
 8489 16b9 DC0D0000 		.4byte	.LLST72
 8490 16bd 20       		.uleb128 0x20
 8491 16be 6A010000 		.4byte	.LASF173
 8492 16c2 01       		.byte	0x1
 8493 16c3 AC05     		.2byte	0x5ac
 8494 16c5 60040000 		.4byte	0x460
 8495 16c9 420E0000 		.4byte	.LLST73
 8496 16cd 20       		.uleb128 0x20
 8497 16ce 28070000 		.4byte	.LASF169
 8498 16d2 01       		.byte	0x1
 8499 16d3 AC05     		.2byte	0x5ac
 8500 16d5 A7000000 		.4byte	0xa7
 8501 16d9 790E0000 		.4byte	.LLST74
 8502 16dd 21       		.uleb128 0x21
 8503 16de 0F080000 		.4byte	.LASF158
 8504 16e2 01       		.byte	0x1
 8505 16e3 AE05     		.2byte	0x5ae
 8506 16e5 9F020000 		.4byte	0x29f
 8507 16e9 9A0E0000 		.4byte	.LLST75
 8508 16ed 34       		.uleb128 0x34
 8509 16ee 22070000 		.4byte	.LASF175
 8510 16f2 01       		.byte	0x1
 8511 16f3 F905     		.2byte	0x5f9
 8512 16f5 020A0000 		.4byte	.L264
 8513 16f9 29       		.uleb128 0x29
 8514 16fa 82090000 		.4byte	.LVL132
 8515 16fe 01       		.byte	0x1
 8516 16ff 1E160000 		.4byte	0x161e
ARM GAS  /tmp/ccdPJtdr.s 			page 238


 8517 1703 25       		.uleb128 0x25
 8518 1704 01       		.byte	0x1
 8519 1705 50       		.byte	0x50
 8520 1706 03       		.byte	0x3
 8521 1707 F3       		.byte	0xf3
 8522 1708 01       		.uleb128 0x1
 8523 1709 50       		.byte	0x50
 8524 170a 25       		.uleb128 0x25
 8525 170b 01       		.byte	0x1
 8526 170c 51       		.byte	0x51
 8527 170d 02       		.byte	0x2
 8528 170e 71       		.byte	0x71
 8529 170f 00       		.sleb128 0
 8530 1710 25       		.uleb128 0x25
 8531 1711 01       		.byte	0x1
 8532 1712 52       		.byte	0x52
 8533 1713 02       		.byte	0x2
 8534 1714 71       		.byte	0x71
 8535 1715 00       		.sleb128 0
 8536 1716 00       		.byte	0
 8537 1717 00       		.byte	0
 8538 1718 2C       		.uleb128 0x2c
 8539 1719 01       		.byte	0x1
 8540 171a 640B0000 		.4byte	.LASF178
 8541 171e 01       		.byte	0x1
 8542 171f 5905     		.2byte	0x559
 8543 1721 01       		.byte	0x1
 8544 1722 9F020000 		.4byte	0x29f
 8545 1726 F6070000 		.4byte	.LFB72
 8546 172a 98080000 		.4byte	.LFE72
 8547 172e 02       		.byte	0x2
 8548 172f 7D       		.byte	0x7d
 8549 1730 00       		.sleb128 0
 8550 1731 01       		.byte	0x1
 8551 1732 83170000 		.4byte	0x1783
 8552 1736 20       		.uleb128 0x20
 8553 1737 5D020000 		.4byte	.LASF110
 8554 173b 01       		.byte	0x1
 8555 173c 5905     		.2byte	0x559
 8556 173e D3060000 		.4byte	0x6d3
 8557 1742 C50E0000 		.4byte	.LLST57
 8558 1746 20       		.uleb128 0x20
 8559 1747 6A010000 		.4byte	.LASF173
 8560 174b 01       		.byte	0x1
 8561 174c 5905     		.2byte	0x559
 8562 174e 60040000 		.4byte	0x460
 8563 1752 E30E0000 		.4byte	.LLST58
 8564 1756 20       		.uleb128 0x20
 8565 1757 28070000 		.4byte	.LASF169
 8566 175b 01       		.byte	0x1
 8567 175c 5905     		.2byte	0x559
 8568 175e A7000000 		.4byte	0xa7
 8569 1762 320F0000 		.4byte	.LLST59
 8570 1766 21       		.uleb128 0x21
 8571 1767 0F080000 		.4byte	.LASF158
 8572 176b 01       		.byte	0x1
 8573 176c 5B05     		.2byte	0x55b
ARM GAS  /tmp/ccdPJtdr.s 			page 239


 8574 176e 9F020000 		.4byte	0x29f
 8575 1772 8D0F0000 		.4byte	.LLST60
 8576 1776 34       		.uleb128 0x34
 8577 1777 22070000 		.4byte	.LASF175
 8578 177b 01       		.byte	0x1
 8579 177c 9F05     		.2byte	0x59f
 8580 177e 78080000 		.4byte	.L223
 8581 1782 00       		.byte	0
 8582 1783 1A       		.uleb128 0x1a
 8583 1784 01       		.byte	0x1
 8584 1785 DC0B0000 		.4byte	.LASF179
 8585 1789 01       		.byte	0x1
 8586 178a 7504     		.2byte	0x475
 8587 178c 01       		.byte	0x1
 8588 178d 9F020000 		.4byte	0x29f
 8589 1791 01       		.byte	0x1
 8590 1792 31180000 		.4byte	0x1831
 8591 1796 1B       		.uleb128 0x1b
 8592 1797 5D020000 		.4byte	.LASF110
 8593 179b 01       		.byte	0x1
 8594 179c 7504     		.2byte	0x475
 8595 179e D3060000 		.4byte	0x6d3
 8596 17a2 1B       		.uleb128 0x1b
 8597 17a3 AF060000 		.4byte	.LASF167
 8598 17a7 01       		.byte	0x1
 8599 17a8 7504     		.2byte	0x475
 8600 17aa 60040000 		.4byte	0x460
 8601 17ae 1B       		.uleb128 0x1b
 8602 17af A9030000 		.4byte	.LASF168
 8603 17b3 01       		.byte	0x1
 8604 17b4 7504     		.2byte	0x475
 8605 17b6 60040000 		.4byte	0x460
 8606 17ba 1B       		.uleb128 0x1b
 8607 17bb 28070000 		.4byte	.LASF169
 8608 17bf 01       		.byte	0x1
 8609 17c0 7504     		.2byte	0x475
 8610 17c2 A7000000 		.4byte	0xa7
 8611 17c6 1B       		.uleb128 0x1b
 8612 17c7 97030000 		.4byte	.LASF117
 8613 17cb 01       		.byte	0x1
 8614 17cc 7604     		.2byte	0x476
 8615 17ce C7000000 		.4byte	0xc7
 8616 17d2 32       		.uleb128 0x32
 8617 17d3 F9050000 		.4byte	.LASF180
 8618 17d7 01       		.byte	0x1
 8619 17d8 7804     		.2byte	0x478
 8620 17da A7000000 		.4byte	0xa7
 8621 17de 32       		.uleb128 0x32
 8622 17df 89040000 		.4byte	.LASF170
 8623 17e3 01       		.byte	0x1
 8624 17e4 7904     		.2byte	0x479
 8625 17e6 C7000000 		.4byte	0xc7
 8626 17ea 32       		.uleb128 0x32
 8627 17eb 20000000 		.4byte	.LASF171
 8628 17ef 01       		.byte	0x1
 8629 17f0 7A04     		.2byte	0x47a
 8630 17f2 51050000 		.4byte	0x551
ARM GAS  /tmp/ccdPJtdr.s 			page 240


 8631 17f6 32       		.uleb128 0x32
 8632 17f7 19080000 		.4byte	.LASF113
 8633 17fb 01       		.byte	0x1
 8634 17fc 7B04     		.2byte	0x47b
 8635 17fe C7000000 		.4byte	0xc7
 8636 1802 32       		.uleb128 0x32
 8637 1803 76030000 		.4byte	.LASF181
 8638 1807 01       		.byte	0x1
 8639 1808 7E04     		.2byte	0x47e
 8640 180a C7000000 		.4byte	0xc7
 8641 180e 32       		.uleb128 0x32
 8642 180f 0F080000 		.4byte	.LASF158
 8643 1813 01       		.byte	0x1
 8644 1814 7F04     		.2byte	0x47f
 8645 1816 9F020000 		.4byte	0x29f
 8646 181a 33       		.uleb128 0x33
 8647 181b 22070000 		.4byte	.LASF175
 8648 181f 01       		.byte	0x1
 8649 1820 4B05     		.2byte	0x54b
 8650 1822 36       		.uleb128 0x36
 8651 1823 32       		.uleb128 0x32
 8652 1824 810B0000 		.4byte	.LASF114
 8653 1828 01       		.byte	0x1
 8654 1829 4805     		.2byte	0x548
 8655 182b D2000000 		.4byte	0xd2
 8656 182f 00       		.byte	0
 8657 1830 00       		.byte	0
 8658 1831 30       		.uleb128 0x30
 8659 1832 01       		.byte	0x1
 8660 1833 470B0000 		.4byte	.LASF182
 8661 1837 01       		.byte	0x1
 8662 1838 A603     		.2byte	0x3a6
 8663 183a 01       		.byte	0x1
 8664 183b 9F020000 		.4byte	0x29f
 8665 183f 1E060000 		.4byte	.LFB70
 8666 1843 F6070000 		.4byte	.LFE70
 8667 1847 B80F0000 		.4byte	.LLST50
 8668 184b 01       		.byte	0x1
 8669 184c 77190000 		.4byte	0x1977
 8670 1850 20       		.uleb128 0x20
 8671 1851 5D020000 		.4byte	.LASF110
 8672 1855 01       		.byte	0x1
 8673 1856 A603     		.2byte	0x3a6
 8674 1858 D3060000 		.4byte	0x6d3
 8675 185c F00F0000 		.4byte	.LLST51
 8676 1860 20       		.uleb128 0x20
 8677 1861 6A010000 		.4byte	.LASF173
 8678 1865 01       		.byte	0x1
 8679 1866 A603     		.2byte	0x3a6
 8680 1868 60040000 		.4byte	0x460
 8681 186c 3A100000 		.4byte	.LLST52
 8682 1870 20       		.uleb128 0x20
 8683 1871 28070000 		.4byte	.LASF169
 8684 1875 01       		.byte	0x1
 8685 1876 A603     		.2byte	0x3a6
 8686 1878 A7000000 		.4byte	0xa7
 8687 187c 79100000 		.4byte	.LLST53
ARM GAS  /tmp/ccdPJtdr.s 			page 241


 8688 1880 20       		.uleb128 0x20
 8689 1881 97030000 		.4byte	.LASF117
 8690 1885 01       		.byte	0x1
 8691 1886 A603     		.2byte	0x3a6
 8692 1888 C7000000 		.4byte	0xc7
 8693 188c BE100000 		.4byte	.LLST54
 8694 1890 21       		.uleb128 0x21
 8695 1891 19080000 		.4byte	.LASF113
 8696 1895 01       		.byte	0x1
 8697 1896 A803     		.2byte	0x3a8
 8698 1898 C7000000 		.4byte	0xc7
 8699 189c DC100000 		.4byte	.LLST55
 8700 18a0 21       		.uleb128 0x21
 8701 18a1 0F080000 		.4byte	.LASF158
 8702 18a5 01       		.byte	0x1
 8703 18a6 A903     		.2byte	0x3a9
 8704 18a8 9F020000 		.4byte	0x29f
 8705 18ac FA100000 		.4byte	.LLST56
 8706 18b0 34       		.uleb128 0x34
 8707 18b1 22070000 		.4byte	.LASF175
 8708 18b5 01       		.byte	0x1
 8709 18b6 6504     		.2byte	0x465
 8710 18b8 92070000 		.4byte	.L180
 8711 18bc 24       		.uleb128 0x24
 8712 18bd 46060000 		.4byte	.LVL89
 8713 18c1 83170000 		.4byte	0x1783
 8714 18c5 E9180000 		.4byte	0x18e9
 8715 18c9 25       		.uleb128 0x25
 8716 18ca 01       		.byte	0x1
 8717 18cb 50       		.byte	0x50
 8718 18cc 02       		.byte	0x2
 8719 18cd 74       		.byte	0x74
 8720 18ce 00       		.sleb128 0
 8721 18cf 25       		.uleb128 0x25
 8722 18d0 01       		.byte	0x1
 8723 18d1 51       		.byte	0x51
 8724 18d2 02       		.byte	0x2
 8725 18d3 78       		.byte	0x78
 8726 18d4 00       		.sleb128 0
 8727 18d5 25       		.uleb128 0x25
 8728 18d6 01       		.byte	0x1
 8729 18d7 52       		.byte	0x52
 8730 18d8 02       		.byte	0x2
 8731 18d9 78       		.byte	0x78
 8732 18da 00       		.sleb128 0
 8733 18db 25       		.uleb128 0x25
 8734 18dc 01       		.byte	0x1
 8735 18dd 53       		.byte	0x53
 8736 18de 02       		.byte	0x2
 8737 18df 77       		.byte	0x77
 8738 18e0 00       		.sleb128 0
 8739 18e1 25       		.uleb128 0x25
 8740 18e2 02       		.byte	0x2
 8741 18e3 7D       		.byte	0x7d
 8742 18e4 00       		.sleb128 0
 8743 18e5 02       		.byte	0x2
 8744 18e6 75       		.byte	0x75
ARM GAS  /tmp/ccdPJtdr.s 			page 242


 8745 18e7 00       		.sleb128 0
 8746 18e8 00       		.byte	0
 8747 18e9 23       		.uleb128 0x23
 8748 18ea 60060000 		.4byte	.LVL91
 8749 18ee 2E200000 		.4byte	0x202e
 8750 18f2 24       		.uleb128 0x24
 8751 18f3 50070000 		.4byte	.LVL94
 8752 18f7 CF090000 		.4byte	0x9cf
 8753 18fb 1D190000 		.4byte	0x191d
 8754 18ff 25       		.uleb128 0x25
 8755 1900 01       		.byte	0x1
 8756 1901 50       		.byte	0x50
 8757 1902 02       		.byte	0x2
 8758 1903 74       		.byte	0x74
 8759 1904 00       		.sleb128 0
 8760 1905 25       		.uleb128 0x25
 8761 1906 01       		.byte	0x1
 8762 1907 51       		.byte	0x51
 8763 1908 01       		.byte	0x1
 8764 1909 31       		.byte	0x31
 8765 190a 25       		.uleb128 0x25
 8766 190b 01       		.byte	0x1
 8767 190c 52       		.byte	0x52
 8768 190d 01       		.byte	0x1
 8769 190e 31       		.byte	0x31
 8770 190f 25       		.uleb128 0x25
 8771 1910 01       		.byte	0x1
 8772 1911 53       		.byte	0x53
 8773 1912 02       		.byte	0x2
 8774 1913 75       		.byte	0x75
 8775 1914 00       		.sleb128 0
 8776 1915 25       		.uleb128 0x25
 8777 1916 02       		.byte	0x2
 8778 1917 7D       		.byte	0x7d
 8779 1918 00       		.sleb128 0
 8780 1919 02       		.byte	0x2
 8781 191a 76       		.byte	0x76
 8782 191b 00       		.sleb128 0
 8783 191c 00       		.byte	0
 8784 191d 24       		.uleb128 0x24
 8785 191e 76070000 		.4byte	.LVL95
 8786 1922 CF090000 		.4byte	0x9cf
 8787 1926 48190000 		.4byte	0x1948
 8788 192a 25       		.uleb128 0x25
 8789 192b 01       		.byte	0x1
 8790 192c 50       		.byte	0x50
 8791 192d 02       		.byte	0x2
 8792 192e 74       		.byte	0x74
 8793 192f 00       		.sleb128 0
 8794 1930 25       		.uleb128 0x25
 8795 1931 01       		.byte	0x1
 8796 1932 51       		.byte	0x51
 8797 1933 01       		.byte	0x1
 8798 1934 31       		.byte	0x31
 8799 1935 25       		.uleb128 0x25
 8800 1936 01       		.byte	0x1
 8801 1937 52       		.byte	0x52
ARM GAS  /tmp/ccdPJtdr.s 			page 243


 8802 1938 01       		.byte	0x1
 8803 1939 31       		.byte	0x31
 8804 193a 25       		.uleb128 0x25
 8805 193b 01       		.byte	0x1
 8806 193c 53       		.byte	0x53
 8807 193d 02       		.byte	0x2
 8808 193e 75       		.byte	0x75
 8809 193f 00       		.sleb128 0
 8810 1940 25       		.uleb128 0x25
 8811 1941 02       		.byte	0x2
 8812 1942 7D       		.byte	0x7d
 8813 1943 00       		.sleb128 0
 8814 1944 02       		.byte	0x2
 8815 1945 76       		.byte	0x76
 8816 1946 00       		.sleb128 0
 8817 1947 00       		.byte	0
 8818 1948 23       		.uleb128 0x23
 8819 1949 86070000 		.4byte	.LVL96
 8820 194d 2E200000 		.4byte	0x202e
 8821 1951 23       		.uleb128 0x23
 8822 1952 A4070000 		.4byte	.LVL100
 8823 1956 2E200000 		.4byte	0x202e
 8824 195a 26       		.uleb128 0x26
 8825 195b BE070000 		.4byte	.LVL101
 8826 195f 98090000 		.4byte	0x998
 8827 1963 25       		.uleb128 0x25
 8828 1964 01       		.byte	0x1
 8829 1965 50       		.byte	0x50
 8830 1966 02       		.byte	0x2
 8831 1967 74       		.byte	0x74
 8832 1968 00       		.sleb128 0
 8833 1969 25       		.uleb128 0x25
 8834 196a 01       		.byte	0x1
 8835 196b 51       		.byte	0x51
 8836 196c 02       		.byte	0x2
 8837 196d 75       		.byte	0x75
 8838 196e 00       		.sleb128 0
 8839 196f 25       		.uleb128 0x25
 8840 1970 01       		.byte	0x1
 8841 1971 52       		.byte	0x52
 8842 1972 02       		.byte	0x2
 8843 1973 76       		.byte	0x76
 8844 1974 00       		.sleb128 0
 8845 1975 00       		.byte	0
 8846 1976 00       		.byte	0
 8847 1977 30       		.uleb128 0x30
 8848 1978 01       		.byte	0x1
 8849 1979 70010000 		.4byte	.LASF183
 8850 197d 01       		.byte	0x1
 8851 197e 0303     		.2byte	0x303
 8852 1980 01       		.byte	0x1
 8853 1981 9F020000 		.4byte	0x29f
 8854 1985 20020000 		.4byte	.LFB69
 8855 1989 98030000 		.4byte	.LFE69
 8856 198d 3D110000 		.4byte	.LLST27
 8857 1991 01       		.byte	0x1
 8858 1992 6B1A0000 		.4byte	0x1a6b
ARM GAS  /tmp/ccdPJtdr.s 			page 244


 8859 1996 20       		.uleb128 0x20
 8860 1997 5D020000 		.4byte	.LASF110
 8861 199b 01       		.byte	0x1
 8862 199c 0303     		.2byte	0x303
 8863 199e D3060000 		.4byte	0x6d3
 8864 19a2 75110000 		.4byte	.LLST28
 8865 19a6 20       		.uleb128 0x20
 8866 19a7 6A010000 		.4byte	.LASF173
 8867 19ab 01       		.byte	0x1
 8868 19ac 0303     		.2byte	0x303
 8869 19ae 60040000 		.4byte	0x460
 8870 19b2 A9110000 		.4byte	.LLST29
 8871 19b6 20       		.uleb128 0x20
 8872 19b7 28070000 		.4byte	.LASF169
 8873 19bb 01       		.byte	0x1
 8874 19bc 0303     		.2byte	0x303
 8875 19be A7000000 		.4byte	0xa7
 8876 19c2 F7110000 		.4byte	.LLST30
 8877 19c6 20       		.uleb128 0x20
 8878 19c7 97030000 		.4byte	.LASF117
 8879 19cb 01       		.byte	0x1
 8880 19cc 0303     		.2byte	0x303
 8881 19ce C7000000 		.4byte	0xc7
 8882 19d2 23120000 		.4byte	.LLST31
 8883 19d6 21       		.uleb128 0x21
 8884 19d7 19080000 		.4byte	.LASF113
 8885 19db 01       		.byte	0x1
 8886 19dc 0503     		.2byte	0x305
 8887 19de C7000000 		.4byte	0xc7
 8888 19e2 41120000 		.4byte	.LLST32
 8889 19e6 21       		.uleb128 0x21
 8890 19e7 0F080000 		.4byte	.LASF158
 8891 19eb 01       		.byte	0x1
 8892 19ec 0603     		.2byte	0x306
 8893 19ee 9F020000 		.4byte	0x29f
 8894 19f2 6A120000 		.4byte	.LLST33
 8895 19f6 21       		.uleb128 0x21
 8896 19f7 F9050000 		.4byte	.LASF180
 8897 19fb 01       		.byte	0x1
 8898 19fc 0703     		.2byte	0x307
 8899 19fe A7000000 		.4byte	0xa7
 8900 1a02 95120000 		.4byte	.LLST34
 8901 1a06 34       		.uleb128 0x34
 8902 1a07 22070000 		.4byte	.LASF175
 8903 1a0b 01       		.byte	0x1
 8904 1a0c 9603     		.2byte	0x396
 8905 1a0e 3C030000 		.4byte	.L55
 8906 1a12 22       		.uleb128 0x22
 8907 1a13 00030000 		.4byte	.LBB26
 8908 1a17 0E030000 		.4byte	.LBE26
 8909 1a1b 2F1A0000 		.4byte	0x1a2f
 8910 1a1f 1F       		.uleb128 0x1f
 8911 1a20 810B0000 		.4byte	.LASF114
 8912 1a24 01       		.byte	0x1
 8913 1a25 8E03     		.2byte	0x38e
 8914 1a27 D2000000 		.4byte	0xd2
 8915 1a2b 02       		.byte	0x2
ARM GAS  /tmp/ccdPJtdr.s 			page 245


 8916 1a2c 91       		.byte	0x91
 8917 1a2d 64       		.sleb128 -28
 8918 1a2e 00       		.byte	0
 8919 1a2f 23       		.uleb128 0x23
 8920 1a30 40020000 		.4byte	.LVL31
 8921 1a34 2E200000 		.4byte	0x202e
 8922 1a38 24       		.uleb128 0x24
 8923 1a39 F6020000 		.4byte	.LVL36
 8924 1a3d 1F090000 		.4byte	0x91f
 8925 1a41 581A0000 		.4byte	0x1a58
 8926 1a45 25       		.uleb128 0x25
 8927 1a46 01       		.byte	0x1
 8928 1a47 50       		.byte	0x50
 8929 1a48 02       		.byte	0x2
 8930 1a49 74       		.byte	0x74
 8931 1a4a 00       		.sleb128 0
 8932 1a4b 25       		.uleb128 0x25
 8933 1a4c 01       		.byte	0x1
 8934 1a4d 51       		.byte	0x51
 8935 1a4e 02       		.byte	0x2
 8936 1a4f 76       		.byte	0x76
 8937 1a50 00       		.sleb128 0
 8938 1a51 25       		.uleb128 0x25
 8939 1a52 01       		.byte	0x1
 8940 1a53 52       		.byte	0x52
 8941 1a54 02       		.byte	0x2
 8942 1a55 77       		.byte	0x77
 8943 1a56 00       		.sleb128 0
 8944 1a57 00       		.byte	0
 8945 1a58 23       		.uleb128 0x23
 8946 1a59 30030000 		.4byte	.LVL37
 8947 1a5d 2E200000 		.4byte	0x202e
 8948 1a61 23       		.uleb128 0x23
 8949 1a62 84030000 		.4byte	.LVL41
 8950 1a66 2E200000 		.4byte	0x202e
 8951 1a6a 00       		.byte	0
 8952 1a6b 2E       		.uleb128 0x2e
 8953 1a6c 01       		.byte	0x1
 8954 1a6d 5A070000 		.4byte	.LASF184
 8955 1a71 01       		.byte	0x1
 8956 1a72 F301     		.2byte	0x1f3
 8957 1a74 01       		.byte	0x1
 8958 1a75 861A0000 		.4byte	0x1a86
 8959 1a79 1B       		.uleb128 0x1b
 8960 1a7a 5D020000 		.4byte	.LASF110
 8961 1a7e 01       		.byte	0x1
 8962 1a7f F301     		.2byte	0x1f3
 8963 1a81 D3060000 		.4byte	0x6d3
 8964 1a85 00       		.byte	0
 8965 1a86 2E       		.uleb128 0x2e
 8966 1a87 01       		.byte	0x1
 8967 1a88 9E000000 		.4byte	.LASF185
 8968 1a8c 01       		.byte	0x1
 8969 1a8d E301     		.2byte	0x1e3
 8970 1a8f 01       		.byte	0x1
 8971 1a90 A11A0000 		.4byte	0x1aa1
 8972 1a94 1B       		.uleb128 0x1b
ARM GAS  /tmp/ccdPJtdr.s 			page 246


 8973 1a95 5D020000 		.4byte	.LASF110
 8974 1a99 01       		.byte	0x1
 8975 1a9a E301     		.2byte	0x1e3
 8976 1a9c D3060000 		.4byte	0x6d3
 8977 1aa0 00       		.byte	0
 8978 1aa1 30       		.uleb128 0x30
 8979 1aa2 01       		.byte	0x1
 8980 1aa3 060B0000 		.4byte	.LASF186
 8981 1aa7 01       		.byte	0x1
 8982 1aa8 B701     		.2byte	0x1b7
 8983 1aaa 01       		.byte	0x1
 8984 1aab 9F020000 		.4byte	0x29f
 8985 1aaf F4010000 		.4byte	.LFB66
 8986 1ab3 20020000 		.4byte	.LFE66
 8987 1ab7 B3120000 		.4byte	.LLST25
 8988 1abb 01       		.byte	0x1
 8989 1abc E11A0000 		.4byte	0x1ae1
 8990 1ac0 20       		.uleb128 0x20
 8991 1ac1 5D020000 		.4byte	.LASF110
 8992 1ac5 01       		.byte	0x1
 8993 1ac6 B701     		.2byte	0x1b7
 8994 1ac8 D3060000 		.4byte	0x6d3
 8995 1acc D3120000 		.4byte	.LLST26
 8996 1ad0 26       		.uleb128 0x26
 8997 1ad1 0E020000 		.4byte	.LVL26
 8998 1ad5 6B1A0000 		.4byte	0x1a6b
 8999 1ad9 25       		.uleb128 0x25
 9000 1ada 01       		.byte	0x1
 9001 1adb 50       		.byte	0x50
 9002 1adc 02       		.byte	0x2
 9003 1add 74       		.byte	0x74
 9004 1ade 00       		.sleb128 0
 9005 1adf 00       		.byte	0
 9006 1ae0 00       		.byte	0
 9007 1ae1 30       		.uleb128 0x30
 9008 1ae2 01       		.byte	0x1
 9009 1ae3 F9090000 		.4byte	.LASF187
 9010 1ae7 01       		.byte	0x1
 9011 1ae8 4F01     		.2byte	0x14f
 9012 1aea 01       		.byte	0x1
 9013 1aeb 9F020000 		.4byte	0x29f
 9014 1aef 66010000 		.4byte	.LFB65
 9015 1af3 F2010000 		.4byte	.LFE65
 9016 1af7 07130000 		.4byte	.LLST23
 9017 1afb 01       		.byte	0x1
 9018 1afc 211B0000 		.4byte	0x1b21
 9019 1b00 20       		.uleb128 0x20
 9020 1b01 5D020000 		.4byte	.LASF110
 9021 1b05 01       		.byte	0x1
 9022 1b06 4F01     		.2byte	0x14f
 9023 1b08 D3060000 		.4byte	0x6d3
 9024 1b0c 27130000 		.4byte	.LLST24
 9025 1b10 26       		.uleb128 0x26
 9026 1b11 80010000 		.4byte	.LVL22
 9027 1b15 861A0000 		.4byte	0x1a86
 9028 1b19 25       		.uleb128 0x25
 9029 1b1a 01       		.byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 247


 9030 1b1b 50       		.byte	0x50
 9031 1b1c 02       		.byte	0x2
 9032 1b1d 74       		.byte	0x74
 9033 1b1e 00       		.sleb128 0
 9034 1b1f 00       		.byte	0
 9035 1b20 00       		.byte	0
 9036 1b21 37       		.uleb128 0x37
 9037 1b22 CF090000 		.4byte	0x9cf
 9038 1b26 6A000000 		.4byte	.LFB116
 9039 1b2a F0000000 		.4byte	.LFE116
 9040 1b2e 5B130000 		.4byte	.LLST1
 9041 1b32 01       		.byte	0x1
 9042 1b33 A91B0000 		.4byte	0x1ba9
 9043 1b37 38       		.uleb128 0x38
 9044 1b38 E1090000 		.4byte	0x9e1
 9045 1b3c 7B130000 		.4byte	.LLST2
 9046 1b40 38       		.uleb128 0x38
 9047 1b41 ED090000 		.4byte	0x9ed
 9048 1b45 99130000 		.4byte	.LLST3
 9049 1b49 38       		.uleb128 0x38
 9050 1b4a F9090000 		.4byte	0x9f9
 9051 1b4e B7130000 		.4byte	.LLST4
 9052 1b52 38       		.uleb128 0x38
 9053 1b53 050A0000 		.4byte	0xa05
 9054 1b57 D8130000 		.4byte	.LLST5
 9055 1b5b 38       		.uleb128 0x38
 9056 1b5c 110A0000 		.4byte	0xa11
 9057 1b60 F6130000 		.4byte	.LLST6
 9058 1b64 22       		.uleb128 0x22
 9059 1b65 9E000000 		.4byte	.LBB20
 9060 1b69 F0000000 		.4byte	.LBE20
 9061 1b6d 9F1B0000 		.4byte	0x1b9f
 9062 1b71 38       		.uleb128 0x38
 9063 1b72 ED090000 		.4byte	0x9ed
 9064 1b76 16140000 		.4byte	.LLST7
 9065 1b7a 38       		.uleb128 0x38
 9066 1b7b F9090000 		.4byte	0x9f9
 9067 1b7f 29140000 		.4byte	.LLST8
 9068 1b83 38       		.uleb128 0x38
 9069 1b84 050A0000 		.4byte	0xa05
 9070 1b88 3C140000 		.4byte	.LLST9
 9071 1b8c 38       		.uleb128 0x38
 9072 1b8d 110A0000 		.4byte	0xa11
 9073 1b91 4F140000 		.4byte	.LLST10
 9074 1b95 38       		.uleb128 0x38
 9075 1b96 E1090000 		.4byte	0x9e1
 9076 1b9a 62140000 		.4byte	.LLST11
 9077 1b9e 00       		.byte	0
 9078 1b9f 23       		.uleb128 0x23
 9079 1ba0 98000000 		.4byte	.LVL5
 9080 1ba4 2E200000 		.4byte	0x202e
 9081 1ba8 00       		.byte	0
 9082 1ba9 37       		.uleb128 0x37
 9083 1baa 98090000 		.4byte	0x998
 9084 1bae 10010000 		.4byte	.LFB117
 9085 1bb2 64010000 		.4byte	.LFE117
 9086 1bb6 75140000 		.4byte	.LLST16
ARM GAS  /tmp/ccdPJtdr.s 			page 248


 9087 1bba 01       		.byte	0x1
 9088 1bbb 101C0000 		.4byte	0x1c10
 9089 1bbf 38       		.uleb128 0x38
 9090 1bc0 AA090000 		.4byte	0x9aa
 9091 1bc4 AD140000 		.4byte	.LLST17
 9092 1bc8 38       		.uleb128 0x38
 9093 1bc9 B6090000 		.4byte	0x9b6
 9094 1bcd CB140000 		.4byte	.LLST18
 9095 1bd1 38       		.uleb128 0x38
 9096 1bd2 C2090000 		.4byte	0x9c2
 9097 1bd6 10150000 		.4byte	.LLST19
 9098 1bda 39       		.uleb128 0x39
 9099 1bdb 3C010000 		.4byte	.LBB24
 9100 1bdf 4C010000 		.4byte	.LBE24
 9101 1be3 38       		.uleb128 0x38
 9102 1be4 C2090000 		.4byte	0x9c2
 9103 1be8 62150000 		.4byte	.LLST20
 9104 1bec 38       		.uleb128 0x38
 9105 1bed B6090000 		.4byte	0x9b6
 9106 1bf1 75150000 		.4byte	.LLST21
 9107 1bf5 38       		.uleb128 0x38
 9108 1bf6 AA090000 		.4byte	0x9aa
 9109 1bfa 88150000 		.4byte	.LLST22
 9110 1bfe 26       		.uleb128 0x26
 9111 1bff 48010000 		.4byte	.LVL17
 9112 1c03 CF090000 		.4byte	0x9cf
 9113 1c07 25       		.uleb128 0x25
 9114 1c08 01       		.byte	0x1
 9115 1c09 50       		.byte	0x50
 9116 1c0a 02       		.byte	0x2
 9117 1c0b 74       		.byte	0x74
 9118 1c0c 00       		.sleb128 0
 9119 1c0d 00       		.byte	0
 9120 1c0e 00       		.byte	0
 9121 1c0f 00       		.byte	0
 9122 1c10 37       		.uleb128 0x37
 9123 1c11 83170000 		.4byte	0x1783
 9124 1c15 98030000 		.4byte	.LFB71
 9125 1c19 1E060000 		.4byte	.LFE71
 9126 1c1d 9B150000 		.4byte	.LLST35
 9127 1c21 01       		.byte	0x1
 9128 1c22 5C1D0000 		.4byte	0x1d5c
 9129 1c26 38       		.uleb128 0x38
 9130 1c27 96170000 		.4byte	0x1796
 9131 1c2b DF150000 		.4byte	.LLST36
 9132 1c2f 38       		.uleb128 0x38
 9133 1c30 A2170000 		.4byte	0x17a2
 9134 1c34 08160000 		.4byte	.LLST37
 9135 1c38 38       		.uleb128 0x38
 9136 1c39 AE170000 		.4byte	0x17ae
 9137 1c3d 8A160000 		.4byte	.LLST38
 9138 1c41 38       		.uleb128 0x38
 9139 1c42 BA170000 		.4byte	0x17ba
 9140 1c46 B3160000 		.4byte	.LLST39
 9141 1c4a 38       		.uleb128 0x38
 9142 1c4b C6170000 		.4byte	0x17c6
 9143 1c4f D4160000 		.4byte	.LLST40
ARM GAS  /tmp/ccdPJtdr.s 			page 249


 9144 1c53 3A       		.uleb128 0x3a
 9145 1c54 D2170000 		.4byte	0x17d2
 9146 1c58 3A       		.uleb128 0x3a
 9147 1c59 DE170000 		.4byte	0x17de
 9148 1c5d 3A       		.uleb128 0x3a
 9149 1c5e EA170000 		.4byte	0x17ea
 9150 1c62 3A       		.uleb128 0x3a
 9151 1c63 F6170000 		.4byte	0x17f6
 9152 1c67 3B       		.uleb128 0x3b
 9153 1c68 02180000 		.4byte	0x1802
 9154 1c6c 01       		.byte	0x1
 9155 1c6d 3B       		.uleb128 0x3b
 9156 1c6e 0E180000 		.4byte	0x180e
 9157 1c72 00       		.byte	0
 9158 1c73 3C       		.uleb128 0x3c
 9159 1c74 00000000 		.4byte	.Ldebug_ranges0+0
 9160 1c78 38       		.uleb128 0x38
 9161 1c79 C6170000 		.4byte	0x17c6
 9162 1c7d F4160000 		.4byte	.LLST41
 9163 1c81 38       		.uleb128 0x38
 9164 1c82 BA170000 		.4byte	0x17ba
 9165 1c86 12170000 		.4byte	.LLST42
 9166 1c8a 38       		.uleb128 0x38
 9167 1c8b AE170000 		.4byte	0x17ae
 9168 1c8f 30170000 		.4byte	.LLST43
 9169 1c93 38       		.uleb128 0x38
 9170 1c94 A2170000 		.4byte	0x17a2
 9171 1c98 59170000 		.4byte	.LLST44
 9172 1c9c 38       		.uleb128 0x38
 9173 1c9d 96170000 		.4byte	0x1796
 9174 1ca1 DE170000 		.4byte	.LLST45
 9175 1ca5 3C       		.uleb128 0x3c
 9176 1ca6 00000000 		.4byte	.Ldebug_ranges0+0
 9177 1caa 3D       		.uleb128 0x3d
 9178 1cab 531C0000 		.4byte	0x1c53
 9179 1caf 07180000 		.4byte	.LLST46
 9180 1cb3 3D       		.uleb128 0x3d
 9181 1cb4 581C0000 		.4byte	0x1c58
 9182 1cb8 25180000 		.4byte	.LLST47
 9183 1cbc 3D       		.uleb128 0x3d
 9184 1cbd 5D1C0000 		.4byte	0x1c5d
 9185 1cc1 4E180000 		.4byte	.LLST48
 9186 1cc5 3D       		.uleb128 0x3d
 9187 1cc6 621C0000 		.4byte	0x1c62
 9188 1cca 6C180000 		.4byte	.LLST49
 9189 1cce 3A       		.uleb128 0x3a
 9190 1ccf 671C0000 		.4byte	0x1c67
 9191 1cd3 3A       		.uleb128 0x3a
 9192 1cd4 6D1C0000 		.4byte	0x1c6d
 9193 1cd8 3E       		.uleb128 0x3e
 9194 1cd9 1A180000 		.4byte	0x181a
 9195 1cdd E2040000 		.4byte	.L99
 9196 1ce1 22       		.uleb128 0x22
 9197 1ce2 06060000 		.4byte	.LBB32
 9198 1ce6 16060000 		.4byte	.LBE32
 9199 1cea F71C0000 		.4byte	0x1cf7
 9200 1cee 3F       		.uleb128 0x3f
ARM GAS  /tmp/ccdPJtdr.s 			page 250


 9201 1cef 23180000 		.4byte	0x1823
 9202 1cf3 02       		.byte	0x2
 9203 1cf4 91       		.byte	0x91
 9204 1cf5 5C       		.sleb128 -36
 9205 1cf6 00       		.byte	0
 9206 1cf7 23       		.uleb128 0x23
 9207 1cf8 BC030000 		.4byte	.LVL47
 9208 1cfc 2E200000 		.4byte	0x202e
 9209 1d00 24       		.uleb128 0x24
 9210 1d01 90040000 		.4byte	.LVL57
 9211 1d05 CF090000 		.4byte	0x9cf
 9212 1d09 2B1D0000 		.4byte	0x1d2b
 9213 1d0d 25       		.uleb128 0x25
 9214 1d0e 01       		.byte	0x1
 9215 1d0f 50       		.byte	0x50
 9216 1d10 02       		.byte	0x2
 9217 1d11 74       		.byte	0x74
 9218 1d12 00       		.sleb128 0
 9219 1d13 25       		.uleb128 0x25
 9220 1d14 01       		.byte	0x1
 9221 1d15 51       		.byte	0x51
 9222 1d16 01       		.byte	0x1
 9223 1d17 31       		.byte	0x31
 9224 1d18 25       		.uleb128 0x25
 9225 1d19 01       		.byte	0x1
 9226 1d1a 52       		.byte	0x52
 9227 1d1b 01       		.byte	0x1
 9228 1d1c 31       		.byte	0x31
 9229 1d1d 25       		.uleb128 0x25
 9230 1d1e 01       		.byte	0x1
 9231 1d1f 53       		.byte	0x53
 9232 1d20 02       		.byte	0x2
 9233 1d21 76       		.byte	0x76
 9234 1d22 00       		.sleb128 0
 9235 1d23 25       		.uleb128 0x25
 9236 1d24 02       		.byte	0x2
 9237 1d25 7D       		.byte	0x7d
 9238 1d26 00       		.sleb128 0
 9239 1d27 02       		.byte	0x2
 9240 1d28 77       		.byte	0x77
 9241 1d29 00       		.sleb128 0
 9242 1d2a 00       		.byte	0
 9243 1d2b 23       		.uleb128 0x23
 9244 1d2c D6040000 		.4byte	.LVL62
 9245 1d30 2E200000 		.4byte	0x202e
 9246 1d34 23       		.uleb128 0x23
 9247 1d35 86050000 		.4byte	.LVL74
 9248 1d39 2E200000 		.4byte	0x202e
 9249 1d3d 26       		.uleb128 0x26
 9250 1d3e F4050000 		.4byte	.LVL79
 9251 1d42 1F090000 		.4byte	0x91f
 9252 1d46 25       		.uleb128 0x25
 9253 1d47 01       		.byte	0x1
 9254 1d48 50       		.byte	0x50
 9255 1d49 02       		.byte	0x2
 9256 1d4a 74       		.byte	0x74
 9257 1d4b 00       		.sleb128 0
ARM GAS  /tmp/ccdPJtdr.s 			page 251


 9258 1d4c 25       		.uleb128 0x25
 9259 1d4d 01       		.byte	0x1
 9260 1d4e 51       		.byte	0x51
 9261 1d4f 02       		.byte	0x2
 9262 1d50 76       		.byte	0x76
 9263 1d51 00       		.sleb128 0
 9264 1d52 25       		.uleb128 0x25
 9265 1d53 01       		.byte	0x1
 9266 1d54 52       		.byte	0x52
 9267 1d55 02       		.byte	0x2
 9268 1d56 77       		.byte	0x77
 9269 1d57 00       		.sleb128 0
 9270 1d58 00       		.byte	0
 9271 1d59 00       		.byte	0
 9272 1d5a 00       		.byte	0
 9273 1d5b 00       		.byte	0
 9274 1d5c 37       		.uleb128 0x37
 9275 1d5d 1E160000 		.4byte	0x161e
 9276 1d61 98080000 		.4byte	.LFB74
 9277 1d65 60090000 		.4byte	.LFE74
 9278 1d69 95180000 		.4byte	.LLST61
 9279 1d6d 01       		.byte	0x1
 9280 1d6e FD1D0000 		.4byte	0x1dfd
 9281 1d72 38       		.uleb128 0x38
 9282 1d73 31160000 		.4byte	0x1631
 9283 1d77 B5180000 		.4byte	.LLST62
 9284 1d7b 40       		.uleb128 0x40
 9285 1d7c 3D160000 		.4byte	0x163d
 9286 1d80 01       		.byte	0x1
 9287 1d81 51       		.byte	0x51
 9288 1d82 38       		.uleb128 0x38
 9289 1d83 49160000 		.4byte	0x1649
 9290 1d87 E1180000 		.4byte	.LLST63
 9291 1d8b 38       		.uleb128 0x38
 9292 1d8c 55160000 		.4byte	0x1655
 9293 1d90 30190000 		.4byte	.LLST64
 9294 1d94 3A       		.uleb128 0x3a
 9295 1d95 61160000 		.4byte	0x1661
 9296 1d99 3A       		.uleb128 0x3a
 9297 1d9a 6D160000 		.4byte	0x166d
 9298 1d9e 3B       		.uleb128 0x3b
 9299 1d9f 79160000 		.4byte	0x1679
 9300 1da3 00       		.byte	0
 9301 1da4 39       		.uleb128 0x39
 9302 1da5 A4080000 		.4byte	.LBB39
 9303 1da9 4A090000 		.4byte	.LBE39
 9304 1dad 38       		.uleb128 0x38
 9305 1dae 55160000 		.4byte	0x1655
 9306 1db2 8B190000 		.4byte	.LLST65
 9307 1db6 38       		.uleb128 0x38
 9308 1db7 49160000 		.4byte	0x1649
 9309 1dbb DB190000 		.4byte	.LLST66
 9310 1dbf 38       		.uleb128 0x38
 9311 1dc0 3D160000 		.4byte	0x163d
 9312 1dc4 1F1A0000 		.4byte	.LLST67
 9313 1dc8 38       		.uleb128 0x38
 9314 1dc9 31160000 		.4byte	0x1631
ARM GAS  /tmp/ccdPJtdr.s 			page 252


 9315 1dcd 3D1A0000 		.4byte	.LLST68
 9316 1dd1 39       		.uleb128 0x39
 9317 1dd2 A4080000 		.4byte	.LBB40
 9318 1dd6 4A090000 		.4byte	.LBE40
 9319 1dda 3D       		.uleb128 0x3d
 9320 1ddb 941D0000 		.4byte	0x1d94
 9321 1ddf 5B1A0000 		.4byte	.LLST69
 9322 1de3 3D       		.uleb128 0x3d
 9323 1de4 991D0000 		.4byte	0x1d99
 9324 1de8 7B1A0000 		.4byte	.LLST70
 9325 1dec 3A       		.uleb128 0x3a
 9326 1ded 9E1D0000 		.4byte	0x1d9e
 9327 1df1 3E       		.uleb128 0x3e
 9328 1df2 85160000 		.4byte	0x1685
 9329 1df6 2E090000 		.4byte	.L239
 9330 1dfa 00       		.byte	0
 9331 1dfb 00       		.byte	0
 9332 1dfc 00       		.byte	0
 9333 1dfd 37       		.uleb128 0x37
 9334 1dfe 99140000 		.4byte	0x1499
 9335 1e02 F80A0000 		.4byte	.LFB77
 9336 1e06 1C0C0000 		.4byte	.LFE77
 9337 1e0a A41A0000 		.4byte	.LLST81
 9338 1e0e 01       		.byte	0x1
 9339 1e0f B21E0000 		.4byte	0x1eb2
 9340 1e13 38       		.uleb128 0x38
 9341 1e14 AC140000 		.4byte	0x14ac
 9342 1e18 C41A0000 		.4byte	.LLST82
 9343 1e1c 38       		.uleb128 0x38
 9344 1e1d B8140000 		.4byte	0x14b8
 9345 1e21 F01A0000 		.4byte	.LLST83
 9346 1e25 38       		.uleb128 0x38
 9347 1e26 C4140000 		.4byte	0x14c4
 9348 1e2a 281B0000 		.4byte	.LLST84
 9349 1e2e 38       		.uleb128 0x38
 9350 1e2f D0140000 		.4byte	0x14d0
 9351 1e33 541B0000 		.4byte	.LLST85
 9352 1e37 3A       		.uleb128 0x3a
 9353 1e38 DC140000 		.4byte	0x14dc
 9354 1e3c 3A       		.uleb128 0x3a
 9355 1e3d E8140000 		.4byte	0x14e8
 9356 1e41 3B       		.uleb128 0x3b
 9357 1e42 F4140000 		.4byte	0x14f4
 9358 1e46 00       		.byte	0
 9359 1e47 39       		.uleb128 0x39
 9360 1e48 040B0000 		.4byte	.LBB43
 9361 1e4c 040C0000 		.4byte	.LBE43
 9362 1e50 38       		.uleb128 0x38
 9363 1e51 D0140000 		.4byte	0x14d0
 9364 1e55 9A1B0000 		.4byte	.LLST86
 9365 1e59 38       		.uleb128 0x38
 9366 1e5a C4140000 		.4byte	0x14c4
 9367 1e5e E01B0000 		.4byte	.LLST87
 9368 1e62 38       		.uleb128 0x38
 9369 1e63 B8140000 		.4byte	0x14b8
 9370 1e67 1A1C0000 		.4byte	.LLST88
 9371 1e6b 38       		.uleb128 0x38
ARM GAS  /tmp/ccdPJtdr.s 			page 253


 9372 1e6c AC140000 		.4byte	0x14ac
 9373 1e70 601C0000 		.4byte	.LLST89
 9374 1e74 39       		.uleb128 0x39
 9375 1e75 040B0000 		.4byte	.LBB44
 9376 1e79 040C0000 		.4byte	.LBE44
 9377 1e7d 3D       		.uleb128 0x3d
 9378 1e7e 371E0000 		.4byte	0x1e37
 9379 1e82 7E1C0000 		.4byte	.LLST90
 9380 1e86 3D       		.uleb128 0x3d
 9381 1e87 3C1E0000 		.4byte	0x1e3c
 9382 1e8b 9E1C0000 		.4byte	.LLST91
 9383 1e8f 3A       		.uleb128 0x3a
 9384 1e90 411E0000 		.4byte	0x1e41
 9385 1e94 3E       		.uleb128 0x3e
 9386 1e95 00150000 		.4byte	0x1500
 9387 1e99 AC0B0000 		.4byte	.L293
 9388 1e9d 23       		.uleb128 0x23
 9389 1e9e 9A0B0000 		.4byte	.LVL159
 9390 1ea2 58200000 		.4byte	0x2058
 9391 1ea6 23       		.uleb128 0x23
 9392 1ea7 D60B0000 		.4byte	.LVL164
 9393 1eab 58200000 		.4byte	0x2058
 9394 1eaf 00       		.byte	0
 9395 1eb0 00       		.byte	0
 9396 1eb1 00       		.byte	0
 9397 1eb2 41       		.uleb128 0x41
 9398 1eb3 5A0A0000 		.4byte	0xa5a
 9399 1eb7 640F0000 		.4byte	.LFB114
 9400 1ebb 960F0000 		.4byte	.LFE114
 9401 1ebf 02       		.byte	0x2
 9402 1ec0 7D       		.byte	0x7d
 9403 1ec1 00       		.sleb128 0
 9404 1ec2 01       		.byte	0x1
 9405 1ec3 F61E0000 		.4byte	0x1ef6
 9406 1ec7 38       		.uleb128 0x38
 9407 1ec8 680A0000 		.4byte	0xa68
 9408 1ecc C71C0000 		.4byte	.LLST117
 9409 1ed0 39       		.uleb128 0x39
 9410 1ed1 800F0000 		.4byte	.LBB50
 9411 1ed5 960F0000 		.4byte	.LBE50
 9412 1ed9 38       		.uleb128 0x38
 9413 1eda 680A0000 		.4byte	0xa68
 9414 1ede F31C0000 		.4byte	.LLST118
 9415 1ee2 29       		.uleb128 0x29
 9416 1ee3 940F0000 		.4byte	.LVL224
 9417 1ee7 01       		.byte	0x1
 9418 1ee8 39070000 		.4byte	0x739
 9419 1eec 25       		.uleb128 0x25
 9420 1eed 01       		.byte	0x1
 9421 1eee 50       		.byte	0x50
 9422 1eef 03       		.byte	0x3
 9423 1ef0 F3       		.byte	0xf3
 9424 1ef1 01       		.uleb128 0x1
 9425 1ef2 50       		.byte	0x50
 9426 1ef3 00       		.byte	0
 9427 1ef4 00       		.byte	0
 9428 1ef5 00       		.byte	0
ARM GAS  /tmp/ccdPJtdr.s 			page 254


 9429 1ef6 41       		.uleb128 0x41
 9430 1ef7 CC0A0000 		.4byte	0xacc
 9431 1efb B8110000 		.4byte	.LFB111
 9432 1eff 14120000 		.4byte	.LFE111
 9433 1f03 02       		.byte	0x2
 9434 1f04 7D       		.byte	0x7d
 9435 1f05 00       		.sleb128 0
 9436 1f06 01       		.byte	0x1
 9437 1f07 321F0000 		.4byte	0x1f32
 9438 1f0b 38       		.uleb128 0x38
 9439 1f0c DA0A0000 		.4byte	0xada
 9440 1f10 141D0000 		.4byte	.LLST135
 9441 1f14 39       		.uleb128 0x39
 9442 1f15 FC110000 		.4byte	.LBB59
 9443 1f19 14120000 		.4byte	.LBE59
 9444 1f1d 38       		.uleb128 0x38
 9445 1f1e DA0A0000 		.4byte	0xada
 9446 1f22 401D0000 		.4byte	.LLST136
 9447 1f26 2B       		.uleb128 0x2b
 9448 1f27 0C120000 		.4byte	.LVL263
 9449 1f2b 01       		.byte	0x1
 9450 1f2c E0070000 		.4byte	0x7e0
 9451 1f30 00       		.byte	0
 9452 1f31 00       		.byte	0
 9453 1f32 41       		.uleb128 0x41
 9454 1f33 750A0000 		.4byte	0xa75
 9455 1f37 1A120000 		.4byte	.LFB113
 9456 1f3b 70120000 		.4byte	.LFE113
 9457 1f3f 02       		.byte	0x2
 9458 1f40 7D       		.byte	0x7d
 9459 1f41 00       		.sleb128 0
 9460 1f42 01       		.byte	0x1
 9461 1f43 6E1F0000 		.4byte	0x1f6e
 9462 1f47 38       		.uleb128 0x38
 9463 1f48 830A0000 		.4byte	0xa83
 9464 1f4c 611D0000 		.4byte	.LLST138
 9465 1f50 39       		.uleb128 0x39
 9466 1f51 5A120000 		.4byte	.LBB63
 9467 1f55 70120000 		.4byte	.LBE63
 9468 1f59 38       		.uleb128 0x38
 9469 1f5a 830A0000 		.4byte	0xa83
 9470 1f5e 8D1D0000 		.4byte	.LLST139
 9471 1f62 2B       		.uleb128 0x2b
 9472 1f63 6A120000 		.4byte	.LVL268
 9473 1f67 01       		.byte	0x1
 9474 1f68 E0070000 		.4byte	0x7e0
 9475 1f6c 00       		.byte	0
 9476 1f6d 00       		.byte	0
 9477 1f6e 41       		.uleb128 0x41
 9478 1f6f C90B0000 		.4byte	0xbc9
 9479 1f73 40130000 		.4byte	.LFB106
 9480 1f77 8A130000 		.4byte	.LFE106
 9481 1f7b 02       		.byte	0x2
 9482 1f7c 7D       		.byte	0x7d
 9483 1f7d 00       		.sleb128 0
 9484 1f7e 01       		.byte	0x1
 9485 1f7f AE1F0000 		.4byte	0x1fae
ARM GAS  /tmp/ccdPJtdr.s 			page 255


 9486 1f83 38       		.uleb128 0x38
 9487 1f84 D70B0000 		.4byte	0xbd7
 9488 1f88 AE1D0000 		.4byte	.LLST144
 9489 1f8c 22       		.uleb128 0x22
 9490 1f8d 66130000 		.4byte	.LBB68
 9491 1f91 78130000 		.4byte	.LBE68
 9492 1f95 A31F0000 		.4byte	0x1fa3
 9493 1f99 38       		.uleb128 0x38
 9494 1f9a D70B0000 		.4byte	0xbd7
 9495 1f9e DA1D0000 		.4byte	.LLST145
 9496 1fa2 00       		.byte	0
 9497 1fa3 2B       		.uleb128 0x2b
 9498 1fa4 88130000 		.4byte	.LVL286
 9499 1fa8 01       		.byte	0x1
 9500 1fa9 64080000 		.4byte	0x864
 9501 1fad 00       		.byte	0
 9502 1fae 41       		.uleb128 0x41
 9503 1faf 200C0000 		.4byte	0xc20
 9504 1fb3 8A130000 		.4byte	.LFB104
 9505 1fb7 CC130000 		.4byte	.LFE104
 9506 1fbb 02       		.byte	0x2
 9507 1fbc 7D       		.byte	0x7d
 9508 1fbd 00       		.sleb128 0
 9509 1fbe 01       		.byte	0x1
 9510 1fbf F21F0000 		.4byte	0x1ff2
 9511 1fc3 38       		.uleb128 0x38
 9512 1fc4 2E0C0000 		.4byte	0xc2e
 9513 1fc8 ED1D0000 		.4byte	.LLST146
 9514 1fcc 39       		.uleb128 0x39
 9515 1fcd B4130000 		.4byte	.LBB72
 9516 1fd1 CC130000 		.4byte	.LBE72
 9517 1fd5 38       		.uleb128 0x38
 9518 1fd6 2E0C0000 		.4byte	0xc2e
 9519 1fda 191E0000 		.4byte	.LLST147
 9520 1fde 29       		.uleb128 0x29
 9521 1fdf C6130000 		.4byte	.LVL289
 9522 1fe3 01       		.byte	0x1
 9523 1fe4 64080000 		.4byte	0x864
 9524 1fe8 25       		.uleb128 0x25
 9525 1fe9 01       		.byte	0x1
 9526 1fea 50       		.byte	0x50
 9527 1feb 03       		.byte	0x3
 9528 1fec F3       		.byte	0xf3
 9529 1fed 01       		.uleb128 0x1
 9530 1fee 50       		.byte	0x50
 9531 1fef 00       		.byte	0
 9532 1ff0 00       		.byte	0
 9533 1ff1 00       		.byte	0
 9534 1ff2 41       		.uleb128 0x41
 9535 1ff3 15110000 		.4byte	0x1115
 9536 1ff7 BE150000 		.4byte	.LFB91
 9537 1ffb C0150000 		.4byte	.LFE91
 9538 1fff 02       		.byte	0x2
 9539 2000 7D       		.byte	0x7d
 9540 2001 00       		.sleb128 0
 9541 2002 01       		.byte	0x1
 9542 2003 0F200000 		.4byte	0x200f
ARM GAS  /tmp/ccdPJtdr.s 			page 256


 9543 2007 40       		.uleb128 0x40
 9544 2008 24110000 		.4byte	0x1124
 9545 200c 01       		.byte	0x1
 9546 200d 50       		.byte	0x50
 9547 200e 00       		.byte	0
 9548 200f 41       		.uleb128 0x41
 9549 2010 B3060000 		.4byte	0x6b3
 9550 2014 CE170000 		.4byte	.LFB124
 9551 2018 D2170000 		.4byte	.LFE124
 9552 201c 02       		.byte	0x2
 9553 201d 7D       		.byte	0x7d
 9554 201e 00       		.sleb128 0
 9555 201f 01       		.byte	0x1
 9556 2020 2E200000 		.4byte	0x202e
 9557 2024 38       		.uleb128 0x38
 9558 2025 C6060000 		.4byte	0x6c6
 9559 2029 3A1E0000 		.4byte	.LLST171
 9560 202d 00       		.byte	0
 9561 202e 42       		.uleb128 0x42
 9562 202f 01       		.byte	0x1
 9563 2030 01       		.byte	0x1
 9564 2031 66060000 		.4byte	.LASF188
 9565 2035 66060000 		.4byte	.LASF188
 9566 2039 0B       		.byte	0xb
 9567 203a 2A01     		.2byte	0x12a
 9568 203c 42       		.uleb128 0x42
 9569 203d 01       		.byte	0x1
 9570 203e 01       		.byte	0x1
 9571 203f 5B040000 		.4byte	.LASF189
 9572 2043 5B040000 		.4byte	.LASF189
 9573 2047 09       		.byte	0x9
 9574 2048 7C01     		.2byte	0x17c
 9575 204a 42       		.uleb128 0x42
 9576 204b 01       		.byte	0x1
 9577 204c 01       		.byte	0x1
 9578 204d 97050000 		.4byte	.LASF190
 9579 2051 97050000 		.4byte	.LASF190
 9580 2055 09       		.byte	0x9
 9581 2056 7B01     		.2byte	0x17b
 9582 2058 42       		.uleb128 0x42
 9583 2059 01       		.byte	0x1
 9584 205a 01       		.byte	0x1
 9585 205b 28020000 		.4byte	.LASF191
 9586 205f 28020000 		.4byte	.LASF191
 9587 2063 09       		.byte	0x9
 9588 2064 7A01     		.2byte	0x17a
 9589 2066 00       		.byte	0
 9590              		.section	.debug_abbrev,"",%progbits
 9591              	.Ldebug_abbrev0:
 9592 0000 01       		.uleb128 0x1
 9593 0001 11       		.uleb128 0x11
 9594 0002 01       		.byte	0x1
 9595 0003 25       		.uleb128 0x25
 9596 0004 0E       		.uleb128 0xe
 9597 0005 13       		.uleb128 0x13
 9598 0006 0B       		.uleb128 0xb
 9599 0007 03       		.uleb128 0x3
ARM GAS  /tmp/ccdPJtdr.s 			page 257


 9600 0008 0E       		.uleb128 0xe
 9601 0009 1B       		.uleb128 0x1b
 9602 000a 0E       		.uleb128 0xe
 9603 000b 11       		.uleb128 0x11
 9604 000c 01       		.uleb128 0x1
 9605 000d 12       		.uleb128 0x12
 9606 000e 01       		.uleb128 0x1
 9607 000f 10       		.uleb128 0x10
 9608 0010 06       		.uleb128 0x6
 9609 0011 00       		.byte	0
 9610 0012 00       		.byte	0
 9611 0013 02       		.uleb128 0x2
 9612 0014 24       		.uleb128 0x24
 9613 0015 00       		.byte	0
 9614 0016 0B       		.uleb128 0xb
 9615 0017 0B       		.uleb128 0xb
 9616 0018 3E       		.uleb128 0x3e
 9617 0019 0B       		.uleb128 0xb
 9618 001a 03       		.uleb128 0x3
 9619 001b 0E       		.uleb128 0xe
 9620 001c 00       		.byte	0
 9621 001d 00       		.byte	0
 9622 001e 03       		.uleb128 0x3
 9623 001f 16       		.uleb128 0x16
 9624 0020 00       		.byte	0
 9625 0021 03       		.uleb128 0x3
 9626 0022 0E       		.uleb128 0xe
 9627 0023 3A       		.uleb128 0x3a
 9628 0024 0B       		.uleb128 0xb
 9629 0025 3B       		.uleb128 0x3b
 9630 0026 0B       		.uleb128 0xb
 9631 0027 49       		.uleb128 0x49
 9632 0028 13       		.uleb128 0x13
 9633 0029 00       		.byte	0
 9634 002a 00       		.byte	0
 9635 002b 04       		.uleb128 0x4
 9636 002c 24       		.uleb128 0x24
 9637 002d 00       		.byte	0
 9638 002e 0B       		.uleb128 0xb
 9639 002f 0B       		.uleb128 0xb
 9640 0030 3E       		.uleb128 0x3e
 9641 0031 0B       		.uleb128 0xb
 9642 0032 03       		.uleb128 0x3
 9643 0033 08       		.uleb128 0x8
 9644 0034 00       		.byte	0
 9645 0035 00       		.byte	0
 9646 0036 05       		.uleb128 0x5
 9647 0037 26       		.uleb128 0x26
 9648 0038 00       		.byte	0
 9649 0039 49       		.uleb128 0x49
 9650 003a 13       		.uleb128 0x13
 9651 003b 00       		.byte	0
 9652 003c 00       		.byte	0
 9653 003d 06       		.uleb128 0x6
 9654 003e 35       		.uleb128 0x35
 9655 003f 00       		.byte	0
 9656 0040 49       		.uleb128 0x49
ARM GAS  /tmp/ccdPJtdr.s 			page 258


 9657 0041 13       		.uleb128 0x13
 9658 0042 00       		.byte	0
 9659 0043 00       		.byte	0
 9660 0044 07       		.uleb128 0x7
 9661 0045 34       		.uleb128 0x34
 9662 0046 00       		.byte	0
 9663 0047 03       		.uleb128 0x3
 9664 0048 0E       		.uleb128 0xe
 9665 0049 3A       		.uleb128 0x3a
 9666 004a 0B       		.uleb128 0xb
 9667 004b 3B       		.uleb128 0x3b
 9668 004c 05       		.uleb128 0x5
 9669 004d 49       		.uleb128 0x49
 9670 004e 13       		.uleb128 0x13
 9671 004f 3F       		.uleb128 0x3f
 9672 0050 0C       		.uleb128 0xc
 9673 0051 3C       		.uleb128 0x3c
 9674 0052 0C       		.uleb128 0xc
 9675 0053 00       		.byte	0
 9676 0054 00       		.byte	0
 9677 0055 08       		.uleb128 0x8
 9678 0056 34       		.uleb128 0x34
 9679 0057 00       		.byte	0
 9680 0058 03       		.uleb128 0x3
 9681 0059 0E       		.uleb128 0xe
 9682 005a 3A       		.uleb128 0x3a
 9683 005b 0B       		.uleb128 0xb
 9684 005c 3B       		.uleb128 0x3b
 9685 005d 0B       		.uleb128 0xb
 9686 005e 49       		.uleb128 0x49
 9687 005f 13       		.uleb128 0x13
 9688 0060 3F       		.uleb128 0x3f
 9689 0061 0C       		.uleb128 0xc
 9690 0062 3C       		.uleb128 0x3c
 9691 0063 0C       		.uleb128 0xc
 9692 0064 00       		.byte	0
 9693 0065 00       		.byte	0
 9694 0066 09       		.uleb128 0x9
 9695 0067 01       		.uleb128 0x1
 9696 0068 01       		.byte	0x1
 9697 0069 49       		.uleb128 0x49
 9698 006a 13       		.uleb128 0x13
 9699 006b 01       		.uleb128 0x1
 9700 006c 13       		.uleb128 0x13
 9701 006d 00       		.byte	0
 9702 006e 00       		.byte	0
 9703 006f 0A       		.uleb128 0xa
 9704 0070 21       		.uleb128 0x21
 9705 0071 00       		.byte	0
 9706 0072 49       		.uleb128 0x49
 9707 0073 13       		.uleb128 0x13
 9708 0074 2F       		.uleb128 0x2f
 9709 0075 0B       		.uleb128 0xb
 9710 0076 00       		.byte	0
 9711 0077 00       		.byte	0
 9712 0078 0B       		.uleb128 0xb
 9713 0079 13       		.uleb128 0x13
ARM GAS  /tmp/ccdPJtdr.s 			page 259


 9714 007a 01       		.byte	0x1
 9715 007b 0B       		.uleb128 0xb
 9716 007c 0B       		.uleb128 0xb
 9717 007d 3A       		.uleb128 0x3a
 9718 007e 0B       		.uleb128 0xb
 9719 007f 3B       		.uleb128 0x3b
 9720 0080 05       		.uleb128 0x5
 9721 0081 01       		.uleb128 0x1
 9722 0082 13       		.uleb128 0x13
 9723 0083 00       		.byte	0
 9724 0084 00       		.byte	0
 9725 0085 0C       		.uleb128 0xc
 9726 0086 0D       		.uleb128 0xd
 9727 0087 00       		.byte	0
 9728 0088 03       		.uleb128 0x3
 9729 0089 08       		.uleb128 0x8
 9730 008a 3A       		.uleb128 0x3a
 9731 008b 0B       		.uleb128 0xb
 9732 008c 3B       		.uleb128 0x3b
 9733 008d 05       		.uleb128 0x5
 9734 008e 49       		.uleb128 0x49
 9735 008f 13       		.uleb128 0x13
 9736 0090 38       		.uleb128 0x38
 9737 0091 0A       		.uleb128 0xa
 9738 0092 00       		.byte	0
 9739 0093 00       		.byte	0
 9740 0094 0D       		.uleb128 0xd
 9741 0095 0D       		.uleb128 0xd
 9742 0096 00       		.byte	0
 9743 0097 03       		.uleb128 0x3
 9744 0098 0E       		.uleb128 0xe
 9745 0099 3A       		.uleb128 0x3a
 9746 009a 0B       		.uleb128 0xb
 9747 009b 3B       		.uleb128 0x3b
 9748 009c 05       		.uleb128 0x5
 9749 009d 49       		.uleb128 0x49
 9750 009e 13       		.uleb128 0x13
 9751 009f 38       		.uleb128 0x38
 9752 00a0 0A       		.uleb128 0xa
 9753 00a1 00       		.byte	0
 9754 00a2 00       		.byte	0
 9755 00a3 0E       		.uleb128 0xe
 9756 00a4 16       		.uleb128 0x16
 9757 00a5 00       		.byte	0
 9758 00a6 03       		.uleb128 0x3
 9759 00a7 0E       		.uleb128 0xe
 9760 00a8 3A       		.uleb128 0x3a
 9761 00a9 0B       		.uleb128 0xb
 9762 00aa 3B       		.uleb128 0x3b
 9763 00ab 05       		.uleb128 0x5
 9764 00ac 49       		.uleb128 0x49
 9765 00ad 13       		.uleb128 0x13
 9766 00ae 00       		.byte	0
 9767 00af 00       		.byte	0
 9768 00b0 0F       		.uleb128 0xf
 9769 00b1 04       		.uleb128 0x4
 9770 00b2 01       		.byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 260


 9771 00b3 0B       		.uleb128 0xb
 9772 00b4 0B       		.uleb128 0xb
 9773 00b5 49       		.uleb128 0x49
 9774 00b6 13       		.uleb128 0x13
 9775 00b7 3A       		.uleb128 0x3a
 9776 00b8 0B       		.uleb128 0xb
 9777 00b9 3B       		.uleb128 0x3b
 9778 00ba 0B       		.uleb128 0xb
 9779 00bb 01       		.uleb128 0x1
 9780 00bc 13       		.uleb128 0x13
 9781 00bd 00       		.byte	0
 9782 00be 00       		.byte	0
 9783 00bf 10       		.uleb128 0x10
 9784 00c0 28       		.uleb128 0x28
 9785 00c1 00       		.byte	0
 9786 00c2 03       		.uleb128 0x3
 9787 00c3 0E       		.uleb128 0xe
 9788 00c4 1C       		.uleb128 0x1c
 9789 00c5 0B       		.uleb128 0xb
 9790 00c6 00       		.byte	0
 9791 00c7 00       		.byte	0
 9792 00c8 11       		.uleb128 0x11
 9793 00c9 28       		.uleb128 0x28
 9794 00ca 00       		.byte	0
 9795 00cb 03       		.uleb128 0x3
 9796 00cc 08       		.uleb128 0x8
 9797 00cd 1C       		.uleb128 0x1c
 9798 00ce 0B       		.uleb128 0xb
 9799 00cf 00       		.byte	0
 9800 00d0 00       		.byte	0
 9801 00d1 12       		.uleb128 0x12
 9802 00d2 13       		.uleb128 0x13
 9803 00d3 01       		.byte	0x1
 9804 00d4 0B       		.uleb128 0xb
 9805 00d5 0B       		.uleb128 0xb
 9806 00d6 3A       		.uleb128 0x3a
 9807 00d7 0B       		.uleb128 0xb
 9808 00d8 3B       		.uleb128 0x3b
 9809 00d9 0B       		.uleb128 0xb
 9810 00da 01       		.uleb128 0x1
 9811 00db 13       		.uleb128 0x13
 9812 00dc 00       		.byte	0
 9813 00dd 00       		.byte	0
 9814 00de 13       		.uleb128 0x13
 9815 00df 0D       		.uleb128 0xd
 9816 00e0 00       		.byte	0
 9817 00e1 03       		.uleb128 0x3
 9818 00e2 0E       		.uleb128 0xe
 9819 00e3 3A       		.uleb128 0x3a
 9820 00e4 0B       		.uleb128 0xb
 9821 00e5 3B       		.uleb128 0x3b
 9822 00e6 0B       		.uleb128 0xb
 9823 00e7 49       		.uleb128 0x49
 9824 00e8 13       		.uleb128 0x13
 9825 00e9 38       		.uleb128 0x38
 9826 00ea 0A       		.uleb128 0xa
 9827 00eb 00       		.byte	0
ARM GAS  /tmp/ccdPJtdr.s 			page 261


 9828 00ec 00       		.byte	0
 9829 00ed 14       		.uleb128 0x14
 9830 00ee 13       		.uleb128 0x13
 9831 00ef 01       		.byte	0x1
 9832 00f0 03       		.uleb128 0x3
 9833 00f1 0E       		.uleb128 0xe
 9834 00f2 0B       		.uleb128 0xb
 9835 00f3 0B       		.uleb128 0xb
 9836 00f4 3A       		.uleb128 0x3a
 9837 00f5 0B       		.uleb128 0xb
 9838 00f6 3B       		.uleb128 0x3b
 9839 00f7 0B       		.uleb128 0xb
 9840 00f8 01       		.uleb128 0x1
 9841 00f9 13       		.uleb128 0x13
 9842 00fa 00       		.byte	0
 9843 00fb 00       		.byte	0
 9844 00fc 15       		.uleb128 0x15
 9845 00fd 0F       		.uleb128 0xf
 9846 00fe 00       		.byte	0
 9847 00ff 0B       		.uleb128 0xb
 9848 0100 0B       		.uleb128 0xb
 9849 0101 49       		.uleb128 0x49
 9850 0102 13       		.uleb128 0x13
 9851 0103 00       		.byte	0
 9852 0104 00       		.byte	0
 9853 0105 16       		.uleb128 0x16
 9854 0106 0F       		.uleb128 0xf
 9855 0107 00       		.byte	0
 9856 0108 0B       		.uleb128 0xb
 9857 0109 0B       		.uleb128 0xb
 9858 010a 00       		.byte	0
 9859 010b 00       		.byte	0
 9860 010c 17       		.uleb128 0x17
 9861 010d 15       		.uleb128 0x15
 9862 010e 01       		.byte	0x1
 9863 010f 27       		.uleb128 0x27
 9864 0110 0C       		.uleb128 0xc
 9865 0111 01       		.uleb128 0x1
 9866 0112 13       		.uleb128 0x13
 9867 0113 00       		.byte	0
 9868 0114 00       		.byte	0
 9869 0115 18       		.uleb128 0x18
 9870 0116 05       		.uleb128 0x5
 9871 0117 00       		.byte	0
 9872 0118 49       		.uleb128 0x49
 9873 0119 13       		.uleb128 0x13
 9874 011a 00       		.byte	0
 9875 011b 00       		.byte	0
 9876 011c 19       		.uleb128 0x19
 9877 011d 0D       		.uleb128 0xd
 9878 011e 00       		.byte	0
 9879 011f 03       		.uleb128 0x3
 9880 0120 08       		.uleb128 0x8
 9881 0121 3A       		.uleb128 0x3a
 9882 0122 0B       		.uleb128 0xb
 9883 0123 3B       		.uleb128 0x3b
 9884 0124 0B       		.uleb128 0xb
ARM GAS  /tmp/ccdPJtdr.s 			page 262


 9885 0125 49       		.uleb128 0x49
 9886 0126 13       		.uleb128 0x13
 9887 0127 38       		.uleb128 0x38
 9888 0128 0A       		.uleb128 0xa
 9889 0129 00       		.byte	0
 9890 012a 00       		.byte	0
 9891 012b 1A       		.uleb128 0x1a
 9892 012c 2E       		.uleb128 0x2e
 9893 012d 01       		.byte	0x1
 9894 012e 3F       		.uleb128 0x3f
 9895 012f 0C       		.uleb128 0xc
 9896 0130 03       		.uleb128 0x3
 9897 0131 0E       		.uleb128 0xe
 9898 0132 3A       		.uleb128 0x3a
 9899 0133 0B       		.uleb128 0xb
 9900 0134 3B       		.uleb128 0x3b
 9901 0135 05       		.uleb128 0x5
 9902 0136 27       		.uleb128 0x27
 9903 0137 0C       		.uleb128 0xc
 9904 0138 49       		.uleb128 0x49
 9905 0139 13       		.uleb128 0x13
 9906 013a 20       		.uleb128 0x20
 9907 013b 0B       		.uleb128 0xb
 9908 013c 01       		.uleb128 0x1
 9909 013d 13       		.uleb128 0x13
 9910 013e 00       		.byte	0
 9911 013f 00       		.byte	0
 9912 0140 1B       		.uleb128 0x1b
 9913 0141 05       		.uleb128 0x5
 9914 0142 00       		.byte	0
 9915 0143 03       		.uleb128 0x3
 9916 0144 0E       		.uleb128 0xe
 9917 0145 3A       		.uleb128 0x3a
 9918 0146 0B       		.uleb128 0xb
 9919 0147 3B       		.uleb128 0x3b
 9920 0148 05       		.uleb128 0x5
 9921 0149 49       		.uleb128 0x49
 9922 014a 13       		.uleb128 0x13
 9923 014b 00       		.byte	0
 9924 014c 00       		.byte	0
 9925 014d 1C       		.uleb128 0x1c
 9926 014e 2E       		.uleb128 0x2e
 9927 014f 01       		.byte	0x1
 9928 0150 03       		.uleb128 0x3
 9929 0151 0E       		.uleb128 0xe
 9930 0152 3A       		.uleb128 0x3a
 9931 0153 0B       		.uleb128 0xb
 9932 0154 3B       		.uleb128 0x3b
 9933 0155 05       		.uleb128 0x5
 9934 0156 27       		.uleb128 0x27
 9935 0157 0C       		.uleb128 0xc
 9936 0158 11       		.uleb128 0x11
 9937 0159 01       		.uleb128 0x1
 9938 015a 12       		.uleb128 0x12
 9939 015b 01       		.uleb128 0x1
 9940 015c 40       		.uleb128 0x40
 9941 015d 0A       		.uleb128 0xa
ARM GAS  /tmp/ccdPJtdr.s 			page 263


 9942 015e 9742     		.uleb128 0x2117
 9943 0160 0C       		.uleb128 0xc
 9944 0161 01       		.uleb128 0x1
 9945 0162 13       		.uleb128 0x13
 9946 0163 00       		.byte	0
 9947 0164 00       		.byte	0
 9948 0165 1D       		.uleb128 0x1d
 9949 0166 05       		.uleb128 0x5
 9950 0167 00       		.byte	0
 9951 0168 03       		.uleb128 0x3
 9952 0169 0E       		.uleb128 0xe
 9953 016a 3A       		.uleb128 0x3a
 9954 016b 0B       		.uleb128 0xb
 9955 016c 3B       		.uleb128 0x3b
 9956 016d 05       		.uleb128 0x5
 9957 016e 49       		.uleb128 0x49
 9958 016f 13       		.uleb128 0x13
 9959 0170 02       		.uleb128 0x2
 9960 0171 0A       		.uleb128 0xa
 9961 0172 00       		.byte	0
 9962 0173 00       		.byte	0
 9963 0174 1E       		.uleb128 0x1e
 9964 0175 2E       		.uleb128 0x2e
 9965 0176 01       		.byte	0x1
 9966 0177 03       		.uleb128 0x3
 9967 0178 0E       		.uleb128 0xe
 9968 0179 3A       		.uleb128 0x3a
 9969 017a 0B       		.uleb128 0xb
 9970 017b 3B       		.uleb128 0x3b
 9971 017c 05       		.uleb128 0x5
 9972 017d 27       		.uleb128 0x27
 9973 017e 0C       		.uleb128 0xc
 9974 017f 11       		.uleb128 0x11
 9975 0180 01       		.uleb128 0x1
 9976 0181 12       		.uleb128 0x12
 9977 0182 01       		.uleb128 0x1
 9978 0183 40       		.uleb128 0x40
 9979 0184 06       		.uleb128 0x6
 9980 0185 9742     		.uleb128 0x2117
 9981 0187 0C       		.uleb128 0xc
 9982 0188 01       		.uleb128 0x1
 9983 0189 13       		.uleb128 0x13
 9984 018a 00       		.byte	0
 9985 018b 00       		.byte	0
 9986 018c 1F       		.uleb128 0x1f
 9987 018d 34       		.uleb128 0x34
 9988 018e 00       		.byte	0
 9989 018f 03       		.uleb128 0x3
 9990 0190 0E       		.uleb128 0xe
 9991 0191 3A       		.uleb128 0x3a
 9992 0192 0B       		.uleb128 0xb
 9993 0193 3B       		.uleb128 0x3b
 9994 0194 05       		.uleb128 0x5
 9995 0195 49       		.uleb128 0x49
 9996 0196 13       		.uleb128 0x13
 9997 0197 02       		.uleb128 0x2
 9998 0198 0A       		.uleb128 0xa
ARM GAS  /tmp/ccdPJtdr.s 			page 264


 9999 0199 00       		.byte	0
 10000 019a 00       		.byte	0
 10001 019b 20       		.uleb128 0x20
 10002 019c 05       		.uleb128 0x5
 10003 019d 00       		.byte	0
 10004 019e 03       		.uleb128 0x3
 10005 019f 0E       		.uleb128 0xe
 10006 01a0 3A       		.uleb128 0x3a
 10007 01a1 0B       		.uleb128 0xb
 10008 01a2 3B       		.uleb128 0x3b
 10009 01a3 05       		.uleb128 0x5
 10010 01a4 49       		.uleb128 0x49
 10011 01a5 13       		.uleb128 0x13
 10012 01a6 02       		.uleb128 0x2
 10013 01a7 06       		.uleb128 0x6
 10014 01a8 00       		.byte	0
 10015 01a9 00       		.byte	0
 10016 01aa 21       		.uleb128 0x21
 10017 01ab 34       		.uleb128 0x34
 10018 01ac 00       		.byte	0
 10019 01ad 03       		.uleb128 0x3
 10020 01ae 0E       		.uleb128 0xe
 10021 01af 3A       		.uleb128 0x3a
 10022 01b0 0B       		.uleb128 0xb
 10023 01b1 3B       		.uleb128 0x3b
 10024 01b2 05       		.uleb128 0x5
 10025 01b3 49       		.uleb128 0x49
 10026 01b4 13       		.uleb128 0x13
 10027 01b5 02       		.uleb128 0x2
 10028 01b6 06       		.uleb128 0x6
 10029 01b7 00       		.byte	0
 10030 01b8 00       		.byte	0
 10031 01b9 22       		.uleb128 0x22
 10032 01ba 0B       		.uleb128 0xb
 10033 01bb 01       		.byte	0x1
 10034 01bc 11       		.uleb128 0x11
 10035 01bd 01       		.uleb128 0x1
 10036 01be 12       		.uleb128 0x12
 10037 01bf 01       		.uleb128 0x1
 10038 01c0 01       		.uleb128 0x1
 10039 01c1 13       		.uleb128 0x13
 10040 01c2 00       		.byte	0
 10041 01c3 00       		.byte	0
 10042 01c4 23       		.uleb128 0x23
 10043 01c5 898201   		.uleb128 0x4109
 10044 01c8 00       		.byte	0
 10045 01c9 11       		.uleb128 0x11
 10046 01ca 01       		.uleb128 0x1
 10047 01cb 31       		.uleb128 0x31
 10048 01cc 13       		.uleb128 0x13
 10049 01cd 00       		.byte	0
 10050 01ce 00       		.byte	0
 10051 01cf 24       		.uleb128 0x24
 10052 01d0 898201   		.uleb128 0x4109
 10053 01d3 01       		.byte	0x1
 10054 01d4 11       		.uleb128 0x11
 10055 01d5 01       		.uleb128 0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 265


 10056 01d6 31       		.uleb128 0x31
 10057 01d7 13       		.uleb128 0x13
 10058 01d8 01       		.uleb128 0x1
 10059 01d9 13       		.uleb128 0x13
 10060 01da 00       		.byte	0
 10061 01db 00       		.byte	0
 10062 01dc 25       		.uleb128 0x25
 10063 01dd 8A8201   		.uleb128 0x410a
 10064 01e0 00       		.byte	0
 10065 01e1 02       		.uleb128 0x2
 10066 01e2 0A       		.uleb128 0xa
 10067 01e3 9142     		.uleb128 0x2111
 10068 01e5 0A       		.uleb128 0xa
 10069 01e6 00       		.byte	0
 10070 01e7 00       		.byte	0
 10071 01e8 26       		.uleb128 0x26
 10072 01e9 898201   		.uleb128 0x4109
 10073 01ec 01       		.byte	0x1
 10074 01ed 11       		.uleb128 0x11
 10075 01ee 01       		.uleb128 0x1
 10076 01ef 31       		.uleb128 0x31
 10077 01f0 13       		.uleb128 0x13
 10078 01f1 00       		.byte	0
 10079 01f2 00       		.byte	0
 10080 01f3 27       		.uleb128 0x27
 10081 01f4 2E       		.uleb128 0x2e
 10082 01f5 01       		.byte	0x1
 10083 01f6 03       		.uleb128 0x3
 10084 01f7 0E       		.uleb128 0xe
 10085 01f8 3A       		.uleb128 0x3a
 10086 01f9 0B       		.uleb128 0xb
 10087 01fa 3B       		.uleb128 0x3b
 10088 01fb 05       		.uleb128 0x5
 10089 01fc 27       		.uleb128 0x27
 10090 01fd 0C       		.uleb128 0xc
 10091 01fe 49       		.uleb128 0x49
 10092 01ff 13       		.uleb128 0x13
 10093 0200 11       		.uleb128 0x11
 10094 0201 01       		.uleb128 0x1
 10095 0202 12       		.uleb128 0x12
 10096 0203 01       		.uleb128 0x1
 10097 0204 40       		.uleb128 0x40
 10098 0205 06       		.uleb128 0x6
 10099 0206 9742     		.uleb128 0x2117
 10100 0208 0C       		.uleb128 0xc
 10101 0209 01       		.uleb128 0x1
 10102 020a 13       		.uleb128 0x13
 10103 020b 00       		.byte	0
 10104 020c 00       		.byte	0
 10105 020d 28       		.uleb128 0x28
 10106 020e 2E       		.uleb128 0x2e
 10107 020f 01       		.byte	0x1
 10108 0210 03       		.uleb128 0x3
 10109 0211 0E       		.uleb128 0xe
 10110 0212 3A       		.uleb128 0x3a
 10111 0213 0B       		.uleb128 0xb
 10112 0214 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccdPJtdr.s 			page 266


 10113 0215 05       		.uleb128 0x5
 10114 0216 27       		.uleb128 0x27
 10115 0217 0C       		.uleb128 0xc
 10116 0218 49       		.uleb128 0x49
 10117 0219 13       		.uleb128 0x13
 10118 021a 20       		.uleb128 0x20
 10119 021b 0B       		.uleb128 0xb
 10120 021c 01       		.uleb128 0x1
 10121 021d 13       		.uleb128 0x13
 10122 021e 00       		.byte	0
 10123 021f 00       		.byte	0
 10124 0220 29       		.uleb128 0x29
 10125 0221 898201   		.uleb128 0x4109
 10126 0224 01       		.byte	0x1
 10127 0225 11       		.uleb128 0x11
 10128 0226 01       		.uleb128 0x1
 10129 0227 9542     		.uleb128 0x2115
 10130 0229 0C       		.uleb128 0xc
 10131 022a 31       		.uleb128 0x31
 10132 022b 13       		.uleb128 0x13
 10133 022c 00       		.byte	0
 10134 022d 00       		.byte	0
 10135 022e 2A       		.uleb128 0x2a
 10136 022f 2E       		.uleb128 0x2e
 10137 0230 01       		.byte	0x1
 10138 0231 03       		.uleb128 0x3
 10139 0232 0E       		.uleb128 0xe
 10140 0233 3A       		.uleb128 0x3a
 10141 0234 0B       		.uleb128 0xb
 10142 0235 3B       		.uleb128 0x3b
 10143 0236 05       		.uleb128 0x5
 10144 0237 27       		.uleb128 0x27
 10145 0238 0C       		.uleb128 0xc
 10146 0239 20       		.uleb128 0x20
 10147 023a 0B       		.uleb128 0xb
 10148 023b 01       		.uleb128 0x1
 10149 023c 13       		.uleb128 0x13
 10150 023d 00       		.byte	0
 10151 023e 00       		.byte	0
 10152 023f 2B       		.uleb128 0x2b
 10153 0240 898201   		.uleb128 0x4109
 10154 0243 00       		.byte	0
 10155 0244 11       		.uleb128 0x11
 10156 0245 01       		.uleb128 0x1
 10157 0246 9542     		.uleb128 0x2115
 10158 0248 0C       		.uleb128 0xc
 10159 0249 31       		.uleb128 0x31
 10160 024a 13       		.uleb128 0x13
 10161 024b 00       		.byte	0
 10162 024c 00       		.byte	0
 10163 024d 2C       		.uleb128 0x2c
 10164 024e 2E       		.uleb128 0x2e
 10165 024f 01       		.byte	0x1
 10166 0250 3F       		.uleb128 0x3f
 10167 0251 0C       		.uleb128 0xc
 10168 0252 03       		.uleb128 0x3
 10169 0253 0E       		.uleb128 0xe
ARM GAS  /tmp/ccdPJtdr.s 			page 267


 10170 0254 3A       		.uleb128 0x3a
 10171 0255 0B       		.uleb128 0xb
 10172 0256 3B       		.uleb128 0x3b
 10173 0257 05       		.uleb128 0x5
 10174 0258 27       		.uleb128 0x27
 10175 0259 0C       		.uleb128 0xc
 10176 025a 49       		.uleb128 0x49
 10177 025b 13       		.uleb128 0x13
 10178 025c 11       		.uleb128 0x11
 10179 025d 01       		.uleb128 0x1
 10180 025e 12       		.uleb128 0x12
 10181 025f 01       		.uleb128 0x1
 10182 0260 40       		.uleb128 0x40
 10183 0261 0A       		.uleb128 0xa
 10184 0262 9742     		.uleb128 0x2117
 10185 0264 0C       		.uleb128 0xc
 10186 0265 01       		.uleb128 0x1
 10187 0266 13       		.uleb128 0x13
 10188 0267 00       		.byte	0
 10189 0268 00       		.byte	0
 10190 0269 2D       		.uleb128 0x2d
 10191 026a 2E       		.uleb128 0x2e
 10192 026b 01       		.byte	0x1
 10193 026c 3F       		.uleb128 0x3f
 10194 026d 0C       		.uleb128 0xc
 10195 026e 03       		.uleb128 0x3
 10196 026f 0E       		.uleb128 0xe
 10197 0270 3A       		.uleb128 0x3a
 10198 0271 0B       		.uleb128 0xb
 10199 0272 3B       		.uleb128 0x3b
 10200 0273 05       		.uleb128 0x5
 10201 0274 27       		.uleb128 0x27
 10202 0275 0C       		.uleb128 0xc
 10203 0276 20       		.uleb128 0x20
 10204 0277 0B       		.uleb128 0xb
 10205 0278 01       		.uleb128 0x1
 10206 0279 13       		.uleb128 0x13
 10207 027a 00       		.byte	0
 10208 027b 00       		.byte	0
 10209 027c 2E       		.uleb128 0x2e
 10210 027d 2E       		.uleb128 0x2e
 10211 027e 01       		.byte	0x1
 10212 027f 3F       		.uleb128 0x3f
 10213 0280 0C       		.uleb128 0xc
 10214 0281 03       		.uleb128 0x3
 10215 0282 0E       		.uleb128 0xe
 10216 0283 3A       		.uleb128 0x3a
 10217 0284 0B       		.uleb128 0xb
 10218 0285 3B       		.uleb128 0x3b
 10219 0286 05       		.uleb128 0x5
 10220 0287 27       		.uleb128 0x27
 10221 0288 0C       		.uleb128 0xc
 10222 0289 01       		.uleb128 0x1
 10223 028a 13       		.uleb128 0x13
 10224 028b 00       		.byte	0
 10225 028c 00       		.byte	0
 10226 028d 2F       		.uleb128 0x2f
ARM GAS  /tmp/ccdPJtdr.s 			page 268


 10227 028e 2E       		.uleb128 0x2e
 10228 028f 01       		.byte	0x1
 10229 0290 3F       		.uleb128 0x3f
 10230 0291 0C       		.uleb128 0xc
 10231 0292 03       		.uleb128 0x3
 10232 0293 0E       		.uleb128 0xe
 10233 0294 3A       		.uleb128 0x3a
 10234 0295 0B       		.uleb128 0xb
 10235 0296 3B       		.uleb128 0x3b
 10236 0297 05       		.uleb128 0x5
 10237 0298 27       		.uleb128 0x27
 10238 0299 0C       		.uleb128 0xc
 10239 029a 11       		.uleb128 0x11
 10240 029b 01       		.uleb128 0x1
 10241 029c 12       		.uleb128 0x12
 10242 029d 01       		.uleb128 0x1
 10243 029e 40       		.uleb128 0x40
 10244 029f 06       		.uleb128 0x6
 10245 02a0 9642     		.uleb128 0x2116
 10246 02a2 0C       		.uleb128 0xc
 10247 02a3 01       		.uleb128 0x1
 10248 02a4 13       		.uleb128 0x13
 10249 02a5 00       		.byte	0
 10250 02a6 00       		.byte	0
 10251 02a7 30       		.uleb128 0x30
 10252 02a8 2E       		.uleb128 0x2e
 10253 02a9 01       		.byte	0x1
 10254 02aa 3F       		.uleb128 0x3f
 10255 02ab 0C       		.uleb128 0xc
 10256 02ac 03       		.uleb128 0x3
 10257 02ad 0E       		.uleb128 0xe
 10258 02ae 3A       		.uleb128 0x3a
 10259 02af 0B       		.uleb128 0xb
 10260 02b0 3B       		.uleb128 0x3b
 10261 02b1 05       		.uleb128 0x5
 10262 02b2 27       		.uleb128 0x27
 10263 02b3 0C       		.uleb128 0xc
 10264 02b4 49       		.uleb128 0x49
 10265 02b5 13       		.uleb128 0x13
 10266 02b6 11       		.uleb128 0x11
 10267 02b7 01       		.uleb128 0x1
 10268 02b8 12       		.uleb128 0x12
 10269 02b9 01       		.uleb128 0x1
 10270 02ba 40       		.uleb128 0x40
 10271 02bb 06       		.uleb128 0x6
 10272 02bc 9742     		.uleb128 0x2117
 10273 02be 0C       		.uleb128 0xc
 10274 02bf 01       		.uleb128 0x1
 10275 02c0 13       		.uleb128 0x13
 10276 02c1 00       		.byte	0
 10277 02c2 00       		.byte	0
 10278 02c3 31       		.uleb128 0x31
 10279 02c4 0B       		.uleb128 0xb
 10280 02c5 01       		.byte	0x1
 10281 02c6 55       		.uleb128 0x55
 10282 02c7 06       		.uleb128 0x6
 10283 02c8 01       		.uleb128 0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 269


 10284 02c9 13       		.uleb128 0x13
 10285 02ca 00       		.byte	0
 10286 02cb 00       		.byte	0
 10287 02cc 32       		.uleb128 0x32
 10288 02cd 34       		.uleb128 0x34
 10289 02ce 00       		.byte	0
 10290 02cf 03       		.uleb128 0x3
 10291 02d0 0E       		.uleb128 0xe
 10292 02d1 3A       		.uleb128 0x3a
 10293 02d2 0B       		.uleb128 0xb
 10294 02d3 3B       		.uleb128 0x3b
 10295 02d4 05       		.uleb128 0x5
 10296 02d5 49       		.uleb128 0x49
 10297 02d6 13       		.uleb128 0x13
 10298 02d7 00       		.byte	0
 10299 02d8 00       		.byte	0
 10300 02d9 33       		.uleb128 0x33
 10301 02da 0A       		.uleb128 0xa
 10302 02db 00       		.byte	0
 10303 02dc 03       		.uleb128 0x3
 10304 02dd 0E       		.uleb128 0xe
 10305 02de 3A       		.uleb128 0x3a
 10306 02df 0B       		.uleb128 0xb
 10307 02e0 3B       		.uleb128 0x3b
 10308 02e1 05       		.uleb128 0x5
 10309 02e2 00       		.byte	0
 10310 02e3 00       		.byte	0
 10311 02e4 34       		.uleb128 0x34
 10312 02e5 0A       		.uleb128 0xa
 10313 02e6 00       		.byte	0
 10314 02e7 03       		.uleb128 0x3
 10315 02e8 0E       		.uleb128 0xe
 10316 02e9 3A       		.uleb128 0x3a
 10317 02ea 0B       		.uleb128 0xb
 10318 02eb 3B       		.uleb128 0x3b
 10319 02ec 05       		.uleb128 0x5
 10320 02ed 11       		.uleb128 0x11
 10321 02ee 01       		.uleb128 0x1
 10322 02ef 00       		.byte	0
 10323 02f0 00       		.byte	0
 10324 02f1 35       		.uleb128 0x35
 10325 02f2 898201   		.uleb128 0x4109
 10326 02f5 01       		.byte	0x1
 10327 02f6 11       		.uleb128 0x11
 10328 02f7 01       		.uleb128 0x1
 10329 02f8 9542     		.uleb128 0x2115
 10330 02fa 0C       		.uleb128 0xc
 10331 02fb 31       		.uleb128 0x31
 10332 02fc 13       		.uleb128 0x13
 10333 02fd 01       		.uleb128 0x1
 10334 02fe 13       		.uleb128 0x13
 10335 02ff 00       		.byte	0
 10336 0300 00       		.byte	0
 10337 0301 36       		.uleb128 0x36
 10338 0302 0B       		.uleb128 0xb
 10339 0303 01       		.byte	0x1
 10340 0304 00       		.byte	0
ARM GAS  /tmp/ccdPJtdr.s 			page 270


 10341 0305 00       		.byte	0
 10342 0306 37       		.uleb128 0x37
 10343 0307 2E       		.uleb128 0x2e
 10344 0308 01       		.byte	0x1
 10345 0309 31       		.uleb128 0x31
 10346 030a 13       		.uleb128 0x13
 10347 030b 11       		.uleb128 0x11
 10348 030c 01       		.uleb128 0x1
 10349 030d 12       		.uleb128 0x12
 10350 030e 01       		.uleb128 0x1
 10351 030f 40       		.uleb128 0x40
 10352 0310 06       		.uleb128 0x6
 10353 0311 9742     		.uleb128 0x2117
 10354 0313 0C       		.uleb128 0xc
 10355 0314 01       		.uleb128 0x1
 10356 0315 13       		.uleb128 0x13
 10357 0316 00       		.byte	0
 10358 0317 00       		.byte	0
 10359 0318 38       		.uleb128 0x38
 10360 0319 05       		.uleb128 0x5
 10361 031a 00       		.byte	0
 10362 031b 31       		.uleb128 0x31
 10363 031c 13       		.uleb128 0x13
 10364 031d 02       		.uleb128 0x2
 10365 031e 06       		.uleb128 0x6
 10366 031f 00       		.byte	0
 10367 0320 00       		.byte	0
 10368 0321 39       		.uleb128 0x39
 10369 0322 0B       		.uleb128 0xb
 10370 0323 01       		.byte	0x1
 10371 0324 11       		.uleb128 0x11
 10372 0325 01       		.uleb128 0x1
 10373 0326 12       		.uleb128 0x12
 10374 0327 01       		.uleb128 0x1
 10375 0328 00       		.byte	0
 10376 0329 00       		.byte	0
 10377 032a 3A       		.uleb128 0x3a
 10378 032b 34       		.uleb128 0x34
 10379 032c 00       		.byte	0
 10380 032d 31       		.uleb128 0x31
 10381 032e 13       		.uleb128 0x13
 10382 032f 00       		.byte	0
 10383 0330 00       		.byte	0
 10384 0331 3B       		.uleb128 0x3b
 10385 0332 34       		.uleb128 0x34
 10386 0333 00       		.byte	0
 10387 0334 31       		.uleb128 0x31
 10388 0335 13       		.uleb128 0x13
 10389 0336 1C       		.uleb128 0x1c
 10390 0337 0B       		.uleb128 0xb
 10391 0338 00       		.byte	0
 10392 0339 00       		.byte	0
 10393 033a 3C       		.uleb128 0x3c
 10394 033b 0B       		.uleb128 0xb
 10395 033c 01       		.byte	0x1
 10396 033d 55       		.uleb128 0x55
 10397 033e 06       		.uleb128 0x6
ARM GAS  /tmp/ccdPJtdr.s 			page 271


 10398 033f 00       		.byte	0
 10399 0340 00       		.byte	0
 10400 0341 3D       		.uleb128 0x3d
 10401 0342 34       		.uleb128 0x34
 10402 0343 00       		.byte	0
 10403 0344 31       		.uleb128 0x31
 10404 0345 13       		.uleb128 0x13
 10405 0346 02       		.uleb128 0x2
 10406 0347 06       		.uleb128 0x6
 10407 0348 00       		.byte	0
 10408 0349 00       		.byte	0
 10409 034a 3E       		.uleb128 0x3e
 10410 034b 0A       		.uleb128 0xa
 10411 034c 00       		.byte	0
 10412 034d 31       		.uleb128 0x31
 10413 034e 13       		.uleb128 0x13
 10414 034f 11       		.uleb128 0x11
 10415 0350 01       		.uleb128 0x1
 10416 0351 00       		.byte	0
 10417 0352 00       		.byte	0
 10418 0353 3F       		.uleb128 0x3f
 10419 0354 34       		.uleb128 0x34
 10420 0355 00       		.byte	0
 10421 0356 31       		.uleb128 0x31
 10422 0357 13       		.uleb128 0x13
 10423 0358 02       		.uleb128 0x2
 10424 0359 0A       		.uleb128 0xa
 10425 035a 00       		.byte	0
 10426 035b 00       		.byte	0
 10427 035c 40       		.uleb128 0x40
 10428 035d 05       		.uleb128 0x5
 10429 035e 00       		.byte	0
 10430 035f 31       		.uleb128 0x31
 10431 0360 13       		.uleb128 0x13
 10432 0361 02       		.uleb128 0x2
 10433 0362 0A       		.uleb128 0xa
 10434 0363 00       		.byte	0
 10435 0364 00       		.byte	0
 10436 0365 41       		.uleb128 0x41
 10437 0366 2E       		.uleb128 0x2e
 10438 0367 01       		.byte	0x1
 10439 0368 31       		.uleb128 0x31
 10440 0369 13       		.uleb128 0x13
 10441 036a 11       		.uleb128 0x11
 10442 036b 01       		.uleb128 0x1
 10443 036c 12       		.uleb128 0x12
 10444 036d 01       		.uleb128 0x1
 10445 036e 40       		.uleb128 0x40
 10446 036f 0A       		.uleb128 0xa
 10447 0370 9742     		.uleb128 0x2117
 10448 0372 0C       		.uleb128 0xc
 10449 0373 01       		.uleb128 0x1
 10450 0374 13       		.uleb128 0x13
 10451 0375 00       		.byte	0
 10452 0376 00       		.byte	0
 10453 0377 42       		.uleb128 0x42
 10454 0378 2E       		.uleb128 0x2e
ARM GAS  /tmp/ccdPJtdr.s 			page 272


 10455 0379 00       		.byte	0
 10456 037a 3F       		.uleb128 0x3f
 10457 037b 0C       		.uleb128 0xc
 10458 037c 3C       		.uleb128 0x3c
 10459 037d 0C       		.uleb128 0xc
 10460 037e 8740     		.uleb128 0x2007
 10461 0380 0E       		.uleb128 0xe
 10462 0381 03       		.uleb128 0x3
 10463 0382 0E       		.uleb128 0xe
 10464 0383 3A       		.uleb128 0x3a
 10465 0384 0B       		.uleb128 0xb
 10466 0385 3B       		.uleb128 0x3b
 10467 0386 05       		.uleb128 0x5
 10468 0387 00       		.byte	0
 10469 0388 00       		.byte	0
 10470 0389 00       		.byte	0
 10471              		.section	.debug_loc,"",%progbits
 10472              	.Ldebug_loc0:
 10473              	.LLST0:
 10474 0000 00000000 		.4byte	.LFB122-.Ltext0
 10475 0004 08000000 		.4byte	.LCFI0-.Ltext0
 10476 0008 0200     		.2byte	0x2
 10477 000a 7D       		.byte	0x7d
 10478 000b 00       		.sleb128 0
 10479 000c 08000000 		.4byte	.LCFI0-.Ltext0
 10480 0010 3C000000 		.4byte	.LCFI1-.Ltext0
 10481 0014 0200     		.2byte	0x2
 10482 0016 7D       		.byte	0x7d
 10483 0017 08       		.sleb128 8
 10484 0018 3C000000 		.4byte	.LCFI1-.Ltext0
 10485 001c 3E000000 		.4byte	.LCFI2-.Ltext0
 10486 0020 0200     		.2byte	0x2
 10487 0022 7D       		.byte	0x7d
 10488 0023 00       		.sleb128 0
 10489 0024 3E000000 		.4byte	.LCFI2-.Ltext0
 10490 0028 50000000 		.4byte	.LFE122-.Ltext0
 10491 002c 0200     		.2byte	0x2
 10492 002e 7D       		.byte	0x7d
 10493 002f 08       		.sleb128 8
 10494 0030 00000000 		.4byte	0
 10495 0034 00000000 		.4byte	0
 10496              	.LLST114:
 10497 0038 E20E0000 		.4byte	.LFB121-.Ltext0
 10498 003c EA0E0000 		.4byte	.LCFI39-.Ltext0
 10499 0040 0200     		.2byte	0x2
 10500 0042 7D       		.byte	0x7d
 10501 0043 00       		.sleb128 0
 10502 0044 EA0E0000 		.4byte	.LCFI39-.Ltext0
 10503 0048 4A0F0000 		.4byte	.LCFI40-.Ltext0
 10504 004c 0200     		.2byte	0x2
 10505 004e 7D       		.byte	0x7d
 10506 004f 10       		.sleb128 16
 10507 0050 4A0F0000 		.4byte	.LCFI40-.Ltext0
 10508 0054 4C0F0000 		.4byte	.LCFI41-.Ltext0
 10509 0058 0200     		.2byte	0x2
 10510 005a 7D       		.byte	0x7d
 10511 005b 08       		.sleb128 8
ARM GAS  /tmp/ccdPJtdr.s 			page 273


 10512 005c 4C0F0000 		.4byte	.LCFI41-.Ltext0
 10513 0060 640F0000 		.4byte	.LFE121-.Ltext0
 10514 0064 0200     		.2byte	0x2
 10515 0066 7D       		.byte	0x7d
 10516 0067 10       		.sleb128 16
 10517 0068 00000000 		.4byte	0
 10518 006c 00000000 		.4byte	0
 10519              	.LLST115:
 10520 0070 E20E0000 		.4byte	.LVL212-.Ltext0
 10521 0074 FB0E0000 		.4byte	.LVL213-1-.Ltext0
 10522 0078 0100     		.2byte	0x1
 10523 007a 50       		.byte	0x50
 10524 007b FB0E0000 		.4byte	.LVL213-1-.Ltext0
 10525 007f 440F0000 		.4byte	.LVL217-.Ltext0
 10526 0083 0100     		.2byte	0x1
 10527 0085 54       		.byte	0x54
 10528 0086 440F0000 		.4byte	.LVL217-.Ltext0
 10529 008a 470F0000 		.4byte	.LVL218-1-.Ltext0
 10530 008e 0100     		.2byte	0x1
 10531 0090 50       		.byte	0x50
 10532 0091 470F0000 		.4byte	.LVL218-1-.Ltext0
 10533 0095 5A0F0000 		.4byte	.LVL220-.Ltext0
 10534 0099 0100     		.2byte	0x1
 10535 009b 54       		.byte	0x54
 10536 009c 5A0F0000 		.4byte	.LVL220-.Ltext0
 10537 00a0 5D0F0000 		.4byte	.LVL221-1-.Ltext0
 10538 00a4 0100     		.2byte	0x1
 10539 00a6 50       		.byte	0x50
 10540 00a7 5D0F0000 		.4byte	.LVL221-1-.Ltext0
 10541 00ab 640F0000 		.4byte	.LFE121-.Ltext0
 10542 00af 0100     		.2byte	0x1
 10543 00b1 54       		.byte	0x54
 10544 00b2 00000000 		.4byte	0
 10545 00b6 00000000 		.4byte	0
 10546              	.LLST116:
 10547 00ba FE0E0000 		.4byte	.LVL214-.Ltext0
 10548 00be 100F0000 		.4byte	.LVL215-.Ltext0
 10549 00c2 0100     		.2byte	0x1
 10550 00c4 50       		.byte	0x50
 10551 00c5 100F0000 		.4byte	.LVL215-.Ltext0
 10552 00c9 1B0F0000 		.4byte	.LVL216-1-.Ltext0
 10553 00cd 0100     		.2byte	0x1
 10554 00cf 52       		.byte	0x52
 10555 00d0 4C0F0000 		.4byte	.LVL219-.Ltext0
 10556 00d4 5A0F0000 		.4byte	.LVL220-.Ltext0
 10557 00d8 0100     		.2byte	0x1
 10558 00da 50       		.byte	0x50
 10559 00db 00000000 		.4byte	0
 10560 00df 00000000 		.4byte	0
 10561              	.LLST133:
 10562 00e3 44110000 		.4byte	.LFB120-.Ltext0
 10563 00e7 48110000 		.4byte	.LCFI51-.Ltext0
 10564 00eb 0200     		.2byte	0x2
 10565 00ed 7D       		.byte	0x7d
 10566 00ee 00       		.sleb128 0
 10567 00ef 48110000 		.4byte	.LCFI51-.Ltext0
 10568 00f3 B6110000 		.4byte	.LCFI52-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 274


 10569 00f7 0200     		.2byte	0x2
 10570 00f9 7D       		.byte	0x7d
 10571 00fa 10       		.sleb128 16
 10572 00fb B6110000 		.4byte	.LCFI52-.Ltext0
 10573 00ff B8110000 		.4byte	.LFE120-.Ltext0
 10574 0103 0200     		.2byte	0x2
 10575 0105 7D       		.byte	0x7d
 10576 0106 08       		.sleb128 8
 10577 0107 00000000 		.4byte	0
 10578 010b 00000000 		.4byte	0
 10579              	.LLST134:
 10580 010f 44110000 		.4byte	.LVL254-.Ltext0
 10581 0113 55110000 		.4byte	.LVL255-1-.Ltext0
 10582 0117 0100     		.2byte	0x1
 10583 0119 50       		.byte	0x50
 10584 011a 55110000 		.4byte	.LVL255-1-.Ltext0
 10585 011e A2110000 		.4byte	.LVL257-.Ltext0
 10586 0122 0100     		.2byte	0x1
 10587 0124 54       		.byte	0x54
 10588 0125 A2110000 		.4byte	.LVL257-.Ltext0
 10589 0129 A5110000 		.4byte	.LVL258-1-.Ltext0
 10590 012d 0100     		.2byte	0x1
 10591 012f 50       		.byte	0x50
 10592 0130 A5110000 		.4byte	.LVL258-1-.Ltext0
 10593 0134 B0110000 		.4byte	.LVL259-.Ltext0
 10594 0138 0100     		.2byte	0x1
 10595 013a 54       		.byte	0x54
 10596 013b B0110000 		.4byte	.LVL259-.Ltext0
 10597 013f B3110000 		.4byte	.LVL260-1-.Ltext0
 10598 0143 0100     		.2byte	0x1
 10599 0145 50       		.byte	0x50
 10600 0146 B3110000 		.4byte	.LVL260-1-.Ltext0
 10601 014a B8110000 		.4byte	.LFE120-.Ltext0
 10602 014e 0100     		.2byte	0x1
 10603 0150 54       		.byte	0x54
 10604 0151 00000000 		.4byte	0
 10605 0155 00000000 		.4byte	0
 10606              	.LLST141:
 10607 0159 7E120000 		.4byte	.LFB119-.Ltext0
 10608 015d 86120000 		.4byte	.LCFI53-.Ltext0
 10609 0161 0200     		.2byte	0x2
 10610 0163 7D       		.byte	0x7d
 10611 0164 00       		.sleb128 0
 10612 0165 86120000 		.4byte	.LCFI53-.Ltext0
 10613 0169 2C130000 		.4byte	.LCFI54-.Ltext0
 10614 016d 0200     		.2byte	0x2
 10615 016f 7D       		.byte	0x7d
 10616 0170 10       		.sleb128 16
 10617 0171 2C130000 		.4byte	.LCFI54-.Ltext0
 10618 0175 2E130000 		.4byte	.LCFI55-.Ltext0
 10619 0179 0200     		.2byte	0x2
 10620 017b 7D       		.byte	0x7d
 10621 017c 08       		.sleb128 8
 10622 017d 2E130000 		.4byte	.LCFI55-.Ltext0
 10623 0181 40130000 		.4byte	.LFE119-.Ltext0
 10624 0185 0200     		.2byte	0x2
 10625 0187 7D       		.byte	0x7d
ARM GAS  /tmp/ccdPJtdr.s 			page 275


 10626 0188 10       		.sleb128 16
 10627 0189 00000000 		.4byte	0
 10628 018d 00000000 		.4byte	0
 10629              	.LLST142:
 10630 0191 7E120000 		.4byte	.LVL271-.Ltext0
 10631 0195 97120000 		.4byte	.LVL272-1-.Ltext0
 10632 0199 0100     		.2byte	0x1
 10633 019b 50       		.byte	0x50
 10634 019c 97120000 		.4byte	.LVL272-1-.Ltext0
 10635 01a0 26130000 		.4byte	.LVL279-.Ltext0
 10636 01a4 0100     		.2byte	0x1
 10637 01a6 54       		.byte	0x54
 10638 01a7 26130000 		.4byte	.LVL279-.Ltext0
 10639 01ab 29130000 		.4byte	.LVL280-1-.Ltext0
 10640 01af 0100     		.2byte	0x1
 10641 01b1 50       		.byte	0x50
 10642 01b2 29130000 		.4byte	.LVL280-1-.Ltext0
 10643 01b6 2E130000 		.4byte	.LVL281-.Ltext0
 10644 01ba 0100     		.2byte	0x1
 10645 01bc 54       		.byte	0x54
 10646 01bd 2E130000 		.4byte	.LVL281-.Ltext0
 10647 01c1 31130000 		.4byte	.LVL282-1-.Ltext0
 10648 01c5 0100     		.2byte	0x1
 10649 01c7 50       		.byte	0x50
 10650 01c8 31130000 		.4byte	.LVL282-1-.Ltext0
 10651 01cc 40130000 		.4byte	.LFE119-.Ltext0
 10652 01d0 0100     		.2byte	0x1
 10653 01d2 54       		.byte	0x54
 10654 01d3 00000000 		.4byte	0
 10655 01d7 00000000 		.4byte	0
 10656              	.LLST143:
 10657 01db 9A120000 		.4byte	.LVL273-.Ltext0
 10658 01df B6120000 		.4byte	.LVL274-.Ltext0
 10659 01e3 0100     		.2byte	0x1
 10660 01e5 50       		.byte	0x50
 10661 01e6 B6120000 		.4byte	.LVL274-.Ltext0
 10662 01ea B9120000 		.4byte	.LVL275-1-.Ltext0
 10663 01ee 0100     		.2byte	0x1
 10664 01f0 52       		.byte	0x52
 10665 01f1 06130000 		.4byte	.LVL277-.Ltext0
 10666 01f5 14130000 		.4byte	.LVL278-.Ltext0
 10667 01f9 0100     		.2byte	0x1
 10668 01fb 50       		.byte	0x50
 10669 01fc 00000000 		.4byte	0
 10670 0200 00000000 		.4byte	0
 10671              	.LLST12:
 10672 0204 F0000000 		.4byte	.LFB118-.Ltext0
 10673 0208 F2000000 		.4byte	.LCFI4-.Ltext0
 10674 020c 0200     		.2byte	0x2
 10675 020e 7D       		.byte	0x7d
 10676 020f 00       		.sleb128 0
 10677 0210 F2000000 		.4byte	.LCFI4-.Ltext0
 10678 0214 0E010000 		.4byte	.LCFI5-.Ltext0
 10679 0218 0200     		.2byte	0x2
 10680 021a 7D       		.byte	0x7d
 10681 021b 10       		.sleb128 16
 10682 021c 0E010000 		.4byte	.LCFI5-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 276


 10683 0220 10010000 		.4byte	.LFE118-.Ltext0
 10684 0224 0200     		.2byte	0x2
 10685 0226 7D       		.byte	0x7d
 10686 0227 08       		.sleb128 8
 10687 0228 00000000 		.4byte	0
 10688 022c 00000000 		.4byte	0
 10689              	.LLST13:
 10690 0230 F0000000 		.4byte	.LVL8-.Ltext0
 10691 0234 FF000000 		.4byte	.LVL11-1-.Ltext0
 10692 0238 0100     		.2byte	0x1
 10693 023a 50       		.byte	0x50
 10694 023b FF000000 		.4byte	.LVL11-1-.Ltext0
 10695 023f 10010000 		.4byte	.LFE118-.Ltext0
 10696 0243 0100     		.2byte	0x1
 10697 0245 54       		.byte	0x54
 10698 0246 00000000 		.4byte	0
 10699 024a 00000000 		.4byte	0
 10700              	.LLST14:
 10701 024e F0000000 		.4byte	.LVL8-.Ltext0
 10702 0252 F8000000 		.4byte	.LVL9-.Ltext0
 10703 0256 0100     		.2byte	0x1
 10704 0258 51       		.byte	0x51
 10705 0259 F8000000 		.4byte	.LVL9-.Ltext0
 10706 025d FF000000 		.4byte	.LVL11-1-.Ltext0
 10707 0261 0100     		.2byte	0x1
 10708 0263 53       		.byte	0x53
 10709 0264 FF000000 		.4byte	.LVL11-1-.Ltext0
 10710 0268 10010000 		.4byte	.LFE118-.Ltext0
 10711 026c 0400     		.2byte	0x4
 10712 026e F3       		.byte	0xf3
 10713 026f 01       		.uleb128 0x1
 10714 0270 51       		.byte	0x51
 10715 0271 9F       		.byte	0x9f
 10716 0272 00000000 		.4byte	0
 10717 0276 00000000 		.4byte	0
 10718              	.LLST15:
 10719 027a F0000000 		.4byte	.LVL8-.Ltext0
 10720 027e FA000000 		.4byte	.LVL10-.Ltext0
 10721 0282 0100     		.2byte	0x1
 10722 0284 52       		.byte	0x52
 10723 0285 FA000000 		.4byte	.LVL10-.Ltext0
 10724 0289 FF000000 		.4byte	.LVL11-1-.Ltext0
 10725 028d 0200     		.2byte	0x2
 10726 028f 7D       		.byte	0x7d
 10727 0290 00       		.sleb128 0
 10728 0291 FF000000 		.4byte	.LVL11-1-.Ltext0
 10729 0295 10010000 		.4byte	.LFE118-.Ltext0
 10730 0299 0400     		.2byte	0x4
 10731 029b F3       		.byte	0xf3
 10732 029c 01       		.uleb128 0x1
 10733 029d 52       		.byte	0x52
 10734 029e 9F       		.byte	0x9f
 10735 029f 00000000 		.4byte	0
 10736 02a3 00000000 		.4byte	0
 10737              	.LLST119:
 10738 02a7 960F0000 		.4byte	.LVL225-.Ltext0
 10739 02ab C10F0000 		.4byte	.LVL226-1-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 277


 10740 02af 0100     		.2byte	0x1
 10741 02b1 50       		.byte	0x50
 10742 02b2 C10F0000 		.4byte	.LVL226-1-.Ltext0
 10743 02b6 C20F0000 		.4byte	.LVL226-.Ltext0
 10744 02ba 0400     		.2byte	0x4
 10745 02bc F3       		.byte	0xf3
 10746 02bd 01       		.uleb128 0x1
 10747 02be 50       		.byte	0x50
 10748 02bf 9F       		.byte	0x9f
 10749 02c0 C20F0000 		.4byte	.LVL226-.Ltext0
 10750 02c4 C40F0000 		.4byte	.LFE115-.Ltext0
 10751 02c8 0100     		.2byte	0x1
 10752 02ca 50       		.byte	0x50
 10753 02cb 00000000 		.4byte	0
 10754 02cf 00000000 		.4byte	0
 10755              	.LLST140:
 10756 02d3 70120000 		.4byte	.LVL269-.Ltext0
 10757 02d7 7D120000 		.4byte	.LVL270-1-.Ltext0
 10758 02db 0100     		.2byte	0x1
 10759 02dd 50       		.byte	0x50
 10760 02de 7D120000 		.4byte	.LVL270-1-.Ltext0
 10761 02e2 7E120000 		.4byte	.LFE112-.Ltext0
 10762 02e6 0400     		.2byte	0x4
 10763 02e8 F3       		.byte	0xf3
 10764 02e9 01       		.uleb128 0x1
 10765 02ea 50       		.byte	0x50
 10766 02eb 9F       		.byte	0x9f
 10767 02ec 00000000 		.4byte	0
 10768 02f0 00000000 		.4byte	0
 10769              	.LLST137:
 10770 02f4 14120000 		.4byte	.LVL264-.Ltext0
 10771 02f8 19120000 		.4byte	.LVL265-1-.Ltext0
 10772 02fc 0100     		.2byte	0x1
 10773 02fe 50       		.byte	0x50
 10774 02ff 19120000 		.4byte	.LVL265-1-.Ltext0
 10775 0303 1A120000 		.4byte	.LFE110-.Ltext0
 10776 0307 0400     		.2byte	0x4
 10777 0309 F3       		.byte	0xf3
 10778 030a 01       		.uleb128 0x1
 10779 030b 50       		.byte	0x50
 10780 030c 9F       		.byte	0x9f
 10781 030d 00000000 		.4byte	0
 10782 0311 00000000 		.4byte	0
 10783              	.LLST149:
 10784 0315 E2130000 		.4byte	.LFB109-.Ltext0
 10785 0319 E6130000 		.4byte	.LCFI56-.Ltext0
 10786 031d 0200     		.2byte	0x2
 10787 031f 7D       		.byte	0x7d
 10788 0320 00       		.sleb128 0
 10789 0321 E6130000 		.4byte	.LCFI56-.Ltext0
 10790 0325 18140000 		.4byte	.LCFI57-.Ltext0
 10791 0329 0200     		.2byte	0x2
 10792 032b 7D       		.byte	0x7d
 10793 032c 04       		.sleb128 4
 10794 032d 18140000 		.4byte	.LCFI57-.Ltext0
 10795 0331 1A140000 		.4byte	.LCFI58-.Ltext0
 10796 0335 0200     		.2byte	0x2
ARM GAS  /tmp/ccdPJtdr.s 			page 278


 10797 0337 7D       		.byte	0x7d
 10798 0338 00       		.sleb128 0
 10799 0339 1A140000 		.4byte	.LCFI58-.Ltext0
 10800 033d 2C140000 		.4byte	.LCFI59-.Ltext0
 10801 0341 0200     		.2byte	0x2
 10802 0343 7D       		.byte	0x7d
 10803 0344 04       		.sleb128 4
 10804 0345 2C140000 		.4byte	.LCFI59-.Ltext0
 10805 0349 2E140000 		.4byte	.LFE109-.Ltext0
 10806 034d 0200     		.2byte	0x2
 10807 034f 7D       		.byte	0x7d
 10808 0350 00       		.sleb128 0
 10809 0351 00000000 		.4byte	0
 10810 0355 00000000 		.4byte	0
 10811              	.LLST150:
 10812 0359 E2130000 		.4byte	.LVL292-.Ltext0
 10813 035d 2D140000 		.4byte	.LVL293-1-.Ltext0
 10814 0361 0100     		.2byte	0x1
 10815 0363 50       		.byte	0x50
 10816 0364 2D140000 		.4byte	.LVL293-1-.Ltext0
 10817 0368 2E140000 		.4byte	.LFE109-.Ltext0
 10818 036c 0400     		.2byte	0x4
 10819 036e F3       		.byte	0xf3
 10820 036f 01       		.uleb128 0x1
 10821 0370 50       		.byte	0x50
 10822 0371 9F       		.byte	0x9f
 10823 0372 00000000 		.4byte	0
 10824 0376 00000000 		.4byte	0
 10825              	.LLST153:
 10826 037a 74140000 		.4byte	.LVL296-.Ltext0
 10827 037e 81140000 		.4byte	.LVL297-1-.Ltext0
 10828 0382 0100     		.2byte	0x1
 10829 0384 50       		.byte	0x50
 10830 0385 81140000 		.4byte	.LVL297-1-.Ltext0
 10831 0389 82140000 		.4byte	.LFE108-.Ltext0
 10832 038d 0400     		.2byte	0x4
 10833 038f F3       		.byte	0xf3
 10834 0390 01       		.uleb128 0x1
 10835 0391 50       		.byte	0x50
 10836 0392 9F       		.byte	0x9f
 10837 0393 00000000 		.4byte	0
 10838 0397 00000000 		.4byte	0
 10839              	.LLST151:
 10840 039b 2E140000 		.4byte	.LFB107-.Ltext0
 10841 039f 34140000 		.4byte	.LCFI60-.Ltext0
 10842 03a3 0200     		.2byte	0x2
 10843 03a5 7D       		.byte	0x7d
 10844 03a6 00       		.sleb128 0
 10845 03a7 34140000 		.4byte	.LCFI60-.Ltext0
 10846 03ab 58140000 		.4byte	.LCFI61-.Ltext0
 10847 03af 0200     		.2byte	0x2
 10848 03b1 7D       		.byte	0x7d
 10849 03b2 04       		.sleb128 4
 10850 03b3 58140000 		.4byte	.LCFI61-.Ltext0
 10851 03b7 5A140000 		.4byte	.LCFI62-.Ltext0
 10852 03bb 0200     		.2byte	0x2
 10853 03bd 7D       		.byte	0x7d
ARM GAS  /tmp/ccdPJtdr.s 			page 279


 10854 03be 00       		.sleb128 0
 10855 03bf 5A140000 		.4byte	.LCFI62-.Ltext0
 10856 03c3 6C140000 		.4byte	.LCFI63-.Ltext0
 10857 03c7 0200     		.2byte	0x2
 10858 03c9 7D       		.byte	0x7d
 10859 03ca 04       		.sleb128 4
 10860 03cb 6C140000 		.4byte	.LCFI63-.Ltext0
 10861 03cf 74140000 		.4byte	.LFE107-.Ltext0
 10862 03d3 0200     		.2byte	0x2
 10863 03d5 7D       		.byte	0x7d
 10864 03d6 00       		.sleb128 0
 10865 03d7 00000000 		.4byte	0
 10866 03db 00000000 		.4byte	0
 10867              	.LLST152:
 10868 03df 2E140000 		.4byte	.LVL294-.Ltext0
 10869 03e3 6D140000 		.4byte	.LVL295-1-.Ltext0
 10870 03e7 0100     		.2byte	0x1
 10871 03e9 50       		.byte	0x50
 10872 03ea 6D140000 		.4byte	.LVL295-1-.Ltext0
 10873 03ee 74140000 		.4byte	.LFE107-.Ltext0
 10874 03f2 0400     		.2byte	0x4
 10875 03f4 F3       		.byte	0xf3
 10876 03f5 01       		.uleb128 0x1
 10877 03f6 50       		.byte	0x50
 10878 03f7 9F       		.byte	0x9f
 10879 03f8 00000000 		.4byte	0
 10880 03fc 00000000 		.4byte	0
 10881              	.LLST148:
 10882 0400 CC130000 		.4byte	.LVL290-.Ltext0
 10883 0404 DF130000 		.4byte	.LVL291-1-.Ltext0
 10884 0408 0100     		.2byte	0x1
 10885 040a 50       		.byte	0x50
 10886 040b DF130000 		.4byte	.LVL291-1-.Ltext0
 10887 040f E0130000 		.4byte	.LVL291-.Ltext0
 10888 0413 0400     		.2byte	0x4
 10889 0415 F3       		.byte	0xf3
 10890 0416 01       		.uleb128 0x1
 10891 0417 50       		.byte	0x50
 10892 0418 9F       		.byte	0x9f
 10893 0419 E0130000 		.4byte	.LVL291-.Ltext0
 10894 041d E2130000 		.4byte	.LFE105-.Ltext0
 10895 0421 0100     		.2byte	0x1
 10896 0423 50       		.byte	0x50
 10897 0424 00000000 		.4byte	0
 10898 0428 00000000 		.4byte	0
 10899              	.LLST164:
 10900 042c E4160000 		.4byte	.LFB103-.Ltext0
 10901 0430 E6160000 		.4byte	.LCFI74-.Ltext0
 10902 0434 0200     		.2byte	0x2
 10903 0436 7D       		.byte	0x7d
 10904 0437 00       		.sleb128 0
 10905 0438 E6160000 		.4byte	.LCFI74-.Ltext0
 10906 043c 4A170000 		.4byte	.LCFI75-.Ltext0
 10907 0440 0200     		.2byte	0x2
 10908 0442 7D       		.byte	0x7d
 10909 0443 10       		.sleb128 16
 10910 0444 4A170000 		.4byte	.LCFI75-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 280


 10911 0448 4C170000 		.4byte	.LFE103-.Ltext0
 10912 044c 0200     		.2byte	0x2
 10913 044e 7D       		.byte	0x7d
 10914 044f 08       		.sleb128 8
 10915 0450 00000000 		.4byte	0
 10916 0454 00000000 		.4byte	0
 10917              	.LLST165:
 10918 0458 E4160000 		.4byte	.LVL330-.Ltext0
 10919 045c 03170000 		.4byte	.LVL332-1-.Ltext0
 10920 0460 0100     		.2byte	0x1
 10921 0462 50       		.byte	0x50
 10922 0463 03170000 		.4byte	.LVL332-1-.Ltext0
 10923 0467 4C170000 		.4byte	.LFE103-.Ltext0
 10924 046b 0400     		.2byte	0x4
 10925 046d F3       		.byte	0xf3
 10926 046e 01       		.uleb128 0x1
 10927 046f 50       		.byte	0x50
 10928 0470 9F       		.byte	0x9f
 10929 0471 00000000 		.4byte	0
 10930 0475 00000000 		.4byte	0
 10931              	.LLST166:
 10932 0479 4C170000 		.4byte	.LFB102-.Ltext0
 10933 047d 4E170000 		.4byte	.LCFI76-.Ltext0
 10934 0481 0200     		.2byte	0x2
 10935 0483 7D       		.byte	0x7d
 10936 0484 00       		.sleb128 0
 10937 0485 4E170000 		.4byte	.LCFI76-.Ltext0
 10938 0489 AC170000 		.4byte	.LCFI77-.Ltext0
 10939 048d 0200     		.2byte	0x2
 10940 048f 7D       		.byte	0x7d
 10941 0490 10       		.sleb128 16
 10942 0491 AC170000 		.4byte	.LCFI77-.Ltext0
 10943 0495 B0170000 		.4byte	.LCFI78-.Ltext0
 10944 0499 0200     		.2byte	0x2
 10945 049b 7D       		.byte	0x7d
 10946 049c 04       		.sleb128 4
 10947 049d B0170000 		.4byte	.LCFI78-.Ltext0
 10948 04a1 C4170000 		.4byte	.LFE102-.Ltext0
 10949 04a5 0200     		.2byte	0x2
 10950 04a7 7D       		.byte	0x7d
 10951 04a8 10       		.sleb128 16
 10952 04a9 00000000 		.4byte	0
 10953 04ad 00000000 		.4byte	0
 10954              	.LLST167:
 10955 04b1 4C170000 		.4byte	.LVL335-.Ltext0
 10956 04b5 52170000 		.4byte	.LVL336-.Ltext0
 10957 04b9 0100     		.2byte	0x1
 10958 04bb 50       		.byte	0x50
 10959 04bc 52170000 		.4byte	.LVL336-.Ltext0
 10960 04c0 C4170000 		.4byte	.LFE102-.Ltext0
 10961 04c4 0400     		.2byte	0x4
 10962 04c6 F3       		.byte	0xf3
 10963 04c7 01       		.uleb128 0x1
 10964 04c8 50       		.byte	0x50
 10965 04c9 9F       		.byte	0x9f
 10966 04ca 00000000 		.4byte	0
 10967 04ce 00000000 		.4byte	0
ARM GAS  /tmp/ccdPJtdr.s 			page 281


 10968              	.LLST168:
 10969 04d2 52170000 		.4byte	.LVL336-.Ltext0
 10970 04d6 A9170000 		.4byte	.LVL337-1-.Ltext0
 10971 04da 0100     		.2byte	0x1
 10972 04dc 50       		.byte	0x50
 10973 04dd B0170000 		.4byte	.LVL338-.Ltext0
 10974 04e1 C4170000 		.4byte	.LFE102-.Ltext0
 10975 04e5 0100     		.2byte	0x1
 10976 04e7 50       		.byte	0x50
 10977 04e8 00000000 		.4byte	0
 10978 04ec 00000000 		.4byte	0
 10979              	.LLST130:
 10980 04f0 34110000 		.4byte	.LFB101-.Ltext0
 10981 04f4 36110000 		.4byte	.LCFI50-.Ltext0
 10982 04f8 0200     		.2byte	0x2
 10983 04fa 7D       		.byte	0x7d
 10984 04fb 00       		.sleb128 0
 10985 04fc 36110000 		.4byte	.LCFI50-.Ltext0
 10986 0500 44110000 		.4byte	.LFE101-.Ltext0
 10987 0504 0200     		.2byte	0x2
 10988 0506 7D       		.byte	0x7d
 10989 0507 08       		.sleb128 8
 10990 0508 00000000 		.4byte	0
 10991 050c 00000000 		.4byte	0
 10992              	.LLST131:
 10993 0510 34110000 		.4byte	.LVL251-.Ltext0
 10994 0514 3A110000 		.4byte	.LVL252-.Ltext0
 10995 0518 0100     		.2byte	0x1
 10996 051a 50       		.byte	0x50
 10997 051b 3A110000 		.4byte	.LVL252-.Ltext0
 10998 051f 44110000 		.4byte	.LFE101-.Ltext0
 10999 0523 0400     		.2byte	0x4
 11000 0525 F3       		.byte	0xf3
 11001 0526 01       		.uleb128 0x1
 11002 0527 50       		.byte	0x50
 11003 0528 9F       		.byte	0x9f
 11004 0529 00000000 		.4byte	0
 11005 052d 00000000 		.4byte	0
 11006              	.LLST132:
 11007 0531 3A110000 		.4byte	.LVL252-.Ltext0
 11008 0535 41110000 		.4byte	.LVL253-1-.Ltext0
 11009 0539 0100     		.2byte	0x1
 11010 053b 50       		.byte	0x50
 11011 053c 00000000 		.4byte	0
 11012 0540 00000000 		.4byte	0
 11013              	.LLST120:
 11014 0544 C40F0000 		.4byte	.LFB100-.Ltext0
 11015 0548 C80F0000 		.4byte	.LCFI42-.Ltext0
 11016 054c 0200     		.2byte	0x2
 11017 054e 7D       		.byte	0x7d
 11018 054f 00       		.sleb128 0
 11019 0550 C80F0000 		.4byte	.LCFI42-.Ltext0
 11020 0554 E60F0000 		.4byte	.LFE100-.Ltext0
 11021 0558 0200     		.2byte	0x2
 11022 055a 7D       		.byte	0x7d
 11023 055b 08       		.sleb128 8
 11024 055c 00000000 		.4byte	0
ARM GAS  /tmp/ccdPJtdr.s 			page 282


 11025 0560 00000000 		.4byte	0
 11026              	.LLST121:
 11027 0564 C40F0000 		.4byte	.LVL227-.Ltext0
 11028 0568 C60F0000 		.4byte	.LVL228-.Ltext0
 11029 056c 0100     		.2byte	0x1
 11030 056e 50       		.byte	0x50
 11031 056f C60F0000 		.4byte	.LVL228-.Ltext0
 11032 0573 E60F0000 		.4byte	.LFE100-.Ltext0
 11033 0577 0400     		.2byte	0x4
 11034 0579 F3       		.byte	0xf3
 11035 057a 01       		.uleb128 0x1
 11036 057b 50       		.byte	0x50
 11037 057c 9F       		.byte	0x9f
 11038 057d 00000000 		.4byte	0
 11039 0581 00000000 		.4byte	0
 11040              	.LLST122:
 11041 0585 C60F0000 		.4byte	.LVL228-.Ltext0
 11042 0589 E30F0000 		.4byte	.LVL229-1-.Ltext0
 11043 058d 0100     		.2byte	0x1
 11044 058f 50       		.byte	0x50
 11045 0590 00000000 		.4byte	0
 11046 0594 00000000 		.4byte	0
 11047              	.LLST111:
 11048 0598 D60E0000 		.4byte	.LFB99-.Ltext0
 11049 059c D80E0000 		.4byte	.LCFI38-.Ltext0
 11050 05a0 0200     		.2byte	0x2
 11051 05a2 7D       		.byte	0x7d
 11052 05a3 00       		.sleb128 0
 11053 05a4 D80E0000 		.4byte	.LCFI38-.Ltext0
 11054 05a8 E00E0000 		.4byte	.LFE99-.Ltext0
 11055 05ac 0200     		.2byte	0x2
 11056 05ae 7D       		.byte	0x7d
 11057 05af 08       		.sleb128 8
 11058 05b0 00000000 		.4byte	0
 11059 05b4 00000000 		.4byte	0
 11060              	.LLST112:
 11061 05b8 D60E0000 		.4byte	.LVL209-.Ltext0
 11062 05bc DA0E0000 		.4byte	.LVL210-.Ltext0
 11063 05c0 0100     		.2byte	0x1
 11064 05c2 50       		.byte	0x50
 11065 05c3 DA0E0000 		.4byte	.LVL210-.Ltext0
 11066 05c7 E00E0000 		.4byte	.LFE99-.Ltext0
 11067 05cb 0400     		.2byte	0x4
 11068 05cd F3       		.byte	0xf3
 11069 05ce 01       		.uleb128 0x1
 11070 05cf 50       		.byte	0x50
 11071 05d0 9F       		.byte	0x9f
 11072 05d1 00000000 		.4byte	0
 11073 05d5 00000000 		.4byte	0
 11074              	.LLST113:
 11075 05d9 D60E0000 		.4byte	.LVL209-.Ltext0
 11076 05dd DA0E0000 		.4byte	.LVL210-.Ltext0
 11077 05e1 0200     		.2byte	0x2
 11078 05e3 70       		.byte	0x70
 11079 05e4 24       		.sleb128 36
 11080 05e5 DA0E0000 		.4byte	.LVL210-.Ltext0
 11081 05e9 DD0E0000 		.4byte	.LVL211-1-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 283


 11082 05ed 0500     		.2byte	0x5
 11083 05ef F3       		.byte	0xf3
 11084 05f0 01       		.uleb128 0x1
 11085 05f1 50       		.byte	0x50
 11086 05f2 23       		.byte	0x23
 11087 05f3 24       		.uleb128 0x24
 11088 05f4 00000000 		.4byte	0
 11089 05f8 00000000 		.4byte	0
 11090              	.LLST108:
 11091 05fc CA0E0000 		.4byte	.LFB98-.Ltext0
 11092 0600 CC0E0000 		.4byte	.LCFI37-.Ltext0
 11093 0604 0200     		.2byte	0x2
 11094 0606 7D       		.byte	0x7d
 11095 0607 00       		.sleb128 0
 11096 0608 CC0E0000 		.4byte	.LCFI37-.Ltext0
 11097 060c D40E0000 		.4byte	.LFE98-.Ltext0
 11098 0610 0200     		.2byte	0x2
 11099 0612 7D       		.byte	0x7d
 11100 0613 08       		.sleb128 8
 11101 0614 00000000 		.4byte	0
 11102 0618 00000000 		.4byte	0
 11103              	.LLST109:
 11104 061c CA0E0000 		.4byte	.LVL206-.Ltext0
 11105 0620 CE0E0000 		.4byte	.LVL207-.Ltext0
 11106 0624 0100     		.2byte	0x1
 11107 0626 50       		.byte	0x50
 11108 0627 CE0E0000 		.4byte	.LVL207-.Ltext0
 11109 062b D40E0000 		.4byte	.LFE98-.Ltext0
 11110 062f 0400     		.2byte	0x4
 11111 0631 F3       		.byte	0xf3
 11112 0632 01       		.uleb128 0x1
 11113 0633 50       		.byte	0x50
 11114 0634 9F       		.byte	0x9f
 11115 0635 00000000 		.4byte	0
 11116 0639 00000000 		.4byte	0
 11117              	.LLST110:
 11118 063d CA0E0000 		.4byte	.LVL206-.Ltext0
 11119 0641 CE0E0000 		.4byte	.LVL207-.Ltext0
 11120 0645 0200     		.2byte	0x2
 11121 0647 70       		.byte	0x70
 11122 0648 24       		.sleb128 36
 11123 0649 CE0E0000 		.4byte	.LVL207-.Ltext0
 11124 064d D10E0000 		.4byte	.LVL208-1-.Ltext0
 11125 0651 0500     		.2byte	0x5
 11126 0653 F3       		.byte	0xf3
 11127 0654 01       		.uleb128 0x1
 11128 0655 50       		.byte	0x50
 11129 0656 23       		.byte	0x23
 11130 0657 24       		.uleb128 0x24
 11131 0658 00000000 		.4byte	0
 11132 065c 00000000 		.4byte	0
 11133              	.LLST105:
 11134 0660 BE0E0000 		.4byte	.LFB97-.Ltext0
 11135 0664 C00E0000 		.4byte	.LCFI36-.Ltext0
 11136 0668 0200     		.2byte	0x2
 11137 066a 7D       		.byte	0x7d
 11138 066b 00       		.sleb128 0
ARM GAS  /tmp/ccdPJtdr.s 			page 284


 11139 066c C00E0000 		.4byte	.LCFI36-.Ltext0
 11140 0670 C80E0000 		.4byte	.LFE97-.Ltext0
 11141 0674 0200     		.2byte	0x2
 11142 0676 7D       		.byte	0x7d
 11143 0677 08       		.sleb128 8
 11144 0678 00000000 		.4byte	0
 11145 067c 00000000 		.4byte	0
 11146              	.LLST106:
 11147 0680 BE0E0000 		.4byte	.LVL203-.Ltext0
 11148 0684 C20E0000 		.4byte	.LVL204-.Ltext0
 11149 0688 0100     		.2byte	0x1
 11150 068a 50       		.byte	0x50
 11151 068b C20E0000 		.4byte	.LVL204-.Ltext0
 11152 068f C80E0000 		.4byte	.LFE97-.Ltext0
 11153 0693 0400     		.2byte	0x4
 11154 0695 F3       		.byte	0xf3
 11155 0696 01       		.uleb128 0x1
 11156 0697 50       		.byte	0x50
 11157 0698 9F       		.byte	0x9f
 11158 0699 00000000 		.4byte	0
 11159 069d 00000000 		.4byte	0
 11160              	.LLST107:
 11161 06a1 BE0E0000 		.4byte	.LVL203-.Ltext0
 11162 06a5 C20E0000 		.4byte	.LVL204-.Ltext0
 11163 06a9 0200     		.2byte	0x2
 11164 06ab 70       		.byte	0x70
 11165 06ac 24       		.sleb128 36
 11166 06ad C20E0000 		.4byte	.LVL204-.Ltext0
 11167 06b1 C50E0000 		.4byte	.LVL205-1-.Ltext0
 11168 06b5 0500     		.2byte	0x5
 11169 06b7 F3       		.byte	0xf3
 11170 06b8 01       		.uleb128 0x1
 11171 06b9 50       		.byte	0x50
 11172 06ba 23       		.byte	0x23
 11173 06bb 24       		.uleb128 0x24
 11174 06bc 00000000 		.4byte	0
 11175 06c0 00000000 		.4byte	0
 11176              	.LLST157:
 11177 06c4 1E150000 		.4byte	.LFB96-.Ltext0
 11178 06c8 20150000 		.4byte	.LCFI67-.Ltext0
 11179 06cc 0200     		.2byte	0x2
 11180 06ce 7D       		.byte	0x7d
 11181 06cf 00       		.sleb128 0
 11182 06d0 20150000 		.4byte	.LCFI67-.Ltext0
 11183 06d4 B4150000 		.4byte	.LCFI68-.Ltext0
 11184 06d8 0200     		.2byte	0x2
 11185 06da 7D       		.byte	0x7d
 11186 06db 18       		.sleb128 24
 11187 06dc B4150000 		.4byte	.LCFI68-.Ltext0
 11188 06e0 B6150000 		.4byte	.LCFI69-.Ltext0
 11189 06e4 0200     		.2byte	0x2
 11190 06e6 7D       		.byte	0x7d
 11191 06e7 10       		.sleb128 16
 11192 06e8 B6150000 		.4byte	.LCFI69-.Ltext0
 11193 06ec BE150000 		.4byte	.LFE96-.Ltext0
 11194 06f0 0200     		.2byte	0x2
 11195 06f2 7D       		.byte	0x7d
ARM GAS  /tmp/ccdPJtdr.s 			page 285


 11196 06f3 18       		.sleb128 24
 11197 06f4 00000000 		.4byte	0
 11198 06f8 00000000 		.4byte	0
 11199              	.LLST158:
 11200 06fc 1E150000 		.4byte	.LVL308-.Ltext0
 11201 0700 27150000 		.4byte	.LVL310-1-.Ltext0
 11202 0704 0100     		.2byte	0x1
 11203 0706 50       		.byte	0x50
 11204 0707 27150000 		.4byte	.LVL310-1-.Ltext0
 11205 070b BE150000 		.4byte	.LFE96-.Ltext0
 11206 070f 0100     		.2byte	0x1
 11207 0711 56       		.byte	0x56
 11208 0712 00000000 		.4byte	0
 11209 0716 00000000 		.4byte	0
 11210              	.LLST159:
 11211 071a 2C150000 		.4byte	.LVL311-.Ltext0
 11212 071e 4E150000 		.4byte	.LVL312-.Ltext0
 11213 0722 0100     		.2byte	0x1
 11214 0724 50       		.byte	0x50
 11215 0725 4E150000 		.4byte	.LVL312-.Ltext0
 11216 0729 BE150000 		.4byte	.LFE96-.Ltext0
 11217 072d 0100     		.2byte	0x1
 11218 072f 55       		.byte	0x55
 11219 0730 00000000 		.4byte	0
 11220 0734 00000000 		.4byte	0
 11221              	.LLST154:
 11222 0738 82140000 		.4byte	.LFB95-.Ltext0
 11223 073c 84140000 		.4byte	.LCFI64-.Ltext0
 11224 0740 0200     		.2byte	0x2
 11225 0742 7D       		.byte	0x7d
 11226 0743 00       		.sleb128 0
 11227 0744 84140000 		.4byte	.LCFI64-.Ltext0
 11228 0748 14150000 		.4byte	.LCFI65-.Ltext0
 11229 074c 0200     		.2byte	0x2
 11230 074e 7D       		.byte	0x7d
 11231 074f 18       		.sleb128 24
 11232 0750 14150000 		.4byte	.LCFI65-.Ltext0
 11233 0754 16150000 		.4byte	.LCFI66-.Ltext0
 11234 0758 0200     		.2byte	0x2
 11235 075a 7D       		.byte	0x7d
 11236 075b 10       		.sleb128 16
 11237 075c 16150000 		.4byte	.LCFI66-.Ltext0
 11238 0760 1E150000 		.4byte	.LFE95-.Ltext0
 11239 0764 0200     		.2byte	0x2
 11240 0766 7D       		.byte	0x7d
 11241 0767 18       		.sleb128 24
 11242 0768 00000000 		.4byte	0
 11243 076c 00000000 		.4byte	0
 11244              	.LLST155:
 11245 0770 82140000 		.4byte	.LVL298-.Ltext0
 11246 0774 8B140000 		.4byte	.LVL300-1-.Ltext0
 11247 0778 0100     		.2byte	0x1
 11248 077a 50       		.byte	0x50
 11249 077b 8B140000 		.4byte	.LVL300-1-.Ltext0
 11250 077f 1E150000 		.4byte	.LFE95-.Ltext0
 11251 0783 0100     		.2byte	0x1
 11252 0785 56       		.byte	0x56
ARM GAS  /tmp/ccdPJtdr.s 			page 286


 11253 0786 00000000 		.4byte	0
 11254 078a 00000000 		.4byte	0
 11255              	.LLST156:
 11256 078e 90140000 		.4byte	.LVL301-.Ltext0
 11257 0792 B2140000 		.4byte	.LVL302-.Ltext0
 11258 0796 0100     		.2byte	0x1
 11259 0798 50       		.byte	0x50
 11260 0799 B2140000 		.4byte	.LVL302-.Ltext0
 11261 079d 1E150000 		.4byte	.LFE95-.Ltext0
 11262 07a1 0100     		.2byte	0x1
 11263 07a3 55       		.byte	0x55
 11264 07a4 00000000 		.4byte	0
 11265 07a8 00000000 		.4byte	0
 11266              	.LLST123:
 11267 07ac E60F0000 		.4byte	.LFB94-.Ltext0
 11268 07b0 E80F0000 		.4byte	.LCFI43-.Ltext0
 11269 07b4 0200     		.2byte	0x2
 11270 07b6 7D       		.byte	0x7d
 11271 07b7 00       		.sleb128 0
 11272 07b8 E80F0000 		.4byte	.LCFI43-.Ltext0
 11273 07bc 46100000 		.4byte	.LCFI44-.Ltext0
 11274 07c0 0200     		.2byte	0x2
 11275 07c2 7D       		.byte	0x7d
 11276 07c3 18       		.sleb128 24
 11277 07c4 46100000 		.4byte	.LCFI44-.Ltext0
 11278 07c8 48100000 		.4byte	.LCFI45-.Ltext0
 11279 07cc 0200     		.2byte	0x2
 11280 07ce 7D       		.byte	0x7d
 11281 07cf 0C       		.sleb128 12
 11282 07d0 48100000 		.4byte	.LCFI45-.Ltext0
 11283 07d4 50100000 		.4byte	.LFE94-.Ltext0
 11284 07d8 0200     		.2byte	0x2
 11285 07da 7D       		.byte	0x7d
 11286 07db 18       		.sleb128 24
 11287 07dc 00000000 		.4byte	0
 11288 07e0 00000000 		.4byte	0
 11289              	.LLST124:
 11290 07e4 E60F0000 		.4byte	.LVL230-.Ltext0
 11291 07e8 EF0F0000 		.4byte	.LVL232-1-.Ltext0
 11292 07ec 0100     		.2byte	0x1
 11293 07ee 50       		.byte	0x50
 11294 07ef EF0F0000 		.4byte	.LVL232-1-.Ltext0
 11295 07f3 50100000 		.4byte	.LFE94-.Ltext0
 11296 07f7 0100     		.2byte	0x1
 11297 07f9 55       		.byte	0x55
 11298 07fa 00000000 		.4byte	0
 11299 07fe 00000000 		.4byte	0
 11300              	.LLST125:
 11301 0802 F40F0000 		.4byte	.LVL233-.Ltext0
 11302 0806 FE0F0000 		.4byte	.LVL234-.Ltext0
 11303 080a 0100     		.2byte	0x1
 11304 080c 50       		.byte	0x50
 11305 080d FE0F0000 		.4byte	.LVL234-.Ltext0
 11306 0811 13100000 		.4byte	.LVL235-1-.Ltext0
 11307 0815 0100     		.2byte	0x1
 11308 0817 52       		.byte	0x52
 11309 0818 00000000 		.4byte	0
ARM GAS  /tmp/ccdPJtdr.s 			page 287


 11310 081c 00000000 		.4byte	0
 11311              	.LLST170:
 11312 0820 CA170000 		.4byte	.LVL341-.Ltext0
 11313 0824 CC170000 		.4byte	.LVL342-.Ltext0
 11314 0828 0100     		.2byte	0x1
 11315 082a 50       		.byte	0x50
 11316 082b CC170000 		.4byte	.LVL342-.Ltext0
 11317 082f CE170000 		.4byte	.LFE93-.Ltext0
 11318 0833 0400     		.2byte	0x4
 11319 0835 F3       		.byte	0xf3
 11320 0836 01       		.uleb128 0x1
 11321 0837 50       		.byte	0x50
 11322 0838 9F       		.byte	0x9f
 11323 0839 00000000 		.4byte	0
 11324 083d 00000000 		.4byte	0
 11325              	.LLST169:
 11326 0841 C4170000 		.4byte	.LVL339-.Ltext0
 11327 0845 C8170000 		.4byte	.LVL340-.Ltext0
 11328 0849 0100     		.2byte	0x1
 11329 084b 50       		.byte	0x50
 11330 084c C8170000 		.4byte	.LVL340-.Ltext0
 11331 0850 CA170000 		.4byte	.LFE92-.Ltext0
 11332 0854 0400     		.2byte	0x4
 11333 0856 F3       		.byte	0xf3
 11334 0857 01       		.uleb128 0x1
 11335 0858 50       		.byte	0x50
 11336 0859 9F       		.byte	0x9f
 11337 085a 00000000 		.4byte	0
 11338 085e 00000000 		.4byte	0
 11339              	.LLST126:
 11340 0862 50100000 		.4byte	.LFB83-.Ltext0
 11341 0866 54100000 		.4byte	.LCFI46-.Ltext0
 11342 086a 0200     		.2byte	0x2
 11343 086c 7D       		.byte	0x7d
 11344 086d 00       		.sleb128 0
 11345 086e 54100000 		.4byte	.LCFI46-.Ltext0
 11346 0872 5A100000 		.4byte	.LCFI47-.Ltext0
 11347 0876 0200     		.2byte	0x2
 11348 0878 7D       		.byte	0x7d
 11349 0879 0C       		.sleb128 12
 11350 087a 5A100000 		.4byte	.LCFI47-.Ltext0
 11351 087e 6E100000 		.4byte	.LCFI48-.Ltext0
 11352 0882 0200     		.2byte	0x2
 11353 0884 7D       		.byte	0x7d
 11354 0885 20       		.sleb128 32
 11355 0886 6E100000 		.4byte	.LCFI48-.Ltext0
 11356 088a 70100000 		.4byte	.LCFI49-.Ltext0
 11357 088e 0200     		.2byte	0x2
 11358 0890 7D       		.byte	0x7d
 11359 0891 0C       		.sleb128 12
 11360 0892 70100000 		.4byte	.LCFI49-.Ltext0
 11361 0896 34110000 		.4byte	.LFE83-.Ltext0
 11362 089a 0200     		.2byte	0x2
 11363 089c 7D       		.byte	0x7d
 11364 089d 20       		.sleb128 32
 11365 089e 00000000 		.4byte	0
 11366 08a2 00000000 		.4byte	0
ARM GAS  /tmp/ccdPJtdr.s 			page 288


 11367              	.LLST127:
 11368 08a6 50100000 		.4byte	.LVL239-.Ltext0
 11369 08aa 6B100000 		.4byte	.LVL242-1-.Ltext0
 11370 08ae 0100     		.2byte	0x1
 11371 08b0 50       		.byte	0x50
 11372 08b1 6B100000 		.4byte	.LVL242-1-.Ltext0
 11373 08b5 70100000 		.4byte	.LVL243-.Ltext0
 11374 08b9 0100     		.2byte	0x1
 11375 08bb 54       		.byte	0x54
 11376 08bc 70100000 		.4byte	.LVL243-.Ltext0
 11377 08c0 72100000 		.4byte	.LVL244-.Ltext0
 11378 08c4 0100     		.2byte	0x1
 11379 08c6 50       		.byte	0x50
 11380 08c7 72100000 		.4byte	.LVL244-.Ltext0
 11381 08cb 34110000 		.4byte	.LFE83-.Ltext0
 11382 08cf 0100     		.2byte	0x1
 11383 08d1 54       		.byte	0x54
 11384 08d2 00000000 		.4byte	0
 11385 08d6 00000000 		.4byte	0
 11386              	.LLST128:
 11387 08da 56100000 		.4byte	.LVL240-.Ltext0
 11388 08de 6B100000 		.4byte	.LVL242-1-.Ltext0
 11389 08e2 0100     		.2byte	0x1
 11390 08e4 51       		.byte	0x51
 11391 08e5 70100000 		.4byte	.LVL243-.Ltext0
 11392 08e9 F3100000 		.4byte	.LVL246-1-.Ltext0
 11393 08ed 0100     		.2byte	0x1
 11394 08ef 51       		.byte	0x51
 11395 08f0 1A110000 		.4byte	.LVL248-.Ltext0
 11396 08f4 2D110000 		.4byte	.LVL250-1-.Ltext0
 11397 08f8 0100     		.2byte	0x1
 11398 08fa 51       		.byte	0x51
 11399 08fb 00000000 		.4byte	0
 11400 08ff 00000000 		.4byte	0
 11401              	.LLST129:
 11402 0903 58100000 		.4byte	.LVL241-.Ltext0
 11403 0907 6B100000 		.4byte	.LVL242-1-.Ltext0
 11404 090b 0100     		.2byte	0x1
 11405 090d 52       		.byte	0x52
 11406 090e 70100000 		.4byte	.LVL243-.Ltext0
 11407 0912 B0100000 		.4byte	.LVL245-.Ltext0
 11408 0916 0100     		.2byte	0x1
 11409 0918 52       		.byte	0x52
 11410 0919 1A110000 		.4byte	.LVL248-.Ltext0
 11411 091d 1E110000 		.4byte	.LVL249-.Ltext0
 11412 0921 0100     		.2byte	0x1
 11413 0923 52       		.byte	0x52
 11414 0924 00000000 		.4byte	0
 11415 0928 00000000 		.4byte	0
 11416              	.LLST102:
 11417 092c 700E0000 		.4byte	.LFB82-.Ltext0
 11418 0930 720E0000 		.4byte	.LCFI35-.Ltext0
 11419 0934 0200     		.2byte	0x2
 11420 0936 7D       		.byte	0x7d
 11421 0937 00       		.sleb128 0
 11422 0938 720E0000 		.4byte	.LCFI35-.Ltext0
 11423 093c B60E0000 		.4byte	.LFE82-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 289


 11424 0940 0200     		.2byte	0x2
 11425 0942 7D       		.byte	0x7d
 11426 0943 10       		.sleb128 16
 11427 0944 00000000 		.4byte	0
 11428 0948 00000000 		.4byte	0
 11429              	.LLST103:
 11430 094c 700E0000 		.4byte	.LVL194-.Ltext0
 11431 0950 760E0000 		.4byte	.LVL195-.Ltext0
 11432 0954 0100     		.2byte	0x1
 11433 0956 50       		.byte	0x50
 11434 0957 760E0000 		.4byte	.LVL195-.Ltext0
 11435 095b B60E0000 		.4byte	.LFE82-.Ltext0
 11436 095f 0100     		.2byte	0x1
 11437 0961 54       		.byte	0x54
 11438 0962 00000000 		.4byte	0
 11439 0966 00000000 		.4byte	0
 11440              	.LLST104:
 11441 096a 700E0000 		.4byte	.LVL194-.Ltext0
 11442 096e 7A0E0000 		.4byte	.LVL196-.Ltext0
 11443 0972 0200     		.2byte	0x2
 11444 0974 30       		.byte	0x30
 11445 0975 9F       		.byte	0x9f
 11446 0976 7A0E0000 		.4byte	.LVL196-.Ltext0
 11447 097a 860E0000 		.4byte	.LVL198-.Ltext0
 11448 097e 0100     		.2byte	0x1
 11449 0980 55       		.byte	0x55
 11450 0981 8E0E0000 		.4byte	.LVL199-.Ltext0
 11451 0985 A20E0000 		.4byte	.LVL200-.Ltext0
 11452 0989 0100     		.2byte	0x1
 11453 098b 55       		.byte	0x55
 11454 098c A20E0000 		.4byte	.LVL200-.Ltext0
 11455 0990 B40E0000 		.4byte	.LVL202-.Ltext0
 11456 0994 0200     		.2byte	0x2
 11457 0996 30       		.byte	0x30
 11458 0997 9F       		.byte	0x9f
 11459 0998 B40E0000 		.4byte	.LVL202-.Ltext0
 11460 099c B60E0000 		.4byte	.LFE82-.Ltext0
 11461 09a0 0200     		.2byte	0x2
 11462 09a2 31       		.byte	0x31
 11463 09a3 9F       		.byte	0x9f
 11464 09a4 00000000 		.4byte	0
 11465 09a8 00000000 		.4byte	0
 11466              	.LLST101:
 11467 09ac 500E0000 		.4byte	.LVL192-.Ltext0
 11468 09b0 6C0E0000 		.4byte	.LVL193-.Ltext0
 11469 09b4 0100     		.2byte	0x1
 11470 09b6 50       		.byte	0x50
 11471 09b7 6C0E0000 		.4byte	.LVL193-.Ltext0
 11472 09bb 700E0000 		.4byte	.LFE81-.Ltext0
 11473 09bf 0400     		.2byte	0x4
 11474 09c1 F3       		.byte	0xf3
 11475 09c2 01       		.uleb128 0x1
 11476 09c3 50       		.byte	0x50
 11477 09c4 9F       		.byte	0x9f
 11478 09c5 00000000 		.4byte	0
 11479 09c9 00000000 		.4byte	0
 11480              	.LLST100:
ARM GAS  /tmp/ccdPJtdr.s 			page 290


 11481 09cd 300E0000 		.4byte	.LVL190-.Ltext0
 11482 09d1 4C0E0000 		.4byte	.LVL191-.Ltext0
 11483 09d5 0100     		.2byte	0x1
 11484 09d7 50       		.byte	0x50
 11485 09d8 4C0E0000 		.4byte	.LVL191-.Ltext0
 11486 09dc 500E0000 		.4byte	.LFE80-.Ltext0
 11487 09e0 0400     		.2byte	0x4
 11488 09e2 F3       		.byte	0xf3
 11489 09e3 01       		.uleb128 0x1
 11490 09e4 50       		.byte	0x50
 11491 09e5 9F       		.byte	0x9f
 11492 09e6 00000000 		.4byte	0
 11493 09ea 00000000 		.4byte	0
 11494              	.LLST160:
 11495 09ee C0150000 		.4byte	.LFB79-.Ltext0
 11496 09f2 C8150000 		.4byte	.LCFI70-.Ltext0
 11497 09f6 0200     		.2byte	0x2
 11498 09f8 7D       		.byte	0x7d
 11499 09f9 00       		.sleb128 0
 11500 09fa C8150000 		.4byte	.LCFI70-.Ltext0
 11501 09fe CC150000 		.4byte	.LCFI71-.Ltext0
 11502 0a02 0200     		.2byte	0x2
 11503 0a04 7D       		.byte	0x7d
 11504 0a05 0C       		.sleb128 12
 11505 0a06 CC150000 		.4byte	.LCFI71-.Ltext0
 11506 0a0a 70160000 		.4byte	.LCFI72-.Ltext0
 11507 0a0e 0200     		.2byte	0x2
 11508 0a10 7D       		.byte	0x7d
 11509 0a11 20       		.sleb128 32
 11510 0a12 70160000 		.4byte	.LCFI72-.Ltext0
 11511 0a16 72160000 		.4byte	.LCFI73-.Ltext0
 11512 0a1a 0200     		.2byte	0x2
 11513 0a1c 7D       		.byte	0x7d
 11514 0a1d 0C       		.sleb128 12
 11515 0a1e 72160000 		.4byte	.LCFI73-.Ltext0
 11516 0a22 E4160000 		.4byte	.LFE79-.Ltext0
 11517 0a26 0200     		.2byte	0x2
 11518 0a28 7D       		.byte	0x7d
 11519 0a29 20       		.sleb128 32
 11520 0a2a 00000000 		.4byte	0
 11521 0a2e 00000000 		.4byte	0
 11522              	.LLST161:
 11523 0a32 C0150000 		.4byte	.LVL319-.Ltext0
 11524 0a36 EA150000 		.4byte	.LVL320-.Ltext0
 11525 0a3a 0100     		.2byte	0x1
 11526 0a3c 50       		.byte	0x50
 11527 0a3d EA150000 		.4byte	.LVL320-.Ltext0
 11528 0a41 E4160000 		.4byte	.LFE79-.Ltext0
 11529 0a45 0100     		.2byte	0x1
 11530 0a47 54       		.byte	0x54
 11531 0a48 00000000 		.4byte	0
 11532 0a4c 00000000 		.4byte	0
 11533              	.LLST162:
 11534 0a50 C0150000 		.4byte	.LVL319-.Ltext0
 11535 0a54 6C160000 		.4byte	.LVL324-.Ltext0
 11536 0a58 0200     		.2byte	0x2
 11537 0a5a 30       		.byte	0x30
ARM GAS  /tmp/ccdPJtdr.s 			page 291


 11538 0a5b 9F       		.byte	0x9f
 11539 0a5c 6C160000 		.4byte	.LVL324-.Ltext0
 11540 0a60 72160000 		.4byte	.LVL325-.Ltext0
 11541 0a64 0100     		.2byte	0x1
 11542 0a66 55       		.byte	0x55
 11543 0a67 72160000 		.4byte	.LVL325-.Ltext0
 11544 0a6b B6160000 		.4byte	.LVL328-.Ltext0
 11545 0a6f 0200     		.2byte	0x2
 11546 0a71 30       		.byte	0x30
 11547 0a72 9F       		.byte	0x9f
 11548 0a73 B6160000 		.4byte	.LVL328-.Ltext0
 11549 0a77 E4160000 		.4byte	.LFE79-.Ltext0
 11550 0a7b 0100     		.2byte	0x1
 11551 0a7d 55       		.byte	0x55
 11552 0a7e 00000000 		.4byte	0
 11553 0a82 00000000 		.4byte	0
 11554              	.LLST163:
 11555 0a86 C0150000 		.4byte	.LVL319-.Ltext0
 11556 0a8a 58160000 		.4byte	.LVL322-.Ltext0
 11557 0a8e 0200     		.2byte	0x2
 11558 0a90 31       		.byte	0x31
 11559 0a91 9F       		.byte	0x9f
 11560 0a92 58160000 		.4byte	.LVL322-.Ltext0
 11561 0a96 6C160000 		.4byte	.LVL324-.Ltext0
 11562 0a9a 0100     		.2byte	0x1
 11563 0a9c 55       		.byte	0x55
 11564 0a9d 72160000 		.4byte	.LVL325-.Ltext0
 11565 0aa1 96160000 		.4byte	.LVL326-.Ltext0
 11566 0aa5 0200     		.2byte	0x2
 11567 0aa7 31       		.byte	0x31
 11568 0aa8 9F       		.byte	0x9f
 11569 0aa9 96160000 		.4byte	.LVL326-.Ltext0
 11570 0aad A4160000 		.4byte	.LVL327-.Ltext0
 11571 0ab1 0100     		.2byte	0x1
 11572 0ab3 55       		.byte	0x55
 11573 0ab4 A4160000 		.4byte	.LVL327-.Ltext0
 11574 0ab8 E4160000 		.4byte	.LFE79-.Ltext0
 11575 0abc 0200     		.2byte	0x2
 11576 0abe 31       		.byte	0x31
 11577 0abf 9F       		.byte	0x9f
 11578 0ac0 00000000 		.4byte	0
 11579 0ac4 00000000 		.4byte	0
 11580              	.LLST97:
 11581 0ac8 100D0000 		.4byte	.LFB78-.Ltext0
 11582 0acc 120D0000 		.4byte	.LCFI32-.Ltext0
 11583 0ad0 0200     		.2byte	0x2
 11584 0ad2 7D       		.byte	0x7d
 11585 0ad3 00       		.sleb128 0
 11586 0ad4 120D0000 		.4byte	.LCFI32-.Ltext0
 11587 0ad8 F20D0000 		.4byte	.LCFI33-.Ltext0
 11588 0adc 0200     		.2byte	0x2
 11589 0ade 7D       		.byte	0x7d
 11590 0adf 18       		.sleb128 24
 11591 0ae0 F20D0000 		.4byte	.LCFI33-.Ltext0
 11592 0ae4 F40D0000 		.4byte	.LCFI34-.Ltext0
 11593 0ae8 0200     		.2byte	0x2
 11594 0aea 7D       		.byte	0x7d
ARM GAS  /tmp/ccdPJtdr.s 			page 292


 11595 0aeb 08       		.sleb128 8
 11596 0aec F40D0000 		.4byte	.LCFI34-.Ltext0
 11597 0af0 300E0000 		.4byte	.LFE78-.Ltext0
 11598 0af4 0200     		.2byte	0x2
 11599 0af6 7D       		.byte	0x7d
 11600 0af7 18       		.sleb128 24
 11601 0af8 00000000 		.4byte	0
 11602 0afc 00000000 		.4byte	0
 11603              	.LLST98:
 11604 0b00 100D0000 		.4byte	.LVL183-.Ltext0
 11605 0b04 540D0000 		.4byte	.LVL184-.Ltext0
 11606 0b08 0100     		.2byte	0x1
 11607 0b0a 50       		.byte	0x50
 11608 0b0b 540D0000 		.4byte	.LVL184-.Ltext0
 11609 0b0f F40D0000 		.4byte	.LVL188-.Ltext0
 11610 0b13 0100     		.2byte	0x1
 11611 0b15 54       		.byte	0x54
 11612 0b16 F40D0000 		.4byte	.LVL188-.Ltext0
 11613 0b1a 040E0000 		.4byte	.LVL189-.Ltext0
 11614 0b1e 0100     		.2byte	0x1
 11615 0b20 50       		.byte	0x50
 11616 0b21 040E0000 		.4byte	.LVL189-.Ltext0
 11617 0b25 300E0000 		.4byte	.LFE78-.Ltext0
 11618 0b29 0100     		.2byte	0x1
 11619 0b2b 54       		.byte	0x54
 11620 0b2c 00000000 		.4byte	0
 11621 0b30 00000000 		.4byte	0
 11622              	.LLST99:
 11623 0b34 100D0000 		.4byte	.LVL183-.Ltext0
 11624 0b38 E00D0000 		.4byte	.LVL187-.Ltext0
 11625 0b3c 0200     		.2byte	0x2
 11626 0b3e 30       		.byte	0x30
 11627 0b3f 9F       		.byte	0x9f
 11628 0b40 E00D0000 		.4byte	.LVL187-.Ltext0
 11629 0b44 F40D0000 		.4byte	.LVL188-.Ltext0
 11630 0b48 0100     		.2byte	0x1
 11631 0b4a 50       		.byte	0x50
 11632 0b4b F40D0000 		.4byte	.LVL188-.Ltext0
 11633 0b4f 300E0000 		.4byte	.LFE78-.Ltext0
 11634 0b53 0200     		.2byte	0x2
 11635 0b55 30       		.byte	0x30
 11636 0b56 9F       		.byte	0x9f
 11637 0b57 00000000 		.4byte	0
 11638 0b5b 00000000 		.4byte	0
 11639              	.LLST92:
 11640 0b5f 1C0C0000 		.4byte	.LFB76-.Ltext0
 11641 0b63 220C0000 		.4byte	.LCFI29-.Ltext0
 11642 0b67 0200     		.2byte	0x2
 11643 0b69 7D       		.byte	0x7d
 11644 0b6a 00       		.sleb128 0
 11645 0b6b 220C0000 		.4byte	.LCFI29-.Ltext0
 11646 0b6f 360C0000 		.4byte	.LCFI30-.Ltext0
 11647 0b73 0200     		.2byte	0x2
 11648 0b75 7D       		.byte	0x7d
 11649 0b76 10       		.sleb128 16
 11650 0b77 360C0000 		.4byte	.LCFI30-.Ltext0
 11651 0b7b 400C0000 		.4byte	.LCFI31-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 293


 11652 0b7f 0200     		.2byte	0x2
 11653 0b81 7D       		.byte	0x7d
 11654 0b82 00       		.sleb128 0
 11655 0b83 400C0000 		.4byte	.LCFI31-.Ltext0
 11656 0b87 100D0000 		.4byte	.LFE76-.Ltext0
 11657 0b8b 0200     		.2byte	0x2
 11658 0b8d 7D       		.byte	0x7d
 11659 0b8e 10       		.sleb128 16
 11660 0b8f 00000000 		.4byte	0
 11661 0b93 00000000 		.4byte	0
 11662              	.LLST93:
 11663 0b97 1C0C0000 		.4byte	.LVL171-.Ltext0
 11664 0b9b 3F0C0000 		.4byte	.LVL173-1-.Ltext0
 11665 0b9f 0100     		.2byte	0x1
 11666 0ba1 50       		.byte	0x50
 11667 0ba2 3F0C0000 		.4byte	.LVL173-1-.Ltext0
 11668 0ba6 400C0000 		.4byte	.LVL173-.Ltext0
 11669 0baa 0400     		.2byte	0x4
 11670 0bac F3       		.byte	0xf3
 11671 0bad 01       		.uleb128 0x1
 11672 0bae 50       		.byte	0x50
 11673 0baf 9F       		.byte	0x9f
 11674 0bb0 400C0000 		.4byte	.LVL173-.Ltext0
 11675 0bb4 4E0C0000 		.4byte	.LVL175-.Ltext0
 11676 0bb8 0100     		.2byte	0x1
 11677 0bba 50       		.byte	0x50
 11678 0bbb 4E0C0000 		.4byte	.LVL175-.Ltext0
 11679 0bbf FE0C0000 		.4byte	.LVL180-.Ltext0
 11680 0bc3 0100     		.2byte	0x1
 11681 0bc5 54       		.byte	0x54
 11682 0bc6 FE0C0000 		.4byte	.LVL180-.Ltext0
 11683 0bca 000D0000 		.4byte	.LVL181-.Ltext0
 11684 0bce 0100     		.2byte	0x1
 11685 0bd0 50       		.byte	0x50
 11686 0bd1 000D0000 		.4byte	.LVL181-.Ltext0
 11687 0bd5 020D0000 		.4byte	.LVL182-.Ltext0
 11688 0bd9 0100     		.2byte	0x1
 11689 0bdb 54       		.byte	0x54
 11690 0bdc 020D0000 		.4byte	.LVL182-.Ltext0
 11691 0be0 100D0000 		.4byte	.LFE76-.Ltext0
 11692 0be4 0400     		.2byte	0x4
 11693 0be6 F3       		.byte	0xf3
 11694 0be7 01       		.uleb128 0x1
 11695 0be8 50       		.byte	0x50
 11696 0be9 9F       		.byte	0x9f
 11697 0bea 00000000 		.4byte	0
 11698 0bee 00000000 		.4byte	0
 11699              	.LLST94:
 11700 0bf2 1C0C0000 		.4byte	.LVL171-.Ltext0
 11701 0bf6 3F0C0000 		.4byte	.LVL173-1-.Ltext0
 11702 0bfa 0100     		.2byte	0x1
 11703 0bfc 51       		.byte	0x51
 11704 0bfd 3F0C0000 		.4byte	.LVL173-1-.Ltext0
 11705 0c01 400C0000 		.4byte	.LVL173-.Ltext0
 11706 0c05 0400     		.2byte	0x4
 11707 0c07 F3       		.byte	0xf3
 11708 0c08 01       		.uleb128 0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 294


 11709 0c09 51       		.byte	0x51
 11710 0c0a 9F       		.byte	0x9f
 11711 0c0b 400C0000 		.4byte	.LVL173-.Ltext0
 11712 0c0f 440C0000 		.4byte	.LVL174-.Ltext0
 11713 0c13 0100     		.2byte	0x1
 11714 0c15 51       		.byte	0x51
 11715 0c16 440C0000 		.4byte	.LVL174-.Ltext0
 11716 0c1a 020D0000 		.4byte	.LVL182-.Ltext0
 11717 0c1e 0100     		.2byte	0x1
 11718 0c20 55       		.byte	0x55
 11719 0c21 020D0000 		.4byte	.LVL182-.Ltext0
 11720 0c25 100D0000 		.4byte	.LFE76-.Ltext0
 11721 0c29 0400     		.2byte	0x4
 11722 0c2b F3       		.byte	0xf3
 11723 0c2c 01       		.uleb128 0x1
 11724 0c2d 51       		.byte	0x51
 11725 0c2e 9F       		.byte	0x9f
 11726 0c2f 00000000 		.4byte	0
 11727 0c33 00000000 		.4byte	0
 11728              	.LLST95:
 11729 0c37 1C0C0000 		.4byte	.LVL171-.Ltext0
 11730 0c3b 200C0000 		.4byte	.LVL172-.Ltext0
 11731 0c3f 0100     		.2byte	0x1
 11732 0c41 52       		.byte	0x52
 11733 0c42 200C0000 		.4byte	.LVL172-.Ltext0
 11734 0c46 100D0000 		.4byte	.LFE76-.Ltext0
 11735 0c4a 0400     		.2byte	0x4
 11736 0c4c F3       		.byte	0xf3
 11737 0c4d 01       		.uleb128 0x1
 11738 0c4e 52       		.byte	0x52
 11739 0c4f 9F       		.byte	0x9f
 11740 0c50 00000000 		.4byte	0
 11741 0c54 00000000 		.4byte	0
 11742              	.LLST96:
 11743 0c58 1C0C0000 		.4byte	.LVL171-.Ltext0
 11744 0c5c CC0C0000 		.4byte	.LVL177-.Ltext0
 11745 0c60 0200     		.2byte	0x2
 11746 0c62 30       		.byte	0x30
 11747 0c63 9F       		.byte	0x9f
 11748 0c64 CC0C0000 		.4byte	.LVL177-.Ltext0
 11749 0c68 D00C0000 		.4byte	.LVL178-.Ltext0
 11750 0c6c 0200     		.2byte	0x2
 11751 0c6e 31       		.byte	0x31
 11752 0c6f 9F       		.byte	0x9f
 11753 0c70 D00C0000 		.4byte	.LVL178-.Ltext0
 11754 0c74 D80C0000 		.4byte	.LVL179-.Ltext0
 11755 0c78 0100     		.2byte	0x1
 11756 0c7a 50       		.byte	0x50
 11757 0c7b D80C0000 		.4byte	.LVL179-.Ltext0
 11758 0c7f 100D0000 		.4byte	.LFE76-.Ltext0
 11759 0c83 0200     		.2byte	0x2
 11760 0c85 30       		.byte	0x30
 11761 0c86 9F       		.byte	0x9f
 11762 0c87 00000000 		.4byte	0
 11763 0c8b 00000000 		.4byte	0
 11764              	.LLST76:
 11765 0c8f 240A0000 		.4byte	.LFB75-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 295


 11766 0c93 2A0A0000 		.4byte	.LCFI27-.Ltext0
 11767 0c97 0200     		.2byte	0x2
 11768 0c99 7D       		.byte	0x7d
 11769 0c9a 00       		.sleb128 0
 11770 0c9b 2A0A0000 		.4byte	.LCFI27-.Ltext0
 11771 0c9f F80A0000 		.4byte	.LFE75-.Ltext0
 11772 0ca3 0200     		.2byte	0x2
 11773 0ca5 7D       		.byte	0x7d
 11774 0ca6 08       		.sleb128 8
 11775 0ca7 00000000 		.4byte	0
 11776 0cab 00000000 		.4byte	0
 11777              	.LLST77:
 11778 0caf 240A0000 		.4byte	.LVL141-.Ltext0
 11779 0cb3 3A0A0000 		.4byte	.LVL142-.Ltext0
 11780 0cb7 0100     		.2byte	0x1
 11781 0cb9 50       		.byte	0x50
 11782 0cba 3A0A0000 		.4byte	.LVL142-.Ltext0
 11783 0cbe E80A0000 		.4byte	.LVL149-.Ltext0
 11784 0cc2 0100     		.2byte	0x1
 11785 0cc4 54       		.byte	0x54
 11786 0cc5 E80A0000 		.4byte	.LVL149-.Ltext0
 11787 0cc9 EA0A0000 		.4byte	.LVL150-.Ltext0
 11788 0ccd 0100     		.2byte	0x1
 11789 0ccf 50       		.byte	0x50
 11790 0cd0 EA0A0000 		.4byte	.LVL150-.Ltext0
 11791 0cd4 EC0A0000 		.4byte	.LVL151-.Ltext0
 11792 0cd8 0100     		.2byte	0x1
 11793 0cda 54       		.byte	0x54
 11794 0cdb EC0A0000 		.4byte	.LVL151-.Ltext0
 11795 0cdf F80A0000 		.4byte	.LFE75-.Ltext0
 11796 0ce3 0400     		.2byte	0x4
 11797 0ce5 F3       		.byte	0xf3
 11798 0ce6 01       		.uleb128 0x1
 11799 0ce7 50       		.byte	0x50
 11800 0ce8 9F       		.byte	0x9f
 11801 0ce9 00000000 		.4byte	0
 11802 0ced 00000000 		.4byte	0
 11803              	.LLST78:
 11804 0cf1 240A0000 		.4byte	.LVL141-.Ltext0
 11805 0cf5 A90A0000 		.4byte	.LVL144-1-.Ltext0
 11806 0cf9 0100     		.2byte	0x1
 11807 0cfb 51       		.byte	0x51
 11808 0cfc A90A0000 		.4byte	.LVL144-1-.Ltext0
 11809 0d00 E40A0000 		.4byte	.LVL148-.Ltext0
 11810 0d04 0400     		.2byte	0x4
 11811 0d06 F3       		.byte	0xf3
 11812 0d07 01       		.uleb128 0x1
 11813 0d08 51       		.byte	0x51
 11814 0d09 9F       		.byte	0x9f
 11815 0d0a E40A0000 		.4byte	.LVL148-.Ltext0
 11816 0d0e F80A0000 		.4byte	.LFE75-.Ltext0
 11817 0d12 0100     		.2byte	0x1
 11818 0d14 51       		.byte	0x51
 11819 0d15 00000000 		.4byte	0
 11820 0d19 00000000 		.4byte	0
 11821              	.LLST79:
 11822 0d1d 240A0000 		.4byte	.LVL141-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 296


 11823 0d21 640A0000 		.4byte	.LVL143-.Ltext0
 11824 0d25 0100     		.2byte	0x1
 11825 0d27 52       		.byte	0x52
 11826 0d28 640A0000 		.4byte	.LVL143-.Ltext0
 11827 0d2c A90A0000 		.4byte	.LVL144-1-.Ltext0
 11828 0d30 0200     		.2byte	0x2
 11829 0d32 74       		.byte	0x74
 11830 0d33 34       		.sleb128 52
 11831 0d34 A90A0000 		.4byte	.LVL144-1-.Ltext0
 11832 0d38 E40A0000 		.4byte	.LVL148-.Ltext0
 11833 0d3c 0400     		.2byte	0x4
 11834 0d3e F3       		.byte	0xf3
 11835 0d3f 01       		.uleb128 0x1
 11836 0d40 52       		.byte	0x52
 11837 0d41 9F       		.byte	0x9f
 11838 0d42 E40A0000 		.4byte	.LVL148-.Ltext0
 11839 0d46 F80A0000 		.4byte	.LFE75-.Ltext0
 11840 0d4a 0100     		.2byte	0x1
 11841 0d4c 52       		.byte	0x52
 11842 0d4d 00000000 		.4byte	0
 11843 0d51 00000000 		.4byte	0
 11844              	.LLST80:
 11845 0d55 240A0000 		.4byte	.LVL141-.Ltext0
 11846 0d59 B60A0000 		.4byte	.LVL145-.Ltext0
 11847 0d5d 0200     		.2byte	0x2
 11848 0d5f 30       		.byte	0x30
 11849 0d60 9F       		.byte	0x9f
 11850 0d61 B60A0000 		.4byte	.LVL145-.Ltext0
 11851 0d65 BA0A0000 		.4byte	.LVL146-.Ltext0
 11852 0d69 0200     		.2byte	0x2
 11853 0d6b 31       		.byte	0x31
 11854 0d6c 9F       		.byte	0x9f
 11855 0d6d BA0A0000 		.4byte	.LVL146-.Ltext0
 11856 0d71 C20A0000 		.4byte	.LVL147-.Ltext0
 11857 0d75 0100     		.2byte	0x1
 11858 0d77 50       		.byte	0x50
 11859 0d78 C20A0000 		.4byte	.LVL147-.Ltext0
 11860 0d7c F80A0000 		.4byte	.LFE75-.Ltext0
 11861 0d80 0200     		.2byte	0x2
 11862 0d82 30       		.byte	0x30
 11863 0d83 9F       		.byte	0x9f
 11864 0d84 00000000 		.4byte	0
 11865 0d88 00000000 		.4byte	0
 11866              	.LLST71:
 11867 0d8c 60090000 		.4byte	.LFB73-.Ltext0
 11868 0d90 66090000 		.4byte	.LCFI22-.Ltext0
 11869 0d94 0200     		.2byte	0x2
 11870 0d96 7D       		.byte	0x7d
 11871 0d97 00       		.sleb128 0
 11872 0d98 66090000 		.4byte	.LCFI22-.Ltext0
 11873 0d9c 78090000 		.4byte	.LCFI23-.Ltext0
 11874 0da0 0200     		.2byte	0x2
 11875 0da2 7D       		.byte	0x7d
 11876 0da3 0C       		.sleb128 12
 11877 0da4 78090000 		.4byte	.LCFI23-.Ltext0
 11878 0da8 82090000 		.4byte	.LCFI24-.Ltext0
 11879 0dac 0200     		.2byte	0x2
ARM GAS  /tmp/ccdPJtdr.s 			page 297


 11880 0dae 7D       		.byte	0x7d
 11881 0daf 00       		.sleb128 0
 11882 0db0 82090000 		.4byte	.LCFI24-.Ltext0
 11883 0db4 0A0A0000 		.4byte	.LCFI25-.Ltext0
 11884 0db8 0200     		.2byte	0x2
 11885 0dba 7D       		.byte	0x7d
 11886 0dbb 0C       		.sleb128 12
 11887 0dbc 0A0A0000 		.4byte	.LCFI25-.Ltext0
 11888 0dc0 0C0A0000 		.4byte	.LCFI26-.Ltext0
 11889 0dc4 0200     		.2byte	0x2
 11890 0dc6 7D       		.byte	0x7d
 11891 0dc7 00       		.sleb128 0
 11892 0dc8 0C0A0000 		.4byte	.LCFI26-.Ltext0
 11893 0dcc 240A0000 		.4byte	.LFE73-.Ltext0
 11894 0dd0 0200     		.2byte	0x2
 11895 0dd2 7D       		.byte	0x7d
 11896 0dd3 0C       		.sleb128 12
 11897 0dd4 00000000 		.4byte	0
 11898 0dd8 00000000 		.4byte	0
 11899              	.LLST72:
 11900 0ddc 60090000 		.4byte	.LVL130-.Ltext0
 11901 0de0 81090000 		.4byte	.LVL132-1-.Ltext0
 11902 0de4 0100     		.2byte	0x1
 11903 0de6 50       		.byte	0x50
 11904 0de7 81090000 		.4byte	.LVL132-1-.Ltext0
 11905 0deb 82090000 		.4byte	.LVL132-.Ltext0
 11906 0def 0400     		.2byte	0x4
 11907 0df1 F3       		.byte	0xf3
 11908 0df2 01       		.uleb128 0x1
 11909 0df3 50       		.byte	0x50
 11910 0df4 9F       		.byte	0x9f
 11911 0df5 82090000 		.4byte	.LVL132-.Ltext0
 11912 0df9 90090000 		.4byte	.LVL134-.Ltext0
 11913 0dfd 0100     		.2byte	0x1
 11914 0dff 50       		.byte	0x50
 11915 0e00 90090000 		.4byte	.LVL134-.Ltext0
 11916 0e04 0A0A0000 		.4byte	.LVL137-.Ltext0
 11917 0e08 0100     		.2byte	0x1
 11918 0e0a 54       		.byte	0x54
 11919 0e0b 0A0A0000 		.4byte	.LVL137-.Ltext0
 11920 0e0f 0C0A0000 		.4byte	.LVL138-.Ltext0
 11921 0e13 0400     		.2byte	0x4
 11922 0e15 F3       		.byte	0xf3
 11923 0e16 01       		.uleb128 0x1
 11924 0e17 50       		.byte	0x50
 11925 0e18 9F       		.byte	0x9f
 11926 0e19 0C0A0000 		.4byte	.LVL138-.Ltext0
 11927 0e1d 180A0000 		.4byte	.LVL139-.Ltext0
 11928 0e21 0100     		.2byte	0x1
 11929 0e23 54       		.byte	0x54
 11930 0e24 180A0000 		.4byte	.LVL139-.Ltext0
 11931 0e28 1A0A0000 		.4byte	.LVL140-.Ltext0
 11932 0e2c 0100     		.2byte	0x1
 11933 0e2e 50       		.byte	0x50
 11934 0e2f 1A0A0000 		.4byte	.LVL140-.Ltext0
 11935 0e33 240A0000 		.4byte	.LFE73-.Ltext0
 11936 0e37 0100     		.2byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 298


 11937 0e39 54       		.byte	0x54
 11938 0e3a 00000000 		.4byte	0
 11939 0e3e 00000000 		.4byte	0
 11940              	.LLST73:
 11941 0e42 60090000 		.4byte	.LVL130-.Ltext0
 11942 0e46 86090000 		.4byte	.LVL133-.Ltext0
 11943 0e4a 0100     		.2byte	0x1
 11944 0e4c 51       		.byte	0x51
 11945 0e4d 86090000 		.4byte	.LVL133-.Ltext0
 11946 0e51 0A0A0000 		.4byte	.LVL137-.Ltext0
 11947 0e55 0100     		.2byte	0x1
 11948 0e57 55       		.byte	0x55
 11949 0e58 0A0A0000 		.4byte	.LVL137-.Ltext0
 11950 0e5c 0C0A0000 		.4byte	.LVL138-.Ltext0
 11951 0e60 0400     		.2byte	0x4
 11952 0e62 F3       		.byte	0xf3
 11953 0e63 01       		.uleb128 0x1
 11954 0e64 51       		.byte	0x51
 11955 0e65 9F       		.byte	0x9f
 11956 0e66 0C0A0000 		.4byte	.LVL138-.Ltext0
 11957 0e6a 240A0000 		.4byte	.LFE73-.Ltext0
 11958 0e6e 0100     		.2byte	0x1
 11959 0e70 55       		.byte	0x55
 11960 0e71 00000000 		.4byte	0
 11961 0e75 00000000 		.4byte	0
 11962              	.LLST74:
 11963 0e79 60090000 		.4byte	.LVL130-.Ltext0
 11964 0e7d 64090000 		.4byte	.LVL131-.Ltext0
 11965 0e81 0100     		.2byte	0x1
 11966 0e83 52       		.byte	0x52
 11967 0e84 64090000 		.4byte	.LVL131-.Ltext0
 11968 0e88 240A0000 		.4byte	.LFE73-.Ltext0
 11969 0e8c 0400     		.2byte	0x4
 11970 0e8e F3       		.byte	0xf3
 11971 0e8f 01       		.uleb128 0x1
 11972 0e90 52       		.byte	0x52
 11973 0e91 9F       		.byte	0x9f
 11974 0e92 00000000 		.4byte	0
 11975 0e96 00000000 		.4byte	0
 11976              	.LLST75:
 11977 0e9a 60090000 		.4byte	.LVL130-.Ltext0
 11978 0e9e 020A0000 		.4byte	.LVL135-.Ltext0
 11979 0ea2 0200     		.2byte	0x2
 11980 0ea4 30       		.byte	0x30
 11981 0ea5 9F       		.byte	0x9f
 11982 0ea6 020A0000 		.4byte	.LVL135-.Ltext0
 11983 0eaa 080A0000 		.4byte	.LVL136-.Ltext0
 11984 0eae 0100     		.2byte	0x1
 11985 0eb0 50       		.byte	0x50
 11986 0eb1 0C0A0000 		.4byte	.LVL138-.Ltext0
 11987 0eb5 240A0000 		.4byte	.LFE73-.Ltext0
 11988 0eb9 0200     		.2byte	0x2
 11989 0ebb 30       		.byte	0x30
 11990 0ebc 9F       		.byte	0x9f
 11991 0ebd 00000000 		.4byte	0
 11992 0ec1 00000000 		.4byte	0
 11993              	.LLST57:
ARM GAS  /tmp/ccdPJtdr.s 			page 299


 11994 0ec5 F6070000 		.4byte	.LVL104-.Ltext0
 11995 0ec9 FC070000 		.4byte	.LVL105-.Ltext0
 11996 0ecd 0100     		.2byte	0x1
 11997 0ecf 50       		.byte	0x50
 11998 0ed0 FC070000 		.4byte	.LVL105-.Ltext0
 11999 0ed4 98080000 		.4byte	.LFE72-.Ltext0
 12000 0ed8 0100     		.2byte	0x1
 12001 0eda 53       		.byte	0x53
 12002 0edb 00000000 		.4byte	0
 12003 0edf 00000000 		.4byte	0
 12004              	.LLST58:
 12005 0ee3 F6070000 		.4byte	.LVL104-.Ltext0
 12006 0ee7 42080000 		.4byte	.LVL107-.Ltext0
 12007 0eeb 0100     		.2byte	0x1
 12008 0eed 51       		.byte	0x51
 12009 0eee 42080000 		.4byte	.LVL107-.Ltext0
 12010 0ef2 78080000 		.4byte	.LVL108-.Ltext0
 12011 0ef6 0200     		.2byte	0x2
 12012 0ef8 73       		.byte	0x73
 12013 0ef9 30       		.sleb128 48
 12014 0efa 78080000 		.4byte	.LVL108-.Ltext0
 12015 0efe 80080000 		.4byte	.LVL109-.Ltext0
 12016 0f02 0400     		.2byte	0x4
 12017 0f04 F3       		.byte	0xf3
 12018 0f05 01       		.uleb128 0x1
 12019 0f06 51       		.byte	0x51
 12020 0f07 9F       		.byte	0x9f
 12021 0f08 80080000 		.4byte	.LVL109-.Ltext0
 12022 0f0c 88080000 		.4byte	.LVL111-.Ltext0
 12023 0f10 0100     		.2byte	0x1
 12024 0f12 51       		.byte	0x51
 12025 0f13 88080000 		.4byte	.LVL111-.Ltext0
 12026 0f17 8C080000 		.4byte	.LVL112-.Ltext0
 12027 0f1b 0200     		.2byte	0x2
 12028 0f1d 73       		.byte	0x73
 12029 0f1e 30       		.sleb128 48
 12030 0f1f 8C080000 		.4byte	.LVL112-.Ltext0
 12031 0f23 98080000 		.4byte	.LFE72-.Ltext0
 12032 0f27 0100     		.2byte	0x1
 12033 0f29 51       		.byte	0x51
 12034 0f2a 00000000 		.4byte	0
 12035 0f2e 00000000 		.4byte	0
 12036              	.LLST59:
 12037 0f32 F6070000 		.4byte	.LVL104-.Ltext0
 12038 0f36 26080000 		.4byte	.LVL106-.Ltext0
 12039 0f3a 0100     		.2byte	0x1
 12040 0f3c 52       		.byte	0x52
 12041 0f3d 26080000 		.4byte	.LVL106-.Ltext0
 12042 0f41 78080000 		.4byte	.LVL108-.Ltext0
 12043 0f45 0200     		.2byte	0x2
 12044 0f47 73       		.byte	0x73
 12045 0f48 34       		.sleb128 52
 12046 0f49 78080000 		.4byte	.LVL108-.Ltext0
 12047 0f4d 80080000 		.4byte	.LVL109-.Ltext0
 12048 0f51 0400     		.2byte	0x4
 12049 0f53 F3       		.byte	0xf3
 12050 0f54 01       		.uleb128 0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 300


 12051 0f55 52       		.byte	0x52
 12052 0f56 9F       		.byte	0x9f
 12053 0f57 80080000 		.4byte	.LVL109-.Ltext0
 12054 0f5b 84080000 		.4byte	.LVL110-.Ltext0
 12055 0f5f 0200     		.2byte	0x2
 12056 0f61 73       		.byte	0x73
 12057 0f62 34       		.sleb128 52
 12058 0f63 84080000 		.4byte	.LVL110-.Ltext0
 12059 0f67 88080000 		.4byte	.LVL111-.Ltext0
 12060 0f6b 0100     		.2byte	0x1
 12061 0f6d 52       		.byte	0x52
 12062 0f6e 88080000 		.4byte	.LVL111-.Ltext0
 12063 0f72 8C080000 		.4byte	.LVL112-.Ltext0
 12064 0f76 0200     		.2byte	0x2
 12065 0f78 73       		.byte	0x73
 12066 0f79 34       		.sleb128 52
 12067 0f7a 8C080000 		.4byte	.LVL112-.Ltext0
 12068 0f7e 98080000 		.4byte	.LFE72-.Ltext0
 12069 0f82 0100     		.2byte	0x1
 12070 0f84 52       		.byte	0x52
 12071 0f85 00000000 		.4byte	0
 12072 0f89 00000000 		.4byte	0
 12073              	.LLST60:
 12074 0f8d F6070000 		.4byte	.LVL104-.Ltext0
 12075 0f91 78080000 		.4byte	.LVL108-.Ltext0
 12076 0f95 0200     		.2byte	0x2
 12077 0f97 30       		.byte	0x30
 12078 0f98 9F       		.byte	0x9f
 12079 0f99 78080000 		.4byte	.LVL108-.Ltext0
 12080 0f9d 80080000 		.4byte	.LVL109-.Ltext0
 12081 0fa1 0100     		.2byte	0x1
 12082 0fa3 50       		.byte	0x50
 12083 0fa4 80080000 		.4byte	.LVL109-.Ltext0
 12084 0fa8 98080000 		.4byte	.LFE72-.Ltext0
 12085 0fac 0200     		.2byte	0x2
 12086 0fae 30       		.byte	0x30
 12087 0faf 9F       		.byte	0x9f
 12088 0fb0 00000000 		.4byte	0
 12089 0fb4 00000000 		.4byte	0
 12090              	.LLST50:
 12091 0fb8 1E060000 		.4byte	.LFB70-.Ltext0
 12092 0fbc 22060000 		.4byte	.LCFI18-.Ltext0
 12093 0fc0 0200     		.2byte	0x2
 12094 0fc2 7D       		.byte	0x7d
 12095 0fc3 00       		.sleb128 0
 12096 0fc4 22060000 		.4byte	.LCFI18-.Ltext0
 12097 0fc8 48060000 		.4byte	.LCFI19-.Ltext0
 12098 0fcc 0200     		.2byte	0x2
 12099 0fce 7D       		.byte	0x7d
 12100 0fcf 20       		.sleb128 32
 12101 0fd0 48060000 		.4byte	.LCFI19-.Ltext0
 12102 0fd4 4C060000 		.4byte	.LCFI20-.Ltext0
 12103 0fd8 0200     		.2byte	0x2
 12104 0fda 7D       		.byte	0x7d
 12105 0fdb 18       		.sleb128 24
 12106 0fdc 4C060000 		.4byte	.LCFI20-.Ltext0
 12107 0fe0 F6070000 		.4byte	.LFE70-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 301


 12108 0fe4 0200     		.2byte	0x2
 12109 0fe6 7D       		.byte	0x7d
 12110 0fe7 20       		.sleb128 32
 12111 0fe8 00000000 		.4byte	0
 12112 0fec 00000000 		.4byte	0
 12113              	.LLST51:
 12114 0ff0 1E060000 		.4byte	.LVL86-.Ltext0
 12115 0ff4 45060000 		.4byte	.LVL89-1-.Ltext0
 12116 0ff8 0100     		.2byte	0x1
 12117 0ffa 50       		.byte	0x50
 12118 0ffb 45060000 		.4byte	.LVL89-1-.Ltext0
 12119 0fff 4C060000 		.4byte	.LVL90-.Ltext0
 12120 1003 0100     		.2byte	0x1
 12121 1005 54       		.byte	0x54
 12122 1006 4C060000 		.4byte	.LVL90-.Ltext0
 12123 100a 5F060000 		.4byte	.LVL91-1-.Ltext0
 12124 100e 0100     		.2byte	0x1
 12125 1010 50       		.byte	0x50
 12126 1011 5F060000 		.4byte	.LVL91-1-.Ltext0
 12127 1015 F2070000 		.4byte	.LVL102-.Ltext0
 12128 1019 0100     		.2byte	0x1
 12129 101b 54       		.byte	0x54
 12130 101c F2070000 		.4byte	.LVL102-.Ltext0
 12131 1020 F4070000 		.4byte	.LVL103-.Ltext0
 12132 1024 0100     		.2byte	0x1
 12133 1026 50       		.byte	0x50
 12134 1027 F4070000 		.4byte	.LVL103-.Ltext0
 12135 102b F6070000 		.4byte	.LFE70-.Ltext0
 12136 102f 0100     		.2byte	0x1
 12137 1031 54       		.byte	0x54
 12138 1032 00000000 		.4byte	0
 12139 1036 00000000 		.4byte	0
 12140              	.LLST52:
 12141 103a 1E060000 		.4byte	.LVL86-.Ltext0
 12142 103e 45060000 		.4byte	.LVL89-1-.Ltext0
 12143 1042 0100     		.2byte	0x1
 12144 1044 51       		.byte	0x51
 12145 1045 45060000 		.4byte	.LVL89-1-.Ltext0
 12146 1049 4C060000 		.4byte	.LVL90-.Ltext0
 12147 104d 0100     		.2byte	0x1
 12148 104f 58       		.byte	0x58
 12149 1050 4C060000 		.4byte	.LVL90-.Ltext0
 12150 1054 5F060000 		.4byte	.LVL91-1-.Ltext0
 12151 1058 0100     		.2byte	0x1
 12152 105a 51       		.byte	0x51
 12153 105b 5F060000 		.4byte	.LVL91-1-.Ltext0
 12154 105f F2070000 		.4byte	.LVL102-.Ltext0
 12155 1063 0100     		.2byte	0x1
 12156 1065 58       		.byte	0x58
 12157 1066 F2070000 		.4byte	.LVL102-.Ltext0
 12158 106a F6070000 		.4byte	.LFE70-.Ltext0
 12159 106e 0100     		.2byte	0x1
 12160 1070 51       		.byte	0x51
 12161 1071 00000000 		.4byte	0
 12162 1075 00000000 		.4byte	0
 12163              	.LLST53:
 12164 1079 1E060000 		.4byte	.LVL86-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 302


 12165 107d 42060000 		.4byte	.LVL88-.Ltext0
 12166 1081 0100     		.2byte	0x1
 12167 1083 52       		.byte	0x52
 12168 1084 42060000 		.4byte	.LVL88-.Ltext0
 12169 1088 4C060000 		.4byte	.LVL90-.Ltext0
 12170 108c 0400     		.2byte	0x4
 12171 108e F3       		.byte	0xf3
 12172 108f 01       		.uleb128 0x1
 12173 1090 52       		.byte	0x52
 12174 1091 9F       		.byte	0x9f
 12175 1092 4C060000 		.4byte	.LVL90-.Ltext0
 12176 1096 5F060000 		.4byte	.LVL91-1-.Ltext0
 12177 109a 0100     		.2byte	0x1
 12178 109c 52       		.byte	0x52
 12179 109d 5F060000 		.4byte	.LVL91-1-.Ltext0
 12180 10a1 F2070000 		.4byte	.LVL102-.Ltext0
 12181 10a5 0400     		.2byte	0x4
 12182 10a7 F3       		.byte	0xf3
 12183 10a8 01       		.uleb128 0x1
 12184 10a9 52       		.byte	0x52
 12185 10aa 9F       		.byte	0x9f
 12186 10ab F2070000 		.4byte	.LVL102-.Ltext0
 12187 10af F6070000 		.4byte	.LFE70-.Ltext0
 12188 10b3 0100     		.2byte	0x1
 12189 10b5 52       		.byte	0x52
 12190 10b6 00000000 		.4byte	0
 12191 10ba 00000000 		.4byte	0
 12192              	.LLST54:
 12193 10be 1E060000 		.4byte	.LVL86-.Ltext0
 12194 10c2 26060000 		.4byte	.LVL87-.Ltext0
 12195 10c6 0100     		.2byte	0x1
 12196 10c8 53       		.byte	0x53
 12197 10c9 26060000 		.4byte	.LVL87-.Ltext0
 12198 10cd F6070000 		.4byte	.LFE70-.Ltext0
 12199 10d1 0100     		.2byte	0x1
 12200 10d3 55       		.byte	0x55
 12201 10d4 00000000 		.4byte	0
 12202 10d8 00000000 		.4byte	0
 12203              	.LLST55:
 12204 10dc 62060000 		.4byte	.LVL92-.Ltext0
 12205 10e0 66060000 		.4byte	.LVL93-.Ltext0
 12206 10e4 0100     		.2byte	0x1
 12207 10e6 50       		.byte	0x50
 12208 10e7 66060000 		.4byte	.LVL93-.Ltext0
 12209 10eb F2070000 		.4byte	.LVL102-.Ltext0
 12210 10ef 0100     		.2byte	0x1
 12211 10f1 56       		.byte	0x56
 12212 10f2 00000000 		.4byte	0
 12213 10f6 00000000 		.4byte	0
 12214              	.LLST56:
 12215 10fa 1E060000 		.4byte	.LVL86-.Ltext0
 12216 10fe 46060000 		.4byte	.LVL89-.Ltext0
 12217 1102 0200     		.2byte	0x2
 12218 1104 30       		.byte	0x30
 12219 1105 9F       		.byte	0x9f
 12220 1106 4C060000 		.4byte	.LVL90-.Ltext0
 12221 110a 90070000 		.4byte	.LVL97-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 303


 12222 110e 0200     		.2byte	0x2
 12223 1110 30       		.byte	0x30
 12224 1111 9F       		.byte	0x9f
 12225 1112 90070000 		.4byte	.LVL97-.Ltext0
 12226 1116 92070000 		.4byte	.LVL98-.Ltext0
 12227 111a 0200     		.2byte	0x2
 12228 111c 33       		.byte	0x33
 12229 111d 9F       		.byte	0x9f
 12230 111e 92070000 		.4byte	.LVL98-.Ltext0
 12231 1122 A0070000 		.4byte	.LVL99-.Ltext0
 12232 1126 0100     		.2byte	0x1
 12233 1128 50       		.byte	0x50
 12234 1129 A0070000 		.4byte	.LVL99-.Ltext0
 12235 112d F6070000 		.4byte	.LFE70-.Ltext0
 12236 1131 0200     		.2byte	0x2
 12237 1133 30       		.byte	0x30
 12238 1134 9F       		.byte	0x9f
 12239 1135 00000000 		.4byte	0
 12240 1139 00000000 		.4byte	0
 12241              	.LLST27:
 12242 113d 20020000 		.4byte	.LFB69-.Ltext0
 12243 1141 24020000 		.4byte	.LCFI11-.Ltext0
 12244 1145 0200     		.2byte	0x2
 12245 1147 7D       		.byte	0x7d
 12246 1148 00       		.sleb128 0
 12247 1149 24020000 		.4byte	.LCFI11-.Ltext0
 12248 114d 4A030000 		.4byte	.LCFI12-.Ltext0
 12249 1151 0200     		.2byte	0x2
 12250 1153 7D       		.byte	0x7d
 12251 1154 20       		.sleb128 32
 12252 1155 4A030000 		.4byte	.LCFI12-.Ltext0
 12253 1159 4E030000 		.4byte	.LCFI13-.Ltext0
 12254 115d 0200     		.2byte	0x2
 12255 115f 7D       		.byte	0x7d
 12256 1160 18       		.sleb128 24
 12257 1161 4E030000 		.4byte	.LCFI13-.Ltext0
 12258 1165 98030000 		.4byte	.LFE69-.Ltext0
 12259 1169 0200     		.2byte	0x2
 12260 116b 7D       		.byte	0x7d
 12261 116c 20       		.sleb128 32
 12262 116d 00000000 		.4byte	0
 12263 1171 00000000 		.4byte	0
 12264              	.LLST28:
 12265 1175 20020000 		.4byte	.LVL29-.Ltext0
 12266 1179 3F020000 		.4byte	.LVL31-1-.Ltext0
 12267 117d 0100     		.2byte	0x1
 12268 117f 50       		.byte	0x50
 12269 1180 3F020000 		.4byte	.LVL31-1-.Ltext0
 12270 1184 94030000 		.4byte	.LVL42-.Ltext0
 12271 1188 0100     		.2byte	0x1
 12272 118a 54       		.byte	0x54
 12273 118b 94030000 		.4byte	.LVL42-.Ltext0
 12274 118f 96030000 		.4byte	.LVL43-.Ltext0
 12275 1193 0100     		.2byte	0x1
 12276 1195 50       		.byte	0x50
 12277 1196 96030000 		.4byte	.LVL43-.Ltext0
 12278 119a 98030000 		.4byte	.LFE69-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 304


 12279 119e 0100     		.2byte	0x1
 12280 11a0 54       		.byte	0x54
 12281 11a1 00000000 		.4byte	0
 12282 11a5 00000000 		.4byte	0
 12283              	.LLST29:
 12284 11a9 20020000 		.4byte	.LVL29-.Ltext0
 12285 11ad 3F020000 		.4byte	.LVL31-1-.Ltext0
 12286 11b1 0100     		.2byte	0x1
 12287 11b3 51       		.byte	0x51
 12288 11b4 3F020000 		.4byte	.LVL31-1-.Ltext0
 12289 11b8 C8020000 		.4byte	.LVL34-.Ltext0
 12290 11bc 0100     		.2byte	0x1
 12291 11be 55       		.byte	0x55
 12292 11bf C8020000 		.4byte	.LVL34-.Ltext0
 12293 11c3 CC020000 		.4byte	.LVL35-.Ltext0
 12294 11c7 0200     		.2byte	0x2
 12295 11c9 74       		.byte	0x74
 12296 11ca 30       		.sleb128 48
 12297 11cb CC020000 		.4byte	.LVL35-.Ltext0
 12298 11cf 4E030000 		.4byte	.LVL40-.Ltext0
 12299 11d3 0400     		.2byte	0x4
 12300 11d5 F3       		.byte	0xf3
 12301 11d6 01       		.uleb128 0x1
 12302 11d7 51       		.byte	0x51
 12303 11d8 9F       		.byte	0x9f
 12304 11d9 4E030000 		.4byte	.LVL40-.Ltext0
 12305 11dd 94030000 		.4byte	.LVL42-.Ltext0
 12306 11e1 0100     		.2byte	0x1
 12307 11e3 55       		.byte	0x55
 12308 11e4 94030000 		.4byte	.LVL42-.Ltext0
 12309 11e8 98030000 		.4byte	.LFE69-.Ltext0
 12310 11ec 0100     		.2byte	0x1
 12311 11ee 51       		.byte	0x51
 12312 11ef 00000000 		.4byte	0
 12313 11f3 00000000 		.4byte	0
 12314              	.LLST30:
 12315 11f7 20020000 		.4byte	.LVL29-.Ltext0
 12316 11fb 3F020000 		.4byte	.LVL31-1-.Ltext0
 12317 11ff 0100     		.2byte	0x1
 12318 1201 52       		.byte	0x52
 12319 1202 3F020000 		.4byte	.LVL31-1-.Ltext0
 12320 1206 94030000 		.4byte	.LVL42-.Ltext0
 12321 120a 0400     		.2byte	0x4
 12322 120c F3       		.byte	0xf3
 12323 120d 01       		.uleb128 0x1
 12324 120e 52       		.byte	0x52
 12325 120f 9F       		.byte	0x9f
 12326 1210 94030000 		.4byte	.LVL42-.Ltext0
 12327 1214 98030000 		.4byte	.LFE69-.Ltext0
 12328 1218 0100     		.2byte	0x1
 12329 121a 52       		.byte	0x52
 12330 121b 00000000 		.4byte	0
 12331 121f 00000000 		.4byte	0
 12332              	.LLST31:
 12333 1223 20020000 		.4byte	.LVL29-.Ltext0
 12334 1227 2A020000 		.4byte	.LVL30-.Ltext0
 12335 122b 0100     		.2byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 305


 12336 122d 53       		.byte	0x53
 12337 122e 2A020000 		.4byte	.LVL30-.Ltext0
 12338 1232 98030000 		.4byte	.LFE69-.Ltext0
 12339 1236 0100     		.2byte	0x1
 12340 1238 56       		.byte	0x56
 12341 1239 00000000 		.4byte	0
 12342 123d 00000000 		.4byte	0
 12343              	.LLST32:
 12344 1241 42020000 		.4byte	.LVL32-.Ltext0
 12345 1245 46020000 		.4byte	.LVL33-.Ltext0
 12346 1249 0100     		.2byte	0x1
 12347 124b 50       		.byte	0x50
 12348 124c 46020000 		.4byte	.LVL33-.Ltext0
 12349 1250 48030000 		.4byte	.LVL39-.Ltext0
 12350 1254 0100     		.2byte	0x1
 12351 1256 57       		.byte	0x57
 12352 1257 4E030000 		.4byte	.LVL40-.Ltext0
 12353 125b 94030000 		.4byte	.LVL42-.Ltext0
 12354 125f 0100     		.2byte	0x1
 12355 1261 57       		.byte	0x57
 12356 1262 00000000 		.4byte	0
 12357 1266 00000000 		.4byte	0
 12358              	.LLST33:
 12359 126a 20020000 		.4byte	.LVL29-.Ltext0
 12360 126e 3C030000 		.4byte	.LVL38-.Ltext0
 12361 1272 0200     		.2byte	0x2
 12362 1274 30       		.byte	0x30
 12363 1275 9F       		.byte	0x9f
 12364 1276 3C030000 		.4byte	.LVL38-.Ltext0
 12365 127a 48030000 		.4byte	.LVL39-.Ltext0
 12366 127e 0100     		.2byte	0x1
 12367 1280 50       		.byte	0x50
 12368 1281 4E030000 		.4byte	.LVL40-.Ltext0
 12369 1285 98030000 		.4byte	.LFE69-.Ltext0
 12370 1289 0200     		.2byte	0x2
 12371 128b 30       		.byte	0x30
 12372 128c 9F       		.byte	0x9f
 12373 128d 00000000 		.4byte	0
 12374 1291 00000000 		.4byte	0
 12375              	.LLST34:
 12376 1295 42020000 		.4byte	.LVL32-.Ltext0
 12377 1299 48030000 		.4byte	.LVL39-.Ltext0
 12378 129d 0100     		.2byte	0x1
 12379 129f 58       		.byte	0x58
 12380 12a0 4E030000 		.4byte	.LVL40-.Ltext0
 12381 12a4 94030000 		.4byte	.LVL42-.Ltext0
 12382 12a8 0100     		.2byte	0x1
 12383 12aa 58       		.byte	0x58
 12384 12ab 00000000 		.4byte	0
 12385 12af 00000000 		.4byte	0
 12386              	.LLST25:
 12387 12b3 F4010000 		.4byte	.LFB66-.Ltext0
 12388 12b7 F6010000 		.4byte	.LCFI10-.Ltext0
 12389 12bb 0200     		.2byte	0x2
 12390 12bd 7D       		.byte	0x7d
 12391 12be 00       		.sleb128 0
 12392 12bf F6010000 		.4byte	.LCFI10-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 306


 12393 12c3 20020000 		.4byte	.LFE66-.Ltext0
 12394 12c7 0200     		.2byte	0x2
 12395 12c9 7D       		.byte	0x7d
 12396 12ca 08       		.sleb128 8
 12397 12cb 00000000 		.4byte	0
 12398 12cf 00000000 		.4byte	0
 12399              	.LLST26:
 12400 12d3 F4010000 		.4byte	.LVL25-.Ltext0
 12401 12d7 0D020000 		.4byte	.LVL26-1-.Ltext0
 12402 12db 0100     		.2byte	0x1
 12403 12dd 50       		.byte	0x50
 12404 12de 0D020000 		.4byte	.LVL26-1-.Ltext0
 12405 12e2 1C020000 		.4byte	.LVL27-.Ltext0
 12406 12e6 0100     		.2byte	0x1
 12407 12e8 54       		.byte	0x54
 12408 12e9 1C020000 		.4byte	.LVL27-.Ltext0
 12409 12ed 1E020000 		.4byte	.LVL28-.Ltext0
 12410 12f1 0100     		.2byte	0x1
 12411 12f3 50       		.byte	0x50
 12412 12f4 1E020000 		.4byte	.LVL28-.Ltext0
 12413 12f8 20020000 		.4byte	.LFE66-.Ltext0
 12414 12fc 0100     		.2byte	0x1
 12415 12fe 54       		.byte	0x54
 12416 12ff 00000000 		.4byte	0
 12417 1303 00000000 		.4byte	0
 12418              	.LLST23:
 12419 1307 66010000 		.4byte	.LFB65-.Ltext0
 12420 130b 68010000 		.4byte	.LCFI9-.Ltext0
 12421 130f 0200     		.2byte	0x2
 12422 1311 7D       		.byte	0x7d
 12423 1312 00       		.sleb128 0
 12424 1313 68010000 		.4byte	.LCFI9-.Ltext0
 12425 1317 F2010000 		.4byte	.LFE65-.Ltext0
 12426 131b 0200     		.2byte	0x2
 12427 131d 7D       		.byte	0x7d
 12428 131e 10       		.sleb128 16
 12429 131f 00000000 		.4byte	0
 12430 1323 00000000 		.4byte	0
 12431              	.LLST24:
 12432 1327 66010000 		.4byte	.LVL21-.Ltext0
 12433 132b 7F010000 		.4byte	.LVL22-1-.Ltext0
 12434 132f 0100     		.2byte	0x1
 12435 1331 50       		.byte	0x50
 12436 1332 7F010000 		.4byte	.LVL22-1-.Ltext0
 12437 1336 EE010000 		.4byte	.LVL23-.Ltext0
 12438 133a 0100     		.2byte	0x1
 12439 133c 54       		.byte	0x54
 12440 133d EE010000 		.4byte	.LVL23-.Ltext0
 12441 1341 F0010000 		.4byte	.LVL24-.Ltext0
 12442 1345 0100     		.2byte	0x1
 12443 1347 50       		.byte	0x50
 12444 1348 F0010000 		.4byte	.LVL24-.Ltext0
 12445 134c F2010000 		.4byte	.LFE65-.Ltext0
 12446 1350 0100     		.2byte	0x1
 12447 1352 54       		.byte	0x54
 12448 1353 00000000 		.4byte	0
 12449 1357 00000000 		.4byte	0
ARM GAS  /tmp/ccdPJtdr.s 			page 307


 12450              	.LLST1:
 12451 135b 6A000000 		.4byte	.LFB116-.Ltext0
 12452 135f 6E000000 		.4byte	.LCFI3-.Ltext0
 12453 1363 0200     		.2byte	0x2
 12454 1365 7D       		.byte	0x7d
 12455 1366 00       		.sleb128 0
 12456 1367 6E000000 		.4byte	.LCFI3-.Ltext0
 12457 136b F0000000 		.4byte	.LFE116-.Ltext0
 12458 136f 0200     		.2byte	0x2
 12459 1371 7D       		.byte	0x7d
 12460 1372 18       		.sleb128 24
 12461 1373 00000000 		.4byte	0
 12462 1377 00000000 		.4byte	0
 12463              	.LLST2:
 12464 137b 6A000000 		.4byte	.LVL2-.Ltext0
 12465 137f 78000000 		.4byte	.LVL3-.Ltext0
 12466 1383 0100     		.2byte	0x1
 12467 1385 50       		.byte	0x50
 12468 1386 78000000 		.4byte	.LVL3-.Ltext0
 12469 138a F0000000 		.4byte	.LFE116-.Ltext0
 12470 138e 0100     		.2byte	0x1
 12471 1390 54       		.byte	0x54
 12472 1391 00000000 		.4byte	0
 12473 1395 00000000 		.4byte	0
 12474              	.LLST3:
 12475 1399 6A000000 		.4byte	.LVL2-.Ltext0
 12476 139d 78000000 		.4byte	.LVL3-.Ltext0
 12477 13a1 0100     		.2byte	0x1
 12478 13a3 51       		.byte	0x51
 12479 13a4 78000000 		.4byte	.LVL3-.Ltext0
 12480 13a8 F0000000 		.4byte	.LFE116-.Ltext0
 12481 13ac 0100     		.2byte	0x1
 12482 13ae 58       		.byte	0x58
 12483 13af 00000000 		.4byte	0
 12484 13b3 00000000 		.4byte	0
 12485              	.LLST4:
 12486 13b7 6A000000 		.4byte	.LVL2-.Ltext0
 12487 13bb 78000000 		.4byte	.LVL3-.Ltext0
 12488 13bf 0100     		.2byte	0x1
 12489 13c1 52       		.byte	0x52
 12490 13c2 78000000 		.4byte	.LVL3-.Ltext0
 12491 13c6 F0000000 		.4byte	.LFE116-.Ltext0
 12492 13ca 0400     		.2byte	0x4
 12493 13cc F3       		.byte	0xf3
 12494 13cd 01       		.uleb128 0x1
 12495 13ce 52       		.byte	0x52
 12496 13cf 9F       		.byte	0x9f
 12497 13d0 00000000 		.4byte	0
 12498 13d4 00000000 		.4byte	0
 12499              	.LLST5:
 12500 13d8 6A000000 		.4byte	.LVL2-.Ltext0
 12501 13dc 78000000 		.4byte	.LVL3-.Ltext0
 12502 13e0 0100     		.2byte	0x1
 12503 13e2 53       		.byte	0x53
 12504 13e3 78000000 		.4byte	.LVL3-.Ltext0
 12505 13e7 F0000000 		.4byte	.LFE116-.Ltext0
 12506 13eb 0100     		.2byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 308


 12507 13ed 55       		.byte	0x55
 12508 13ee 00000000 		.4byte	0
 12509 13f2 00000000 		.4byte	0
 12510              	.LLST6:
 12511 13f6 6A000000 		.4byte	.LVL2-.Ltext0
 12512 13fa 90000000 		.4byte	.LVL4-.Ltext0
 12513 13fe 0200     		.2byte	0x2
 12514 1400 91       		.byte	0x91
 12515 1401 00       		.sleb128 0
 12516 1402 90000000 		.4byte	.LVL4-.Ltext0
 12517 1406 F0000000 		.4byte	.LFE116-.Ltext0
 12518 140a 0200     		.2byte	0x2
 12519 140c 91       		.byte	0x91
 12520 140d 00       		.sleb128 0
 12521 140e 00000000 		.4byte	0
 12522 1412 00000000 		.4byte	0
 12523              	.LLST7:
 12524 1416 9E000000 		.4byte	.LVL6-.Ltext0
 12525 141a EC000000 		.4byte	.LVL7-.Ltext0
 12526 141e 0100     		.2byte	0x1
 12527 1420 58       		.byte	0x58
 12528 1421 00000000 		.4byte	0
 12529 1425 00000000 		.4byte	0
 12530              	.LLST8:
 12531 1429 9E000000 		.4byte	.LVL6-.Ltext0
 12532 142d EC000000 		.4byte	.LVL7-.Ltext0
 12533 1431 0100     		.2byte	0x1
 12534 1433 56       		.byte	0x56
 12535 1434 00000000 		.4byte	0
 12536 1438 00000000 		.4byte	0
 12537              	.LLST9:
 12538 143c 9E000000 		.4byte	.LVL6-.Ltext0
 12539 1440 EC000000 		.4byte	.LVL7-.Ltext0
 12540 1444 0100     		.2byte	0x1
 12541 1446 55       		.byte	0x55
 12542 1447 00000000 		.4byte	0
 12543 144b 00000000 		.4byte	0
 12544              	.LLST10:
 12545 144f 9E000000 		.4byte	.LVL6-.Ltext0
 12546 1453 EC000000 		.4byte	.LVL7-.Ltext0
 12547 1457 0100     		.2byte	0x1
 12548 1459 57       		.byte	0x57
 12549 145a 00000000 		.4byte	0
 12550 145e 00000000 		.4byte	0
 12551              	.LLST11:
 12552 1462 9E000000 		.4byte	.LVL6-.Ltext0
 12553 1466 EC000000 		.4byte	.LVL7-.Ltext0
 12554 146a 0100     		.2byte	0x1
 12555 146c 54       		.byte	0x54
 12556 146d 00000000 		.4byte	0
 12557 1471 00000000 		.4byte	0
 12558              	.LLST16:
 12559 1475 10010000 		.4byte	.LFB117-.Ltext0
 12560 1479 12010000 		.4byte	.LCFI6-.Ltext0
 12561 147d 0200     		.2byte	0x2
 12562 147f 7D       		.byte	0x7d
 12563 1480 00       		.sleb128 0
ARM GAS  /tmp/ccdPJtdr.s 			page 309


 12564 1481 12010000 		.4byte	.LCFI6-.Ltext0
 12565 1485 4E010000 		.4byte	.LCFI7-.Ltext0
 12566 1489 0200     		.2byte	0x2
 12567 148b 7D       		.byte	0x7d
 12568 148c 18       		.sleb128 24
 12569 148d 4E010000 		.4byte	.LCFI7-.Ltext0
 12570 1491 50010000 		.4byte	.LCFI8-.Ltext0
 12571 1495 0200     		.2byte	0x2
 12572 1497 7D       		.byte	0x7d
 12573 1498 0C       		.sleb128 12
 12574 1499 50010000 		.4byte	.LCFI8-.Ltext0
 12575 149d 64010000 		.4byte	.LFE117-.Ltext0
 12576 14a1 0200     		.2byte	0x2
 12577 14a3 7D       		.byte	0x7d
 12578 14a4 18       		.sleb128 24
 12579 14a5 00000000 		.4byte	0
 12580 14a9 00000000 		.4byte	0
 12581              	.LLST17:
 12582 14ad 10010000 		.4byte	.LVL12-.Ltext0
 12583 14b1 20010000 		.4byte	.LVL14-.Ltext0
 12584 14b5 0100     		.2byte	0x1
 12585 14b7 50       		.byte	0x50
 12586 14b8 20010000 		.4byte	.LVL14-.Ltext0
 12587 14bc 64010000 		.4byte	.LFE117-.Ltext0
 12588 14c0 0100     		.2byte	0x1
 12589 14c2 54       		.byte	0x54
 12590 14c3 00000000 		.4byte	0
 12591 14c7 00000000 		.4byte	0
 12592              	.LLST18:
 12593 14cb 10010000 		.4byte	.LVL12-.Ltext0
 12594 14cf 16010000 		.4byte	.LVL13-.Ltext0
 12595 14d3 0100     		.2byte	0x1
 12596 14d5 51       		.byte	0x51
 12597 14d6 16010000 		.4byte	.LVL13-.Ltext0
 12598 14da 47010000 		.4byte	.LVL17-1-.Ltext0
 12599 14de 0100     		.2byte	0x1
 12600 14e0 53       		.byte	0x53
 12601 14e1 47010000 		.4byte	.LVL17-1-.Ltext0
 12602 14e5 50010000 		.4byte	.LVL18-.Ltext0
 12603 14e9 0400     		.2byte	0x4
 12604 14eb F3       		.byte	0xf3
 12605 14ec 01       		.uleb128 0x1
 12606 14ed 51       		.byte	0x51
 12607 14ee 9F       		.byte	0x9f
 12608 14ef 50010000 		.4byte	.LVL18-.Ltext0
 12609 14f3 58010000 		.4byte	.LVL20-.Ltext0
 12610 14f7 0100     		.2byte	0x1
 12611 14f9 53       		.byte	0x53
 12612 14fa 58010000 		.4byte	.LVL20-.Ltext0
 12613 14fe 64010000 		.4byte	.LFE117-.Ltext0
 12614 1502 0400     		.2byte	0x4
 12615 1504 F3       		.byte	0xf3
 12616 1505 01       		.uleb128 0x1
 12617 1506 51       		.byte	0x51
 12618 1507 9F       		.byte	0x9f
 12619 1508 00000000 		.4byte	0
 12620 150c 00000000 		.4byte	0
ARM GAS  /tmp/ccdPJtdr.s 			page 310


 12621              	.LLST19:
 12622 1510 10010000 		.4byte	.LVL12-.Ltext0
 12623 1514 42010000 		.4byte	.LVL16-.Ltext0
 12624 1518 0100     		.2byte	0x1
 12625 151a 52       		.byte	0x52
 12626 151b 42010000 		.4byte	.LVL16-.Ltext0
 12627 151f 47010000 		.4byte	.LVL17-1-.Ltext0
 12628 1523 0200     		.2byte	0x2
 12629 1525 7D       		.byte	0x7d
 12630 1526 00       		.sleb128 0
 12631 1527 47010000 		.4byte	.LVL17-1-.Ltext0
 12632 152b 50010000 		.4byte	.LVL18-.Ltext0
 12633 152f 0400     		.2byte	0x4
 12634 1531 F3       		.byte	0xf3
 12635 1532 01       		.uleb128 0x1
 12636 1533 52       		.byte	0x52
 12637 1534 9F       		.byte	0x9f
 12638 1535 50010000 		.4byte	.LVL18-.Ltext0
 12639 1539 56010000 		.4byte	.LVL19-.Ltext0
 12640 153d 0100     		.2byte	0x1
 12641 153f 52       		.byte	0x52
 12642 1540 56010000 		.4byte	.LVL19-.Ltext0
 12643 1544 58010000 		.4byte	.LVL20-.Ltext0
 12644 1548 0200     		.2byte	0x2
 12645 154a 7D       		.byte	0x7d
 12646 154b 00       		.sleb128 0
 12647 154c 58010000 		.4byte	.LVL20-.Ltext0
 12648 1550 64010000 		.4byte	.LFE117-.Ltext0
 12649 1554 0400     		.2byte	0x4
 12650 1556 F3       		.byte	0xf3
 12651 1557 01       		.uleb128 0x1
 12652 1558 52       		.byte	0x52
 12653 1559 9F       		.byte	0x9f
 12654 155a 00000000 		.4byte	0
 12655 155e 00000000 		.4byte	0
 12656              	.LLST20:
 12657 1562 3C010000 		.4byte	.LVL15-.Ltext0
 12658 1566 42010000 		.4byte	.LVL16-.Ltext0
 12659 156a 0100     		.2byte	0x1
 12660 156c 52       		.byte	0x52
 12661 156d 00000000 		.4byte	0
 12662 1571 00000000 		.4byte	0
 12663              	.LLST21:
 12664 1575 3C010000 		.4byte	.LVL15-.Ltext0
 12665 1579 42010000 		.4byte	.LVL16-.Ltext0
 12666 157d 0100     		.2byte	0x1
 12667 157f 53       		.byte	0x53
 12668 1580 00000000 		.4byte	0
 12669 1584 00000000 		.4byte	0
 12670              	.LLST22:
 12671 1588 3C010000 		.4byte	.LVL15-.Ltext0
 12672 158c 42010000 		.4byte	.LVL16-.Ltext0
 12673 1590 0100     		.2byte	0x1
 12674 1592 54       		.byte	0x54
 12675 1593 00000000 		.4byte	0
 12676 1597 00000000 		.4byte	0
 12677              	.LLST35:
ARM GAS  /tmp/ccdPJtdr.s 			page 311


 12678 159b 98030000 		.4byte	.LFB71-.Ltext0
 12679 159f 9C030000 		.4byte	.LCFI14-.Ltext0
 12680 15a3 0200     		.2byte	0x2
 12681 15a5 7D       		.byte	0x7d
 12682 15a6 00       		.sleb128 0
 12683 15a7 9C030000 		.4byte	.LCFI14-.Ltext0
 12684 15ab A4030000 		.4byte	.LCFI15-.Ltext0
 12685 15af 0200     		.2byte	0x2
 12686 15b1 7D       		.byte	0x7d
 12687 15b2 1C       		.sleb128 28
 12688 15b3 A4030000 		.4byte	.LCFI15-.Ltext0
 12689 15b7 F2040000 		.4byte	.LCFI16-.Ltext0
 12690 15bb 0200     		.2byte	0x2
 12691 15bd 7D       		.byte	0x7d
 12692 15be 30       		.sleb128 48
 12693 15bf F2040000 		.4byte	.LCFI16-.Ltext0
 12694 15c3 F6040000 		.4byte	.LCFI17-.Ltext0
 12695 15c7 0200     		.2byte	0x2
 12696 15c9 7D       		.byte	0x7d
 12697 15ca 1C       		.sleb128 28
 12698 15cb F6040000 		.4byte	.LCFI17-.Ltext0
 12699 15cf 1E060000 		.4byte	.LFE71-.Ltext0
 12700 15d3 0200     		.2byte	0x2
 12701 15d5 7D       		.byte	0x7d
 12702 15d6 30       		.sleb128 48
 12703 15d7 00000000 		.4byte	0
 12704 15db 00000000 		.4byte	0
 12705              	.LLST36:
 12706 15df 98030000 		.4byte	.LVL44-.Ltext0
 12707 15e3 BB030000 		.4byte	.LVL47-1-.Ltext0
 12708 15e7 0100     		.2byte	0x1
 12709 15e9 50       		.byte	0x50
 12710 15ea BB030000 		.4byte	.LVL47-1-.Ltext0
 12711 15ee 1A060000 		.4byte	.LVL85-.Ltext0
 12712 15f2 0100     		.2byte	0x1
 12713 15f4 54       		.byte	0x54
 12714 15f5 1A060000 		.4byte	.LVL85-.Ltext0
 12715 15f9 1E060000 		.4byte	.LFE71-.Ltext0
 12716 15fd 0100     		.2byte	0x1
 12717 15ff 50       		.byte	0x50
 12718 1600 00000000 		.4byte	0
 12719 1604 00000000 		.4byte	0
 12720              	.LLST37:
 12721 1608 98030000 		.4byte	.LVL44-.Ltext0
 12722 160c BB030000 		.4byte	.LVL47-1-.Ltext0
 12723 1610 0100     		.2byte	0x1
 12724 1612 51       		.byte	0x51
 12725 1613 BB030000 		.4byte	.LVL47-1-.Ltext0
 12726 1617 5E040000 		.4byte	.LVL53-.Ltext0
 12727 161b 0100     		.2byte	0x1
 12728 161d 55       		.byte	0x55
 12729 161e 5E040000 		.4byte	.LVL53-.Ltext0
 12730 1622 64040000 		.4byte	.LVL54-.Ltext0
 12731 1626 0200     		.2byte	0x2
 12732 1628 74       		.byte	0x74
 12733 1629 30       		.sleb128 48
 12734 162a 64040000 		.4byte	.LVL54-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 312


 12735 162e 6A040000 		.4byte	.LVL55-.Ltext0
 12736 1632 0300     		.2byte	0x3
 12737 1634 75       		.byte	0x75
 12738 1635 7E       		.sleb128 -2
 12739 1636 9F       		.byte	0x9f
 12740 1637 6A040000 		.4byte	.LVL55-.Ltext0
 12741 163b 22050000 		.4byte	.LVL68-.Ltext0
 12742 163f 0400     		.2byte	0x4
 12743 1641 F3       		.byte	0xf3
 12744 1642 01       		.uleb128 0x1
 12745 1643 51       		.byte	0x51
 12746 1644 9F       		.byte	0x9f
 12747 1645 22050000 		.4byte	.LVL68-.Ltext0
 12748 1649 3E050000 		.4byte	.LVL69-.Ltext0
 12749 164d 0100     		.2byte	0x1
 12750 164f 55       		.byte	0x55
 12751 1650 3E050000 		.4byte	.LVL69-.Ltext0
 12752 1654 16060000 		.4byte	.LVL83-.Ltext0
 12753 1658 0400     		.2byte	0x4
 12754 165a F3       		.byte	0xf3
 12755 165b 01       		.uleb128 0x1
 12756 165c 51       		.byte	0x51
 12757 165d 9F       		.byte	0x9f
 12758 165e 16060000 		.4byte	.LVL83-.Ltext0
 12759 1662 18060000 		.4byte	.LVL84-.Ltext0
 12760 1666 0100     		.2byte	0x1
 12761 1668 55       		.byte	0x55
 12762 1669 18060000 		.4byte	.LVL84-.Ltext0
 12763 166d 1A060000 		.4byte	.LVL85-.Ltext0
 12764 1671 0400     		.2byte	0x4
 12765 1673 F3       		.byte	0xf3
 12766 1674 01       		.uleb128 0x1
 12767 1675 51       		.byte	0x51
 12768 1676 9F       		.byte	0x9f
 12769 1677 1A060000 		.4byte	.LVL85-.Ltext0
 12770 167b 1E060000 		.4byte	.LFE71-.Ltext0
 12771 167f 0100     		.2byte	0x1
 12772 1681 51       		.byte	0x51
 12773 1682 00000000 		.4byte	0
 12774 1686 00000000 		.4byte	0
 12775              	.LLST38:
 12776 168a 98030000 		.4byte	.LVL44-.Ltext0
 12777 168e BB030000 		.4byte	.LVL47-1-.Ltext0
 12778 1692 0100     		.2byte	0x1
 12779 1694 52       		.byte	0x52
 12780 1695 BB030000 		.4byte	.LVL47-1-.Ltext0
 12781 1699 1A060000 		.4byte	.LVL85-.Ltext0
 12782 169d 0100     		.2byte	0x1
 12783 169f 59       		.byte	0x59
 12784 16a0 1A060000 		.4byte	.LVL85-.Ltext0
 12785 16a4 1E060000 		.4byte	.LFE71-.Ltext0
 12786 16a8 0100     		.2byte	0x1
 12787 16aa 52       		.byte	0x52
 12788 16ab 00000000 		.4byte	0
 12789 16af 00000000 		.4byte	0
 12790              	.LLST39:
 12791 16b3 98030000 		.4byte	.LVL44-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 313


 12792 16b7 A2030000 		.4byte	.LVL45-.Ltext0
 12793 16bb 0100     		.2byte	0x1
 12794 16bd 53       		.byte	0x53
 12795 16be A2030000 		.4byte	.LVL45-.Ltext0
 12796 16c2 1E060000 		.4byte	.LFE71-.Ltext0
 12797 16c6 0400     		.2byte	0x4
 12798 16c8 F3       		.byte	0xf3
 12799 16c9 01       		.uleb128 0x1
 12800 16ca 53       		.byte	0x53
 12801 16cb 9F       		.byte	0x9f
 12802 16cc 00000000 		.4byte	0
 12803 16d0 00000000 		.4byte	0
 12804              	.LLST40:
 12805 16d4 98030000 		.4byte	.LVL44-.Ltext0
 12806 16d8 F6040000 		.4byte	.LVL66-.Ltext0
 12807 16dc 0200     		.2byte	0x2
 12808 16de 91       		.byte	0x91
 12809 16df 00       		.sleb128 0
 12810 16e0 F6040000 		.4byte	.LVL66-.Ltext0
 12811 16e4 1E060000 		.4byte	.LFE71-.Ltext0
 12812 16e8 0200     		.2byte	0x2
 12813 16ea 91       		.byte	0x91
 12814 16eb 00       		.sleb128 0
 12815 16ec 00000000 		.4byte	0
 12816 16f0 00000000 		.4byte	0
 12817              	.LLST41:
 12818 16f4 B2030000 		.4byte	.LVL46-.Ltext0
 12819 16f8 EE040000 		.4byte	.LVL65-.Ltext0
 12820 16fc 0100     		.2byte	0x1
 12821 16fe 56       		.byte	0x56
 12822 16ff F6040000 		.4byte	.LVL66-.Ltext0
 12823 1703 1A060000 		.4byte	.LVL85-.Ltext0
 12824 1707 0100     		.2byte	0x1
 12825 1709 56       		.byte	0x56
 12826 170a 00000000 		.4byte	0
 12827 170e 00000000 		.4byte	0
 12828              	.LLST42:
 12829 1712 B2030000 		.4byte	.LVL46-.Ltext0
 12830 1716 EE040000 		.4byte	.LVL65-.Ltext0
 12831 171a 0100     		.2byte	0x1
 12832 171c 58       		.byte	0x58
 12833 171d F6040000 		.4byte	.LVL66-.Ltext0
 12834 1721 1A060000 		.4byte	.LVL85-.Ltext0
 12835 1725 0100     		.2byte	0x1
 12836 1727 58       		.byte	0x58
 12837 1728 00000000 		.4byte	0
 12838 172c 00000000 		.4byte	0
 12839              	.LLST43:
 12840 1730 B2030000 		.4byte	.LVL46-.Ltext0
 12841 1734 BB030000 		.4byte	.LVL47-1-.Ltext0
 12842 1738 0100     		.2byte	0x1
 12843 173a 52       		.byte	0x52
 12844 173b BB030000 		.4byte	.LVL47-1-.Ltext0
 12845 173f EE040000 		.4byte	.LVL65-.Ltext0
 12846 1743 0100     		.2byte	0x1
 12847 1745 59       		.byte	0x59
 12848 1746 F6040000 		.4byte	.LVL66-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 314


 12849 174a 1A060000 		.4byte	.LVL85-.Ltext0
 12850 174e 0100     		.2byte	0x1
 12851 1750 59       		.byte	0x59
 12852 1751 00000000 		.4byte	0
 12853 1755 00000000 		.4byte	0
 12854              	.LLST44:
 12855 1759 B2030000 		.4byte	.LVL46-.Ltext0
 12856 175d BB030000 		.4byte	.LVL47-1-.Ltext0
 12857 1761 0100     		.2byte	0x1
 12858 1763 51       		.byte	0x51
 12859 1764 BB030000 		.4byte	.LVL47-1-.Ltext0
 12860 1768 5E040000 		.4byte	.LVL53-.Ltext0
 12861 176c 0100     		.2byte	0x1
 12862 176e 55       		.byte	0x55
 12863 176f 5E040000 		.4byte	.LVL53-.Ltext0
 12864 1773 64040000 		.4byte	.LVL54-.Ltext0
 12865 1777 0200     		.2byte	0x2
 12866 1779 74       		.byte	0x74
 12867 177a 30       		.sleb128 48
 12868 177b 64040000 		.4byte	.LVL54-.Ltext0
 12869 177f 6A040000 		.4byte	.LVL55-.Ltext0
 12870 1783 0300     		.2byte	0x3
 12871 1785 75       		.byte	0x75
 12872 1786 7E       		.sleb128 -2
 12873 1787 9F       		.byte	0x9f
 12874 1788 6A040000 		.4byte	.LVL55-.Ltext0
 12875 178c EE040000 		.4byte	.LVL65-.Ltext0
 12876 1790 0400     		.2byte	0x4
 12877 1792 F3       		.byte	0xf3
 12878 1793 01       		.uleb128 0x1
 12879 1794 51       		.byte	0x51
 12880 1795 9F       		.byte	0x9f
 12881 1796 F6040000 		.4byte	.LVL66-.Ltext0
 12882 179a 22050000 		.4byte	.LVL68-.Ltext0
 12883 179e 0400     		.2byte	0x4
 12884 17a0 F3       		.byte	0xf3
 12885 17a1 01       		.uleb128 0x1
 12886 17a2 51       		.byte	0x51
 12887 17a3 9F       		.byte	0x9f
 12888 17a4 22050000 		.4byte	.LVL68-.Ltext0
 12889 17a8 3E050000 		.4byte	.LVL69-.Ltext0
 12890 17ac 0100     		.2byte	0x1
 12891 17ae 55       		.byte	0x55
 12892 17af 3E050000 		.4byte	.LVL69-.Ltext0
 12893 17b3 16060000 		.4byte	.LVL83-.Ltext0
 12894 17b7 0400     		.2byte	0x4
 12895 17b9 F3       		.byte	0xf3
 12896 17ba 01       		.uleb128 0x1
 12897 17bb 51       		.byte	0x51
 12898 17bc 9F       		.byte	0x9f
 12899 17bd 16060000 		.4byte	.LVL83-.Ltext0
 12900 17c1 18060000 		.4byte	.LVL84-.Ltext0
 12901 17c5 0100     		.2byte	0x1
 12902 17c7 55       		.byte	0x55
 12903 17c8 18060000 		.4byte	.LVL84-.Ltext0
 12904 17cc 1A060000 		.4byte	.LVL85-.Ltext0
 12905 17d0 0400     		.2byte	0x4
ARM GAS  /tmp/ccdPJtdr.s 			page 315


 12906 17d2 F3       		.byte	0xf3
 12907 17d3 01       		.uleb128 0x1
 12908 17d4 51       		.byte	0x51
 12909 17d5 9F       		.byte	0x9f
 12910 17d6 00000000 		.4byte	0
 12911 17da 00000000 		.4byte	0
 12912              	.LLST45:
 12913 17de B2030000 		.4byte	.LVL46-.Ltext0
 12914 17e2 BB030000 		.4byte	.LVL47-1-.Ltext0
 12915 17e6 0100     		.2byte	0x1
 12916 17e8 50       		.byte	0x50
 12917 17e9 BB030000 		.4byte	.LVL47-1-.Ltext0
 12918 17ed EE040000 		.4byte	.LVL65-.Ltext0
 12919 17f1 0100     		.2byte	0x1
 12920 17f3 54       		.byte	0x54
 12921 17f4 F6040000 		.4byte	.LVL66-.Ltext0
 12922 17f8 1A060000 		.4byte	.LVL85-.Ltext0
 12923 17fc 0100     		.2byte	0x1
 12924 17fe 54       		.byte	0x54
 12925 17ff 00000000 		.4byte	0
 12926 1803 00000000 		.4byte	0
 12927              	.LLST46:
 12928 1807 C8030000 		.4byte	.LVL50-.Ltext0
 12929 180b EE040000 		.4byte	.LVL65-.Ltext0
 12930 180f 0100     		.2byte	0x1
 12931 1811 58       		.byte	0x58
 12932 1812 F6040000 		.4byte	.LVL66-.Ltext0
 12933 1816 1A060000 		.4byte	.LVL85-.Ltext0
 12934 181a 0100     		.2byte	0x1
 12935 181c 58       		.byte	0x58
 12936 181d 00000000 		.4byte	0
 12937 1821 00000000 		.4byte	0
 12938              	.LLST47:
 12939 1825 C8030000 		.4byte	.LVL50-.Ltext0
 12940 1829 6C040000 		.4byte	.LVL56-.Ltext0
 12941 182d 0100     		.2byte	0x1
 12942 182f 51       		.byte	0x51
 12943 1830 22050000 		.4byte	.LVL68-.Ltext0
 12944 1834 3E050000 		.4byte	.LVL69-.Ltext0
 12945 1838 0100     		.2byte	0x1
 12946 183a 51       		.byte	0x51
 12947 183b 16060000 		.4byte	.LVL83-.Ltext0
 12948 183f 1A060000 		.4byte	.LVL85-.Ltext0
 12949 1843 0100     		.2byte	0x1
 12950 1845 51       		.byte	0x51
 12951 1846 00000000 		.4byte	0
 12952 184a 00000000 		.4byte	0
 12953              	.LLST48:
 12954 184e C4030000 		.4byte	.LVL49-.Ltext0
 12955 1852 FA030000 		.4byte	.LVL52-.Ltext0
 12956 1856 0100     		.2byte	0x1
 12957 1858 53       		.byte	0x53
 12958 1859 16060000 		.4byte	.LVL83-.Ltext0
 12959 185d 1A060000 		.4byte	.LVL85-.Ltext0
 12960 1861 0100     		.2byte	0x1
 12961 1863 53       		.byte	0x53
 12962 1864 00000000 		.4byte	0
ARM GAS  /tmp/ccdPJtdr.s 			page 316


 12963 1868 00000000 		.4byte	0
 12964              	.LLST49:
 12965 186c C2030000 		.4byte	.LVL48-.Ltext0
 12966 1870 D4030000 		.4byte	.LVL51-.Ltext0
 12967 1874 0100     		.2byte	0x1
 12968 1876 50       		.byte	0x50
 12969 1877 D4030000 		.4byte	.LVL51-.Ltext0
 12970 187b EE040000 		.4byte	.LVL65-.Ltext0
 12971 187f 0100     		.2byte	0x1
 12972 1881 57       		.byte	0x57
 12973 1882 F6040000 		.4byte	.LVL66-.Ltext0
 12974 1886 1A060000 		.4byte	.LVL85-.Ltext0
 12975 188a 0100     		.2byte	0x1
 12976 188c 57       		.byte	0x57
 12977 188d 00000000 		.4byte	0
 12978 1891 00000000 		.4byte	0
 12979              	.LLST61:
 12980 1895 98080000 		.4byte	.LFB74-.Ltext0
 12981 1899 9A080000 		.4byte	.LCFI21-.Ltext0
 12982 189d 0200     		.2byte	0x2
 12983 189f 7D       		.byte	0x7d
 12984 18a0 00       		.sleb128 0
 12985 18a1 9A080000 		.4byte	.LCFI21-.Ltext0
 12986 18a5 60090000 		.4byte	.LFE74-.Ltext0
 12987 18a9 0200     		.2byte	0x2
 12988 18ab 7D       		.byte	0x7d
 12989 18ac 0C       		.sleb128 12
 12990 18ad 00000000 		.4byte	0
 12991 18b1 00000000 		.4byte	0
 12992              	.LLST62:
 12993 18b5 98080000 		.4byte	.LVL113-.Ltext0
 12994 18b9 A0080000 		.4byte	.LVL114-.Ltext0
 12995 18bd 0100     		.2byte	0x1
 12996 18bf 50       		.byte	0x50
 12997 18c0 A0080000 		.4byte	.LVL114-.Ltext0
 12998 18c4 4E090000 		.4byte	.LVL129-.Ltext0
 12999 18c8 0100     		.2byte	0x1
 13000 18ca 54       		.byte	0x54
 13001 18cb 4E090000 		.4byte	.LVL129-.Ltext0
 13002 18cf 60090000 		.4byte	.LFE74-.Ltext0
 13003 18d3 0400     		.2byte	0x4
 13004 18d5 F3       		.byte	0xf3
 13005 18d6 01       		.uleb128 0x1
 13006 18d7 50       		.byte	0x50
 13007 18d8 9F       		.byte	0x9f
 13008 18d9 00000000 		.4byte	0
 13009 18dd 00000000 		.4byte	0
 13010              	.LLST63:
 13011 18e1 98080000 		.4byte	.LVL113-.Ltext0
 13012 18e5 08090000 		.4byte	.LVL119-.Ltext0
 13013 18e9 0100     		.2byte	0x1
 13014 18eb 52       		.byte	0x52
 13015 18ec 08090000 		.4byte	.LVL119-.Ltext0
 13016 18f0 2E090000 		.4byte	.LVL120-.Ltext0
 13017 18f4 0200     		.2byte	0x2
 13018 18f6 74       		.byte	0x74
 13019 18f7 38       		.sleb128 56
ARM GAS  /tmp/ccdPJtdr.s 			page 317


 13020 18f8 2E090000 		.4byte	.LVL120-.Ltext0
 13021 18fc 36090000 		.4byte	.LVL122-.Ltext0
 13022 1900 0400     		.2byte	0x4
 13023 1902 F3       		.byte	0xf3
 13024 1903 01       		.uleb128 0x1
 13025 1904 52       		.byte	0x52
 13026 1905 9F       		.byte	0x9f
 13027 1906 36090000 		.4byte	.LVL122-.Ltext0
 13028 190a 46090000 		.4byte	.LVL127-.Ltext0
 13029 190e 0100     		.2byte	0x1
 13030 1910 52       		.byte	0x52
 13031 1911 46090000 		.4byte	.LVL127-.Ltext0
 13032 1915 4A090000 		.4byte	.LVL128-.Ltext0
 13033 1919 0200     		.2byte	0x2
 13034 191b 74       		.byte	0x74
 13035 191c 38       		.sleb128 56
 13036 191d 4A090000 		.4byte	.LVL128-.Ltext0
 13037 1921 60090000 		.4byte	.LFE74-.Ltext0
 13038 1925 0100     		.2byte	0x1
 13039 1927 52       		.byte	0x52
 13040 1928 00000000 		.4byte	0
 13041 192c 00000000 		.4byte	0
 13042              	.LLST64:
 13043 1930 98080000 		.4byte	.LVL113-.Ltext0
 13044 1934 EE080000 		.4byte	.LVL118-.Ltext0
 13045 1938 0100     		.2byte	0x1
 13046 193a 53       		.byte	0x53
 13047 193b EE080000 		.4byte	.LVL118-.Ltext0
 13048 193f 2E090000 		.4byte	.LVL120-.Ltext0
 13049 1943 0200     		.2byte	0x2
 13050 1945 74       		.byte	0x74
 13051 1946 34       		.sleb128 52
 13052 1947 2E090000 		.4byte	.LVL120-.Ltext0
 13053 194b 36090000 		.4byte	.LVL122-.Ltext0
 13054 194f 0400     		.2byte	0x4
 13055 1951 F3       		.byte	0xf3
 13056 1952 01       		.uleb128 0x1
 13057 1953 53       		.byte	0x53
 13058 1954 9F       		.byte	0x9f
 13059 1955 36090000 		.4byte	.LVL122-.Ltext0
 13060 1959 3E090000 		.4byte	.LVL123-.Ltext0
 13061 195d 0200     		.2byte	0x2
 13062 195f 74       		.byte	0x74
 13063 1960 34       		.sleb128 52
 13064 1961 3E090000 		.4byte	.LVL123-.Ltext0
 13065 1965 46090000 		.4byte	.LVL127-.Ltext0
 13066 1969 0100     		.2byte	0x1
 13067 196b 53       		.byte	0x53
 13068 196c 46090000 		.4byte	.LVL127-.Ltext0
 13069 1970 4A090000 		.4byte	.LVL128-.Ltext0
 13070 1974 0200     		.2byte	0x2
 13071 1976 74       		.byte	0x74
 13072 1977 34       		.sleb128 52
 13073 1978 4A090000 		.4byte	.LVL128-.Ltext0
 13074 197c 60090000 		.4byte	.LFE74-.Ltext0
 13075 1980 0100     		.2byte	0x1
 13076 1982 53       		.byte	0x53
ARM GAS  /tmp/ccdPJtdr.s 			page 318


 13077 1983 00000000 		.4byte	0
 13078 1987 00000000 		.4byte	0
 13079              	.LLST65:
 13080 198b A4080000 		.4byte	.LVL115-.Ltext0
 13081 198f EE080000 		.4byte	.LVL118-.Ltext0
 13082 1993 0100     		.2byte	0x1
 13083 1995 53       		.byte	0x53
 13084 1996 EE080000 		.4byte	.LVL118-.Ltext0
 13085 199a 2E090000 		.4byte	.LVL120-.Ltext0
 13086 199e 0200     		.2byte	0x2
 13087 19a0 74       		.byte	0x74
 13088 19a1 34       		.sleb128 52
 13089 19a2 2E090000 		.4byte	.LVL120-.Ltext0
 13090 19a6 34090000 		.4byte	.LVL121-.Ltext0
 13091 19aa 0400     		.2byte	0x4
 13092 19ac F3       		.byte	0xf3
 13093 19ad 01       		.uleb128 0x1
 13094 19ae 53       		.byte	0x53
 13095 19af 9F       		.byte	0x9f
 13096 19b0 36090000 		.4byte	.LVL122-.Ltext0
 13097 19b4 3E090000 		.4byte	.LVL123-.Ltext0
 13098 19b8 0200     		.2byte	0x2
 13099 19ba 74       		.byte	0x74
 13100 19bb 34       		.sleb128 52
 13101 19bc 3E090000 		.4byte	.LVL123-.Ltext0
 13102 19c0 46090000 		.4byte	.LVL127-.Ltext0
 13103 19c4 0100     		.2byte	0x1
 13104 19c6 53       		.byte	0x53
 13105 19c7 46090000 		.4byte	.LVL127-.Ltext0
 13106 19cb 4A090000 		.4byte	.LVL128-.Ltext0
 13107 19cf 0200     		.2byte	0x2
 13108 19d1 74       		.byte	0x74
 13109 19d2 34       		.sleb128 52
 13110 19d3 00000000 		.4byte	0
 13111 19d7 00000000 		.4byte	0
 13112              	.LLST66:
 13113 19db A4080000 		.4byte	.LVL115-.Ltext0
 13114 19df 08090000 		.4byte	.LVL119-.Ltext0
 13115 19e3 0100     		.2byte	0x1
 13116 19e5 52       		.byte	0x52
 13117 19e6 08090000 		.4byte	.LVL119-.Ltext0
 13118 19ea 2E090000 		.4byte	.LVL120-.Ltext0
 13119 19ee 0200     		.2byte	0x2
 13120 19f0 74       		.byte	0x74
 13121 19f1 38       		.sleb128 56
 13122 19f2 2E090000 		.4byte	.LVL120-.Ltext0
 13123 19f6 34090000 		.4byte	.LVL121-.Ltext0
 13124 19fa 0400     		.2byte	0x4
 13125 19fc F3       		.byte	0xf3
 13126 19fd 01       		.uleb128 0x1
 13127 19fe 52       		.byte	0x52
 13128 19ff 9F       		.byte	0x9f
 13129 1a00 36090000 		.4byte	.LVL122-.Ltext0
 13130 1a04 46090000 		.4byte	.LVL127-.Ltext0
 13131 1a08 0100     		.2byte	0x1
 13132 1a0a 52       		.byte	0x52
 13133 1a0b 46090000 		.4byte	.LVL127-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 319


 13134 1a0f 4A090000 		.4byte	.LVL128-.Ltext0
 13135 1a13 0200     		.2byte	0x2
 13136 1a15 74       		.byte	0x74
 13137 1a16 38       		.sleb128 56
 13138 1a17 00000000 		.4byte	0
 13139 1a1b 00000000 		.4byte	0
 13140              	.LLST67:
 13141 1a1f A4080000 		.4byte	.LVL115-.Ltext0
 13142 1a23 34090000 		.4byte	.LVL121-.Ltext0
 13143 1a27 0100     		.2byte	0x1
 13144 1a29 51       		.byte	0x51
 13145 1a2a 36090000 		.4byte	.LVL122-.Ltext0
 13146 1a2e 4A090000 		.4byte	.LVL128-.Ltext0
 13147 1a32 0100     		.2byte	0x1
 13148 1a34 51       		.byte	0x51
 13149 1a35 00000000 		.4byte	0
 13150 1a39 00000000 		.4byte	0
 13151              	.LLST68:
 13152 1a3d A4080000 		.4byte	.LVL115-.Ltext0
 13153 1a41 34090000 		.4byte	.LVL121-.Ltext0
 13154 1a45 0100     		.2byte	0x1
 13155 1a47 54       		.byte	0x54
 13156 1a48 36090000 		.4byte	.LVL122-.Ltext0
 13157 1a4c 4A090000 		.4byte	.LVL128-.Ltext0
 13158 1a50 0100     		.2byte	0x1
 13159 1a52 54       		.byte	0x54
 13160 1a53 00000000 		.4byte	0
 13161 1a57 00000000 		.4byte	0
 13162              	.LLST69:
 13163 1a5b B0080000 		.4byte	.LVL116-.Ltext0
 13164 1a5f 34090000 		.4byte	.LVL121-.Ltext0
 13165 1a63 0200     		.2byte	0x2
 13166 1a65 74       		.byte	0x74
 13167 1a66 04       		.sleb128 4
 13168 1a67 36090000 		.4byte	.LVL122-.Ltext0
 13169 1a6b 4A090000 		.4byte	.LVL128-.Ltext0
 13170 1a6f 0200     		.2byte	0x2
 13171 1a71 74       		.byte	0x74
 13172 1a72 04       		.sleb128 4
 13173 1a73 00000000 		.4byte	0
 13174 1a77 00000000 		.4byte	0
 13175              	.LLST70:
 13176 1a7b B0080000 		.4byte	.LVL116-.Ltext0
 13177 1a7f D6080000 		.4byte	.LVL117-.Ltext0
 13178 1a83 0100     		.2byte	0x1
 13179 1a85 50       		.byte	0x50
 13180 1a86 3E090000 		.4byte	.LVL123-.Ltext0
 13181 1a8a 40090000 		.4byte	.LVL124-.Ltext0
 13182 1a8e 0100     		.2byte	0x1
 13183 1a90 50       		.byte	0x50
 13184 1a91 42090000 		.4byte	.LVL125-.Ltext0
 13185 1a95 44090000 		.4byte	.LVL126-.Ltext0
 13186 1a99 0100     		.2byte	0x1
 13187 1a9b 50       		.byte	0x50
 13188 1a9c 00000000 		.4byte	0
 13189 1aa0 00000000 		.4byte	0
 13190              	.LLST81:
ARM GAS  /tmp/ccdPJtdr.s 			page 320


 13191 1aa4 F80A0000 		.4byte	.LFB77-.Ltext0
 13192 1aa8 FA0A0000 		.4byte	.LCFI28-.Ltext0
 13193 1aac 0200     		.2byte	0x2
 13194 1aae 7D       		.byte	0x7d
 13195 1aaf 00       		.sleb128 0
 13196 1ab0 FA0A0000 		.4byte	.LCFI28-.Ltext0
 13197 1ab4 1C0C0000 		.4byte	.LFE77-.Ltext0
 13198 1ab8 0200     		.2byte	0x2
 13199 1aba 7D       		.byte	0x7d
 13200 1abb 10       		.sleb128 16
 13201 1abc 00000000 		.4byte	0
 13202 1ac0 00000000 		.4byte	0
 13203              	.LLST82:
 13204 1ac4 F80A0000 		.4byte	.LVL152-.Ltext0
 13205 1ac8 000B0000 		.4byte	.LVL153-.Ltext0
 13206 1acc 0100     		.2byte	0x1
 13207 1ace 50       		.byte	0x50
 13208 1acf 000B0000 		.4byte	.LVL153-.Ltext0
 13209 1ad3 080C0000 		.4byte	.LVL170-.Ltext0
 13210 1ad7 0100     		.2byte	0x1
 13211 1ad9 54       		.byte	0x54
 13212 1ada 080C0000 		.4byte	.LVL170-.Ltext0
 13213 1ade 1C0C0000 		.4byte	.LFE77-.Ltext0
 13214 1ae2 0400     		.2byte	0x4
 13215 1ae4 F3       		.byte	0xf3
 13216 1ae5 01       		.uleb128 0x1
 13217 1ae6 50       		.byte	0x50
 13218 1ae7 9F       		.byte	0x9f
 13219 1ae8 00000000 		.4byte	0
 13220 1aec 00000000 		.4byte	0
 13221              	.LLST83:
 13222 1af0 F80A0000 		.4byte	.LVL152-.Ltext0
 13223 1af4 5C0B0000 		.4byte	.LVL158-.Ltext0
 13224 1af8 0100     		.2byte	0x1
 13225 1afa 51       		.byte	0x51
 13226 1afb 5C0B0000 		.4byte	.LVL158-.Ltext0
 13227 1aff 990B0000 		.4byte	.LVL159-1-.Ltext0
 13228 1b03 0200     		.2byte	0x2
 13229 1b05 74       		.byte	0x74
 13230 1b06 30       		.sleb128 48
 13231 1b07 990B0000 		.4byte	.LVL159-1-.Ltext0
 13232 1b0b FC0B0000 		.4byte	.LVL165-.Ltext0
 13233 1b0f 0400     		.2byte	0x4
 13234 1b11 F3       		.byte	0xf3
 13235 1b12 01       		.uleb128 0x1
 13236 1b13 51       		.byte	0x51
 13237 1b14 9F       		.byte	0x9f
 13238 1b15 FC0B0000 		.4byte	.LVL165-.Ltext0
 13239 1b19 1C0C0000 		.4byte	.LFE77-.Ltext0
 13240 1b1d 0100     		.2byte	0x1
 13241 1b1f 51       		.byte	0x51
 13242 1b20 00000000 		.4byte	0
 13243 1b24 00000000 		.4byte	0
 13244              	.LLST84:
 13245 1b28 F80A0000 		.4byte	.LVL152-.Ltext0
 13246 1b2c 990B0000 		.4byte	.LVL159-1-.Ltext0
 13247 1b30 0100     		.2byte	0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 321


 13248 1b32 52       		.byte	0x52
 13249 1b33 990B0000 		.4byte	.LVL159-1-.Ltext0
 13250 1b37 FC0B0000 		.4byte	.LVL165-.Ltext0
 13251 1b3b 0400     		.2byte	0x4
 13252 1b3d F3       		.byte	0xf3
 13253 1b3e 01       		.uleb128 0x1
 13254 1b3f 52       		.byte	0x52
 13255 1b40 9F       		.byte	0x9f
 13256 1b41 FC0B0000 		.4byte	.LVL165-.Ltext0
 13257 1b45 1C0C0000 		.4byte	.LFE77-.Ltext0
 13258 1b49 0100     		.2byte	0x1
 13259 1b4b 52       		.byte	0x52
 13260 1b4c 00000000 		.4byte	0
 13261 1b50 00000000 		.4byte	0
 13262              	.LLST85:
 13263 1b54 F80A0000 		.4byte	.LVL152-.Ltext0
 13264 1b58 4E0B0000 		.4byte	.LVL157-.Ltext0
 13265 1b5c 0100     		.2byte	0x1
 13266 1b5e 53       		.byte	0x53
 13267 1b5f 4E0B0000 		.4byte	.LVL157-.Ltext0
 13268 1b63 990B0000 		.4byte	.LVL159-1-.Ltext0
 13269 1b67 0200     		.2byte	0x2
 13270 1b69 74       		.byte	0x74
 13271 1b6a 34       		.sleb128 52
 13272 1b6b 990B0000 		.4byte	.LVL159-1-.Ltext0
 13273 1b6f FC0B0000 		.4byte	.LVL165-.Ltext0
 13274 1b73 0400     		.2byte	0x4
 13275 1b75 F3       		.byte	0xf3
 13276 1b76 01       		.uleb128 0x1
 13277 1b77 53       		.byte	0x53
 13278 1b78 9F       		.byte	0x9f
 13279 1b79 FC0B0000 		.4byte	.LVL165-.Ltext0
 13280 1b7d 080C0000 		.4byte	.LVL170-.Ltext0
 13281 1b81 0100     		.2byte	0x1
 13282 1b83 53       		.byte	0x53
 13283 1b84 080C0000 		.4byte	.LVL170-.Ltext0
 13284 1b88 1C0C0000 		.4byte	.LFE77-.Ltext0
 13285 1b8c 0400     		.2byte	0x4
 13286 1b8e F3       		.byte	0xf3
 13287 1b8f 01       		.uleb128 0x1
 13288 1b90 53       		.byte	0x53
 13289 1b91 9F       		.byte	0x9f
 13290 1b92 00000000 		.4byte	0
 13291 1b96 00000000 		.4byte	0
 13292              	.LLST86:
 13293 1b9a 040B0000 		.4byte	.LVL154-.Ltext0
 13294 1b9e 4E0B0000 		.4byte	.LVL157-.Ltext0
 13295 1ba2 0100     		.2byte	0x1
 13296 1ba4 53       		.byte	0x53
 13297 1ba5 4E0B0000 		.4byte	.LVL157-.Ltext0
 13298 1ba9 990B0000 		.4byte	.LVL159-1-.Ltext0
 13299 1bad 0200     		.2byte	0x2
 13300 1baf 74       		.byte	0x74
 13301 1bb0 34       		.sleb128 52
 13302 1bb1 990B0000 		.4byte	.LVL159-1-.Ltext0
 13303 1bb5 B20B0000 		.4byte	.LVL162-.Ltext0
 13304 1bb9 0400     		.2byte	0x4
ARM GAS  /tmp/ccdPJtdr.s 			page 322


 13305 1bbb F3       		.byte	0xf3
 13306 1bbc 01       		.uleb128 0x1
 13307 1bbd 53       		.byte	0x53
 13308 1bbe 9F       		.byte	0x9f
 13309 1bbf B40B0000 		.4byte	.LVL163-.Ltext0
 13310 1bc3 FC0B0000 		.4byte	.LVL165-.Ltext0
 13311 1bc7 0400     		.2byte	0x4
 13312 1bc9 F3       		.byte	0xf3
 13313 1bca 01       		.uleb128 0x1
 13314 1bcb 53       		.byte	0x53
 13315 1bcc 9F       		.byte	0x9f
 13316 1bcd FC0B0000 		.4byte	.LVL165-.Ltext0
 13317 1bd1 040C0000 		.4byte	.LVL169-.Ltext0
 13318 1bd5 0100     		.2byte	0x1
 13319 1bd7 53       		.byte	0x53
 13320 1bd8 00000000 		.4byte	0
 13321 1bdc 00000000 		.4byte	0
 13322              	.LLST87:
 13323 1be0 040B0000 		.4byte	.LVL154-.Ltext0
 13324 1be4 990B0000 		.4byte	.LVL159-1-.Ltext0
 13325 1be8 0100     		.2byte	0x1
 13326 1bea 52       		.byte	0x52
 13327 1beb 990B0000 		.4byte	.LVL159-1-.Ltext0
 13328 1bef B20B0000 		.4byte	.LVL162-.Ltext0
 13329 1bf3 0400     		.2byte	0x4
 13330 1bf5 F3       		.byte	0xf3
 13331 1bf6 01       		.uleb128 0x1
 13332 1bf7 52       		.byte	0x52
 13333 1bf8 9F       		.byte	0x9f
 13334 1bf9 B40B0000 		.4byte	.LVL163-.Ltext0
 13335 1bfd FC0B0000 		.4byte	.LVL165-.Ltext0
 13336 1c01 0400     		.2byte	0x4
 13337 1c03 F3       		.byte	0xf3
 13338 1c04 01       		.uleb128 0x1
 13339 1c05 52       		.byte	0x52
 13340 1c06 9F       		.byte	0x9f
 13341 1c07 FC0B0000 		.4byte	.LVL165-.Ltext0
 13342 1c0b 040C0000 		.4byte	.LVL169-.Ltext0
 13343 1c0f 0100     		.2byte	0x1
 13344 1c11 52       		.byte	0x52
 13345 1c12 00000000 		.4byte	0
 13346 1c16 00000000 		.4byte	0
 13347              	.LLST88:
 13348 1c1a 040B0000 		.4byte	.LVL154-.Ltext0
 13349 1c1e 5C0B0000 		.4byte	.LVL158-.Ltext0
 13350 1c22 0100     		.2byte	0x1
 13351 1c24 51       		.byte	0x51
 13352 1c25 5C0B0000 		.4byte	.LVL158-.Ltext0
 13353 1c29 990B0000 		.4byte	.LVL159-1-.Ltext0
 13354 1c2d 0200     		.2byte	0x2
 13355 1c2f 74       		.byte	0x74
 13356 1c30 30       		.sleb128 48
 13357 1c31 990B0000 		.4byte	.LVL159-1-.Ltext0
 13358 1c35 B20B0000 		.4byte	.LVL162-.Ltext0
 13359 1c39 0400     		.2byte	0x4
 13360 1c3b F3       		.byte	0xf3
 13361 1c3c 01       		.uleb128 0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 323


 13362 1c3d 51       		.byte	0x51
 13363 1c3e 9F       		.byte	0x9f
 13364 1c3f B40B0000 		.4byte	.LVL163-.Ltext0
 13365 1c43 FC0B0000 		.4byte	.LVL165-.Ltext0
 13366 1c47 0400     		.2byte	0x4
 13367 1c49 F3       		.byte	0xf3
 13368 1c4a 01       		.uleb128 0x1
 13369 1c4b 51       		.byte	0x51
 13370 1c4c 9F       		.byte	0x9f
 13371 1c4d FC0B0000 		.4byte	.LVL165-.Ltext0
 13372 1c51 040C0000 		.4byte	.LVL169-.Ltext0
 13373 1c55 0100     		.2byte	0x1
 13374 1c57 51       		.byte	0x51
 13375 1c58 00000000 		.4byte	0
 13376 1c5c 00000000 		.4byte	0
 13377              	.LLST89:
 13378 1c60 040B0000 		.4byte	.LVL154-.Ltext0
 13379 1c64 B20B0000 		.4byte	.LVL162-.Ltext0
 13380 1c68 0100     		.2byte	0x1
 13381 1c6a 54       		.byte	0x54
 13382 1c6b B40B0000 		.4byte	.LVL163-.Ltext0
 13383 1c6f 040C0000 		.4byte	.LVL169-.Ltext0
 13384 1c73 0100     		.2byte	0x1
 13385 1c75 54       		.byte	0x54
 13386 1c76 00000000 		.4byte	0
 13387 1c7a 00000000 		.4byte	0
 13388              	.LLST90:
 13389 1c7e 100B0000 		.4byte	.LVL155-.Ltext0
 13390 1c82 990B0000 		.4byte	.LVL159-1-.Ltext0
 13391 1c86 0200     		.2byte	0x2
 13392 1c88 74       		.byte	0x74
 13393 1c89 04       		.sleb128 4
 13394 1c8a FC0B0000 		.4byte	.LVL165-.Ltext0
 13395 1c8e 040C0000 		.4byte	.LVL169-.Ltext0
 13396 1c92 0200     		.2byte	0x2
 13397 1c94 74       		.byte	0x74
 13398 1c95 04       		.sleb128 4
 13399 1c96 00000000 		.4byte	0
 13400 1c9a 00000000 		.4byte	0
 13401              	.LLST91:
 13402 1c9e 100B0000 		.4byte	.LVL155-.Ltext0
 13403 1ca2 360B0000 		.4byte	.LVL156-.Ltext0
 13404 1ca6 0100     		.2byte	0x1
 13405 1ca8 50       		.byte	0x50
 13406 1ca9 FC0B0000 		.4byte	.LVL165-.Ltext0
 13407 1cad FE0B0000 		.4byte	.LVL166-.Ltext0
 13408 1cb1 0100     		.2byte	0x1
 13409 1cb3 50       		.byte	0x50
 13410 1cb4 000C0000 		.4byte	.LVL167-.Ltext0
 13411 1cb8 020C0000 		.4byte	.LVL168-.Ltext0
 13412 1cbc 0100     		.2byte	0x1
 13413 1cbe 50       		.byte	0x50
 13414 1cbf 00000000 		.4byte	0
 13415 1cc3 00000000 		.4byte	0
 13416              	.LLST117:
 13417 1cc7 640F0000 		.4byte	.LVL222-.Ltext0
 13418 1ccb 930F0000 		.4byte	.LVL224-1-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 324


 13419 1ccf 0100     		.2byte	0x1
 13420 1cd1 50       		.byte	0x50
 13421 1cd2 930F0000 		.4byte	.LVL224-1-.Ltext0
 13422 1cd6 940F0000 		.4byte	.LVL224-.Ltext0
 13423 1cda 0400     		.2byte	0x4
 13424 1cdc F3       		.byte	0xf3
 13425 1cdd 01       		.uleb128 0x1
 13426 1cde 50       		.byte	0x50
 13427 1cdf 9F       		.byte	0x9f
 13428 1ce0 940F0000 		.4byte	.LVL224-.Ltext0
 13429 1ce4 960F0000 		.4byte	.LFE114-.Ltext0
 13430 1ce8 0100     		.2byte	0x1
 13431 1cea 50       		.byte	0x50
 13432 1ceb 00000000 		.4byte	0
 13433 1cef 00000000 		.4byte	0
 13434              	.LLST118:
 13435 1cf3 800F0000 		.4byte	.LVL223-.Ltext0
 13436 1cf7 930F0000 		.4byte	.LVL224-1-.Ltext0
 13437 1cfb 0100     		.2byte	0x1
 13438 1cfd 50       		.byte	0x50
 13439 1cfe 930F0000 		.4byte	.LVL224-1-.Ltext0
 13440 1d02 940F0000 		.4byte	.LVL224-.Ltext0
 13441 1d06 0400     		.2byte	0x4
 13442 1d08 F3       		.byte	0xf3
 13443 1d09 01       		.uleb128 0x1
 13444 1d0a 50       		.byte	0x50
 13445 1d0b 9F       		.byte	0x9f
 13446 1d0c 00000000 		.4byte	0
 13447 1d10 00000000 		.4byte	0
 13448              	.LLST135:
 13449 1d14 B8110000 		.4byte	.LVL261-.Ltext0
 13450 1d18 0B120000 		.4byte	.LVL263-1-.Ltext0
 13451 1d1c 0100     		.2byte	0x1
 13452 1d1e 50       		.byte	0x50
 13453 1d1f 0B120000 		.4byte	.LVL263-1-.Ltext0
 13454 1d23 0C120000 		.4byte	.LVL263-.Ltext0
 13455 1d27 0400     		.2byte	0x4
 13456 1d29 F3       		.byte	0xf3
 13457 1d2a 01       		.uleb128 0x1
 13458 1d2b 50       		.byte	0x50
 13459 1d2c 9F       		.byte	0x9f
 13460 1d2d 0C120000 		.4byte	.LVL263-.Ltext0
 13461 1d31 14120000 		.4byte	.LFE111-.Ltext0
 13462 1d35 0100     		.2byte	0x1
 13463 1d37 50       		.byte	0x50
 13464 1d38 00000000 		.4byte	0
 13465 1d3c 00000000 		.4byte	0
 13466              	.LLST136:
 13467 1d40 FC110000 		.4byte	.LVL262-.Ltext0
 13468 1d44 0B120000 		.4byte	.LVL263-1-.Ltext0
 13469 1d48 0100     		.2byte	0x1
 13470 1d4a 50       		.byte	0x50
 13471 1d4b 0B120000 		.4byte	.LVL263-1-.Ltext0
 13472 1d4f 0C120000 		.4byte	.LVL263-.Ltext0
 13473 1d53 0400     		.2byte	0x4
 13474 1d55 F3       		.byte	0xf3
 13475 1d56 01       		.uleb128 0x1
ARM GAS  /tmp/ccdPJtdr.s 			page 325


 13476 1d57 50       		.byte	0x50
 13477 1d58 9F       		.byte	0x9f
 13478 1d59 00000000 		.4byte	0
 13479 1d5d 00000000 		.4byte	0
 13480              	.LLST138:
 13481 1d61 1A120000 		.4byte	.LVL266-.Ltext0
 13482 1d65 69120000 		.4byte	.LVL268-1-.Ltext0
 13483 1d69 0100     		.2byte	0x1
 13484 1d6b 50       		.byte	0x50
 13485 1d6c 69120000 		.4byte	.LVL268-1-.Ltext0
 13486 1d70 6A120000 		.4byte	.LVL268-.Ltext0
 13487 1d74 0400     		.2byte	0x4
 13488 1d76 F3       		.byte	0xf3
 13489 1d77 01       		.uleb128 0x1
 13490 1d78 50       		.byte	0x50
 13491 1d79 9F       		.byte	0x9f
 13492 1d7a 6A120000 		.4byte	.LVL268-.Ltext0
 13493 1d7e 70120000 		.4byte	.LFE113-.Ltext0
 13494 1d82 0100     		.2byte	0x1
 13495 1d84 50       		.byte	0x50
 13496 1d85 00000000 		.4byte	0
 13497 1d89 00000000 		.4byte	0
 13498              	.LLST139:
 13499 1d8d 5A120000 		.4byte	.LVL267-.Ltext0
 13500 1d91 69120000 		.4byte	.LVL268-1-.Ltext0
 13501 1d95 0100     		.2byte	0x1
 13502 1d97 50       		.byte	0x50
 13503 1d98 69120000 		.4byte	.LVL268-1-.Ltext0
 13504 1d9c 6A120000 		.4byte	.LVL268-.Ltext0
 13505 1da0 0400     		.2byte	0x4
 13506 1da2 F3       		.byte	0xf3
 13507 1da3 01       		.uleb128 0x1
 13508 1da4 50       		.byte	0x50
 13509 1da5 9F       		.byte	0x9f
 13510 1da6 00000000 		.4byte	0
 13511 1daa 00000000 		.4byte	0
 13512              	.LLST144:
 13513 1dae 40130000 		.4byte	.LVL283-.Ltext0
 13514 1db2 87130000 		.4byte	.LVL286-1-.Ltext0
 13515 1db6 0100     		.2byte	0x1
 13516 1db8 50       		.byte	0x50
 13517 1db9 87130000 		.4byte	.LVL286-1-.Ltext0
 13518 1dbd 88130000 		.4byte	.LVL286-.Ltext0
 13519 1dc1 0400     		.2byte	0x4
 13520 1dc3 F3       		.byte	0xf3
 13521 1dc4 01       		.uleb128 0x1
 13522 1dc5 50       		.byte	0x50
 13523 1dc6 9F       		.byte	0x9f
 13524 1dc7 88130000 		.4byte	.LVL286-.Ltext0
 13525 1dcb 8A130000 		.4byte	.LFE106-.Ltext0
 13526 1dcf 0100     		.2byte	0x1
 13527 1dd1 50       		.byte	0x50
 13528 1dd2 00000000 		.4byte	0
 13529 1dd6 00000000 		.4byte	0
 13530              	.LLST145:
 13531 1dda 66130000 		.4byte	.LVL284-.Ltext0
 13532 1dde 78130000 		.4byte	.LVL285-.Ltext0
ARM GAS  /tmp/ccdPJtdr.s 			page 326


 13533 1de2 0100     		.2byte	0x1
 13534 1de4 50       		.byte	0x50
 13535 1de5 00000000 		.4byte	0
 13536 1de9 00000000 		.4byte	0
 13537              	.LLST146:
 13538 1ded 8A130000 		.4byte	.LVL287-.Ltext0
 13539 1df1 C5130000 		.4byte	.LVL289-1-.Ltext0
 13540 1df5 0100     		.2byte	0x1
 13541 1df7 50       		.byte	0x50
 13542 1df8 C5130000 		.4byte	.LVL289-1-.Ltext0
 13543 1dfc C6130000 		.4byte	.LVL289-.Ltext0
 13544 1e00 0400     		.2byte	0x4
 13545 1e02 F3       		.byte	0xf3
 13546 1e03 01       		.uleb128 0x1
 13547 1e04 50       		.byte	0x50
 13548 1e05 9F       		.byte	0x9f
 13549 1e06 C6130000 		.4byte	.LVL289-.Ltext0
 13550 1e0a CC130000 		.4byte	.LFE104-.Ltext0
 13551 1e0e 0100     		.2byte	0x1
 13552 1e10 50       		.byte	0x50
 13553 1e11 00000000 		.4byte	0
 13554 1e15 00000000 		.4byte	0
 13555              	.LLST147:
 13556 1e19 B4130000 		.4byte	.LVL288-.Ltext0
 13557 1e1d C5130000 		.4byte	.LVL289-1-.Ltext0
 13558 1e21 0100     		.2byte	0x1
 13559 1e23 50       		.byte	0x50
 13560 1e24 C5130000 		.4byte	.LVL289-1-.Ltext0
 13561 1e28 C6130000 		.4byte	.LVL289-.Ltext0
 13562 1e2c 0400     		.2byte	0x4
 13563 1e2e F3       		.byte	0xf3
 13564 1e2f 01       		.uleb128 0x1
 13565 1e30 50       		.byte	0x50
 13566 1e31 9F       		.byte	0x9f
 13567 1e32 00000000 		.4byte	0
 13568 1e36 00000000 		.4byte	0
 13569              	.LLST171:
 13570 1e3a CE170000 		.4byte	.LVL343-.Ltext0
 13571 1e3e D0170000 		.4byte	.LVL344-.Ltext0
 13572 1e42 0100     		.2byte	0x1
 13573 1e44 50       		.byte	0x50
 13574 1e45 D0170000 		.4byte	.LVL344-.Ltext0
 13575 1e49 D2170000 		.4byte	.LFE124-.Ltext0
 13576 1e4d 0400     		.2byte	0x4
 13577 1e4f F3       		.byte	0xf3
 13578 1e50 01       		.uleb128 0x1
 13579 1e51 50       		.byte	0x50
 13580 1e52 9F       		.byte	0x9f
 13581 1e53 00000000 		.4byte	0
 13582 1e57 00000000 		.4byte	0
 13583              		.section	.debug_aranges,"",%progbits
 13584 0000 1C000000 		.4byte	0x1c
 13585 0004 0200     		.2byte	0x2
 13586 0006 00000000 		.4byte	.Ldebug_info0
 13587 000a 04       		.byte	0x4
 13588 000b 00       		.byte	0
 13589 000c 0000     		.2byte	0
ARM GAS  /tmp/ccdPJtdr.s 			page 327


 13590 000e 0000     		.2byte	0
 13591 0010 00000000 		.4byte	.Ltext0
 13592 0014 D2170000 		.4byte	.Letext0-.Ltext0
 13593 0018 00000000 		.4byte	0
 13594 001c 00000000 		.4byte	0
 13595              		.section	.debug_ranges,"",%progbits
 13596              	.Ldebug_ranges0:
 13597 0000 B2030000 		.4byte	.LBB30-.Ltext0
 13598 0004 B0040000 		.4byte	.LBE30-.Ltext0
 13599 0008 B2040000 		.4byte	.LBB35-.Ltext0
 13600 000c EE040000 		.4byte	.LBE35-.Ltext0
 13601 0010 F6040000 		.4byte	.LBB36-.Ltext0
 13602 0014 1A060000 		.4byte	.LBE36-.Ltext0
 13603 0018 00000000 		.4byte	0
 13604 001c 00000000 		.4byte	0
 13605 0020 D80D0000 		.4byte	.LBB45-.Ltext0
 13606 0024 DC0D0000 		.4byte	.LBE45-.Ltext0
 13607 0028 E00D0000 		.4byte	.LBB46-.Ltext0
 13608 002c EA0D0000 		.4byte	.LBE46-.Ltext0
 13609 0030 00000000 		.4byte	0
 13610 0034 00000000 		.4byte	0
 13611              		.section	.debug_line,"",%progbits
 13612              	.Ldebug_line0:
 13613 0000 15090000 		.section	.debug_str,"MS",%progbits,1
 13613      02004C01 
 13613      00000201 
 13613      FB0E0D00 
 13613      01010101 
 13614              	.LASF112:
 13615 0000 636F756E 		.ascii	"count\000"
 13615      7400
 13616              	.LASF60:
 13617 0006 53746174 		.ascii	"State\000"
 13617      6500
 13618              	.LASF105:
 13619 000c 48414C5F 		.ascii	"HAL_TickFreqTypeDef\000"
 13619      5469636B 
 13619      46726571 
 13619      54797065 
 13619      44656600 
 13620              	.LASF171:
 13621 0020 746D705F 		.ascii	"tmp_state\000"
 13621      73746174 
 13621      6500
 13622              	.LASF104:
 13623 002a 48414C5F 		.ascii	"HAL_TICK_FREQ_DEFAULT\000"
 13623      5449434B 
 13623      5F465245 
 13623      515F4445 
 13623      4641554C 
 13624              	.LASF29:
 13625 0040 52584352 		.ascii	"RXCRCR\000"
 13625      435200
 13626              	.LASF78:
 13627 0047 5350495F 		.ascii	"SPI_InitTypeDef\000"
 13627      496E6974 
 13627      54797065 
ARM GAS  /tmp/ccdPJtdr.s 			page 328


 13627      44656600 
 13628              	.LASF34:
 13629 0057 466C6167 		.ascii	"FlagStatus\000"
 13629      53746174 
 13629      757300
 13630              	.LASF51:
 13631 0062 444D415F 		.ascii	"DMA_InitTypeDef\000"
 13631      496E6974 
 13631      54797065 
 13631      44656600 
 13632              	.LASF83:
 13633 0072 48414C5F 		.ascii	"HAL_SPI_STATE_BUSY_RX\000"
 13633      5350495F 
 13633      53544154 
 13633      455F4255 
 13633      53595F52 
 13634              	.LASF128:
 13635 0088 5350495F 		.ascii	"SPI_2linesTxISR_16BIT\000"
 13635      326C696E 
 13635      65735478 
 13635      4953525F 
 13635      31364249 
 13636              	.LASF185:
 13637 009e 48414C5F 		.ascii	"HAL_SPI_MspInit\000"
 13637      5350495F 
 13637      4D737049 
 13637      6E697400 
 13638              	.LASF3:
 13639 00ae 5F5F7569 		.ascii	"__uint8_t\000"
 13639      6E74385F 
 13639      7400
 13640              	.LASF141:
 13641 00b8 5350495F 		.ascii	"SPI_DMAHalfTransmitCplt\000"
 13641      444D4148 
 13641      616C6654 
 13641      72616E73 
 13641      6D697443 
 13642              	.LASF21:
 13643 00d0 41504250 		.ascii	"APBPrescTable\000"
 13643      72657363 
 13643      5461626C 
 13643      6500
 13644              	.LASF77:
 13645 00de 43524350 		.ascii	"CRCPolynomial\000"
 13645      6F6C796E 
 13645      6F6D6961 
 13645      6C00
 13646              	.LASF96:
 13647 00ec 52784953 		.ascii	"RxISR\000"
 13647      5200
 13648              	.LASF11:
 13649 00f2 6C6F6E67 		.ascii	"long long unsigned int\000"
 13649      206C6F6E 
 13649      6720756E 
 13649      7369676E 
 13649      65642069 
 13650              	.LASF28:
ARM GAS  /tmp/ccdPJtdr.s 			page 329


 13651 0109 43524350 		.ascii	"CRCPR\000"
 13651      5200
 13652              	.LASF163:
 13653 010f 72657365 		.ascii	"resetcount\000"
 13653      74636F75 
 13653      6E7400
 13654              	.LASF152:
 13655 011a 48414C5F 		.ascii	"HAL_SPI_RxCpltCallback\000"
 13655      5350495F 
 13655      52784370 
 13655      6C744361 
 13655      6C6C6261 
 13656              	.LASF174:
 13657 0131 48414C5F 		.ascii	"HAL_SPI_Transmit_DMA\000"
 13657      5350495F 
 13657      5472616E 
 13657      736D6974 
 13657      5F444D41 
 13658              	.LASF18:
 13659 0146 49544D5F 		.ascii	"ITM_RxBuffer\000"
 13659      52784275 
 13659      66666572 
 13659      00
 13660              	.LASF140:
 13661 0153 5350495F 		.ascii	"SPI_DMAHalfReceiveCplt\000"
 13661      444D4148 
 13661      616C6652 
 13661      65636569 
 13661      76654370 
 13662              	.LASF173:
 13663 016a 70446174 		.ascii	"pData\000"
 13663      6100
 13664              	.LASF183:
 13665 0170 48414C5F 		.ascii	"HAL_SPI_Transmit\000"
 13665      5350495F 
 13665      5472616E 
 13665      736D6974 
 13665      00
 13666              	.LASF139:
 13667 0181 5350495F 		.ascii	"SPI_DMAHalfTransmitReceiveCplt\000"
 13667      444D4148 
 13667      616C6654 
 13667      72616E73 
 13667      6D697452 
 13668              	.LASF130:
 13669 01a0 5350495F 		.ascii	"SPI_2linesRxISR_16BIT\000"
 13669      326C696E 
 13669      65735278 
 13669      4953525F 
 13669      31364249 
 13670              	.LASF92:
 13671 01b6 54785866 		.ascii	"TxXferCount\000"
 13671      6572436F 
 13671      756E7400 
 13672              	.LASF10:
 13673 01c2 6C6F6E67 		.ascii	"long long int\000"
 13673      206C6F6E 
ARM GAS  /tmp/ccdPJtdr.s 			page 330


 13673      6720696E 
 13673      7400
 13674              	.LASF0:
 13675 01d0 7369676E 		.ascii	"signed char\000"
 13675      65642063 
 13675      68617200 
 13676              	.LASF149:
 13677 01dc 48414C5F 		.ascii	"HAL_SPI_RxHalfCpltCallback\000"
 13677      5350495F 
 13677      52784861 
 13677      6C664370 
 13677      6C744361 
 13678              	.LASF63:
 13679 01f7 58666572 		.ascii	"XferHalfCpltCallback\000"
 13679      48616C66 
 13679      43706C74 
 13679      43616C6C 
 13679      6261636B 
 13680              	.LASF197:
 13681 020c 48414C5F 		.ascii	"HAL_SPI_IRQHandler\000"
 13681      5350495F 
 13681      49525148 
 13681      616E646C 
 13681      657200
 13682              	.LASF154:
 13683 021f 6974736F 		.ascii	"itsource\000"
 13683      75726365 
 13683      00
 13684              	.LASF191:
 13685 0228 48414C5F 		.ascii	"HAL_DMA_Start_IT\000"
 13685      444D415F 
 13685      53746172 
 13685      745F4954 
 13685      00
 13686              	.LASF195:
 13687 0239 5350495F 		.ascii	"SPI_EndRxTxTransaction\000"
 13687      456E6452 
 13687      78547854 
 13687      72616E73 
 13687      61637469 
 13688              	.LASF138:
 13689 0250 5350495F 		.ascii	"SPI_DMAError\000"
 13689      444D4145 
 13689      72726F72 
 13689      00
 13690              	.LASF110:
 13691 025d 68737069 		.ascii	"hspi\000"
 13691      00
 13692              	.LASF43:
 13693 0262 48414C5F 		.ascii	"HAL_LockTypeDef\000"
 13693      4C6F636B 
 13693      54797065 
 13693      44656600 
 13694              	.LASF133:
 13695 0272 5350495F 		.ascii	"SPI_2linesRxISR_8BIT\000"
 13695      326C696E 
 13695      65735278 
ARM GAS  /tmp/ccdPJtdr.s 			page 331


 13695      4953525F 
 13695      38424954 
 13696              	.LASF100:
 13697 0287 5350495F 		.ascii	"SPI_HandleTypeDef\000"
 13697      48616E64 
 13697      6C655479 
 13697      70654465 
 13697      6600
 13698              	.LASF164:
 13699 0299 48414C5F 		.ascii	"HAL_SPI_Abort\000"
 13699      5350495F 
 13699      41626F72 
 13699      7400
 13700              	.LASF7:
 13701 02a7 6C6F6E67 		.ascii	"long int\000"
 13701      20696E74 
 13701      00
 13702              	.LASF90:
 13703 02b0 70547842 		.ascii	"pTxBuffPtr\000"
 13703      75666650 
 13703      747200
 13704              	.LASF82:
 13705 02bb 48414C5F 		.ascii	"HAL_SPI_STATE_BUSY_TX\000"
 13705      5350495F 
 13705      53544154 
 13705      455F4255 
 13705      53595F54 
 13706              	.LASF45:
 13707 02d1 50657269 		.ascii	"PeriphInc\000"
 13707      7068496E 
 13707      6300
 13708              	.LASF121:
 13709 02db 466C6167 		.ascii	"Flag\000"
 13709      00
 13710              	.LASF81:
 13711 02e0 48414C5F 		.ascii	"HAL_SPI_STATE_BUSY\000"
 13711      5350495F 
 13711      53544154 
 13711      455F4255 
 13711      535900
 13712              	.LASF14:
 13713 02f3 75696E74 		.ascii	"uint16_t\000"
 13713      31365F74 
 13713      00
 13714              	.LASF119:
 13715 02fc 5350495F 		.ascii	"SPI_EndRxTransaction\000"
 13715      456E6452 
 13715      78547261 
 13715      6E736163 
 13715      74696F6E 
 13716              	.LASF101:
 13717 0311 48414C5F 		.ascii	"HAL_TICK_FREQ_10HZ\000"
 13717      5449434B 
 13717      5F465245 
 13717      515F3130 
 13717      485A00
 13718              	.LASF123:
ARM GAS  /tmp/ccdPJtdr.s 			page 332


 13719 0324 5350495F 		.ascii	"SPI_TxISR_8BIT\000"
 13719      54784953 
 13719      525F3842 
 13719      495400
 13720              	.LASF68:
 13721 0333 4368616E 		.ascii	"ChannelIndex\000"
 13721      6E656C49 
 13721      6E646578 
 13721      00
 13722              	.LASF134:
 13723 0340 5350495F 		.ascii	"SPI_DMARxAbortCallback\000"
 13723      444D4152 
 13723      7841626F 
 13723      72744361 
 13723      6C6C6261 
 13724              	.LASF103:
 13725 0357 48414C5F 		.ascii	"HAL_TICK_FREQ_1KHZ\000"
 13725      5449434B 
 13725      5F465245 
 13725      515F314B 
 13725      485A00
 13726              	.LASF49:
 13727 036a 4D6F6465 		.ascii	"Mode\000"
 13727      00
 13728              	.LASF61:
 13729 036f 50617265 		.ascii	"Parent\000"
 13729      6E7400
 13730              	.LASF181:
 13731 0376 7478616C 		.ascii	"txallowed\000"
 13731      6C6F7765 
 13731      6400
 13732              	.LASF30:
 13733 0380 54584352 		.ascii	"TXCRCR\000"
 13733      435200
 13734              	.LASF59:
 13735 0387 4C6F636B 		.ascii	"Lock\000"
 13735      00
 13736              	.LASF8:
 13737 038c 5F5F7569 		.ascii	"__uint32_t\000"
 13737      6E743332 
 13737      5F7400
 13738              	.LASF117:
 13739 0397 54696D65 		.ascii	"Timeout\000"
 13739      6F757400 
 13740              	.LASF44:
 13741 039f 44697265 		.ascii	"Direction\000"
 13741      6374696F 
 13741      6E00
 13742              	.LASF168:
 13743 03a9 70527844 		.ascii	"pRxData\000"
 13743      61746100 
 13744              	.LASF143:
 13745 03b1 5350495F 		.ascii	"SPI_DMAReceiveCplt\000"
 13745      444D4152 
 13745      65636569 
 13745      76654370 
 13745      6C7400
ARM GAS  /tmp/ccdPJtdr.s 			page 333


 13746              	.LASF99:
 13747 03c4 68646D61 		.ascii	"hdmarx\000"
 13747      727800
 13748              	.LASF131:
 13749 03cb 5350495F 		.ascii	"SPI_2linesTxISR_8BIT\000"
 13749      326C696E 
 13749      65735478 
 13749      4953525F 
 13749      38424954 
 13750              	.LASF161:
 13751 03e0 48414C5F 		.ascii	"HAL_SPI_Abort_IT\000"
 13751      5350495F 
 13751      41626F72 
 13751      745F4954 
 13751      00
 13752              	.LASF39:
 13753 03f1 48414C5F 		.ascii	"HAL_TIMEOUT\000"
 13753      54494D45 
 13753      4F555400 
 13754              	.LASF27:
 13755 03fd 444D415F 		.ascii	"DMA_TypeDef\000"
 13755      54797065 
 13755      44656600 
 13756              	.LASF156:
 13757 0409 746D7072 		.ascii	"tmpreg_modf\000"
 13757      65675F6D 
 13757      6F646600 
 13758              	.LASF52:
 13759 0415 48414C5F 		.ascii	"HAL_DMA_STATE_RESET\000"
 13759      444D415F 
 13759      53544154 
 13759      455F5245 
 13759      53455400 
 13760              	.LASF19:
 13761 0429 53797374 		.ascii	"SystemCoreClock\000"
 13761      656D436F 
 13761      7265436C 
 13761      6F636B00 
 13762              	.LASF107:
 13763 0439 75775469 		.ascii	"uwTickFreq\000"
 13763      636B4672 
 13763      657100
 13764              	.LASF23:
 13765 0444 43504152 		.ascii	"CPAR\000"
 13765      00
 13766              	.LASF9:
 13767 0449 6C6F6E67 		.ascii	"long unsigned int\000"
 13767      20756E73 
 13767      69676E65 
 13767      6420696E 
 13767      7400
 13768              	.LASF189:
 13769 045b 48414C5F 		.ascii	"HAL_DMA_Abort_IT\000"
 13769      444D415F 
 13769      41626F72 
 13769      745F4954 
 13769      00
ARM GAS  /tmp/ccdPJtdr.s 			page 334


 13770              	.LASF148:
 13771 046c 48414C5F 		.ascii	"HAL_SPI_TxRxHalfCpltCallback\000"
 13771      5350495F 
 13771      54785278 
 13771      48616C66 
 13771      43706C74 
 13772              	.LASF170:
 13773 0489 746D705F 		.ascii	"tmp_mode\000"
 13773      6D6F6465 
 13773      00
 13774              	.LASF151:
 13775 0492 48414C5F 		.ascii	"HAL_SPI_TxRxCpltCallback\000"
 13775      5350495F 
 13775      54785278 
 13775      43706C74 
 13775      43616C6C 
 13776              	.LASF36:
 13777 04ab 48414C5F 		.ascii	"HAL_OK\000"
 13777      4F4B00
 13778              	.LASF89:
 13779 04b2 5F5F5350 		.ascii	"__SPI_HandleTypeDef\000"
 13779      495F4861 
 13779      6E646C65 
 13779      54797065 
 13779      44656600 
 13780              	.LASF115:
 13781 04c6 5350495F 		.ascii	"SPI_CloseRx_ISR\000"
 13781      436C6F73 
 13781      6552785F 
 13781      49535200 
 13782              	.LASF94:
 13783 04d6 52785866 		.ascii	"RxXferSize\000"
 13783      65725369 
 13783      7A6500
 13784              	.LASF5:
 13785 04e1 73686F72 		.ascii	"short unsigned int\000"
 13785      7420756E 
 13785      7369676E 
 13785      65642069 
 13785      6E7400
 13786              	.LASF146:
 13787 04f4 48414C5F 		.ascii	"HAL_SPI_GetState\000"
 13787      5350495F 
 13787      47657453 
 13787      74617465 
 13787      00
 13788              	.LASF91:
 13789 0505 54785866 		.ascii	"TxXferSize\000"
 13789      65725369 
 13789      7A6500
 13790              	.LASF67:
 13791 0510 446D6142 		.ascii	"DmaBaseAddress\000"
 13791      61736541 
 13791      64647265 
 13791      737300
 13792              	.LASF196:
 13793 051f 48414C5F 		.ascii	"HAL_SPI_AbortCpltCallback\000"
ARM GAS  /tmp/ccdPJtdr.s 			page 335


 13793      5350495F 
 13793      41626F72 
 13793      7443706C 
 13793      7443616C 
 13794              	.LASF66:
 13795 0539 4572726F 		.ascii	"ErrorCode\000"
 13795      72436F64 
 13795      6500
 13796              	.LASF48:
 13797 0543 4D656D44 		.ascii	"MemDataAlignment\000"
 13797      61746141 
 13797      6C69676E 
 13797      6D656E74 
 13797      00
 13798              	.LASF193:
 13799 0554 7372632F 		.ascii	"src/stm32f1xx_hal_spi.c\000"
 13799      73746D33 
 13799      32663178 
 13799      785F6861 
 13799      6C5F7370 
 13800              	.LASF129:
 13801 056c 5350495F 		.ascii	"SPI_2linesRxISR_16BITCRC\000"
 13801      326C696E 
 13801      65735278 
 13801      4953525F 
 13801      31364249 
 13802              	.LASF40:
 13803 0585 48414C5F 		.ascii	"HAL_StatusTypeDef\000"
 13803      53746174 
 13803      75735479 
 13803      70654465 
 13803      6600
 13804              	.LASF190:
 13805 0597 48414C5F 		.ascii	"HAL_DMA_Abort\000"
 13805      444D415F 
 13805      41626F72 
 13805      7400
 13806              	.LASF73:
 13807 05a5 42617564 		.ascii	"BaudRatePrescaler\000"
 13807      52617465 
 13807      50726573 
 13807      63616C65 
 13807      7200
 13808              	.LASF20:
 13809 05b7 41484250 		.ascii	"AHBPrescTable\000"
 13809      72657363 
 13809      5461626C 
 13809      6500
 13810              	.LASF172:
 13811 05c5 48414C5F 		.ascii	"HAL_SPI_Receive_DMA\000"
 13811      5350495F 
 13811      52656365 
 13811      6976655F 
 13811      444D4100 
 13812              	.LASF53:
 13813 05d9 48414C5F 		.ascii	"HAL_DMA_STATE_READY\000"
 13813      444D415F 
ARM GAS  /tmp/ccdPJtdr.s 			page 336


 13813      53544154 
 13813      455F5245 
 13813      41445900 
 13814              	.LASF71:
 13815 05ed 434C4B50 		.ascii	"CLKPolarity\000"
 13815      6F6C6172 
 13815      69747900 
 13816              	.LASF180:
 13817 05f9 696E6974 		.ascii	"initial_TxXferCount\000"
 13817      69616C5F 
 13817      54785866 
 13817      6572436F 
 13817      756E7400 
 13818              	.LASF135:
 13819 060d 68646D61 		.ascii	"hdma\000"
 13819      00
 13820              	.LASF166:
 13821 0612 48414C5F 		.ascii	"HAL_SPI_TransmitReceive_DMA\000"
 13821      5350495F 
 13821      5472616E 
 13821      736D6974 
 13821      52656365 
 13822              	.LASF84:
 13823 062e 48414C5F 		.ascii	"HAL_SPI_STATE_BUSY_TX_RX\000"
 13823      5350495F 
 13823      53544154 
 13823      455F4255 
 13823      53595F54 
 13824              	.LASF147:
 13825 0647 48414C5F 		.ascii	"HAL_SPI_ErrorCallback\000"
 13825      5350495F 
 13825      4572726F 
 13825      7243616C 
 13825      6C626163 
 13826              	.LASF17:
 13827 065d 73697A65 		.ascii	"sizetype\000"
 13827      74797065 
 13827      00
 13828              	.LASF188:
 13829 0666 48414C5F 		.ascii	"HAL_GetTick\000"
 13829      47657454 
 13829      69636B00 
 13830              	.LASF120:
 13831 0672 5350495F 		.ascii	"SPI_WaitFlagStateUntilTimeout\000"
 13831      57616974 
 13831      466C6167 
 13831      53746174 
 13831      65556E74 
 13832              	.LASF35:
 13833 0690 6C6F6E67 		.ascii	"long double\000"
 13833      20646F75 
 13833      626C6500 
 13834              	.LASF31:
 13835 069c 49325343 		.ascii	"I2SCFGR\000"
 13835      46475200 
 13836              	.LASF42:
 13837 06a4 48414C5F 		.ascii	"HAL_LOCKED\000"
ARM GAS  /tmp/ccdPJtdr.s 			page 337


 13837      4C4F434B 
 13837      454400
 13838              	.LASF167:
 13839 06af 70547844 		.ascii	"pTxData\000"
 13839      61746100 
 13840              	.LASF126:
 13841 06b7 5350495F 		.ascii	"SPI_RxISR_8BIT\000"
 13841      52784953 
 13841      525F3842 
 13841      495400
 13842              	.LASF69:
 13843 06c6 444D415F 		.ascii	"DMA_HandleTypeDef\000"
 13843      48616E64 
 13843      6C655479 
 13843      70654465 
 13843      6600
 13844              	.LASF64:
 13845 06d8 58666572 		.ascii	"XferErrorCallback\000"
 13845      4572726F 
 13845      7243616C 
 13845      6C626163 
 13845      6B00
 13846              	.LASF98:
 13847 06ea 68646D61 		.ascii	"hdmatx\000"
 13847      747800
 13848              	.LASF72:
 13849 06f1 434C4B50 		.ascii	"CLKPhase\000"
 13849      68617365 
 13849      00
 13850              	.LASF74:
 13851 06fa 46697273 		.ascii	"FirstBit\000"
 13851      74426974 
 13851      00
 13852              	.LASF122:
 13853 0703 5350495F 		.ascii	"SPI_TxISR_16BIT\000"
 13853      54784953 
 13853      525F3136 
 13853      42495400 
 13854              	.LASF162:
 13855 0713 61626F72 		.ascii	"abortcplt\000"
 13855      7463706C 
 13855      7400
 13856              	.LASF58:
 13857 071d 496E6974 		.ascii	"Init\000"
 13857      00
 13858              	.LASF175:
 13859 0722 6572726F 		.ascii	"error\000"
 13859      7200
 13860              	.LASF169:
 13861 0728 53697A65 		.ascii	"Size\000"
 13861      00
 13862              	.LASF57:
 13863 072d 496E7374 		.ascii	"Instance\000"
 13863      616E6365 
 13863      00
 13864              	.LASF85:
 13865 0736 48414C5F 		.ascii	"HAL_SPI_STATE_ERROR\000"
ARM GAS  /tmp/ccdPJtdr.s 			page 338


 13865      5350495F 
 13865      53544154 
 13865      455F4552 
 13865      524F5200 
 13866              	.LASF118:
 13867 074a 5469636B 		.ascii	"Tickstart\000"
 13867      73746172 
 13867      7400
 13868              	.LASF33:
 13869 0754 52455345 		.ascii	"RESET\000"
 13869      5400
 13870              	.LASF184:
 13871 075a 48414C5F 		.ascii	"HAL_SPI_MspDeInit\000"
 13871      5350495F 
 13871      4D737044 
 13871      65496E69 
 13871      7400
 13872              	.LASF142:
 13873 076c 5350495F 		.ascii	"SPI_DMATransmitReceiveCplt\000"
 13873      444D4154 
 13873      72616E73 
 13873      6D697452 
 13873      65636569 
 13874              	.LASF194:
 13875 0787 2F686F6D 		.ascii	"/home/berndoj/git/stm32tctst/lib/stm32f1hal\000"
 13875      652F6265 
 13875      726E646F 
 13875      6A2F6769 
 13875      742F7374 
 13876              	.LASF15:
 13877 07b3 696E7433 		.ascii	"int32_t\000"
 13877      325F7400 
 13878              	.LASF1:
 13879 07bb 756E7369 		.ascii	"unsigned char\000"
 13879      676E6564 
 13879      20636861 
 13879      7200
 13880              	.LASF144:
 13881 07c9 5350495F 		.ascii	"SPI_DMATransmitCplt\000"
 13881      444D4154 
 13881      72616E73 
 13881      6D697443 
 13881      706C7400 
 13882              	.LASF56:
 13883 07dd 48414C5F 		.ascii	"HAL_DMA_StateTypeDef\000"
 13883      444D415F 
 13883      53746174 
 13883      65547970 
 13883      65446566 
 13884              	.LASF2:
 13885 07f2 73686F72 		.ascii	"short int\000"
 13885      7420696E 
 13885      7400
 13886              	.LASF54:
 13887 07fc 48414C5F 		.ascii	"HAL_DMA_STATE_BUSY\000"
 13887      444D415F 
 13887      53544154 
ARM GAS  /tmp/ccdPJtdr.s 			page 339


 13887      455F4255 
 13887      535900
 13888              	.LASF158:
 13889 080f 6572726F 		.ascii	"errorcode\000"
 13889      72636F64 
 13889      6500
 13890              	.LASF113:
 13891 0819 7469636B 		.ascii	"tickstart\000"
 13891      73746172 
 13891      7400
 13892              	.LASF46:
 13893 0823 4D656D49 		.ascii	"MemInc\000"
 13893      6E6300
 13894              	.LASF124:
 13895 082a 5350495F 		.ascii	"SPI_RxISR_16BIT\000"
 13895      52784953 
 13895      525F3136 
 13895      42495400 
 13896              	.LASF86:
 13897 083a 48414C5F 		.ascii	"HAL_SPI_STATE_ABORT\000"
 13897      5350495F 
 13897      53544154 
 13897      455F4142 
 13897      4F525400 
 13898              	.LASF192:
 13899 084e 474E5520 		.ascii	"GNU C11 6.3.1 20170620 -mcpu=cortex-m3 -mthumb -g -"
 13899      43313120 
 13899      362E332E 
 13899      31203230 
 13899      31373036 
 13900 0881 67647761 		.ascii	"gdwarf-2 -Os -fomit-frame-pointer\000"
 13900      72662D32 
 13900      202D4F73 
 13900      202D666F 
 13900      6D69742D 
 13901              	.LASF79:
 13902 08a3 48414C5F 		.ascii	"HAL_SPI_STATE_RESET\000"
 13902      5350495F 
 13902      53544154 
 13902      455F5245 
 13902      53455400 
 13903              	.LASF88:
 13904 08b7 5F5F444D 		.ascii	"__DMA_HandleTypeDef\000"
 13904      415F4861 
 13904      6E646C65 
 13904      54797065 
 13904      44656600 
 13905              	.LASF16:
 13906 08cb 75696E74 		.ascii	"uint32_t\000"
 13906      33325F74 
 13906      00
 13907              	.LASF116:
 13908 08d4 5350495F 		.ascii	"SPI_CloseRxTx_ISR\000"
 13908      436C6F73 
 13908      65527854 
 13908      785F4953 
 13908      5200
ARM GAS  /tmp/ccdPJtdr.s 			page 340


 13909              	.LASF160:
 13910 08e6 48414C5F 		.ascii	"HAL_SPI_DMAPause\000"
 13910      5350495F 
 13910      444D4150 
 13910      61757365 
 13910      00
 13911              	.LASF26:
 13912 08f7 49464352 		.ascii	"IFCR\000"
 13912      00
 13913              	.LASF32:
 13914 08fc 5350495F 		.ascii	"SPI_TypeDef\000"
 13914      54797065 
 13914      44656600 
 13915              	.LASF106:
 13916 0908 75775469 		.ascii	"uwTickPrio\000"
 13916      636B5072 
 13916      696F00
 13917              	.LASF150:
 13918 0913 48414C5F 		.ascii	"HAL_SPI_TxHalfCpltCallback\000"
 13918      5350495F 
 13918      54784861 
 13918      6C664370 
 13918      6C744361 
 13919              	.LASF12:
 13920 092e 756E7369 		.ascii	"unsigned int\000"
 13920      676E6564 
 13920      20696E74 
 13920      00
 13921              	.LASF109:
 13922 093b 5350495F 		.ascii	"SPI_AbortRx_ISR\000"
 13922      41626F72 
 13922      7452785F 
 13922      49535200 
 13923              	.LASF4:
 13924 094b 5F5F7569 		.ascii	"__uint16_t\000"
 13924      6E743136 
 13924      5F7400
 13925              	.LASF70:
 13926 0956 44617461 		.ascii	"DataSize\000"
 13926      53697A65 
 13926      00
 13927              	.LASF108:
 13928 095f 5350495F 		.ascii	"SPI_AbortTx_ISR\000"
 13928      41626F72 
 13928      7454785F 
 13928      49535200 
 13929              	.LASF102:
 13930 096f 48414C5F 		.ascii	"HAL_TICK_FREQ_100HZ\000"
 13930      5449434B 
 13930      5F465245 
 13930      515F3130 
 13930      30485A00 
 13931              	.LASF6:
 13932 0983 5F5F696E 		.ascii	"__int32_t\000"
 13932      7433325F 
 13932      7400
 13933              	.LASF153:
ARM GAS  /tmp/ccdPJtdr.s 			page 341


 13934 098d 48414C5F 		.ascii	"HAL_SPI_TxCpltCallback\000"
 13934      5350495F 
 13934      54784370 
 13934      6C744361 
 13934      6C6C6261 
 13935              	.LASF176:
 13936 09a4 48414C5F 		.ascii	"HAL_SPI_TransmitReceive_IT\000"
 13936      5350495F 
 13936      5472616E 
 13936      736D6974 
 13936      52656365 
 13937              	.LASF145:
 13938 09bf 48414C5F 		.ascii	"HAL_SPI_GetError\000"
 13938      5350495F 
 13938      47657445 
 13938      72726F72 
 13938      00
 13939              	.LASF25:
 13940 09d0 444D415F 		.ascii	"DMA_Channel_TypeDef\000"
 13940      4368616E 
 13940      6E656C5F 
 13940      54797065 
 13940      44656600 
 13941              	.LASF87:
 13942 09e4 48414C5F 		.ascii	"HAL_SPI_StateTypeDef\000"
 13942      5350495F 
 13942      53746174 
 13942      65547970 
 13942      65446566 
 13943              	.LASF187:
 13944 09f9 48414C5F 		.ascii	"HAL_SPI_Init\000"
 13944      5350495F 
 13944      496E6974 
 13944      00
 13945              	.LASF177:
 13946 0a06 48414C5F 		.ascii	"HAL_SPI_Receive_IT\000"
 13946      5350495F 
 13946      52656365 
 13946      6976655F 
 13946      495400
 13947              	.LASF127:
 13948 0a19 5350495F 		.ascii	"SPI_RxISR_8BITCRC\000"
 13948      52784953 
 13948      525F3842 
 13948      49544352 
 13948      4300
 13949              	.LASF37:
 13950 0a2b 48414C5F 		.ascii	"HAL_ERROR\000"
 13950      4552524F 
 13950      5200
 13951              	.LASF125:
 13952 0a35 5350495F 		.ascii	"SPI_RxISR_16BITCRC\000"
 13952      52784953 
 13952      525F3136 
 13952      42495443 
 13952      524300
 13953              	.LASF47:
ARM GAS  /tmp/ccdPJtdr.s 			page 342


 13954 0a48 50657269 		.ascii	"PeriphDataAlignment\000"
 13954      70684461 
 13954      7461416C 
 13954      69676E6D 
 13954      656E7400 
 13955              	.LASF80:
 13956 0a5c 48414C5F 		.ascii	"HAL_SPI_STATE_READY\000"
 13956      5350495F 
 13956      53544154 
 13956      455F5245 
 13956      41445900 
 13957              	.LASF136:
 13958 0a70 5350495F 		.ascii	"SPI_DMATxAbortCallback\000"
 13958      444D4154 
 13958      7841626F 
 13958      72744361 
 13958      6C6C6261 
 13959              	.LASF165:
 13960 0a87 5350495F 		.ascii	"SPI_ISCRCErrorValid\000"
 13960      49534352 
 13960      43457272 
 13960      6F725661 
 13960      6C696400 
 13961              	.LASF75:
 13962 0a9b 54494D6F 		.ascii	"TIMode\000"
 13962      646500
 13963              	.LASF22:
 13964 0aa2 434E4454 		.ascii	"CNDTR\000"
 13964      5200
 13965              	.LASF24:
 13966 0aa8 434D4152 		.ascii	"CMAR\000"
 13966      00
 13967              	.LASF132:
 13968 0aad 5350495F 		.ascii	"SPI_2linesRxISR_8BITCRC\000"
 13968      326C696E 
 13968      65735278 
 13968      4953525F 
 13968      38424954 
 13969              	.LASF55:
 13970 0ac5 48414C5F 		.ascii	"HAL_DMA_STATE_TIMEOUT\000"
 13970      444D415F 
 13970      53544154 
 13970      455F5449 
 13970      4D454F55 
 13971              	.LASF50:
 13972 0adb 5072696F 		.ascii	"Priority\000"
 13972      72697479 
 13972      00
 13973              	.LASF93:
 13974 0ae4 70527842 		.ascii	"pRxBuffPtr\000"
 13974      75666650 
 13974      747200
 13975              	.LASF13:
 13976 0aef 75696E74 		.ascii	"uint8_t\000"
 13976      385F7400 
 13977              	.LASF76:
 13978 0af7 43524343 		.ascii	"CRCCalculation\000"
ARM GAS  /tmp/ccdPJtdr.s 			page 343


 13978      616C6375 
 13978      6C617469 
 13978      6F6E00
 13979              	.LASF186:
 13980 0b06 48414C5F 		.ascii	"HAL_SPI_DeInit\000"
 13980      5350495F 
 13980      4465496E 
 13980      697400
 13981              	.LASF157:
 13982 0b15 48414C5F 		.ascii	"HAL_SPI_DMAStop\000"
 13982      5350495F 
 13982      444D4153 
 13982      746F7000 
 13983              	.LASF111:
 13984 0b25 5350495F 		.ascii	"SPI_CloseTx_ISR\000"
 13984      436C6F73 
 13984      6554785F 
 13984      49535200 
 13985              	.LASF95:
 13986 0b35 52785866 		.ascii	"RxXferCount\000"
 13986      6572436F 
 13986      756E7400 
 13987              	.LASF97:
 13988 0b41 54784953 		.ascii	"TxISR\000"
 13988      5200
 13989              	.LASF182:
 13990 0b47 48414C5F 		.ascii	"HAL_SPI_Receive\000"
 13990      5350495F 
 13990      52656365 
 13990      69766500 
 13991              	.LASF41:
 13992 0b57 48414C5F 		.ascii	"HAL_UNLOCKED\000"
 13992      554E4C4F 
 13992      434B4544 
 13992      00
 13993              	.LASF178:
 13994 0b64 48414C5F 		.ascii	"HAL_SPI_Transmit_IT\000"
 13994      5350495F 
 13994      5472616E 
 13994      736D6974 
 13994      5F495400 
 13995              	.LASF38:
 13996 0b78 48414C5F 		.ascii	"HAL_BUSY\000"
 13996      42555359 
 13996      00
 13997              	.LASF114:
 13998 0b81 746D7072 		.ascii	"tmpreg_ovr\000"
 13998      65675F6F 
 13998      767200
 13999              	.LASF65:
 14000 0b8c 58666572 		.ascii	"XferAbortCallback\000"
 14000      41626F72 
 14000      7443616C 
 14000      6C626163 
 14000      6B00
 14001              	.LASF62:
 14002 0b9e 58666572 		.ascii	"XferCpltCallback\000"
ARM GAS  /tmp/ccdPJtdr.s 			page 344


 14002      43706C74 
 14002      43616C6C 
 14002      6261636B 
 14002      00
 14003              	.LASF155:
 14004 0baf 6974666C 		.ascii	"itflag\000"
 14004      616700
 14005              	.LASF159:
 14006 0bb6 48414C5F 		.ascii	"HAL_SPI_DMAResume\000"
 14006      5350495F 
 14006      444D4152 
 14006      6573756D 
 14006      6500
 14007              	.LASF137:
 14008 0bc8 5350495F 		.ascii	"SPI_DMAAbortOnError\000"
 14008      444D4141 
 14008      626F7274 
 14008      4F6E4572 
 14008      726F7200 
 14009              	.LASF179:
 14010 0bdc 48414C5F 		.ascii	"HAL_SPI_TransmitReceive\000"
 14010      5350495F 
 14010      5472616E 
 14010      736D6974 
 14010      52656365 
 14011              		.ident	"GCC: (15:6.3.1+svn253039-1build1) 6.3.1 20170620"
ARM GAS  /tmp/ccdPJtdr.s 			page 345


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_spi.c
     /tmp/ccdPJtdr.s:69     .text:0000000000000000 $t
     /tmp/ccdPJtdr.s:75     .text:0000000000000000 SPI_AbortRx_ISR
     /tmp/ccdPJtdr.s:142    .text:000000000000004c $d
     /tmp/ccdPJtdr.s:146    .text:0000000000000050 $t
     /tmp/ccdPJtdr.s:152    .text:0000000000000050 SPI_AbortTx_ISR
     /tmp/ccdPJtdr.s:182    .text:000000000000006a SPI_WaitFlagStateUntilTimeout
     /tmp/ccdPJtdr.s:286    .text:00000000000000f0 SPI_EndRxTxTransaction
     /tmp/ccdPJtdr.s:333    .text:0000000000000110 SPI_EndRxTransaction
     /tmp/ccdPJtdr.s:431    .text:0000000000000164 HAL_SPI_MspInit
     /tmp/ccdPJtdr.s:448    .text:0000000000000166 HAL_SPI_Init
     /tmp/ccdPJtdr.s:555    .text:00000000000001f2 HAL_SPI_MspDeInit
     /tmp/ccdPJtdr.s:572    .text:00000000000001f4 HAL_SPI_DeInit
     /tmp/ccdPJtdr.s:627    .text:0000000000000220 HAL_SPI_Transmit
     /tmp/ccdPJtdr.s:920    .text:0000000000000398 HAL_SPI_TransmitReceive
     /tmp/ccdPJtdr.s:1401   .text:000000000000061e HAL_SPI_Receive
     /tmp/ccdPJtdr.s:1742   .text:00000000000007f6 HAL_SPI_Transmit_IT
     /tmp/ccdPJtdr.s:1866   .text:0000000000000890 $d
     /tmp/ccdPJtdr.s:3606   .text:0000000000000f96 SPI_TxISR_16BIT
     /tmp/ccdPJtdr.s:3552   .text:0000000000000f64 SPI_TxISR_8BIT
     /tmp/ccdPJtdr.s:1871   .text:0000000000000898 $t
     /tmp/ccdPJtdr.s:1878   .text:0000000000000898 HAL_SPI_TransmitReceive_IT
     /tmp/ccdPJtdr.s:2035   .text:0000000000000950 $d
     /tmp/ccdPJtdr.s:4755   .text:000000000000142e SPI_2linesRxISR_16BIT
     /tmp/ccdPJtdr.s:4676   .text:00000000000013e2 SPI_2linesTxISR_16BIT
     /tmp/ccdPJtdr.s:4575   .text:000000000000138a SPI_2linesRxISR_8BIT
     /tmp/ccdPJtdr.s:4506   .text:0000000000001340 SPI_2linesTxISR_8BIT
     /tmp/ccdPJtdr.s:2042   .text:0000000000000960 $t
     /tmp/ccdPJtdr.s:2049   .text:0000000000000960 HAL_SPI_Receive_IT
     /tmp/ccdPJtdr.s:2221   .text:0000000000000a1c $d
     /tmp/ccdPJtdr.s:4242   .text:000000000000121a SPI_RxISR_16BIT
     /tmp/ccdPJtdr.s:4138   .text:00000000000011b8 SPI_RxISR_8BIT
     /tmp/ccdPJtdr.s:2226   .text:0000000000000a24 $t
     /tmp/ccdPJtdr.s:2233   .text:0000000000000a24 HAL_SPI_Transmit_DMA
     /tmp/ccdPJtdr.s:2391   .text:0000000000000aec $d
     /tmp/ccdPJtdr.s:3291   .text:0000000000000ebe SPI_DMAHalfTransmitCplt
     /tmp/ccdPJtdr.s:3693   .text:0000000000000fe6 SPI_DMATransmitCplt
     /tmp/ccdPJtdr.s:3652   .text:0000000000000fc4 SPI_DMAError
     /tmp/ccdPJtdr.s:2397   .text:0000000000000af8 $t
     /tmp/ccdPJtdr.s:2404   .text:0000000000000af8 HAL_SPI_TransmitReceive_DMA
     /tmp/ccdPJtdr.s:2625   .text:0000000000000c08 $d
     /tmp/ccdPJtdr.s:3336   .text:0000000000000eca SPI_DMAHalfReceiveCplt
     /tmp/ccdPJtdr.s:3381   .text:0000000000000ed6 SPI_DMAHalfTransmitReceiveCplt
     /tmp/ccdPJtdr.s:4860   .text:0000000000001482 SPI_DMAReceiveCplt
     /tmp/ccdPJtdr.s:4995   .text:000000000000151e SPI_DMATransmitReceiveCplt
     /tmp/ccdPJtdr.s:2633   .text:0000000000000c1c $t
     /tmp/ccdPJtdr.s:2640   .text:0000000000000c1c HAL_SPI_Receive_DMA
     /tmp/ccdPJtdr.s:2829   .text:0000000000000d04 $d
     /tmp/ccdPJtdr.s:2835   .text:0000000000000d10 $t
     /tmp/ccdPJtdr.s:2842   .text:0000000000000d10 HAL_SPI_Abort
     /tmp/ccdPJtdr.s:3055   .text:0000000000000e24 $d
     /tmp/ccdPJtdr.s:3061   .text:0000000000000e30 $t
     /tmp/ccdPJtdr.s:3068   .text:0000000000000e30 HAL_SPI_DMAPause
     /tmp/ccdPJtdr.s:3106   .text:0000000000000e50 HAL_SPI_DMAResume
     /tmp/ccdPJtdr.s:3144   .text:0000000000000e70 HAL_SPI_DMAStop
     /tmp/ccdPJtdr.s:3224   .text:0000000000000eb6 HAL_SPI_TxCpltCallback
ARM GAS  /tmp/ccdPJtdr.s 			page 346


     /tmp/ccdPJtdr.s:3241   .text:0000000000000eb8 HAL_SPI_RxCpltCallback
     /tmp/ccdPJtdr.s:3258   .text:0000000000000eba HAL_SPI_TxRxCpltCallback
     /tmp/ccdPJtdr.s:3275   .text:0000000000000ebc HAL_SPI_TxHalfCpltCallback
     /tmp/ccdPJtdr.s:3320   .text:0000000000000ec8 HAL_SPI_RxHalfCpltCallback
     /tmp/ccdPJtdr.s:3365   .text:0000000000000ed4 HAL_SPI_TxRxHalfCpltCallback
     /tmp/ccdPJtdr.s:3410   .text:0000000000000ee0 HAL_SPI_ErrorCallback
     /tmp/ccdPJtdr.s:3426   .text:0000000000000ee2 SPI_CloseTx_ISR
     /tmp/ccdPJtdr.s:3542   .text:0000000000000f60 $d
     /tmp/ccdPJtdr.s:3546   .text:0000000000000f64 $t
     /tmp/ccdPJtdr.s:3800   .text:0000000000001050 HAL_SPI_IRQHandler
     /tmp/ccdPJtdr.s:3989   .text:0000000000001130 $d
     /tmp/ccdPJtdr.s:3999   .text:0000000000001134 SPI_DMAAbortOnError
     /tmp/ccdPJtdr.s:3993   .text:0000000000001134 $t
     /tmp/ccdPJtdr.s:4033   .text:0000000000001144 SPI_CloseRx_ISR
     /tmp/ccdPJtdr.s:4207   .text:0000000000001210 $d
     /tmp/ccdPJtdr.s:4219   .text:0000000000001214 SPI_RxISR_8BITCRC
     /tmp/ccdPJtdr.s:4213   .text:0000000000001214 $t
     /tmp/ccdPJtdr.s:4308   .text:000000000000126c $d
     /tmp/ccdPJtdr.s:4320   .text:0000000000001270 SPI_RxISR_16BITCRC
     /tmp/ccdPJtdr.s:4314   .text:0000000000001270 $t
     /tmp/ccdPJtdr.s:4347   .text:000000000000127e SPI_CloseRxTx_ISR
     /tmp/ccdPJtdr.s:4496   .text:000000000000133c $d
     /tmp/ccdPJtdr.s:4500   .text:0000000000001340 $t
     /tmp/ccdPJtdr.s:4631   .text:00000000000013c8 $d
     /tmp/ccdPJtdr.s:4643   .text:00000000000013cc SPI_2linesRxISR_8BITCRC
     /tmp/ccdPJtdr.s:4637   .text:00000000000013cc $t
     /tmp/ccdPJtdr.s:4823   .text:0000000000001470 $d
     /tmp/ccdPJtdr.s:4833   .text:0000000000001474 SPI_2linesRxISR_16BITCRC
     /tmp/ccdPJtdr.s:4827   .text:0000000000001474 $t
     /tmp/ccdPJtdr.s:5129   .text:00000000000015be HAL_SPI_AbortCpltCallback
     /tmp/ccdPJtdr.s:5148   .text:00000000000015c0 HAL_SPI_Abort_IT
     /tmp/ccdPJtdr.s:5379   .text:00000000000016d0 $d
     /tmp/ccdPJtdr.s:5489   .text:000000000000174c SPI_DMATxAbortCallback
     /tmp/ccdPJtdr.s:5393   .text:00000000000016e4 SPI_DMARxAbortCallback
     /tmp/ccdPJtdr.s:5387   .text:00000000000016e4 $t
     /tmp/ccdPJtdr.s:5589   .text:00000000000017c0 $d
     /tmp/ccdPJtdr.s:5593   .text:00000000000017c4 $t
     /tmp/ccdPJtdr.s:5600   .text:00000000000017c4 HAL_SPI_GetState
     /tmp/ccdPJtdr.s:5623   .text:00000000000017ca HAL_SPI_GetError
     /tmp/ccdPJtdr.s:5646   .text:00000000000017ce SPI_ISCRCErrorValid
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
SystemCoreClock
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_Abort_IT
