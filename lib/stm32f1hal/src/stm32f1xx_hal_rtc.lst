ARM GAS  /tmp/ccM6Uqrc.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"stm32f1xx_hal_rtc.c"
  12              	@ GNU C11 (15:6.3.1+svn253039-1build1) version 6.3.1 20170620 (arm-none-eabi)
  13              	@	compiled by GNU C version 7.2.0, GMP version 6.1.2, MPFR version 4.0.1-rc1, MPC version 1.1.0, is
  14              	@ warning: MPFR header version 4.0.1-rc1 differs from library version 4.0.1.
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I ./inc -I ./inc/Legacy -I ../cmsisstm32f1xx/inc
  17              	@ -I ../cmsiscore/inc -imultilib thumb/v7-m -D__USES_INITFINI__
  18              	@ -D STM32F103x6 -D RUN_FROM_FLASH=1 -D __c src/stm32f1xx_hal_rtc.c
  19              	@ -mcpu=cortex-m3 -mthumb -auxbase-strip bin/stm32f1xx_hal_rtc.o -g
  20              	@ -gdwarf-2 -Os -Wall -fomit-frame-pointer -fverbose-asm
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffunction-cse -fgcse
  32              	@ -fgcse-lm -fgnu-runtime -fgnu-unique -fguess-branch-probability
  33              	@ -fhoist-adjacent-loads -fident -fif-conversion -fif-conversion2
  34              	@ -findirect-inlining -finline -finline-atomics -finline-functions
  35              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  36              	@ -fipa-cp-alignment -fipa-icf -fipa-icf-functions -fipa-icf-variables
  37              	@ -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra
  38              	@ -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  39              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  40              	@ -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  41              	@ -fmath-errno -fmerge-constants -fmerge-debug-strings
  42              	@ -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  43              	@ -fpartial-inlining -fpeephole -fpeephole2 -fplt -fprefetch-loop-arrays
  44              	@ -freg-struct-return -freorder-blocks -freorder-functions
  45              	@ -frerun-cse-after-loop -fsched-critical-path-heuristic
  46              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  47              	@ -fsched-last-insn-heuristic -fsched-pressure -fsched-rank-heuristic
  48              	@ -fsched-spec -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  49              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  50              	@ -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types
  51              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstrict-aliasing
  52              	@ -fstrict-overflow -fstrict-volatile-bitfields -fsync-libcalls
  53              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  54              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  55              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  56              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  57              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
ARM GAS  /tmp/ccM6Uqrc.s 			page 2


  58              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  59              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  60              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  61              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  62              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  63              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  64              	@ -munaligned-access -mvectorize-with-neon-quad
  65              	
  66              		.text
  67              	.Ltext0:
  68              		.cfi_sections	.debug_frame
  69              		.align	1
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu softvfp
  74              		.type	RTC_ReadTimeCounter, %function
  75              	RTC_ReadTimeCounter:
  76              	.LFB82:
  77              		.file 1 "src/stm32f1xx_hal_rtc.c"
   1:src/stm32f1xx_hal_rtc.c **** /**
   2:src/stm32f1xx_hal_rtc.c ****   ******************************************************************************
   3:src/stm32f1xx_hal_rtc.c ****   * @file    stm32f1xx_hal_rtc.c
   4:src/stm32f1xx_hal_rtc.c ****   * @author  MCD Application Team
   5:src/stm32f1xx_hal_rtc.c ****   * @brief   RTC HAL module driver.
   6:src/stm32f1xx_hal_rtc.c ****   *          This file provides firmware functions to manage the following
   7:src/stm32f1xx_hal_rtc.c ****   *          functionalities of the Real Time Clock (RTC) peripheral:
   8:src/stm32f1xx_hal_rtc.c ****   *           + Initialization and de-initialization functions
   9:src/stm32f1xx_hal_rtc.c ****   *           + RTC Time and Date functions
  10:src/stm32f1xx_hal_rtc.c ****   *           + RTC Alarm functions
  11:src/stm32f1xx_hal_rtc.c ****   *           + Peripheral Control functions
  12:src/stm32f1xx_hal_rtc.c ****   *           + Peripheral State functions
  13:src/stm32f1xx_hal_rtc.c ****   *
  14:src/stm32f1xx_hal_rtc.c ****   @verbatim
  15:src/stm32f1xx_hal_rtc.c ****   ==============================================================================
  16:src/stm32f1xx_hal_rtc.c ****                   ##### How to use this driver #####
  17:src/stm32f1xx_hal_rtc.c ****   ==================================================================
  18:src/stm32f1xx_hal_rtc.c ****   [..]
  19:src/stm32f1xx_hal_rtc.c ****     (+) Enable the RTC domain access (see description in the section above).
  20:src/stm32f1xx_hal_rtc.c ****     (+) Configure the RTC Prescaler (Asynchronous prescaler to generate RTC 1Hz time base)
  21:src/stm32f1xx_hal_rtc.c ****         using the HAL_RTC_Init() function.
  22:src/stm32f1xx_hal_rtc.c **** 
  23:src/stm32f1xx_hal_rtc.c ****   *** Time and Date configuration ***
  24:src/stm32f1xx_hal_rtc.c ****   ===================================
  25:src/stm32f1xx_hal_rtc.c ****   [..]
  26:src/stm32f1xx_hal_rtc.c ****     (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime()
  27:src/stm32f1xx_hal_rtc.c ****         and HAL_RTC_SetDate() functions.
  28:src/stm32f1xx_hal_rtc.c ****     (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions.
  29:src/stm32f1xx_hal_rtc.c **** 
  30:src/stm32f1xx_hal_rtc.c ****   *** Alarm configuration ***
  31:src/stm32f1xx_hal_rtc.c ****   ===========================
  32:src/stm32f1xx_hal_rtc.c ****   [..]
  33:src/stm32f1xx_hal_rtc.c ****     (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function.
  34:src/stm32f1xx_hal_rtc.c ****         You can also configure the RTC Alarm with interrupt mode using the HAL_RTC_SetAlarm_IT() fu
  35:src/stm32f1xx_hal_rtc.c ****     (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.
  36:src/stm32f1xx_hal_rtc.c **** 
  37:src/stm32f1xx_hal_rtc.c ****   *** Tamper configuration ***
ARM GAS  /tmp/ccM6Uqrc.s 			page 3


  38:src/stm32f1xx_hal_rtc.c ****   ============================
  39:src/stm32f1xx_hal_rtc.c ****   [..]
  40:src/stm32f1xx_hal_rtc.c ****     (+) Enable the RTC Tamper and configure the Tamper Level using the
  41:src/stm32f1xx_hal_rtc.c ****         HAL_RTCEx_SetTamper() function. You can configure RTC Tamper with interrupt
  42:src/stm32f1xx_hal_rtc.c ****         mode using HAL_RTCEx_SetTamper_IT() function.
  43:src/stm32f1xx_hal_rtc.c ****     (+) The TAMPER1 alternate function can be mapped to PC13
  44:src/stm32f1xx_hal_rtc.c **** 
  45:src/stm32f1xx_hal_rtc.c ****   *** Backup Data Registers configuration ***
  46:src/stm32f1xx_hal_rtc.c ****   ===========================================
  47:src/stm32f1xx_hal_rtc.c ****   [..]
  48:src/stm32f1xx_hal_rtc.c ****     (+) To write to the RTC Backup Data registers, use the HAL_RTCEx_BKUPWrite()
  49:src/stm32f1xx_hal_rtc.c ****         function.
  50:src/stm32f1xx_hal_rtc.c ****     (+) To read the RTC Backup Data registers, use the HAL_RTCEx_BKUPRead()
  51:src/stm32f1xx_hal_rtc.c ****         function.
  52:src/stm32f1xx_hal_rtc.c **** 
  53:src/stm32f1xx_hal_rtc.c ****                   ##### WARNING: Drivers Restrictions  #####
  54:src/stm32f1xx_hal_rtc.c ****   ==================================================================
  55:src/stm32f1xx_hal_rtc.c ****   [..] RTC version used on STM32F1 families is version V1. All the features supported by V2
  56:src/stm32f1xx_hal_rtc.c ****        (other families) will be not supported on F1.
  57:src/stm32f1xx_hal_rtc.c ****   [..] As on V2, main RTC features are managed by HW. But on F1, date feature is completely
  58:src/stm32f1xx_hal_rtc.c ****        managed by SW.
  59:src/stm32f1xx_hal_rtc.c ****   [..] Then, there are some restrictions compared to other families:
  60:src/stm32f1xx_hal_rtc.c ****     (+) Only format 24 hours supported in HAL (format 12 hours not supported)
  61:src/stm32f1xx_hal_rtc.c ****     (+) Date is saved in SRAM. Then, when MCU is in STOP or STANDBY mode, date will be lost.
  62:src/stm32f1xx_hal_rtc.c ****         User should implement a way to save date before entering in low power mode (an
  63:src/stm32f1xx_hal_rtc.c ****         example is provided with firmware package based on backup registers)
  64:src/stm32f1xx_hal_rtc.c ****     (+) Date is automatically updated each time a HAL_RTC_GetTime or HAL_RTC_GetDate is called.
  65:src/stm32f1xx_hal_rtc.c ****     (+) Alarm detection is limited to 1 day. It will expire only 1 time (no alarm repetition, need
  66:src/stm32f1xx_hal_rtc.c ****         to program a new alarm)
  67:src/stm32f1xx_hal_rtc.c **** 
  68:src/stm32f1xx_hal_rtc.c ****               ##### Backup Domain Operating Condition #####
  69:src/stm32f1xx_hal_rtc.c ****   ==============================================================================
  70:src/stm32f1xx_hal_rtc.c ****   [..] The real-time clock (RTC) and the RTC backup registers can be powered
  71:src/stm32f1xx_hal_rtc.c ****        from the VBAT voltage when the main VDD supply is powered off.
  72:src/stm32f1xx_hal_rtc.c ****        To retain the content of the RTC backup registers and supply the RTC
  73:src/stm32f1xx_hal_rtc.c ****        when VDD is turned off, VBAT pin can be connected to an optional
  74:src/stm32f1xx_hal_rtc.c ****        standby voltage supplied by a battery or by another source.
  75:src/stm32f1xx_hal_rtc.c **** 
  76:src/stm32f1xx_hal_rtc.c ****   [..] To allow the RTC operating even when the main digital supply (VDD) is turned
  77:src/stm32f1xx_hal_rtc.c ****        off, the VBAT pin powers the following blocks:
  78:src/stm32f1xx_hal_rtc.c ****     (#) The RTC
  79:src/stm32f1xx_hal_rtc.c ****     (#) The LSE oscillator
  80:src/stm32f1xx_hal_rtc.c ****     (#) The backup SRAM when the low power backup regulator is enabled
  81:src/stm32f1xx_hal_rtc.c ****     (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
  82:src/stm32f1xx_hal_rtc.c **** 
  83:src/stm32f1xx_hal_rtc.c ****   [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  84:src/stm32f1xx_hal_rtc.c ****        the following pins are available:
  85:src/stm32f1xx_hal_rtc.c ****     (+) PC13 can be used as a Tamper pin
  86:src/stm32f1xx_hal_rtc.c **** 
  87:src/stm32f1xx_hal_rtc.c ****   [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT
  88:src/stm32f1xx_hal_rtc.c ****        because VDD is not present), the following pins are available:
  89:src/stm32f1xx_hal_rtc.c ****     (+) PC13 can be used as the Tamper pin
  90:src/stm32f1xx_hal_rtc.c **** 
  91:src/stm32f1xx_hal_rtc.c ****                    ##### Backup Domain Reset #####
  92:src/stm32f1xx_hal_rtc.c ****   ==================================================================
  93:src/stm32f1xx_hal_rtc.c ****   [..] The backup domain reset sets all RTC registers and the RCC_BDCR register
  94:src/stm32f1xx_hal_rtc.c ****        to their reset values.
ARM GAS  /tmp/ccM6Uqrc.s 			page 4


  95:src/stm32f1xx_hal_rtc.c ****   [..] A backup domain reset is generated when one of the following events occurs:
  96:src/stm32f1xx_hal_rtc.c ****     (#) Software reset, triggered by setting the BDRST bit in the
  97:src/stm32f1xx_hal_rtc.c ****         RCC Backup domain control register (RCC_BDCR).
  98:src/stm32f1xx_hal_rtc.c ****     (#) VDD or VBAT power on, if both supplies have previously been powered off.
  99:src/stm32f1xx_hal_rtc.c ****     (#) Tamper detection event resets all data backup registers.
 100:src/stm32f1xx_hal_rtc.c **** 
 101:src/stm32f1xx_hal_rtc.c ****                    ##### Backup Domain Access #####
 102:src/stm32f1xx_hal_rtc.c ****   ==================================================================
 103:src/stm32f1xx_hal_rtc.c ****   [..] After reset, the backup domain (RTC registers, RTC backup data
 104:src/stm32f1xx_hal_rtc.c ****        registers and backup SRAM) is protected against possible unwanted write
 105:src/stm32f1xx_hal_rtc.c ****        accesses.
 106:src/stm32f1xx_hal_rtc.c ****   [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
 107:src/stm32f1xx_hal_rtc.c ****     (+) Call the function HAL_RCCEx_PeriphCLKConfig in using RCC_PERIPHCLK_RTC for
 108:src/stm32f1xx_hal_rtc.c ****         PeriphClockSelection and select RTCClockSelection (LSE, LSI or HSE)
 109:src/stm32f1xx_hal_rtc.c ****     (+) Enable the BKP clock in using __HAL_RCC_BKP_CLK_ENABLE()
 110:src/stm32f1xx_hal_rtc.c **** 
 111:src/stm32f1xx_hal_rtc.c ****                   ##### RTC and low power modes #####
 112:src/stm32f1xx_hal_rtc.c ****   ==================================================================
 113:src/stm32f1xx_hal_rtc.c ****   [..] The MCU can be woken up from a low power mode by an RTC alternate
 114:src/stm32f1xx_hal_rtc.c ****        function.
 115:src/stm32f1xx_hal_rtc.c ****   [..] The RTC alternate functions are the RTC alarms (Alarm A),
 116:src/stm32f1xx_hal_rtc.c ****        and RTC tamper event detection.
 117:src/stm32f1xx_hal_rtc.c ****        These RTC alternate functions can wake up the system from the Stop and
 118:src/stm32f1xx_hal_rtc.c ****        Standby low power modes.
 119:src/stm32f1xx_hal_rtc.c ****   [..] The system can also wake up from low power modes without depending
 120:src/stm32f1xx_hal_rtc.c ****        on an external interrupt (Auto-wakeup mode), by using the RTC alarm.
 121:src/stm32f1xx_hal_rtc.c **** 
 122:src/stm32f1xx_hal_rtc.c ****   *** Callback registration ***
 123:src/stm32f1xx_hal_rtc.c ****   =============================================
 124:src/stm32f1xx_hal_rtc.c ****   [..]
 125:src/stm32f1xx_hal_rtc.c ****   The compilation define  USE_HAL_RTC_REGISTER_CALLBACKS when set to 1
 126:src/stm32f1xx_hal_rtc.c ****   allows the user to configure dynamically the driver callbacks.
 127:src/stm32f1xx_hal_rtc.c ****   Use Function @ref HAL_RTC_RegisterCallback() to register an interrupt callback.
 128:src/stm32f1xx_hal_rtc.c ****   
 129:src/stm32f1xx_hal_rtc.c ****   [..]
 130:src/stm32f1xx_hal_rtc.c ****   Function @ref HAL_RTC_RegisterCallback() allows to register following callbacks:
 131:src/stm32f1xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 132:src/stm32f1xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 133:src/stm32f1xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 134:src/stm32f1xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 135:src/stm32f1xx_hal_rtc.c ****   [..]	  
 136:src/stm32f1xx_hal_rtc.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 137:src/stm32f1xx_hal_rtc.c ****   and a pointer to the user callback function.
 138:src/stm32f1xx_hal_rtc.c ****   
 139:src/stm32f1xx_hal_rtc.c ****   [..]
 140:src/stm32f1xx_hal_rtc.c ****   Use function @ref HAL_RTC_UnRegisterCallback() to reset a callback to the default
 141:src/stm32f1xx_hal_rtc.c ****   weak function.
 142:src/stm32f1xx_hal_rtc.c ****   @ref HAL_RTC_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 143:src/stm32f1xx_hal_rtc.c ****   and the Callback ID.
 144:src/stm32f1xx_hal_rtc.c ****   This function allows to reset following callbacks:
 145:src/stm32f1xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 146:src/stm32f1xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 147:src/stm32f1xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 148:src/stm32f1xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 149:src/stm32f1xx_hal_rtc.c ****   [..]
 150:src/stm32f1xx_hal_rtc.c ****   By default, after the @ref HAL_RTC_Init() and when the state is HAL_RTC_STATE_RESET,
 151:src/stm32f1xx_hal_rtc.c ****   all callbacks are set to the corresponding weak functions :
ARM GAS  /tmp/ccM6Uqrc.s 			page 5


 152:src/stm32f1xx_hal_rtc.c ****   example @ref AlarmAEventCallback().
 153:src/stm32f1xx_hal_rtc.c ****   Exception done for MspInit and MspDeInit callbacks that are reset to the legacy weak function
 154:src/stm32f1xx_hal_rtc.c ****   in the @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit() only when these callbacks are null
 155:src/stm32f1xx_hal_rtc.c ****   (not registered beforehand).
 156:src/stm32f1xx_hal_rtc.c ****   If not, MspInit or MspDeInit are not null, @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit()
 157:src/stm32f1xx_hal_rtc.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 158:src/stm32f1xx_hal_rtc.c ****   [..]
 159:src/stm32f1xx_hal_rtc.c ****   Callbacks can be registered/unregistered in HAL_RTC_STATE_READY state only.
 160:src/stm32f1xx_hal_rtc.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 161:src/stm32f1xx_hal_rtc.c ****   in HAL_RTC_STATE_READY or HAL_RTC_STATE_RESET state,
 162:src/stm32f1xx_hal_rtc.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 163:src/stm32f1xx_hal_rtc.c ****   In that case first register the MspInit/MspDeInit user callbacks
 164:src/stm32f1xx_hal_rtc.c ****   using @ref HAL_RTC_RegisterCallback() before calling @ref HAL_RTC_DeInit()
 165:src/stm32f1xx_hal_rtc.c ****   or @ref HAL_RTC_Init() function.
 166:src/stm32f1xx_hal_rtc.c ****   [..]
 167:src/stm32f1xx_hal_rtc.c ****   When The compilation define USE_HAL_RTC_REGISTER_CALLBACKS is set to 0 or
 168:src/stm32f1xx_hal_rtc.c ****   not defined, the callback registration feature is not available and all callbacks
 169:src/stm32f1xx_hal_rtc.c ****   are set to the corresponding weak functions.
 170:src/stm32f1xx_hal_rtc.c ****    @endverbatim
 171:src/stm32f1xx_hal_rtc.c ****   ******************************************************************************
 172:src/stm32f1xx_hal_rtc.c ****   * @attention
 173:src/stm32f1xx_hal_rtc.c ****   *
 174:src/stm32f1xx_hal_rtc.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 175:src/stm32f1xx_hal_rtc.c ****   * All rights reserved.</center></h2>
 176:src/stm32f1xx_hal_rtc.c ****   *
 177:src/stm32f1xx_hal_rtc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 178:src/stm32f1xx_hal_rtc.c ****   * the "License"; You may not use this file except in compliance with the
 179:src/stm32f1xx_hal_rtc.c ****   * License. You may obtain a copy of the License at:
 180:src/stm32f1xx_hal_rtc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 181:src/stm32f1xx_hal_rtc.c ****   *
 182:src/stm32f1xx_hal_rtc.c ****   ******************************************************************************
 183:src/stm32f1xx_hal_rtc.c ****   */
 184:src/stm32f1xx_hal_rtc.c **** 
 185:src/stm32f1xx_hal_rtc.c **** /* Includes ------------------------------------------------------------------*/
 186:src/stm32f1xx_hal_rtc.c **** #include "stm32f1xx_hal.h"
 187:src/stm32f1xx_hal_rtc.c **** 
 188:src/stm32f1xx_hal_rtc.c **** /** @addtogroup STM32F1xx_HAL_Driver
 189:src/stm32f1xx_hal_rtc.c ****   * @{
 190:src/stm32f1xx_hal_rtc.c ****   */
 191:src/stm32f1xx_hal_rtc.c **** 
 192:src/stm32f1xx_hal_rtc.c **** /** @defgroup RTC RTC
 193:src/stm32f1xx_hal_rtc.c ****   * @brief RTC HAL module driver
 194:src/stm32f1xx_hal_rtc.c ****   * @{
 195:src/stm32f1xx_hal_rtc.c ****   */
 196:src/stm32f1xx_hal_rtc.c **** 
 197:src/stm32f1xx_hal_rtc.c **** #ifdef HAL_RTC_MODULE_ENABLED
 198:src/stm32f1xx_hal_rtc.c **** 
 199:src/stm32f1xx_hal_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 200:src/stm32f1xx_hal_rtc.c **** /* Private define ------------------------------------------------------------*/
 201:src/stm32f1xx_hal_rtc.c **** /** @defgroup RTC_Private_Constants RTC Private Constants
 202:src/stm32f1xx_hal_rtc.c ****   * @{
 203:src/stm32f1xx_hal_rtc.c ****   */
 204:src/stm32f1xx_hal_rtc.c **** #define RTC_ALARM_RESETVALUE_REGISTER    (uint16_t)0xFFFF
 205:src/stm32f1xx_hal_rtc.c **** #define RTC_ALARM_RESETVALUE             0xFFFFFFFFU
 206:src/stm32f1xx_hal_rtc.c **** 
 207:src/stm32f1xx_hal_rtc.c **** /**
 208:src/stm32f1xx_hal_rtc.c ****   * @}
ARM GAS  /tmp/ccM6Uqrc.s 			page 6


 209:src/stm32f1xx_hal_rtc.c ****   */
 210:src/stm32f1xx_hal_rtc.c **** 
 211:src/stm32f1xx_hal_rtc.c **** /* Private macro -------------------------------------------------------------*/
 212:src/stm32f1xx_hal_rtc.c **** /** @defgroup RTC_Private_Macros RTC Private Macros
 213:src/stm32f1xx_hal_rtc.c ****   * @{
 214:src/stm32f1xx_hal_rtc.c ****   */
 215:src/stm32f1xx_hal_rtc.c **** /**
 216:src/stm32f1xx_hal_rtc.c ****   * @}
 217:src/stm32f1xx_hal_rtc.c ****   */
 218:src/stm32f1xx_hal_rtc.c **** 
 219:src/stm32f1xx_hal_rtc.c **** /* Private variables ---------------------------------------------------------*/
 220:src/stm32f1xx_hal_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 221:src/stm32f1xx_hal_rtc.c **** /** @defgroup RTC_Private_Functions RTC Private Functions
 222:src/stm32f1xx_hal_rtc.c ****   * @{
 223:src/stm32f1xx_hal_rtc.c ****   */
 224:src/stm32f1xx_hal_rtc.c **** static uint32_t           RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc);
 225:src/stm32f1xx_hal_rtc.c **** static HAL_StatusTypeDef  RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter);
 226:src/stm32f1xx_hal_rtc.c **** static uint32_t           RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc);
 227:src/stm32f1xx_hal_rtc.c **** static HAL_StatusTypeDef  RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter);
 228:src/stm32f1xx_hal_rtc.c **** static HAL_StatusTypeDef  RTC_EnterInitMode(RTC_HandleTypeDef *hrtc);
 229:src/stm32f1xx_hal_rtc.c **** static HAL_StatusTypeDef  RTC_ExitInitMode(RTC_HandleTypeDef *hrtc);
 230:src/stm32f1xx_hal_rtc.c **** static uint8_t            RTC_ByteToBcd2(uint8_t Value);
 231:src/stm32f1xx_hal_rtc.c **** static uint8_t            RTC_Bcd2ToByte(uint8_t Value);
 232:src/stm32f1xx_hal_rtc.c **** static uint8_t            RTC_IsLeapYear(uint16_t nYear);
 233:src/stm32f1xx_hal_rtc.c **** static void               RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed);
 234:src/stm32f1xx_hal_rtc.c **** static uint8_t            RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay);
 235:src/stm32f1xx_hal_rtc.c **** 
 236:src/stm32f1xx_hal_rtc.c **** /**
 237:src/stm32f1xx_hal_rtc.c ****   * @}
 238:src/stm32f1xx_hal_rtc.c ****   */
 239:src/stm32f1xx_hal_rtc.c **** 
 240:src/stm32f1xx_hal_rtc.c **** /* Private functions ---------------------------------------------------------*/
 241:src/stm32f1xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions RTC Exported Functions
 242:src/stm32f1xx_hal_rtc.c ****   * @{
 243:src/stm32f1xx_hal_rtc.c ****   */
 244:src/stm32f1xx_hal_rtc.c **** 
 245:src/stm32f1xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group1 Initialization and de-initialization functions
 246:src/stm32f1xx_hal_rtc.c ****  *  @brief    Initialization and Configuration functions
 247:src/stm32f1xx_hal_rtc.c ****  *
 248:src/stm32f1xx_hal_rtc.c **** @verbatim
 249:src/stm32f1xx_hal_rtc.c ****  ===============================================================================
 250:src/stm32f1xx_hal_rtc.c ****               ##### Initialization and de-initialization functions #####
 251:src/stm32f1xx_hal_rtc.c ****  ===============================================================================
 252:src/stm32f1xx_hal_rtc.c ****    [..] This section provides functions allowing to initialize and configure the
 253:src/stm32f1xx_hal_rtc.c ****          RTC Prescaler (Asynchronous), disable RTC registers Write protection,
 254:src/stm32f1xx_hal_rtc.c ****          enter and exit the RTC initialization mode,
 255:src/stm32f1xx_hal_rtc.c ****          RTC registers synchronization check and reference clock detection enable.
 256:src/stm32f1xx_hal_rtc.c ****          (#) The RTC Prescaler should be programmed to generate the RTC 1Hz time base.
 257:src/stm32f1xx_hal_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 258:src/stm32f1xx_hal_rtc.c ****              is enabled by setting the CNF bit in the RTC_CRL register.
 259:src/stm32f1xx_hal_rtc.c ****          (#) To read the calendar after wakeup from low power modes (Standby or Stop)
 260:src/stm32f1xx_hal_rtc.c ****              the software must first wait for the RSF bit (Register Synchronized Flag)
 261:src/stm32f1xx_hal_rtc.c ****              in the RTC_CRL register to be set by hardware.
 262:src/stm32f1xx_hal_rtc.c ****              The HAL_RTC_WaitForSynchro() function implements the above software
 263:src/stm32f1xx_hal_rtc.c ****              sequence (RSF clear and RSF check).
 264:src/stm32f1xx_hal_rtc.c **** 
 265:src/stm32f1xx_hal_rtc.c **** @endverbatim
ARM GAS  /tmp/ccM6Uqrc.s 			page 7


 266:src/stm32f1xx_hal_rtc.c ****   * @{
 267:src/stm32f1xx_hal_rtc.c ****   */
 268:src/stm32f1xx_hal_rtc.c **** 
 269:src/stm32f1xx_hal_rtc.c **** /**
 270:src/stm32f1xx_hal_rtc.c ****   * @brief  Initializes the RTC peripheral
 271:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
 272:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
 273:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
 274:src/stm32f1xx_hal_rtc.c ****   */
 275:src/stm32f1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
 276:src/stm32f1xx_hal_rtc.c **** {
 277:src/stm32f1xx_hal_rtc.c ****   uint32_t prescaler = 0U;
 278:src/stm32f1xx_hal_rtc.c ****   /* Check input parameters */
 279:src/stm32f1xx_hal_rtc.c ****   if (hrtc == NULL)
 280:src/stm32f1xx_hal_rtc.c ****   {
 281:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
 282:src/stm32f1xx_hal_rtc.c ****   }
 283:src/stm32f1xx_hal_rtc.c **** 
 284:src/stm32f1xx_hal_rtc.c ****   /* Check the parameters */
 285:src/stm32f1xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 286:src/stm32f1xx_hal_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 287:src/stm32f1xx_hal_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 288:src/stm32f1xx_hal_rtc.c **** 
 289:src/stm32f1xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 290:src/stm32f1xx_hal_rtc.c ****   if (hrtc->State == HAL_RTC_STATE_RESET)
 291:src/stm32f1xx_hal_rtc.c ****   {
 292:src/stm32f1xx_hal_rtc.c ****     /* Allocate lock resource and initialize it */
 293:src/stm32f1xx_hal_rtc.c ****     hrtc->Lock = HAL_UNLOCKED;
 294:src/stm32f1xx_hal_rtc.c **** 
 295:src/stm32f1xx_hal_rtc.c ****     hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmA
 296:src/stm32f1xx_hal_rtc.c ****     hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper
 297:src/stm32f1xx_hal_rtc.c **** 
 298:src/stm32f1xx_hal_rtc.c ****     if (hrtc->MspInitCallback == NULL)
 299:src/stm32f1xx_hal_rtc.c ****     {
 300:src/stm32f1xx_hal_rtc.c ****       hrtc->MspInitCallback = HAL_RTC_MspInit;
 301:src/stm32f1xx_hal_rtc.c ****     }
 302:src/stm32f1xx_hal_rtc.c ****     /* Init the low level hardware */
 303:src/stm32f1xx_hal_rtc.c ****     hrtc->MspInitCallback(hrtc);
 304:src/stm32f1xx_hal_rtc.c **** 
 305:src/stm32f1xx_hal_rtc.c ****     if (hrtc->MspDeInitCallback == NULL)
 306:src/stm32f1xx_hal_rtc.c ****     {
 307:src/stm32f1xx_hal_rtc.c ****       hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 308:src/stm32f1xx_hal_rtc.c ****     }
 309:src/stm32f1xx_hal_rtc.c ****   }
 310:src/stm32f1xx_hal_rtc.c **** #else
 311:src/stm32f1xx_hal_rtc.c ****   if (hrtc->State == HAL_RTC_STATE_RESET)
 312:src/stm32f1xx_hal_rtc.c ****   {
 313:src/stm32f1xx_hal_rtc.c ****     /* Allocate lock resource and initialize it */
 314:src/stm32f1xx_hal_rtc.c ****     hrtc->Lock = HAL_UNLOCKED;
 315:src/stm32f1xx_hal_rtc.c **** 
 316:src/stm32f1xx_hal_rtc.c ****     /* Initialize RTC MSP */
 317:src/stm32f1xx_hal_rtc.c ****     HAL_RTC_MspInit(hrtc);
 318:src/stm32f1xx_hal_rtc.c ****   }
 319:src/stm32f1xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 320:src/stm32f1xx_hal_rtc.c **** 
 321:src/stm32f1xx_hal_rtc.c ****   /* Set RTC state */
 322:src/stm32f1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
ARM GAS  /tmp/ccM6Uqrc.s 			page 8


 323:src/stm32f1xx_hal_rtc.c **** 
 324:src/stm32f1xx_hal_rtc.c ****   /* Waiting for synchro */
 325:src/stm32f1xx_hal_rtc.c ****   if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 326:src/stm32f1xx_hal_rtc.c ****   {
 327:src/stm32f1xx_hal_rtc.c ****     /* Set RTC state */
 328:src/stm32f1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 329:src/stm32f1xx_hal_rtc.c **** 
 330:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
 331:src/stm32f1xx_hal_rtc.c ****   }
 332:src/stm32f1xx_hal_rtc.c **** 
 333:src/stm32f1xx_hal_rtc.c ****   /* Set Initialization mode */
 334:src/stm32f1xx_hal_rtc.c ****   if (RTC_EnterInitMode(hrtc) != HAL_OK)
 335:src/stm32f1xx_hal_rtc.c ****   {
 336:src/stm32f1xx_hal_rtc.c ****     /* Set RTC state */
 337:src/stm32f1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 338:src/stm32f1xx_hal_rtc.c **** 
 339:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
 340:src/stm32f1xx_hal_rtc.c ****   }
 341:src/stm32f1xx_hal_rtc.c ****   else
 342:src/stm32f1xx_hal_rtc.c ****   {
 343:src/stm32f1xx_hal_rtc.c ****     /* Clear Flags Bits */
 344:src/stm32f1xx_hal_rtc.c ****     CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 345:src/stm32f1xx_hal_rtc.c **** 
 346:src/stm32f1xx_hal_rtc.c ****     if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 347:src/stm32f1xx_hal_rtc.c ****     {
 348:src/stm32f1xx_hal_rtc.c ****       /* Disable the selected Tamper pin */
 349:src/stm32f1xx_hal_rtc.c ****       CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 350:src/stm32f1xx_hal_rtc.c ****     }
 351:src/stm32f1xx_hal_rtc.c **** 
 352:src/stm32f1xx_hal_rtc.c ****     /* Set the signal which will be routed to RTC Tamper pin*/
 353:src/stm32f1xx_hal_rtc.c ****     MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 354:src/stm32f1xx_hal_rtc.c **** 
 355:src/stm32f1xx_hal_rtc.c ****     if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 356:src/stm32f1xx_hal_rtc.c ****     {
 357:src/stm32f1xx_hal_rtc.c ****       /* RTC Prescaler provided directly by end-user*/
 358:src/stm32f1xx_hal_rtc.c ****       prescaler = hrtc->Init.AsynchPrediv;
 359:src/stm32f1xx_hal_rtc.c ****     }
 360:src/stm32f1xx_hal_rtc.c ****     else
 361:src/stm32f1xx_hal_rtc.c ****     {
 362:src/stm32f1xx_hal_rtc.c ****       /* RTC Prescaler will be automatically calculated to get 1 second timebase */
 363:src/stm32f1xx_hal_rtc.c ****       /* Get the RTCCLK frequency */
 364:src/stm32f1xx_hal_rtc.c ****       prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 365:src/stm32f1xx_hal_rtc.c **** 
 366:src/stm32f1xx_hal_rtc.c ****       /* Check that RTC clock is enabled*/
 367:src/stm32f1xx_hal_rtc.c ****       if (prescaler == 0U)
 368:src/stm32f1xx_hal_rtc.c ****       {
 369:src/stm32f1xx_hal_rtc.c ****         /* Should not happen. Frequency is not available*/
 370:src/stm32f1xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 371:src/stm32f1xx_hal_rtc.c ****         return HAL_ERROR;
 372:src/stm32f1xx_hal_rtc.c ****       }
 373:src/stm32f1xx_hal_rtc.c ****       else
 374:src/stm32f1xx_hal_rtc.c ****       {
 375:src/stm32f1xx_hal_rtc.c ****         /* RTC period = RTCCLK/(RTC_PR + 1) */
 376:src/stm32f1xx_hal_rtc.c ****         prescaler = prescaler - 1U;
 377:src/stm32f1xx_hal_rtc.c ****       }
 378:src/stm32f1xx_hal_rtc.c ****     }
 379:src/stm32f1xx_hal_rtc.c **** 
ARM GAS  /tmp/ccM6Uqrc.s 			page 9


 380:src/stm32f1xx_hal_rtc.c ****     /* Configure the RTC_PRLH / RTC_PRLL */
 381:src/stm32f1xx_hal_rtc.c ****     MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 382:src/stm32f1xx_hal_rtc.c ****     MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 383:src/stm32f1xx_hal_rtc.c **** 
 384:src/stm32f1xx_hal_rtc.c ****     /* Wait for synchro */
 385:src/stm32f1xx_hal_rtc.c ****     if (RTC_ExitInitMode(hrtc) != HAL_OK)
 386:src/stm32f1xx_hal_rtc.c ****     {
 387:src/stm32f1xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_ERROR;
 388:src/stm32f1xx_hal_rtc.c **** 
 389:src/stm32f1xx_hal_rtc.c ****       return HAL_ERROR;
 390:src/stm32f1xx_hal_rtc.c ****     }
 391:src/stm32f1xx_hal_rtc.c **** 
 392:src/stm32f1xx_hal_rtc.c ****     /* Initialize date to 1st of January 2000 */
 393:src/stm32f1xx_hal_rtc.c ****     hrtc->DateToUpdate.Year = 0x00U;
 394:src/stm32f1xx_hal_rtc.c ****     hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 395:src/stm32f1xx_hal_rtc.c ****     hrtc->DateToUpdate.Date = 0x01U;
 396:src/stm32f1xx_hal_rtc.c **** 
 397:src/stm32f1xx_hal_rtc.c ****     /* Set RTC state */
 398:src/stm32f1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 399:src/stm32f1xx_hal_rtc.c **** 
 400:src/stm32f1xx_hal_rtc.c ****     return HAL_OK;
 401:src/stm32f1xx_hal_rtc.c ****   }
 402:src/stm32f1xx_hal_rtc.c **** }
 403:src/stm32f1xx_hal_rtc.c **** 
 404:src/stm32f1xx_hal_rtc.c **** /**
 405:src/stm32f1xx_hal_rtc.c ****   * @brief  DeInitializes the RTC peripheral
 406:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
 407:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
 408:src/stm32f1xx_hal_rtc.c ****   * @note   This function does not reset the RTC Backup Data registers.
 409:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
 410:src/stm32f1xx_hal_rtc.c ****   */
 411:src/stm32f1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
 412:src/stm32f1xx_hal_rtc.c **** {
 413:src/stm32f1xx_hal_rtc.c ****   /* Check input parameters */
 414:src/stm32f1xx_hal_rtc.c ****   if (hrtc == NULL)
 415:src/stm32f1xx_hal_rtc.c ****   {
 416:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
 417:src/stm32f1xx_hal_rtc.c ****   }
 418:src/stm32f1xx_hal_rtc.c **** 
 419:src/stm32f1xx_hal_rtc.c ****   /* Check the parameters */
 420:src/stm32f1xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 421:src/stm32f1xx_hal_rtc.c **** 
 422:src/stm32f1xx_hal_rtc.c ****   /* Set RTC state */
 423:src/stm32f1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 424:src/stm32f1xx_hal_rtc.c **** 
 425:src/stm32f1xx_hal_rtc.c ****   /* Set Initialization mode */
 426:src/stm32f1xx_hal_rtc.c ****   if (RTC_EnterInitMode(hrtc) != HAL_OK)
 427:src/stm32f1xx_hal_rtc.c ****   {
 428:src/stm32f1xx_hal_rtc.c ****     /* Set RTC state */
 429:src/stm32f1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 430:src/stm32f1xx_hal_rtc.c **** 
 431:src/stm32f1xx_hal_rtc.c ****     /* Release Lock */
 432:src/stm32f1xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 433:src/stm32f1xx_hal_rtc.c **** 
 434:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
 435:src/stm32f1xx_hal_rtc.c ****   }
 436:src/stm32f1xx_hal_rtc.c ****   else
ARM GAS  /tmp/ccM6Uqrc.s 			page 10


 437:src/stm32f1xx_hal_rtc.c ****   {
 438:src/stm32f1xx_hal_rtc.c ****     CLEAR_REG(hrtc->Instance->CNTL);
 439:src/stm32f1xx_hal_rtc.c ****     CLEAR_REG(hrtc->Instance->CNTH);
 440:src/stm32f1xx_hal_rtc.c ****     WRITE_REG(hrtc->Instance->PRLL, 0x00008000U);
 441:src/stm32f1xx_hal_rtc.c ****     CLEAR_REG(hrtc->Instance->PRLH);
 442:src/stm32f1xx_hal_rtc.c **** 
 443:src/stm32f1xx_hal_rtc.c ****     /* Reset All CRH/CRL bits */
 444:src/stm32f1xx_hal_rtc.c ****     CLEAR_REG(hrtc->Instance->CRH);
 445:src/stm32f1xx_hal_rtc.c ****     CLEAR_REG(hrtc->Instance->CRL);
 446:src/stm32f1xx_hal_rtc.c **** 
 447:src/stm32f1xx_hal_rtc.c ****     if (RTC_ExitInitMode(hrtc) != HAL_OK)
 448:src/stm32f1xx_hal_rtc.c ****     {
 449:src/stm32f1xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_ERROR;
 450:src/stm32f1xx_hal_rtc.c **** 
 451:src/stm32f1xx_hal_rtc.c ****       /* Process Unlocked */
 452:src/stm32f1xx_hal_rtc.c ****       __HAL_UNLOCK(hrtc);
 453:src/stm32f1xx_hal_rtc.c **** 
 454:src/stm32f1xx_hal_rtc.c ****       return HAL_ERROR;
 455:src/stm32f1xx_hal_rtc.c ****     }
 456:src/stm32f1xx_hal_rtc.c ****   }
 457:src/stm32f1xx_hal_rtc.c **** 
 458:src/stm32f1xx_hal_rtc.c ****   /* Wait for synchro*/
 459:src/stm32f1xx_hal_rtc.c ****   HAL_RTC_WaitForSynchro(hrtc);
 460:src/stm32f1xx_hal_rtc.c **** 
 461:src/stm32f1xx_hal_rtc.c ****   /* Clear RSF flag */
 462:src/stm32f1xx_hal_rtc.c ****   CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 463:src/stm32f1xx_hal_rtc.c **** 
 464:src/stm32f1xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 465:src/stm32f1xx_hal_rtc.c ****   if (hrtc->MspDeInitCallback == NULL)
 466:src/stm32f1xx_hal_rtc.c ****   {
 467:src/stm32f1xx_hal_rtc.c ****     hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 468:src/stm32f1xx_hal_rtc.c ****   }
 469:src/stm32f1xx_hal_rtc.c **** 
 470:src/stm32f1xx_hal_rtc.c ****   /* DeInit the low level hardware: CLOCK, NVIC.*/
 471:src/stm32f1xx_hal_rtc.c ****   hrtc->MspDeInitCallback(hrtc);
 472:src/stm32f1xx_hal_rtc.c **** 
 473:src/stm32f1xx_hal_rtc.c **** #else
 474:src/stm32f1xx_hal_rtc.c ****   /* De-Initialize RTC MSP */
 475:src/stm32f1xx_hal_rtc.c ****   HAL_RTC_MspDeInit(hrtc);
 476:src/stm32f1xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 477:src/stm32f1xx_hal_rtc.c **** 
 478:src/stm32f1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_RESET;
 479:src/stm32f1xx_hal_rtc.c **** 
 480:src/stm32f1xx_hal_rtc.c ****   /* Release Lock */
 481:src/stm32f1xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 482:src/stm32f1xx_hal_rtc.c **** 
 483:src/stm32f1xx_hal_rtc.c ****   return HAL_OK;
 484:src/stm32f1xx_hal_rtc.c **** }
 485:src/stm32f1xx_hal_rtc.c **** 
 486:src/stm32f1xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 487:src/stm32f1xx_hal_rtc.c **** /**
 488:src/stm32f1xx_hal_rtc.c ****   * @brief  Register a User RTC Callback
 489:src/stm32f1xx_hal_rtc.c ****   *         To be used instead of the weak predefined callback
 490:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc RTC handle
 491:src/stm32f1xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be registered
 492:src/stm32f1xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 493:src/stm32f1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
ARM GAS  /tmp/ccM6Uqrc.s 			page 11


 494:src/stm32f1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 495:src/stm32f1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID                Msp Init callback ID
 496:src/stm32f1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID              Msp DeInit callback ID
 497:src/stm32f1xx_hal_rtc.c ****   * @param  pCallback pointer to the Callback function
 498:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
 499:src/stm32f1xx_hal_rtc.c ****   */
 500:src/stm32f1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_RegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Callb
 501:src/stm32f1xx_hal_rtc.c **** {
 502:src/stm32f1xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 503:src/stm32f1xx_hal_rtc.c **** 
 504:src/stm32f1xx_hal_rtc.c ****   if (pCallback == NULL)
 505:src/stm32f1xx_hal_rtc.c ****   {
 506:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
 507:src/stm32f1xx_hal_rtc.c ****   }
 508:src/stm32f1xx_hal_rtc.c **** 
 509:src/stm32f1xx_hal_rtc.c ****   /* Process locked */
 510:src/stm32f1xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 511:src/stm32f1xx_hal_rtc.c **** 
 512:src/stm32f1xx_hal_rtc.c ****   if (HAL_RTC_STATE_READY == hrtc->State)
 513:src/stm32f1xx_hal_rtc.c ****   {
 514:src/stm32f1xx_hal_rtc.c ****     switch (CallbackID)
 515:src/stm32f1xx_hal_rtc.c ****     {
 516:src/stm32f1xx_hal_rtc.c ****       case HAL_RTC_ALARM_A_EVENT_CB_ID :
 517:src/stm32f1xx_hal_rtc.c ****         hrtc->AlarmAEventCallback = pCallback;
 518:src/stm32f1xx_hal_rtc.c ****         break;
 519:src/stm32f1xx_hal_rtc.c **** 
 520:src/stm32f1xx_hal_rtc.c ****       case HAL_RTC_TAMPER1_EVENT_CB_ID :
 521:src/stm32f1xx_hal_rtc.c ****         hrtc->Tamper1EventCallback = pCallback;
 522:src/stm32f1xx_hal_rtc.c ****         break;
 523:src/stm32f1xx_hal_rtc.c **** 
 524:src/stm32f1xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 525:src/stm32f1xx_hal_rtc.c ****         hrtc->MspInitCallback = pCallback;
 526:src/stm32f1xx_hal_rtc.c ****         break;
 527:src/stm32f1xx_hal_rtc.c **** 
 528:src/stm32f1xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 529:src/stm32f1xx_hal_rtc.c ****         hrtc->MspDeInitCallback = pCallback;
 530:src/stm32f1xx_hal_rtc.c ****         break;
 531:src/stm32f1xx_hal_rtc.c **** 
 532:src/stm32f1xx_hal_rtc.c ****       default :
 533:src/stm32f1xx_hal_rtc.c ****         /* Return error status */
 534:src/stm32f1xx_hal_rtc.c ****         status =  HAL_ERROR;
 535:src/stm32f1xx_hal_rtc.c ****         break;
 536:src/stm32f1xx_hal_rtc.c ****     }
 537:src/stm32f1xx_hal_rtc.c ****   }
 538:src/stm32f1xx_hal_rtc.c ****   else if (HAL_RTC_STATE_RESET == hrtc->State)
 539:src/stm32f1xx_hal_rtc.c ****   {
 540:src/stm32f1xx_hal_rtc.c ****     switch (CallbackID)
 541:src/stm32f1xx_hal_rtc.c ****     {
 542:src/stm32f1xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 543:src/stm32f1xx_hal_rtc.c ****         hrtc->MspInitCallback = pCallback;
 544:src/stm32f1xx_hal_rtc.c ****         break;
 545:src/stm32f1xx_hal_rtc.c **** 
 546:src/stm32f1xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 547:src/stm32f1xx_hal_rtc.c ****         hrtc->MspDeInitCallback = pCallback;
 548:src/stm32f1xx_hal_rtc.c ****         break;
 549:src/stm32f1xx_hal_rtc.c **** 
 550:src/stm32f1xx_hal_rtc.c ****       default :
ARM GAS  /tmp/ccM6Uqrc.s 			page 12


 551:src/stm32f1xx_hal_rtc.c ****         /* Return error status */
 552:src/stm32f1xx_hal_rtc.c ****         status =  HAL_ERROR;
 553:src/stm32f1xx_hal_rtc.c ****         break;
 554:src/stm32f1xx_hal_rtc.c ****     }
 555:src/stm32f1xx_hal_rtc.c ****   }
 556:src/stm32f1xx_hal_rtc.c ****   else
 557:src/stm32f1xx_hal_rtc.c ****   {
 558:src/stm32f1xx_hal_rtc.c ****     /* Return error status */
 559:src/stm32f1xx_hal_rtc.c ****     status =  HAL_ERROR;
 560:src/stm32f1xx_hal_rtc.c ****   }
 561:src/stm32f1xx_hal_rtc.c **** 
 562:src/stm32f1xx_hal_rtc.c ****   /* Release Lock */
 563:src/stm32f1xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 564:src/stm32f1xx_hal_rtc.c **** 
 565:src/stm32f1xx_hal_rtc.c ****   return status;
 566:src/stm32f1xx_hal_rtc.c **** }
 567:src/stm32f1xx_hal_rtc.c **** 
 568:src/stm32f1xx_hal_rtc.c **** /**
 569:src/stm32f1xx_hal_rtc.c ****   * @brief  Unregister an RTC Callback
 570:src/stm32f1xx_hal_rtc.c ****   *         RTC callabck is redirected to the weak predefined callback
 571:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc RTC handle
 572:src/stm32f1xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be unregistered
 573:src/stm32f1xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 574:src/stm32f1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 575:src/stm32f1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 576:src/stm32f1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID Msp Init callback ID
 577:src/stm32f1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID Msp DeInit callback ID
 578:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
 579:src/stm32f1xx_hal_rtc.c ****   */
 580:src/stm32f1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_UnRegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Cal
 581:src/stm32f1xx_hal_rtc.c **** {
 582:src/stm32f1xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 583:src/stm32f1xx_hal_rtc.c **** 
 584:src/stm32f1xx_hal_rtc.c ****   /* Process locked */
 585:src/stm32f1xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 586:src/stm32f1xx_hal_rtc.c **** 
 587:src/stm32f1xx_hal_rtc.c ****   if (HAL_RTC_STATE_READY == hrtc->State)
 588:src/stm32f1xx_hal_rtc.c ****   {
 589:src/stm32f1xx_hal_rtc.c ****     switch (CallbackID)
 590:src/stm32f1xx_hal_rtc.c ****     {
 591:src/stm32f1xx_hal_rtc.c ****       case HAL_RTC_ALARM_A_EVENT_CB_ID :
 592:src/stm32f1xx_hal_rtc.c ****         hrtc->AlarmAEventCallback = HAL_RTC_AlarmAEventCallback;         /* Legacy weak AlarmAEvent
 593:src/stm32f1xx_hal_rtc.c ****         break;
 594:src/stm32f1xx_hal_rtc.c **** 
 595:src/stm32f1xx_hal_rtc.c ****       case HAL_RTC_TAMPER1_EVENT_CB_ID :
 596:src/stm32f1xx_hal_rtc.c ****         hrtc->Tamper1EventCallback = HAL_RTCEx_Tamper1EventCallback;         /* Legacy weak Tamper1
 597:src/stm32f1xx_hal_rtc.c ****         break;
 598:src/stm32f1xx_hal_rtc.c **** 
 599:src/stm32f1xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 600:src/stm32f1xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 601:src/stm32f1xx_hal_rtc.c ****         break;
 602:src/stm32f1xx_hal_rtc.c **** 
 603:src/stm32f1xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 604:src/stm32f1xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 605:src/stm32f1xx_hal_rtc.c ****         break;
 606:src/stm32f1xx_hal_rtc.c **** 
 607:src/stm32f1xx_hal_rtc.c ****       default :
ARM GAS  /tmp/ccM6Uqrc.s 			page 13


 608:src/stm32f1xx_hal_rtc.c ****         /* Return error status */
 609:src/stm32f1xx_hal_rtc.c ****         status =  HAL_ERROR;
 610:src/stm32f1xx_hal_rtc.c ****         break;
 611:src/stm32f1xx_hal_rtc.c ****     }
 612:src/stm32f1xx_hal_rtc.c ****   }
 613:src/stm32f1xx_hal_rtc.c ****   else if (HAL_RTC_STATE_RESET == hrtc->State)
 614:src/stm32f1xx_hal_rtc.c ****   {
 615:src/stm32f1xx_hal_rtc.c ****     switch (CallbackID)
 616:src/stm32f1xx_hal_rtc.c ****     {
 617:src/stm32f1xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 618:src/stm32f1xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 619:src/stm32f1xx_hal_rtc.c ****         break;
 620:src/stm32f1xx_hal_rtc.c **** 
 621:src/stm32f1xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 622:src/stm32f1xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 623:src/stm32f1xx_hal_rtc.c ****         break;
 624:src/stm32f1xx_hal_rtc.c **** 
 625:src/stm32f1xx_hal_rtc.c ****       default :
 626:src/stm32f1xx_hal_rtc.c ****         /* Return error status */
 627:src/stm32f1xx_hal_rtc.c ****         status =  HAL_ERROR;
 628:src/stm32f1xx_hal_rtc.c ****         break;
 629:src/stm32f1xx_hal_rtc.c ****     }
 630:src/stm32f1xx_hal_rtc.c ****   }
 631:src/stm32f1xx_hal_rtc.c ****   else
 632:src/stm32f1xx_hal_rtc.c ****   {
 633:src/stm32f1xx_hal_rtc.c ****     /* Return error status */
 634:src/stm32f1xx_hal_rtc.c ****     status =  HAL_ERROR;
 635:src/stm32f1xx_hal_rtc.c ****   }
 636:src/stm32f1xx_hal_rtc.c **** 
 637:src/stm32f1xx_hal_rtc.c ****   /* Release Lock */
 638:src/stm32f1xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 639:src/stm32f1xx_hal_rtc.c **** 
 640:src/stm32f1xx_hal_rtc.c ****   return status;
 641:src/stm32f1xx_hal_rtc.c **** }
 642:src/stm32f1xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 643:src/stm32f1xx_hal_rtc.c **** 
 644:src/stm32f1xx_hal_rtc.c **** /**
 645:src/stm32f1xx_hal_rtc.c ****   * @brief  Initializes the RTC MSP.
 646:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
 647:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
 648:src/stm32f1xx_hal_rtc.c ****   * @retval None
 649:src/stm32f1xx_hal_rtc.c ****   */
 650:src/stm32f1xx_hal_rtc.c **** __weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
 651:src/stm32f1xx_hal_rtc.c **** {
 652:src/stm32f1xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 653:src/stm32f1xx_hal_rtc.c ****   UNUSED(hrtc);
 654:src/stm32f1xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 655:src/stm32f1xx_hal_rtc.c ****             the HAL_RTC_MspInit could be implemented in the user file
 656:src/stm32f1xx_hal_rtc.c ****    */
 657:src/stm32f1xx_hal_rtc.c **** }
 658:src/stm32f1xx_hal_rtc.c **** 
 659:src/stm32f1xx_hal_rtc.c **** /**
 660:src/stm32f1xx_hal_rtc.c ****   * @brief  DeInitializes the RTC MSP.
 661:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
 662:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
 663:src/stm32f1xx_hal_rtc.c ****   * @retval None
 664:src/stm32f1xx_hal_rtc.c ****   */
ARM GAS  /tmp/ccM6Uqrc.s 			page 14


 665:src/stm32f1xx_hal_rtc.c **** __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef *hrtc)
 666:src/stm32f1xx_hal_rtc.c **** {
 667:src/stm32f1xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 668:src/stm32f1xx_hal_rtc.c ****   UNUSED(hrtc);
 669:src/stm32f1xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 670:src/stm32f1xx_hal_rtc.c ****             the HAL_RTC_MspDeInit could be implemented in the user file
 671:src/stm32f1xx_hal_rtc.c ****    */
 672:src/stm32f1xx_hal_rtc.c **** }
 673:src/stm32f1xx_hal_rtc.c **** 
 674:src/stm32f1xx_hal_rtc.c **** /**
 675:src/stm32f1xx_hal_rtc.c ****   * @}
 676:src/stm32f1xx_hal_rtc.c ****   */
 677:src/stm32f1xx_hal_rtc.c **** 
 678:src/stm32f1xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group2 Time and Date functions
 679:src/stm32f1xx_hal_rtc.c ****  *  @brief   RTC Time and Date functions
 680:src/stm32f1xx_hal_rtc.c ****  *
 681:src/stm32f1xx_hal_rtc.c **** @verbatim
 682:src/stm32f1xx_hal_rtc.c ****  ===============================================================================
 683:src/stm32f1xx_hal_rtc.c ****                  ##### RTC Time and Date functions #####
 684:src/stm32f1xx_hal_rtc.c ****  ===============================================================================
 685:src/stm32f1xx_hal_rtc.c **** 
 686:src/stm32f1xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Time and Date features
 687:src/stm32f1xx_hal_rtc.c **** 
 688:src/stm32f1xx_hal_rtc.c **** @endverbatim
 689:src/stm32f1xx_hal_rtc.c ****   * @{
 690:src/stm32f1xx_hal_rtc.c ****   */
 691:src/stm32f1xx_hal_rtc.c **** 
 692:src/stm32f1xx_hal_rtc.c **** /**
 693:src/stm32f1xx_hal_rtc.c ****   * @brief  Sets RTC current time.
 694:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
 695:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
 696:src/stm32f1xx_hal_rtc.c ****   * @param  sTime: Pointer to Time structure
 697:src/stm32f1xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
 698:src/stm32f1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 699:src/stm32f1xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 700:src/stm32f1xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 701:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
 702:src/stm32f1xx_hal_rtc.c ****   */
 703:src/stm32f1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 704:src/stm32f1xx_hal_rtc.c **** {
 705:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_time = 0U, counter_alarm = 0U;
 706:src/stm32f1xx_hal_rtc.c **** 
 707:src/stm32f1xx_hal_rtc.c ****   /* Check input parameters */
 708:src/stm32f1xx_hal_rtc.c ****   if ((hrtc == NULL) || (sTime == NULL))
 709:src/stm32f1xx_hal_rtc.c ****   {
 710:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
 711:src/stm32f1xx_hal_rtc.c ****   }
 712:src/stm32f1xx_hal_rtc.c **** 
 713:src/stm32f1xx_hal_rtc.c ****   /* Check the parameters */
 714:src/stm32f1xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 715:src/stm32f1xx_hal_rtc.c **** 
 716:src/stm32f1xx_hal_rtc.c ****   /* Process Locked */
 717:src/stm32f1xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 718:src/stm32f1xx_hal_rtc.c **** 
 719:src/stm32f1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 720:src/stm32f1xx_hal_rtc.c **** 
 721:src/stm32f1xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
ARM GAS  /tmp/ccM6Uqrc.s 			page 15


 722:src/stm32f1xx_hal_rtc.c ****   {
 723:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_HOUR24(sTime->Hours));
 724:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sTime->Minutes));
 725:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sTime->Seconds));
 726:src/stm32f1xx_hal_rtc.c **** 
 727:src/stm32f1xx_hal_rtc.c ****     counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 728:src/stm32f1xx_hal_rtc.c ****                               ((uint32_t)sTime->Minutes * 60U) + \
 729:src/stm32f1xx_hal_rtc.c ****                               ((uint32_t)sTime->Seconds));
 730:src/stm32f1xx_hal_rtc.c ****   }
 731:src/stm32f1xx_hal_rtc.c ****   else
 732:src/stm32f1xx_hal_rtc.c ****   {
 733:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 734:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 735:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 736:src/stm32f1xx_hal_rtc.c **** 
 737:src/stm32f1xx_hal_rtc.c ****     counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 738:src/stm32f1xx_hal_rtc.c ****                     ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 739:src/stm32f1xx_hal_rtc.c ****                     ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 740:src/stm32f1xx_hal_rtc.c ****   }
 741:src/stm32f1xx_hal_rtc.c **** 
 742:src/stm32f1xx_hal_rtc.c ****   /* Write time counter in RTC registers */
 743:src/stm32f1xx_hal_rtc.c ****   if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 744:src/stm32f1xx_hal_rtc.c ****   {
 745:src/stm32f1xx_hal_rtc.c ****     /* Set RTC state */
 746:src/stm32f1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 747:src/stm32f1xx_hal_rtc.c **** 
 748:src/stm32f1xx_hal_rtc.c ****     /* Process Unlocked */
 749:src/stm32f1xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 750:src/stm32f1xx_hal_rtc.c **** 
 751:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
 752:src/stm32f1xx_hal_rtc.c ****   }
 753:src/stm32f1xx_hal_rtc.c ****   else
 754:src/stm32f1xx_hal_rtc.c ****   {
 755:src/stm32f1xx_hal_rtc.c ****     /* Clear Second and overflow flags */
 756:src/stm32f1xx_hal_rtc.c ****     CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 757:src/stm32f1xx_hal_rtc.c **** 
 758:src/stm32f1xx_hal_rtc.c ****     /* Read current Alarm counter in RTC registers */
 759:src/stm32f1xx_hal_rtc.c ****     counter_alarm = RTC_ReadAlarmCounter(hrtc);
 760:src/stm32f1xx_hal_rtc.c **** 
 761:src/stm32f1xx_hal_rtc.c ****     /* Set again alarm to match with new time if enabled */
 762:src/stm32f1xx_hal_rtc.c ****     if (counter_alarm != RTC_ALARM_RESETVALUE)
 763:src/stm32f1xx_hal_rtc.c ****     {
 764:src/stm32f1xx_hal_rtc.c ****       if (counter_alarm < counter_time)
 765:src/stm32f1xx_hal_rtc.c ****       {
 766:src/stm32f1xx_hal_rtc.c ****         /* Add 1 day to alarm counter*/
 767:src/stm32f1xx_hal_rtc.c ****         counter_alarm += (uint32_t)(24U * 3600U);
 768:src/stm32f1xx_hal_rtc.c **** 
 769:src/stm32f1xx_hal_rtc.c ****         /* Write new Alarm counter in RTC registers */
 770:src/stm32f1xx_hal_rtc.c ****         if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 771:src/stm32f1xx_hal_rtc.c ****         {
 772:src/stm32f1xx_hal_rtc.c ****           /* Set RTC state */
 773:src/stm32f1xx_hal_rtc.c ****           hrtc->State = HAL_RTC_STATE_ERROR;
 774:src/stm32f1xx_hal_rtc.c **** 
 775:src/stm32f1xx_hal_rtc.c ****           /* Process Unlocked */
 776:src/stm32f1xx_hal_rtc.c ****           __HAL_UNLOCK(hrtc);
 777:src/stm32f1xx_hal_rtc.c **** 
 778:src/stm32f1xx_hal_rtc.c ****           return HAL_ERROR;
ARM GAS  /tmp/ccM6Uqrc.s 			page 16


 779:src/stm32f1xx_hal_rtc.c ****         }
 780:src/stm32f1xx_hal_rtc.c ****       }
 781:src/stm32f1xx_hal_rtc.c ****     }
 782:src/stm32f1xx_hal_rtc.c **** 
 783:src/stm32f1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 784:src/stm32f1xx_hal_rtc.c **** 
 785:src/stm32f1xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 786:src/stm32f1xx_hal_rtc.c **** 
 787:src/stm32f1xx_hal_rtc.c ****     return HAL_OK;
 788:src/stm32f1xx_hal_rtc.c ****   }
 789:src/stm32f1xx_hal_rtc.c **** }
 790:src/stm32f1xx_hal_rtc.c **** 
 791:src/stm32f1xx_hal_rtc.c **** /**
 792:src/stm32f1xx_hal_rtc.c ****   * @brief  Gets RTC current time.
 793:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
 794:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
 795:src/stm32f1xx_hal_rtc.c ****   * @param  sTime: Pointer to Time structure
 796:src/stm32f1xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
 797:src/stm32f1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 798:src/stm32f1xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 799:src/stm32f1xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 800:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
 801:src/stm32f1xx_hal_rtc.c ****   */
 802:src/stm32f1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 803:src/stm32f1xx_hal_rtc.c **** {
 804:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 805:src/stm32f1xx_hal_rtc.c **** 
 806:src/stm32f1xx_hal_rtc.c ****   /* Check input parameters */
 807:src/stm32f1xx_hal_rtc.c ****   if ((hrtc == NULL) || (sTime == NULL))
 808:src/stm32f1xx_hal_rtc.c ****   {
 809:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
 810:src/stm32f1xx_hal_rtc.c ****   }
 811:src/stm32f1xx_hal_rtc.c **** 
 812:src/stm32f1xx_hal_rtc.c ****   /* Check the parameters */
 813:src/stm32f1xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 814:src/stm32f1xx_hal_rtc.c **** 
 815:src/stm32f1xx_hal_rtc.c ****   /* Check if counter overflow occurred */
 816:src/stm32f1xx_hal_rtc.c ****   if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 817:src/stm32f1xx_hal_rtc.c ****   {
 818:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
 819:src/stm32f1xx_hal_rtc.c ****   }
 820:src/stm32f1xx_hal_rtc.c **** 
 821:src/stm32f1xx_hal_rtc.c ****   /* Read the time counter*/
 822:src/stm32f1xx_hal_rtc.c ****   counter_time = RTC_ReadTimeCounter(hrtc);
 823:src/stm32f1xx_hal_rtc.c **** 
 824:src/stm32f1xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 825:src/stm32f1xx_hal_rtc.c ****   hours = counter_time / 3600U;
 826:src/stm32f1xx_hal_rtc.c ****   sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 827:src/stm32f1xx_hal_rtc.c ****   sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 828:src/stm32f1xx_hal_rtc.c **** 
 829:src/stm32f1xx_hal_rtc.c ****   if (hours >= 24U)
 830:src/stm32f1xx_hal_rtc.c ****   {
 831:src/stm32f1xx_hal_rtc.c ****     /* Get number of days elapsed from last calculation */
 832:src/stm32f1xx_hal_rtc.c ****     days_elapsed = (hours / 24U);
 833:src/stm32f1xx_hal_rtc.c **** 
 834:src/stm32f1xx_hal_rtc.c ****     /* Set Hours in RTC_TimeTypeDef structure*/
 835:src/stm32f1xx_hal_rtc.c ****     sTime->Hours = (hours % 24U);
ARM GAS  /tmp/ccM6Uqrc.s 			page 17


 836:src/stm32f1xx_hal_rtc.c **** 
 837:src/stm32f1xx_hal_rtc.c ****     /* Read Alarm counter in RTC registers */
 838:src/stm32f1xx_hal_rtc.c ****     counter_alarm = RTC_ReadAlarmCounter(hrtc);
 839:src/stm32f1xx_hal_rtc.c **** 
 840:src/stm32f1xx_hal_rtc.c ****     /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
 841:src/stm32f1xx_hal_rtc.c ****     if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 842:src/stm32f1xx_hal_rtc.c ****     {
 843:src/stm32f1xx_hal_rtc.c ****       counter_alarm -= counter_time;
 844:src/stm32f1xx_hal_rtc.c ****     }
 845:src/stm32f1xx_hal_rtc.c ****     else
 846:src/stm32f1xx_hal_rtc.c ****     {
 847:src/stm32f1xx_hal_rtc.c ****       /* In case of counter_alarm < counter_time */
 848:src/stm32f1xx_hal_rtc.c ****       /* Alarm expiration already occurred but alarm not deactivated */
 849:src/stm32f1xx_hal_rtc.c ****       counter_alarm = RTC_ALARM_RESETVALUE;
 850:src/stm32f1xx_hal_rtc.c ****     }
 851:src/stm32f1xx_hal_rtc.c **** 
 852:src/stm32f1xx_hal_rtc.c ****     /* Set updated time in decreasing counter by number of days elapsed */
 853:src/stm32f1xx_hal_rtc.c ****     counter_time -= (days_elapsed * 24U * 3600U);
 854:src/stm32f1xx_hal_rtc.c **** 
 855:src/stm32f1xx_hal_rtc.c ****     /* Write time counter in RTC registers */
 856:src/stm32f1xx_hal_rtc.c ****     if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 857:src/stm32f1xx_hal_rtc.c ****     {
 858:src/stm32f1xx_hal_rtc.c ****       return HAL_ERROR;
 859:src/stm32f1xx_hal_rtc.c ****     }
 860:src/stm32f1xx_hal_rtc.c **** 
 861:src/stm32f1xx_hal_rtc.c ****     /* Set updated alarm to be set */
 862:src/stm32f1xx_hal_rtc.c ****     if (counter_alarm != RTC_ALARM_RESETVALUE)
 863:src/stm32f1xx_hal_rtc.c ****     {
 864:src/stm32f1xx_hal_rtc.c ****       counter_alarm += counter_time;
 865:src/stm32f1xx_hal_rtc.c **** 
 866:src/stm32f1xx_hal_rtc.c ****       /* Write time counter in RTC registers */
 867:src/stm32f1xx_hal_rtc.c ****       if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 868:src/stm32f1xx_hal_rtc.c ****       {
 869:src/stm32f1xx_hal_rtc.c ****         return HAL_ERROR;
 870:src/stm32f1xx_hal_rtc.c ****       }
 871:src/stm32f1xx_hal_rtc.c ****     }
 872:src/stm32f1xx_hal_rtc.c ****     else
 873:src/stm32f1xx_hal_rtc.c ****     {
 874:src/stm32f1xx_hal_rtc.c ****       /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
 875:src/stm32f1xx_hal_rtc.c ****       if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 876:src/stm32f1xx_hal_rtc.c ****       {
 877:src/stm32f1xx_hal_rtc.c ****         return HAL_ERROR;
 878:src/stm32f1xx_hal_rtc.c ****       }
 879:src/stm32f1xx_hal_rtc.c ****     }
 880:src/stm32f1xx_hal_rtc.c **** 
 881:src/stm32f1xx_hal_rtc.c ****     /* Update date */
 882:src/stm32f1xx_hal_rtc.c ****     RTC_DateUpdate(hrtc, days_elapsed);
 883:src/stm32f1xx_hal_rtc.c ****   }
 884:src/stm32f1xx_hal_rtc.c ****   else
 885:src/stm32f1xx_hal_rtc.c ****   {
 886:src/stm32f1xx_hal_rtc.c ****     sTime->Hours = hours;
 887:src/stm32f1xx_hal_rtc.c ****   }
 888:src/stm32f1xx_hal_rtc.c **** 
 889:src/stm32f1xx_hal_rtc.c ****   /* Check the input parameters format */
 890:src/stm32f1xx_hal_rtc.c ****   if (Format != RTC_FORMAT_BIN)
 891:src/stm32f1xx_hal_rtc.c ****   {
 892:src/stm32f1xx_hal_rtc.c ****     /* Convert the time structure parameters to BCD format */
ARM GAS  /tmp/ccM6Uqrc.s 			page 18


 893:src/stm32f1xx_hal_rtc.c ****     sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 894:src/stm32f1xx_hal_rtc.c ****     sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 895:src/stm32f1xx_hal_rtc.c ****     sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 896:src/stm32f1xx_hal_rtc.c ****   }
 897:src/stm32f1xx_hal_rtc.c **** 
 898:src/stm32f1xx_hal_rtc.c ****   return HAL_OK;
 899:src/stm32f1xx_hal_rtc.c **** }
 900:src/stm32f1xx_hal_rtc.c **** 
 901:src/stm32f1xx_hal_rtc.c **** 
 902:src/stm32f1xx_hal_rtc.c **** /**
 903:src/stm32f1xx_hal_rtc.c ****   * @brief  Sets RTC current date.
 904:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
 905:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
 906:src/stm32f1xx_hal_rtc.c ****   * @param  sDate: Pointer to date structure
 907:src/stm32f1xx_hal_rtc.c ****   * @param  Format: specifies the format of the entered parameters.
 908:src/stm32f1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 909:src/stm32f1xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 910:src/stm32f1xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 911:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
 912:src/stm32f1xx_hal_rtc.c ****   */
 913:src/stm32f1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 914:src/stm32f1xx_hal_rtc.c **** {
 915:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 916:src/stm32f1xx_hal_rtc.c **** 
 917:src/stm32f1xx_hal_rtc.c ****   /* Check input parameters */
 918:src/stm32f1xx_hal_rtc.c ****   if ((hrtc == NULL) || (sDate == NULL))
 919:src/stm32f1xx_hal_rtc.c ****   {
 920:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
 921:src/stm32f1xx_hal_rtc.c ****   }
 922:src/stm32f1xx_hal_rtc.c **** 
 923:src/stm32f1xx_hal_rtc.c ****   /* Check the parameters */
 924:src/stm32f1xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 925:src/stm32f1xx_hal_rtc.c **** 
 926:src/stm32f1xx_hal_rtc.c ****   /* Process Locked */
 927:src/stm32f1xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 928:src/stm32f1xx_hal_rtc.c **** 
 929:src/stm32f1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 930:src/stm32f1xx_hal_rtc.c **** 
 931:src/stm32f1xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
 932:src/stm32f1xx_hal_rtc.c ****   {
 933:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
 934:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
 935:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date));
 936:src/stm32f1xx_hal_rtc.c **** 
 937:src/stm32f1xx_hal_rtc.c ****     /* Change the current date */
 938:src/stm32f1xx_hal_rtc.c ****     hrtc->DateToUpdate.Year  = sDate->Year;
 939:src/stm32f1xx_hal_rtc.c ****     hrtc->DateToUpdate.Month = sDate->Month;
 940:src/stm32f1xx_hal_rtc.c ****     hrtc->DateToUpdate.Date  = sDate->Date;
 941:src/stm32f1xx_hal_rtc.c ****   }
 942:src/stm32f1xx_hal_rtc.c ****   else
 943:src/stm32f1xx_hal_rtc.c ****   {
 944:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 945:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 946:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 947:src/stm32f1xx_hal_rtc.c **** 
 948:src/stm32f1xx_hal_rtc.c ****     /* Change the current date */
 949:src/stm32f1xx_hal_rtc.c ****     hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
ARM GAS  /tmp/ccM6Uqrc.s 			page 19


 950:src/stm32f1xx_hal_rtc.c ****     hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 951:src/stm32f1xx_hal_rtc.c ****     hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 952:src/stm32f1xx_hal_rtc.c ****   }
 953:src/stm32f1xx_hal_rtc.c **** 
 954:src/stm32f1xx_hal_rtc.c ****   /* WeekDay set by user can be ignored because automatically calculated */
 955:src/stm32f1xx_hal_rtc.c ****   hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hr
 956:src/stm32f1xx_hal_rtc.c ****   sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 957:src/stm32f1xx_hal_rtc.c **** 
 958:src/stm32f1xx_hal_rtc.c ****   /* Reset time to be aligned on the same day */
 959:src/stm32f1xx_hal_rtc.c ****   /* Read the time counter*/
 960:src/stm32f1xx_hal_rtc.c ****   counter_time = RTC_ReadTimeCounter(hrtc);
 961:src/stm32f1xx_hal_rtc.c **** 
 962:src/stm32f1xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 963:src/stm32f1xx_hal_rtc.c ****   hours = counter_time / 3600U;
 964:src/stm32f1xx_hal_rtc.c ****   if (hours > 24U)
 965:src/stm32f1xx_hal_rtc.c ****   {
 966:src/stm32f1xx_hal_rtc.c ****     /* Set updated time in decreasing counter by number of days elapsed */
 967:src/stm32f1xx_hal_rtc.c ****     counter_time -= ((hours / 24U) * 24U * 3600U);
 968:src/stm32f1xx_hal_rtc.c ****     /* Write time counter in RTC registers */
 969:src/stm32f1xx_hal_rtc.c ****     if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 970:src/stm32f1xx_hal_rtc.c ****     {
 971:src/stm32f1xx_hal_rtc.c ****       /* Set RTC state */
 972:src/stm32f1xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_ERROR;
 973:src/stm32f1xx_hal_rtc.c **** 
 974:src/stm32f1xx_hal_rtc.c ****       /* Process Unlocked */
 975:src/stm32f1xx_hal_rtc.c ****       __HAL_UNLOCK(hrtc);
 976:src/stm32f1xx_hal_rtc.c **** 
 977:src/stm32f1xx_hal_rtc.c ****       return HAL_ERROR;
 978:src/stm32f1xx_hal_rtc.c ****     }
 979:src/stm32f1xx_hal_rtc.c **** 
 980:src/stm32f1xx_hal_rtc.c ****     /* Read current Alarm counter in RTC registers */
 981:src/stm32f1xx_hal_rtc.c ****     counter_alarm = RTC_ReadAlarmCounter(hrtc);
 982:src/stm32f1xx_hal_rtc.c **** 
 983:src/stm32f1xx_hal_rtc.c ****     /* Set again alarm to match with new time if enabled */
 984:src/stm32f1xx_hal_rtc.c ****     if (counter_alarm != RTC_ALARM_RESETVALUE)
 985:src/stm32f1xx_hal_rtc.c ****     {
 986:src/stm32f1xx_hal_rtc.c ****       if (counter_alarm < counter_time)
 987:src/stm32f1xx_hal_rtc.c ****       {
 988:src/stm32f1xx_hal_rtc.c ****         /* Add 1 day to alarm counter*/
 989:src/stm32f1xx_hal_rtc.c ****         counter_alarm += (uint32_t)(24U * 3600U);
 990:src/stm32f1xx_hal_rtc.c **** 
 991:src/stm32f1xx_hal_rtc.c ****         /* Write new Alarm counter in RTC registers */
 992:src/stm32f1xx_hal_rtc.c ****         if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 993:src/stm32f1xx_hal_rtc.c ****         {
 994:src/stm32f1xx_hal_rtc.c ****           /* Set RTC state */
 995:src/stm32f1xx_hal_rtc.c ****           hrtc->State = HAL_RTC_STATE_ERROR;
 996:src/stm32f1xx_hal_rtc.c **** 
 997:src/stm32f1xx_hal_rtc.c ****           /* Process Unlocked */
 998:src/stm32f1xx_hal_rtc.c ****           __HAL_UNLOCK(hrtc);
 999:src/stm32f1xx_hal_rtc.c **** 
1000:src/stm32f1xx_hal_rtc.c ****           return HAL_ERROR;
1001:src/stm32f1xx_hal_rtc.c ****         }
1002:src/stm32f1xx_hal_rtc.c ****       }
1003:src/stm32f1xx_hal_rtc.c ****     }
1004:src/stm32f1xx_hal_rtc.c **** 
1005:src/stm32f1xx_hal_rtc.c **** 
1006:src/stm32f1xx_hal_rtc.c ****   }
ARM GAS  /tmp/ccM6Uqrc.s 			page 20


1007:src/stm32f1xx_hal_rtc.c **** 
1008:src/stm32f1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY ;
1009:src/stm32f1xx_hal_rtc.c **** 
1010:src/stm32f1xx_hal_rtc.c ****   /* Process Unlocked */
1011:src/stm32f1xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
1012:src/stm32f1xx_hal_rtc.c **** 
1013:src/stm32f1xx_hal_rtc.c ****   return HAL_OK;
1014:src/stm32f1xx_hal_rtc.c **** }
1015:src/stm32f1xx_hal_rtc.c **** 
1016:src/stm32f1xx_hal_rtc.c **** /**
1017:src/stm32f1xx_hal_rtc.c ****   * @brief  Gets RTC current date.
1018:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
1019:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1020:src/stm32f1xx_hal_rtc.c ****   * @param  sDate: Pointer to Date structure
1021:src/stm32f1xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
1022:src/stm32f1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1023:src/stm32f1xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN:  Binary data format
1024:src/stm32f1xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD:  BCD data format
1025:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
1026:src/stm32f1xx_hal_rtc.c ****   */
1027:src/stm32f1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
1028:src/stm32f1xx_hal_rtc.c **** {
1029:src/stm32f1xx_hal_rtc.c ****   RTC_TimeTypeDef stime = {0U};
1030:src/stm32f1xx_hal_rtc.c **** 
1031:src/stm32f1xx_hal_rtc.c ****   /* Check input parameters */
1032:src/stm32f1xx_hal_rtc.c ****   if ((hrtc == NULL) || (sDate == NULL))
1033:src/stm32f1xx_hal_rtc.c ****   {
1034:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
1035:src/stm32f1xx_hal_rtc.c ****   }
1036:src/stm32f1xx_hal_rtc.c **** 
1037:src/stm32f1xx_hal_rtc.c ****   /* Check the parameters */
1038:src/stm32f1xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1039:src/stm32f1xx_hal_rtc.c **** 
1040:src/stm32f1xx_hal_rtc.c ****   /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
1041:src/stm32f1xx_hal_rtc.c ****   if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
1042:src/stm32f1xx_hal_rtc.c ****   {
1043:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
1044:src/stm32f1xx_hal_rtc.c ****   }
1045:src/stm32f1xx_hal_rtc.c **** 
1046:src/stm32f1xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
1047:src/stm32f1xx_hal_rtc.c ****   sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
1048:src/stm32f1xx_hal_rtc.c ****   sDate->Year     = hrtc->DateToUpdate.Year;
1049:src/stm32f1xx_hal_rtc.c ****   sDate->Month    = hrtc->DateToUpdate.Month;
1050:src/stm32f1xx_hal_rtc.c ****   sDate->Date     = hrtc->DateToUpdate.Date;
1051:src/stm32f1xx_hal_rtc.c **** 
1052:src/stm32f1xx_hal_rtc.c ****   /* Check the input parameters format */
1053:src/stm32f1xx_hal_rtc.c ****   if (Format != RTC_FORMAT_BIN)
1054:src/stm32f1xx_hal_rtc.c ****   {
1055:src/stm32f1xx_hal_rtc.c ****     /* Convert the date structure parameters to BCD format */
1056:src/stm32f1xx_hal_rtc.c ****     sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
1057:src/stm32f1xx_hal_rtc.c ****     sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
1058:src/stm32f1xx_hal_rtc.c ****     sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
1059:src/stm32f1xx_hal_rtc.c ****   }
1060:src/stm32f1xx_hal_rtc.c ****   return HAL_OK;
1061:src/stm32f1xx_hal_rtc.c **** }
1062:src/stm32f1xx_hal_rtc.c **** 
1063:src/stm32f1xx_hal_rtc.c **** /**
ARM GAS  /tmp/ccM6Uqrc.s 			page 21


1064:src/stm32f1xx_hal_rtc.c ****   * @}
1065:src/stm32f1xx_hal_rtc.c ****   */
1066:src/stm32f1xx_hal_rtc.c **** 
1067:src/stm32f1xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group3 Alarm functions
1068:src/stm32f1xx_hal_rtc.c ****  *  @brief   RTC Alarm functions
1069:src/stm32f1xx_hal_rtc.c ****  *
1070:src/stm32f1xx_hal_rtc.c **** @verbatim
1071:src/stm32f1xx_hal_rtc.c ****  ===============================================================================
1072:src/stm32f1xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
1073:src/stm32f1xx_hal_rtc.c ****  ===============================================================================
1074:src/stm32f1xx_hal_rtc.c **** 
1075:src/stm32f1xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Alarm feature
1076:src/stm32f1xx_hal_rtc.c **** 
1077:src/stm32f1xx_hal_rtc.c **** @endverbatim
1078:src/stm32f1xx_hal_rtc.c ****   * @{
1079:src/stm32f1xx_hal_rtc.c ****   */
1080:src/stm32f1xx_hal_rtc.c **** 
1081:src/stm32f1xx_hal_rtc.c **** /**
1082:src/stm32f1xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm.
1083:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
1084:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1085:src/stm32f1xx_hal_rtc.c ****   * @param  sAlarm: Pointer to Alarm structure
1086:src/stm32f1xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
1087:src/stm32f1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1088:src/stm32f1xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1089:src/stm32f1xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1090:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
1091:src/stm32f1xx_hal_rtc.c ****   */
1092:src/stm32f1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
1093:src/stm32f1xx_hal_rtc.c **** {
1094:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_alarm = 0U, counter_time;
1095:src/stm32f1xx_hal_rtc.c ****   RTC_TimeTypeDef stime = {0U};
1096:src/stm32f1xx_hal_rtc.c **** 
1097:src/stm32f1xx_hal_rtc.c ****   /* Check input parameters */
1098:src/stm32f1xx_hal_rtc.c ****   if ((hrtc == NULL) || (sAlarm == NULL))
1099:src/stm32f1xx_hal_rtc.c ****   {
1100:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
1101:src/stm32f1xx_hal_rtc.c ****   }
1102:src/stm32f1xx_hal_rtc.c **** 
1103:src/stm32f1xx_hal_rtc.c ****   /* Check the parameters */
1104:src/stm32f1xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1105:src/stm32f1xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1106:src/stm32f1xx_hal_rtc.c **** 
1107:src/stm32f1xx_hal_rtc.c ****   /* Process Locked */
1108:src/stm32f1xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1109:src/stm32f1xx_hal_rtc.c **** 
1110:src/stm32f1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1111:src/stm32f1xx_hal_rtc.c **** 
1112:src/stm32f1xx_hal_rtc.c ****   /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
1113:src/stm32f1xx_hal_rtc.c ****   if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
1114:src/stm32f1xx_hal_rtc.c ****   {
1115:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
1116:src/stm32f1xx_hal_rtc.c ****   }
1117:src/stm32f1xx_hal_rtc.c **** 
1118:src/stm32f1xx_hal_rtc.c ****   /* Convert time in seconds */
1119:src/stm32f1xx_hal_rtc.c ****   counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
1120:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Minutes * 60U) + \
ARM GAS  /tmp/ccM6Uqrc.s 			page 22


1121:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Seconds));
1122:src/stm32f1xx_hal_rtc.c **** 
1123:src/stm32f1xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
1124:src/stm32f1xx_hal_rtc.c ****   {
1125:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1126:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1127:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1128:src/stm32f1xx_hal_rtc.c **** 
1129:src/stm32f1xx_hal_rtc.c ****     counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
1130:src/stm32f1xx_hal_rtc.c ****                                ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
1131:src/stm32f1xx_hal_rtc.c ****                                ((uint32_t)sAlarm->AlarmTime.Seconds));
1132:src/stm32f1xx_hal_rtc.c ****   }
1133:src/stm32f1xx_hal_rtc.c ****   else
1134:src/stm32f1xx_hal_rtc.c ****   {
1135:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1136:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1137:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1138:src/stm32f1xx_hal_rtc.c **** 
1139:src/stm32f1xx_hal_rtc.c ****     counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
1140:src/stm32f1xx_hal_rtc.c ****                      ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
1141:src/stm32f1xx_hal_rtc.c ****                      ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1142:src/stm32f1xx_hal_rtc.c ****   }
1143:src/stm32f1xx_hal_rtc.c **** 
1144:src/stm32f1xx_hal_rtc.c ****   /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
1145:src/stm32f1xx_hal_rtc.c ****   if (counter_alarm < counter_time)
1146:src/stm32f1xx_hal_rtc.c ****   {
1147:src/stm32f1xx_hal_rtc.c ****     /* Add 1 day to alarm counter*/
1148:src/stm32f1xx_hal_rtc.c ****     counter_alarm += (uint32_t)(24U * 3600U);
1149:src/stm32f1xx_hal_rtc.c ****   }
1150:src/stm32f1xx_hal_rtc.c **** 
1151:src/stm32f1xx_hal_rtc.c ****   /* Write Alarm counter in RTC registers */
1152:src/stm32f1xx_hal_rtc.c ****   if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
1153:src/stm32f1xx_hal_rtc.c ****   {
1154:src/stm32f1xx_hal_rtc.c ****     /* Set RTC state */
1155:src/stm32f1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
1156:src/stm32f1xx_hal_rtc.c **** 
1157:src/stm32f1xx_hal_rtc.c ****     /* Process Unlocked */
1158:src/stm32f1xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
1159:src/stm32f1xx_hal_rtc.c **** 
1160:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
1161:src/stm32f1xx_hal_rtc.c ****   }
1162:src/stm32f1xx_hal_rtc.c ****   else
1163:src/stm32f1xx_hal_rtc.c ****   {
1164:src/stm32f1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
1165:src/stm32f1xx_hal_rtc.c **** 
1166:src/stm32f1xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
1167:src/stm32f1xx_hal_rtc.c **** 
1168:src/stm32f1xx_hal_rtc.c ****     return HAL_OK;
1169:src/stm32f1xx_hal_rtc.c ****   }
1170:src/stm32f1xx_hal_rtc.c **** }
1171:src/stm32f1xx_hal_rtc.c **** 
1172:src/stm32f1xx_hal_rtc.c **** /**
1173:src/stm32f1xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm with Interrupt
1174:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
1175:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1176:src/stm32f1xx_hal_rtc.c ****   * @param  sAlarm: Pointer to Alarm structure
1177:src/stm32f1xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
ARM GAS  /tmp/ccM6Uqrc.s 			page 23


1178:src/stm32f1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1179:src/stm32f1xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1180:src/stm32f1xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1181:src/stm32f1xx_hal_rtc.c ****   * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
1182:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
1183:src/stm32f1xx_hal_rtc.c ****   */
1184:src/stm32f1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
1185:src/stm32f1xx_hal_rtc.c **** {
1186:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_alarm = 0U, counter_time;
1187:src/stm32f1xx_hal_rtc.c ****   RTC_TimeTypeDef stime = {0U};
1188:src/stm32f1xx_hal_rtc.c **** 
1189:src/stm32f1xx_hal_rtc.c ****   /* Check input parameters */
1190:src/stm32f1xx_hal_rtc.c ****   if ((hrtc == NULL) || (sAlarm == NULL))
1191:src/stm32f1xx_hal_rtc.c ****   {
1192:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
1193:src/stm32f1xx_hal_rtc.c ****   }
1194:src/stm32f1xx_hal_rtc.c **** 
1195:src/stm32f1xx_hal_rtc.c ****   /* Check the parameters */
1196:src/stm32f1xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1197:src/stm32f1xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1198:src/stm32f1xx_hal_rtc.c **** 
1199:src/stm32f1xx_hal_rtc.c ****   /* Process Locked */
1200:src/stm32f1xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1201:src/stm32f1xx_hal_rtc.c **** 
1202:src/stm32f1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1203:src/stm32f1xx_hal_rtc.c **** 
1204:src/stm32f1xx_hal_rtc.c ****   /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
1205:src/stm32f1xx_hal_rtc.c ****   if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
1206:src/stm32f1xx_hal_rtc.c ****   {
1207:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
1208:src/stm32f1xx_hal_rtc.c ****   }
1209:src/stm32f1xx_hal_rtc.c **** 
1210:src/stm32f1xx_hal_rtc.c ****   /* Convert time in seconds */
1211:src/stm32f1xx_hal_rtc.c ****   counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
1212:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Minutes * 60U) + \
1213:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Seconds));
1214:src/stm32f1xx_hal_rtc.c **** 
1215:src/stm32f1xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
1216:src/stm32f1xx_hal_rtc.c ****   {
1217:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1218:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1219:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1220:src/stm32f1xx_hal_rtc.c **** 
1221:src/stm32f1xx_hal_rtc.c ****     counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
1222:src/stm32f1xx_hal_rtc.c ****                                ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
1223:src/stm32f1xx_hal_rtc.c ****                                ((uint32_t)sAlarm->AlarmTime.Seconds));
1224:src/stm32f1xx_hal_rtc.c ****   }
1225:src/stm32f1xx_hal_rtc.c ****   else
1226:src/stm32f1xx_hal_rtc.c ****   {
1227:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1228:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1229:src/stm32f1xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1230:src/stm32f1xx_hal_rtc.c **** 
1231:src/stm32f1xx_hal_rtc.c ****     counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
1232:src/stm32f1xx_hal_rtc.c ****                      ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
1233:src/stm32f1xx_hal_rtc.c ****                      ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1234:src/stm32f1xx_hal_rtc.c ****   }
ARM GAS  /tmp/ccM6Uqrc.s 			page 24


1235:src/stm32f1xx_hal_rtc.c **** 
1236:src/stm32f1xx_hal_rtc.c ****   /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
1237:src/stm32f1xx_hal_rtc.c ****   if (counter_alarm < counter_time)
1238:src/stm32f1xx_hal_rtc.c ****   {
1239:src/stm32f1xx_hal_rtc.c ****     /* Add 1 day to alarm counter*/
1240:src/stm32f1xx_hal_rtc.c ****     counter_alarm += (uint32_t)(24U * 3600U);
1241:src/stm32f1xx_hal_rtc.c ****   }
1242:src/stm32f1xx_hal_rtc.c **** 
1243:src/stm32f1xx_hal_rtc.c ****   /* Write alarm counter in RTC registers */
1244:src/stm32f1xx_hal_rtc.c ****   if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
1245:src/stm32f1xx_hal_rtc.c ****   {
1246:src/stm32f1xx_hal_rtc.c ****     /* Set RTC state */
1247:src/stm32f1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
1248:src/stm32f1xx_hal_rtc.c **** 
1249:src/stm32f1xx_hal_rtc.c ****     /* Process Unlocked */
1250:src/stm32f1xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
1251:src/stm32f1xx_hal_rtc.c **** 
1252:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
1253:src/stm32f1xx_hal_rtc.c ****   }
1254:src/stm32f1xx_hal_rtc.c ****   else
1255:src/stm32f1xx_hal_rtc.c ****   {
1256:src/stm32f1xx_hal_rtc.c ****     /* Clear flag alarm A */
1257:src/stm32f1xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
1258:src/stm32f1xx_hal_rtc.c **** 
1259:src/stm32f1xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1260:src/stm32f1xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
1261:src/stm32f1xx_hal_rtc.c **** 
1262:src/stm32f1xx_hal_rtc.c ****     /* RTC Alarm Interrupt Configuration: EXTI configuration */
1263:src/stm32f1xx_hal_rtc.c ****     __HAL_RTC_ALARM_EXTI_ENABLE_IT();
1264:src/stm32f1xx_hal_rtc.c **** 
1265:src/stm32f1xx_hal_rtc.c ****     __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
1266:src/stm32f1xx_hal_rtc.c **** 
1267:src/stm32f1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
1268:src/stm32f1xx_hal_rtc.c **** 
1269:src/stm32f1xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
1270:src/stm32f1xx_hal_rtc.c **** 
1271:src/stm32f1xx_hal_rtc.c ****     return HAL_OK;
1272:src/stm32f1xx_hal_rtc.c ****   }
1273:src/stm32f1xx_hal_rtc.c **** }
1274:src/stm32f1xx_hal_rtc.c **** 
1275:src/stm32f1xx_hal_rtc.c **** /**
1276:src/stm32f1xx_hal_rtc.c ****   * @brief  Gets the RTC Alarm value and masks.
1277:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
1278:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1279:src/stm32f1xx_hal_rtc.c ****   * @param  sAlarm: Pointer to Date structure
1280:src/stm32f1xx_hal_rtc.c ****   * @param  Alarm: Specifies the Alarm.
1281:src/stm32f1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1282:src/stm32f1xx_hal_rtc.c ****   *             @arg RTC_ALARM_A: Alarm
1283:src/stm32f1xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
1284:src/stm32f1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1285:src/stm32f1xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1286:src/stm32f1xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1287:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
1288:src/stm32f1xx_hal_rtc.c ****   */
1289:src/stm32f1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alar
1290:src/stm32f1xx_hal_rtc.c **** {
1291:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_alarm = 0U;
ARM GAS  /tmp/ccM6Uqrc.s 			page 25


1292:src/stm32f1xx_hal_rtc.c **** 
1293:src/stm32f1xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
1294:src/stm32f1xx_hal_rtc.c ****   UNUSED(Alarm);
1295:src/stm32f1xx_hal_rtc.c **** 
1296:src/stm32f1xx_hal_rtc.c ****   /* Check input parameters */
1297:src/stm32f1xx_hal_rtc.c ****   if ((hrtc == NULL) || (sAlarm == NULL))
1298:src/stm32f1xx_hal_rtc.c ****   {
1299:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
1300:src/stm32f1xx_hal_rtc.c ****   }
1301:src/stm32f1xx_hal_rtc.c **** 
1302:src/stm32f1xx_hal_rtc.c ****   /* Check the parameters */
1303:src/stm32f1xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1304:src/stm32f1xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1305:src/stm32f1xx_hal_rtc.c **** 
1306:src/stm32f1xx_hal_rtc.c ****   /* Read Alarm counter in RTC registers */
1307:src/stm32f1xx_hal_rtc.c ****   counter_alarm = RTC_ReadAlarmCounter(hrtc);
1308:src/stm32f1xx_hal_rtc.c **** 
1309:src/stm32f1xx_hal_rtc.c ****   /* Fill the structure with the read parameters */
1310:src/stm32f1xx_hal_rtc.c ****   /* Set hours in a day range (between 0 to 24)*/
1311:src/stm32f1xx_hal_rtc.c ****   sAlarm->AlarmTime.Hours   = (uint32_t)((counter_alarm / 3600U) % 24U);
1312:src/stm32f1xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes = (uint32_t)((counter_alarm % 3600U) / 60U);
1313:src/stm32f1xx_hal_rtc.c ****   sAlarm->AlarmTime.Seconds = (uint32_t)((counter_alarm % 3600U) % 60U);
1314:src/stm32f1xx_hal_rtc.c **** 
1315:src/stm32f1xx_hal_rtc.c ****   if (Format != RTC_FORMAT_BIN)
1316:src/stm32f1xx_hal_rtc.c ****   {
1317:src/stm32f1xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours   = RTC_ByteToBcd2(sAlarm->AlarmTime.Hours);
1318:src/stm32f1xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes);
1319:src/stm32f1xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds);
1320:src/stm32f1xx_hal_rtc.c ****   }
1321:src/stm32f1xx_hal_rtc.c **** 
1322:src/stm32f1xx_hal_rtc.c ****   return HAL_OK;
1323:src/stm32f1xx_hal_rtc.c **** }
1324:src/stm32f1xx_hal_rtc.c **** 
1325:src/stm32f1xx_hal_rtc.c **** /**
1326:src/stm32f1xx_hal_rtc.c ****   * @brief  Deactive the specified RTC Alarm
1327:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
1328:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1329:src/stm32f1xx_hal_rtc.c ****   * @param  Alarm: Specifies the Alarm.
1330:src/stm32f1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1331:src/stm32f1xx_hal_rtc.c ****   *            @arg RTC_ALARM_A:  AlarmA
1332:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
1333:src/stm32f1xx_hal_rtc.c ****   */
1334:src/stm32f1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
1335:src/stm32f1xx_hal_rtc.c **** {
1336:src/stm32f1xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
1337:src/stm32f1xx_hal_rtc.c ****   UNUSED(Alarm);
1338:src/stm32f1xx_hal_rtc.c **** 
1339:src/stm32f1xx_hal_rtc.c ****   /* Check the parameters */
1340:src/stm32f1xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1341:src/stm32f1xx_hal_rtc.c **** 
1342:src/stm32f1xx_hal_rtc.c ****   /* Check input parameters */
1343:src/stm32f1xx_hal_rtc.c ****   if (hrtc == NULL)
1344:src/stm32f1xx_hal_rtc.c ****   {
1345:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
1346:src/stm32f1xx_hal_rtc.c ****   }
1347:src/stm32f1xx_hal_rtc.c **** 
1348:src/stm32f1xx_hal_rtc.c ****   /* Process Locked */
ARM GAS  /tmp/ccM6Uqrc.s 			page 26


1349:src/stm32f1xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1350:src/stm32f1xx_hal_rtc.c **** 
1351:src/stm32f1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1352:src/stm32f1xx_hal_rtc.c **** 
1353:src/stm32f1xx_hal_rtc.c ****   /* In case of interrupt mode is used, the interrupt source must disabled */
1354:src/stm32f1xx_hal_rtc.c ****   __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
1355:src/stm32f1xx_hal_rtc.c **** 
1356:src/stm32f1xx_hal_rtc.c ****   /* Set Initialization mode */
1357:src/stm32f1xx_hal_rtc.c ****   if (RTC_EnterInitMode(hrtc) != HAL_OK)
1358:src/stm32f1xx_hal_rtc.c ****   {
1359:src/stm32f1xx_hal_rtc.c ****     /* Set RTC state */
1360:src/stm32f1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
1361:src/stm32f1xx_hal_rtc.c **** 
1362:src/stm32f1xx_hal_rtc.c ****     /* Process Unlocked */
1363:src/stm32f1xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
1364:src/stm32f1xx_hal_rtc.c **** 
1365:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
1366:src/stm32f1xx_hal_rtc.c ****   }
1367:src/stm32f1xx_hal_rtc.c ****   else
1368:src/stm32f1xx_hal_rtc.c ****   {
1369:src/stm32f1xx_hal_rtc.c ****     /* Clear flag alarm A */
1370:src/stm32f1xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
1371:src/stm32f1xx_hal_rtc.c **** 
1372:src/stm32f1xx_hal_rtc.c ****     /* Set to default values ALRH & ALRL registers */
1373:src/stm32f1xx_hal_rtc.c ****     WRITE_REG(hrtc->Instance->ALRH, RTC_ALARM_RESETVALUE_REGISTER);
1374:src/stm32f1xx_hal_rtc.c ****     WRITE_REG(hrtc->Instance->ALRL, RTC_ALARM_RESETVALUE_REGISTER);
1375:src/stm32f1xx_hal_rtc.c **** 
1376:src/stm32f1xx_hal_rtc.c ****     /* RTC Alarm Interrupt Configuration: Disable EXTI configuration */
1377:src/stm32f1xx_hal_rtc.c ****     __HAL_RTC_ALARM_EXTI_DISABLE_IT();
1378:src/stm32f1xx_hal_rtc.c **** 
1379:src/stm32f1xx_hal_rtc.c ****     /* Wait for synchro */
1380:src/stm32f1xx_hal_rtc.c ****     if (RTC_ExitInitMode(hrtc) != HAL_OK)
1381:src/stm32f1xx_hal_rtc.c ****     {
1382:src/stm32f1xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_ERROR;
1383:src/stm32f1xx_hal_rtc.c **** 
1384:src/stm32f1xx_hal_rtc.c ****       /* Process Unlocked */
1385:src/stm32f1xx_hal_rtc.c ****       __HAL_UNLOCK(hrtc);
1386:src/stm32f1xx_hal_rtc.c **** 
1387:src/stm32f1xx_hal_rtc.c ****       return HAL_ERROR;
1388:src/stm32f1xx_hal_rtc.c ****     }
1389:src/stm32f1xx_hal_rtc.c ****   }
1390:src/stm32f1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1391:src/stm32f1xx_hal_rtc.c **** 
1392:src/stm32f1xx_hal_rtc.c ****   /* Process Unlocked */
1393:src/stm32f1xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
1394:src/stm32f1xx_hal_rtc.c **** 
1395:src/stm32f1xx_hal_rtc.c ****   return HAL_OK;
1396:src/stm32f1xx_hal_rtc.c **** }
1397:src/stm32f1xx_hal_rtc.c **** 
1398:src/stm32f1xx_hal_rtc.c **** /**
1399:src/stm32f1xx_hal_rtc.c ****   * @brief  This function handles Alarm interrupt request.
1400:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
1401:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1402:src/stm32f1xx_hal_rtc.c ****   * @retval None
1403:src/stm32f1xx_hal_rtc.c ****   */
1404:src/stm32f1xx_hal_rtc.c **** void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
1405:src/stm32f1xx_hal_rtc.c **** {
ARM GAS  /tmp/ccM6Uqrc.s 			page 27


1406:src/stm32f1xx_hal_rtc.c ****   if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
1407:src/stm32f1xx_hal_rtc.c ****   {
1408:src/stm32f1xx_hal_rtc.c ****     /* Get the status of the Interrupt */
1409:src/stm32f1xx_hal_rtc.c ****     if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
1410:src/stm32f1xx_hal_rtc.c ****     {
1411:src/stm32f1xx_hal_rtc.c ****       /* AlarmA callback */
1412:src/stm32f1xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1413:src/stm32f1xx_hal_rtc.c ****       hrtc->AlarmAEventCallback(hrtc);
1414:src/stm32f1xx_hal_rtc.c **** #else
1415:src/stm32f1xx_hal_rtc.c ****       HAL_RTC_AlarmAEventCallback(hrtc);
1416:src/stm32f1xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
1417:src/stm32f1xx_hal_rtc.c **** 
1418:src/stm32f1xx_hal_rtc.c ****       /* Clear the Alarm interrupt pending bit */
1419:src/stm32f1xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
1420:src/stm32f1xx_hal_rtc.c ****     }
1421:src/stm32f1xx_hal_rtc.c ****   }
1422:src/stm32f1xx_hal_rtc.c **** 
1423:src/stm32f1xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
1424:src/stm32f1xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
1425:src/stm32f1xx_hal_rtc.c **** 
1426:src/stm32f1xx_hal_rtc.c ****   /* Change RTC state */
1427:src/stm32f1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1428:src/stm32f1xx_hal_rtc.c **** }
1429:src/stm32f1xx_hal_rtc.c **** 
1430:src/stm32f1xx_hal_rtc.c **** /**
1431:src/stm32f1xx_hal_rtc.c ****   * @brief  Alarm A callback.
1432:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
1433:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1434:src/stm32f1xx_hal_rtc.c ****   * @retval None
1435:src/stm32f1xx_hal_rtc.c ****   */
1436:src/stm32f1xx_hal_rtc.c **** __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
1437:src/stm32f1xx_hal_rtc.c **** {
1438:src/stm32f1xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
1439:src/stm32f1xx_hal_rtc.c ****   UNUSED(hrtc);
1440:src/stm32f1xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1441:src/stm32f1xx_hal_rtc.c ****             the HAL_RTC_AlarmAEventCallback could be implemented in the user file
1442:src/stm32f1xx_hal_rtc.c ****    */
1443:src/stm32f1xx_hal_rtc.c **** }
1444:src/stm32f1xx_hal_rtc.c **** 
1445:src/stm32f1xx_hal_rtc.c **** /**
1446:src/stm32f1xx_hal_rtc.c ****   * @brief  This function handles AlarmA Polling request.
1447:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
1448:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1449:src/stm32f1xx_hal_rtc.c ****   * @param  Timeout: Timeout duration
1450:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
1451:src/stm32f1xx_hal_rtc.c ****   */
1452:src/stm32f1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1453:src/stm32f1xx_hal_rtc.c **** {
1454:src/stm32f1xx_hal_rtc.c ****   uint32_t tickstart = HAL_GetTick();
1455:src/stm32f1xx_hal_rtc.c **** 
1456:src/stm32f1xx_hal_rtc.c ****   /* Check input parameters */
1457:src/stm32f1xx_hal_rtc.c ****   if (hrtc == NULL)
1458:src/stm32f1xx_hal_rtc.c ****   {
1459:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
1460:src/stm32f1xx_hal_rtc.c ****   }
1461:src/stm32f1xx_hal_rtc.c **** 
1462:src/stm32f1xx_hal_rtc.c ****   while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == RESET)
ARM GAS  /tmp/ccM6Uqrc.s 			page 28


1463:src/stm32f1xx_hal_rtc.c ****   {
1464:src/stm32f1xx_hal_rtc.c ****     if (Timeout != HAL_MAX_DELAY)
1465:src/stm32f1xx_hal_rtc.c ****     {
1466:src/stm32f1xx_hal_rtc.c ****       if ((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
1467:src/stm32f1xx_hal_rtc.c ****       {
1468:src/stm32f1xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1469:src/stm32f1xx_hal_rtc.c ****         return HAL_TIMEOUT;
1470:src/stm32f1xx_hal_rtc.c ****       }
1471:src/stm32f1xx_hal_rtc.c ****     }
1472:src/stm32f1xx_hal_rtc.c ****   }
1473:src/stm32f1xx_hal_rtc.c **** 
1474:src/stm32f1xx_hal_rtc.c ****   /* Clear the Alarm interrupt pending bit */
1475:src/stm32f1xx_hal_rtc.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
1476:src/stm32f1xx_hal_rtc.c **** 
1477:src/stm32f1xx_hal_rtc.c ****   /* Change RTC state */
1478:src/stm32f1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1479:src/stm32f1xx_hal_rtc.c **** 
1480:src/stm32f1xx_hal_rtc.c ****   return HAL_OK;
1481:src/stm32f1xx_hal_rtc.c **** }
1482:src/stm32f1xx_hal_rtc.c **** 
1483:src/stm32f1xx_hal_rtc.c **** /**
1484:src/stm32f1xx_hal_rtc.c ****   * @}
1485:src/stm32f1xx_hal_rtc.c ****   */
1486:src/stm32f1xx_hal_rtc.c **** 
1487:src/stm32f1xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group4 Peripheral State functions
1488:src/stm32f1xx_hal_rtc.c ****  *  @brief   Peripheral State functions
1489:src/stm32f1xx_hal_rtc.c ****  *
1490:src/stm32f1xx_hal_rtc.c **** @verbatim
1491:src/stm32f1xx_hal_rtc.c ****  ===============================================================================
1492:src/stm32f1xx_hal_rtc.c ****                      ##### Peripheral State functions #####
1493:src/stm32f1xx_hal_rtc.c ****  ===============================================================================
1494:src/stm32f1xx_hal_rtc.c ****     [..]
1495:src/stm32f1xx_hal_rtc.c ****     This subsection provides functions allowing to
1496:src/stm32f1xx_hal_rtc.c ****       (+) Get RTC state
1497:src/stm32f1xx_hal_rtc.c **** 
1498:src/stm32f1xx_hal_rtc.c **** @endverbatim
1499:src/stm32f1xx_hal_rtc.c ****   * @{
1500:src/stm32f1xx_hal_rtc.c ****   */
1501:src/stm32f1xx_hal_rtc.c **** /**
1502:src/stm32f1xx_hal_rtc.c ****   * @brief  Returns the RTC state.
1503:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
1504:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1505:src/stm32f1xx_hal_rtc.c ****   * @retval HAL state
1506:src/stm32f1xx_hal_rtc.c ****   */
1507:src/stm32f1xx_hal_rtc.c **** HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef *hrtc)
1508:src/stm32f1xx_hal_rtc.c **** {
1509:src/stm32f1xx_hal_rtc.c ****   return hrtc->State;
1510:src/stm32f1xx_hal_rtc.c **** }
1511:src/stm32f1xx_hal_rtc.c **** 
1512:src/stm32f1xx_hal_rtc.c **** /**
1513:src/stm32f1xx_hal_rtc.c ****   * @}
1514:src/stm32f1xx_hal_rtc.c ****   */
1515:src/stm32f1xx_hal_rtc.c **** 
1516:src/stm32f1xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group5 Peripheral Control functions
1517:src/stm32f1xx_hal_rtc.c ****  *  @brief   Peripheral Control functions
1518:src/stm32f1xx_hal_rtc.c ****  *
1519:src/stm32f1xx_hal_rtc.c **** @verbatim
ARM GAS  /tmp/ccM6Uqrc.s 			page 29


1520:src/stm32f1xx_hal_rtc.c ****  ===============================================================================
1521:src/stm32f1xx_hal_rtc.c ****                      ##### Peripheral Control functions #####
1522:src/stm32f1xx_hal_rtc.c ****  ===============================================================================
1523:src/stm32f1xx_hal_rtc.c ****     [..]
1524:src/stm32f1xx_hal_rtc.c ****     This subsection provides functions allowing to
1525:src/stm32f1xx_hal_rtc.c ****       (+) Wait for RTC Time and Date Synchronization
1526:src/stm32f1xx_hal_rtc.c **** 
1527:src/stm32f1xx_hal_rtc.c **** @endverbatim
1528:src/stm32f1xx_hal_rtc.c ****   * @{
1529:src/stm32f1xx_hal_rtc.c ****   */
1530:src/stm32f1xx_hal_rtc.c **** 
1531:src/stm32f1xx_hal_rtc.c **** /**
1532:src/stm32f1xx_hal_rtc.c ****   * @brief  Waits until the RTC registers (RTC_CNT, RTC_ALR and RTC_PRL)
1533:src/stm32f1xx_hal_rtc.c ****   *   are synchronized with RTC APB clock.
1534:src/stm32f1xx_hal_rtc.c ****   * @note   This function must be called before any read operation after an APB reset
1535:src/stm32f1xx_hal_rtc.c ****   *   or an APB clock stop.
1536:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
1537:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1538:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
1539:src/stm32f1xx_hal_rtc.c ****   */
1540:src/stm32f1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
1541:src/stm32f1xx_hal_rtc.c **** {
1542:src/stm32f1xx_hal_rtc.c ****   uint32_t tickstart = 0U;
1543:src/stm32f1xx_hal_rtc.c **** 
1544:src/stm32f1xx_hal_rtc.c ****   /* Check input parameters */
1545:src/stm32f1xx_hal_rtc.c ****   if (hrtc == NULL)
1546:src/stm32f1xx_hal_rtc.c ****   {
1547:src/stm32f1xx_hal_rtc.c ****     return HAL_ERROR;
1548:src/stm32f1xx_hal_rtc.c ****   }
1549:src/stm32f1xx_hal_rtc.c **** 
1550:src/stm32f1xx_hal_rtc.c ****   /* Clear RSF flag */
1551:src/stm32f1xx_hal_rtc.c ****   CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
1552:src/stm32f1xx_hal_rtc.c **** 
1553:src/stm32f1xx_hal_rtc.c ****   tickstart = HAL_GetTick();
1554:src/stm32f1xx_hal_rtc.c **** 
1555:src/stm32f1xx_hal_rtc.c ****   /* Wait the registers to be synchronised */
1556:src/stm32f1xx_hal_rtc.c ****   while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
1557:src/stm32f1xx_hal_rtc.c ****   {
1558:src/stm32f1xx_hal_rtc.c ****     if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
1559:src/stm32f1xx_hal_rtc.c ****     {
1560:src/stm32f1xx_hal_rtc.c ****       return HAL_TIMEOUT;
1561:src/stm32f1xx_hal_rtc.c ****     }
1562:src/stm32f1xx_hal_rtc.c ****   }
1563:src/stm32f1xx_hal_rtc.c **** 
1564:src/stm32f1xx_hal_rtc.c ****   return HAL_OK;
1565:src/stm32f1xx_hal_rtc.c **** }
1566:src/stm32f1xx_hal_rtc.c **** 
1567:src/stm32f1xx_hal_rtc.c **** /**
1568:src/stm32f1xx_hal_rtc.c ****   * @}
1569:src/stm32f1xx_hal_rtc.c ****   */
1570:src/stm32f1xx_hal_rtc.c **** 
1571:src/stm32f1xx_hal_rtc.c **** 
1572:src/stm32f1xx_hal_rtc.c **** /**
1573:src/stm32f1xx_hal_rtc.c ****   * @}
1574:src/stm32f1xx_hal_rtc.c ****   */
1575:src/stm32f1xx_hal_rtc.c **** 
1576:src/stm32f1xx_hal_rtc.c **** /** @addtogroup RTC_Private_Functions
ARM GAS  /tmp/ccM6Uqrc.s 			page 30


1577:src/stm32f1xx_hal_rtc.c ****   * @{
1578:src/stm32f1xx_hal_rtc.c ****   */
1579:src/stm32f1xx_hal_rtc.c **** 
1580:src/stm32f1xx_hal_rtc.c **** 
1581:src/stm32f1xx_hal_rtc.c **** /**
1582:src/stm32f1xx_hal_rtc.c ****   * @brief  Read the time counter available in RTC_CNT registers.
1583:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
1584:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1585:src/stm32f1xx_hal_rtc.c ****   * @retval Time counter
1586:src/stm32f1xx_hal_rtc.c ****   */
1587:src/stm32f1xx_hal_rtc.c **** static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
1588:src/stm32f1xx_hal_rtc.c **** {
  78              		.loc 1 1588 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              	.LVL0:
1589:src/stm32f1xx_hal_rtc.c ****   uint16_t high1 = 0U, high2 = 0U, low = 0U;
1590:src/stm32f1xx_hal_rtc.c ****   uint32_t timecounter = 0U;
1591:src/stm32f1xx_hal_rtc.c **** 
1592:src/stm32f1xx_hal_rtc.c ****   high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
  83              		.loc 1 1592 0
  84 0000 0368     		ldr	r3, [r0]	@ _6, hrtc_5(D)->Instance
1588:src/stm32f1xx_hal_rtc.c ****   uint16_t high1 = 0U, high2 = 0U, low = 0U;
  85              		.loc 1 1588 0
  86 0002 30B5     		push	{r4, r5, lr}	@
  87              	.LCFI0:
  88              		.cfi_def_cfa_offset 12
  89              		.cfi_offset 4, -12
  90              		.cfi_offset 5, -8
  91              		.cfi_offset 14, -4
  92              		.loc 1 1592 0
  93 0004 9A69     		ldr	r2, [r3, #24]	@ _7, _6->CNTH
  94              	.LVL1:
1593:src/stm32f1xx_hal_rtc.c ****   low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
  95              		.loc 1 1593 0
  96 0006 D869     		ldr	r0, [r3, #28]	@ _9, _6->CNTL
  97              	.LVL2:
1594:src/stm32f1xx_hal_rtc.c ****   high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
  98              		.loc 1 1594 0
  99 0008 9969     		ldr	r1, [r3, #24]	@ _10, _6->CNTH
 100              	.LVL3:
1595:src/stm32f1xx_hal_rtc.c **** 
1596:src/stm32f1xx_hal_rtc.c ****   if (high1 != high2)
 101              		.loc 1 1596 0
 102 000a 95B2     		uxth	r5, r2	@ _7, _7
 103 000c 8CB2     		uxth	r4, r1	@ _10, _10
 104 000e A542     		cmp	r5, r4	@ _7, _10
1597:src/stm32f1xx_hal_rtc.c ****   {
1598:src/stm32f1xx_hal_rtc.c ****     /* In this case the counter roll over during reading of CNTL and CNTH registers,
1599:src/stm32f1xx_hal_rtc.c ****        read again CNTL register then return the counter value */
1600:src/stm32f1xx_hal_rtc.c ****     timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 105              		.loc 1 1600 0
 106 0010 1DBF     		ittte	ne
 107 0012 D869     		ldrne	r0, [r3, #28]	@ _12, _6->CNTL
 108              	.LVL4:
 109 0014 80B2     		uxthne	r0, r0	@ tmp126, _12
ARM GAS  /tmp/ccM6Uqrc.s 			page 31


 110 0016 40EA0140 		orrne	r0, r0, r1, lsl #16	@ <retval>, tmp126, _10,
 111              	.LVL5:
1601:src/stm32f1xx_hal_rtc.c ****   }
1602:src/stm32f1xx_hal_rtc.c ****   else
1603:src/stm32f1xx_hal_rtc.c ****   {
1604:src/stm32f1xx_hal_rtc.c ****     /* No counter roll over during reading of CNTL and CNTH registers, counter
1605:src/stm32f1xx_hal_rtc.c ****        value is equal to first value of CNTL and CNTH */
1606:src/stm32f1xx_hal_rtc.c ****     timecounter = (((uint32_t) high1 << 16U) | low);
 112              		.loc 1 1606 0
 113 001a 80B2     		uxtheq	r0, r0	@ tmp129, _9
 114              	.LVL6:
 115 001c 08BF     		it	eq
 116 001e 40EA0240 		orreq	r0, r0, r2, lsl #16	@ <retval>, tmp129, _7,
 117              	.LVL7:
1607:src/stm32f1xx_hal_rtc.c ****   }
1608:src/stm32f1xx_hal_rtc.c **** 
1609:src/stm32f1xx_hal_rtc.c ****   return timecounter;
1610:src/stm32f1xx_hal_rtc.c **** }
 118              		.loc 1 1610 0
 119 0022 30BD     		pop	{r4, r5, pc}	@
 120              		.cfi_endproc
 121              	.LFE82:
 122              		.size	RTC_ReadTimeCounter, .-RTC_ReadTimeCounter
 123              		.align	1
 124              		.syntax unified
 125              		.thumb
 126              		.thumb_func
 127              		.fpu softvfp
 128              		.type	RTC_ReadAlarmCounter, %function
 129              	RTC_ReadAlarmCounter:
 130              	.LFB84:
1611:src/stm32f1xx_hal_rtc.c **** 
1612:src/stm32f1xx_hal_rtc.c **** /**
1613:src/stm32f1xx_hal_rtc.c ****   * @brief  Write the time counter in RTC_CNT registers.
1614:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
1615:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1616:src/stm32f1xx_hal_rtc.c ****   * @param  TimeCounter: Counter to write in RTC_CNT registers
1617:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
1618:src/stm32f1xx_hal_rtc.c ****   */
1619:src/stm32f1xx_hal_rtc.c **** static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
1620:src/stm32f1xx_hal_rtc.c **** {
1621:src/stm32f1xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
1622:src/stm32f1xx_hal_rtc.c **** 
1623:src/stm32f1xx_hal_rtc.c ****   /* Set Initialization mode */
1624:src/stm32f1xx_hal_rtc.c ****   if (RTC_EnterInitMode(hrtc) != HAL_OK)
1625:src/stm32f1xx_hal_rtc.c ****   {
1626:src/stm32f1xx_hal_rtc.c ****     status = HAL_ERROR;
1627:src/stm32f1xx_hal_rtc.c ****   }
1628:src/stm32f1xx_hal_rtc.c ****   else
1629:src/stm32f1xx_hal_rtc.c ****   {
1630:src/stm32f1xx_hal_rtc.c ****     /* Set RTC COUNTER MSB word */
1631:src/stm32f1xx_hal_rtc.c ****     WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
1632:src/stm32f1xx_hal_rtc.c ****     /* Set RTC COUNTER LSB word */
1633:src/stm32f1xx_hal_rtc.c ****     WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
1634:src/stm32f1xx_hal_rtc.c **** 
1635:src/stm32f1xx_hal_rtc.c ****     /* Wait for synchro */
1636:src/stm32f1xx_hal_rtc.c ****     if (RTC_ExitInitMode(hrtc) != HAL_OK)
ARM GAS  /tmp/ccM6Uqrc.s 			page 32


1637:src/stm32f1xx_hal_rtc.c ****     {
1638:src/stm32f1xx_hal_rtc.c ****       status = HAL_ERROR;
1639:src/stm32f1xx_hal_rtc.c ****     }
1640:src/stm32f1xx_hal_rtc.c ****   }
1641:src/stm32f1xx_hal_rtc.c **** 
1642:src/stm32f1xx_hal_rtc.c ****   return status;
1643:src/stm32f1xx_hal_rtc.c **** }
1644:src/stm32f1xx_hal_rtc.c **** 
1645:src/stm32f1xx_hal_rtc.c **** /**
1646:src/stm32f1xx_hal_rtc.c ****   * @brief  Read the time counter available in RTC_ALR registers.
1647:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
1648:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1649:src/stm32f1xx_hal_rtc.c ****   * @retval Time counter
1650:src/stm32f1xx_hal_rtc.c ****   */
1651:src/stm32f1xx_hal_rtc.c **** static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
1652:src/stm32f1xx_hal_rtc.c **** {
 131              		.loc 1 1652 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 0
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              		@ link register save eliminated.
 136              	.LVL8:
1653:src/stm32f1xx_hal_rtc.c ****   uint16_t high1 = 0U, low = 0U;
1654:src/stm32f1xx_hal_rtc.c **** 
1655:src/stm32f1xx_hal_rtc.c ****   high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 137              		.loc 1 1655 0
 138 0024 0368     		ldr	r3, [r0]	@ _4, hrtc_3(D)->Instance
 139 0026 186A     		ldr	r0, [r3, #32]	@ _5, _4->ALRH
 140              	.LVL9:
1656:src/stm32f1xx_hal_rtc.c ****   low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 141              		.loc 1 1656 0
 142 0028 5B6A     		ldr	r3, [r3, #36]	@ _6, _4->ALRL
 143              	.LVL10:
1657:src/stm32f1xx_hal_rtc.c **** 
1658:src/stm32f1xx_hal_rtc.c ****   return (((uint32_t) high1 << 16U) | low);
 144              		.loc 1 1658 0
 145 002a 9BB2     		uxth	r3, r3	@ tmp119, _6
1659:src/stm32f1xx_hal_rtc.c **** }
 146              		.loc 1 1659 0
 147 002c 43EA0040 		orr	r0, r3, r0, lsl #16	@, tmp119, _5,
 148              	.LVL11:
 149 0030 7047     		bx	lr	@
 150              		.cfi_endproc
 151              	.LFE84:
 152              		.size	RTC_ReadAlarmCounter, .-RTC_ReadAlarmCounter
 153              		.align	1
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 157              		.fpu softvfp
 158              		.type	RTC_ByteToBcd2, %function
 159              	RTC_ByteToBcd2:
 160              	.LFB88:
1660:src/stm32f1xx_hal_rtc.c **** 
1661:src/stm32f1xx_hal_rtc.c **** /**
1662:src/stm32f1xx_hal_rtc.c ****   * @brief  Write the time counter in RTC_ALR registers.
1663:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
ARM GAS  /tmp/ccM6Uqrc.s 			page 33


1664:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1665:src/stm32f1xx_hal_rtc.c ****   * @param  AlarmCounter: Counter to write in RTC_ALR registers
1666:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
1667:src/stm32f1xx_hal_rtc.c ****   */
1668:src/stm32f1xx_hal_rtc.c **** static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
1669:src/stm32f1xx_hal_rtc.c **** {
1670:src/stm32f1xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
1671:src/stm32f1xx_hal_rtc.c **** 
1672:src/stm32f1xx_hal_rtc.c ****   /* Set Initialization mode */
1673:src/stm32f1xx_hal_rtc.c ****   if (RTC_EnterInitMode(hrtc) != HAL_OK)
1674:src/stm32f1xx_hal_rtc.c ****   {
1675:src/stm32f1xx_hal_rtc.c ****     status = HAL_ERROR;
1676:src/stm32f1xx_hal_rtc.c ****   }
1677:src/stm32f1xx_hal_rtc.c ****   else
1678:src/stm32f1xx_hal_rtc.c ****   {
1679:src/stm32f1xx_hal_rtc.c ****     /* Set RTC COUNTER MSB word */
1680:src/stm32f1xx_hal_rtc.c ****     WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
1681:src/stm32f1xx_hal_rtc.c ****     /* Set RTC COUNTER LSB word */
1682:src/stm32f1xx_hal_rtc.c ****     WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
1683:src/stm32f1xx_hal_rtc.c **** 
1684:src/stm32f1xx_hal_rtc.c ****     /* Wait for synchro */
1685:src/stm32f1xx_hal_rtc.c ****     if (RTC_ExitInitMode(hrtc) != HAL_OK)
1686:src/stm32f1xx_hal_rtc.c ****     {
1687:src/stm32f1xx_hal_rtc.c ****       status = HAL_ERROR;
1688:src/stm32f1xx_hal_rtc.c ****     }
1689:src/stm32f1xx_hal_rtc.c ****   }
1690:src/stm32f1xx_hal_rtc.c **** 
1691:src/stm32f1xx_hal_rtc.c ****   return status;
1692:src/stm32f1xx_hal_rtc.c **** }
1693:src/stm32f1xx_hal_rtc.c **** 
1694:src/stm32f1xx_hal_rtc.c **** /**
1695:src/stm32f1xx_hal_rtc.c ****   * @brief  Enters the RTC Initialization mode.
1696:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
1697:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1698:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
1699:src/stm32f1xx_hal_rtc.c ****   */
1700:src/stm32f1xx_hal_rtc.c **** static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
1701:src/stm32f1xx_hal_rtc.c **** {
1702:src/stm32f1xx_hal_rtc.c ****   uint32_t tickstart = 0U;
1703:src/stm32f1xx_hal_rtc.c **** 
1704:src/stm32f1xx_hal_rtc.c ****   tickstart = HAL_GetTick();
1705:src/stm32f1xx_hal_rtc.c ****   /* Wait till RTC is in INIT state and if Time out is reached exit */
1706:src/stm32f1xx_hal_rtc.c ****   while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
1707:src/stm32f1xx_hal_rtc.c ****   {
1708:src/stm32f1xx_hal_rtc.c ****     if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
1709:src/stm32f1xx_hal_rtc.c ****     {
1710:src/stm32f1xx_hal_rtc.c ****       return HAL_TIMEOUT;
1711:src/stm32f1xx_hal_rtc.c ****     }
1712:src/stm32f1xx_hal_rtc.c ****   }
1713:src/stm32f1xx_hal_rtc.c **** 
1714:src/stm32f1xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1715:src/stm32f1xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
1716:src/stm32f1xx_hal_rtc.c **** 
1717:src/stm32f1xx_hal_rtc.c **** 
1718:src/stm32f1xx_hal_rtc.c ****   return HAL_OK;
1719:src/stm32f1xx_hal_rtc.c **** }
1720:src/stm32f1xx_hal_rtc.c **** 
ARM GAS  /tmp/ccM6Uqrc.s 			page 34


1721:src/stm32f1xx_hal_rtc.c **** /**
1722:src/stm32f1xx_hal_rtc.c ****   * @brief  Exit the RTC Initialization mode.
1723:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
1724:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1725:src/stm32f1xx_hal_rtc.c ****   * @retval HAL status
1726:src/stm32f1xx_hal_rtc.c ****   */
1727:src/stm32f1xx_hal_rtc.c **** static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
1728:src/stm32f1xx_hal_rtc.c **** {
1729:src/stm32f1xx_hal_rtc.c ****   uint32_t tickstart = 0U;
1730:src/stm32f1xx_hal_rtc.c **** 
1731:src/stm32f1xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1732:src/stm32f1xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1733:src/stm32f1xx_hal_rtc.c **** 
1734:src/stm32f1xx_hal_rtc.c ****   tickstart = HAL_GetTick();
1735:src/stm32f1xx_hal_rtc.c ****   /* Wait till RTC is in INIT state and if Time out is reached exit */
1736:src/stm32f1xx_hal_rtc.c ****   while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
1737:src/stm32f1xx_hal_rtc.c ****   {
1738:src/stm32f1xx_hal_rtc.c ****     if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
1739:src/stm32f1xx_hal_rtc.c ****     {
1740:src/stm32f1xx_hal_rtc.c ****       return HAL_TIMEOUT;
1741:src/stm32f1xx_hal_rtc.c ****     }
1742:src/stm32f1xx_hal_rtc.c ****   }
1743:src/stm32f1xx_hal_rtc.c **** 
1744:src/stm32f1xx_hal_rtc.c ****   return HAL_OK;
1745:src/stm32f1xx_hal_rtc.c **** }
1746:src/stm32f1xx_hal_rtc.c **** 
1747:src/stm32f1xx_hal_rtc.c **** /**
1748:src/stm32f1xx_hal_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
1749:src/stm32f1xx_hal_rtc.c ****   * @param  Value: Byte to be converted
1750:src/stm32f1xx_hal_rtc.c ****   * @retval Converted byte
1751:src/stm32f1xx_hal_rtc.c ****   */
1752:src/stm32f1xx_hal_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
1753:src/stm32f1xx_hal_rtc.c **** {
 161              		.loc 1 1753 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              		@ link register save eliminated.
 166              	.LVL12:
1754:src/stm32f1xx_hal_rtc.c ****   uint32_t bcdhigh = 0U;
 167              		.loc 1 1754 0
 168 0032 0023     		movs	r3, #0	@ bcdhigh,
 169              	.LVL13:
 170              	.L6:
1755:src/stm32f1xx_hal_rtc.c **** 
1756:src/stm32f1xx_hal_rtc.c ****   while (Value >= 10U)
 171              		.loc 1 1756 0
 172 0034 0928     		cmp	r0, #9	@ Value,
 173 0036 03D8     		bhi	.L7	@,
1757:src/stm32f1xx_hal_rtc.c ****   {
1758:src/stm32f1xx_hal_rtc.c ****     bcdhigh++;
1759:src/stm32f1xx_hal_rtc.c ****     Value -= 10U;
1760:src/stm32f1xx_hal_rtc.c ****   }
1761:src/stm32f1xx_hal_rtc.c **** 
1762:src/stm32f1xx_hal_rtc.c ****   return ((uint8_t)(bcdhigh << 4U) | Value);
 174              		.loc 1 1762 0
 175 0038 40EA0310 		orr	r0, r0, r3, lsl #4	@ tmp220, Value, bcdhigh,
ARM GAS  /tmp/ccM6Uqrc.s 			page 35


 176              	.LVL14:
1763:src/stm32f1xx_hal_rtc.c **** }
 177              		.loc 1 1763 0
 178 003c C0B2     		uxtb	r0, r0	@, tmp220
 179 003e 7047     		bx	lr	@
 180              	.LVL15:
 181              	.L7:
1759:src/stm32f1xx_hal_rtc.c ****   }
 182              		.loc 1 1759 0
 183 0040 0A38     		subs	r0, r0, #10	@ tmp215, Value,
 184              	.LVL16:
1758:src/stm32f1xx_hal_rtc.c ****     Value -= 10U;
 185              		.loc 1 1758 0
 186 0042 0133     		adds	r3, r3, #1	@ bcdhigh, bcdhigh,
 187              	.LVL17:
1759:src/stm32f1xx_hal_rtc.c ****   }
 188              		.loc 1 1759 0
 189 0044 C0B2     		uxtb	r0, r0	@ Value, tmp215
 190              	.LVL18:
 191 0046 F5E7     		b	.L6	@
 192              		.cfi_endproc
 193              	.LFE88:
 194              		.size	RTC_ByteToBcd2, .-RTC_ByteToBcd2
 195              		.align	1
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 199              		.fpu softvfp
 200              		.type	RTC_Bcd2ToByte, %function
 201              	RTC_Bcd2ToByte:
 202              	.LFB89:
1764:src/stm32f1xx_hal_rtc.c **** 
1765:src/stm32f1xx_hal_rtc.c **** /**
1766:src/stm32f1xx_hal_rtc.c ****   * @brief  Converts from 2 digit BCD to Binary.
1767:src/stm32f1xx_hal_rtc.c ****   * @param  Value: BCD value to be converted
1768:src/stm32f1xx_hal_rtc.c ****   * @retval Converted word
1769:src/stm32f1xx_hal_rtc.c ****   */
1770:src/stm32f1xx_hal_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
1771:src/stm32f1xx_hal_rtc.c **** {
 203              		.loc 1 1771 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              		@ link register save eliminated.
 208              	.LVL19:
1772:src/stm32f1xx_hal_rtc.c ****   uint32_t tmp = 0U;
1773:src/stm32f1xx_hal_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
1774:src/stm32f1xx_hal_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 209              		.loc 1 1774 0
 210 0048 0A22     		movs	r2, #10	@ tmp121,
1773:src/stm32f1xx_hal_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 211              		.loc 1 1773 0
 212 004a 0309     		lsrs	r3, r0, #4	@ tmp119, Value,
 213              		.loc 1 1774 0
 214 004c 00F00F00 		and	r0, r0, #15	@ tmp122, Value,
 215              	.LVL20:
 216 0050 02FB0300 		mla	r0, r2, r3, r0	@ tmp125, tmp121, tmp119, tmp122
ARM GAS  /tmp/ccM6Uqrc.s 			page 36


1775:src/stm32f1xx_hal_rtc.c **** }
 217              		.loc 1 1775 0
 218 0054 C0B2     		uxtb	r0, r0	@, tmp125
 219 0056 7047     		bx	lr	@
 220              		.cfi_endproc
 221              	.LFE89:
 222              		.size	RTC_Bcd2ToByte, .-RTC_Bcd2ToByte
 223              		.align	1
 224              		.syntax unified
 225              		.thumb
 226              		.thumb_func
 227              		.fpu softvfp
 228              		.type	RTC_WeekDayNum, %function
 229              	RTC_WeekDayNum:
 230              	.LFB92:
1776:src/stm32f1xx_hal_rtc.c **** 
1777:src/stm32f1xx_hal_rtc.c **** /**
1778:src/stm32f1xx_hal_rtc.c ****   * @brief  Updates date when time is 23:59:59.
1779:src/stm32f1xx_hal_rtc.c ****   * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
1780:src/stm32f1xx_hal_rtc.c ****   *                the configuration information for RTC.
1781:src/stm32f1xx_hal_rtc.c ****   * @param  DayElapsed: Number of days elapsed from last date update
1782:src/stm32f1xx_hal_rtc.c ****   * @retval None
1783:src/stm32f1xx_hal_rtc.c ****   */
1784:src/stm32f1xx_hal_rtc.c **** static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
1785:src/stm32f1xx_hal_rtc.c **** {
1786:src/stm32f1xx_hal_rtc.c ****   uint32_t year = 0U, month = 0U, day = 0U;
1787:src/stm32f1xx_hal_rtc.c ****   uint32_t loop = 0U;
1788:src/stm32f1xx_hal_rtc.c **** 
1789:src/stm32f1xx_hal_rtc.c ****   /* Get the current year*/
1790:src/stm32f1xx_hal_rtc.c ****   year = hrtc->DateToUpdate.Year;
1791:src/stm32f1xx_hal_rtc.c **** 
1792:src/stm32f1xx_hal_rtc.c ****   /* Get the current month and day */
1793:src/stm32f1xx_hal_rtc.c ****   month = hrtc->DateToUpdate.Month;
1794:src/stm32f1xx_hal_rtc.c ****   day = hrtc->DateToUpdate.Date;
1795:src/stm32f1xx_hal_rtc.c **** 
1796:src/stm32f1xx_hal_rtc.c ****   for (loop = 0U; loop < DayElapsed; loop++)
1797:src/stm32f1xx_hal_rtc.c ****   {
1798:src/stm32f1xx_hal_rtc.c ****     if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
1799:src/stm32f1xx_hal_rtc.c ****         (month == 8U) || (month == 10U) || (month == 12U))
1800:src/stm32f1xx_hal_rtc.c ****     {
1801:src/stm32f1xx_hal_rtc.c ****       if (day < 31U)
1802:src/stm32f1xx_hal_rtc.c ****       {
1803:src/stm32f1xx_hal_rtc.c ****         day++;
1804:src/stm32f1xx_hal_rtc.c ****       }
1805:src/stm32f1xx_hal_rtc.c ****       /* Date structure member: day = 31 */
1806:src/stm32f1xx_hal_rtc.c ****       else
1807:src/stm32f1xx_hal_rtc.c ****       {
1808:src/stm32f1xx_hal_rtc.c ****         if (month != 12U)
1809:src/stm32f1xx_hal_rtc.c ****         {
1810:src/stm32f1xx_hal_rtc.c ****           month++;
1811:src/stm32f1xx_hal_rtc.c ****           day = 1U;
1812:src/stm32f1xx_hal_rtc.c ****         }
1813:src/stm32f1xx_hal_rtc.c ****         /* Date structure member: day = 31 & month =12 */
1814:src/stm32f1xx_hal_rtc.c ****         else
1815:src/stm32f1xx_hal_rtc.c ****         {
1816:src/stm32f1xx_hal_rtc.c ****           month = 1U;
1817:src/stm32f1xx_hal_rtc.c ****           day = 1U;
ARM GAS  /tmp/ccM6Uqrc.s 			page 37


1818:src/stm32f1xx_hal_rtc.c ****           year++;
1819:src/stm32f1xx_hal_rtc.c ****         }
1820:src/stm32f1xx_hal_rtc.c ****       }
1821:src/stm32f1xx_hal_rtc.c ****     }
1822:src/stm32f1xx_hal_rtc.c ****     else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
1823:src/stm32f1xx_hal_rtc.c ****     {
1824:src/stm32f1xx_hal_rtc.c ****       if (day < 30U)
1825:src/stm32f1xx_hal_rtc.c ****       {
1826:src/stm32f1xx_hal_rtc.c ****         day++;
1827:src/stm32f1xx_hal_rtc.c ****       }
1828:src/stm32f1xx_hal_rtc.c ****       /* Date structure member: day = 30 */
1829:src/stm32f1xx_hal_rtc.c ****       else
1830:src/stm32f1xx_hal_rtc.c ****       {
1831:src/stm32f1xx_hal_rtc.c ****         month++;
1832:src/stm32f1xx_hal_rtc.c ****         day = 1U;
1833:src/stm32f1xx_hal_rtc.c ****       }
1834:src/stm32f1xx_hal_rtc.c ****     }
1835:src/stm32f1xx_hal_rtc.c ****     else if (month == 2U)
1836:src/stm32f1xx_hal_rtc.c ****     {
1837:src/stm32f1xx_hal_rtc.c ****       if (day < 28U)
1838:src/stm32f1xx_hal_rtc.c ****       {
1839:src/stm32f1xx_hal_rtc.c ****         day++;
1840:src/stm32f1xx_hal_rtc.c ****       }
1841:src/stm32f1xx_hal_rtc.c ****       else if (day == 28U)
1842:src/stm32f1xx_hal_rtc.c ****       {
1843:src/stm32f1xx_hal_rtc.c ****         /* Leap year */
1844:src/stm32f1xx_hal_rtc.c ****         if (RTC_IsLeapYear(year))
1845:src/stm32f1xx_hal_rtc.c ****         {
1846:src/stm32f1xx_hal_rtc.c ****           day++;
1847:src/stm32f1xx_hal_rtc.c ****         }
1848:src/stm32f1xx_hal_rtc.c ****         else
1849:src/stm32f1xx_hal_rtc.c ****         {
1850:src/stm32f1xx_hal_rtc.c ****           month++;
1851:src/stm32f1xx_hal_rtc.c ****           day = 1U;
1852:src/stm32f1xx_hal_rtc.c ****         }
1853:src/stm32f1xx_hal_rtc.c ****       }
1854:src/stm32f1xx_hal_rtc.c ****       else if (day == 29U)
1855:src/stm32f1xx_hal_rtc.c ****       {
1856:src/stm32f1xx_hal_rtc.c ****         month++;
1857:src/stm32f1xx_hal_rtc.c ****         day = 1U;
1858:src/stm32f1xx_hal_rtc.c ****       }
1859:src/stm32f1xx_hal_rtc.c ****     }
1860:src/stm32f1xx_hal_rtc.c ****   }
1861:src/stm32f1xx_hal_rtc.c **** 
1862:src/stm32f1xx_hal_rtc.c ****   /* Update year */
1863:src/stm32f1xx_hal_rtc.c ****   hrtc->DateToUpdate.Year = year;
1864:src/stm32f1xx_hal_rtc.c **** 
1865:src/stm32f1xx_hal_rtc.c ****   /* Update day and month */
1866:src/stm32f1xx_hal_rtc.c ****   hrtc->DateToUpdate.Month = month;
1867:src/stm32f1xx_hal_rtc.c ****   hrtc->DateToUpdate.Date = day;
1868:src/stm32f1xx_hal_rtc.c **** 
1869:src/stm32f1xx_hal_rtc.c ****   /* Update day of the week */
1870:src/stm32f1xx_hal_rtc.c ****   hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
1871:src/stm32f1xx_hal_rtc.c **** }
1872:src/stm32f1xx_hal_rtc.c **** 
1873:src/stm32f1xx_hal_rtc.c **** /**
1874:src/stm32f1xx_hal_rtc.c ****   * @brief  Check whether the passed year is Leap or not.
ARM GAS  /tmp/ccM6Uqrc.s 			page 38


1875:src/stm32f1xx_hal_rtc.c ****   * @param  nYear  year to check
1876:src/stm32f1xx_hal_rtc.c ****   * @retval 1: leap year
1877:src/stm32f1xx_hal_rtc.c ****   *         0: not leap year
1878:src/stm32f1xx_hal_rtc.c ****   */
1879:src/stm32f1xx_hal_rtc.c **** static uint8_t RTC_IsLeapYear(uint16_t nYear)
1880:src/stm32f1xx_hal_rtc.c **** {
1881:src/stm32f1xx_hal_rtc.c ****   if ((nYear % 4U) != 0U)
1882:src/stm32f1xx_hal_rtc.c ****   {
1883:src/stm32f1xx_hal_rtc.c ****     return 0U;
1884:src/stm32f1xx_hal_rtc.c ****   }
1885:src/stm32f1xx_hal_rtc.c **** 
1886:src/stm32f1xx_hal_rtc.c ****   if ((nYear % 100U) != 0U)
1887:src/stm32f1xx_hal_rtc.c ****   {
1888:src/stm32f1xx_hal_rtc.c ****     return 1U;
1889:src/stm32f1xx_hal_rtc.c ****   }
1890:src/stm32f1xx_hal_rtc.c **** 
1891:src/stm32f1xx_hal_rtc.c ****   if ((nYear % 400U) == 0U)
1892:src/stm32f1xx_hal_rtc.c ****   {
1893:src/stm32f1xx_hal_rtc.c ****     return 1U;
1894:src/stm32f1xx_hal_rtc.c ****   }
1895:src/stm32f1xx_hal_rtc.c ****   else
1896:src/stm32f1xx_hal_rtc.c ****   {
1897:src/stm32f1xx_hal_rtc.c ****     return 0U;
1898:src/stm32f1xx_hal_rtc.c ****   }
1899:src/stm32f1xx_hal_rtc.c **** }
1900:src/stm32f1xx_hal_rtc.c **** 
1901:src/stm32f1xx_hal_rtc.c **** /**
1902:src/stm32f1xx_hal_rtc.c ****   * @brief  Determines the week number, the day number and the week day number.
1903:src/stm32f1xx_hal_rtc.c ****   * @param  nYear   year to check
1904:src/stm32f1xx_hal_rtc.c ****   * @param  nMonth  Month to check
1905:src/stm32f1xx_hal_rtc.c ****   * @param  nDay    Day to check
1906:src/stm32f1xx_hal_rtc.c ****   * @note   Day is calculated with hypothesis that year > 2000
1907:src/stm32f1xx_hal_rtc.c ****   * @retval Value which can take one of the following parameters:
1908:src/stm32f1xx_hal_rtc.c ****   *         @arg RTC_WEEKDAY_MONDAY
1909:src/stm32f1xx_hal_rtc.c ****   *         @arg RTC_WEEKDAY_TUESDAY
1910:src/stm32f1xx_hal_rtc.c ****   *         @arg RTC_WEEKDAY_WEDNESDAY
1911:src/stm32f1xx_hal_rtc.c ****   *         @arg RTC_WEEKDAY_THURSDAY
1912:src/stm32f1xx_hal_rtc.c ****   *         @arg RTC_WEEKDAY_FRIDAY
1913:src/stm32f1xx_hal_rtc.c ****   *         @arg RTC_WEEKDAY_SATURDAY
1914:src/stm32f1xx_hal_rtc.c ****   *         @arg RTC_WEEKDAY_SUNDAY
1915:src/stm32f1xx_hal_rtc.c ****   */
1916:src/stm32f1xx_hal_rtc.c **** static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
1917:src/stm32f1xx_hal_rtc.c **** {
 231              		.loc 1 1917 0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              	.LVL21:
1918:src/stm32f1xx_hal_rtc.c ****   uint32_t year = 0U, weekday = 0U;
1919:src/stm32f1xx_hal_rtc.c **** 
1920:src/stm32f1xx_hal_rtc.c ****   year = 2000U + nYear;
1921:src/stm32f1xx_hal_rtc.c **** 
1922:src/stm32f1xx_hal_rtc.c ****   if (nMonth < 3U)
 236              		.loc 1 1922 0
 237 0058 0229     		cmp	r1, #2	@ nMonth,
1917:src/stm32f1xx_hal_rtc.c ****   uint32_t year = 0U, weekday = 0U;
 238              		.loc 1 1917 0
ARM GAS  /tmp/ccM6Uqrc.s 			page 39


 239 005a 70B5     		push	{r4, r5, r6, lr}	@
 240              	.LCFI1:
 241              		.cfi_def_cfa_offset 16
 242              		.cfi_offset 4, -16
 243              		.cfi_offset 5, -12
 244              		.cfi_offset 6, -8
 245              		.cfi_offset 14, -4
 246 005c 4FF01703 		mov	r3, #23	@ tmp195,
1920:src/stm32f1xx_hal_rtc.c **** 
 247              		.loc 1 1920 0
 248 0060 00F5FA65 		add	r5, r0, #2000	@ year, nYear,
 249              	.LVL22:
 250 0064 4FF00906 		mov	r6, #9	@ tmp196,
 251              		.loc 1 1922 0
 252 0068 1AD8     		bhi	.L10	@,
1923:src/stm32f1xx_hal_rtc.c ****   {
1924:src/stm32f1xx_hal_rtc.c ****     /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mo
1925:src/stm32f1xx_hal_rtc.c ****     weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U)
 253              		.loc 1 1925 0
 254 006a 4B43     		muls	r3, r1, r3	@ tmp143, nMonth
 255 006c 00F2CF74 		addw	r4, r0, #1999	@ _12, nYear,
 256 0070 B3FBF6F0 		udiv	r0, r3, r6	@ tmp146, tmp143, tmp196
 257              	.LVL23:
 258 0074 4FF4C873 		mov	r3, #400	@ tmp155,
 259 0078 B4FBF3F3 		udiv	r3, r4, r3	@ tmp154, _12, tmp155
 260 007c 0432     		adds	r2, r2, #4	@ tmp148, nDay,
 261              	.LVL24:
 262 007e 2A44     		add	r2, r2, r5	@ tmp149, year
 263 0080 1044     		add	r0, r0, r2	@ tmp150, tmp149
 264 0082 00EB9400 		add	r0, r0, r4, lsr #2	@ tmp152, tmp150, _12,
 265 0086 1844     		add	r0, r0, r3	@ tmp156, tmp154
 266 0088 6423     		movs	r3, #100	@ tmp159,
 267 008a B4FBF3F4 		udiv	r4, r4, r3	@ tmp158, _12, tmp159
 268              	.LVL25:
 269 008e 001B     		subs	r0, r0, r4	@ tmp160, tmp156, tmp158
 270              	.L12:
1926:src/stm32f1xx_hal_rtc.c ****   }
1927:src/stm32f1xx_hal_rtc.c ****   else
1928:src/stm32f1xx_hal_rtc.c ****   {
1929:src/stm32f1xx_hal_rtc.c ****     /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
1930:src/stm32f1xx_hal_rtc.c ****     weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400
 271              		.loc 1 1930 0
 272 0090 0723     		movs	r3, #7	@ tmp189,
 273 0092 B0FBF3F3 		udiv	r3, r0, r3	@ tmp188, tmp185, tmp189
 274 0096 C3EBC303 		rsb	r3, r3, r3, lsl #3	@ tmp192, tmp188, tmp188,
 275 009a C01A     		subs	r0, r0, r3	@ weekday, tmp185, tmp192
 276              	.LVL26:
1931:src/stm32f1xx_hal_rtc.c ****   }
1932:src/stm32f1xx_hal_rtc.c **** 
1933:src/stm32f1xx_hal_rtc.c ****   return (uint8_t)weekday;
1934:src/stm32f1xx_hal_rtc.c **** }
 277              		.loc 1 1934 0
 278 009c C0B2     		uxtb	r0, r0	@, weekday
 279              	.LVL27:
 280 009e 70BD     		pop	{r4, r5, r6, pc}	@
 281              	.LVL28:
 282              	.L10:
ARM GAS  /tmp/ccM6Uqrc.s 			page 40


1930:src/stm32f1xx_hal_rtc.c ****   }
 283              		.loc 1 1930 0
 284 00a0 03FB01F0 		mul	r0, r3, r1	@ tmp168, tmp195, nMonth
 285              	.LVL29:
 286 00a4 B0FBF6F0 		udiv	r0, r0, r6	@ tmp171, tmp168, tmp196
 287 00a8 0232     		adds	r2, r2, #2	@ tmp173, nDay,
 288              	.LVL30:
 289 00aa 2A44     		add	r2, r2, r5	@ tmp174, year
 290 00ac 4FF4C873 		mov	r3, #400	@ tmp180,
 291 00b0 1044     		add	r0, r0, r2	@ tmp175, tmp174
 292 00b2 6422     		movs	r2, #100	@ tmp184,
 293 00b4 B5FBF3F3 		udiv	r3, r5, r3	@ tmp179, year, tmp180
 294 00b8 B5FBF2F2 		udiv	r2, r5, r2	@ tmp183, year, tmp184
 295 00bc 00EB9500 		add	r0, r0, r5, lsr #2	@ tmp177, tmp175, year,
 296 00c0 1844     		add	r0, r0, r3	@ tmp181, tmp179
 297 00c2 801A     		subs	r0, r0, r2	@ tmp185, tmp181, tmp183
 298 00c4 E4E7     		b	.L12	@
 299              		.cfi_endproc
 300              	.LFE92:
 301              		.size	RTC_WeekDayNum, .-RTC_WeekDayNum
 302              		.align	1
 303              		.syntax unified
 304              		.thumb
 305              		.thumb_func
 306              		.fpu softvfp
 307              		.type	RTC_EnterInitMode, %function
 308              	RTC_EnterInitMode:
 309              	.LFB86:
1701:src/stm32f1xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 310              		.loc 1 1701 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              	.LVL31:
 315 00c6 38B5     		push	{r3, r4, r5, lr}	@
 316              	.LCFI2:
 317              		.cfi_def_cfa_offset 16
 318              		.cfi_offset 3, -16
 319              		.cfi_offset 4, -12
 320              		.cfi_offset 5, -8
 321              		.cfi_offset 14, -4
1701:src/stm32f1xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 322              		.loc 1 1701 0
 323 00c8 0446     		mov	r4, r0	@ hrtc, hrtc
1704:src/stm32f1xx_hal_rtc.c ****   /* Wait till RTC is in INIT state and if Time out is reached exit */
 324              		.loc 1 1704 0
 325 00ca FFF7FEFF 		bl	HAL_GetTick	@
 326              	.LVL32:
 327 00ce 0546     		mov	r5, r0	@ tickstart,
 328              	.LVL33:
 329              	.L14:
1706:src/stm32f1xx_hal_rtc.c ****   {
 330              		.loc 1 1706 0
 331 00d0 2368     		ldr	r3, [r4]	@ _8, hrtc_7(D)->Instance
 332 00d2 5A68     		ldr	r2, [r3, #4]	@ _9, _8->CRL
 333 00d4 9206     		lsls	r2, r2, #26	@, _9,
 334 00d6 05D5     		bpl	.L16	@,
ARM GAS  /tmp/ccM6Uqrc.s 			page 41


1715:src/stm32f1xx_hal_rtc.c **** 
 335              		.loc 1 1715 0
 336 00d8 5A68     		ldr	r2, [r3, #4]	@ _14, _8->CRL
1718:src/stm32f1xx_hal_rtc.c **** }
 337              		.loc 1 1718 0
 338 00da 0020     		movs	r0, #0	@ <retval>,
1715:src/stm32f1xx_hal_rtc.c **** 
 339              		.loc 1 1715 0
 340 00dc 42F01002 		orr	r2, r2, #16	@ _15, _14,
 341 00e0 5A60     		str	r2, [r3, #4]	@ _15, _8->CRL
1718:src/stm32f1xx_hal_rtc.c **** }
 342              		.loc 1 1718 0
 343 00e2 38BD     		pop	{r3, r4, r5, pc}	@
 344              	.LVL34:
 345              	.L16:
1708:src/stm32f1xx_hal_rtc.c ****     {
 346              		.loc 1 1708 0
 347 00e4 FFF7FEFF 		bl	HAL_GetTick	@
 348              	.LVL35:
 349 00e8 401B     		subs	r0, r0, r5	@ tmp120,, tickstart
 350 00ea B0F57A7F 		cmp	r0, #1000	@ tmp120,
 351 00ee EFD9     		bls	.L14	@,
1710:src/stm32f1xx_hal_rtc.c ****     }
 352              		.loc 1 1710 0
 353 00f0 0320     		movs	r0, #3	@ <retval>,
1719:src/stm32f1xx_hal_rtc.c **** 
 354              		.loc 1 1719 0
 355 00f2 38BD     		pop	{r3, r4, r5, pc}	@
 356              		.cfi_endproc
 357              	.LFE86:
 358              		.size	RTC_EnterInitMode, .-RTC_EnterInitMode
 359              		.align	1
 360              		.syntax unified
 361              		.thumb
 362              		.thumb_func
 363              		.fpu softvfp
 364              		.type	RTC_ExitInitMode, %function
 365              	RTC_ExitInitMode:
 366              	.LFB87:
1728:src/stm32f1xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 367              		.loc 1 1728 0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371              	.LVL36:
1732:src/stm32f1xx_hal_rtc.c **** 
 372              		.loc 1 1732 0
 373 00f4 0268     		ldr	r2, [r0]	@ _6, hrtc_5(D)->Instance
1728:src/stm32f1xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 374              		.loc 1 1728 0
 375 00f6 38B5     		push	{r3, r4, r5, lr}	@
 376              	.LCFI3:
 377              		.cfi_def_cfa_offset 16
 378              		.cfi_offset 3, -16
 379              		.cfi_offset 4, -12
 380              		.cfi_offset 5, -8
 381              		.cfi_offset 14, -4
ARM GAS  /tmp/ccM6Uqrc.s 			page 42


1732:src/stm32f1xx_hal_rtc.c **** 
 382              		.loc 1 1732 0
 383 00f8 5368     		ldr	r3, [r2, #4]	@ _7, _6->CRL
1728:src/stm32f1xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 384              		.loc 1 1728 0
 385 00fa 0446     		mov	r4, r0	@ hrtc, hrtc
1732:src/stm32f1xx_hal_rtc.c **** 
 386              		.loc 1 1732 0
 387 00fc 23F01003 		bic	r3, r3, #16	@ _8, _7,
 388 0100 5360     		str	r3, [r2, #4]	@ _8, _6->CRL
1734:src/stm32f1xx_hal_rtc.c ****   /* Wait till RTC is in INIT state and if Time out is reached exit */
 389              		.loc 1 1734 0
 390 0102 FFF7FEFF 		bl	HAL_GetTick	@
 391              	.LVL37:
 392 0106 0546     		mov	r5, r0	@ tickstart,
 393              	.LVL38:
 394              	.L19:
1736:src/stm32f1xx_hal_rtc.c ****   {
 395              		.loc 1 1736 0
 396 0108 2368     		ldr	r3, [r4]	@ _12, hrtc_5(D)->Instance
 397 010a 5B68     		ldr	r3, [r3, #4]	@ _13, _12->CRL
 398 010c 9B06     		lsls	r3, r3, #26	@, _13,
 399 010e 01D5     		bpl	.L21	@,
1744:src/stm32f1xx_hal_rtc.c **** }
 400              		.loc 1 1744 0
 401 0110 0020     		movs	r0, #0	@ <retval>,
 402 0112 38BD     		pop	{r3, r4, r5, pc}	@
 403              	.LVL39:
 404              	.L21:
1738:src/stm32f1xx_hal_rtc.c ****     {
 405              		.loc 1 1738 0
 406 0114 FFF7FEFF 		bl	HAL_GetTick	@
 407              	.LVL40:
 408 0118 401B     		subs	r0, r0, r5	@ tmp121,, tickstart
 409 011a B0F57A7F 		cmp	r0, #1000	@ tmp121,
 410 011e F3D9     		bls	.L19	@,
1740:src/stm32f1xx_hal_rtc.c ****     }
 411              		.loc 1 1740 0
 412 0120 0320     		movs	r0, #3	@ <retval>,
1745:src/stm32f1xx_hal_rtc.c **** 
 413              		.loc 1 1745 0
 414 0122 38BD     		pop	{r3, r4, r5, pc}	@
 415              		.cfi_endproc
 416              	.LFE87:
 417              		.size	RTC_ExitInitMode, .-RTC_ExitInitMode
 418              		.align	1
 419              		.syntax unified
 420              		.thumb
 421              		.thumb_func
 422              		.fpu softvfp
 423              		.type	RTC_WriteTimeCounter, %function
 424              	RTC_WriteTimeCounter:
 425              	.LFB83:
1620:src/stm32f1xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 426              		.loc 1 1620 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccM6Uqrc.s 			page 43


 429              		@ frame_needed = 0, uses_anonymous_args = 0
 430              	.LVL41:
 431 0124 38B5     		push	{r3, r4, r5, lr}	@
 432              	.LCFI4:
 433              		.cfi_def_cfa_offset 16
 434              		.cfi_offset 3, -16
 435              		.cfi_offset 4, -12
 436              		.cfi_offset 5, -8
 437              		.cfi_offset 14, -4
1620:src/stm32f1xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 438              		.loc 1 1620 0
 439 0126 0546     		mov	r5, r0	@ hrtc, hrtc
 440 0128 0C46     		mov	r4, r1	@ TimeCounter, TimeCounter
1624:src/stm32f1xx_hal_rtc.c ****   {
 441              		.loc 1 1624 0
 442 012a FFF7CCFF 		bl	RTC_EnterInitMode	@
 443              	.LVL42:
 444 012e 58B9     		cbnz	r0, .L25	@,
 445              	.LVL43:
 446              	.LBB4:
 447              	.LBB5:
1631:src/stm32f1xx_hal_rtc.c ****     /* Set RTC COUNTER LSB word */
 448              		.loc 1 1631 0
 449 0130 2B68     		ldr	r3, [r5]	@ _10, hrtc_4(D)->Instance
 450 0132 220C     		lsrs	r2, r4, #16	@ _11, TimeCounter,
1633:src/stm32f1xx_hal_rtc.c **** 
 451              		.loc 1 1633 0
 452 0134 A4B2     		uxth	r4, r4	@ _12, TimeCounter
 453              	.LVL44:
1631:src/stm32f1xx_hal_rtc.c ****     /* Set RTC COUNTER LSB word */
 454              		.loc 1 1631 0
 455 0136 9A61     		str	r2, [r3, #24]	@ _11, _10->CNTH
1636:src/stm32f1xx_hal_rtc.c ****     {
 456              		.loc 1 1636 0
 457 0138 2846     		mov	r0, r5	@, hrtc
1633:src/stm32f1xx_hal_rtc.c **** 
 458              		.loc 1 1633 0
 459 013a DC61     		str	r4, [r3, #28]	@ _12, _10->CNTL
1636:src/stm32f1xx_hal_rtc.c ****     {
 460              		.loc 1 1636 0
 461 013c FFF7DAFF 		bl	RTC_ExitInitMode	@
 462              	.LVL45:
 463              	.LBE5:
 464              	.LBE4:
1626:src/stm32f1xx_hal_rtc.c ****   }
 465              		.loc 1 1626 0
 466 0140 0030     		adds	r0, r0, #0	@ <retval>,,
 467 0142 18BF     		it	ne
 468 0144 0120     		movne	r0, #1	@ <retval>,
 469 0146 38BD     		pop	{r3, r4, r5, pc}	@
 470              	.LVL46:
 471              	.L25:
 472 0148 0120     		movs	r0, #1	@ <retval>,
 473              	.LVL47:
1643:src/stm32f1xx_hal_rtc.c **** 
 474              		.loc 1 1643 0
 475 014a 38BD     		pop	{r3, r4, r5, pc}	@
ARM GAS  /tmp/ccM6Uqrc.s 			page 44


 476              		.cfi_endproc
 477              	.LFE83:
 478              		.size	RTC_WriteTimeCounter, .-RTC_WriteTimeCounter
 479              		.align	1
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 483              		.fpu softvfp
 484              		.type	RTC_WriteAlarmCounter, %function
 485              	RTC_WriteAlarmCounter:
 486              	.LFB85:
1669:src/stm32f1xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 487              		.loc 1 1669 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              	.LVL48:
 492 014c 38B5     		push	{r3, r4, r5, lr}	@
 493              	.LCFI5:
 494              		.cfi_def_cfa_offset 16
 495              		.cfi_offset 3, -16
 496              		.cfi_offset 4, -12
 497              		.cfi_offset 5, -8
 498              		.cfi_offset 14, -4
1669:src/stm32f1xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 499              		.loc 1 1669 0
 500 014e 0546     		mov	r5, r0	@ hrtc, hrtc
 501 0150 0C46     		mov	r4, r1	@ AlarmCounter, AlarmCounter
1673:src/stm32f1xx_hal_rtc.c ****   {
 502              		.loc 1 1673 0
 503 0152 FFF7B8FF 		bl	RTC_EnterInitMode	@
 504              	.LVL49:
 505 0156 58B9     		cbnz	r0, .L28	@,
 506              	.LVL50:
 507              	.LBB8:
 508              	.LBB9:
1680:src/stm32f1xx_hal_rtc.c ****     /* Set RTC COUNTER LSB word */
 509              		.loc 1 1680 0
 510 0158 2B68     		ldr	r3, [r5]	@ _10, hrtc_4(D)->Instance
 511 015a 220C     		lsrs	r2, r4, #16	@ _11, AlarmCounter,
1682:src/stm32f1xx_hal_rtc.c **** 
 512              		.loc 1 1682 0
 513 015c A4B2     		uxth	r4, r4	@ _12, AlarmCounter
 514              	.LVL51:
1680:src/stm32f1xx_hal_rtc.c ****     /* Set RTC COUNTER LSB word */
 515              		.loc 1 1680 0
 516 015e 1A62     		str	r2, [r3, #32]	@ _11, _10->ALRH
1685:src/stm32f1xx_hal_rtc.c ****     {
 517              		.loc 1 1685 0
 518 0160 2846     		mov	r0, r5	@, hrtc
1682:src/stm32f1xx_hal_rtc.c **** 
 519              		.loc 1 1682 0
 520 0162 5C62     		str	r4, [r3, #36]	@ _12, _10->ALRL
1685:src/stm32f1xx_hal_rtc.c ****     {
 521              		.loc 1 1685 0
 522 0164 FFF7C6FF 		bl	RTC_ExitInitMode	@
 523              	.LVL52:
ARM GAS  /tmp/ccM6Uqrc.s 			page 45


 524              	.LBE9:
 525              	.LBE8:
1675:src/stm32f1xx_hal_rtc.c ****   }
 526              		.loc 1 1675 0
 527 0168 0030     		adds	r0, r0, #0	@ <retval>,,
 528 016a 18BF     		it	ne
 529 016c 0120     		movne	r0, #1	@ <retval>,
 530 016e 38BD     		pop	{r3, r4, r5, pc}	@
 531              	.LVL53:
 532              	.L28:
 533 0170 0120     		movs	r0, #1	@ <retval>,
 534              	.LVL54:
1692:src/stm32f1xx_hal_rtc.c **** 
 535              		.loc 1 1692 0
 536 0172 38BD     		pop	{r3, r4, r5, pc}	@
 537              		.cfi_endproc
 538              	.LFE85:
 539              		.size	RTC_WriteAlarmCounter, .-RTC_WriteAlarmCounter
 540              		.align	1
 541              		.weak	HAL_RTC_MspInit
 542              		.syntax unified
 543              		.thumb
 544              		.thumb_func
 545              		.fpu softvfp
 546              		.type	HAL_RTC_MspInit, %function
 547              	HAL_RTC_MspInit:
 548              	.LFB99:
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 552              		@ link register save eliminated.
 553 0174 7047     		bx	lr	@
 554              		.cfi_endproc
 555              	.LFE99:
 556              		.size	HAL_RTC_MspInit, .-HAL_RTC_MspInit
 557              		.align	1
 558              		.weak	HAL_RTC_MspDeInit
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu softvfp
 563              		.type	HAL_RTC_MspDeInit, %function
 564              	HAL_RTC_MspDeInit:
 565              	.LFB97:
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 0
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 569              		@ link register save eliminated.
 570 0176 7047     		bx	lr	@
 571              		.cfi_endproc
 572              	.LFE97:
 573              		.size	HAL_RTC_MspDeInit, .-HAL_RTC_MspDeInit
 574              		.align	1
 575              		.global	HAL_RTC_SetTime
 576              		.syntax unified
 577              		.thumb
 578              		.thumb_func
ARM GAS  /tmp/ccM6Uqrc.s 			page 46


 579              		.fpu softvfp
 580              		.type	HAL_RTC_SetTime, %function
 581              	HAL_RTC_SetTime:
 582              	.LFB69:
 704:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_time = 0U, counter_alarm = 0U;
 583              		.loc 1 704 0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 0
 586              		@ frame_needed = 0, uses_anonymous_args = 0
 587              	.LVL55:
 704:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_time = 0U, counter_alarm = 0U;
 588              		.loc 1 704 0
 589 0178 70B5     		push	{r4, r5, r6, lr}	@
 590              	.LCFI6:
 591              		.cfi_def_cfa_offset 16
 592              		.cfi_offset 4, -16
 593              		.cfi_offset 5, -12
 594              		.cfi_offset 6, -8
 595              		.cfi_offset 14, -4
 708:src/stm32f1xx_hal_rtc.c ****   {
 596              		.loc 1 708 0
 597 017a 0446     		mov	r4, r0	@ hrtc, hrtc
 598 017c E0B1     		cbz	r0, .L38	@ hrtc,
 708:src/stm32f1xx_hal_rtc.c ****   {
 599              		.loc 1 708 0 is_stmt 0 discriminator 1
 600 017e D9B1     		cbz	r1, .L38	@ sTime,
 717:src/stm32f1xx_hal_rtc.c **** 
 601              		.loc 1 717 0 is_stmt 1
 602 0180 037C     		ldrb	r3, [r0, #16]	@ zero_extendqisi2	@ hrtc_5(D)->Lock, hrtc_5(D)->Lock
 603 0182 0226     		movs	r6, #2	@ <retval>,
 604 0184 012B     		cmp	r3, #1	@ hrtc_5(D)->Lock,
 605 0186 46D0     		beq	.L32	@,
 717:src/stm32f1xx_hal_rtc.c **** 
 606              		.loc 1 717 0 is_stmt 0 discriminator 2
 607 0188 0123     		movs	r3, #1	@ tmp144,
 719:src/stm32f1xx_hal_rtc.c **** 
 608              		.loc 1 719 0 is_stmt 1 discriminator 2
 609 018a 4674     		strb	r6, [r0, #17]	@ <retval>, hrtc_5(D)->State
 717:src/stm32f1xx_hal_rtc.c **** 
 610              		.loc 1 717 0 discriminator 2
 611 018c 0374     		strb	r3, [r0, #16]	@ tmp144, hrtc_5(D)->Lock
 612 018e 0878     		ldrb	r0, [r1]	@ zero_extendqisi2	@ sTime_6(D)->Hours, sTime_6(D)->Hours
 613              	.LVL56:
 614 0190 4E78     		ldrb	r6, [r1, #1]	@ zero_extendqisi2	@ sTime_6(D)->Minutes, sTime_6(D)->Minutes
 615 0192 8978     		ldrb	r1, [r1, #2]	@ zero_extendqisi2	@ sTime_6(D)->Seconds, sTime_6(D)->Seconds
 616              	.LVL57:
 721:src/stm32f1xx_hal_rtc.c ****   {
 617              		.loc 1 721 0 discriminator 2
 618 0194 92B9     		cbnz	r2, .L33	@ Format,
 728:src/stm32f1xx_hal_rtc.c ****                               ((uint32_t)sTime->Seconds));
 619              		.loc 1 728 0
 620 0196 3C25     		movs	r5, #60	@ tmp153,
 727:src/stm32f1xx_hal_rtc.c ****                               ((uint32_t)sTime->Minutes * 60U) + \
 621              		.loc 1 727 0
 622 0198 4FF46163 		mov	r3, #3600	@ tmp150,
 728:src/stm32f1xx_hal_rtc.c ****                               ((uint32_t)sTime->Seconds));
 623              		.loc 1 728 0
ARM GAS  /tmp/ccM6Uqrc.s 			page 47


 624 019c 7543     		muls	r5, r6, r5	@ tmp152, sTime_6(D)->Minutes
 727:src/stm32f1xx_hal_rtc.c ****                               ((uint32_t)sTime->Minutes * 60U) + \
 625              		.loc 1 727 0
 626 019e 03FB0050 		mla	r0, r3, r0, r5	@ tmp154, tmp150, sTime_6(D)->Hours, tmp152
 627 01a2 4518     		adds	r5, r0, r1	@ counter_time, tmp154, sTime_6(D)->Seconds
 628              	.LVL58:
 629              	.L34:
 743:src/stm32f1xx_hal_rtc.c ****   {
 630              		.loc 1 743 0
 631 01a4 2946     		mov	r1, r5	@, counter_time
 632 01a6 2046     		mov	r0, r4	@, hrtc
 633 01a8 FFF7BCFF 		bl	RTC_WriteTimeCounter	@
 634              	.LVL59:
 635 01ac 0646     		mov	r6, r0	@ <retval>,
 636 01ae B0B1     		cbz	r0, .L35	@ <retval>,
 746:src/stm32f1xx_hal_rtc.c **** 
 637              		.loc 1 746 0
 638 01b0 0423     		movs	r3, #4	@ tmp167,
 639 01b2 6374     		strb	r3, [r4, #17]	@ tmp167, hrtc_5(D)->State
 749:src/stm32f1xx_hal_rtc.c **** 
 640              		.loc 1 749 0
 641 01b4 0023     		movs	r3, #0	@ tmp169,
 642 01b6 2374     		strb	r3, [r4, #16]	@ tmp169, hrtc_5(D)->Lock
 643              	.LVL60:
 644              	.L38:
 710:src/stm32f1xx_hal_rtc.c ****   }
 645              		.loc 1 710 0
 646 01b8 0126     		movs	r6, #1	@ <retval>,
 647 01ba 2CE0     		b	.L32	@
 648              	.LVL61:
 649              	.L33:
 737:src/stm32f1xx_hal_rtc.c ****                     ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 650              		.loc 1 737 0
 651 01bc FFF744FF 		bl	RTC_Bcd2ToByte	@
 652              	.LVL62:
 653 01c0 0546     		mov	r5, r0	@ tmp157,
 738:src/stm32f1xx_hal_rtc.c ****                     ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 654              		.loc 1 738 0
 655 01c2 3046     		mov	r0, r6	@, sTime_6(D)->Minutes
 656 01c4 FFF740FF 		bl	RTC_Bcd2ToByte	@
 657              	.LVL63:
 658 01c8 3C23     		movs	r3, #60	@ tmp163,
 659 01ca 5843     		muls	r0, r3, r0	@ tmp162, tmp163
 737:src/stm32f1xx_hal_rtc.c ****                     ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 660              		.loc 1 737 0
 661 01cc 4FF46163 		mov	r3, #3600	@ tmp161,
 662 01d0 03FB0505 		mla	r5, r3, r5, r0	@ _30, tmp161, tmp157, tmp162
 739:src/stm32f1xx_hal_rtc.c ****   }
 663              		.loc 1 739 0
 664 01d4 0846     		mov	r0, r1	@, sTime_6(D)->Seconds
 665 01d6 FFF737FF 		bl	RTC_Bcd2ToByte	@
 666              	.LVL64:
 737:src/stm32f1xx_hal_rtc.c ****                     ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 667              		.loc 1 737 0
 668 01da 0544     		add	r5, r5, r0	@ counter_time,
 669              	.LVL65:
 670 01dc E2E7     		b	.L34	@
ARM GAS  /tmp/ccM6Uqrc.s 			page 48


 671              	.L35:
 756:src/stm32f1xx_hal_rtc.c **** 
 672              		.loc 1 756 0
 673 01de 2268     		ldr	r2, [r4]	@ _39, hrtc_5(D)->Instance
 759:src/stm32f1xx_hal_rtc.c **** 
 674              		.loc 1 759 0
 675 01e0 2046     		mov	r0, r4	@, hrtc
 756:src/stm32f1xx_hal_rtc.c **** 
 676              		.loc 1 756 0
 677 01e2 5368     		ldr	r3, [r2, #4]	@ _40, _39->CRL
 678 01e4 23F00503 		bic	r3, r3, #5	@ _41, _40,
 679 01e8 5360     		str	r3, [r2, #4]	@ _41, _39->CRL
 759:src/stm32f1xx_hal_rtc.c **** 
 680              		.loc 1 759 0
 681 01ea FFF71BFF 		bl	RTC_ReadAlarmCounter	@
 682              	.LVL66:
 762:src/stm32f1xx_hal_rtc.c ****     {
 683              		.loc 1 762 0
 684 01ee 431C     		adds	r3, r0, #1	@, counter_alarm,
 685 01f0 0DD0     		beq	.L36	@,
 764:src/stm32f1xx_hal_rtc.c ****       {
 686              		.loc 1 764 0
 687 01f2 8542     		cmp	r5, r0	@ counter_time, counter_alarm
 688 01f4 0BD9     		bls	.L36	@,
 689              	.LVL67:
 770:src/stm32f1xx_hal_rtc.c ****         {
 690              		.loc 1 770 0
 691 01f6 00F5A831 		add	r1, r0, #86016	@, counter_alarm,
 692 01fa 01F5C071 		add	r1, r1, #384	@,,
 693 01fe 2046     		mov	r0, r4	@, hrtc
 694              	.LVL68:
 695 0200 FFF7A4FF 		bl	RTC_WriteAlarmCounter	@
 696              	.LVL69:
 697 0204 18B1     		cbz	r0, .L36	@,
 773:src/stm32f1xx_hal_rtc.c **** 
 698              		.loc 1 773 0
 699 0206 0423     		movs	r3, #4	@ tmp174,
 776:src/stm32f1xx_hal_rtc.c **** 
 700              		.loc 1 776 0
 701 0208 2674     		strb	r6, [r4, #16]	@ <retval>, hrtc_5(D)->Lock
 773:src/stm32f1xx_hal_rtc.c **** 
 702              		.loc 1 773 0
 703 020a 6374     		strb	r3, [r4, #17]	@ tmp174, hrtc_5(D)->State
 704 020c D4E7     		b	.L38	@
 705              	.L36:
 783:src/stm32f1xx_hal_rtc.c **** 
 706              		.loc 1 783 0
 707 020e 0123     		movs	r3, #1	@ tmp178,
 708 0210 6374     		strb	r3, [r4, #17]	@ tmp178, hrtc_5(D)->State
 785:src/stm32f1xx_hal_rtc.c **** 
 709              		.loc 1 785 0
 710 0212 0023     		movs	r3, #0	@ tmp180,
 711 0214 2374     		strb	r3, [r4, #16]	@ tmp180, hrtc_5(D)->Lock
 712              	.LVL70:
 713              	.L32:
 789:src/stm32f1xx_hal_rtc.c **** 
 714              		.loc 1 789 0
ARM GAS  /tmp/ccM6Uqrc.s 			page 49


 715 0216 3046     		mov	r0, r6	@, <retval>
 716 0218 70BD     		pop	{r4, r5, r6, pc}	@
 717              		.cfi_endproc
 718              	.LFE69:
 719              		.size	HAL_RTC_SetTime, .-HAL_RTC_SetTime
 720              		.align	1
 721              		.global	HAL_RTC_GetTime
 722              		.syntax unified
 723              		.thumb
 724              		.thumb_func
 725              		.fpu softvfp
 726              		.type	HAL_RTC_GetTime, %function
 727              	HAL_RTC_GetTime:
 728              	.LFB70:
 803:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 729              		.loc 1 803 0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 733              	.LVL71:
 734 021a 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 735              	.LCFI7:
 736              		.cfi_def_cfa_offset 32
 737              		.cfi_offset 3, -32
 738              		.cfi_offset 4, -28
 739              		.cfi_offset 5, -24
 740              		.cfi_offset 6, -20
 741              		.cfi_offset 7, -16
 742              		.cfi_offset 8, -12
 743              		.cfi_offset 9, -8
 744              		.cfi_offset 14, -4
 803:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 745              		.loc 1 803 0
 746 021e 0D46     		mov	r5, r1	@ sTime, sTime
 747 0220 9046     		mov	r8, r2	@ Format, Format
 807:src/stm32f1xx_hal_rtc.c ****   {
 748              		.loc 1 807 0
 749 0222 0446     		mov	r4, r0	@ hrtc, hrtc
 750 0224 10B9     		cbnz	r0, .L47	@ hrtc,
 751              	.LVL72:
 752              	.L49:
 809:src/stm32f1xx_hal_rtc.c ****   }
 753              		.loc 1 809 0
 754 0226 0120     		movs	r0, #1	@ <retval>,
 755 0228 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}	@
 756              	.LVL73:
 757              	.L47:
 807:src/stm32f1xx_hal_rtc.c ****   {
 758              		.loc 1 807 0 discriminator 1
 759 022c 0029     		cmp	r1, #0	@ sTime
 760 022e FAD0     		beq	.L49	@
 816:src/stm32f1xx_hal_rtc.c ****   {
 761              		.loc 1 816 0
 762 0230 0368     		ldr	r3, [r0]	@ _6, hrtc_3(D)->Instance
 763 0232 5B68     		ldr	r3, [r3, #4]	@ _7, _6->CRL
 764 0234 5E07     		lsls	r6, r3, #29	@, _7,
 765 0236 F6D4     		bmi	.L49	@,
ARM GAS  /tmp/ccM6Uqrc.s 			page 50


 766              	.LVL74:
 767              	.LBB16:
 768              	.LBB17:
 822:src/stm32f1xx_hal_rtc.c **** 
 769              		.loc 1 822 0
 770 0238 FFF7E2FE 		bl	RTC_ReadTimeCounter	@
 771              	.LVL75:
 825:src/stm32f1xx_hal_rtc.c ****   sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 772              		.loc 1 825 0
 773 023c 4FF46162 		mov	r2, #3600	@ tmp162,
 774 0240 B0FBF2F3 		udiv	r3, r0, r2	@ hours, counter_time, tmp162
 822:src/stm32f1xx_hal_rtc.c **** 
 775              		.loc 1 822 0
 776 0244 0746     		mov	r7, r0	@ counter_time,
 777              	.LVL76:
 826:src/stm32f1xx_hal_rtc.c ****   sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 778              		.loc 1 826 0
 779 0246 02FB1302 		mls	r2, r2, r3, r0	@ _14, tmp162, hours, counter_time
 780 024a 3C20     		movs	r0, #60	@ tmp171,
 781              	.LVL77:
 782 024c B2FBF0F1 		udiv	r1, r2, r0	@ tmp170, _14, tmp171
 827:src/stm32f1xx_hal_rtc.c **** 
 783              		.loc 1 827 0
 784 0250 00FB1122 		mls	r2, r0, r1, r2	@ tmp180, tmp171, tmp170, _14
 829:src/stm32f1xx_hal_rtc.c ****   {
 785              		.loc 1 829 0
 786 0254 172B     		cmp	r3, #23	@ hours,
 826:src/stm32f1xx_hal_rtc.c ****   sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 787              		.loc 1 826 0
 788 0256 6970     		strb	r1, [r5, #1]	@ tmp170, sTime_4(D)->Minutes
 827:src/stm32f1xx_hal_rtc.c **** 
 789              		.loc 1 827 0
 790 0258 AA70     		strb	r2, [r5, #2]	@ tmp180, sTime_4(D)->Seconds
 829:src/stm32f1xx_hal_rtc.c ****   {
 791              		.loc 1 829 0
 792 025a 40F28580 		bls	.L50	@,
 793              	.LVL78:
 835:src/stm32f1xx_hal_rtc.c **** 
 794              		.loc 1 835 0
 795 025e 1821     		movs	r1, #24	@ tmp186,
 796 0260 B3FBF1F2 		udiv	r2, r3, r1	@ tmp185, hours, tmp186
 797 0264 01FB1233 		mls	r3, r1, r2, r3	@ tmp189, tmp186, tmp185, hours
 798              	.LVL79:
 838:src/stm32f1xx_hal_rtc.c **** 
 799              		.loc 1 838 0
 800 0268 2046     		mov	r0, r4	@, hrtc
 835:src/stm32f1xx_hal_rtc.c **** 
 801              		.loc 1 835 0
 802 026a 2B70     		strb	r3, [r5]	@ tmp189, sTime_4(D)->Hours
 838:src/stm32f1xx_hal_rtc.c **** 
 803              		.loc 1 838 0
 804 026c FFF7DAFE 		bl	RTC_ReadAlarmCounter	@
 805              	.LVL80:
 841:src/stm32f1xx_hal_rtc.c ****     {
 806              		.loc 1 841 0
 807 0270 411C     		adds	r1, r0, #1	@, counter_alarm,
 838:src/stm32f1xx_hal_rtc.c **** 
ARM GAS  /tmp/ccM6Uqrc.s 			page 51


 808              		.loc 1 838 0
 809 0272 0646     		mov	r6, r0	@ counter_alarm,
 810              	.LVL81:
 841:src/stm32f1xx_hal_rtc.c ****     {
 811              		.loc 1 841 0
 812 0274 04D0     		beq	.L51	@,
 813 0276 8742     		cmp	r7, r0	@ counter_time, counter_alarm
 849:src/stm32f1xx_hal_rtc.c ****     }
 814              		.loc 1 849 0
 815 0278 2CBF     		ite	cs
 816 027a 4FF0FF36 		movcs	r6, #-1	@ counter_alarm,
 843:src/stm32f1xx_hal_rtc.c ****     }
 817              		.loc 1 843 0
 818 027e C61B     		subcc	r6, r0, r7	@ counter_alarm, counter_alarm, counter_time
 819              	.LVL82:
 820              	.L51:
 821 0280 404B     		ldr	r3, .L93	@ tmp194,
 856:src/stm32f1xx_hal_rtc.c ****     {
 822              		.loc 1 856 0
 823 0282 2046     		mov	r0, r4	@, hrtc
 824 0284 B7FBF3F9 		udiv	r9, r7, r3	@ tmp193, counter_time, tmp194
 825 0288 03FB1979 		mls	r9, r3, r9, r7	@ _24, tmp194, tmp193, counter_time
 826              	.LVL83:
 827 028c 4946     		mov	r1, r9	@, _24
 828 028e FFF749FF 		bl	RTC_WriteTimeCounter	@
 829              	.LVL84:
 830 0292 0028     		cmp	r0, #0	@
 831 0294 C7D1     		bne	.L49	@
 862:src/stm32f1xx_hal_rtc.c ****     {
 832              		.loc 1 862 0
 833 0296 721C     		adds	r2, r6, #1	@, counter_alarm,
 834 0298 2FD0     		beq	.L52	@,
 835              	.LVL85:
 867:src/stm32f1xx_hal_rtc.c ****       {
 836              		.loc 1 867 0
 837 029a 09EB0601 		add	r1, r9, r6	@, _24, counter_alarm
 838              	.LVL86:
 839              	.L88:
 875:src/stm32f1xx_hal_rtc.c ****       {
 840              		.loc 1 875 0
 841 029e 2046     		mov	r0, r4	@, hrtc
 842 02a0 FFF754FF 		bl	RTC_WriteAlarmCounter	@
 843              	.LVL87:
 844 02a4 0028     		cmp	r0, #0	@
 845 02a6 BED1     		bne	.L49	@
 846              	.LVL88:
 832:src/stm32f1xx_hal_rtc.c **** 
 847              		.loc 1 832 0
 848 02a8 364B     		ldr	r3, .L93	@ tmp200,
 849              	.LBB18:
 850              	.LBB19:
1796:src/stm32f1xx_hal_rtc.c ****   {
 851              		.loc 1 1796 0
 852 02aa 0026     		movs	r6, #0	@ loop,
 853              	.LBE19:
 854              	.LBE18:
 832:src/stm32f1xx_hal_rtc.c **** 
ARM GAS  /tmp/ccM6Uqrc.s 			page 52


 855              		.loc 1 832 0
 856 02ac B7FBF3F7 		udiv	r7, r7, r3	@ days_elapsed, counter_time, tmp200
 857              	.LVL89:
 858              	.LBB27:
 859              	.LBB24:
 860              	.LBB20:
 861              	.LBB21:
1886:src/stm32f1xx_hal_rtc.c ****   {
 862              		.loc 1 1886 0
 863 02b0 4FF0640E 		mov	lr, #100	@ tmp248,
1891:src/stm32f1xx_hal_rtc.c ****   {
 864              		.loc 1 1891 0
 865 02b4 4FF4C87C 		mov	ip, #400	@ tmp249,
 866              	.LBE21:
 867              	.LBE20:
1798:src/stm32f1xx_hal_rtc.c ****         (month == 8U) || (month == 10U) || (month == 12U))
 868              		.loc 1 1798 0
 869 02b8 40F2D529 		movw	r9, #725	@ tmp250,
 870              	.LVL90:
1790:src/stm32f1xx_hal_rtc.c **** 
 871              		.loc 1 1790 0
 872 02bc E07B     		ldrb	r0, [r4, #15]	@ zero_extendqisi2	@ year, hrtc_3(D)->DateToUpdate.Year
 873              	.LVL91:
1793:src/stm32f1xx_hal_rtc.c ****   day = hrtc->DateToUpdate.Date;
 874              		.loc 1 1793 0
 875 02be 617B     		ldrb	r1, [r4, #13]	@ zero_extendqisi2	@ month, hrtc_3(D)->DateToUpdate.Month
 876              	.LVL92:
1794:src/stm32f1xx_hal_rtc.c **** 
 877              		.loc 1 1794 0
 878 02c0 A27B     		ldrb	r2, [r4, #14]	@ zero_extendqisi2	@ day, hrtc_3(D)->DateToUpdate.Date
 879              	.LVL93:
 880              	.L53:
1796:src/stm32f1xx_hal_rtc.c ****   {
 881              		.loc 1 1796 0
 882 02c2 B742     		cmp	r7, r6	@ days_elapsed, loop
 883 02c4 1BD1     		bne	.L64	@,
1866:src/stm32f1xx_hal_rtc.c ****   hrtc->DateToUpdate.Date = day;
 884              		.loc 1 1866 0
 885 02c6 C9B2     		uxtb	r1, r1	@ _61, month
 886              	.LVL94:
1867:src/stm32f1xx_hal_rtc.c **** 
 887              		.loc 1 1867 0
 888 02c8 D2B2     		uxtb	r2, r2	@ _62, day
 889              	.LVL95:
1863:src/stm32f1xx_hal_rtc.c **** 
 890              		.loc 1 1863 0
 891 02ca E073     		strb	r0, [r4, #15]	@ year, hrtc_3(D)->DateToUpdate.Year
1866:src/stm32f1xx_hal_rtc.c ****   hrtc->DateToUpdate.Date = day;
 892              		.loc 1 1866 0
 893 02cc 6173     		strb	r1, [r4, #13]	@ _61, hrtc_3(D)->DateToUpdate.Month
1867:src/stm32f1xx_hal_rtc.c **** 
 894              		.loc 1 1867 0
 895 02ce A273     		strb	r2, [r4, #14]	@ _62, hrtc_3(D)->DateToUpdate.Date
1870:src/stm32f1xx_hal_rtc.c **** }
 896              		.loc 1 1870 0
 897 02d0 FFF7C2FE 		bl	RTC_WeekDayNum	@
 898              	.LVL96:
ARM GAS  /tmp/ccM6Uqrc.s 			page 53


 899 02d4 2073     		strb	r0, [r4, #12]	@, hrtc_3(D)->DateToUpdate.WeekDay
 900              	.LVL97:
 901              	.L65:
 902              	.LBE24:
 903              	.LBE27:
 890:src/stm32f1xx_hal_rtc.c ****   {
 904              		.loc 1 890 0
 905 02d6 B8F1000F 		cmp	r8, #0	@ Format
 906 02da 0BD0     		beq	.L90	@
 893:src/stm32f1xx_hal_rtc.c ****     sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 907              		.loc 1 893 0
 908 02dc 2878     		ldrb	r0, [r5]	@ zero_extendqisi2	@, sTime_4(D)->Hours
 909 02de FFF7A8FE 		bl	RTC_ByteToBcd2	@
 910              	.LVL98:
 911 02e2 2870     		strb	r0, [r5]	@, sTime_4(D)->Hours
 894:src/stm32f1xx_hal_rtc.c ****     sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 912              		.loc 1 894 0
 913 02e4 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2	@, sTime_4(D)->Minutes
 914 02e6 FFF7A4FE 		bl	RTC_ByteToBcd2	@
 915              	.LVL99:
 916 02ea 6870     		strb	r0, [r5, #1]	@, sTime_4(D)->Minutes
 895:src/stm32f1xx_hal_rtc.c ****   }
 917              		.loc 1 895 0
 918 02ec A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2	@, sTime_4(D)->Seconds
 919 02ee FFF7A0FE 		bl	RTC_ByteToBcd2	@
 920              	.LVL100:
 921 02f2 A870     		strb	r0, [r5, #2]	@, sTime_4(D)->Seconds
 922              	.L90:
 898:src/stm32f1xx_hal_rtc.c **** }
 923              		.loc 1 898 0
 924 02f4 0020     		movs	r0, #0	@ <retval>,
 925 02f6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}	@
 926              	.LVL101:
 927              	.L52:
 875:src/stm32f1xx_hal_rtc.c ****       {
 928              		.loc 1 875 0
 929 02fa 3146     		mov	r1, r6	@, counter_alarm
 930 02fc CFE7     		b	.L88	@
 931              	.LVL102:
 932              	.L64:
 933              	.LBB28:
 934              	.LBB25:
1798:src/stm32f1xx_hal_rtc.c ****         (month == 8U) || (month == 10U) || (month == 12U))
 935              		.loc 1 1798 0
 936 02fe 4B1E     		subs	r3, r1, #1	@ _70, month,
 937 0300 092B     		cmp	r3, #9	@ _70,
 938 0302 35D8     		bhi	.L55	@,
 939 0304 29FA03F3 		lsr	r3, r9, r3	@ tmp202, tmp250, _70
 940 0308 DB07     		lsls	r3, r3, #31	@, tmp202,
 941 030a 2FD4     		bmi	.L85	@,
 942              	.L56:
1822:src/stm32f1xx_hal_rtc.c ****     {
 943              		.loc 1 1822 0
 944 030c 21F00203 		bic	r3, r1, #2	@ _73, month,
 945 0310 042B     		cmp	r3, #4	@ _73,
 946 0312 01D0     		beq	.L59	@,
 947 0314 092B     		cmp	r3, #9	@ _73,
ARM GAS  /tmp/ccM6Uqrc.s 			page 54


 948 0316 04D1     		bne	.L60	@,
 949              	.L59:
1824:src/stm32f1xx_hal_rtc.c ****       {
 950              		.loc 1 1824 0
 951 0318 1D2A     		cmp	r2, #29	@ day,
 952              	.L92:
1801:src/stm32f1xx_hal_rtc.c ****       {
 953              		.loc 1 1801 0
 954 031a 06D9     		bls	.L89	@,
1831:src/stm32f1xx_hal_rtc.c ****         day = 1U;
 955              		.loc 1 1831 0
 956 031c 0131     		adds	r1, r1, #1	@ month, month,
 957              	.LVL103:
1832:src/stm32f1xx_hal_rtc.c ****       }
 958              		.loc 1 1832 0
 959 031e 0122     		movs	r2, #1	@ day,
 960 0320 2DE0     		b	.L58	@
 961              	.LVL104:
 962              	.L60:
1835:src/stm32f1xx_hal_rtc.c ****     {
 963              		.loc 1 1835 0
 964 0322 0229     		cmp	r1, #2	@ month,
 965 0324 2BD1     		bne	.L58	@,
1837:src/stm32f1xx_hal_rtc.c ****       {
 966              		.loc 1 1837 0
 967 0326 1B2A     		cmp	r2, #27	@ day,
 968 0328 01D8     		bhi	.L62	@,
 969              	.L89:
1839:src/stm32f1xx_hal_rtc.c ****       }
 970              		.loc 1 1839 0
 971 032a 0132     		adds	r2, r2, #1	@ day, day,
 972              	.LVL105:
 973 032c 27E0     		b	.L58	@
 974              	.L62:
1841:src/stm32f1xx_hal_rtc.c ****       {
 975              		.loc 1 1841 0
 976 032e 1C2A     		cmp	r2, #28	@ day,
 977 0330 13D1     		bne	.L63	@,
1844:src/stm32f1xx_hal_rtc.c ****         {
 978              		.loc 1 1844 0
 979 0332 82B2     		uxth	r2, r0	@ _53, year
 980              	.LVL106:
 981              	.LBB23:
 982              	.LBB22:
1881:src/stm32f1xx_hal_rtc.c ****   {
 983              		.loc 1 1881 0
 984 0334 9307     		lsls	r3, r2, #30	@, _53,
 985 0336 12D1     		bne	.L71	@,
1886:src/stm32f1xx_hal_rtc.c ****   {
 986              		.loc 1 1886 0
 987 0338 B2FBFEF3 		udiv	r3, r2, lr	@ tmp215, _53, tmp248
 988 033c 0EFB1323 		mls	r3, lr, r3, r2	@ tmp219, tmp248, tmp215, _53
 989 0340 9BB2     		uxth	r3, r3	@ tmp221, tmp219
 990 0342 7BB9     		cbnz	r3, .L72	@ tmp221,
1891:src/stm32f1xx_hal_rtc.c ****   {
 991              		.loc 1 1891 0
 992 0344 B2FBFCF3 		udiv	r3, r2, ip	@ tmp225, _53, tmp249
ARM GAS  /tmp/ccM6Uqrc.s 			page 55


 993 0348 0CFB1323 		mls	r3, ip, r3, r2	@ tmp229, tmp249, tmp225, _53
 994 034c 9BB2     		uxth	r3, r3	@ tmp231, tmp229
 995              	.LBE22:
 996              	.LBE23:
1846:src/stm32f1xx_hal_rtc.c ****         }
 997              		.loc 1 1846 0
 998 034e 002B     		cmp	r3, #0	@ tmp231,
 999 0350 16BF     		itet	ne
 1000 0352 0122     		movne	r2, #1	@ day,
 1001              	.LVL107:
 1002 0354 1D22     		moveq	r2, #29	@ day,
 1003 0356 0321     		movne	r1, #3	@ month,
 1004              	.LVL108:
 1005 0358 11E0     		b	.L58	@
 1006              	.LVL109:
 1007              	.L63:
1854:src/stm32f1xx_hal_rtc.c ****       {
 1008              		.loc 1 1854 0
 1009 035a 1D2A     		cmp	r2, #29	@ day,
 1010 035c 0FD1     		bne	.L58	@,
 1011              	.LVL110:
 1012              	.L71:
1851:src/stm32f1xx_hal_rtc.c ****         }
 1013              		.loc 1 1851 0
 1014 035e 0122     		movs	r2, #1	@ day,
1850:src/stm32f1xx_hal_rtc.c ****           day = 1U;
 1015              		.loc 1 1850 0
 1016 0360 0321     		movs	r1, #3	@ month,
 1017              	.LVL111:
 1018 0362 0CE0     		b	.L58	@
 1019              	.LVL112:
 1020              	.L72:
1846:src/stm32f1xx_hal_rtc.c ****         }
 1021              		.loc 1 1846 0
 1022 0364 1D22     		movs	r2, #29	@ day,
 1023              	.LVL113:
 1024 0366 0AE0     		b	.L58	@
 1025              	.LVL114:
 1026              	.L50:
 1027              	.LBE25:
 1028              	.LBE28:
 886:src/stm32f1xx_hal_rtc.c ****   }
 1029              		.loc 1 886 0
 1030 0368 2B70     		strb	r3, [r5]	@ hours, sTime_4(D)->Hours
 1031 036a B4E7     		b	.L65	@
 1032              	.LVL115:
 1033              	.L85:
 1034              	.LBB29:
 1035              	.LBB26:
1801:src/stm32f1xx_hal_rtc.c ****       {
 1036              		.loc 1 1801 0
 1037 036c 1E2A     		cmp	r2, #30	@ day,
 1038 036e D4E7     		b	.L92	@
 1039              	.L55:
1799:src/stm32f1xx_hal_rtc.c ****     {
 1040              		.loc 1 1799 0
 1041 0370 0C29     		cmp	r1, #12	@ month,
ARM GAS  /tmp/ccM6Uqrc.s 			page 56


 1042 0372 CBD1     		bne	.L56	@,
1801:src/stm32f1xx_hal_rtc.c ****       {
 1043              		.loc 1 1801 0
 1044 0374 1E2A     		cmp	r2, #30	@ day,
 1045 0376 D8D9     		bls	.L89	@,
 1046              	.LVL116:
1817:src/stm32f1xx_hal_rtc.c ****           year++;
 1047              		.loc 1 1817 0
 1048 0378 0122     		movs	r2, #1	@ day,
1816:src/stm32f1xx_hal_rtc.c ****           day = 1U;
 1049              		.loc 1 1816 0
 1050 037a 1146     		mov	r1, r2	@ month, day
1818:src/stm32f1xx_hal_rtc.c ****         }
 1051              		.loc 1 1818 0
 1052 037c 0130     		adds	r0, r0, #1	@ year, year,
 1053              	.LVL117:
 1054              	.L58:
1796:src/stm32f1xx_hal_rtc.c ****   {
 1055              		.loc 1 1796 0
 1056 037e 0136     		adds	r6, r6, #1	@ loop, loop,
 1057              	.LVL118:
 1058 0380 9FE7     		b	.L53	@
 1059              	.L94:
 1060 0382 00BF     		.align	2
 1061              	.L93:
 1062 0384 80510100 		.word	86400
 1063              	.LBE26:
 1064              	.LBE29:
 1065              	.LBE17:
 1066              	.LBE16:
 1067              		.cfi_endproc
 1068              	.LFE70:
 1069              		.size	HAL_RTC_GetTime, .-HAL_RTC_GetTime
 1070              		.align	1
 1071              		.global	HAL_RTC_SetDate
 1072              		.syntax unified
 1073              		.thumb
 1074              		.thumb_func
 1075              		.fpu softvfp
 1076              		.type	HAL_RTC_SetDate, %function
 1077              	HAL_RTC_SetDate:
 1078              	.LFB71:
 914:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 1079              		.loc 1 914 0
 1080              		.cfi_startproc
 1081              		@ args = 0, pretend = 0, frame = 0
 1082              		@ frame_needed = 0, uses_anonymous_args = 0
 1083              	.LVL119:
 1084 0388 70B5     		push	{r4, r5, r6, lr}	@
 1085              	.LCFI8:
 1086              		.cfi_def_cfa_offset 16
 1087              		.cfi_offset 4, -16
 1088              		.cfi_offset 5, -12
 1089              		.cfi_offset 6, -8
 1090              		.cfi_offset 14, -4
 914:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 1091              		.loc 1 914 0
ARM GAS  /tmp/ccM6Uqrc.s 			page 57


 1092 038a 0D46     		mov	r5, r1	@ sDate, sDate
 918:src/stm32f1xx_hal_rtc.c ****   {
 1093              		.loc 1 918 0
 1094 038c 0446     		mov	r4, r0	@ hrtc, hrtc
 1095 038e 58B3     		cbz	r0, .L102	@ hrtc,
 918:src/stm32f1xx_hal_rtc.c ****   {
 1096              		.loc 1 918 0 is_stmt 0 discriminator 1
 1097 0390 51B3     		cbz	r1, .L102	@ sDate,
 927:src/stm32f1xx_hal_rtc.c **** 
 1098              		.loc 1 927 0 is_stmt 1
 1099 0392 037C     		ldrb	r3, [r0, #16]	@ zero_extendqisi2	@ hrtc_6(D)->Lock, hrtc_6(D)->Lock
 1100 0394 0220     		movs	r0, #2	@ <retval>,
 1101              	.LVL120:
 1102 0396 012B     		cmp	r3, #1	@ hrtc_6(D)->Lock,
 1103 0398 27D0     		beq	.L96	@,
 927:src/stm32f1xx_hal_rtc.c **** 
 1104              		.loc 1 927 0 is_stmt 0 discriminator 2
 1105 039a 0123     		movs	r3, #1	@ tmp136,
 929:src/stm32f1xx_hal_rtc.c **** 
 1106              		.loc 1 929 0 is_stmt 1 discriminator 2
 1107 039c 6074     		strb	r0, [r4, #17]	@ <retval>, hrtc_6(D)->State
 927:src/stm32f1xx_hal_rtc.c **** 
 1108              		.loc 1 927 0 discriminator 2
 1109 039e 2374     		strb	r3, [r4, #16]	@ tmp136, hrtc_6(D)->Lock
 1110 03a0 C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2	@ sDate_7(D)->Year, sDate_7(D)->Year
 931:src/stm32f1xx_hal_rtc.c ****   {
 1111              		.loc 1 931 0 discriminator 2
 1112 03a2 1ABB     		cbnz	r2, .L97	@ Format,
 938:src/stm32f1xx_hal_rtc.c ****     hrtc->DateToUpdate.Month = sDate->Month;
 1113              		.loc 1 938 0
 1114 03a4 E073     		strb	r0, [r4, #15]	@ sDate_7(D)->Year, hrtc_6(D)->DateToUpdate.Year
 939:src/stm32f1xx_hal_rtc.c ****     hrtc->DateToUpdate.Date  = sDate->Date;
 1115              		.loc 1 939 0
 1116 03a6 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2	@ _15, sDate_7(D)->Month
 1117 03a8 6373     		strb	r3, [r4, #13]	@ _15, hrtc_6(D)->DateToUpdate.Month
 940:src/stm32f1xx_hal_rtc.c ****   }
 1118              		.loc 1 940 0
 1119 03aa 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2	@ _17, sDate_7(D)->Date
 1120 03ac A373     		strb	r3, [r4, #14]	@ _17, hrtc_6(D)->DateToUpdate.Date
 1121              	.LVL121:
 1122              	.L98:
 955:src/stm32f1xx_hal_rtc.c ****   sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 1123              		.loc 1 955 0
 1124 03ae A27B     		ldrb	r2, [r4, #14]	@ zero_extendqisi2	@, hrtc_6(D)->DateToUpdate.Date
 1125 03b0 617B     		ldrb	r1, [r4, #13]	@ zero_extendqisi2	@, hrtc_6(D)->DateToUpdate.Month
 1126              	.LVL122:
 1127 03b2 E07B     		ldrb	r0, [r4, #15]	@ zero_extendqisi2	@, hrtc_6(D)->DateToUpdate.Year
 1128 03b4 FFF750FE 		bl	RTC_WeekDayNum	@
 1129              	.LVL123:
 1130 03b8 2073     		strb	r0, [r4, #12]	@ tmp155, hrtc_6(D)->DateToUpdate.WeekDay
 956:src/stm32f1xx_hal_rtc.c **** 
 1131              		.loc 1 956 0
 1132 03ba 2870     		strb	r0, [r5]	@ tmp155, sDate_7(D)->WeekDay
 960:src/stm32f1xx_hal_rtc.c **** 
 1133              		.loc 1 960 0
 1134 03bc 2046     		mov	r0, r4	@, hrtc
 1135 03be FFF71FFE 		bl	RTC_ReadTimeCounter	@
ARM GAS  /tmp/ccM6Uqrc.s 			page 58


 1136              	.LVL124:
 964:src/stm32f1xx_hal_rtc.c ****   {
 1137              		.loc 1 964 0
 1138 03c2 1C4B     		ldr	r3, .L110	@ tmp158,
 1139 03c4 9842     		cmp	r0, r3	@ counter_time, tmp158
 1140 03c6 30D9     		bls	.L99	@,
 1141 03c8 A3F60F63 		subw	r3, r3, #3599	@ tmp162, tmp162,
 1142 03cc B0FBF3F5 		udiv	r5, r0, r3	@ tmp161, counter_time, tmp162
 1143              	.LVL125:
 1144 03d0 03FB1505 		mls	r5, r3, r5, r0	@ _5, tmp162, tmp161, counter_time
 1145              	.LVL126:
 969:src/stm32f1xx_hal_rtc.c ****     {
 1146              		.loc 1 969 0
 1147 03d4 2046     		mov	r0, r4	@, hrtc
 1148              	.LVL127:
 1149 03d6 2946     		mov	r1, r5	@, _5
 1150 03d8 FFF7A4FE 		bl	RTC_WriteTimeCounter	@
 1151              	.LVL128:
 1152 03dc 0646     		mov	r6, r0	@ tmp165,
 1153 03de 88B1     		cbz	r0, .L100	@ tmp165,
 972:src/stm32f1xx_hal_rtc.c **** 
 1154              		.loc 1 972 0
 1155 03e0 0423     		movs	r3, #4	@ tmp166,
 1156 03e2 6374     		strb	r3, [r4, #17]	@ tmp166, hrtc_6(D)->State
 975:src/stm32f1xx_hal_rtc.c **** 
 1157              		.loc 1 975 0
 1158 03e4 0023     		movs	r3, #0	@ tmp168,
 1159 03e6 2374     		strb	r3, [r4, #16]	@ tmp168, hrtc_6(D)->Lock
 1160              	.LVL129:
 1161              	.L102:
 920:src/stm32f1xx_hal_rtc.c ****   }
 1162              		.loc 1 920 0
 1163 03e8 0120     		movs	r0, #1	@ <retval>,
 1164              	.L96:
1014:src/stm32f1xx_hal_rtc.c **** 
 1165              		.loc 1 1014 0
 1166 03ea 70BD     		pop	{r4, r5, r6, pc}	@
 1167              	.LVL130:
 1168              	.L97:
 949:src/stm32f1xx_hal_rtc.c ****     hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 1169              		.loc 1 949 0
 1170 03ec FFF72CFE 		bl	RTC_Bcd2ToByte	@
 1171              	.LVL131:
 1172 03f0 E073     		strb	r0, [r4, #15]	@, hrtc_6(D)->DateToUpdate.Year
 950:src/stm32f1xx_hal_rtc.c ****     hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 1173              		.loc 1 950 0
 1174 03f2 4878     		ldrb	r0, [r1, #1]	@ zero_extendqisi2	@, sDate_7(D)->Month
 1175 03f4 FFF728FE 		bl	RTC_Bcd2ToByte	@
 1176              	.LVL132:
 1177 03f8 6073     		strb	r0, [r4, #13]	@, hrtc_6(D)->DateToUpdate.Month
 951:src/stm32f1xx_hal_rtc.c ****   }
 1178              		.loc 1 951 0
 1179 03fa 8878     		ldrb	r0, [r1, #2]	@ zero_extendqisi2	@, sDate_7(D)->Date
 1180 03fc FFF724FE 		bl	RTC_Bcd2ToByte	@
 1181              	.LVL133:
 1182 0400 A073     		strb	r0, [r4, #14]	@, hrtc_6(D)->DateToUpdate.Date
 1183 0402 D4E7     		b	.L98	@
ARM GAS  /tmp/ccM6Uqrc.s 			page 59


 1184              	.LVL134:
 1185              	.L100:
 981:src/stm32f1xx_hal_rtc.c **** 
 1186              		.loc 1 981 0
 1187 0404 2046     		mov	r0, r4	@, hrtc
 1188 0406 FFF70DFE 		bl	RTC_ReadAlarmCounter	@
 1189              	.LVL135:
 984:src/stm32f1xx_hal_rtc.c ****     {
 1190              		.loc 1 984 0
 1191 040a 431C     		adds	r3, r0, #1	@, counter_alarm,
 1192 040c 0DD0     		beq	.L99	@,
 986:src/stm32f1xx_hal_rtc.c ****       {
 1193              		.loc 1 986 0
 1194 040e 8542     		cmp	r5, r0	@ _5, counter_alarm
 1195 0410 0BD9     		bls	.L99	@,
 1196              	.LVL136:
 992:src/stm32f1xx_hal_rtc.c ****         {
 1197              		.loc 1 992 0
 1198 0412 00F5A831 		add	r1, r0, #86016	@, counter_alarm,
 1199 0416 01F5C071 		add	r1, r1, #384	@,,
 1200 041a 2046     		mov	r0, r4	@, hrtc
 1201              	.LVL137:
 1202 041c FFF796FE 		bl	RTC_WriteAlarmCounter	@
 1203              	.LVL138:
 1204 0420 18B1     		cbz	r0, .L99	@,
 995:src/stm32f1xx_hal_rtc.c **** 
 1205              		.loc 1 995 0
 1206 0422 0423     		movs	r3, #4	@ tmp173,
 998:src/stm32f1xx_hal_rtc.c **** 
 1207              		.loc 1 998 0
 1208 0424 2674     		strb	r6, [r4, #16]	@ tmp165, hrtc_6(D)->Lock
 995:src/stm32f1xx_hal_rtc.c **** 
 1209              		.loc 1 995 0
 1210 0426 6374     		strb	r3, [r4, #17]	@ tmp173, hrtc_6(D)->State
 1211 0428 DEE7     		b	.L102	@
 1212              	.LVL139:
 1213              	.L99:
1008:src/stm32f1xx_hal_rtc.c **** 
 1214              		.loc 1 1008 0
 1215 042a 0123     		movs	r3, #1	@ tmp177,
1011:src/stm32f1xx_hal_rtc.c **** 
 1216              		.loc 1 1011 0
 1217 042c 0020     		movs	r0, #0	@ tmp179,
1008:src/stm32f1xx_hal_rtc.c **** 
 1218              		.loc 1 1008 0
 1219 042e 6374     		strb	r3, [r4, #17]	@ tmp177, hrtc_6(D)->State
1011:src/stm32f1xx_hal_rtc.c **** 
 1220              		.loc 1 1011 0
 1221 0430 2074     		strb	r0, [r4, #16]	@ tmp179, hrtc_6(D)->Lock
1013:src/stm32f1xx_hal_rtc.c **** }
 1222              		.loc 1 1013 0
 1223 0432 70BD     		pop	{r4, r5, r6, pc}	@
 1224              	.LVL140:
 1225              	.L111:
 1226              		.align	2
 1227              	.L110:
 1228 0434 8F5F0100 		.word	89999
ARM GAS  /tmp/ccM6Uqrc.s 			page 60


 1229              		.cfi_endproc
 1230              	.LFE71:
 1231              		.size	HAL_RTC_SetDate, .-HAL_RTC_SetDate
 1232              		.align	1
 1233              		.global	HAL_RTC_GetDate
 1234              		.syntax unified
 1235              		.thumb
 1236              		.thumb_func
 1237              		.fpu softvfp
 1238              		.type	HAL_RTC_GetDate, %function
 1239              	HAL_RTC_GetDate:
 1240              	.LFB72:
1028:src/stm32f1xx_hal_rtc.c ****   RTC_TimeTypeDef stime = {0U};
 1241              		.loc 1 1028 0
 1242              		.cfi_startproc
 1243              		@ args = 0, pretend = 0, frame = 8
 1244              		@ frame_needed = 0, uses_anonymous_args = 0
 1245              	.LVL141:
 1246 0438 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}	@
 1247              	.LCFI9:
 1248              		.cfi_def_cfa_offset 32
 1249              		.cfi_offset 4, -20
 1250              		.cfi_offset 5, -16
 1251              		.cfi_offset 6, -12
 1252              		.cfi_offset 7, -8
 1253              		.cfi_offset 14, -4
1028:src/stm32f1xx_hal_rtc.c ****   RTC_TimeTypeDef stime = {0U};
 1254              		.loc 1 1028 0
 1255 043a 1746     		mov	r7, r2	@ Format, Format
1029:src/stm32f1xx_hal_rtc.c **** 
 1256              		.loc 1 1029 0
 1257 043c 0022     		movs	r2, #0	@ tmp122,
 1258              	.LVL142:
1028:src/stm32f1xx_hal_rtc.c ****   RTC_TimeTypeDef stime = {0U};
 1259              		.loc 1 1028 0
 1260 043e 0C46     		mov	r4, r1	@ sDate, sDate
1029:src/stm32f1xx_hal_rtc.c **** 
 1261              		.loc 1 1029 0
 1262 0440 ADF80420 		strh	r2, [sp, #4]	@ movhi	@ tmp122, stime
 1263 0444 8DF80620 		strb	r2, [sp, #6]	@ tmp122, stime
1032:src/stm32f1xx_hal_rtc.c ****   {
 1264              		.loc 1 1032 0
 1265 0448 0546     		mov	r5, r0	@ hrtc, hrtc
 1266 044a 18B9     		cbnz	r0, .L113	@ hrtc,
 1267              	.LVL143:
 1268              	.L115:
1034:src/stm32f1xx_hal_rtc.c ****   }
 1269              		.loc 1 1034 0
 1270 044c 0122     		movs	r2, #1	@ <retval>,
 1271              	.L114:
1061:src/stm32f1xx_hal_rtc.c **** 
 1272              		.loc 1 1061 0
 1273 044e 1046     		mov	r0, r2	@, <retval>
 1274 0450 03B0     		add	sp, sp, #12	@,,
 1275              	.LCFI10:
 1276              		.cfi_remember_state
 1277              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccM6Uqrc.s 			page 61


 1278              		@ sp needed	@
 1279 0452 F0BD     		pop	{r4, r5, r6, r7, pc}	@
 1280              	.LVL144:
 1281              	.L113:
 1282              	.LCFI11:
 1283              		.cfi_restore_state
1032:src/stm32f1xx_hal_rtc.c ****   {
 1284              		.loc 1 1032 0 discriminator 1
 1285 0454 0029     		cmp	r1, #0	@ sDate
 1286 0456 F9D0     		beq	.L115	@
1041:src/stm32f1xx_hal_rtc.c ****   {
 1287              		.loc 1 1041 0
 1288 0458 01A9     		add	r1, sp, #4	@ tmp138,,
 1289              	.LVL145:
 1290 045a FFF7FEFF 		bl	HAL_RTC_GetTime	@
 1291              	.LVL146:
 1292 045e 0246     		mov	r2, r0	@ <retval>,
 1293 0460 0028     		cmp	r0, #0	@ <retval>
 1294 0462 F3D1     		bne	.L115	@
1047:src/stm32f1xx_hal_rtc.c ****   sDate->Year     = hrtc->DateToUpdate.Year;
 1295              		.loc 1 1047 0
 1296 0464 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2	@ _9, hrtc_5(D)->DateToUpdate.WeekDay
 1297 0466 2370     		strb	r3, [r4]	@ _9, sDate_6(D)->WeekDay
1048:src/stm32f1xx_hal_rtc.c ****   sDate->Month    = hrtc->DateToUpdate.Month;
 1298              		.loc 1 1048 0
 1299 0468 E87B     		ldrb	r0, [r5, #15]	@ zero_extendqisi2	@ _11, hrtc_5(D)->DateToUpdate.Year
 1300 046a E070     		strb	r0, [r4, #3]	@ _11, sDate_6(D)->Year
1049:src/stm32f1xx_hal_rtc.c ****   sDate->Date     = hrtc->DateToUpdate.Date;
 1301              		.loc 1 1049 0
 1302 046c 6E7B     		ldrb	r6, [r5, #13]	@ zero_extendqisi2	@ _13, hrtc_5(D)->DateToUpdate.Month
 1303 046e 6670     		strb	r6, [r4, #1]	@ _13, sDate_6(D)->Month
1050:src/stm32f1xx_hal_rtc.c **** 
 1304              		.loc 1 1050 0
 1305 0470 A97B     		ldrb	r1, [r5, #14]	@ zero_extendqisi2	@ _15, hrtc_5(D)->DateToUpdate.Date
 1306 0472 A170     		strb	r1, [r4, #2]	@ _15, sDate_6(D)->Date
1053:src/stm32f1xx_hal_rtc.c ****   {
 1307              		.loc 1 1053 0
 1308 0474 002F     		cmp	r7, #0	@ Format
 1309 0476 EAD0     		beq	.L114	@
1056:src/stm32f1xx_hal_rtc.c ****     sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 1310              		.loc 1 1056 0
 1311 0478 FFF7DBFD 		bl	RTC_ByteToBcd2	@
 1312              	.LVL147:
 1313 047c E070     		strb	r0, [r4, #3]	@, sDate_6(D)->Year
1057:src/stm32f1xx_hal_rtc.c ****     sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 1314              		.loc 1 1057 0
 1315 047e 3046     		mov	r0, r6	@, _13
 1316 0480 FFF7D7FD 		bl	RTC_ByteToBcd2	@
 1317              	.LVL148:
 1318 0484 6070     		strb	r0, [r4, #1]	@, sDate_6(D)->Month
1058:src/stm32f1xx_hal_rtc.c ****   }
 1319              		.loc 1 1058 0
 1320 0486 0846     		mov	r0, r1	@, _15
 1321 0488 FFF7D3FD 		bl	RTC_ByteToBcd2	@
 1322              	.LVL149:
 1323 048c A070     		strb	r0, [r4, #2]	@, sDate_6(D)->Date
 1324 048e DEE7     		b	.L114	@
ARM GAS  /tmp/ccM6Uqrc.s 			page 62


 1325              		.cfi_endproc
 1326              	.LFE72:
 1327              		.size	HAL_RTC_GetDate, .-HAL_RTC_GetDate
 1328              		.align	1
 1329              		.global	HAL_RTC_SetAlarm
 1330              		.syntax unified
 1331              		.thumb
 1332              		.thumb_func
 1333              		.fpu softvfp
 1334              		.type	HAL_RTC_SetAlarm, %function
 1335              	HAL_RTC_SetAlarm:
 1336              	.LFB73:
1093:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_alarm = 0U, counter_time;
 1337              		.loc 1 1093 0
 1338              		.cfi_startproc
 1339              		@ args = 0, pretend = 0, frame = 8
 1340              		@ frame_needed = 0, uses_anonymous_args = 0
 1341              	.LVL150:
 1342 0490 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}	@
 1343              	.LCFI12:
 1344              		.cfi_def_cfa_offset 40
 1345              		.cfi_offset 4, -32
 1346              		.cfi_offset 5, -28
 1347              		.cfi_offset 6, -24
 1348              		.cfi_offset 7, -20
 1349              		.cfi_offset 8, -16
 1350              		.cfi_offset 9, -12
 1351              		.cfi_offset 10, -8
 1352              		.cfi_offset 14, -4
1093:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_alarm = 0U, counter_time;
 1353              		.loc 1 1093 0
 1354 0494 9246     		mov	r10, r2	@ Format, Format
1095:src/stm32f1xx_hal_rtc.c **** 
 1355              		.loc 1 1095 0
 1356 0496 0022     		movs	r2, #0	@ tmp149,
 1357              	.LVL151:
1093:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_alarm = 0U, counter_time;
 1358              		.loc 1 1093 0
 1359 0498 8846     		mov	r8, r1	@ sAlarm, sAlarm
1095:src/stm32f1xx_hal_rtc.c **** 
 1360              		.loc 1 1095 0
 1361 049a ADF80420 		strh	r2, [sp, #4]	@ movhi	@ tmp149, stime
 1362 049e 8DF80620 		strb	r2, [sp, #6]	@ tmp149, stime
1098:src/stm32f1xx_hal_rtc.c ****   {
 1363              		.loc 1 1098 0
 1364 04a2 0446     		mov	r4, r0	@ hrtc, hrtc
 1365 04a4 18B9     		cbnz	r0, .L123	@ hrtc,
 1366              	.LVL152:
 1367              	.L134:
1160:src/stm32f1xx_hal_rtc.c ****   }
 1368              		.loc 1 1160 0
 1369 04a6 0120     		movs	r0, #1	@ <retval>,
 1370              	.L124:
1170:src/stm32f1xx_hal_rtc.c **** 
 1371              		.loc 1 1170 0
 1372 04a8 02B0     		add	sp, sp, #8	@,,
 1373              	.LCFI13:
ARM GAS  /tmp/ccM6Uqrc.s 			page 63


 1374              		.cfi_remember_state
 1375              		.cfi_def_cfa_offset 32
 1376              		@ sp needed	@
 1377 04aa BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1378              	.LVL153:
 1379              	.L123:
 1380              	.LCFI14:
 1381              		.cfi_restore_state
1098:src/stm32f1xx_hal_rtc.c ****   {
 1382              		.loc 1 1098 0 discriminator 1
 1383 04ae 0029     		cmp	r1, #0	@ sAlarm
 1384 04b0 F9D0     		beq	.L134	@
1108:src/stm32f1xx_hal_rtc.c **** 
 1385              		.loc 1 1108 0
 1386 04b2 037C     		ldrb	r3, [r0, #16]	@ zero_extendqisi2	@ hrtc_7(D)->Lock, hrtc_7(D)->Lock
 1387 04b4 012B     		cmp	r3, #1	@ hrtc_7(D)->Lock,
 1388 04b6 4FF00203 		mov	r3, #2	@ <retval>,
 1389 04ba 43D0     		beq	.L130	@,
1108:src/stm32f1xx_hal_rtc.c **** 
 1390              		.loc 1 1108 0 is_stmt 0 discriminator 2
 1391 04bc 0121     		movs	r1, #1	@ tmp153,
 1392              	.LVL154:
1110:src/stm32f1xx_hal_rtc.c **** 
 1393              		.loc 1 1110 0 is_stmt 1 discriminator 2
 1394 04be 4374     		strb	r3, [r0, #17]	@ <retval>, hrtc_7(D)->State
1108:src/stm32f1xx_hal_rtc.c **** 
 1395              		.loc 1 1108 0 discriminator 2
 1396 04c0 0174     		strb	r1, [r0, #16]	@ tmp153, hrtc_7(D)->Lock
1113:src/stm32f1xx_hal_rtc.c ****   {
 1397              		.loc 1 1113 0 discriminator 2
 1398 04c2 01A9     		add	r1, sp, #4	@ tmp202,,
 1399 04c4 FFF7FEFF 		bl	HAL_RTC_GetTime	@
 1400              	.LVL155:
 1401 04c8 0028     		cmp	r0, #0	@
 1402 04ca ECD1     		bne	.L134	@
1120:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Seconds));
 1403              		.loc 1 1120 0
 1404 04cc 3C26     		movs	r6, #60	@ tmp164,
1119:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Minutes * 60U) + \
 1405              		.loc 1 1119 0
 1406 04ce 4FF46169 		mov	r9, #3600	@ tmp161,
1120:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Seconds));
 1407              		.loc 1 1120 0
 1408 04d2 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2	@ stime.Minutes, stime.Minutes
1119:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Minutes * 60U) + \
 1409              		.loc 1 1119 0
 1410 04d6 9DF80450 		ldrb	r5, [sp, #4]	@ zero_extendqisi2	@ stime.Hours, stime.Hours
1120:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Seconds));
 1411              		.loc 1 1120 0
 1412 04da 7343     		muls	r3, r6, r3	@ tmp163, tmp164
1119:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Minutes * 60U) + \
 1413              		.loc 1 1119 0
 1414 04dc 09FB0535 		mla	r5, r9, r5, r3	@ tmp165, tmp161, stime.Hours, tmp163
1121:src/stm32f1xx_hal_rtc.c **** 
 1415              		.loc 1 1121 0
 1416 04e0 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2	@ stime.Seconds, stime.Seconds
 1417 04e4 98F80000 		ldrb	r0, [r8]	@ zero_extendqisi2	@ sAlarm_8(D)->AlarmTime.Hours, sAlarm_8(D)->AlarmTime.Hours
ARM GAS  /tmp/ccM6Uqrc.s 			page 64


 1418 04e8 98F80170 		ldrb	r7, [r8, #1]	@ zero_extendqisi2	@ sAlarm_8(D)->AlarmTime.Minutes, sAlarm_8(D)->AlarmTime.Minu
1119:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Minutes * 60U) + \
 1419              		.loc 1 1119 0
 1420 04ec 1D44     		add	r5, r5, r3	@ counter_time, stime.Seconds
 1421              	.LVL156:
 1422 04ee 98F80280 		ldrb	r8, [r8, #2]	@ zero_extendqisi2	@ sAlarm_8(D)->AlarmTime.Seconds, sAlarm_8(D)->AlarmTime.Seco
 1423              	.LVL157:
1123:src/stm32f1xx_hal_rtc.c ****   {
 1424              		.loc 1 1123 0
 1425 04f2 BAF1000F 		cmp	r10, #0	@ Format
 1426 04f6 13D1     		bne	.L126	@
1130:src/stm32f1xx_hal_rtc.c ****                                ((uint32_t)sAlarm->AlarmTime.Seconds));
 1427              		.loc 1 1130 0
 1428 04f8 7E43     		muls	r6, r7, r6	@ tmp171, sAlarm_8(D)->AlarmTime.Minutes
1129:src/stm32f1xx_hal_rtc.c ****                                ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 1429              		.loc 1 1129 0
 1430 04fa 09FB0060 		mla	r0, r9, r0, r6	@ tmp173, tmp161, sAlarm_8(D)->AlarmTime.Hours, tmp171
 1431 04fe 00EB0801 		add	r1, r0, r8	@ counter_alarm, tmp173, sAlarm_8(D)->AlarmTime.Seconds
 1432              	.LVL158:
 1433              	.L127:
1145:src/stm32f1xx_hal_rtc.c ****   {
 1434              		.loc 1 1145 0
 1435 0502 A942     		cmp	r1, r5	@ counter_alarm, counter_time
1148:src/stm32f1xx_hal_rtc.c ****   }
 1436              		.loc 1 1148 0
 1437 0504 3CBF     		itt	cc
 1438 0506 01F5A831 		addcc	r1, r1, #86016	@ counter_alarm, counter_alarm,
 1439              	.LVL159:
 1440 050a 01F5C071 		addcc	r1, r1, #384	@ counter_alarm, counter_alarm,
 1441              	.LVL160:
1152:src/stm32f1xx_hal_rtc.c ****   {
 1442              		.loc 1 1152 0
 1443 050e 2046     		mov	r0, r4	@, hrtc
 1444 0510 FFF71CFE 		bl	RTC_WriteAlarmCounter	@
 1445              	.LVL161:
 1446 0514 90B1     		cbz	r0, .L129	@ <retval>,
1155:src/stm32f1xx_hal_rtc.c **** 
 1447              		.loc 1 1155 0
 1448 0516 0423     		movs	r3, #4	@ tmp189,
 1449 0518 6374     		strb	r3, [r4, #17]	@ tmp189, hrtc_7(D)->State
1158:src/stm32f1xx_hal_rtc.c **** 
 1450              		.loc 1 1158 0
 1451 051a 0023     		movs	r3, #0	@ tmp191,
 1452 051c 2374     		strb	r3, [r4, #16]	@ tmp191, hrtc_7(D)->Lock
 1453 051e C2E7     		b	.L134	@
 1454              	.LVL162:
 1455              	.L126:
1139:src/stm32f1xx_hal_rtc.c ****                      ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 1456              		.loc 1 1139 0
 1457 0520 FFF792FD 		bl	RTC_Bcd2ToByte	@
 1458              	.LVL163:
 1459 0524 0146     		mov	r1, r0	@ tmp176,
1140:src/stm32f1xx_hal_rtc.c ****                      ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 1460              		.loc 1 1140 0
 1461 0526 3846     		mov	r0, r7	@, sAlarm_8(D)->AlarmTime.Minutes
 1462 0528 FFF78EFD 		bl	RTC_Bcd2ToByte	@
 1463              	.LVL164:
ARM GAS  /tmp/ccM6Uqrc.s 			page 65


 1464 052c 7043     		muls	r0, r6, r0	@ tmp181, tmp164
1139:src/stm32f1xx_hal_rtc.c ****                      ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 1465              		.loc 1 1139 0
 1466 052e 09FB0101 		mla	r1, r9, r1, r0	@ _43, tmp161, tmp176, tmp181
1141:src/stm32f1xx_hal_rtc.c ****   }
 1467              		.loc 1 1141 0
 1468 0532 4046     		mov	r0, r8	@, sAlarm_8(D)->AlarmTime.Seconds
 1469 0534 FFF788FD 		bl	RTC_Bcd2ToByte	@
 1470              	.LVL165:
1139:src/stm32f1xx_hal_rtc.c ****                      ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 1471              		.loc 1 1139 0
 1472 0538 0144     		add	r1, r1, r0	@ counter_alarm,
 1473              	.LVL166:
 1474 053a E2E7     		b	.L127	@
 1475              	.LVL167:
 1476              	.L129:
1164:src/stm32f1xx_hal_rtc.c **** 
 1477              		.loc 1 1164 0
 1478 053c 0123     		movs	r3, #1	@ tmp193,
1166:src/stm32f1xx_hal_rtc.c **** 
 1479              		.loc 1 1166 0
 1480 053e 2074     		strb	r0, [r4, #16]	@ <retval>, hrtc_7(D)->Lock
1164:src/stm32f1xx_hal_rtc.c **** 
 1481              		.loc 1 1164 0
 1482 0540 6374     		strb	r3, [r4, #17]	@ tmp193, hrtc_7(D)->State
1168:src/stm32f1xx_hal_rtc.c ****   }
 1483              		.loc 1 1168 0
 1484 0542 B1E7     		b	.L124	@
 1485              	.LVL168:
 1486              	.L130:
1108:src/stm32f1xx_hal_rtc.c **** 
 1487              		.loc 1 1108 0
 1488 0544 1846     		mov	r0, r3	@ <retval>, <retval>
 1489              	.LVL169:
 1490 0546 AFE7     		b	.L124	@
 1491              		.cfi_endproc
 1492              	.LFE73:
 1493              		.size	HAL_RTC_SetAlarm, .-HAL_RTC_SetAlarm
 1494              		.align	1
 1495              		.global	HAL_RTC_SetAlarm_IT
 1496              		.syntax unified
 1497              		.thumb
 1498              		.thumb_func
 1499              		.fpu softvfp
 1500              		.type	HAL_RTC_SetAlarm_IT, %function
 1501              	HAL_RTC_SetAlarm_IT:
 1502              	.LFB74:
1185:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_alarm = 0U, counter_time;
 1503              		.loc 1 1185 0
 1504              		.cfi_startproc
 1505              		@ args = 0, pretend = 0, frame = 8
 1506              		@ frame_needed = 0, uses_anonymous_args = 0
 1507              	.LVL170:
 1508 0548 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}	@
 1509              	.LCFI15:
 1510              		.cfi_def_cfa_offset 40
 1511              		.cfi_offset 4, -32
ARM GAS  /tmp/ccM6Uqrc.s 			page 66


 1512              		.cfi_offset 5, -28
 1513              		.cfi_offset 6, -24
 1514              		.cfi_offset 7, -20
 1515              		.cfi_offset 8, -16
 1516              		.cfi_offset 9, -12
 1517              		.cfi_offset 10, -8
 1518              		.cfi_offset 14, -4
1185:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_alarm = 0U, counter_time;
 1519              		.loc 1 1185 0
 1520 054c 9246     		mov	r10, r2	@ Format, Format
1187:src/stm32f1xx_hal_rtc.c **** 
 1521              		.loc 1 1187 0
 1522 054e 0022     		movs	r2, #0	@ tmp156,
 1523              	.LVL171:
1185:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_alarm = 0U, counter_time;
 1524              		.loc 1 1185 0
 1525 0550 8846     		mov	r8, r1	@ sAlarm, sAlarm
1187:src/stm32f1xx_hal_rtc.c **** 
 1526              		.loc 1 1187 0
 1527 0552 ADF80420 		strh	r2, [sp, #4]	@ movhi	@ tmp156, stime
 1528 0556 8DF80620 		strb	r2, [sp, #6]	@ tmp156, stime
1190:src/stm32f1xx_hal_rtc.c ****   {
 1529              		.loc 1 1190 0
 1530 055a 0446     		mov	r4, r0	@ hrtc, hrtc
 1531 055c 18B9     		cbnz	r0, .L136	@ hrtc,
 1532              	.LVL172:
 1533              	.L147:
1252:src/stm32f1xx_hal_rtc.c ****   }
 1534              		.loc 1 1252 0
 1535 055e 0120     		movs	r0, #1	@ <retval>,
 1536              	.L137:
1273:src/stm32f1xx_hal_rtc.c **** 
 1537              		.loc 1 1273 0
 1538 0560 02B0     		add	sp, sp, #8	@,,
 1539              	.LCFI16:
 1540              		.cfi_remember_state
 1541              		.cfi_def_cfa_offset 32
 1542              		@ sp needed	@
 1543 0562 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1544              	.LVL173:
 1545              	.L136:
 1546              	.LCFI17:
 1547              		.cfi_restore_state
1190:src/stm32f1xx_hal_rtc.c ****   {
 1548              		.loc 1 1190 0 discriminator 1
 1549 0566 0029     		cmp	r1, #0	@ sAlarm
 1550 0568 F9D0     		beq	.L147	@
1200:src/stm32f1xx_hal_rtc.c **** 
 1551              		.loc 1 1200 0
 1552 056a 037C     		ldrb	r3, [r0, #16]	@ zero_extendqisi2	@ hrtc_7(D)->Lock, hrtc_7(D)->Lock
 1553 056c 012B     		cmp	r3, #1	@ hrtc_7(D)->Lock,
 1554 056e 4FF00203 		mov	r3, #2	@ <retval>,
 1555 0572 54D0     		beq	.L143	@,
1200:src/stm32f1xx_hal_rtc.c **** 
 1556              		.loc 1 1200 0 is_stmt 0 discriminator 2
 1557 0574 0121     		movs	r1, #1	@ tmp160,
 1558              	.LVL174:
ARM GAS  /tmp/ccM6Uqrc.s 			page 67


1202:src/stm32f1xx_hal_rtc.c **** 
 1559              		.loc 1 1202 0 is_stmt 1 discriminator 2
 1560 0576 4374     		strb	r3, [r0, #17]	@ <retval>, hrtc_7(D)->State
1200:src/stm32f1xx_hal_rtc.c **** 
 1561              		.loc 1 1200 0 discriminator 2
 1562 0578 0174     		strb	r1, [r0, #16]	@ tmp160, hrtc_7(D)->Lock
1205:src/stm32f1xx_hal_rtc.c ****   {
 1563              		.loc 1 1205 0 discriminator 2
 1564 057a 01A9     		add	r1, sp, #4	@ tmp214,,
 1565 057c FFF7FEFF 		bl	HAL_RTC_GetTime	@
 1566              	.LVL175:
 1567 0580 0028     		cmp	r0, #0	@
 1568 0582 ECD1     		bne	.L147	@
1212:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Seconds));
 1569              		.loc 1 1212 0
 1570 0584 3C26     		movs	r6, #60	@ tmp171,
1211:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Minutes * 60U) + \
 1571              		.loc 1 1211 0
 1572 0586 4FF46169 		mov	r9, #3600	@ tmp168,
1212:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Seconds));
 1573              		.loc 1 1212 0
 1574 058a 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2	@ stime.Minutes, stime.Minutes
1211:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Minutes * 60U) + \
 1575              		.loc 1 1211 0
 1576 058e 9DF80450 		ldrb	r5, [sp, #4]	@ zero_extendqisi2	@ stime.Hours, stime.Hours
1212:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Seconds));
 1577              		.loc 1 1212 0
 1578 0592 7343     		muls	r3, r6, r3	@ tmp170, tmp171
1211:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Minutes * 60U) + \
 1579              		.loc 1 1211 0
 1580 0594 09FB0535 		mla	r5, r9, r5, r3	@ tmp172, tmp168, stime.Hours, tmp170
1213:src/stm32f1xx_hal_rtc.c **** 
 1581              		.loc 1 1213 0
 1582 0598 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2	@ stime.Seconds, stime.Seconds
 1583 059c 98F80000 		ldrb	r0, [r8]	@ zero_extendqisi2	@ sAlarm_8(D)->AlarmTime.Hours, sAlarm_8(D)->AlarmTime.Hours
 1584 05a0 98F80170 		ldrb	r7, [r8, #1]	@ zero_extendqisi2	@ sAlarm_8(D)->AlarmTime.Minutes, sAlarm_8(D)->AlarmTime.Minu
1211:src/stm32f1xx_hal_rtc.c ****                             ((uint32_t)stime.Minutes * 60U) + \
 1585              		.loc 1 1211 0
 1586 05a4 1D44     		add	r5, r5, r3	@ counter_time, stime.Seconds
 1587              	.LVL176:
 1588 05a6 98F80280 		ldrb	r8, [r8, #2]	@ zero_extendqisi2	@ sAlarm_8(D)->AlarmTime.Seconds, sAlarm_8(D)->AlarmTime.Seco
 1589              	.LVL177:
1215:src/stm32f1xx_hal_rtc.c ****   {
 1590              		.loc 1 1215 0
 1591 05aa BAF1000F 		cmp	r10, #0	@ Format
 1592 05ae 13D1     		bne	.L139	@
1222:src/stm32f1xx_hal_rtc.c ****                                ((uint32_t)sAlarm->AlarmTime.Seconds));
 1593              		.loc 1 1222 0
 1594 05b0 7E43     		muls	r6, r7, r6	@ tmp178, sAlarm_8(D)->AlarmTime.Minutes
1221:src/stm32f1xx_hal_rtc.c ****                                ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 1595              		.loc 1 1221 0
 1596 05b2 09FB0060 		mla	r0, r9, r0, r6	@ tmp180, tmp168, sAlarm_8(D)->AlarmTime.Hours, tmp178
 1597 05b6 00EB0801 		add	r1, r0, r8	@ counter_alarm, tmp180, sAlarm_8(D)->AlarmTime.Seconds
 1598              	.LVL178:
 1599              	.L140:
1237:src/stm32f1xx_hal_rtc.c ****   {
 1600              		.loc 1 1237 0
ARM GAS  /tmp/ccM6Uqrc.s 			page 68


 1601 05ba A942     		cmp	r1, r5	@ counter_alarm, counter_time
1240:src/stm32f1xx_hal_rtc.c ****   }
 1602              		.loc 1 1240 0
 1603 05bc 3CBF     		itt	cc
 1604 05be 01F5A831 		addcc	r1, r1, #86016	@ counter_alarm, counter_alarm,
 1605              	.LVL179:
 1606 05c2 01F5C071 		addcc	r1, r1, #384	@ counter_alarm, counter_alarm,
 1607              	.LVL180:
1244:src/stm32f1xx_hal_rtc.c ****   {
 1608              		.loc 1 1244 0
 1609 05c6 2046     		mov	r0, r4	@, hrtc
 1610 05c8 FFF7C0FD 		bl	RTC_WriteAlarmCounter	@
 1611              	.LVL181:
 1612 05cc 90B1     		cbz	r0, .L142	@ <retval>,
1247:src/stm32f1xx_hal_rtc.c **** 
 1613              		.loc 1 1247 0
 1614 05ce 0423     		movs	r3, #4	@ tmp196,
 1615 05d0 6374     		strb	r3, [r4, #17]	@ tmp196, hrtc_7(D)->State
1250:src/stm32f1xx_hal_rtc.c **** 
 1616              		.loc 1 1250 0
 1617 05d2 0023     		movs	r3, #0	@ tmp198,
 1618 05d4 2374     		strb	r3, [r4, #16]	@ tmp198, hrtc_7(D)->Lock
 1619 05d6 C2E7     		b	.L147	@
 1620              	.LVL182:
 1621              	.L139:
1231:src/stm32f1xx_hal_rtc.c ****                      ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 1622              		.loc 1 1231 0
 1623 05d8 FFF736FD 		bl	RTC_Bcd2ToByte	@
 1624              	.LVL183:
 1625 05dc 0146     		mov	r1, r0	@ tmp183,
1232:src/stm32f1xx_hal_rtc.c ****                      ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 1626              		.loc 1 1232 0
 1627 05de 3846     		mov	r0, r7	@, sAlarm_8(D)->AlarmTime.Minutes
 1628 05e0 FFF732FD 		bl	RTC_Bcd2ToByte	@
 1629              	.LVL184:
 1630 05e4 7043     		muls	r0, r6, r0	@ tmp188, tmp171
1231:src/stm32f1xx_hal_rtc.c ****                      ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 1631              		.loc 1 1231 0
 1632 05e6 09FB0101 		mla	r1, r9, r1, r0	@ _43, tmp168, tmp183, tmp188
1233:src/stm32f1xx_hal_rtc.c ****   }
 1633              		.loc 1 1233 0
 1634 05ea 4046     		mov	r0, r8	@, sAlarm_8(D)->AlarmTime.Seconds
 1635 05ec FFF72CFD 		bl	RTC_Bcd2ToByte	@
 1636              	.LVL185:
1231:src/stm32f1xx_hal_rtc.c ****                      ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 1637              		.loc 1 1231 0
 1638 05f0 0144     		add	r1, r1, r0	@ counter_alarm,
 1639              	.LVL186:
 1640 05f2 E2E7     		b	.L140	@
 1641              	.LVL187:
 1642              	.L142:
1257:src/stm32f1xx_hal_rtc.c **** 
 1643              		.loc 1 1257 0
 1644 05f4 6FF00202 		mvn	r2, #2	@ tmp200,
 1645 05f8 2368     		ldr	r3, [r4]	@ _53, hrtc_7(D)->Instance
 1646 05fa 5A60     		str	r2, [r3, #4]	@ tmp200, _53->CRL
1260:src/stm32f1xx_hal_rtc.c **** 
ARM GAS  /tmp/ccM6Uqrc.s 			page 69


 1647              		.loc 1 1260 0
 1648 05fc 1A68     		ldr	r2, [r3]	@ _55, _53->CRH
 1649 05fe 42F00202 		orr	r2, r2, #2	@ _56, _55,
 1650 0602 1A60     		str	r2, [r3]	@ _56, _53->CRH
1263:src/stm32f1xx_hal_rtc.c **** 
 1651              		.loc 1 1263 0
 1652 0604 074B     		ldr	r3, .L148	@ tmp201,
 1653 0606 1A68     		ldr	r2, [r3]	@ _58, MEM[(struct EXTI_TypeDef *)1073808384B].IMR
 1654 0608 42F40032 		orr	r2, r2, #131072	@ _59, _58,
 1655 060c 1A60     		str	r2, [r3]	@ _59, MEM[(struct EXTI_TypeDef *)1073808384B].IMR
1265:src/stm32f1xx_hal_rtc.c **** 
 1656              		.loc 1 1265 0
 1657 060e 9A68     		ldr	r2, [r3, #8]	@ _61, MEM[(struct EXTI_TypeDef *)1073808384B].RTSR
 1658 0610 42F40032 		orr	r2, r2, #131072	@ _62, _61,
 1659 0614 9A60     		str	r2, [r3, #8]	@ _62, MEM[(struct EXTI_TypeDef *)1073808384B].RTSR
1267:src/stm32f1xx_hal_rtc.c **** 
 1660              		.loc 1 1267 0
 1661 0616 0123     		movs	r3, #1	@ tmp205,
1269:src/stm32f1xx_hal_rtc.c **** 
 1662              		.loc 1 1269 0
 1663 0618 2074     		strb	r0, [r4, #16]	@ <retval>, hrtc_7(D)->Lock
1267:src/stm32f1xx_hal_rtc.c **** 
 1664              		.loc 1 1267 0
 1665 061a 6374     		strb	r3, [r4, #17]	@ tmp205, hrtc_7(D)->State
1271:src/stm32f1xx_hal_rtc.c ****   }
 1666              		.loc 1 1271 0
 1667 061c A0E7     		b	.L137	@
 1668              	.LVL188:
 1669              	.L143:
1200:src/stm32f1xx_hal_rtc.c **** 
 1670              		.loc 1 1200 0
 1671 061e 1846     		mov	r0, r3	@ <retval>, <retval>
 1672              	.LVL189:
 1673 0620 9EE7     		b	.L137	@
 1674              	.L149:
 1675 0622 00BF     		.align	2
 1676              	.L148:
 1677 0624 00040140 		.word	1073808384
 1678              		.cfi_endproc
 1679              	.LFE74:
 1680              		.size	HAL_RTC_SetAlarm_IT, .-HAL_RTC_SetAlarm_IT
 1681              		.align	1
 1682              		.global	HAL_RTC_GetAlarm
 1683              		.syntax unified
 1684              		.thumb
 1685              		.thumb_func
 1686              		.fpu softvfp
 1687              		.type	HAL_RTC_GetAlarm, %function
 1688              	HAL_RTC_GetAlarm:
 1689              	.LFB75:
1290:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_alarm = 0U;
 1690              		.loc 1 1290 0
 1691              		.cfi_startproc
 1692              		@ args = 0, pretend = 0, frame = 0
 1693              		@ frame_needed = 0, uses_anonymous_args = 0
 1694              	.LVL190:
 1695 0628 70B5     		push	{r4, r5, r6, lr}	@
ARM GAS  /tmp/ccM6Uqrc.s 			page 70


 1696              	.LCFI18:
 1697              		.cfi_def_cfa_offset 16
 1698              		.cfi_offset 4, -16
 1699              		.cfi_offset 5, -12
 1700              		.cfi_offset 6, -8
 1701              		.cfi_offset 14, -4
1290:src/stm32f1xx_hal_rtc.c ****   uint32_t counter_alarm = 0U;
 1702              		.loc 1 1290 0
 1703 062a 1A46     		mov	r2, r3	@ Format, Format
 1704              	.LVL191:
1297:src/stm32f1xx_hal_rtc.c ****   {
 1705              		.loc 1 1297 0
 1706 062c 38B3     		cbz	r0, .L153	@ hrtc,
1297:src/stm32f1xx_hal_rtc.c ****   {
 1707              		.loc 1 1297 0 is_stmt 0 discriminator 1
 1708 062e 31B3     		cbz	r1, .L153	@ sAlarm,
1307:src/stm32f1xx_hal_rtc.c **** 
 1709              		.loc 1 1307 0 is_stmt 1
 1710 0630 FFF7F8FC 		bl	RTC_ReadAlarmCounter	@
 1711              	.LVL192:
1311:src/stm32f1xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes = (uint32_t)((counter_alarm % 3600U) / 60U);
 1712              		.loc 1 1311 0
 1713 0634 4FF46165 		mov	r5, #3600	@ tmp129,
 1714 0638 1826     		movs	r6, #24	@ tmp134,
 1715 063a B0FBF5F4 		udiv	r4, r0, r5	@ tmp128, counter_alarm, tmp129
 1716 063e B4FBF6F3 		udiv	r3, r4, r6	@ tmp133, tmp128, tmp134
 1717 0642 06FB1343 		mls	r3, r6, r3, r4	@ tmp137, tmp134, tmp133, tmp128
1312:src/stm32f1xx_hal_rtc.c ****   sAlarm->AlarmTime.Seconds = (uint32_t)((counter_alarm % 3600U) % 60U);
 1718              		.loc 1 1312 0
 1719 0646 3C26     		movs	r6, #60	@ tmp147,
 1720 0648 05FB1400 		mls	r0, r5, r4, r0	@ _12, tmp129, tmp128, counter_alarm
 1721              	.LVL193:
 1722 064c B0FBF6F4 		udiv	r4, r0, r6	@ tmp146, _12, tmp147
 1723 0650 E5B2     		uxtb	r5, r4	@ _14, tmp146
1313:src/stm32f1xx_hal_rtc.c **** 
 1724              		.loc 1 1313 0
 1725 0652 06FB1404 		mls	r4, r6, r4, r0	@ tmp156, tmp147, tmp146, _12
1311:src/stm32f1xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes = (uint32_t)((counter_alarm % 3600U) / 60U);
 1726              		.loc 1 1311 0
 1727 0656 DBB2     		uxtb	r3, r3	@ _10, tmp137
1313:src/stm32f1xx_hal_rtc.c **** 
 1728              		.loc 1 1313 0
 1729 0658 E4B2     		uxtb	r4, r4	@ _17, tmp156
1311:src/stm32f1xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes = (uint32_t)((counter_alarm % 3600U) / 60U);
 1730              		.loc 1 1311 0
 1731 065a 0B70     		strb	r3, [r1]	@ _10, sAlarm_4(D)->AlarmTime.Hours
1312:src/stm32f1xx_hal_rtc.c ****   sAlarm->AlarmTime.Seconds = (uint32_t)((counter_alarm % 3600U) % 60U);
 1732              		.loc 1 1312 0
 1733 065c 4D70     		strb	r5, [r1, #1]	@ _14, sAlarm_4(D)->AlarmTime.Minutes
1313:src/stm32f1xx_hal_rtc.c **** 
 1734              		.loc 1 1313 0
 1735 065e 8C70     		strb	r4, [r1, #2]	@ _17, sAlarm_4(D)->AlarmTime.Seconds
1315:src/stm32f1xx_hal_rtc.c ****   {
 1736              		.loc 1 1315 0
 1737 0660 5AB1     		cbz	r2, .L155	@ Format,
1317:src/stm32f1xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes);
 1738              		.loc 1 1317 0
ARM GAS  /tmp/ccM6Uqrc.s 			page 71


 1739 0662 1846     		mov	r0, r3	@, _10
 1740 0664 FFF7E5FC 		bl	RTC_ByteToBcd2	@
 1741              	.LVL194:
 1742 0668 0870     		strb	r0, [r1]	@, sAlarm_4(D)->AlarmTime.Hours
1318:src/stm32f1xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds);
 1743              		.loc 1 1318 0
 1744 066a 2846     		mov	r0, r5	@, _14
 1745 066c FFF7E1FC 		bl	RTC_ByteToBcd2	@
 1746              	.LVL195:
 1747 0670 4870     		strb	r0, [r1, #1]	@, sAlarm_4(D)->AlarmTime.Minutes
1319:src/stm32f1xx_hal_rtc.c ****   }
 1748              		.loc 1 1319 0
 1749 0672 2046     		mov	r0, r4	@, _17
 1750 0674 FFF7DDFC 		bl	RTC_ByteToBcd2	@
 1751              	.LVL196:
 1752 0678 8870     		strb	r0, [r1, #2]	@, sAlarm_4(D)->AlarmTime.Seconds
 1753              	.L155:
1322:src/stm32f1xx_hal_rtc.c **** }
 1754              		.loc 1 1322 0
 1755 067a 0020     		movs	r0, #0	@ <retval>,
 1756 067c 70BD     		pop	{r4, r5, r6, pc}	@
 1757              	.LVL197:
 1758              	.L153:
1299:src/stm32f1xx_hal_rtc.c ****   }
 1759              		.loc 1 1299 0
 1760 067e 0120     		movs	r0, #1	@ <retval>,
 1761              	.LVL198:
 1762 0680 70BD     		pop	{r4, r5, r6, pc}	@
 1763              		.cfi_endproc
 1764              	.LFE75:
 1765              		.size	HAL_RTC_GetAlarm, .-HAL_RTC_GetAlarm
 1766              		.align	1
 1767              		.global	HAL_RTC_DeactivateAlarm
 1768              		.syntax unified
 1769              		.thumb
 1770              		.thumb_func
 1771              		.fpu softvfp
 1772              		.type	HAL_RTC_DeactivateAlarm, %function
 1773              	HAL_RTC_DeactivateAlarm:
 1774              	.LFB76:
1335:src/stm32f1xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 1775              		.loc 1 1335 0
 1776              		.cfi_startproc
 1777              		@ args = 0, pretend = 0, frame = 0
 1778              		@ frame_needed = 0, uses_anonymous_args = 0
 1779              	.LVL199:
 1780 0682 70B5     		push	{r4, r5, r6, lr}	@
 1781              	.LCFI19:
 1782              		.cfi_def_cfa_offset 16
 1783              		.cfi_offset 4, -16
 1784              		.cfi_offset 5, -12
 1785              		.cfi_offset 6, -8
 1786              		.cfi_offset 14, -4
1343:src/stm32f1xx_hal_rtc.c ****   {
 1787              		.loc 1 1343 0
 1788 0684 0446     		mov	r4, r0	@ hrtc, hrtc
 1789 0686 A0B1     		cbz	r0, .L160	@ hrtc,
ARM GAS  /tmp/ccM6Uqrc.s 			page 72


1349:src/stm32f1xx_hal_rtc.c **** 
 1790              		.loc 1 1349 0
 1791 0688 037C     		ldrb	r3, [r0, #16]	@ zero_extendqisi2	@ hrtc_3(D)->Lock, hrtc_3(D)->Lock
 1792 068a 012B     		cmp	r3, #1	@ hrtc_3(D)->Lock,
 1793 068c 4FF00203 		mov	r3, #2	@ <retval>,
 1794 0690 2CD0     		beq	.L161	@,
1349:src/stm32f1xx_hal_rtc.c **** 
 1795              		.loc 1 1349 0 is_stmt 0 discriminator 2
 1796 0692 0125     		movs	r5, #1	@ tmp122,
1354:src/stm32f1xx_hal_rtc.c **** 
 1797              		.loc 1 1354 0 is_stmt 1 discriminator 2
 1798 0694 0268     		ldr	r2, [r0]	@ _8, hrtc_3(D)->Instance
1351:src/stm32f1xx_hal_rtc.c **** 
 1799              		.loc 1 1351 0 discriminator 2
 1800 0696 4374     		strb	r3, [r0, #17]	@ <retval>, hrtc_3(D)->State
1354:src/stm32f1xx_hal_rtc.c **** 
 1801              		.loc 1 1354 0 discriminator 2
 1802 0698 1368     		ldr	r3, [r2]	@ _9, _8->CRH
1349:src/stm32f1xx_hal_rtc.c **** 
 1803              		.loc 1 1349 0 discriminator 2
 1804 069a 0574     		strb	r5, [r0, #16]	@ tmp122, hrtc_3(D)->Lock
1354:src/stm32f1xx_hal_rtc.c **** 
 1805              		.loc 1 1354 0 discriminator 2
 1806 069c 23F00203 		bic	r3, r3, #2	@ _10, _9,
 1807 06a0 1360     		str	r3, [r2]	@ _10, _8->CRH
1357:src/stm32f1xx_hal_rtc.c ****   {
 1808              		.loc 1 1357 0 discriminator 2
 1809 06a2 FFF710FD 		bl	RTC_EnterInitMode	@
 1810              	.LVL200:
 1811 06a6 0646     		mov	r6, r0	@ tmp126,
 1812 06a8 28B1     		cbz	r0, .L158	@ tmp126,
1360:src/stm32f1xx_hal_rtc.c **** 
 1813              		.loc 1 1360 0
 1814 06aa 0423     		movs	r3, #4	@ tmp127,
 1815 06ac 6374     		strb	r3, [r4, #17]	@ tmp127, hrtc_3(D)->State
1363:src/stm32f1xx_hal_rtc.c **** 
 1816              		.loc 1 1363 0
 1817 06ae 0023     		movs	r3, #0	@ tmp129,
 1818 06b0 2374     		strb	r3, [r4, #16]	@ tmp129, hrtc_3(D)->Lock
 1819              	.L160:
1345:src/stm32f1xx_hal_rtc.c ****   }
 1820              		.loc 1 1345 0
 1821 06b2 0120     		movs	r0, #1	@ <retval>,
 1822 06b4 70BD     		pop	{r4, r5, r6, pc}	@
 1823              	.LVL201:
 1824              	.L158:
1370:src/stm32f1xx_hal_rtc.c **** 
 1825              		.loc 1 1370 0
 1826 06b6 6FF00202 		mvn	r2, #2	@ tmp131,
 1827 06ba 2368     		ldr	r3, [r4]	@ _16, hrtc_3(D)->Instance
1380:src/stm32f1xx_hal_rtc.c ****     {
 1828              		.loc 1 1380 0
 1829 06bc 2046     		mov	r0, r4	@, hrtc
1370:src/stm32f1xx_hal_rtc.c **** 
 1830              		.loc 1 1370 0
 1831 06be 5A60     		str	r2, [r3, #4]	@ tmp131, _16->CRL
1373:src/stm32f1xx_hal_rtc.c ****     WRITE_REG(hrtc->Instance->ALRL, RTC_ALARM_RESETVALUE_REGISTER);
ARM GAS  /tmp/ccM6Uqrc.s 			page 73


 1832              		.loc 1 1373 0
 1833 06c0 4FF6FF72 		movw	r2, #65535	@ tmp132,
 1834 06c4 1A62     		str	r2, [r3, #32]	@ tmp132, _16->ALRH
1374:src/stm32f1xx_hal_rtc.c **** 
 1835              		.loc 1 1374 0
 1836 06c6 5A62     		str	r2, [r3, #36]	@ tmp132, _16->ALRL
1377:src/stm32f1xx_hal_rtc.c **** 
 1837              		.loc 1 1377 0
 1838 06c8 02F18042 		add	r2, r2, #1073741824	@ tmp134, tmp134,
 1839 06cc 02F20142 		addw	r2, r2, #1025	@ tmp134, tmp134,
 1840 06d0 1368     		ldr	r3, [r2]	@ _20, MEM[(struct EXTI_TypeDef *)1073808384B].IMR
 1841 06d2 23F40033 		bic	r3, r3, #131072	@ _21, _20,
 1842 06d6 1360     		str	r3, [r2]	@ _21, MEM[(struct EXTI_TypeDef *)1073808384B].IMR
1380:src/stm32f1xx_hal_rtc.c ****     {
 1843              		.loc 1 1380 0
 1844 06d8 FFF70CFD 		bl	RTC_ExitInitMode	@
 1845              	.LVL202:
 1846 06dc 18B1     		cbz	r0, .L159	@ <retval>,
1382:src/stm32f1xx_hal_rtc.c **** 
 1847              		.loc 1 1382 0
 1848 06de 0423     		movs	r3, #4	@ tmp137,
1385:src/stm32f1xx_hal_rtc.c **** 
 1849              		.loc 1 1385 0
 1850 06e0 2674     		strb	r6, [r4, #16]	@ tmp126, hrtc_3(D)->Lock
1382:src/stm32f1xx_hal_rtc.c **** 
 1851              		.loc 1 1382 0
 1852 06e2 6374     		strb	r3, [r4, #17]	@ tmp137, hrtc_3(D)->State
 1853 06e4 E5E7     		b	.L160	@
 1854              	.L159:
1390:src/stm32f1xx_hal_rtc.c **** 
 1855              		.loc 1 1390 0
 1856 06e6 6574     		strb	r5, [r4, #17]	@ tmp122, hrtc_3(D)->State
1393:src/stm32f1xx_hal_rtc.c **** 
 1857              		.loc 1 1393 0
 1858 06e8 2074     		strb	r0, [r4, #16]	@ <retval>, hrtc_3(D)->Lock
1395:src/stm32f1xx_hal_rtc.c **** }
 1859              		.loc 1 1395 0
 1860 06ea 70BD     		pop	{r4, r5, r6, pc}	@
 1861              	.LVL203:
 1862              	.L161:
1349:src/stm32f1xx_hal_rtc.c **** 
 1863              		.loc 1 1349 0
 1864 06ec 1846     		mov	r0, r3	@ <retval>, <retval>
 1865              	.LVL204:
1396:src/stm32f1xx_hal_rtc.c **** 
 1866              		.loc 1 1396 0
 1867 06ee 70BD     		pop	{r4, r5, r6, pc}	@
 1868              		.cfi_endproc
 1869              	.LFE76:
 1870              		.size	HAL_RTC_DeactivateAlarm, .-HAL_RTC_DeactivateAlarm
 1871              		.align	1
 1872              		.weak	HAL_RTC_AlarmAEventCallback
 1873              		.syntax unified
 1874              		.thumb
 1875              		.thumb_func
 1876              		.fpu softvfp
 1877              		.type	HAL_RTC_AlarmAEventCallback, %function
ARM GAS  /tmp/ccM6Uqrc.s 			page 74


 1878              	HAL_RTC_AlarmAEventCallback:
 1879              	.LFB78:
1437:src/stm32f1xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 1880              		.loc 1 1437 0
 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 0
 1883              		@ frame_needed = 0, uses_anonymous_args = 0
 1884              		@ link register save eliminated.
 1885              	.LVL205:
 1886 06f0 7047     		bx	lr	@
 1887              		.cfi_endproc
 1888              	.LFE78:
 1889              		.size	HAL_RTC_AlarmAEventCallback, .-HAL_RTC_AlarmAEventCallback
 1890              		.align	1
 1891              		.global	HAL_RTC_AlarmIRQHandler
 1892              		.syntax unified
 1893              		.thumb
 1894              		.thumb_func
 1895              		.fpu softvfp
 1896              		.type	HAL_RTC_AlarmIRQHandler, %function
 1897              	HAL_RTC_AlarmIRQHandler:
 1898              	.LFB77:
1405:src/stm32f1xx_hal_rtc.c ****   if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 1899              		.loc 1 1405 0
 1900              		.cfi_startproc
 1901              		@ args = 0, pretend = 0, frame = 0
 1902              		@ frame_needed = 0, uses_anonymous_args = 0
 1903              	.LVL206:
1406:src/stm32f1xx_hal_rtc.c ****   {
 1904              		.loc 1 1406 0
 1905 06f2 0368     		ldr	r3, [r0]	@ _4, hrtc_3(D)->Instance
1405:src/stm32f1xx_hal_rtc.c ****   if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 1906              		.loc 1 1405 0
 1907 06f4 10B5     		push	{r4, lr}	@
 1908              	.LCFI20:
 1909              		.cfi_def_cfa_offset 8
 1910              		.cfi_offset 4, -8
 1911              		.cfi_offset 14, -4
1406:src/stm32f1xx_hal_rtc.c ****   {
 1912              		.loc 1 1406 0
 1913 06f6 1A68     		ldr	r2, [r3]	@ _5, _4->CRH
1405:src/stm32f1xx_hal_rtc.c ****   if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 1914              		.loc 1 1405 0
 1915 06f8 0446     		mov	r4, r0	@ hrtc, hrtc
1406:src/stm32f1xx_hal_rtc.c ****   {
 1916              		.loc 1 1406 0
 1917 06fa 9207     		lsls	r2, r2, #30	@, _5,
 1918 06fc 08D5     		bpl	.L164	@,
1409:src/stm32f1xx_hal_rtc.c ****     {
 1919              		.loc 1 1409 0
 1920 06fe 5B68     		ldr	r3, [r3, #4]	@ _7, _4->CRL
 1921 0700 9B07     		lsls	r3, r3, #30	@, _7,
 1922 0702 05D5     		bpl	.L164	@,
1415:src/stm32f1xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 1923              		.loc 1 1415 0
 1924 0704 FFF7FEFF 		bl	HAL_RTC_AlarmAEventCallback	@
 1925              	.LVL207:
ARM GAS  /tmp/ccM6Uqrc.s 			page 75


1419:src/stm32f1xx_hal_rtc.c ****     }
 1926              		.loc 1 1419 0
 1927 0708 6FF00202 		mvn	r2, #2	@ tmp119,
 1928 070c 2368     		ldr	r3, [r4]	@ _10, hrtc_3(D)->Instance
 1929 070e 5A60     		str	r2, [r3, #4]	@ tmp119, _10->CRL
 1930              	.L164:
1424:src/stm32f1xx_hal_rtc.c **** 
 1931              		.loc 1 1424 0
 1932 0710 4FF40032 		mov	r2, #131072	@ tmp121,
 1933 0714 024B     		ldr	r3, .L171	@ tmp120,
 1934 0716 5A61     		str	r2, [r3, #20]	@ tmp121, MEM[(struct EXTI_TypeDef *)1073808384B].PR
1427:src/stm32f1xx_hal_rtc.c **** }
 1935              		.loc 1 1427 0
 1936 0718 0123     		movs	r3, #1	@ tmp122,
 1937 071a 6374     		strb	r3, [r4, #17]	@ tmp122, hrtc_3(D)->State
 1938 071c 10BD     		pop	{r4, pc}	@
 1939              	.LVL208:
 1940              	.L172:
 1941 071e 00BF     		.align	2
 1942              	.L171:
 1943 0720 00040140 		.word	1073808384
 1944              		.cfi_endproc
 1945              	.LFE77:
 1946              		.size	HAL_RTC_AlarmIRQHandler, .-HAL_RTC_AlarmIRQHandler
 1947              		.align	1
 1948              		.global	HAL_RTC_PollForAlarmAEvent
 1949              		.syntax unified
 1950              		.thumb
 1951              		.thumb_func
 1952              		.fpu softvfp
 1953              		.type	HAL_RTC_PollForAlarmAEvent, %function
 1954              	HAL_RTC_PollForAlarmAEvent:
 1955              	.LFB79:
1453:src/stm32f1xx_hal_rtc.c ****   uint32_t tickstart = HAL_GetTick();
 1956              		.loc 1 1453 0
 1957              		.cfi_startproc
 1958              		@ args = 0, pretend = 0, frame = 0
 1959              		@ frame_needed = 0, uses_anonymous_args = 0
 1960              	.LVL209:
 1961 0724 70B5     		push	{r4, r5, r6, lr}	@
 1962              	.LCFI21:
 1963              		.cfi_def_cfa_offset 16
 1964              		.cfi_offset 4, -16
 1965              		.cfi_offset 5, -12
 1966              		.cfi_offset 6, -8
 1967              		.cfi_offset 14, -4
1453:src/stm32f1xx_hal_rtc.c ****   uint32_t tickstart = HAL_GetTick();
 1968              		.loc 1 1453 0
 1969 0726 0446     		mov	r4, r0	@ hrtc, hrtc
 1970 0728 0D46     		mov	r5, r1	@ Timeout, Timeout
1454:src/stm32f1xx_hal_rtc.c **** 
 1971              		.loc 1 1454 0
 1972 072a FFF7FEFF 		bl	HAL_GetTick	@
 1973              	.LVL210:
 1974 072e 0646     		mov	r6, r0	@ tickstart,
 1975              	.LVL211:
1457:src/stm32f1xx_hal_rtc.c ****   {
ARM GAS  /tmp/ccM6Uqrc.s 			page 76


 1976              		.loc 1 1457 0
 1977 0730 64B9     		cbnz	r4, .L175	@ hrtc,
1459:src/stm32f1xx_hal_rtc.c ****   }
 1978              		.loc 1 1459 0
 1979 0732 0120     		movs	r0, #1	@ <retval>,
 1980              	.LVL212:
1481:src/stm32f1xx_hal_rtc.c **** 
 1981              		.loc 1 1481 0
 1982 0734 70BD     		pop	{r4, r5, r6, pc}	@
 1983              	.LVL213:
 1984              	.L179:
1464:src/stm32f1xx_hal_rtc.c ****     {
 1985              		.loc 1 1464 0
 1986 0736 691C     		adds	r1, r5, #1	@, Timeout,
 1987 0738 09D0     		beq	.L176	@,
1466:src/stm32f1xx_hal_rtc.c ****       {
 1988              		.loc 1 1466 0
 1989 073a 15B9     		cbnz	r5, .L177	@ Timeout,
 1990              	.L178:
1468:src/stm32f1xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1991              		.loc 1 1468 0
 1992 073c 0320     		movs	r0, #3	@ tmp119,
 1993 073e 6074     		strb	r0, [r4, #17]	@ tmp119, hrtc_8(D)->State
1469:src/stm32f1xx_hal_rtc.c ****       }
 1994              		.loc 1 1469 0
 1995 0740 70BD     		pop	{r4, r5, r6, pc}	@
 1996              	.LVL214:
 1997              	.L177:
1466:src/stm32f1xx_hal_rtc.c ****       {
 1998              		.loc 1 1466 0 discriminator 1
 1999 0742 FFF7FEFF 		bl	HAL_GetTick	@
 2000              	.LVL215:
 2001 0746 801B     		subs	r0, r0, r6	@ tmp121,, tickstart
 2002 0748 8542     		cmp	r5, r0	@ Timeout, tmp121
 2003 074a F7D3     		bcc	.L178	@,
 2004              	.L175:
1462:src/stm32f1xx_hal_rtc.c ****   {
 2005              		.loc 1 1462 0
 2006 074c 2368     		ldr	r3, [r4]	@ _10, hrtc_8(D)->Instance
 2007              	.L176:
 2008 074e 5A68     		ldr	r2, [r3, #4]	@ _11, _10->CRL
 2009 0750 9207     		lsls	r2, r2, #30	@, _11,
 2010 0752 F0D5     		bpl	.L179	@,
1475:src/stm32f1xx_hal_rtc.c **** 
 2011              		.loc 1 1475 0
 2012 0754 6FF00202 		mvn	r2, #2	@ tmp123,
 2013 0758 5A60     		str	r2, [r3, #4]	@ tmp123, _10->CRL
1478:src/stm32f1xx_hal_rtc.c **** 
 2014              		.loc 1 1478 0
 2015 075a 0123     		movs	r3, #1	@ tmp124,
1480:src/stm32f1xx_hal_rtc.c **** }
 2016              		.loc 1 1480 0
 2017 075c 0020     		movs	r0, #0	@ <retval>,
1478:src/stm32f1xx_hal_rtc.c **** 
 2018              		.loc 1 1478 0
 2019 075e 6374     		strb	r3, [r4, #17]	@ tmp124, hrtc_8(D)->State
1480:src/stm32f1xx_hal_rtc.c **** }
ARM GAS  /tmp/ccM6Uqrc.s 			page 77


 2020              		.loc 1 1480 0
 2021 0760 70BD     		pop	{r4, r5, r6, pc}	@
 2022              		.cfi_endproc
 2023              	.LFE79:
 2024              		.size	HAL_RTC_PollForAlarmAEvent, .-HAL_RTC_PollForAlarmAEvent
 2025              		.align	1
 2026              		.global	HAL_RTC_GetState
 2027              		.syntax unified
 2028              		.thumb
 2029              		.thumb_func
 2030              		.fpu softvfp
 2031              		.type	HAL_RTC_GetState, %function
 2032              	HAL_RTC_GetState:
 2033              	.LFB80:
1508:src/stm32f1xx_hal_rtc.c ****   return hrtc->State;
 2034              		.loc 1 1508 0
 2035              		.cfi_startproc
 2036              		@ args = 0, pretend = 0, frame = 0
 2037              		@ frame_needed = 0, uses_anonymous_args = 0
 2038              		@ link register save eliminated.
 2039              	.LVL216:
1509:src/stm32f1xx_hal_rtc.c **** }
 2040              		.loc 1 1509 0
 2041 0762 407C     		ldrb	r0, [r0, #17]	@ zero_extendqisi2	@ hrtc_2(D)->State, hrtc_2(D)->State
 2042              	.LVL217:
1510:src/stm32f1xx_hal_rtc.c **** 
 2043              		.loc 1 1510 0
 2044 0764 7047     		bx	lr	@
 2045              		.cfi_endproc
 2046              	.LFE80:
 2047              		.size	HAL_RTC_GetState, .-HAL_RTC_GetState
 2048              		.align	1
 2049              		.global	HAL_RTC_WaitForSynchro
 2050              		.syntax unified
 2051              		.thumb
 2052              		.thumb_func
 2053              		.fpu softvfp
 2054              		.type	HAL_RTC_WaitForSynchro, %function
 2055              	HAL_RTC_WaitForSynchro:
 2056              	.LFB81:
1541:src/stm32f1xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 2057              		.loc 1 1541 0
 2058              		.cfi_startproc
 2059              		@ args = 0, pretend = 0, frame = 0
 2060              		@ frame_needed = 0, uses_anonymous_args = 0
 2061              	.LVL218:
 2062 0766 38B5     		push	{r3, r4, r5, lr}	@
 2063              	.LCFI22:
 2064              		.cfi_def_cfa_offset 16
 2065              		.cfi_offset 3, -16
 2066              		.cfi_offset 4, -12
 2067              		.cfi_offset 5, -8
 2068              		.cfi_offset 14, -4
1545:src/stm32f1xx_hal_rtc.c ****   {
 2069              		.loc 1 1545 0
 2070 0768 0446     		mov	r4, r0	@ hrtc, hrtc
 2071 076a A8B1     		cbz	r0, .L188	@ hrtc,
ARM GAS  /tmp/ccM6Uqrc.s 			page 78


1551:src/stm32f1xx_hal_rtc.c **** 
 2072              		.loc 1 1551 0
 2073 076c 0268     		ldr	r2, [r0]	@ _6, hrtc_4(D)->Instance
 2074 076e 5368     		ldr	r3, [r2, #4]	@ _7, _6->CRL
 2075 0770 23F00803 		bic	r3, r3, #8	@ _8, _7,
 2076 0774 5360     		str	r3, [r2, #4]	@ _8, _6->CRL
1553:src/stm32f1xx_hal_rtc.c **** 
 2077              		.loc 1 1553 0
 2078 0776 FFF7FEFF 		bl	HAL_GetTick	@
 2079              	.LVL219:
 2080 077a 0546     		mov	r5, r0	@ tickstart,
 2081              	.LVL220:
 2082              	.L186:
1556:src/stm32f1xx_hal_rtc.c ****   {
 2083              		.loc 1 1556 0
 2084 077c 2368     		ldr	r3, [r4]	@ _12, hrtc_4(D)->Instance
 2085 077e 5B68     		ldr	r3, [r3, #4]	@ _13, _12->CRL
 2086 0780 1B07     		lsls	r3, r3, #28	@, _13,
 2087 0782 01D5     		bpl	.L187	@,
1564:src/stm32f1xx_hal_rtc.c **** }
 2088              		.loc 1 1564 0
 2089 0784 0020     		movs	r0, #0	@ <retval>,
 2090 0786 38BD     		pop	{r3, r4, r5, pc}	@
 2091              	.LVL221:
 2092              	.L187:
1558:src/stm32f1xx_hal_rtc.c ****     {
 2093              		.loc 1 1558 0
 2094 0788 FFF7FEFF 		bl	HAL_GetTick	@
 2095              	.LVL222:
 2096 078c 401B     		subs	r0, r0, r5	@ tmp121,, tickstart
 2097 078e B0F57A7F 		cmp	r0, #1000	@ tmp121,
 2098 0792 F3D9     		bls	.L186	@,
1560:src/stm32f1xx_hal_rtc.c ****     }
 2099              		.loc 1 1560 0
 2100 0794 0320     		movs	r0, #3	@ <retval>,
1565:src/stm32f1xx_hal_rtc.c **** 
 2101              		.loc 1 1565 0
 2102 0796 38BD     		pop	{r3, r4, r5, pc}	@
 2103              	.LVL223:
 2104              	.L188:
1547:src/stm32f1xx_hal_rtc.c ****   }
 2105              		.loc 1 1547 0
 2106 0798 0120     		movs	r0, #1	@ <retval>,
 2107              	.LVL224:
 2108 079a 38BD     		pop	{r3, r4, r5, pc}	@
 2109              		.cfi_endproc
 2110              	.LFE81:
 2111              		.size	HAL_RTC_WaitForSynchro, .-HAL_RTC_WaitForSynchro
 2112              		.align	1
 2113              		.global	HAL_RTC_Init
 2114              		.syntax unified
 2115              		.thumb
 2116              		.thumb_func
 2117              		.fpu softvfp
 2118              		.type	HAL_RTC_Init, %function
 2119              	HAL_RTC_Init:
 2120              	.LFB65:
ARM GAS  /tmp/ccM6Uqrc.s 			page 79


 276:src/stm32f1xx_hal_rtc.c ****   uint32_t prescaler = 0U;
 2121              		.loc 1 276 0
 2122              		.cfi_startproc
 2123              		@ args = 0, pretend = 0, frame = 0
 2124              		@ frame_needed = 0, uses_anonymous_args = 0
 2125              	.LVL225:
 2126 079c 10B5     		push	{r4, lr}	@
 2127              	.LCFI23:
 2128              		.cfi_def_cfa_offset 8
 2129              		.cfi_offset 4, -8
 2130              		.cfi_offset 14, -4
 279:src/stm32f1xx_hal_rtc.c ****   {
 2131              		.loc 1 279 0
 2132 079e 0446     		mov	r4, r0	@ hrtc, hrtc
 2133 07a0 70B1     		cbz	r0, .L199	@ hrtc,
 311:src/stm32f1xx_hal_rtc.c ****   {
 2134              		.loc 1 311 0
 2135 07a2 437C     		ldrb	r3, [r0, #17]	@ zero_extendqisi2	@ hrtc_7(D)->State, hrtc_7(D)->State
 2136 07a4 03F0FF02 		and	r2, r3, #255	@ _9, hrtc_7(D)->State,
 2137 07a8 13B9     		cbnz	r3, .L192	@ hrtc_7(D)->State,
 314:src/stm32f1xx_hal_rtc.c **** 
 2138              		.loc 1 314 0
 2139 07aa 0274     		strb	r2, [r0, #16]	@ _9, hrtc_7(D)->Lock
 317:src/stm32f1xx_hal_rtc.c ****   }
 2140              		.loc 1 317 0
 2141 07ac FFF7FEFF 		bl	HAL_RTC_MspInit	@
 2142              	.LVL226:
 2143              	.L192:
 322:src/stm32f1xx_hal_rtc.c **** 
 2144              		.loc 1 322 0
 2145 07b0 0223     		movs	r3, #2	@ tmp140,
 325:src/stm32f1xx_hal_rtc.c ****   {
 2146              		.loc 1 325 0
 2147 07b2 2046     		mov	r0, r4	@, hrtc
 322:src/stm32f1xx_hal_rtc.c **** 
 2148              		.loc 1 322 0
 2149 07b4 6374     		strb	r3, [r4, #17]	@ tmp140, hrtc_7(D)->State
 325:src/stm32f1xx_hal_rtc.c ****   {
 2150              		.loc 1 325 0
 2151 07b6 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro	@
 2152              	.LVL227:
 2153 07ba 18B1     		cbz	r0, .L193	@,
 2154              	.LVL228:
 2155              	.L203:
 370:src/stm32f1xx_hal_rtc.c ****         return HAL_ERROR;
 2156              		.loc 1 370 0
 2157 07bc 0423     		movs	r3, #4	@ tmp153,
 2158 07be 6374     		strb	r3, [r4, #17]	@ tmp153,
 2159              	.L199:
 281:src/stm32f1xx_hal_rtc.c ****   }
 2160              		.loc 1 281 0
 2161 07c0 0120     		movs	r0, #1	@ <retval>,
 402:src/stm32f1xx_hal_rtc.c **** 
 2162              		.loc 1 402 0
 2163 07c2 10BD     		pop	{r4, pc}	@
 2164              	.LVL229:
 2165              	.L193:
ARM GAS  /tmp/ccM6Uqrc.s 			page 80


 334:src/stm32f1xx_hal_rtc.c ****   {
 2166              		.loc 1 334 0
 2167 07c4 2046     		mov	r0, r4	@, hrtc
 2168 07c6 FFF77EFC 		bl	RTC_EnterInitMode	@
 2169              	.LVL230:
 2170 07ca 0028     		cmp	r0, #0	@
 2171 07cc F6D1     		bne	.L203	@
 344:src/stm32f1xx_hal_rtc.c **** 
 2172              		.loc 1 344 0
 2173 07ce 2268     		ldr	r2, [r4]	@ _19, hrtc_7(D)->Instance
 346:src/stm32f1xx_hal_rtc.c ****     {
 2174              		.loc 1 346 0
 2175 07d0 A068     		ldr	r0, [r4, #8]	@ _23, hrtc_7(D)->Init.OutPut
 344:src/stm32f1xx_hal_rtc.c **** 
 2176              		.loc 1 344 0
 2177 07d2 5368     		ldr	r3, [r2, #4]	@ _20, _19->CRL
 2178 07d4 23F00703 		bic	r3, r3, #7	@ _21, _20,
 2179 07d8 5360     		str	r3, [r2, #4]	@ _21, _19->CRL
 2180 07da 174A     		ldr	r2, .L204	@ tmp173,
 346:src/stm32f1xx_hal_rtc.c ****     {
 2181              		.loc 1 346 0
 2182 07dc 18B1     		cbz	r0, .L195	@ _23,
 349:src/stm32f1xx_hal_rtc.c ****     }
 2183              		.loc 1 349 0
 2184 07de 116B     		ldr	r1, [r2, #48]	@ _24, MEM[(struct BKP_TypeDef *)1073769472B].CR
 2185 07e0 21F00101 		bic	r1, r1, #1	@ _25, _24,
 2186 07e4 1163     		str	r1, [r2, #48]	@ _25, MEM[(struct BKP_TypeDef *)1073769472B].CR
 2187              	.L195:
 353:src/stm32f1xx_hal_rtc.c **** 
 2188              		.loc 1 353 0
 2189 07e6 D36A     		ldr	r3, [r2, #44]	@ _27, MEM[(struct BKP_TypeDef *)1073769472B].RTCCR
 2190 07e8 23F46073 		bic	r3, r3, #896	@ tmp151, _27,
 2191 07ec 0343     		orrs	r3, r3, r0	@, _29, tmp151, _23
 2192 07ee D362     		str	r3, [r2, #44]	@ _29, MEM[(struct BKP_TypeDef *)1073769472B].RTCCR
 355:src/stm32f1xx_hal_rtc.c ****     {
 2193              		.loc 1 355 0
 2194 07f0 6068     		ldr	r0, [r4, #4]	@ prescaler, hrtc_7(D)->Init.AsynchPrediv
 2195 07f2 431C     		adds	r3, r0, #1	@, prescaler,
 2196 07f4 05D1     		bne	.L196	@,
 364:src/stm32f1xx_hal_rtc.c **** 
 2197              		.loc 1 364 0
 2198 07f6 0120     		movs	r0, #1	@,
 2199 07f8 FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq	@
 2200              	.LVL231:
 367:src/stm32f1xx_hal_rtc.c ****       {
 2201              		.loc 1 367 0
 2202 07fc 0028     		cmp	r0, #0	@ prescaler
 2203 07fe DDD0     		beq	.L203	@
 376:src/stm32f1xx_hal_rtc.c ****       }
 2204              		.loc 1 376 0
 2205 0800 0138     		subs	r0, r0, #1	@ prescaler, prescaler,
 2206              	.LVL232:
 2207              	.L196:
 381:src/stm32f1xx_hal_rtc.c ****     MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 2208              		.loc 1 381 0
 2209 0802 2268     		ldr	r2, [r4]	@ _36, hrtc_7(D)->Instance
 2210 0804 9368     		ldr	r3, [r2, #8]	@ _37, _36->PRLH
ARM GAS  /tmp/ccM6Uqrc.s 			page 81


 2211 0806 23F00F03 		bic	r3, r3, #15	@ tmp155, _37,
 2212 080a 43EA1043 		orr	r3, r3, r0, lsr #16	@ _40, tmp155, prescaler,
 2213 080e 9360     		str	r3, [r2, #8]	@ _40, _36->PRLH
 382:src/stm32f1xx_hal_rtc.c **** 
 2214              		.loc 1 382 0
 2215 0810 D368     		ldr	r3, [r2, #12]	@ _42, _36->PRLL
 2216 0812 80B2     		uxth	r0, r0	@ tmp159, prescaler
 2217              	.LVL233:
 2218 0814 1B0C     		lsrs	r3, r3, #16	@ tmp157, _42,
 2219 0816 1B04     		lsls	r3, r3, #16	@ tmp157, tmp157,
 2220 0818 1843     		orrs	r0, r0, r3	@, _45, tmp159, tmp157
 2221 081a D060     		str	r0, [r2, #12]	@ _45, _36->PRLL
 385:src/stm32f1xx_hal_rtc.c ****     {
 2222              		.loc 1 385 0
 2223 081c 2046     		mov	r0, r4	@, hrtc
 2224 081e FFF769FC 		bl	RTC_ExitInitMode	@
 2225              	.LVL234:
 2226 0822 0123     		movs	r3, #1	@ tmp174,
 2227 0824 10B1     		cbz	r0, .L198	@ <retval>,
 387:src/stm32f1xx_hal_rtc.c **** 
 2228              		.loc 1 387 0
 2229 0826 0422     		movs	r2, #4	@ tmp162,
 2230 0828 6274     		strb	r2, [r4, #17]	@ tmp162, hrtc_7(D)->State
 2231 082a C9E7     		b	.L199	@
 2232              	.L198:
 393:src/stm32f1xx_hal_rtc.c ****     hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 2233              		.loc 1 393 0
 2234 082c E073     		strb	r0, [r4, #15]	@ <retval>, hrtc_7(D)->DateToUpdate.Year
 394:src/stm32f1xx_hal_rtc.c ****     hrtc->DateToUpdate.Date = 0x01U;
 2235              		.loc 1 394 0
 2236 082e 6373     		strb	r3, [r4, #13]	@ tmp174, hrtc_7(D)->DateToUpdate.Month
 395:src/stm32f1xx_hal_rtc.c **** 
 2237              		.loc 1 395 0
 2238 0830 A373     		strb	r3, [r4, #14]	@ tmp174, hrtc_7(D)->DateToUpdate.Date
 398:src/stm32f1xx_hal_rtc.c **** 
 2239              		.loc 1 398 0
 2240 0832 6374     		strb	r3, [r4, #17]	@ tmp174, hrtc_7(D)->State
 400:src/stm32f1xx_hal_rtc.c ****   }
 2241              		.loc 1 400 0
 2242 0834 10BD     		pop	{r4, pc}	@
 2243              	.LVL235:
 2244              	.L205:
 2245 0836 00BF     		.align	2
 2246              	.L204:
 2247 0838 006C0040 		.word	1073769472
 2248              		.cfi_endproc
 2249              	.LFE65:
 2250              		.size	HAL_RTC_Init, .-HAL_RTC_Init
 2251              		.align	1
 2252              		.global	HAL_RTC_DeInit
 2253              		.syntax unified
 2254              		.thumb
 2255              		.thumb_func
 2256              		.fpu softvfp
 2257              		.type	HAL_RTC_DeInit, %function
 2258              	HAL_RTC_DeInit:
 2259              	.LFB66:
ARM GAS  /tmp/ccM6Uqrc.s 			page 82


 412:src/stm32f1xx_hal_rtc.c ****   /* Check input parameters */
 2260              		.loc 1 412 0
 2261              		.cfi_startproc
 2262              		@ args = 0, pretend = 0, frame = 0
 2263              		@ frame_needed = 0, uses_anonymous_args = 0
 2264              	.LVL236:
 2265 083c 70B5     		push	{r4, r5, r6, lr}	@
 2266              	.LCFI24:
 2267              		.cfi_def_cfa_offset 16
 2268              		.cfi_offset 4, -16
 2269              		.cfi_offset 5, -12
 2270              		.cfi_offset 6, -8
 2271              		.cfi_offset 14, -4
 414:src/stm32f1xx_hal_rtc.c ****   {
 2272              		.loc 1 414 0
 2273 083e 0446     		mov	r4, r0	@ hrtc, hrtc
 2274 0840 48B1     		cbz	r0, .L210	@ hrtc,
 423:src/stm32f1xx_hal_rtc.c **** 
 2275              		.loc 1 423 0
 2276 0842 0223     		movs	r3, #2	@ tmp117,
 2277 0844 4374     		strb	r3, [r0, #17]	@ tmp117, hrtc_3(D)->State
 426:src/stm32f1xx_hal_rtc.c ****   {
 2278              		.loc 1 426 0
 2279 0846 FFF73EFC 		bl	RTC_EnterInitMode	@
 2280              	.LVL237:
 2281 084a 0646     		mov	r6, r0	@ tmp119,
 2282 084c 28B1     		cbz	r0, .L208	@ tmp119,
 429:src/stm32f1xx_hal_rtc.c **** 
 2283              		.loc 1 429 0
 2284 084e 0423     		movs	r3, #4	@ tmp120,
 2285 0850 6374     		strb	r3, [r4, #17]	@ tmp120, hrtc_3(D)->State
 432:src/stm32f1xx_hal_rtc.c **** 
 2286              		.loc 1 432 0
 2287 0852 0023     		movs	r3, #0	@ tmp122,
 2288 0854 2374     		strb	r3, [r4, #16]	@ tmp122, hrtc_3(D)->Lock
 2289              	.L210:
 416:src/stm32f1xx_hal_rtc.c ****   }
 2290              		.loc 1 416 0
 2291 0856 0125     		movs	r5, #1	@ <retval>,
 2292 0858 1EE0     		b	.L207	@
 2293              	.L208:
 440:src/stm32f1xx_hal_rtc.c ****     CLEAR_REG(hrtc->Instance->PRLH);
 2294              		.loc 1 440 0
 2295 085a 4FF40042 		mov	r2, #32768	@ tmp126,
 438:src/stm32f1xx_hal_rtc.c ****     CLEAR_REG(hrtc->Instance->CNTH);
 2296              		.loc 1 438 0
 2297 085e 2368     		ldr	r3, [r4]	@ _10, hrtc_3(D)->Instance
 2298 0860 D861     		str	r0, [r3, #28]	@ tmp119, _10->CNTL
 439:src/stm32f1xx_hal_rtc.c ****     WRITE_REG(hrtc->Instance->PRLL, 0x00008000U);
 2299              		.loc 1 439 0
 2300 0862 9861     		str	r0, [r3, #24]	@ tmp119, _10->CNTH
 440:src/stm32f1xx_hal_rtc.c ****     CLEAR_REG(hrtc->Instance->PRLH);
 2301              		.loc 1 440 0
 2302 0864 DA60     		str	r2, [r3, #12]	@ tmp126, _10->PRLL
 441:src/stm32f1xx_hal_rtc.c **** 
 2303              		.loc 1 441 0
 2304 0866 9860     		str	r0, [r3, #8]	@ tmp119, _10->PRLH
ARM GAS  /tmp/ccM6Uqrc.s 			page 83


 444:src/stm32f1xx_hal_rtc.c ****     CLEAR_REG(hrtc->Instance->CRL);
 2305              		.loc 1 444 0
 2306 0868 1860     		str	r0, [r3]	@ tmp119, _10->CRH
 445:src/stm32f1xx_hal_rtc.c **** 
 2307              		.loc 1 445 0
 2308 086a 5860     		str	r0, [r3, #4]	@ tmp119, _10->CRL
 447:src/stm32f1xx_hal_rtc.c ****     {
 2309              		.loc 1 447 0
 2310 086c 2046     		mov	r0, r4	@, hrtc
 2311 086e FFF741FC 		bl	RTC_ExitInitMode	@
 2312              	.LVL238:
 2313 0872 0546     		mov	r5, r0	@ <retval>,
 2314 0874 18B1     		cbz	r0, .L209	@ <retval>,
 449:src/stm32f1xx_hal_rtc.c **** 
 2315              		.loc 1 449 0
 2316 0876 0423     		movs	r3, #4	@ tmp131,
 452:src/stm32f1xx_hal_rtc.c **** 
 2317              		.loc 1 452 0
 2318 0878 2674     		strb	r6, [r4, #16]	@ tmp119, hrtc_3(D)->Lock
 449:src/stm32f1xx_hal_rtc.c **** 
 2319              		.loc 1 449 0
 2320 087a 6374     		strb	r3, [r4, #17]	@ tmp131, hrtc_3(D)->State
 2321 087c EBE7     		b	.L210	@
 2322              	.L209:
 459:src/stm32f1xx_hal_rtc.c **** 
 2323              		.loc 1 459 0
 2324 087e 2046     		mov	r0, r4	@, hrtc
 2325 0880 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro	@
 2326              	.LVL239:
 462:src/stm32f1xx_hal_rtc.c **** 
 2327              		.loc 1 462 0
 2328 0884 2268     		ldr	r2, [r4]	@ _22, hrtc_3(D)->Instance
 475:src/stm32f1xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 2329              		.loc 1 475 0
 2330 0886 2046     		mov	r0, r4	@, hrtc
 462:src/stm32f1xx_hal_rtc.c **** 
 2331              		.loc 1 462 0
 2332 0888 5368     		ldr	r3, [r2, #4]	@ _23, _22->CRL
 2333 088a 23F00803 		bic	r3, r3, #8	@ _24, _23,
 2334 088e 5360     		str	r3, [r2, #4]	@ _24, _22->CRL
 475:src/stm32f1xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 2335              		.loc 1 475 0
 2336 0890 FFF7FEFF 		bl	HAL_RTC_MspDeInit	@
 2337              	.LVL240:
 478:src/stm32f1xx_hal_rtc.c **** 
 2338              		.loc 1 478 0
 2339 0894 6574     		strb	r5, [r4, #17]	@ <retval>, hrtc_3(D)->State
 481:src/stm32f1xx_hal_rtc.c **** 
 2340              		.loc 1 481 0
 2341 0896 2574     		strb	r5, [r4, #16]	@ <retval>, hrtc_3(D)->Lock
 2342              	.L207:
 484:src/stm32f1xx_hal_rtc.c **** 
 2343              		.loc 1 484 0
 2344 0898 2846     		mov	r0, r5	@, <retval>
 2345 089a 70BD     		pop	{r4, r5, r6, pc}	@
 2346              		.cfi_endproc
 2347              	.LFE66:
ARM GAS  /tmp/ccM6Uqrc.s 			page 84


 2348              		.size	HAL_RTC_DeInit, .-HAL_RTC_DeInit
 2349              	.Letext0:
 2350              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2351              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2352              		.file 4 "../cmsiscore/inc/core_cm3.h"
 2353              		.file 5 "../cmsisstm32f1xx/inc/system_stm32f1xx.h"
 2354              		.file 6 "../cmsisstm32f1xx/inc/stm32f103x6.h"
 2355              		.file 7 "../cmsisstm32f1xx/inc/stm32f1xx.h"
 2356              		.file 8 "./inc/stm32f1xx_hal_def.h"
 2357              		.file 9 "./inc/stm32f1xx_hal_rtc.h"
 2358              		.file 10 "./inc/stm32f1xx_hal.h"
 2359              		.file 11 "./inc/stm32f1xx_hal_rcc_ex.h"
 2360              		.section	.debug_info,"",%progbits
 2361              	.Ldebug_info0:
 2362 0000 A2130000 		.4byte	0x13a2
 2363 0004 0200     		.2byte	0x2
 2364 0006 00000000 		.4byte	.Ldebug_abbrev0
 2365 000a 04       		.byte	0x4
 2366 000b 01       		.uleb128 0x1
 2367 000c 48050000 		.4byte	.LASF138
 2368 0010 0C       		.byte	0xc
 2369 0011 A8030000 		.4byte	.LASF139
 2370 0015 AF050000 		.4byte	.LASF140
 2371 0019 00000000 		.4byte	.Ltext0
 2372 001d 9C080000 		.4byte	.Letext0
 2373 0021 00000000 		.4byte	.Ldebug_line0
 2374 0025 02       		.uleb128 0x2
 2375 0026 04       		.byte	0x4
 2376 0027 07       		.byte	0x7
 2377 0028 9A020000 		.4byte	.LASF0
 2378 002c 02       		.uleb128 0x2
 2379 002d 01       		.byte	0x1
 2380 002e 06       		.byte	0x6
 2381 002f 24010000 		.4byte	.LASF1
 2382 0033 03       		.uleb128 0x3
 2383 0034 56000000 		.4byte	.LASF4
 2384 0038 02       		.byte	0x2
 2385 0039 1D       		.byte	0x1d
 2386 003a 3E000000 		.4byte	0x3e
 2387 003e 02       		.uleb128 0x2
 2388 003f 01       		.byte	0x1
 2389 0040 08       		.byte	0x8
 2390 0041 D3040000 		.4byte	.LASF2
 2391 0045 02       		.uleb128 0x2
 2392 0046 02       		.byte	0x2
 2393 0047 05       		.byte	0x5
 2394 0048 F2040000 		.4byte	.LASF3
 2395 004c 03       		.uleb128 0x3
 2396 004d 38060000 		.4byte	.LASF5
 2397 0051 02       		.byte	0x2
 2398 0052 2B       		.byte	0x2b
 2399 0053 57000000 		.4byte	0x57
 2400 0057 02       		.uleb128 0x2
 2401 0058 02       		.byte	0x2
 2402 0059 07       		.byte	0x7
 2403 005a 49030000 		.4byte	.LASF6
 2404 005e 03       		.uleb128 0x3
ARM GAS  /tmp/ccM6Uqrc.s 			page 85


 2405 005f 66060000 		.4byte	.LASF7
 2406 0063 02       		.byte	0x2
 2407 0064 3F       		.byte	0x3f
 2408 0065 69000000 		.4byte	0x69
 2409 0069 02       		.uleb128 0x2
 2410 006a 04       		.byte	0x4
 2411 006b 05       		.byte	0x5
 2412 006c 9D010000 		.4byte	.LASF8
 2413 0070 03       		.uleb128 0x3
 2414 0071 45020000 		.4byte	.LASF9
 2415 0075 02       		.byte	0x2
 2416 0076 41       		.byte	0x41
 2417 0077 7B000000 		.4byte	0x7b
 2418 007b 02       		.uleb128 0x2
 2419 007c 04       		.byte	0x4
 2420 007d 07       		.byte	0x7
 2421 007e E8020000 		.4byte	.LASF10
 2422 0082 02       		.uleb128 0x2
 2423 0083 08       		.byte	0x8
 2424 0084 05       		.byte	0x5
 2425 0085 16010000 		.4byte	.LASF11
 2426 0089 02       		.uleb128 0x2
 2427 008a 08       		.byte	0x8
 2428 008b 07       		.byte	0x7
 2429 008c A1000000 		.4byte	.LASF12
 2430 0090 04       		.uleb128 0x4
 2431 0091 04       		.byte	0x4
 2432 0092 05       		.byte	0x5
 2433 0093 696E7400 		.ascii	"int\000"
 2434 0097 03       		.uleb128 0x3
 2435 0098 E2060000 		.4byte	.LASF13
 2436 009c 03       		.byte	0x3
 2437 009d 18       		.byte	0x18
 2438 009e 33000000 		.4byte	0x33
 2439 00a2 05       		.uleb128 0x5
 2440 00a3 97000000 		.4byte	0x97
 2441 00a7 03       		.uleb128 0x3
 2442 00a8 FC010000 		.4byte	.LASF14
 2443 00ac 03       		.byte	0x3
 2444 00ad 24       		.byte	0x24
 2445 00ae 4C000000 		.4byte	0x4c
 2446 00b2 03       		.uleb128 0x3
 2447 00b3 CB040000 		.4byte	.LASF15
 2448 00b7 03       		.byte	0x3
 2449 00b8 2C       		.byte	0x2c
 2450 00b9 5E000000 		.4byte	0x5e
 2451 00bd 06       		.uleb128 0x6
 2452 00be B2000000 		.4byte	0xb2
 2453 00c2 03       		.uleb128 0x3
 2454 00c3 FB050000 		.4byte	.LASF16
 2455 00c7 03       		.byte	0x3
 2456 00c8 30       		.byte	0x30
 2457 00c9 70000000 		.4byte	0x70
 2458 00cd 06       		.uleb128 0x6
 2459 00ce C2000000 		.4byte	0xc2
 2460 00d2 02       		.uleb128 0x2
 2461 00d3 04       		.byte	0x4
ARM GAS  /tmp/ccM6Uqrc.s 			page 86


 2462 00d4 07       		.byte	0x7
 2463 00d5 F2030000 		.4byte	.LASF17
 2464 00d9 07       		.uleb128 0x7
 2465 00da DD000000 		.4byte	.LASF18
 2466 00de 04       		.byte	0x4
 2467 00df 4807     		.2byte	0x748
 2468 00e1 BD000000 		.4byte	0xbd
 2469 00e5 01       		.byte	0x1
 2470 00e6 01       		.byte	0x1
 2471 00e7 08       		.uleb128 0x8
 2472 00e8 B7020000 		.4byte	.LASF19
 2473 00ec 05       		.byte	0x5
 2474 00ed 33       		.byte	0x33
 2475 00ee C2000000 		.4byte	0xc2
 2476 00f2 01       		.byte	0x1
 2477 00f3 01       		.byte	0x1
 2478 00f4 09       		.uleb128 0x9
 2479 00f5 A2000000 		.4byte	0xa2
 2480 00f9 04010000 		.4byte	0x104
 2481 00fd 0A       		.uleb128 0xa
 2482 00fe D2000000 		.4byte	0xd2
 2483 0102 0F       		.byte	0xf
 2484 0103 00       		.byte	0
 2485 0104 05       		.uleb128 0x5
 2486 0105 F4000000 		.4byte	0xf4
 2487 0109 08       		.uleb128 0x8
 2488 010a C0030000 		.4byte	.LASF20
 2489 010e 05       		.byte	0x5
 2490 010f 34       		.byte	0x34
 2491 0110 04010000 		.4byte	0x104
 2492 0114 01       		.byte	0x1
 2493 0115 01       		.byte	0x1
 2494 0116 09       		.uleb128 0x9
 2495 0117 A2000000 		.4byte	0xa2
 2496 011b 26010000 		.4byte	0x126
 2497 011f 0A       		.uleb128 0xa
 2498 0120 D2000000 		.4byte	0xd2
 2499 0124 07       		.byte	0x7
 2500 0125 00       		.byte	0
 2501 0126 05       		.uleb128 0x5
 2502 0127 16010000 		.4byte	0x116
 2503 012b 08       		.uleb128 0x8
 2504 012c 69000000 		.4byte	.LASF21
 2505 0130 05       		.byte	0x5
 2506 0131 35       		.byte	0x35
 2507 0132 26010000 		.4byte	0x126
 2508 0136 01       		.byte	0x1
 2509 0137 01       		.byte	0x1
 2510 0138 0B       		.uleb128 0xb
 2511 0139 38       		.byte	0x38
 2512 013a 06       		.byte	0x6
 2513 013b B0       		.byte	0xb0
 2514 013c 04020000 		.4byte	0x204
 2515 0140 0C       		.uleb128 0xc
 2516 0141 9E040000 		.4byte	.LASF22
 2517 0145 06       		.byte	0x6
 2518 0146 B2       		.byte	0xb2
ARM GAS  /tmp/ccM6Uqrc.s 			page 87


 2519 0147 C2000000 		.4byte	0xc2
 2520 014b 02       		.byte	0x2
 2521 014c 23       		.byte	0x23
 2522 014d 00       		.uleb128 0
 2523 014e 0D       		.uleb128 0xd
 2524 014f 44523100 		.ascii	"DR1\000"
 2525 0153 06       		.byte	0x6
 2526 0154 B3       		.byte	0xb3
 2527 0155 CD000000 		.4byte	0xcd
 2528 0159 02       		.byte	0x2
 2529 015a 23       		.byte	0x23
 2530 015b 04       		.uleb128 0x4
 2531 015c 0D       		.uleb128 0xd
 2532 015d 44523200 		.ascii	"DR2\000"
 2533 0161 06       		.byte	0x6
 2534 0162 B4       		.byte	0xb4
 2535 0163 CD000000 		.4byte	0xcd
 2536 0167 02       		.byte	0x2
 2537 0168 23       		.byte	0x23
 2538 0169 08       		.uleb128 0x8
 2539 016a 0D       		.uleb128 0xd
 2540 016b 44523300 		.ascii	"DR3\000"
 2541 016f 06       		.byte	0x6
 2542 0170 B5       		.byte	0xb5
 2543 0171 CD000000 		.4byte	0xcd
 2544 0175 02       		.byte	0x2
 2545 0176 23       		.byte	0x23
 2546 0177 0C       		.uleb128 0xc
 2547 0178 0D       		.uleb128 0xd
 2548 0179 44523400 		.ascii	"DR4\000"
 2549 017d 06       		.byte	0x6
 2550 017e B6       		.byte	0xb6
 2551 017f CD000000 		.4byte	0xcd
 2552 0183 02       		.byte	0x2
 2553 0184 23       		.byte	0x23
 2554 0185 10       		.uleb128 0x10
 2555 0186 0D       		.uleb128 0xd
 2556 0187 44523500 		.ascii	"DR5\000"
 2557 018b 06       		.byte	0x6
 2558 018c B7       		.byte	0xb7
 2559 018d CD000000 		.4byte	0xcd
 2560 0191 02       		.byte	0x2
 2561 0192 23       		.byte	0x23
 2562 0193 14       		.uleb128 0x14
 2563 0194 0D       		.uleb128 0xd
 2564 0195 44523600 		.ascii	"DR6\000"
 2565 0199 06       		.byte	0x6
 2566 019a B8       		.byte	0xb8
 2567 019b CD000000 		.4byte	0xcd
 2568 019f 02       		.byte	0x2
 2569 01a0 23       		.byte	0x23
 2570 01a1 18       		.uleb128 0x18
 2571 01a2 0D       		.uleb128 0xd
 2572 01a3 44523700 		.ascii	"DR7\000"
 2573 01a7 06       		.byte	0x6
 2574 01a8 B9       		.byte	0xb9
 2575 01a9 CD000000 		.4byte	0xcd
ARM GAS  /tmp/ccM6Uqrc.s 			page 88


 2576 01ad 02       		.byte	0x2
 2577 01ae 23       		.byte	0x23
 2578 01af 1C       		.uleb128 0x1c
 2579 01b0 0D       		.uleb128 0xd
 2580 01b1 44523800 		.ascii	"DR8\000"
 2581 01b5 06       		.byte	0x6
 2582 01b6 BA       		.byte	0xba
 2583 01b7 CD000000 		.4byte	0xcd
 2584 01bb 02       		.byte	0x2
 2585 01bc 23       		.byte	0x23
 2586 01bd 20       		.uleb128 0x20
 2587 01be 0D       		.uleb128 0xd
 2588 01bf 44523900 		.ascii	"DR9\000"
 2589 01c3 06       		.byte	0x6
 2590 01c4 BB       		.byte	0xbb
 2591 01c5 CD000000 		.4byte	0xcd
 2592 01c9 02       		.byte	0x2
 2593 01ca 23       		.byte	0x23
 2594 01cb 24       		.uleb128 0x24
 2595 01cc 0C       		.uleb128 0xc
 2596 01cd 9D050000 		.4byte	.LASF23
 2597 01d1 06       		.byte	0x6
 2598 01d2 BC       		.byte	0xbc
 2599 01d3 CD000000 		.4byte	0xcd
 2600 01d7 02       		.byte	0x2
 2601 01d8 23       		.byte	0x23
 2602 01d9 28       		.uleb128 0x28
 2603 01da 0C       		.uleb128 0xc
 2604 01db 98040000 		.4byte	.LASF24
 2605 01df 06       		.byte	0x6
 2606 01e0 BD       		.byte	0xbd
 2607 01e1 CD000000 		.4byte	0xcd
 2608 01e5 02       		.byte	0x2
 2609 01e6 23       		.byte	0x23
 2610 01e7 2C       		.uleb128 0x2c
 2611 01e8 0D       		.uleb128 0xd
 2612 01e9 435200   		.ascii	"CR\000"
 2613 01ec 06       		.byte	0x6
 2614 01ed BE       		.byte	0xbe
 2615 01ee CD000000 		.4byte	0xcd
 2616 01f2 02       		.byte	0x2
 2617 01f3 23       		.byte	0x23
 2618 01f4 30       		.uleb128 0x30
 2619 01f5 0D       		.uleb128 0xd
 2620 01f6 43535200 		.ascii	"CSR\000"
 2621 01fa 06       		.byte	0x6
 2622 01fb BF       		.byte	0xbf
 2623 01fc CD000000 		.4byte	0xcd
 2624 0200 02       		.byte	0x2
 2625 0201 23       		.byte	0x23
 2626 0202 34       		.uleb128 0x34
 2627 0203 00       		.byte	0
 2628 0204 03       		.uleb128 0x3
 2629 0205 E1040000 		.4byte	.LASF25
 2630 0209 06       		.byte	0x6
 2631 020a C0       		.byte	0xc0
 2632 020b 38010000 		.4byte	0x138
ARM GAS  /tmp/ccM6Uqrc.s 			page 89


 2633 020f 0E       		.uleb128 0xe
 2634 0210 18       		.byte	0x18
 2635 0211 06       		.byte	0x6
 2636 0212 3201     		.2byte	0x132
 2637 0214 72020000 		.4byte	0x272
 2638 0218 0F       		.uleb128 0xf
 2639 0219 494D5200 		.ascii	"IMR\000"
 2640 021d 06       		.byte	0x6
 2641 021e 3401     		.2byte	0x134
 2642 0220 CD000000 		.4byte	0xcd
 2643 0224 02       		.byte	0x2
 2644 0225 23       		.byte	0x23
 2645 0226 00       		.uleb128 0
 2646 0227 0F       		.uleb128 0xf
 2647 0228 454D5200 		.ascii	"EMR\000"
 2648 022c 06       		.byte	0x6
 2649 022d 3501     		.2byte	0x135
 2650 022f CD000000 		.4byte	0xcd
 2651 0233 02       		.byte	0x2
 2652 0234 23       		.byte	0x23
 2653 0235 04       		.uleb128 0x4
 2654 0236 10       		.uleb128 0x10
 2655 0237 D2020000 		.4byte	.LASF26
 2656 023b 06       		.byte	0x6
 2657 023c 3601     		.2byte	0x136
 2658 023e CD000000 		.4byte	0xcd
 2659 0242 02       		.byte	0x2
 2660 0243 23       		.byte	0x23
 2661 0244 08       		.uleb128 0x8
 2662 0245 10       		.uleb128 0x10
 2663 0246 ED040000 		.4byte	.LASF27
 2664 024a 06       		.byte	0x6
 2665 024b 3701     		.2byte	0x137
 2666 024d CD000000 		.4byte	0xcd
 2667 0251 02       		.byte	0x2
 2668 0252 23       		.byte	0x23
 2669 0253 0C       		.uleb128 0xc
 2670 0254 10       		.uleb128 0x10
 2671 0255 7C000000 		.4byte	.LASF28
 2672 0259 06       		.byte	0x6
 2673 025a 3801     		.2byte	0x138
 2674 025c CD000000 		.4byte	0xcd
 2675 0260 02       		.byte	0x2
 2676 0261 23       		.byte	0x23
 2677 0262 10       		.uleb128 0x10
 2678 0263 0F       		.uleb128 0xf
 2679 0264 505200   		.ascii	"PR\000"
 2680 0267 06       		.byte	0x6
 2681 0268 3901     		.2byte	0x139
 2682 026a CD000000 		.4byte	0xcd
 2683 026e 02       		.byte	0x2
 2684 026f 23       		.byte	0x23
 2685 0270 14       		.uleb128 0x14
 2686 0271 00       		.byte	0
 2687 0272 11       		.uleb128 0x11
 2688 0273 47070000 		.4byte	.LASF29
 2689 0277 06       		.byte	0x6
ARM GAS  /tmp/ccM6Uqrc.s 			page 90


 2690 0278 3A01     		.2byte	0x13a
 2691 027a 0F020000 		.4byte	0x20f
 2692 027e 0E       		.uleb128 0xe
 2693 027f 28       		.byte	0x28
 2694 0280 06       		.byte	0x6
 2695 0281 B701     		.2byte	0x1b7
 2696 0283 1E030000 		.4byte	0x31e
 2697 0287 0F       		.uleb128 0xf
 2698 0288 43524800 		.ascii	"CRH\000"
 2699 028c 06       		.byte	0x6
 2700 028d B901     		.2byte	0x1b9
 2701 028f CD000000 		.4byte	0xcd
 2702 0293 02       		.byte	0x2
 2703 0294 23       		.byte	0x23
 2704 0295 00       		.uleb128 0
 2705 0296 0F       		.uleb128 0xf
 2706 0297 43524C00 		.ascii	"CRL\000"
 2707 029b 06       		.byte	0x6
 2708 029c BA01     		.2byte	0x1ba
 2709 029e CD000000 		.4byte	0xcd
 2710 02a2 02       		.byte	0x2
 2711 02a3 23       		.byte	0x23
 2712 02a4 04       		.uleb128 0x4
 2713 02a5 10       		.uleb128 0x10
 2714 02a6 59070000 		.4byte	.LASF30
 2715 02aa 06       		.byte	0x6
 2716 02ab BB01     		.2byte	0x1bb
 2717 02ad CD000000 		.4byte	0xcd
 2718 02b1 02       		.byte	0x2
 2719 02b2 23       		.byte	0x23
 2720 02b3 08       		.uleb128 0x8
 2721 02b4 10       		.uleb128 0x10
 2722 02b5 5E070000 		.4byte	.LASF31
 2723 02b9 06       		.byte	0x6
 2724 02ba BC01     		.2byte	0x1bc
 2725 02bc CD000000 		.4byte	0xcd
 2726 02c0 02       		.byte	0x2
 2727 02c1 23       		.byte	0x23
 2728 02c2 0C       		.uleb128 0xc
 2729 02c3 10       		.uleb128 0x10
 2730 02c4 44030000 		.4byte	.LASF32
 2731 02c8 06       		.byte	0x6
 2732 02c9 BD01     		.2byte	0x1bd
 2733 02cb CD000000 		.4byte	0xcd
 2734 02cf 02       		.byte	0x2
 2735 02d0 23       		.byte	0x23
 2736 02d1 10       		.uleb128 0x10
 2737 02d2 10       		.uleb128 0x10
 2738 02d3 3B020000 		.4byte	.LASF33
 2739 02d7 06       		.byte	0x6
 2740 02d8 BE01     		.2byte	0x1be
 2741 02da CD000000 		.4byte	0xcd
 2742 02de 02       		.byte	0x2
 2743 02df 23       		.byte	0x23
 2744 02e0 14       		.uleb128 0x14
 2745 02e1 10       		.uleb128 0x10
 2746 02e2 98010000 		.4byte	.LASF34
ARM GAS  /tmp/ccM6Uqrc.s 			page 91


 2747 02e6 06       		.byte	0x6
 2748 02e7 BF01     		.2byte	0x1bf
 2749 02e9 CD000000 		.4byte	0xcd
 2750 02ed 02       		.byte	0x2
 2751 02ee 23       		.byte	0x23
 2752 02ef 18       		.uleb128 0x18
 2753 02f0 10       		.uleb128 0x10
 2754 02f1 EA000000 		.4byte	.LASF35
 2755 02f5 06       		.byte	0x6
 2756 02f6 C001     		.2byte	0x1c0
 2757 02f8 CD000000 		.4byte	0xcd
 2758 02fc 02       		.byte	0x2
 2759 02fd 23       		.byte	0x23
 2760 02fe 1C       		.uleb128 0x1c
 2761 02ff 10       		.uleb128 0x10
 2762 0300 FB030000 		.4byte	.LASF36
 2763 0304 06       		.byte	0x6
 2764 0305 C101     		.2byte	0x1c1
 2765 0307 CD000000 		.4byte	0xcd
 2766 030b 02       		.byte	0x2
 2767 030c 23       		.byte	0x23
 2768 030d 20       		.uleb128 0x20
 2769 030e 10       		.uleb128 0x10
 2770 030f 0C040000 		.4byte	.LASF37
 2771 0313 06       		.byte	0x6
 2772 0314 C201     		.2byte	0x1c2
 2773 0316 CD000000 		.4byte	0xcd
 2774 031a 02       		.byte	0x2
 2775 031b 23       		.byte	0x23
 2776 031c 24       		.uleb128 0x24
 2777 031d 00       		.byte	0
 2778 031e 11       		.uleb128 0x11
 2779 031f EF000000 		.4byte	.LASF38
 2780 0323 06       		.byte	0x6
 2781 0324 C301     		.2byte	0x1c3
 2782 0326 7E020000 		.4byte	0x27e
 2783 032a 12       		.uleb128 0x12
 2784 032b 01       		.byte	0x1
 2785 032c 3E000000 		.4byte	0x3e
 2786 0330 07       		.byte	0x7
 2787 0331 98       		.byte	0x98
 2788 0332 43030000 		.4byte	0x343
 2789 0336 13       		.uleb128 0x13
 2790 0337 C5040000 		.4byte	.LASF39
 2791 033b 00       		.byte	0
 2792 033c 14       		.uleb128 0x14
 2793 033d 53455400 		.ascii	"SET\000"
 2794 0341 01       		.byte	0x1
 2795 0342 00       		.byte	0
 2796 0343 02       		.uleb128 0x2
 2797 0344 08       		.byte	0x8
 2798 0345 04       		.byte	0x4
 2799 0346 1B060000 		.4byte	.LASF40
 2800 034a 12       		.uleb128 0x12
 2801 034b 01       		.byte	0x1
 2802 034c 3E000000 		.4byte	0x3e
 2803 0350 08       		.byte	0x8
ARM GAS  /tmp/ccM6Uqrc.s 			page 92


 2804 0351 2A       		.byte	0x2a
 2805 0352 6F030000 		.4byte	0x36f
 2806 0356 13       		.uleb128 0x13
 2807 0357 3D030000 		.4byte	.LASF41
 2808 035b 00       		.byte	0
 2809 035c 13       		.uleb128 0x13
 2810 035d 11060000 		.4byte	.LASF42
 2811 0361 01       		.byte	0x1
 2812 0362 13       		.uleb128 0x13
 2813 0363 60000000 		.4byte	.LASF43
 2814 0367 02       		.byte	0x2
 2815 0368 13       		.uleb128 0x13
 2816 0369 79020000 		.4byte	.LASF44
 2817 036d 03       		.byte	0x3
 2818 036e 00       		.byte	0
 2819 036f 03       		.uleb128 0x3
 2820 0370 96030000 		.4byte	.LASF45
 2821 0374 08       		.byte	0x8
 2822 0375 2F       		.byte	0x2f
 2823 0376 4A030000 		.4byte	0x34a
 2824 037a 12       		.uleb128 0x12
 2825 037b 01       		.byte	0x1
 2826 037c 3E000000 		.4byte	0x3e
 2827 0380 08       		.byte	0x8
 2828 0381 35       		.byte	0x35
 2829 0382 93030000 		.4byte	0x393
 2830 0386 13       		.uleb128 0x13
 2831 0387 3A070000 		.4byte	.LASF46
 2832 038b 00       		.byte	0
 2833 038c 13       		.uleb128 0x13
 2834 038d 2D040000 		.4byte	.LASF47
 2835 0391 01       		.byte	0x1
 2836 0392 00       		.byte	0
 2837 0393 03       		.uleb128 0x3
 2838 0394 83010000 		.4byte	.LASF48
 2839 0398 08       		.byte	0x8
 2840 0399 38       		.byte	0x38
 2841 039a 7A030000 		.4byte	0x37a
 2842 039e 0B       		.uleb128 0xb
 2843 039f 03       		.byte	0x3
 2844 03a0 09       		.byte	0x9
 2845 03a1 5D       		.byte	0x5d
 2846 03a2 D1030000 		.4byte	0x3d1
 2847 03a6 0C       		.uleb128 0xc
 2848 03a7 4F040000 		.4byte	.LASF49
 2849 03ab 09       		.byte	0x9
 2850 03ac 5F       		.byte	0x5f
 2851 03ad 97000000 		.4byte	0x97
 2852 03b1 02       		.byte	0x2
 2853 03b2 23       		.byte	0x23
 2854 03b3 00       		.uleb128 0
 2855 03b4 0C       		.uleb128 0xc
 2856 03b5 47040000 		.4byte	.LASF50
 2857 03b9 09       		.byte	0x9
 2858 03ba 62       		.byte	0x62
 2859 03bb 97000000 		.4byte	0x97
 2860 03bf 02       		.byte	0x2
ARM GAS  /tmp/ccM6Uqrc.s 			page 93


 2861 03c0 23       		.byte	0x23
 2862 03c1 01       		.uleb128 0x1
 2863 03c2 0C       		.uleb128 0xc
 2864 03c3 38040000 		.4byte	.LASF51
 2865 03c7 09       		.byte	0x9
 2866 03c8 65       		.byte	0x65
 2867 03c9 97000000 		.4byte	0x97
 2868 03cd 02       		.byte	0x2
 2869 03ce 23       		.byte	0x23
 2870 03cf 02       		.uleb128 0x2
 2871 03d0 00       		.byte	0
 2872 03d1 03       		.uleb128 0x3
 2873 03d2 38050000 		.4byte	.LASF52
 2874 03d6 09       		.byte	0x9
 2875 03d7 68       		.byte	0x68
 2876 03d8 9E030000 		.4byte	0x39e
 2877 03dc 0B       		.uleb128 0xb
 2878 03dd 08       		.byte	0x8
 2879 03de 09       		.byte	0x9
 2880 03df 6D       		.byte	0x6d
 2881 03e0 01040000 		.4byte	0x401
 2882 03e4 0C       		.uleb128 0xc
 2883 03e5 A6010000 		.4byte	.LASF53
 2884 03e9 09       		.byte	0x9
 2885 03ea 6F       		.byte	0x6f
 2886 03eb D1030000 		.4byte	0x3d1
 2887 03ef 02       		.byte	0x2
 2888 03f0 23       		.byte	0x23
 2889 03f1 00       		.uleb128 0
 2890 03f2 0C       		.uleb128 0xc
 2891 03f3 9B000000 		.4byte	.LASF54
 2892 03f7 09       		.byte	0x9
 2893 03f8 71       		.byte	0x71
 2894 03f9 C2000000 		.4byte	0xc2
 2895 03fd 02       		.byte	0x2
 2896 03fe 23       		.byte	0x23
 2897 03ff 04       		.uleb128 0x4
 2898 0400 00       		.byte	0
 2899 0401 03       		.uleb128 0x3
 2900 0402 FC040000 		.4byte	.LASF55
 2901 0406 09       		.byte	0x9
 2902 0407 73       		.byte	0x73
 2903 0408 DC030000 		.4byte	0x3dc
 2904 040c 12       		.uleb128 0x12
 2905 040d 01       		.byte	0x1
 2906 040e 3E000000 		.4byte	0x3e
 2907 0412 09       		.byte	0x9
 2908 0413 79       		.byte	0x79
 2909 0414 37040000 		.4byte	0x437
 2910 0418 13       		.uleb128 0x13
 2911 0419 D7010000 		.4byte	.LASF56
 2912 041d 00       		.byte	0
 2913 041e 13       		.uleb128 0x13
 2914 041f 16030000 		.4byte	.LASF57
 2915 0423 01       		.byte	0x1
 2916 0424 13       		.uleb128 0x13
 2917 0425 1D050000 		.4byte	.LASF58
ARM GAS  /tmp/ccM6Uqrc.s 			page 94


 2918 0429 02       		.byte	0x2
 2919 042a 13       		.uleb128 0x13
 2920 042b D4030000 		.4byte	.LASF59
 2921 042f 03       		.byte	0x3
 2922 0430 13       		.uleb128 0x13
 2923 0431 C9000000 		.4byte	.LASF60
 2924 0435 04       		.byte	0x4
 2925 0436 00       		.byte	0
 2926 0437 03       		.uleb128 0x3
 2927 0438 58020000 		.4byte	.LASF61
 2928 043c 09       		.byte	0x9
 2929 043d 80       		.byte	0x80
 2930 043e 0C040000 		.4byte	0x40c
 2931 0442 06       		.uleb128 0x6
 2932 0443 37040000 		.4byte	0x437
 2933 0447 0B       		.uleb128 0xb
 2934 0448 08       		.byte	0x8
 2935 0449 09       		.byte	0x9
 2936 044a 85       		.byte	0x85
 2937 044b 6C040000 		.4byte	0x46c
 2938 044f 0C       		.uleb128 0xc
 2939 0450 A5060000 		.4byte	.LASF62
 2940 0454 09       		.byte	0x9
 2941 0455 87       		.byte	0x87
 2942 0456 C2000000 		.4byte	0xc2
 2943 045a 02       		.byte	0x2
 2944 045b 23       		.byte	0x23
 2945 045c 00       		.uleb128 0
 2946 045d 0C       		.uleb128 0xc
 2947 045e C0010000 		.4byte	.LASF63
 2948 0462 09       		.byte	0x9
 2949 0463 8B       		.byte	0x8b
 2950 0464 C2000000 		.4byte	0xc2
 2951 0468 02       		.byte	0x2
 2952 0469 23       		.byte	0x23
 2953 046a 04       		.uleb128 0x4
 2954 046b 00       		.byte	0
 2955 046c 03       		.uleb128 0x3
 2956 046d 2A070000 		.4byte	.LASF64
 2957 0471 09       		.byte	0x9
 2958 0472 8E       		.byte	0x8e
 2959 0473 47040000 		.4byte	0x447
 2960 0477 0B       		.uleb128 0xb
 2961 0478 04       		.byte	0x4
 2962 0479 09       		.byte	0x9
 2963 047a 93       		.byte	0x93
 2964 047b B8040000 		.4byte	0x4b8
 2965 047f 0C       		.uleb128 0xc
 2966 0480 EA030000 		.4byte	.LASF65
 2967 0484 09       		.byte	0x9
 2968 0485 95       		.byte	0x95
 2969 0486 97000000 		.4byte	0x97
 2970 048a 02       		.byte	0x2
 2971 048b 23       		.byte	0x23
 2972 048c 00       		.uleb128 0
 2973 048d 0C       		.uleb128 0xc
 2974 048e 82000000 		.4byte	.LASF66
ARM GAS  /tmp/ccM6Uqrc.s 			page 95


 2975 0492 09       		.byte	0x9
 2976 0493 98       		.byte	0x98
 2977 0494 97000000 		.4byte	0x97
 2978 0498 02       		.byte	0x2
 2979 0499 23       		.byte	0x23
 2980 049a 01       		.uleb128 0x1
 2981 049b 0C       		.uleb128 0xc
 2982 049c 0E070000 		.4byte	.LASF67
 2983 04a0 09       		.byte	0x9
 2984 04a1 9B       		.byte	0x9b
 2985 04a2 97000000 		.4byte	0x97
 2986 04a6 02       		.byte	0x2
 2987 04a7 23       		.byte	0x23
 2988 04a8 02       		.uleb128 0x2
 2989 04a9 0C       		.uleb128 0xc
 2990 04aa 5C030000 		.4byte	.LASF68
 2991 04ae 09       		.byte	0x9
 2992 04af 9E       		.byte	0x9e
 2993 04b0 97000000 		.4byte	0x97
 2994 04b4 02       		.byte	0x2
 2995 04b5 23       		.byte	0x23
 2996 04b6 03       		.uleb128 0x3
 2997 04b7 00       		.byte	0
 2998 04b8 03       		.uleb128 0x3
 2999 04b9 C7010000 		.4byte	.LASF69
 3000 04bd 09       		.byte	0x9
 3001 04be A1       		.byte	0xa1
 3002 04bf 77040000 		.4byte	0x477
 3003 04c3 0B       		.uleb128 0xb
 3004 04c4 14       		.byte	0x14
 3005 04c5 09       		.byte	0x9
 3006 04c6 A9       		.byte	0xa9
 3007 04c7 12050000 		.4byte	0x512
 3008 04cb 0C       		.uleb128 0xc
 3009 04cc A8040000 		.4byte	.LASF70
 3010 04d0 09       		.byte	0x9
 3011 04d1 AC       		.byte	0xac
 3012 04d2 12050000 		.4byte	0x512
 3013 04d6 02       		.byte	0x2
 3014 04d7 23       		.byte	0x23
 3015 04d8 00       		.uleb128 0
 3016 04d9 0C       		.uleb128 0xc
 3017 04da 93040000 		.4byte	.LASF71
 3018 04de 09       		.byte	0x9
 3019 04df AE       		.byte	0xae
 3020 04e0 6C040000 		.4byte	0x46c
 3021 04e4 02       		.byte	0x2
 3022 04e5 23       		.byte	0x23
 3023 04e6 04       		.uleb128 0x4
 3024 04e7 0C       		.uleb128 0xc
 3025 04e8 6C020000 		.4byte	.LASF72
 3026 04ec 09       		.byte	0x9
 3027 04ed B0       		.byte	0xb0
 3028 04ee B8040000 		.4byte	0x4b8
 3029 04f2 02       		.byte	0x2
 3030 04f3 23       		.byte	0x23
 3031 04f4 0C       		.uleb128 0xc
ARM GAS  /tmp/ccM6Uqrc.s 			page 96


 3032 04f5 0C       		.uleb128 0xc
 3033 04f6 40020000 		.4byte	.LASF73
 3034 04fa 09       		.byte	0x9
 3035 04fb B2       		.byte	0xb2
 3036 04fc 93030000 		.4byte	0x393
 3037 0500 02       		.byte	0x2
 3038 0501 23       		.byte	0x23
 3039 0502 10       		.uleb128 0x10
 3040 0503 0C       		.uleb128 0xc
 3041 0504 32060000 		.4byte	.LASF74
 3042 0508 09       		.byte	0x9
 3043 0509 B4       		.byte	0xb4
 3044 050a 42040000 		.4byte	0x442
 3045 050e 02       		.byte	0x2
 3046 050f 23       		.byte	0x23
 3047 0510 11       		.uleb128 0x11
 3048 0511 00       		.byte	0
 3049 0512 15       		.uleb128 0x15
 3050 0513 04       		.byte	0x4
 3051 0514 1E030000 		.4byte	0x31e
 3052 0518 03       		.uleb128 0x3
 3053 0519 56010000 		.4byte	.LASF75
 3054 051d 09       		.byte	0x9
 3055 051e C1       		.byte	0xc1
 3056 051f C3040000 		.4byte	0x4c3
 3057 0523 12       		.uleb128 0x12
 3058 0524 01       		.byte	0x1
 3059 0525 3E000000 		.4byte	0x3e
 3060 0529 0A       		.byte	0xa
 3061 052a 33       		.byte	0x33
 3062 052b 48050000 		.4byte	0x548
 3063 052f 13       		.uleb128 0x13
 3064 0530 88000000 		.4byte	.LASF76
 3065 0534 64       		.byte	0x64
 3066 0535 13       		.uleb128 0x13
 3067 0536 52060000 		.4byte	.LASF77
 3068 053a 0A       		.byte	0xa
 3069 053b 13       		.uleb128 0x13
 3070 053c 2A030000 		.4byte	.LASF78
 3071 0540 01       		.byte	0x1
 3072 0541 13       		.uleb128 0x13
 3073 0542 64040000 		.4byte	.LASF79
 3074 0546 01       		.byte	0x1
 3075 0547 00       		.byte	0
 3076 0548 03       		.uleb128 0x3
 3077 0549 0C000000 		.4byte	.LASF80
 3078 054d 0A       		.byte	0xa
 3079 054e 38       		.byte	0x38
 3080 054f 23050000 		.4byte	0x523
 3081 0553 08       		.uleb128 0x8
 3082 0554 27060000 		.4byte	.LASF81
 3083 0558 0A       		.byte	0xa
 3084 0559 3D       		.byte	0x3d
 3085 055a C2000000 		.4byte	0xc2
 3086 055e 01       		.byte	0x1
 3087 055f 01       		.byte	0x1
 3088 0560 08       		.uleb128 0x8
ARM GAS  /tmp/ccM6Uqrc.s 			page 97


 3089 0561 C7020000 		.4byte	.LASF82
 3090 0565 0A       		.byte	0xa
 3091 0566 3E       		.byte	0x3e
 3092 0567 48050000 		.4byte	0x548
 3093 056b 01       		.byte	0x1
 3094 056c 01       		.byte	0x1
 3095 056d 16       		.uleb128 0x16
 3096 056e 05020000 		.4byte	.LASF92
 3097 0572 01       		.byte	0x1
 3098 0573 7C07     		.2byte	0x77c
 3099 0575 01       		.byte	0x1
 3100 0576 97000000 		.4byte	0x97
 3101 057a 58000000 		.4byte	.LFB92
 3102 057e C6000000 		.4byte	.LFE92
 3103 0582 00000000 		.4byte	.LLST13
 3104 0586 01       		.byte	0x1
 3105 0587 DA050000 		.4byte	0x5da
 3106 058b 17       		.uleb128 0x17
 3107 058c 11040000 		.4byte	.LASF83
 3108 0590 01       		.byte	0x1
 3109 0591 7C07     		.2byte	0x77c
 3110 0593 C2000000 		.4byte	0xc2
 3111 0597 20000000 		.4byte	.LLST14
 3112 059b 18       		.uleb128 0x18
 3113 059c 40040000 		.4byte	.LASF84
 3114 05a0 01       		.byte	0x1
 3115 05a1 7C07     		.2byte	0x77c
 3116 05a3 97000000 		.4byte	0x97
 3117 05a7 01       		.byte	0x1
 3118 05a8 51       		.byte	0x51
 3119 05a9 17       		.uleb128 0x17
 3120 05aa 77000000 		.4byte	.LASF85
 3121 05ae 01       		.byte	0x1
 3122 05af 7C07     		.2byte	0x77c
 3123 05b1 97000000 		.4byte	0x97
 3124 05b5 68000000 		.4byte	.LLST15
 3125 05b9 19       		.uleb128 0x19
 3126 05ba 93010000 		.4byte	.LASF86
 3127 05be 01       		.byte	0x1
 3128 05bf 7E07     		.2byte	0x77e
 3129 05c1 C2000000 		.4byte	0xc2
 3130 05c5 A2000000 		.4byte	.LLST16
 3131 05c9 19       		.uleb128 0x19
 3132 05ca 4A060000 		.4byte	.LASF87
 3133 05ce 01       		.byte	0x1
 3134 05cf 7E07     		.2byte	0x77e
 3135 05d1 C2000000 		.4byte	0xc2
 3136 05d5 C1000000 		.4byte	.LLST17
 3137 05d9 00       		.byte	0
 3138 05da 1A       		.uleb128 0x1a
 3139 05db 55040000 		.4byte	.LASF100
 3140 05df 01       		.byte	0x1
 3141 05e0 5707     		.2byte	0x757
 3142 05e2 01       		.byte	0x1
 3143 05e3 97000000 		.4byte	0x97
 3144 05e7 01       		.byte	0x1
 3145 05e8 F9050000 		.4byte	0x5f9
ARM GAS  /tmp/ccM6Uqrc.s 			page 98


 3146 05ec 1B       		.uleb128 0x1b
 3147 05ed 11040000 		.4byte	.LASF83
 3148 05f1 01       		.byte	0x1
 3149 05f2 5707     		.2byte	0x757
 3150 05f4 A7000000 		.4byte	0xa7
 3151 05f8 00       		.byte	0
 3152 05f9 1C       		.uleb128 0x1c
 3153 05fa CD060000 		.4byte	.LASF141
 3154 05fe 01       		.byte	0x1
 3155 05ff F806     		.2byte	0x6f8
 3156 0601 01       		.byte	0x1
 3157 0602 01       		.byte	0x1
 3158 0603 50060000 		.4byte	0x650
 3159 0607 1B       		.uleb128 0x1b
 3160 0608 B2060000 		.4byte	.LASF88
 3161 060c 01       		.byte	0x1
 3162 060d F806     		.2byte	0x6f8
 3163 060f 50060000 		.4byte	0x650
 3164 0613 1B       		.uleb128 0x1b
 3165 0614 83060000 		.4byte	.LASF89
 3166 0618 01       		.byte	0x1
 3167 0619 F806     		.2byte	0x6f8
 3168 061b C2000000 		.4byte	0xc2
 3169 061f 1D       		.uleb128 0x1d
 3170 0620 93010000 		.4byte	.LASF86
 3171 0624 01       		.byte	0x1
 3172 0625 FA06     		.2byte	0x6fa
 3173 0627 C2000000 		.4byte	0xc2
 3174 062b 1D       		.uleb128 0x1d
 3175 062c 85020000 		.4byte	.LASF90
 3176 0630 01       		.byte	0x1
 3177 0631 FA06     		.2byte	0x6fa
 3178 0633 C2000000 		.4byte	0xc2
 3179 0637 1E       		.uleb128 0x1e
 3180 0638 64617900 		.ascii	"day\000"
 3181 063c 01       		.byte	0x1
 3182 063d FA06     		.2byte	0x6fa
 3183 063f C2000000 		.4byte	0xc2
 3184 0643 1D       		.uleb128 0x1d
 3185 0644 54070000 		.4byte	.LASF91
 3186 0648 01       		.byte	0x1
 3187 0649 FB06     		.2byte	0x6fb
 3188 064b C2000000 		.4byte	0xc2
 3189 064f 00       		.byte	0
 3190 0650 15       		.uleb128 0x15
 3191 0651 04       		.byte	0x4
 3192 0652 18050000 		.4byte	0x518
 3193 0656 1F       		.uleb128 0x1f
 3194 0657 FF060000 		.4byte	.LASF93
 3195 065b 01       		.byte	0x1
 3196 065c EA06     		.2byte	0x6ea
 3197 065e 01       		.byte	0x1
 3198 065f 97000000 		.4byte	0x97
 3199 0663 48000000 		.4byte	.LFB89
 3200 0667 58000000 		.4byte	.LFE89
 3201 066b 02       		.byte	0x2
 3202 066c 7D       		.byte	0x7d
ARM GAS  /tmp/ccM6Uqrc.s 			page 99


 3203 066d 00       		.sleb128 0
 3204 066e 01       		.byte	0x1
 3205 066f 94060000 		.4byte	0x694
 3206 0673 17       		.uleb128 0x17
 3207 0674 DC060000 		.4byte	.LASF94
 3208 0678 01       		.byte	0x1
 3209 0679 EA06     		.2byte	0x6ea
 3210 067b 97000000 		.4byte	0x97
 3211 067f EC000000 		.4byte	.LLST11
 3212 0683 20       		.uleb128 0x20
 3213 0684 746D7000 		.ascii	"tmp\000"
 3214 0688 01       		.byte	0x1
 3215 0689 EC06     		.2byte	0x6ec
 3216 068b C2000000 		.4byte	0xc2
 3217 068f 0D010000 		.4byte	.LLST12
 3218 0693 00       		.byte	0
 3219 0694 1F       		.uleb128 0x1f
 3220 0695 BE060000 		.4byte	.LASF95
 3221 0699 01       		.byte	0x1
 3222 069a D806     		.2byte	0x6d8
 3223 069c 01       		.byte	0x1
 3224 069d 97000000 		.4byte	0x97
 3225 06a1 32000000 		.4byte	.LFB88
 3226 06a5 48000000 		.4byte	.LFE88
 3227 06a9 02       		.byte	0x2
 3228 06aa 7D       		.byte	0x7d
 3229 06ab 00       		.sleb128 0
 3230 06ac 01       		.byte	0x1
 3231 06ad D2060000 		.4byte	0x6d2
 3232 06b1 17       		.uleb128 0x17
 3233 06b2 DC060000 		.4byte	.LASF94
 3234 06b6 01       		.byte	0x1
 3235 06b7 D806     		.2byte	0x6d8
 3236 06b9 97000000 		.4byte	0x97
 3237 06bd 3E010000 		.4byte	.LLST9
 3238 06c1 19       		.uleb128 0x19
 3239 06c2 30050000 		.4byte	.LASF96
 3240 06c6 01       		.byte	0x1
 3241 06c7 DA06     		.2byte	0x6da
 3242 06c9 C2000000 		.4byte	0xc2
 3243 06cd 67010000 		.4byte	.LLST10
 3244 06d1 00       		.byte	0
 3245 06d2 16       		.uleb128 0x16
 3246 06d3 D7020000 		.4byte	.LASF97
 3247 06d7 01       		.byte	0x1
 3248 06d8 BF06     		.2byte	0x6bf
 3249 06da 01       		.byte	0x1
 3250 06db 6F030000 		.4byte	0x36f
 3251 06df F4000000 		.4byte	.LFB87
 3252 06e3 24010000 		.4byte	.LFE87
 3253 06e7 86010000 		.4byte	.LLST21
 3254 06eb 01       		.byte	0x1
 3255 06ec 23070000 		.4byte	0x723
 3256 06f0 17       		.uleb128 0x17
 3257 06f1 B2060000 		.4byte	.LASF88
 3258 06f5 01       		.byte	0x1
 3259 06f6 BF06     		.2byte	0x6bf
ARM GAS  /tmp/ccM6Uqrc.s 			page 100


 3260 06f8 50060000 		.4byte	0x650
 3261 06fc A6010000 		.4byte	.LLST22
 3262 0700 19       		.uleb128 0x19
 3263 0701 13050000 		.4byte	.LASF98
 3264 0705 01       		.byte	0x1
 3265 0706 C106     		.2byte	0x6c1
 3266 0708 C2000000 		.4byte	0xc2
 3267 070c C4010000 		.4byte	.LLST23
 3268 0710 21       		.uleb128 0x21
 3269 0711 06010000 		.4byte	.LVL37
 3270 0715 89130000 		.4byte	0x1389
 3271 0719 21       		.uleb128 0x21
 3272 071a 18010000 		.4byte	.LVL40
 3273 071e 89130000 		.4byte	0x1389
 3274 0722 00       		.byte	0
 3275 0723 16       		.uleb128 0x16
 3276 0724 30010000 		.4byte	.LASF99
 3277 0728 01       		.byte	0x1
 3278 0729 A406     		.2byte	0x6a4
 3279 072b 01       		.byte	0x1
 3280 072c 6F030000 		.4byte	0x36f
 3281 0730 C6000000 		.4byte	.LFB86
 3282 0734 F4000000 		.4byte	.LFE86
 3283 0738 E3010000 		.4byte	.LLST18
 3284 073c 01       		.byte	0x1
 3285 073d 74070000 		.4byte	0x774
 3286 0741 17       		.uleb128 0x17
 3287 0742 B2060000 		.4byte	.LASF88
 3288 0746 01       		.byte	0x1
 3289 0747 A406     		.2byte	0x6a4
 3290 0749 50060000 		.4byte	0x650
 3291 074d 03020000 		.4byte	.LLST19
 3292 0751 19       		.uleb128 0x19
 3293 0752 13050000 		.4byte	.LASF98
 3294 0756 01       		.byte	0x1
 3295 0757 A606     		.2byte	0x6a6
 3296 0759 C2000000 		.4byte	0xc2
 3297 075d 21020000 		.4byte	.LLST20
 3298 0761 21       		.uleb128 0x21
 3299 0762 CE000000 		.4byte	.LVL32
 3300 0766 89130000 		.4byte	0x1389
 3301 076a 21       		.uleb128 0x21
 3302 076b E8000000 		.4byte	.LVL35
 3303 076f 89130000 		.4byte	0x1389
 3304 0773 00       		.byte	0
 3305 0774 1A       		.uleb128 0x1a
 3306 0775 17040000 		.4byte	.LASF101
 3307 0779 01       		.byte	0x1
 3308 077a 8406     		.2byte	0x684
 3309 077c 01       		.byte	0x1
 3310 077d 6F030000 		.4byte	0x36f
 3311 0781 01       		.byte	0x1
 3312 0782 AB070000 		.4byte	0x7ab
 3313 0786 1B       		.uleb128 0x1b
 3314 0787 B2060000 		.4byte	.LASF88
 3315 078b 01       		.byte	0x1
 3316 078c 8406     		.2byte	0x684
ARM GAS  /tmp/ccM6Uqrc.s 			page 101


 3317 078e 50060000 		.4byte	0x650
 3318 0792 1B       		.uleb128 0x1b
 3319 0793 76060000 		.4byte	.LASF102
 3320 0797 01       		.byte	0x1
 3321 0798 8406     		.2byte	0x684
 3322 079a C2000000 		.4byte	0xc2
 3323 079e 1D       		.uleb128 0x1d
 3324 079f B7060000 		.4byte	.LASF103
 3325 07a3 01       		.byte	0x1
 3326 07a4 8606     		.2byte	0x686
 3327 07a6 6F030000 		.4byte	0x36f
 3328 07aa 00       		.byte	0
 3329 07ab 1F       		.uleb128 0x1f
 3330 07ac EA060000 		.4byte	.LASF104
 3331 07b0 01       		.byte	0x1
 3332 07b1 7306     		.2byte	0x673
 3333 07b3 01       		.byte	0x1
 3334 07b4 C2000000 		.4byte	0xc2
 3335 07b8 24000000 		.4byte	.LFB84
 3336 07bc 32000000 		.4byte	.LFE84
 3337 07c0 02       		.byte	0x2
 3338 07c1 7D       		.byte	0x7d
 3339 07c2 00       		.sleb128 0
 3340 07c3 01       		.byte	0x1
 3341 07c4 F9070000 		.4byte	0x7f9
 3342 07c8 17       		.uleb128 0x17
 3343 07c9 B2060000 		.4byte	.LASF88
 3344 07cd 01       		.byte	0x1
 3345 07ce 7306     		.2byte	0x673
 3346 07d0 50060000 		.4byte	0x650
 3347 07d4 40020000 		.4byte	.LLST6
 3348 07d8 19       		.uleb128 0x19
 3349 07d9 72030000 		.4byte	.LASF105
 3350 07dd 01       		.byte	0x1
 3351 07de 7506     		.2byte	0x675
 3352 07e0 A7000000 		.4byte	0xa7
 3353 07e4 61020000 		.4byte	.LLST7
 3354 07e8 20       		.uleb128 0x20
 3355 07e9 6C6F7700 		.ascii	"low\000"
 3356 07ed 01       		.byte	0x1
 3357 07ee 7506     		.2byte	0x675
 3358 07f0 A7000000 		.4byte	0xa7
 3359 07f4 80020000 		.4byte	.LLST8
 3360 07f8 00       		.byte	0
 3361 07f9 1A       		.uleb128 0x1a
 3362 07fa 26020000 		.4byte	.LASF106
 3363 07fe 01       		.byte	0x1
 3364 07ff 5306     		.2byte	0x653
 3365 0801 01       		.byte	0x1
 3366 0802 6F030000 		.4byte	0x36f
 3367 0806 01       		.byte	0x1
 3368 0807 30080000 		.4byte	0x830
 3369 080b 1B       		.uleb128 0x1b
 3370 080c B2060000 		.4byte	.LASF88
 3371 0810 01       		.byte	0x1
 3372 0811 5306     		.2byte	0x653
 3373 0813 50060000 		.4byte	0x650
ARM GAS  /tmp/ccM6Uqrc.s 			page 102


 3374 0817 1B       		.uleb128 0x1b
 3375 0818 87040000 		.4byte	.LASF107
 3376 081c 01       		.byte	0x1
 3377 081d 5306     		.2byte	0x653
 3378 081f C2000000 		.4byte	0xc2
 3379 0823 1D       		.uleb128 0x1d
 3380 0824 B7060000 		.4byte	.LASF103
 3381 0828 01       		.byte	0x1
 3382 0829 5506     		.2byte	0x655
 3383 082b 6F030000 		.4byte	0x36f
 3384 082f 00       		.byte	0
 3385 0830 16       		.uleb128 0x16
 3386 0831 B1040000 		.4byte	.LASF108
 3387 0835 01       		.byte	0x1
 3388 0836 3306     		.2byte	0x633
 3389 0838 01       		.byte	0x1
 3390 0839 C2000000 		.4byte	0xc2
 3391 083d 00000000 		.4byte	.LFB82
 3392 0841 24000000 		.4byte	.LFE82
 3393 0845 9F020000 		.4byte	.LLST0
 3394 0849 01       		.byte	0x1
 3395 084a 9F080000 		.4byte	0x89f
 3396 084e 17       		.uleb128 0x17
 3397 084f B2060000 		.4byte	.LASF88
 3398 0853 01       		.byte	0x1
 3399 0854 3306     		.2byte	0x633
 3400 0856 50060000 		.4byte	0x650
 3401 085a BF020000 		.4byte	.LLST1
 3402 085e 19       		.uleb128 0x19
 3403 085f 72030000 		.4byte	.LASF105
 3404 0863 01       		.byte	0x1
 3405 0864 3506     		.2byte	0x635
 3406 0866 A7000000 		.4byte	0xa7
 3407 086a E0020000 		.4byte	.LLST2
 3408 086e 19       		.uleb128 0x19
 3409 086f 78030000 		.4byte	.LASF109
 3410 0873 01       		.byte	0x1
 3411 0874 3506     		.2byte	0x635
 3412 0876 A7000000 		.4byte	0xa7
 3413 087a FF020000 		.4byte	.LLST3
 3414 087e 20       		.uleb128 0x20
 3415 087f 6C6F7700 		.ascii	"low\000"
 3416 0883 01       		.byte	0x1
 3417 0884 3506     		.2byte	0x635
 3418 0886 A7000000 		.4byte	0xa7
 3419 088a 1E030000 		.4byte	.LLST4
 3420 088e 19       		.uleb128 0x19
 3421 088f 00000000 		.4byte	.LASF110
 3422 0893 01       		.byte	0x1
 3423 0894 3606     		.2byte	0x636
 3424 0896 C2000000 		.4byte	0xc2
 3425 089a 3D030000 		.4byte	.LLST5
 3426 089e 00       		.byte	0
 3427 089f 22       		.uleb128 0x22
 3428 08a0 01       		.byte	0x1
 3429 08a1 13070000 		.4byte	.LASF111
 3430 08a5 01       		.byte	0x1
ARM GAS  /tmp/ccM6Uqrc.s 			page 103


 3431 08a6 0406     		.2byte	0x604
 3432 08a8 01       		.byte	0x1
 3433 08a9 6F030000 		.4byte	0x36f
 3434 08ad 66070000 		.4byte	.LFB81
 3435 08b1 9C070000 		.4byte	.LFE81
 3436 08b5 67030000 		.4byte	.LLST94
 3437 08b9 01       		.byte	0x1
 3438 08ba F1080000 		.4byte	0x8f1
 3439 08be 17       		.uleb128 0x17
 3440 08bf B2060000 		.4byte	.LASF88
 3441 08c3 01       		.byte	0x1
 3442 08c4 0406     		.2byte	0x604
 3443 08c6 50060000 		.4byte	0x650
 3444 08ca 87030000 		.4byte	.LLST95
 3445 08ce 19       		.uleb128 0x19
 3446 08cf 13050000 		.4byte	.LASF98
 3447 08d3 01       		.byte	0x1
 3448 08d4 0606     		.2byte	0x606
 3449 08d6 C2000000 		.4byte	0xc2
 3450 08da BB030000 		.4byte	.LLST96
 3451 08de 21       		.uleb128 0x21
 3452 08df 7A070000 		.4byte	.LVL219
 3453 08e3 89130000 		.4byte	0x1389
 3454 08e7 21       		.uleb128 0x21
 3455 08e8 8C070000 		.4byte	.LVL222
 3456 08ec 89130000 		.4byte	0x1389
 3457 08f0 00       		.byte	0
 3458 08f1 23       		.uleb128 0x23
 3459 08f2 01       		.byte	0x1
 3460 08f3 B8000000 		.4byte	.LASF112
 3461 08f7 01       		.byte	0x1
 3462 08f8 E305     		.2byte	0x5e3
 3463 08fa 01       		.byte	0x1
 3464 08fb 37040000 		.4byte	0x437
 3465 08ff 62070000 		.4byte	.LFB80
 3466 0903 66070000 		.4byte	.LFE80
 3467 0907 02       		.byte	0x2
 3468 0908 7D       		.byte	0x7d
 3469 0909 00       		.sleb128 0
 3470 090a 01       		.byte	0x1
 3471 090b 20090000 		.4byte	0x920
 3472 090f 17       		.uleb128 0x17
 3473 0910 B2060000 		.4byte	.LASF88
 3474 0914 01       		.byte	0x1
 3475 0915 E305     		.2byte	0x5e3
 3476 0917 50060000 		.4byte	0x650
 3477 091b E6030000 		.4byte	.LLST93
 3478 091f 00       		.byte	0
 3479 0920 22       		.uleb128 0x22
 3480 0921 01       		.byte	0x1
 3481 0922 FB000000 		.4byte	.LASF113
 3482 0926 01       		.byte	0x1
 3483 0927 AC05     		.2byte	0x5ac
 3484 0929 01       		.byte	0x1
 3485 092a 6F030000 		.4byte	0x36f
 3486 092e 24070000 		.4byte	.LFB79
 3487 0932 62070000 		.4byte	.LFE79
ARM GAS  /tmp/ccM6Uqrc.s 			page 104


 3488 0936 07040000 		.4byte	.LLST89
 3489 093a 01       		.byte	0x1
 3490 093b 82090000 		.4byte	0x982
 3491 093f 17       		.uleb128 0x17
 3492 0940 B2060000 		.4byte	.LASF88
 3493 0944 01       		.byte	0x1
 3494 0945 AC05     		.2byte	0x5ac
 3495 0947 50060000 		.4byte	0x650
 3496 094b 27040000 		.4byte	.LLST90
 3497 094f 17       		.uleb128 0x17
 3498 0950 50020000 		.4byte	.LASF114
 3499 0954 01       		.byte	0x1
 3500 0955 AC05     		.2byte	0x5ac
 3501 0957 C2000000 		.4byte	0xc2
 3502 095b 45040000 		.4byte	.LLST91
 3503 095f 19       		.uleb128 0x19
 3504 0960 13050000 		.4byte	.LASF98
 3505 0964 01       		.byte	0x1
 3506 0965 AE05     		.2byte	0x5ae
 3507 0967 C2000000 		.4byte	0xc2
 3508 096b 63040000 		.4byte	.LLST92
 3509 096f 21       		.uleb128 0x21
 3510 0970 2E070000 		.4byte	.LVL210
 3511 0974 89130000 		.4byte	0x1389
 3512 0978 21       		.uleb128 0x21
 3513 0979 46070000 		.4byte	.LVL215
 3514 097d 89130000 		.4byte	0x1389
 3515 0981 00       		.byte	0
 3516 0982 24       		.uleb128 0x24
 3517 0983 01       		.byte	0x1
 3518 0984 FA020000 		.4byte	.LASF142
 3519 0988 01       		.byte	0x1
 3520 0989 9C05     		.2byte	0x59c
 3521 098b 01       		.byte	0x1
 3522 098c 01       		.byte	0x1
 3523 098d 9E090000 		.4byte	0x99e
 3524 0991 1B       		.uleb128 0x1b
 3525 0992 B2060000 		.4byte	.LASF88
 3526 0996 01       		.byte	0x1
 3527 0997 9C05     		.2byte	0x59c
 3528 0999 50060000 		.4byte	0x650
 3529 099d 00       		.byte	0
 3530 099e 25       		.uleb128 0x25
 3531 099f 01       		.byte	0x1
 3532 09a0 2A000000 		.4byte	.LASF143
 3533 09a4 01       		.byte	0x1
 3534 09a5 7C05     		.2byte	0x57c
 3535 09a7 01       		.byte	0x1
 3536 09a8 F2060000 		.4byte	.LFB77
 3537 09ac 24070000 		.4byte	.LFE77
 3538 09b0 81040000 		.4byte	.LLST87
 3539 09b4 01       		.byte	0x1
 3540 09b5 DA090000 		.4byte	0x9da
 3541 09b9 17       		.uleb128 0x17
 3542 09ba B2060000 		.4byte	.LASF88
 3543 09be 01       		.byte	0x1
 3544 09bf 7C05     		.2byte	0x57c
ARM GAS  /tmp/ccM6Uqrc.s 			page 105


 3545 09c1 50060000 		.4byte	0x650
 3546 09c5 A1040000 		.4byte	.LLST88
 3547 09c9 26       		.uleb128 0x26
 3548 09ca 08070000 		.4byte	.LVL207
 3549 09ce 82090000 		.4byte	0x982
 3550 09d2 27       		.uleb128 0x27
 3551 09d3 01       		.byte	0x1
 3552 09d4 50       		.byte	0x50
 3553 09d5 02       		.byte	0x2
 3554 09d6 74       		.byte	0x74
 3555 09d7 00       		.sleb128 0
 3556 09d8 00       		.byte	0
 3557 09d9 00       		.byte	0
 3558 09da 22       		.uleb128 0x22
 3559 09db 01       		.byte	0x1
 3560 09dc 7E030000 		.4byte	.LASF115
 3561 09e0 01       		.byte	0x1
 3562 09e1 3605     		.2byte	0x536
 3563 09e3 01       		.byte	0x1
 3564 09e4 6F030000 		.4byte	0x36f
 3565 09e8 82060000 		.4byte	.LFB76
 3566 09ec F0060000 		.4byte	.LFE76
 3567 09f0 CD040000 		.4byte	.LLST84
 3568 09f4 01       		.byte	0x1
 3569 09f5 3E0A0000 		.4byte	0xa3e
 3570 09f9 17       		.uleb128 0x17
 3571 09fa B2060000 		.4byte	.LASF88
 3572 09fe 01       		.byte	0x1
 3573 09ff 3605     		.2byte	0x536
 3574 0a01 50060000 		.4byte	0x650
 3575 0a05 ED040000 		.4byte	.LLST85
 3576 0a09 17       		.uleb128 0x17
 3577 0a0a 9B000000 		.4byte	.LASF54
 3578 0a0e 01       		.byte	0x1
 3579 0a0f 3605     		.2byte	0x536
 3580 0a11 C2000000 		.4byte	0xc2
 3581 0a15 21050000 		.4byte	.LLST86
 3582 0a19 28       		.uleb128 0x28
 3583 0a1a A6060000 		.4byte	.LVL200
 3584 0a1e 23070000 		.4byte	0x723
 3585 0a22 2D0A0000 		.4byte	0xa2d
 3586 0a26 27       		.uleb128 0x27
 3587 0a27 01       		.byte	0x1
 3588 0a28 50       		.byte	0x50
 3589 0a29 02       		.byte	0x2
 3590 0a2a 74       		.byte	0x74
 3591 0a2b 00       		.sleb128 0
 3592 0a2c 00       		.byte	0
 3593 0a2d 26       		.uleb128 0x26
 3594 0a2e DC060000 		.4byte	.LVL202
 3595 0a32 D2060000 		.4byte	0x6d2
 3596 0a36 27       		.uleb128 0x27
 3597 0a37 01       		.byte	0x1
 3598 0a38 50       		.byte	0x50
 3599 0a39 02       		.byte	0x2
 3600 0a3a 74       		.byte	0x74
 3601 0a3b 00       		.sleb128 0
ARM GAS  /tmp/ccM6Uqrc.s 			page 106


 3602 0a3c 00       		.byte	0
 3603 0a3d 00       		.byte	0
 3604 0a3e 22       		.uleb128 0x22
 3605 0a3f 01       		.byte	0x1
 3606 0a40 61030000 		.4byte	.LASF116
 3607 0a44 01       		.byte	0x1
 3608 0a45 0905     		.2byte	0x509
 3609 0a47 01       		.byte	0x1
 3610 0a48 6F030000 		.4byte	0x36f
 3611 0a4c 28060000 		.4byte	.LFB75
 3612 0a50 82060000 		.4byte	.LFE75
 3613 0a54 4D050000 		.4byte	.LLST79
 3614 0a58 01       		.byte	0x1
 3615 0a59 EE0A0000 		.4byte	0xaee
 3616 0a5d 17       		.uleb128 0x17
 3617 0a5e B2060000 		.4byte	.LASF88
 3618 0a62 01       		.byte	0x1
 3619 0a63 0905     		.2byte	0x509
 3620 0a65 50060000 		.4byte	0x650
 3621 0a69 6D050000 		.4byte	.LLST80
 3622 0a6d 18       		.uleb128 0x18
 3623 0a6e 9E060000 		.4byte	.LASF117
 3624 0a72 01       		.byte	0x1
 3625 0a73 0905     		.2byte	0x509
 3626 0a75 EE0A0000 		.4byte	0xaee
 3627 0a79 01       		.byte	0x1
 3628 0a7a 51       		.byte	0x51
 3629 0a7b 17       		.uleb128 0x17
 3630 0a7c 9B000000 		.4byte	.LASF54
 3631 0a80 01       		.byte	0x1
 3632 0a81 0905     		.2byte	0x509
 3633 0a83 C2000000 		.4byte	0xc2
 3634 0a87 A7050000 		.4byte	.LLST81
 3635 0a8b 17       		.uleb128 0x17
 3636 0a8c 43060000 		.4byte	.LASF118
 3637 0a90 01       		.byte	0x1
 3638 0a91 0905     		.2byte	0x509
 3639 0a93 C2000000 		.4byte	0xc2
 3640 0a97 C8050000 		.4byte	.LLST82
 3641 0a9b 19       		.uleb128 0x19
 3642 0a9c 48010000 		.4byte	.LASF119
 3643 0aa0 01       		.byte	0x1
 3644 0aa1 0B05     		.2byte	0x50b
 3645 0aa3 C2000000 		.4byte	0xc2
 3646 0aa7 E6050000 		.4byte	.LLST83
 3647 0aab 28       		.uleb128 0x28
 3648 0aac 34060000 		.4byte	.LVL192
 3649 0ab0 AB070000 		.4byte	0x7ab
 3650 0ab4 C00A0000 		.4byte	0xac0
 3651 0ab8 27       		.uleb128 0x27
 3652 0ab9 01       		.byte	0x1
 3653 0aba 50       		.byte	0x50
 3654 0abb 03       		.byte	0x3
 3655 0abc F3       		.byte	0xf3
 3656 0abd 01       		.uleb128 0x1
 3657 0abe 50       		.byte	0x50
 3658 0abf 00       		.byte	0
ARM GAS  /tmp/ccM6Uqrc.s 			page 107


 3659 0ac0 21       		.uleb128 0x21
 3660 0ac1 68060000 		.4byte	.LVL194
 3661 0ac5 94060000 		.4byte	0x694
 3662 0ac9 28       		.uleb128 0x28
 3663 0aca 70060000 		.4byte	.LVL195
 3664 0ace 94060000 		.4byte	0x694
 3665 0ad2 DD0A0000 		.4byte	0xadd
 3666 0ad6 27       		.uleb128 0x27
 3667 0ad7 01       		.byte	0x1
 3668 0ad8 50       		.byte	0x50
 3669 0ad9 02       		.byte	0x2
 3670 0ada 75       		.byte	0x75
 3671 0adb 00       		.sleb128 0
 3672 0adc 00       		.byte	0
 3673 0add 26       		.uleb128 0x26
 3674 0ade 78060000 		.4byte	.LVL196
 3675 0ae2 94060000 		.4byte	0x694
 3676 0ae6 27       		.uleb128 0x27
 3677 0ae7 01       		.byte	0x1
 3678 0ae8 50       		.byte	0x50
 3679 0ae9 02       		.byte	0x2
 3680 0aea 74       		.byte	0x74
 3681 0aeb 00       		.sleb128 0
 3682 0aec 00       		.byte	0
 3683 0aed 00       		.byte	0
 3684 0aee 15       		.uleb128 0x15
 3685 0aef 04       		.byte	0x4
 3686 0af0 01040000 		.4byte	0x401
 3687 0af4 22       		.uleb128 0x22
 3688 0af5 01       		.byte	0x1
 3689 0af6 42000000 		.4byte	.LASF120
 3690 0afa 01       		.byte	0x1
 3691 0afb A004     		.2byte	0x4a0
 3692 0afd 01       		.byte	0x1
 3693 0afe 6F030000 		.4byte	0x36f
 3694 0b02 48050000 		.4byte	.LFB74
 3695 0b06 28060000 		.4byte	.LFE74
 3696 0b0a 11060000 		.4byte	.LLST73
 3697 0b0e 01       		.byte	0x1
 3698 0b0f CE0B0000 		.4byte	0xbce
 3699 0b13 17       		.uleb128 0x17
 3700 0b14 B2060000 		.4byte	.LASF88
 3701 0b18 01       		.byte	0x1
 3702 0b19 A004     		.2byte	0x4a0
 3703 0b1b 50060000 		.4byte	0x650
 3704 0b1f 49060000 		.4byte	.LLST74
 3705 0b23 17       		.uleb128 0x17
 3706 0b24 9E060000 		.4byte	.LASF117
 3707 0b28 01       		.byte	0x1
 3708 0b29 A004     		.2byte	0x4a0
 3709 0b2b EE0A0000 		.4byte	0xaee
 3710 0b2f 93060000 		.4byte	.LLST75
 3711 0b33 17       		.uleb128 0x17
 3712 0b34 43060000 		.4byte	.LASF118
 3713 0b38 01       		.byte	0x1
 3714 0b39 A004     		.2byte	0x4a0
 3715 0b3b C2000000 		.4byte	0xc2
ARM GAS  /tmp/ccM6Uqrc.s 			page 108


 3716 0b3f E3060000 		.4byte	.LLST76
 3717 0b43 19       		.uleb128 0x19
 3718 0b44 48010000 		.4byte	.LASF119
 3719 0b48 01       		.byte	0x1
 3720 0b49 A204     		.2byte	0x4a2
 3721 0b4b C2000000 		.4byte	0xc2
 3722 0b4f 01070000 		.4byte	.LLST77
 3723 0b53 19       		.uleb128 0x19
 3724 0b54 A2050000 		.4byte	.LASF121
 3725 0b58 01       		.byte	0x1
 3726 0b59 A204     		.2byte	0x4a2
 3727 0b5b C2000000 		.4byte	0xc2
 3728 0b5f 5A070000 		.4byte	.LLST78
 3729 0b63 29       		.uleb128 0x29
 3730 0b64 70060000 		.4byte	.LASF122
 3731 0b68 01       		.byte	0x1
 3732 0b69 A304     		.2byte	0x4a3
 3733 0b6b D1030000 		.4byte	0x3d1
 3734 0b6f 02       		.byte	0x2
 3735 0b70 91       		.byte	0x91
 3736 0b71 5C       		.sleb128 -36
 3737 0b72 28       		.uleb128 0x28
 3738 0b73 80050000 		.4byte	.LVL175
 3739 0b77 4F0E0000 		.4byte	0xe4f
 3740 0b7b 8C0B0000 		.4byte	0xb8c
 3741 0b7f 27       		.uleb128 0x27
 3742 0b80 01       		.byte	0x1
 3743 0b81 50       		.byte	0x50
 3744 0b82 02       		.byte	0x2
 3745 0b83 74       		.byte	0x74
 3746 0b84 00       		.sleb128 0
 3747 0b85 27       		.uleb128 0x27
 3748 0b86 01       		.byte	0x1
 3749 0b87 51       		.byte	0x51
 3750 0b88 02       		.byte	0x2
 3751 0b89 91       		.byte	0x91
 3752 0b8a 5C       		.sleb128 -36
 3753 0b8b 00       		.byte	0
 3754 0b8c 28       		.uleb128 0x28
 3755 0b8d CC050000 		.4byte	.LVL181
 3756 0b91 74070000 		.4byte	0x774
 3757 0b95 A00B0000 		.4byte	0xba0
 3758 0b99 27       		.uleb128 0x27
 3759 0b9a 01       		.byte	0x1
 3760 0b9b 50       		.byte	0x50
 3761 0b9c 02       		.byte	0x2
 3762 0b9d 74       		.byte	0x74
 3763 0b9e 00       		.sleb128 0
 3764 0b9f 00       		.byte	0
 3765 0ba0 21       		.uleb128 0x21
 3766 0ba1 DC050000 		.4byte	.LVL183
 3767 0ba5 56060000 		.4byte	0x656
 3768 0ba9 28       		.uleb128 0x28
 3769 0baa E4050000 		.4byte	.LVL184
 3770 0bae 56060000 		.4byte	0x656
 3771 0bb2 BD0B0000 		.4byte	0xbbd
 3772 0bb6 27       		.uleb128 0x27
ARM GAS  /tmp/ccM6Uqrc.s 			page 109


 3773 0bb7 01       		.byte	0x1
 3774 0bb8 50       		.byte	0x50
 3775 0bb9 02       		.byte	0x2
 3776 0bba 77       		.byte	0x77
 3777 0bbb 00       		.sleb128 0
 3778 0bbc 00       		.byte	0
 3779 0bbd 26       		.uleb128 0x26
 3780 0bbe F0050000 		.4byte	.LVL185
 3781 0bc2 56060000 		.4byte	0x656
 3782 0bc6 27       		.uleb128 0x27
 3783 0bc7 01       		.byte	0x1
 3784 0bc8 50       		.byte	0x50
 3785 0bc9 02       		.byte	0x2
 3786 0bca 78       		.byte	0x78
 3787 0bcb 00       		.sleb128 0
 3788 0bcc 00       		.byte	0
 3789 0bcd 00       		.byte	0
 3790 0bce 22       		.uleb128 0x22
 3791 0bcf 01       		.byte	0x1
 3792 0bd0 EB010000 		.4byte	.LASF123
 3793 0bd4 01       		.byte	0x1
 3794 0bd5 4404     		.2byte	0x444
 3795 0bd7 01       		.byte	0x1
 3796 0bd8 6F030000 		.4byte	0x36f
 3797 0bdc 90040000 		.4byte	.LFB73
 3798 0be0 48050000 		.4byte	.LFE73
 3799 0be4 6D070000 		.4byte	.LLST67
 3800 0be8 01       		.byte	0x1
 3801 0be9 A80C0000 		.4byte	0xca8
 3802 0bed 17       		.uleb128 0x17
 3803 0bee B2060000 		.4byte	.LASF88
 3804 0bf2 01       		.byte	0x1
 3805 0bf3 4404     		.2byte	0x444
 3806 0bf5 50060000 		.4byte	0x650
 3807 0bf9 A5070000 		.4byte	.LLST68
 3808 0bfd 17       		.uleb128 0x17
 3809 0bfe 9E060000 		.4byte	.LASF117
 3810 0c02 01       		.byte	0x1
 3811 0c03 4404     		.2byte	0x444
 3812 0c05 EE0A0000 		.4byte	0xaee
 3813 0c09 EF070000 		.4byte	.LLST69
 3814 0c0d 17       		.uleb128 0x17
 3815 0c0e 43060000 		.4byte	.LASF118
 3816 0c12 01       		.byte	0x1
 3817 0c13 4404     		.2byte	0x444
 3818 0c15 C2000000 		.4byte	0xc2
 3819 0c19 3F080000 		.4byte	.LLST70
 3820 0c1d 19       		.uleb128 0x19
 3821 0c1e 48010000 		.4byte	.LASF119
 3822 0c22 01       		.byte	0x1
 3823 0c23 4604     		.2byte	0x446
 3824 0c25 C2000000 		.4byte	0xc2
 3825 0c29 5D080000 		.4byte	.LLST71
 3826 0c2d 19       		.uleb128 0x19
 3827 0c2e A2050000 		.4byte	.LASF121
 3828 0c32 01       		.byte	0x1
 3829 0c33 4604     		.2byte	0x446
ARM GAS  /tmp/ccM6Uqrc.s 			page 110


 3830 0c35 C2000000 		.4byte	0xc2
 3831 0c39 B6080000 		.4byte	.LLST72
 3832 0c3d 29       		.uleb128 0x29
 3833 0c3e 70060000 		.4byte	.LASF122
 3834 0c42 01       		.byte	0x1
 3835 0c43 4704     		.2byte	0x447
 3836 0c45 D1030000 		.4byte	0x3d1
 3837 0c49 02       		.byte	0x2
 3838 0c4a 91       		.byte	0x91
 3839 0c4b 5C       		.sleb128 -36
 3840 0c4c 28       		.uleb128 0x28
 3841 0c4d C8040000 		.4byte	.LVL155
 3842 0c51 4F0E0000 		.4byte	0xe4f
 3843 0c55 660C0000 		.4byte	0xc66
 3844 0c59 27       		.uleb128 0x27
 3845 0c5a 01       		.byte	0x1
 3846 0c5b 50       		.byte	0x50
 3847 0c5c 02       		.byte	0x2
 3848 0c5d 74       		.byte	0x74
 3849 0c5e 00       		.sleb128 0
 3850 0c5f 27       		.uleb128 0x27
 3851 0c60 01       		.byte	0x1
 3852 0c61 51       		.byte	0x51
 3853 0c62 02       		.byte	0x2
 3854 0c63 91       		.byte	0x91
 3855 0c64 5C       		.sleb128 -36
 3856 0c65 00       		.byte	0
 3857 0c66 28       		.uleb128 0x28
 3858 0c67 14050000 		.4byte	.LVL161
 3859 0c6b 74070000 		.4byte	0x774
 3860 0c6f 7A0C0000 		.4byte	0xc7a
 3861 0c73 27       		.uleb128 0x27
 3862 0c74 01       		.byte	0x1
 3863 0c75 50       		.byte	0x50
 3864 0c76 02       		.byte	0x2
 3865 0c77 74       		.byte	0x74
 3866 0c78 00       		.sleb128 0
 3867 0c79 00       		.byte	0
 3868 0c7a 21       		.uleb128 0x21
 3869 0c7b 24050000 		.4byte	.LVL163
 3870 0c7f 56060000 		.4byte	0x656
 3871 0c83 28       		.uleb128 0x28
 3872 0c84 2C050000 		.4byte	.LVL164
 3873 0c88 56060000 		.4byte	0x656
 3874 0c8c 970C0000 		.4byte	0xc97
 3875 0c90 27       		.uleb128 0x27
 3876 0c91 01       		.byte	0x1
 3877 0c92 50       		.byte	0x50
 3878 0c93 02       		.byte	0x2
 3879 0c94 77       		.byte	0x77
 3880 0c95 00       		.sleb128 0
 3881 0c96 00       		.byte	0
 3882 0c97 26       		.uleb128 0x26
 3883 0c98 38050000 		.4byte	.LVL165
 3884 0c9c 56060000 		.4byte	0x656
 3885 0ca0 27       		.uleb128 0x27
 3886 0ca1 01       		.byte	0x1
ARM GAS  /tmp/ccM6Uqrc.s 			page 111


 3887 0ca2 50       		.byte	0x50
 3888 0ca3 02       		.byte	0x2
 3889 0ca4 78       		.byte	0x78
 3890 0ca5 00       		.sleb128 0
 3891 0ca6 00       		.byte	0
 3892 0ca7 00       		.byte	0
 3893 0ca8 22       		.uleb128 0x22
 3894 0ca9 01       		.byte	0x1
 3895 0caa 8E060000 		.4byte	.LASF124
 3896 0cae 01       		.byte	0x1
 3897 0caf 0304     		.2byte	0x403
 3898 0cb1 01       		.byte	0x1
 3899 0cb2 6F030000 		.4byte	0x36f
 3900 0cb6 38040000 		.4byte	.LFB72
 3901 0cba 90040000 		.4byte	.LFE72
 3902 0cbe C9080000 		.4byte	.LLST63
 3903 0cc2 01       		.byte	0x1
 3904 0cc3 480D0000 		.4byte	0xd48
 3905 0cc7 17       		.uleb128 0x17
 3906 0cc8 B2060000 		.4byte	.LASF88
 3907 0ccc 01       		.byte	0x1
 3908 0ccd 0304     		.2byte	0x403
 3909 0ccf 50060000 		.4byte	0x650
 3910 0cd3 01090000 		.4byte	.LLST64
 3911 0cd7 17       		.uleb128 0x17
 3912 0cd8 CE030000 		.4byte	.LASF125
 3913 0cdc 01       		.byte	0x1
 3914 0cdd 0304     		.2byte	0x403
 3915 0cdf 480D0000 		.4byte	0xd48
 3916 0ce3 35090000 		.4byte	.LLST65
 3917 0ce7 17       		.uleb128 0x17
 3918 0ce8 43060000 		.4byte	.LASF118
 3919 0cec 01       		.byte	0x1
 3920 0ced 0304     		.2byte	0x403
 3921 0cef C2000000 		.4byte	0xc2
 3922 0cf3 69090000 		.4byte	.LLST66
 3923 0cf7 29       		.uleb128 0x29
 3924 0cf8 70060000 		.4byte	.LASF122
 3925 0cfc 01       		.byte	0x1
 3926 0cfd 0504     		.2byte	0x405
 3927 0cff D1030000 		.4byte	0x3d1
 3928 0d03 02       		.byte	0x2
 3929 0d04 91       		.byte	0x91
 3930 0d05 64       		.sleb128 -28
 3931 0d06 28       		.uleb128 0x28
 3932 0d07 5E040000 		.4byte	.LVL146
 3933 0d0b 4F0E0000 		.4byte	0xe4f
 3934 0d0f 1A0D0000 		.4byte	0xd1a
 3935 0d13 27       		.uleb128 0x27
 3936 0d14 01       		.byte	0x1
 3937 0d15 51       		.byte	0x51
 3938 0d16 02       		.byte	0x2
 3939 0d17 91       		.byte	0x91
 3940 0d18 64       		.sleb128 -28
 3941 0d19 00       		.byte	0
 3942 0d1a 21       		.uleb128 0x21
 3943 0d1b 7C040000 		.4byte	.LVL147
ARM GAS  /tmp/ccM6Uqrc.s 			page 112


 3944 0d1f 94060000 		.4byte	0x694
 3945 0d23 28       		.uleb128 0x28
 3946 0d24 84040000 		.4byte	.LVL148
 3947 0d28 94060000 		.4byte	0x694
 3948 0d2c 370D0000 		.4byte	0xd37
 3949 0d30 27       		.uleb128 0x27
 3950 0d31 01       		.byte	0x1
 3951 0d32 50       		.byte	0x50
 3952 0d33 02       		.byte	0x2
 3953 0d34 76       		.byte	0x76
 3954 0d35 00       		.sleb128 0
 3955 0d36 00       		.byte	0
 3956 0d37 26       		.uleb128 0x26
 3957 0d38 8C040000 		.4byte	.LVL149
 3958 0d3c 94060000 		.4byte	0x694
 3959 0d40 27       		.uleb128 0x27
 3960 0d41 01       		.byte	0x1
 3961 0d42 50       		.byte	0x50
 3962 0d43 02       		.byte	0x2
 3963 0d44 71       		.byte	0x71
 3964 0d45 00       		.sleb128 0
 3965 0d46 00       		.byte	0
 3966 0d47 00       		.byte	0
 3967 0d48 15       		.uleb128 0x15
 3968 0d49 04       		.byte	0x4
 3969 0d4a B8040000 		.4byte	0x4b8
 3970 0d4e 22       		.uleb128 0x22
 3971 0d4f 01       		.byte	0x1
 3972 0d50 A7020000 		.4byte	.LASF126
 3973 0d54 01       		.byte	0x1
 3974 0d55 9103     		.2byte	0x391
 3975 0d57 01       		.byte	0x1
 3976 0d58 6F030000 		.4byte	0x36f
 3977 0d5c 88030000 		.4byte	.LFB71
 3978 0d60 38040000 		.4byte	.LFE71
 3979 0d64 87090000 		.4byte	.LLST56
 3980 0d68 01       		.byte	0x1
 3981 0d69 4F0E0000 		.4byte	0xe4f
 3982 0d6d 17       		.uleb128 0x17
 3983 0d6e B2060000 		.4byte	.LASF88
 3984 0d72 01       		.byte	0x1
 3985 0d73 9103     		.2byte	0x391
 3986 0d75 50060000 		.4byte	0x650
 3987 0d79 A7090000 		.4byte	.LLST57
 3988 0d7d 17       		.uleb128 0x17
 3989 0d7e CE030000 		.4byte	.LASF125
 3990 0d82 01       		.byte	0x1
 3991 0d83 9103     		.2byte	0x391
 3992 0d85 480D0000 		.4byte	0xd48
 3993 0d89 D3090000 		.4byte	.LLST58
 3994 0d8d 17       		.uleb128 0x17
 3995 0d8e 43060000 		.4byte	.LASF118
 3996 0d92 01       		.byte	0x1
 3997 0d93 9103     		.2byte	0x391
 3998 0d95 C2000000 		.4byte	0xc2
 3999 0d99 180A0000 		.4byte	.LLST59
 4000 0d9d 19       		.uleb128 0x19
ARM GAS  /tmp/ccM6Uqrc.s 			page 113


 4001 0d9e A2050000 		.4byte	.LASF121
 4002 0da2 01       		.byte	0x1
 4003 0da3 9303     		.2byte	0x393
 4004 0da5 C2000000 		.4byte	0xc2
 4005 0da9 520A0000 		.4byte	.LLST60
 4006 0dad 19       		.uleb128 0x19
 4007 0dae 48010000 		.4byte	.LASF119
 4008 0db2 01       		.byte	0x1
 4009 0db3 9303     		.2byte	0x393
 4010 0db5 C2000000 		.4byte	0xc2
 4011 0db9 930A0000 		.4byte	.LLST61
 4012 0dbd 19       		.uleb128 0x19
 4013 0dbe 0D050000 		.4byte	.LASF127
 4014 0dc2 01       		.byte	0x1
 4015 0dc3 9303     		.2byte	0x393
 4016 0dc5 C2000000 		.4byte	0xc2
 4017 0dc9 D80A0000 		.4byte	.LLST62
 4018 0dcd 28       		.uleb128 0x28
 4019 0dce B8030000 		.4byte	.LVL123
 4020 0dd2 6D050000 		.4byte	0x56d
 4021 0dd6 E10D0000 		.4byte	0xde1
 4022 0dda 27       		.uleb128 0x27
 4023 0ddb 01       		.byte	0x1
 4024 0ddc 51       		.byte	0x51
 4025 0ddd 02       		.byte	0x2
 4026 0dde 71       		.byte	0x71
 4027 0ddf 00       		.sleb128 0
 4028 0de0 00       		.byte	0
 4029 0de1 28       		.uleb128 0x28
 4030 0de2 C2030000 		.4byte	.LVL124
 4031 0de6 30080000 		.4byte	0x830
 4032 0dea F50D0000 		.4byte	0xdf5
 4033 0dee 27       		.uleb128 0x27
 4034 0def 01       		.byte	0x1
 4035 0df0 50       		.byte	0x50
 4036 0df1 02       		.byte	0x2
 4037 0df2 74       		.byte	0x74
 4038 0df3 00       		.sleb128 0
 4039 0df4 00       		.byte	0
 4040 0df5 28       		.uleb128 0x28
 4041 0df6 DC030000 		.4byte	.LVL128
 4042 0dfa F9070000 		.4byte	0x7f9
 4043 0dfe 0F0E0000 		.4byte	0xe0f
 4044 0e02 27       		.uleb128 0x27
 4045 0e03 01       		.byte	0x1
 4046 0e04 50       		.byte	0x50
 4047 0e05 02       		.byte	0x2
 4048 0e06 74       		.byte	0x74
 4049 0e07 00       		.sleb128 0
 4050 0e08 27       		.uleb128 0x27
 4051 0e09 01       		.byte	0x1
 4052 0e0a 51       		.byte	0x51
 4053 0e0b 02       		.byte	0x2
 4054 0e0c 75       		.byte	0x75
 4055 0e0d 00       		.sleb128 0
 4056 0e0e 00       		.byte	0
 4057 0e0f 21       		.uleb128 0x21
ARM GAS  /tmp/ccM6Uqrc.s 			page 114


 4058 0e10 F0030000 		.4byte	.LVL131
 4059 0e14 56060000 		.4byte	0x656
 4060 0e18 21       		.uleb128 0x21
 4061 0e19 F8030000 		.4byte	.LVL132
 4062 0e1d 56060000 		.4byte	0x656
 4063 0e21 21       		.uleb128 0x21
 4064 0e22 00040000 		.4byte	.LVL133
 4065 0e26 56060000 		.4byte	0x656
 4066 0e2a 28       		.uleb128 0x28
 4067 0e2b 0A040000 		.4byte	.LVL135
 4068 0e2f AB070000 		.4byte	0x7ab
 4069 0e33 3E0E0000 		.4byte	0xe3e
 4070 0e37 27       		.uleb128 0x27
 4071 0e38 01       		.byte	0x1
 4072 0e39 50       		.byte	0x50
 4073 0e3a 02       		.byte	0x2
 4074 0e3b 74       		.byte	0x74
 4075 0e3c 00       		.sleb128 0
 4076 0e3d 00       		.byte	0
 4077 0e3e 26       		.uleb128 0x26
 4078 0e3f 20040000 		.4byte	.LVL138
 4079 0e43 74070000 		.4byte	0x774
 4080 0e47 27       		.uleb128 0x27
 4081 0e48 01       		.byte	0x1
 4082 0e49 50       		.byte	0x50
 4083 0e4a 02       		.byte	0x2
 4084 0e4b 74       		.byte	0x74
 4085 0e4c 00       		.sleb128 0
 4086 0e4d 00       		.byte	0
 4087 0e4e 00       		.byte	0
 4088 0e4f 2A       		.uleb128 0x2a
 4089 0e50 01       		.byte	0x1
 4090 0e51 EB050000 		.4byte	.LASF144
 4091 0e55 01       		.byte	0x1
 4092 0e56 2203     		.2byte	0x322
 4093 0e58 01       		.byte	0x1
 4094 0e59 6F030000 		.4byte	0x36f
 4095 0e5d 01       		.byte	0x1
 4096 0e5e B70E0000 		.4byte	0xeb7
 4097 0e62 1B       		.uleb128 0x1b
 4098 0e63 B2060000 		.4byte	.LASF88
 4099 0e67 01       		.byte	0x1
 4100 0e68 2203     		.2byte	0x322
 4101 0e6a 50060000 		.4byte	0x650
 4102 0e6e 1B       		.uleb128 0x1b
 4103 0e6f 42010000 		.4byte	.LASF128
 4104 0e73 01       		.byte	0x1
 4105 0e74 2203     		.2byte	0x322
 4106 0e76 B70E0000 		.4byte	0xeb7
 4107 0e7a 1B       		.uleb128 0x1b
 4108 0e7b 43060000 		.4byte	.LASF118
 4109 0e7f 01       		.byte	0x1
 4110 0e80 2203     		.2byte	0x322
 4111 0e82 C2000000 		.4byte	0xc2
 4112 0e86 1D       		.uleb128 0x1d
 4113 0e87 A2050000 		.4byte	.LASF121
 4114 0e8b 01       		.byte	0x1
ARM GAS  /tmp/ccM6Uqrc.s 			page 115


 4115 0e8c 2403     		.2byte	0x324
 4116 0e8e C2000000 		.4byte	0xc2
 4117 0e92 1D       		.uleb128 0x1d
 4118 0e93 48010000 		.4byte	.LASF119
 4119 0e97 01       		.byte	0x1
 4120 0e98 2403     		.2byte	0x324
 4121 0e9a C2000000 		.4byte	0xc2
 4122 0e9e 1D       		.uleb128 0x1d
 4123 0e9f 04060000 		.4byte	.LASF129
 4124 0ea3 01       		.byte	0x1
 4125 0ea4 2403     		.2byte	0x324
 4126 0ea6 C2000000 		.4byte	0xc2
 4127 0eaa 1D       		.uleb128 0x1d
 4128 0eab 0D050000 		.4byte	.LASF127
 4129 0eaf 01       		.byte	0x1
 4130 0eb0 2403     		.2byte	0x324
 4131 0eb2 C2000000 		.4byte	0xc2
 4132 0eb6 00       		.byte	0
 4133 0eb7 15       		.uleb128 0x15
 4134 0eb8 04       		.byte	0x4
 4135 0eb9 D1030000 		.4byte	0x3d1
 4136 0ebd 22       		.uleb128 0x22
 4137 0ebe 01       		.byte	0x1
 4138 0ebf B0010000 		.4byte	.LASF130
 4139 0ec3 01       		.byte	0x1
 4140 0ec4 BF02     		.2byte	0x2bf
 4141 0ec6 01       		.byte	0x1
 4142 0ec7 6F030000 		.4byte	0x36f
 4143 0ecb 78010000 		.4byte	.LFB69
 4144 0ecf 1A020000 		.4byte	.LFE69
 4145 0ed3 0F0B0000 		.4byte	.LLST36
 4146 0ed7 01       		.byte	0x1
 4147 0ed8 9C0F0000 		.4byte	0xf9c
 4148 0edc 17       		.uleb128 0x17
 4149 0edd B2060000 		.4byte	.LASF88
 4150 0ee1 01       		.byte	0x1
 4151 0ee2 BF02     		.2byte	0x2bf
 4152 0ee4 50060000 		.4byte	0x650
 4153 0ee8 2F0B0000 		.4byte	.LLST37
 4154 0eec 17       		.uleb128 0x17
 4155 0eed 42010000 		.4byte	.LASF128
 4156 0ef1 01       		.byte	0x1
 4157 0ef2 BF02     		.2byte	0x2bf
 4158 0ef4 B70E0000 		.4byte	0xeb7
 4159 0ef8 4D0B0000 		.4byte	.LLST38
 4160 0efc 17       		.uleb128 0x17
 4161 0efd 43060000 		.4byte	.LASF118
 4162 0f01 01       		.byte	0x1
 4163 0f02 BF02     		.2byte	0x2bf
 4164 0f04 C2000000 		.4byte	0xc2
 4165 0f08 6E0B0000 		.4byte	.LLST39
 4166 0f0c 19       		.uleb128 0x19
 4167 0f0d A2050000 		.4byte	.LASF121
 4168 0f11 01       		.byte	0x1
 4169 0f12 C102     		.2byte	0x2c1
 4170 0f14 C2000000 		.4byte	0xc2
 4171 0f18 A80B0000 		.4byte	.LLST40
ARM GAS  /tmp/ccM6Uqrc.s 			page 116


 4172 0f1c 19       		.uleb128 0x19
 4173 0f1d 48010000 		.4byte	.LASF119
 4174 0f21 01       		.byte	0x1
 4175 0f22 C102     		.2byte	0x2c1
 4176 0f24 C2000000 		.4byte	0xc2
 4177 0f28 DE0B0000 		.4byte	.LLST41
 4178 0f2c 28       		.uleb128 0x28
 4179 0f2d AC010000 		.4byte	.LVL59
 4180 0f31 F9070000 		.4byte	0x7f9
 4181 0f35 460F0000 		.4byte	0xf46
 4182 0f39 27       		.uleb128 0x27
 4183 0f3a 01       		.byte	0x1
 4184 0f3b 50       		.byte	0x50
 4185 0f3c 02       		.byte	0x2
 4186 0f3d 74       		.byte	0x74
 4187 0f3e 00       		.sleb128 0
 4188 0f3f 27       		.uleb128 0x27
 4189 0f40 01       		.byte	0x1
 4190 0f41 51       		.byte	0x51
 4191 0f42 02       		.byte	0x2
 4192 0f43 75       		.byte	0x75
 4193 0f44 00       		.sleb128 0
 4194 0f45 00       		.byte	0
 4195 0f46 21       		.uleb128 0x21
 4196 0f47 C0010000 		.4byte	.LVL62
 4197 0f4b 56060000 		.4byte	0x656
 4198 0f4f 28       		.uleb128 0x28
 4199 0f50 C8010000 		.4byte	.LVL63
 4200 0f54 56060000 		.4byte	0x656
 4201 0f58 630F0000 		.4byte	0xf63
 4202 0f5c 27       		.uleb128 0x27
 4203 0f5d 01       		.byte	0x1
 4204 0f5e 50       		.byte	0x50
 4205 0f5f 02       		.byte	0x2
 4206 0f60 76       		.byte	0x76
 4207 0f61 00       		.sleb128 0
 4208 0f62 00       		.byte	0
 4209 0f63 28       		.uleb128 0x28
 4210 0f64 DA010000 		.4byte	.LVL64
 4211 0f68 56060000 		.4byte	0x656
 4212 0f6c 770F0000 		.4byte	0xf77
 4213 0f70 27       		.uleb128 0x27
 4214 0f71 01       		.byte	0x1
 4215 0f72 50       		.byte	0x50
 4216 0f73 02       		.byte	0x2
 4217 0f74 71       		.byte	0x71
 4218 0f75 00       		.sleb128 0
 4219 0f76 00       		.byte	0
 4220 0f77 28       		.uleb128 0x28
 4221 0f78 EE010000 		.4byte	.LVL66
 4222 0f7c AB070000 		.4byte	0x7ab
 4223 0f80 8B0F0000 		.4byte	0xf8b
 4224 0f84 27       		.uleb128 0x27
 4225 0f85 01       		.byte	0x1
 4226 0f86 50       		.byte	0x50
 4227 0f87 02       		.byte	0x2
 4228 0f88 74       		.byte	0x74
ARM GAS  /tmp/ccM6Uqrc.s 			page 117


 4229 0f89 00       		.sleb128 0
 4230 0f8a 00       		.byte	0
 4231 0f8b 26       		.uleb128 0x26
 4232 0f8c 04020000 		.4byte	.LVL69
 4233 0f90 74070000 		.4byte	0x774
 4234 0f94 27       		.uleb128 0x27
 4235 0f95 01       		.byte	0x1
 4236 0f96 50       		.byte	0x50
 4237 0f97 02       		.byte	0x2
 4238 0f98 74       		.byte	0x74
 4239 0f99 00       		.sleb128 0
 4240 0f9a 00       		.byte	0
 4241 0f9b 00       		.byte	0
 4242 0f9c 2B       		.uleb128 0x2b
 4243 0f9d 01       		.byte	0x1
 4244 0f9e 14020000 		.4byte	.LASF131
 4245 0fa2 01       		.byte	0x1
 4246 0fa3 9902     		.2byte	0x299
 4247 0fa5 01       		.byte	0x1
 4248 0fa6 B70F0000 		.4byte	0xfb7
 4249 0faa 1B       		.uleb128 0x1b
 4250 0fab B2060000 		.4byte	.LASF88
 4251 0faf 01       		.byte	0x1
 4252 0fb0 9902     		.2byte	0x299
 4253 0fb2 50060000 		.4byte	0x650
 4254 0fb6 00       		.byte	0
 4255 0fb7 2B       		.uleb128 0x2b
 4256 0fb8 01       		.byte	0x1
 4257 0fb9 DB050000 		.4byte	.LASF132
 4258 0fbd 01       		.byte	0x1
 4259 0fbe 8A02     		.2byte	0x28a
 4260 0fc0 01       		.byte	0x1
 4261 0fc1 D20F0000 		.4byte	0xfd2
 4262 0fc5 1B       		.uleb128 0x1b
 4263 0fc6 B2060000 		.4byte	.LASF88
 4264 0fca 01       		.byte	0x1
 4265 0fcb 8A02     		.2byte	0x28a
 4266 0fcd 50060000 		.4byte	0x650
 4267 0fd1 00       		.byte	0
 4268 0fd2 22       		.uleb128 0x22
 4269 0fd3 01       		.byte	0x1
 4270 0fd4 8B020000 		.4byte	.LASF133
 4271 0fd8 01       		.byte	0x1
 4272 0fd9 9B01     		.2byte	0x19b
 4273 0fdb 01       		.byte	0x1
 4274 0fdc 6F030000 		.4byte	0x36f
 4275 0fe0 3C080000 		.4byte	.LFB66
 4276 0fe4 9C080000 		.4byte	.LFE66
 4277 0fe8 230C0000 		.4byte	.LLST100
 4278 0fec 01       		.byte	0x1
 4279 0fed 4E100000 		.4byte	0x104e
 4280 0ff1 17       		.uleb128 0x17
 4281 0ff2 B2060000 		.4byte	.LASF88
 4282 0ff6 01       		.byte	0x1
 4283 0ff7 9B01     		.2byte	0x19b
 4284 0ff9 50060000 		.4byte	0x650
 4285 0ffd 430C0000 		.4byte	.LLST101
ARM GAS  /tmp/ccM6Uqrc.s 			page 118


 4286 1001 28       		.uleb128 0x28
 4287 1002 4A080000 		.4byte	.LVL237
 4288 1006 23070000 		.4byte	0x723
 4289 100a 15100000 		.4byte	0x1015
 4290 100e 27       		.uleb128 0x27
 4291 100f 01       		.byte	0x1
 4292 1010 50       		.byte	0x50
 4293 1011 02       		.byte	0x2
 4294 1012 74       		.byte	0x74
 4295 1013 00       		.sleb128 0
 4296 1014 00       		.byte	0
 4297 1015 28       		.uleb128 0x28
 4298 1016 72080000 		.4byte	.LVL238
 4299 101a D2060000 		.4byte	0x6d2
 4300 101e 29100000 		.4byte	0x1029
 4301 1022 27       		.uleb128 0x27
 4302 1023 01       		.byte	0x1
 4303 1024 50       		.byte	0x50
 4304 1025 02       		.byte	0x2
 4305 1026 74       		.byte	0x74
 4306 1027 00       		.sleb128 0
 4307 1028 00       		.byte	0
 4308 1029 28       		.uleb128 0x28
 4309 102a 84080000 		.4byte	.LVL239
 4310 102e 9F080000 		.4byte	0x89f
 4311 1032 3D100000 		.4byte	0x103d
 4312 1036 27       		.uleb128 0x27
 4313 1037 01       		.byte	0x1
 4314 1038 50       		.byte	0x50
 4315 1039 02       		.byte	0x2
 4316 103a 74       		.byte	0x74
 4317 103b 00       		.sleb128 0
 4318 103c 00       		.byte	0
 4319 103d 26       		.uleb128 0x26
 4320 103e 94080000 		.4byte	.LVL240
 4321 1042 9C0F0000 		.4byte	0xf9c
 4322 1046 27       		.uleb128 0x27
 4323 1047 01       		.byte	0x1
 4324 1048 50       		.byte	0x50
 4325 1049 02       		.byte	0x2
 4326 104a 74       		.byte	0x74
 4327 104b 00       		.sleb128 0
 4328 104c 00       		.byte	0
 4329 104d 00       		.byte	0
 4330 104e 22       		.uleb128 0x22
 4331 104f 01       		.byte	0x1
 4332 1050 7A040000 		.4byte	.LASF134
 4333 1054 01       		.byte	0x1
 4334 1055 1301     		.2byte	0x113
 4335 1057 01       		.byte	0x1
 4336 1058 6F030000 		.4byte	0x36f
 4337 105c 9C070000 		.4byte	.LFB65
 4338 1060 3C080000 		.4byte	.LFE65
 4339 1064 610C0000 		.4byte	.LLST97
 4340 1068 01       		.byte	0x1
 4341 1069 ED100000 		.4byte	0x10ed
 4342 106d 17       		.uleb128 0x17
ARM GAS  /tmp/ccM6Uqrc.s 			page 119


 4343 106e B2060000 		.4byte	.LASF88
 4344 1072 01       		.byte	0x1
 4345 1073 1301     		.2byte	0x113
 4346 1075 50060000 		.4byte	0x650
 4347 1079 810C0000 		.4byte	.LLST98
 4348 107d 19       		.uleb128 0x19
 4349 107e 20000000 		.4byte	.LASF135
 4350 1082 01       		.byte	0x1
 4351 1083 1501     		.2byte	0x115
 4352 1085 C2000000 		.4byte	0xc2
 4353 1089 AD0C0000 		.4byte	.LLST99
 4354 108d 28       		.uleb128 0x28
 4355 108e B0070000 		.4byte	.LVL226
 4356 1092 B70F0000 		.4byte	0xfb7
 4357 1096 A1100000 		.4byte	0x10a1
 4358 109a 27       		.uleb128 0x27
 4359 109b 01       		.byte	0x1
 4360 109c 50       		.byte	0x50
 4361 109d 02       		.byte	0x2
 4362 109e 74       		.byte	0x74
 4363 109f 00       		.sleb128 0
 4364 10a0 00       		.byte	0
 4365 10a1 28       		.uleb128 0x28
 4366 10a2 BA070000 		.4byte	.LVL227
 4367 10a6 9F080000 		.4byte	0x89f
 4368 10aa B5100000 		.4byte	0x10b5
 4369 10ae 27       		.uleb128 0x27
 4370 10af 01       		.byte	0x1
 4371 10b0 50       		.byte	0x50
 4372 10b1 02       		.byte	0x2
 4373 10b2 74       		.byte	0x74
 4374 10b3 00       		.sleb128 0
 4375 10b4 00       		.byte	0
 4376 10b5 28       		.uleb128 0x28
 4377 10b6 CA070000 		.4byte	.LVL230
 4378 10ba 23070000 		.4byte	0x723
 4379 10be C9100000 		.4byte	0x10c9
 4380 10c2 27       		.uleb128 0x27
 4381 10c3 01       		.byte	0x1
 4382 10c4 50       		.byte	0x50
 4383 10c5 02       		.byte	0x2
 4384 10c6 74       		.byte	0x74
 4385 10c7 00       		.sleb128 0
 4386 10c8 00       		.byte	0
 4387 10c9 28       		.uleb128 0x28
 4388 10ca FC070000 		.4byte	.LVL231
 4389 10ce 97130000 		.4byte	0x1397
 4390 10d2 DC100000 		.4byte	0x10dc
 4391 10d6 27       		.uleb128 0x27
 4392 10d7 01       		.byte	0x1
 4393 10d8 50       		.byte	0x50
 4394 10d9 01       		.byte	0x1
 4395 10da 31       		.byte	0x31
 4396 10db 00       		.byte	0
 4397 10dc 26       		.uleb128 0x26
 4398 10dd 22080000 		.4byte	.LVL234
 4399 10e1 D2060000 		.4byte	0x6d2
ARM GAS  /tmp/ccM6Uqrc.s 			page 120


 4400 10e5 27       		.uleb128 0x27
 4401 10e6 01       		.byte	0x1
 4402 10e7 50       		.byte	0x50
 4403 10e8 02       		.byte	0x2
 4404 10e9 74       		.byte	0x74
 4405 10ea 00       		.sleb128 0
 4406 10eb 00       		.byte	0
 4407 10ec 00       		.byte	0
 4408 10ed 2C       		.uleb128 0x2c
 4409 10ee F9070000 		.4byte	0x7f9
 4410 10f2 24010000 		.4byte	.LFB83
 4411 10f6 4C010000 		.4byte	.LFE83
 4412 10fa D80C0000 		.4byte	.LLST24
 4413 10fe 01       		.byte	0x1
 4414 10ff 6E110000 		.4byte	0x116e
 4415 1103 2D       		.uleb128 0x2d
 4416 1104 0B080000 		.4byte	0x80b
 4417 1108 F80C0000 		.4byte	.LLST25
 4418 110c 2D       		.uleb128 0x2d
 4419 110d 17080000 		.4byte	0x817
 4420 1111 160D0000 		.4byte	.LLST26
 4421 1115 2E       		.uleb128 0x2e
 4422 1116 23080000 		.4byte	0x823
 4423 111a 4D0D0000 		.4byte	.LLST27
 4424 111e 2F       		.uleb128 0x2f
 4425 111f 30010000 		.4byte	.LBB4
 4426 1123 40010000 		.4byte	.LBE4
 4427 1127 5D110000 		.4byte	0x115d
 4428 112b 2D       		.uleb128 0x2d
 4429 112c 17080000 		.4byte	0x817
 4430 1130 6C0D0000 		.4byte	.LLST28
 4431 1134 2D       		.uleb128 0x2d
 4432 1135 0B080000 		.4byte	0x80b
 4433 1139 8D0D0000 		.4byte	.LLST29
 4434 113d 30       		.uleb128 0x30
 4435 113e 30010000 		.4byte	.LBB5
 4436 1142 40010000 		.4byte	.LBE5
 4437 1146 31       		.uleb128 0x31
 4438 1147 15110000 		.4byte	0x1115
 4439 114b 26       		.uleb128 0x26
 4440 114c 40010000 		.4byte	.LVL45
 4441 1150 D2060000 		.4byte	0x6d2
 4442 1154 27       		.uleb128 0x27
 4443 1155 01       		.byte	0x1
 4444 1156 50       		.byte	0x50
 4445 1157 02       		.byte	0x2
 4446 1158 75       		.byte	0x75
 4447 1159 00       		.sleb128 0
 4448 115a 00       		.byte	0
 4449 115b 00       		.byte	0
 4450 115c 00       		.byte	0
 4451 115d 26       		.uleb128 0x26
 4452 115e 2E010000 		.4byte	.LVL42
 4453 1162 23070000 		.4byte	0x723
 4454 1166 27       		.uleb128 0x27
 4455 1167 01       		.byte	0x1
 4456 1168 50       		.byte	0x50
ARM GAS  /tmp/ccM6Uqrc.s 			page 121


 4457 1169 02       		.byte	0x2
 4458 116a 75       		.byte	0x75
 4459 116b 00       		.sleb128 0
 4460 116c 00       		.byte	0
 4461 116d 00       		.byte	0
 4462 116e 2C       		.uleb128 0x2c
 4463 116f 74070000 		.4byte	0x774
 4464 1173 4C010000 		.4byte	.LFB85
 4465 1177 74010000 		.4byte	.LFE85
 4466 117b A00D0000 		.4byte	.LLST30
 4467 117f 01       		.byte	0x1
 4468 1180 EF110000 		.4byte	0x11ef
 4469 1184 2D       		.uleb128 0x2d
 4470 1185 86070000 		.4byte	0x786
 4471 1189 C00D0000 		.4byte	.LLST31
 4472 118d 2D       		.uleb128 0x2d
 4473 118e 92070000 		.4byte	0x792
 4474 1192 DE0D0000 		.4byte	.LLST32
 4475 1196 2E       		.uleb128 0x2e
 4476 1197 9E070000 		.4byte	0x79e
 4477 119b 150E0000 		.4byte	.LLST33
 4478 119f 2F       		.uleb128 0x2f
 4479 11a0 58010000 		.4byte	.LBB8
 4480 11a4 68010000 		.4byte	.LBE8
 4481 11a8 DE110000 		.4byte	0x11de
 4482 11ac 2D       		.uleb128 0x2d
 4483 11ad 92070000 		.4byte	0x792
 4484 11b1 340E0000 		.4byte	.LLST34
 4485 11b5 2D       		.uleb128 0x2d
 4486 11b6 86070000 		.4byte	0x786
 4487 11ba 550E0000 		.4byte	.LLST35
 4488 11be 30       		.uleb128 0x30
 4489 11bf 58010000 		.4byte	.LBB9
 4490 11c3 68010000 		.4byte	.LBE9
 4491 11c7 31       		.uleb128 0x31
 4492 11c8 96110000 		.4byte	0x1196
 4493 11cc 26       		.uleb128 0x26
 4494 11cd 68010000 		.4byte	.LVL52
 4495 11d1 D2060000 		.4byte	0x6d2
 4496 11d5 27       		.uleb128 0x27
 4497 11d6 01       		.byte	0x1
 4498 11d7 50       		.byte	0x50
 4499 11d8 02       		.byte	0x2
 4500 11d9 75       		.byte	0x75
 4501 11da 00       		.sleb128 0
 4502 11db 00       		.byte	0
 4503 11dc 00       		.byte	0
 4504 11dd 00       		.byte	0
 4505 11de 26       		.uleb128 0x26
 4506 11df 56010000 		.4byte	.LVL49
 4507 11e3 23070000 		.4byte	0x723
 4508 11e7 27       		.uleb128 0x27
 4509 11e8 01       		.byte	0x1
 4510 11e9 50       		.byte	0x50
 4511 11ea 02       		.byte	0x2
 4512 11eb 75       		.byte	0x75
 4513 11ec 00       		.sleb128 0
ARM GAS  /tmp/ccM6Uqrc.s 			page 122


 4514 11ed 00       		.byte	0
 4515 11ee 00       		.byte	0
 4516 11ef 2C       		.uleb128 0x2c
 4517 11f0 4F0E0000 		.4byte	0xe4f
 4518 11f4 1A020000 		.4byte	.LFB70
 4519 11f8 88030000 		.4byte	.LFE70
 4520 11fc 680E0000 		.4byte	.LLST42
 4521 1200 01       		.byte	0x1
 4522 1201 6C130000 		.4byte	0x136c
 4523 1205 2D       		.uleb128 0x2d
 4524 1206 620E0000 		.4byte	0xe62
 4525 120a 880E0000 		.4byte	.LLST43
 4526 120e 2D       		.uleb128 0x2d
 4527 120f 6E0E0000 		.4byte	0xe6e
 4528 1213 BC0E0000 		.4byte	.LLST44
 4529 1217 2D       		.uleb128 0x2d
 4530 1218 7A0E0000 		.4byte	0xe7a
 4531 121c F00E0000 		.4byte	.LLST45
 4532 1220 32       		.uleb128 0x32
 4533 1221 860E0000 		.4byte	0xe86
 4534 1225 00       		.byte	0
 4535 1226 32       		.uleb128 0x32
 4536 1227 920E0000 		.4byte	0xe92
 4537 122b 00       		.byte	0
 4538 122c 32       		.uleb128 0x32
 4539 122d 9E0E0000 		.4byte	0xe9e
 4540 1231 00       		.byte	0
 4541 1232 32       		.uleb128 0x32
 4542 1233 AA0E0000 		.4byte	0xeaa
 4543 1237 00       		.byte	0
 4544 1238 30       		.uleb128 0x30
 4545 1239 38020000 		.4byte	.LBB16
 4546 123d 88030000 		.4byte	.LBE16
 4547 1241 2D       		.uleb128 0x2d
 4548 1242 7A0E0000 		.4byte	0xe7a
 4549 1246 240F0000 		.4byte	.LLST46
 4550 124a 2D       		.uleb128 0x2d
 4551 124b 6E0E0000 		.4byte	0xe6e
 4552 124f 420F0000 		.4byte	.LLST47
 4553 1253 2D       		.uleb128 0x2d
 4554 1254 620E0000 		.4byte	0xe62
 4555 1258 600F0000 		.4byte	.LLST48
 4556 125c 30       		.uleb128 0x30
 4557 125d 38020000 		.4byte	.LBB17
 4558 1261 88030000 		.4byte	.LBE17
 4559 1265 31       		.uleb128 0x31
 4560 1266 20120000 		.4byte	0x1220
 4561 126a 31       		.uleb128 0x31
 4562 126b 26120000 		.4byte	0x1226
 4563 126f 31       		.uleb128 0x31
 4564 1270 2C120000 		.4byte	0x122c
 4565 1274 31       		.uleb128 0x31
 4566 1275 32120000 		.4byte	0x1232
 4567 1279 33       		.uleb128 0x33
 4568 127a F9050000 		.4byte	0x5f9
 4569 127e AA020000 		.4byte	.LBB18
 4570 1282 00000000 		.4byte	.Ldebug_ranges0+0
ARM GAS  /tmp/ccM6Uqrc.s 			page 123


 4571 1286 01       		.byte	0x1
 4572 1287 7203     		.2byte	0x372
 4573 1289 F8120000 		.4byte	0x12f8
 4574 128d 2D       		.uleb128 0x2d
 4575 128e 13060000 		.4byte	0x613
 4576 1292 7E0F0000 		.4byte	.LLST49
 4577 1296 2D       		.uleb128 0x2d
 4578 1297 07060000 		.4byte	0x607
 4579 129b 9F0F0000 		.4byte	.LLST50
 4580 129f 34       		.uleb128 0x34
 4581 12a0 00000000 		.4byte	.Ldebug_ranges0+0
 4582 12a4 2E       		.uleb128 0x2e
 4583 12a5 1F060000 		.4byte	0x61f
 4584 12a9 C80F0000 		.4byte	.LLST51
 4585 12ad 2E       		.uleb128 0x2e
 4586 12ae 2B060000 		.4byte	0x62b
 4587 12b2 FD0F0000 		.4byte	.LLST52
 4588 12b6 2E       		.uleb128 0x2e
 4589 12b7 37060000 		.4byte	0x637
 4590 12bb 5F100000 		.4byte	.LLST53
 4591 12bf 2E       		.uleb128 0x2e
 4592 12c0 43060000 		.4byte	0x643
 4593 12c4 CD100000 		.4byte	.LLST54
 4594 12c8 33       		.uleb128 0x33
 4595 12c9 DA050000 		.4byte	0x5da
 4596 12cd B0020000 		.4byte	.LBB20
 4597 12d1 28000000 		.4byte	.Ldebug_ranges0+0x28
 4598 12d5 01       		.byte	0x1
 4599 12d6 3407     		.2byte	0x734
 4600 12d8 E6120000 		.4byte	0x12e6
 4601 12dc 2D       		.uleb128 0x2d
 4602 12dd EC050000 		.4byte	0x5ec
 4603 12e1 02110000 		.4byte	.LLST55
 4604 12e5 00       		.byte	0
 4605 12e6 26       		.uleb128 0x26
 4606 12e7 D4020000 		.4byte	.LVL96
 4607 12eb 6D050000 		.4byte	0x56d
 4608 12ef 27       		.uleb128 0x27
 4609 12f0 01       		.byte	0x1
 4610 12f1 51       		.byte	0x51
 4611 12f2 02       		.byte	0x2
 4612 12f3 71       		.byte	0x71
 4613 12f4 00       		.sleb128 0
 4614 12f5 00       		.byte	0
 4615 12f6 00       		.byte	0
 4616 12f7 00       		.byte	0
 4617 12f8 28       		.uleb128 0x28
 4618 12f9 3C020000 		.4byte	.LVL75
 4619 12fd 30080000 		.4byte	0x830
 4620 1301 0C130000 		.4byte	0x130c
 4621 1305 27       		.uleb128 0x27
 4622 1306 01       		.byte	0x1
 4623 1307 50       		.byte	0x50
 4624 1308 02       		.byte	0x2
 4625 1309 74       		.byte	0x74
 4626 130a 00       		.sleb128 0
 4627 130b 00       		.byte	0
ARM GAS  /tmp/ccM6Uqrc.s 			page 124


 4628 130c 28       		.uleb128 0x28
 4629 130d 70020000 		.4byte	.LVL80
 4630 1311 AB070000 		.4byte	0x7ab
 4631 1315 20130000 		.4byte	0x1320
 4632 1319 27       		.uleb128 0x27
 4633 131a 01       		.byte	0x1
 4634 131b 50       		.byte	0x50
 4635 131c 02       		.byte	0x2
 4636 131d 74       		.byte	0x74
 4637 131e 00       		.sleb128 0
 4638 131f 00       		.byte	0
 4639 1320 28       		.uleb128 0x28
 4640 1321 92020000 		.4byte	.LVL84
 4641 1325 F9070000 		.4byte	0x7f9
 4642 1329 3A130000 		.4byte	0x133a
 4643 132d 27       		.uleb128 0x27
 4644 132e 01       		.byte	0x1
 4645 132f 50       		.byte	0x50
 4646 1330 02       		.byte	0x2
 4647 1331 74       		.byte	0x74
 4648 1332 00       		.sleb128 0
 4649 1333 27       		.uleb128 0x27
 4650 1334 01       		.byte	0x1
 4651 1335 51       		.byte	0x51
 4652 1336 02       		.byte	0x2
 4653 1337 79       		.byte	0x79
 4654 1338 00       		.sleb128 0
 4655 1339 00       		.byte	0
 4656 133a 28       		.uleb128 0x28
 4657 133b A4020000 		.4byte	.LVL87
 4658 133f 74070000 		.4byte	0x774
 4659 1343 4E130000 		.4byte	0x134e
 4660 1347 27       		.uleb128 0x27
 4661 1348 01       		.byte	0x1
 4662 1349 50       		.byte	0x50
 4663 134a 02       		.byte	0x2
 4664 134b 74       		.byte	0x74
 4665 134c 00       		.sleb128 0
 4666 134d 00       		.byte	0
 4667 134e 21       		.uleb128 0x21
 4668 134f E2020000 		.4byte	.LVL98
 4669 1353 94060000 		.4byte	0x694
 4670 1357 21       		.uleb128 0x21
 4671 1358 EA020000 		.4byte	.LVL99
 4672 135c 94060000 		.4byte	0x694
 4673 1360 21       		.uleb128 0x21
 4674 1361 F2020000 		.4byte	.LVL100
 4675 1365 94060000 		.4byte	0x694
 4676 1369 00       		.byte	0
 4677 136a 00       		.byte	0
 4678 136b 00       		.byte	0
 4679 136c 35       		.uleb128 0x35
 4680 136d 82090000 		.4byte	0x982
 4681 1371 F0060000 		.4byte	.LFB78
 4682 1375 F2060000 		.4byte	.LFE78
 4683 1379 02       		.byte	0x2
 4684 137a 7D       		.byte	0x7d
ARM GAS  /tmp/ccM6Uqrc.s 			page 125


 4685 137b 00       		.sleb128 0
 4686 137c 01       		.byte	0x1
 4687 137d 89130000 		.4byte	0x1389
 4688 1381 36       		.uleb128 0x36
 4689 1382 91090000 		.4byte	0x991
 4690 1386 01       		.byte	0x1
 4691 1387 50       		.byte	0x50
 4692 1388 00       		.byte	0
 4693 1389 37       		.uleb128 0x37
 4694 138a 01       		.byte	0x1
 4695 138b 01       		.byte	0x1
 4696 138c 00040000 		.4byte	.LASF136
 4697 1390 00040000 		.4byte	.LASF136
 4698 1394 0A       		.byte	0xa
 4699 1395 2A01     		.2byte	0x12a
 4700 1397 37       		.uleb128 0x37
 4701 1398 01       		.byte	0x1
 4702 1399 01       		.byte	0x1
 4703 139a 68010000 		.4byte	.LASF137
 4704 139e 68010000 		.4byte	.LASF137
 4705 13a2 0B       		.byte	0xb
 4706 13a3 4507     		.2byte	0x745
 4707 13a5 00       		.byte	0
 4708              		.section	.debug_abbrev,"",%progbits
 4709              	.Ldebug_abbrev0:
 4710 0000 01       		.uleb128 0x1
 4711 0001 11       		.uleb128 0x11
 4712 0002 01       		.byte	0x1
 4713 0003 25       		.uleb128 0x25
 4714 0004 0E       		.uleb128 0xe
 4715 0005 13       		.uleb128 0x13
 4716 0006 0B       		.uleb128 0xb
 4717 0007 03       		.uleb128 0x3
 4718 0008 0E       		.uleb128 0xe
 4719 0009 1B       		.uleb128 0x1b
 4720 000a 0E       		.uleb128 0xe
 4721 000b 11       		.uleb128 0x11
 4722 000c 01       		.uleb128 0x1
 4723 000d 12       		.uleb128 0x12
 4724 000e 01       		.uleb128 0x1
 4725 000f 10       		.uleb128 0x10
 4726 0010 06       		.uleb128 0x6
 4727 0011 00       		.byte	0
 4728 0012 00       		.byte	0
 4729 0013 02       		.uleb128 0x2
 4730 0014 24       		.uleb128 0x24
 4731 0015 00       		.byte	0
 4732 0016 0B       		.uleb128 0xb
 4733 0017 0B       		.uleb128 0xb
 4734 0018 3E       		.uleb128 0x3e
 4735 0019 0B       		.uleb128 0xb
 4736 001a 03       		.uleb128 0x3
 4737 001b 0E       		.uleb128 0xe
 4738 001c 00       		.byte	0
 4739 001d 00       		.byte	0
 4740 001e 03       		.uleb128 0x3
 4741 001f 16       		.uleb128 0x16
ARM GAS  /tmp/ccM6Uqrc.s 			page 126


 4742 0020 00       		.byte	0
 4743 0021 03       		.uleb128 0x3
 4744 0022 0E       		.uleb128 0xe
 4745 0023 3A       		.uleb128 0x3a
 4746 0024 0B       		.uleb128 0xb
 4747 0025 3B       		.uleb128 0x3b
 4748 0026 0B       		.uleb128 0xb
 4749 0027 49       		.uleb128 0x49
 4750 0028 13       		.uleb128 0x13
 4751 0029 00       		.byte	0
 4752 002a 00       		.byte	0
 4753 002b 04       		.uleb128 0x4
 4754 002c 24       		.uleb128 0x24
 4755 002d 00       		.byte	0
 4756 002e 0B       		.uleb128 0xb
 4757 002f 0B       		.uleb128 0xb
 4758 0030 3E       		.uleb128 0x3e
 4759 0031 0B       		.uleb128 0xb
 4760 0032 03       		.uleb128 0x3
 4761 0033 08       		.uleb128 0x8
 4762 0034 00       		.byte	0
 4763 0035 00       		.byte	0
 4764 0036 05       		.uleb128 0x5
 4765 0037 26       		.uleb128 0x26
 4766 0038 00       		.byte	0
 4767 0039 49       		.uleb128 0x49
 4768 003a 13       		.uleb128 0x13
 4769 003b 00       		.byte	0
 4770 003c 00       		.byte	0
 4771 003d 06       		.uleb128 0x6
 4772 003e 35       		.uleb128 0x35
 4773 003f 00       		.byte	0
 4774 0040 49       		.uleb128 0x49
 4775 0041 13       		.uleb128 0x13
 4776 0042 00       		.byte	0
 4777 0043 00       		.byte	0
 4778 0044 07       		.uleb128 0x7
 4779 0045 34       		.uleb128 0x34
 4780 0046 00       		.byte	0
 4781 0047 03       		.uleb128 0x3
 4782 0048 0E       		.uleb128 0xe
 4783 0049 3A       		.uleb128 0x3a
 4784 004a 0B       		.uleb128 0xb
 4785 004b 3B       		.uleb128 0x3b
 4786 004c 05       		.uleb128 0x5
 4787 004d 49       		.uleb128 0x49
 4788 004e 13       		.uleb128 0x13
 4789 004f 3F       		.uleb128 0x3f
 4790 0050 0C       		.uleb128 0xc
 4791 0051 3C       		.uleb128 0x3c
 4792 0052 0C       		.uleb128 0xc
 4793 0053 00       		.byte	0
 4794 0054 00       		.byte	0
 4795 0055 08       		.uleb128 0x8
 4796 0056 34       		.uleb128 0x34
 4797 0057 00       		.byte	0
 4798 0058 03       		.uleb128 0x3
ARM GAS  /tmp/ccM6Uqrc.s 			page 127


 4799 0059 0E       		.uleb128 0xe
 4800 005a 3A       		.uleb128 0x3a
 4801 005b 0B       		.uleb128 0xb
 4802 005c 3B       		.uleb128 0x3b
 4803 005d 0B       		.uleb128 0xb
 4804 005e 49       		.uleb128 0x49
 4805 005f 13       		.uleb128 0x13
 4806 0060 3F       		.uleb128 0x3f
 4807 0061 0C       		.uleb128 0xc
 4808 0062 3C       		.uleb128 0x3c
 4809 0063 0C       		.uleb128 0xc
 4810 0064 00       		.byte	0
 4811 0065 00       		.byte	0
 4812 0066 09       		.uleb128 0x9
 4813 0067 01       		.uleb128 0x1
 4814 0068 01       		.byte	0x1
 4815 0069 49       		.uleb128 0x49
 4816 006a 13       		.uleb128 0x13
 4817 006b 01       		.uleb128 0x1
 4818 006c 13       		.uleb128 0x13
 4819 006d 00       		.byte	0
 4820 006e 00       		.byte	0
 4821 006f 0A       		.uleb128 0xa
 4822 0070 21       		.uleb128 0x21
 4823 0071 00       		.byte	0
 4824 0072 49       		.uleb128 0x49
 4825 0073 13       		.uleb128 0x13
 4826 0074 2F       		.uleb128 0x2f
 4827 0075 0B       		.uleb128 0xb
 4828 0076 00       		.byte	0
 4829 0077 00       		.byte	0
 4830 0078 0B       		.uleb128 0xb
 4831 0079 13       		.uleb128 0x13
 4832 007a 01       		.byte	0x1
 4833 007b 0B       		.uleb128 0xb
 4834 007c 0B       		.uleb128 0xb
 4835 007d 3A       		.uleb128 0x3a
 4836 007e 0B       		.uleb128 0xb
 4837 007f 3B       		.uleb128 0x3b
 4838 0080 0B       		.uleb128 0xb
 4839 0081 01       		.uleb128 0x1
 4840 0082 13       		.uleb128 0x13
 4841 0083 00       		.byte	0
 4842 0084 00       		.byte	0
 4843 0085 0C       		.uleb128 0xc
 4844 0086 0D       		.uleb128 0xd
 4845 0087 00       		.byte	0
 4846 0088 03       		.uleb128 0x3
 4847 0089 0E       		.uleb128 0xe
 4848 008a 3A       		.uleb128 0x3a
 4849 008b 0B       		.uleb128 0xb
 4850 008c 3B       		.uleb128 0x3b
 4851 008d 0B       		.uleb128 0xb
 4852 008e 49       		.uleb128 0x49
 4853 008f 13       		.uleb128 0x13
 4854 0090 38       		.uleb128 0x38
 4855 0091 0A       		.uleb128 0xa
ARM GAS  /tmp/ccM6Uqrc.s 			page 128


 4856 0092 00       		.byte	0
 4857 0093 00       		.byte	0
 4858 0094 0D       		.uleb128 0xd
 4859 0095 0D       		.uleb128 0xd
 4860 0096 00       		.byte	0
 4861 0097 03       		.uleb128 0x3
 4862 0098 08       		.uleb128 0x8
 4863 0099 3A       		.uleb128 0x3a
 4864 009a 0B       		.uleb128 0xb
 4865 009b 3B       		.uleb128 0x3b
 4866 009c 0B       		.uleb128 0xb
 4867 009d 49       		.uleb128 0x49
 4868 009e 13       		.uleb128 0x13
 4869 009f 38       		.uleb128 0x38
 4870 00a0 0A       		.uleb128 0xa
 4871 00a1 00       		.byte	0
 4872 00a2 00       		.byte	0
 4873 00a3 0E       		.uleb128 0xe
 4874 00a4 13       		.uleb128 0x13
 4875 00a5 01       		.byte	0x1
 4876 00a6 0B       		.uleb128 0xb
 4877 00a7 0B       		.uleb128 0xb
 4878 00a8 3A       		.uleb128 0x3a
 4879 00a9 0B       		.uleb128 0xb
 4880 00aa 3B       		.uleb128 0x3b
 4881 00ab 05       		.uleb128 0x5
 4882 00ac 01       		.uleb128 0x1
 4883 00ad 13       		.uleb128 0x13
 4884 00ae 00       		.byte	0
 4885 00af 00       		.byte	0
 4886 00b0 0F       		.uleb128 0xf
 4887 00b1 0D       		.uleb128 0xd
 4888 00b2 00       		.byte	0
 4889 00b3 03       		.uleb128 0x3
 4890 00b4 08       		.uleb128 0x8
 4891 00b5 3A       		.uleb128 0x3a
 4892 00b6 0B       		.uleb128 0xb
 4893 00b7 3B       		.uleb128 0x3b
 4894 00b8 05       		.uleb128 0x5
 4895 00b9 49       		.uleb128 0x49
 4896 00ba 13       		.uleb128 0x13
 4897 00bb 38       		.uleb128 0x38
 4898 00bc 0A       		.uleb128 0xa
 4899 00bd 00       		.byte	0
 4900 00be 00       		.byte	0
 4901 00bf 10       		.uleb128 0x10
 4902 00c0 0D       		.uleb128 0xd
 4903 00c1 00       		.byte	0
 4904 00c2 03       		.uleb128 0x3
 4905 00c3 0E       		.uleb128 0xe
 4906 00c4 3A       		.uleb128 0x3a
 4907 00c5 0B       		.uleb128 0xb
 4908 00c6 3B       		.uleb128 0x3b
 4909 00c7 05       		.uleb128 0x5
 4910 00c8 49       		.uleb128 0x49
 4911 00c9 13       		.uleb128 0x13
 4912 00ca 38       		.uleb128 0x38
ARM GAS  /tmp/ccM6Uqrc.s 			page 129


 4913 00cb 0A       		.uleb128 0xa
 4914 00cc 00       		.byte	0
 4915 00cd 00       		.byte	0
 4916 00ce 11       		.uleb128 0x11
 4917 00cf 16       		.uleb128 0x16
 4918 00d0 00       		.byte	0
 4919 00d1 03       		.uleb128 0x3
 4920 00d2 0E       		.uleb128 0xe
 4921 00d3 3A       		.uleb128 0x3a
 4922 00d4 0B       		.uleb128 0xb
 4923 00d5 3B       		.uleb128 0x3b
 4924 00d6 05       		.uleb128 0x5
 4925 00d7 49       		.uleb128 0x49
 4926 00d8 13       		.uleb128 0x13
 4927 00d9 00       		.byte	0
 4928 00da 00       		.byte	0
 4929 00db 12       		.uleb128 0x12
 4930 00dc 04       		.uleb128 0x4
 4931 00dd 01       		.byte	0x1
 4932 00de 0B       		.uleb128 0xb
 4933 00df 0B       		.uleb128 0xb
 4934 00e0 49       		.uleb128 0x49
 4935 00e1 13       		.uleb128 0x13
 4936 00e2 3A       		.uleb128 0x3a
 4937 00e3 0B       		.uleb128 0xb
 4938 00e4 3B       		.uleb128 0x3b
 4939 00e5 0B       		.uleb128 0xb
 4940 00e6 01       		.uleb128 0x1
 4941 00e7 13       		.uleb128 0x13
 4942 00e8 00       		.byte	0
 4943 00e9 00       		.byte	0
 4944 00ea 13       		.uleb128 0x13
 4945 00eb 28       		.uleb128 0x28
 4946 00ec 00       		.byte	0
 4947 00ed 03       		.uleb128 0x3
 4948 00ee 0E       		.uleb128 0xe
 4949 00ef 1C       		.uleb128 0x1c
 4950 00f0 0B       		.uleb128 0xb
 4951 00f1 00       		.byte	0
 4952 00f2 00       		.byte	0
 4953 00f3 14       		.uleb128 0x14
 4954 00f4 28       		.uleb128 0x28
 4955 00f5 00       		.byte	0
 4956 00f6 03       		.uleb128 0x3
 4957 00f7 08       		.uleb128 0x8
 4958 00f8 1C       		.uleb128 0x1c
 4959 00f9 0B       		.uleb128 0xb
 4960 00fa 00       		.byte	0
 4961 00fb 00       		.byte	0
 4962 00fc 15       		.uleb128 0x15
 4963 00fd 0F       		.uleb128 0xf
 4964 00fe 00       		.byte	0
 4965 00ff 0B       		.uleb128 0xb
 4966 0100 0B       		.uleb128 0xb
 4967 0101 49       		.uleb128 0x49
 4968 0102 13       		.uleb128 0x13
 4969 0103 00       		.byte	0
ARM GAS  /tmp/ccM6Uqrc.s 			page 130


 4970 0104 00       		.byte	0
 4971 0105 16       		.uleb128 0x16
 4972 0106 2E       		.uleb128 0x2e
 4973 0107 01       		.byte	0x1
 4974 0108 03       		.uleb128 0x3
 4975 0109 0E       		.uleb128 0xe
 4976 010a 3A       		.uleb128 0x3a
 4977 010b 0B       		.uleb128 0xb
 4978 010c 3B       		.uleb128 0x3b
 4979 010d 05       		.uleb128 0x5
 4980 010e 27       		.uleb128 0x27
 4981 010f 0C       		.uleb128 0xc
 4982 0110 49       		.uleb128 0x49
 4983 0111 13       		.uleb128 0x13
 4984 0112 11       		.uleb128 0x11
 4985 0113 01       		.uleb128 0x1
 4986 0114 12       		.uleb128 0x12
 4987 0115 01       		.uleb128 0x1
 4988 0116 40       		.uleb128 0x40
 4989 0117 06       		.uleb128 0x6
 4990 0118 9742     		.uleb128 0x2117
 4991 011a 0C       		.uleb128 0xc
 4992 011b 01       		.uleb128 0x1
 4993 011c 13       		.uleb128 0x13
 4994 011d 00       		.byte	0
 4995 011e 00       		.byte	0
 4996 011f 17       		.uleb128 0x17
 4997 0120 05       		.uleb128 0x5
 4998 0121 00       		.byte	0
 4999 0122 03       		.uleb128 0x3
 5000 0123 0E       		.uleb128 0xe
 5001 0124 3A       		.uleb128 0x3a
 5002 0125 0B       		.uleb128 0xb
 5003 0126 3B       		.uleb128 0x3b
 5004 0127 05       		.uleb128 0x5
 5005 0128 49       		.uleb128 0x49
 5006 0129 13       		.uleb128 0x13
 5007 012a 02       		.uleb128 0x2
 5008 012b 06       		.uleb128 0x6
 5009 012c 00       		.byte	0
 5010 012d 00       		.byte	0
 5011 012e 18       		.uleb128 0x18
 5012 012f 05       		.uleb128 0x5
 5013 0130 00       		.byte	0
 5014 0131 03       		.uleb128 0x3
 5015 0132 0E       		.uleb128 0xe
 5016 0133 3A       		.uleb128 0x3a
 5017 0134 0B       		.uleb128 0xb
 5018 0135 3B       		.uleb128 0x3b
 5019 0136 05       		.uleb128 0x5
 5020 0137 49       		.uleb128 0x49
 5021 0138 13       		.uleb128 0x13
 5022 0139 02       		.uleb128 0x2
 5023 013a 0A       		.uleb128 0xa
 5024 013b 00       		.byte	0
 5025 013c 00       		.byte	0
 5026 013d 19       		.uleb128 0x19
ARM GAS  /tmp/ccM6Uqrc.s 			page 131


 5027 013e 34       		.uleb128 0x34
 5028 013f 00       		.byte	0
 5029 0140 03       		.uleb128 0x3
 5030 0141 0E       		.uleb128 0xe
 5031 0142 3A       		.uleb128 0x3a
 5032 0143 0B       		.uleb128 0xb
 5033 0144 3B       		.uleb128 0x3b
 5034 0145 05       		.uleb128 0x5
 5035 0146 49       		.uleb128 0x49
 5036 0147 13       		.uleb128 0x13
 5037 0148 02       		.uleb128 0x2
 5038 0149 06       		.uleb128 0x6
 5039 014a 00       		.byte	0
 5040 014b 00       		.byte	0
 5041 014c 1A       		.uleb128 0x1a
 5042 014d 2E       		.uleb128 0x2e
 5043 014e 01       		.byte	0x1
 5044 014f 03       		.uleb128 0x3
 5045 0150 0E       		.uleb128 0xe
 5046 0151 3A       		.uleb128 0x3a
 5047 0152 0B       		.uleb128 0xb
 5048 0153 3B       		.uleb128 0x3b
 5049 0154 05       		.uleb128 0x5
 5050 0155 27       		.uleb128 0x27
 5051 0156 0C       		.uleb128 0xc
 5052 0157 49       		.uleb128 0x49
 5053 0158 13       		.uleb128 0x13
 5054 0159 20       		.uleb128 0x20
 5055 015a 0B       		.uleb128 0xb
 5056 015b 01       		.uleb128 0x1
 5057 015c 13       		.uleb128 0x13
 5058 015d 00       		.byte	0
 5059 015e 00       		.byte	0
 5060 015f 1B       		.uleb128 0x1b
 5061 0160 05       		.uleb128 0x5
 5062 0161 00       		.byte	0
 5063 0162 03       		.uleb128 0x3
 5064 0163 0E       		.uleb128 0xe
 5065 0164 3A       		.uleb128 0x3a
 5066 0165 0B       		.uleb128 0xb
 5067 0166 3B       		.uleb128 0x3b
 5068 0167 05       		.uleb128 0x5
 5069 0168 49       		.uleb128 0x49
 5070 0169 13       		.uleb128 0x13
 5071 016a 00       		.byte	0
 5072 016b 00       		.byte	0
 5073 016c 1C       		.uleb128 0x1c
 5074 016d 2E       		.uleb128 0x2e
 5075 016e 01       		.byte	0x1
 5076 016f 03       		.uleb128 0x3
 5077 0170 0E       		.uleb128 0xe
 5078 0171 3A       		.uleb128 0x3a
 5079 0172 0B       		.uleb128 0xb
 5080 0173 3B       		.uleb128 0x3b
 5081 0174 05       		.uleb128 0x5
 5082 0175 27       		.uleb128 0x27
 5083 0176 0C       		.uleb128 0xc
ARM GAS  /tmp/ccM6Uqrc.s 			page 132


 5084 0177 20       		.uleb128 0x20
 5085 0178 0B       		.uleb128 0xb
 5086 0179 01       		.uleb128 0x1
 5087 017a 13       		.uleb128 0x13
 5088 017b 00       		.byte	0
 5089 017c 00       		.byte	0
 5090 017d 1D       		.uleb128 0x1d
 5091 017e 34       		.uleb128 0x34
 5092 017f 00       		.byte	0
 5093 0180 03       		.uleb128 0x3
 5094 0181 0E       		.uleb128 0xe
 5095 0182 3A       		.uleb128 0x3a
 5096 0183 0B       		.uleb128 0xb
 5097 0184 3B       		.uleb128 0x3b
 5098 0185 05       		.uleb128 0x5
 5099 0186 49       		.uleb128 0x49
 5100 0187 13       		.uleb128 0x13
 5101 0188 00       		.byte	0
 5102 0189 00       		.byte	0
 5103 018a 1E       		.uleb128 0x1e
 5104 018b 34       		.uleb128 0x34
 5105 018c 00       		.byte	0
 5106 018d 03       		.uleb128 0x3
 5107 018e 08       		.uleb128 0x8
 5108 018f 3A       		.uleb128 0x3a
 5109 0190 0B       		.uleb128 0xb
 5110 0191 3B       		.uleb128 0x3b
 5111 0192 05       		.uleb128 0x5
 5112 0193 49       		.uleb128 0x49
 5113 0194 13       		.uleb128 0x13
 5114 0195 00       		.byte	0
 5115 0196 00       		.byte	0
 5116 0197 1F       		.uleb128 0x1f
 5117 0198 2E       		.uleb128 0x2e
 5118 0199 01       		.byte	0x1
 5119 019a 03       		.uleb128 0x3
 5120 019b 0E       		.uleb128 0xe
 5121 019c 3A       		.uleb128 0x3a
 5122 019d 0B       		.uleb128 0xb
 5123 019e 3B       		.uleb128 0x3b
 5124 019f 05       		.uleb128 0x5
 5125 01a0 27       		.uleb128 0x27
 5126 01a1 0C       		.uleb128 0xc
 5127 01a2 49       		.uleb128 0x49
 5128 01a3 13       		.uleb128 0x13
 5129 01a4 11       		.uleb128 0x11
 5130 01a5 01       		.uleb128 0x1
 5131 01a6 12       		.uleb128 0x12
 5132 01a7 01       		.uleb128 0x1
 5133 01a8 40       		.uleb128 0x40
 5134 01a9 0A       		.uleb128 0xa
 5135 01aa 9742     		.uleb128 0x2117
 5136 01ac 0C       		.uleb128 0xc
 5137 01ad 01       		.uleb128 0x1
 5138 01ae 13       		.uleb128 0x13
 5139 01af 00       		.byte	0
 5140 01b0 00       		.byte	0
ARM GAS  /tmp/ccM6Uqrc.s 			page 133


 5141 01b1 20       		.uleb128 0x20
 5142 01b2 34       		.uleb128 0x34
 5143 01b3 00       		.byte	0
 5144 01b4 03       		.uleb128 0x3
 5145 01b5 08       		.uleb128 0x8
 5146 01b6 3A       		.uleb128 0x3a
 5147 01b7 0B       		.uleb128 0xb
 5148 01b8 3B       		.uleb128 0x3b
 5149 01b9 05       		.uleb128 0x5
 5150 01ba 49       		.uleb128 0x49
 5151 01bb 13       		.uleb128 0x13
 5152 01bc 02       		.uleb128 0x2
 5153 01bd 06       		.uleb128 0x6
 5154 01be 00       		.byte	0
 5155 01bf 00       		.byte	0
 5156 01c0 21       		.uleb128 0x21
 5157 01c1 898201   		.uleb128 0x4109
 5158 01c4 00       		.byte	0
 5159 01c5 11       		.uleb128 0x11
 5160 01c6 01       		.uleb128 0x1
 5161 01c7 31       		.uleb128 0x31
 5162 01c8 13       		.uleb128 0x13
 5163 01c9 00       		.byte	0
 5164 01ca 00       		.byte	0
 5165 01cb 22       		.uleb128 0x22
 5166 01cc 2E       		.uleb128 0x2e
 5167 01cd 01       		.byte	0x1
 5168 01ce 3F       		.uleb128 0x3f
 5169 01cf 0C       		.uleb128 0xc
 5170 01d0 03       		.uleb128 0x3
 5171 01d1 0E       		.uleb128 0xe
 5172 01d2 3A       		.uleb128 0x3a
 5173 01d3 0B       		.uleb128 0xb
 5174 01d4 3B       		.uleb128 0x3b
 5175 01d5 05       		.uleb128 0x5
 5176 01d6 27       		.uleb128 0x27
 5177 01d7 0C       		.uleb128 0xc
 5178 01d8 49       		.uleb128 0x49
 5179 01d9 13       		.uleb128 0x13
 5180 01da 11       		.uleb128 0x11
 5181 01db 01       		.uleb128 0x1
 5182 01dc 12       		.uleb128 0x12
 5183 01dd 01       		.uleb128 0x1
 5184 01de 40       		.uleb128 0x40
 5185 01df 06       		.uleb128 0x6
 5186 01e0 9742     		.uleb128 0x2117
 5187 01e2 0C       		.uleb128 0xc
 5188 01e3 01       		.uleb128 0x1
 5189 01e4 13       		.uleb128 0x13
 5190 01e5 00       		.byte	0
 5191 01e6 00       		.byte	0
 5192 01e7 23       		.uleb128 0x23
 5193 01e8 2E       		.uleb128 0x2e
 5194 01e9 01       		.byte	0x1
 5195 01ea 3F       		.uleb128 0x3f
 5196 01eb 0C       		.uleb128 0xc
 5197 01ec 03       		.uleb128 0x3
ARM GAS  /tmp/ccM6Uqrc.s 			page 134


 5198 01ed 0E       		.uleb128 0xe
 5199 01ee 3A       		.uleb128 0x3a
 5200 01ef 0B       		.uleb128 0xb
 5201 01f0 3B       		.uleb128 0x3b
 5202 01f1 05       		.uleb128 0x5
 5203 01f2 27       		.uleb128 0x27
 5204 01f3 0C       		.uleb128 0xc
 5205 01f4 49       		.uleb128 0x49
 5206 01f5 13       		.uleb128 0x13
 5207 01f6 11       		.uleb128 0x11
 5208 01f7 01       		.uleb128 0x1
 5209 01f8 12       		.uleb128 0x12
 5210 01f9 01       		.uleb128 0x1
 5211 01fa 40       		.uleb128 0x40
 5212 01fb 0A       		.uleb128 0xa
 5213 01fc 9742     		.uleb128 0x2117
 5214 01fe 0C       		.uleb128 0xc
 5215 01ff 01       		.uleb128 0x1
 5216 0200 13       		.uleb128 0x13
 5217 0201 00       		.byte	0
 5218 0202 00       		.byte	0
 5219 0203 24       		.uleb128 0x24
 5220 0204 2E       		.uleb128 0x2e
 5221 0205 01       		.byte	0x1
 5222 0206 3F       		.uleb128 0x3f
 5223 0207 0C       		.uleb128 0xc
 5224 0208 03       		.uleb128 0x3
 5225 0209 0E       		.uleb128 0xe
 5226 020a 3A       		.uleb128 0x3a
 5227 020b 0B       		.uleb128 0xb
 5228 020c 3B       		.uleb128 0x3b
 5229 020d 05       		.uleb128 0x5
 5230 020e 27       		.uleb128 0x27
 5231 020f 0C       		.uleb128 0xc
 5232 0210 20       		.uleb128 0x20
 5233 0211 0B       		.uleb128 0xb
 5234 0212 01       		.uleb128 0x1
 5235 0213 13       		.uleb128 0x13
 5236 0214 00       		.byte	0
 5237 0215 00       		.byte	0
 5238 0216 25       		.uleb128 0x25
 5239 0217 2E       		.uleb128 0x2e
 5240 0218 01       		.byte	0x1
 5241 0219 3F       		.uleb128 0x3f
 5242 021a 0C       		.uleb128 0xc
 5243 021b 03       		.uleb128 0x3
 5244 021c 0E       		.uleb128 0xe
 5245 021d 3A       		.uleb128 0x3a
 5246 021e 0B       		.uleb128 0xb
 5247 021f 3B       		.uleb128 0x3b
 5248 0220 05       		.uleb128 0x5
 5249 0221 27       		.uleb128 0x27
 5250 0222 0C       		.uleb128 0xc
 5251 0223 11       		.uleb128 0x11
 5252 0224 01       		.uleb128 0x1
 5253 0225 12       		.uleb128 0x12
 5254 0226 01       		.uleb128 0x1
ARM GAS  /tmp/ccM6Uqrc.s 			page 135


 5255 0227 40       		.uleb128 0x40
 5256 0228 06       		.uleb128 0x6
 5257 0229 9742     		.uleb128 0x2117
 5258 022b 0C       		.uleb128 0xc
 5259 022c 01       		.uleb128 0x1
 5260 022d 13       		.uleb128 0x13
 5261 022e 00       		.byte	0
 5262 022f 00       		.byte	0
 5263 0230 26       		.uleb128 0x26
 5264 0231 898201   		.uleb128 0x4109
 5265 0234 01       		.byte	0x1
 5266 0235 11       		.uleb128 0x11
 5267 0236 01       		.uleb128 0x1
 5268 0237 31       		.uleb128 0x31
 5269 0238 13       		.uleb128 0x13
 5270 0239 00       		.byte	0
 5271 023a 00       		.byte	0
 5272 023b 27       		.uleb128 0x27
 5273 023c 8A8201   		.uleb128 0x410a
 5274 023f 00       		.byte	0
 5275 0240 02       		.uleb128 0x2
 5276 0241 0A       		.uleb128 0xa
 5277 0242 9142     		.uleb128 0x2111
 5278 0244 0A       		.uleb128 0xa
 5279 0245 00       		.byte	0
 5280 0246 00       		.byte	0
 5281 0247 28       		.uleb128 0x28
 5282 0248 898201   		.uleb128 0x4109
 5283 024b 01       		.byte	0x1
 5284 024c 11       		.uleb128 0x11
 5285 024d 01       		.uleb128 0x1
 5286 024e 31       		.uleb128 0x31
 5287 024f 13       		.uleb128 0x13
 5288 0250 01       		.uleb128 0x1
 5289 0251 13       		.uleb128 0x13
 5290 0252 00       		.byte	0
 5291 0253 00       		.byte	0
 5292 0254 29       		.uleb128 0x29
 5293 0255 34       		.uleb128 0x34
 5294 0256 00       		.byte	0
 5295 0257 03       		.uleb128 0x3
 5296 0258 0E       		.uleb128 0xe
 5297 0259 3A       		.uleb128 0x3a
 5298 025a 0B       		.uleb128 0xb
 5299 025b 3B       		.uleb128 0x3b
 5300 025c 05       		.uleb128 0x5
 5301 025d 49       		.uleb128 0x49
 5302 025e 13       		.uleb128 0x13
 5303 025f 02       		.uleb128 0x2
 5304 0260 0A       		.uleb128 0xa
 5305 0261 00       		.byte	0
 5306 0262 00       		.byte	0
 5307 0263 2A       		.uleb128 0x2a
 5308 0264 2E       		.uleb128 0x2e
 5309 0265 01       		.byte	0x1
 5310 0266 3F       		.uleb128 0x3f
 5311 0267 0C       		.uleb128 0xc
ARM GAS  /tmp/ccM6Uqrc.s 			page 136


 5312 0268 03       		.uleb128 0x3
 5313 0269 0E       		.uleb128 0xe
 5314 026a 3A       		.uleb128 0x3a
 5315 026b 0B       		.uleb128 0xb
 5316 026c 3B       		.uleb128 0x3b
 5317 026d 05       		.uleb128 0x5
 5318 026e 27       		.uleb128 0x27
 5319 026f 0C       		.uleb128 0xc
 5320 0270 49       		.uleb128 0x49
 5321 0271 13       		.uleb128 0x13
 5322 0272 20       		.uleb128 0x20
 5323 0273 0B       		.uleb128 0xb
 5324 0274 01       		.uleb128 0x1
 5325 0275 13       		.uleb128 0x13
 5326 0276 00       		.byte	0
 5327 0277 00       		.byte	0
 5328 0278 2B       		.uleb128 0x2b
 5329 0279 2E       		.uleb128 0x2e
 5330 027a 01       		.byte	0x1
 5331 027b 3F       		.uleb128 0x3f
 5332 027c 0C       		.uleb128 0xc
 5333 027d 03       		.uleb128 0x3
 5334 027e 0E       		.uleb128 0xe
 5335 027f 3A       		.uleb128 0x3a
 5336 0280 0B       		.uleb128 0xb
 5337 0281 3B       		.uleb128 0x3b
 5338 0282 05       		.uleb128 0x5
 5339 0283 27       		.uleb128 0x27
 5340 0284 0C       		.uleb128 0xc
 5341 0285 01       		.uleb128 0x1
 5342 0286 13       		.uleb128 0x13
 5343 0287 00       		.byte	0
 5344 0288 00       		.byte	0
 5345 0289 2C       		.uleb128 0x2c
 5346 028a 2E       		.uleb128 0x2e
 5347 028b 01       		.byte	0x1
 5348 028c 31       		.uleb128 0x31
 5349 028d 13       		.uleb128 0x13
 5350 028e 11       		.uleb128 0x11
 5351 028f 01       		.uleb128 0x1
 5352 0290 12       		.uleb128 0x12
 5353 0291 01       		.uleb128 0x1
 5354 0292 40       		.uleb128 0x40
 5355 0293 06       		.uleb128 0x6
 5356 0294 9742     		.uleb128 0x2117
 5357 0296 0C       		.uleb128 0xc
 5358 0297 01       		.uleb128 0x1
 5359 0298 13       		.uleb128 0x13
 5360 0299 00       		.byte	0
 5361 029a 00       		.byte	0
 5362 029b 2D       		.uleb128 0x2d
 5363 029c 05       		.uleb128 0x5
 5364 029d 00       		.byte	0
 5365 029e 31       		.uleb128 0x31
 5366 029f 13       		.uleb128 0x13
 5367 02a0 02       		.uleb128 0x2
 5368 02a1 06       		.uleb128 0x6
ARM GAS  /tmp/ccM6Uqrc.s 			page 137


 5369 02a2 00       		.byte	0
 5370 02a3 00       		.byte	0
 5371 02a4 2E       		.uleb128 0x2e
 5372 02a5 34       		.uleb128 0x34
 5373 02a6 00       		.byte	0
 5374 02a7 31       		.uleb128 0x31
 5375 02a8 13       		.uleb128 0x13
 5376 02a9 02       		.uleb128 0x2
 5377 02aa 06       		.uleb128 0x6
 5378 02ab 00       		.byte	0
 5379 02ac 00       		.byte	0
 5380 02ad 2F       		.uleb128 0x2f
 5381 02ae 0B       		.uleb128 0xb
 5382 02af 01       		.byte	0x1
 5383 02b0 11       		.uleb128 0x11
 5384 02b1 01       		.uleb128 0x1
 5385 02b2 12       		.uleb128 0x12
 5386 02b3 01       		.uleb128 0x1
 5387 02b4 01       		.uleb128 0x1
 5388 02b5 13       		.uleb128 0x13
 5389 02b6 00       		.byte	0
 5390 02b7 00       		.byte	0
 5391 02b8 30       		.uleb128 0x30
 5392 02b9 0B       		.uleb128 0xb
 5393 02ba 01       		.byte	0x1
 5394 02bb 11       		.uleb128 0x11
 5395 02bc 01       		.uleb128 0x1
 5396 02bd 12       		.uleb128 0x12
 5397 02be 01       		.uleb128 0x1
 5398 02bf 00       		.byte	0
 5399 02c0 00       		.byte	0
 5400 02c1 31       		.uleb128 0x31
 5401 02c2 34       		.uleb128 0x34
 5402 02c3 00       		.byte	0
 5403 02c4 31       		.uleb128 0x31
 5404 02c5 13       		.uleb128 0x13
 5405 02c6 00       		.byte	0
 5406 02c7 00       		.byte	0
 5407 02c8 32       		.uleb128 0x32
 5408 02c9 34       		.uleb128 0x34
 5409 02ca 00       		.byte	0
 5410 02cb 31       		.uleb128 0x31
 5411 02cc 13       		.uleb128 0x13
 5412 02cd 1C       		.uleb128 0x1c
 5413 02ce 0B       		.uleb128 0xb
 5414 02cf 00       		.byte	0
 5415 02d0 00       		.byte	0
 5416 02d1 33       		.uleb128 0x33
 5417 02d2 1D       		.uleb128 0x1d
 5418 02d3 01       		.byte	0x1
 5419 02d4 31       		.uleb128 0x31
 5420 02d5 13       		.uleb128 0x13
 5421 02d6 52       		.uleb128 0x52
 5422 02d7 01       		.uleb128 0x1
 5423 02d8 55       		.uleb128 0x55
 5424 02d9 06       		.uleb128 0x6
 5425 02da 58       		.uleb128 0x58
ARM GAS  /tmp/ccM6Uqrc.s 			page 138


 5426 02db 0B       		.uleb128 0xb
 5427 02dc 59       		.uleb128 0x59
 5428 02dd 05       		.uleb128 0x5
 5429 02de 01       		.uleb128 0x1
 5430 02df 13       		.uleb128 0x13
 5431 02e0 00       		.byte	0
 5432 02e1 00       		.byte	0
 5433 02e2 34       		.uleb128 0x34
 5434 02e3 0B       		.uleb128 0xb
 5435 02e4 01       		.byte	0x1
 5436 02e5 55       		.uleb128 0x55
 5437 02e6 06       		.uleb128 0x6
 5438 02e7 00       		.byte	0
 5439 02e8 00       		.byte	0
 5440 02e9 35       		.uleb128 0x35
 5441 02ea 2E       		.uleb128 0x2e
 5442 02eb 01       		.byte	0x1
 5443 02ec 31       		.uleb128 0x31
 5444 02ed 13       		.uleb128 0x13
 5445 02ee 11       		.uleb128 0x11
 5446 02ef 01       		.uleb128 0x1
 5447 02f0 12       		.uleb128 0x12
 5448 02f1 01       		.uleb128 0x1
 5449 02f2 40       		.uleb128 0x40
 5450 02f3 0A       		.uleb128 0xa
 5451 02f4 9742     		.uleb128 0x2117
 5452 02f6 0C       		.uleb128 0xc
 5453 02f7 01       		.uleb128 0x1
 5454 02f8 13       		.uleb128 0x13
 5455 02f9 00       		.byte	0
 5456 02fa 00       		.byte	0
 5457 02fb 36       		.uleb128 0x36
 5458 02fc 05       		.uleb128 0x5
 5459 02fd 00       		.byte	0
 5460 02fe 31       		.uleb128 0x31
 5461 02ff 13       		.uleb128 0x13
 5462 0300 02       		.uleb128 0x2
 5463 0301 0A       		.uleb128 0xa
 5464 0302 00       		.byte	0
 5465 0303 00       		.byte	0
 5466 0304 37       		.uleb128 0x37
 5467 0305 2E       		.uleb128 0x2e
 5468 0306 00       		.byte	0
 5469 0307 3F       		.uleb128 0x3f
 5470 0308 0C       		.uleb128 0xc
 5471 0309 3C       		.uleb128 0x3c
 5472 030a 0C       		.uleb128 0xc
 5473 030b 8740     		.uleb128 0x2007
 5474 030d 0E       		.uleb128 0xe
 5475 030e 03       		.uleb128 0x3
 5476 030f 0E       		.uleb128 0xe
 5477 0310 3A       		.uleb128 0x3a
 5478 0311 0B       		.uleb128 0xb
 5479 0312 3B       		.uleb128 0x3b
 5480 0313 05       		.uleb128 0x5
 5481 0314 00       		.byte	0
 5482 0315 00       		.byte	0
ARM GAS  /tmp/ccM6Uqrc.s 			page 139


 5483 0316 00       		.byte	0
 5484              		.section	.debug_loc,"",%progbits
 5485              	.Ldebug_loc0:
 5486              	.LLST13:
 5487 0000 58000000 		.4byte	.LFB92-.Ltext0
 5488 0004 5C000000 		.4byte	.LCFI1-.Ltext0
 5489 0008 0200     		.2byte	0x2
 5490 000a 7D       		.byte	0x7d
 5491 000b 00       		.sleb128 0
 5492 000c 5C000000 		.4byte	.LCFI1-.Ltext0
 5493 0010 C6000000 		.4byte	.LFE92-.Ltext0
 5494 0014 0200     		.2byte	0x2
 5495 0016 7D       		.byte	0x7d
 5496 0017 10       		.sleb128 16
 5497 0018 00000000 		.4byte	0
 5498 001c 00000000 		.4byte	0
 5499              	.LLST14:
 5500 0020 58000000 		.4byte	.LVL21-.Ltext0
 5501 0024 74000000 		.4byte	.LVL23-.Ltext0
 5502 0028 0100     		.2byte	0x1
 5503 002a 50       		.byte	0x50
 5504 002b 74000000 		.4byte	.LVL23-.Ltext0
 5505 002f 8E000000 		.4byte	.LVL25-.Ltext0
 5506 0033 0400     		.2byte	0x4
 5507 0035 74       		.byte	0x74
 5508 0036 B170     		.sleb128 -1999
 5509 0038 9F       		.byte	0x9f
 5510 0039 8E000000 		.4byte	.LVL25-.Ltext0
 5511 003d A0000000 		.4byte	.LVL28-.Ltext0
 5512 0041 0400     		.2byte	0x4
 5513 0043 75       		.byte	0x75
 5514 0044 B070     		.sleb128 -2000
 5515 0046 9F       		.byte	0x9f
 5516 0047 A0000000 		.4byte	.LVL28-.Ltext0
 5517 004b A4000000 		.4byte	.LVL29-.Ltext0
 5518 004f 0100     		.2byte	0x1
 5519 0051 50       		.byte	0x50
 5520 0052 A4000000 		.4byte	.LVL29-.Ltext0
 5521 0056 C6000000 		.4byte	.LFE92-.Ltext0
 5522 005a 0400     		.2byte	0x4
 5523 005c 75       		.byte	0x75
 5524 005d B070     		.sleb128 -2000
 5525 005f 9F       		.byte	0x9f
 5526 0060 00000000 		.4byte	0
 5527 0064 00000000 		.4byte	0
 5528              	.LLST15:
 5529 0068 58000000 		.4byte	.LVL21-.Ltext0
 5530 006c 7E000000 		.4byte	.LVL24-.Ltext0
 5531 0070 0100     		.2byte	0x1
 5532 0072 52       		.byte	0x52
 5533 0073 7E000000 		.4byte	.LVL24-.Ltext0
 5534 0077 A0000000 		.4byte	.LVL28-.Ltext0
 5535 007b 0400     		.2byte	0x4
 5536 007d F3       		.byte	0xf3
 5537 007e 01       		.uleb128 0x1
 5538 007f 52       		.byte	0x52
 5539 0080 9F       		.byte	0x9f
ARM GAS  /tmp/ccM6Uqrc.s 			page 140


 5540 0081 A0000000 		.4byte	.LVL28-.Ltext0
 5541 0085 AA000000 		.4byte	.LVL30-.Ltext0
 5542 0089 0100     		.2byte	0x1
 5543 008b 52       		.byte	0x52
 5544 008c AA000000 		.4byte	.LVL30-.Ltext0
 5545 0090 C6000000 		.4byte	.LFE92-.Ltext0
 5546 0094 0400     		.2byte	0x4
 5547 0096 F3       		.byte	0xf3
 5548 0097 01       		.uleb128 0x1
 5549 0098 52       		.byte	0x52
 5550 0099 9F       		.byte	0x9f
 5551 009a 00000000 		.4byte	0
 5552 009e 00000000 		.4byte	0
 5553              	.LLST16:
 5554 00a2 58000000 		.4byte	.LVL21-.Ltext0
 5555 00a6 64000000 		.4byte	.LVL22-.Ltext0
 5556 00aa 0200     		.2byte	0x2
 5557 00ac 30       		.byte	0x30
 5558 00ad 9F       		.byte	0x9f
 5559 00ae 64000000 		.4byte	.LVL22-.Ltext0
 5560 00b2 C6000000 		.4byte	.LFE92-.Ltext0
 5561 00b6 0100     		.2byte	0x1
 5562 00b8 55       		.byte	0x55
 5563 00b9 00000000 		.4byte	0
 5564 00bd 00000000 		.4byte	0
 5565              	.LLST17:
 5566 00c1 58000000 		.4byte	.LVL21-.Ltext0
 5567 00c5 9C000000 		.4byte	.LVL26-.Ltext0
 5568 00c9 0200     		.2byte	0x2
 5569 00cb 30       		.byte	0x30
 5570 00cc 9F       		.byte	0x9f
 5571 00cd 9C000000 		.4byte	.LVL26-.Ltext0
 5572 00d1 9E000000 		.4byte	.LVL27-.Ltext0
 5573 00d5 0100     		.2byte	0x1
 5574 00d7 50       		.byte	0x50
 5575 00d8 A0000000 		.4byte	.LVL28-.Ltext0
 5576 00dc C6000000 		.4byte	.LFE92-.Ltext0
 5577 00e0 0200     		.2byte	0x2
 5578 00e2 30       		.byte	0x30
 5579 00e3 9F       		.byte	0x9f
 5580 00e4 00000000 		.4byte	0
 5581 00e8 00000000 		.4byte	0
 5582              	.LLST11:
 5583 00ec 48000000 		.4byte	.LVL19-.Ltext0
 5584 00f0 50000000 		.4byte	.LVL20-.Ltext0
 5585 00f4 0100     		.2byte	0x1
 5586 00f6 50       		.byte	0x50
 5587 00f7 50000000 		.4byte	.LVL20-.Ltext0
 5588 00fb 58000000 		.4byte	.LFE89-.Ltext0
 5589 00ff 0400     		.2byte	0x4
 5590 0101 F3       		.byte	0xf3
 5591 0102 01       		.uleb128 0x1
 5592 0103 50       		.byte	0x50
 5593 0104 9F       		.byte	0x9f
 5594 0105 00000000 		.4byte	0
 5595 0109 00000000 		.4byte	0
 5596              	.LLST12:
ARM GAS  /tmp/ccM6Uqrc.s 			page 141


 5597 010d 48000000 		.4byte	.LVL19-.Ltext0
 5598 0111 50000000 		.4byte	.LVL20-.Ltext0
 5599 0115 0A00     		.2byte	0xa
 5600 0117 70       		.byte	0x70
 5601 0118 00       		.sleb128 0
 5602 0119 34       		.byte	0x34
 5603 011a 25       		.byte	0x25
 5604 011b 08       		.byte	0x8
 5605 011c FF       		.byte	0xff
 5606 011d 1A       		.byte	0x1a
 5607 011e 3A       		.byte	0x3a
 5608 011f 1E       		.byte	0x1e
 5609 0120 9F       		.byte	0x9f
 5610 0121 50000000 		.4byte	.LVL20-.Ltext0
 5611 0125 58000000 		.4byte	.LFE89-.Ltext0
 5612 0129 0B00     		.2byte	0xb
 5613 012b F3       		.byte	0xf3
 5614 012c 01       		.uleb128 0x1
 5615 012d 50       		.byte	0x50
 5616 012e 34       		.byte	0x34
 5617 012f 25       		.byte	0x25
 5618 0130 08       		.byte	0x8
 5619 0131 FF       		.byte	0xff
 5620 0132 1A       		.byte	0x1a
 5621 0133 3A       		.byte	0x3a
 5622 0134 1E       		.byte	0x1e
 5623 0135 9F       		.byte	0x9f
 5624 0136 00000000 		.4byte	0
 5625 013a 00000000 		.4byte	0
 5626              	.LLST9:
 5627 013e 32000000 		.4byte	.LVL12-.Ltext0
 5628 0142 3C000000 		.4byte	.LVL14-.Ltext0
 5629 0146 0100     		.2byte	0x1
 5630 0148 50       		.byte	0x50
 5631 0149 40000000 		.4byte	.LVL15-.Ltext0
 5632 014d 42000000 		.4byte	.LVL16-.Ltext0
 5633 0151 0100     		.2byte	0x1
 5634 0153 50       		.byte	0x50
 5635 0154 46000000 		.4byte	.LVL18-.Ltext0
 5636 0158 48000000 		.4byte	.LFE88-.Ltext0
 5637 015c 0100     		.2byte	0x1
 5638 015e 50       		.byte	0x50
 5639 015f 00000000 		.4byte	0
 5640 0163 00000000 		.4byte	0
 5641              	.LLST10:
 5642 0167 32000000 		.4byte	.LVL12-.Ltext0
 5643 016b 34000000 		.4byte	.LVL13-.Ltext0
 5644 016f 0200     		.2byte	0x2
 5645 0171 30       		.byte	0x30
 5646 0172 9F       		.byte	0x9f
 5647 0173 34000000 		.4byte	.LVL13-.Ltext0
 5648 0177 48000000 		.4byte	.LFE88-.Ltext0
 5649 017b 0100     		.2byte	0x1
 5650 017d 53       		.byte	0x53
 5651 017e 00000000 		.4byte	0
 5652 0182 00000000 		.4byte	0
 5653              	.LLST21:
ARM GAS  /tmp/ccM6Uqrc.s 			page 142


 5654 0186 F4000000 		.4byte	.LFB87-.Ltext0
 5655 018a F8000000 		.4byte	.LCFI3-.Ltext0
 5656 018e 0200     		.2byte	0x2
 5657 0190 7D       		.byte	0x7d
 5658 0191 00       		.sleb128 0
 5659 0192 F8000000 		.4byte	.LCFI3-.Ltext0
 5660 0196 24010000 		.4byte	.LFE87-.Ltext0
 5661 019a 0200     		.2byte	0x2
 5662 019c 7D       		.byte	0x7d
 5663 019d 10       		.sleb128 16
 5664 019e 00000000 		.4byte	0
 5665 01a2 00000000 		.4byte	0
 5666              	.LLST22:
 5667 01a6 F4000000 		.4byte	.LVL36-.Ltext0
 5668 01aa 05010000 		.4byte	.LVL37-1-.Ltext0
 5669 01ae 0100     		.2byte	0x1
 5670 01b0 50       		.byte	0x50
 5671 01b1 05010000 		.4byte	.LVL37-1-.Ltext0
 5672 01b5 24010000 		.4byte	.LFE87-.Ltext0
 5673 01b9 0100     		.2byte	0x1
 5674 01bb 54       		.byte	0x54
 5675 01bc 00000000 		.4byte	0
 5676 01c0 00000000 		.4byte	0
 5677              	.LLST23:
 5678 01c4 F4000000 		.4byte	.LVL36-.Ltext0
 5679 01c8 08010000 		.4byte	.LVL38-.Ltext0
 5680 01cc 0200     		.2byte	0x2
 5681 01ce 30       		.byte	0x30
 5682 01cf 9F       		.byte	0x9f
 5683 01d0 08010000 		.4byte	.LVL38-.Ltext0
 5684 01d4 24010000 		.4byte	.LFE87-.Ltext0
 5685 01d8 0100     		.2byte	0x1
 5686 01da 55       		.byte	0x55
 5687 01db 00000000 		.4byte	0
 5688 01df 00000000 		.4byte	0
 5689              	.LLST18:
 5690 01e3 C6000000 		.4byte	.LFB86-.Ltext0
 5691 01e7 C8000000 		.4byte	.LCFI2-.Ltext0
 5692 01eb 0200     		.2byte	0x2
 5693 01ed 7D       		.byte	0x7d
 5694 01ee 00       		.sleb128 0
 5695 01ef C8000000 		.4byte	.LCFI2-.Ltext0
 5696 01f3 F4000000 		.4byte	.LFE86-.Ltext0
 5697 01f7 0200     		.2byte	0x2
 5698 01f9 7D       		.byte	0x7d
 5699 01fa 10       		.sleb128 16
 5700 01fb 00000000 		.4byte	0
 5701 01ff 00000000 		.4byte	0
 5702              	.LLST19:
 5703 0203 C6000000 		.4byte	.LVL31-.Ltext0
 5704 0207 CD000000 		.4byte	.LVL32-1-.Ltext0
 5705 020b 0100     		.2byte	0x1
 5706 020d 50       		.byte	0x50
 5707 020e CD000000 		.4byte	.LVL32-1-.Ltext0
 5708 0212 F4000000 		.4byte	.LFE86-.Ltext0
 5709 0216 0100     		.2byte	0x1
 5710 0218 54       		.byte	0x54
ARM GAS  /tmp/ccM6Uqrc.s 			page 143


 5711 0219 00000000 		.4byte	0
 5712 021d 00000000 		.4byte	0
 5713              	.LLST20:
 5714 0221 C6000000 		.4byte	.LVL31-.Ltext0
 5715 0225 D0000000 		.4byte	.LVL33-.Ltext0
 5716 0229 0200     		.2byte	0x2
 5717 022b 30       		.byte	0x30
 5718 022c 9F       		.byte	0x9f
 5719 022d D0000000 		.4byte	.LVL33-.Ltext0
 5720 0231 F4000000 		.4byte	.LFE86-.Ltext0
 5721 0235 0100     		.2byte	0x1
 5722 0237 55       		.byte	0x55
 5723 0238 00000000 		.4byte	0
 5724 023c 00000000 		.4byte	0
 5725              	.LLST6:
 5726 0240 24000000 		.4byte	.LVL8-.Ltext0
 5727 0244 28000000 		.4byte	.LVL9-.Ltext0
 5728 0248 0100     		.2byte	0x1
 5729 024a 50       		.byte	0x50
 5730 024b 28000000 		.4byte	.LVL9-.Ltext0
 5731 024f 32000000 		.4byte	.LFE84-.Ltext0
 5732 0253 0400     		.2byte	0x4
 5733 0255 F3       		.byte	0xf3
 5734 0256 01       		.uleb128 0x1
 5735 0257 50       		.byte	0x50
 5736 0258 9F       		.byte	0x9f
 5737 0259 00000000 		.4byte	0
 5738 025d 00000000 		.4byte	0
 5739              	.LLST7:
 5740 0261 24000000 		.4byte	.LVL8-.Ltext0
 5741 0265 28000000 		.4byte	.LVL9-.Ltext0
 5742 0269 0200     		.2byte	0x2
 5743 026b 30       		.byte	0x30
 5744 026c 9F       		.byte	0x9f
 5745 026d 28000000 		.4byte	.LVL9-.Ltext0
 5746 0271 30000000 		.4byte	.LVL11-.Ltext0
 5747 0275 0100     		.2byte	0x1
 5748 0277 50       		.byte	0x50
 5749 0278 00000000 		.4byte	0
 5750 027c 00000000 		.4byte	0
 5751              	.LLST8:
 5752 0280 24000000 		.4byte	.LVL8-.Ltext0
 5753 0284 2A000000 		.4byte	.LVL10-.Ltext0
 5754 0288 0200     		.2byte	0x2
 5755 028a 30       		.byte	0x30
 5756 028b 9F       		.byte	0x9f
 5757 028c 2A000000 		.4byte	.LVL10-.Ltext0
 5758 0290 32000000 		.4byte	.LFE84-.Ltext0
 5759 0294 0100     		.2byte	0x1
 5760 0296 53       		.byte	0x53
 5761 0297 00000000 		.4byte	0
 5762 029b 00000000 		.4byte	0
 5763              	.LLST0:
 5764 029f 00000000 		.4byte	.LFB82-.Ltext0
 5765 02a3 04000000 		.4byte	.LCFI0-.Ltext0
 5766 02a7 0200     		.2byte	0x2
 5767 02a9 7D       		.byte	0x7d
ARM GAS  /tmp/ccM6Uqrc.s 			page 144


 5768 02aa 00       		.sleb128 0
 5769 02ab 04000000 		.4byte	.LCFI0-.Ltext0
 5770 02af 24000000 		.4byte	.LFE82-.Ltext0
 5771 02b3 0200     		.2byte	0x2
 5772 02b5 7D       		.byte	0x7d
 5773 02b6 0C       		.sleb128 12
 5774 02b7 00000000 		.4byte	0
 5775 02bb 00000000 		.4byte	0
 5776              	.LLST1:
 5777 02bf 00000000 		.4byte	.LVL0-.Ltext0
 5778 02c3 08000000 		.4byte	.LVL2-.Ltext0
 5779 02c7 0100     		.2byte	0x1
 5780 02c9 50       		.byte	0x50
 5781 02ca 08000000 		.4byte	.LVL2-.Ltext0
 5782 02ce 24000000 		.4byte	.LFE82-.Ltext0
 5783 02d2 0400     		.2byte	0x4
 5784 02d4 F3       		.byte	0xf3
 5785 02d5 01       		.uleb128 0x1
 5786 02d6 50       		.byte	0x50
 5787 02d7 9F       		.byte	0x9f
 5788 02d8 00000000 		.4byte	0
 5789 02dc 00000000 		.4byte	0
 5790              	.LLST2:
 5791 02e0 00000000 		.4byte	.LVL0-.Ltext0
 5792 02e4 06000000 		.4byte	.LVL1-.Ltext0
 5793 02e8 0200     		.2byte	0x2
 5794 02ea 30       		.byte	0x30
 5795 02eb 9F       		.byte	0x9f
 5796 02ec 06000000 		.4byte	.LVL1-.Ltext0
 5797 02f0 24000000 		.4byte	.LFE82-.Ltext0
 5798 02f4 0100     		.2byte	0x1
 5799 02f6 52       		.byte	0x52
 5800 02f7 00000000 		.4byte	0
 5801 02fb 00000000 		.4byte	0
 5802              	.LLST3:
 5803 02ff 00000000 		.4byte	.LVL0-.Ltext0
 5804 0303 0A000000 		.4byte	.LVL3-.Ltext0
 5805 0307 0200     		.2byte	0x2
 5806 0309 30       		.byte	0x30
 5807 030a 9F       		.byte	0x9f
 5808 030b 0A000000 		.4byte	.LVL3-.Ltext0
 5809 030f 24000000 		.4byte	.LFE82-.Ltext0
 5810 0313 0100     		.2byte	0x1
 5811 0315 51       		.byte	0x51
 5812 0316 00000000 		.4byte	0
 5813 031a 00000000 		.4byte	0
 5814              	.LLST4:
 5815 031e 00000000 		.4byte	.LVL0-.Ltext0
 5816 0322 08000000 		.4byte	.LVL2-.Ltext0
 5817 0326 0200     		.2byte	0x2
 5818 0328 30       		.byte	0x30
 5819 0329 9F       		.byte	0x9f
 5820 032a 08000000 		.4byte	.LVL2-.Ltext0
 5821 032e 14000000 		.4byte	.LVL4-.Ltext0
 5822 0332 0100     		.2byte	0x1
 5823 0334 50       		.byte	0x50
 5824 0335 00000000 		.4byte	0
ARM GAS  /tmp/ccM6Uqrc.s 			page 145


 5825 0339 00000000 		.4byte	0
 5826              	.LLST5:
 5827 033d 00000000 		.4byte	.LVL0-.Ltext0
 5828 0341 1A000000 		.4byte	.LVL5-.Ltext0
 5829 0345 0200     		.2byte	0x2
 5830 0347 30       		.byte	0x30
 5831 0348 9F       		.byte	0x9f
 5832 0349 1A000000 		.4byte	.LVL5-.Ltext0
 5833 034d 1C000000 		.4byte	.LVL6-.Ltext0
 5834 0351 0100     		.2byte	0x1
 5835 0353 50       		.byte	0x50
 5836 0354 22000000 		.4byte	.LVL7-.Ltext0
 5837 0358 24000000 		.4byte	.LFE82-.Ltext0
 5838 035c 0100     		.2byte	0x1
 5839 035e 50       		.byte	0x50
 5840 035f 00000000 		.4byte	0
 5841 0363 00000000 		.4byte	0
 5842              	.LLST94:
 5843 0367 66070000 		.4byte	.LFB81-.Ltext0
 5844 036b 68070000 		.4byte	.LCFI22-.Ltext0
 5845 036f 0200     		.2byte	0x2
 5846 0371 7D       		.byte	0x7d
 5847 0372 00       		.sleb128 0
 5848 0373 68070000 		.4byte	.LCFI22-.Ltext0
 5849 0377 9C070000 		.4byte	.LFE81-.Ltext0
 5850 037b 0200     		.2byte	0x2
 5851 037d 7D       		.byte	0x7d
 5852 037e 10       		.sleb128 16
 5853 037f 00000000 		.4byte	0
 5854 0383 00000000 		.4byte	0
 5855              	.LLST95:
 5856 0387 66070000 		.4byte	.LVL218-.Ltext0
 5857 038b 79070000 		.4byte	.LVL219-1-.Ltext0
 5858 038f 0100     		.2byte	0x1
 5859 0391 50       		.byte	0x50
 5860 0392 79070000 		.4byte	.LVL219-1-.Ltext0
 5861 0396 98070000 		.4byte	.LVL223-.Ltext0
 5862 039a 0100     		.2byte	0x1
 5863 039c 54       		.byte	0x54
 5864 039d 98070000 		.4byte	.LVL223-.Ltext0
 5865 03a1 9A070000 		.4byte	.LVL224-.Ltext0
 5866 03a5 0100     		.2byte	0x1
 5867 03a7 50       		.byte	0x50
 5868 03a8 9A070000 		.4byte	.LVL224-.Ltext0
 5869 03ac 9C070000 		.4byte	.LFE81-.Ltext0
 5870 03b0 0100     		.2byte	0x1
 5871 03b2 54       		.byte	0x54
 5872 03b3 00000000 		.4byte	0
 5873 03b7 00000000 		.4byte	0
 5874              	.LLST96:
 5875 03bb 66070000 		.4byte	.LVL218-.Ltext0
 5876 03bf 7C070000 		.4byte	.LVL220-.Ltext0
 5877 03c3 0200     		.2byte	0x2
 5878 03c5 30       		.byte	0x30
 5879 03c6 9F       		.byte	0x9f
 5880 03c7 7C070000 		.4byte	.LVL220-.Ltext0
 5881 03cb 98070000 		.4byte	.LVL223-.Ltext0
ARM GAS  /tmp/ccM6Uqrc.s 			page 146


 5882 03cf 0100     		.2byte	0x1
 5883 03d1 55       		.byte	0x55
 5884 03d2 98070000 		.4byte	.LVL223-.Ltext0
 5885 03d6 9C070000 		.4byte	.LFE81-.Ltext0
 5886 03da 0200     		.2byte	0x2
 5887 03dc 30       		.byte	0x30
 5888 03dd 9F       		.byte	0x9f
 5889 03de 00000000 		.4byte	0
 5890 03e2 00000000 		.4byte	0
 5891              	.LLST93:
 5892 03e6 62070000 		.4byte	.LVL216-.Ltext0
 5893 03ea 64070000 		.4byte	.LVL217-.Ltext0
 5894 03ee 0100     		.2byte	0x1
 5895 03f0 50       		.byte	0x50
 5896 03f1 64070000 		.4byte	.LVL217-.Ltext0
 5897 03f5 66070000 		.4byte	.LFE80-.Ltext0
 5898 03f9 0400     		.2byte	0x4
 5899 03fb F3       		.byte	0xf3
 5900 03fc 01       		.uleb128 0x1
 5901 03fd 50       		.byte	0x50
 5902 03fe 9F       		.byte	0x9f
 5903 03ff 00000000 		.4byte	0
 5904 0403 00000000 		.4byte	0
 5905              	.LLST89:
 5906 0407 24070000 		.4byte	.LFB79-.Ltext0
 5907 040b 26070000 		.4byte	.LCFI21-.Ltext0
 5908 040f 0200     		.2byte	0x2
 5909 0411 7D       		.byte	0x7d
 5910 0412 00       		.sleb128 0
 5911 0413 26070000 		.4byte	.LCFI21-.Ltext0
 5912 0417 62070000 		.4byte	.LFE79-.Ltext0
 5913 041b 0200     		.2byte	0x2
 5914 041d 7D       		.byte	0x7d
 5915 041e 10       		.sleb128 16
 5916 041f 00000000 		.4byte	0
 5917 0423 00000000 		.4byte	0
 5918              	.LLST90:
 5919 0427 24070000 		.4byte	.LVL209-.Ltext0
 5920 042b 2D070000 		.4byte	.LVL210-1-.Ltext0
 5921 042f 0100     		.2byte	0x1
 5922 0431 50       		.byte	0x50
 5923 0432 2D070000 		.4byte	.LVL210-1-.Ltext0
 5924 0436 62070000 		.4byte	.LFE79-.Ltext0
 5925 043a 0100     		.2byte	0x1
 5926 043c 54       		.byte	0x54
 5927 043d 00000000 		.4byte	0
 5928 0441 00000000 		.4byte	0
 5929              	.LLST91:
 5930 0445 24070000 		.4byte	.LVL209-.Ltext0
 5931 0449 2D070000 		.4byte	.LVL210-1-.Ltext0
 5932 044d 0100     		.2byte	0x1
 5933 044f 51       		.byte	0x51
 5934 0450 2D070000 		.4byte	.LVL210-1-.Ltext0
 5935 0454 62070000 		.4byte	.LFE79-.Ltext0
 5936 0458 0100     		.2byte	0x1
 5937 045a 55       		.byte	0x55
 5938 045b 00000000 		.4byte	0
ARM GAS  /tmp/ccM6Uqrc.s 			page 147


 5939 045f 00000000 		.4byte	0
 5940              	.LLST92:
 5941 0463 30070000 		.4byte	.LVL211-.Ltext0
 5942 0467 34070000 		.4byte	.LVL212-.Ltext0
 5943 046b 0100     		.2byte	0x1
 5944 046d 50       		.byte	0x50
 5945 046e 34070000 		.4byte	.LVL212-.Ltext0
 5946 0472 62070000 		.4byte	.LFE79-.Ltext0
 5947 0476 0100     		.2byte	0x1
 5948 0478 56       		.byte	0x56
 5949 0479 00000000 		.4byte	0
 5950 047d 00000000 		.4byte	0
 5951              	.LLST87:
 5952 0481 F2060000 		.4byte	.LFB77-.Ltext0
 5953 0485 F6060000 		.4byte	.LCFI20-.Ltext0
 5954 0489 0200     		.2byte	0x2
 5955 048b 7D       		.byte	0x7d
 5956 048c 00       		.sleb128 0
 5957 048d F6060000 		.4byte	.LCFI20-.Ltext0
 5958 0491 24070000 		.4byte	.LFE77-.Ltext0
 5959 0495 0200     		.2byte	0x2
 5960 0497 7D       		.byte	0x7d
 5961 0498 08       		.sleb128 8
 5962 0499 00000000 		.4byte	0
 5963 049d 00000000 		.4byte	0
 5964              	.LLST88:
 5965 04a1 F2060000 		.4byte	.LVL206-.Ltext0
 5966 04a5 07070000 		.4byte	.LVL207-1-.Ltext0
 5967 04a9 0100     		.2byte	0x1
 5968 04ab 50       		.byte	0x50
 5969 04ac 07070000 		.4byte	.LVL207-1-.Ltext0
 5970 04b0 1E070000 		.4byte	.LVL208-.Ltext0
 5971 04b4 0100     		.2byte	0x1
 5972 04b6 54       		.byte	0x54
 5973 04b7 1E070000 		.4byte	.LVL208-.Ltext0
 5974 04bb 24070000 		.4byte	.LFE77-.Ltext0
 5975 04bf 0400     		.2byte	0x4
 5976 04c1 F3       		.byte	0xf3
 5977 04c2 01       		.uleb128 0x1
 5978 04c3 50       		.byte	0x50
 5979 04c4 9F       		.byte	0x9f
 5980 04c5 00000000 		.4byte	0
 5981 04c9 00000000 		.4byte	0
 5982              	.LLST84:
 5983 04cd 82060000 		.4byte	.LFB76-.Ltext0
 5984 04d1 84060000 		.4byte	.LCFI19-.Ltext0
 5985 04d5 0200     		.2byte	0x2
 5986 04d7 7D       		.byte	0x7d
 5987 04d8 00       		.sleb128 0
 5988 04d9 84060000 		.4byte	.LCFI19-.Ltext0
 5989 04dd F0060000 		.4byte	.LFE76-.Ltext0
 5990 04e1 0200     		.2byte	0x2
 5991 04e3 7D       		.byte	0x7d
 5992 04e4 10       		.sleb128 16
 5993 04e5 00000000 		.4byte	0
 5994 04e9 00000000 		.4byte	0
 5995              	.LLST85:
ARM GAS  /tmp/ccM6Uqrc.s 			page 148


 5996 04ed 82060000 		.4byte	.LVL199-.Ltext0
 5997 04f1 A5060000 		.4byte	.LVL200-1-.Ltext0
 5998 04f5 0100     		.2byte	0x1
 5999 04f7 50       		.byte	0x50
 6000 04f8 A5060000 		.4byte	.LVL200-1-.Ltext0
 6001 04fc EC060000 		.4byte	.LVL203-.Ltext0
 6002 0500 0100     		.2byte	0x1
 6003 0502 54       		.byte	0x54
 6004 0503 EC060000 		.4byte	.LVL203-.Ltext0
 6005 0507 EE060000 		.4byte	.LVL204-.Ltext0
 6006 050b 0100     		.2byte	0x1
 6007 050d 50       		.byte	0x50
 6008 050e EE060000 		.4byte	.LVL204-.Ltext0
 6009 0512 F0060000 		.4byte	.LFE76-.Ltext0
 6010 0516 0100     		.2byte	0x1
 6011 0518 54       		.byte	0x54
 6012 0519 00000000 		.4byte	0
 6013 051d 00000000 		.4byte	0
 6014              	.LLST86:
 6015 0521 82060000 		.4byte	.LVL199-.Ltext0
 6016 0525 A5060000 		.4byte	.LVL200-1-.Ltext0
 6017 0529 0100     		.2byte	0x1
 6018 052b 51       		.byte	0x51
 6019 052c A5060000 		.4byte	.LVL200-1-.Ltext0
 6020 0530 EC060000 		.4byte	.LVL203-.Ltext0
 6021 0534 0400     		.2byte	0x4
 6022 0536 F3       		.byte	0xf3
 6023 0537 01       		.uleb128 0x1
 6024 0538 51       		.byte	0x51
 6025 0539 9F       		.byte	0x9f
 6026 053a EC060000 		.4byte	.LVL203-.Ltext0
 6027 053e F0060000 		.4byte	.LFE76-.Ltext0
 6028 0542 0100     		.2byte	0x1
 6029 0544 51       		.byte	0x51
 6030 0545 00000000 		.4byte	0
 6031 0549 00000000 		.4byte	0
 6032              	.LLST79:
 6033 054d 28060000 		.4byte	.LFB75-.Ltext0
 6034 0551 2A060000 		.4byte	.LCFI18-.Ltext0
 6035 0555 0200     		.2byte	0x2
 6036 0557 7D       		.byte	0x7d
 6037 0558 00       		.sleb128 0
 6038 0559 2A060000 		.4byte	.LCFI18-.Ltext0
 6039 055d 82060000 		.4byte	.LFE75-.Ltext0
 6040 0561 0200     		.2byte	0x2
 6041 0563 7D       		.byte	0x7d
 6042 0564 10       		.sleb128 16
 6043 0565 00000000 		.4byte	0
 6044 0569 00000000 		.4byte	0
 6045              	.LLST80:
 6046 056d 28060000 		.4byte	.LVL190-.Ltext0
 6047 0571 33060000 		.4byte	.LVL192-1-.Ltext0
 6048 0575 0100     		.2byte	0x1
 6049 0577 50       		.byte	0x50
 6050 0578 33060000 		.4byte	.LVL192-1-.Ltext0
 6051 057c 7E060000 		.4byte	.LVL197-.Ltext0
 6052 0580 0400     		.2byte	0x4
ARM GAS  /tmp/ccM6Uqrc.s 			page 149


 6053 0582 F3       		.byte	0xf3
 6054 0583 01       		.uleb128 0x1
 6055 0584 50       		.byte	0x50
 6056 0585 9F       		.byte	0x9f
 6057 0586 7E060000 		.4byte	.LVL197-.Ltext0
 6058 058a 80060000 		.4byte	.LVL198-.Ltext0
 6059 058e 0100     		.2byte	0x1
 6060 0590 50       		.byte	0x50
 6061 0591 80060000 		.4byte	.LVL198-.Ltext0
 6062 0595 82060000 		.4byte	.LFE75-.Ltext0
 6063 0599 0400     		.2byte	0x4
 6064 059b F3       		.byte	0xf3
 6065 059c 01       		.uleb128 0x1
 6066 059d 50       		.byte	0x50
 6067 059e 9F       		.byte	0x9f
 6068 059f 00000000 		.4byte	0
 6069 05a3 00000000 		.4byte	0
 6070              	.LLST81:
 6071 05a7 28060000 		.4byte	.LVL190-.Ltext0
 6072 05ab 2C060000 		.4byte	.LVL191-.Ltext0
 6073 05af 0100     		.2byte	0x1
 6074 05b1 52       		.byte	0x52
 6075 05b2 2C060000 		.4byte	.LVL191-.Ltext0
 6076 05b6 82060000 		.4byte	.LFE75-.Ltext0
 6077 05ba 0400     		.2byte	0x4
 6078 05bc F3       		.byte	0xf3
 6079 05bd 01       		.uleb128 0x1
 6080 05be 52       		.byte	0x52
 6081 05bf 9F       		.byte	0x9f
 6082 05c0 00000000 		.4byte	0
 6083 05c4 00000000 		.4byte	0
 6084              	.LLST82:
 6085 05c8 28060000 		.4byte	.LVL190-.Ltext0
 6086 05cc 33060000 		.4byte	.LVL192-1-.Ltext0
 6087 05d0 0100     		.2byte	0x1
 6088 05d2 53       		.byte	0x53
 6089 05d3 33060000 		.4byte	.LVL192-1-.Ltext0
 6090 05d7 82060000 		.4byte	.LFE75-.Ltext0
 6091 05db 0100     		.2byte	0x1
 6092 05dd 52       		.byte	0x52
 6093 05de 00000000 		.4byte	0
 6094 05e2 00000000 		.4byte	0
 6095              	.LLST83:
 6096 05e6 28060000 		.4byte	.LVL190-.Ltext0
 6097 05ea 34060000 		.4byte	.LVL192-.Ltext0
 6098 05ee 0200     		.2byte	0x2
 6099 05f0 30       		.byte	0x30
 6100 05f1 9F       		.byte	0x9f
 6101 05f2 34060000 		.4byte	.LVL192-.Ltext0
 6102 05f6 4C060000 		.4byte	.LVL193-.Ltext0
 6103 05fa 0100     		.2byte	0x1
 6104 05fc 50       		.byte	0x50
 6105 05fd 7E060000 		.4byte	.LVL197-.Ltext0
 6106 0601 82060000 		.4byte	.LFE75-.Ltext0
 6107 0605 0200     		.2byte	0x2
 6108 0607 30       		.byte	0x30
 6109 0608 9F       		.byte	0x9f
ARM GAS  /tmp/ccM6Uqrc.s 			page 150


 6110 0609 00000000 		.4byte	0
 6111 060d 00000000 		.4byte	0
 6112              	.LLST73:
 6113 0611 48050000 		.4byte	.LFB74-.Ltext0
 6114 0615 4C050000 		.4byte	.LCFI15-.Ltext0
 6115 0619 0200     		.2byte	0x2
 6116 061b 7D       		.byte	0x7d
 6117 061c 00       		.sleb128 0
 6118 061d 4C050000 		.4byte	.LCFI15-.Ltext0
 6119 0621 62050000 		.4byte	.LCFI16-.Ltext0
 6120 0625 0200     		.2byte	0x2
 6121 0627 7D       		.byte	0x7d
 6122 0628 28       		.sleb128 40
 6123 0629 62050000 		.4byte	.LCFI16-.Ltext0
 6124 062d 66050000 		.4byte	.LCFI17-.Ltext0
 6125 0631 0200     		.2byte	0x2
 6126 0633 7D       		.byte	0x7d
 6127 0634 20       		.sleb128 32
 6128 0635 66050000 		.4byte	.LCFI17-.Ltext0
 6129 0639 28060000 		.4byte	.LFE74-.Ltext0
 6130 063d 0200     		.2byte	0x2
 6131 063f 7D       		.byte	0x7d
 6132 0640 28       		.sleb128 40
 6133 0641 00000000 		.4byte	0
 6134 0645 00000000 		.4byte	0
 6135              	.LLST74:
 6136 0649 48050000 		.4byte	.LVL170-.Ltext0
 6137 064d 5E050000 		.4byte	.LVL172-.Ltext0
 6138 0651 0100     		.2byte	0x1
 6139 0653 50       		.byte	0x50
 6140 0654 5E050000 		.4byte	.LVL172-.Ltext0
 6141 0658 66050000 		.4byte	.LVL173-.Ltext0
 6142 065c 0100     		.2byte	0x1
 6143 065e 54       		.byte	0x54
 6144 065f 66050000 		.4byte	.LVL173-.Ltext0
 6145 0663 7F050000 		.4byte	.LVL175-1-.Ltext0
 6146 0667 0100     		.2byte	0x1
 6147 0669 50       		.byte	0x50
 6148 066a 7F050000 		.4byte	.LVL175-1-.Ltext0
 6149 066e 1E060000 		.4byte	.LVL188-.Ltext0
 6150 0672 0100     		.2byte	0x1
 6151 0674 54       		.byte	0x54
 6152 0675 1E060000 		.4byte	.LVL188-.Ltext0
 6153 0679 20060000 		.4byte	.LVL189-.Ltext0
 6154 067d 0100     		.2byte	0x1
 6155 067f 50       		.byte	0x50
 6156 0680 20060000 		.4byte	.LVL189-.Ltext0
 6157 0684 28060000 		.4byte	.LFE74-.Ltext0
 6158 0688 0100     		.2byte	0x1
 6159 068a 54       		.byte	0x54
 6160 068b 00000000 		.4byte	0
 6161 068f 00000000 		.4byte	0
 6162              	.LLST75:
 6163 0693 48050000 		.4byte	.LVL170-.Ltext0
 6164 0697 5E050000 		.4byte	.LVL172-.Ltext0
 6165 069b 0100     		.2byte	0x1
 6166 069d 51       		.byte	0x51
ARM GAS  /tmp/ccM6Uqrc.s 			page 151


 6167 069e 5E050000 		.4byte	.LVL172-.Ltext0
 6168 06a2 66050000 		.4byte	.LVL173-.Ltext0
 6169 06a6 0400     		.2byte	0x4
 6170 06a8 F3       		.byte	0xf3
 6171 06a9 01       		.uleb128 0x1
 6172 06aa 51       		.byte	0x51
 6173 06ab 9F       		.byte	0x9f
 6174 06ac 66050000 		.4byte	.LVL173-.Ltext0
 6175 06b0 76050000 		.4byte	.LVL174-.Ltext0
 6176 06b4 0100     		.2byte	0x1
 6177 06b6 51       		.byte	0x51
 6178 06b7 76050000 		.4byte	.LVL174-.Ltext0
 6179 06bb AA050000 		.4byte	.LVL177-.Ltext0
 6180 06bf 0100     		.2byte	0x1
 6181 06c1 58       		.byte	0x58
 6182 06c2 AA050000 		.4byte	.LVL177-.Ltext0
 6183 06c6 1E060000 		.4byte	.LVL188-.Ltext0
 6184 06ca 0400     		.2byte	0x4
 6185 06cc F3       		.byte	0xf3
 6186 06cd 01       		.uleb128 0x1
 6187 06ce 51       		.byte	0x51
 6188 06cf 9F       		.byte	0x9f
 6189 06d0 1E060000 		.4byte	.LVL188-.Ltext0
 6190 06d4 28060000 		.4byte	.LFE74-.Ltext0
 6191 06d8 0100     		.2byte	0x1
 6192 06da 51       		.byte	0x51
 6193 06db 00000000 		.4byte	0
 6194 06df 00000000 		.4byte	0
 6195              	.LLST76:
 6196 06e3 48050000 		.4byte	.LVL170-.Ltext0
 6197 06e7 50050000 		.4byte	.LVL171-.Ltext0
 6198 06eb 0100     		.2byte	0x1
 6199 06ed 52       		.byte	0x52
 6200 06ee 50050000 		.4byte	.LVL171-.Ltext0
 6201 06f2 28060000 		.4byte	.LFE74-.Ltext0
 6202 06f6 0100     		.2byte	0x1
 6203 06f8 5A       		.byte	0x5a
 6204 06f9 00000000 		.4byte	0
 6205 06fd 00000000 		.4byte	0
 6206              	.LLST77:
 6207 0701 48050000 		.4byte	.LVL170-.Ltext0
 6208 0705 5E050000 		.4byte	.LVL172-.Ltext0
 6209 0709 0200     		.2byte	0x2
 6210 070b 30       		.byte	0x30
 6211 070c 9F       		.byte	0x9f
 6212 070d 66050000 		.4byte	.LVL173-.Ltext0
 6213 0711 BA050000 		.4byte	.LVL178-.Ltext0
 6214 0715 0200     		.2byte	0x2
 6215 0717 30       		.byte	0x30
 6216 0718 9F       		.byte	0x9f
 6217 0719 BA050000 		.4byte	.LVL178-.Ltext0
 6218 071d C2050000 		.4byte	.LVL179-.Ltext0
 6219 0721 0100     		.2byte	0x1
 6220 0723 51       		.byte	0x51
 6221 0724 C6050000 		.4byte	.LVL180-.Ltext0
 6222 0728 CB050000 		.4byte	.LVL181-1-.Ltext0
 6223 072c 0100     		.2byte	0x1
ARM GAS  /tmp/ccM6Uqrc.s 			page 152


 6224 072e 51       		.byte	0x51
 6225 072f D8050000 		.4byte	.LVL182-.Ltext0
 6226 0733 F2050000 		.4byte	.LVL186-.Ltext0
 6227 0737 0200     		.2byte	0x2
 6228 0739 30       		.byte	0x30
 6229 073a 9F       		.byte	0x9f
 6230 073b F2050000 		.4byte	.LVL186-.Ltext0
 6231 073f F4050000 		.4byte	.LVL187-.Ltext0
 6232 0743 0100     		.2byte	0x1
 6233 0745 51       		.byte	0x51
 6234 0746 1E060000 		.4byte	.LVL188-.Ltext0
 6235 074a 28060000 		.4byte	.LFE74-.Ltext0
 6236 074e 0200     		.2byte	0x2
 6237 0750 30       		.byte	0x30
 6238 0751 9F       		.byte	0x9f
 6239 0752 00000000 		.4byte	0
 6240 0756 00000000 		.4byte	0
 6241              	.LLST78:
 6242 075a A6050000 		.4byte	.LVL176-.Ltext0
 6243 075e 1E060000 		.4byte	.LVL188-.Ltext0
 6244 0762 0100     		.2byte	0x1
 6245 0764 55       		.byte	0x55
 6246 0765 00000000 		.4byte	0
 6247 0769 00000000 		.4byte	0
 6248              	.LLST67:
 6249 076d 90040000 		.4byte	.LFB73-.Ltext0
 6250 0771 94040000 		.4byte	.LCFI12-.Ltext0
 6251 0775 0200     		.2byte	0x2
 6252 0777 7D       		.byte	0x7d
 6253 0778 00       		.sleb128 0
 6254 0779 94040000 		.4byte	.LCFI12-.Ltext0
 6255 077d AA040000 		.4byte	.LCFI13-.Ltext0
 6256 0781 0200     		.2byte	0x2
 6257 0783 7D       		.byte	0x7d
 6258 0784 28       		.sleb128 40
 6259 0785 AA040000 		.4byte	.LCFI13-.Ltext0
 6260 0789 AE040000 		.4byte	.LCFI14-.Ltext0
 6261 078d 0200     		.2byte	0x2
 6262 078f 7D       		.byte	0x7d
 6263 0790 20       		.sleb128 32
 6264 0791 AE040000 		.4byte	.LCFI14-.Ltext0
 6265 0795 48050000 		.4byte	.LFE73-.Ltext0
 6266 0799 0200     		.2byte	0x2
 6267 079b 7D       		.byte	0x7d
 6268 079c 28       		.sleb128 40
 6269 079d 00000000 		.4byte	0
 6270 07a1 00000000 		.4byte	0
 6271              	.LLST68:
 6272 07a5 90040000 		.4byte	.LVL150-.Ltext0
 6273 07a9 A6040000 		.4byte	.LVL152-.Ltext0
 6274 07ad 0100     		.2byte	0x1
 6275 07af 50       		.byte	0x50
 6276 07b0 A6040000 		.4byte	.LVL152-.Ltext0
 6277 07b4 AE040000 		.4byte	.LVL153-.Ltext0
 6278 07b8 0100     		.2byte	0x1
 6279 07ba 54       		.byte	0x54
 6280 07bb AE040000 		.4byte	.LVL153-.Ltext0
ARM GAS  /tmp/ccM6Uqrc.s 			page 153


 6281 07bf C7040000 		.4byte	.LVL155-1-.Ltext0
 6282 07c3 0100     		.2byte	0x1
 6283 07c5 50       		.byte	0x50
 6284 07c6 C7040000 		.4byte	.LVL155-1-.Ltext0
 6285 07ca 44050000 		.4byte	.LVL168-.Ltext0
 6286 07ce 0100     		.2byte	0x1
 6287 07d0 54       		.byte	0x54
 6288 07d1 44050000 		.4byte	.LVL168-.Ltext0
 6289 07d5 46050000 		.4byte	.LVL169-.Ltext0
 6290 07d9 0100     		.2byte	0x1
 6291 07db 50       		.byte	0x50
 6292 07dc 46050000 		.4byte	.LVL169-.Ltext0
 6293 07e0 48050000 		.4byte	.LFE73-.Ltext0
 6294 07e4 0100     		.2byte	0x1
 6295 07e6 54       		.byte	0x54
 6296 07e7 00000000 		.4byte	0
 6297 07eb 00000000 		.4byte	0
 6298              	.LLST69:
 6299 07ef 90040000 		.4byte	.LVL150-.Ltext0
 6300 07f3 A6040000 		.4byte	.LVL152-.Ltext0
 6301 07f7 0100     		.2byte	0x1
 6302 07f9 51       		.byte	0x51
 6303 07fa A6040000 		.4byte	.LVL152-.Ltext0
 6304 07fe AE040000 		.4byte	.LVL153-.Ltext0
 6305 0802 0400     		.2byte	0x4
 6306 0804 F3       		.byte	0xf3
 6307 0805 01       		.uleb128 0x1
 6308 0806 51       		.byte	0x51
 6309 0807 9F       		.byte	0x9f
 6310 0808 AE040000 		.4byte	.LVL153-.Ltext0
 6311 080c BE040000 		.4byte	.LVL154-.Ltext0
 6312 0810 0100     		.2byte	0x1
 6313 0812 51       		.byte	0x51
 6314 0813 BE040000 		.4byte	.LVL154-.Ltext0
 6315 0817 F2040000 		.4byte	.LVL157-.Ltext0
 6316 081b 0100     		.2byte	0x1
 6317 081d 58       		.byte	0x58
 6318 081e F2040000 		.4byte	.LVL157-.Ltext0
 6319 0822 44050000 		.4byte	.LVL168-.Ltext0
 6320 0826 0400     		.2byte	0x4
 6321 0828 F3       		.byte	0xf3
 6322 0829 01       		.uleb128 0x1
 6323 082a 51       		.byte	0x51
 6324 082b 9F       		.byte	0x9f
 6325 082c 44050000 		.4byte	.LVL168-.Ltext0
 6326 0830 48050000 		.4byte	.LFE73-.Ltext0
 6327 0834 0100     		.2byte	0x1
 6328 0836 51       		.byte	0x51
 6329 0837 00000000 		.4byte	0
 6330 083b 00000000 		.4byte	0
 6331              	.LLST70:
 6332 083f 90040000 		.4byte	.LVL150-.Ltext0
 6333 0843 98040000 		.4byte	.LVL151-.Ltext0
 6334 0847 0100     		.2byte	0x1
 6335 0849 52       		.byte	0x52
 6336 084a 98040000 		.4byte	.LVL151-.Ltext0
 6337 084e 48050000 		.4byte	.LFE73-.Ltext0
ARM GAS  /tmp/ccM6Uqrc.s 			page 154


 6338 0852 0100     		.2byte	0x1
 6339 0854 5A       		.byte	0x5a
 6340 0855 00000000 		.4byte	0
 6341 0859 00000000 		.4byte	0
 6342              	.LLST71:
 6343 085d 90040000 		.4byte	.LVL150-.Ltext0
 6344 0861 A6040000 		.4byte	.LVL152-.Ltext0
 6345 0865 0200     		.2byte	0x2
 6346 0867 30       		.byte	0x30
 6347 0868 9F       		.byte	0x9f
 6348 0869 AE040000 		.4byte	.LVL153-.Ltext0
 6349 086d 02050000 		.4byte	.LVL158-.Ltext0
 6350 0871 0200     		.2byte	0x2
 6351 0873 30       		.byte	0x30
 6352 0874 9F       		.byte	0x9f
 6353 0875 02050000 		.4byte	.LVL158-.Ltext0
 6354 0879 0A050000 		.4byte	.LVL159-.Ltext0
 6355 087d 0100     		.2byte	0x1
 6356 087f 51       		.byte	0x51
 6357 0880 0E050000 		.4byte	.LVL160-.Ltext0
 6358 0884 13050000 		.4byte	.LVL161-1-.Ltext0
 6359 0888 0100     		.2byte	0x1
 6360 088a 51       		.byte	0x51
 6361 088b 20050000 		.4byte	.LVL162-.Ltext0
 6362 088f 3A050000 		.4byte	.LVL166-.Ltext0
 6363 0893 0200     		.2byte	0x2
 6364 0895 30       		.byte	0x30
 6365 0896 9F       		.byte	0x9f
 6366 0897 3A050000 		.4byte	.LVL166-.Ltext0
 6367 089b 3C050000 		.4byte	.LVL167-.Ltext0
 6368 089f 0100     		.2byte	0x1
 6369 08a1 51       		.byte	0x51
 6370 08a2 44050000 		.4byte	.LVL168-.Ltext0
 6371 08a6 48050000 		.4byte	.LFE73-.Ltext0
 6372 08aa 0200     		.2byte	0x2
 6373 08ac 30       		.byte	0x30
 6374 08ad 9F       		.byte	0x9f
 6375 08ae 00000000 		.4byte	0
 6376 08b2 00000000 		.4byte	0
 6377              	.LLST72:
 6378 08b6 EE040000 		.4byte	.LVL156-.Ltext0
 6379 08ba 44050000 		.4byte	.LVL168-.Ltext0
 6380 08be 0100     		.2byte	0x1
 6381 08c0 55       		.byte	0x55
 6382 08c1 00000000 		.4byte	0
 6383 08c5 00000000 		.4byte	0
 6384              	.LLST63:
 6385 08c9 38040000 		.4byte	.LFB72-.Ltext0
 6386 08cd 3A040000 		.4byte	.LCFI9-.Ltext0
 6387 08d1 0200     		.2byte	0x2
 6388 08d3 7D       		.byte	0x7d
 6389 08d4 00       		.sleb128 0
 6390 08d5 3A040000 		.4byte	.LCFI9-.Ltext0
 6391 08d9 52040000 		.4byte	.LCFI10-.Ltext0
 6392 08dd 0200     		.2byte	0x2
 6393 08df 7D       		.byte	0x7d
 6394 08e0 20       		.sleb128 32
ARM GAS  /tmp/ccM6Uqrc.s 			page 155


 6395 08e1 52040000 		.4byte	.LCFI10-.Ltext0
 6396 08e5 54040000 		.4byte	.LCFI11-.Ltext0
 6397 08e9 0200     		.2byte	0x2
 6398 08eb 7D       		.byte	0x7d
 6399 08ec 14       		.sleb128 20
 6400 08ed 54040000 		.4byte	.LCFI11-.Ltext0
 6401 08f1 90040000 		.4byte	.LFE72-.Ltext0
 6402 08f5 0200     		.2byte	0x2
 6403 08f7 7D       		.byte	0x7d
 6404 08f8 20       		.sleb128 32
 6405 08f9 00000000 		.4byte	0
 6406 08fd 00000000 		.4byte	0
 6407              	.LLST64:
 6408 0901 38040000 		.4byte	.LVL141-.Ltext0
 6409 0905 4C040000 		.4byte	.LVL143-.Ltext0
 6410 0909 0100     		.2byte	0x1
 6411 090b 50       		.byte	0x50
 6412 090c 4C040000 		.4byte	.LVL143-.Ltext0
 6413 0910 54040000 		.4byte	.LVL144-.Ltext0
 6414 0914 0100     		.2byte	0x1
 6415 0916 55       		.byte	0x55
 6416 0917 54040000 		.4byte	.LVL144-.Ltext0
 6417 091b 5D040000 		.4byte	.LVL146-1-.Ltext0
 6418 091f 0100     		.2byte	0x1
 6419 0921 50       		.byte	0x50
 6420 0922 5D040000 		.4byte	.LVL146-1-.Ltext0
 6421 0926 90040000 		.4byte	.LFE72-.Ltext0
 6422 092a 0100     		.2byte	0x1
 6423 092c 55       		.byte	0x55
 6424 092d 00000000 		.4byte	0
 6425 0931 00000000 		.4byte	0
 6426              	.LLST65:
 6427 0935 38040000 		.4byte	.LVL141-.Ltext0
 6428 0939 4C040000 		.4byte	.LVL143-.Ltext0
 6429 093d 0100     		.2byte	0x1
 6430 093f 51       		.byte	0x51
 6431 0940 4C040000 		.4byte	.LVL143-.Ltext0
 6432 0944 54040000 		.4byte	.LVL144-.Ltext0
 6433 0948 0100     		.2byte	0x1
 6434 094a 54       		.byte	0x54
 6435 094b 54040000 		.4byte	.LVL144-.Ltext0
 6436 094f 5A040000 		.4byte	.LVL145-.Ltext0
 6437 0953 0100     		.2byte	0x1
 6438 0955 51       		.byte	0x51
 6439 0956 5A040000 		.4byte	.LVL145-.Ltext0
 6440 095a 90040000 		.4byte	.LFE72-.Ltext0
 6441 095e 0100     		.2byte	0x1
 6442 0960 54       		.byte	0x54
 6443 0961 00000000 		.4byte	0
 6444 0965 00000000 		.4byte	0
 6445              	.LLST66:
 6446 0969 38040000 		.4byte	.LVL141-.Ltext0
 6447 096d 3E040000 		.4byte	.LVL142-.Ltext0
 6448 0971 0100     		.2byte	0x1
 6449 0973 52       		.byte	0x52
 6450 0974 3E040000 		.4byte	.LVL142-.Ltext0
 6451 0978 90040000 		.4byte	.LFE72-.Ltext0
ARM GAS  /tmp/ccM6Uqrc.s 			page 156


 6452 097c 0100     		.2byte	0x1
 6453 097e 57       		.byte	0x57
 6454 097f 00000000 		.4byte	0
 6455 0983 00000000 		.4byte	0
 6456              	.LLST56:
 6457 0987 88030000 		.4byte	.LFB71-.Ltext0
 6458 098b 8A030000 		.4byte	.LCFI8-.Ltext0
 6459 098f 0200     		.2byte	0x2
 6460 0991 7D       		.byte	0x7d
 6461 0992 00       		.sleb128 0
 6462 0993 8A030000 		.4byte	.LCFI8-.Ltext0
 6463 0997 38040000 		.4byte	.LFE71-.Ltext0
 6464 099b 0200     		.2byte	0x2
 6465 099d 7D       		.byte	0x7d
 6466 099e 10       		.sleb128 16
 6467 099f 00000000 		.4byte	0
 6468 09a3 00000000 		.4byte	0
 6469              	.LLST57:
 6470 09a7 88030000 		.4byte	.LVL119-.Ltext0
 6471 09ab 96030000 		.4byte	.LVL120-.Ltext0
 6472 09af 0100     		.2byte	0x1
 6473 09b1 50       		.byte	0x50
 6474 09b2 96030000 		.4byte	.LVL120-.Ltext0
 6475 09b6 34040000 		.4byte	.LVL140-.Ltext0
 6476 09ba 0100     		.2byte	0x1
 6477 09bc 54       		.byte	0x54
 6478 09bd 34040000 		.4byte	.LVL140-.Ltext0
 6479 09c1 38040000 		.4byte	.LFE71-.Ltext0
 6480 09c5 0400     		.2byte	0x4
 6481 09c7 F3       		.byte	0xf3
 6482 09c8 01       		.uleb128 0x1
 6483 09c9 50       		.byte	0x50
 6484 09ca 9F       		.byte	0x9f
 6485 09cb 00000000 		.4byte	0
 6486 09cf 00000000 		.4byte	0
 6487              	.LLST58:
 6488 09d3 88030000 		.4byte	.LVL119-.Ltext0
 6489 09d7 B2030000 		.4byte	.LVL122-.Ltext0
 6490 09db 0100     		.2byte	0x1
 6491 09dd 51       		.byte	0x51
 6492 09de B2030000 		.4byte	.LVL122-.Ltext0
 6493 09e2 D0030000 		.4byte	.LVL125-.Ltext0
 6494 09e6 0100     		.2byte	0x1
 6495 09e8 55       		.byte	0x55
 6496 09e9 D0030000 		.4byte	.LVL125-.Ltext0
 6497 09ed EC030000 		.4byte	.LVL130-.Ltext0
 6498 09f1 0400     		.2byte	0x4
 6499 09f3 F3       		.byte	0xf3
 6500 09f4 01       		.uleb128 0x1
 6501 09f5 51       		.byte	0x51
 6502 09f6 9F       		.byte	0x9f
 6503 09f7 EC030000 		.4byte	.LVL130-.Ltext0
 6504 09fb 04040000 		.4byte	.LVL134-.Ltext0
 6505 09ff 0100     		.2byte	0x1
 6506 0a01 51       		.byte	0x51
 6507 0a02 04040000 		.4byte	.LVL134-.Ltext0
 6508 0a06 38040000 		.4byte	.LFE71-.Ltext0
ARM GAS  /tmp/ccM6Uqrc.s 			page 157


 6509 0a0a 0400     		.2byte	0x4
 6510 0a0c F3       		.byte	0xf3
 6511 0a0d 01       		.uleb128 0x1
 6512 0a0e 51       		.byte	0x51
 6513 0a0f 9F       		.byte	0x9f
 6514 0a10 00000000 		.4byte	0
 6515 0a14 00000000 		.4byte	0
 6516              	.LLST59:
 6517 0a18 88030000 		.4byte	.LVL119-.Ltext0
 6518 0a1c AE030000 		.4byte	.LVL121-.Ltext0
 6519 0a20 0100     		.2byte	0x1
 6520 0a22 52       		.byte	0x52
 6521 0a23 AE030000 		.4byte	.LVL121-.Ltext0
 6522 0a27 EC030000 		.4byte	.LVL130-.Ltext0
 6523 0a2b 0400     		.2byte	0x4
 6524 0a2d F3       		.byte	0xf3
 6525 0a2e 01       		.uleb128 0x1
 6526 0a2f 52       		.byte	0x52
 6527 0a30 9F       		.byte	0x9f
 6528 0a31 EC030000 		.4byte	.LVL130-.Ltext0
 6529 0a35 EF030000 		.4byte	.LVL131-1-.Ltext0
 6530 0a39 0100     		.2byte	0x1
 6531 0a3b 52       		.byte	0x52
 6532 0a3c EF030000 		.4byte	.LVL131-1-.Ltext0
 6533 0a40 38040000 		.4byte	.LFE71-.Ltext0
 6534 0a44 0400     		.2byte	0x4
 6535 0a46 F3       		.byte	0xf3
 6536 0a47 01       		.uleb128 0x1
 6537 0a48 52       		.byte	0x52
 6538 0a49 9F       		.byte	0x9f
 6539 0a4a 00000000 		.4byte	0
 6540 0a4e 00000000 		.4byte	0
 6541              	.LLST60:
 6542 0a52 88030000 		.4byte	.LVL119-.Ltext0
 6543 0a56 C2030000 		.4byte	.LVL124-.Ltext0
 6544 0a5a 0200     		.2byte	0x2
 6545 0a5c 30       		.byte	0x30
 6546 0a5d 9F       		.byte	0x9f
 6547 0a5e C2030000 		.4byte	.LVL124-.Ltext0
 6548 0a62 D4030000 		.4byte	.LVL126-.Ltext0
 6549 0a66 0100     		.2byte	0x1
 6550 0a68 50       		.byte	0x50
 6551 0a69 D4030000 		.4byte	.LVL126-.Ltext0
 6552 0a6d E8030000 		.4byte	.LVL129-.Ltext0
 6553 0a71 0100     		.2byte	0x1
 6554 0a73 55       		.byte	0x55
 6555 0a74 EC030000 		.4byte	.LVL130-.Ltext0
 6556 0a78 04040000 		.4byte	.LVL134-.Ltext0
 6557 0a7c 0200     		.2byte	0x2
 6558 0a7e 30       		.byte	0x30
 6559 0a7f 9F       		.byte	0x9f
 6560 0a80 04040000 		.4byte	.LVL134-.Ltext0
 6561 0a84 2A040000 		.4byte	.LVL139-.Ltext0
 6562 0a88 0100     		.2byte	0x1
 6563 0a8a 55       		.byte	0x55
 6564 0a8b 00000000 		.4byte	0
 6565 0a8f 00000000 		.4byte	0
ARM GAS  /tmp/ccM6Uqrc.s 			page 158


 6566              	.LLST61:
 6567 0a93 88030000 		.4byte	.LVL119-.Ltext0
 6568 0a97 E8030000 		.4byte	.LVL129-.Ltext0
 6569 0a9b 0200     		.2byte	0x2
 6570 0a9d 30       		.byte	0x30
 6571 0a9e 9F       		.byte	0x9f
 6572 0a9f EC030000 		.4byte	.LVL130-.Ltext0
 6573 0aa3 0A040000 		.4byte	.LVL135-.Ltext0
 6574 0aa7 0200     		.2byte	0x2
 6575 0aa9 30       		.byte	0x30
 6576 0aaa 9F       		.byte	0x9f
 6577 0aab 0A040000 		.4byte	.LVL135-.Ltext0
 6578 0aaf 12040000 		.4byte	.LVL136-.Ltext0
 6579 0ab3 0100     		.2byte	0x1
 6580 0ab5 50       		.byte	0x50
 6581 0ab6 12040000 		.4byte	.LVL136-.Ltext0
 6582 0aba 1C040000 		.4byte	.LVL137-.Ltext0
 6583 0abe 0500     		.2byte	0x5
 6584 0ac0 70       		.byte	0x70
 6585 0ac1 80A305   		.sleb128 86400
 6586 0ac4 9F       		.byte	0x9f
 6587 0ac5 1C040000 		.4byte	.LVL137-.Ltext0
 6588 0ac9 1F040000 		.4byte	.LVL138-1-.Ltext0
 6589 0acd 0100     		.2byte	0x1
 6590 0acf 51       		.byte	0x51
 6591 0ad0 00000000 		.4byte	0
 6592 0ad4 00000000 		.4byte	0
 6593              	.LLST62:
 6594 0ad8 88030000 		.4byte	.LVL119-.Ltext0
 6595 0adc C2030000 		.4byte	.LVL124-.Ltext0
 6596 0ae0 0200     		.2byte	0x2
 6597 0ae2 30       		.byte	0x30
 6598 0ae3 9F       		.byte	0x9f
 6599 0ae4 C2030000 		.4byte	.LVL124-.Ltext0
 6600 0ae8 D6030000 		.4byte	.LVL127-.Ltext0
 6601 0aec 0D00     		.2byte	0xd
 6602 0aee 70       		.byte	0x70
 6603 0aef 00       		.sleb128 0
 6604 0af0 F7       		.byte	0xf7
 6605 0af1 25       		.uleb128 0x25
 6606 0af2 0A       		.byte	0xa
 6607 0af3 100E     		.2byte	0xe10
 6608 0af5 F7       		.byte	0xf7
 6609 0af6 25       		.uleb128 0x25
 6610 0af7 1B       		.byte	0x1b
 6611 0af8 F7       		.byte	0xf7
 6612 0af9 00       		.uleb128 0
 6613 0afa 9F       		.byte	0x9f
 6614 0afb EC030000 		.4byte	.LVL130-.Ltext0
 6615 0aff 04040000 		.4byte	.LVL134-.Ltext0
 6616 0b03 0200     		.2byte	0x2
 6617 0b05 30       		.byte	0x30
 6618 0b06 9F       		.byte	0x9f
 6619 0b07 00000000 		.4byte	0
 6620 0b0b 00000000 		.4byte	0
 6621              	.LLST36:
 6622 0b0f 78010000 		.4byte	.LFB69-.Ltext0
ARM GAS  /tmp/ccM6Uqrc.s 			page 159


 6623 0b13 7A010000 		.4byte	.LCFI6-.Ltext0
 6624 0b17 0200     		.2byte	0x2
 6625 0b19 7D       		.byte	0x7d
 6626 0b1a 00       		.sleb128 0
 6627 0b1b 7A010000 		.4byte	.LCFI6-.Ltext0
 6628 0b1f 1A020000 		.4byte	.LFE69-.Ltext0
 6629 0b23 0200     		.2byte	0x2
 6630 0b25 7D       		.byte	0x7d
 6631 0b26 10       		.sleb128 16
 6632 0b27 00000000 		.4byte	0
 6633 0b2b 00000000 		.4byte	0
 6634              	.LLST37:
 6635 0b2f 78010000 		.4byte	.LVL55-.Ltext0
 6636 0b33 90010000 		.4byte	.LVL56-.Ltext0
 6637 0b37 0100     		.2byte	0x1
 6638 0b39 50       		.byte	0x50
 6639 0b3a 90010000 		.4byte	.LVL56-.Ltext0
 6640 0b3e 1A020000 		.4byte	.LFE69-.Ltext0
 6641 0b42 0100     		.2byte	0x1
 6642 0b44 54       		.byte	0x54
 6643 0b45 00000000 		.4byte	0
 6644 0b49 00000000 		.4byte	0
 6645              	.LLST38:
 6646 0b4d 78010000 		.4byte	.LVL55-.Ltext0
 6647 0b51 94010000 		.4byte	.LVL57-.Ltext0
 6648 0b55 0100     		.2byte	0x1
 6649 0b57 51       		.byte	0x51
 6650 0b58 94010000 		.4byte	.LVL57-.Ltext0
 6651 0b5c 1A020000 		.4byte	.LFE69-.Ltext0
 6652 0b60 0400     		.2byte	0x4
 6653 0b62 F3       		.byte	0xf3
 6654 0b63 01       		.uleb128 0x1
 6655 0b64 51       		.byte	0x51
 6656 0b65 9F       		.byte	0x9f
 6657 0b66 00000000 		.4byte	0
 6658 0b6a 00000000 		.4byte	0
 6659              	.LLST39:
 6660 0b6e 78010000 		.4byte	.LVL55-.Ltext0
 6661 0b72 A4010000 		.4byte	.LVL58-.Ltext0
 6662 0b76 0100     		.2byte	0x1
 6663 0b78 52       		.byte	0x52
 6664 0b79 A4010000 		.4byte	.LVL58-.Ltext0
 6665 0b7d BC010000 		.4byte	.LVL61-.Ltext0
 6666 0b81 0400     		.2byte	0x4
 6667 0b83 F3       		.byte	0xf3
 6668 0b84 01       		.uleb128 0x1
 6669 0b85 52       		.byte	0x52
 6670 0b86 9F       		.byte	0x9f
 6671 0b87 BC010000 		.4byte	.LVL61-.Ltext0
 6672 0b8b BF010000 		.4byte	.LVL62-1-.Ltext0
 6673 0b8f 0100     		.2byte	0x1
 6674 0b91 52       		.byte	0x52
 6675 0b92 BF010000 		.4byte	.LVL62-1-.Ltext0
 6676 0b96 1A020000 		.4byte	.LFE69-.Ltext0
 6677 0b9a 0400     		.2byte	0x4
 6678 0b9c F3       		.byte	0xf3
 6679 0b9d 01       		.uleb128 0x1
ARM GAS  /tmp/ccM6Uqrc.s 			page 160


 6680 0b9e 52       		.byte	0x52
 6681 0b9f 9F       		.byte	0x9f
 6682 0ba0 00000000 		.4byte	0
 6683 0ba4 00000000 		.4byte	0
 6684              	.LLST40:
 6685 0ba8 78010000 		.4byte	.LVL55-.Ltext0
 6686 0bac A4010000 		.4byte	.LVL58-.Ltext0
 6687 0bb0 0200     		.2byte	0x2
 6688 0bb2 30       		.byte	0x30
 6689 0bb3 9F       		.byte	0x9f
 6690 0bb4 A4010000 		.4byte	.LVL58-.Ltext0
 6691 0bb8 B8010000 		.4byte	.LVL60-.Ltext0
 6692 0bbc 0100     		.2byte	0x1
 6693 0bbe 55       		.byte	0x55
 6694 0bbf BC010000 		.4byte	.LVL61-.Ltext0
 6695 0bc3 DC010000 		.4byte	.LVL65-.Ltext0
 6696 0bc7 0200     		.2byte	0x2
 6697 0bc9 30       		.byte	0x30
 6698 0bca 9F       		.byte	0x9f
 6699 0bcb DC010000 		.4byte	.LVL65-.Ltext0
 6700 0bcf 16020000 		.4byte	.LVL70-.Ltext0
 6701 0bd3 0100     		.2byte	0x1
 6702 0bd5 55       		.byte	0x55
 6703 0bd6 00000000 		.4byte	0
 6704 0bda 00000000 		.4byte	0
 6705              	.LLST41:
 6706 0bde 78010000 		.4byte	.LVL55-.Ltext0
 6707 0be2 B8010000 		.4byte	.LVL60-.Ltext0
 6708 0be6 0200     		.2byte	0x2
 6709 0be8 30       		.byte	0x30
 6710 0be9 9F       		.byte	0x9f
 6711 0bea BC010000 		.4byte	.LVL61-.Ltext0
 6712 0bee EE010000 		.4byte	.LVL66-.Ltext0
 6713 0bf2 0200     		.2byte	0x2
 6714 0bf4 30       		.byte	0x30
 6715 0bf5 9F       		.byte	0x9f
 6716 0bf6 EE010000 		.4byte	.LVL66-.Ltext0
 6717 0bfa F6010000 		.4byte	.LVL67-.Ltext0
 6718 0bfe 0100     		.2byte	0x1
 6719 0c00 50       		.byte	0x50
 6720 0c01 F6010000 		.4byte	.LVL67-.Ltext0
 6721 0c05 00020000 		.4byte	.LVL68-.Ltext0
 6722 0c09 0500     		.2byte	0x5
 6723 0c0b 70       		.byte	0x70
 6724 0c0c 80A305   		.sleb128 86400
 6725 0c0f 9F       		.byte	0x9f
 6726 0c10 00020000 		.4byte	.LVL68-.Ltext0
 6727 0c14 03020000 		.4byte	.LVL69-1-.Ltext0
 6728 0c18 0100     		.2byte	0x1
 6729 0c1a 51       		.byte	0x51
 6730 0c1b 00000000 		.4byte	0
 6731 0c1f 00000000 		.4byte	0
 6732              	.LLST100:
 6733 0c23 3C080000 		.4byte	.LFB66-.Ltext0
 6734 0c27 3E080000 		.4byte	.LCFI24-.Ltext0
 6735 0c2b 0200     		.2byte	0x2
 6736 0c2d 7D       		.byte	0x7d
ARM GAS  /tmp/ccM6Uqrc.s 			page 161


 6737 0c2e 00       		.sleb128 0
 6738 0c2f 3E080000 		.4byte	.LCFI24-.Ltext0
 6739 0c33 9C080000 		.4byte	.LFE66-.Ltext0
 6740 0c37 0200     		.2byte	0x2
 6741 0c39 7D       		.byte	0x7d
 6742 0c3a 10       		.sleb128 16
 6743 0c3b 00000000 		.4byte	0
 6744 0c3f 00000000 		.4byte	0
 6745              	.LLST101:
 6746 0c43 3C080000 		.4byte	.LVL236-.Ltext0
 6747 0c47 49080000 		.4byte	.LVL237-1-.Ltext0
 6748 0c4b 0100     		.2byte	0x1
 6749 0c4d 50       		.byte	0x50
 6750 0c4e 49080000 		.4byte	.LVL237-1-.Ltext0
 6751 0c52 9C080000 		.4byte	.LFE66-.Ltext0
 6752 0c56 0100     		.2byte	0x1
 6753 0c58 54       		.byte	0x54
 6754 0c59 00000000 		.4byte	0
 6755 0c5d 00000000 		.4byte	0
 6756              	.LLST97:
 6757 0c61 9C070000 		.4byte	.LFB65-.Ltext0
 6758 0c65 9E070000 		.4byte	.LCFI23-.Ltext0
 6759 0c69 0200     		.2byte	0x2
 6760 0c6b 7D       		.byte	0x7d
 6761 0c6c 00       		.sleb128 0
 6762 0c6d 9E070000 		.4byte	.LCFI23-.Ltext0
 6763 0c71 3C080000 		.4byte	.LFE65-.Ltext0
 6764 0c75 0200     		.2byte	0x2
 6765 0c77 7D       		.byte	0x7d
 6766 0c78 08       		.sleb128 8
 6767 0c79 00000000 		.4byte	0
 6768 0c7d 00000000 		.4byte	0
 6769              	.LLST98:
 6770 0c81 9C070000 		.4byte	.LVL225-.Ltext0
 6771 0c85 AF070000 		.4byte	.LVL226-1-.Ltext0
 6772 0c89 0100     		.2byte	0x1
 6773 0c8b 50       		.byte	0x50
 6774 0c8c AF070000 		.4byte	.LVL226-1-.Ltext0
 6775 0c90 36080000 		.4byte	.LVL235-.Ltext0
 6776 0c94 0100     		.2byte	0x1
 6777 0c96 54       		.byte	0x54
 6778 0c97 36080000 		.4byte	.LVL235-.Ltext0
 6779 0c9b 3C080000 		.4byte	.LFE65-.Ltext0
 6780 0c9f 0400     		.2byte	0x4
 6781 0ca1 F3       		.byte	0xf3
 6782 0ca2 01       		.uleb128 0x1
 6783 0ca3 50       		.byte	0x50
 6784 0ca4 9F       		.byte	0x9f
 6785 0ca5 00000000 		.4byte	0
 6786 0ca9 00000000 		.4byte	0
 6787              	.LLST99:
 6788 0cad 9C070000 		.4byte	.LVL225-.Ltext0
 6789 0cb1 BC070000 		.4byte	.LVL228-.Ltext0
 6790 0cb5 0200     		.2byte	0x2
 6791 0cb7 30       		.byte	0x30
 6792 0cb8 9F       		.byte	0x9f
 6793 0cb9 C4070000 		.4byte	.LVL229-.Ltext0
ARM GAS  /tmp/ccM6Uqrc.s 			page 162


 6794 0cbd FC070000 		.4byte	.LVL231-.Ltext0
 6795 0cc1 0200     		.2byte	0x2
 6796 0cc3 30       		.byte	0x30
 6797 0cc4 9F       		.byte	0x9f
 6798 0cc5 FC070000 		.4byte	.LVL231-.Ltext0
 6799 0cc9 14080000 		.4byte	.LVL233-.Ltext0
 6800 0ccd 0100     		.2byte	0x1
 6801 0ccf 50       		.byte	0x50
 6802 0cd0 00000000 		.4byte	0
 6803 0cd4 00000000 		.4byte	0
 6804              	.LLST24:
 6805 0cd8 24010000 		.4byte	.LFB83-.Ltext0
 6806 0cdc 26010000 		.4byte	.LCFI4-.Ltext0
 6807 0ce0 0200     		.2byte	0x2
 6808 0ce2 7D       		.byte	0x7d
 6809 0ce3 00       		.sleb128 0
 6810 0ce4 26010000 		.4byte	.LCFI4-.Ltext0
 6811 0ce8 4C010000 		.4byte	.LFE83-.Ltext0
 6812 0cec 0200     		.2byte	0x2
 6813 0cee 7D       		.byte	0x7d
 6814 0cef 10       		.sleb128 16
 6815 0cf0 00000000 		.4byte	0
 6816 0cf4 00000000 		.4byte	0
 6817              	.LLST25:
 6818 0cf8 24010000 		.4byte	.LVL41-.Ltext0
 6819 0cfc 2D010000 		.4byte	.LVL42-1-.Ltext0
 6820 0d00 0100     		.2byte	0x1
 6821 0d02 50       		.byte	0x50
 6822 0d03 2D010000 		.4byte	.LVL42-1-.Ltext0
 6823 0d07 4C010000 		.4byte	.LFE83-.Ltext0
 6824 0d0b 0100     		.2byte	0x1
 6825 0d0d 55       		.byte	0x55
 6826 0d0e 00000000 		.4byte	0
 6827 0d12 00000000 		.4byte	0
 6828              	.LLST26:
 6829 0d16 24010000 		.4byte	.LVL41-.Ltext0
 6830 0d1a 2D010000 		.4byte	.LVL42-1-.Ltext0
 6831 0d1e 0100     		.2byte	0x1
 6832 0d20 51       		.byte	0x51
 6833 0d21 2D010000 		.4byte	.LVL42-1-.Ltext0
 6834 0d25 36010000 		.4byte	.LVL44-.Ltext0
 6835 0d29 0100     		.2byte	0x1
 6836 0d2b 54       		.byte	0x54
 6837 0d2c 36010000 		.4byte	.LVL44-.Ltext0
 6838 0d30 48010000 		.4byte	.LVL46-.Ltext0
 6839 0d34 0400     		.2byte	0x4
 6840 0d36 F3       		.byte	0xf3
 6841 0d37 01       		.uleb128 0x1
 6842 0d38 51       		.byte	0x51
 6843 0d39 9F       		.byte	0x9f
 6844 0d3a 48010000 		.4byte	.LVL46-.Ltext0
 6845 0d3e 4C010000 		.4byte	.LFE83-.Ltext0
 6846 0d42 0100     		.2byte	0x1
 6847 0d44 54       		.byte	0x54
 6848 0d45 00000000 		.4byte	0
 6849 0d49 00000000 		.4byte	0
 6850              	.LLST27:
ARM GAS  /tmp/ccM6Uqrc.s 			page 163


 6851 0d4d 24010000 		.4byte	.LVL41-.Ltext0
 6852 0d51 4A010000 		.4byte	.LVL47-.Ltext0
 6853 0d55 0200     		.2byte	0x2
 6854 0d57 30       		.byte	0x30
 6855 0d58 9F       		.byte	0x9f
 6856 0d59 4A010000 		.4byte	.LVL47-.Ltext0
 6857 0d5d 4C010000 		.4byte	.LFE83-.Ltext0
 6858 0d61 0100     		.2byte	0x1
 6859 0d63 50       		.byte	0x50
 6860 0d64 00000000 		.4byte	0
 6861 0d68 00000000 		.4byte	0
 6862              	.LLST28:
 6863 0d6c 30010000 		.4byte	.LVL43-.Ltext0
 6864 0d70 36010000 		.4byte	.LVL44-.Ltext0
 6865 0d74 0100     		.2byte	0x1
 6866 0d76 54       		.byte	0x54
 6867 0d77 36010000 		.4byte	.LVL44-.Ltext0
 6868 0d7b 48010000 		.4byte	.LVL46-.Ltext0
 6869 0d7f 0400     		.2byte	0x4
 6870 0d81 F3       		.byte	0xf3
 6871 0d82 01       		.uleb128 0x1
 6872 0d83 51       		.byte	0x51
 6873 0d84 9F       		.byte	0x9f
 6874 0d85 00000000 		.4byte	0
 6875 0d89 00000000 		.4byte	0
 6876              	.LLST29:
 6877 0d8d 30010000 		.4byte	.LVL43-.Ltext0
 6878 0d91 48010000 		.4byte	.LVL46-.Ltext0
 6879 0d95 0100     		.2byte	0x1
 6880 0d97 55       		.byte	0x55
 6881 0d98 00000000 		.4byte	0
 6882 0d9c 00000000 		.4byte	0
 6883              	.LLST30:
 6884 0da0 4C010000 		.4byte	.LFB85-.Ltext0
 6885 0da4 4E010000 		.4byte	.LCFI5-.Ltext0
 6886 0da8 0200     		.2byte	0x2
 6887 0daa 7D       		.byte	0x7d
 6888 0dab 00       		.sleb128 0
 6889 0dac 4E010000 		.4byte	.LCFI5-.Ltext0
 6890 0db0 74010000 		.4byte	.LFE85-.Ltext0
 6891 0db4 0200     		.2byte	0x2
 6892 0db6 7D       		.byte	0x7d
 6893 0db7 10       		.sleb128 16
 6894 0db8 00000000 		.4byte	0
 6895 0dbc 00000000 		.4byte	0
 6896              	.LLST31:
 6897 0dc0 4C010000 		.4byte	.LVL48-.Ltext0
 6898 0dc4 55010000 		.4byte	.LVL49-1-.Ltext0
 6899 0dc8 0100     		.2byte	0x1
 6900 0dca 50       		.byte	0x50
 6901 0dcb 55010000 		.4byte	.LVL49-1-.Ltext0
 6902 0dcf 74010000 		.4byte	.LFE85-.Ltext0
 6903 0dd3 0100     		.2byte	0x1
 6904 0dd5 55       		.byte	0x55
 6905 0dd6 00000000 		.4byte	0
 6906 0dda 00000000 		.4byte	0
 6907              	.LLST32:
ARM GAS  /tmp/ccM6Uqrc.s 			page 164


 6908 0dde 4C010000 		.4byte	.LVL48-.Ltext0
 6909 0de2 55010000 		.4byte	.LVL49-1-.Ltext0
 6910 0de6 0100     		.2byte	0x1
 6911 0de8 51       		.byte	0x51
 6912 0de9 55010000 		.4byte	.LVL49-1-.Ltext0
 6913 0ded 5E010000 		.4byte	.LVL51-.Ltext0
 6914 0df1 0100     		.2byte	0x1
 6915 0df3 54       		.byte	0x54
 6916 0df4 5E010000 		.4byte	.LVL51-.Ltext0
 6917 0df8 70010000 		.4byte	.LVL53-.Ltext0
 6918 0dfc 0400     		.2byte	0x4
 6919 0dfe F3       		.byte	0xf3
 6920 0dff 01       		.uleb128 0x1
 6921 0e00 51       		.byte	0x51
 6922 0e01 9F       		.byte	0x9f
 6923 0e02 70010000 		.4byte	.LVL53-.Ltext0
 6924 0e06 74010000 		.4byte	.LFE85-.Ltext0
 6925 0e0a 0100     		.2byte	0x1
 6926 0e0c 54       		.byte	0x54
 6927 0e0d 00000000 		.4byte	0
 6928 0e11 00000000 		.4byte	0
 6929              	.LLST33:
 6930 0e15 4C010000 		.4byte	.LVL48-.Ltext0
 6931 0e19 72010000 		.4byte	.LVL54-.Ltext0
 6932 0e1d 0200     		.2byte	0x2
 6933 0e1f 30       		.byte	0x30
 6934 0e20 9F       		.byte	0x9f
 6935 0e21 72010000 		.4byte	.LVL54-.Ltext0
 6936 0e25 74010000 		.4byte	.LFE85-.Ltext0
 6937 0e29 0100     		.2byte	0x1
 6938 0e2b 50       		.byte	0x50
 6939 0e2c 00000000 		.4byte	0
 6940 0e30 00000000 		.4byte	0
 6941              	.LLST34:
 6942 0e34 58010000 		.4byte	.LVL50-.Ltext0
 6943 0e38 5E010000 		.4byte	.LVL51-.Ltext0
 6944 0e3c 0100     		.2byte	0x1
 6945 0e3e 54       		.byte	0x54
 6946 0e3f 5E010000 		.4byte	.LVL51-.Ltext0
 6947 0e43 70010000 		.4byte	.LVL53-.Ltext0
 6948 0e47 0400     		.2byte	0x4
 6949 0e49 F3       		.byte	0xf3
 6950 0e4a 01       		.uleb128 0x1
 6951 0e4b 51       		.byte	0x51
 6952 0e4c 9F       		.byte	0x9f
 6953 0e4d 00000000 		.4byte	0
 6954 0e51 00000000 		.4byte	0
 6955              	.LLST35:
 6956 0e55 58010000 		.4byte	.LVL50-.Ltext0
 6957 0e59 70010000 		.4byte	.LVL53-.Ltext0
 6958 0e5d 0100     		.2byte	0x1
 6959 0e5f 55       		.byte	0x55
 6960 0e60 00000000 		.4byte	0
 6961 0e64 00000000 		.4byte	0
 6962              	.LLST42:
 6963 0e68 1A020000 		.4byte	.LFB70-.Ltext0
 6964 0e6c 1E020000 		.4byte	.LCFI7-.Ltext0
ARM GAS  /tmp/ccM6Uqrc.s 			page 165


 6965 0e70 0200     		.2byte	0x2
 6966 0e72 7D       		.byte	0x7d
 6967 0e73 00       		.sleb128 0
 6968 0e74 1E020000 		.4byte	.LCFI7-.Ltext0
 6969 0e78 88030000 		.4byte	.LFE70-.Ltext0
 6970 0e7c 0200     		.2byte	0x2
 6971 0e7e 7D       		.byte	0x7d
 6972 0e7f 20       		.sleb128 32
 6973 0e80 00000000 		.4byte	0
 6974 0e84 00000000 		.4byte	0
 6975              	.LLST43:
 6976 0e88 1A020000 		.4byte	.LVL71-.Ltext0
 6977 0e8c 26020000 		.4byte	.LVL72-.Ltext0
 6978 0e90 0100     		.2byte	0x1
 6979 0e92 50       		.byte	0x50
 6980 0e93 26020000 		.4byte	.LVL72-.Ltext0
 6981 0e97 2C020000 		.4byte	.LVL73-.Ltext0
 6982 0e9b 0100     		.2byte	0x1
 6983 0e9d 54       		.byte	0x54
 6984 0e9e 2C020000 		.4byte	.LVL73-.Ltext0
 6985 0ea2 3B020000 		.4byte	.LVL75-1-.Ltext0
 6986 0ea6 0100     		.2byte	0x1
 6987 0ea8 50       		.byte	0x50
 6988 0ea9 3B020000 		.4byte	.LVL75-1-.Ltext0
 6989 0ead 88030000 		.4byte	.LFE70-.Ltext0
 6990 0eb1 0100     		.2byte	0x1
 6991 0eb3 54       		.byte	0x54
 6992 0eb4 00000000 		.4byte	0
 6993 0eb8 00000000 		.4byte	0
 6994              	.LLST44:
 6995 0ebc 1A020000 		.4byte	.LVL71-.Ltext0
 6996 0ec0 26020000 		.4byte	.LVL72-.Ltext0
 6997 0ec4 0100     		.2byte	0x1
 6998 0ec6 51       		.byte	0x51
 6999 0ec7 26020000 		.4byte	.LVL72-.Ltext0
 7000 0ecb 2C020000 		.4byte	.LVL73-.Ltext0
 7001 0ecf 0100     		.2byte	0x1
 7002 0ed1 55       		.byte	0x55
 7003 0ed2 2C020000 		.4byte	.LVL73-.Ltext0
 7004 0ed6 3B020000 		.4byte	.LVL75-1-.Ltext0
 7005 0eda 0100     		.2byte	0x1
 7006 0edc 51       		.byte	0x51
 7007 0edd 3B020000 		.4byte	.LVL75-1-.Ltext0
 7008 0ee1 88030000 		.4byte	.LFE70-.Ltext0
 7009 0ee5 0100     		.2byte	0x1
 7010 0ee7 55       		.byte	0x55
 7011 0ee8 00000000 		.4byte	0
 7012 0eec 00000000 		.4byte	0
 7013              	.LLST45:
 7014 0ef0 1A020000 		.4byte	.LVL71-.Ltext0
 7015 0ef4 26020000 		.4byte	.LVL72-.Ltext0
 7016 0ef8 0100     		.2byte	0x1
 7017 0efa 52       		.byte	0x52
 7018 0efb 26020000 		.4byte	.LVL72-.Ltext0
 7019 0eff 2C020000 		.4byte	.LVL73-.Ltext0
 7020 0f03 0100     		.2byte	0x1
 7021 0f05 58       		.byte	0x58
ARM GAS  /tmp/ccM6Uqrc.s 			page 166


 7022 0f06 2C020000 		.4byte	.LVL73-.Ltext0
 7023 0f0a 3B020000 		.4byte	.LVL75-1-.Ltext0
 7024 0f0e 0100     		.2byte	0x1
 7025 0f10 52       		.byte	0x52
 7026 0f11 3B020000 		.4byte	.LVL75-1-.Ltext0
 7027 0f15 88030000 		.4byte	.LFE70-.Ltext0
 7028 0f19 0100     		.2byte	0x1
 7029 0f1b 58       		.byte	0x58
 7030 0f1c 00000000 		.4byte	0
 7031 0f20 00000000 		.4byte	0
 7032              	.LLST46:
 7033 0f24 38020000 		.4byte	.LVL74-.Ltext0
 7034 0f28 3B020000 		.4byte	.LVL75-1-.Ltext0
 7035 0f2c 0100     		.2byte	0x1
 7036 0f2e 52       		.byte	0x52
 7037 0f2f 3B020000 		.4byte	.LVL75-1-.Ltext0
 7038 0f33 88030000 		.4byte	.LFE70-.Ltext0
 7039 0f37 0100     		.2byte	0x1
 7040 0f39 58       		.byte	0x58
 7041 0f3a 00000000 		.4byte	0
 7042 0f3e 00000000 		.4byte	0
 7043              	.LLST47:
 7044 0f42 38020000 		.4byte	.LVL74-.Ltext0
 7045 0f46 3B020000 		.4byte	.LVL75-1-.Ltext0
 7046 0f4a 0100     		.2byte	0x1
 7047 0f4c 51       		.byte	0x51
 7048 0f4d 3B020000 		.4byte	.LVL75-1-.Ltext0
 7049 0f51 88030000 		.4byte	.LFE70-.Ltext0
 7050 0f55 0100     		.2byte	0x1
 7051 0f57 55       		.byte	0x55
 7052 0f58 00000000 		.4byte	0
 7053 0f5c 00000000 		.4byte	0
 7054              	.LLST48:
 7055 0f60 38020000 		.4byte	.LVL74-.Ltext0
 7056 0f64 3B020000 		.4byte	.LVL75-1-.Ltext0
 7057 0f68 0100     		.2byte	0x1
 7058 0f6a 50       		.byte	0x50
 7059 0f6b 3B020000 		.4byte	.LVL75-1-.Ltext0
 7060 0f6f 88030000 		.4byte	.LFE70-.Ltext0
 7061 0f73 0100     		.2byte	0x1
 7062 0f75 54       		.byte	0x54
 7063 0f76 00000000 		.4byte	0
 7064 0f7a 00000000 		.4byte	0
 7065              	.LLST49:
 7066 0f7e A8020000 		.4byte	.LVL88-.Ltext0
 7067 0f82 B0020000 		.4byte	.LVL89-.Ltext0
 7068 0f86 0F00     		.2byte	0xf
 7069 0f88 77       		.byte	0x77
 7070 0f89 00       		.sleb128 0
 7071 0f8a F7       		.byte	0xf7
 7072 0f8b 25       		.uleb128 0x25
 7073 0f8c 0C       		.byte	0xc
 7074 0f8d 80510100 		.4byte	0x15180
 7075 0f91 F7       		.byte	0xf7
 7076 0f92 25       		.uleb128 0x25
 7077 0f93 1B       		.byte	0x1b
 7078 0f94 F7       		.byte	0xf7
ARM GAS  /tmp/ccM6Uqrc.s 			page 167


 7079 0f95 00       		.uleb128 0
 7080 0f96 9F       		.byte	0x9f
 7081 0f97 00000000 		.4byte	0
 7082 0f9b 00000000 		.4byte	0
 7083              	.LLST50:
 7084 0f9f A8020000 		.4byte	.LVL88-.Ltext0
 7085 0fa3 D6020000 		.4byte	.LVL97-.Ltext0
 7086 0fa7 0100     		.2byte	0x1
 7087 0fa9 54       		.byte	0x54
 7088 0faa FE020000 		.4byte	.LVL102-.Ltext0
 7089 0fae 68030000 		.4byte	.LVL114-.Ltext0
 7090 0fb2 0100     		.2byte	0x1
 7091 0fb4 54       		.byte	0x54
 7092 0fb5 6C030000 		.4byte	.LVL115-.Ltext0
 7093 0fb9 88030000 		.4byte	.LFE70-.Ltext0
 7094 0fbd 0100     		.2byte	0x1
 7095 0fbf 54       		.byte	0x54
 7096 0fc0 00000000 		.4byte	0
 7097 0fc4 00000000 		.4byte	0
 7098              	.LLST51:
 7099 0fc8 A8020000 		.4byte	.LVL88-.Ltext0
 7100 0fcc BE020000 		.4byte	.LVL91-.Ltext0
 7101 0fd0 0200     		.2byte	0x2
 7102 0fd2 30       		.byte	0x30
 7103 0fd3 9F       		.byte	0x9f
 7104 0fd4 BE020000 		.4byte	.LVL91-.Ltext0
 7105 0fd8 D3020000 		.4byte	.LVL96-1-.Ltext0
 7106 0fdc 0100     		.2byte	0x1
 7107 0fde 50       		.byte	0x50
 7108 0fdf FE020000 		.4byte	.LVL102-.Ltext0
 7109 0fe3 68030000 		.4byte	.LVL114-.Ltext0
 7110 0fe7 0100     		.2byte	0x1
 7111 0fe9 50       		.byte	0x50
 7112 0fea 6C030000 		.4byte	.LVL115-.Ltext0
 7113 0fee 88030000 		.4byte	.LFE70-.Ltext0
 7114 0ff2 0100     		.2byte	0x1
 7115 0ff4 50       		.byte	0x50
 7116 0ff5 00000000 		.4byte	0
 7117 0ff9 00000000 		.4byte	0
 7118              	.LLST52:
 7119 0ffd A8020000 		.4byte	.LVL88-.Ltext0
 7120 1001 C0020000 		.4byte	.LVL92-.Ltext0
 7121 1005 0200     		.2byte	0x2
 7122 1007 30       		.byte	0x30
 7123 1008 9F       		.byte	0x9f
 7124 1009 C0020000 		.4byte	.LVL92-.Ltext0
 7125 100d C8020000 		.4byte	.LVL94-.Ltext0
 7126 1011 0100     		.2byte	0x1
 7127 1013 51       		.byte	0x51
 7128 1014 FE020000 		.4byte	.LVL102-.Ltext0
 7129 1018 58030000 		.4byte	.LVL108-.Ltext0
 7130 101c 0100     		.2byte	0x1
 7131 101e 51       		.byte	0x51
 7132 101f 5A030000 		.4byte	.LVL109-.Ltext0
 7133 1023 62030000 		.4byte	.LVL111-.Ltext0
 7134 1027 0100     		.2byte	0x1
 7135 1029 51       		.byte	0x51
ARM GAS  /tmp/ccM6Uqrc.s 			page 168


 7136 102a 64030000 		.4byte	.LVL112-.Ltext0
 7137 102e 68030000 		.4byte	.LVL114-.Ltext0
 7138 1032 0100     		.2byte	0x1
 7139 1034 51       		.byte	0x51
 7140 1035 6C030000 		.4byte	.LVL115-.Ltext0
 7141 1039 78030000 		.4byte	.LVL116-.Ltext0
 7142 103d 0100     		.2byte	0x1
 7143 103f 51       		.byte	0x51
 7144 1040 78030000 		.4byte	.LVL116-.Ltext0
 7145 1044 7E030000 		.4byte	.LVL117-.Ltext0
 7146 1048 0200     		.2byte	0x2
 7147 104a 31       		.byte	0x31
 7148 104b 9F       		.byte	0x9f
 7149 104c 7E030000 		.4byte	.LVL117-.Ltext0
 7150 1050 88030000 		.4byte	.LFE70-.Ltext0
 7151 1054 0100     		.2byte	0x1
 7152 1056 51       		.byte	0x51
 7153 1057 00000000 		.4byte	0
 7154 105b 00000000 		.4byte	0
 7155              	.LLST53:
 7156 105f A8020000 		.4byte	.LVL88-.Ltext0
 7157 1063 C2020000 		.4byte	.LVL93-.Ltext0
 7158 1067 0200     		.2byte	0x2
 7159 1069 30       		.byte	0x30
 7160 106a 9F       		.byte	0x9f
 7161 106b C2020000 		.4byte	.LVL93-.Ltext0
 7162 106f CA020000 		.4byte	.LVL95-.Ltext0
 7163 1073 0100     		.2byte	0x1
 7164 1075 52       		.byte	0x52
 7165 1076 FE020000 		.4byte	.LVL102-.Ltext0
 7166 107a 1E030000 		.4byte	.LVL103-.Ltext0
 7167 107e 0100     		.2byte	0x1
 7168 1080 52       		.byte	0x52
 7169 1081 1E030000 		.4byte	.LVL103-.Ltext0
 7170 1085 22030000 		.4byte	.LVL104-.Ltext0
 7171 1089 0200     		.2byte	0x2
 7172 108b 31       		.byte	0x31
 7173 108c 9F       		.byte	0x9f
 7174 108d 22030000 		.4byte	.LVL104-.Ltext0
 7175 1091 34030000 		.4byte	.LVL106-.Ltext0
 7176 1095 0100     		.2byte	0x1
 7177 1097 52       		.byte	0x52
 7178 1098 5A030000 		.4byte	.LVL109-.Ltext0
 7179 109c 5E030000 		.4byte	.LVL110-.Ltext0
 7180 10a0 0100     		.2byte	0x1
 7181 10a2 52       		.byte	0x52
 7182 10a3 6C030000 		.4byte	.LVL115-.Ltext0
 7183 10a7 78030000 		.4byte	.LVL116-.Ltext0
 7184 10ab 0100     		.2byte	0x1
 7185 10ad 52       		.byte	0x52
 7186 10ae 78030000 		.4byte	.LVL116-.Ltext0
 7187 10b2 7E030000 		.4byte	.LVL117-.Ltext0
 7188 10b6 0200     		.2byte	0x2
 7189 10b8 31       		.byte	0x31
 7190 10b9 9F       		.byte	0x9f
 7191 10ba 7E030000 		.4byte	.LVL117-.Ltext0
 7192 10be 88030000 		.4byte	.LFE70-.Ltext0
ARM GAS  /tmp/ccM6Uqrc.s 			page 169


 7193 10c2 0100     		.2byte	0x1
 7194 10c4 52       		.byte	0x52
 7195 10c5 00000000 		.4byte	0
 7196 10c9 00000000 		.4byte	0
 7197              	.LLST54:
 7198 10cd A8020000 		.4byte	.LVL88-.Ltext0
 7199 10d1 C2020000 		.4byte	.LVL93-.Ltext0
 7200 10d5 0200     		.2byte	0x2
 7201 10d7 30       		.byte	0x30
 7202 10d8 9F       		.byte	0x9f
 7203 10d9 C2020000 		.4byte	.LVL93-.Ltext0
 7204 10dd D6020000 		.4byte	.LVL97-.Ltext0
 7205 10e1 0100     		.2byte	0x1
 7206 10e3 56       		.byte	0x56
 7207 10e4 FE020000 		.4byte	.LVL102-.Ltext0
 7208 10e8 68030000 		.4byte	.LVL114-.Ltext0
 7209 10ec 0100     		.2byte	0x1
 7210 10ee 56       		.byte	0x56
 7211 10ef 6C030000 		.4byte	.LVL115-.Ltext0
 7212 10f3 88030000 		.4byte	.LFE70-.Ltext0
 7213 10f7 0100     		.2byte	0x1
 7214 10f9 56       		.byte	0x56
 7215 10fa 00000000 		.4byte	0
 7216 10fe 00000000 		.4byte	0
 7217              	.LLST55:
 7218 1102 34030000 		.4byte	.LVL106-.Ltext0
 7219 1106 54030000 		.4byte	.LVL107-.Ltext0
 7220 110a 0100     		.2byte	0x1
 7221 110c 52       		.byte	0x52
 7222 110d 54030000 		.4byte	.LVL107-.Ltext0
 7223 1111 5A030000 		.4byte	.LVL109-.Ltext0
 7224 1115 0100     		.2byte	0x1
 7225 1117 50       		.byte	0x50
 7226 1118 64030000 		.4byte	.LVL112-.Ltext0
 7227 111c 66030000 		.4byte	.LVL113-.Ltext0
 7228 1120 0100     		.2byte	0x1
 7229 1122 52       		.byte	0x52
 7230 1123 66030000 		.4byte	.LVL113-.Ltext0
 7231 1127 68030000 		.4byte	.LVL114-.Ltext0
 7232 112b 0100     		.2byte	0x1
 7233 112d 50       		.byte	0x50
 7234 112e 00000000 		.4byte	0
 7235 1132 00000000 		.4byte	0
 7236              		.section	.debug_aranges,"",%progbits
 7237 0000 1C000000 		.4byte	0x1c
 7238 0004 0200     		.2byte	0x2
 7239 0006 00000000 		.4byte	.Ldebug_info0
 7240 000a 04       		.byte	0x4
 7241 000b 00       		.byte	0
 7242 000c 0000     		.2byte	0
 7243 000e 0000     		.2byte	0
 7244 0010 00000000 		.4byte	.Ltext0
 7245 0014 9C080000 		.4byte	.Letext0-.Ltext0
 7246 0018 00000000 		.4byte	0
 7247 001c 00000000 		.4byte	0
 7248              		.section	.debug_ranges,"",%progbits
 7249              	.Ldebug_ranges0:
ARM GAS  /tmp/ccM6Uqrc.s 			page 170


 7250 0000 AA020000 		.4byte	.LBB18-.Ltext0
 7251 0004 AC020000 		.4byte	.LBE18-.Ltext0
 7252 0008 B0020000 		.4byte	.LBB27-.Ltext0
 7253 000c D6020000 		.4byte	.LBE27-.Ltext0
 7254 0010 FE020000 		.4byte	.LBB28-.Ltext0
 7255 0014 68030000 		.4byte	.LBE28-.Ltext0
 7256 0018 6C030000 		.4byte	.LBB29-.Ltext0
 7257 001c 88030000 		.4byte	.LBE29-.Ltext0
 7258 0020 00000000 		.4byte	0
 7259 0024 00000000 		.4byte	0
 7260 0028 B0020000 		.4byte	.LBB20-.Ltext0
 7261 002c B8020000 		.4byte	.LBE20-.Ltext0
 7262 0030 34030000 		.4byte	.LBB23-.Ltext0
 7263 0034 4E030000 		.4byte	.LBE23-.Ltext0
 7264 0038 00000000 		.4byte	0
 7265 003c 00000000 		.4byte	0
 7266              		.section	.debug_line,"",%progbits
 7267              	.Ldebug_line0:
 7268 0000 CD040000 		.section	.debug_str,"MS",%progbits,1
 7268      02004F01 
 7268      00000201 
 7268      FB0E0D00 
 7268      01010101 
 7269              	.LASF110:
 7270 0000 74696D65 		.ascii	"timecounter\000"
 7270      636F756E 
 7270      74657200 
 7271              	.LASF80:
 7272 000c 48414C5F 		.ascii	"HAL_TickFreqTypeDef\000"
 7272      5469636B 
 7272      46726571 
 7272      54797065 
 7272      44656600 
 7273              	.LASF135:
 7274 0020 70726573 		.ascii	"prescaler\000"
 7274      63616C65 
 7274      7200
 7275              	.LASF143:
 7276 002a 48414C5F 		.ascii	"HAL_RTC_AlarmIRQHandler\000"
 7276      5254435F 
 7276      416C6172 
 7276      6D495251 
 7276      48616E64 
 7277              	.LASF120:
 7278 0042 48414C5F 		.ascii	"HAL_RTC_SetAlarm_IT\000"
 7278      5254435F 
 7278      53657441 
 7278      6C61726D 
 7278      5F495400 
 7279              	.LASF4:
 7280 0056 5F5F7569 		.ascii	"__uint8_t\000"
 7280      6E74385F 
 7280      7400
 7281              	.LASF43:
 7282 0060 48414C5F 		.ascii	"HAL_BUSY\000"
 7282      42555359 
 7282      00
ARM GAS  /tmp/ccM6Uqrc.s 			page 171


 7283              	.LASF21:
 7284 0069 41504250 		.ascii	"APBPrescTable\000"
 7284      72657363 
 7284      5461626C 
 7284      6500
 7285              	.LASF85:
 7286 0077 6E446179 		.ascii	"nDay\000"
 7286      00
 7287              	.LASF28:
 7288 007c 53574945 		.ascii	"SWIER\000"
 7288      5200
 7289              	.LASF66:
 7290 0082 4D6F6E74 		.ascii	"Month\000"
 7290      6800
 7291              	.LASF76:
 7292 0088 48414C5F 		.ascii	"HAL_TICK_FREQ_10HZ\000"
 7292      5449434B 
 7292      5F465245 
 7292      515F3130 
 7292      485A00
 7293              	.LASF54:
 7294 009b 416C6172 		.ascii	"Alarm\000"
 7294      6D00
 7295              	.LASF12:
 7296 00a1 6C6F6E67 		.ascii	"long long unsigned int\000"
 7296      206C6F6E 
 7296      6720756E 
 7296      7369676E 
 7296      65642069 
 7297              	.LASF112:
 7298 00b8 48414C5F 		.ascii	"HAL_RTC_GetState\000"
 7298      5254435F 
 7298      47657453 
 7298      74617465 
 7298      00
 7299              	.LASF60:
 7300 00c9 48414C5F 		.ascii	"HAL_RTC_STATE_ERROR\000"
 7300      5254435F 
 7300      53544154 
 7300      455F4552 
 7300      524F5200 
 7301              	.LASF18:
 7302 00dd 49544D5F 		.ascii	"ITM_RxBuffer\000"
 7302      52784275 
 7302      66666572 
 7302      00
 7303              	.LASF35:
 7304 00ea 434E544C 		.ascii	"CNTL\000"
 7304      00
 7305              	.LASF38:
 7306 00ef 5254435F 		.ascii	"RTC_TypeDef\000"
 7306      54797065 
 7306      44656600 
 7307              	.LASF113:
 7308 00fb 48414C5F 		.ascii	"HAL_RTC_PollForAlarmAEvent\000"
 7308      5254435F 
 7308      506F6C6C 
ARM GAS  /tmp/ccM6Uqrc.s 			page 172


 7308      466F7241 
 7308      6C61726D 
 7309              	.LASF11:
 7310 0116 6C6F6E67 		.ascii	"long long int\000"
 7310      206C6F6E 
 7310      6720696E 
 7310      7400
 7311              	.LASF1:
 7312 0124 7369676E 		.ascii	"signed char\000"
 7312      65642063 
 7312      68617200 
 7313              	.LASF99:
 7314 0130 5254435F 		.ascii	"RTC_EnterInitMode\000"
 7314      456E7465 
 7314      72496E69 
 7314      744D6F64 
 7314      6500
 7315              	.LASF128:
 7316 0142 7354696D 		.ascii	"sTime\000"
 7316      6500
 7317              	.LASF119:
 7318 0148 636F756E 		.ascii	"counter_alarm\000"
 7318      7465725F 
 7318      616C6172 
 7318      6D00
 7319              	.LASF75:
 7320 0156 5254435F 		.ascii	"RTC_HandleTypeDef\000"
 7320      48616E64 
 7320      6C655479 
 7320      70654465 
 7320      6600
 7321              	.LASF137:
 7322 0168 48414C5F 		.ascii	"HAL_RCCEx_GetPeriphCLKFreq\000"
 7322      52434345 
 7322      785F4765 
 7322      74506572 
 7322      69706843 
 7323              	.LASF48:
 7324 0183 48414C5F 		.ascii	"HAL_LockTypeDef\000"
 7324      4C6F636B 
 7324      54797065 
 7324      44656600 
 7325              	.LASF86:
 7326 0193 79656172 		.ascii	"year\000"
 7326      00
 7327              	.LASF34:
 7328 0198 434E5448 		.ascii	"CNTH\000"
 7328      00
 7329              	.LASF8:
 7330 019d 6C6F6E67 		.ascii	"long int\000"
 7330      20696E74 
 7330      00
 7331              	.LASF53:
 7332 01a6 416C6172 		.ascii	"AlarmTime\000"
 7332      6D54696D 
 7332      6500
 7333              	.LASF130:
ARM GAS  /tmp/ccM6Uqrc.s 			page 173


 7334 01b0 48414C5F 		.ascii	"HAL_RTC_SetTime\000"
 7334      5254435F 
 7334      53657454 
 7334      696D6500 
 7335              	.LASF63:
 7336 01c0 4F757450 		.ascii	"OutPut\000"
 7336      757400
 7337              	.LASF69:
 7338 01c7 5254435F 		.ascii	"RTC_DateTypeDef\000"
 7338      44617465 
 7338      54797065 
 7338      44656600 
 7339              	.LASF56:
 7340 01d7 48414C5F 		.ascii	"HAL_RTC_STATE_RESET\000"
 7340      5254435F 
 7340      53544154 
 7340      455F5245 
 7340      53455400 
 7341              	.LASF123:
 7342 01eb 48414C5F 		.ascii	"HAL_RTC_SetAlarm\000"
 7342      5254435F 
 7342      53657441 
 7342      6C61726D 
 7342      00
 7343              	.LASF14:
 7344 01fc 75696E74 		.ascii	"uint16_t\000"
 7344      31365F74 
 7344      00
 7345              	.LASF92:
 7346 0205 5254435F 		.ascii	"RTC_WeekDayNum\000"
 7346      5765656B 
 7346      4461794E 
 7346      756D00
 7347              	.LASF131:
 7348 0214 48414C5F 		.ascii	"HAL_RTC_MspDeInit\000"
 7348      5254435F 
 7348      4D737044 
 7348      65496E69 
 7348      7400
 7349              	.LASF106:
 7350 0226 5254435F 		.ascii	"RTC_WriteTimeCounter\000"
 7350      57726974 
 7350      6554696D 
 7350      65436F75 
 7350      6E746572 
 7351              	.LASF33:
 7352 023b 4449564C 		.ascii	"DIVL\000"
 7352      00
 7353              	.LASF73:
 7354 0240 4C6F636B 		.ascii	"Lock\000"
 7354      00
 7355              	.LASF9:
 7356 0245 5F5F7569 		.ascii	"__uint32_t\000"
 7356      6E743332 
 7356      5F7400
 7357              	.LASF114:
 7358 0250 54696D65 		.ascii	"Timeout\000"
ARM GAS  /tmp/ccM6Uqrc.s 			page 174


 7358      6F757400 
 7359              	.LASF61:
 7360 0258 48414C5F 		.ascii	"HAL_RTCStateTypeDef\000"
 7360      52544353 
 7360      74617465 
 7360      54797065 
 7360      44656600 
 7361              	.LASF72:
 7362 026c 44617465 		.ascii	"DateToUpdate\000"
 7362      546F5570 
 7362      64617465 
 7362      00
 7363              	.LASF44:
 7364 0279 48414C5F 		.ascii	"HAL_TIMEOUT\000"
 7364      54494D45 
 7364      4F555400 
 7365              	.LASF90:
 7366 0285 6D6F6E74 		.ascii	"month\000"
 7366      6800
 7367              	.LASF133:
 7368 028b 48414C5F 		.ascii	"HAL_RTC_DeInit\000"
 7368      5254435F 
 7368      4465496E 
 7368      697400
 7369              	.LASF0:
 7370 029a 756E7369 		.ascii	"unsigned int\000"
 7370      676E6564 
 7370      20696E74 
 7370      00
 7371              	.LASF126:
 7372 02a7 48414C5F 		.ascii	"HAL_RTC_SetDate\000"
 7372      5254435F 
 7372      53657444 
 7372      61746500 
 7373              	.LASF19:
 7374 02b7 53797374 		.ascii	"SystemCoreClock\000"
 7374      656D436F 
 7374      7265436C 
 7374      6F636B00 
 7375              	.LASF82:
 7376 02c7 75775469 		.ascii	"uwTickFreq\000"
 7376      636B4672 
 7376      657100
 7377              	.LASF26:
 7378 02d2 52545352 		.ascii	"RTSR\000"
 7378      00
 7379              	.LASF97:
 7380 02d7 5254435F 		.ascii	"RTC_ExitInitMode\000"
 7380      45786974 
 7380      496E6974 
 7380      4D6F6465 
 7380      00
 7381              	.LASF10:
 7382 02e8 6C6F6E67 		.ascii	"long unsigned int\000"
 7382      20756E73 
 7382      69676E65 
 7382      6420696E 
ARM GAS  /tmp/ccM6Uqrc.s 			page 175


 7382      7400
 7383              	.LASF142:
 7384 02fa 48414C5F 		.ascii	"HAL_RTC_AlarmAEventCallback\000"
 7384      5254435F 
 7384      416C6172 
 7384      6D414576 
 7384      656E7443 
 7385              	.LASF57:
 7386 0316 48414C5F 		.ascii	"HAL_RTC_STATE_READY\000"
 7386      5254435F 
 7386      53544154 
 7386      455F5245 
 7386      41445900 
 7387              	.LASF78:
 7388 032a 48414C5F 		.ascii	"HAL_TICK_FREQ_1KHZ\000"
 7388      5449434B 
 7388      5F465245 
 7388      515F314B 
 7388      485A00
 7389              	.LASF41:
 7390 033d 48414C5F 		.ascii	"HAL_OK\000"
 7390      4F4B00
 7391              	.LASF32:
 7392 0344 44495648 		.ascii	"DIVH\000"
 7392      00
 7393              	.LASF6:
 7394 0349 73686F72 		.ascii	"short unsigned int\000"
 7394      7420756E 
 7394      7369676E 
 7394      65642069 
 7394      6E7400
 7395              	.LASF68:
 7396 035c 59656172 		.ascii	"Year\000"
 7396      00
 7397              	.LASF116:
 7398 0361 48414C5F 		.ascii	"HAL_RTC_GetAlarm\000"
 7398      5254435F 
 7398      47657441 
 7398      6C61726D 
 7398      00
 7399              	.LASF105:
 7400 0372 68696768 		.ascii	"high1\000"
 7400      3100
 7401              	.LASF109:
 7402 0378 68696768 		.ascii	"high2\000"
 7402      3200
 7403              	.LASF115:
 7404 037e 48414C5F 		.ascii	"HAL_RTC_DeactivateAlarm\000"
 7404      5254435F 
 7404      44656163 
 7404      74697661 
 7404      7465416C 
 7405              	.LASF45:
 7406 0396 48414C5F 		.ascii	"HAL_StatusTypeDef\000"
 7406      53746174 
 7406      75735479 
 7406      70654465 
ARM GAS  /tmp/ccM6Uqrc.s 			page 176


 7406      6600
 7407              	.LASF139:
 7408 03a8 7372632F 		.ascii	"src/stm32f1xx_hal_rtc.c\000"
 7408      73746D33 
 7408      32663178 
 7408      785F6861 
 7408      6C5F7274 
 7409              	.LASF20:
 7410 03c0 41484250 		.ascii	"AHBPrescTable\000"
 7410      72657363 
 7410      5461626C 
 7410      6500
 7411              	.LASF125:
 7412 03ce 73446174 		.ascii	"sDate\000"
 7412      6500
 7413              	.LASF59:
 7414 03d4 48414C5F 		.ascii	"HAL_RTC_STATE_TIMEOUT\000"
 7414      5254435F 
 7414      53544154 
 7414      455F5449 
 7414      4D454F55 
 7415              	.LASF65:
 7416 03ea 5765656B 		.ascii	"WeekDay\000"
 7416      44617900 
 7417              	.LASF17:
 7418 03f2 73697A65 		.ascii	"sizetype\000"
 7418      74797065 
 7418      00
 7419              	.LASF36:
 7420 03fb 414C5248 		.ascii	"ALRH\000"
 7420      00
 7421              	.LASF136:
 7422 0400 48414C5F 		.ascii	"HAL_GetTick\000"
 7422      47657454 
 7422      69636B00 
 7423              	.LASF37:
 7424 040c 414C524C 		.ascii	"ALRL\000"
 7424      00
 7425              	.LASF83:
 7426 0411 6E596561 		.ascii	"nYear\000"
 7426      7200
 7427              	.LASF101:
 7428 0417 5254435F 		.ascii	"RTC_WriteAlarmCounter\000"
 7428      57726974 
 7428      65416C61 
 7428      726D436F 
 7428      756E7465 
 7429              	.LASF47:
 7430 042d 48414C5F 		.ascii	"HAL_LOCKED\000"
 7430      4C4F434B 
 7430      454400
 7431              	.LASF51:
 7432 0438 5365636F 		.ascii	"Seconds\000"
 7432      6E647300 
 7433              	.LASF84:
 7434 0440 6E4D6F6E 		.ascii	"nMonth\000"
 7434      746800
ARM GAS  /tmp/ccM6Uqrc.s 			page 177


 7435              	.LASF50:
 7436 0447 4D696E75 		.ascii	"Minutes\000"
 7436      74657300 
 7437              	.LASF49:
 7438 044f 486F7572 		.ascii	"Hours\000"
 7438      7300
 7439              	.LASF100:
 7440 0455 5254435F 		.ascii	"RTC_IsLeapYear\000"
 7440      49734C65 
 7440      61705965 
 7440      617200
 7441              	.LASF79:
 7442 0464 48414C5F 		.ascii	"HAL_TICK_FREQ_DEFAULT\000"
 7442      5449434B 
 7442      5F465245 
 7442      515F4445 
 7442      4641554C 
 7443              	.LASF134:
 7444 047a 48414C5F 		.ascii	"HAL_RTC_Init\000"
 7444      5254435F 
 7444      496E6974 
 7444      00
 7445              	.LASF107:
 7446 0487 54696D65 		.ascii	"TimeCounter\000"
 7446      436F756E 
 7446      74657200 
 7447              	.LASF71:
 7448 0493 496E6974 		.ascii	"Init\000"
 7448      00
 7449              	.LASF24:
 7450 0498 52544343 		.ascii	"RTCCR\000"
 7450      5200
 7451              	.LASF22:
 7452 049e 52455345 		.ascii	"RESERVED0\000"
 7452      52564544 
 7452      3000
 7453              	.LASF70:
 7454 04a8 496E7374 		.ascii	"Instance\000"
 7454      616E6365 
 7454      00
 7455              	.LASF108:
 7456 04b1 5254435F 		.ascii	"RTC_ReadTimeCounter\000"
 7456      52656164 
 7456      54696D65 
 7456      436F756E 
 7456      74657200 
 7457              	.LASF39:
 7458 04c5 52455345 		.ascii	"RESET\000"
 7458      5400
 7459              	.LASF15:
 7460 04cb 696E7433 		.ascii	"int32_t\000"
 7460      325F7400 
 7461              	.LASF2:
 7462 04d3 756E7369 		.ascii	"unsigned char\000"
 7462      676E6564 
 7462      20636861 
 7462      7200
ARM GAS  /tmp/ccM6Uqrc.s 			page 178


 7463              	.LASF25:
 7464 04e1 424B505F 		.ascii	"BKP_TypeDef\000"
 7464      54797065 
 7464      44656600 
 7465              	.LASF27:
 7466 04ed 46545352 		.ascii	"FTSR\000"
 7466      00
 7467              	.LASF3:
 7468 04f2 73686F72 		.ascii	"short int\000"
 7468      7420696E 
 7468      7400
 7469              	.LASF55:
 7470 04fc 5254435F 		.ascii	"RTC_AlarmTypeDef\000"
 7470      416C6172 
 7470      6D547970 
 7470      65446566 
 7470      00
 7471              	.LASF127:
 7472 050d 686F7572 		.ascii	"hours\000"
 7472      7300
 7473              	.LASF98:
 7474 0513 7469636B 		.ascii	"tickstart\000"
 7474      73746172 
 7474      7400
 7475              	.LASF58:
 7476 051d 48414C5F 		.ascii	"HAL_RTC_STATE_BUSY\000"
 7476      5254435F 
 7476      53544154 
 7476      455F4255 
 7476      535900
 7477              	.LASF96:
 7478 0530 62636468 		.ascii	"bcdhigh\000"
 7478      69676800 
 7479              	.LASF52:
 7480 0538 5254435F 		.ascii	"RTC_TimeTypeDef\000"
 7480      54696D65 
 7480      54797065 
 7480      44656600 
 7481              	.LASF138:
 7482 0548 474E5520 		.ascii	"GNU C11 6.3.1 20170620 -mcpu=cortex-m3 -mthumb -g -"
 7482      43313120 
 7482      362E332E 
 7482      31203230 
 7482      31373036 
 7483 057b 67647761 		.ascii	"gdwarf-2 -Os -fomit-frame-pointer\000"
 7483      72662D32 
 7483      202D4F73 
 7483      202D666F 
 7483      6D69742D 
 7484              	.LASF23:
 7485 059d 44523130 		.ascii	"DR10\000"
 7485      00
 7486              	.LASF121:
 7487 05a2 636F756E 		.ascii	"counter_time\000"
 7487      7465725F 
 7487      74696D65 
 7487      00
ARM GAS  /tmp/ccM6Uqrc.s 			page 179


 7488              	.LASF140:
 7489 05af 2F686F6D 		.ascii	"/home/berndoj/git/stm32tctst/lib/stm32f1hal\000"
 7489      652F6265 
 7489      726E646F 
 7489      6A2F6769 
 7489      742F7374 
 7490              	.LASF132:
 7491 05db 48414C5F 		.ascii	"HAL_RTC_MspInit\000"
 7491      5254435F 
 7491      4D737049 
 7491      6E697400 
 7492              	.LASF144:
 7493 05eb 48414C5F 		.ascii	"HAL_RTC_GetTime\000"
 7493      5254435F 
 7493      47657454 
 7493      696D6500 
 7494              	.LASF16:
 7495 05fb 75696E74 		.ascii	"uint32_t\000"
 7495      33325F74 
 7495      00
 7496              	.LASF129:
 7497 0604 64617973 		.ascii	"days_elapsed\000"
 7497      5F656C61 
 7497      70736564 
 7497      00
 7498              	.LASF42:
 7499 0611 48414C5F 		.ascii	"HAL_ERROR\000"
 7499      4552524F 
 7499      5200
 7500              	.LASF40:
 7501 061b 6C6F6E67 		.ascii	"long double\000"
 7501      20646F75 
 7501      626C6500 
 7502              	.LASF81:
 7503 0627 75775469 		.ascii	"uwTickPrio\000"
 7503      636B5072 
 7503      696F00
 7504              	.LASF74:
 7505 0632 53746174 		.ascii	"State\000"
 7505      6500
 7506              	.LASF5:
 7507 0638 5F5F7569 		.ascii	"__uint16_t\000"
 7507      6E743136 
 7507      5F7400
 7508              	.LASF118:
 7509 0643 466F726D 		.ascii	"Format\000"
 7509      617400
 7510              	.LASF87:
 7511 064a 7765656B 		.ascii	"weekday\000"
 7511      64617900 
 7512              	.LASF77:
 7513 0652 48414C5F 		.ascii	"HAL_TICK_FREQ_100HZ\000"
 7513      5449434B 
 7513      5F465245 
 7513      515F3130 
 7513      30485A00 
 7514              	.LASF7:
ARM GAS  /tmp/ccM6Uqrc.s 			page 180


 7515 0666 5F5F696E 		.ascii	"__int32_t\000"
 7515      7433325F 
 7515      7400
 7516              	.LASF122:
 7517 0670 7374696D 		.ascii	"stime\000"
 7517      6500
 7518              	.LASF102:
 7519 0676 416C6172 		.ascii	"AlarmCounter\000"
 7519      6D436F75 
 7519      6E746572 
 7519      00
 7520              	.LASF89:
 7521 0683 44617945 		.ascii	"DayElapsed\000"
 7521      6C617073 
 7521      656400
 7522              	.LASF124:
 7523 068e 48414C5F 		.ascii	"HAL_RTC_GetDate\000"
 7523      5254435F 
 7523      47657444 
 7523      61746500 
 7524              	.LASF117:
 7525 069e 73416C61 		.ascii	"sAlarm\000"
 7525      726D00
 7526              	.LASF62:
 7527 06a5 4173796E 		.ascii	"AsynchPrediv\000"
 7527      63685072 
 7527      65646976 
 7527      00
 7528              	.LASF88:
 7529 06b2 68727463 		.ascii	"hrtc\000"
 7529      00
 7530              	.LASF103:
 7531 06b7 73746174 		.ascii	"status\000"
 7531      757300
 7532              	.LASF95:
 7533 06be 5254435F 		.ascii	"RTC_ByteToBcd2\000"
 7533      42797465 
 7533      546F4263 
 7533      643200
 7534              	.LASF141:
 7535 06cd 5254435F 		.ascii	"RTC_DateUpdate\000"
 7535      44617465 
 7535      55706461 
 7535      746500
 7536              	.LASF94:
 7537 06dc 56616C75 		.ascii	"Value\000"
 7537      6500
 7538              	.LASF13:
 7539 06e2 75696E74 		.ascii	"uint8_t\000"
 7539      385F7400 
 7540              	.LASF104:
 7541 06ea 5254435F 		.ascii	"RTC_ReadAlarmCounter\000"
 7541      52656164 
 7541      416C6172 
 7541      6D436F75 
 7541      6E746572 
 7542              	.LASF93:
ARM GAS  /tmp/ccM6Uqrc.s 			page 181


 7543 06ff 5254435F 		.ascii	"RTC_Bcd2ToByte\000"
 7543      42636432 
 7543      546F4279 
 7543      746500
 7544              	.LASF67:
 7545 070e 44617465 		.ascii	"Date\000"
 7545      00
 7546              	.LASF111:
 7547 0713 48414C5F 		.ascii	"HAL_RTC_WaitForSynchro\000"
 7547      5254435F 
 7547      57616974 
 7547      466F7253 
 7547      796E6368 
 7548              	.LASF64:
 7549 072a 5254435F 		.ascii	"RTC_InitTypeDef\000"
 7549      496E6974 
 7549      54797065 
 7549      44656600 
 7550              	.LASF46:
 7551 073a 48414C5F 		.ascii	"HAL_UNLOCKED\000"
 7551      554E4C4F 
 7551      434B4544 
 7551      00
 7552              	.LASF29:
 7553 0747 45585449 		.ascii	"EXTI_TypeDef\000"
 7553      5F547970 
 7553      65446566 
 7553      00
 7554              	.LASF91:
 7555 0754 6C6F6F70 		.ascii	"loop\000"
 7555      00
 7556              	.LASF30:
 7557 0759 50524C48 		.ascii	"PRLH\000"
 7557      00
 7558              	.LASF31:
 7559 075e 50524C4C 		.ascii	"PRLL\000"
 7559      00
 7560              		.ident	"GCC: (15:6.3.1+svn253039-1build1) 6.3.1 20170620"
ARM GAS  /tmp/ccM6Uqrc.s 			page 182


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_rtc.c
     /tmp/ccM6Uqrc.s:69     .text:0000000000000000 $t
     /tmp/ccM6Uqrc.s:75     .text:0000000000000000 RTC_ReadTimeCounter
     /tmp/ccM6Uqrc.s:129    .text:0000000000000024 RTC_ReadAlarmCounter
     /tmp/ccM6Uqrc.s:159    .text:0000000000000032 RTC_ByteToBcd2
     /tmp/ccM6Uqrc.s:201    .text:0000000000000048 RTC_Bcd2ToByte
     /tmp/ccM6Uqrc.s:229    .text:0000000000000058 RTC_WeekDayNum
     /tmp/ccM6Uqrc.s:308    .text:00000000000000c6 RTC_EnterInitMode
     /tmp/ccM6Uqrc.s:365    .text:00000000000000f4 RTC_ExitInitMode
     /tmp/ccM6Uqrc.s:424    .text:0000000000000124 RTC_WriteTimeCounter
     /tmp/ccM6Uqrc.s:485    .text:000000000000014c RTC_WriteAlarmCounter
     /tmp/ccM6Uqrc.s:547    .text:0000000000000174 HAL_RTC_MspInit
     /tmp/ccM6Uqrc.s:564    .text:0000000000000176 HAL_RTC_MspDeInit
     /tmp/ccM6Uqrc.s:581    .text:0000000000000178 HAL_RTC_SetTime
     /tmp/ccM6Uqrc.s:727    .text:000000000000021a HAL_RTC_GetTime
     /tmp/ccM6Uqrc.s:1062   .text:0000000000000384 $d
     /tmp/ccM6Uqrc.s:1070   .text:0000000000000388 $t
     /tmp/ccM6Uqrc.s:1077   .text:0000000000000388 HAL_RTC_SetDate
     /tmp/ccM6Uqrc.s:1228   .text:0000000000000434 $d
     /tmp/ccM6Uqrc.s:1232   .text:0000000000000438 $t
     /tmp/ccM6Uqrc.s:1239   .text:0000000000000438 HAL_RTC_GetDate
     /tmp/ccM6Uqrc.s:1335   .text:0000000000000490 HAL_RTC_SetAlarm
     /tmp/ccM6Uqrc.s:1501   .text:0000000000000548 HAL_RTC_SetAlarm_IT
     /tmp/ccM6Uqrc.s:1677   .text:0000000000000624 $d
     /tmp/ccM6Uqrc.s:1681   .text:0000000000000628 $t
     /tmp/ccM6Uqrc.s:1688   .text:0000000000000628 HAL_RTC_GetAlarm
     /tmp/ccM6Uqrc.s:1773   .text:0000000000000682 HAL_RTC_DeactivateAlarm
     /tmp/ccM6Uqrc.s:1878   .text:00000000000006f0 HAL_RTC_AlarmAEventCallback
     /tmp/ccM6Uqrc.s:1897   .text:00000000000006f2 HAL_RTC_AlarmIRQHandler
     /tmp/ccM6Uqrc.s:1943   .text:0000000000000720 $d
     /tmp/ccM6Uqrc.s:1947   .text:0000000000000724 $t
     /tmp/ccM6Uqrc.s:1954   .text:0000000000000724 HAL_RTC_PollForAlarmAEvent
     /tmp/ccM6Uqrc.s:2032   .text:0000000000000762 HAL_RTC_GetState
     /tmp/ccM6Uqrc.s:2055   .text:0000000000000766 HAL_RTC_WaitForSynchro
     /tmp/ccM6Uqrc.s:2119   .text:000000000000079c HAL_RTC_Init
     /tmp/ccM6Uqrc.s:2247   .text:0000000000000838 $d
     /tmp/ccM6Uqrc.s:2251   .text:000000000000083c $t
     /tmp/ccM6Uqrc.s:2258   .text:000000000000083c HAL_RTC_DeInit
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RCCEx_GetPeriphCLKFreq
