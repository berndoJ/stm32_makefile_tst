ARM GAS  /tmp/cctMPBvi.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"stm32f1xx_hal_flash_ex.c"
  12              	@ GNU C11 (15:6.3.1+svn253039-1build1) version 6.3.1 20170620 (arm-none-eabi)
  13              	@	compiled by GNU C version 7.2.0, GMP version 6.1.2, MPFR version 4.0.1-rc1, MPC version 1.1.0, is
  14              	@ warning: MPFR header version 4.0.1-rc1 differs from library version 4.0.1.
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I ./inc -I ./inc/Legacy -I ../cmsisstm32f1xx/inc
  17              	@ -I ../cmsiscore/inc -imultilib thumb/v7-m -D__USES_INITFINI__
  18              	@ -D STM32F103x6 -D RUN_FROM_FLASH=1 src/stm32f1xx_hal_flash_ex.c
  19              	@ -mcpu=cortex-m3 -mthumb -auxbase-strip bin/stm32f1xx_hal_flash_ex.o -g
  20              	@ -gdwarf-2 -Os -Wall -fomit-frame-pointer -fverbose-asm
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffunction-cse -fgcse
  32              	@ -fgcse-lm -fgnu-runtime -fgnu-unique -fguess-branch-probability
  33              	@ -fhoist-adjacent-loads -fident -fif-conversion -fif-conversion2
  34              	@ -findirect-inlining -finline -finline-atomics -finline-functions
  35              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  36              	@ -fipa-cp-alignment -fipa-icf -fipa-icf-functions -fipa-icf-variables
  37              	@ -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra
  38              	@ -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  39              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  40              	@ -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  41              	@ -fmath-errno -fmerge-constants -fmerge-debug-strings
  42              	@ -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  43              	@ -fpartial-inlining -fpeephole -fpeephole2 -fplt -fprefetch-loop-arrays
  44              	@ -freg-struct-return -freorder-blocks -freorder-functions
  45              	@ -frerun-cse-after-loop -fsched-critical-path-heuristic
  46              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  47              	@ -fsched-last-insn-heuristic -fsched-pressure -fsched-rank-heuristic
  48              	@ -fsched-spec -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  49              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  50              	@ -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types
  51              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstrict-aliasing
  52              	@ -fstrict-overflow -fstrict-volatile-bitfields -fsync-libcalls
  53              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  54              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  55              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  56              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  57              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
ARM GAS  /tmp/cctMPBvi.s 			page 2


  58              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  59              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  60              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  61              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  62              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  63              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  64              	@ -munaligned-access -mvectorize-with-neon-quad
  65              	
  66              		.text
  67              	.Ltext0:
  68              		.cfi_sections	.debug_frame
  69              		.align	1
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu softvfp
  74              		.type	FLASH_MassErase.isra.0, %function
  75              	FLASH_MassErase.isra.0:
  76              	.LFB81:
  77              		.file 1 "src/stm32f1xx_hal_flash_ex.c"
   1:src/stm32f1xx_hal_flash_ex.c **** /**
   2:src/stm32f1xx_hal_flash_ex.c ****   ******************************************************************************
   3:src/stm32f1xx_hal_flash_ex.c ****   * @file    stm32f1xx_hal_flash_ex.c
   4:src/stm32f1xx_hal_flash_ex.c ****   * @author  MCD Application Team
   5:src/stm32f1xx_hal_flash_ex.c ****   * @brief   Extended FLASH HAL module driver.
   6:src/stm32f1xx_hal_flash_ex.c ****   *    
   7:src/stm32f1xx_hal_flash_ex.c ****   *          This file provides firmware functions to manage the following 
   8:src/stm32f1xx_hal_flash_ex.c ****   *          functionalities of the FLASH peripheral:
   9:src/stm32f1xx_hal_flash_ex.c ****   *           + Extended Initialization/de-initialization functions
  10:src/stm32f1xx_hal_flash_ex.c ****   *           + Extended I/O operation functions
  11:src/stm32f1xx_hal_flash_ex.c ****   *           + Extended Peripheral Control functions 
  12:src/stm32f1xx_hal_flash_ex.c ****   *         
  13:src/stm32f1xx_hal_flash_ex.c ****   @verbatim
  14:src/stm32f1xx_hal_flash_ex.c ****   ==============================================================================
  15:src/stm32f1xx_hal_flash_ex.c ****                ##### Flash peripheral extended features  #####
  16:src/stm32f1xx_hal_flash_ex.c ****   ==============================================================================
  17:src/stm32f1xx_hal_flash_ex.c ****            
  18:src/stm32f1xx_hal_flash_ex.c ****                       ##### How to use this driver #####
  19:src/stm32f1xx_hal_flash_ex.c ****   ==============================================================================
  20:src/stm32f1xx_hal_flash_ex.c ****   [..] This driver provides functions to configure and program the FLASH memory 
  21:src/stm32f1xx_hal_flash_ex.c ****        of all STM32F1xxx devices. It includes
  22:src/stm32f1xx_hal_flash_ex.c ****        
  23:src/stm32f1xx_hal_flash_ex.c ****         (++) Set/Reset the write protection
  24:src/stm32f1xx_hal_flash_ex.c ****         (++) Program the user Option Bytes
  25:src/stm32f1xx_hal_flash_ex.c ****         (++) Get the Read protection Level
  26:src/stm32f1xx_hal_flash_ex.c ****   
  27:src/stm32f1xx_hal_flash_ex.c ****   @endverbatim
  28:src/stm32f1xx_hal_flash_ex.c ****   ******************************************************************************
  29:src/stm32f1xx_hal_flash_ex.c ****   * @attention
  30:src/stm32f1xx_hal_flash_ex.c ****   *
  31:src/stm32f1xx_hal_flash_ex.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  32:src/stm32f1xx_hal_flash_ex.c ****   * All rights reserved.</center></h2>
  33:src/stm32f1xx_hal_flash_ex.c ****   *
  34:src/stm32f1xx_hal_flash_ex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  35:src/stm32f1xx_hal_flash_ex.c ****   * the "License"; You may not use this file except in compliance with the
  36:src/stm32f1xx_hal_flash_ex.c ****   * License. You may obtain a copy of the License at:
  37:src/stm32f1xx_hal_flash_ex.c ****   *                        opensource.org/licenses/BSD-3-Clause
ARM GAS  /tmp/cctMPBvi.s 			page 3


  38:src/stm32f1xx_hal_flash_ex.c ****   *
  39:src/stm32f1xx_hal_flash_ex.c ****   ******************************************************************************
  40:src/stm32f1xx_hal_flash_ex.c ****   */
  41:src/stm32f1xx_hal_flash_ex.c **** 
  42:src/stm32f1xx_hal_flash_ex.c **** /* Includes ------------------------------------------------------------------*/
  43:src/stm32f1xx_hal_flash_ex.c **** #include "stm32f1xx_hal.h"
  44:src/stm32f1xx_hal_flash_ex.c **** 
  45:src/stm32f1xx_hal_flash_ex.c **** /** @addtogroup STM32F1xx_HAL_Driver
  46:src/stm32f1xx_hal_flash_ex.c ****   * @{
  47:src/stm32f1xx_hal_flash_ex.c ****   */
  48:src/stm32f1xx_hal_flash_ex.c **** #ifdef HAL_FLASH_MODULE_ENABLED
  49:src/stm32f1xx_hal_flash_ex.c **** 
  50:src/stm32f1xx_hal_flash_ex.c **** /** @addtogroup FLASH
  51:src/stm32f1xx_hal_flash_ex.c ****   * @{
  52:src/stm32f1xx_hal_flash_ex.c ****   */
  53:src/stm32f1xx_hal_flash_ex.c **** /** @addtogroup FLASH_Private_Variables
  54:src/stm32f1xx_hal_flash_ex.c ****  * @{
  55:src/stm32f1xx_hal_flash_ex.c ****  */
  56:src/stm32f1xx_hal_flash_ex.c **** /* Variables used for Erase pages under interruption*/
  57:src/stm32f1xx_hal_flash_ex.c **** extern FLASH_ProcessTypeDef pFlash;
  58:src/stm32f1xx_hal_flash_ex.c **** /**
  59:src/stm32f1xx_hal_flash_ex.c ****   * @}
  60:src/stm32f1xx_hal_flash_ex.c ****   */
  61:src/stm32f1xx_hal_flash_ex.c **** 
  62:src/stm32f1xx_hal_flash_ex.c **** /**
  63:src/stm32f1xx_hal_flash_ex.c ****   * @}
  64:src/stm32f1xx_hal_flash_ex.c ****   */
  65:src/stm32f1xx_hal_flash_ex.c ****   
  66:src/stm32f1xx_hal_flash_ex.c **** /** @defgroup FLASHEx FLASHEx
  67:src/stm32f1xx_hal_flash_ex.c ****   * @brief FLASH HAL Extension module driver
  68:src/stm32f1xx_hal_flash_ex.c ****   * @{
  69:src/stm32f1xx_hal_flash_ex.c ****   */
  70:src/stm32f1xx_hal_flash_ex.c **** 
  71:src/stm32f1xx_hal_flash_ex.c **** /* Private typedef -----------------------------------------------------------*/
  72:src/stm32f1xx_hal_flash_ex.c **** /* Private define ------------------------------------------------------------*/
  73:src/stm32f1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Private_Constants FLASHEx Private Constants
  74:src/stm32f1xx_hal_flash_ex.c ****  * @{
  75:src/stm32f1xx_hal_flash_ex.c ****  */
  76:src/stm32f1xx_hal_flash_ex.c **** #define FLASH_POSITION_IWDGSW_BIT        FLASH_OBR_IWDG_SW_Pos
  77:src/stm32f1xx_hal_flash_ex.c **** #define FLASH_POSITION_OB_USERDATA0_BIT  FLASH_OBR_DATA0_Pos
  78:src/stm32f1xx_hal_flash_ex.c **** #define FLASH_POSITION_OB_USERDATA1_BIT  FLASH_OBR_DATA1_Pos
  79:src/stm32f1xx_hal_flash_ex.c **** /**
  80:src/stm32f1xx_hal_flash_ex.c ****   * @}
  81:src/stm32f1xx_hal_flash_ex.c ****   */
  82:src/stm32f1xx_hal_flash_ex.c **** 
  83:src/stm32f1xx_hal_flash_ex.c **** /* Private macro -------------------------------------------------------------*/
  84:src/stm32f1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Private_Macros FLASHEx Private Macros
  85:src/stm32f1xx_hal_flash_ex.c ****   * @{
  86:src/stm32f1xx_hal_flash_ex.c ****   */
  87:src/stm32f1xx_hal_flash_ex.c **** /**
  88:src/stm32f1xx_hal_flash_ex.c ****   * @}
  89:src/stm32f1xx_hal_flash_ex.c ****   */ 
  90:src/stm32f1xx_hal_flash_ex.c **** 
  91:src/stm32f1xx_hal_flash_ex.c **** /* Private variables ---------------------------------------------------------*/
  92:src/stm32f1xx_hal_flash_ex.c **** /* Private function prototypes -----------------------------------------------*/
  93:src/stm32f1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Private_Functions FLASHEx Private Functions
  94:src/stm32f1xx_hal_flash_ex.c ****  * @{
ARM GAS  /tmp/cctMPBvi.s 			page 4


  95:src/stm32f1xx_hal_flash_ex.c ****  */
  96:src/stm32f1xx_hal_flash_ex.c **** /* Erase operations */
  97:src/stm32f1xx_hal_flash_ex.c **** static void              FLASH_MassErase(uint32_t Banks);
  98:src/stm32f1xx_hal_flash_ex.c **** void    FLASH_PageErase(uint32_t PageAddress);
  99:src/stm32f1xx_hal_flash_ex.c **** 
 100:src/stm32f1xx_hal_flash_ex.c **** /* Option bytes control */
 101:src/stm32f1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage);
 102:src/stm32f1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage);
 103:src/stm32f1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel);
 104:src/stm32f1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig);
 105:src/stm32f1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data);
 106:src/stm32f1xx_hal_flash_ex.c **** static uint32_t          FLASH_OB_GetWRP(void);
 107:src/stm32f1xx_hal_flash_ex.c **** static uint32_t          FLASH_OB_GetRDP(void);
 108:src/stm32f1xx_hal_flash_ex.c **** static uint8_t           FLASH_OB_GetUser(void);
 109:src/stm32f1xx_hal_flash_ex.c **** 
 110:src/stm32f1xx_hal_flash_ex.c **** /**
 111:src/stm32f1xx_hal_flash_ex.c ****   * @}
 112:src/stm32f1xx_hal_flash_ex.c ****   */
 113:src/stm32f1xx_hal_flash_ex.c **** 
 114:src/stm32f1xx_hal_flash_ex.c **** /* Exported functions ---------------------------------------------------------*/
 115:src/stm32f1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions FLASHEx Exported Functions
 116:src/stm32f1xx_hal_flash_ex.c ****   * @{
 117:src/stm32f1xx_hal_flash_ex.c ****   */
 118:src/stm32f1xx_hal_flash_ex.c ****   
 119:src/stm32f1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions_Group1 FLASHEx Memory Erasing functions
 120:src/stm32f1xx_hal_flash_ex.c ****  *  @brief   FLASH Memory Erasing functions
 121:src/stm32f1xx_hal_flash_ex.c ****   *
 122:src/stm32f1xx_hal_flash_ex.c **** @verbatim   
 123:src/stm32f1xx_hal_flash_ex.c ****   ==============================================================================
 124:src/stm32f1xx_hal_flash_ex.c ****                 ##### FLASH Erasing Programming functions ##### 
 125:src/stm32f1xx_hal_flash_ex.c ****   ==============================================================================
 126:src/stm32f1xx_hal_flash_ex.c **** 
 127:src/stm32f1xx_hal_flash_ex.c ****     [..] The FLASH Memory Erasing functions, includes the following functions:
 128:src/stm32f1xx_hal_flash_ex.c ****     (+) @ref HAL_FLASHEx_Erase: return only when erase has been done
 129:src/stm32f1xx_hal_flash_ex.c ****     (+) @ref HAL_FLASHEx_Erase_IT: end of erase is done when @ref HAL_FLASH_EndOfOperationCallback 
 130:src/stm32f1xx_hal_flash_ex.c ****         is called with parameter 0xFFFFFFFF
 131:src/stm32f1xx_hal_flash_ex.c **** 
 132:src/stm32f1xx_hal_flash_ex.c ****     [..] Any operation of erase should follow these steps:
 133:src/stm32f1xx_hal_flash_ex.c ****     (#) Call the @ref HAL_FLASH_Unlock() function to enable the flash control register and 
 134:src/stm32f1xx_hal_flash_ex.c ****         program memory access.
 135:src/stm32f1xx_hal_flash_ex.c ****     (#) Call the desired function to erase page.
 136:src/stm32f1xx_hal_flash_ex.c ****     (#) Call the @ref HAL_FLASH_Lock() to disable the flash program memory access 
 137:src/stm32f1xx_hal_flash_ex.c ****        (recommended to protect the FLASH memory against possible unwanted operation).
 138:src/stm32f1xx_hal_flash_ex.c **** 
 139:src/stm32f1xx_hal_flash_ex.c **** @endverbatim
 140:src/stm32f1xx_hal_flash_ex.c ****   * @{
 141:src/stm32f1xx_hal_flash_ex.c ****   */
 142:src/stm32f1xx_hal_flash_ex.c ****   
 143:src/stm32f1xx_hal_flash_ex.c **** 
 144:src/stm32f1xx_hal_flash_ex.c **** /**
 145:src/stm32f1xx_hal_flash_ex.c ****   * @brief  Perform a mass erase or erase the specified FLASH memory pages
 146:src/stm32f1xx_hal_flash_ex.c ****   * @note   To correctly run this function, the @ref HAL_FLASH_Unlock() function
 147:src/stm32f1xx_hal_flash_ex.c ****   *         must be called before.
 148:src/stm32f1xx_hal_flash_ex.c ****   *         Call the @ref HAL_FLASH_Lock() to disable the flash memory access 
 149:src/stm32f1xx_hal_flash_ex.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)
 150:src/stm32f1xx_hal_flash_ex.c ****   * @param[in]  pEraseInit pointer to an FLASH_EraseInitTypeDef structure that
 151:src/stm32f1xx_hal_flash_ex.c ****   *         contains the configuration information for the erasing.
ARM GAS  /tmp/cctMPBvi.s 			page 5


 152:src/stm32f1xx_hal_flash_ex.c ****   *
 153:src/stm32f1xx_hal_flash_ex.c ****   * @param[out]  PageError pointer to variable  that
 154:src/stm32f1xx_hal_flash_ex.c ****   *         contains the configuration information on faulty page in case of error
 155:src/stm32f1xx_hal_flash_ex.c ****   *         (0xFFFFFFFF means that all the pages have been correctly erased)
 156:src/stm32f1xx_hal_flash_ex.c ****   *
 157:src/stm32f1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 158:src/stm32f1xx_hal_flash_ex.c ****   */
 159:src/stm32f1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
 160:src/stm32f1xx_hal_flash_ex.c **** {
 161:src/stm32f1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 162:src/stm32f1xx_hal_flash_ex.c ****   uint32_t address = 0U;
 163:src/stm32f1xx_hal_flash_ex.c **** 
 164:src/stm32f1xx_hal_flash_ex.c ****   /* Process Locked */
 165:src/stm32f1xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 166:src/stm32f1xx_hal_flash_ex.c **** 
 167:src/stm32f1xx_hal_flash_ex.c ****   /* Check the parameters */
 168:src/stm32f1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 169:src/stm32f1xx_hal_flash_ex.c **** 
 170:src/stm32f1xx_hal_flash_ex.c ****   if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 171:src/stm32f1xx_hal_flash_ex.c ****   {
 172:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_BANK2_END)
 173:src/stm32f1xx_hal_flash_ex.c ****     if (pEraseInit->Banks == FLASH_BANK_BOTH)
 174:src/stm32f1xx_hal_flash_ex.c ****     {
 175:src/stm32f1xx_hal_flash_ex.c ****       /* Mass Erase requested for Bank1 and Bank2 */
 176:src/stm32f1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 177:src/stm32f1xx_hal_flash_ex.c ****       if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 178:src/stm32f1xx_hal_flash_ex.c ****           (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
 179:src/stm32f1xx_hal_flash_ex.c ****       {
 180:src/stm32f1xx_hal_flash_ex.c ****         /*Mass erase to be done*/
 181:src/stm32f1xx_hal_flash_ex.c ****         FLASH_MassErase(FLASH_BANK_BOTH);
 182:src/stm32f1xx_hal_flash_ex.c ****         
 183:src/stm32f1xx_hal_flash_ex.c ****         /* Wait for last operation to be completed */
 184:src/stm32f1xx_hal_flash_ex.c ****         if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 185:src/stm32f1xx_hal_flash_ex.c ****             (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
 186:src/stm32f1xx_hal_flash_ex.c ****         {
 187:src/stm32f1xx_hal_flash_ex.c ****           status = HAL_OK;
 188:src/stm32f1xx_hal_flash_ex.c ****         }
 189:src/stm32f1xx_hal_flash_ex.c ****         
 190:src/stm32f1xx_hal_flash_ex.c ****         /* If the erase operation is completed, disable the MER Bit */
 191:src/stm32f1xx_hal_flash_ex.c ****         CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 192:src/stm32f1xx_hal_flash_ex.c ****         CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
 193:src/stm32f1xx_hal_flash_ex.c ****       }
 194:src/stm32f1xx_hal_flash_ex.c ****     }
 195:src/stm32f1xx_hal_flash_ex.c ****     else if (pEraseInit->Banks == FLASH_BANK_2)
 196:src/stm32f1xx_hal_flash_ex.c ****     {
 197:src/stm32f1xx_hal_flash_ex.c ****       /* Mass Erase requested for Bank2 */
 198:src/stm32f1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 199:src/stm32f1xx_hal_flash_ex.c ****       if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 200:src/stm32f1xx_hal_flash_ex.c ****       {
 201:src/stm32f1xx_hal_flash_ex.c ****         /*Mass erase to be done*/
 202:src/stm32f1xx_hal_flash_ex.c ****         FLASH_MassErase(FLASH_BANK_2);
 203:src/stm32f1xx_hal_flash_ex.c ****         
 204:src/stm32f1xx_hal_flash_ex.c ****         /* Wait for last operation to be completed */
 205:src/stm32f1xx_hal_flash_ex.c ****         status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
 206:src/stm32f1xx_hal_flash_ex.c ****         
 207:src/stm32f1xx_hal_flash_ex.c ****         /* If the erase operation is completed, disable the MER Bit */
 208:src/stm32f1xx_hal_flash_ex.c ****         CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
ARM GAS  /tmp/cctMPBvi.s 			page 6


 209:src/stm32f1xx_hal_flash_ex.c ****       }
 210:src/stm32f1xx_hal_flash_ex.c ****     }
 211:src/stm32f1xx_hal_flash_ex.c ****     else 
 212:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_BANK2_END */
 213:src/stm32f1xx_hal_flash_ex.c ****     {
 214:src/stm32f1xx_hal_flash_ex.c ****       /* Mass Erase requested for Bank1 */
 215:src/stm32f1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 216:src/stm32f1xx_hal_flash_ex.c ****       if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 217:src/stm32f1xx_hal_flash_ex.c ****       {
 218:src/stm32f1xx_hal_flash_ex.c ****         /*Mass erase to be done*/
 219:src/stm32f1xx_hal_flash_ex.c ****         FLASH_MassErase(FLASH_BANK_1);
 220:src/stm32f1xx_hal_flash_ex.c ****         
 221:src/stm32f1xx_hal_flash_ex.c ****         /* Wait for last operation to be completed */
 222:src/stm32f1xx_hal_flash_ex.c ****         status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 223:src/stm32f1xx_hal_flash_ex.c ****         
 224:src/stm32f1xx_hal_flash_ex.c ****         /* If the erase operation is completed, disable the MER Bit */
 225:src/stm32f1xx_hal_flash_ex.c ****         CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 226:src/stm32f1xx_hal_flash_ex.c ****       }
 227:src/stm32f1xx_hal_flash_ex.c ****     }
 228:src/stm32f1xx_hal_flash_ex.c ****   }
 229:src/stm32f1xx_hal_flash_ex.c ****   else
 230:src/stm32f1xx_hal_flash_ex.c ****   {
 231:src/stm32f1xx_hal_flash_ex.c ****     /* Page Erase is requested */
 232:src/stm32f1xx_hal_flash_ex.c ****     /* Check the parameters */
 233:src/stm32f1xx_hal_flash_ex.c ****     assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 234:src/stm32f1xx_hal_flash_ex.c ****     assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 235:src/stm32f1xx_hal_flash_ex.c ****     
 236:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_BANK2_END)
 237:src/stm32f1xx_hal_flash_ex.c ****     /* Page Erase requested on address located on bank2 */
 238:src/stm32f1xx_hal_flash_ex.c ****     if(pEraseInit->PageAddress > FLASH_BANK1_END)
 239:src/stm32f1xx_hal_flash_ex.c ****     {   
 240:src/stm32f1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 241:src/stm32f1xx_hal_flash_ex.c ****       if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 242:src/stm32f1xx_hal_flash_ex.c ****       {
 243:src/stm32f1xx_hal_flash_ex.c ****         /*Initialization of PageError variable*/
 244:src/stm32f1xx_hal_flash_ex.c ****         *PageError = 0xFFFFFFFFU;
 245:src/stm32f1xx_hal_flash_ex.c ****         
 246:src/stm32f1xx_hal_flash_ex.c ****         /* Erase by page by page to be done*/
 247:src/stm32f1xx_hal_flash_ex.c ****         for(address = pEraseInit->PageAddress;
 248:src/stm32f1xx_hal_flash_ex.c ****             address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 249:src/stm32f1xx_hal_flash_ex.c ****             address += FLASH_PAGE_SIZE)
 250:src/stm32f1xx_hal_flash_ex.c ****         {
 251:src/stm32f1xx_hal_flash_ex.c ****           FLASH_PageErase(address);
 252:src/stm32f1xx_hal_flash_ex.c ****           
 253:src/stm32f1xx_hal_flash_ex.c ****           /* Wait for last operation to be completed */
 254:src/stm32f1xx_hal_flash_ex.c ****           status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
 255:src/stm32f1xx_hal_flash_ex.c ****           
 256:src/stm32f1xx_hal_flash_ex.c ****           /* If the erase operation is completed, disable the PER Bit */
 257:src/stm32f1xx_hal_flash_ex.c ****           CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
 258:src/stm32f1xx_hal_flash_ex.c ****           
 259:src/stm32f1xx_hal_flash_ex.c ****           if (status != HAL_OK)
 260:src/stm32f1xx_hal_flash_ex.c ****           {
 261:src/stm32f1xx_hal_flash_ex.c ****             /* In case of error, stop erase procedure and return the faulty address */
 262:src/stm32f1xx_hal_flash_ex.c ****             *PageError = address;
 263:src/stm32f1xx_hal_flash_ex.c ****             break;
 264:src/stm32f1xx_hal_flash_ex.c ****           }
 265:src/stm32f1xx_hal_flash_ex.c ****         }
ARM GAS  /tmp/cctMPBvi.s 			page 7


 266:src/stm32f1xx_hal_flash_ex.c ****       }
 267:src/stm32f1xx_hal_flash_ex.c ****     }
 268:src/stm32f1xx_hal_flash_ex.c ****     else
 269:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_BANK2_END */
 270:src/stm32f1xx_hal_flash_ex.c ****    {
 271:src/stm32f1xx_hal_flash_ex.c ****       /* Page Erase requested on address located on bank1 */
 272:src/stm32f1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 273:src/stm32f1xx_hal_flash_ex.c ****       if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 274:src/stm32f1xx_hal_flash_ex.c ****       {
 275:src/stm32f1xx_hal_flash_ex.c ****         /*Initialization of PageError variable*/
 276:src/stm32f1xx_hal_flash_ex.c ****         *PageError = 0xFFFFFFFFU;
 277:src/stm32f1xx_hal_flash_ex.c ****         
 278:src/stm32f1xx_hal_flash_ex.c ****         /* Erase page by page to be done*/
 279:src/stm32f1xx_hal_flash_ex.c ****         for(address = pEraseInit->PageAddress;
 280:src/stm32f1xx_hal_flash_ex.c ****             address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 281:src/stm32f1xx_hal_flash_ex.c ****             address += FLASH_PAGE_SIZE)
 282:src/stm32f1xx_hal_flash_ex.c ****         {
 283:src/stm32f1xx_hal_flash_ex.c ****           FLASH_PageErase(address);
 284:src/stm32f1xx_hal_flash_ex.c ****           
 285:src/stm32f1xx_hal_flash_ex.c ****           /* Wait for last operation to be completed */
 286:src/stm32f1xx_hal_flash_ex.c ****           status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 287:src/stm32f1xx_hal_flash_ex.c ****           
 288:src/stm32f1xx_hal_flash_ex.c ****           /* If the erase operation is completed, disable the PER Bit */
 289:src/stm32f1xx_hal_flash_ex.c ****           CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 290:src/stm32f1xx_hal_flash_ex.c ****           
 291:src/stm32f1xx_hal_flash_ex.c ****           if (status != HAL_OK)
 292:src/stm32f1xx_hal_flash_ex.c ****           {
 293:src/stm32f1xx_hal_flash_ex.c ****             /* In case of error, stop erase procedure and return the faulty address */
 294:src/stm32f1xx_hal_flash_ex.c ****             *PageError = address;
 295:src/stm32f1xx_hal_flash_ex.c ****             break;
 296:src/stm32f1xx_hal_flash_ex.c ****           }
 297:src/stm32f1xx_hal_flash_ex.c ****         }
 298:src/stm32f1xx_hal_flash_ex.c ****       }
 299:src/stm32f1xx_hal_flash_ex.c ****     }
 300:src/stm32f1xx_hal_flash_ex.c ****   }
 301:src/stm32f1xx_hal_flash_ex.c **** 
 302:src/stm32f1xx_hal_flash_ex.c ****   /* Process Unlocked */
 303:src/stm32f1xx_hal_flash_ex.c ****   __HAL_UNLOCK(&pFlash);
 304:src/stm32f1xx_hal_flash_ex.c **** 
 305:src/stm32f1xx_hal_flash_ex.c ****   return status;
 306:src/stm32f1xx_hal_flash_ex.c **** }
 307:src/stm32f1xx_hal_flash_ex.c **** 
 308:src/stm32f1xx_hal_flash_ex.c **** /**
 309:src/stm32f1xx_hal_flash_ex.c ****   * @brief  Perform a mass erase or erase the specified FLASH memory pages with interrupt enabled
 310:src/stm32f1xx_hal_flash_ex.c ****   * @note   To correctly run this function, the @ref HAL_FLASH_Unlock() function
 311:src/stm32f1xx_hal_flash_ex.c ****   *         must be called before.
 312:src/stm32f1xx_hal_flash_ex.c ****   *         Call the @ref HAL_FLASH_Lock() to disable the flash memory access 
 313:src/stm32f1xx_hal_flash_ex.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)
 314:src/stm32f1xx_hal_flash_ex.c ****   * @param  pEraseInit pointer to an FLASH_EraseInitTypeDef structure that
 315:src/stm32f1xx_hal_flash_ex.c ****   *         contains the configuration information for the erasing.
 316:src/stm32f1xx_hal_flash_ex.c ****   *
 317:src/stm32f1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 318:src/stm32f1xx_hal_flash_ex.c ****   */
 319:src/stm32f1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
 320:src/stm32f1xx_hal_flash_ex.c **** {
 321:src/stm32f1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 322:src/stm32f1xx_hal_flash_ex.c **** 
ARM GAS  /tmp/cctMPBvi.s 			page 8


 323:src/stm32f1xx_hal_flash_ex.c ****   /* Process Locked */
 324:src/stm32f1xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 325:src/stm32f1xx_hal_flash_ex.c **** 
 326:src/stm32f1xx_hal_flash_ex.c ****   /* If procedure already ongoing, reject the next one */
 327:src/stm32f1xx_hal_flash_ex.c ****   if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 328:src/stm32f1xx_hal_flash_ex.c ****   {
 329:src/stm32f1xx_hal_flash_ex.c ****     return HAL_ERROR;
 330:src/stm32f1xx_hal_flash_ex.c ****   }
 331:src/stm32f1xx_hal_flash_ex.c ****   
 332:src/stm32f1xx_hal_flash_ex.c ****   /* Check the parameters */
 333:src/stm32f1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 334:src/stm32f1xx_hal_flash_ex.c **** 
 335:src/stm32f1xx_hal_flash_ex.c ****   /* Enable End of FLASH Operation and Error source interrupts */
 336:src/stm32f1xx_hal_flash_ex.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 337:src/stm32f1xx_hal_flash_ex.c **** 
 338:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_BANK2_END)
 339:src/stm32f1xx_hal_flash_ex.c ****   /* Enable End of FLASH Operation and Error source interrupts */
 340:src/stm32f1xx_hal_flash_ex.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
 341:src/stm32f1xx_hal_flash_ex.c ****   
 342:src/stm32f1xx_hal_flash_ex.c **** #endif
 343:src/stm32f1xx_hal_flash_ex.c ****   if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 344:src/stm32f1xx_hal_flash_ex.c ****   {
 345:src/stm32f1xx_hal_flash_ex.c ****     /*Mass erase to be done*/
 346:src/stm32f1xx_hal_flash_ex.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 347:src/stm32f1xx_hal_flash_ex.c ****         FLASH_MassErase(pEraseInit->Banks);
 348:src/stm32f1xx_hal_flash_ex.c ****   }
 349:src/stm32f1xx_hal_flash_ex.c ****   else
 350:src/stm32f1xx_hal_flash_ex.c ****   {
 351:src/stm32f1xx_hal_flash_ex.c ****     /* Erase by page to be done*/
 352:src/stm32f1xx_hal_flash_ex.c **** 
 353:src/stm32f1xx_hal_flash_ex.c ****     /* Check the parameters */
 354:src/stm32f1xx_hal_flash_ex.c ****     assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 355:src/stm32f1xx_hal_flash_ex.c ****     assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 356:src/stm32f1xx_hal_flash_ex.c **** 
 357:src/stm32f1xx_hal_flash_ex.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
 358:src/stm32f1xx_hal_flash_ex.c ****     pFlash.DataRemaining = pEraseInit->NbPages;
 359:src/stm32f1xx_hal_flash_ex.c ****     pFlash.Address = pEraseInit->PageAddress;
 360:src/stm32f1xx_hal_flash_ex.c **** 
 361:src/stm32f1xx_hal_flash_ex.c ****     /*Erase 1st page and wait for IT*/
 362:src/stm32f1xx_hal_flash_ex.c ****     FLASH_PageErase(pEraseInit->PageAddress);
 363:src/stm32f1xx_hal_flash_ex.c ****   }
 364:src/stm32f1xx_hal_flash_ex.c **** 
 365:src/stm32f1xx_hal_flash_ex.c ****   return status;
 366:src/stm32f1xx_hal_flash_ex.c **** }
 367:src/stm32f1xx_hal_flash_ex.c **** 
 368:src/stm32f1xx_hal_flash_ex.c **** /**
 369:src/stm32f1xx_hal_flash_ex.c ****   * @}
 370:src/stm32f1xx_hal_flash_ex.c ****   */
 371:src/stm32f1xx_hal_flash_ex.c **** 
 372:src/stm32f1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions_Group2 Option Bytes Programming functions
 373:src/stm32f1xx_hal_flash_ex.c ****  *  @brief   Option Bytes Programming functions
 374:src/stm32f1xx_hal_flash_ex.c ****   *
 375:src/stm32f1xx_hal_flash_ex.c **** @verbatim   
 376:src/stm32f1xx_hal_flash_ex.c ****   ==============================================================================
 377:src/stm32f1xx_hal_flash_ex.c ****                 ##### Option Bytes Programming functions ##### 
 378:src/stm32f1xx_hal_flash_ex.c ****   ==============================================================================  
 379:src/stm32f1xx_hal_flash_ex.c ****     [..]
ARM GAS  /tmp/cctMPBvi.s 			page 9


 380:src/stm32f1xx_hal_flash_ex.c ****     This subsection provides a set of functions allowing to control the FLASH 
 381:src/stm32f1xx_hal_flash_ex.c ****     option bytes operations.
 382:src/stm32f1xx_hal_flash_ex.c **** 
 383:src/stm32f1xx_hal_flash_ex.c **** @endverbatim
 384:src/stm32f1xx_hal_flash_ex.c ****   * @{
 385:src/stm32f1xx_hal_flash_ex.c ****   */
 386:src/stm32f1xx_hal_flash_ex.c **** 
 387:src/stm32f1xx_hal_flash_ex.c **** /**
 388:src/stm32f1xx_hal_flash_ex.c ****   * @brief  Erases the FLASH option bytes.
 389:src/stm32f1xx_hal_flash_ex.c ****   * @note   This functions erases all option bytes except the Read protection (RDP).
 390:src/stm32f1xx_hal_flash_ex.c ****   *         The function @ref HAL_FLASH_Unlock() should be called before to unlock the FLASH interf
 391:src/stm32f1xx_hal_flash_ex.c ****   *         The function @ref HAL_FLASH_OB_Unlock() should be called before to unlock the options b
 392:src/stm32f1xx_hal_flash_ex.c ****   *         The function @ref HAL_FLASH_OB_Launch() should be called after to force the reload of t
 393:src/stm32f1xx_hal_flash_ex.c ****   *         (system reset will occur)
 394:src/stm32f1xx_hal_flash_ex.c ****   * @retval HAL status
 395:src/stm32f1xx_hal_flash_ex.c ****   */
 396:src/stm32f1xx_hal_flash_ex.c **** 
 397:src/stm32f1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
 398:src/stm32f1xx_hal_flash_ex.c **** {
 399:src/stm32f1xx_hal_flash_ex.c ****   uint8_t rdptmp = OB_RDP_LEVEL_0;
 400:src/stm32f1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 401:src/stm32f1xx_hal_flash_ex.c **** 
 402:src/stm32f1xx_hal_flash_ex.c ****   /* Get the actual read protection Option Byte value */
 403:src/stm32f1xx_hal_flash_ex.c ****   rdptmp = FLASH_OB_GetRDP();
 404:src/stm32f1xx_hal_flash_ex.c **** 
 405:src/stm32f1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 406:src/stm32f1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 407:src/stm32f1xx_hal_flash_ex.c **** 
 408:src/stm32f1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 409:src/stm32f1xx_hal_flash_ex.c ****   {
 410:src/stm32f1xx_hal_flash_ex.c ****     /* Clean the error context */
 411:src/stm32f1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 412:src/stm32f1xx_hal_flash_ex.c **** 
 413:src/stm32f1xx_hal_flash_ex.c ****     /* If the previous operation is completed, proceed to erase the option bytes */
 414:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 415:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR, FLASH_CR_STRT);
 416:src/stm32f1xx_hal_flash_ex.c **** 
 417:src/stm32f1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
 418:src/stm32f1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 419:src/stm32f1xx_hal_flash_ex.c **** 
 420:src/stm32f1xx_hal_flash_ex.c ****     /* If the erase operation is completed, disable the OPTER Bit */
 421:src/stm32f1xx_hal_flash_ex.c ****     CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 422:src/stm32f1xx_hal_flash_ex.c **** 
 423:src/stm32f1xx_hal_flash_ex.c ****     if(status == HAL_OK)
 424:src/stm32f1xx_hal_flash_ex.c ****     {
 425:src/stm32f1xx_hal_flash_ex.c ****       /* Restore the last read protection Option Byte value */
 426:src/stm32f1xx_hal_flash_ex.c ****       status = FLASH_OB_RDP_LevelConfig(rdptmp);
 427:src/stm32f1xx_hal_flash_ex.c ****     }
 428:src/stm32f1xx_hal_flash_ex.c ****   }
 429:src/stm32f1xx_hal_flash_ex.c **** 
 430:src/stm32f1xx_hal_flash_ex.c ****   /* Return the erase status */
 431:src/stm32f1xx_hal_flash_ex.c ****   return status;
 432:src/stm32f1xx_hal_flash_ex.c **** }
 433:src/stm32f1xx_hal_flash_ex.c **** 
 434:src/stm32f1xx_hal_flash_ex.c **** /**
 435:src/stm32f1xx_hal_flash_ex.c ****   * @brief  Program option bytes
 436:src/stm32f1xx_hal_flash_ex.c ****   * @note   The function @ref HAL_FLASH_Unlock() should be called before to unlock the FLASH interf
ARM GAS  /tmp/cctMPBvi.s 			page 10


 437:src/stm32f1xx_hal_flash_ex.c ****   *         The function @ref HAL_FLASH_OB_Unlock() should be called before to unlock the options b
 438:src/stm32f1xx_hal_flash_ex.c ****   *         The function @ref HAL_FLASH_OB_Launch() should be called after to force the reload of t
 439:src/stm32f1xx_hal_flash_ex.c ****   *         (system reset will occur)
 440:src/stm32f1xx_hal_flash_ex.c ****   *
 441:src/stm32f1xx_hal_flash_ex.c ****   * @param  pOBInit pointer to an FLASH_OBInitStruct structure that
 442:src/stm32f1xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 443:src/stm32f1xx_hal_flash_ex.c ****   *
 444:src/stm32f1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 445:src/stm32f1xx_hal_flash_ex.c ****   */
 446:src/stm32f1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
 447:src/stm32f1xx_hal_flash_ex.c **** {
 448:src/stm32f1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 449:src/stm32f1xx_hal_flash_ex.c **** 
 450:src/stm32f1xx_hal_flash_ex.c ****   /* Process Locked */
 451:src/stm32f1xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 452:src/stm32f1xx_hal_flash_ex.c **** 
 453:src/stm32f1xx_hal_flash_ex.c ****   /* Check the parameters */
 454:src/stm32f1xx_hal_flash_ex.c ****   assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 455:src/stm32f1xx_hal_flash_ex.c **** 
 456:src/stm32f1xx_hal_flash_ex.c ****   /* Write protection configuration */
 457:src/stm32f1xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 458:src/stm32f1xx_hal_flash_ex.c ****   {
 459:src/stm32f1xx_hal_flash_ex.c ****     assert_param(IS_WRPSTATE(pOBInit->WRPState));
 460:src/stm32f1xx_hal_flash_ex.c ****     if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 461:src/stm32f1xx_hal_flash_ex.c ****     {
 462:src/stm32f1xx_hal_flash_ex.c ****       /* Enable of Write protection on the selected page */
 463:src/stm32f1xx_hal_flash_ex.c ****       status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 464:src/stm32f1xx_hal_flash_ex.c ****     }
 465:src/stm32f1xx_hal_flash_ex.c ****     else
 466:src/stm32f1xx_hal_flash_ex.c ****     {
 467:src/stm32f1xx_hal_flash_ex.c ****       /* Disable of Write protection on the selected page */
 468:src/stm32f1xx_hal_flash_ex.c ****       status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 469:src/stm32f1xx_hal_flash_ex.c ****     }
 470:src/stm32f1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 471:src/stm32f1xx_hal_flash_ex.c ****     {
 472:src/stm32f1xx_hal_flash_ex.c ****       /* Process Unlocked */
 473:src/stm32f1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
 474:src/stm32f1xx_hal_flash_ex.c ****       return status;
 475:src/stm32f1xx_hal_flash_ex.c ****     }
 476:src/stm32f1xx_hal_flash_ex.c ****   }
 477:src/stm32f1xx_hal_flash_ex.c **** 
 478:src/stm32f1xx_hal_flash_ex.c ****   /* Read protection configuration */
 479:src/stm32f1xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 480:src/stm32f1xx_hal_flash_ex.c ****   {
 481:src/stm32f1xx_hal_flash_ex.c ****     status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 482:src/stm32f1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 483:src/stm32f1xx_hal_flash_ex.c ****     {
 484:src/stm32f1xx_hal_flash_ex.c ****       /* Process Unlocked */
 485:src/stm32f1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
 486:src/stm32f1xx_hal_flash_ex.c ****       return status;
 487:src/stm32f1xx_hal_flash_ex.c ****     }
 488:src/stm32f1xx_hal_flash_ex.c ****   }
 489:src/stm32f1xx_hal_flash_ex.c **** 
 490:src/stm32f1xx_hal_flash_ex.c ****   /* USER configuration */
 491:src/stm32f1xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 492:src/stm32f1xx_hal_flash_ex.c ****   {
 493:src/stm32f1xx_hal_flash_ex.c ****     status = FLASH_OB_UserConfig(pOBInit->USERConfig);
ARM GAS  /tmp/cctMPBvi.s 			page 11


 494:src/stm32f1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 495:src/stm32f1xx_hal_flash_ex.c ****     {
 496:src/stm32f1xx_hal_flash_ex.c ****       /* Process Unlocked */
 497:src/stm32f1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
 498:src/stm32f1xx_hal_flash_ex.c ****       return status;
 499:src/stm32f1xx_hal_flash_ex.c ****     }
 500:src/stm32f1xx_hal_flash_ex.c ****   }
 501:src/stm32f1xx_hal_flash_ex.c **** 
 502:src/stm32f1xx_hal_flash_ex.c ****   /* DATA configuration*/
 503:src/stm32f1xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 504:src/stm32f1xx_hal_flash_ex.c ****   {
 505:src/stm32f1xx_hal_flash_ex.c ****     status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 506:src/stm32f1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 507:src/stm32f1xx_hal_flash_ex.c ****     {
 508:src/stm32f1xx_hal_flash_ex.c ****       /* Process Unlocked */
 509:src/stm32f1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
 510:src/stm32f1xx_hal_flash_ex.c ****       return status;
 511:src/stm32f1xx_hal_flash_ex.c ****     }
 512:src/stm32f1xx_hal_flash_ex.c ****   }
 513:src/stm32f1xx_hal_flash_ex.c **** 
 514:src/stm32f1xx_hal_flash_ex.c ****   /* Process Unlocked */
 515:src/stm32f1xx_hal_flash_ex.c ****   __HAL_UNLOCK(&pFlash);
 516:src/stm32f1xx_hal_flash_ex.c **** 
 517:src/stm32f1xx_hal_flash_ex.c ****   return status;
 518:src/stm32f1xx_hal_flash_ex.c **** }
 519:src/stm32f1xx_hal_flash_ex.c **** 
 520:src/stm32f1xx_hal_flash_ex.c **** /**
 521:src/stm32f1xx_hal_flash_ex.c ****   * @brief  Get the Option byte configuration
 522:src/stm32f1xx_hal_flash_ex.c ****   * @param  pOBInit pointer to an FLASH_OBInitStruct structure that
 523:src/stm32f1xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 524:src/stm32f1xx_hal_flash_ex.c ****   *
 525:src/stm32f1xx_hal_flash_ex.c ****   * @retval None
 526:src/stm32f1xx_hal_flash_ex.c ****   */
 527:src/stm32f1xx_hal_flash_ex.c **** void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
 528:src/stm32f1xx_hal_flash_ex.c **** {
 529:src/stm32f1xx_hal_flash_ex.c ****   pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 530:src/stm32f1xx_hal_flash_ex.c **** 
 531:src/stm32f1xx_hal_flash_ex.c ****   /*Get WRP*/
 532:src/stm32f1xx_hal_flash_ex.c ****   pOBInit->WRPPage = FLASH_OB_GetWRP();
 533:src/stm32f1xx_hal_flash_ex.c **** 
 534:src/stm32f1xx_hal_flash_ex.c ****   /*Get RDP Level*/
 535:src/stm32f1xx_hal_flash_ex.c ****   pOBInit->RDPLevel = FLASH_OB_GetRDP();
 536:src/stm32f1xx_hal_flash_ex.c **** 
 537:src/stm32f1xx_hal_flash_ex.c ****   /*Get USER*/
 538:src/stm32f1xx_hal_flash_ex.c ****   pOBInit->USERConfig = FLASH_OB_GetUser();
 539:src/stm32f1xx_hal_flash_ex.c **** }
 540:src/stm32f1xx_hal_flash_ex.c **** 
 541:src/stm32f1xx_hal_flash_ex.c **** /**
 542:src/stm32f1xx_hal_flash_ex.c ****   * @brief  Get the Option byte user data
 543:src/stm32f1xx_hal_flash_ex.c ****   * @param  DATAAdress Address of the option byte DATA
 544:src/stm32f1xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 545:src/stm32f1xx_hal_flash_ex.c ****   *            @arg @ref OB_DATA_ADDRESS_DATA0
 546:src/stm32f1xx_hal_flash_ex.c ****   *            @arg @ref OB_DATA_ADDRESS_DATA1
 547:src/stm32f1xx_hal_flash_ex.c ****   * @retval Value programmed in USER data
 548:src/stm32f1xx_hal_flash_ex.c ****   */
 549:src/stm32f1xx_hal_flash_ex.c **** uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
 550:src/stm32f1xx_hal_flash_ex.c **** {
ARM GAS  /tmp/cctMPBvi.s 			page 12


 551:src/stm32f1xx_hal_flash_ex.c ****   uint32_t value = 0;
 552:src/stm32f1xx_hal_flash_ex.c ****   
 553:src/stm32f1xx_hal_flash_ex.c ****   if (DATAAdress == OB_DATA_ADDRESS_DATA0)
 554:src/stm32f1xx_hal_flash_ex.c ****   {
 555:src/stm32f1xx_hal_flash_ex.c ****     /* Get value programmed in OB USER Data0 */
 556:src/stm32f1xx_hal_flash_ex.c ****     value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
 557:src/stm32f1xx_hal_flash_ex.c ****   }
 558:src/stm32f1xx_hal_flash_ex.c ****   else
 559:src/stm32f1xx_hal_flash_ex.c ****   {
 560:src/stm32f1xx_hal_flash_ex.c ****     /* Get value programmed in OB USER Data1 */
 561:src/stm32f1xx_hal_flash_ex.c ****     value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
 562:src/stm32f1xx_hal_flash_ex.c ****   }
 563:src/stm32f1xx_hal_flash_ex.c ****   
 564:src/stm32f1xx_hal_flash_ex.c ****   return value;
 565:src/stm32f1xx_hal_flash_ex.c **** }
 566:src/stm32f1xx_hal_flash_ex.c **** 
 567:src/stm32f1xx_hal_flash_ex.c **** /**
 568:src/stm32f1xx_hal_flash_ex.c ****   * @}
 569:src/stm32f1xx_hal_flash_ex.c ****   */
 570:src/stm32f1xx_hal_flash_ex.c **** 
 571:src/stm32f1xx_hal_flash_ex.c **** /**
 572:src/stm32f1xx_hal_flash_ex.c ****   * @}
 573:src/stm32f1xx_hal_flash_ex.c ****   */
 574:src/stm32f1xx_hal_flash_ex.c **** 
 575:src/stm32f1xx_hal_flash_ex.c **** /** @addtogroup FLASHEx_Private_Functions
 576:src/stm32f1xx_hal_flash_ex.c ****  * @{
 577:src/stm32f1xx_hal_flash_ex.c ****  */
 578:src/stm32f1xx_hal_flash_ex.c **** 
 579:src/stm32f1xx_hal_flash_ex.c **** /**
 580:src/stm32f1xx_hal_flash_ex.c ****   * @brief  Full erase of FLASH memory Bank 
 581:src/stm32f1xx_hal_flash_ex.c ****   * @param  Banks Banks to be erased
 582:src/stm32f1xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 583:src/stm32f1xx_hal_flash_ex.c ****   *            @arg @ref FLASH_BANK_1 Bank1 to be erased
 584:src/stm32f1xx_hal_flash_ex.c ****   @if STM32F101xG
 585:src/stm32f1xx_hal_flash_ex.c ****   *            @arg @ref FLASH_BANK_2 Bank2 to be erased
 586:src/stm32f1xx_hal_flash_ex.c ****   *            @arg @ref FLASH_BANK_BOTH Bank1 and Bank2 to be erased
 587:src/stm32f1xx_hal_flash_ex.c ****   @endif
 588:src/stm32f1xx_hal_flash_ex.c ****   @if STM32F103xG
 589:src/stm32f1xx_hal_flash_ex.c ****   *            @arg @ref FLASH_BANK_2 Bank2 to be erased
 590:src/stm32f1xx_hal_flash_ex.c ****   *            @arg @ref FLASH_BANK_BOTH Bank1 and Bank2 to be erased
 591:src/stm32f1xx_hal_flash_ex.c ****   @endif
 592:src/stm32f1xx_hal_flash_ex.c ****   *
 593:src/stm32f1xx_hal_flash_ex.c ****   * @retval None
 594:src/stm32f1xx_hal_flash_ex.c ****   */
 595:src/stm32f1xx_hal_flash_ex.c **** static void FLASH_MassErase(uint32_t Banks)
  78              		.loc 1 595 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83              	.LVL0:
 596:src/stm32f1xx_hal_flash_ex.c **** {
 597:src/stm32f1xx_hal_flash_ex.c ****   /* Check the parameters */
 598:src/stm32f1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
 599:src/stm32f1xx_hal_flash_ex.c **** 
 600:src/stm32f1xx_hal_flash_ex.c ****   /* Clean the error context */
 601:src/stm32f1xx_hal_flash_ex.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
ARM GAS  /tmp/cctMPBvi.s 			page 13


  84              		.loc 1 601 0
  85 0000 0022     		movs	r2, #0	@ tmp115,
  86 0002 064B     		ldr	r3, .L2	@ tmp114,
  87 0004 DA61     		str	r2, [r3, #28]	@ tmp115, pFlash.ErrorCode
 602:src/stm32f1xx_hal_flash_ex.c **** 
 603:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_BANK2_END)
 604:src/stm32f1xx_hal_flash_ex.c ****   if(Banks == FLASH_BANK_BOTH)
 605:src/stm32f1xx_hal_flash_ex.c ****   {
 606:src/stm32f1xx_hal_flash_ex.c ****     /* bank1 & bank2 will be erased*/
 607:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR, FLASH_CR_MER);
 608:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR2, FLASH_CR2_MER);
 609:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR, FLASH_CR_STRT);
 610:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
 611:src/stm32f1xx_hal_flash_ex.c ****   }
 612:src/stm32f1xx_hal_flash_ex.c ****   else if(Banks == FLASH_BANK_2)
 613:src/stm32f1xx_hal_flash_ex.c ****   {
 614:src/stm32f1xx_hal_flash_ex.c ****     /*Only bank2 will be erased*/
 615:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR2, FLASH_CR2_MER);
 616:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
 617:src/stm32f1xx_hal_flash_ex.c ****   }
 618:src/stm32f1xx_hal_flash_ex.c ****   else
 619:src/stm32f1xx_hal_flash_ex.c ****   {
 620:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_BANK2_END */
 621:src/stm32f1xx_hal_flash_ex.c **** #if !defined(FLASH_BANK2_END)
 622:src/stm32f1xx_hal_flash_ex.c ****   /* Prevent unused argument(s) compilation warning */
 623:src/stm32f1xx_hal_flash_ex.c ****   UNUSED(Banks);
 624:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_BANK2_END */  
 625:src/stm32f1xx_hal_flash_ex.c ****     /* Only bank1 will be erased*/
 626:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR, FLASH_CR_MER);
  88              		.loc 1 626 0
  89 0006 064B     		ldr	r3, .L2+4	@ tmp116,
  90 0008 1A69     		ldr	r2, [r3, #16]	@ _1, MEM[(struct FLASH_TypeDef *)1073881088B].CR
  91 000a 42F00402 		orr	r2, r2, #4	@ _2, _1,
  92 000e 1A61     		str	r2, [r3, #16]	@ _2, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 627:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR, FLASH_CR_STRT);
  93              		.loc 1 627 0
  94 0010 1A69     		ldr	r2, [r3, #16]	@ _3, MEM[(struct FLASH_TypeDef *)1073881088B].CR
  95 0012 42F04002 		orr	r2, r2, #64	@ _4, _3,
  96 0016 1A61     		str	r2, [r3, #16]	@ _4, MEM[(struct FLASH_TypeDef *)1073881088B].CR
  97 0018 7047     		bx	lr	@
  98              	.L3:
  99 001a 00BF     		.align	2
 100              	.L2:
 101 001c 00000000 		.word	pFlash
 102 0020 00200240 		.word	1073881088
 103              		.cfi_endproc
 104              	.LFE81:
 105              		.size	FLASH_MassErase.isra.0, .-FLASH_MassErase.isra.0
 106              		.align	1
 107              		.syntax unified
 108              		.thumb
 109              		.thumb_func
 110              		.fpu softvfp
 111              		.type	FLASH_OB_RDP_LevelConfig, %function
 112              	FLASH_OB_RDP_LevelConfig:
 113              	.LFB74:
 628:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_BANK2_END)
ARM GAS  /tmp/cctMPBvi.s 			page 14


 629:src/stm32f1xx_hal_flash_ex.c ****   }
 630:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_BANK2_END */
 631:src/stm32f1xx_hal_flash_ex.c **** }
 632:src/stm32f1xx_hal_flash_ex.c **** 
 633:src/stm32f1xx_hal_flash_ex.c **** /**
 634:src/stm32f1xx_hal_flash_ex.c ****   * @brief  Enable the write protection of the desired pages
 635:src/stm32f1xx_hal_flash_ex.c ****   * @note   An option byte erase is done automatically in this function. 
 636:src/stm32f1xx_hal_flash_ex.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
 637:src/stm32f1xx_hal_flash_ex.c ****   *         it is not possible to program or erase the flash page i if
 638:src/stm32f1xx_hal_flash_ex.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
 639:src/stm32f1xx_hal_flash_ex.c ****   * 
 640:src/stm32f1xx_hal_flash_ex.c ****   * @param  WriteProtectPage specifies the page(s) to be write protected.
 641:src/stm32f1xx_hal_flash_ex.c ****   *         The value of this parameter depend on device used within the same series 
 642:src/stm32f1xx_hal_flash_ex.c ****   * @retval HAL status 
 643:src/stm32f1xx_hal_flash_ex.c ****   */
 644:src/stm32f1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
 645:src/stm32f1xx_hal_flash_ex.c **** {
 646:src/stm32f1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 647:src/stm32f1xx_hal_flash_ex.c ****   uint16_t WRP0_Data = 0xFFFF;
 648:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_WRP1_WRP1)
 649:src/stm32f1xx_hal_flash_ex.c ****   uint16_t WRP1_Data = 0xFFFF;
 650:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_WRP1_WRP1 */
 651:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_WRP2_WRP2)
 652:src/stm32f1xx_hal_flash_ex.c ****   uint16_t WRP2_Data = 0xFFFF;
 653:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_WRP2_WRP2 */
 654:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_WRP3_WRP3)
 655:src/stm32f1xx_hal_flash_ex.c ****   uint16_t WRP3_Data = 0xFFFF;
 656:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_WRP3_WRP3 */
 657:src/stm32f1xx_hal_flash_ex.c ****   
 658:src/stm32f1xx_hal_flash_ex.c ****   /* Check the parameters */
 659:src/stm32f1xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP(WriteProtectPage));
 660:src/stm32f1xx_hal_flash_ex.c ****     
 661:src/stm32f1xx_hal_flash_ex.c ****   /* Get current write protected pages and the new pages to be protected ******/
 662:src/stm32f1xx_hal_flash_ex.c ****   WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 663:src/stm32f1xx_hal_flash_ex.c ****   
 664:src/stm32f1xx_hal_flash_ex.c **** #if defined(OB_WRP_PAGES0TO15MASK)
 665:src/stm32f1xx_hal_flash_ex.c ****   WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
 666:src/stm32f1xx_hal_flash_ex.c **** #elif defined(OB_WRP_PAGES0TO31MASK)
 667:src/stm32f1xx_hal_flash_ex.c ****   WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 668:src/stm32f1xx_hal_flash_ex.c **** #endif /* OB_WRP_PAGES0TO31MASK */
 669:src/stm32f1xx_hal_flash_ex.c ****   
 670:src/stm32f1xx_hal_flash_ex.c **** #if defined(OB_WRP_PAGES16TO31MASK)
 671:src/stm32f1xx_hal_flash_ex.c ****   WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
 672:src/stm32f1xx_hal_flash_ex.c **** #elif defined(OB_WRP_PAGES32TO63MASK)
 673:src/stm32f1xx_hal_flash_ex.c ****   WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 674:src/stm32f1xx_hal_flash_ex.c **** #endif /* OB_WRP_PAGES32TO63MASK */
 675:src/stm32f1xx_hal_flash_ex.c ****  
 676:src/stm32f1xx_hal_flash_ex.c **** #if defined(OB_WRP_PAGES64TO95MASK)
 677:src/stm32f1xx_hal_flash_ex.c ****   WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 678:src/stm32f1xx_hal_flash_ex.c **** #endif /* OB_WRP_PAGES64TO95MASK */
 679:src/stm32f1xx_hal_flash_ex.c **** #if defined(OB_WRP_PAGES32TO47MASK)
 680:src/stm32f1xx_hal_flash_ex.c ****   WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
 681:src/stm32f1xx_hal_flash_ex.c **** #endif /* OB_WRP_PAGES32TO47MASK */
 682:src/stm32f1xx_hal_flash_ex.c **** 
 683:src/stm32f1xx_hal_flash_ex.c **** #if defined(OB_WRP_PAGES96TO127MASK)
 684:src/stm32f1xx_hal_flash_ex.c ****   WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 685:src/stm32f1xx_hal_flash_ex.c **** #elif defined(OB_WRP_PAGES48TO255MASK)
ARM GAS  /tmp/cctMPBvi.s 			page 15


 686:src/stm32f1xx_hal_flash_ex.c ****   WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24U); 
 687:src/stm32f1xx_hal_flash_ex.c **** #elif defined(OB_WRP_PAGES48TO511MASK)
 688:src/stm32f1xx_hal_flash_ex.c ****   WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO511MASK) >> 24U); 
 689:src/stm32f1xx_hal_flash_ex.c **** #elif defined(OB_WRP_PAGES48TO127MASK)
 690:src/stm32f1xx_hal_flash_ex.c ****   WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
 691:src/stm32f1xx_hal_flash_ex.c **** #endif /* OB_WRP_PAGES96TO127MASK */
 692:src/stm32f1xx_hal_flash_ex.c ****   
 693:src/stm32f1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 694:src/stm32f1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 695:src/stm32f1xx_hal_flash_ex.c **** 
 696:src/stm32f1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 697:src/stm32f1xx_hal_flash_ex.c ****   { 
 698:src/stm32f1xx_hal_flash_ex.c ****     /* Clean the error context */
 699:src/stm32f1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 700:src/stm32f1xx_hal_flash_ex.c **** 
 701:src/stm32f1xx_hal_flash_ex.c ****     /* To be able to write again option byte, need to perform a option byte erase */
 702:src/stm32f1xx_hal_flash_ex.c ****     status = HAL_FLASHEx_OBErase();
 703:src/stm32f1xx_hal_flash_ex.c ****     if (status == HAL_OK)  
 704:src/stm32f1xx_hal_flash_ex.c ****     {
 705:src/stm32f1xx_hal_flash_ex.c ****       /* Enable write protection */
 706:src/stm32f1xx_hal_flash_ex.c ****       SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 707:src/stm32f1xx_hal_flash_ex.c **** 
 708:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_WRP0_WRP0)
 709:src/stm32f1xx_hal_flash_ex.c ****       if(WRP0_Data != 0xFFU)
 710:src/stm32f1xx_hal_flash_ex.c ****       {
 711:src/stm32f1xx_hal_flash_ex.c ****         OB->WRP0 &= WRP0_Data;
 712:src/stm32f1xx_hal_flash_ex.c ****         
 713:src/stm32f1xx_hal_flash_ex.c ****         /* Wait for last operation to be completed */
 714:src/stm32f1xx_hal_flash_ex.c ****         status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 715:src/stm32f1xx_hal_flash_ex.c ****       }
 716:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_WRP0_WRP0 */
 717:src/stm32f1xx_hal_flash_ex.c **** 
 718:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_WRP1_WRP1)
 719:src/stm32f1xx_hal_flash_ex.c ****       if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 720:src/stm32f1xx_hal_flash_ex.c ****       {
 721:src/stm32f1xx_hal_flash_ex.c ****         OB->WRP1 &= WRP1_Data;
 722:src/stm32f1xx_hal_flash_ex.c ****         
 723:src/stm32f1xx_hal_flash_ex.c ****         /* Wait for last operation to be completed */
 724:src/stm32f1xx_hal_flash_ex.c ****         status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 725:src/stm32f1xx_hal_flash_ex.c ****       }
 726:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_WRP1_WRP1 */
 727:src/stm32f1xx_hal_flash_ex.c **** 
 728:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_WRP2_WRP2)
 729:src/stm32f1xx_hal_flash_ex.c ****       if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 730:src/stm32f1xx_hal_flash_ex.c ****       {
 731:src/stm32f1xx_hal_flash_ex.c ****         OB->WRP2 &= WRP2_Data;
 732:src/stm32f1xx_hal_flash_ex.c ****         
 733:src/stm32f1xx_hal_flash_ex.c ****         /* Wait for last operation to be completed */
 734:src/stm32f1xx_hal_flash_ex.c ****         status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 735:src/stm32f1xx_hal_flash_ex.c ****       }
 736:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_WRP2_WRP2 */
 737:src/stm32f1xx_hal_flash_ex.c **** 
 738:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_WRP3_WRP3)
 739:src/stm32f1xx_hal_flash_ex.c ****       if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 740:src/stm32f1xx_hal_flash_ex.c ****       {
 741:src/stm32f1xx_hal_flash_ex.c ****         OB->WRP3 &= WRP3_Data;
 742:src/stm32f1xx_hal_flash_ex.c ****         
ARM GAS  /tmp/cctMPBvi.s 			page 16


 743:src/stm32f1xx_hal_flash_ex.c ****         /* Wait for last operation to be completed */
 744:src/stm32f1xx_hal_flash_ex.c ****         status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 745:src/stm32f1xx_hal_flash_ex.c ****       }
 746:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_WRP3_WRP3 */
 747:src/stm32f1xx_hal_flash_ex.c **** 
 748:src/stm32f1xx_hal_flash_ex.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 749:src/stm32f1xx_hal_flash_ex.c ****       CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 750:src/stm32f1xx_hal_flash_ex.c ****     }
 751:src/stm32f1xx_hal_flash_ex.c ****   }
 752:src/stm32f1xx_hal_flash_ex.c ****   
 753:src/stm32f1xx_hal_flash_ex.c ****   return status;
 754:src/stm32f1xx_hal_flash_ex.c **** }
 755:src/stm32f1xx_hal_flash_ex.c **** 
 756:src/stm32f1xx_hal_flash_ex.c **** /**
 757:src/stm32f1xx_hal_flash_ex.c ****   * @brief  Disable the write protection of the desired pages
 758:src/stm32f1xx_hal_flash_ex.c ****   * @note   An option byte erase is done automatically in this function. 
 759:src/stm32f1xx_hal_flash_ex.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
 760:src/stm32f1xx_hal_flash_ex.c ****   *         it is not possible to program or erase the flash page i if   
 761:src/stm32f1xx_hal_flash_ex.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
 762:src/stm32f1xx_hal_flash_ex.c ****   * 
 763:src/stm32f1xx_hal_flash_ex.c ****   * @param  WriteProtectPage specifies the page(s) to be write unprotected.
 764:src/stm32f1xx_hal_flash_ex.c ****   *         The value of this parameter depend on device used within the same series 
 765:src/stm32f1xx_hal_flash_ex.c ****   * @retval HAL status 
 766:src/stm32f1xx_hal_flash_ex.c ****   */
 767:src/stm32f1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
 768:src/stm32f1xx_hal_flash_ex.c **** {
 769:src/stm32f1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 770:src/stm32f1xx_hal_flash_ex.c ****   uint16_t WRP0_Data = 0xFFFF;
 771:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_WRP1_WRP1)
 772:src/stm32f1xx_hal_flash_ex.c ****   uint16_t WRP1_Data = 0xFFFF;
 773:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_WRP1_WRP1 */
 774:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_WRP2_WRP2)
 775:src/stm32f1xx_hal_flash_ex.c ****   uint16_t WRP2_Data = 0xFFFF;
 776:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_WRP2_WRP2 */
 777:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_WRP3_WRP3)
 778:src/stm32f1xx_hal_flash_ex.c ****   uint16_t WRP3_Data = 0xFFFF;
 779:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_WRP3_WRP3 */
 780:src/stm32f1xx_hal_flash_ex.c ****   
 781:src/stm32f1xx_hal_flash_ex.c ****   /* Check the parameters */
 782:src/stm32f1xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP(WriteProtectPage));
 783:src/stm32f1xx_hal_flash_ex.c **** 
 784:src/stm32f1xx_hal_flash_ex.c ****   /* Get current write protected pages and the new pages to be unprotected ******/
 785:src/stm32f1xx_hal_flash_ex.c ****   WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 786:src/stm32f1xx_hal_flash_ex.c **** 
 787:src/stm32f1xx_hal_flash_ex.c **** #if defined(OB_WRP_PAGES0TO15MASK)
 788:src/stm32f1xx_hal_flash_ex.c ****   WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
 789:src/stm32f1xx_hal_flash_ex.c **** #elif defined(OB_WRP_PAGES0TO31MASK)
 790:src/stm32f1xx_hal_flash_ex.c ****   WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 791:src/stm32f1xx_hal_flash_ex.c **** #endif /* OB_WRP_PAGES0TO31MASK */
 792:src/stm32f1xx_hal_flash_ex.c ****   
 793:src/stm32f1xx_hal_flash_ex.c **** #if defined(OB_WRP_PAGES16TO31MASK)
 794:src/stm32f1xx_hal_flash_ex.c ****   WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
 795:src/stm32f1xx_hal_flash_ex.c **** #elif defined(OB_WRP_PAGES32TO63MASK)
 796:src/stm32f1xx_hal_flash_ex.c ****   WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 797:src/stm32f1xx_hal_flash_ex.c **** #endif /* OB_WRP_PAGES32TO63MASK */
 798:src/stm32f1xx_hal_flash_ex.c ****  
 799:src/stm32f1xx_hal_flash_ex.c **** #if defined(OB_WRP_PAGES64TO95MASK)
ARM GAS  /tmp/cctMPBvi.s 			page 17


 800:src/stm32f1xx_hal_flash_ex.c ****   WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 801:src/stm32f1xx_hal_flash_ex.c **** #endif /* OB_WRP_PAGES64TO95MASK */
 802:src/stm32f1xx_hal_flash_ex.c **** #if defined(OB_WRP_PAGES32TO47MASK)
 803:src/stm32f1xx_hal_flash_ex.c ****   WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
 804:src/stm32f1xx_hal_flash_ex.c **** #endif /* OB_WRP_PAGES32TO47MASK */
 805:src/stm32f1xx_hal_flash_ex.c **** 
 806:src/stm32f1xx_hal_flash_ex.c **** #if defined(OB_WRP_PAGES96TO127MASK)
 807:src/stm32f1xx_hal_flash_ex.c ****   WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 808:src/stm32f1xx_hal_flash_ex.c **** #elif defined(OB_WRP_PAGES48TO255MASK)
 809:src/stm32f1xx_hal_flash_ex.c ****   WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24U); 
 810:src/stm32f1xx_hal_flash_ex.c **** #elif defined(OB_WRP_PAGES48TO511MASK)
 811:src/stm32f1xx_hal_flash_ex.c ****   WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO511MASK) >> 24U); 
 812:src/stm32f1xx_hal_flash_ex.c **** #elif defined(OB_WRP_PAGES48TO127MASK)
 813:src/stm32f1xx_hal_flash_ex.c ****   WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
 814:src/stm32f1xx_hal_flash_ex.c **** #endif /* OB_WRP_PAGES96TO127MASK */
 815:src/stm32f1xx_hal_flash_ex.c **** 
 816:src/stm32f1xx_hal_flash_ex.c ****     
 817:src/stm32f1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 818:src/stm32f1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 819:src/stm32f1xx_hal_flash_ex.c **** 
 820:src/stm32f1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 821:src/stm32f1xx_hal_flash_ex.c ****   { 
 822:src/stm32f1xx_hal_flash_ex.c ****     /* Clean the error context */
 823:src/stm32f1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 824:src/stm32f1xx_hal_flash_ex.c **** 
 825:src/stm32f1xx_hal_flash_ex.c ****     /* To be able to write again option byte, need to perform a option byte erase */
 826:src/stm32f1xx_hal_flash_ex.c ****     status = HAL_FLASHEx_OBErase();
 827:src/stm32f1xx_hal_flash_ex.c ****     if (status == HAL_OK)  
 828:src/stm32f1xx_hal_flash_ex.c ****     {
 829:src/stm32f1xx_hal_flash_ex.c ****       SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 830:src/stm32f1xx_hal_flash_ex.c **** 
 831:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_WRP0_WRP0)
 832:src/stm32f1xx_hal_flash_ex.c ****       if(WRP0_Data != 0xFFU)
 833:src/stm32f1xx_hal_flash_ex.c ****       {
 834:src/stm32f1xx_hal_flash_ex.c ****         OB->WRP0 |= WRP0_Data;
 835:src/stm32f1xx_hal_flash_ex.c ****         
 836:src/stm32f1xx_hal_flash_ex.c ****         /* Wait for last operation to be completed */
 837:src/stm32f1xx_hal_flash_ex.c ****         status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 838:src/stm32f1xx_hal_flash_ex.c ****       }
 839:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_WRP0_WRP0 */
 840:src/stm32f1xx_hal_flash_ex.c **** 
 841:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_WRP1_WRP1)
 842:src/stm32f1xx_hal_flash_ex.c ****       if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 843:src/stm32f1xx_hal_flash_ex.c ****       {
 844:src/stm32f1xx_hal_flash_ex.c ****         OB->WRP1 |= WRP1_Data;
 845:src/stm32f1xx_hal_flash_ex.c ****         
 846:src/stm32f1xx_hal_flash_ex.c ****         /* Wait for last operation to be completed */
 847:src/stm32f1xx_hal_flash_ex.c ****         status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 848:src/stm32f1xx_hal_flash_ex.c ****       }
 849:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_WRP1_WRP1 */
 850:src/stm32f1xx_hal_flash_ex.c **** 
 851:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_WRP2_WRP2)
 852:src/stm32f1xx_hal_flash_ex.c ****       if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 853:src/stm32f1xx_hal_flash_ex.c ****       {
 854:src/stm32f1xx_hal_flash_ex.c ****         OB->WRP2 |= WRP2_Data;
 855:src/stm32f1xx_hal_flash_ex.c ****         
 856:src/stm32f1xx_hal_flash_ex.c ****         /* Wait for last operation to be completed */
ARM GAS  /tmp/cctMPBvi.s 			page 18


 857:src/stm32f1xx_hal_flash_ex.c ****         status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 858:src/stm32f1xx_hal_flash_ex.c ****       }
 859:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_WRP2_WRP2 */
 860:src/stm32f1xx_hal_flash_ex.c **** 
 861:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_WRP3_WRP3)
 862:src/stm32f1xx_hal_flash_ex.c ****       if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 863:src/stm32f1xx_hal_flash_ex.c ****       {
 864:src/stm32f1xx_hal_flash_ex.c ****         OB->WRP3 |= WRP3_Data;
 865:src/stm32f1xx_hal_flash_ex.c ****         
 866:src/stm32f1xx_hal_flash_ex.c ****         /* Wait for last operation to be completed */
 867:src/stm32f1xx_hal_flash_ex.c ****         status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 868:src/stm32f1xx_hal_flash_ex.c ****       }
 869:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_WRP3_WRP3 */
 870:src/stm32f1xx_hal_flash_ex.c **** 
 871:src/stm32f1xx_hal_flash_ex.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 872:src/stm32f1xx_hal_flash_ex.c ****       CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 873:src/stm32f1xx_hal_flash_ex.c ****     }
 874:src/stm32f1xx_hal_flash_ex.c ****   }
 875:src/stm32f1xx_hal_flash_ex.c ****   return status;
 876:src/stm32f1xx_hal_flash_ex.c **** }
 877:src/stm32f1xx_hal_flash_ex.c **** 
 878:src/stm32f1xx_hal_flash_ex.c **** /**
 879:src/stm32f1xx_hal_flash_ex.c ****   * @brief  Set the read protection level.
 880:src/stm32f1xx_hal_flash_ex.c ****   * @param  ReadProtectLevel specifies the read protection level.
 881:src/stm32f1xx_hal_flash_ex.c ****   *         This parameter can be one of the following values:
 882:src/stm32f1xx_hal_flash_ex.c ****   *            @arg @ref OB_RDP_LEVEL_0 No protection
 883:src/stm32f1xx_hal_flash_ex.c ****   *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
 884:src/stm32f1xx_hal_flash_ex.c ****   * @retval HAL status
 885:src/stm32f1xx_hal_flash_ex.c ****   */
 886:src/stm32f1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
 887:src/stm32f1xx_hal_flash_ex.c **** {
 114              		.loc 1 887 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118              	.LVL1:
 119 0024 38B5     		push	{r3, r4, r5, lr}	@
 120              	.LCFI0:
 121              		.cfi_def_cfa_offset 16
 122              		.cfi_offset 3, -16
 123              		.cfi_offset 4, -12
 124              		.cfi_offset 5, -8
 125              		.cfi_offset 14, -4
 126              		.loc 1 887 0
 127 0026 0546     		mov	r5, r0	@ ReadProtectLevel, ReadProtectLevel
 888:src/stm32f1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 889:src/stm32f1xx_hal_flash_ex.c ****   
 890:src/stm32f1xx_hal_flash_ex.c ****   /* Check the parameters */
 891:src/stm32f1xx_hal_flash_ex.c ****   assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
 892:src/stm32f1xx_hal_flash_ex.c ****   
 893:src/stm32f1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 894:src/stm32f1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 128              		.loc 1 894 0
 129 0028 4CF25030 		movw	r0, #50000	@,
 130              	.LVL2:
 131 002c FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 132              	.LVL3:
ARM GAS  /tmp/cctMPBvi.s 			page 19


 895:src/stm32f1xx_hal_flash_ex.c ****   
 896:src/stm32f1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 133              		.loc 1 896 0
 134 0030 10BB     		cbnz	r0, .L5	@ <retval>,
 897:src/stm32f1xx_hal_flash_ex.c ****   { 
 898:src/stm32f1xx_hal_flash_ex.c ****     /* Clean the error context */
 899:src/stm32f1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 135              		.loc 1 899 0
 136 0032 124B     		ldr	r3, .L6	@ tmp124,
 900:src/stm32f1xx_hal_flash_ex.c ****     
 901:src/stm32f1xx_hal_flash_ex.c ****     /* If the previous operation is completed, proceed to erase the option bytes */
 902:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 137              		.loc 1 902 0
 138 0034 124C     		ldr	r4, .L6+4	@ tmp126,
 899:src/stm32f1xx_hal_flash_ex.c ****     
 139              		.loc 1 899 0
 140 0036 D861     		str	r0, [r3, #28]	@ <retval>, pFlash.ErrorCode
 141              		.loc 1 902 0
 142 0038 2369     		ldr	r3, [r4, #16]	@ _9, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 903:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR, FLASH_CR_STRT);
 904:src/stm32f1xx_hal_flash_ex.c **** 
 905:src/stm32f1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
 906:src/stm32f1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 143              		.loc 1 906 0
 144 003a 4CF25030 		movw	r0, #50000	@,
 145              	.LVL4:
 902:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR, FLASH_CR_STRT);
 146              		.loc 1 902 0
 147 003e 43F02003 		orr	r3, r3, #32	@ _10, _9,
 148 0042 2361     		str	r3, [r4, #16]	@ _10, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 903:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR, FLASH_CR_STRT);
 149              		.loc 1 903 0
 150 0044 2369     		ldr	r3, [r4, #16]	@ _12, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 151 0046 43F04003 		orr	r3, r3, #64	@ _13, _12,
 152 004a 2361     		str	r3, [r4, #16]	@ _13, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 153              		.loc 1 906 0
 154 004c FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 155              	.LVL5:
 907:src/stm32f1xx_hal_flash_ex.c **** 
 908:src/stm32f1xx_hal_flash_ex.c ****     /* If the erase operation is completed, disable the OPTER Bit */
 909:src/stm32f1xx_hal_flash_ex.c ****     CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 156              		.loc 1 909 0
 157 0050 2369     		ldr	r3, [r4, #16]	@ _17, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 158 0052 23F02003 		bic	r3, r3, #32	@ _18, _17,
 159 0056 2361     		str	r3, [r4, #16]	@ _18, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 910:src/stm32f1xx_hal_flash_ex.c **** 
 911:src/stm32f1xx_hal_flash_ex.c ****     if(status == HAL_OK)
 160              		.loc 1 911 0
 161 0058 70B9     		cbnz	r0, .L5	@ <retval>,
 162              	.LVL6:
 163              	.LBB10:
 164              	.LBB11:
 912:src/stm32f1xx_hal_flash_ex.c ****     {
 913:src/stm32f1xx_hal_flash_ex.c ****       /* Enable the Option Bytes Programming operation */
 914:src/stm32f1xx_hal_flash_ex.c ****       SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 165              		.loc 1 914 0
 166 005a 2369     		ldr	r3, [r4, #16]	@ _21, MEM[(struct FLASH_TypeDef *)1073881088B].CR
ARM GAS  /tmp/cctMPBvi.s 			page 20


 915:src/stm32f1xx_hal_flash_ex.c ****       
 916:src/stm32f1xx_hal_flash_ex.c ****       WRITE_REG(OB->RDP, ReadProtectLevel);
 167              		.loc 1 916 0
 168 005c ADB2     		uxth	r5, r5	@ _23, ReadProtectLevel
 169              	.LVL7:
 914:src/stm32f1xx_hal_flash_ex.c ****       
 170              		.loc 1 914 0
 171 005e 43F01003 		orr	r3, r3, #16	@ _22, _21,
 172 0062 2361     		str	r3, [r4, #16]	@ _22, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 173              		.loc 1 916 0
 174 0064 074B     		ldr	r3, .L6+8	@ tmp135,
 917:src/stm32f1xx_hal_flash_ex.c ****       
 918:src/stm32f1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 919:src/stm32f1xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 175              		.loc 1 919 0
 176 0066 4CF25030 		movw	r0, #50000	@,
 177              	.LVL8:
 916:src/stm32f1xx_hal_flash_ex.c ****       
 178              		.loc 1 916 0
 179 006a 1D80     		strh	r5, [r3]	@ movhi	@ _23, MEM[(struct OB_TypeDef *)536868864B].RDP
 180              		.loc 1 919 0
 181 006c FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 182              	.LVL9:
 920:src/stm32f1xx_hal_flash_ex.c ****       
 921:src/stm32f1xx_hal_flash_ex.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 922:src/stm32f1xx_hal_flash_ex.c ****       CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 183              		.loc 1 922 0
 184 0070 2369     		ldr	r3, [r4, #16]	@ _25, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 185 0072 23F01003 		bic	r3, r3, #16	@ _26, _25,
 186 0076 2361     		str	r3, [r4, #16]	@ _26, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 187              	.LVL10:
 188              	.L5:
 189              	.LBE11:
 190              	.LBE10:
 923:src/stm32f1xx_hal_flash_ex.c ****     }
 924:src/stm32f1xx_hal_flash_ex.c ****   }
 925:src/stm32f1xx_hal_flash_ex.c ****   
 926:src/stm32f1xx_hal_flash_ex.c ****   return status;
 927:src/stm32f1xx_hal_flash_ex.c **** }
 191              		.loc 1 927 0
 192 0078 38BD     		pop	{r3, r4, r5, pc}	@
 193              	.L7:
 194 007a 00BF     		.align	2
 195              	.L6:
 196 007c 00000000 		.word	pFlash
 197 0080 00200240 		.word	1073881088
 198 0084 00F8FF1F 		.word	536868864
 199              		.cfi_endproc
 200              	.LFE74:
 201              		.size	FLASH_OB_RDP_LevelConfig, .-FLASH_OB_RDP_LevelConfig
 202              		.align	1
 203              		.global	HAL_FLASHEx_OBErase
 204              		.syntax unified
 205              		.thumb
 206              		.thumb_func
 207              		.fpu softvfp
 208              		.type	HAL_FLASHEx_OBErase, %function
ARM GAS  /tmp/cctMPBvi.s 			page 21


 209              	HAL_FLASHEx_OBErase:
 210              	.LFB67:
 398:src/stm32f1xx_hal_flash_ex.c ****   uint8_t rdptmp = OB_RDP_LEVEL_0;
 211              		.loc 1 398 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215              	.LVL11:
 216 0088 38B5     		push	{r3, r4, r5, lr}	@
 217              	.LCFI1:
 218              		.cfi_def_cfa_offset 16
 219              		.cfi_offset 3, -16
 220              		.cfi_offset 4, -12
 221              		.cfi_offset 5, -8
 222              		.cfi_offset 14, -4
 223              	.LBB14:
 224              	.LBB15:
 928:src/stm32f1xx_hal_flash_ex.c **** 
 929:src/stm32f1xx_hal_flash_ex.c **** /**
 930:src/stm32f1xx_hal_flash_ex.c ****   * @brief  Program the FLASH User Option Byte.    
 931:src/stm32f1xx_hal_flash_ex.c ****   * @note   Programming of the OB should be performed only after an erase (otherwise PGERR occurs)
 932:src/stm32f1xx_hal_flash_ex.c ****   * @param  UserConfig The FLASH User Option Bytes values FLASH_OBR_IWDG_SW(Bit2), 
 933:src/stm32f1xx_hal_flash_ex.c ****   *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
 934:src/stm32f1xx_hal_flash_ex.c ****   *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
 935:src/stm32f1xx_hal_flash_ex.c ****   * @retval HAL status
 936:src/stm32f1xx_hal_flash_ex.c ****   */
 937:src/stm32f1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
 938:src/stm32f1xx_hal_flash_ex.c **** {
 939:src/stm32f1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 940:src/stm32f1xx_hal_flash_ex.c **** 
 941:src/stm32f1xx_hal_flash_ex.c ****   /* Check the parameters */
 942:src/stm32f1xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_SOURCE((UserConfig&OB_IWDG_SW)));
 943:src/stm32f1xx_hal_flash_ex.c ****   assert_param(IS_OB_STOP_SOURCE((UserConfig&OB_STOP_NO_RST)));
 944:src/stm32f1xx_hal_flash_ex.c ****   assert_param(IS_OB_STDBY_SOURCE((UserConfig&OB_STDBY_NO_RST)));
 945:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_BANK2_END)
 946:src/stm32f1xx_hal_flash_ex.c ****   assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
 947:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_BANK2_END */
 948:src/stm32f1xx_hal_flash_ex.c **** 
 949:src/stm32f1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 950:src/stm32f1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 951:src/stm32f1xx_hal_flash_ex.c ****   
 952:src/stm32f1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 953:src/stm32f1xx_hal_flash_ex.c ****   {     
 954:src/stm32f1xx_hal_flash_ex.c ****     /* Clean the error context */
 955:src/stm32f1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 956:src/stm32f1xx_hal_flash_ex.c **** 
 957:src/stm32f1xx_hal_flash_ex.c ****     /* Enable the Option Bytes Programming operation */
 958:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 959:src/stm32f1xx_hal_flash_ex.c ****  
 960:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_BANK2_END)
 961:src/stm32f1xx_hal_flash_ex.c ****     OB->USER = (UserConfig | 0xF0U);
 962:src/stm32f1xx_hal_flash_ex.c **** #else
 963:src/stm32f1xx_hal_flash_ex.c ****     OB->USER = (UserConfig | 0x88U);
 964:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_BANK2_END */
 965:src/stm32f1xx_hal_flash_ex.c **** 
 966:src/stm32f1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
 967:src/stm32f1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
ARM GAS  /tmp/cctMPBvi.s 			page 22


 968:src/stm32f1xx_hal_flash_ex.c **** 
 969:src/stm32f1xx_hal_flash_ex.c ****     /* if the program operation is completed, disable the OPTPG Bit */
 970:src/stm32f1xx_hal_flash_ex.c ****     CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 971:src/stm32f1xx_hal_flash_ex.c ****   }
 972:src/stm32f1xx_hal_flash_ex.c ****   
 973:src/stm32f1xx_hal_flash_ex.c ****   return status; 
 974:src/stm32f1xx_hal_flash_ex.c **** }
 975:src/stm32f1xx_hal_flash_ex.c **** 
 976:src/stm32f1xx_hal_flash_ex.c **** /**
 977:src/stm32f1xx_hal_flash_ex.c ****   * @brief  Programs a half word at a specified Option Byte Data address.
 978:src/stm32f1xx_hal_flash_ex.c ****   * @note   The function @ref HAL_FLASH_Unlock() should be called before to unlock the FLASH interf
 979:src/stm32f1xx_hal_flash_ex.c ****   *         The function @ref HAL_FLASH_OB_Unlock() should be called before to unlock the options b
 980:src/stm32f1xx_hal_flash_ex.c ****   *         The function @ref HAL_FLASH_OB_Launch() should be called after to force the reload of t
 981:src/stm32f1xx_hal_flash_ex.c ****   *         (system reset will occur)
 982:src/stm32f1xx_hal_flash_ex.c ****   *         Programming of the OB should be performed only after an erase (otherwise PGERR occurs)
 983:src/stm32f1xx_hal_flash_ex.c ****   * @param  Address specifies the address to be programmed.
 984:src/stm32f1xx_hal_flash_ex.c ****   *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
 985:src/stm32f1xx_hal_flash_ex.c ****   * @param  Data specifies the data to be programmed.
 986:src/stm32f1xx_hal_flash_ex.c ****   * @retval HAL status
 987:src/stm32f1xx_hal_flash_ex.c ****   */
 988:src/stm32f1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
 989:src/stm32f1xx_hal_flash_ex.c **** {
 990:src/stm32f1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 991:src/stm32f1xx_hal_flash_ex.c ****   
 992:src/stm32f1xx_hal_flash_ex.c ****   /* Check the parameters */
 993:src/stm32f1xx_hal_flash_ex.c ****   assert_param(IS_OB_DATA_ADDRESS(Address));
 994:src/stm32f1xx_hal_flash_ex.c ****   
 995:src/stm32f1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 996:src/stm32f1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 997:src/stm32f1xx_hal_flash_ex.c ****   
 998:src/stm32f1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 999:src/stm32f1xx_hal_flash_ex.c ****   {
1000:src/stm32f1xx_hal_flash_ex.c ****     /* Clean the error context */
1001:src/stm32f1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1002:src/stm32f1xx_hal_flash_ex.c **** 
1003:src/stm32f1xx_hal_flash_ex.c ****     /* Enables the Option Bytes Programming operation */
1004:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
1005:src/stm32f1xx_hal_flash_ex.c ****     *(__IO uint16_t*)Address = Data;
1006:src/stm32f1xx_hal_flash_ex.c ****     
1007:src/stm32f1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1008:src/stm32f1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
1009:src/stm32f1xx_hal_flash_ex.c ****     
1010:src/stm32f1xx_hal_flash_ex.c ****     /* If the program operation is completed, disable the OPTPG Bit */
1011:src/stm32f1xx_hal_flash_ex.c ****     CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
1012:src/stm32f1xx_hal_flash_ex.c ****   }
1013:src/stm32f1xx_hal_flash_ex.c ****   /* Return the Option Byte Data Program Status */
1014:src/stm32f1xx_hal_flash_ex.c ****   return status;
1015:src/stm32f1xx_hal_flash_ex.c **** }
1016:src/stm32f1xx_hal_flash_ex.c **** 
1017:src/stm32f1xx_hal_flash_ex.c **** /**
1018:src/stm32f1xx_hal_flash_ex.c ****   * @brief  Return the FLASH Write Protection Option Bytes value.
1019:src/stm32f1xx_hal_flash_ex.c ****   * @retval The FLASH Write Protection Option Bytes value
1020:src/stm32f1xx_hal_flash_ex.c ****   */
1021:src/stm32f1xx_hal_flash_ex.c **** static uint32_t FLASH_OB_GetWRP(void)
1022:src/stm32f1xx_hal_flash_ex.c **** {
1023:src/stm32f1xx_hal_flash_ex.c ****   /* Return the FLASH write protection Register value */
1024:src/stm32f1xx_hal_flash_ex.c ****   return (uint32_t)(READ_REG(FLASH->WRPR));
ARM GAS  /tmp/cctMPBvi.s 			page 23


1025:src/stm32f1xx_hal_flash_ex.c **** }
1026:src/stm32f1xx_hal_flash_ex.c **** 
1027:src/stm32f1xx_hal_flash_ex.c **** /**
1028:src/stm32f1xx_hal_flash_ex.c ****   * @brief  Returns the FLASH Read Protection level.
1029:src/stm32f1xx_hal_flash_ex.c ****   * @retval FLASH RDP level
1030:src/stm32f1xx_hal_flash_ex.c ****   *         This parameter can be one of the following values:
1031:src/stm32f1xx_hal_flash_ex.c ****   *            @arg @ref OB_RDP_LEVEL_0 No protection
1032:src/stm32f1xx_hal_flash_ex.c ****   *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
1033:src/stm32f1xx_hal_flash_ex.c ****   */
1034:src/stm32f1xx_hal_flash_ex.c **** static uint32_t FLASH_OB_GetRDP(void)
1035:src/stm32f1xx_hal_flash_ex.c **** {
1036:src/stm32f1xx_hal_flash_ex.c ****   uint32_t readstatus = OB_RDP_LEVEL_0;
1037:src/stm32f1xx_hal_flash_ex.c ****   uint32_t tmp_reg = 0U;
1038:src/stm32f1xx_hal_flash_ex.c ****   
1039:src/stm32f1xx_hal_flash_ex.c ****   /* Read RDP level bits */
1040:src/stm32f1xx_hal_flash_ex.c ****   tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 225              		.loc 1 1040 0
 226 008a 124C     		ldr	r4, .L12	@ tmp121,
 227              	.LBE15:
 228              	.LBE14:
 406:src/stm32f1xx_hal_flash_ex.c **** 
 229              		.loc 1 406 0
 230 008c 4CF25030 		movw	r0, #50000	@,
 231              	.LBB17:
 232              	.LBB16:
 233              		.loc 1 1040 0
 234 0090 E369     		ldr	r3, [r4, #28]	@ _23, MEM[(struct FLASH_TypeDef *)1073881088B].OBR
 235              	.LVL12:
1041:src/stm32f1xx_hal_flash_ex.c **** 
1042:src/stm32f1xx_hal_flash_ex.c ****   if (tmp_reg == FLASH_OBR_RDPRT)
 236              		.loc 1 1042 0
 237 0092 13F0020F 		tst	r3, #2	@ _23,
1043:src/stm32f1xx_hal_flash_ex.c ****   {
1044:src/stm32f1xx_hal_flash_ex.c ****     readstatus = OB_RDP_LEVEL_1;
1045:src/stm32f1xx_hal_flash_ex.c ****   }
1046:src/stm32f1xx_hal_flash_ex.c ****   else 
1047:src/stm32f1xx_hal_flash_ex.c ****   {
1048:src/stm32f1xx_hal_flash_ex.c ****     readstatus = OB_RDP_LEVEL_0;
 238              		.loc 1 1048 0
 239 0096 14BF     		ite	ne
 240 0098 0025     		movne	r5, #0	@ readstatus,
 241 009a A525     		moveq	r5, #165	@ readstatus,
 242              	.LVL13:
 243              	.LBE16:
 244              	.LBE17:
 406:src/stm32f1xx_hal_flash_ex.c **** 
 245              		.loc 1 406 0
 246 009c FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 247              	.LVL14:
 408:src/stm32f1xx_hal_flash_ex.c ****   {
 248              		.loc 1 408 0
 249 00a0 B0B9     		cbnz	r0, .L10	@ tmp123,
 411:src/stm32f1xx_hal_flash_ex.c **** 
 250              		.loc 1 411 0
 251 00a2 0D4A     		ldr	r2, .L12+4	@ tmp124,
 252 00a4 D061     		str	r0, [r2, #28]	@ tmp123, pFlash.ErrorCode
 414:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR, FLASH_CR_STRT);
ARM GAS  /tmp/cctMPBvi.s 			page 24


 253              		.loc 1 414 0
 254 00a6 2369     		ldr	r3, [r4, #16]	@ _10, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 418:src/stm32f1xx_hal_flash_ex.c **** 
 255              		.loc 1 418 0
 256 00a8 4CF25030 		movw	r0, #50000	@,
 257              	.LVL15:
 414:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR, FLASH_CR_STRT);
 258              		.loc 1 414 0
 259 00ac 43F02003 		orr	r3, r3, #32	@ _11, _10,
 260 00b0 2361     		str	r3, [r4, #16]	@ _11, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 415:src/stm32f1xx_hal_flash_ex.c **** 
 261              		.loc 1 415 0
 262 00b2 2369     		ldr	r3, [r4, #16]	@ _13, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 263 00b4 43F04003 		orr	r3, r3, #64	@ _14, _13,
 264 00b8 2361     		str	r3, [r4, #16]	@ _14, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 418:src/stm32f1xx_hal_flash_ex.c **** 
 265              		.loc 1 418 0
 266 00ba FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 267              	.LVL16:
 421:src/stm32f1xx_hal_flash_ex.c **** 
 268              		.loc 1 421 0
 269 00be 2369     		ldr	r3, [r4, #16]	@ _18, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 270 00c0 23F02003 		bic	r3, r3, #32	@ _19, _18,
 271 00c4 2361     		str	r3, [r4, #16]	@ _19, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 423:src/stm32f1xx_hal_flash_ex.c ****     {
 272              		.loc 1 423 0
 273 00c6 18B9     		cbnz	r0, .L10	@ <retval>,
 426:src/stm32f1xx_hal_flash_ex.c ****     }
 274              		.loc 1 426 0
 275 00c8 2846     		mov	r0, r5	@, readstatus
 276              	.LVL17:
 432:src/stm32f1xx_hal_flash_ex.c **** 
 277              		.loc 1 432 0
 278 00ca BDE83840 		pop	{r3, r4, r5, lr}	@
 279              	.LCFI2:
 280              		.cfi_remember_state
 281              		.cfi_restore 14
 282              		.cfi_restore 5
 283              		.cfi_restore 4
 284              		.cfi_restore 3
 285              		.cfi_def_cfa_offset 0
 286              	.LVL18:
 426:src/stm32f1xx_hal_flash_ex.c ****     }
 287              		.loc 1 426 0
 288 00ce A9E7     		b	FLASH_OB_RDP_LevelConfig	@
 289              	.LVL19:
 290              	.L10:
 291              	.LCFI3:
 292              		.cfi_restore_state
 432:src/stm32f1xx_hal_flash_ex.c **** 
 293              		.loc 1 432 0
 294 00d0 38BD     		pop	{r3, r4, r5, pc}	@
 295              	.LVL20:
 296              	.L13:
 297 00d2 00BF     		.align	2
 298              	.L12:
 299 00d4 00200240 		.word	1073881088
ARM GAS  /tmp/cctMPBvi.s 			page 25


 300 00d8 00000000 		.word	pFlash
 301              		.cfi_endproc
 302              	.LFE67:
 303              		.size	HAL_FLASHEx_OBErase, .-HAL_FLASHEx_OBErase
 304              		.align	1
 305              		.global	HAL_FLASHEx_OBProgram
 306              		.syntax unified
 307              		.thumb
 308              		.thumb_func
 309              		.fpu softvfp
 310              		.type	HAL_FLASHEx_OBProgram, %function
 311              	HAL_FLASHEx_OBProgram:
 312              	.LFB68:
 447:src/stm32f1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 313              		.loc 1 447 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317              	.LVL21:
 318 00dc 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 319              	.LCFI4:
 320              		.cfi_def_cfa_offset 24
 321              		.cfi_offset 4, -24
 322              		.cfi_offset 5, -20
 323              		.cfi_offset 6, -16
 324              		.cfi_offset 7, -12
 325              		.cfi_offset 8, -8
 326              		.cfi_offset 14, -4
 451:src/stm32f1xx_hal_flash_ex.c **** 
 327              		.loc 1 451 0
 328 00e0 494C     		ldr	r4, .L57	@ tmp162,
 447:src/stm32f1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 329              		.loc 1 447 0
 330 00e2 0546     		mov	r5, r0	@ pOBInit, pOBInit
 451:src/stm32f1xx_hal_flash_ex.c **** 
 331              		.loc 1 451 0
 332 00e4 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2	@ pFlash.Lock, pFlash.Lock
 333 00e6 012B     		cmp	r3, #1	@ pFlash.Lock,
 334 00e8 00F08A80 		beq	.L27	@,
 451:src/stm32f1xx_hal_flash_ex.c **** 
 335              		.loc 1 451 0 is_stmt 0 discriminator 2
 336 00ec 0120     		movs	r0, #1	@ tmp165,
 337              	.LVL22:
 457:src/stm32f1xx_hal_flash_ex.c ****   {
 338              		.loc 1 457 0 is_stmt 1 discriminator 2
 339 00ee 2B68     		ldr	r3, [r5]	@ pOBInit_16(D)->OptionType, pOBInit_16(D)->OptionType
 451:src/stm32f1xx_hal_flash_ex.c **** 
 340              		.loc 1 451 0 discriminator 2
 341 00f0 2076     		strb	r0, [r4, #24]	@ tmp165, pFlash.Lock
 457:src/stm32f1xx_hal_flash_ex.c ****   {
 342              		.loc 1 457 0 discriminator 2
 343 00f2 DE07     		lsls	r6, r3, #31	@, pOBInit_16(D)->OptionType,
 344 00f4 42D5     		bpl	.L16	@,
 460:src/stm32f1xx_hal_flash_ex.c ****     {
 345              		.loc 1 460 0
 346 00f6 6B68     		ldr	r3, [r5, #4]	@ pOBInit_16(D)->WRPState, pOBInit_16(D)->WRPState
 347 00f8 444F     		ldr	r7, .L57+4	@ tmp261,
ARM GAS  /tmp/cctMPBvi.s 			page 26


 348 00fa 8342     		cmp	r3, r0	@ pOBInit_16(D)->WRPState,
 349 00fc AE68     		ldr	r6, [r5, #8]	@ _23, pOBInit_16(D)->WRPPage
 350              	.LBB30:
 351              	.LBB31:
 352              	.LBB32:
 353              	.LBB33:
1024:src/stm32f1xx_hal_flash_ex.c **** }
 354              		.loc 1 1024 0
 355 00fe D7F82080 		ldr	r8, [r7, #32]	@ _47,
 356              	.LVL23:
 357              	.LBE33:
 358              	.LBE32:
 694:src/stm32f1xx_hal_flash_ex.c **** 
 359              		.loc 1 694 0
 360 0102 4CF25030 		movw	r0, #50000	@,
 361              	.LBE31:
 362              	.LBE30:
 460:src/stm32f1xx_hal_flash_ex.c ****     {
 363              		.loc 1 460 0
 364 0106 21D1     		bne	.L17	@,
 365              	.LVL24:
 366              	.LBB35:
 367              	.LBB34:
 694:src/stm32f1xx_hal_flash_ex.c **** 
 368              		.loc 1 694 0
 369 0108 FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 370              	.LVL25:
 696:src/stm32f1xx_hal_flash_ex.c ****   { 
 371              		.loc 1 696 0
 372 010c D0B9     		cbnz	r0, .L25	@ <retval>,
 699:src/stm32f1xx_hal_flash_ex.c **** 
 373              		.loc 1 699 0
 374 010e E061     		str	r0, [r4, #28]	@ <retval>, pFlash.ErrorCode
 702:src/stm32f1xx_hal_flash_ex.c ****     if (status == HAL_OK)  
 375              		.loc 1 702 0
 376 0110 FFF7FEFF 		bl	HAL_FLASHEx_OBErase	@
 377              	.LVL26:
 703:src/stm32f1xx_hal_flash_ex.c ****     {
 378              		.loc 1 703 0
 379 0114 B0B9     		cbnz	r0, .L25	@ <retval>,
 706:src/stm32f1xx_hal_flash_ex.c **** 
 380              		.loc 1 706 0
 381 0116 3B69     		ldr	r3, [r7, #16]	@ _55, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 662:src/stm32f1xx_hal_flash_ex.c ****   
 382              		.loc 1 662 0
 383 0118 28EA0606 		bic	r6, r8, r6	@ WriteProtectPage, _47, _23
 384              	.LVL27:
 667:src/stm32f1xx_hal_flash_ex.c **** #endif /* OB_WRP_PAGES0TO31MASK */
 385              		.loc 1 667 0
 386 011c F6B2     		uxtb	r6, r6	@ WRP0_Data, WriteProtectPage
 706:src/stm32f1xx_hal_flash_ex.c **** 
 387              		.loc 1 706 0
 388 011e 43F01003 		orr	r3, r3, #16	@ _56, _55,
 709:src/stm32f1xx_hal_flash_ex.c ****       {
 389              		.loc 1 709 0
 390 0122 FF2E     		cmp	r6, #255	@ WRP0_Data,
 706:src/stm32f1xx_hal_flash_ex.c **** 
ARM GAS  /tmp/cctMPBvi.s 			page 27


 391              		.loc 1 706 0
 392 0124 3B61     		str	r3, [r7, #16]	@ _56, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 709:src/stm32f1xx_hal_flash_ex.c ****       {
 393              		.loc 1 709 0
 394 0126 07D0     		beq	.L21	@,
 711:src/stm32f1xx_hal_flash_ex.c ****         
 395              		.loc 1 711 0
 396 0128 394B     		ldr	r3, .L57+8	@ tmp183,
 397 012a 1A89     		ldrh	r2, [r3, #8]	@, MEM[(struct OB_TypeDef *)536868864B].WRP0
 398 012c 1640     		ands	r6, r6, r2	@, _58, WRP0_Data, MEM[(struct OB_TypeDef *)536868864B].WRP0
 399 012e 1E81     		strh	r6, [r3, #8]	@ movhi	@ _58, MEM[(struct OB_TypeDef *)536868864B].WRP0
 400              	.LVL28:
 401              	.L56:
 402              	.LBE34:
 403              	.LBE35:
 404              	.LBB36:
 405              	.LBB37:
 837:src/stm32f1xx_hal_flash_ex.c ****       }
 406              		.loc 1 837 0
 407 0130 4CF25030 		movw	r0, #50000	@,
 408 0134 FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 409              	.LVL29:
 410              	.L21:
 872:src/stm32f1xx_hal_flash_ex.c ****     }
 411              		.loc 1 872 0
 412 0138 344A     		ldr	r2, .L57+4	@ tmp210,
 413 013a 1369     		ldr	r3, [r2, #16]	@ _75,
 414 013c 23F01003 		bic	r3, r3, #16	@ _76, _75,
 415 0140 1361     		str	r3, [r2, #16]	@ _76,
 416              	.LVL30:
 417              	.LBE37:
 418              	.LBE36:
 470:src/stm32f1xx_hal_flash_ex.c ****     {
 419              		.loc 1 470 0
 420 0142 D8B1     		cbz	r0, .L16	@ <retval>,
 421              	.LVL31:
 422              	.L25:
 515:src/stm32f1xx_hal_flash_ex.c **** 
 423              		.loc 1 515 0
 424 0144 0023     		movs	r3, #0	@ tmp255,
 425 0146 2376     		strb	r3, [r4, #24]	@ tmp255, pFlash.Lock
 517:src/stm32f1xx_hal_flash_ex.c **** }
 426              		.loc 1 517 0
 427 0148 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 428              	.LVL32:
 429              	.L17:
 430              	.LBB39:
 431              	.LBB38:
 818:src/stm32f1xx_hal_flash_ex.c **** 
 432              		.loc 1 818 0
 433 014c FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 434              	.LVL33:
 820:src/stm32f1xx_hal_flash_ex.c ****   { 
 435              		.loc 1 820 0
 436 0150 0028     		cmp	r0, #0	@ <retval>
 437 0152 F7D1     		bne	.L25	@
 823:src/stm32f1xx_hal_flash_ex.c **** 
ARM GAS  /tmp/cctMPBvi.s 			page 28


 438              		.loc 1 823 0
 439 0154 E061     		str	r0, [r4, #28]	@ <retval>, pFlash.ErrorCode
 826:src/stm32f1xx_hal_flash_ex.c ****     if (status == HAL_OK)  
 440              		.loc 1 826 0
 441 0156 FFF7FEFF 		bl	HAL_FLASHEx_OBErase	@
 442              	.LVL34:
 827:src/stm32f1xx_hal_flash_ex.c ****     {
 443              		.loc 1 827 0
 444 015a 0028     		cmp	r0, #0	@ <retval>
 445 015c F2D1     		bne	.L25	@
 829:src/stm32f1xx_hal_flash_ex.c **** 
 446              		.loc 1 829 0
 447 015e 3B69     		ldr	r3, [r7, #16]	@ _70, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 785:src/stm32f1xx_hal_flash_ex.c **** 
 448              		.loc 1 785 0
 449 0160 46EA0806 		orr	r6, r6, r8	@ WriteProtectPage, _23, _64
 450              	.LVL35:
 790:src/stm32f1xx_hal_flash_ex.c **** #endif /* OB_WRP_PAGES0TO31MASK */
 451              		.loc 1 790 0
 452 0164 F6B2     		uxtb	r6, r6	@ WRP0_Data, WriteProtectPage
 829:src/stm32f1xx_hal_flash_ex.c **** 
 453              		.loc 1 829 0
 454 0166 43F01003 		orr	r3, r3, #16	@ _71, _70,
 832:src/stm32f1xx_hal_flash_ex.c ****       {
 455              		.loc 1 832 0
 456 016a FF2E     		cmp	r6, #255	@ WRP0_Data,
 829:src/stm32f1xx_hal_flash_ex.c **** 
 457              		.loc 1 829 0
 458 016c 3B61     		str	r3, [r7, #16]	@ _71, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 832:src/stm32f1xx_hal_flash_ex.c ****       {
 459              		.loc 1 832 0
 460 016e E3D0     		beq	.L21	@,
 834:src/stm32f1xx_hal_flash_ex.c ****         
 461              		.loc 1 834 0
 462 0170 274A     		ldr	r2, .L57+8	@ tmp203,
 463 0172 1389     		ldrh	r3, [r2, #8]	@, MEM[(struct OB_TypeDef *)536868864B].WRP0
 464 0174 9BB2     		uxth	r3, r3	@ _72, MEM[(struct OB_TypeDef *)536868864B].WRP0
 465 0176 1E43     		orrs	r6, r6, r3	@, _73, WRP0_Data, _72
 466 0178 1681     		strh	r6, [r2, #8]	@ movhi	@ _73, MEM[(struct OB_TypeDef *)536868864B].WRP0
 467 017a D9E7     		b	.L56	@
 468              	.LVL36:
 469              	.L16:
 470              	.LBE38:
 471              	.LBE39:
 479:src/stm32f1xx_hal_flash_ex.c ****   {
 472              		.loc 1 479 0
 473 017c 2B68     		ldr	r3, [r5]	@ pOBInit_16(D)->OptionType, pOBInit_16(D)->OptionType
 474 017e 9907     		lsls	r1, r3, #30	@, pOBInit_16(D)->OptionType,
 475 0180 04D5     		bpl	.L22	@,
 481:src/stm32f1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 476              		.loc 1 481 0
 477 0182 287C     		ldrb	r0, [r5, #16]	@ zero_extendqisi2	@, pOBInit_16(D)->RDPLevel
 478              	.LVL37:
 479 0184 FFF74EFF 		bl	FLASH_OB_RDP_LevelConfig	@
 480              	.LVL38:
 482:src/stm32f1xx_hal_flash_ex.c ****     {
 481              		.loc 1 482 0
ARM GAS  /tmp/cctMPBvi.s 			page 29


 482 0188 0028     		cmp	r0, #0	@ <retval>
 483 018a DBD1     		bne	.L25	@
 484              	.L22:
 491:src/stm32f1xx_hal_flash_ex.c ****   {
 485              		.loc 1 491 0
 486 018c 2B68     		ldr	r3, [r5]	@ pOBInit_16(D)->OptionType, pOBInit_16(D)->OptionType
 487 018e 5A07     		lsls	r2, r3, #29	@, pOBInit_16(D)->OptionType,
 488 0190 1AD5     		bpl	.L23	@,
 489              	.LBB40:
 490              	.LBB41:
 950:src/stm32f1xx_hal_flash_ex.c ****   
 491              		.loc 1 950 0
 492 0192 4CF25030 		movw	r0, #50000	@,
 493              	.LVL39:
 494              	.LBE41:
 495              	.LBE40:
 493:src/stm32f1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 496              		.loc 1 493 0
 497 0196 6F7C     		ldrb	r7, [r5, #17]	@ zero_extendqisi2	@ _35, pOBInit_16(D)->USERConfig
 498              	.LVL40:
 499              	.LBB43:
 500              	.LBB42:
 950:src/stm32f1xx_hal_flash_ex.c ****   
 501              		.loc 1 950 0
 502 0198 FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 503              	.LVL41:
 952:src/stm32f1xx_hal_flash_ex.c ****   {     
 504              		.loc 1 952 0
 505 019c 0028     		cmp	r0, #0	@ <retval>
 506 019e D1D1     		bne	.L25	@
 958:src/stm32f1xx_hal_flash_ex.c ****  
 507              		.loc 1 958 0
 508 01a0 1A4E     		ldr	r6, .L57+4	@ tmp227,
 955:src/stm32f1xx_hal_flash_ex.c **** 
 509              		.loc 1 955 0
 510 01a2 E061     		str	r0, [r4, #28]	@ <retval>, pFlash.ErrorCode
 958:src/stm32f1xx_hal_flash_ex.c ****  
 511              		.loc 1 958 0
 512 01a4 3369     		ldr	r3, [r6, #16]	@ _80, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 963:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_BANK2_END */
 513              		.loc 1 963 0
 514 01a6 47F08807 		orr	r7, r7, #136	@ _83, _35,
 515              	.LVL42:
 958:src/stm32f1xx_hal_flash_ex.c ****  
 516              		.loc 1 958 0
 517 01aa 43F01003 		orr	r3, r3, #16	@ _81, _80,
 518 01ae 3361     		str	r3, [r6, #16]	@ _81, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 963:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_BANK2_END */
 519              		.loc 1 963 0
 520 01b0 174B     		ldr	r3, .L57+8	@ tmp232,
 967:src/stm32f1xx_hal_flash_ex.c **** 
 521              		.loc 1 967 0
 522 01b2 4CF25030 		movw	r0, #50000	@,
 523              	.LVL43:
 963:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_BANK2_END */
 524              		.loc 1 963 0
 525 01b6 5F80     		strh	r7, [r3, #2]	@ movhi	@ _83, MEM[(struct OB_TypeDef *)536868864B].USER
ARM GAS  /tmp/cctMPBvi.s 			page 30


 967:src/stm32f1xx_hal_flash_ex.c **** 
 526              		.loc 1 967 0
 527 01b8 FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 528              	.LVL44:
 970:src/stm32f1xx_hal_flash_ex.c ****   }
 529              		.loc 1 970 0
 530 01bc 3369     		ldr	r3, [r6, #16]	@ _85, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 531 01be 23F01003 		bic	r3, r3, #16	@ _86, _85,
 532 01c2 3361     		str	r3, [r6, #16]	@ _86, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 533              	.LVL45:
 534              	.LBE42:
 535              	.LBE43:
 494:src/stm32f1xx_hal_flash_ex.c ****     {
 536              		.loc 1 494 0
 537 01c4 0028     		cmp	r0, #0	@ <retval>
 538 01c6 BDD1     		bne	.L25	@
 539              	.L23:
 540              	.LVL46:
 503:src/stm32f1xx_hal_flash_ex.c ****   {
 541              		.loc 1 503 0
 542 01c8 2B68     		ldr	r3, [r5]	@ pOBInit_16(D)->OptionType, pOBInit_16(D)->OptionType
 543 01ca 1B07     		lsls	r3, r3, #28	@, pOBInit_16(D)->OptionType,
 544 01cc BAD5     		bpl	.L25	@,
 545              	.LBB44:
 546              	.LBB45:
 996:src/stm32f1xx_hal_flash_ex.c ****   
 547              		.loc 1 996 0
 548 01ce 4CF25030 		movw	r0, #50000	@,
 549              	.LVL47:
 550              	.LBE45:
 551              	.LBE44:
 505:src/stm32f1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 552              		.loc 1 505 0
 553 01d2 6F69     		ldr	r7, [r5, #20]	@ _41, pOBInit_16(D)->DATAAddress
 554 01d4 2E7E     		ldrb	r6, [r5, #24]	@ zero_extendqisi2	@ _42, pOBInit_16(D)->DATAData
 555              	.LVL48:
 556              	.LBB47:
 557              	.LBB46:
 996:src/stm32f1xx_hal_flash_ex.c ****   
 558              		.loc 1 996 0
 559 01d6 FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 560              	.LVL49:
 998:src/stm32f1xx_hal_flash_ex.c ****   {
 561              		.loc 1 998 0
 562 01da 0028     		cmp	r0, #0	@ <retval>
 563 01dc B2D1     		bne	.L25	@
1004:src/stm32f1xx_hal_flash_ex.c ****     *(__IO uint16_t*)Address = Data;
 564              		.loc 1 1004 0
 565 01de 0B4D     		ldr	r5, .L57+4	@ tmp245,
 566              	.LVL50:
1001:src/stm32f1xx_hal_flash_ex.c **** 
 567              		.loc 1 1001 0
 568 01e0 E061     		str	r0, [r4, #28]	@ <retval>, pFlash.ErrorCode
1004:src/stm32f1xx_hal_flash_ex.c ****     *(__IO uint16_t*)Address = Data;
 569              		.loc 1 1004 0
 570 01e2 2B69     		ldr	r3, [r5, #16]	@ _89, MEM[(struct FLASH_TypeDef *)1073881088B].CR
1005:src/stm32f1xx_hal_flash_ex.c ****     
ARM GAS  /tmp/cctMPBvi.s 			page 31


 571              		.loc 1 1005 0
 572 01e4 B6B2     		uxth	r6, r6	@ _92, _42
 573              	.LVL51:
1004:src/stm32f1xx_hal_flash_ex.c ****     *(__IO uint16_t*)Address = Data;
 574              		.loc 1 1004 0
 575 01e6 43F01003 		orr	r3, r3, #16	@ _90, _89,
 576 01ea 2B61     		str	r3, [r5, #16]	@ _90, MEM[(struct FLASH_TypeDef *)1073881088B].CR
1008:src/stm32f1xx_hal_flash_ex.c ****     
 577              		.loc 1 1008 0
 578 01ec 4CF25030 		movw	r0, #50000	@,
 579              	.LVL52:
1005:src/stm32f1xx_hal_flash_ex.c ****     
 580              		.loc 1 1005 0
 581 01f0 3E80     		strh	r6, [r7]	@ movhi	@ _92, *Address.0_91
1008:src/stm32f1xx_hal_flash_ex.c ****     
 582              		.loc 1 1008 0
 583 01f2 FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 584              	.LVL53:
1011:src/stm32f1xx_hal_flash_ex.c ****   }
 585              		.loc 1 1011 0
 586 01f6 2B69     		ldr	r3, [r5, #16]	@ _94, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 587 01f8 23F01003 		bic	r3, r3, #16	@ _95, _94,
 588 01fc 2B61     		str	r3, [r5, #16]	@ _95, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 589              	.LVL54:
 590              	.LBE46:
 591              	.LBE47:
 592 01fe A1E7     		b	.L25	@
 593              	.LVL55:
 594              	.L27:
 451:src/stm32f1xx_hal_flash_ex.c **** 
 595              		.loc 1 451 0
 596 0200 0220     		movs	r0, #2	@ <retval>,
 597              	.LVL56:
 518:src/stm32f1xx_hal_flash_ex.c **** 
 598              		.loc 1 518 0
 599 0202 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 600              	.LVL57:
 601              	.L58:
 602 0206 00BF     		.align	2
 603              	.L57:
 604 0208 00000000 		.word	pFlash
 605 020c 00200240 		.word	1073881088
 606 0210 00F8FF1F 		.word	536868864
 607              		.cfi_endproc
 608              	.LFE68:
 609              		.size	HAL_FLASHEx_OBProgram, .-HAL_FLASHEx_OBProgram
 610              		.align	1
 611              		.global	HAL_FLASHEx_OBGetConfig
 612              		.syntax unified
 613              		.thumb
 614              		.thumb_func
 615              		.fpu softvfp
 616              		.type	HAL_FLASHEx_OBGetConfig, %function
 617              	HAL_FLASHEx_OBGetConfig:
 618              	.LFB69:
 528:src/stm32f1xx_hal_flash_ex.c ****   pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 619              		.loc 1 528 0
ARM GAS  /tmp/cctMPBvi.s 			page 32


 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 0, uses_anonymous_args = 0
 623              		@ link register save eliminated.
 624              	.LVL58:
 529:src/stm32f1xx_hal_flash_ex.c **** 
 625              		.loc 1 529 0
 626 0214 0723     		movs	r3, #7	@ tmp120,
 627 0216 0360     		str	r3, [r0]	@ tmp120, pOBInit_2(D)->OptionType
 628              	.LBB54:
 629              	.LBB55:
1024:src/stm32f1xx_hal_flash_ex.c **** }
 630              		.loc 1 1024 0
 631 0218 074B     		ldr	r3, .L62	@ tmp121,
 632 021a 1A6A     		ldr	r2, [r3, #32]	@ _12, MEM[(struct FLASH_TypeDef *)1073881088B].WRPR
 633              	.LBE55:
 634              	.LBE54:
 532:src/stm32f1xx_hal_flash_ex.c **** 
 635              		.loc 1 532 0
 636 021c 8260     		str	r2, [r0, #8]	@ _12, pOBInit_2(D)->WRPPage
 637              	.LVL59:
 638              	.LBB56:
 639              	.LBB57:
1040:src/stm32f1xx_hal_flash_ex.c **** 
 640              		.loc 1 1040 0
 641 021e DA69     		ldr	r2, [r3, #28]	@ _17, MEM[(struct FLASH_TypeDef *)1073881088B].OBR
 642              	.LVL60:
1042:src/stm32f1xx_hal_flash_ex.c ****   {
 643              		.loc 1 1042 0
 644 0220 12F0020F 		tst	r2, #2	@ _17,
 645              		.loc 1 1048 0
 646 0224 14BF     		ite	ne
 647 0226 0022     		movne	r2, #0	@ readstatus,
 648              	.LVL61:
 649 0228 A522     		moveq	r2, #165	@ readstatus,
 650              	.LVL62:
 651              	.LBE57:
 652              	.LBE56:
 535:src/stm32f1xx_hal_flash_ex.c **** 
 653              		.loc 1 535 0
 654 022a 0274     		strb	r2, [r0, #16]	@ readstatus, pOBInit_2(D)->RDPLevel
 655              	.LBB58:
 656              	.LBB59:
1049:src/stm32f1xx_hal_flash_ex.c ****   }
1050:src/stm32f1xx_hal_flash_ex.c **** 
1051:src/stm32f1xx_hal_flash_ex.c ****   return readstatus;
1052:src/stm32f1xx_hal_flash_ex.c **** }
1053:src/stm32f1xx_hal_flash_ex.c **** 
1054:src/stm32f1xx_hal_flash_ex.c **** /**
1055:src/stm32f1xx_hal_flash_ex.c ****   * @brief  Return the FLASH User Option Byte value.
1056:src/stm32f1xx_hal_flash_ex.c ****   * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
1057:src/stm32f1xx_hal_flash_ex.c ****   *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
1058:src/stm32f1xx_hal_flash_ex.c ****   *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
1059:src/stm32f1xx_hal_flash_ex.c ****   */
1060:src/stm32f1xx_hal_flash_ex.c **** static uint8_t FLASH_OB_GetUser(void)
1061:src/stm32f1xx_hal_flash_ex.c **** {
1062:src/stm32f1xx_hal_flash_ex.c ****   /* Return the User Option Byte */
ARM GAS  /tmp/cctMPBvi.s 			page 33


1063:src/stm32f1xx_hal_flash_ex.c ****   return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 657              		.loc 1 1063 0
 658 022c DB69     		ldr	r3, [r3, #28]	@ _13, MEM[(struct FLASH_TypeDef *)1073881088B].OBR
 659 022e C3F38203 		ubfx	r3, r3, #2, #3	@ tmp128, _13,,
 660              	.LBE59:
 661              	.LBE58:
 538:src/stm32f1xx_hal_flash_ex.c **** }
 662              		.loc 1 538 0
 663 0232 4374     		strb	r3, [r0, #17]	@ tmp128, pOBInit_2(D)->USERConfig
 664 0234 7047     		bx	lr	@
 665              	.L63:
 666 0236 00BF     		.align	2
 667              	.L62:
 668 0238 00200240 		.word	1073881088
 669              		.cfi_endproc
 670              	.LFE69:
 671              		.size	HAL_FLASHEx_OBGetConfig, .-HAL_FLASHEx_OBGetConfig
 672              		.align	1
 673              		.global	HAL_FLASHEx_OBGetUserData
 674              		.syntax unified
 675              		.thumb
 676              		.thumb_func
 677              		.fpu softvfp
 678              		.type	HAL_FLASHEx_OBGetUserData, %function
 679              	HAL_FLASHEx_OBGetUserData:
 680              	.LFB70:
 550:src/stm32f1xx_hal_flash_ex.c ****   uint32_t value = 0;
 681              		.loc 1 550 0
 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 0
 684              		@ frame_needed = 0, uses_anonymous_args = 0
 685              		@ link register save eliminated.
 686              	.LVL63:
 553:src/stm32f1xx_hal_flash_ex.c ****   {
 687              		.loc 1 553 0
 688 023c 044B     		ldr	r3, .L67	@ tmp116,
 689 023e 9842     		cmp	r0, r3	@ DATAAdress, tmp116
 690 0240 044B     		ldr	r3, .L67+4	@ tmp122,
 556:src/stm32f1xx_hal_flash_ex.c ****   }
 691              		.loc 1 556 0
 692 0242 D869     		ldr	r0, [r3, #28]	@ _4,
 693              	.LVL64:
 694 0244 0CBF     		ite	eq
 695 0246 C0F38720 		ubfxeq	r0, r0, #10, #8	@ <retval>, _4,,
 696              	.LVL65:
 561:src/stm32f1xx_hal_flash_ex.c ****   }
 697              		.loc 1 561 0
 698 024a C0F38740 		ubfxne	r0, r0, #18, #8	@ <retval>, _7,,
 699              	.LVL66:
 565:src/stm32f1xx_hal_flash_ex.c **** 
 700              		.loc 1 565 0
 701 024e 7047     		bx	lr	@
 702              	.L68:
 703              		.align	2
 704              	.L67:
 705 0250 04F8FF1F 		.word	536868868
 706 0254 00200240 		.word	1073881088
ARM GAS  /tmp/cctMPBvi.s 			page 34


 707              		.cfi_endproc
 708              	.LFE70:
 709              		.size	HAL_FLASHEx_OBGetUserData, .-HAL_FLASHEx_OBGetUserData
 710              		.align	1
 711              		.global	FLASH_PageErase
 712              		.syntax unified
 713              		.thumb
 714              		.thumb_func
 715              		.fpu softvfp
 716              		.type	FLASH_PageErase, %function
 717              	FLASH_PageErase:
 718              	.LFB80:
1064:src/stm32f1xx_hal_flash_ex.c **** }
1065:src/stm32f1xx_hal_flash_ex.c **** 
1066:src/stm32f1xx_hal_flash_ex.c **** /**
1067:src/stm32f1xx_hal_flash_ex.c ****   * @}
1068:src/stm32f1xx_hal_flash_ex.c ****   */
1069:src/stm32f1xx_hal_flash_ex.c **** 
1070:src/stm32f1xx_hal_flash_ex.c **** /**
1071:src/stm32f1xx_hal_flash_ex.c ****   * @}
1072:src/stm32f1xx_hal_flash_ex.c ****   */
1073:src/stm32f1xx_hal_flash_ex.c **** 
1074:src/stm32f1xx_hal_flash_ex.c **** /** @addtogroup FLASH
1075:src/stm32f1xx_hal_flash_ex.c ****   * @{
1076:src/stm32f1xx_hal_flash_ex.c ****   */
1077:src/stm32f1xx_hal_flash_ex.c **** 
1078:src/stm32f1xx_hal_flash_ex.c **** /** @addtogroup FLASH_Private_Functions
1079:src/stm32f1xx_hal_flash_ex.c ****  * @{
1080:src/stm32f1xx_hal_flash_ex.c ****  */
1081:src/stm32f1xx_hal_flash_ex.c **** 
1082:src/stm32f1xx_hal_flash_ex.c **** /**
1083:src/stm32f1xx_hal_flash_ex.c ****   * @brief  Erase the specified FLASH memory page
1084:src/stm32f1xx_hal_flash_ex.c ****   * @param  PageAddress FLASH page to erase
1085:src/stm32f1xx_hal_flash_ex.c ****   *         The value of this parameter depend on device used within the same series      
1086:src/stm32f1xx_hal_flash_ex.c ****   * 
1087:src/stm32f1xx_hal_flash_ex.c ****   * @retval None
1088:src/stm32f1xx_hal_flash_ex.c ****   */
1089:src/stm32f1xx_hal_flash_ex.c **** void FLASH_PageErase(uint32_t PageAddress)
1090:src/stm32f1xx_hal_flash_ex.c **** {
 719              		.loc 1 1090 0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 0
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 723              		@ link register save eliminated.
 724              	.LVL67:
1091:src/stm32f1xx_hal_flash_ex.c ****   /* Clean the error context */
1092:src/stm32f1xx_hal_flash_ex.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 725              		.loc 1 1092 0
 726 0258 0022     		movs	r2, #0	@ tmp116,
 727 025a 064B     		ldr	r3, .L70	@ tmp115,
 728 025c DA61     		str	r2, [r3, #28]	@ tmp116, pFlash.ErrorCode
1093:src/stm32f1xx_hal_flash_ex.c **** 
1094:src/stm32f1xx_hal_flash_ex.c **** #if defined(FLASH_BANK2_END)
1095:src/stm32f1xx_hal_flash_ex.c ****   if(PageAddress > FLASH_BANK1_END)
1096:src/stm32f1xx_hal_flash_ex.c ****   { 
1097:src/stm32f1xx_hal_flash_ex.c ****     /* Proceed to erase the page */
1098:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR2, FLASH_CR2_PER);
ARM GAS  /tmp/cctMPBvi.s 			page 35


1099:src/stm32f1xx_hal_flash_ex.c ****     WRITE_REG(FLASH->AR2, PageAddress);
1100:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
1101:src/stm32f1xx_hal_flash_ex.c ****   }
1102:src/stm32f1xx_hal_flash_ex.c ****   else
1103:src/stm32f1xx_hal_flash_ex.c ****   {
1104:src/stm32f1xx_hal_flash_ex.c **** #endif /* FLASH_BANK2_END */
1105:src/stm32f1xx_hal_flash_ex.c ****     /* Proceed to erase the page */
1106:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR, FLASH_CR_PER);
 729              		.loc 1 1106 0
 730 025e 064B     		ldr	r3, .L70+4	@ tmp117,
 731 0260 1A69     		ldr	r2, [r3, #16]	@ _3, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 732 0262 42F00202 		orr	r2, r2, #2	@ _4, _3,
 733 0266 1A61     		str	r2, [r3, #16]	@ _4, MEM[(struct FLASH_TypeDef *)1073881088B].CR
1107:src/stm32f1xx_hal_flash_ex.c ****     WRITE_REG(FLASH->AR, PageAddress);
 734              		.loc 1 1107 0
 735 0268 5861     		str	r0, [r3, #20]	@ PageAddress, MEM[(struct FLASH_TypeDef *)1073881088B].AR
1108:src/stm32f1xx_hal_flash_ex.c ****     SET_BIT(FLASH->CR, FLASH_CR_STRT);
 736              		.loc 1 1108 0
 737 026a 1A69     		ldr	r2, [r3, #16]	@ _8, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 738 026c 42F04002 		orr	r2, r2, #64	@ _9, _8,
 739 0270 1A61     		str	r2, [r3, #16]	@ _9, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 740 0272 7047     		bx	lr	@
 741              	.L71:
 742              		.align	2
 743              	.L70:
 744 0274 00000000 		.word	pFlash
 745 0278 00200240 		.word	1073881088
 746              		.cfi_endproc
 747              	.LFE80:
 748              		.size	FLASH_PageErase, .-FLASH_PageErase
 749              		.align	1
 750              		.global	HAL_FLASHEx_Erase
 751              		.syntax unified
 752              		.thumb
 753              		.thumb_func
 754              		.fpu softvfp
 755              		.type	HAL_FLASHEx_Erase, %function
 756              	HAL_FLASHEx_Erase:
 757              	.LFB65:
 160:src/stm32f1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 758              		.loc 1 160 0
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 0
 761              		@ frame_needed = 0, uses_anonymous_args = 0
 762              	.LVL68:
 763 027c 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 764              	.LCFI5:
 765              		.cfi_def_cfa_offset 24
 766              		.cfi_offset 4, -24
 767              		.cfi_offset 5, -20
 768              		.cfi_offset 6, -16
 769              		.cfi_offset 7, -12
 770              		.cfi_offset 8, -8
 771              		.cfi_offset 14, -4
 165:src/stm32f1xx_hal_flash_ex.c **** 
 772              		.loc 1 165 0
 773 0280 234D     		ldr	r5, .L82	@ tmp126,
ARM GAS  /tmp/cctMPBvi.s 			page 36


 160:src/stm32f1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 774              		.loc 1 160 0
 775 0282 0746     		mov	r7, r0	@ pEraseInit, pEraseInit
 165:src/stm32f1xx_hal_flash_ex.c **** 
 776              		.loc 1 165 0
 777 0284 2B7E     		ldrb	r3, [r5, #24]	@ zero_extendqisi2	@ pFlash.Lock, pFlash.Lock
 160:src/stm32f1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 778              		.loc 1 160 0
 779 0286 8846     		mov	r8, r1	@ PageError, PageError
 165:src/stm32f1xx_hal_flash_ex.c **** 
 780              		.loc 1 165 0
 781 0288 012B     		cmp	r3, #1	@ pFlash.Lock,
 782 028a 3DD0     		beq	.L81	@,
 165:src/stm32f1xx_hal_flash_ex.c **** 
 783              		.loc 1 165 0 is_stmt 0 discriminator 2
 784 028c 0124     		movs	r4, #1	@ tmp129,
 170:src/stm32f1xx_hal_flash_ex.c ****   {
 785              		.loc 1 170 0 is_stmt 1 discriminator 2
 786 028e 0368     		ldr	r3, [r0]	@ pEraseInit_11(D)->TypeErase, pEraseInit_11(D)->TypeErase
 165:src/stm32f1xx_hal_flash_ex.c **** 
 787              		.loc 1 165 0 discriminator 2
 788 0290 2C76     		strb	r4, [r5, #24]	@ tmp129, pFlash.Lock
 170:src/stm32f1xx_hal_flash_ex.c ****   {
 789              		.loc 1 170 0 discriminator 2
 790 0292 022B     		cmp	r3, #2	@ pEraseInit_11(D)->TypeErase,
 216:src/stm32f1xx_hal_flash_ex.c ****       {
 791              		.loc 1 216 0 discriminator 2
 792 0294 4CF25030 		movw	r0, #50000	@,
 793              	.LVL69:
 170:src/stm32f1xx_hal_flash_ex.c ****   {
 794              		.loc 1 170 0 discriminator 2
 795 0298 13D1     		bne	.L74	@,
 216:src/stm32f1xx_hal_flash_ex.c ****       {
 796              		.loc 1 216 0
 797 029a FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 798              	.LVL70:
 799 029e 20B1     		cbz	r0, .L75	@,
 800              	.L77:
 161:src/stm32f1xx_hal_flash_ex.c ****   uint32_t address = 0U;
 801              		.loc 1 161 0
 802 02a0 0120     		movs	r0, #1	@ <retval>,
 803              	.LVL71:
 804              	.L76:
 303:src/stm32f1xx_hal_flash_ex.c **** 
 805              		.loc 1 303 0
 806 02a2 0023     		movs	r3, #0	@ tmp146,
 807 02a4 2B76     		strb	r3, [r5, #24]	@ tmp146, pFlash.Lock
 305:src/stm32f1xx_hal_flash_ex.c **** }
 808              		.loc 1 305 0
 809 02a6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 810              	.LVL72:
 811              	.L75:
 219:src/stm32f1xx_hal_flash_ex.c ****         
 812              		.loc 1 219 0
 813 02aa FFF7A9FE 		bl	FLASH_MassErase.isra.0	@
 814              	.LVL73:
 222:src/stm32f1xx_hal_flash_ex.c ****         
ARM GAS  /tmp/cctMPBvi.s 			page 37


 815              		.loc 1 222 0
 816 02ae 4CF25030 		movw	r0, #50000	@,
 817 02b2 FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 818              	.LVL74:
 225:src/stm32f1xx_hal_flash_ex.c ****       }
 819              		.loc 1 225 0
 820 02b6 174A     		ldr	r2, .L82+4	@ tmp134,
 821 02b8 1369     		ldr	r3, [r2, #16]	@ _18, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 822 02ba 23F00403 		bic	r3, r3, #4	@ _19, _18,
 823 02be 1361     		str	r3, [r2, #16]	@ _19, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 824 02c0 EFE7     		b	.L76	@
 825              	.LVL75:
 826              	.L74:
 273:src/stm32f1xx_hal_flash_ex.c ****       {
 827              		.loc 1 273 0
 828 02c2 FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 829              	.LVL76:
 830 02c6 0028     		cmp	r0, #0	@
 831 02c8 EAD1     		bne	.L77	@
 276:src/stm32f1xx_hal_flash_ex.c ****         
 832              		.loc 1 276 0
 833 02ca 4FF0FF33 		mov	r3, #-1	@ tmp137,
 834 02ce C8F80030 		str	r3, [r8]	@ tmp137, *PageError_23(D)
 161:src/stm32f1xx_hal_flash_ex.c ****   uint32_t address = 0U;
 835              		.loc 1 161 0
 836 02d2 2046     		mov	r0, r4	@ <retval>, tmp129
 279:src/stm32f1xx_hal_flash_ex.c ****             address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 837              		.loc 1 279 0
 838 02d4 BE68     		ldr	r6, [r7, #8]	@ address, pEraseInit_11(D)->PageAddress
 839              	.LVL77:
 289:src/stm32f1xx_hal_flash_ex.c ****           
 840              		.loc 1 289 0
 841 02d6 0F4C     		ldr	r4, .L82+4	@ tmp151,
 842              	.LVL78:
 843              	.L78:
 280:src/stm32f1xx_hal_flash_ex.c ****             address += FLASH_PAGE_SIZE)
 844              		.loc 1 280 0 discriminator 1
 845 02d8 FA68     		ldr	r2, [r7, #12]	@ pEraseInit_11(D)->NbPages, pEraseInit_11(D)->NbPages
 846 02da BB68     		ldr	r3, [r7, #8]	@ pEraseInit_11(D)->PageAddress, pEraseInit_11(D)->PageAddress
 847 02dc 03EB8223 		add	r3, r3, r2, lsl #10	@ tmp143, pEraseInit_11(D)->PageAddress, pEraseInit_11(D)->NbPages,
 279:src/stm32f1xx_hal_flash_ex.c ****             address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 848              		.loc 1 279 0 discriminator 1
 849 02e0 9E42     		cmp	r6, r3	@ address, tmp143
 850 02e2 DED2     		bcs	.L76	@,
 283:src/stm32f1xx_hal_flash_ex.c ****           
 851              		.loc 1 283 0
 852 02e4 3046     		mov	r0, r6	@, address
 853 02e6 FFF7FEFF 		bl	FLASH_PageErase	@
 854              	.LVL79:
 286:src/stm32f1xx_hal_flash_ex.c ****           
 855              		.loc 1 286 0
 856 02ea 4CF25030 		movw	r0, #50000	@,
 857 02ee FFF7FEFF 		bl	FLASH_WaitForLastOperation	@
 858              	.LVL80:
 289:src/stm32f1xx_hal_flash_ex.c ****           
 859              		.loc 1 289 0
 860 02f2 2369     		ldr	r3, [r4, #16]	@ _33, MEM[(struct FLASH_TypeDef *)1073881088B].CR
ARM GAS  /tmp/cctMPBvi.s 			page 38


 861 02f4 23F00203 		bic	r3, r3, #2	@ _34, _33,
 862 02f8 2361     		str	r3, [r4, #16]	@ _34, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 291:src/stm32f1xx_hal_flash_ex.c ****           {
 863              		.loc 1 291 0
 864 02fa 10B1     		cbz	r0, .L79	@ <retval>,
 294:src/stm32f1xx_hal_flash_ex.c ****             break;
 865              		.loc 1 294 0
 866 02fc C8F80060 		str	r6, [r8]	@ address, *PageError_23(D)
 295:src/stm32f1xx_hal_flash_ex.c ****           }
 867              		.loc 1 295 0
 868 0300 CFE7     		b	.L76	@
 869              	.L79:
 281:src/stm32f1xx_hal_flash_ex.c ****         {
 870              		.loc 1 281 0
 871 0302 06F58066 		add	r6, r6, #1024	@ address, address,
 872              	.LVL81:
 873 0306 E7E7     		b	.L78	@
 874              	.LVL82:
 875              	.L81:
 165:src/stm32f1xx_hal_flash_ex.c **** 
 876              		.loc 1 165 0
 877 0308 0220     		movs	r0, #2	@ <retval>,
 878              	.LVL83:
 306:src/stm32f1xx_hal_flash_ex.c **** 
 879              		.loc 1 306 0
 880 030a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 881              	.LVL84:
 882              	.L83:
 883 030e 00BF     		.align	2
 884              	.L82:
 885 0310 00000000 		.word	pFlash
 886 0314 00200240 		.word	1073881088
 887              		.cfi_endproc
 888              	.LFE65:
 889              		.size	HAL_FLASHEx_Erase, .-HAL_FLASHEx_Erase
 890              		.align	1
 891              		.global	HAL_FLASHEx_Erase_IT
 892              		.syntax unified
 893              		.thumb
 894              		.thumb_func
 895              		.fpu softvfp
 896              		.type	HAL_FLASHEx_Erase_IT, %function
 897              	HAL_FLASHEx_Erase_IT:
 898              	.LFB66:
 320:src/stm32f1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 899              		.loc 1 320 0
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 0
 902              		@ frame_needed = 0, uses_anonymous_args = 0
 903              	.LVL85:
 324:src/stm32f1xx_hal_flash_ex.c **** 
 904              		.loc 1 324 0
 905 0318 114A     		ldr	r2, .L90	@ tmp119,
 320:src/stm32f1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 906              		.loc 1 320 0
 907 031a 38B5     		push	{r3, r4, r5, lr}	@
 908              	.LCFI6:
ARM GAS  /tmp/cctMPBvi.s 			page 39


 909              		.cfi_def_cfa_offset 16
 910              		.cfi_offset 3, -16
 911              		.cfi_offset 4, -12
 912              		.cfi_offset 5, -8
 913              		.cfi_offset 14, -4
 324:src/stm32f1xx_hal_flash_ex.c **** 
 914              		.loc 1 324 0
 915 031c 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2	@ pFlash.Lock, pFlash.Lock
 916 031e 012B     		cmp	r3, #1	@ pFlash.Lock,
 917 0320 1AD0     		beq	.L87	@,
 324:src/stm32f1xx_hal_flash_ex.c **** 
 918              		.loc 1 324 0 is_stmt 0 discriminator 2
 919 0322 0123     		movs	r3, #1	@ tmp122,
 327:src/stm32f1xx_hal_flash_ex.c ****   {
 920              		.loc 1 327 0 is_stmt 1 discriminator 2
 921 0324 1178     		ldrb	r1, [r2]	@ zero_extendqisi2	@ pFlash.ProcedureOnGoing, pFlash.ProcedureOnGoing
 324:src/stm32f1xx_hal_flash_ex.c **** 
 922              		.loc 1 324 0 discriminator 2
 923 0326 1376     		strb	r3, [r2, #24]	@ tmp122, pFlash.Lock
 327:src/stm32f1xx_hal_flash_ex.c ****   {
 924              		.loc 1 327 0 discriminator 2
 925 0328 01F0FF04 		and	r4, r1, #255	@ _6, pFlash.ProcedureOnGoing,
 926 032c B1B9     		cbnz	r1, .L88	@ pFlash.ProcedureOnGoing,
 336:src/stm32f1xx_hal_flash_ex.c **** 
 927              		.loc 1 336 0
 928 032e 0D4D     		ldr	r5, .L90+4	@ tmp127,
 929 0330 2969     		ldr	r1, [r5, #16]	@ _7, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 930 0332 41F4A051 		orr	r1, r1, #5120	@ _8, _7,
 931 0336 2961     		str	r1, [r5, #16]	@ _8, MEM[(struct FLASH_TypeDef *)1073881088B].CR
 343:src/stm32f1xx_hal_flash_ex.c ****   {
 932              		.loc 1 343 0
 933 0338 0168     		ldr	r1, [r0]	@ pEraseInit_10(D)->TypeErase, pEraseInit_10(D)->TypeErase
 934 033a 0229     		cmp	r1, #2	@ pEraseInit_10(D)->TypeErase,
 935 033c 04D1     		bne	.L86	@,
 346:src/stm32f1xx_hal_flash_ex.c ****         FLASH_MassErase(pEraseInit->Banks);
 936              		.loc 1 346 0
 937 033e 1170     		strb	r1, [r2]	@ pEraseInit_10(D)->TypeErase, pFlash.ProcedureOnGoing
 347:src/stm32f1xx_hal_flash_ex.c ****   }
 938              		.loc 1 347 0
 939 0340 FFF75EFE 		bl	FLASH_MassErase.isra.0	@
 940              	.LVL86:
 941              	.L89:
 365:src/stm32f1xx_hal_flash_ex.c **** }
 942              		.loc 1 365 0
 943 0344 2046     		mov	r0, r4	@ <retval>, _6
 944 0346 38BD     		pop	{r3, r4, r5, pc}	@
 945              	.LVL87:
 946              	.L86:
 357:src/stm32f1xx_hal_flash_ex.c ****     pFlash.DataRemaining = pEraseInit->NbPages;
 947              		.loc 1 357 0
 948 0348 1370     		strb	r3, [r2]	@ tmp122, pFlash.ProcedureOnGoing
 358:src/stm32f1xx_hal_flash_ex.c ****     pFlash.Address = pEraseInit->PageAddress;
 949              		.loc 1 358 0
 950 034a C368     		ldr	r3, [r0, #12]	@ _15, pEraseInit_10(D)->NbPages
 359:src/stm32f1xx_hal_flash_ex.c **** 
 951              		.loc 1 359 0
 952 034c 8068     		ldr	r0, [r0, #8]	@ _17, pEraseInit_10(D)->PageAddress
ARM GAS  /tmp/cctMPBvi.s 			page 40


 953              	.LVL88:
 358:src/stm32f1xx_hal_flash_ex.c ****     pFlash.Address = pEraseInit->PageAddress;
 954              		.loc 1 358 0
 955 034e 5360     		str	r3, [r2, #4]	@ _15, pFlash.DataRemaining
 359:src/stm32f1xx_hal_flash_ex.c **** 
 956              		.loc 1 359 0
 957 0350 9060     		str	r0, [r2, #8]	@ _17, pFlash.Address
 362:src/stm32f1xx_hal_flash_ex.c ****   }
 958              		.loc 1 362 0
 959 0352 FFF7FEFF 		bl	FLASH_PageErase	@
 960              	.LVL89:
 961 0356 F5E7     		b	.L89	@
 962              	.LVL90:
 963              	.L87:
 324:src/stm32f1xx_hal_flash_ex.c **** 
 964              		.loc 1 324 0
 965 0358 0220     		movs	r0, #2	@ <retval>,
 966              	.LVL91:
 967 035a 38BD     		pop	{r3, r4, r5, pc}	@
 968              	.LVL92:
 969              	.L88:
 329:src/stm32f1xx_hal_flash_ex.c ****   }
 970              		.loc 1 329 0
 971 035c 1846     		mov	r0, r3	@ <retval>, tmp122
 972              	.LVL93:
 366:src/stm32f1xx_hal_flash_ex.c **** 
 973              		.loc 1 366 0
 974 035e 38BD     		pop	{r3, r4, r5, pc}	@
 975              	.L91:
 976              		.align	2
 977              	.L90:
 978 0360 00000000 		.word	pFlash
 979 0364 00200240 		.word	1073881088
 980              		.cfi_endproc
 981              	.LFE66:
 982              		.size	HAL_FLASHEx_Erase_IT, .-HAL_FLASHEx_Erase_IT
 983              	.Letext0:
 984              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 985              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 986              		.file 4 "../cmsiscore/inc/core_cm3.h"
 987              		.file 5 "../cmsisstm32f1xx/inc/system_stm32f1xx.h"
 988              		.file 6 "../cmsisstm32f1xx/inc/stm32f103x6.h"
 989              		.file 7 "./inc/stm32f1xx_hal_def.h"
 990              		.file 8 "./inc/stm32f1xx_hal_flash.h"
 991              		.file 9 "./inc/stm32f1xx_hal_flash_ex.h"
 992              		.file 10 "./inc/stm32f1xx_hal.h"
 993              		.section	.debug_info,"",%progbits
 994              	.Ldebug_info0:
 995 0000 270B0000 		.4byte	0xb27
 996 0004 0200     		.2byte	0x2
 997 0006 00000000 		.4byte	.Ldebug_abbrev0
 998 000a 04       		.byte	0x4
 999 000b 01       		.uleb128 0x1
 1000 000c C3040000 		.4byte	.LASF110
 1001 0010 0C       		.byte	0xc
 1002 0011 68020000 		.4byte	.LASF111
 1003 0015 F7020000 		.4byte	.LASF112
ARM GAS  /tmp/cctMPBvi.s 			page 41


 1004 0019 00000000 		.4byte	.Ltext0
 1005 001d 68030000 		.4byte	.Letext0
 1006 0021 00000000 		.4byte	.Ldebug_line0
 1007 0025 02       		.uleb128 0x2
 1008 0026 01       		.byte	0x1
 1009 0027 06       		.byte	0x6
 1010 0028 46030000 		.4byte	.LASF0
 1011 002c 03       		.uleb128 0x3
 1012 002d 4F020000 		.4byte	.LASF3
 1013 0031 02       		.byte	0x2
 1014 0032 1D       		.byte	0x1d
 1015 0033 37000000 		.4byte	0x37
 1016 0037 02       		.uleb128 0x2
 1017 0038 01       		.byte	0x1
 1018 0039 08       		.byte	0x8
 1019 003a E9020000 		.4byte	.LASF1
 1020 003e 02       		.uleb128 0x2
 1021 003f 02       		.byte	0x2
 1022 0040 05       		.byte	0x5
 1023 0041 CD010000 		.4byte	.LASF2
 1024 0045 03       		.uleb128 0x3
 1025 0046 2F010000 		.4byte	.LASF4
 1026 004a 02       		.byte	0x2
 1027 004b 2B       		.byte	0x2b
 1028 004c 50000000 		.4byte	0x50
 1029 0050 02       		.uleb128 0x2
 1030 0051 02       		.byte	0x2
 1031 0052 07       		.byte	0x7
 1032 0053 D9030000 		.4byte	.LASF5
 1033 0057 03       		.uleb128 0x3
 1034 0058 16040000 		.4byte	.LASF6
 1035 005c 02       		.byte	0x2
 1036 005d 3F       		.byte	0x3f
 1037 005e 62000000 		.4byte	0x62
 1038 0062 02       		.uleb128 0x2
 1039 0063 04       		.byte	0x4
 1040 0064 05       		.byte	0x5
 1041 0065 24020000 		.4byte	.LASF7
 1042 0069 03       		.uleb128 0x3
 1043 006a 1C010000 		.4byte	.LASF8
 1044 006e 02       		.byte	0x2
 1045 006f 41       		.byte	0x41
 1046 0070 74000000 		.4byte	0x74
 1047 0074 02       		.uleb128 0x2
 1048 0075 04       		.byte	0x4
 1049 0076 07       		.byte	0x7
 1050 0077 A8040000 		.4byte	.LASF9
 1051 007b 02       		.uleb128 0x2
 1052 007c 08       		.byte	0x8
 1053 007d 05       		.byte	0x5
 1054 007e EB010000 		.4byte	.LASF10
 1055 0082 03       		.uleb128 0x3
 1056 0083 6A040000 		.4byte	.LASF11
 1057 0087 02       		.byte	0x2
 1058 0088 5B       		.byte	0x5b
 1059 0089 8D000000 		.4byte	0x8d
 1060 008d 02       		.uleb128 0x2
ARM GAS  /tmp/cctMPBvi.s 			page 42


 1061 008e 08       		.byte	0x8
 1062 008f 07       		.byte	0x7
 1063 0090 F9010000 		.4byte	.LASF12
 1064 0094 04       		.uleb128 0x4
 1065 0095 04       		.byte	0x4
 1066 0096 05       		.byte	0x5
 1067 0097 696E7400 		.ascii	"int\000"
 1068 009b 02       		.uleb128 0x2
 1069 009c 04       		.byte	0x4
 1070 009d 07       		.byte	0x7
 1071 009e 79030000 		.4byte	.LASF13
 1072 00a2 03       		.uleb128 0x3
 1073 00a3 87010000 		.4byte	.LASF14
 1074 00a7 03       		.byte	0x3
 1075 00a8 18       		.byte	0x18
 1076 00a9 2C000000 		.4byte	0x2c
 1077 00ad 05       		.uleb128 0x5
 1078 00ae A2000000 		.4byte	0xa2
 1079 00b2 03       		.uleb128 0x3
 1080 00b3 86030000 		.4byte	.LASF15
 1081 00b7 03       		.byte	0x3
 1082 00b8 24       		.byte	0x24
 1083 00b9 45000000 		.4byte	0x45
 1084 00bd 06       		.uleb128 0x6
 1085 00be B2000000 		.4byte	0xb2
 1086 00c2 03       		.uleb128 0x3
 1087 00c3 03040000 		.4byte	.LASF16
 1088 00c7 03       		.byte	0x3
 1089 00c8 2C       		.byte	0x2c
 1090 00c9 57000000 		.4byte	0x57
 1091 00cd 06       		.uleb128 0x6
 1092 00ce C2000000 		.4byte	0xc2
 1093 00d2 03       		.uleb128 0x3
 1094 00d3 65030000 		.4byte	.LASF17
 1095 00d7 03       		.byte	0x3
 1096 00d8 30       		.byte	0x30
 1097 00d9 69000000 		.4byte	0x69
 1098 00dd 06       		.uleb128 0x6
 1099 00de D2000000 		.4byte	0xd2
 1100 00e2 03       		.uleb128 0x3
 1101 00e3 93000000 		.4byte	.LASF18
 1102 00e7 03       		.byte	0x3
 1103 00e8 3C       		.byte	0x3c
 1104 00e9 82000000 		.4byte	0x82
 1105 00ed 06       		.uleb128 0x6
 1106 00ee E2000000 		.4byte	0xe2
 1107 00f2 02       		.uleb128 0x2
 1108 00f3 04       		.byte	0x4
 1109 00f4 07       		.byte	0x7
 1110 00f5 CF000000 		.4byte	.LASF19
 1111 00f9 07       		.uleb128 0x7
 1112 00fa E4050000 		.4byte	.LASF20
 1113 00fe 04       		.byte	0x4
 1114 00ff 4807     		.2byte	0x748
 1115 0101 CD000000 		.4byte	0xcd
 1116 0105 01       		.byte	0x1
 1117 0106 01       		.byte	0x1
ARM GAS  /tmp/cctMPBvi.s 			page 43


 1118 0107 08       		.uleb128 0x8
 1119 0108 46040000 		.4byte	.LASF21
 1120 010c 05       		.byte	0x5
 1121 010d 33       		.byte	0x33
 1122 010e D2000000 		.4byte	0xd2
 1123 0112 01       		.byte	0x1
 1124 0113 01       		.byte	0x1
 1125 0114 09       		.uleb128 0x9
 1126 0115 AD000000 		.4byte	0xad
 1127 0119 24010000 		.4byte	0x124
 1128 011d 0A       		.uleb128 0xa
 1129 011e F2000000 		.4byte	0xf2
 1130 0122 0F       		.byte	0xf
 1131 0123 00       		.byte	0
 1132 0124 05       		.uleb128 0x5
 1133 0125 14010000 		.4byte	0x114
 1134 0129 08       		.uleb128 0x8
 1135 012a 9A040000 		.4byte	.LASF22
 1136 012e 05       		.byte	0x5
 1137 012f 34       		.byte	0x34
 1138 0130 24010000 		.4byte	0x124
 1139 0134 01       		.byte	0x1
 1140 0135 01       		.byte	0x1
 1141 0136 09       		.uleb128 0x9
 1142 0137 AD000000 		.4byte	0xad
 1143 013b 46010000 		.4byte	0x146
 1144 013f 0A       		.uleb128 0xa
 1145 0140 F2000000 		.4byte	0xf2
 1146 0144 07       		.byte	0x7
 1147 0145 00       		.byte	0
 1148 0146 05       		.uleb128 0x5
 1149 0147 36010000 		.4byte	0x136
 1150 014b 08       		.uleb128 0x8
 1151 014c 23030000 		.4byte	.LASF23
 1152 0150 05       		.byte	0x5
 1153 0151 35       		.byte	0x35
 1154 0152 46010000 		.4byte	0x146
 1155 0156 01       		.byte	0x1
 1156 0157 01       		.byte	0x1
 1157 0158 0B       		.uleb128 0xb
 1158 0159 24       		.byte	0x24
 1159 015a 06       		.byte	0x6
 1160 015b 4001     		.2byte	0x140
 1161 015d E6010000 		.4byte	0x1e6
 1162 0161 0C       		.uleb128 0xc
 1163 0162 41435200 		.ascii	"ACR\000"
 1164 0166 06       		.byte	0x6
 1165 0167 4201     		.2byte	0x142
 1166 0169 DD000000 		.4byte	0xdd
 1167 016d 02       		.byte	0x2
 1168 016e 23       		.byte	0x23
 1169 016f 00       		.uleb128 0
 1170 0170 0D       		.uleb128 0xd
 1171 0171 B6020000 		.4byte	.LASF24
 1172 0175 06       		.byte	0x6
 1173 0176 4301     		.2byte	0x143
 1174 0178 DD000000 		.4byte	0xdd
ARM GAS  /tmp/cctMPBvi.s 			page 44


 1175 017c 02       		.byte	0x2
 1176 017d 23       		.byte	0x23
 1177 017e 04       		.uleb128 0x4
 1178 017f 0D       		.uleb128 0xd
 1179 0180 D7010000 		.4byte	.LASF25
 1180 0184 06       		.byte	0x6
 1181 0185 4401     		.2byte	0x144
 1182 0187 DD000000 		.4byte	0xdd
 1183 018b 02       		.byte	0x2
 1184 018c 23       		.byte	0x23
 1185 018d 08       		.uleb128 0x8
 1186 018e 0C       		.uleb128 0xc
 1187 018f 535200   		.ascii	"SR\000"
 1188 0192 06       		.byte	0x6
 1189 0193 4501     		.2byte	0x145
 1190 0195 DD000000 		.4byte	0xdd
 1191 0199 02       		.byte	0x2
 1192 019a 23       		.byte	0x23
 1193 019b 0C       		.uleb128 0xc
 1194 019c 0C       		.uleb128 0xc
 1195 019d 435200   		.ascii	"CR\000"
 1196 01a0 06       		.byte	0x6
 1197 01a1 4601     		.2byte	0x146
 1198 01a3 DD000000 		.4byte	0xdd
 1199 01a7 02       		.byte	0x2
 1200 01a8 23       		.byte	0x23
 1201 01a9 10       		.uleb128 0x10
 1202 01aa 0C       		.uleb128 0xc
 1203 01ab 415200   		.ascii	"AR\000"
 1204 01ae 06       		.byte	0x6
 1205 01af 4701     		.2byte	0x147
 1206 01b1 DD000000 		.4byte	0xdd
 1207 01b5 02       		.byte	0x2
 1208 01b6 23       		.byte	0x23
 1209 01b7 14       		.uleb128 0x14
 1210 01b8 0D       		.uleb128 0xd
 1211 01b9 B2050000 		.4byte	.LASF26
 1212 01bd 06       		.byte	0x6
 1213 01be 4801     		.2byte	0x148
 1214 01c0 DD000000 		.4byte	0xdd
 1215 01c4 02       		.byte	0x2
 1216 01c5 23       		.byte	0x23
 1217 01c6 18       		.uleb128 0x18
 1218 01c7 0C       		.uleb128 0xc
 1219 01c8 4F425200 		.ascii	"OBR\000"
 1220 01cc 06       		.byte	0x6
 1221 01cd 4901     		.2byte	0x149
 1222 01cf DD000000 		.4byte	0xdd
 1223 01d3 02       		.byte	0x2
 1224 01d4 23       		.byte	0x23
 1225 01d5 1C       		.uleb128 0x1c
 1226 01d6 0D       		.uleb128 0xd
 1227 01d7 45010000 		.4byte	.LASF27
 1228 01db 06       		.byte	0x6
 1229 01dc 4A01     		.2byte	0x14a
 1230 01de DD000000 		.4byte	0xdd
 1231 01e2 02       		.byte	0x2
ARM GAS  /tmp/cctMPBvi.s 			page 45


 1232 01e3 23       		.byte	0x23
 1233 01e4 20       		.uleb128 0x20
 1234 01e5 00       		.byte	0
 1235 01e6 0E       		.uleb128 0xe
 1236 01e7 BB050000 		.4byte	.LASF28
 1237 01eb 06       		.byte	0x6
 1238 01ec 4B01     		.2byte	0x14b
 1239 01ee 58010000 		.4byte	0x158
 1240 01f2 0B       		.uleb128 0xb
 1241 01f3 10       		.byte	0x10
 1242 01f4 06       		.byte	0x6
 1243 01f5 5101     		.2byte	0x151
 1244 01f7 74020000 		.4byte	0x274
 1245 01fb 0C       		.uleb128 0xc
 1246 01fc 52445000 		.ascii	"RDP\000"
 1247 0200 06       		.byte	0x6
 1248 0201 5301     		.2byte	0x153
 1249 0203 BD000000 		.4byte	0xbd
 1250 0207 02       		.byte	0x2
 1251 0208 23       		.byte	0x23
 1252 0209 00       		.uleb128 0
 1253 020a 0D       		.uleb128 0xd
 1254 020b 67050000 		.4byte	.LASF29
 1255 020f 06       		.byte	0x6
 1256 0210 5401     		.2byte	0x154
 1257 0212 BD000000 		.4byte	0xbd
 1258 0216 02       		.byte	0x2
 1259 0217 23       		.byte	0x23
 1260 0218 02       		.uleb128 0x2
 1261 0219 0D       		.uleb128 0xd
 1262 021a 40040000 		.4byte	.LASF30
 1263 021e 06       		.byte	0x6
 1264 021f 5501     		.2byte	0x155
 1265 0221 BD000000 		.4byte	0xbd
 1266 0225 02       		.byte	0x2
 1267 0226 23       		.byte	0x23
 1268 0227 04       		.uleb128 0x4
 1269 0228 0D       		.uleb128 0xd
 1270 0229 74050000 		.4byte	.LASF31
 1271 022d 06       		.byte	0x6
 1272 022e 5601     		.2byte	0x156
 1273 0230 BD000000 		.4byte	0xbd
 1274 0234 02       		.byte	0x2
 1275 0235 23       		.byte	0x23
 1276 0236 06       		.uleb128 0x6
 1277 0237 0D       		.uleb128 0xd
 1278 0238 B0010000 		.4byte	.LASF32
 1279 023c 06       		.byte	0x6
 1280 023d 5701     		.2byte	0x157
 1281 023f BD000000 		.4byte	0xbd
 1282 0243 02       		.byte	0x2
 1283 0244 23       		.byte	0x23
 1284 0245 08       		.uleb128 0x8
 1285 0246 0D       		.uleb128 0xd
 1286 0247 B5010000 		.4byte	.LASF33
 1287 024b 06       		.byte	0x6
 1288 024c 5801     		.2byte	0x158
ARM GAS  /tmp/cctMPBvi.s 			page 46


 1289 024e BD000000 		.4byte	0xbd
 1290 0252 02       		.byte	0x2
 1291 0253 23       		.byte	0x23
 1292 0254 0A       		.uleb128 0xa
 1293 0255 0D       		.uleb128 0xd
 1294 0256 BA010000 		.4byte	.LASF34
 1295 025a 06       		.byte	0x6
 1296 025b 5901     		.2byte	0x159
 1297 025d BD000000 		.4byte	0xbd
 1298 0261 02       		.byte	0x2
 1299 0262 23       		.byte	0x23
 1300 0263 0C       		.uleb128 0xc
 1301 0264 0D       		.uleb128 0xd
 1302 0265 BF010000 		.4byte	.LASF35
 1303 0269 06       		.byte	0x6
 1304 026a 5A01     		.2byte	0x15a
 1305 026c BD000000 		.4byte	0xbd
 1306 0270 02       		.byte	0x2
 1307 0271 23       		.byte	0x23
 1308 0272 0E       		.uleb128 0xe
 1309 0273 00       		.byte	0
 1310 0274 0E       		.uleb128 0xe
 1311 0275 20040000 		.4byte	.LASF36
 1312 0279 06       		.byte	0x6
 1313 027a 5B01     		.2byte	0x15b
 1314 027c F2010000 		.4byte	0x1f2
 1315 0280 02       		.uleb128 0x2
 1316 0281 08       		.byte	0x8
 1317 0282 04       		.byte	0x4
 1318 0283 CC020000 		.4byte	.LASF37
 1319 0287 0F       		.uleb128 0xf
 1320 0288 01       		.byte	0x1
 1321 0289 37000000 		.4byte	0x37
 1322 028d 07       		.byte	0x7
 1323 028e 2A       		.byte	0x2a
 1324 028f AC020000 		.4byte	0x2ac
 1325 0293 10       		.uleb128 0x10
 1326 0294 64010000 		.4byte	.LASF38
 1327 0298 00       		.byte	0
 1328 0299 10       		.uleb128 0x10
 1329 029a 17000000 		.4byte	.LASF39
 1330 029e 01       		.byte	0x1
 1331 029f 10       		.uleb128 0x10
 1332 02a0 A7010000 		.4byte	.LASF40
 1333 02a4 02       		.byte	0x2
 1334 02a5 10       		.uleb128 0x10
 1335 02a6 59000000 		.4byte	.LASF41
 1336 02aa 03       		.byte	0x3
 1337 02ab 00       		.byte	0
 1338 02ac 03       		.uleb128 0x3
 1339 02ad 85020000 		.4byte	.LASF42
 1340 02b1 07       		.byte	0x7
 1341 02b2 2F       		.byte	0x2f
 1342 02b3 87020000 		.4byte	0x287
 1343 02b7 0F       		.uleb128 0xf
 1344 02b8 01       		.byte	0x1
 1345 02b9 37000000 		.4byte	0x37
ARM GAS  /tmp/cctMPBvi.s 			page 47


 1346 02bd 07       		.byte	0x7
 1347 02be 35       		.byte	0x35
 1348 02bf D0020000 		.4byte	0x2d0
 1349 02c3 10       		.uleb128 0x10
 1350 02c4 21000000 		.4byte	.LASF43
 1351 02c8 00       		.byte	0
 1352 02c9 10       		.uleb128 0x10
 1353 02ca 75040000 		.4byte	.LASF44
 1354 02ce 01       		.byte	0x1
 1355 02cf 00       		.byte	0
 1356 02d0 03       		.uleb128 0x3
 1357 02d1 0A060000 		.4byte	.LASF45
 1358 02d5 07       		.byte	0x7
 1359 02d6 38       		.byte	0x38
 1360 02d7 B7020000 		.4byte	0x2b7
 1361 02db 0F       		.uleb128 0xf
 1362 02dc 01       		.byte	0x1
 1363 02dd 37000000 		.4byte	0x37
 1364 02e1 08       		.byte	0x8
 1365 02e2 4C       		.byte	0x4c
 1366 02e3 0C030000 		.4byte	0x30c
 1367 02e7 10       		.uleb128 0x10
 1368 02e8 7A050000 		.4byte	.LASF46
 1369 02ec 00       		.byte	0
 1370 02ed 10       		.uleb128 0x10
 1371 02ee 2E050000 		.4byte	.LASF47
 1372 02f2 01       		.byte	0x1
 1373 02f3 10       		.uleb128 0x10
 1374 02f4 B4030000 		.4byte	.LASF48
 1375 02f8 02       		.byte	0x2
 1376 02f9 10       		.uleb128 0x10
 1377 02fa 9C000000 		.4byte	.LASF49
 1378 02fe 03       		.byte	0x3
 1379 02ff 10       		.uleb128 0x10
 1380 0300 00000000 		.4byte	.LASF50
 1381 0304 04       		.byte	0x4
 1382 0305 10       		.uleb128 0x10
 1383 0306 32020000 		.4byte	.LASF51
 1384 030a 05       		.byte	0x5
 1385 030b 00       		.byte	0
 1386 030c 03       		.uleb128 0x3
 1387 030d 2E000000 		.4byte	.LASF52
 1388 0311 08       		.byte	0x8
 1389 0312 53       		.byte	0x53
 1390 0313 DB020000 		.4byte	0x2db
 1391 0317 06       		.uleb128 0x6
 1392 0318 0C030000 		.4byte	0x30c
 1393 031c 11       		.uleb128 0x11
 1394 031d 20       		.byte	0x20
 1395 031e 08       		.byte	0x8
 1396 031f 58       		.byte	0x58
 1397 0320 79030000 		.4byte	0x379
 1398 0324 12       		.uleb128 0x12
 1399 0325 D8020000 		.4byte	.LASF53
 1400 0329 08       		.byte	0x8
 1401 032a 5A       		.byte	0x5a
 1402 032b 17030000 		.4byte	0x317
ARM GAS  /tmp/cctMPBvi.s 			page 48


 1403 032f 02       		.byte	0x2
 1404 0330 23       		.byte	0x23
 1405 0331 00       		.uleb128 0
 1406 0332 12       		.uleb128 0x12
 1407 0333 FC050000 		.4byte	.LASF54
 1408 0337 08       		.byte	0x8
 1409 0338 5C       		.byte	0x5c
 1410 0339 DD000000 		.4byte	0xdd
 1411 033d 02       		.byte	0x2
 1412 033e 23       		.byte	0x23
 1413 033f 04       		.uleb128 0x4
 1414 0340 12       		.uleb128 0x12
 1415 0341 27010000 		.4byte	.LASF55
 1416 0345 08       		.byte	0x8
 1417 0346 5E       		.byte	0x5e
 1418 0347 DD000000 		.4byte	0xdd
 1419 034b 02       		.byte	0x2
 1420 034c 23       		.byte	0x23
 1421 034d 08       		.uleb128 0x8
 1422 034e 12       		.uleb128 0x12
 1423 034f 63020000 		.4byte	.LASF56
 1424 0353 08       		.byte	0x8
 1425 0354 60       		.byte	0x60
 1426 0355 ED000000 		.4byte	0xed
 1427 0359 02       		.byte	0x2
 1428 035a 23       		.byte	0x23
 1429 035b 10       		.uleb128 0x10
 1430 035c 12       		.uleb128 0x12
 1431 035d 2D020000 		.4byte	.LASF57
 1432 0361 08       		.byte	0x8
 1433 0362 62       		.byte	0x62
 1434 0363 D0020000 		.4byte	0x2d0
 1435 0367 02       		.byte	0x2
 1436 0368 23       		.byte	0x23
 1437 0369 18       		.uleb128 0x18
 1438 036a 12       		.uleb128 0x12
 1439 036b 1A060000 		.4byte	.LASF58
 1440 036f 08       		.byte	0x8
 1441 0370 64       		.byte	0x64
 1442 0371 DD000000 		.4byte	0xdd
 1443 0375 02       		.byte	0x2
 1444 0376 23       		.byte	0x23
 1445 0377 1C       		.uleb128 0x1c
 1446 0378 00       		.byte	0
 1447 0379 03       		.uleb128 0x3
 1448 037a 2B040000 		.4byte	.LASF59
 1449 037e 08       		.byte	0x8
 1450 037f 66       		.byte	0x66
 1451 0380 1C030000 		.4byte	0x31c
 1452 0384 11       		.uleb128 0x11
 1453 0385 10       		.byte	0x10
 1454 0386 09       		.byte	0x9
 1455 0387 AA       		.byte	0xaa
 1456 0388 C5030000 		.4byte	0x3c5
 1457 038c 12       		.uleb128 0x12
 1458 038d 59020000 		.4byte	.LASF60
 1459 0391 09       		.byte	0x9
ARM GAS  /tmp/cctMPBvi.s 			page 49


 1460 0392 AC       		.byte	0xac
 1461 0393 D2000000 		.4byte	0xd2
 1462 0397 02       		.byte	0x2
 1463 0398 23       		.byte	0x23
 1464 0399 00       		.uleb128 0
 1465 039a 12       		.uleb128 0x12
 1466 039b F3030000 		.4byte	.LASF61
 1467 039f 09       		.byte	0x9
 1468 03a0 AF       		.byte	0xaf
 1469 03a1 D2000000 		.4byte	0xd2
 1470 03a5 02       		.byte	0x2
 1471 03a6 23       		.byte	0x23
 1472 03a7 04       		.uleb128 0x4
 1473 03a8 12       		.uleb128 0x12
 1474 03a9 AA020000 		.4byte	.LASF62
 1475 03ad 09       		.byte	0x9
 1476 03ae B2       		.byte	0xb2
 1477 03af D2000000 		.4byte	0xd2
 1478 03b3 02       		.byte	0x2
 1479 03b4 23       		.byte	0x23
 1480 03b5 08       		.uleb128 0x8
 1481 03b6 12       		.uleb128 0x12
 1482 03b7 6C050000 		.4byte	.LASF63
 1483 03bb 09       		.byte	0x9
 1484 03bc B6       		.byte	0xb6
 1485 03bd D2000000 		.4byte	0xd2
 1486 03c1 02       		.byte	0x2
 1487 03c2 23       		.byte	0x23
 1488 03c3 0C       		.uleb128 0xc
 1489 03c4 00       		.byte	0
 1490 03c5 03       		.uleb128 0x3
 1491 03c6 4B060000 		.4byte	.LASF64
 1492 03ca 09       		.byte	0x9
 1493 03cb B9       		.byte	0xb9
 1494 03cc 84030000 		.4byte	0x384
 1495 03d0 11       		.uleb128 0x11
 1496 03d1 1C       		.byte	0x1c
 1497 03d2 09       		.byte	0x9
 1498 03d3 BE       		.byte	0xbe
 1499 03d4 49040000 		.4byte	0x449
 1500 03d8 12       		.uleb128 0x12
 1501 03d9 6B010000 		.4byte	.LASF65
 1502 03dd 09       		.byte	0x9
 1503 03de C0       		.byte	0xc0
 1504 03df D2000000 		.4byte	0xd2
 1505 03e3 02       		.byte	0x2
 1506 03e4 23       		.byte	0x23
 1507 03e5 00       		.uleb128 0
 1508 03e6 12       		.uleb128 0x12
 1509 03e7 56050000 		.4byte	.LASF66
 1510 03eb 09       		.byte	0x9
 1511 03ec C3       		.byte	0xc3
 1512 03ed D2000000 		.4byte	0xd2
 1513 03f1 02       		.byte	0x2
 1514 03f2 23       		.byte	0x23
 1515 03f3 04       		.uleb128 0x4
 1516 03f4 12       		.uleb128 0x12
ARM GAS  /tmp/cctMPBvi.s 			page 50


 1517 03f5 43050000 		.4byte	.LASF67
 1518 03f9 09       		.byte	0x9
 1519 03fa C6       		.byte	0xc6
 1520 03fb D2000000 		.4byte	0xd2
 1521 03ff 02       		.byte	0x2
 1522 0400 23       		.byte	0x23
 1523 0401 08       		.uleb128 0x8
 1524 0402 12       		.uleb128 0x12
 1525 0403 F3030000 		.4byte	.LASF61
 1526 0407 09       		.byte	0x9
 1527 0408 C9       		.byte	0xc9
 1528 0409 D2000000 		.4byte	0xd2
 1529 040d 02       		.byte	0x2
 1530 040e 23       		.byte	0x23
 1531 040f 0C       		.uleb128 0xc
 1532 0410 12       		.uleb128 0x12
 1533 0411 BA040000 		.4byte	.LASF68
 1534 0415 09       		.byte	0x9
 1535 0416 CC       		.byte	0xcc
 1536 0417 A2000000 		.4byte	0xa2
 1537 041b 02       		.byte	0x2
 1538 041c 23       		.byte	0x23
 1539 041d 10       		.uleb128 0x10
 1540 041e 12       		.uleb128 0x12
 1541 041f 0B040000 		.4byte	.LASF69
 1542 0423 09       		.byte	0x9
 1543 0424 D5       		.byte	0xd5
 1544 0425 A2000000 		.4byte	0xa2
 1545 0429 02       		.byte	0x2
 1546 042a 23       		.byte	0x23
 1547 042b 11       		.uleb128 0x11
 1548 042c 12       		.uleb128 0x12
 1549 042d DF010000 		.4byte	.LASF70
 1550 0431 09       		.byte	0x9
 1551 0432 DB       		.byte	0xdb
 1552 0433 D2000000 		.4byte	0xd2
 1553 0437 02       		.byte	0x2
 1554 0438 23       		.byte	0x23
 1555 0439 14       		.uleb128 0x14
 1556 043a 12       		.uleb128 0x12
 1557 043b C4010000 		.4byte	.LASF71
 1558 043f 09       		.byte	0x9
 1559 0440 DE       		.byte	0xde
 1560 0441 A2000000 		.4byte	0xa2
 1561 0445 02       		.byte	0x2
 1562 0446 23       		.byte	0x23
 1563 0447 18       		.uleb128 0x18
 1564 0448 00       		.byte	0
 1565 0449 03       		.uleb128 0x3
 1566 044a 65000000 		.4byte	.LASF72
 1567 044e 09       		.byte	0x9
 1568 044f E0       		.byte	0xe0
 1569 0450 D0030000 		.4byte	0x3d0
 1570 0454 0F       		.uleb128 0xf
 1571 0455 01       		.byte	0x1
 1572 0456 37000000 		.4byte	0x37
 1573 045a 0A       		.byte	0xa
ARM GAS  /tmp/cctMPBvi.s 			page 51


 1574 045b 33       		.byte	0x33
 1575 045c 79040000 		.4byte	0x479
 1576 0460 10       		.uleb128 0x10
 1577 0461 80000000 		.4byte	.LASF73
 1578 0465 64       		.byte	0x64
 1579 0466 10       		.uleb128 0x10
 1580 0467 56040000 		.4byte	.LASF74
 1581 046b 0A       		.byte	0xa
 1582 046c 10       		.uleb128 0x10
 1583 046d A1030000 		.4byte	.LASF75
 1584 0471 01       		.byte	0x1
 1585 0472 10       		.uleb128 0x10
 1586 0473 8A050000 		.4byte	.LASF76
 1587 0477 01       		.byte	0x1
 1588 0478 00       		.byte	0
 1589 0479 03       		.uleb128 0x3
 1590 047a 10020000 		.4byte	.LASF77
 1591 047e 0A       		.byte	0xa
 1592 047f 38       		.byte	0x38
 1593 0480 54040000 		.4byte	0x454
 1594 0484 08       		.uleb128 0x8
 1595 0485 3A010000 		.4byte	.LASF78
 1596 0489 0A       		.byte	0xa
 1597 048a 3D       		.byte	0x3d
 1598 048b D2000000 		.4byte	0xd2
 1599 048f 01       		.byte	0x1
 1600 0490 01       		.byte	0x1
 1601 0491 08       		.uleb128 0x8
 1602 0492 6E030000 		.4byte	.LASF79
 1603 0496 0A       		.byte	0xa
 1604 0497 3E       		.byte	0x3e
 1605 0498 79040000 		.4byte	0x479
 1606 049c 01       		.byte	0x1
 1607 049d 01       		.byte	0x1
 1608 049e 08       		.uleb128 0x8
 1609 049f 34060000 		.4byte	.LASF80
 1610 04a3 01       		.byte	0x1
 1611 04a4 39       		.byte	0x39
 1612 04a5 79030000 		.4byte	0x379
 1613 04a9 01       		.byte	0x1
 1614 04aa 01       		.byte	0x1
 1615 04ab 13       		.uleb128 0x13
 1616 04ac 01       		.byte	0x1
 1617 04ad 24060000 		.4byte	.LASF97
 1618 04b1 01       		.byte	0x1
 1619 04b2 4104     		.2byte	0x441
 1620 04b4 01       		.byte	0x1
 1621 04b5 58020000 		.4byte	.LFB80
 1622 04b9 7C020000 		.4byte	.LFE80
 1623 04bd 02       		.byte	0x2
 1624 04be 7D       		.byte	0x7d
 1625 04bf 00       		.sleb128 0
 1626 04c0 01       		.byte	0x1
 1627 04c1 D4040000 		.4byte	0x4d4
 1628 04c5 14       		.uleb128 0x14
 1629 04c6 AA020000 		.4byte	.LASF62
 1630 04ca 01       		.byte	0x1
ARM GAS  /tmp/cctMPBvi.s 			page 52


 1631 04cb 4104     		.2byte	0x441
 1632 04cd D2000000 		.4byte	0xd2
 1633 04d1 01       		.byte	0x1
 1634 04d2 50       		.byte	0x50
 1635 04d3 00       		.byte	0
 1636 04d4 15       		.uleb128 0x15
 1637 04d5 BB020000 		.4byte	.LASF83
 1638 04d9 01       		.byte	0x1
 1639 04da 2404     		.2byte	0x424
 1640 04dc 01       		.byte	0x1
 1641 04dd A2000000 		.4byte	0xa2
 1642 04e1 01       		.byte	0x1
 1643 04e2 16       		.uleb128 0x16
 1644 04e3 3B060000 		.4byte	.LASF85
 1645 04e7 01       		.byte	0x1
 1646 04e8 0A04     		.2byte	0x40a
 1647 04ea 01       		.byte	0x1
 1648 04eb D2000000 		.4byte	0xd2
 1649 04ef 01       		.byte	0x1
 1650 04f0 0D050000 		.4byte	0x50d
 1651 04f4 17       		.uleb128 0x17
 1652 04f5 5A030000 		.4byte	.LASF81
 1653 04f9 01       		.byte	0x1
 1654 04fa 0C04     		.2byte	0x40c
 1655 04fc D2000000 		.4byte	0xd2
 1656 0500 17       		.uleb128 0x17
 1657 0501 5F050000 		.4byte	.LASF82
 1658 0505 01       		.byte	0x1
 1659 0506 0D04     		.2byte	0x40d
 1660 0508 D2000000 		.4byte	0xd2
 1661 050c 00       		.byte	0
 1662 050d 15       		.uleb128 0x15
 1663 050e 01010000 		.4byte	.LASF84
 1664 0512 01       		.byte	0x1
 1665 0513 FD03     		.2byte	0x3fd
 1666 0515 01       		.byte	0x1
 1667 0516 D2000000 		.4byte	0xd2
 1668 051a 01       		.byte	0x1
 1669 051b 16       		.uleb128 0x16
 1670 051c 31030000 		.4byte	.LASF86
 1671 0520 01       		.byte	0x1
 1672 0521 DC03     		.2byte	0x3dc
 1673 0523 01       		.byte	0x1
 1674 0524 AC020000 		.4byte	0x2ac
 1675 0528 01       		.byte	0x1
 1676 0529 52050000 		.4byte	0x552
 1677 052d 18       		.uleb128 0x18
 1678 052e 27010000 		.4byte	.LASF55
 1679 0532 01       		.byte	0x1
 1680 0533 DC03     		.2byte	0x3dc
 1681 0535 D2000000 		.4byte	0xd2
 1682 0539 18       		.uleb128 0x18
 1683 053a 63020000 		.4byte	.LASF56
 1684 053e 01       		.byte	0x1
 1685 053f DC03     		.2byte	0x3dc
 1686 0541 A2000000 		.4byte	0xa2
 1687 0545 17       		.uleb128 0x17
ARM GAS  /tmp/cctMPBvi.s 			page 53


 1688 0546 EC030000 		.4byte	.LASF87
 1689 054a 01       		.byte	0x1
 1690 054b DE03     		.2byte	0x3de
 1691 054d AC020000 		.4byte	0x2ac
 1692 0551 00       		.byte	0
 1693 0552 16       		.uleb128 0x16
 1694 0553 4A010000 		.4byte	.LASF88
 1695 0557 01       		.byte	0x1
 1696 0558 A903     		.2byte	0x3a9
 1697 055a 01       		.byte	0x1
 1698 055b AC020000 		.4byte	0x2ac
 1699 055f 01       		.byte	0x1
 1700 0560 7D050000 		.4byte	0x57d
 1701 0564 18       		.uleb128 0x18
 1702 0565 F1050000 		.4byte	.LASF89
 1703 0569 01       		.byte	0x1
 1704 056a A903     		.2byte	0x3a9
 1705 056c A2000000 		.4byte	0xa2
 1706 0570 17       		.uleb128 0x17
 1707 0571 EC030000 		.4byte	.LASF87
 1708 0575 01       		.byte	0x1
 1709 0576 AB03     		.2byte	0x3ab
 1710 0578 AC020000 		.4byte	0x2ac
 1711 057c 00       		.byte	0
 1712 057d 16       		.uleb128 0x16
 1713 057e 62060000 		.4byte	.LASF90
 1714 0582 01       		.byte	0x1
 1715 0583 7603     		.2byte	0x376
 1716 0585 01       		.byte	0x1
 1717 0586 AC020000 		.4byte	0x2ac
 1718 058a 01       		.byte	0x1
 1719 058b A8050000 		.4byte	0x5a8
 1720 058f 18       		.uleb128 0x18
 1721 0590 8F010000 		.4byte	.LASF91
 1722 0594 01       		.byte	0x1
 1723 0595 7603     		.2byte	0x376
 1724 0597 A2000000 		.4byte	0xa2
 1725 059b 17       		.uleb128 0x17
 1726 059c EC030000 		.4byte	.LASF87
 1727 05a0 01       		.byte	0x1
 1728 05a1 7803     		.2byte	0x378
 1729 05a3 AC020000 		.4byte	0x2ac
 1730 05a7 00       		.byte	0
 1731 05a8 16       		.uleb128 0x16
 1732 05a9 45000000 		.4byte	.LASF92
 1733 05ad 01       		.byte	0x1
 1734 05ae FF02     		.2byte	0x2ff
 1735 05b0 01       		.byte	0x1
 1736 05b1 AC020000 		.4byte	0x2ac
 1737 05b5 01       		.byte	0x1
 1738 05b6 DF050000 		.4byte	0x5df
 1739 05ba 18       		.uleb128 0x18
 1740 05bb 76010000 		.4byte	.LASF93
 1741 05bf 01       		.byte	0x1
 1742 05c0 FF02     		.2byte	0x2ff
 1743 05c2 D2000000 		.4byte	0xd2
 1744 05c6 17       		.uleb128 0x17
ARM GAS  /tmp/cctMPBvi.s 			page 54


 1745 05c7 EC030000 		.4byte	.LASF87
 1746 05cb 01       		.byte	0x1
 1747 05cc 0103     		.2byte	0x301
 1748 05ce AC020000 		.4byte	0x2ac
 1749 05d2 17       		.uleb128 0x17
 1750 05d3 8F030000 		.4byte	.LASF94
 1751 05d7 01       		.byte	0x1
 1752 05d8 0203     		.2byte	0x302
 1753 05da B2000000 		.4byte	0xb2
 1754 05de 00       		.byte	0
 1755 05df 16       		.uleb128 0x16
 1756 05e0 97020000 		.4byte	.LASF95
 1757 05e4 01       		.byte	0x1
 1758 05e5 8402     		.2byte	0x284
 1759 05e7 01       		.byte	0x1
 1760 05e8 AC020000 		.4byte	0x2ac
 1761 05ec 01       		.byte	0x1
 1762 05ed 16060000 		.4byte	0x616
 1763 05f1 18       		.uleb128 0x18
 1764 05f2 76010000 		.4byte	.LASF93
 1765 05f6 01       		.byte	0x1
 1766 05f7 8402     		.2byte	0x284
 1767 05f9 D2000000 		.4byte	0xd2
 1768 05fd 17       		.uleb128 0x17
 1769 05fe EC030000 		.4byte	.LASF87
 1770 0602 01       		.byte	0x1
 1771 0603 8602     		.2byte	0x286
 1772 0605 AC020000 		.4byte	0x2ac
 1773 0609 17       		.uleb128 0x17
 1774 060a 8F030000 		.4byte	.LASF94
 1775 060e 01       		.byte	0x1
 1776 060f 8702     		.2byte	0x287
 1777 0611 B2000000 		.4byte	0xb2
 1778 0615 00       		.byte	0
 1779 0616 19       		.uleb128 0x19
 1780 0617 C9030000 		.4byte	.LASF113
 1781 061b 01       		.byte	0x1
 1782 061c 5302     		.2byte	0x253
 1783 061e 01       		.byte	0x1
 1784 061f 01       		.byte	0x1
 1785 0620 31060000 		.4byte	0x631
 1786 0624 18       		.uleb128 0x18
 1787 0625 F3030000 		.4byte	.LASF61
 1788 0629 01       		.byte	0x1
 1789 062a 5302     		.2byte	0x253
 1790 062c D2000000 		.4byte	0xd2
 1791 0630 00       		.byte	0
 1792 0631 1A       		.uleb128 0x1a
 1793 0632 01       		.byte	0x1
 1794 0633 80040000 		.4byte	.LASF100
 1795 0637 01       		.byte	0x1
 1796 0638 2502     		.2byte	0x225
 1797 063a 01       		.byte	0x1
 1798 063b D2000000 		.4byte	0xd2
 1799 063f 3C020000 		.4byte	.LFB70
 1800 0643 58020000 		.4byte	.LFE70
 1801 0647 02       		.byte	0x2
ARM GAS  /tmp/cctMPBvi.s 			page 55


 1802 0648 7D       		.byte	0x7d
 1803 0649 00       		.sleb128 0
 1804 064a 01       		.byte	0x1
 1805 064b 70060000 		.4byte	0x670
 1806 064f 1B       		.uleb128 0x1b
 1807 0650 11010000 		.4byte	.LASF96
 1808 0654 01       		.byte	0x1
 1809 0655 2502     		.2byte	0x225
 1810 0657 D2000000 		.4byte	0xd2
 1811 065b 00000000 		.4byte	.LLST25
 1812 065f 1C       		.uleb128 0x1c
 1813 0660 5E010000 		.4byte	.LASF102
 1814 0664 01       		.byte	0x1
 1815 0665 2702     		.2byte	0x227
 1816 0667 D2000000 		.4byte	0xd2
 1817 066b 21000000 		.4byte	.LLST26
 1818 066f 00       		.byte	0
 1819 0670 13       		.uleb128 0x13
 1820 0671 01       		.byte	0x1
 1821 0672 B7000000 		.4byte	.LASF98
 1822 0676 01       		.byte	0x1
 1823 0677 0F02     		.2byte	0x20f
 1824 0679 01       		.byte	0x1
 1825 067a 14020000 		.4byte	.LFB69
 1826 067e 3C020000 		.4byte	.LFE69
 1827 0682 02       		.byte	0x2
 1828 0683 7D       		.byte	0x7d
 1829 0684 00       		.sleb128 0
 1830 0685 01       		.byte	0x1
 1831 0686 EA060000 		.4byte	0x6ea
 1832 068a 14       		.uleb128 0x14
 1833 068b 99030000 		.4byte	.LASF99
 1834 068f 01       		.byte	0x1
 1835 0690 0F02     		.2byte	0x20f
 1836 0692 EA060000 		.4byte	0x6ea
 1837 0696 01       		.byte	0x1
 1838 0697 50       		.byte	0x50
 1839 0698 1D       		.uleb128 0x1d
 1840 0699 0D050000 		.4byte	0x50d
 1841 069d 18020000 		.4byte	.LBB54
 1842 06a1 1C020000 		.4byte	.LBE54
 1843 06a5 01       		.byte	0x1
 1844 06a6 1402     		.2byte	0x214
 1845 06a8 1E       		.uleb128 0x1e
 1846 06a9 E2040000 		.4byte	0x4e2
 1847 06ad 1E020000 		.4byte	.LBB56
 1848 06b1 2A020000 		.4byte	.LBE56
 1849 06b5 01       		.byte	0x1
 1850 06b6 1702     		.2byte	0x217
 1851 06b8 D9060000 		.4byte	0x6d9
 1852 06bc 1F       		.uleb128 0x1f
 1853 06bd 1E020000 		.4byte	.LBB57
 1854 06c1 2A020000 		.4byte	.LBE57
 1855 06c5 20       		.uleb128 0x20
 1856 06c6 F4040000 		.4byte	0x4f4
 1857 06ca 40000000 		.4byte	.LLST23
 1858 06ce 20       		.uleb128 0x20
ARM GAS  /tmp/cctMPBvi.s 			page 56


 1859 06cf 00050000 		.4byte	0x500
 1860 06d3 55000000 		.4byte	.LLST24
 1861 06d7 00       		.byte	0
 1862 06d8 00       		.byte	0
 1863 06d9 1D       		.uleb128 0x1d
 1864 06da D4040000 		.4byte	0x4d4
 1865 06de 2C020000 		.4byte	.LBB58
 1866 06e2 32020000 		.4byte	.LBE58
 1867 06e6 01       		.byte	0x1
 1868 06e7 1A02     		.2byte	0x21a
 1869 06e9 00       		.byte	0
 1870 06ea 21       		.uleb128 0x21
 1871 06eb 04       		.byte	0x4
 1872 06ec 49040000 		.4byte	0x449
 1873 06f0 22       		.uleb128 0x22
 1874 06f1 01       		.byte	0x1
 1875 06f2 18050000 		.4byte	.LASF101
 1876 06f6 01       		.byte	0x1
 1877 06f7 BE01     		.2byte	0x1be
 1878 06f9 01       		.byte	0x1
 1879 06fa AC020000 		.4byte	0x2ac
 1880 06fe DC000000 		.4byte	.LFB68
 1881 0702 14020000 		.4byte	.LFE68
 1882 0706 78000000 		.4byte	.LLST9
 1883 070a 01       		.byte	0x1
 1884 070b A9080000 		.4byte	0x8a9
 1885 070f 1B       		.uleb128 0x1b
 1886 0710 99030000 		.4byte	.LASF99
 1887 0714 01       		.byte	0x1
 1888 0715 BE01     		.2byte	0x1be
 1889 0717 EA060000 		.4byte	0x6ea
 1890 071b 98000000 		.4byte	.LLST10
 1891 071f 1C       		.uleb128 0x1c
 1892 0720 EC030000 		.4byte	.LASF87
 1893 0724 01       		.byte	0x1
 1894 0725 C001     		.2byte	0x1c0
 1895 0727 AC020000 		.4byte	0x2ac
 1896 072b 01010000 		.4byte	.LLST11
 1897 072f 23       		.uleb128 0x23
 1898 0730 DF050000 		.4byte	0x5df
 1899 0734 FE000000 		.4byte	.LBB30
 1900 0738 18000000 		.4byte	.Ldebug_ranges0+0x18
 1901 073c 01       		.byte	0x1
 1902 073d CF01     		.2byte	0x1cf
 1903 073f 93070000 		.4byte	0x793
 1904 0743 24       		.uleb128 0x24
 1905 0744 F1050000 		.4byte	0x5f1
 1906 0748 59010000 		.4byte	.LLST12
 1907 074c 25       		.uleb128 0x25
 1908 074d 18000000 		.4byte	.Ldebug_ranges0+0x18
 1909 0751 20       		.uleb128 0x20
 1910 0752 FD050000 		.4byte	0x5fd
 1911 0756 8E010000 		.4byte	.LLST13
 1912 075a 20       		.uleb128 0x20
 1913 075b 09060000 		.4byte	0x609
 1914 075f B8010000 		.4byte	.LLST14
 1915 0763 1D       		.uleb128 0x1d
ARM GAS  /tmp/cctMPBvi.s 			page 57


 1916 0764 0D050000 		.4byte	0x50d
 1917 0768 FE000000 		.4byte	.LBB32
 1918 076c 02010000 		.4byte	.LBE32
 1919 0770 01       		.byte	0x1
 1920 0771 9602     		.2byte	0x296
 1921 0773 26       		.uleb128 0x26
 1922 0774 0C010000 		.4byte	.LVL25
 1923 0778 1C0B0000 		.4byte	0xb1c
 1924 077c 88070000 		.4byte	0x788
 1925 0780 27       		.uleb128 0x27
 1926 0781 01       		.byte	0x1
 1927 0782 50       		.byte	0x50
 1928 0783 03       		.byte	0x3
 1929 0784 0A       		.byte	0xa
 1930 0785 50C3     		.2byte	0xc350
 1931 0787 00       		.byte	0
 1932 0788 28       		.uleb128 0x28
 1933 0789 14010000 		.4byte	.LVL26
 1934 078d A9080000 		.4byte	0x8a9
 1935 0791 00       		.byte	0
 1936 0792 00       		.byte	0
 1937 0793 23       		.uleb128 0x23
 1938 0794 A8050000 		.4byte	0x5a8
 1939 0798 30010000 		.4byte	.LBB36
 1940 079c 30000000 		.4byte	.Ldebug_ranges0+0x30
 1941 07a0 01       		.byte	0x1
 1942 07a1 D401     		.2byte	0x1d4
 1943 07a3 F0070000 		.4byte	0x7f0
 1944 07a7 24       		.uleb128 0x24
 1945 07a8 BA050000 		.4byte	0x5ba
 1946 07ac F5010000 		.4byte	.LLST15
 1947 07b0 25       		.uleb128 0x25
 1948 07b1 30000000 		.4byte	.Ldebug_ranges0+0x30
 1949 07b5 20       		.uleb128 0x20
 1950 07b6 C6050000 		.4byte	0x5c6
 1951 07ba 08020000 		.4byte	.LLST16
 1952 07be 20       		.uleb128 0x20
 1953 07bf D2050000 		.4byte	0x5d2
 1954 07c3 3D020000 		.4byte	.LLST17
 1955 07c7 26       		.uleb128 0x26
 1956 07c8 38010000 		.4byte	.LVL29
 1957 07cc 1C0B0000 		.4byte	0xb1c
 1958 07d0 DC070000 		.4byte	0x7dc
 1959 07d4 27       		.uleb128 0x27
 1960 07d5 01       		.byte	0x1
 1961 07d6 50       		.byte	0x50
 1962 07d7 03       		.byte	0x3
 1963 07d8 0A       		.byte	0xa
 1964 07d9 50C3     		.2byte	0xc350
 1965 07db 00       		.byte	0
 1966 07dc 28       		.uleb128 0x28
 1967 07dd 50010000 		.4byte	.LVL33
 1968 07e1 1C0B0000 		.4byte	0xb1c
 1969 07e5 28       		.uleb128 0x28
 1970 07e6 5A010000 		.4byte	.LVL34
 1971 07ea A9080000 		.4byte	0x8a9
 1972 07ee 00       		.byte	0
ARM GAS  /tmp/cctMPBvi.s 			page 58


 1973 07ef 00       		.byte	0
 1974 07f0 23       		.uleb128 0x23
 1975 07f1 52050000 		.4byte	0x552
 1976 07f5 92010000 		.4byte	.LBB40
 1977 07f9 48000000 		.4byte	.Ldebug_ranges0+0x48
 1978 07fd 01       		.byte	0x1
 1979 07fe ED01     		.2byte	0x1ed
 1980 0800 43080000 		.4byte	0x843
 1981 0804 24       		.uleb128 0x24
 1982 0805 64050000 		.4byte	0x564
 1983 0809 52020000 		.4byte	.LLST18
 1984 080d 25       		.uleb128 0x25
 1985 080e 48000000 		.4byte	.Ldebug_ranges0+0x48
 1986 0812 20       		.uleb128 0x20
 1987 0813 70050000 		.4byte	0x570
 1988 0817 65020000 		.4byte	.LLST19
 1989 081b 26       		.uleb128 0x26
 1990 081c 9C010000 		.4byte	.LVL41
 1991 0820 1C0B0000 		.4byte	0xb1c
 1992 0824 30080000 		.4byte	0x830
 1993 0828 27       		.uleb128 0x27
 1994 0829 01       		.byte	0x1
 1995 082a 50       		.byte	0x50
 1996 082b 03       		.byte	0x3
 1997 082c 0A       		.byte	0xa
 1998 082d 50C3     		.2byte	0xc350
 1999 082f 00       		.byte	0
 2000 0830 29       		.uleb128 0x29
 2001 0831 BC010000 		.4byte	.LVL44
 2002 0835 1C0B0000 		.4byte	0xb1c
 2003 0839 27       		.uleb128 0x27
 2004 083a 01       		.byte	0x1
 2005 083b 50       		.byte	0x50
 2006 083c 03       		.byte	0x3
 2007 083d 0A       		.byte	0xa
 2008 083e 50C3     		.2byte	0xc350
 2009 0840 00       		.byte	0
 2010 0841 00       		.byte	0
 2011 0842 00       		.byte	0
 2012 0843 23       		.uleb128 0x23
 2013 0844 1B050000 		.4byte	0x51b
 2014 0848 CE010000 		.4byte	.LBB44
 2015 084c 60000000 		.4byte	.Ldebug_ranges0+0x60
 2016 0850 01       		.byte	0x1
 2017 0851 F901     		.2byte	0x1f9
 2018 0853 9F080000 		.4byte	0x89f
 2019 0857 24       		.uleb128 0x24
 2020 0858 39050000 		.4byte	0x539
 2021 085c 8F020000 		.4byte	.LLST20
 2022 0860 24       		.uleb128 0x24
 2023 0861 2D050000 		.4byte	0x52d
 2024 0865 A2020000 		.4byte	.LLST21
 2025 0869 25       		.uleb128 0x25
 2026 086a 60000000 		.4byte	.Ldebug_ranges0+0x60
 2027 086e 20       		.uleb128 0x20
 2028 086f 45050000 		.4byte	0x545
 2029 0873 B5020000 		.4byte	.LLST22
ARM GAS  /tmp/cctMPBvi.s 			page 59


 2030 0877 26       		.uleb128 0x26
 2031 0878 DA010000 		.4byte	.LVL49
 2032 087c 1C0B0000 		.4byte	0xb1c
 2033 0880 8C080000 		.4byte	0x88c
 2034 0884 27       		.uleb128 0x27
 2035 0885 01       		.byte	0x1
 2036 0886 50       		.byte	0x50
 2037 0887 03       		.byte	0x3
 2038 0888 0A       		.byte	0xa
 2039 0889 50C3     		.2byte	0xc350
 2040 088b 00       		.byte	0
 2041 088c 29       		.uleb128 0x29
 2042 088d F6010000 		.4byte	.LVL53
 2043 0891 1C0B0000 		.4byte	0xb1c
 2044 0895 27       		.uleb128 0x27
 2045 0896 01       		.byte	0x1
 2046 0897 50       		.byte	0x50
 2047 0898 03       		.byte	0x3
 2048 0899 0A       		.byte	0xa
 2049 089a 50C3     		.2byte	0xc350
 2050 089c 00       		.byte	0
 2051 089d 00       		.byte	0
 2052 089e 00       		.byte	0
 2053 089f 28       		.uleb128 0x28
 2054 08a0 88010000 		.4byte	.LVL38
 2055 08a4 7D050000 		.4byte	0x57d
 2056 08a8 00       		.byte	0
 2057 08a9 22       		.uleb128 0x22
 2058 08aa 01       		.byte	0x1
 2059 08ab ED000000 		.4byte	.LASF103
 2060 08af 01       		.byte	0x1
 2061 08b0 8D01     		.2byte	0x18d
 2062 08b2 01       		.byte	0x1
 2063 08b3 AC020000 		.4byte	0x2ac
 2064 08b7 88000000 		.4byte	.LFB67
 2065 08bb DC000000 		.4byte	.LFE67
 2066 08bf DF020000 		.4byte	.LLST4
 2067 08c3 01       		.byte	0x1
 2068 08c4 4A090000 		.4byte	0x94a
 2069 08c8 1C       		.uleb128 0x1c
 2070 08c9 A0010000 		.4byte	.LASF104
 2071 08cd 01       		.byte	0x1
 2072 08ce 8F01     		.2byte	0x18f
 2073 08d0 A2000000 		.4byte	0xa2
 2074 08d4 17030000 		.4byte	.LLST5
 2075 08d8 1C       		.uleb128 0x1c
 2076 08d9 EC030000 		.4byte	.LASF87
 2077 08dd 01       		.byte	0x1
 2078 08de 9001     		.2byte	0x190
 2079 08e0 AC020000 		.4byte	0x2ac
 2080 08e4 4D030000 		.4byte	.LLST6
 2081 08e8 23       		.uleb128 0x23
 2082 08e9 E2040000 		.4byte	0x4e2
 2083 08ed 8A000000 		.4byte	.LBB14
 2084 08f1 00000000 		.4byte	.Ldebug_ranges0+0
 2085 08f5 01       		.byte	0x1
 2086 08f6 9301     		.2byte	0x193
ARM GAS  /tmp/cctMPBvi.s 			page 60


 2087 08f8 15090000 		.4byte	0x915
 2088 08fc 25       		.uleb128 0x25
 2089 08fd 00000000 		.4byte	.Ldebug_ranges0+0
 2090 0901 20       		.uleb128 0x20
 2091 0902 F4040000 		.4byte	0x4f4
 2092 0906 82030000 		.4byte	.LLST7
 2093 090a 20       		.uleb128 0x20
 2094 090b 00050000 		.4byte	0x500
 2095 090f 97030000 		.4byte	.LLST8
 2096 0913 00       		.byte	0
 2097 0914 00       		.byte	0
 2098 0915 26       		.uleb128 0x26
 2099 0916 A0000000 		.4byte	.LVL14
 2100 091a 1C0B0000 		.4byte	0xb1c
 2101 091e 2A090000 		.4byte	0x92a
 2102 0922 27       		.uleb128 0x27
 2103 0923 01       		.byte	0x1
 2104 0924 50       		.byte	0x50
 2105 0925 03       		.byte	0x3
 2106 0926 0A       		.byte	0xa
 2107 0927 50C3     		.2byte	0xc350
 2108 0929 00       		.byte	0
 2109 092a 26       		.uleb128 0x26
 2110 092b BE000000 		.4byte	.LVL16
 2111 092f 1C0B0000 		.4byte	0xb1c
 2112 0933 3F090000 		.4byte	0x93f
 2113 0937 27       		.uleb128 0x27
 2114 0938 01       		.byte	0x1
 2115 0939 50       		.byte	0x50
 2116 093a 03       		.byte	0x3
 2117 093b 0A       		.byte	0xa
 2118 093c 50C3     		.2byte	0xc350
 2119 093e 00       		.byte	0
 2120 093f 2A       		.uleb128 0x2a
 2121 0940 D0000000 		.4byte	.LVL19
 2122 0944 01       		.byte	0x1
 2123 0945 7D050000 		.4byte	0x57d
 2124 0949 00       		.byte	0
 2125 094a 22       		.uleb128 0x22
 2126 094b 01       		.byte	0x1
 2127 094c D8000000 		.4byte	.LASF105
 2128 0950 01       		.byte	0x1
 2129 0951 3F01     		.2byte	0x13f
 2130 0953 01       		.byte	0x1
 2131 0954 AC020000 		.4byte	0x2ac
 2132 0958 18030000 		.4byte	.LFB66
 2133 095c 68030000 		.4byte	.LFE66
 2134 0960 BA030000 		.4byte	.LLST32
 2135 0964 01       		.byte	0x1
 2136 0965 A0090000 		.4byte	0x9a0
 2137 0969 1B       		.uleb128 0x1b
 2138 096a 4B050000 		.4byte	.LASF106
 2139 096e 01       		.byte	0x1
 2140 096f 3F01     		.2byte	0x13f
 2141 0971 A0090000 		.4byte	0x9a0
 2142 0975 DA030000 		.4byte	.LLST33
 2143 0979 2B       		.uleb128 0x2b
ARM GAS  /tmp/cctMPBvi.s 			page 61


 2144 097a EC030000 		.4byte	.LASF87
 2145 097e 01       		.byte	0x1
 2146 097f 4101     		.2byte	0x141
 2147 0981 AC020000 		.4byte	0x2ac
 2148 0985 00       		.byte	0
 2149 0986 28       		.uleb128 0x28
 2150 0987 44030000 		.4byte	.LVL86
 2151 098b 740A0000 		.4byte	0xa74
 2152 098f 29       		.uleb128 0x29
 2153 0990 56030000 		.4byte	.LVL89
 2154 0994 AB040000 		.4byte	0x4ab
 2155 0998 27       		.uleb128 0x27
 2156 0999 01       		.byte	0x1
 2157 099a 50       		.byte	0x50
 2158 099b 02       		.byte	0x2
 2159 099c 70       		.byte	0x70
 2160 099d 00       		.sleb128 0
 2161 099e 00       		.byte	0
 2162 099f 00       		.byte	0
 2163 09a0 21       		.uleb128 0x21
 2164 09a1 04       		.byte	0x4
 2165 09a2 C5030000 		.4byte	0x3c5
 2166 09a6 2C       		.uleb128 0x2c
 2167 09a7 01       		.byte	0x1
 2168 09a8 A0050000 		.4byte	.LASF107
 2169 09ac 01       		.byte	0x1
 2170 09ad 9F       		.byte	0x9f
 2171 09ae 01       		.byte	0x1
 2172 09af AC020000 		.4byte	0x2ac
 2173 09b3 7C020000 		.4byte	.LFB65
 2174 09b7 18030000 		.4byte	.LFE65
 2175 09bb 46040000 		.4byte	.LLST27
 2176 09bf 01       		.byte	0x1
 2177 09c0 6E0A0000 		.4byte	0xa6e
 2178 09c4 2D       		.uleb128 0x2d
 2179 09c5 4B050000 		.4byte	.LASF106
 2180 09c9 01       		.byte	0x1
 2181 09ca 9F       		.byte	0x9f
 2182 09cb A0090000 		.4byte	0x9a0
 2183 09cf 66040000 		.4byte	.LLST28
 2184 09d3 2D       		.uleb128 0x2d
 2185 09d4 F9030000 		.4byte	.LASF108
 2186 09d8 01       		.byte	0x1
 2187 09d9 9F       		.byte	0x9f
 2188 09da 6E0A0000 		.4byte	0xa6e
 2189 09de A8040000 		.4byte	.LLST29
 2190 09e2 2E       		.uleb128 0x2e
 2191 09e3 EC030000 		.4byte	.LASF87
 2192 09e7 01       		.byte	0x1
 2193 09e8 A1       		.byte	0xa1
 2194 09e9 AC020000 		.4byte	0x2ac
 2195 09ed E7040000 		.4byte	.LLST30
 2196 09f1 2E       		.uleb128 0x2e
 2197 09f2 52030000 		.4byte	.LASF109
 2198 09f6 01       		.byte	0x1
 2199 09f7 A2       		.byte	0xa2
 2200 09f8 D2000000 		.4byte	0xd2
ARM GAS  /tmp/cctMPBvi.s 			page 62


 2201 09fc 40050000 		.4byte	.LLST31
 2202 0a00 26       		.uleb128 0x26
 2203 0a01 9E020000 		.4byte	.LVL70
 2204 0a05 1C0B0000 		.4byte	0xb1c
 2205 0a09 150A0000 		.4byte	0xa15
 2206 0a0d 27       		.uleb128 0x27
 2207 0a0e 01       		.byte	0x1
 2208 0a0f 50       		.byte	0x50
 2209 0a10 03       		.byte	0x3
 2210 0a11 0A       		.byte	0xa
 2211 0a12 50C3     		.2byte	0xc350
 2212 0a14 00       		.byte	0
 2213 0a15 26       		.uleb128 0x26
 2214 0a16 AE020000 		.4byte	.LVL73
 2215 0a1a 740A0000 		.4byte	0xa74
 2216 0a1e 2A0A0000 		.4byte	0xa2a
 2217 0a22 2F       		.uleb128 0x2f
 2218 0a23 24060000 		.4byte	0x624
 2219 0a27 01       		.byte	0x1
 2220 0a28 31       		.byte	0x31
 2221 0a29 00       		.byte	0
 2222 0a2a 26       		.uleb128 0x26
 2223 0a2b B6020000 		.4byte	.LVL74
 2224 0a2f 1C0B0000 		.4byte	0xb1c
 2225 0a33 3F0A0000 		.4byte	0xa3f
 2226 0a37 27       		.uleb128 0x27
 2227 0a38 01       		.byte	0x1
 2228 0a39 50       		.byte	0x50
 2229 0a3a 03       		.byte	0x3
 2230 0a3b 0A       		.byte	0xa
 2231 0a3c 50C3     		.2byte	0xc350
 2232 0a3e 00       		.byte	0
 2233 0a3f 28       		.uleb128 0x28
 2234 0a40 C6020000 		.4byte	.LVL76
 2235 0a44 1C0B0000 		.4byte	0xb1c
 2236 0a48 26       		.uleb128 0x26
 2237 0a49 EA020000 		.4byte	.LVL79
 2238 0a4d AB040000 		.4byte	0x4ab
 2239 0a51 5C0A0000 		.4byte	0xa5c
 2240 0a55 27       		.uleb128 0x27
 2241 0a56 01       		.byte	0x1
 2242 0a57 50       		.byte	0x50
 2243 0a58 02       		.byte	0x2
 2244 0a59 76       		.byte	0x76
 2245 0a5a 00       		.sleb128 0
 2246 0a5b 00       		.byte	0
 2247 0a5c 29       		.uleb128 0x29
 2248 0a5d F2020000 		.4byte	.LVL80
 2249 0a61 1C0B0000 		.4byte	0xb1c
 2250 0a65 27       		.uleb128 0x27
 2251 0a66 01       		.byte	0x1
 2252 0a67 50       		.byte	0x50
 2253 0a68 03       		.byte	0x3
 2254 0a69 0A       		.byte	0xa
 2255 0a6a 50C3     		.2byte	0xc350
 2256 0a6c 00       		.byte	0
 2257 0a6d 00       		.byte	0
ARM GAS  /tmp/cctMPBvi.s 			page 63


 2258 0a6e 21       		.uleb128 0x21
 2259 0a6f 04       		.byte	0x4
 2260 0a70 D2000000 		.4byte	0xd2
 2261 0a74 30       		.uleb128 0x30
 2262 0a75 16060000 		.4byte	0x616
 2263 0a79 00000000 		.4byte	.LFB81
 2264 0a7d 24000000 		.4byte	.LFE81
 2265 0a81 02       		.byte	0x2
 2266 0a82 7D       		.byte	0x7d
 2267 0a83 00       		.sleb128 0
 2268 0a84 01       		.byte	0x1
 2269 0a85 960A0000 		.4byte	0xa96
 2270 0a89 31       		.uleb128 0x31
 2271 0a8a 24060000 		.4byte	0x624
 2272 0a8e 06       		.byte	0x6
 2273 0a8f FA       		.byte	0xfa
 2274 0a90 24060000 		.4byte	0x624
 2275 0a94 9F       		.byte	0x9f
 2276 0a95 00       		.byte	0
 2277 0a96 32       		.uleb128 0x32
 2278 0a97 7D050000 		.4byte	0x57d
 2279 0a9b 24000000 		.4byte	.LFB74
 2280 0a9f 88000000 		.4byte	.LFE74
 2281 0aa3 77050000 		.4byte	.LLST0
 2282 0aa7 01       		.byte	0x1
 2283 0aa8 1C0B0000 		.4byte	0xb1c
 2284 0aac 24       		.uleb128 0x24
 2285 0aad 8F050000 		.4byte	0x58f
 2286 0ab1 97050000 		.4byte	.LLST1
 2287 0ab5 20       		.uleb128 0x20
 2288 0ab6 9B050000 		.4byte	0x59b
 2289 0aba B8050000 		.4byte	.LLST2
 2290 0abe 33       		.uleb128 0x33
 2291 0abf 5A000000 		.4byte	.LBB10
 2292 0ac3 78000000 		.4byte	.LBE10
 2293 0ac7 F50A0000 		.4byte	0xaf5
 2294 0acb 24       		.uleb128 0x24
 2295 0acc 8F050000 		.4byte	0x58f
 2296 0ad0 ED050000 		.4byte	.LLST3
 2297 0ad4 1F       		.uleb128 0x1f
 2298 0ad5 5A000000 		.4byte	.LBB11
 2299 0ad9 78000000 		.4byte	.LBE11
 2300 0add 34       		.uleb128 0x34
 2301 0ade B50A0000 		.4byte	0xab5
 2302 0ae2 29       		.uleb128 0x29
 2303 0ae3 70000000 		.4byte	.LVL9
 2304 0ae7 1C0B0000 		.4byte	0xb1c
 2305 0aeb 27       		.uleb128 0x27
 2306 0aec 01       		.byte	0x1
 2307 0aed 50       		.byte	0x50
 2308 0aee 03       		.byte	0x3
 2309 0aef 0A       		.byte	0xa
 2310 0af0 50C3     		.2byte	0xc350
 2311 0af2 00       		.byte	0
 2312 0af3 00       		.byte	0
 2313 0af4 00       		.byte	0
 2314 0af5 26       		.uleb128 0x26
ARM GAS  /tmp/cctMPBvi.s 			page 64


 2315 0af6 30000000 		.4byte	.LVL3
 2316 0afa 1C0B0000 		.4byte	0xb1c
 2317 0afe 0A0B0000 		.4byte	0xb0a
 2318 0b02 27       		.uleb128 0x27
 2319 0b03 01       		.byte	0x1
 2320 0b04 50       		.byte	0x50
 2321 0b05 03       		.byte	0x3
 2322 0b06 0A       		.byte	0xa
 2323 0b07 50C3     		.2byte	0xc350
 2324 0b09 00       		.byte	0
 2325 0b0a 29       		.uleb128 0x29
 2326 0b0b 50000000 		.4byte	.LVL5
 2327 0b0f 1C0B0000 		.4byte	0xb1c
 2328 0b13 27       		.uleb128 0x27
 2329 0b14 01       		.byte	0x1
 2330 0b15 50       		.byte	0x50
 2331 0b16 03       		.byte	0x3
 2332 0b17 0A       		.byte	0xa
 2333 0b18 50C3     		.2byte	0xc350
 2334 0b1a 00       		.byte	0
 2335 0b1b 00       		.byte	0
 2336 0b1c 35       		.uleb128 0x35
 2337 0b1d 01       		.byte	0x1
 2338 0b1e 01       		.byte	0x1
 2339 0b1f C9050000 		.4byte	.LASF114
 2340 0b23 C9050000 		.4byte	.LASF114
 2341 0b27 08       		.byte	0x8
 2342 0b28 3001     		.2byte	0x130
 2343 0b2a 00       		.byte	0
 2344              		.section	.debug_abbrev,"",%progbits
 2345              	.Ldebug_abbrev0:
 2346 0000 01       		.uleb128 0x1
 2347 0001 11       		.uleb128 0x11
 2348 0002 01       		.byte	0x1
 2349 0003 25       		.uleb128 0x25
 2350 0004 0E       		.uleb128 0xe
 2351 0005 13       		.uleb128 0x13
 2352 0006 0B       		.uleb128 0xb
 2353 0007 03       		.uleb128 0x3
 2354 0008 0E       		.uleb128 0xe
 2355 0009 1B       		.uleb128 0x1b
 2356 000a 0E       		.uleb128 0xe
 2357 000b 11       		.uleb128 0x11
 2358 000c 01       		.uleb128 0x1
 2359 000d 12       		.uleb128 0x12
 2360 000e 01       		.uleb128 0x1
 2361 000f 10       		.uleb128 0x10
 2362 0010 06       		.uleb128 0x6
 2363 0011 00       		.byte	0
 2364 0012 00       		.byte	0
 2365 0013 02       		.uleb128 0x2
 2366 0014 24       		.uleb128 0x24
 2367 0015 00       		.byte	0
 2368 0016 0B       		.uleb128 0xb
 2369 0017 0B       		.uleb128 0xb
 2370 0018 3E       		.uleb128 0x3e
 2371 0019 0B       		.uleb128 0xb
ARM GAS  /tmp/cctMPBvi.s 			page 65


 2372 001a 03       		.uleb128 0x3
 2373 001b 0E       		.uleb128 0xe
 2374 001c 00       		.byte	0
 2375 001d 00       		.byte	0
 2376 001e 03       		.uleb128 0x3
 2377 001f 16       		.uleb128 0x16
 2378 0020 00       		.byte	0
 2379 0021 03       		.uleb128 0x3
 2380 0022 0E       		.uleb128 0xe
 2381 0023 3A       		.uleb128 0x3a
 2382 0024 0B       		.uleb128 0xb
 2383 0025 3B       		.uleb128 0x3b
 2384 0026 0B       		.uleb128 0xb
 2385 0027 49       		.uleb128 0x49
 2386 0028 13       		.uleb128 0x13
 2387 0029 00       		.byte	0
 2388 002a 00       		.byte	0
 2389 002b 04       		.uleb128 0x4
 2390 002c 24       		.uleb128 0x24
 2391 002d 00       		.byte	0
 2392 002e 0B       		.uleb128 0xb
 2393 002f 0B       		.uleb128 0xb
 2394 0030 3E       		.uleb128 0x3e
 2395 0031 0B       		.uleb128 0xb
 2396 0032 03       		.uleb128 0x3
 2397 0033 08       		.uleb128 0x8
 2398 0034 00       		.byte	0
 2399 0035 00       		.byte	0
 2400 0036 05       		.uleb128 0x5
 2401 0037 26       		.uleb128 0x26
 2402 0038 00       		.byte	0
 2403 0039 49       		.uleb128 0x49
 2404 003a 13       		.uleb128 0x13
 2405 003b 00       		.byte	0
 2406 003c 00       		.byte	0
 2407 003d 06       		.uleb128 0x6
 2408 003e 35       		.uleb128 0x35
 2409 003f 00       		.byte	0
 2410 0040 49       		.uleb128 0x49
 2411 0041 13       		.uleb128 0x13
 2412 0042 00       		.byte	0
 2413 0043 00       		.byte	0
 2414 0044 07       		.uleb128 0x7
 2415 0045 34       		.uleb128 0x34
 2416 0046 00       		.byte	0
 2417 0047 03       		.uleb128 0x3
 2418 0048 0E       		.uleb128 0xe
 2419 0049 3A       		.uleb128 0x3a
 2420 004a 0B       		.uleb128 0xb
 2421 004b 3B       		.uleb128 0x3b
 2422 004c 05       		.uleb128 0x5
 2423 004d 49       		.uleb128 0x49
 2424 004e 13       		.uleb128 0x13
 2425 004f 3F       		.uleb128 0x3f
 2426 0050 0C       		.uleb128 0xc
 2427 0051 3C       		.uleb128 0x3c
 2428 0052 0C       		.uleb128 0xc
ARM GAS  /tmp/cctMPBvi.s 			page 66


 2429 0053 00       		.byte	0
 2430 0054 00       		.byte	0
 2431 0055 08       		.uleb128 0x8
 2432 0056 34       		.uleb128 0x34
 2433 0057 00       		.byte	0
 2434 0058 03       		.uleb128 0x3
 2435 0059 0E       		.uleb128 0xe
 2436 005a 3A       		.uleb128 0x3a
 2437 005b 0B       		.uleb128 0xb
 2438 005c 3B       		.uleb128 0x3b
 2439 005d 0B       		.uleb128 0xb
 2440 005e 49       		.uleb128 0x49
 2441 005f 13       		.uleb128 0x13
 2442 0060 3F       		.uleb128 0x3f
 2443 0061 0C       		.uleb128 0xc
 2444 0062 3C       		.uleb128 0x3c
 2445 0063 0C       		.uleb128 0xc
 2446 0064 00       		.byte	0
 2447 0065 00       		.byte	0
 2448 0066 09       		.uleb128 0x9
 2449 0067 01       		.uleb128 0x1
 2450 0068 01       		.byte	0x1
 2451 0069 49       		.uleb128 0x49
 2452 006a 13       		.uleb128 0x13
 2453 006b 01       		.uleb128 0x1
 2454 006c 13       		.uleb128 0x13
 2455 006d 00       		.byte	0
 2456 006e 00       		.byte	0
 2457 006f 0A       		.uleb128 0xa
 2458 0070 21       		.uleb128 0x21
 2459 0071 00       		.byte	0
 2460 0072 49       		.uleb128 0x49
 2461 0073 13       		.uleb128 0x13
 2462 0074 2F       		.uleb128 0x2f
 2463 0075 0B       		.uleb128 0xb
 2464 0076 00       		.byte	0
 2465 0077 00       		.byte	0
 2466 0078 0B       		.uleb128 0xb
 2467 0079 13       		.uleb128 0x13
 2468 007a 01       		.byte	0x1
 2469 007b 0B       		.uleb128 0xb
 2470 007c 0B       		.uleb128 0xb
 2471 007d 3A       		.uleb128 0x3a
 2472 007e 0B       		.uleb128 0xb
 2473 007f 3B       		.uleb128 0x3b
 2474 0080 05       		.uleb128 0x5
 2475 0081 01       		.uleb128 0x1
 2476 0082 13       		.uleb128 0x13
 2477 0083 00       		.byte	0
 2478 0084 00       		.byte	0
 2479 0085 0C       		.uleb128 0xc
 2480 0086 0D       		.uleb128 0xd
 2481 0087 00       		.byte	0
 2482 0088 03       		.uleb128 0x3
 2483 0089 08       		.uleb128 0x8
 2484 008a 3A       		.uleb128 0x3a
 2485 008b 0B       		.uleb128 0xb
ARM GAS  /tmp/cctMPBvi.s 			page 67


 2486 008c 3B       		.uleb128 0x3b
 2487 008d 05       		.uleb128 0x5
 2488 008e 49       		.uleb128 0x49
 2489 008f 13       		.uleb128 0x13
 2490 0090 38       		.uleb128 0x38
 2491 0091 0A       		.uleb128 0xa
 2492 0092 00       		.byte	0
 2493 0093 00       		.byte	0
 2494 0094 0D       		.uleb128 0xd
 2495 0095 0D       		.uleb128 0xd
 2496 0096 00       		.byte	0
 2497 0097 03       		.uleb128 0x3
 2498 0098 0E       		.uleb128 0xe
 2499 0099 3A       		.uleb128 0x3a
 2500 009a 0B       		.uleb128 0xb
 2501 009b 3B       		.uleb128 0x3b
 2502 009c 05       		.uleb128 0x5
 2503 009d 49       		.uleb128 0x49
 2504 009e 13       		.uleb128 0x13
 2505 009f 38       		.uleb128 0x38
 2506 00a0 0A       		.uleb128 0xa
 2507 00a1 00       		.byte	0
 2508 00a2 00       		.byte	0
 2509 00a3 0E       		.uleb128 0xe
 2510 00a4 16       		.uleb128 0x16
 2511 00a5 00       		.byte	0
 2512 00a6 03       		.uleb128 0x3
 2513 00a7 0E       		.uleb128 0xe
 2514 00a8 3A       		.uleb128 0x3a
 2515 00a9 0B       		.uleb128 0xb
 2516 00aa 3B       		.uleb128 0x3b
 2517 00ab 05       		.uleb128 0x5
 2518 00ac 49       		.uleb128 0x49
 2519 00ad 13       		.uleb128 0x13
 2520 00ae 00       		.byte	0
 2521 00af 00       		.byte	0
 2522 00b0 0F       		.uleb128 0xf
 2523 00b1 04       		.uleb128 0x4
 2524 00b2 01       		.byte	0x1
 2525 00b3 0B       		.uleb128 0xb
 2526 00b4 0B       		.uleb128 0xb
 2527 00b5 49       		.uleb128 0x49
 2528 00b6 13       		.uleb128 0x13
 2529 00b7 3A       		.uleb128 0x3a
 2530 00b8 0B       		.uleb128 0xb
 2531 00b9 3B       		.uleb128 0x3b
 2532 00ba 0B       		.uleb128 0xb
 2533 00bb 01       		.uleb128 0x1
 2534 00bc 13       		.uleb128 0x13
 2535 00bd 00       		.byte	0
 2536 00be 00       		.byte	0
 2537 00bf 10       		.uleb128 0x10
 2538 00c0 28       		.uleb128 0x28
 2539 00c1 00       		.byte	0
 2540 00c2 03       		.uleb128 0x3
 2541 00c3 0E       		.uleb128 0xe
 2542 00c4 1C       		.uleb128 0x1c
ARM GAS  /tmp/cctMPBvi.s 			page 68


 2543 00c5 0B       		.uleb128 0xb
 2544 00c6 00       		.byte	0
 2545 00c7 00       		.byte	0
 2546 00c8 11       		.uleb128 0x11
 2547 00c9 13       		.uleb128 0x13
 2548 00ca 01       		.byte	0x1
 2549 00cb 0B       		.uleb128 0xb
 2550 00cc 0B       		.uleb128 0xb
 2551 00cd 3A       		.uleb128 0x3a
 2552 00ce 0B       		.uleb128 0xb
 2553 00cf 3B       		.uleb128 0x3b
 2554 00d0 0B       		.uleb128 0xb
 2555 00d1 01       		.uleb128 0x1
 2556 00d2 13       		.uleb128 0x13
 2557 00d3 00       		.byte	0
 2558 00d4 00       		.byte	0
 2559 00d5 12       		.uleb128 0x12
 2560 00d6 0D       		.uleb128 0xd
 2561 00d7 00       		.byte	0
 2562 00d8 03       		.uleb128 0x3
 2563 00d9 0E       		.uleb128 0xe
 2564 00da 3A       		.uleb128 0x3a
 2565 00db 0B       		.uleb128 0xb
 2566 00dc 3B       		.uleb128 0x3b
 2567 00dd 0B       		.uleb128 0xb
 2568 00de 49       		.uleb128 0x49
 2569 00df 13       		.uleb128 0x13
 2570 00e0 38       		.uleb128 0x38
 2571 00e1 0A       		.uleb128 0xa
 2572 00e2 00       		.byte	0
 2573 00e3 00       		.byte	0
 2574 00e4 13       		.uleb128 0x13
 2575 00e5 2E       		.uleb128 0x2e
 2576 00e6 01       		.byte	0x1
 2577 00e7 3F       		.uleb128 0x3f
 2578 00e8 0C       		.uleb128 0xc
 2579 00e9 03       		.uleb128 0x3
 2580 00ea 0E       		.uleb128 0xe
 2581 00eb 3A       		.uleb128 0x3a
 2582 00ec 0B       		.uleb128 0xb
 2583 00ed 3B       		.uleb128 0x3b
 2584 00ee 05       		.uleb128 0x5
 2585 00ef 27       		.uleb128 0x27
 2586 00f0 0C       		.uleb128 0xc
 2587 00f1 11       		.uleb128 0x11
 2588 00f2 01       		.uleb128 0x1
 2589 00f3 12       		.uleb128 0x12
 2590 00f4 01       		.uleb128 0x1
 2591 00f5 40       		.uleb128 0x40
 2592 00f6 0A       		.uleb128 0xa
 2593 00f7 9742     		.uleb128 0x2117
 2594 00f9 0C       		.uleb128 0xc
 2595 00fa 01       		.uleb128 0x1
 2596 00fb 13       		.uleb128 0x13
 2597 00fc 00       		.byte	0
 2598 00fd 00       		.byte	0
 2599 00fe 14       		.uleb128 0x14
ARM GAS  /tmp/cctMPBvi.s 			page 69


 2600 00ff 05       		.uleb128 0x5
 2601 0100 00       		.byte	0
 2602 0101 03       		.uleb128 0x3
 2603 0102 0E       		.uleb128 0xe
 2604 0103 3A       		.uleb128 0x3a
 2605 0104 0B       		.uleb128 0xb
 2606 0105 3B       		.uleb128 0x3b
 2607 0106 05       		.uleb128 0x5
 2608 0107 49       		.uleb128 0x49
 2609 0108 13       		.uleb128 0x13
 2610 0109 02       		.uleb128 0x2
 2611 010a 0A       		.uleb128 0xa
 2612 010b 00       		.byte	0
 2613 010c 00       		.byte	0
 2614 010d 15       		.uleb128 0x15
 2615 010e 2E       		.uleb128 0x2e
 2616 010f 00       		.byte	0
 2617 0110 03       		.uleb128 0x3
 2618 0111 0E       		.uleb128 0xe
 2619 0112 3A       		.uleb128 0x3a
 2620 0113 0B       		.uleb128 0xb
 2621 0114 3B       		.uleb128 0x3b
 2622 0115 05       		.uleb128 0x5
 2623 0116 27       		.uleb128 0x27
 2624 0117 0C       		.uleb128 0xc
 2625 0118 49       		.uleb128 0x49
 2626 0119 13       		.uleb128 0x13
 2627 011a 20       		.uleb128 0x20
 2628 011b 0B       		.uleb128 0xb
 2629 011c 00       		.byte	0
 2630 011d 00       		.byte	0
 2631 011e 16       		.uleb128 0x16
 2632 011f 2E       		.uleb128 0x2e
 2633 0120 01       		.byte	0x1
 2634 0121 03       		.uleb128 0x3
 2635 0122 0E       		.uleb128 0xe
 2636 0123 3A       		.uleb128 0x3a
 2637 0124 0B       		.uleb128 0xb
 2638 0125 3B       		.uleb128 0x3b
 2639 0126 05       		.uleb128 0x5
 2640 0127 27       		.uleb128 0x27
 2641 0128 0C       		.uleb128 0xc
 2642 0129 49       		.uleb128 0x49
 2643 012a 13       		.uleb128 0x13
 2644 012b 20       		.uleb128 0x20
 2645 012c 0B       		.uleb128 0xb
 2646 012d 01       		.uleb128 0x1
 2647 012e 13       		.uleb128 0x13
 2648 012f 00       		.byte	0
 2649 0130 00       		.byte	0
 2650 0131 17       		.uleb128 0x17
 2651 0132 34       		.uleb128 0x34
 2652 0133 00       		.byte	0
 2653 0134 03       		.uleb128 0x3
 2654 0135 0E       		.uleb128 0xe
 2655 0136 3A       		.uleb128 0x3a
 2656 0137 0B       		.uleb128 0xb
ARM GAS  /tmp/cctMPBvi.s 			page 70


 2657 0138 3B       		.uleb128 0x3b
 2658 0139 05       		.uleb128 0x5
 2659 013a 49       		.uleb128 0x49
 2660 013b 13       		.uleb128 0x13
 2661 013c 00       		.byte	0
 2662 013d 00       		.byte	0
 2663 013e 18       		.uleb128 0x18
 2664 013f 05       		.uleb128 0x5
 2665 0140 00       		.byte	0
 2666 0141 03       		.uleb128 0x3
 2667 0142 0E       		.uleb128 0xe
 2668 0143 3A       		.uleb128 0x3a
 2669 0144 0B       		.uleb128 0xb
 2670 0145 3B       		.uleb128 0x3b
 2671 0146 05       		.uleb128 0x5
 2672 0147 49       		.uleb128 0x49
 2673 0148 13       		.uleb128 0x13
 2674 0149 00       		.byte	0
 2675 014a 00       		.byte	0
 2676 014b 19       		.uleb128 0x19
 2677 014c 2E       		.uleb128 0x2e
 2678 014d 01       		.byte	0x1
 2679 014e 03       		.uleb128 0x3
 2680 014f 0E       		.uleb128 0xe
 2681 0150 3A       		.uleb128 0x3a
 2682 0151 0B       		.uleb128 0xb
 2683 0152 3B       		.uleb128 0x3b
 2684 0153 05       		.uleb128 0x5
 2685 0154 27       		.uleb128 0x27
 2686 0155 0C       		.uleb128 0xc
 2687 0156 20       		.uleb128 0x20
 2688 0157 0B       		.uleb128 0xb
 2689 0158 01       		.uleb128 0x1
 2690 0159 13       		.uleb128 0x13
 2691 015a 00       		.byte	0
 2692 015b 00       		.byte	0
 2693 015c 1A       		.uleb128 0x1a
 2694 015d 2E       		.uleb128 0x2e
 2695 015e 01       		.byte	0x1
 2696 015f 3F       		.uleb128 0x3f
 2697 0160 0C       		.uleb128 0xc
 2698 0161 03       		.uleb128 0x3
 2699 0162 0E       		.uleb128 0xe
 2700 0163 3A       		.uleb128 0x3a
 2701 0164 0B       		.uleb128 0xb
 2702 0165 3B       		.uleb128 0x3b
 2703 0166 05       		.uleb128 0x5
 2704 0167 27       		.uleb128 0x27
 2705 0168 0C       		.uleb128 0xc
 2706 0169 49       		.uleb128 0x49
 2707 016a 13       		.uleb128 0x13
 2708 016b 11       		.uleb128 0x11
 2709 016c 01       		.uleb128 0x1
 2710 016d 12       		.uleb128 0x12
 2711 016e 01       		.uleb128 0x1
 2712 016f 40       		.uleb128 0x40
 2713 0170 0A       		.uleb128 0xa
ARM GAS  /tmp/cctMPBvi.s 			page 71


 2714 0171 9742     		.uleb128 0x2117
 2715 0173 0C       		.uleb128 0xc
 2716 0174 01       		.uleb128 0x1
 2717 0175 13       		.uleb128 0x13
 2718 0176 00       		.byte	0
 2719 0177 00       		.byte	0
 2720 0178 1B       		.uleb128 0x1b
 2721 0179 05       		.uleb128 0x5
 2722 017a 00       		.byte	0
 2723 017b 03       		.uleb128 0x3
 2724 017c 0E       		.uleb128 0xe
 2725 017d 3A       		.uleb128 0x3a
 2726 017e 0B       		.uleb128 0xb
 2727 017f 3B       		.uleb128 0x3b
 2728 0180 05       		.uleb128 0x5
 2729 0181 49       		.uleb128 0x49
 2730 0182 13       		.uleb128 0x13
 2731 0183 02       		.uleb128 0x2
 2732 0184 06       		.uleb128 0x6
 2733 0185 00       		.byte	0
 2734 0186 00       		.byte	0
 2735 0187 1C       		.uleb128 0x1c
 2736 0188 34       		.uleb128 0x34
 2737 0189 00       		.byte	0
 2738 018a 03       		.uleb128 0x3
 2739 018b 0E       		.uleb128 0xe
 2740 018c 3A       		.uleb128 0x3a
 2741 018d 0B       		.uleb128 0xb
 2742 018e 3B       		.uleb128 0x3b
 2743 018f 05       		.uleb128 0x5
 2744 0190 49       		.uleb128 0x49
 2745 0191 13       		.uleb128 0x13
 2746 0192 02       		.uleb128 0x2
 2747 0193 06       		.uleb128 0x6
 2748 0194 00       		.byte	0
 2749 0195 00       		.byte	0
 2750 0196 1D       		.uleb128 0x1d
 2751 0197 1D       		.uleb128 0x1d
 2752 0198 00       		.byte	0
 2753 0199 31       		.uleb128 0x31
 2754 019a 13       		.uleb128 0x13
 2755 019b 11       		.uleb128 0x11
 2756 019c 01       		.uleb128 0x1
 2757 019d 12       		.uleb128 0x12
 2758 019e 01       		.uleb128 0x1
 2759 019f 58       		.uleb128 0x58
 2760 01a0 0B       		.uleb128 0xb
 2761 01a1 59       		.uleb128 0x59
 2762 01a2 05       		.uleb128 0x5
 2763 01a3 00       		.byte	0
 2764 01a4 00       		.byte	0
 2765 01a5 1E       		.uleb128 0x1e
 2766 01a6 1D       		.uleb128 0x1d
 2767 01a7 01       		.byte	0x1
 2768 01a8 31       		.uleb128 0x31
 2769 01a9 13       		.uleb128 0x13
 2770 01aa 11       		.uleb128 0x11
ARM GAS  /tmp/cctMPBvi.s 			page 72


 2771 01ab 01       		.uleb128 0x1
 2772 01ac 12       		.uleb128 0x12
 2773 01ad 01       		.uleb128 0x1
 2774 01ae 58       		.uleb128 0x58
 2775 01af 0B       		.uleb128 0xb
 2776 01b0 59       		.uleb128 0x59
 2777 01b1 05       		.uleb128 0x5
 2778 01b2 01       		.uleb128 0x1
 2779 01b3 13       		.uleb128 0x13
 2780 01b4 00       		.byte	0
 2781 01b5 00       		.byte	0
 2782 01b6 1F       		.uleb128 0x1f
 2783 01b7 0B       		.uleb128 0xb
 2784 01b8 01       		.byte	0x1
 2785 01b9 11       		.uleb128 0x11
 2786 01ba 01       		.uleb128 0x1
 2787 01bb 12       		.uleb128 0x12
 2788 01bc 01       		.uleb128 0x1
 2789 01bd 00       		.byte	0
 2790 01be 00       		.byte	0
 2791 01bf 20       		.uleb128 0x20
 2792 01c0 34       		.uleb128 0x34
 2793 01c1 00       		.byte	0
 2794 01c2 31       		.uleb128 0x31
 2795 01c3 13       		.uleb128 0x13
 2796 01c4 02       		.uleb128 0x2
 2797 01c5 06       		.uleb128 0x6
 2798 01c6 00       		.byte	0
 2799 01c7 00       		.byte	0
 2800 01c8 21       		.uleb128 0x21
 2801 01c9 0F       		.uleb128 0xf
 2802 01ca 00       		.byte	0
 2803 01cb 0B       		.uleb128 0xb
 2804 01cc 0B       		.uleb128 0xb
 2805 01cd 49       		.uleb128 0x49
 2806 01ce 13       		.uleb128 0x13
 2807 01cf 00       		.byte	0
 2808 01d0 00       		.byte	0
 2809 01d1 22       		.uleb128 0x22
 2810 01d2 2E       		.uleb128 0x2e
 2811 01d3 01       		.byte	0x1
 2812 01d4 3F       		.uleb128 0x3f
 2813 01d5 0C       		.uleb128 0xc
 2814 01d6 03       		.uleb128 0x3
 2815 01d7 0E       		.uleb128 0xe
 2816 01d8 3A       		.uleb128 0x3a
 2817 01d9 0B       		.uleb128 0xb
 2818 01da 3B       		.uleb128 0x3b
 2819 01db 05       		.uleb128 0x5
 2820 01dc 27       		.uleb128 0x27
 2821 01dd 0C       		.uleb128 0xc
 2822 01de 49       		.uleb128 0x49
 2823 01df 13       		.uleb128 0x13
 2824 01e0 11       		.uleb128 0x11
 2825 01e1 01       		.uleb128 0x1
 2826 01e2 12       		.uleb128 0x12
 2827 01e3 01       		.uleb128 0x1
ARM GAS  /tmp/cctMPBvi.s 			page 73


 2828 01e4 40       		.uleb128 0x40
 2829 01e5 06       		.uleb128 0x6
 2830 01e6 9742     		.uleb128 0x2117
 2831 01e8 0C       		.uleb128 0xc
 2832 01e9 01       		.uleb128 0x1
 2833 01ea 13       		.uleb128 0x13
 2834 01eb 00       		.byte	0
 2835 01ec 00       		.byte	0
 2836 01ed 23       		.uleb128 0x23
 2837 01ee 1D       		.uleb128 0x1d
 2838 01ef 01       		.byte	0x1
 2839 01f0 31       		.uleb128 0x31
 2840 01f1 13       		.uleb128 0x13
 2841 01f2 52       		.uleb128 0x52
 2842 01f3 01       		.uleb128 0x1
 2843 01f4 55       		.uleb128 0x55
 2844 01f5 06       		.uleb128 0x6
 2845 01f6 58       		.uleb128 0x58
 2846 01f7 0B       		.uleb128 0xb
 2847 01f8 59       		.uleb128 0x59
 2848 01f9 05       		.uleb128 0x5
 2849 01fa 01       		.uleb128 0x1
 2850 01fb 13       		.uleb128 0x13
 2851 01fc 00       		.byte	0
 2852 01fd 00       		.byte	0
 2853 01fe 24       		.uleb128 0x24
 2854 01ff 05       		.uleb128 0x5
 2855 0200 00       		.byte	0
 2856 0201 31       		.uleb128 0x31
 2857 0202 13       		.uleb128 0x13
 2858 0203 02       		.uleb128 0x2
 2859 0204 06       		.uleb128 0x6
 2860 0205 00       		.byte	0
 2861 0206 00       		.byte	0
 2862 0207 25       		.uleb128 0x25
 2863 0208 0B       		.uleb128 0xb
 2864 0209 01       		.byte	0x1
 2865 020a 55       		.uleb128 0x55
 2866 020b 06       		.uleb128 0x6
 2867 020c 00       		.byte	0
 2868 020d 00       		.byte	0
 2869 020e 26       		.uleb128 0x26
 2870 020f 898201   		.uleb128 0x4109
 2871 0212 01       		.byte	0x1
 2872 0213 11       		.uleb128 0x11
 2873 0214 01       		.uleb128 0x1
 2874 0215 31       		.uleb128 0x31
 2875 0216 13       		.uleb128 0x13
 2876 0217 01       		.uleb128 0x1
 2877 0218 13       		.uleb128 0x13
 2878 0219 00       		.byte	0
 2879 021a 00       		.byte	0
 2880 021b 27       		.uleb128 0x27
 2881 021c 8A8201   		.uleb128 0x410a
 2882 021f 00       		.byte	0
 2883 0220 02       		.uleb128 0x2
 2884 0221 0A       		.uleb128 0xa
ARM GAS  /tmp/cctMPBvi.s 			page 74


 2885 0222 9142     		.uleb128 0x2111
 2886 0224 0A       		.uleb128 0xa
 2887 0225 00       		.byte	0
 2888 0226 00       		.byte	0
 2889 0227 28       		.uleb128 0x28
 2890 0228 898201   		.uleb128 0x4109
 2891 022b 00       		.byte	0
 2892 022c 11       		.uleb128 0x11
 2893 022d 01       		.uleb128 0x1
 2894 022e 31       		.uleb128 0x31
 2895 022f 13       		.uleb128 0x13
 2896 0230 00       		.byte	0
 2897 0231 00       		.byte	0
 2898 0232 29       		.uleb128 0x29
 2899 0233 898201   		.uleb128 0x4109
 2900 0236 01       		.byte	0x1
 2901 0237 11       		.uleb128 0x11
 2902 0238 01       		.uleb128 0x1
 2903 0239 31       		.uleb128 0x31
 2904 023a 13       		.uleb128 0x13
 2905 023b 00       		.byte	0
 2906 023c 00       		.byte	0
 2907 023d 2A       		.uleb128 0x2a
 2908 023e 898201   		.uleb128 0x4109
 2909 0241 00       		.byte	0
 2910 0242 11       		.uleb128 0x11
 2911 0243 01       		.uleb128 0x1
 2912 0244 9542     		.uleb128 0x2115
 2913 0246 0C       		.uleb128 0xc
 2914 0247 31       		.uleb128 0x31
 2915 0248 13       		.uleb128 0x13
 2916 0249 00       		.byte	0
 2917 024a 00       		.byte	0
 2918 024b 2B       		.uleb128 0x2b
 2919 024c 34       		.uleb128 0x34
 2920 024d 00       		.byte	0
 2921 024e 03       		.uleb128 0x3
 2922 024f 0E       		.uleb128 0xe
 2923 0250 3A       		.uleb128 0x3a
 2924 0251 0B       		.uleb128 0xb
 2925 0252 3B       		.uleb128 0x3b
 2926 0253 05       		.uleb128 0x5
 2927 0254 49       		.uleb128 0x49
 2928 0255 13       		.uleb128 0x13
 2929 0256 1C       		.uleb128 0x1c
 2930 0257 0B       		.uleb128 0xb
 2931 0258 00       		.byte	0
 2932 0259 00       		.byte	0
 2933 025a 2C       		.uleb128 0x2c
 2934 025b 2E       		.uleb128 0x2e
 2935 025c 01       		.byte	0x1
 2936 025d 3F       		.uleb128 0x3f
 2937 025e 0C       		.uleb128 0xc
 2938 025f 03       		.uleb128 0x3
 2939 0260 0E       		.uleb128 0xe
 2940 0261 3A       		.uleb128 0x3a
 2941 0262 0B       		.uleb128 0xb
ARM GAS  /tmp/cctMPBvi.s 			page 75


 2942 0263 3B       		.uleb128 0x3b
 2943 0264 0B       		.uleb128 0xb
 2944 0265 27       		.uleb128 0x27
 2945 0266 0C       		.uleb128 0xc
 2946 0267 49       		.uleb128 0x49
 2947 0268 13       		.uleb128 0x13
 2948 0269 11       		.uleb128 0x11
 2949 026a 01       		.uleb128 0x1
 2950 026b 12       		.uleb128 0x12
 2951 026c 01       		.uleb128 0x1
 2952 026d 40       		.uleb128 0x40
 2953 026e 06       		.uleb128 0x6
 2954 026f 9742     		.uleb128 0x2117
 2955 0271 0C       		.uleb128 0xc
 2956 0272 01       		.uleb128 0x1
 2957 0273 13       		.uleb128 0x13
 2958 0274 00       		.byte	0
 2959 0275 00       		.byte	0
 2960 0276 2D       		.uleb128 0x2d
 2961 0277 05       		.uleb128 0x5
 2962 0278 00       		.byte	0
 2963 0279 03       		.uleb128 0x3
 2964 027a 0E       		.uleb128 0xe
 2965 027b 3A       		.uleb128 0x3a
 2966 027c 0B       		.uleb128 0xb
 2967 027d 3B       		.uleb128 0x3b
 2968 027e 0B       		.uleb128 0xb
 2969 027f 49       		.uleb128 0x49
 2970 0280 13       		.uleb128 0x13
 2971 0281 02       		.uleb128 0x2
 2972 0282 06       		.uleb128 0x6
 2973 0283 00       		.byte	0
 2974 0284 00       		.byte	0
 2975 0285 2E       		.uleb128 0x2e
 2976 0286 34       		.uleb128 0x34
 2977 0287 00       		.byte	0
 2978 0288 03       		.uleb128 0x3
 2979 0289 0E       		.uleb128 0xe
 2980 028a 3A       		.uleb128 0x3a
 2981 028b 0B       		.uleb128 0xb
 2982 028c 3B       		.uleb128 0x3b
 2983 028d 0B       		.uleb128 0xb
 2984 028e 49       		.uleb128 0x49
 2985 028f 13       		.uleb128 0x13
 2986 0290 02       		.uleb128 0x2
 2987 0291 06       		.uleb128 0x6
 2988 0292 00       		.byte	0
 2989 0293 00       		.byte	0
 2990 0294 2F       		.uleb128 0x2f
 2991 0295 8A8201   		.uleb128 0x410a
 2992 0298 00       		.byte	0
 2993 0299 31       		.uleb128 0x31
 2994 029a 13       		.uleb128 0x13
 2995 029b 9142     		.uleb128 0x2111
 2996 029d 0A       		.uleb128 0xa
 2997 029e 00       		.byte	0
 2998 029f 00       		.byte	0
ARM GAS  /tmp/cctMPBvi.s 			page 76


 2999 02a0 30       		.uleb128 0x30
 3000 02a1 2E       		.uleb128 0x2e
 3001 02a2 01       		.byte	0x1
 3002 02a3 31       		.uleb128 0x31
 3003 02a4 13       		.uleb128 0x13
 3004 02a5 11       		.uleb128 0x11
 3005 02a6 01       		.uleb128 0x1
 3006 02a7 12       		.uleb128 0x12
 3007 02a8 01       		.uleb128 0x1
 3008 02a9 40       		.uleb128 0x40
 3009 02aa 0A       		.uleb128 0xa
 3010 02ab 9742     		.uleb128 0x2117
 3011 02ad 0C       		.uleb128 0xc
 3012 02ae 01       		.uleb128 0x1
 3013 02af 13       		.uleb128 0x13
 3014 02b0 00       		.byte	0
 3015 02b1 00       		.byte	0
 3016 02b2 31       		.uleb128 0x31
 3017 02b3 05       		.uleb128 0x5
 3018 02b4 00       		.byte	0
 3019 02b5 31       		.uleb128 0x31
 3020 02b6 13       		.uleb128 0x13
 3021 02b7 02       		.uleb128 0x2
 3022 02b8 0A       		.uleb128 0xa
 3023 02b9 00       		.byte	0
 3024 02ba 00       		.byte	0
 3025 02bb 32       		.uleb128 0x32
 3026 02bc 2E       		.uleb128 0x2e
 3027 02bd 01       		.byte	0x1
 3028 02be 31       		.uleb128 0x31
 3029 02bf 13       		.uleb128 0x13
 3030 02c0 11       		.uleb128 0x11
 3031 02c1 01       		.uleb128 0x1
 3032 02c2 12       		.uleb128 0x12
 3033 02c3 01       		.uleb128 0x1
 3034 02c4 40       		.uleb128 0x40
 3035 02c5 06       		.uleb128 0x6
 3036 02c6 9742     		.uleb128 0x2117
 3037 02c8 0C       		.uleb128 0xc
 3038 02c9 01       		.uleb128 0x1
 3039 02ca 13       		.uleb128 0x13
 3040 02cb 00       		.byte	0
 3041 02cc 00       		.byte	0
 3042 02cd 33       		.uleb128 0x33
 3043 02ce 0B       		.uleb128 0xb
 3044 02cf 01       		.byte	0x1
 3045 02d0 11       		.uleb128 0x11
 3046 02d1 01       		.uleb128 0x1
 3047 02d2 12       		.uleb128 0x12
 3048 02d3 01       		.uleb128 0x1
 3049 02d4 01       		.uleb128 0x1
 3050 02d5 13       		.uleb128 0x13
 3051 02d6 00       		.byte	0
 3052 02d7 00       		.byte	0
 3053 02d8 34       		.uleb128 0x34
 3054 02d9 34       		.uleb128 0x34
 3055 02da 00       		.byte	0
ARM GAS  /tmp/cctMPBvi.s 			page 77


 3056 02db 31       		.uleb128 0x31
 3057 02dc 13       		.uleb128 0x13
 3058 02dd 00       		.byte	0
 3059 02de 00       		.byte	0
 3060 02df 35       		.uleb128 0x35
 3061 02e0 2E       		.uleb128 0x2e
 3062 02e1 00       		.byte	0
 3063 02e2 3F       		.uleb128 0x3f
 3064 02e3 0C       		.uleb128 0xc
 3065 02e4 3C       		.uleb128 0x3c
 3066 02e5 0C       		.uleb128 0xc
 3067 02e6 8740     		.uleb128 0x2007
 3068 02e8 0E       		.uleb128 0xe
 3069 02e9 03       		.uleb128 0x3
 3070 02ea 0E       		.uleb128 0xe
 3071 02eb 3A       		.uleb128 0x3a
 3072 02ec 0B       		.uleb128 0xb
 3073 02ed 3B       		.uleb128 0x3b
 3074 02ee 05       		.uleb128 0x5
 3075 02ef 00       		.byte	0
 3076 02f0 00       		.byte	0
 3077 02f1 00       		.byte	0
 3078              		.section	.debug_loc,"",%progbits
 3079              	.Ldebug_loc0:
 3080              	.LLST25:
 3081 0000 3C020000 		.4byte	.LVL63-.Ltext0
 3082 0004 44020000 		.4byte	.LVL64-.Ltext0
 3083 0008 0100     		.2byte	0x1
 3084 000a 50       		.byte	0x50
 3085 000b 44020000 		.4byte	.LVL64-.Ltext0
 3086 000f 58020000 		.4byte	.LFE70-.Ltext0
 3087 0013 0400     		.2byte	0x4
 3088 0015 F3       		.byte	0xf3
 3089 0016 01       		.uleb128 0x1
 3090 0017 50       		.byte	0x50
 3091 0018 9F       		.byte	0x9f
 3092 0019 00000000 		.4byte	0
 3093 001d 00000000 		.4byte	0
 3094              	.LLST26:
 3095 0021 3C020000 		.4byte	.LVL63-.Ltext0
 3096 0025 4A020000 		.4byte	.LVL65-.Ltext0
 3097 0029 0200     		.2byte	0x2
 3098 002b 30       		.byte	0x30
 3099 002c 9F       		.byte	0x9f
 3100 002d 4A020000 		.4byte	.LVL65-.Ltext0
 3101 0031 58020000 		.4byte	.LFE70-.Ltext0
 3102 0035 0100     		.2byte	0x1
 3103 0037 50       		.byte	0x50
 3104 0038 00000000 		.4byte	0
 3105 003c 00000000 		.4byte	0
 3106              	.LLST23:
 3107 0040 1E020000 		.4byte	.LVL59-.Ltext0
 3108 0044 2A020000 		.4byte	.LVL62-.Ltext0
 3109 0048 0300     		.2byte	0x3
 3110 004a 08       		.byte	0x8
 3111 004b A5       		.byte	0xa5
 3112 004c 9F       		.byte	0x9f
ARM GAS  /tmp/cctMPBvi.s 			page 78


 3113 004d 00000000 		.4byte	0
 3114 0051 00000000 		.4byte	0
 3115              	.LLST24:
 3116 0055 1E020000 		.4byte	.LVL59-.Ltext0
 3117 0059 20020000 		.4byte	.LVL60-.Ltext0
 3118 005d 0200     		.2byte	0x2
 3119 005f 30       		.byte	0x30
 3120 0060 9F       		.byte	0x9f
 3121 0061 20020000 		.4byte	.LVL60-.Ltext0
 3122 0065 28020000 		.4byte	.LVL61-.Ltext0
 3123 0069 0500     		.2byte	0x5
 3124 006b 72       		.byte	0x72
 3125 006c 00       		.sleb128 0
 3126 006d 32       		.byte	0x32
 3127 006e 1A       		.byte	0x1a
 3128 006f 9F       		.byte	0x9f
 3129 0070 00000000 		.4byte	0
 3130 0074 00000000 		.4byte	0
 3131              	.LLST9:
 3132 0078 DC000000 		.4byte	.LFB68-.Ltext0
 3133 007c E0000000 		.4byte	.LCFI4-.Ltext0
 3134 0080 0200     		.2byte	0x2
 3135 0082 7D       		.byte	0x7d
 3136 0083 00       		.sleb128 0
 3137 0084 E0000000 		.4byte	.LCFI4-.Ltext0
 3138 0088 14020000 		.4byte	.LFE68-.Ltext0
 3139 008c 0200     		.2byte	0x2
 3140 008e 7D       		.byte	0x7d
 3141 008f 18       		.sleb128 24
 3142 0090 00000000 		.4byte	0
 3143 0094 00000000 		.4byte	0
 3144              	.LLST10:
 3145 0098 DC000000 		.4byte	.LVL21-.Ltext0
 3146 009c EE000000 		.4byte	.LVL22-.Ltext0
 3147 00a0 0100     		.2byte	0x1
 3148 00a2 50       		.byte	0x50
 3149 00a3 EE000000 		.4byte	.LVL22-.Ltext0
 3150 00a7 44010000 		.4byte	.LVL31-.Ltext0
 3151 00ab 0100     		.2byte	0x1
 3152 00ad 55       		.byte	0x55
 3153 00ae 44010000 		.4byte	.LVL31-.Ltext0
 3154 00b2 4C010000 		.4byte	.LVL32-.Ltext0
 3155 00b6 0400     		.2byte	0x4
 3156 00b8 F3       		.byte	0xf3
 3157 00b9 01       		.uleb128 0x1
 3158 00ba 50       		.byte	0x50
 3159 00bb 9F       		.byte	0x9f
 3160 00bc 4C010000 		.4byte	.LVL32-.Ltext0
 3161 00c0 E0010000 		.4byte	.LVL50-.Ltext0
 3162 00c4 0100     		.2byte	0x1
 3163 00c6 55       		.byte	0x55
 3164 00c7 E0010000 		.4byte	.LVL50-.Ltext0
 3165 00cb 00020000 		.4byte	.LVL55-.Ltext0
 3166 00cf 0400     		.2byte	0x4
 3167 00d1 F3       		.byte	0xf3
 3168 00d2 01       		.uleb128 0x1
 3169 00d3 50       		.byte	0x50
ARM GAS  /tmp/cctMPBvi.s 			page 79


 3170 00d4 9F       		.byte	0x9f
 3171 00d5 00020000 		.4byte	.LVL55-.Ltext0
 3172 00d9 02020000 		.4byte	.LVL56-.Ltext0
 3173 00dd 0100     		.2byte	0x1
 3174 00df 50       		.byte	0x50
 3175 00e0 02020000 		.4byte	.LVL56-.Ltext0
 3176 00e4 06020000 		.4byte	.LVL57-.Ltext0
 3177 00e8 0100     		.2byte	0x1
 3178 00ea 55       		.byte	0x55
 3179 00eb 06020000 		.4byte	.LVL57-.Ltext0
 3180 00ef 14020000 		.4byte	.LFE68-.Ltext0
 3181 00f3 0400     		.2byte	0x4
 3182 00f5 F3       		.byte	0xf3
 3183 00f6 01       		.uleb128 0x1
 3184 00f7 50       		.byte	0x50
 3185 00f8 9F       		.byte	0x9f
 3186 00f9 00000000 		.4byte	0
 3187 00fd 00000000 		.4byte	0
 3188              	.LLST11:
 3189 0101 DC000000 		.4byte	.LVL21-.Ltext0
 3190 0105 42010000 		.4byte	.LVL30-.Ltext0
 3191 0109 0200     		.2byte	0x2
 3192 010b 31       		.byte	0x31
 3193 010c 9F       		.byte	0x9f
 3194 010d 42010000 		.4byte	.LVL30-.Ltext0
 3195 0111 4C010000 		.4byte	.LVL32-.Ltext0
 3196 0115 0100     		.2byte	0x1
 3197 0117 50       		.byte	0x50
 3198 0118 4C010000 		.4byte	.LVL32-.Ltext0
 3199 011c 7C010000 		.4byte	.LVL36-.Ltext0
 3200 0120 0200     		.2byte	0x2
 3201 0122 31       		.byte	0x31
 3202 0123 9F       		.byte	0x9f
 3203 0124 7C010000 		.4byte	.LVL36-.Ltext0
 3204 0128 84010000 		.4byte	.LVL37-.Ltext0
 3205 012c 0100     		.2byte	0x1
 3206 012e 50       		.byte	0x50
 3207 012f 88010000 		.4byte	.LVL38-.Ltext0
 3208 0133 96010000 		.4byte	.LVL39-.Ltext0
 3209 0137 0100     		.2byte	0x1
 3210 0139 50       		.byte	0x50
 3211 013a C8010000 		.4byte	.LVL46-.Ltext0
 3212 013e D2010000 		.4byte	.LVL47-.Ltext0
 3213 0142 0100     		.2byte	0x1
 3214 0144 50       		.byte	0x50
 3215 0145 00020000 		.4byte	.LVL55-.Ltext0
 3216 0149 14020000 		.4byte	.LFE68-.Ltext0
 3217 014d 0200     		.2byte	0x2
 3218 014f 31       		.byte	0x31
 3219 0150 9F       		.byte	0x9f
 3220 0151 00000000 		.4byte	0
 3221 0155 00000000 		.4byte	0
 3222              	.LLST12:
 3223 0159 02010000 		.4byte	.LVL23-.Ltext0
 3224 015d 08010000 		.4byte	.LVL24-.Ltext0
 3225 0161 0700     		.2byte	0x7
 3226 0163 76       		.byte	0x76
ARM GAS  /tmp/cctMPBvi.s 			page 80


 3227 0164 00       		.sleb128 0
 3228 0165 20       		.byte	0x20
 3229 0166 78       		.byte	0x78
 3230 0167 00       		.sleb128 0
 3231 0168 1A       		.byte	0x1a
 3232 0169 9F       		.byte	0x9f
 3233 016a 08010000 		.4byte	.LVL24-.Ltext0
 3234 016e 1C010000 		.4byte	.LVL27-.Ltext0
 3235 0172 0100     		.2byte	0x1
 3236 0174 56       		.byte	0x56
 3237 0175 4C010000 		.4byte	.LVL32-.Ltext0
 3238 0179 64010000 		.4byte	.LVL35-.Ltext0
 3239 017d 0700     		.2byte	0x7
 3240 017f 76       		.byte	0x76
 3241 0180 00       		.sleb128 0
 3242 0181 20       		.byte	0x20
 3243 0182 78       		.byte	0x78
 3244 0183 00       		.sleb128 0
 3245 0184 1A       		.byte	0x1a
 3246 0185 9F       		.byte	0x9f
 3247 0186 00000000 		.4byte	0
 3248 018a 00000000 		.4byte	0
 3249              	.LLST13:
 3250 018e 08010000 		.4byte	.LVL24-.Ltext0
 3251 0192 0C010000 		.4byte	.LVL25-.Ltext0
 3252 0196 0200     		.2byte	0x2
 3253 0198 30       		.byte	0x30
 3254 0199 9F       		.byte	0x9f
 3255 019a 0C010000 		.4byte	.LVL25-.Ltext0
 3256 019e 13010000 		.4byte	.LVL26-1-.Ltext0
 3257 01a2 0100     		.2byte	0x1
 3258 01a4 50       		.byte	0x50
 3259 01a5 14010000 		.4byte	.LVL26-.Ltext0
 3260 01a9 30010000 		.4byte	.LVL28-.Ltext0
 3261 01ad 0100     		.2byte	0x1
 3262 01af 50       		.byte	0x50
 3263 01b0 00000000 		.4byte	0
 3264 01b4 00000000 		.4byte	0
 3265              	.LLST14:
 3266 01b8 02010000 		.4byte	.LVL23-.Ltext0
 3267 01bc 08010000 		.4byte	.LVL24-.Ltext0
 3268 01c0 0A00     		.2byte	0xa
 3269 01c2 76       		.byte	0x76
 3270 01c3 00       		.sleb128 0
 3271 01c4 20       		.byte	0x20
 3272 01c5 78       		.byte	0x78
 3273 01c6 00       		.sleb128 0
 3274 01c7 1A       		.byte	0x1a
 3275 01c8 08       		.byte	0x8
 3276 01c9 FF       		.byte	0xff
 3277 01ca 1A       		.byte	0x1a
 3278 01cb 9F       		.byte	0x9f
 3279 01cc 08010000 		.4byte	.LVL24-.Ltext0
 3280 01d0 30010000 		.4byte	.LVL28-.Ltext0
 3281 01d4 0300     		.2byte	0x3
 3282 01d6 09       		.byte	0x9
 3283 01d7 FF       		.byte	0xff
ARM GAS  /tmp/cctMPBvi.s 			page 81


 3284 01d8 9F       		.byte	0x9f
 3285 01d9 4C010000 		.4byte	.LVL32-.Ltext0
 3286 01dd 64010000 		.4byte	.LVL35-.Ltext0
 3287 01e1 0A00     		.2byte	0xa
 3288 01e3 76       		.byte	0x76
 3289 01e4 00       		.sleb128 0
 3290 01e5 20       		.byte	0x20
 3291 01e6 78       		.byte	0x78
 3292 01e7 00       		.sleb128 0
 3293 01e8 1A       		.byte	0x1a
 3294 01e9 08       		.byte	0x8
 3295 01ea FF       		.byte	0xff
 3296 01eb 1A       		.byte	0x1a
 3297 01ec 9F       		.byte	0x9f
 3298 01ed 00000000 		.4byte	0
 3299 01f1 00000000 		.4byte	0
 3300              	.LLST15:
 3301 01f5 4C010000 		.4byte	.LVL32-.Ltext0
 3302 01f9 64010000 		.4byte	.LVL35-.Ltext0
 3303 01fd 0100     		.2byte	0x1
 3304 01ff 56       		.byte	0x56
 3305 0200 00000000 		.4byte	0
 3306 0204 00000000 		.4byte	0
 3307              	.LLST16:
 3308 0208 38010000 		.4byte	.LVL29-.Ltext0
 3309 020c 44010000 		.4byte	.LVL31-.Ltext0
 3310 0210 0100     		.2byte	0x1
 3311 0212 50       		.byte	0x50
 3312 0213 4C010000 		.4byte	.LVL32-.Ltext0
 3313 0217 50010000 		.4byte	.LVL33-.Ltext0
 3314 021b 0200     		.2byte	0x2
 3315 021d 30       		.byte	0x30
 3316 021e 9F       		.byte	0x9f
 3317 021f 50010000 		.4byte	.LVL33-.Ltext0
 3318 0223 59010000 		.4byte	.LVL34-1-.Ltext0
 3319 0227 0100     		.2byte	0x1
 3320 0229 50       		.byte	0x50
 3321 022a 5A010000 		.4byte	.LVL34-.Ltext0
 3322 022e 7C010000 		.4byte	.LVL36-.Ltext0
 3323 0232 0100     		.2byte	0x1
 3324 0234 50       		.byte	0x50
 3325 0235 00000000 		.4byte	0
 3326 0239 00000000 		.4byte	0
 3327              	.LLST17:
 3328 023d 4C010000 		.4byte	.LVL32-.Ltext0
 3329 0241 7C010000 		.4byte	.LVL36-.Ltext0
 3330 0245 0300     		.2byte	0x3
 3331 0247 09       		.byte	0x9
 3332 0248 FF       		.byte	0xff
 3333 0249 9F       		.byte	0x9f
 3334 024a 00000000 		.4byte	0
 3335 024e 00000000 		.4byte	0
 3336              	.LLST18:
 3337 0252 98010000 		.4byte	.LVL40-.Ltext0
 3338 0256 AA010000 		.4byte	.LVL42-.Ltext0
 3339 025a 0100     		.2byte	0x1
 3340 025c 57       		.byte	0x57
ARM GAS  /tmp/cctMPBvi.s 			page 82


 3341 025d 00000000 		.4byte	0
 3342 0261 00000000 		.4byte	0
 3343              	.LLST19:
 3344 0265 98010000 		.4byte	.LVL40-.Ltext0
 3345 0269 9C010000 		.4byte	.LVL41-.Ltext0
 3346 026d 0200     		.2byte	0x2
 3347 026f 30       		.byte	0x30
 3348 0270 9F       		.byte	0x9f
 3349 0271 9C010000 		.4byte	.LVL41-.Ltext0
 3350 0275 B6010000 		.4byte	.LVL43-.Ltext0
 3351 0279 0100     		.2byte	0x1
 3352 027b 50       		.byte	0x50
 3353 027c BC010000 		.4byte	.LVL44-.Ltext0
 3354 0280 C4010000 		.4byte	.LVL45-.Ltext0
 3355 0284 0100     		.2byte	0x1
 3356 0286 50       		.byte	0x50
 3357 0287 00000000 		.4byte	0
 3358 028b 00000000 		.4byte	0
 3359              	.LLST20:
 3360 028f D6010000 		.4byte	.LVL48-.Ltext0
 3361 0293 E6010000 		.4byte	.LVL51-.Ltext0
 3362 0297 0100     		.2byte	0x1
 3363 0299 56       		.byte	0x56
 3364 029a 00000000 		.4byte	0
 3365 029e 00000000 		.4byte	0
 3366              	.LLST21:
 3367 02a2 D6010000 		.4byte	.LVL48-.Ltext0
 3368 02a6 FE010000 		.4byte	.LVL54-.Ltext0
 3369 02aa 0100     		.2byte	0x1
 3370 02ac 57       		.byte	0x57
 3371 02ad 00000000 		.4byte	0
 3372 02b1 00000000 		.4byte	0
 3373              	.LLST22:
 3374 02b5 D6010000 		.4byte	.LVL48-.Ltext0
 3375 02b9 DA010000 		.4byte	.LVL49-.Ltext0
 3376 02bd 0200     		.2byte	0x2
 3377 02bf 31       		.byte	0x31
 3378 02c0 9F       		.byte	0x9f
 3379 02c1 DA010000 		.4byte	.LVL49-.Ltext0
 3380 02c5 F0010000 		.4byte	.LVL52-.Ltext0
 3381 02c9 0100     		.2byte	0x1
 3382 02cb 50       		.byte	0x50
 3383 02cc F6010000 		.4byte	.LVL53-.Ltext0
 3384 02d0 FE010000 		.4byte	.LVL54-.Ltext0
 3385 02d4 0100     		.2byte	0x1
 3386 02d6 50       		.byte	0x50
 3387 02d7 00000000 		.4byte	0
 3388 02db 00000000 		.4byte	0
 3389              	.LLST4:
 3390 02df 88000000 		.4byte	.LFB67-.Ltext0
 3391 02e3 8A000000 		.4byte	.LCFI1-.Ltext0
 3392 02e7 0200     		.2byte	0x2
 3393 02e9 7D       		.byte	0x7d
 3394 02ea 00       		.sleb128 0
 3395 02eb 8A000000 		.4byte	.LCFI1-.Ltext0
 3396 02ef CE000000 		.4byte	.LCFI2-.Ltext0
 3397 02f3 0200     		.2byte	0x2
ARM GAS  /tmp/cctMPBvi.s 			page 83


 3398 02f5 7D       		.byte	0x7d
 3399 02f6 10       		.sleb128 16
 3400 02f7 CE000000 		.4byte	.LCFI2-.Ltext0
 3401 02fb D0000000 		.4byte	.LCFI3-.Ltext0
 3402 02ff 0200     		.2byte	0x2
 3403 0301 7D       		.byte	0x7d
 3404 0302 00       		.sleb128 0
 3405 0303 D0000000 		.4byte	.LCFI3-.Ltext0
 3406 0307 DC000000 		.4byte	.LFE67-.Ltext0
 3407 030b 0200     		.2byte	0x2
 3408 030d 7D       		.byte	0x7d
 3409 030e 10       		.sleb128 16
 3410 030f 00000000 		.4byte	0
 3411 0313 00000000 		.4byte	0
 3412              	.LLST5:
 3413 0317 88000000 		.4byte	.LVL11-.Ltext0
 3414 031b 9C000000 		.4byte	.LVL13-.Ltext0
 3415 031f 0300     		.2byte	0x3
 3416 0321 09       		.byte	0x9
 3417 0322 A5       		.byte	0xa5
 3418 0323 9F       		.byte	0x9f
 3419 0324 9C000000 		.4byte	.LVL13-.Ltext0
 3420 0328 CE000000 		.4byte	.LVL18-.Ltext0
 3421 032c 0100     		.2byte	0x1
 3422 032e 55       		.byte	0x55
 3423 032f CE000000 		.4byte	.LVL18-.Ltext0
 3424 0333 CF000000 		.4byte	.LVL19-1-.Ltext0
 3425 0337 0100     		.2byte	0x1
 3426 0339 50       		.byte	0x50
 3427 033a D0000000 		.4byte	.LVL19-.Ltext0
 3428 033e D2000000 		.4byte	.LVL20-.Ltext0
 3429 0342 0100     		.2byte	0x1
 3430 0344 55       		.byte	0x55
 3431 0345 00000000 		.4byte	0
 3432 0349 00000000 		.4byte	0
 3433              	.LLST6:
 3434 034d 88000000 		.4byte	.LVL11-.Ltext0
 3435 0351 A0000000 		.4byte	.LVL14-.Ltext0
 3436 0355 0200     		.2byte	0x2
 3437 0357 31       		.byte	0x31
 3438 0358 9F       		.byte	0x9f
 3439 0359 A0000000 		.4byte	.LVL14-.Ltext0
 3440 035d AC000000 		.4byte	.LVL15-.Ltext0
 3441 0361 0100     		.2byte	0x1
 3442 0363 50       		.byte	0x50
 3443 0364 BE000000 		.4byte	.LVL16-.Ltext0
 3444 0368 CA000000 		.4byte	.LVL17-.Ltext0
 3445 036c 0100     		.2byte	0x1
 3446 036e 50       		.byte	0x50
 3447 036f D0000000 		.4byte	.LVL19-.Ltext0
 3448 0373 DC000000 		.4byte	.LFE67-.Ltext0
 3449 0377 0100     		.2byte	0x1
 3450 0379 50       		.byte	0x50
 3451 037a 00000000 		.4byte	0
 3452 037e 00000000 		.4byte	0
 3453              	.LLST7:
 3454 0382 88000000 		.4byte	.LVL11-.Ltext0
ARM GAS  /tmp/cctMPBvi.s 			page 84


 3455 0386 9C000000 		.4byte	.LVL13-.Ltext0
 3456 038a 0300     		.2byte	0x3
 3457 038c 08       		.byte	0x8
 3458 038d A5       		.byte	0xa5
 3459 038e 9F       		.byte	0x9f
 3460 038f 00000000 		.4byte	0
 3461 0393 00000000 		.4byte	0
 3462              	.LLST8:
 3463 0397 88000000 		.4byte	.LVL11-.Ltext0
 3464 039b 92000000 		.4byte	.LVL12-.Ltext0
 3465 039f 0200     		.2byte	0x2
 3466 03a1 30       		.byte	0x30
 3467 03a2 9F       		.byte	0x9f
 3468 03a3 92000000 		.4byte	.LVL12-.Ltext0
 3469 03a7 9C000000 		.4byte	.LVL13-.Ltext0
 3470 03ab 0500     		.2byte	0x5
 3471 03ad 73       		.byte	0x73
 3472 03ae 00       		.sleb128 0
 3473 03af 32       		.byte	0x32
 3474 03b0 1A       		.byte	0x1a
 3475 03b1 9F       		.byte	0x9f
 3476 03b2 00000000 		.4byte	0
 3477 03b6 00000000 		.4byte	0
 3478              	.LLST32:
 3479 03ba 18030000 		.4byte	.LFB66-.Ltext0
 3480 03be 1C030000 		.4byte	.LCFI6-.Ltext0
 3481 03c2 0200     		.2byte	0x2
 3482 03c4 7D       		.byte	0x7d
 3483 03c5 00       		.sleb128 0
 3484 03c6 1C030000 		.4byte	.LCFI6-.Ltext0
 3485 03ca 68030000 		.4byte	.LFE66-.Ltext0
 3486 03ce 0200     		.2byte	0x2
 3487 03d0 7D       		.byte	0x7d
 3488 03d1 10       		.sleb128 16
 3489 03d2 00000000 		.4byte	0
 3490 03d6 00000000 		.4byte	0
 3491              	.LLST33:
 3492 03da 18030000 		.4byte	.LVL85-.Ltext0
 3493 03de 44030000 		.4byte	.LVL86-.Ltext0
 3494 03e2 0100     		.2byte	0x1
 3495 03e4 50       		.byte	0x50
 3496 03e5 44030000 		.4byte	.LVL86-.Ltext0
 3497 03e9 48030000 		.4byte	.LVL87-.Ltext0
 3498 03ed 0400     		.2byte	0x4
 3499 03ef F3       		.byte	0xf3
 3500 03f0 01       		.uleb128 0x1
 3501 03f1 50       		.byte	0x50
 3502 03f2 9F       		.byte	0x9f
 3503 03f3 48030000 		.4byte	.LVL87-.Ltext0
 3504 03f7 4E030000 		.4byte	.LVL88-.Ltext0
 3505 03fb 0100     		.2byte	0x1
 3506 03fd 50       		.byte	0x50
 3507 03fe 4E030000 		.4byte	.LVL88-.Ltext0
 3508 0402 58030000 		.4byte	.LVL90-.Ltext0
 3509 0406 0400     		.2byte	0x4
 3510 0408 F3       		.byte	0xf3
 3511 0409 01       		.uleb128 0x1
ARM GAS  /tmp/cctMPBvi.s 			page 85


 3512 040a 50       		.byte	0x50
 3513 040b 9F       		.byte	0x9f
 3514 040c 58030000 		.4byte	.LVL90-.Ltext0
 3515 0410 5A030000 		.4byte	.LVL91-.Ltext0
 3516 0414 0100     		.2byte	0x1
 3517 0416 50       		.byte	0x50
 3518 0417 5A030000 		.4byte	.LVL91-.Ltext0
 3519 041b 5C030000 		.4byte	.LVL92-.Ltext0
 3520 041f 0400     		.2byte	0x4
 3521 0421 F3       		.byte	0xf3
 3522 0422 01       		.uleb128 0x1
 3523 0423 50       		.byte	0x50
 3524 0424 9F       		.byte	0x9f
 3525 0425 5C030000 		.4byte	.LVL92-.Ltext0
 3526 0429 5E030000 		.4byte	.LVL93-.Ltext0
 3527 042d 0100     		.2byte	0x1
 3528 042f 50       		.byte	0x50
 3529 0430 5E030000 		.4byte	.LVL93-.Ltext0
 3530 0434 68030000 		.4byte	.LFE66-.Ltext0
 3531 0438 0400     		.2byte	0x4
 3532 043a F3       		.byte	0xf3
 3533 043b 01       		.uleb128 0x1
 3534 043c 50       		.byte	0x50
 3535 043d 9F       		.byte	0x9f
 3536 043e 00000000 		.4byte	0
 3537 0442 00000000 		.4byte	0
 3538              	.LLST27:
 3539 0446 7C020000 		.4byte	.LFB65-.Ltext0
 3540 044a 80020000 		.4byte	.LCFI5-.Ltext0
 3541 044e 0200     		.2byte	0x2
 3542 0450 7D       		.byte	0x7d
 3543 0451 00       		.sleb128 0
 3544 0452 80020000 		.4byte	.LCFI5-.Ltext0
 3545 0456 18030000 		.4byte	.LFE65-.Ltext0
 3546 045a 0200     		.2byte	0x2
 3547 045c 7D       		.byte	0x7d
 3548 045d 18       		.sleb128 24
 3549 045e 00000000 		.4byte	0
 3550 0462 00000000 		.4byte	0
 3551              	.LLST28:
 3552 0466 7C020000 		.4byte	.LVL68-.Ltext0
 3553 046a 98020000 		.4byte	.LVL69-.Ltext0
 3554 046e 0100     		.2byte	0x1
 3555 0470 50       		.byte	0x50
 3556 0471 98020000 		.4byte	.LVL69-.Ltext0
 3557 0475 08030000 		.4byte	.LVL82-.Ltext0
 3558 0479 0100     		.2byte	0x1
 3559 047b 57       		.byte	0x57
 3560 047c 08030000 		.4byte	.LVL82-.Ltext0
 3561 0480 0A030000 		.4byte	.LVL83-.Ltext0
 3562 0484 0100     		.2byte	0x1
 3563 0486 50       		.byte	0x50
 3564 0487 0A030000 		.4byte	.LVL83-.Ltext0
 3565 048b 0E030000 		.4byte	.LVL84-.Ltext0
 3566 048f 0100     		.2byte	0x1
 3567 0491 57       		.byte	0x57
 3568 0492 0E030000 		.4byte	.LVL84-.Ltext0
ARM GAS  /tmp/cctMPBvi.s 			page 86


 3569 0496 18030000 		.4byte	.LFE65-.Ltext0
 3570 049a 0400     		.2byte	0x4
 3571 049c F3       		.byte	0xf3
 3572 049d 01       		.uleb128 0x1
 3573 049e 50       		.byte	0x50
 3574 049f 9F       		.byte	0x9f
 3575 04a0 00000000 		.4byte	0
 3576 04a4 00000000 		.4byte	0
 3577              	.LLST29:
 3578 04a8 7C020000 		.4byte	.LVL68-.Ltext0
 3579 04ac 9D020000 		.4byte	.LVL70-1-.Ltext0
 3580 04b0 0100     		.2byte	0x1
 3581 04b2 51       		.byte	0x51
 3582 04b3 9D020000 		.4byte	.LVL70-1-.Ltext0
 3583 04b7 C2020000 		.4byte	.LVL75-.Ltext0
 3584 04bb 0100     		.2byte	0x1
 3585 04bd 58       		.byte	0x58
 3586 04be C2020000 		.4byte	.LVL75-.Ltext0
 3587 04c2 C5020000 		.4byte	.LVL76-1-.Ltext0
 3588 04c6 0100     		.2byte	0x1
 3589 04c8 51       		.byte	0x51
 3590 04c9 C5020000 		.4byte	.LVL76-1-.Ltext0
 3591 04cd 08030000 		.4byte	.LVL82-.Ltext0
 3592 04d1 0100     		.2byte	0x1
 3593 04d3 58       		.byte	0x58
 3594 04d4 08030000 		.4byte	.LVL82-.Ltext0
 3595 04d8 18030000 		.4byte	.LFE65-.Ltext0
 3596 04dc 0100     		.2byte	0x1
 3597 04de 51       		.byte	0x51
 3598 04df 00000000 		.4byte	0
 3599 04e3 00000000 		.4byte	0
 3600              	.LLST30:
 3601 04e7 7C020000 		.4byte	.LVL68-.Ltext0
 3602 04eb A2020000 		.4byte	.LVL71-.Ltext0
 3603 04ef 0200     		.2byte	0x2
 3604 04f1 31       		.byte	0x31
 3605 04f2 9F       		.byte	0x9f
 3606 04f3 A2020000 		.4byte	.LVL71-.Ltext0
 3607 04f7 AA020000 		.4byte	.LVL72-.Ltext0
 3608 04fb 0100     		.2byte	0x1
 3609 04fd 50       		.byte	0x50
 3610 04fe AA020000 		.4byte	.LVL72-.Ltext0
 3611 0502 B6020000 		.4byte	.LVL74-.Ltext0
 3612 0506 0200     		.2byte	0x2
 3613 0508 31       		.byte	0x31
 3614 0509 9F       		.byte	0x9f
 3615 050a B6020000 		.4byte	.LVL74-.Ltext0
 3616 050e C2020000 		.4byte	.LVL75-.Ltext0
 3617 0512 0100     		.2byte	0x1
 3618 0514 50       		.byte	0x50
 3619 0515 C2020000 		.4byte	.LVL75-.Ltext0
 3620 0519 D8020000 		.4byte	.LVL78-.Ltext0
 3621 051d 0200     		.2byte	0x2
 3622 051f 31       		.byte	0x31
 3623 0520 9F       		.byte	0x9f
 3624 0521 F2020000 		.4byte	.LVL80-.Ltext0
 3625 0525 08030000 		.4byte	.LVL82-.Ltext0
ARM GAS  /tmp/cctMPBvi.s 			page 87


 3626 0529 0100     		.2byte	0x1
 3627 052b 50       		.byte	0x50
 3628 052c 08030000 		.4byte	.LVL82-.Ltext0
 3629 0530 18030000 		.4byte	.LFE65-.Ltext0
 3630 0534 0200     		.2byte	0x2
 3631 0536 31       		.byte	0x31
 3632 0537 9F       		.byte	0x9f
 3633 0538 00000000 		.4byte	0
 3634 053c 00000000 		.4byte	0
 3635              	.LLST31:
 3636 0540 7C020000 		.4byte	.LVL68-.Ltext0
 3637 0544 A2020000 		.4byte	.LVL71-.Ltext0
 3638 0548 0200     		.2byte	0x2
 3639 054a 30       		.byte	0x30
 3640 054b 9F       		.byte	0x9f
 3641 054c AA020000 		.4byte	.LVL72-.Ltext0
 3642 0550 D6020000 		.4byte	.LVL77-.Ltext0
 3643 0554 0200     		.2byte	0x2
 3644 0556 30       		.byte	0x30
 3645 0557 9F       		.byte	0x9f
 3646 0558 D6020000 		.4byte	.LVL77-.Ltext0
 3647 055c 08030000 		.4byte	.LVL82-.Ltext0
 3648 0560 0100     		.2byte	0x1
 3649 0562 56       		.byte	0x56
 3650 0563 08030000 		.4byte	.LVL82-.Ltext0
 3651 0567 18030000 		.4byte	.LFE65-.Ltext0
 3652 056b 0200     		.2byte	0x2
 3653 056d 30       		.byte	0x30
 3654 056e 9F       		.byte	0x9f
 3655 056f 00000000 		.4byte	0
 3656 0573 00000000 		.4byte	0
 3657              	.LLST0:
 3658 0577 24000000 		.4byte	.LFB74-.Ltext0
 3659 057b 26000000 		.4byte	.LCFI0-.Ltext0
 3660 057f 0200     		.2byte	0x2
 3661 0581 7D       		.byte	0x7d
 3662 0582 00       		.sleb128 0
 3663 0583 26000000 		.4byte	.LCFI0-.Ltext0
 3664 0587 88000000 		.4byte	.LFE74-.Ltext0
 3665 058b 0200     		.2byte	0x2
 3666 058d 7D       		.byte	0x7d
 3667 058e 10       		.sleb128 16
 3668 058f 00000000 		.4byte	0
 3669 0593 00000000 		.4byte	0
 3670              	.LLST1:
 3671 0597 24000000 		.4byte	.LVL1-.Ltext0
 3672 059b 2C000000 		.4byte	.LVL2-.Ltext0
 3673 059f 0100     		.2byte	0x1
 3674 05a1 50       		.byte	0x50
 3675 05a2 2C000000 		.4byte	.LVL2-.Ltext0
 3676 05a6 88000000 		.4byte	.LFE74-.Ltext0
 3677 05aa 0400     		.2byte	0x4
 3678 05ac F3       		.byte	0xf3
 3679 05ad 01       		.uleb128 0x1
 3680 05ae 50       		.byte	0x50
 3681 05af 9F       		.byte	0x9f
 3682 05b0 00000000 		.4byte	0
ARM GAS  /tmp/cctMPBvi.s 			page 88


 3683 05b4 00000000 		.4byte	0
 3684              	.LLST2:
 3685 05b8 24000000 		.4byte	.LVL1-.Ltext0
 3686 05bc 30000000 		.4byte	.LVL3-.Ltext0
 3687 05c0 0200     		.2byte	0x2
 3688 05c2 30       		.byte	0x30
 3689 05c3 9F       		.byte	0x9f
 3690 05c4 30000000 		.4byte	.LVL3-.Ltext0
 3691 05c8 3E000000 		.4byte	.LVL4-.Ltext0
 3692 05cc 0100     		.2byte	0x1
 3693 05ce 50       		.byte	0x50
 3694 05cf 50000000 		.4byte	.LVL5-.Ltext0
 3695 05d3 6A000000 		.4byte	.LVL8-.Ltext0
 3696 05d7 0100     		.2byte	0x1
 3697 05d9 50       		.byte	0x50
 3698 05da 78000000 		.4byte	.LVL10-.Ltext0
 3699 05de 88000000 		.4byte	.LFE74-.Ltext0
 3700 05e2 0100     		.2byte	0x1
 3701 05e4 50       		.byte	0x50
 3702 05e5 00000000 		.4byte	0
 3703 05e9 00000000 		.4byte	0
 3704              	.LLST3:
 3705 05ed 5A000000 		.4byte	.LVL6-.Ltext0
 3706 05f1 5E000000 		.4byte	.LVL7-.Ltext0
 3707 05f5 0100     		.2byte	0x1
 3708 05f7 55       		.byte	0x55
 3709 05f8 00000000 		.4byte	0
 3710 05fc 00000000 		.4byte	0
 3711              		.section	.debug_aranges,"",%progbits
 3712 0000 1C000000 		.4byte	0x1c
 3713 0004 0200     		.2byte	0x2
 3714 0006 00000000 		.4byte	.Ldebug_info0
 3715 000a 04       		.byte	0x4
 3716 000b 00       		.byte	0
 3717 000c 0000     		.2byte	0
 3718 000e 0000     		.2byte	0
 3719 0010 00000000 		.4byte	.Ltext0
 3720 0014 68030000 		.4byte	.Letext0-.Ltext0
 3721 0018 00000000 		.4byte	0
 3722 001c 00000000 		.4byte	0
 3723              		.section	.debug_ranges,"",%progbits
 3724              	.Ldebug_ranges0:
 3725 0000 8A000000 		.4byte	.LBB14-.Ltext0
 3726 0004 8C000000 		.4byte	.LBE14-.Ltext0
 3727 0008 90000000 		.4byte	.LBB17-.Ltext0
 3728 000c 9C000000 		.4byte	.LBE17-.Ltext0
 3729 0010 00000000 		.4byte	0
 3730 0014 00000000 		.4byte	0
 3731 0018 FE000000 		.4byte	.LBB30-.Ltext0
 3732 001c 06010000 		.4byte	.LBE30-.Ltext0
 3733 0020 08010000 		.4byte	.LBB35-.Ltext0
 3734 0024 30010000 		.4byte	.LBE35-.Ltext0
 3735 0028 00000000 		.4byte	0
 3736 002c 00000000 		.4byte	0
 3737 0030 30010000 		.4byte	.LBB36-.Ltext0
 3738 0034 42010000 		.4byte	.LBE36-.Ltext0
 3739 0038 4C010000 		.4byte	.LBB39-.Ltext0
ARM GAS  /tmp/cctMPBvi.s 			page 89


 3740 003c 7C010000 		.4byte	.LBE39-.Ltext0
 3741 0040 00000000 		.4byte	0
 3742 0044 00000000 		.4byte	0
 3743 0048 92010000 		.4byte	.LBB40-.Ltext0
 3744 004c 96010000 		.4byte	.LBE40-.Ltext0
 3745 0050 98010000 		.4byte	.LBB43-.Ltext0
 3746 0054 C4010000 		.4byte	.LBE43-.Ltext0
 3747 0058 00000000 		.4byte	0
 3748 005c 00000000 		.4byte	0
 3749 0060 CE010000 		.4byte	.LBB44-.Ltext0
 3750 0064 D2010000 		.4byte	.LBE44-.Ltext0
 3751 0068 D6010000 		.4byte	.LBB47-.Ltext0
 3752 006c FE010000 		.4byte	.LBE47-.Ltext0
 3753 0070 00000000 		.4byte	0
 3754 0074 00000000 		.4byte	0
 3755              		.section	.debug_line,"",%progbits
 3756              	.Ldebug_line0:
 3757 0000 17030000 		.section	.debug_str,"MS",%progbits,1
 3757      02004901 
 3757      00000201 
 3757      FB0E0D00 
 3757      01010101 
 3758              	.LASF50:
 3759 0000 464C4153 		.ascii	"FLASH_PROC_PROGRAMWORD\000"
 3759      485F5052 
 3759      4F435F50 
 3759      524F4752 
 3759      414D574F 
 3760              	.LASF39:
 3761 0017 48414C5F 		.ascii	"HAL_ERROR\000"
 3761      4552524F 
 3761      5200
 3762              	.LASF43:
 3763 0021 48414C5F 		.ascii	"HAL_UNLOCKED\000"
 3763      554E4C4F 
 3763      434B4544 
 3763      00
 3764              	.LASF52:
 3765 002e 464C4153 		.ascii	"FLASH_ProcedureTypeDef\000"
 3765      485F5072 
 3765      6F636564 
 3765      75726554 
 3765      79706544 
 3766              	.LASF92:
 3767 0045 464C4153 		.ascii	"FLASH_OB_DisableWRP\000"
 3767      485F4F42 
 3767      5F446973 
 3767      61626C65 
 3767      57525000 
 3768              	.LASF41:
 3769 0059 48414C5F 		.ascii	"HAL_TIMEOUT\000"
 3769      54494D45 
 3769      4F555400 
 3770              	.LASF72:
 3771 0065 464C4153 		.ascii	"FLASH_OBProgramInitTypeDef\000"
 3771      485F4F42 
 3771      50726F67 
ARM GAS  /tmp/cctMPBvi.s 			page 90


 3771      72616D49 
 3771      6E697454 
 3772              	.LASF73:
 3773 0080 48414C5F 		.ascii	"HAL_TICK_FREQ_10HZ\000"
 3773      5449434B 
 3773      5F465245 
 3773      515F3130 
 3773      485A00
 3774              	.LASF18:
 3775 0093 75696E74 		.ascii	"uint64_t\000"
 3775      36345F74 
 3775      00
 3776              	.LASF49:
 3777 009c 464C4153 		.ascii	"FLASH_PROC_PROGRAMHALFWORD\000"
 3777      485F5052 
 3777      4F435F50 
 3777      524F4752 
 3777      414D4841 
 3778              	.LASF98:
 3779 00b7 48414C5F 		.ascii	"HAL_FLASHEx_OBGetConfig\000"
 3779      464C4153 
 3779      4845785F 
 3779      4F424765 
 3779      74436F6E 
 3780              	.LASF19:
 3781 00cf 73697A65 		.ascii	"sizetype\000"
 3781      74797065 
 3781      00
 3782              	.LASF105:
 3783 00d8 48414C5F 		.ascii	"HAL_FLASHEx_Erase_IT\000"
 3783      464C4153 
 3783      4845785F 
 3783      45726173 
 3783      655F4954 
 3784              	.LASF103:
 3785 00ed 48414C5F 		.ascii	"HAL_FLASHEx_OBErase\000"
 3785      464C4153 
 3785      4845785F 
 3785      4F424572 
 3785      61736500 
 3786              	.LASF84:
 3787 0101 464C4153 		.ascii	"FLASH_OB_GetWRP\000"
 3787      485F4F42 
 3787      5F476574 
 3787      57525000 
 3788              	.LASF96:
 3789 0111 44415441 		.ascii	"DATAAdress\000"
 3789      41647265 
 3789      737300
 3790              	.LASF8:
 3791 011c 5F5F7569 		.ascii	"__uint32_t\000"
 3791      6E743332 
 3791      5F7400
 3792              	.LASF55:
 3793 0127 41646472 		.ascii	"Address\000"
 3793      65737300 
 3794              	.LASF4:
ARM GAS  /tmp/cctMPBvi.s 			page 91


 3795 012f 5F5F7569 		.ascii	"__uint16_t\000"
 3795      6E743136 
 3795      5F7400
 3796              	.LASF78:
 3797 013a 75775469 		.ascii	"uwTickPrio\000"
 3797      636B5072 
 3797      696F00
 3798              	.LASF27:
 3799 0145 57525052 		.ascii	"WRPR\000"
 3799      00
 3800              	.LASF88:
 3801 014a 464C4153 		.ascii	"FLASH_OB_UserConfig\000"
 3801      485F4F42 
 3801      5F557365 
 3801      72436F6E 
 3801      66696700 
 3802              	.LASF102:
 3803 015e 76616C75 		.ascii	"value\000"
 3803      6500
 3804              	.LASF38:
 3805 0164 48414C5F 		.ascii	"HAL_OK\000"
 3805      4F4B00
 3806              	.LASF65:
 3807 016b 4F707469 		.ascii	"OptionType\000"
 3807      6F6E5479 
 3807      706500
 3808              	.LASF93:
 3809 0176 57726974 		.ascii	"WriteProtectPage\000"
 3809      6550726F 
 3809      74656374 
 3809      50616765 
 3809      00
 3810              	.LASF14:
 3811 0187 75696E74 		.ascii	"uint8_t\000"
 3811      385F7400 
 3812              	.LASF91:
 3813 018f 52656164 		.ascii	"ReadProtectLevel\000"
 3813      50726F74 
 3813      6563744C 
 3813      6576656C 
 3813      00
 3814              	.LASF104:
 3815 01a0 72647074 		.ascii	"rdptmp\000"
 3815      6D7000
 3816              	.LASF40:
 3817 01a7 48414C5F 		.ascii	"HAL_BUSY\000"
 3817      42555359 
 3817      00
 3818              	.LASF32:
 3819 01b0 57525030 		.ascii	"WRP0\000"
 3819      00
 3820              	.LASF33:
 3821 01b5 57525031 		.ascii	"WRP1\000"
 3821      00
 3822              	.LASF34:
 3823 01ba 57525032 		.ascii	"WRP2\000"
 3823      00
ARM GAS  /tmp/cctMPBvi.s 			page 92


 3824              	.LASF35:
 3825 01bf 57525033 		.ascii	"WRP3\000"
 3825      00
 3826              	.LASF71:
 3827 01c4 44415441 		.ascii	"DATAData\000"
 3827      44617461 
 3827      00
 3828              	.LASF2:
 3829 01cd 73686F72 		.ascii	"short int\000"
 3829      7420696E 
 3829      7400
 3830              	.LASF25:
 3831 01d7 4F50544B 		.ascii	"OPTKEYR\000"
 3831      45595200 
 3832              	.LASF70:
 3833 01df 44415441 		.ascii	"DATAAddress\000"
 3833      41646472 
 3833      65737300 
 3834              	.LASF10:
 3835 01eb 6C6F6E67 		.ascii	"long long int\000"
 3835      206C6F6E 
 3835      6720696E 
 3835      7400
 3836              	.LASF12:
 3837 01f9 6C6F6E67 		.ascii	"long long unsigned int\000"
 3837      206C6F6E 
 3837      6720756E 
 3837      7369676E 
 3837      65642069 
 3838              	.LASF77:
 3839 0210 48414C5F 		.ascii	"HAL_TickFreqTypeDef\000"
 3839      5469636B 
 3839      46726571 
 3839      54797065 
 3839      44656600 
 3840              	.LASF7:
 3841 0224 6C6F6E67 		.ascii	"long int\000"
 3841      20696E74 
 3841      00
 3842              	.LASF57:
 3843 022d 4C6F636B 		.ascii	"Lock\000"
 3843      00
 3844              	.LASF51:
 3845 0232 464C4153 		.ascii	"FLASH_PROC_PROGRAMDOUBLEWORD\000"
 3845      485F5052 
 3845      4F435F50 
 3845      524F4752 
 3845      414D444F 
 3846              	.LASF3:
 3847 024f 5F5F7569 		.ascii	"__uint8_t\000"
 3847      6E74385F 
 3847      7400
 3848              	.LASF60:
 3849 0259 54797065 		.ascii	"TypeErase\000"
 3849      45726173 
 3849      6500
 3850              	.LASF56:
ARM GAS  /tmp/cctMPBvi.s 			page 93


 3851 0263 44617461 		.ascii	"Data\000"
 3851      00
 3852              	.LASF111:
 3853 0268 7372632F 		.ascii	"src/stm32f1xx_hal_flash_ex.c\000"
 3853      73746D33 
 3853      32663178 
 3853      785F6861 
 3853      6C5F666C 
 3854              	.LASF42:
 3855 0285 48414C5F 		.ascii	"HAL_StatusTypeDef\000"
 3855      53746174 
 3855      75735479 
 3855      70654465 
 3855      6600
 3856              	.LASF95:
 3857 0297 464C4153 		.ascii	"FLASH_OB_EnableWRP\000"
 3857      485F4F42 
 3857      5F456E61 
 3857      626C6557 
 3857      525000
 3858              	.LASF62:
 3859 02aa 50616765 		.ascii	"PageAddress\000"
 3859      41646472 
 3859      65737300 
 3860              	.LASF24:
 3861 02b6 4B455952 		.ascii	"KEYR\000"
 3861      00
 3862              	.LASF83:
 3863 02bb 464C4153 		.ascii	"FLASH_OB_GetUser\000"
 3863      485F4F42 
 3863      5F476574 
 3863      55736572 
 3863      00
 3864              	.LASF37:
 3865 02cc 6C6F6E67 		.ascii	"long double\000"
 3865      20646F75 
 3865      626C6500 
 3866              	.LASF53:
 3867 02d8 50726F63 		.ascii	"ProcedureOnGoing\000"
 3867      65647572 
 3867      654F6E47 
 3867      6F696E67 
 3867      00
 3868              	.LASF1:
 3869 02e9 756E7369 		.ascii	"unsigned char\000"
 3869      676E6564 
 3869      20636861 
 3869      7200
 3870              	.LASF112:
 3871 02f7 2F686F6D 		.ascii	"/home/berndoj/git/stm32tctst/lib/stm32f1hal\000"
 3871      652F6265 
 3871      726E646F 
 3871      6A2F6769 
 3871      742F7374 
 3872              	.LASF23:
 3873 0323 41504250 		.ascii	"APBPrescTable\000"
 3873      72657363 
ARM GAS  /tmp/cctMPBvi.s 			page 94


 3873      5461626C 
 3873      6500
 3874              	.LASF86:
 3875 0331 464C4153 		.ascii	"FLASH_OB_ProgramData\000"
 3875      485F4F42 
 3875      5F50726F 
 3875      6772616D 
 3875      44617461 
 3876              	.LASF0:
 3877 0346 7369676E 		.ascii	"signed char\000"
 3877      65642063 
 3877      68617200 
 3878              	.LASF109:
 3879 0352 61646472 		.ascii	"address\000"
 3879      65737300 
 3880              	.LASF81:
 3881 035a 72656164 		.ascii	"readstatus\000"
 3881      73746174 
 3881      757300
 3882              	.LASF17:
 3883 0365 75696E74 		.ascii	"uint32_t\000"
 3883      33325F74 
 3883      00
 3884              	.LASF79:
 3885 036e 75775469 		.ascii	"uwTickFreq\000"
 3885      636B4672 
 3885      657100
 3886              	.LASF13:
 3887 0379 756E7369 		.ascii	"unsigned int\000"
 3887      676E6564 
 3887      20696E74 
 3887      00
 3888              	.LASF15:
 3889 0386 75696E74 		.ascii	"uint16_t\000"
 3889      31365F74 
 3889      00
 3890              	.LASF94:
 3891 038f 57525030 		.ascii	"WRP0_Data\000"
 3891      5F446174 
 3891      6100
 3892              	.LASF99:
 3893 0399 704F4249 		.ascii	"pOBInit\000"
 3893      6E697400 
 3894              	.LASF75:
 3895 03a1 48414C5F 		.ascii	"HAL_TICK_FREQ_1KHZ\000"
 3895      5449434B 
 3895      5F465245 
 3895      515F314B 
 3895      485A00
 3896              	.LASF48:
 3897 03b4 464C4153 		.ascii	"FLASH_PROC_MASSERASE\000"
 3897      485F5052 
 3897      4F435F4D 
 3897      41535345 
 3897      52415345 
 3898              	.LASF113:
 3899 03c9 464C4153 		.ascii	"FLASH_MassErase\000"
ARM GAS  /tmp/cctMPBvi.s 			page 95


 3899      485F4D61 
 3899      73734572 
 3899      61736500 
 3900              	.LASF5:
 3901 03d9 73686F72 		.ascii	"short unsigned int\000"
 3901      7420756E 
 3901      7369676E 
 3901      65642069 
 3901      6E7400
 3902              	.LASF87:
 3903 03ec 73746174 		.ascii	"status\000"
 3903      757300
 3904              	.LASF61:
 3905 03f3 42616E6B 		.ascii	"Banks\000"
 3905      7300
 3906              	.LASF108:
 3907 03f9 50616765 		.ascii	"PageError\000"
 3907      4572726F 
 3907      7200
 3908              	.LASF16:
 3909 0403 696E7433 		.ascii	"int32_t\000"
 3909      325F7400 
 3910              	.LASF69:
 3911 040b 55534552 		.ascii	"USERConfig\000"
 3911      436F6E66 
 3911      696700
 3912              	.LASF6:
 3913 0416 5F5F696E 		.ascii	"__int32_t\000"
 3913      7433325F 
 3913      7400
 3914              	.LASF36:
 3915 0420 4F425F54 		.ascii	"OB_TypeDef\000"
 3915      79706544 
 3915      656600
 3916              	.LASF59:
 3917 042b 464C4153 		.ascii	"FLASH_ProcessTypeDef\000"
 3917      485F5072 
 3917      6F636573 
 3917      73547970 
 3917      65446566 
 3918              	.LASF30:
 3919 0440 44617461 		.ascii	"Data0\000"
 3919      3000
 3920              	.LASF21:
 3921 0446 53797374 		.ascii	"SystemCoreClock\000"
 3921      656D436F 
 3921      7265436C 
 3921      6F636B00 
 3922              	.LASF74:
 3923 0456 48414C5F 		.ascii	"HAL_TICK_FREQ_100HZ\000"
 3923      5449434B 
 3923      5F465245 
 3923      515F3130 
 3923      30485A00 
 3924              	.LASF11:
 3925 046a 5F5F7569 		.ascii	"__uint64_t\000"
 3925      6E743634 
ARM GAS  /tmp/cctMPBvi.s 			page 96


 3925      5F7400
 3926              	.LASF44:
 3927 0475 48414C5F 		.ascii	"HAL_LOCKED\000"
 3927      4C4F434B 
 3927      454400
 3928              	.LASF100:
 3929 0480 48414C5F 		.ascii	"HAL_FLASHEx_OBGetUserData\000"
 3929      464C4153 
 3929      4845785F 
 3929      4F424765 
 3929      74557365 
 3930              	.LASF22:
 3931 049a 41484250 		.ascii	"AHBPrescTable\000"
 3931      72657363 
 3931      5461626C 
 3931      6500
 3932              	.LASF9:
 3933 04a8 6C6F6E67 		.ascii	"long unsigned int\000"
 3933      20756E73 
 3933      69676E65 
 3933      6420696E 
 3933      7400
 3934              	.LASF68:
 3935 04ba 5244504C 		.ascii	"RDPLevel\000"
 3935      6576656C 
 3935      00
 3936              	.LASF110:
 3937 04c3 474E5520 		.ascii	"GNU C11 6.3.1 20170620 -mcpu=cortex-m3 -mthumb -g -"
 3937      43313120 
 3937      362E332E 
 3937      31203230 
 3937      31373036 
 3938 04f6 67647761 		.ascii	"gdwarf-2 -Os -fomit-frame-pointer\000"
 3938      72662D32 
 3938      202D4F73 
 3938      202D666F 
 3938      6D69742D 
 3939              	.LASF101:
 3940 0518 48414C5F 		.ascii	"HAL_FLASHEx_OBProgram\000"
 3940      464C4153 
 3940      4845785F 
 3940      4F425072 
 3940      6F677261 
 3941              	.LASF47:
 3942 052e 464C4153 		.ascii	"FLASH_PROC_PAGEERASE\000"
 3942      485F5052 
 3942      4F435F50 
 3942      41474545 
 3942      52415345 
 3943              	.LASF67:
 3944 0543 57525050 		.ascii	"WRPPage\000"
 3944      61676500 
 3945              	.LASF106:
 3946 054b 70457261 		.ascii	"pEraseInit\000"
 3946      7365496E 
 3946      697400
 3947              	.LASF66:
ARM GAS  /tmp/cctMPBvi.s 			page 97


 3948 0556 57525053 		.ascii	"WRPState\000"
 3948      74617465 
 3948      00
 3949              	.LASF82:
 3950 055f 746D705F 		.ascii	"tmp_reg\000"
 3950      72656700 
 3951              	.LASF29:
 3952 0567 55534552 		.ascii	"USER\000"
 3952      00
 3953              	.LASF63:
 3954 056c 4E625061 		.ascii	"NbPages\000"
 3954      67657300 
 3955              	.LASF31:
 3956 0574 44617461 		.ascii	"Data1\000"
 3956      3100
 3957              	.LASF46:
 3958 057a 464C4153 		.ascii	"FLASH_PROC_NONE\000"
 3958      485F5052 
 3958      4F435F4E 
 3958      4F4E4500 
 3959              	.LASF76:
 3960 058a 48414C5F 		.ascii	"HAL_TICK_FREQ_DEFAULT\000"
 3960      5449434B 
 3960      5F465245 
 3960      515F4445 
 3960      4641554C 
 3961              	.LASF107:
 3962 05a0 48414C5F 		.ascii	"HAL_FLASHEx_Erase\000"
 3962      464C4153 
 3962      4845785F 
 3962      45726173 
 3962      6500
 3963              	.LASF26:
 3964 05b2 52455345 		.ascii	"RESERVED\000"
 3964      52564544 
 3964      00
 3965              	.LASF28:
 3966 05bb 464C4153 		.ascii	"FLASH_TypeDef\000"
 3966      485F5479 
 3966      70654465 
 3966      6600
 3967              	.LASF114:
 3968 05c9 464C4153 		.ascii	"FLASH_WaitForLastOperation\000"
 3968      485F5761 
 3968      6974466F 
 3968      724C6173 
 3968      744F7065 
 3969              	.LASF20:
 3970 05e4 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3970      52784275 
 3970      66666572 
 3970      00
 3971              	.LASF89:
 3972 05f1 55736572 		.ascii	"UserConfig\000"
 3972      436F6E66 
 3972      696700
 3973              	.LASF54:
ARM GAS  /tmp/cctMPBvi.s 			page 98


 3974 05fc 44617461 		.ascii	"DataRemaining\000"
 3974      52656D61 
 3974      696E696E 
 3974      6700
 3975              	.LASF45:
 3976 060a 48414C5F 		.ascii	"HAL_LockTypeDef\000"
 3976      4C6F636B 
 3976      54797065 
 3976      44656600 
 3977              	.LASF58:
 3978 061a 4572726F 		.ascii	"ErrorCode\000"
 3978      72436F64 
 3978      6500
 3979              	.LASF97:
 3980 0624 464C4153 		.ascii	"FLASH_PageErase\000"
 3980      485F5061 
 3980      67654572 
 3980      61736500 
 3981              	.LASF80:
 3982 0634 70466C61 		.ascii	"pFlash\000"
 3982      736800
 3983              	.LASF85:
 3984 063b 464C4153 		.ascii	"FLASH_OB_GetRDP\000"
 3984      485F4F42 
 3984      5F476574 
 3984      52445000 
 3985              	.LASF64:
 3986 064b 464C4153 		.ascii	"FLASH_EraseInitTypeDef\000"
 3986      485F4572 
 3986      61736549 
 3986      6E697454 
 3986      79706544 
 3987              	.LASF90:
 3988 0662 464C4153 		.ascii	"FLASH_OB_RDP_LevelConfig\000"
 3988      485F4F42 
 3988      5F524450 
 3988      5F4C6576 
 3988      656C436F 
 3989              		.ident	"GCC: (15:6.3.1+svn253039-1build1) 6.3.1 20170620"
ARM GAS  /tmp/cctMPBvi.s 			page 99


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_flash_ex.c
     /tmp/cctMPBvi.s:69     .text:0000000000000000 $t
     /tmp/cctMPBvi.s:75     .text:0000000000000000 FLASH_MassErase.isra.0
     /tmp/cctMPBvi.s:101    .text:000000000000001c $d
     /tmp/cctMPBvi.s:106    .text:0000000000000024 $t
     /tmp/cctMPBvi.s:112    .text:0000000000000024 FLASH_OB_RDP_LevelConfig
     /tmp/cctMPBvi.s:196    .text:000000000000007c $d
     /tmp/cctMPBvi.s:202    .text:0000000000000088 $t
     /tmp/cctMPBvi.s:209    .text:0000000000000088 HAL_FLASHEx_OBErase
     /tmp/cctMPBvi.s:299    .text:00000000000000d4 $d
     /tmp/cctMPBvi.s:304    .text:00000000000000dc $t
     /tmp/cctMPBvi.s:311    .text:00000000000000dc HAL_FLASHEx_OBProgram
     /tmp/cctMPBvi.s:604    .text:0000000000000208 $d
     /tmp/cctMPBvi.s:610    .text:0000000000000214 $t
     /tmp/cctMPBvi.s:617    .text:0000000000000214 HAL_FLASHEx_OBGetConfig
     /tmp/cctMPBvi.s:668    .text:0000000000000238 $d
     /tmp/cctMPBvi.s:672    .text:000000000000023c $t
     /tmp/cctMPBvi.s:679    .text:000000000000023c HAL_FLASHEx_OBGetUserData
     /tmp/cctMPBvi.s:705    .text:0000000000000250 $d
     /tmp/cctMPBvi.s:710    .text:0000000000000258 $t
     /tmp/cctMPBvi.s:717    .text:0000000000000258 FLASH_PageErase
     /tmp/cctMPBvi.s:744    .text:0000000000000274 $d
     /tmp/cctMPBvi.s:749    .text:000000000000027c $t
     /tmp/cctMPBvi.s:756    .text:000000000000027c HAL_FLASHEx_Erase
     /tmp/cctMPBvi.s:885    .text:0000000000000310 $d
     /tmp/cctMPBvi.s:890    .text:0000000000000318 $t
     /tmp/cctMPBvi.s:897    .text:0000000000000318 HAL_FLASHEx_Erase_IT
     /tmp/cctMPBvi.s:978    .text:0000000000000360 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pFlash
FLASH_WaitForLastOperation
