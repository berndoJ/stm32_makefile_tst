ARM GAS  /tmp/ccvrs2bU.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"stm32f1xx_hal_smartcard.c"
  12              	@ GNU C11 (15:6.3.1+svn253039-1build1) version 6.3.1 20170620 (arm-none-eabi)
  13              	@	compiled by GNU C version 7.2.0, GMP version 6.1.2, MPFR version 4.0.1-rc1, MPC version 1.1.0, is
  14              	@ warning: MPFR header version 4.0.1-rc1 differs from library version 4.0.1.
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I ./inc -I ./inc/Legacy -I ../cmsisstm32f1xx/inc
  17              	@ -I ../cmsiscore/inc -imultilib thumb/v7-m -D__USES_INITFINI__
  18              	@ -D STM32F103x6 -D RUN_FROM_FLASH=1 -D __c src/stm32f1xx_hal_smartcard.c
  19              	@ -mcpu=cortex-m3 -mthumb -auxbase-strip bin/stm32f1xx_hal_smartcard.o -g
  20              	@ -gdwarf-2 -Os -Wall -fomit-frame-pointer -fverbose-asm
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffunction-cse -fgcse
  32              	@ -fgcse-lm -fgnu-runtime -fgnu-unique -fguess-branch-probability
  33              	@ -fhoist-adjacent-loads -fident -fif-conversion -fif-conversion2
  34              	@ -findirect-inlining -finline -finline-atomics -finline-functions
  35              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  36              	@ -fipa-cp-alignment -fipa-icf -fipa-icf-functions -fipa-icf-variables
  37              	@ -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra
  38              	@ -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  39              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  40              	@ -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  41              	@ -fmath-errno -fmerge-constants -fmerge-debug-strings
  42              	@ -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  43              	@ -fpartial-inlining -fpeephole -fpeephole2 -fplt -fprefetch-loop-arrays
  44              	@ -freg-struct-return -freorder-blocks -freorder-functions
  45              	@ -frerun-cse-after-loop -fsched-critical-path-heuristic
  46              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  47              	@ -fsched-last-insn-heuristic -fsched-pressure -fsched-rank-heuristic
  48              	@ -fsched-spec -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  49              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  50              	@ -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types
  51              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstrict-aliasing
  52              	@ -fstrict-overflow -fstrict-volatile-bitfields -fsync-libcalls
  53              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  54              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  55              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  56              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  57              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
ARM GAS  /tmp/ccvrs2bU.s 			page 2


  58              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  59              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  60              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  61              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  62              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  63              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  64              	@ -munaligned-access -mvectorize-with-neon-quad
  65              	
  66              		.text
  67              	.Ltext0:
  68              		.cfi_sections	.debug_frame
  69              		.align	1
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu softvfp
  74              		.type	SMARTCARD_DMATransmitCplt, %function
  75              	SMARTCARD_DMATransmitCplt:
  76              	.LFB90:
  77              		.file 1 "src/stm32f1xx_hal_smartcard.c"
   1:src/stm32f1xx_hal_smartcard.c **** /**
   2:src/stm32f1xx_hal_smartcard.c ****   ******************************************************************************
   3:src/stm32f1xx_hal_smartcard.c ****   * @file    stm32f1xx_hal_smartcard.c
   4:src/stm32f1xx_hal_smartcard.c ****   * @author  MCD Application Team
   5:src/stm32f1xx_hal_smartcard.c ****   * @brief   SMARTCARD HAL module driver.
   6:src/stm32f1xx_hal_smartcard.c ****   *          This file provides firmware functions to manage the following
   7:src/stm32f1xx_hal_smartcard.c ****   *          functionalities of the SMARTCARD peripheral:
   8:src/stm32f1xx_hal_smartcard.c ****   *           + Initialization and de-initialization functions
   9:src/stm32f1xx_hal_smartcard.c ****   *           + IO operation functions
  10:src/stm32f1xx_hal_smartcard.c ****   *           + Peripheral Control functions
  11:src/stm32f1xx_hal_smartcard.c ****   *           + Peripheral State and Error functions
  12:src/stm32f1xx_hal_smartcard.c ****   *
  13:src/stm32f1xx_hal_smartcard.c ****   @verbatim
  14:src/stm32f1xx_hal_smartcard.c ****   ==============================================================================
  15:src/stm32f1xx_hal_smartcard.c ****                      ##### How to use this driver #####
  16:src/stm32f1xx_hal_smartcard.c ****   ==============================================================================
  17:src/stm32f1xx_hal_smartcard.c ****     [..]
  18:src/stm32f1xx_hal_smartcard.c ****       The SMARTCARD HAL driver can be used as follows:
  19:src/stm32f1xx_hal_smartcard.c **** 
  20:src/stm32f1xx_hal_smartcard.c ****     (#) Declare a SMARTCARD_HandleTypeDef handle structure.
  21:src/stm32f1xx_hal_smartcard.c ****     (#) Initialize the SMARTCARD low level resources by implementing the HAL_SMARTCARD_MspInit() AP
  22:src/stm32f1xx_hal_smartcard.c ****         (##) Enable the interface clock of the USARTx associated to the SMARTCARD.
  23:src/stm32f1xx_hal_smartcard.c ****         (##) SMARTCARD pins configuration:
  24:src/stm32f1xx_hal_smartcard.c ****             (+++) Enable the clock for the SMARTCARD GPIOs.
  25:src/stm32f1xx_hal_smartcard.c ****             (+++) Configure SMARTCARD pins as alternate function pull-up.
  26:src/stm32f1xx_hal_smartcard.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_SMARTCARD_Transmit_IT()
  27:src/stm32f1xx_hal_smartcard.c ****              and HAL_SMARTCARD_Receive_IT() APIs):
  28:src/stm32f1xx_hal_smartcard.c ****             (+++) Configure the USARTx interrupt priority.
  29:src/stm32f1xx_hal_smartcard.c ****             (+++) Enable the NVIC USART IRQ handle.
  30:src/stm32f1xx_hal_smartcard.c ****         (##) DMA Configuration if you need to use DMA process (HAL_SMARTCARD_Transmit_DMA()
  31:src/stm32f1xx_hal_smartcard.c ****              and HAL_SMARTCARD_Receive_DMA() APIs):
  32:src/stm32f1xx_hal_smartcard.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  33:src/stm32f1xx_hal_smartcard.c ****             (+++) Enable the DMAx interface clock.
  34:src/stm32f1xx_hal_smartcard.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  35:src/stm32f1xx_hal_smartcard.c ****             (+++) Configure the DMA Tx/Rx channel.
  36:src/stm32f1xx_hal_smartcard.c ****             (+++) Associate the initialized DMA handle to the SMARTCARD DMA Tx/Rx handle.
  37:src/stm32f1xx_hal_smartcard.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
ARM GAS  /tmp/ccvrs2bU.s 			page 3


  38:src/stm32f1xx_hal_smartcard.c ****             (+++) Configure the USARTx interrupt priority and enable the NVIC USART IRQ handle
  39:src/stm32f1xx_hal_smartcard.c ****                   (used for last byte sending completion detection in DMA non circular mode)
  40:src/stm32f1xx_hal_smartcard.c **** 
  41:src/stm32f1xx_hal_smartcard.c ****     (#) Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware
  42:src/stm32f1xx_hal_smartcard.c ****         flow control and Mode(Receiver/Transmitter) in the SMARTCARD Init structure.
  43:src/stm32f1xx_hal_smartcard.c **** 
  44:src/stm32f1xx_hal_smartcard.c ****     (#) Initialize the SMARTCARD registers by calling the HAL_SMARTCARD_Init() API:
  45:src/stm32f1xx_hal_smartcard.c ****         (++) These APIs configure also the low level Hardware GPIO, CLOCK, CORTEX...etc)
  46:src/stm32f1xx_hal_smartcard.c ****              by calling the customized HAL_SMARTCARD_MspInit() API.
  47:src/stm32f1xx_hal_smartcard.c ****     [..]
  48:src/stm32f1xx_hal_smartcard.c ****     (@) The specific SMARTCARD interrupts (Transmission complete interrupt,
  49:src/stm32f1xx_hal_smartcard.c ****         RXNE interrupt and Error Interrupts) will be managed using the macros
  50:src/stm32f1xx_hal_smartcard.c ****         __HAL_SMARTCARD_ENABLE_IT() and __HAL_SMARTCARD_DISABLE_IT() inside the transmit and receiv
  51:src/stm32f1xx_hal_smartcard.c **** 
  52:src/stm32f1xx_hal_smartcard.c ****     [..]
  53:src/stm32f1xx_hal_smartcard.c ****     Three operation modes are available within this driver :
  54:src/stm32f1xx_hal_smartcard.c **** 
  55:src/stm32f1xx_hal_smartcard.c ****     *** Polling mode IO operation ***
  56:src/stm32f1xx_hal_smartcard.c ****     =================================
  57:src/stm32f1xx_hal_smartcard.c ****     [..]
  58:src/stm32f1xx_hal_smartcard.c ****       (+) Send an amount of data in blocking mode using HAL_SMARTCARD_Transmit()
  59:src/stm32f1xx_hal_smartcard.c ****       (+) Receive an amount of data in blocking mode using HAL_SMARTCARD_Receive()
  60:src/stm32f1xx_hal_smartcard.c **** 
  61:src/stm32f1xx_hal_smartcard.c ****     *** Interrupt mode IO operation ***
  62:src/stm32f1xx_hal_smartcard.c ****     ===================================
  63:src/stm32f1xx_hal_smartcard.c ****     [..]
  64:src/stm32f1xx_hal_smartcard.c ****       (+) Send an amount of data in non blocking mode using HAL_SMARTCARD_Transmit_IT()
  65:src/stm32f1xx_hal_smartcard.c ****       (+) At transmission end of transfer HAL_SMARTCARD_TxCpltCallback is executed and user can
  66:src/stm32f1xx_hal_smartcard.c ****           add his own code by customization of function pointer HAL_SMARTCARD_TxCpltCallback
  67:src/stm32f1xx_hal_smartcard.c ****       (+) Receive an amount of data in non blocking mode using HAL_SMARTCARD_Receive_IT()
  68:src/stm32f1xx_hal_smartcard.c ****       (+) At reception end of transfer HAL_SMARTCARD_RxCpltCallback is executed and user can
  69:src/stm32f1xx_hal_smartcard.c ****           add his own code by customization of function pointer HAL_SMARTCARD_RxCpltCallback
  70:src/stm32f1xx_hal_smartcard.c ****       (+) In case of transfer Error, HAL_SMARTCARD_ErrorCallback() function is executed and user ca
  71:src/stm32f1xx_hal_smartcard.c ****           add his own code by customization of function pointer HAL_SMARTCARD_ErrorCallback
  72:src/stm32f1xx_hal_smartcard.c **** 
  73:src/stm32f1xx_hal_smartcard.c ****     *** DMA mode IO operation ***
  74:src/stm32f1xx_hal_smartcard.c ****     ==============================
  75:src/stm32f1xx_hal_smartcard.c ****     [..]
  76:src/stm32f1xx_hal_smartcard.c ****       (+) Send an amount of data in non blocking mode (DMA) using HAL_SMARTCARD_Transmit_DMA()
  77:src/stm32f1xx_hal_smartcard.c ****       (+) At transmission end of transfer HAL_SMARTCARD_TxCpltCallback is executed and user can
  78:src/stm32f1xx_hal_smartcard.c ****           add his own code by customization of function pointer HAL_SMARTCARD_TxCpltCallback
  79:src/stm32f1xx_hal_smartcard.c ****       (+) Receive an amount of data in non blocking mode (DMA) using HAL_SMARTCARD_Receive_DMA()
  80:src/stm32f1xx_hal_smartcard.c ****       (+) At reception end of transfer HAL_SMARTCARD_RxCpltCallback is executed and user can
  81:src/stm32f1xx_hal_smartcard.c ****           add his own code by customization of function pointer HAL_SMARTCARD_RxCpltCallback
  82:src/stm32f1xx_hal_smartcard.c ****       (+) In case of transfer Error, HAL_SMARTCARD_ErrorCallback() function is executed and user ca
  83:src/stm32f1xx_hal_smartcard.c ****           add his own code by customization of function pointer HAL_SMARTCARD_ErrorCallback
  84:src/stm32f1xx_hal_smartcard.c **** 
  85:src/stm32f1xx_hal_smartcard.c ****     *** SMARTCARD HAL driver macros list ***
  86:src/stm32f1xx_hal_smartcard.c ****     ========================================
  87:src/stm32f1xx_hal_smartcard.c ****     [..]
  88:src/stm32f1xx_hal_smartcard.c ****       Below the list of most used macros in SMARTCARD HAL driver.
  89:src/stm32f1xx_hal_smartcard.c **** 
  90:src/stm32f1xx_hal_smartcard.c ****       (+) __HAL_SMARTCARD_ENABLE: Enable the SMARTCARD peripheral
  91:src/stm32f1xx_hal_smartcard.c ****       (+) __HAL_SMARTCARD_DISABLE: Disable the SMARTCARD peripheral
  92:src/stm32f1xx_hal_smartcard.c ****       (+) __HAL_SMARTCARD_GET_FLAG : Check whether the specified SMARTCARD flag is set or not
  93:src/stm32f1xx_hal_smartcard.c ****       (+) __HAL_SMARTCARD_CLEAR_FLAG : Clear the specified SMARTCARD pending flag
  94:src/stm32f1xx_hal_smartcard.c ****       (+) __HAL_SMARTCARD_ENABLE_IT: Enable the specified SMARTCARD interrupt
ARM GAS  /tmp/ccvrs2bU.s 			page 4


  95:src/stm32f1xx_hal_smartcard.c ****       (+) __HAL_SMARTCARD_DISABLE_IT: Disable the specified SMARTCARD interrupt
  96:src/stm32f1xx_hal_smartcard.c **** 
  97:src/stm32f1xx_hal_smartcard.c ****     [..]
  98:src/stm32f1xx_hal_smartcard.c ****       (@) You can refer to the SMARTCARD HAL driver header file for more useful macros
  99:src/stm32f1xx_hal_smartcard.c **** 
 100:src/stm32f1xx_hal_smartcard.c ****     ##### Callback registration #####
 101:src/stm32f1xx_hal_smartcard.c ****     ==================================
 102:src/stm32f1xx_hal_smartcard.c **** 
 103:src/stm32f1xx_hal_smartcard.c ****     [..]
 104:src/stm32f1xx_hal_smartcard.c ****     The compilation define USE_HAL_SMARTCARD_REGISTER_CALLBACKS when set to 1
 105:src/stm32f1xx_hal_smartcard.c ****     allows the user to configure dynamically the driver callbacks.
 106:src/stm32f1xx_hal_smartcard.c **** 
 107:src/stm32f1xx_hal_smartcard.c ****     [..]
 108:src/stm32f1xx_hal_smartcard.c ****     Use Function @ref HAL_SMARTCARD_RegisterCallback() to register a user callback.
 109:src/stm32f1xx_hal_smartcard.c ****     Function @ref HAL_SMARTCARD_RegisterCallback() allows to register following callbacks:
 110:src/stm32f1xx_hal_smartcard.c ****     (+) TxCpltCallback            : Tx Complete Callback.
 111:src/stm32f1xx_hal_smartcard.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 112:src/stm32f1xx_hal_smartcard.c ****     (+) ErrorCallback             : Error Callback.
 113:src/stm32f1xx_hal_smartcard.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 114:src/stm32f1xx_hal_smartcard.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 115:src/stm32f1xx_hal_smartcard.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 116:src/stm32f1xx_hal_smartcard.c ****     (+) MspInitCallback           : SMARTCARD MspInit.
 117:src/stm32f1xx_hal_smartcard.c ****     (+) MspDeInitCallback         : SMARTCARD MspDeInit.
 118:src/stm32f1xx_hal_smartcard.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
 119:src/stm32f1xx_hal_smartcard.c ****     and a pointer to the user callback function.
 120:src/stm32f1xx_hal_smartcard.c **** 
 121:src/stm32f1xx_hal_smartcard.c ****     [..]
 122:src/stm32f1xx_hal_smartcard.c ****     Use function @ref HAL_SMARTCARD_UnRegisterCallback() to reset a callback to the default
 123:src/stm32f1xx_hal_smartcard.c ****     weak (surcharged) function.
 124:src/stm32f1xx_hal_smartcard.c ****     @ref HAL_SMARTCARD_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 125:src/stm32f1xx_hal_smartcard.c ****     and the Callback ID.
 126:src/stm32f1xx_hal_smartcard.c ****     This function allows to reset following callbacks:
 127:src/stm32f1xx_hal_smartcard.c ****     (+) TxCpltCallback            : Tx Complete Callback.
 128:src/stm32f1xx_hal_smartcard.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 129:src/stm32f1xx_hal_smartcard.c ****     (+) ErrorCallback             : Error Callback.
 130:src/stm32f1xx_hal_smartcard.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 131:src/stm32f1xx_hal_smartcard.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 132:src/stm32f1xx_hal_smartcard.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 133:src/stm32f1xx_hal_smartcard.c ****     (+) MspInitCallback           : SMARTCARD MspInit.
 134:src/stm32f1xx_hal_smartcard.c ****     (+) MspDeInitCallback         : SMARTCARD MspDeInit.
 135:src/stm32f1xx_hal_smartcard.c **** 
 136:src/stm32f1xx_hal_smartcard.c ****     [..]
 137:src/stm32f1xx_hal_smartcard.c ****     By default, after the @ref HAL_SMARTCARD_Init() and when the state is HAL_SMARTCARD_STATE_RESET
 138:src/stm32f1xx_hal_smartcard.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 139:src/stm32f1xx_hal_smartcard.c ****     examples @ref HAL_SMARTCARD_TxCpltCallback(), @ref HAL_SMARTCARD_RxCpltCallback().
 140:src/stm32f1xx_hal_smartcard.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 141:src/stm32f1xx_hal_smartcard.c ****     reset to the legacy weak (surcharged) functions in the @ref HAL_SMARTCARD_Init()
 142:src/stm32f1xx_hal_smartcard.c ****     and @ref HAL_SMARTCARD_DeInit() only when these callbacks are null (not registered beforehand).
 143:src/stm32f1xx_hal_smartcard.c ****     If not, MspInit or MspDeInit are not null, the @ref HAL_SMARTCARD_Init() and @ref HAL_SMARTCARD
 144:src/stm32f1xx_hal_smartcard.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 145:src/stm32f1xx_hal_smartcard.c **** 
 146:src/stm32f1xx_hal_smartcard.c ****     [..]
 147:src/stm32f1xx_hal_smartcard.c ****     Callbacks can be registered/unregistered in HAL_SMARTCARD_STATE_READY state only.
 148:src/stm32f1xx_hal_smartcard.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
 149:src/stm32f1xx_hal_smartcard.c ****     in HAL_SMARTCARD_STATE_READY or HAL_SMARTCARD_STATE_RESET state, thus registered (user)
 150:src/stm32f1xx_hal_smartcard.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 151:src/stm32f1xx_hal_smartcard.c ****     In that case first register the MspInit/MspDeInit user callbacks
ARM GAS  /tmp/ccvrs2bU.s 			page 5


 152:src/stm32f1xx_hal_smartcard.c ****     using @ref HAL_SMARTCARD_RegisterCallback() before calling @ref HAL_SMARTCARD_DeInit()
 153:src/stm32f1xx_hal_smartcard.c ****     or @ref HAL_SMARTCARD_Init() function.
 154:src/stm32f1xx_hal_smartcard.c **** 
 155:src/stm32f1xx_hal_smartcard.c ****     [..]
 156:src/stm32f1xx_hal_smartcard.c ****     When The compilation define USE_HAL_SMARTCARD_REGISTER_CALLBACKS is set to 0 or
 157:src/stm32f1xx_hal_smartcard.c ****     not defined, the callback registration feature is not available
 158:src/stm32f1xx_hal_smartcard.c ****     and weak (surcharged) callbacks are used.
 159:src/stm32f1xx_hal_smartcard.c **** 
 160:src/stm32f1xx_hal_smartcard.c ****   @endverbatim
 161:src/stm32f1xx_hal_smartcard.c ****   ******************************************************************************
 162:src/stm32f1xx_hal_smartcard.c ****   * @attention
 163:src/stm32f1xx_hal_smartcard.c ****   *
 164:src/stm32f1xx_hal_smartcard.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 165:src/stm32f1xx_hal_smartcard.c ****   * All rights reserved.</center></h2>
 166:src/stm32f1xx_hal_smartcard.c ****   *
 167:src/stm32f1xx_hal_smartcard.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 168:src/stm32f1xx_hal_smartcard.c ****   * the "License"; You may not use this file except in compliance with the
 169:src/stm32f1xx_hal_smartcard.c ****   * License. You may obtain a copy of the License at:
 170:src/stm32f1xx_hal_smartcard.c ****   *                        opensource.org/licenses/BSD-3-Clause
 171:src/stm32f1xx_hal_smartcard.c ****   *
 172:src/stm32f1xx_hal_smartcard.c ****   ******************************************************************************
 173:src/stm32f1xx_hal_smartcard.c ****   */
 174:src/stm32f1xx_hal_smartcard.c **** 
 175:src/stm32f1xx_hal_smartcard.c **** /* Includes ------------------------------------------------------------------*/
 176:src/stm32f1xx_hal_smartcard.c **** #include "stm32f1xx_hal.h"
 177:src/stm32f1xx_hal_smartcard.c **** 
 178:src/stm32f1xx_hal_smartcard.c **** /** @addtogroup STM32F1xx_HAL_Driver
 179:src/stm32f1xx_hal_smartcard.c ****   * @{
 180:src/stm32f1xx_hal_smartcard.c ****   */
 181:src/stm32f1xx_hal_smartcard.c **** 
 182:src/stm32f1xx_hal_smartcard.c **** /** @defgroup SMARTCARD SMARTCARD
 183:src/stm32f1xx_hal_smartcard.c ****   * @brief HAL SMARTCARD module driver
 184:src/stm32f1xx_hal_smartcard.c ****   * @{
 185:src/stm32f1xx_hal_smartcard.c ****   */
 186:src/stm32f1xx_hal_smartcard.c **** #ifdef HAL_SMARTCARD_MODULE_ENABLED
 187:src/stm32f1xx_hal_smartcard.c **** /* Private typedef -----------------------------------------------------------*/
 188:src/stm32f1xx_hal_smartcard.c **** /* Private define ------------------------------------------------------------*/
 189:src/stm32f1xx_hal_smartcard.c **** /** @addtogroup SMARTCARD_Private_Constants
 190:src/stm32f1xx_hal_smartcard.c ****   * @{
 191:src/stm32f1xx_hal_smartcard.c ****   */
 192:src/stm32f1xx_hal_smartcard.c **** /**
 193:src/stm32f1xx_hal_smartcard.c ****   * @}
 194:src/stm32f1xx_hal_smartcard.c ****   */
 195:src/stm32f1xx_hal_smartcard.c **** 
 196:src/stm32f1xx_hal_smartcard.c **** /* Private macro -------------------------------------------------------------*/
 197:src/stm32f1xx_hal_smartcard.c **** /* Private variables ---------------------------------------------------------*/
 198:src/stm32f1xx_hal_smartcard.c **** /* Private function prototypes -----------------------------------------------*/
 199:src/stm32f1xx_hal_smartcard.c **** /** @addtogroup SMARTCARD_Private_Functions
 200:src/stm32f1xx_hal_smartcard.c ****   * @{
 201:src/stm32f1xx_hal_smartcard.c ****   */
 202:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
 203:src/stm32f1xx_hal_smartcard.c **** void SMARTCARD_InitCallbacksToDefault(SMARTCARD_HandleTypeDef *hsc);
 204:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACKS */
 205:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_EndTxTransfer(SMARTCARD_HandleTypeDef *hsc);
 206:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_EndRxTransfer(SMARTCARD_HandleTypeDef *hsc);
 207:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_SetConfig (SMARTCARD_HandleTypeDef *hsc);
 208:src/stm32f1xx_hal_smartcard.c **** static HAL_StatusTypeDef SMARTCARD_Transmit_IT(SMARTCARD_HandleTypeDef *hsc);
ARM GAS  /tmp/ccvrs2bU.s 			page 6


 209:src/stm32f1xx_hal_smartcard.c **** static HAL_StatusTypeDef SMARTCARD_EndTransmit_IT(SMARTCARD_HandleTypeDef *hsc);
 210:src/stm32f1xx_hal_smartcard.c **** static HAL_StatusTypeDef SMARTCARD_Receive_IT(SMARTCARD_HandleTypeDef *hsc);
 211:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 212:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 213:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_DMAError(DMA_HandleTypeDef *hdma);
 214:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 215:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 216:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 217:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 218:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 219:src/stm32f1xx_hal_smartcard.c **** static HAL_StatusTypeDef SMARTCARD_WaitOnFlagUntilTimeout(SMARTCARD_HandleTypeDef *hsc, uint32_t Fl
 220:src/stm32f1xx_hal_smartcard.c **** /**
 221:src/stm32f1xx_hal_smartcard.c ****   * @}
 222:src/stm32f1xx_hal_smartcard.c ****   */
 223:src/stm32f1xx_hal_smartcard.c **** 
 224:src/stm32f1xx_hal_smartcard.c **** /* Exported functions --------------------------------------------------------*/
 225:src/stm32f1xx_hal_smartcard.c **** /** @defgroup SMARTCARD_Exported_Functions SMARTCARD Exported Functions
 226:src/stm32f1xx_hal_smartcard.c ****   * @{
 227:src/stm32f1xx_hal_smartcard.c ****   */
 228:src/stm32f1xx_hal_smartcard.c **** 
 229:src/stm32f1xx_hal_smartcard.c **** /** @defgroup SMARTCARD_Exported_Functions_Group1 SmartCard Initialization and de-initialization fu
 230:src/stm32f1xx_hal_smartcard.c ****   *  @brief    Initialization and Configuration functions
 231:src/stm32f1xx_hal_smartcard.c ****   *
 232:src/stm32f1xx_hal_smartcard.c **** @verbatim
 233:src/stm32f1xx_hal_smartcard.c ****   ==============================================================================
 234:src/stm32f1xx_hal_smartcard.c ****               ##### Initialization and Configuration functions #####
 235:src/stm32f1xx_hal_smartcard.c ****   ==============================================================================
 236:src/stm32f1xx_hal_smartcard.c ****   [..]
 237:src/stm32f1xx_hal_smartcard.c ****   This subsection provides a set of functions allowing to initialize the USART
 238:src/stm32f1xx_hal_smartcard.c ****   in Smartcard mode.
 239:src/stm32f1xx_hal_smartcard.c ****   [..]
 240:src/stm32f1xx_hal_smartcard.c ****   The Smartcard interface is designed to support asynchronous protocol Smartcards as
 241:src/stm32f1xx_hal_smartcard.c ****   defined in the ISO 7816-3 standard.
 242:src/stm32f1xx_hal_smartcard.c ****   [..]
 243:src/stm32f1xx_hal_smartcard.c ****   The USART can provide a clock to the smartcard through the SCLK output.
 244:src/stm32f1xx_hal_smartcard.c ****   In smartcard mode, SCLK is not associated to the communication but is simply derived
 245:src/stm32f1xx_hal_smartcard.c ****   from the internal peripheral input clock through a 5-bit prescaler.
 246:src/stm32f1xx_hal_smartcard.c ****   [..]
 247:src/stm32f1xx_hal_smartcard.c ****   (+) For the Smartcard mode only these parameters can be configured:
 248:src/stm32f1xx_hal_smartcard.c ****       (++) Baud Rate
 249:src/stm32f1xx_hal_smartcard.c ****       (++) Word Length => Should be 9 bits (8 bits + parity)
 250:src/stm32f1xx_hal_smartcard.c ****       (++) Stop Bit
 251:src/stm32f1xx_hal_smartcard.c ****       (++) Parity: => Should be enabled
 252:src/stm32f1xx_hal_smartcard.c ****       (++) USART polarity
 253:src/stm32f1xx_hal_smartcard.c ****       (++) USART phase
 254:src/stm32f1xx_hal_smartcard.c ****       (++) USART LastBit
 255:src/stm32f1xx_hal_smartcard.c ****       (++) Receiver/transmitter modes
 256:src/stm32f1xx_hal_smartcard.c ****       (++) Prescaler
 257:src/stm32f1xx_hal_smartcard.c ****       (++) GuardTime
 258:src/stm32f1xx_hal_smartcard.c ****       (++) NACKState: The Smartcard NACK state
 259:src/stm32f1xx_hal_smartcard.c **** 
 260:src/stm32f1xx_hal_smartcard.c ****      (+) Recommended SmartCard interface configuration to get the Answer to Reset from the Card:
 261:src/stm32f1xx_hal_smartcard.c ****         (++) Word Length = 9 Bits
 262:src/stm32f1xx_hal_smartcard.c ****         (++) 1.5 Stop Bit
 263:src/stm32f1xx_hal_smartcard.c ****         (++) Even parity
 264:src/stm32f1xx_hal_smartcard.c ****         (++) BaudRate = 12096 baud
 265:src/stm32f1xx_hal_smartcard.c ****         (++) Tx and Rx enabled
ARM GAS  /tmp/ccvrs2bU.s 			page 7


 266:src/stm32f1xx_hal_smartcard.c ****   [..]
 267:src/stm32f1xx_hal_smartcard.c ****   Please refer to the ISO 7816-3 specification for more details.
 268:src/stm32f1xx_hal_smartcard.c **** 
 269:src/stm32f1xx_hal_smartcard.c ****   [..]
 270:src/stm32f1xx_hal_smartcard.c ****    (@) It is also possible to choose 0.5 stop bit for receiving but it is recommended
 271:src/stm32f1xx_hal_smartcard.c ****        to use 1.5 stop bits for both transmitting and receiving to avoid switching
 272:src/stm32f1xx_hal_smartcard.c ****        between the two configurations.
 273:src/stm32f1xx_hal_smartcard.c ****   [..]
 274:src/stm32f1xx_hal_smartcard.c ****     The HAL_SMARTCARD_Init() function follows the USART  SmartCard configuration
 275:src/stm32f1xx_hal_smartcard.c ****     procedures (details for the procedures are available in reference manuals
 276:src/stm32f1xx_hal_smartcard.c ****     (RM0008 for STM32F10Xxx MCUs and RM0041 for STM32F100xx MCUs)).
 277:src/stm32f1xx_hal_smartcard.c **** 
 278:src/stm32f1xx_hal_smartcard.c **** @endverbatim
 279:src/stm32f1xx_hal_smartcard.c **** 
 280:src/stm32f1xx_hal_smartcard.c ****   The SMARTCARD frame format is given in the following table:
 281:src/stm32f1xx_hal_smartcard.c ****        +-------------------------------------------------------------+
 282:src/stm32f1xx_hal_smartcard.c ****        |   M bit |  PCE bit  |        SMARTCARD frame                |
 283:src/stm32f1xx_hal_smartcard.c ****        |---------------------|---------------------------------------|
 284:src/stm32f1xx_hal_smartcard.c ****        |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 285:src/stm32f1xx_hal_smartcard.c ****        +-------------------------------------------------------------+
 286:src/stm32f1xx_hal_smartcard.c ****   * @{
 287:src/stm32f1xx_hal_smartcard.c ****   */
 288:src/stm32f1xx_hal_smartcard.c **** 
 289:src/stm32f1xx_hal_smartcard.c **** /**
 290:src/stm32f1xx_hal_smartcard.c ****   * @brief  Initializes the SmartCard mode according to the specified
 291:src/stm32f1xx_hal_smartcard.c ****   *         parameters in the SMARTCARD_InitTypeDef and create the associated handle.
 292:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
 293:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
 294:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
 295:src/stm32f1xx_hal_smartcard.c ****   */
 296:src/stm32f1xx_hal_smartcard.c **** HAL_StatusTypeDef HAL_SMARTCARD_Init(SMARTCARD_HandleTypeDef *hsc)
 297:src/stm32f1xx_hal_smartcard.c **** {
 298:src/stm32f1xx_hal_smartcard.c ****   /* Check the SMARTCARD handle allocation */
 299:src/stm32f1xx_hal_smartcard.c ****   if(hsc == NULL)
 300:src/stm32f1xx_hal_smartcard.c ****   {
 301:src/stm32f1xx_hal_smartcard.c ****     return HAL_ERROR;
 302:src/stm32f1xx_hal_smartcard.c ****   }
 303:src/stm32f1xx_hal_smartcard.c **** 
 304:src/stm32f1xx_hal_smartcard.c ****   /* Check the parameters */
 305:src/stm32f1xx_hal_smartcard.c ****   assert_param(IS_SMARTCARD_INSTANCE(hsc->Instance));
 306:src/stm32f1xx_hal_smartcard.c ****   assert_param(IS_SMARTCARD_NACK_STATE(hsc->Init.NACKState));
 307:src/stm32f1xx_hal_smartcard.c **** 
 308:src/stm32f1xx_hal_smartcard.c ****   if(hsc->gState == HAL_SMARTCARD_STATE_RESET)
 309:src/stm32f1xx_hal_smartcard.c ****   {
 310:src/stm32f1xx_hal_smartcard.c ****     /* Allocate lock resource and initialize it */
 311:src/stm32f1xx_hal_smartcard.c ****     hsc->Lock = HAL_UNLOCKED;
 312:src/stm32f1xx_hal_smartcard.c **** 
 313:src/stm32f1xx_hal_smartcard.c **** #if USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1
 314:src/stm32f1xx_hal_smartcard.c ****     SMARTCARD_InitCallbacksToDefault(hsc);
 315:src/stm32f1xx_hal_smartcard.c **** 
 316:src/stm32f1xx_hal_smartcard.c ****     if (hsc->MspInitCallback == NULL)
 317:src/stm32f1xx_hal_smartcard.c ****     {
 318:src/stm32f1xx_hal_smartcard.c ****       hsc->MspInitCallback = HAL_SMARTCARD_MspInit;
 319:src/stm32f1xx_hal_smartcard.c ****     }
 320:src/stm32f1xx_hal_smartcard.c **** 
 321:src/stm32f1xx_hal_smartcard.c ****     /* Init the low level hardware */
 322:src/stm32f1xx_hal_smartcard.c ****     hsc->MspInitCallback(hsc);
ARM GAS  /tmp/ccvrs2bU.s 			page 8


 323:src/stm32f1xx_hal_smartcard.c **** #else
 324:src/stm32f1xx_hal_smartcard.c ****     /* Init the low level hardware : GPIO, CLOCK */
 325:src/stm32f1xx_hal_smartcard.c ****     HAL_SMARTCARD_MspInit(hsc);
 326:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACKS */
 327:src/stm32f1xx_hal_smartcard.c ****   }
 328:src/stm32f1xx_hal_smartcard.c **** 
 329:src/stm32f1xx_hal_smartcard.c ****   hsc->gState = HAL_SMARTCARD_STATE_BUSY;
 330:src/stm32f1xx_hal_smartcard.c **** 
 331:src/stm32f1xx_hal_smartcard.c ****   /* Set the Prescaler */
 332:src/stm32f1xx_hal_smartcard.c ****   MODIFY_REG(hsc->Instance->GTPR, USART_GTPR_PSC, hsc->Init.Prescaler);
 333:src/stm32f1xx_hal_smartcard.c **** 
 334:src/stm32f1xx_hal_smartcard.c ****   /* Set the Guard Time */
 335:src/stm32f1xx_hal_smartcard.c ****   MODIFY_REG(hsc->Instance->GTPR, USART_GTPR_GT, ((hsc->Init.GuardTime)<<8U));
 336:src/stm32f1xx_hal_smartcard.c **** 
 337:src/stm32f1xx_hal_smartcard.c ****   /* Set the Smartcard Communication parameters */
 338:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_SetConfig(hsc);
 339:src/stm32f1xx_hal_smartcard.c **** 
 340:src/stm32f1xx_hal_smartcard.c ****   /* In SmartCard mode, the following bits must be kept cleared:
 341:src/stm32f1xx_hal_smartcard.c ****   - LINEN bit in the USART_CR2 register
 342:src/stm32f1xx_hal_smartcard.c ****   - HDSEL and IREN bits in the USART_CR3 register.*/
 343:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR2, USART_CR2_LINEN);
 344:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
 345:src/stm32f1xx_hal_smartcard.c **** 
 346:src/stm32f1xx_hal_smartcard.c ****   /* Enable the SMARTCARD Parity Error Interrupt */
 347:src/stm32f1xx_hal_smartcard.c ****   SET_BIT(hsc->Instance->CR1, USART_CR1_PEIE);
 348:src/stm32f1xx_hal_smartcard.c **** 
 349:src/stm32f1xx_hal_smartcard.c ****   /* Enable the SMARTCARD Framing Error Interrupt */
 350:src/stm32f1xx_hal_smartcard.c ****   SET_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 351:src/stm32f1xx_hal_smartcard.c **** 
 352:src/stm32f1xx_hal_smartcard.c ****   /* Enable the Peripheral */
 353:src/stm32f1xx_hal_smartcard.c ****   __HAL_SMARTCARD_ENABLE(hsc);
 354:src/stm32f1xx_hal_smartcard.c **** 
 355:src/stm32f1xx_hal_smartcard.c ****   /* Configure the Smartcard NACK state */
 356:src/stm32f1xx_hal_smartcard.c ****   MODIFY_REG(hsc->Instance->CR3, USART_CR3_NACK, hsc->Init.NACKState);
 357:src/stm32f1xx_hal_smartcard.c **** 
 358:src/stm32f1xx_hal_smartcard.c ****   /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 359:src/stm32f1xx_hal_smartcard.c ****   hsc->Instance->CR3 |= (USART_CR3_SCEN);
 360:src/stm32f1xx_hal_smartcard.c **** 
 361:src/stm32f1xx_hal_smartcard.c ****   /* Initialize the SMARTCARD state*/
 362:src/stm32f1xx_hal_smartcard.c ****   hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
 363:src/stm32f1xx_hal_smartcard.c ****   hsc->gState= HAL_SMARTCARD_STATE_READY;
 364:src/stm32f1xx_hal_smartcard.c ****   hsc->RxState= HAL_SMARTCARD_STATE_READY;
 365:src/stm32f1xx_hal_smartcard.c **** 
 366:src/stm32f1xx_hal_smartcard.c ****   return HAL_OK;
 367:src/stm32f1xx_hal_smartcard.c **** }
 368:src/stm32f1xx_hal_smartcard.c **** 
 369:src/stm32f1xx_hal_smartcard.c **** /**
 370:src/stm32f1xx_hal_smartcard.c ****   * @brief DeInitializes the USART SmartCard peripheral
 371:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
 372:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
 373:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
 374:src/stm32f1xx_hal_smartcard.c ****   */
 375:src/stm32f1xx_hal_smartcard.c **** HAL_StatusTypeDef HAL_SMARTCARD_DeInit(SMARTCARD_HandleTypeDef *hsc)
 376:src/stm32f1xx_hal_smartcard.c **** {
 377:src/stm32f1xx_hal_smartcard.c ****   /* Check the SMARTCARD handle allocation */
 378:src/stm32f1xx_hal_smartcard.c ****   if(hsc == NULL)
 379:src/stm32f1xx_hal_smartcard.c ****   {
ARM GAS  /tmp/ccvrs2bU.s 			page 9


 380:src/stm32f1xx_hal_smartcard.c ****     return HAL_ERROR;
 381:src/stm32f1xx_hal_smartcard.c ****   }
 382:src/stm32f1xx_hal_smartcard.c **** 
 383:src/stm32f1xx_hal_smartcard.c ****   /* Check the parameters */
 384:src/stm32f1xx_hal_smartcard.c ****   assert_param(IS_SMARTCARD_INSTANCE(hsc->Instance));
 385:src/stm32f1xx_hal_smartcard.c **** 
 386:src/stm32f1xx_hal_smartcard.c ****   hsc->gState = HAL_SMARTCARD_STATE_BUSY;
 387:src/stm32f1xx_hal_smartcard.c **** 
 388:src/stm32f1xx_hal_smartcard.c ****   /* Disable the Peripheral */
 389:src/stm32f1xx_hal_smartcard.c ****   __HAL_SMARTCARD_DISABLE(hsc);
 390:src/stm32f1xx_hal_smartcard.c **** 
 391:src/stm32f1xx_hal_smartcard.c ****   /* DeInit the low level hardware */
 392:src/stm32f1xx_hal_smartcard.c **** #if USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1
 393:src/stm32f1xx_hal_smartcard.c ****   if (hsc->MspDeInitCallback == NULL)
 394:src/stm32f1xx_hal_smartcard.c ****   {
 395:src/stm32f1xx_hal_smartcard.c ****     hsc->MspDeInitCallback = HAL_SMARTCARD_MspDeInit;
 396:src/stm32f1xx_hal_smartcard.c ****   }
 397:src/stm32f1xx_hal_smartcard.c ****   /* DeInit the low level hardware */
 398:src/stm32f1xx_hal_smartcard.c ****   hsc->MspDeInitCallback(hsc);
 399:src/stm32f1xx_hal_smartcard.c **** #else
 400:src/stm32f1xx_hal_smartcard.c ****   HAL_SMARTCARD_MspDeInit(hsc);
 401:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACKS */
 402:src/stm32f1xx_hal_smartcard.c **** 
 403:src/stm32f1xx_hal_smartcard.c ****   hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
 404:src/stm32f1xx_hal_smartcard.c ****   hsc->gState = HAL_SMARTCARD_STATE_RESET;
 405:src/stm32f1xx_hal_smartcard.c ****   hsc->RxState = HAL_SMARTCARD_STATE_RESET;
 406:src/stm32f1xx_hal_smartcard.c **** 
 407:src/stm32f1xx_hal_smartcard.c ****   /* Release Lock */
 408:src/stm32f1xx_hal_smartcard.c ****   __HAL_UNLOCK(hsc);
 409:src/stm32f1xx_hal_smartcard.c **** 
 410:src/stm32f1xx_hal_smartcard.c ****   return HAL_OK;
 411:src/stm32f1xx_hal_smartcard.c **** }
 412:src/stm32f1xx_hal_smartcard.c **** 
 413:src/stm32f1xx_hal_smartcard.c **** /**
 414:src/stm32f1xx_hal_smartcard.c ****   * @brief  SMARTCARD MSP Init
 415:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
 416:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
 417:src/stm32f1xx_hal_smartcard.c ****   * @retval None
 418:src/stm32f1xx_hal_smartcard.c ****   */
 419:src/stm32f1xx_hal_smartcard.c **** __weak void HAL_SMARTCARD_MspInit(SMARTCARD_HandleTypeDef *hsc)
 420:src/stm32f1xx_hal_smartcard.c **** {
 421:src/stm32f1xx_hal_smartcard.c ****   /* Prevent unused argument(s) compilation warning */
 422:src/stm32f1xx_hal_smartcard.c ****   UNUSED(hsc);
 423:src/stm32f1xx_hal_smartcard.c **** 
 424:src/stm32f1xx_hal_smartcard.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 425:src/stm32f1xx_hal_smartcard.c ****             the HAL_SMARTCARD_MspInit can be implemented in the user file
 426:src/stm32f1xx_hal_smartcard.c ****    */
 427:src/stm32f1xx_hal_smartcard.c **** }
 428:src/stm32f1xx_hal_smartcard.c **** 
 429:src/stm32f1xx_hal_smartcard.c **** /**
 430:src/stm32f1xx_hal_smartcard.c ****   * @brief SMARTCARD MSP DeInit
 431:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
 432:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
 433:src/stm32f1xx_hal_smartcard.c ****   * @retval None
 434:src/stm32f1xx_hal_smartcard.c ****   */
 435:src/stm32f1xx_hal_smartcard.c **** __weak void HAL_SMARTCARD_MspDeInit(SMARTCARD_HandleTypeDef *hsc)
 436:src/stm32f1xx_hal_smartcard.c **** {
ARM GAS  /tmp/ccvrs2bU.s 			page 10


 437:src/stm32f1xx_hal_smartcard.c ****   /* Prevent unused argument(s) compilation warning */
 438:src/stm32f1xx_hal_smartcard.c ****   UNUSED(hsc);
 439:src/stm32f1xx_hal_smartcard.c **** 
 440:src/stm32f1xx_hal_smartcard.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 441:src/stm32f1xx_hal_smartcard.c ****             the HAL_SMARTCARD_MspDeInit can be implemented in the user file
 442:src/stm32f1xx_hal_smartcard.c ****    */
 443:src/stm32f1xx_hal_smartcard.c **** }
 444:src/stm32f1xx_hal_smartcard.c **** 
 445:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
 446:src/stm32f1xx_hal_smartcard.c **** /**
 447:src/stm32f1xx_hal_smartcard.c ****   * @brief  Register a User SMARTCARD Callback
 448:src/stm32f1xx_hal_smartcard.c ****   *         To be used instead of the weak predefined callback
 449:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc smartcard handle
 450:src/stm32f1xx_hal_smartcard.c ****   * @param  CallbackID ID of the callback to be registered
 451:src/stm32f1xx_hal_smartcard.c ****   *         This parameter can be one of the following values:
 452:src/stm32f1xx_hal_smartcard.c ****   *           @arg @ref HAL_SMARTCARD_TX_COMPLETE_CB_ID Tx Complete Callback ID
 453:src/stm32f1xx_hal_smartcard.c ****   *           @arg @ref HAL_SMARTCARD_RX_COMPLETE_CB_ID Rx Complete Callback ID
 454:src/stm32f1xx_hal_smartcard.c ****   *           @arg @ref HAL_SMARTCARD_ERROR_CB_ID Error Callback ID
 455:src/stm32f1xx_hal_smartcard.c ****   *           @arg @ref HAL_SMARTCARD_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 456:src/stm32f1xx_hal_smartcard.c ****   *           @arg @ref HAL_SMARTCARD_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callbac
 457:src/stm32f1xx_hal_smartcard.c ****   *           @arg @ref HAL_SMARTCARD_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback 
 458:src/stm32f1xx_hal_smartcard.c ****   *           @arg @ref HAL_SMARTCARD_MSPINIT_CB_ID MspInit Callback ID
 459:src/stm32f1xx_hal_smartcard.c ****   *           @arg @ref HAL_SMARTCARD_MSPDEINIT_CB_ID MspDeInit Callback ID
 460:src/stm32f1xx_hal_smartcard.c ****   * @param  pCallback pointer to the Callback function
 461:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
 462:src/stm32f1xx_hal_smartcard.c ****   */
 463:src/stm32f1xx_hal_smartcard.c **** HAL_StatusTypeDef HAL_SMARTCARD_RegisterCallback(SMARTCARD_HandleTypeDef *hsc, HAL_SMARTCARD_Callba
 464:src/stm32f1xx_hal_smartcard.c **** {
 465:src/stm32f1xx_hal_smartcard.c ****   HAL_StatusTypeDef status = HAL_OK;
 466:src/stm32f1xx_hal_smartcard.c **** 
 467:src/stm32f1xx_hal_smartcard.c ****   if (pCallback == NULL)
 468:src/stm32f1xx_hal_smartcard.c ****   {
 469:src/stm32f1xx_hal_smartcard.c ****     /* Update the error code */
 470:src/stm32f1xx_hal_smartcard.c ****     hsc->ErrorCode |= HAL_SMARTCARD_ERROR_INVALID_CALLBACK;
 471:src/stm32f1xx_hal_smartcard.c **** 
 472:src/stm32f1xx_hal_smartcard.c ****     return HAL_ERROR;
 473:src/stm32f1xx_hal_smartcard.c ****   }
 474:src/stm32f1xx_hal_smartcard.c ****   /* Process locked */
 475:src/stm32f1xx_hal_smartcard.c ****   __HAL_LOCK(hsc);
 476:src/stm32f1xx_hal_smartcard.c **** 
 477:src/stm32f1xx_hal_smartcard.c ****   if (hsc->gState == HAL_SMARTCARD_STATE_READY)
 478:src/stm32f1xx_hal_smartcard.c ****   {
 479:src/stm32f1xx_hal_smartcard.c ****     switch (CallbackID)
 480:src/stm32f1xx_hal_smartcard.c ****     {
 481:src/stm32f1xx_hal_smartcard.c **** 
 482:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_TX_COMPLETE_CB_ID :
 483:src/stm32f1xx_hal_smartcard.c ****         hsc->TxCpltCallback = pCallback;
 484:src/stm32f1xx_hal_smartcard.c ****         break;
 485:src/stm32f1xx_hal_smartcard.c **** 
 486:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_RX_COMPLETE_CB_ID :
 487:src/stm32f1xx_hal_smartcard.c ****         hsc->RxCpltCallback = pCallback;
 488:src/stm32f1xx_hal_smartcard.c ****         break;
 489:src/stm32f1xx_hal_smartcard.c **** 
 490:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_ERROR_CB_ID :
 491:src/stm32f1xx_hal_smartcard.c ****         hsc->ErrorCallback = pCallback;
 492:src/stm32f1xx_hal_smartcard.c ****         break;
 493:src/stm32f1xx_hal_smartcard.c **** 
ARM GAS  /tmp/ccvrs2bU.s 			page 11


 494:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_ABORT_COMPLETE_CB_ID :
 495:src/stm32f1xx_hal_smartcard.c ****         hsc->AbortCpltCallback = pCallback;
 496:src/stm32f1xx_hal_smartcard.c ****         break;
 497:src/stm32f1xx_hal_smartcard.c **** 
 498:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_ABORT_TRANSMIT_COMPLETE_CB_ID :
 499:src/stm32f1xx_hal_smartcard.c ****         hsc->AbortTransmitCpltCallback = pCallback;
 500:src/stm32f1xx_hal_smartcard.c ****         break;
 501:src/stm32f1xx_hal_smartcard.c **** 
 502:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_ABORT_RECEIVE_COMPLETE_CB_ID :
 503:src/stm32f1xx_hal_smartcard.c ****         hsc->AbortReceiveCpltCallback = pCallback;
 504:src/stm32f1xx_hal_smartcard.c ****         break;
 505:src/stm32f1xx_hal_smartcard.c **** 
 506:src/stm32f1xx_hal_smartcard.c **** 
 507:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_MSPINIT_CB_ID :
 508:src/stm32f1xx_hal_smartcard.c ****         hsc->MspInitCallback = pCallback;
 509:src/stm32f1xx_hal_smartcard.c ****         break;
 510:src/stm32f1xx_hal_smartcard.c **** 
 511:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_MSPDEINIT_CB_ID :
 512:src/stm32f1xx_hal_smartcard.c ****         hsc->MspDeInitCallback = pCallback;
 513:src/stm32f1xx_hal_smartcard.c ****         break;
 514:src/stm32f1xx_hal_smartcard.c **** 
 515:src/stm32f1xx_hal_smartcard.c ****       default :
 516:src/stm32f1xx_hal_smartcard.c ****         /* Update the error code */
 517:src/stm32f1xx_hal_smartcard.c ****         hsc->ErrorCode |= HAL_SMARTCARD_ERROR_INVALID_CALLBACK;
 518:src/stm32f1xx_hal_smartcard.c **** 
 519:src/stm32f1xx_hal_smartcard.c ****         /* Return error status */
 520:src/stm32f1xx_hal_smartcard.c ****         status =  HAL_ERROR;
 521:src/stm32f1xx_hal_smartcard.c ****         break;
 522:src/stm32f1xx_hal_smartcard.c ****     }
 523:src/stm32f1xx_hal_smartcard.c ****   }
 524:src/stm32f1xx_hal_smartcard.c ****   else if (hsc->gState == HAL_SMARTCARD_STATE_RESET)
 525:src/stm32f1xx_hal_smartcard.c ****   {
 526:src/stm32f1xx_hal_smartcard.c ****     switch (CallbackID)
 527:src/stm32f1xx_hal_smartcard.c ****     {
 528:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_MSPINIT_CB_ID :
 529:src/stm32f1xx_hal_smartcard.c ****         hsc->MspInitCallback = pCallback;
 530:src/stm32f1xx_hal_smartcard.c ****         break;
 531:src/stm32f1xx_hal_smartcard.c **** 
 532:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_MSPDEINIT_CB_ID :
 533:src/stm32f1xx_hal_smartcard.c ****         hsc->MspDeInitCallback = pCallback;
 534:src/stm32f1xx_hal_smartcard.c ****         break;
 535:src/stm32f1xx_hal_smartcard.c **** 
 536:src/stm32f1xx_hal_smartcard.c ****       default :
 537:src/stm32f1xx_hal_smartcard.c ****         /* Update the error code */
 538:src/stm32f1xx_hal_smartcard.c ****         hsc->ErrorCode |= HAL_SMARTCARD_ERROR_INVALID_CALLBACK;
 539:src/stm32f1xx_hal_smartcard.c **** 
 540:src/stm32f1xx_hal_smartcard.c ****         /* Return error status */
 541:src/stm32f1xx_hal_smartcard.c ****         status =  HAL_ERROR;
 542:src/stm32f1xx_hal_smartcard.c ****         break;
 543:src/stm32f1xx_hal_smartcard.c ****     }
 544:src/stm32f1xx_hal_smartcard.c ****   }
 545:src/stm32f1xx_hal_smartcard.c ****   else
 546:src/stm32f1xx_hal_smartcard.c ****   {
 547:src/stm32f1xx_hal_smartcard.c ****     /* Update the error code */
 548:src/stm32f1xx_hal_smartcard.c ****     hsc->ErrorCode |= HAL_SMARTCARD_ERROR_INVALID_CALLBACK;
 549:src/stm32f1xx_hal_smartcard.c **** 
 550:src/stm32f1xx_hal_smartcard.c ****     /* Return error status */
ARM GAS  /tmp/ccvrs2bU.s 			page 12


 551:src/stm32f1xx_hal_smartcard.c ****     status =  HAL_ERROR;
 552:src/stm32f1xx_hal_smartcard.c ****   }
 553:src/stm32f1xx_hal_smartcard.c **** 
 554:src/stm32f1xx_hal_smartcard.c ****   /* Release Lock */
 555:src/stm32f1xx_hal_smartcard.c ****   __HAL_UNLOCK(hsc);
 556:src/stm32f1xx_hal_smartcard.c **** 
 557:src/stm32f1xx_hal_smartcard.c ****   return status;
 558:src/stm32f1xx_hal_smartcard.c **** }
 559:src/stm32f1xx_hal_smartcard.c **** 
 560:src/stm32f1xx_hal_smartcard.c **** /**
 561:src/stm32f1xx_hal_smartcard.c ****   * @brief  Unregister an SMARTCARD callback
 562:src/stm32f1xx_hal_smartcard.c ****   *         SMARTCARD callback is redirected to the weak predefined callback
 563:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc smartcard handle
 564:src/stm32f1xx_hal_smartcard.c ****   * @param  CallbackID ID of the callback to be unregistered
 565:src/stm32f1xx_hal_smartcard.c ****   *         This parameter can be one of the following values:
 566:src/stm32f1xx_hal_smartcard.c ****   *           @arg @ref HAL_SMARTCARD_TX_COMPLETE_CB_ID Tx Complete Callback ID
 567:src/stm32f1xx_hal_smartcard.c ****   *           @arg @ref HAL_SMARTCARD_RX_COMPLETE_CB_ID Rx Complete Callback ID
 568:src/stm32f1xx_hal_smartcard.c ****   *           @arg @ref HAL_SMARTCARD_ERROR_CB_ID Error Callback ID
 569:src/stm32f1xx_hal_smartcard.c ****   *           @arg @ref HAL_SMARTCARD_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 570:src/stm32f1xx_hal_smartcard.c ****   *           @arg @ref HAL_SMARTCARD_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callbac
 571:src/stm32f1xx_hal_smartcard.c ****   *           @arg @ref HAL_SMARTCARD_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback 
 572:src/stm32f1xx_hal_smartcard.c ****   *           @arg @ref HAL_SMARTCARD_MSPINIT_CB_ID MspInit Callback ID
 573:src/stm32f1xx_hal_smartcard.c ****   *           @arg @ref HAL_SMARTCARD_MSPDEINIT_CB_ID MspDeInit Callback ID
 574:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
 575:src/stm32f1xx_hal_smartcard.c ****   */
 576:src/stm32f1xx_hal_smartcard.c **** HAL_StatusTypeDef HAL_SMARTCARD_UnRegisterCallback(SMARTCARD_HandleTypeDef *hsc, HAL_SMARTCARD_Call
 577:src/stm32f1xx_hal_smartcard.c **** {
 578:src/stm32f1xx_hal_smartcard.c ****   HAL_StatusTypeDef status = HAL_OK;
 579:src/stm32f1xx_hal_smartcard.c **** 
 580:src/stm32f1xx_hal_smartcard.c ****   /* Process locked */
 581:src/stm32f1xx_hal_smartcard.c ****   __HAL_LOCK(hsc);
 582:src/stm32f1xx_hal_smartcard.c **** 
 583:src/stm32f1xx_hal_smartcard.c ****   if (HAL_SMARTCARD_STATE_READY == hsc->gState)
 584:src/stm32f1xx_hal_smartcard.c ****   {
 585:src/stm32f1xx_hal_smartcard.c ****     switch (CallbackID)
 586:src/stm32f1xx_hal_smartcard.c ****     {
 587:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_TX_COMPLETE_CB_ID :
 588:src/stm32f1xx_hal_smartcard.c ****         hsc->TxCpltCallback = HAL_SMARTCARD_TxCpltCallback;                       /* Legacy weak Tx
 589:src/stm32f1xx_hal_smartcard.c ****         break;
 590:src/stm32f1xx_hal_smartcard.c **** 
 591:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_RX_COMPLETE_CB_ID :
 592:src/stm32f1xx_hal_smartcard.c ****         hsc->RxCpltCallback = HAL_SMARTCARD_RxCpltCallback;                       /* Legacy weak Rx
 593:src/stm32f1xx_hal_smartcard.c ****         break;
 594:src/stm32f1xx_hal_smartcard.c **** 
 595:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_ERROR_CB_ID :
 596:src/stm32f1xx_hal_smartcard.c ****         hsc->ErrorCallback = HAL_SMARTCARD_ErrorCallback;                         /* Legacy weak Er
 597:src/stm32f1xx_hal_smartcard.c ****         break;
 598:src/stm32f1xx_hal_smartcard.c **** 
 599:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_ABORT_COMPLETE_CB_ID :
 600:src/stm32f1xx_hal_smartcard.c ****         hsc->AbortCpltCallback = HAL_SMARTCARD_AbortCpltCallback;                 /* Legacy weak Ab
 601:src/stm32f1xx_hal_smartcard.c ****         break;
 602:src/stm32f1xx_hal_smartcard.c **** 
 603:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_ABORT_TRANSMIT_COMPLETE_CB_ID :
 604:src/stm32f1xx_hal_smartcard.c ****         hsc->AbortTransmitCpltCallback = HAL_SMARTCARD_AbortTransmitCpltCallback; /* Legacy weak Ab
 605:src/stm32f1xx_hal_smartcard.c ****         break;
 606:src/stm32f1xx_hal_smartcard.c **** 
 607:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_ABORT_RECEIVE_COMPLETE_CB_ID :
ARM GAS  /tmp/ccvrs2bU.s 			page 13


 608:src/stm32f1xx_hal_smartcard.c ****         hsc->AbortReceiveCpltCallback = HAL_SMARTCARD_AbortReceiveCpltCallback;   /* Legacy weak Ab
 609:src/stm32f1xx_hal_smartcard.c ****         break;
 610:src/stm32f1xx_hal_smartcard.c **** 
 611:src/stm32f1xx_hal_smartcard.c **** 
 612:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_MSPINIT_CB_ID :
 613:src/stm32f1xx_hal_smartcard.c ****         hsc->MspInitCallback = HAL_SMARTCARD_MspInit;                             /* Legacy weak Ms
 614:src/stm32f1xx_hal_smartcard.c ****         break;
 615:src/stm32f1xx_hal_smartcard.c **** 
 616:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_MSPDEINIT_CB_ID :
 617:src/stm32f1xx_hal_smartcard.c ****         hsc->MspDeInitCallback = HAL_SMARTCARD_MspDeInit;                         /* Legacy weak Ms
 618:src/stm32f1xx_hal_smartcard.c ****         break;
 619:src/stm32f1xx_hal_smartcard.c **** 
 620:src/stm32f1xx_hal_smartcard.c ****       default :
 621:src/stm32f1xx_hal_smartcard.c ****         /* Update the error code */
 622:src/stm32f1xx_hal_smartcard.c ****         hsc->ErrorCode |= HAL_SMARTCARD_ERROR_INVALID_CALLBACK;
 623:src/stm32f1xx_hal_smartcard.c **** 
 624:src/stm32f1xx_hal_smartcard.c ****         /* Return error status */
 625:src/stm32f1xx_hal_smartcard.c ****         status =  HAL_ERROR;
 626:src/stm32f1xx_hal_smartcard.c ****         break;
 627:src/stm32f1xx_hal_smartcard.c ****     }
 628:src/stm32f1xx_hal_smartcard.c ****   }
 629:src/stm32f1xx_hal_smartcard.c ****   else if (HAL_SMARTCARD_STATE_RESET == hsc->gState)
 630:src/stm32f1xx_hal_smartcard.c ****   {
 631:src/stm32f1xx_hal_smartcard.c ****     switch (CallbackID)
 632:src/stm32f1xx_hal_smartcard.c ****     {
 633:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_MSPINIT_CB_ID :
 634:src/stm32f1xx_hal_smartcard.c ****         hsc->MspInitCallback = HAL_SMARTCARD_MspInit;
 635:src/stm32f1xx_hal_smartcard.c ****         break;
 636:src/stm32f1xx_hal_smartcard.c **** 
 637:src/stm32f1xx_hal_smartcard.c ****       case HAL_SMARTCARD_MSPDEINIT_CB_ID :
 638:src/stm32f1xx_hal_smartcard.c ****         hsc->MspDeInitCallback = HAL_SMARTCARD_MspDeInit;
 639:src/stm32f1xx_hal_smartcard.c ****         break;
 640:src/stm32f1xx_hal_smartcard.c **** 
 641:src/stm32f1xx_hal_smartcard.c ****       default :
 642:src/stm32f1xx_hal_smartcard.c ****         /* Update the error code */
 643:src/stm32f1xx_hal_smartcard.c ****         hsc->ErrorCode |= HAL_SMARTCARD_ERROR_INVALID_CALLBACK;
 644:src/stm32f1xx_hal_smartcard.c **** 
 645:src/stm32f1xx_hal_smartcard.c ****         /* Return error status */
 646:src/stm32f1xx_hal_smartcard.c ****         status =  HAL_ERROR;
 647:src/stm32f1xx_hal_smartcard.c ****         break;
 648:src/stm32f1xx_hal_smartcard.c ****     }
 649:src/stm32f1xx_hal_smartcard.c ****   }
 650:src/stm32f1xx_hal_smartcard.c ****   else
 651:src/stm32f1xx_hal_smartcard.c ****   {
 652:src/stm32f1xx_hal_smartcard.c ****     /* Update the error code */
 653:src/stm32f1xx_hal_smartcard.c ****     hsc->ErrorCode |= HAL_SMARTCARD_ERROR_INVALID_CALLBACK;
 654:src/stm32f1xx_hal_smartcard.c **** 
 655:src/stm32f1xx_hal_smartcard.c ****     /* Return error status */
 656:src/stm32f1xx_hal_smartcard.c ****     status =  HAL_ERROR;
 657:src/stm32f1xx_hal_smartcard.c ****   }
 658:src/stm32f1xx_hal_smartcard.c **** 
 659:src/stm32f1xx_hal_smartcard.c ****   /* Release Lock */
 660:src/stm32f1xx_hal_smartcard.c ****   __HAL_UNLOCK(hsc);
 661:src/stm32f1xx_hal_smartcard.c **** 
 662:src/stm32f1xx_hal_smartcard.c ****   return status;
 663:src/stm32f1xx_hal_smartcard.c **** }
 664:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACKS */
ARM GAS  /tmp/ccvrs2bU.s 			page 14


 665:src/stm32f1xx_hal_smartcard.c **** 
 666:src/stm32f1xx_hal_smartcard.c **** /**
 667:src/stm32f1xx_hal_smartcard.c ****   * @}
 668:src/stm32f1xx_hal_smartcard.c ****   */
 669:src/stm32f1xx_hal_smartcard.c **** 
 670:src/stm32f1xx_hal_smartcard.c **** /** @defgroup SMARTCARD_Exported_Functions_Group2 IO operation functions
 671:src/stm32f1xx_hal_smartcard.c ****   * @brief    SMARTCARD Transmit and Receive functions
 672:src/stm32f1xx_hal_smartcard.c ****   *
 673:src/stm32f1xx_hal_smartcard.c **** @verbatim
 674:src/stm32f1xx_hal_smartcard.c ****  ===============================================================================
 675:src/stm32f1xx_hal_smartcard.c ****                       ##### IO operation functions #####
 676:src/stm32f1xx_hal_smartcard.c ****  ===============================================================================
 677:src/stm32f1xx_hal_smartcard.c ****  [..]
 678:src/stm32f1xx_hal_smartcard.c ****    This subsection provides a set of functions allowing to manage the SMARTCARD data transfers.
 679:src/stm32f1xx_hal_smartcard.c **** 
 680:src/stm32f1xx_hal_smartcard.c ****  [..]
 681:src/stm32f1xx_hal_smartcard.c ****     (#) Smartcard is a single wire half duplex communication protocol.
 682:src/stm32f1xx_hal_smartcard.c ****     The Smartcard interface is designed to support asynchronous protocol Smartcards as
 683:src/stm32f1xx_hal_smartcard.c ****     defined in the ISO 7816-3 standard.
 684:src/stm32f1xx_hal_smartcard.c ****     (#) The USART should be configured as:
 685:src/stm32f1xx_hal_smartcard.c ****        (++) 8 bits plus parity: where M=1 and PCE=1 in the USART_CR1 register
 686:src/stm32f1xx_hal_smartcard.c ****        (++) 1.5 stop bits when transmitting and receiving: where STOP=11 in the USART_CR2 register.
 687:src/stm32f1xx_hal_smartcard.c **** 
 688:src/stm32f1xx_hal_smartcard.c ****     (#) There are two modes of transfer:
 689:src/stm32f1xx_hal_smartcard.c ****        (++) Blocking mode: The communication is performed in polling mode.
 690:src/stm32f1xx_hal_smartcard.c ****             The HAL status of all data processing is returned by the same function
 691:src/stm32f1xx_hal_smartcard.c ****             after finishing transfer.
 692:src/stm32f1xx_hal_smartcard.c ****        (++) Non Blocking mode: The communication is performed using Interrupts
 693:src/stm32f1xx_hal_smartcard.c ****            or DMA, These APIs return the HAL status.
 694:src/stm32f1xx_hal_smartcard.c ****            The end of the data processing will be indicated through the
 695:src/stm32f1xx_hal_smartcard.c ****            dedicated SMARTCARD IRQ when using Interrupt mode or the DMA IRQ when
 696:src/stm32f1xx_hal_smartcard.c ****            using DMA mode.
 697:src/stm32f1xx_hal_smartcard.c ****            The HAL_SMARTCARD_TxCpltCallback(), HAL_SMARTCARD_RxCpltCallback() user callbacks
 698:src/stm32f1xx_hal_smartcard.c ****            will be executed respectively at the end of the Transmit or Receive process
 699:src/stm32f1xx_hal_smartcard.c ****            The HAL_SMARTCARD_ErrorCallback() user callback will be executed when a communication er
 700:src/stm32f1xx_hal_smartcard.c **** 
 701:src/stm32f1xx_hal_smartcard.c ****     (#) Blocking mode APIs are :
 702:src/stm32f1xx_hal_smartcard.c ****         (++) HAL_SMARTCARD_Transmit()
 703:src/stm32f1xx_hal_smartcard.c ****         (++) HAL_SMARTCARD_Receive()
 704:src/stm32f1xx_hal_smartcard.c **** 
 705:src/stm32f1xx_hal_smartcard.c ****     (#) Non Blocking mode APIs with Interrupt are :
 706:src/stm32f1xx_hal_smartcard.c ****         (++) HAL_SMARTCARD_Transmit_IT()
 707:src/stm32f1xx_hal_smartcard.c ****         (++) HAL_SMARTCARD_Receive_IT()
 708:src/stm32f1xx_hal_smartcard.c ****         (++) HAL_SMARTCARD_IRQHandler()
 709:src/stm32f1xx_hal_smartcard.c **** 
 710:src/stm32f1xx_hal_smartcard.c ****     (#) Non Blocking mode functions with DMA are :
 711:src/stm32f1xx_hal_smartcard.c ****         (++) HAL_SMARTCARD_Transmit_DMA()
 712:src/stm32f1xx_hal_smartcard.c ****         (++) HAL_SMARTCARD_Receive_DMA()
 713:src/stm32f1xx_hal_smartcard.c **** 
 714:src/stm32f1xx_hal_smartcard.c ****     (#) A set of Transfer Complete Callbacks are provided in non Blocking mode:
 715:src/stm32f1xx_hal_smartcard.c ****         (++) HAL_SMARTCARD_TxCpltCallback()
 716:src/stm32f1xx_hal_smartcard.c ****         (++) HAL_SMARTCARD_RxCpltCallback()
 717:src/stm32f1xx_hal_smartcard.c ****         (++) HAL_SMARTCARD_ErrorCallback()
 718:src/stm32f1xx_hal_smartcard.c **** 
 719:src/stm32f1xx_hal_smartcard.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
 720:src/stm32f1xx_hal_smartcard.c ****         (+) HAL_SMARTCARD_Abort()
 721:src/stm32f1xx_hal_smartcard.c ****         (+) HAL_SMARTCARD_AbortTransmit()
ARM GAS  /tmp/ccvrs2bU.s 			page 15


 722:src/stm32f1xx_hal_smartcard.c ****         (+) HAL_SMARTCARD_AbortReceive()
 723:src/stm32f1xx_hal_smartcard.c ****         (+) HAL_SMARTCARD_Abort_IT()
 724:src/stm32f1xx_hal_smartcard.c ****         (+) HAL_SMARTCARD_AbortTransmit_IT()
 725:src/stm32f1xx_hal_smartcard.c ****         (+) HAL_SMARTCARD_AbortReceive_IT()
 726:src/stm32f1xx_hal_smartcard.c **** 
 727:src/stm32f1xx_hal_smartcard.c ****     (#) For Abort services based on interrupts (HAL_SMARTCARD_Abortxxx_IT), a set of Abort Complete
 728:src/stm32f1xx_hal_smartcard.c ****         (+) HAL_SMARTCARD_AbortCpltCallback()
 729:src/stm32f1xx_hal_smartcard.c ****         (+) HAL_SMARTCARD_AbortTransmitCpltCallback()
 730:src/stm32f1xx_hal_smartcard.c ****         (+) HAL_SMARTCARD_AbortReceiveCpltCallback()
 731:src/stm32f1xx_hal_smartcard.c **** 
 732:src/stm32f1xx_hal_smartcard.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
 733:src/stm32f1xx_hal_smartcard.c ****         Errors are handled as follows :
 734:src/stm32f1xx_hal_smartcard.c ****        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but er
 735:src/stm32f1xx_hal_smartcard.c ****            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Inte
 736:src/stm32f1xx_hal_smartcard.c ****            Received character is then retrieved and stored in Rx buffer, Error code is set to allow
 737:src/stm32f1xx_hal_smartcard.c ****            and HAL_SMARTCARD_ErrorCallback() user callback is executed. Transfer is kept ongoing on
 738:src/stm32f1xx_hal_smartcard.c ****            If user wants to abort it, Abort services should be called by user.
 739:src/stm32f1xx_hal_smartcard.c ****        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborte
 740:src/stm32f1xx_hal_smartcard.c ****            This concerns Frame Error in Interrupt mode tranmission, Overrun Error in Interrupt mode
 741:src/stm32f1xx_hal_smartcard.c ****            Error code is set to allow user to identify error type, and HAL_SMARTCARD_ErrorCallback(
 742:src/stm32f1xx_hal_smartcard.c **** 
 743:src/stm32f1xx_hal_smartcard.c **** @endverbatim
 744:src/stm32f1xx_hal_smartcard.c ****   * @{
 745:src/stm32f1xx_hal_smartcard.c ****   */
 746:src/stm32f1xx_hal_smartcard.c **** 
 747:src/stm32f1xx_hal_smartcard.c **** /**
 748:src/stm32f1xx_hal_smartcard.c ****   * @brief Send an amount of data in blocking mode
 749:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
 750:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
 751:src/stm32f1xx_hal_smartcard.c ****   * @param  pData  Pointer to data buffer
 752:src/stm32f1xx_hal_smartcard.c ****   * @param  Size   Amount of data to be sent
 753:src/stm32f1xx_hal_smartcard.c ****   * @param  Timeout Timeout duration
 754:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
 755:src/stm32f1xx_hal_smartcard.c ****   */
 756:src/stm32f1xx_hal_smartcard.c **** HAL_StatusTypeDef HAL_SMARTCARD_Transmit(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Siz
 757:src/stm32f1xx_hal_smartcard.c **** {
 758:src/stm32f1xx_hal_smartcard.c ****   uint16_t* tmp;
 759:src/stm32f1xx_hal_smartcard.c ****   uint32_t tickstart = 0U;
 760:src/stm32f1xx_hal_smartcard.c **** 
 761:src/stm32f1xx_hal_smartcard.c ****   if(hsc->gState == HAL_SMARTCARD_STATE_READY)
 762:src/stm32f1xx_hal_smartcard.c ****   {
 763:src/stm32f1xx_hal_smartcard.c ****     if((pData == NULL) || (Size == 0U))
 764:src/stm32f1xx_hal_smartcard.c ****     {
 765:src/stm32f1xx_hal_smartcard.c ****       return  HAL_ERROR;
 766:src/stm32f1xx_hal_smartcard.c ****     }
 767:src/stm32f1xx_hal_smartcard.c **** 
 768:src/stm32f1xx_hal_smartcard.c ****     /* Process Locked */
 769:src/stm32f1xx_hal_smartcard.c ****     __HAL_LOCK(hsc);
 770:src/stm32f1xx_hal_smartcard.c **** 
 771:src/stm32f1xx_hal_smartcard.c ****     hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
 772:src/stm32f1xx_hal_smartcard.c ****     hsc->gState = HAL_SMARTCARD_STATE_BUSY_TX;
 773:src/stm32f1xx_hal_smartcard.c **** 
 774:src/stm32f1xx_hal_smartcard.c ****     /* Init tickstart for timeout managment */
 775:src/stm32f1xx_hal_smartcard.c ****     tickstart = HAL_GetTick();
 776:src/stm32f1xx_hal_smartcard.c **** 
 777:src/stm32f1xx_hal_smartcard.c ****     hsc->TxXferSize = Size;
 778:src/stm32f1xx_hal_smartcard.c ****     hsc->TxXferCount = Size;
ARM GAS  /tmp/ccvrs2bU.s 			page 16


 779:src/stm32f1xx_hal_smartcard.c ****     while(hsc->TxXferCount > 0U)
 780:src/stm32f1xx_hal_smartcard.c ****     {
 781:src/stm32f1xx_hal_smartcard.c ****       hsc->TxXferCount--;
 782:src/stm32f1xx_hal_smartcard.c ****       if(SMARTCARD_WaitOnFlagUntilTimeout(hsc, SMARTCARD_FLAG_TXE, RESET, tickstart, Timeout) != HA
 783:src/stm32f1xx_hal_smartcard.c ****       {
 784:src/stm32f1xx_hal_smartcard.c ****         return HAL_TIMEOUT;
 785:src/stm32f1xx_hal_smartcard.c ****       }
 786:src/stm32f1xx_hal_smartcard.c ****       tmp = (uint16_t*) pData;
 787:src/stm32f1xx_hal_smartcard.c ****       hsc->Instance->DR = (*tmp & (uint16_t)0x01FF);
 788:src/stm32f1xx_hal_smartcard.c ****       pData +=1U;
 789:src/stm32f1xx_hal_smartcard.c ****     }
 790:src/stm32f1xx_hal_smartcard.c **** 
 791:src/stm32f1xx_hal_smartcard.c ****     if(SMARTCARD_WaitOnFlagUntilTimeout(hsc, SMARTCARD_FLAG_TC, RESET, tickstart, Timeout) != HAL_O
 792:src/stm32f1xx_hal_smartcard.c ****     {
 793:src/stm32f1xx_hal_smartcard.c ****       return HAL_TIMEOUT;
 794:src/stm32f1xx_hal_smartcard.c ****     }
 795:src/stm32f1xx_hal_smartcard.c **** 
 796:src/stm32f1xx_hal_smartcard.c **** 	/* At end of Tx process, restore hsc->gState to Ready */
 797:src/stm32f1xx_hal_smartcard.c ****     hsc->gState = HAL_SMARTCARD_STATE_READY;
 798:src/stm32f1xx_hal_smartcard.c **** 
 799:src/stm32f1xx_hal_smartcard.c ****     /* Process Unlocked */
 800:src/stm32f1xx_hal_smartcard.c ****     __HAL_UNLOCK(hsc);
 801:src/stm32f1xx_hal_smartcard.c **** 
 802:src/stm32f1xx_hal_smartcard.c ****     return HAL_OK;
 803:src/stm32f1xx_hal_smartcard.c ****   }
 804:src/stm32f1xx_hal_smartcard.c ****   else
 805:src/stm32f1xx_hal_smartcard.c ****   {
 806:src/stm32f1xx_hal_smartcard.c ****     return HAL_BUSY;
 807:src/stm32f1xx_hal_smartcard.c ****   }
 808:src/stm32f1xx_hal_smartcard.c **** }
 809:src/stm32f1xx_hal_smartcard.c **** 
 810:src/stm32f1xx_hal_smartcard.c **** /**
 811:src/stm32f1xx_hal_smartcard.c ****   * @brief Receive an amount of data in blocking mode
 812:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
 813:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
 814:src/stm32f1xx_hal_smartcard.c ****   * @param  pData  Pointer to data buffer
 815:src/stm32f1xx_hal_smartcard.c ****   * @param  Size   Amount of data to be received
 816:src/stm32f1xx_hal_smartcard.c ****   * @param  Timeout Timeout duration
 817:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
 818:src/stm32f1xx_hal_smartcard.c ****   */
 819:src/stm32f1xx_hal_smartcard.c **** HAL_StatusTypeDef HAL_SMARTCARD_Receive(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size
 820:src/stm32f1xx_hal_smartcard.c **** {
 821:src/stm32f1xx_hal_smartcard.c ****   uint16_t* tmp;
 822:src/stm32f1xx_hal_smartcard.c ****   uint32_t tickstart = 0U;
 823:src/stm32f1xx_hal_smartcard.c **** 
 824:src/stm32f1xx_hal_smartcard.c ****   if(hsc->RxState == HAL_SMARTCARD_STATE_READY)
 825:src/stm32f1xx_hal_smartcard.c ****   {
 826:src/stm32f1xx_hal_smartcard.c ****     if((pData == NULL) || (Size == 0U))
 827:src/stm32f1xx_hal_smartcard.c ****     {
 828:src/stm32f1xx_hal_smartcard.c ****       return  HAL_ERROR;
 829:src/stm32f1xx_hal_smartcard.c ****     }
 830:src/stm32f1xx_hal_smartcard.c **** 
 831:src/stm32f1xx_hal_smartcard.c ****     /* Process Locked */
 832:src/stm32f1xx_hal_smartcard.c ****     __HAL_LOCK(hsc);
 833:src/stm32f1xx_hal_smartcard.c **** 
 834:src/stm32f1xx_hal_smartcard.c ****     hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
 835:src/stm32f1xx_hal_smartcard.c ****     hsc->RxState = HAL_SMARTCARD_STATE_BUSY_RX;
ARM GAS  /tmp/ccvrs2bU.s 			page 17


 836:src/stm32f1xx_hal_smartcard.c **** 
 837:src/stm32f1xx_hal_smartcard.c ****     /* Init tickstart for timeout managment */
 838:src/stm32f1xx_hal_smartcard.c ****     tickstart = HAL_GetTick();
 839:src/stm32f1xx_hal_smartcard.c **** 
 840:src/stm32f1xx_hal_smartcard.c ****     hsc->RxXferSize = Size;
 841:src/stm32f1xx_hal_smartcard.c ****     hsc->RxXferCount = Size;
 842:src/stm32f1xx_hal_smartcard.c **** 
 843:src/stm32f1xx_hal_smartcard.c ****     /* Check the remain data to be received */
 844:src/stm32f1xx_hal_smartcard.c ****     while(hsc->RxXferCount > 0U)
 845:src/stm32f1xx_hal_smartcard.c ****     {
 846:src/stm32f1xx_hal_smartcard.c ****       hsc->RxXferCount--;
 847:src/stm32f1xx_hal_smartcard.c ****       if(SMARTCARD_WaitOnFlagUntilTimeout(hsc, SMARTCARD_FLAG_RXNE, RESET, tickstart, Timeout) != H
 848:src/stm32f1xx_hal_smartcard.c ****       {
 849:src/stm32f1xx_hal_smartcard.c ****         return HAL_TIMEOUT;
 850:src/stm32f1xx_hal_smartcard.c ****       }
 851:src/stm32f1xx_hal_smartcard.c ****       tmp = (uint16_t*) pData;
 852:src/stm32f1xx_hal_smartcard.c ****       *tmp = (uint8_t)(hsc->Instance->DR & (uint8_t)0xFF);
 853:src/stm32f1xx_hal_smartcard.c ****       pData +=1U;
 854:src/stm32f1xx_hal_smartcard.c ****     }
 855:src/stm32f1xx_hal_smartcard.c **** 
 856:src/stm32f1xx_hal_smartcard.c ****     /* At end of Rx process, restore hsc->RxState to Ready */
 857:src/stm32f1xx_hal_smartcard.c ****     hsc->RxState = HAL_SMARTCARD_STATE_READY;
 858:src/stm32f1xx_hal_smartcard.c **** 
 859:src/stm32f1xx_hal_smartcard.c ****     /* Process Unlocked */
 860:src/stm32f1xx_hal_smartcard.c ****     __HAL_UNLOCK(hsc);
 861:src/stm32f1xx_hal_smartcard.c **** 
 862:src/stm32f1xx_hal_smartcard.c ****     return HAL_OK;
 863:src/stm32f1xx_hal_smartcard.c ****   }
 864:src/stm32f1xx_hal_smartcard.c ****   else
 865:src/stm32f1xx_hal_smartcard.c ****   {
 866:src/stm32f1xx_hal_smartcard.c ****     return HAL_BUSY;
 867:src/stm32f1xx_hal_smartcard.c ****   }
 868:src/stm32f1xx_hal_smartcard.c **** }
 869:src/stm32f1xx_hal_smartcard.c **** 
 870:src/stm32f1xx_hal_smartcard.c **** /**
 871:src/stm32f1xx_hal_smartcard.c ****   * @brief Send an amount of data in non blocking mode
 872:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
 873:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
 874:src/stm32f1xx_hal_smartcard.c ****   * @param  pData  Pointer to data buffer
 875:src/stm32f1xx_hal_smartcard.c ****   * @param  Size   Amount of data to be sent
 876:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
 877:src/stm32f1xx_hal_smartcard.c ****   */
 878:src/stm32f1xx_hal_smartcard.c **** HAL_StatusTypeDef HAL_SMARTCARD_Transmit_IT(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t 
 879:src/stm32f1xx_hal_smartcard.c **** {
 880:src/stm32f1xx_hal_smartcard.c ****   /* Check that a Tx process is not already ongoing */
 881:src/stm32f1xx_hal_smartcard.c ****   if(hsc->gState == HAL_SMARTCARD_STATE_READY)
 882:src/stm32f1xx_hal_smartcard.c ****   {
 883:src/stm32f1xx_hal_smartcard.c ****     if((pData == NULL) || (Size == 0U))
 884:src/stm32f1xx_hal_smartcard.c ****     {
 885:src/stm32f1xx_hal_smartcard.c ****       return HAL_ERROR;
 886:src/stm32f1xx_hal_smartcard.c ****     }
 887:src/stm32f1xx_hal_smartcard.c **** 
 888:src/stm32f1xx_hal_smartcard.c ****     /* Process Locked */
 889:src/stm32f1xx_hal_smartcard.c ****     __HAL_LOCK(hsc);
 890:src/stm32f1xx_hal_smartcard.c **** 
 891:src/stm32f1xx_hal_smartcard.c ****     hsc->pTxBuffPtr = pData;
 892:src/stm32f1xx_hal_smartcard.c ****     hsc->TxXferSize = Size;
ARM GAS  /tmp/ccvrs2bU.s 			page 18


 893:src/stm32f1xx_hal_smartcard.c ****     hsc->TxXferCount = Size;
 894:src/stm32f1xx_hal_smartcard.c **** 
 895:src/stm32f1xx_hal_smartcard.c ****     hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
 896:src/stm32f1xx_hal_smartcard.c ****     hsc->gState = HAL_SMARTCARD_STATE_BUSY_TX;
 897:src/stm32f1xx_hal_smartcard.c **** 
 898:src/stm32f1xx_hal_smartcard.c ****     /* Process Unlocked */
 899:src/stm32f1xx_hal_smartcard.c ****     __HAL_UNLOCK(hsc);
 900:src/stm32f1xx_hal_smartcard.c **** 
 901:src/stm32f1xx_hal_smartcard.c ****     /* Enable the SMARTCARD Parity Error Interrupt */
 902:src/stm32f1xx_hal_smartcard.c ****     SET_BIT(hsc->Instance->CR1, USART_CR1_PEIE);
 903:src/stm32f1xx_hal_smartcard.c **** 
 904:src/stm32f1xx_hal_smartcard.c ****     /* Disable the SMARTCARD Error Interrupt: (Frame error, noise error, overrun error) */
 905:src/stm32f1xx_hal_smartcard.c ****     CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 906:src/stm32f1xx_hal_smartcard.c **** 
 907:src/stm32f1xx_hal_smartcard.c ****     /* Enable the SMARTCARD Transmit data register empty Interrupt */
 908:src/stm32f1xx_hal_smartcard.c ****     SET_BIT(hsc->Instance->CR1, USART_CR1_TXEIE);
 909:src/stm32f1xx_hal_smartcard.c **** 
 910:src/stm32f1xx_hal_smartcard.c ****     return HAL_OK;
 911:src/stm32f1xx_hal_smartcard.c ****   }
 912:src/stm32f1xx_hal_smartcard.c ****   else
 913:src/stm32f1xx_hal_smartcard.c ****   {
 914:src/stm32f1xx_hal_smartcard.c ****     return HAL_BUSY;
 915:src/stm32f1xx_hal_smartcard.c ****   }
 916:src/stm32f1xx_hal_smartcard.c **** }
 917:src/stm32f1xx_hal_smartcard.c **** 
 918:src/stm32f1xx_hal_smartcard.c **** /**
 919:src/stm32f1xx_hal_smartcard.c ****   * @brief Receive an amount of data in non blocking mode
 920:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
 921:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
 922:src/stm32f1xx_hal_smartcard.c ****   * @param  pData  Pointer to data buffer
 923:src/stm32f1xx_hal_smartcard.c ****   * @param  Size   Amount of data to be received
 924:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
 925:src/stm32f1xx_hal_smartcard.c ****   */
 926:src/stm32f1xx_hal_smartcard.c **** HAL_StatusTypeDef HAL_SMARTCARD_Receive_IT(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t S
 927:src/stm32f1xx_hal_smartcard.c **** {
 928:src/stm32f1xx_hal_smartcard.c ****   /* Check that a Rx process is not already ongoing */
 929:src/stm32f1xx_hal_smartcard.c ****   if(hsc->RxState == HAL_SMARTCARD_STATE_READY)
 930:src/stm32f1xx_hal_smartcard.c ****   {
 931:src/stm32f1xx_hal_smartcard.c ****     if((pData == NULL) || (Size == 0U))
 932:src/stm32f1xx_hal_smartcard.c ****     {
 933:src/stm32f1xx_hal_smartcard.c ****       return HAL_ERROR;
 934:src/stm32f1xx_hal_smartcard.c ****     }
 935:src/stm32f1xx_hal_smartcard.c **** 
 936:src/stm32f1xx_hal_smartcard.c ****     /* Process Locked */
 937:src/stm32f1xx_hal_smartcard.c ****     __HAL_LOCK(hsc);
 938:src/stm32f1xx_hal_smartcard.c **** 
 939:src/stm32f1xx_hal_smartcard.c ****     hsc->pRxBuffPtr = pData;
 940:src/stm32f1xx_hal_smartcard.c ****     hsc->RxXferSize = Size;
 941:src/stm32f1xx_hal_smartcard.c ****     hsc->RxXferCount = Size;
 942:src/stm32f1xx_hal_smartcard.c **** 
 943:src/stm32f1xx_hal_smartcard.c ****     hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
 944:src/stm32f1xx_hal_smartcard.c ****     hsc->RxState = HAL_SMARTCARD_STATE_BUSY_RX;
 945:src/stm32f1xx_hal_smartcard.c **** 
 946:src/stm32f1xx_hal_smartcard.c ****     /* Process Unlocked */
 947:src/stm32f1xx_hal_smartcard.c ****     __HAL_UNLOCK(hsc);
 948:src/stm32f1xx_hal_smartcard.c **** 
 949:src/stm32f1xx_hal_smartcard.c ****     /* Enable the SMARTCARD Parity Error and Data Register not empty Interrupts */
ARM GAS  /tmp/ccvrs2bU.s 			page 19


 950:src/stm32f1xx_hal_smartcard.c ****     SET_BIT(hsc->Instance->CR1, USART_CR1_PEIE| USART_CR1_RXNEIE);
 951:src/stm32f1xx_hal_smartcard.c **** 
 952:src/stm32f1xx_hal_smartcard.c ****     /* Enable the SMARTCARD Error Interrupt: (Frame error, noise error, overrun error) */
 953:src/stm32f1xx_hal_smartcard.c ****     SET_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 954:src/stm32f1xx_hal_smartcard.c **** 
 955:src/stm32f1xx_hal_smartcard.c ****     return HAL_OK;
 956:src/stm32f1xx_hal_smartcard.c ****   }
 957:src/stm32f1xx_hal_smartcard.c ****   else
 958:src/stm32f1xx_hal_smartcard.c ****   {
 959:src/stm32f1xx_hal_smartcard.c ****     return HAL_BUSY;
 960:src/stm32f1xx_hal_smartcard.c ****   }
 961:src/stm32f1xx_hal_smartcard.c **** }
 962:src/stm32f1xx_hal_smartcard.c **** 
 963:src/stm32f1xx_hal_smartcard.c **** /**
 964:src/stm32f1xx_hal_smartcard.c ****   * @brief Send an amount of data in non blocking mode
 965:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
 966:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
 967:src/stm32f1xx_hal_smartcard.c ****   * @param  pData  Pointer to data buffer
 968:src/stm32f1xx_hal_smartcard.c ****   * @param  Size   Amount of data to be sent
 969:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
 970:src/stm32f1xx_hal_smartcard.c ****   */
 971:src/stm32f1xx_hal_smartcard.c **** HAL_StatusTypeDef HAL_SMARTCARD_Transmit_DMA(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t
 972:src/stm32f1xx_hal_smartcard.c **** {
 973:src/stm32f1xx_hal_smartcard.c ****   uint32_t *tmp;
 974:src/stm32f1xx_hal_smartcard.c **** 
 975:src/stm32f1xx_hal_smartcard.c ****   /* Check that a Tx process is not already ongoing */
 976:src/stm32f1xx_hal_smartcard.c ****   if(hsc->gState == HAL_SMARTCARD_STATE_READY)
 977:src/stm32f1xx_hal_smartcard.c ****   {
 978:src/stm32f1xx_hal_smartcard.c ****     if((pData == NULL) || (Size == 0U))
 979:src/stm32f1xx_hal_smartcard.c ****     {
 980:src/stm32f1xx_hal_smartcard.c ****       return HAL_ERROR;
 981:src/stm32f1xx_hal_smartcard.c ****     }
 982:src/stm32f1xx_hal_smartcard.c **** 
 983:src/stm32f1xx_hal_smartcard.c ****     /* Process Locked */
 984:src/stm32f1xx_hal_smartcard.c ****     __HAL_LOCK(hsc);
 985:src/stm32f1xx_hal_smartcard.c **** 
 986:src/stm32f1xx_hal_smartcard.c ****     hsc->pTxBuffPtr = pData;
 987:src/stm32f1xx_hal_smartcard.c ****     hsc->TxXferSize = Size;
 988:src/stm32f1xx_hal_smartcard.c ****     hsc->TxXferCount = Size;
 989:src/stm32f1xx_hal_smartcard.c **** 
 990:src/stm32f1xx_hal_smartcard.c ****     hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
 991:src/stm32f1xx_hal_smartcard.c ****     hsc->gState = HAL_SMARTCARD_STATE_BUSY_TX;
 992:src/stm32f1xx_hal_smartcard.c **** 
 993:src/stm32f1xx_hal_smartcard.c ****     /* Set the SMARTCARD DMA transfer complete callback */
 994:src/stm32f1xx_hal_smartcard.c ****     hsc->hdmatx->XferCpltCallback = SMARTCARD_DMATransmitCplt;
 995:src/stm32f1xx_hal_smartcard.c **** 
 996:src/stm32f1xx_hal_smartcard.c ****     /* Set the DMA error callback */
 997:src/stm32f1xx_hal_smartcard.c ****     hsc->hdmatx->XferErrorCallback = SMARTCARD_DMAError;
 998:src/stm32f1xx_hal_smartcard.c **** 
 999:src/stm32f1xx_hal_smartcard.c ****     /* Set the DMA abort callback */
1000:src/stm32f1xx_hal_smartcard.c ****     hsc->hdmatx->XferAbortCallback = NULL;
1001:src/stm32f1xx_hal_smartcard.c **** 
1002:src/stm32f1xx_hal_smartcard.c ****     /* Enable the SMARTCARD transmit DMA channel */
1003:src/stm32f1xx_hal_smartcard.c ****     tmp = (uint32_t*)&pData;
1004:src/stm32f1xx_hal_smartcard.c ****     HAL_DMA_Start_IT(hsc->hdmatx, *(uint32_t*)tmp, (uint32_t)&hsc->Instance->DR, Size);
1005:src/stm32f1xx_hal_smartcard.c **** 
1006:src/stm32f1xx_hal_smartcard.c ****      /* Clear the TC flag in the SR register by writing 0 to it */
ARM GAS  /tmp/ccvrs2bU.s 			page 20


1007:src/stm32f1xx_hal_smartcard.c ****     __HAL_SMARTCARD_CLEAR_FLAG(hsc, SMARTCARD_FLAG_TC);
1008:src/stm32f1xx_hal_smartcard.c **** 
1009:src/stm32f1xx_hal_smartcard.c ****     /* Process Unlocked */
1010:src/stm32f1xx_hal_smartcard.c ****     __HAL_UNLOCK(hsc);
1011:src/stm32f1xx_hal_smartcard.c **** 
1012:src/stm32f1xx_hal_smartcard.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1013:src/stm32f1xx_hal_smartcard.c ****     in the SMARTCARD CR3 register */
1014:src/stm32f1xx_hal_smartcard.c ****     SET_BIT(hsc->Instance->CR3, USART_CR3_DMAT);
1015:src/stm32f1xx_hal_smartcard.c **** 
1016:src/stm32f1xx_hal_smartcard.c ****     return HAL_OK;
1017:src/stm32f1xx_hal_smartcard.c ****   }
1018:src/stm32f1xx_hal_smartcard.c ****   else
1019:src/stm32f1xx_hal_smartcard.c ****   {
1020:src/stm32f1xx_hal_smartcard.c ****     return HAL_BUSY;
1021:src/stm32f1xx_hal_smartcard.c ****   }
1022:src/stm32f1xx_hal_smartcard.c **** }
1023:src/stm32f1xx_hal_smartcard.c **** 
1024:src/stm32f1xx_hal_smartcard.c **** /**
1025:src/stm32f1xx_hal_smartcard.c ****   * @brief Receive an amount of data in non blocking mode
1026:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
1027:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
1028:src/stm32f1xx_hal_smartcard.c ****   * @param  pData  Pointer to data buffer
1029:src/stm32f1xx_hal_smartcard.c ****   * @param  Size   Amount of data to be received
1030:src/stm32f1xx_hal_smartcard.c ****   * @note   When the SMARTCARD parity is enabled (PCE = 1) the data received contain the parity bit
1031:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
1032:src/stm32f1xx_hal_smartcard.c ****   */
1033:src/stm32f1xx_hal_smartcard.c **** HAL_StatusTypeDef HAL_SMARTCARD_Receive_DMA(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t 
1034:src/stm32f1xx_hal_smartcard.c **** {
1035:src/stm32f1xx_hal_smartcard.c ****   uint32_t *tmp;
1036:src/stm32f1xx_hal_smartcard.c **** 
1037:src/stm32f1xx_hal_smartcard.c ****   /* Check that a Rx process is not already ongoing */
1038:src/stm32f1xx_hal_smartcard.c ****   if(hsc->RxState == HAL_SMARTCARD_STATE_READY)
1039:src/stm32f1xx_hal_smartcard.c ****   {
1040:src/stm32f1xx_hal_smartcard.c ****     if((pData == NULL) || (Size == 0U))
1041:src/stm32f1xx_hal_smartcard.c ****     {
1042:src/stm32f1xx_hal_smartcard.c ****       return HAL_ERROR;
1043:src/stm32f1xx_hal_smartcard.c ****     }
1044:src/stm32f1xx_hal_smartcard.c **** 
1045:src/stm32f1xx_hal_smartcard.c ****     /* Process Locked */
1046:src/stm32f1xx_hal_smartcard.c ****     __HAL_LOCK(hsc);
1047:src/stm32f1xx_hal_smartcard.c **** 
1048:src/stm32f1xx_hal_smartcard.c ****     hsc->pRxBuffPtr = pData;
1049:src/stm32f1xx_hal_smartcard.c ****     hsc->RxXferSize = Size;
1050:src/stm32f1xx_hal_smartcard.c **** 
1051:src/stm32f1xx_hal_smartcard.c ****     hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
1052:src/stm32f1xx_hal_smartcard.c ****     hsc->RxState = HAL_SMARTCARD_STATE_BUSY_RX;
1053:src/stm32f1xx_hal_smartcard.c **** 
1054:src/stm32f1xx_hal_smartcard.c ****     /* Set the SMARTCARD DMA transfer complete callback */
1055:src/stm32f1xx_hal_smartcard.c ****     hsc->hdmarx->XferCpltCallback = SMARTCARD_DMAReceiveCplt;
1056:src/stm32f1xx_hal_smartcard.c **** 
1057:src/stm32f1xx_hal_smartcard.c ****     /* Set the DMA error callback */
1058:src/stm32f1xx_hal_smartcard.c ****     hsc->hdmarx->XferErrorCallback = SMARTCARD_DMAError;
1059:src/stm32f1xx_hal_smartcard.c **** 
1060:src/stm32f1xx_hal_smartcard.c ****     /* Set the DMA abort callback */
1061:src/stm32f1xx_hal_smartcard.c ****     hsc->hdmatx->XferAbortCallback = NULL;
1062:src/stm32f1xx_hal_smartcard.c **** 
1063:src/stm32f1xx_hal_smartcard.c ****     /* Enable the DMA channel */
ARM GAS  /tmp/ccvrs2bU.s 			page 21


1064:src/stm32f1xx_hal_smartcard.c ****     tmp = (uint32_t*)&pData;
1065:src/stm32f1xx_hal_smartcard.c ****     HAL_DMA_Start_IT(hsc->hdmarx, (uint32_t)&hsc->Instance->DR, *(uint32_t*)tmp, Size);
1066:src/stm32f1xx_hal_smartcard.c **** 
1067:src/stm32f1xx_hal_smartcard.c ****     /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the sec
1068:src/stm32f1xx_hal_smartcard.c ****     __HAL_SMARTCARD_CLEAR_OREFLAG(hsc);
1069:src/stm32f1xx_hal_smartcard.c **** 
1070:src/stm32f1xx_hal_smartcard.c ****     /* Process Unlocked */
1071:src/stm32f1xx_hal_smartcard.c ****     __HAL_UNLOCK(hsc);
1072:src/stm32f1xx_hal_smartcard.c **** 
1073:src/stm32f1xx_hal_smartcard.c ****     /* Enable the SMARTCARD Parity Error Interrupt */
1074:src/stm32f1xx_hal_smartcard.c ****     SET_BIT(hsc->Instance->CR1, USART_CR1_PEIE);
1075:src/stm32f1xx_hal_smartcard.c **** 
1076:src/stm32f1xx_hal_smartcard.c ****     /* Enable the SMARTCARD Error Interrupt: (Frame error, noise error, overrun error) */
1077:src/stm32f1xx_hal_smartcard.c ****     SET_BIT(hsc->Instance->CR3, USART_CR3_EIE);
1078:src/stm32f1xx_hal_smartcard.c **** 
1079:src/stm32f1xx_hal_smartcard.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit
1080:src/stm32f1xx_hal_smartcard.c ****     in the SMARTCARD CR3 register */
1081:src/stm32f1xx_hal_smartcard.c ****     SET_BIT(hsc->Instance->CR3, USART_CR3_DMAR);
1082:src/stm32f1xx_hal_smartcard.c **** 
1083:src/stm32f1xx_hal_smartcard.c ****     return HAL_OK;
1084:src/stm32f1xx_hal_smartcard.c ****   }
1085:src/stm32f1xx_hal_smartcard.c ****   else
1086:src/stm32f1xx_hal_smartcard.c ****   {
1087:src/stm32f1xx_hal_smartcard.c ****     return HAL_BUSY;
1088:src/stm32f1xx_hal_smartcard.c ****   }
1089:src/stm32f1xx_hal_smartcard.c **** }
1090:src/stm32f1xx_hal_smartcard.c **** 
1091:src/stm32f1xx_hal_smartcard.c **** /**
1092:src/stm32f1xx_hal_smartcard.c ****   * @brief  Abort ongoing transfers (blocking mode).
1093:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc SMARTCARD handle.
1094:src/stm32f1xx_hal_smartcard.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1095:src/stm32f1xx_hal_smartcard.c ****   *         This procedure performs following operations :
1096:src/stm32f1xx_hal_smartcard.c ****   *           - Disable PPP Interrupts
1097:src/stm32f1xx_hal_smartcard.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1098:src/stm32f1xx_hal_smartcard.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1099:src/stm32f1xx_hal_smartcard.c ****   *           - Set handle State to READY
1100:src/stm32f1xx_hal_smartcard.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1101:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
1102:src/stm32f1xx_hal_smartcard.c **** */
1103:src/stm32f1xx_hal_smartcard.c **** HAL_StatusTypeDef HAL_SMARTCARD_Abort(SMARTCARD_HandleTypeDef *hsc)
1104:src/stm32f1xx_hal_smartcard.c **** {
1105:src/stm32f1xx_hal_smartcard.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1106:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TC
1107:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
1108:src/stm32f1xx_hal_smartcard.c **** 
1109:src/stm32f1xx_hal_smartcard.c ****   /* Disable the SMARTCARD DMA Tx request if enabled */
1110:src/stm32f1xx_hal_smartcard.c ****   if(HAL_IS_BIT_SET(hsc->Instance->CR3, USART_CR3_DMAT))
1111:src/stm32f1xx_hal_smartcard.c ****   {
1112:src/stm32f1xx_hal_smartcard.c ****     CLEAR_BIT(hsc->Instance->CR3, USART_CR3_DMAT);
1113:src/stm32f1xx_hal_smartcard.c **** 
1114:src/stm32f1xx_hal_smartcard.c ****     /* Abort the SMARTCARD DMA Tx channel : use blocking DMA Abort API (no callback) */
1115:src/stm32f1xx_hal_smartcard.c ****     if(hsc->hdmatx != NULL)
1116:src/stm32f1xx_hal_smartcard.c ****     {
1117:src/stm32f1xx_hal_smartcard.c ****       /* Set the SMARTCARD DMA Abort callback to Null.
1118:src/stm32f1xx_hal_smartcard.c ****          No call back execution at end of DMA abort procedure */
1119:src/stm32f1xx_hal_smartcard.c ****       hsc->hdmatx->XferAbortCallback = NULL;
1120:src/stm32f1xx_hal_smartcard.c **** 
ARM GAS  /tmp/ccvrs2bU.s 			page 22


1121:src/stm32f1xx_hal_smartcard.c ****       HAL_DMA_Abort(hsc->hdmatx);
1122:src/stm32f1xx_hal_smartcard.c ****     }
1123:src/stm32f1xx_hal_smartcard.c ****   }
1124:src/stm32f1xx_hal_smartcard.c **** 
1125:src/stm32f1xx_hal_smartcard.c ****   /* Disable the SMARTCARD DMA Rx request if enabled */
1126:src/stm32f1xx_hal_smartcard.c ****   if(HAL_IS_BIT_SET(hsc->Instance->CR3, USART_CR3_DMAR))
1127:src/stm32f1xx_hal_smartcard.c ****   {
1128:src/stm32f1xx_hal_smartcard.c ****     CLEAR_BIT(hsc->Instance->CR3, USART_CR3_DMAR);
1129:src/stm32f1xx_hal_smartcard.c **** 
1130:src/stm32f1xx_hal_smartcard.c ****     /* Abort the SMARTCARD DMA Rx channel : use blocking DMA Abort API (no callback) */
1131:src/stm32f1xx_hal_smartcard.c ****     if(hsc->hdmarx != NULL)
1132:src/stm32f1xx_hal_smartcard.c ****     {
1133:src/stm32f1xx_hal_smartcard.c ****       /* Set the SMARTCARD DMA Abort callback to Null.
1134:src/stm32f1xx_hal_smartcard.c ****          No call back execution at end of DMA abort procedure */
1135:src/stm32f1xx_hal_smartcard.c ****       hsc->hdmarx->XferAbortCallback = NULL;
1136:src/stm32f1xx_hal_smartcard.c **** 
1137:src/stm32f1xx_hal_smartcard.c ****       HAL_DMA_Abort(hsc->hdmarx);
1138:src/stm32f1xx_hal_smartcard.c ****     }
1139:src/stm32f1xx_hal_smartcard.c ****   }
1140:src/stm32f1xx_hal_smartcard.c **** 
1141:src/stm32f1xx_hal_smartcard.c ****   /* Reset Tx and Rx transfer counters */
1142:src/stm32f1xx_hal_smartcard.c ****   hsc->TxXferCount = 0x00U;
1143:src/stm32f1xx_hal_smartcard.c ****   hsc->RxXferCount = 0x00U;
1144:src/stm32f1xx_hal_smartcard.c **** 
1145:src/stm32f1xx_hal_smartcard.c ****   /* Reset ErrorCode */
1146:src/stm32f1xx_hal_smartcard.c ****   hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
1147:src/stm32f1xx_hal_smartcard.c **** 
1148:src/stm32f1xx_hal_smartcard.c ****   /* Restore hsc->RxState and hsc->gState to Ready */
1149:src/stm32f1xx_hal_smartcard.c ****   hsc->RxState = HAL_SMARTCARD_STATE_READY;
1150:src/stm32f1xx_hal_smartcard.c ****   hsc->gState = HAL_SMARTCARD_STATE_READY;
1151:src/stm32f1xx_hal_smartcard.c **** 
1152:src/stm32f1xx_hal_smartcard.c ****   return HAL_OK;
1153:src/stm32f1xx_hal_smartcard.c **** }
1154:src/stm32f1xx_hal_smartcard.c **** 
1155:src/stm32f1xx_hal_smartcard.c **** /**
1156:src/stm32f1xx_hal_smartcard.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1157:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc SMARTCARD handle.
1158:src/stm32f1xx_hal_smartcard.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1159:src/stm32f1xx_hal_smartcard.c ****   *         This procedure performs following operations :
1160:src/stm32f1xx_hal_smartcard.c ****   *           - Disable SMARTCARD Interrupts (Tx)
1161:src/stm32f1xx_hal_smartcard.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1162:src/stm32f1xx_hal_smartcard.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1163:src/stm32f1xx_hal_smartcard.c ****   *           - Set handle State to READY
1164:src/stm32f1xx_hal_smartcard.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1165:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
1166:src/stm32f1xx_hal_smartcard.c **** */
1167:src/stm32f1xx_hal_smartcard.c **** HAL_StatusTypeDef HAL_SMARTCARD_AbortTransmit(SMARTCARD_HandleTypeDef *hsc)
1168:src/stm32f1xx_hal_smartcard.c **** {
1169:src/stm32f1xx_hal_smartcard.c ****   /* Disable TXEIE and TCIE interrupts */
1170:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1171:src/stm32f1xx_hal_smartcard.c **** 
1172:src/stm32f1xx_hal_smartcard.c ****   /* Disable the SMARTCARD DMA Tx request if enabled */
1173:src/stm32f1xx_hal_smartcard.c ****   if(HAL_IS_BIT_SET(hsc->Instance->CR3, USART_CR3_DMAT))
1174:src/stm32f1xx_hal_smartcard.c ****   {
1175:src/stm32f1xx_hal_smartcard.c ****     CLEAR_BIT(hsc->Instance->CR3, USART_CR3_DMAT);
1176:src/stm32f1xx_hal_smartcard.c **** 
1177:src/stm32f1xx_hal_smartcard.c ****     /* Abort the SMARTCARD DMA Tx channel : use blocking DMA Abort API (no callback) */
ARM GAS  /tmp/ccvrs2bU.s 			page 23


1178:src/stm32f1xx_hal_smartcard.c ****     if(hsc->hdmatx != NULL)
1179:src/stm32f1xx_hal_smartcard.c ****     {
1180:src/stm32f1xx_hal_smartcard.c ****       /* Set the SMARTCARD DMA Abort callback to Null.
1181:src/stm32f1xx_hal_smartcard.c ****          No call back execution at end of DMA abort procedure */
1182:src/stm32f1xx_hal_smartcard.c ****       hsc->hdmatx->XferAbortCallback = NULL;
1183:src/stm32f1xx_hal_smartcard.c **** 
1184:src/stm32f1xx_hal_smartcard.c ****       HAL_DMA_Abort(hsc->hdmatx);
1185:src/stm32f1xx_hal_smartcard.c ****     }
1186:src/stm32f1xx_hal_smartcard.c ****   }
1187:src/stm32f1xx_hal_smartcard.c **** 
1188:src/stm32f1xx_hal_smartcard.c ****   /* Reset Tx transfer counter */
1189:src/stm32f1xx_hal_smartcard.c ****   hsc->TxXferCount = 0x00U;
1190:src/stm32f1xx_hal_smartcard.c **** 
1191:src/stm32f1xx_hal_smartcard.c ****   /* Restore hsc->gState to Ready */
1192:src/stm32f1xx_hal_smartcard.c ****   hsc->gState = HAL_SMARTCARD_STATE_READY;
1193:src/stm32f1xx_hal_smartcard.c **** 
1194:src/stm32f1xx_hal_smartcard.c ****   return HAL_OK;
1195:src/stm32f1xx_hal_smartcard.c **** }
1196:src/stm32f1xx_hal_smartcard.c **** 
1197:src/stm32f1xx_hal_smartcard.c **** /**
1198:src/stm32f1xx_hal_smartcard.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1199:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc SMARTCARD handle.
1200:src/stm32f1xx_hal_smartcard.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1201:src/stm32f1xx_hal_smartcard.c ****   *         This procedure performs following operations :
1202:src/stm32f1xx_hal_smartcard.c ****   *           - Disable PPP Interrupts
1203:src/stm32f1xx_hal_smartcard.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1204:src/stm32f1xx_hal_smartcard.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1205:src/stm32f1xx_hal_smartcard.c ****   *           - Set handle State to READY
1206:src/stm32f1xx_hal_smartcard.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1207:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
1208:src/stm32f1xx_hal_smartcard.c **** */
1209:src/stm32f1xx_hal_smartcard.c **** HAL_StatusTypeDef HAL_SMARTCARD_AbortReceive(SMARTCARD_HandleTypeDef *hsc)
1210:src/stm32f1xx_hal_smartcard.c **** {
1211:src/stm32f1xx_hal_smartcard.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1212:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1213:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
1214:src/stm32f1xx_hal_smartcard.c **** 
1215:src/stm32f1xx_hal_smartcard.c ****   /* Disable the SMARTCARD DMA Rx request if enabled */
1216:src/stm32f1xx_hal_smartcard.c ****   if(HAL_IS_BIT_SET(hsc->Instance->CR3, USART_CR3_DMAR))
1217:src/stm32f1xx_hal_smartcard.c ****   {
1218:src/stm32f1xx_hal_smartcard.c ****     CLEAR_BIT(hsc->Instance->CR3, USART_CR3_DMAR);
1219:src/stm32f1xx_hal_smartcard.c **** 
1220:src/stm32f1xx_hal_smartcard.c ****     /* Abort the SMARTCARD DMA Rx channel : use blocking DMA Abort API (no callback) */
1221:src/stm32f1xx_hal_smartcard.c ****     if(hsc->hdmarx != NULL)
1222:src/stm32f1xx_hal_smartcard.c ****     {
1223:src/stm32f1xx_hal_smartcard.c ****       /* Set the SMARTCARD DMA Abort callback to Null.
1224:src/stm32f1xx_hal_smartcard.c ****          No call back execution at end of DMA abort procedure */
1225:src/stm32f1xx_hal_smartcard.c ****       hsc->hdmarx->XferAbortCallback = NULL;
1226:src/stm32f1xx_hal_smartcard.c **** 
1227:src/stm32f1xx_hal_smartcard.c ****       HAL_DMA_Abort(hsc->hdmarx);
1228:src/stm32f1xx_hal_smartcard.c ****     }
1229:src/stm32f1xx_hal_smartcard.c ****   }
1230:src/stm32f1xx_hal_smartcard.c **** 
1231:src/stm32f1xx_hal_smartcard.c ****   /* Reset Rx transfer counter */
1232:src/stm32f1xx_hal_smartcard.c ****   hsc->RxXferCount = 0x00U;
1233:src/stm32f1xx_hal_smartcard.c **** 
1234:src/stm32f1xx_hal_smartcard.c ****   /* Restore hsc->RxState to Ready */
ARM GAS  /tmp/ccvrs2bU.s 			page 24


1235:src/stm32f1xx_hal_smartcard.c ****   hsc->RxState = HAL_SMARTCARD_STATE_READY;
1236:src/stm32f1xx_hal_smartcard.c **** 
1237:src/stm32f1xx_hal_smartcard.c ****   return HAL_OK;
1238:src/stm32f1xx_hal_smartcard.c **** }
1239:src/stm32f1xx_hal_smartcard.c **** 
1240:src/stm32f1xx_hal_smartcard.c **** /**
1241:src/stm32f1xx_hal_smartcard.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1242:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc SMARTCARD handle.
1243:src/stm32f1xx_hal_smartcard.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1244:src/stm32f1xx_hal_smartcard.c ****   *         This procedure performs following operations :
1245:src/stm32f1xx_hal_smartcard.c ****   *           - Disable PPP Interrupts
1246:src/stm32f1xx_hal_smartcard.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1247:src/stm32f1xx_hal_smartcard.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1248:src/stm32f1xx_hal_smartcard.c ****   *           - Set handle State to READY
1249:src/stm32f1xx_hal_smartcard.c ****   *           - At abort completion, call user abort complete callback
1250:src/stm32f1xx_hal_smartcard.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1251:src/stm32f1xx_hal_smartcard.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1252:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
1253:src/stm32f1xx_hal_smartcard.c **** */
1254:src/stm32f1xx_hal_smartcard.c **** HAL_StatusTypeDef HAL_SMARTCARD_Abort_IT(SMARTCARD_HandleTypeDef *hsc)
1255:src/stm32f1xx_hal_smartcard.c **** {
1256:src/stm32f1xx_hal_smartcard.c ****   uint32_t AbortCplt = 0x01U;
1257:src/stm32f1xx_hal_smartcard.c **** 
1258:src/stm32f1xx_hal_smartcard.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1259:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TC
1260:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
1261:src/stm32f1xx_hal_smartcard.c **** 
1262:src/stm32f1xx_hal_smartcard.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to SMARTCARD Handle, DMA Abort complete callbac
1263:src/stm32f1xx_hal_smartcard.c ****      before any call to DMA Abort functions */
1264:src/stm32f1xx_hal_smartcard.c ****   /* DMA Tx Handle is valid */
1265:src/stm32f1xx_hal_smartcard.c ****   if(hsc->hdmatx != NULL)
1266:src/stm32f1xx_hal_smartcard.c ****   {
1267:src/stm32f1xx_hal_smartcard.c ****     /* Set DMA Abort Complete callback if SMARTCARD DMA Tx request if enabled.
1268:src/stm32f1xx_hal_smartcard.c ****        Otherwise, set it to NULL */
1269:src/stm32f1xx_hal_smartcard.c ****     if(HAL_IS_BIT_SET(hsc->Instance->CR3, USART_CR3_DMAT))
1270:src/stm32f1xx_hal_smartcard.c ****     {
1271:src/stm32f1xx_hal_smartcard.c ****       hsc->hdmatx->XferAbortCallback = SMARTCARD_DMATxAbortCallback;
1272:src/stm32f1xx_hal_smartcard.c ****     }
1273:src/stm32f1xx_hal_smartcard.c ****     else
1274:src/stm32f1xx_hal_smartcard.c ****     {
1275:src/stm32f1xx_hal_smartcard.c ****       hsc->hdmatx->XferAbortCallback = NULL;
1276:src/stm32f1xx_hal_smartcard.c ****     }
1277:src/stm32f1xx_hal_smartcard.c ****   }
1278:src/stm32f1xx_hal_smartcard.c ****   /* DMA Rx Handle is valid */
1279:src/stm32f1xx_hal_smartcard.c ****   if(hsc->hdmarx != NULL)
1280:src/stm32f1xx_hal_smartcard.c ****   {
1281:src/stm32f1xx_hal_smartcard.c ****     /* Set DMA Abort Complete callback if SMARTCARD DMA Rx request if enabled.
1282:src/stm32f1xx_hal_smartcard.c ****        Otherwise, set it to NULL */
1283:src/stm32f1xx_hal_smartcard.c ****     if(HAL_IS_BIT_SET(hsc->Instance->CR3, USART_CR3_DMAR))
1284:src/stm32f1xx_hal_smartcard.c ****     {
1285:src/stm32f1xx_hal_smartcard.c ****       hsc->hdmarx->XferAbortCallback = SMARTCARD_DMARxAbortCallback;
1286:src/stm32f1xx_hal_smartcard.c ****     }
1287:src/stm32f1xx_hal_smartcard.c ****     else
1288:src/stm32f1xx_hal_smartcard.c ****     {
1289:src/stm32f1xx_hal_smartcard.c ****       hsc->hdmarx->XferAbortCallback = NULL;
1290:src/stm32f1xx_hal_smartcard.c ****     }
1291:src/stm32f1xx_hal_smartcard.c ****   }
ARM GAS  /tmp/ccvrs2bU.s 			page 25


1292:src/stm32f1xx_hal_smartcard.c **** 
1293:src/stm32f1xx_hal_smartcard.c ****   /* Disable the SMARTCARD DMA Tx request if enabled */
1294:src/stm32f1xx_hal_smartcard.c ****   if(HAL_IS_BIT_SET(hsc->Instance->CR3, USART_CR3_DMAT))
1295:src/stm32f1xx_hal_smartcard.c ****   {
1296:src/stm32f1xx_hal_smartcard.c ****     /* Disable DMA Tx at SMARTCARD level */
1297:src/stm32f1xx_hal_smartcard.c ****     CLEAR_BIT(hsc->Instance->CR3, USART_CR3_DMAT);
1298:src/stm32f1xx_hal_smartcard.c **** 
1299:src/stm32f1xx_hal_smartcard.c ****     /* Abort the SMARTCARD DMA Tx channel : use non blocking DMA Abort API (callback) */
1300:src/stm32f1xx_hal_smartcard.c ****     if(hsc->hdmatx != NULL)
1301:src/stm32f1xx_hal_smartcard.c ****     {
1302:src/stm32f1xx_hal_smartcard.c ****       /* SMARTCARD Tx DMA Abort callback has already been initialised :
1303:src/stm32f1xx_hal_smartcard.c ****          will lead to call HAL_SMARTCARD_AbortCpltCallback() at end of DMA abort procedure */
1304:src/stm32f1xx_hal_smartcard.c **** 
1305:src/stm32f1xx_hal_smartcard.c ****       /* Abort DMA TX */
1306:src/stm32f1xx_hal_smartcard.c ****       if(HAL_DMA_Abort_IT(hsc->hdmatx) != HAL_OK)
1307:src/stm32f1xx_hal_smartcard.c ****       {
1308:src/stm32f1xx_hal_smartcard.c ****         hsc->hdmatx->XferAbortCallback = NULL;
1309:src/stm32f1xx_hal_smartcard.c ****       }
1310:src/stm32f1xx_hal_smartcard.c ****       else
1311:src/stm32f1xx_hal_smartcard.c ****       {
1312:src/stm32f1xx_hal_smartcard.c ****         AbortCplt = 0x00U;
1313:src/stm32f1xx_hal_smartcard.c ****       }
1314:src/stm32f1xx_hal_smartcard.c ****     }
1315:src/stm32f1xx_hal_smartcard.c ****   }
1316:src/stm32f1xx_hal_smartcard.c **** 
1317:src/stm32f1xx_hal_smartcard.c ****   /* Disable the SMARTCARD DMA Rx request if enabled */
1318:src/stm32f1xx_hal_smartcard.c ****   if(HAL_IS_BIT_SET(hsc->Instance->CR3, USART_CR3_DMAR))
1319:src/stm32f1xx_hal_smartcard.c ****   {
1320:src/stm32f1xx_hal_smartcard.c ****     CLEAR_BIT(hsc->Instance->CR3, USART_CR3_DMAR);
1321:src/stm32f1xx_hal_smartcard.c **** 
1322:src/stm32f1xx_hal_smartcard.c ****     /* Abort the SMARTCARD DMA Rx channel : use non blocking DMA Abort API (callback) */
1323:src/stm32f1xx_hal_smartcard.c ****     if(hsc->hdmarx != NULL)
1324:src/stm32f1xx_hal_smartcard.c ****     {
1325:src/stm32f1xx_hal_smartcard.c ****       /* SMARTCARD Rx DMA Abort callback has already been initialised :
1326:src/stm32f1xx_hal_smartcard.c ****          will lead to call HAL_SMARTCARD_AbortCpltCallback() at end of DMA abort procedure */
1327:src/stm32f1xx_hal_smartcard.c **** 
1328:src/stm32f1xx_hal_smartcard.c ****       /* Abort DMA RX */
1329:src/stm32f1xx_hal_smartcard.c ****       if(HAL_DMA_Abort_IT(hsc->hdmarx) != HAL_OK)
1330:src/stm32f1xx_hal_smartcard.c ****       {
1331:src/stm32f1xx_hal_smartcard.c ****         hsc->hdmarx->XferAbortCallback = NULL;
1332:src/stm32f1xx_hal_smartcard.c ****         AbortCplt = 0x01U;
1333:src/stm32f1xx_hal_smartcard.c ****       }
1334:src/stm32f1xx_hal_smartcard.c ****       else
1335:src/stm32f1xx_hal_smartcard.c ****       {
1336:src/stm32f1xx_hal_smartcard.c ****         AbortCplt = 0x00U;
1337:src/stm32f1xx_hal_smartcard.c ****       }
1338:src/stm32f1xx_hal_smartcard.c ****     }
1339:src/stm32f1xx_hal_smartcard.c ****   }
1340:src/stm32f1xx_hal_smartcard.c **** 
1341:src/stm32f1xx_hal_smartcard.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1342:src/stm32f1xx_hal_smartcard.c ****   if(AbortCplt == 0x01U)
1343:src/stm32f1xx_hal_smartcard.c ****   {
1344:src/stm32f1xx_hal_smartcard.c ****     /* Reset Tx and Rx transfer counters */
1345:src/stm32f1xx_hal_smartcard.c ****     hsc->TxXferCount = 0x00U;
1346:src/stm32f1xx_hal_smartcard.c ****     hsc->RxXferCount = 0x00U;
1347:src/stm32f1xx_hal_smartcard.c **** 
1348:src/stm32f1xx_hal_smartcard.c ****     /* Reset ErrorCode */
ARM GAS  /tmp/ccvrs2bU.s 			page 26


1349:src/stm32f1xx_hal_smartcard.c ****     hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
1350:src/stm32f1xx_hal_smartcard.c **** 
1351:src/stm32f1xx_hal_smartcard.c ****     /* Restore hsc->gState and hsc->RxState to Ready */
1352:src/stm32f1xx_hal_smartcard.c ****     hsc->gState  = HAL_SMARTCARD_STATE_READY;
1353:src/stm32f1xx_hal_smartcard.c ****     hsc->RxState = HAL_SMARTCARD_STATE_READY;
1354:src/stm32f1xx_hal_smartcard.c **** 
1355:src/stm32f1xx_hal_smartcard.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1356:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
1357:src/stm32f1xx_hal_smartcard.c ****     /* Call registered Abort complete callback */
1358:src/stm32f1xx_hal_smartcard.c ****     hsc->AbortCpltCallback(hsc);
1359:src/stm32f1xx_hal_smartcard.c **** #else
1360:src/stm32f1xx_hal_smartcard.c ****     /* Call legacy weak Abort complete callback */
1361:src/stm32f1xx_hal_smartcard.c ****     HAL_SMARTCARD_AbortCpltCallback(hsc);
1362:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
1363:src/stm32f1xx_hal_smartcard.c ****   }
1364:src/stm32f1xx_hal_smartcard.c ****   return HAL_OK;
1365:src/stm32f1xx_hal_smartcard.c **** }
1366:src/stm32f1xx_hal_smartcard.c **** 
1367:src/stm32f1xx_hal_smartcard.c **** /**
1368:src/stm32f1xx_hal_smartcard.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1369:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc SMARTCARD handle.
1370:src/stm32f1xx_hal_smartcard.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1371:src/stm32f1xx_hal_smartcard.c ****   *         This procedure performs following operations :
1372:src/stm32f1xx_hal_smartcard.c ****   *           - Disable SMARTCARD Interrupts (Tx)
1373:src/stm32f1xx_hal_smartcard.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1374:src/stm32f1xx_hal_smartcard.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1375:src/stm32f1xx_hal_smartcard.c ****   *           - Set handle State to READY
1376:src/stm32f1xx_hal_smartcard.c ****   *           - At abort completion, call user abort complete callback
1377:src/stm32f1xx_hal_smartcard.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1378:src/stm32f1xx_hal_smartcard.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1379:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
1380:src/stm32f1xx_hal_smartcard.c **** */
1381:src/stm32f1xx_hal_smartcard.c **** HAL_StatusTypeDef HAL_SMARTCARD_AbortTransmit_IT(SMARTCARD_HandleTypeDef *hsc)
1382:src/stm32f1xx_hal_smartcard.c **** {
1383:src/stm32f1xx_hal_smartcard.c ****   /* Disable TXEIE and TCIE interrupts */
1384:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1385:src/stm32f1xx_hal_smartcard.c **** 
1386:src/stm32f1xx_hal_smartcard.c ****   /* Disable the SMARTCARD DMA Tx request if enabled */
1387:src/stm32f1xx_hal_smartcard.c ****   if(HAL_IS_BIT_SET(hsc->Instance->CR3, USART_CR3_DMAT))
1388:src/stm32f1xx_hal_smartcard.c ****   {
1389:src/stm32f1xx_hal_smartcard.c ****     CLEAR_BIT(hsc->Instance->CR3, USART_CR3_DMAT);
1390:src/stm32f1xx_hal_smartcard.c **** 
1391:src/stm32f1xx_hal_smartcard.c ****     /* Abort the SMARTCARD DMA Tx channel : use blocking DMA Abort API (no callback) */
1392:src/stm32f1xx_hal_smartcard.c ****     if(hsc->hdmatx != NULL)
1393:src/stm32f1xx_hal_smartcard.c ****     {
1394:src/stm32f1xx_hal_smartcard.c ****       /* Set the SMARTCARD DMA Abort callback :
1395:src/stm32f1xx_hal_smartcard.c ****          will lead to call HAL_SMARTCARD_AbortCpltCallback() at end of DMA abort procedure */
1396:src/stm32f1xx_hal_smartcard.c ****       hsc->hdmatx->XferAbortCallback = SMARTCARD_DMATxOnlyAbortCallback;
1397:src/stm32f1xx_hal_smartcard.c **** 
1398:src/stm32f1xx_hal_smartcard.c ****       /* Abort DMA TX */
1399:src/stm32f1xx_hal_smartcard.c ****       if(HAL_DMA_Abort_IT(hsc->hdmatx) != HAL_OK)
1400:src/stm32f1xx_hal_smartcard.c ****       {
1401:src/stm32f1xx_hal_smartcard.c ****         /* Call Directly hsc->hdmatx->XferAbortCallback function in case of error */
1402:src/stm32f1xx_hal_smartcard.c ****         hsc->hdmatx->XferAbortCallback(hsc->hdmatx);
1403:src/stm32f1xx_hal_smartcard.c ****       }
1404:src/stm32f1xx_hal_smartcard.c ****     }
1405:src/stm32f1xx_hal_smartcard.c ****     else
ARM GAS  /tmp/ccvrs2bU.s 			page 27


1406:src/stm32f1xx_hal_smartcard.c ****     {
1407:src/stm32f1xx_hal_smartcard.c ****       /* Reset Tx transfer counter */
1408:src/stm32f1xx_hal_smartcard.c ****       hsc->TxXferCount = 0x00U;
1409:src/stm32f1xx_hal_smartcard.c **** 
1410:src/stm32f1xx_hal_smartcard.c ****       /* Restore hsc->gState to Ready */
1411:src/stm32f1xx_hal_smartcard.c ****       hsc->gState = HAL_SMARTCARD_STATE_READY;
1412:src/stm32f1xx_hal_smartcard.c **** 
1413:src/stm32f1xx_hal_smartcard.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1414:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
1415:src/stm32f1xx_hal_smartcard.c ****       /* Call registered Abort Transmit Complete Callback */
1416:src/stm32f1xx_hal_smartcard.c ****       hsc->AbortTransmitCpltCallback(hsc);
1417:src/stm32f1xx_hal_smartcard.c **** #else
1418:src/stm32f1xx_hal_smartcard.c ****       /* Call legacy weak Abort Transmit Complete Callback */
1419:src/stm32f1xx_hal_smartcard.c ****       HAL_SMARTCARD_AbortTransmitCpltCallback(hsc);
1420:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
1421:src/stm32f1xx_hal_smartcard.c ****     }
1422:src/stm32f1xx_hal_smartcard.c ****   }
1423:src/stm32f1xx_hal_smartcard.c ****   else
1424:src/stm32f1xx_hal_smartcard.c ****   {
1425:src/stm32f1xx_hal_smartcard.c ****     /* Reset Tx transfer counter */
1426:src/stm32f1xx_hal_smartcard.c ****     hsc->TxXferCount = 0x00U;
1427:src/stm32f1xx_hal_smartcard.c **** 
1428:src/stm32f1xx_hal_smartcard.c ****     /* Restore hsc->gState to Ready */
1429:src/stm32f1xx_hal_smartcard.c ****     hsc->gState = HAL_SMARTCARD_STATE_READY;
1430:src/stm32f1xx_hal_smartcard.c **** 
1431:src/stm32f1xx_hal_smartcard.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1432:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
1433:src/stm32f1xx_hal_smartcard.c ****     /* Call registered Abort Transmit Complete Callback */
1434:src/stm32f1xx_hal_smartcard.c ****     hsc->AbortTransmitCpltCallback(hsc);
1435:src/stm32f1xx_hal_smartcard.c **** #else
1436:src/stm32f1xx_hal_smartcard.c ****     /* Call legacy weak Abort Transmit Complete Callback */
1437:src/stm32f1xx_hal_smartcard.c ****     HAL_SMARTCARD_AbortTransmitCpltCallback(hsc);
1438:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
1439:src/stm32f1xx_hal_smartcard.c ****   }
1440:src/stm32f1xx_hal_smartcard.c **** 
1441:src/stm32f1xx_hal_smartcard.c ****   return HAL_OK;
1442:src/stm32f1xx_hal_smartcard.c **** }
1443:src/stm32f1xx_hal_smartcard.c **** 
1444:src/stm32f1xx_hal_smartcard.c **** /**
1445:src/stm32f1xx_hal_smartcard.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
1446:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc SMARTCARD handle.
1447:src/stm32f1xx_hal_smartcard.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1448:src/stm32f1xx_hal_smartcard.c ****   *         This procedure performs following operations :
1449:src/stm32f1xx_hal_smartcard.c ****   *           - Disable SMARTCARD Interrupts (Rx)
1450:src/stm32f1xx_hal_smartcard.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1451:src/stm32f1xx_hal_smartcard.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1452:src/stm32f1xx_hal_smartcard.c ****   *           - Set handle State to READY
1453:src/stm32f1xx_hal_smartcard.c ****   *           - At abort completion, call user abort complete callback
1454:src/stm32f1xx_hal_smartcard.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1455:src/stm32f1xx_hal_smartcard.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1456:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
1457:src/stm32f1xx_hal_smartcard.c **** */
1458:src/stm32f1xx_hal_smartcard.c **** HAL_StatusTypeDef HAL_SMARTCARD_AbortReceive_IT(SMARTCARD_HandleTypeDef *hsc)
1459:src/stm32f1xx_hal_smartcard.c **** {
1460:src/stm32f1xx_hal_smartcard.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1461:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1462:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
ARM GAS  /tmp/ccvrs2bU.s 			page 28


1463:src/stm32f1xx_hal_smartcard.c **** 
1464:src/stm32f1xx_hal_smartcard.c ****   /* Disable the SMARTCARD DMA Rx request if enabled */
1465:src/stm32f1xx_hal_smartcard.c ****   if(HAL_IS_BIT_SET(hsc->Instance->CR3, USART_CR3_DMAR))
1466:src/stm32f1xx_hal_smartcard.c ****   {
1467:src/stm32f1xx_hal_smartcard.c ****     CLEAR_BIT(hsc->Instance->CR3, USART_CR3_DMAR);
1468:src/stm32f1xx_hal_smartcard.c **** 
1469:src/stm32f1xx_hal_smartcard.c ****     /* Abort the SMARTCARD DMA Rx channel : use blocking DMA Abort API (no callback) */
1470:src/stm32f1xx_hal_smartcard.c ****     if(hsc->hdmarx != NULL)
1471:src/stm32f1xx_hal_smartcard.c ****     {
1472:src/stm32f1xx_hal_smartcard.c ****       /* Set the SMARTCARD DMA Abort callback :
1473:src/stm32f1xx_hal_smartcard.c ****          will lead to call HAL_SMARTCARD_AbortCpltCallback() at end of DMA abort procedure */
1474:src/stm32f1xx_hal_smartcard.c ****       hsc->hdmarx->XferAbortCallback = SMARTCARD_DMARxOnlyAbortCallback;
1475:src/stm32f1xx_hal_smartcard.c **** 
1476:src/stm32f1xx_hal_smartcard.c ****       /* Abort DMA RX */
1477:src/stm32f1xx_hal_smartcard.c ****       if(HAL_DMA_Abort_IT(hsc->hdmarx) != HAL_OK)
1478:src/stm32f1xx_hal_smartcard.c ****       {
1479:src/stm32f1xx_hal_smartcard.c ****         /* Call Directly hsc->hdmarx->XferAbortCallback function in case of error */
1480:src/stm32f1xx_hal_smartcard.c ****         hsc->hdmarx->XferAbortCallback(hsc->hdmarx);
1481:src/stm32f1xx_hal_smartcard.c ****       }
1482:src/stm32f1xx_hal_smartcard.c ****     }
1483:src/stm32f1xx_hal_smartcard.c ****     else
1484:src/stm32f1xx_hal_smartcard.c ****     {
1485:src/stm32f1xx_hal_smartcard.c ****       /* Reset Rx transfer counter */
1486:src/stm32f1xx_hal_smartcard.c ****       hsc->RxXferCount = 0x00U;
1487:src/stm32f1xx_hal_smartcard.c **** 
1488:src/stm32f1xx_hal_smartcard.c ****       /* Restore hsc->RxState to Ready */
1489:src/stm32f1xx_hal_smartcard.c ****       hsc->RxState = HAL_SMARTCARD_STATE_READY;
1490:src/stm32f1xx_hal_smartcard.c **** 
1491:src/stm32f1xx_hal_smartcard.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1492:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
1493:src/stm32f1xx_hal_smartcard.c ****       /* Call registered Abort Receive Complete Callback */
1494:src/stm32f1xx_hal_smartcard.c ****       hsc->AbortReceiveCpltCallback(hsc);
1495:src/stm32f1xx_hal_smartcard.c **** #else
1496:src/stm32f1xx_hal_smartcard.c ****       /* Call legacy weak Abort Receive Complete Callback */
1497:src/stm32f1xx_hal_smartcard.c ****       HAL_SMARTCARD_AbortReceiveCpltCallback(hsc);
1498:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
1499:src/stm32f1xx_hal_smartcard.c ****     }
1500:src/stm32f1xx_hal_smartcard.c ****   }
1501:src/stm32f1xx_hal_smartcard.c ****   else
1502:src/stm32f1xx_hal_smartcard.c ****   {
1503:src/stm32f1xx_hal_smartcard.c ****     /* Reset Rx transfer counter */
1504:src/stm32f1xx_hal_smartcard.c ****     hsc->RxXferCount = 0x00U;
1505:src/stm32f1xx_hal_smartcard.c **** 
1506:src/stm32f1xx_hal_smartcard.c ****     /* Restore hsc->RxState to Ready */
1507:src/stm32f1xx_hal_smartcard.c ****     hsc->RxState = HAL_SMARTCARD_STATE_READY;
1508:src/stm32f1xx_hal_smartcard.c **** 
1509:src/stm32f1xx_hal_smartcard.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1510:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
1511:src/stm32f1xx_hal_smartcard.c ****     /* Call registered Abort Receive Complete Callback */
1512:src/stm32f1xx_hal_smartcard.c ****     hsc->AbortReceiveCpltCallback(hsc);
1513:src/stm32f1xx_hal_smartcard.c **** #else
1514:src/stm32f1xx_hal_smartcard.c ****     /* Call legacy weak Abort Receive Complete Callback */
1515:src/stm32f1xx_hal_smartcard.c ****     HAL_SMARTCARD_AbortReceiveCpltCallback(hsc);
1516:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
1517:src/stm32f1xx_hal_smartcard.c ****   }
1518:src/stm32f1xx_hal_smartcard.c **** 
1519:src/stm32f1xx_hal_smartcard.c ****   return HAL_OK;
ARM GAS  /tmp/ccvrs2bU.s 			page 29


1520:src/stm32f1xx_hal_smartcard.c **** }
1521:src/stm32f1xx_hal_smartcard.c **** 
1522:src/stm32f1xx_hal_smartcard.c **** /**
1523:src/stm32f1xx_hal_smartcard.c ****   * @brief This function handles SMARTCARD interrupt request.
1524:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
1525:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
1526:src/stm32f1xx_hal_smartcard.c ****   * @retval None
1527:src/stm32f1xx_hal_smartcard.c ****   */
1528:src/stm32f1xx_hal_smartcard.c **** void HAL_SMARTCARD_IRQHandler(SMARTCARD_HandleTypeDef *hsc)
1529:src/stm32f1xx_hal_smartcard.c **** {
1530:src/stm32f1xx_hal_smartcard.c ****   uint32_t isrflags   = READ_REG(hsc->Instance->SR);
1531:src/stm32f1xx_hal_smartcard.c ****   uint32_t cr1its     = READ_REG(hsc->Instance->CR1);
1532:src/stm32f1xx_hal_smartcard.c ****   uint32_t cr3its     = READ_REG(hsc->Instance->CR3);
1533:src/stm32f1xx_hal_smartcard.c ****   uint32_t dmarequest = 0x00U;
1534:src/stm32f1xx_hal_smartcard.c ****   uint32_t errorflags = 0x00U;
1535:src/stm32f1xx_hal_smartcard.c **** 
1536:src/stm32f1xx_hal_smartcard.c ****   /* If no error occurs */
1537:src/stm32f1xx_hal_smartcard.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
1538:src/stm32f1xx_hal_smartcard.c ****   if(errorflags == RESET)
1539:src/stm32f1xx_hal_smartcard.c ****   {
1540:src/stm32f1xx_hal_smartcard.c ****     /* SMARTCARD in mode Receiver -------------------------------------------------*/
1541:src/stm32f1xx_hal_smartcard.c ****     if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
1542:src/stm32f1xx_hal_smartcard.c ****     {
1543:src/stm32f1xx_hal_smartcard.c ****       SMARTCARD_Receive_IT(hsc);
1544:src/stm32f1xx_hal_smartcard.c ****       return;
1545:src/stm32f1xx_hal_smartcard.c ****     }
1546:src/stm32f1xx_hal_smartcard.c ****   }
1547:src/stm32f1xx_hal_smartcard.c **** 
1548:src/stm32f1xx_hal_smartcard.c ****   /* If some errors occur */
1549:src/stm32f1xx_hal_smartcard.c ****   if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE 
1550:src/stm32f1xx_hal_smartcard.c ****   {
1551:src/stm32f1xx_hal_smartcard.c ****     /* SMARTCARD parity error interrupt occurred ---------------------------*/
1552:src/stm32f1xx_hal_smartcard.c ****     if(((isrflags & SMARTCARD_FLAG_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
1553:src/stm32f1xx_hal_smartcard.c ****     {
1554:src/stm32f1xx_hal_smartcard.c ****       hsc->ErrorCode |= HAL_SMARTCARD_ERROR_PE;
1555:src/stm32f1xx_hal_smartcard.c ****     }
1556:src/stm32f1xx_hal_smartcard.c **** 
1557:src/stm32f1xx_hal_smartcard.c ****     /* SMARTCARD frame error interrupt occurred ----------------------------*/
1558:src/stm32f1xx_hal_smartcard.c ****     if(((isrflags & SMARTCARD_FLAG_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1559:src/stm32f1xx_hal_smartcard.c ****     {
1560:src/stm32f1xx_hal_smartcard.c ****       hsc->ErrorCode |= HAL_SMARTCARD_ERROR_FE;
1561:src/stm32f1xx_hal_smartcard.c ****     }
1562:src/stm32f1xx_hal_smartcard.c **** 
1563:src/stm32f1xx_hal_smartcard.c ****     /* SMARTCARD noise error interrupt occurred ----------------------------*/
1564:src/stm32f1xx_hal_smartcard.c ****     if(((isrflags & SMARTCARD_FLAG_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1565:src/stm32f1xx_hal_smartcard.c ****     {
1566:src/stm32f1xx_hal_smartcard.c ****       hsc->ErrorCode |= HAL_SMARTCARD_ERROR_NE;
1567:src/stm32f1xx_hal_smartcard.c ****     }
1568:src/stm32f1xx_hal_smartcard.c **** 
1569:src/stm32f1xx_hal_smartcard.c ****     /* SMARTCARD Over-Run interrupt occurred -------------------------------*/
1570:src/stm32f1xx_hal_smartcard.c ****     if(((isrflags & SMARTCARD_FLAG_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1571:src/stm32f1xx_hal_smartcard.c ****     {
1572:src/stm32f1xx_hal_smartcard.c ****       hsc->ErrorCode |= HAL_SMARTCARD_ERROR_ORE;
1573:src/stm32f1xx_hal_smartcard.c ****     }
1574:src/stm32f1xx_hal_smartcard.c ****     /* Call the Error call Back in case of Errors --------------------------*/
1575:src/stm32f1xx_hal_smartcard.c ****     if(hsc->ErrorCode != HAL_SMARTCARD_ERROR_NONE)
1576:src/stm32f1xx_hal_smartcard.c ****     {
ARM GAS  /tmp/ccvrs2bU.s 			page 30


1577:src/stm32f1xx_hal_smartcard.c ****       /* SMARTCARD in mode Receiver ----------------------------------------*/
1578:src/stm32f1xx_hal_smartcard.c ****       if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
1579:src/stm32f1xx_hal_smartcard.c ****       {
1580:src/stm32f1xx_hal_smartcard.c ****         SMARTCARD_Receive_IT(hsc);
1581:src/stm32f1xx_hal_smartcard.c ****       }
1582:src/stm32f1xx_hal_smartcard.c **** 
1583:src/stm32f1xx_hal_smartcard.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
1584:src/stm32f1xx_hal_smartcard.c ****          consider error as blocking */
1585:src/stm32f1xx_hal_smartcard.c ****       dmarequest = HAL_IS_BIT_SET(hsc->Instance->CR3, USART_CR3_DMAR);
1586:src/stm32f1xx_hal_smartcard.c ****       if(((hsc->ErrorCode & HAL_SMARTCARD_ERROR_ORE) != RESET) || dmarequest)
1587:src/stm32f1xx_hal_smartcard.c ****       {
1588:src/stm32f1xx_hal_smartcard.c ****         /* Blocking error : transfer is aborted
1589:src/stm32f1xx_hal_smartcard.c ****           Set the SMARTCARD state ready to be able to start again the process,
1590:src/stm32f1xx_hal_smartcard.c ****           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
1591:src/stm32f1xx_hal_smartcard.c ****         SMARTCARD_EndRxTransfer(hsc);
1592:src/stm32f1xx_hal_smartcard.c ****         /* Disable the SMARTCARD DMA Rx request if enabled */
1593:src/stm32f1xx_hal_smartcard.c ****         if(HAL_IS_BIT_SET(hsc->Instance->CR3, USART_CR3_DMAR))
1594:src/stm32f1xx_hal_smartcard.c ****         {
1595:src/stm32f1xx_hal_smartcard.c ****           CLEAR_BIT(hsc->Instance->CR3, USART_CR3_DMAR);
1596:src/stm32f1xx_hal_smartcard.c **** 
1597:src/stm32f1xx_hal_smartcard.c ****           /* Abort the SMARTCARD DMA Rx channel */
1598:src/stm32f1xx_hal_smartcard.c ****           if(hsc->hdmarx != NULL)
1599:src/stm32f1xx_hal_smartcard.c ****           {
1600:src/stm32f1xx_hal_smartcard.c ****             /* Set the SMARTCARD DMA Abort callback :
1601:src/stm32f1xx_hal_smartcard.c ****               will lead to call HAL_SMARTCARD_ErrorCallback() at end of DMA abort procedure */
1602:src/stm32f1xx_hal_smartcard.c ****             hsc->hdmarx->XferAbortCallback = SMARTCARD_DMAAbortOnError;
1603:src/stm32f1xx_hal_smartcard.c **** 
1604:src/stm32f1xx_hal_smartcard.c ****            if(HAL_DMA_Abort_IT(hsc->hdmarx) != HAL_OK)
1605:src/stm32f1xx_hal_smartcard.c ****             {
1606:src/stm32f1xx_hal_smartcard.c ****               /* Call Directly XferAbortCallback function in case of error */
1607:src/stm32f1xx_hal_smartcard.c ****               hsc->hdmarx->XferAbortCallback(hsc->hdmarx);
1608:src/stm32f1xx_hal_smartcard.c ****             }
1609:src/stm32f1xx_hal_smartcard.c ****           }
1610:src/stm32f1xx_hal_smartcard.c ****           else
1611:src/stm32f1xx_hal_smartcard.c ****           {
1612:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
1613:src/stm32f1xx_hal_smartcard.c ****             /* Call registered user error callback */
1614:src/stm32f1xx_hal_smartcard.c ****             hsc->ErrorCallback(hsc);
1615:src/stm32f1xx_hal_smartcard.c **** #else
1616:src/stm32f1xx_hal_smartcard.c ****             /* Call legacy weak user error callback */
1617:src/stm32f1xx_hal_smartcard.c ****             HAL_SMARTCARD_ErrorCallback(hsc);
1618:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
1619:src/stm32f1xx_hal_smartcard.c ****           }
1620:src/stm32f1xx_hal_smartcard.c ****         }
1621:src/stm32f1xx_hal_smartcard.c ****         else
1622:src/stm32f1xx_hal_smartcard.c ****         {
1623:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
1624:src/stm32f1xx_hal_smartcard.c ****           /* Call registered user error callback */
1625:src/stm32f1xx_hal_smartcard.c ****           hsc->ErrorCallback(hsc);
1626:src/stm32f1xx_hal_smartcard.c **** #else
1627:src/stm32f1xx_hal_smartcard.c ****           /* Call legacy weak user error callback */
1628:src/stm32f1xx_hal_smartcard.c ****           HAL_SMARTCARD_ErrorCallback(hsc);
1629:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
1630:src/stm32f1xx_hal_smartcard.c ****         }
1631:src/stm32f1xx_hal_smartcard.c ****       }
1632:src/stm32f1xx_hal_smartcard.c ****       else
1633:src/stm32f1xx_hal_smartcard.c ****       {
ARM GAS  /tmp/ccvrs2bU.s 			page 31


1634:src/stm32f1xx_hal_smartcard.c ****         /* Non Blocking error : transfer could go on.
1635:src/stm32f1xx_hal_smartcard.c ****            Error is notified to user through user error callback */
1636:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
1637:src/stm32f1xx_hal_smartcard.c ****         /* Call registered user error callback */
1638:src/stm32f1xx_hal_smartcard.c ****         hsc->ErrorCallback(hsc);
1639:src/stm32f1xx_hal_smartcard.c **** #else
1640:src/stm32f1xx_hal_smartcard.c ****         /* Call legacy weak user error callback */
1641:src/stm32f1xx_hal_smartcard.c ****         HAL_SMARTCARD_ErrorCallback(hsc);
1642:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
1643:src/stm32f1xx_hal_smartcard.c ****         hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
1644:src/stm32f1xx_hal_smartcard.c ****       }
1645:src/stm32f1xx_hal_smartcard.c ****     }
1646:src/stm32f1xx_hal_smartcard.c ****     return;
1647:src/stm32f1xx_hal_smartcard.c ****   } /* End if some error occurs */
1648:src/stm32f1xx_hal_smartcard.c **** 
1649:src/stm32f1xx_hal_smartcard.c ****   /* SMARTCARD in mode Transmitter ------------------------------------------*/
1650:src/stm32f1xx_hal_smartcard.c ****   if(((isrflags & SMARTCARD_FLAG_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
1651:src/stm32f1xx_hal_smartcard.c ****   {
1652:src/stm32f1xx_hal_smartcard.c ****     SMARTCARD_Transmit_IT(hsc);
1653:src/stm32f1xx_hal_smartcard.c ****     return;
1654:src/stm32f1xx_hal_smartcard.c ****   }
1655:src/stm32f1xx_hal_smartcard.c **** 
1656:src/stm32f1xx_hal_smartcard.c ****   /* SMARTCARD in mode Transmitter (transmission end) -----------------------*/
1657:src/stm32f1xx_hal_smartcard.c ****   if(((isrflags & SMARTCARD_FLAG_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
1658:src/stm32f1xx_hal_smartcard.c ****   {
1659:src/stm32f1xx_hal_smartcard.c ****     SMARTCARD_EndTransmit_IT(hsc);
1660:src/stm32f1xx_hal_smartcard.c ****     return;
1661:src/stm32f1xx_hal_smartcard.c ****   }
1662:src/stm32f1xx_hal_smartcard.c **** }
1663:src/stm32f1xx_hal_smartcard.c **** 
1664:src/stm32f1xx_hal_smartcard.c **** /**
1665:src/stm32f1xx_hal_smartcard.c ****   * @brief Tx Transfer completed callbacks
1666:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
1667:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
1668:src/stm32f1xx_hal_smartcard.c ****   * @retval None
1669:src/stm32f1xx_hal_smartcard.c ****   */
1670:src/stm32f1xx_hal_smartcard.c **** __weak void HAL_SMARTCARD_TxCpltCallback(SMARTCARD_HandleTypeDef *hsc)
1671:src/stm32f1xx_hal_smartcard.c **** {
1672:src/stm32f1xx_hal_smartcard.c ****   /* Prevent unused argument(s) compilation warning */
1673:src/stm32f1xx_hal_smartcard.c ****   UNUSED(hsc);
1674:src/stm32f1xx_hal_smartcard.c **** 
1675:src/stm32f1xx_hal_smartcard.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1676:src/stm32f1xx_hal_smartcard.c ****             the HAL_SMARTCARD_TxCpltCallback can be implemented in the user file.
1677:src/stm32f1xx_hal_smartcard.c ****    */
1678:src/stm32f1xx_hal_smartcard.c **** }
1679:src/stm32f1xx_hal_smartcard.c **** 
1680:src/stm32f1xx_hal_smartcard.c **** /**
1681:src/stm32f1xx_hal_smartcard.c ****   * @brief Rx Transfer completed callback
1682:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
1683:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
1684:src/stm32f1xx_hal_smartcard.c ****   * @retval None
1685:src/stm32f1xx_hal_smartcard.c ****   */
1686:src/stm32f1xx_hal_smartcard.c **** __weak void HAL_SMARTCARD_RxCpltCallback(SMARTCARD_HandleTypeDef *hsc)
1687:src/stm32f1xx_hal_smartcard.c **** {
1688:src/stm32f1xx_hal_smartcard.c ****   /* Prevent unused argument(s) compilation warning */
1689:src/stm32f1xx_hal_smartcard.c ****   UNUSED(hsc);
1690:src/stm32f1xx_hal_smartcard.c **** 
ARM GAS  /tmp/ccvrs2bU.s 			page 32


1691:src/stm32f1xx_hal_smartcard.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1692:src/stm32f1xx_hal_smartcard.c ****             the HAL_SMARTCARD_RxCpltCallback can be implemented in the user file.
1693:src/stm32f1xx_hal_smartcard.c ****    */
1694:src/stm32f1xx_hal_smartcard.c **** }
1695:src/stm32f1xx_hal_smartcard.c **** 
1696:src/stm32f1xx_hal_smartcard.c **** /**
1697:src/stm32f1xx_hal_smartcard.c ****   * @brief SMARTCARD error callback
1698:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
1699:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
1700:src/stm32f1xx_hal_smartcard.c ****   * @retval None
1701:src/stm32f1xx_hal_smartcard.c ****   */
1702:src/stm32f1xx_hal_smartcard.c **** __weak void HAL_SMARTCARD_ErrorCallback(SMARTCARD_HandleTypeDef *hsc)
1703:src/stm32f1xx_hal_smartcard.c **** {
1704:src/stm32f1xx_hal_smartcard.c ****   /* Prevent unused argument(s) compilation warning */
1705:src/stm32f1xx_hal_smartcard.c ****   UNUSED(hsc);
1706:src/stm32f1xx_hal_smartcard.c **** 
1707:src/stm32f1xx_hal_smartcard.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1708:src/stm32f1xx_hal_smartcard.c ****             the HAL_SMARTCARD_ErrorCallback can be implemented in the user file.
1709:src/stm32f1xx_hal_smartcard.c ****    */
1710:src/stm32f1xx_hal_smartcard.c **** }
1711:src/stm32f1xx_hal_smartcard.c **** 
1712:src/stm32f1xx_hal_smartcard.c **** /**
1713:src/stm32f1xx_hal_smartcard.c ****   * @brief  SMARTCARD Abort Complete callback.
1714:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc SMARTCARD handle.
1715:src/stm32f1xx_hal_smartcard.c ****   * @retval None
1716:src/stm32f1xx_hal_smartcard.c ****   */
1717:src/stm32f1xx_hal_smartcard.c **** __weak void HAL_SMARTCARD_AbortCpltCallback (SMARTCARD_HandleTypeDef *hsc)
1718:src/stm32f1xx_hal_smartcard.c **** {
1719:src/stm32f1xx_hal_smartcard.c ****   /* Prevent unused argument(s) compilation warning */
1720:src/stm32f1xx_hal_smartcard.c ****   UNUSED(hsc);
1721:src/stm32f1xx_hal_smartcard.c **** 
1722:src/stm32f1xx_hal_smartcard.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1723:src/stm32f1xx_hal_smartcard.c ****             the HAL_SMARTCARD_AbortCpltCallback can be implemented in the user file.
1724:src/stm32f1xx_hal_smartcard.c ****    */
1725:src/stm32f1xx_hal_smartcard.c **** }
1726:src/stm32f1xx_hal_smartcard.c **** 
1727:src/stm32f1xx_hal_smartcard.c **** /**
1728:src/stm32f1xx_hal_smartcard.c ****   * @brief  SMARTCARD Abort Transmit Complete callback.
1729:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc SMARTCARD handle.
1730:src/stm32f1xx_hal_smartcard.c ****   * @retval None
1731:src/stm32f1xx_hal_smartcard.c ****   */
1732:src/stm32f1xx_hal_smartcard.c **** __weak void HAL_SMARTCARD_AbortTransmitCpltCallback (SMARTCARD_HandleTypeDef *hsc)
1733:src/stm32f1xx_hal_smartcard.c **** {
1734:src/stm32f1xx_hal_smartcard.c ****     /* Prevent unused argument(s) compilation warning */
1735:src/stm32f1xx_hal_smartcard.c ****     UNUSED(hsc);
1736:src/stm32f1xx_hal_smartcard.c **** 
1737:src/stm32f1xx_hal_smartcard.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1738:src/stm32f1xx_hal_smartcard.c ****             the HAL_SMARTCARD_AbortTransmitCpltCallback can be implemented in the user file.
1739:src/stm32f1xx_hal_smartcard.c ****    */
1740:src/stm32f1xx_hal_smartcard.c **** }
1741:src/stm32f1xx_hal_smartcard.c **** 
1742:src/stm32f1xx_hal_smartcard.c **** /**
1743:src/stm32f1xx_hal_smartcard.c ****   * @brief  SMARTCARD Abort Receive Complete callback.
1744:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc SMARTCARD handle.
1745:src/stm32f1xx_hal_smartcard.c ****   * @retval None
1746:src/stm32f1xx_hal_smartcard.c ****   */
1747:src/stm32f1xx_hal_smartcard.c **** __weak void HAL_SMARTCARD_AbortReceiveCpltCallback (SMARTCARD_HandleTypeDef *hsc)
ARM GAS  /tmp/ccvrs2bU.s 			page 33


1748:src/stm32f1xx_hal_smartcard.c **** {
1749:src/stm32f1xx_hal_smartcard.c ****     /* Prevent unused argument(s) compilation warning */
1750:src/stm32f1xx_hal_smartcard.c ****     UNUSED(hsc);
1751:src/stm32f1xx_hal_smartcard.c **** 
1752:src/stm32f1xx_hal_smartcard.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1753:src/stm32f1xx_hal_smartcard.c ****             the HAL_SMARTCARD_AbortReceiveCpltCallback can be implemented in the user file.
1754:src/stm32f1xx_hal_smartcard.c ****    */
1755:src/stm32f1xx_hal_smartcard.c **** }
1756:src/stm32f1xx_hal_smartcard.c **** 
1757:src/stm32f1xx_hal_smartcard.c **** /**
1758:src/stm32f1xx_hal_smartcard.c ****   * @}
1759:src/stm32f1xx_hal_smartcard.c ****   */
1760:src/stm32f1xx_hal_smartcard.c **** 
1761:src/stm32f1xx_hal_smartcard.c **** /** @defgroup SMARTCARD_Exported_Functions_Group3 Peripheral State and Errors functions
1762:src/stm32f1xx_hal_smartcard.c ****   *  @brief   SMARTCARD State and Errors functions
1763:src/stm32f1xx_hal_smartcard.c ****   *
1764:src/stm32f1xx_hal_smartcard.c **** @verbatim
1765:src/stm32f1xx_hal_smartcard.c ****  ===============================================================================
1766:src/stm32f1xx_hal_smartcard.c ****                 ##### Peripheral State and Errors functions #####
1767:src/stm32f1xx_hal_smartcard.c ****  ===============================================================================
1768:src/stm32f1xx_hal_smartcard.c ****     [..]
1769:src/stm32f1xx_hal_smartcard.c ****     This subsection provides a set of functions allowing to control the SmartCard.
1770:src/stm32f1xx_hal_smartcard.c ****      (+) HAL_SMARTCARD_GetState() API can be helpful to check in run-time the state of the SmartCar
1771:src/stm32f1xx_hal_smartcard.c ****      (+) HAL_SMARTCARD_GetError() check in run-time errors that could be occurred during communicat
1772:src/stm32f1xx_hal_smartcard.c **** @endverbatim
1773:src/stm32f1xx_hal_smartcard.c ****   * @{
1774:src/stm32f1xx_hal_smartcard.c ****   */
1775:src/stm32f1xx_hal_smartcard.c **** 
1776:src/stm32f1xx_hal_smartcard.c **** /**
1777:src/stm32f1xx_hal_smartcard.c ****   * @brief Return the SMARTCARD handle state
1778:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
1779:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
1780:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL state
1781:src/stm32f1xx_hal_smartcard.c ****   */
1782:src/stm32f1xx_hal_smartcard.c **** HAL_SMARTCARD_StateTypeDef HAL_SMARTCARD_GetState(SMARTCARD_HandleTypeDef *hsc)
1783:src/stm32f1xx_hal_smartcard.c **** {
1784:src/stm32f1xx_hal_smartcard.c ****   uint32_t temp1= 0x00U, temp2 = 0x00U;
1785:src/stm32f1xx_hal_smartcard.c ****   temp1 = hsc->gState;
1786:src/stm32f1xx_hal_smartcard.c ****   temp2 = hsc->RxState;
1787:src/stm32f1xx_hal_smartcard.c **** 
1788:src/stm32f1xx_hal_smartcard.c ****   return (HAL_SMARTCARD_StateTypeDef)(temp1 | temp2);
1789:src/stm32f1xx_hal_smartcard.c **** }
1790:src/stm32f1xx_hal_smartcard.c **** 
1791:src/stm32f1xx_hal_smartcard.c **** /**
1792:src/stm32f1xx_hal_smartcard.c ****   * @brief  Return the SMARTCARD error code
1793:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc  Pointer to a SMARTCARD_HandleTypeDef structure that contains
1794:src/stm32f1xx_hal_smartcard.c ****   *              the configuration information for the specified SMARTCARD.
1795:src/stm32f1xx_hal_smartcard.c ****   * @retval SMARTCARD Error Code
1796:src/stm32f1xx_hal_smartcard.c ****   */
1797:src/stm32f1xx_hal_smartcard.c **** uint32_t HAL_SMARTCARD_GetError(SMARTCARD_HandleTypeDef *hsc)
1798:src/stm32f1xx_hal_smartcard.c **** {
1799:src/stm32f1xx_hal_smartcard.c ****   return hsc->ErrorCode;
1800:src/stm32f1xx_hal_smartcard.c **** }
1801:src/stm32f1xx_hal_smartcard.c **** 
1802:src/stm32f1xx_hal_smartcard.c **** /**
1803:src/stm32f1xx_hal_smartcard.c ****   * @}
1804:src/stm32f1xx_hal_smartcard.c ****   */
ARM GAS  /tmp/ccvrs2bU.s 			page 34


1805:src/stm32f1xx_hal_smartcard.c **** 
1806:src/stm32f1xx_hal_smartcard.c **** /**
1807:src/stm32f1xx_hal_smartcard.c ****   * @}
1808:src/stm32f1xx_hal_smartcard.c ****   */
1809:src/stm32f1xx_hal_smartcard.c **** 
1810:src/stm32f1xx_hal_smartcard.c **** /** @defgroup SMARTCARD_Private_Functions SMARTCARD Private Functions
1811:src/stm32f1xx_hal_smartcard.c ****   * @{
1812:src/stm32f1xx_hal_smartcard.c ****   */
1813:src/stm32f1xx_hal_smartcard.c **** 
1814:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
1815:src/stm32f1xx_hal_smartcard.c **** /**
1816:src/stm32f1xx_hal_smartcard.c ****   * @brief  Initialize the callbacks to their default values.
1817:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc SMARTCARD handle.
1818:src/stm32f1xx_hal_smartcard.c ****   * @retval none
1819:src/stm32f1xx_hal_smartcard.c ****   */
1820:src/stm32f1xx_hal_smartcard.c **** void SMARTCARD_InitCallbacksToDefault(SMARTCARD_HandleTypeDef *hsc)
1821:src/stm32f1xx_hal_smartcard.c **** {
1822:src/stm32f1xx_hal_smartcard.c ****   /* Init the SMARTCARD Callback settings */
1823:src/stm32f1xx_hal_smartcard.c ****   hsc->TxCpltCallback            = HAL_SMARTCARD_TxCpltCallback;            /* Legacy weak TxCpltCa
1824:src/stm32f1xx_hal_smartcard.c ****   hsc->RxCpltCallback            = HAL_SMARTCARD_RxCpltCallback;            /* Legacy weak RxCpltCa
1825:src/stm32f1xx_hal_smartcard.c ****   hsc->ErrorCallback             = HAL_SMARTCARD_ErrorCallback;             /* Legacy weak ErrorCal
1826:src/stm32f1xx_hal_smartcard.c ****   hsc->AbortCpltCallback         = HAL_SMARTCARD_AbortCpltCallback;         /* Legacy weak AbortCpl
1827:src/stm32f1xx_hal_smartcard.c ****   hsc->AbortTransmitCpltCallback = HAL_SMARTCARD_AbortTransmitCpltCallback; /* Legacy weak AbortTra
1828:src/stm32f1xx_hal_smartcard.c ****   hsc->AbortReceiveCpltCallback  = HAL_SMARTCARD_AbortReceiveCpltCallback;  /* Legacy weak AbortRec
1829:src/stm32f1xx_hal_smartcard.c **** 
1830:src/stm32f1xx_hal_smartcard.c **** }
1831:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACKS */
1832:src/stm32f1xx_hal_smartcard.c **** 
1833:src/stm32f1xx_hal_smartcard.c **** /**
1834:src/stm32f1xx_hal_smartcard.c ****   * @brief DMA SMARTCARD transmit process complete callback
1835:src/stm32f1xx_hal_smartcard.c ****   * @param  hdma   Pointer to a DMA_HandleTypeDef structure that contains
1836:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for the specified DMA module.
1837:src/stm32f1xx_hal_smartcard.c ****   * @retval None
1838:src/stm32f1xx_hal_smartcard.c ****   */
1839:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
1840:src/stm32f1xx_hal_smartcard.c **** {
  78              		.loc 1 1840 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83              	.LVL0:
1841:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1842:src/stm32f1xx_hal_smartcard.c **** 
1843:src/stm32f1xx_hal_smartcard.c ****   hsc->TxXferCount = 0U;
  84              		.loc 1 1843 0
  85 0000 0022     		movs	r2, #0	@ tmp118,
1841:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  86              		.loc 1 1841 0
  87 0002 436A     		ldr	r3, [r0, #36]	@ hsc, hdma_2(D)->Parent
  88              	.LVL1:
  89              		.loc 1 1843 0
  90 0004 DA86     		strh	r2, [r3, #54]	@ movhi	@ tmp118, hsc_3->TxXferCount
1844:src/stm32f1xx_hal_smartcard.c **** 
1845:src/stm32f1xx_hal_smartcard.c ****   /* Disable the DMA transfer for transmit request by setting the DMAT bit
1846:src/stm32f1xx_hal_smartcard.c ****      in the USART CR3 register */
1847:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_DMAT);
ARM GAS  /tmp/ccvrs2bU.s 			page 35


  91              		.loc 1 1847 0
  92 0006 1B68     		ldr	r3, [r3]	@ _5, hsc_3->Instance
  93              	.LVL2:
  94 0008 5A69     		ldr	r2, [r3, #20]	@ _6, _5->CR3
  95 000a 22F08002 		bic	r2, r2, #128	@ _7, _6,
  96 000e 5A61     		str	r2, [r3, #20]	@ _7, _5->CR3
1848:src/stm32f1xx_hal_smartcard.c **** 
1849:src/stm32f1xx_hal_smartcard.c ****   /* Enable the SMARTCARD Transmit Complete Interrupt */
1850:src/stm32f1xx_hal_smartcard.c ****   SET_BIT(hsc->Instance->CR1, USART_CR1_TCIE);
  97              		.loc 1 1850 0
  98 0010 DA68     		ldr	r2, [r3, #12]	@ _9, _5->CR1
  99 0012 42F04002 		orr	r2, r2, #64	@ _10, _9,
 100 0016 DA60     		str	r2, [r3, #12]	@ _10, _5->CR1
 101 0018 7047     		bx	lr	@
 102              		.cfi_endproc
 103              	.LFE90:
 104              		.size	SMARTCARD_DMATransmitCplt, .-SMARTCARD_DMATransmitCplt
 105              		.align	1
 106              		.syntax unified
 107              		.thumb
 108              		.thumb_func
 109              		.fpu softvfp
 110              		.type	SMARTCARD_WaitOnFlagUntilTimeout.constprop.3, %function
 111              	SMARTCARD_WaitOnFlagUntilTimeout.constprop.3:
 112              	.LFB121:
1851:src/stm32f1xx_hal_smartcard.c **** }
1852:src/stm32f1xx_hal_smartcard.c **** 
1853:src/stm32f1xx_hal_smartcard.c **** /**
1854:src/stm32f1xx_hal_smartcard.c ****   * @brief DMA SMARTCARD receive process complete callback
1855:src/stm32f1xx_hal_smartcard.c ****   * @param  hdma   Pointer to a DMA_HandleTypeDef structure that contains
1856:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for the specified DMA module.
1857:src/stm32f1xx_hal_smartcard.c ****   * @retval None
1858:src/stm32f1xx_hal_smartcard.c ****   */
1859:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
1860:src/stm32f1xx_hal_smartcard.c **** {
1861:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1862:src/stm32f1xx_hal_smartcard.c **** 
1863:src/stm32f1xx_hal_smartcard.c ****   hsc->RxXferCount = 0U;
1864:src/stm32f1xx_hal_smartcard.c **** 
1865:src/stm32f1xx_hal_smartcard.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1866:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1867:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
1868:src/stm32f1xx_hal_smartcard.c **** 
1869:src/stm32f1xx_hal_smartcard.c ****   /* Disable the DMA transfer for the receiver request by setting the DMAR bit
1870:src/stm32f1xx_hal_smartcard.c ****      in the USART CR3 register */
1871:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_DMAR);
1872:src/stm32f1xx_hal_smartcard.c **** 
1873:src/stm32f1xx_hal_smartcard.c ****   /* At end of Rx process, restore hsc->RxState to Ready */
1874:src/stm32f1xx_hal_smartcard.c ****   hsc->RxState = HAL_SMARTCARD_STATE_READY;
1875:src/stm32f1xx_hal_smartcard.c **** 
1876:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
1877:src/stm32f1xx_hal_smartcard.c ****   /* Call registered Rx complete callback */
1878:src/stm32f1xx_hal_smartcard.c ****   hsc->RxCpltCallback(hsc);
1879:src/stm32f1xx_hal_smartcard.c **** #else
1880:src/stm32f1xx_hal_smartcard.c ****   /* Call legacy weak Rx complete callback */
1881:src/stm32f1xx_hal_smartcard.c ****   HAL_SMARTCARD_RxCpltCallback(hsc);
1882:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
ARM GAS  /tmp/ccvrs2bU.s 			page 36


1883:src/stm32f1xx_hal_smartcard.c **** }
1884:src/stm32f1xx_hal_smartcard.c **** 
1885:src/stm32f1xx_hal_smartcard.c **** /**
1886:src/stm32f1xx_hal_smartcard.c ****   * @brief DMA SMARTCARD communication error callback
1887:src/stm32f1xx_hal_smartcard.c ****   * @param  hdma   Pointer to a DMA_HandleTypeDef structure that contains
1888:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for the specified DMA module.
1889:src/stm32f1xx_hal_smartcard.c ****   * @retval None
1890:src/stm32f1xx_hal_smartcard.c ****   */
1891:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_DMAError(DMA_HandleTypeDef *hdma)
1892:src/stm32f1xx_hal_smartcard.c **** {
1893:src/stm32f1xx_hal_smartcard.c ****   uint32_t dmarequest = 0x00U;
1894:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1895:src/stm32f1xx_hal_smartcard.c ****   hsc->RxXferCount = 0U;
1896:src/stm32f1xx_hal_smartcard.c ****   hsc->TxXferCount = 0U;
1897:src/stm32f1xx_hal_smartcard.c ****   hsc->ErrorCode = HAL_SMARTCARD_ERROR_DMA;
1898:src/stm32f1xx_hal_smartcard.c **** 
1899:src/stm32f1xx_hal_smartcard.c ****   /* Stop SMARTCARD DMA Tx request if ongoing */
1900:src/stm32f1xx_hal_smartcard.c ****   dmarequest = HAL_IS_BIT_SET(hsc->Instance->CR3, USART_CR3_DMAT);
1901:src/stm32f1xx_hal_smartcard.c ****   if((hsc->gState == HAL_SMARTCARD_STATE_BUSY_TX) && dmarequest)
1902:src/stm32f1xx_hal_smartcard.c ****   {
1903:src/stm32f1xx_hal_smartcard.c ****     SMARTCARD_EndTxTransfer(hsc);
1904:src/stm32f1xx_hal_smartcard.c ****   }
1905:src/stm32f1xx_hal_smartcard.c **** 
1906:src/stm32f1xx_hal_smartcard.c ****   /* Stop SMARTCARD DMA Rx request if ongoing */
1907:src/stm32f1xx_hal_smartcard.c ****   dmarequest = HAL_IS_BIT_SET(hsc->Instance->CR3, USART_CR3_DMAR);
1908:src/stm32f1xx_hal_smartcard.c ****   if((hsc->RxState == HAL_SMARTCARD_STATE_BUSY_RX) && dmarequest)
1909:src/stm32f1xx_hal_smartcard.c ****   {
1910:src/stm32f1xx_hal_smartcard.c ****     SMARTCARD_EndRxTransfer(hsc);
1911:src/stm32f1xx_hal_smartcard.c ****   }
1912:src/stm32f1xx_hal_smartcard.c **** 
1913:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
1914:src/stm32f1xx_hal_smartcard.c ****   /* Call registered user error callback */
1915:src/stm32f1xx_hal_smartcard.c ****   hsc->ErrorCallback(hsc);
1916:src/stm32f1xx_hal_smartcard.c **** #else
1917:src/stm32f1xx_hal_smartcard.c ****   /* Call legacy weak user error callback */
1918:src/stm32f1xx_hal_smartcard.c ****   HAL_SMARTCARD_ErrorCallback(hsc);
1919:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
1920:src/stm32f1xx_hal_smartcard.c **** }
1921:src/stm32f1xx_hal_smartcard.c **** 
1922:src/stm32f1xx_hal_smartcard.c **** /**
1923:src/stm32f1xx_hal_smartcard.c ****   * @brief  This function handles SMARTCARD Communication Timeout.
1924:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
1925:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
1926:src/stm32f1xx_hal_smartcard.c ****   * @param  Flag   Specifies the SMARTCARD flag to check.
1927:src/stm32f1xx_hal_smartcard.c ****   * @param  Status The new Flag status (SET or RESET).
1928:src/stm32f1xx_hal_smartcard.c ****   * @param  Timeout Timeout duration
1929:src/stm32f1xx_hal_smartcard.c ****   * @param  Tickstart Tick start value
1930:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
1931:src/stm32f1xx_hal_smartcard.c ****   */
1932:src/stm32f1xx_hal_smartcard.c **** static HAL_StatusTypeDef SMARTCARD_WaitOnFlagUntilTimeout(SMARTCARD_HandleTypeDef *hsc, uint32_t Fl
 113              		.loc 1 1932 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              	.LVL3:
 118 001a F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 119              	.LCFI0:
ARM GAS  /tmp/ccvrs2bU.s 			page 37


 120              		.cfi_def_cfa_offset 24
 121              		.cfi_offset 3, -24
 122              		.cfi_offset 4, -20
 123              		.cfi_offset 5, -16
 124              		.cfi_offset 6, -12
 125              		.cfi_offset 7, -8
 126              		.cfi_offset 14, -4
 127 001c 0446     		mov	r4, r0	@ hsc, hsc
 128 001e 0E46     		mov	r6, r1	@ Flag, Flag
 129 0020 1746     		mov	r7, r2	@ Tickstart, Tickstart
 130 0022 1D46     		mov	r5, r3	@ Timeout, Timeout
 131              	.LVL4:
 132              	.L3:
1933:src/stm32f1xx_hal_smartcard.c **** {
1934:src/stm32f1xx_hal_smartcard.c ****   /* Wait until flag is set */
1935:src/stm32f1xx_hal_smartcard.c ****   while((__HAL_SMARTCARD_GET_FLAG(hsc, Flag) ? SET : RESET) == Status)
 133              		.loc 1 1935 0
 134 0024 2168     		ldr	r1, [r4]	@ _7, hsc_5(D)->Instance
 135              	.L4:
 136 0026 0B68     		ldr	r3, [r1]	@ _8, _7->SR
 137 0028 36EA0303 		bics	r3, r6, r3	@ tmp134, Flag, _8
 138 002c 01D1     		bne	.L8	@,
1936:src/stm32f1xx_hal_smartcard.c ****   {
1937:src/stm32f1xx_hal_smartcard.c ****     /* Check for the Timeout */
1938:src/stm32f1xx_hal_smartcard.c ****     if(Timeout != HAL_MAX_DELAY)
1939:src/stm32f1xx_hal_smartcard.c ****     {
1940:src/stm32f1xx_hal_smartcard.c ****       if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
1941:src/stm32f1xx_hal_smartcard.c ****       {
1942:src/stm32f1xx_hal_smartcard.c ****         /* Disable TXE and RXNE interrupts for the interrupt process */
1943:src/stm32f1xx_hal_smartcard.c ****         CLEAR_BIT(hsc->Instance->CR1, USART_CR1_TXEIE);
1944:src/stm32f1xx_hal_smartcard.c ****         CLEAR_BIT(hsc->Instance->CR1, USART_CR1_RXNEIE);
1945:src/stm32f1xx_hal_smartcard.c **** 
1946:src/stm32f1xx_hal_smartcard.c ****         hsc->gState= HAL_SMARTCARD_STATE_READY;
1947:src/stm32f1xx_hal_smartcard.c ****         hsc->RxState= HAL_SMARTCARD_STATE_READY;
1948:src/stm32f1xx_hal_smartcard.c **** 
1949:src/stm32f1xx_hal_smartcard.c ****         /* Process Unlocked */
1950:src/stm32f1xx_hal_smartcard.c ****         __HAL_UNLOCK(hsc);
1951:src/stm32f1xx_hal_smartcard.c **** 
1952:src/stm32f1xx_hal_smartcard.c ****         return HAL_TIMEOUT;
1953:src/stm32f1xx_hal_smartcard.c ****       }
1954:src/stm32f1xx_hal_smartcard.c ****     }
1955:src/stm32f1xx_hal_smartcard.c ****   }
1956:src/stm32f1xx_hal_smartcard.c ****   return HAL_OK;
 139              		.loc 1 1956 0
 140 002e 0020     		movs	r0, #0	@ <retval>,
1957:src/stm32f1xx_hal_smartcard.c **** }
 141              		.loc 1 1957 0
 142 0030 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 143              	.LVL5:
 144              	.L8:
1938:src/stm32f1xx_hal_smartcard.c ****     {
 145              		.loc 1 1938 0
 146 0032 6B1C     		adds	r3, r5, #1	@, Timeout,
 147 0034 F7D0     		beq	.L4	@,
1940:src/stm32f1xx_hal_smartcard.c ****       {
 148              		.loc 1 1940 0
 149 0036 95B9     		cbnz	r5, .L5	@ Timeout,
ARM GAS  /tmp/ccvrs2bU.s 			page 38


 150              	.L7:
 151              	.LVL6:
 152              	.LBB4:
 153              	.LBB5:
1943:src/stm32f1xx_hal_smartcard.c ****         CLEAR_BIT(hsc->Instance->CR1, USART_CR1_RXNEIE);
 154              		.loc 1 1943 0
 155 0038 2368     		ldr	r3, [r4]	@ _21, hsc_5(D)->Instance
1950:src/stm32f1xx_hal_smartcard.c **** 
 156              		.loc 1 1950 0
 157 003a 0320     		movs	r0, #3	@ <retval>,
1943:src/stm32f1xx_hal_smartcard.c ****         CLEAR_BIT(hsc->Instance->CR1, USART_CR1_RXNEIE);
 158              		.loc 1 1943 0
 159 003c DA68     		ldr	r2, [r3, #12]	@ _22, _21->CR1
 160 003e 22F08002 		bic	r2, r2, #128	@ _23, _22,
 161 0042 DA60     		str	r2, [r3, #12]	@ _23, _21->CR1
1944:src/stm32f1xx_hal_smartcard.c **** 
 162              		.loc 1 1944 0
 163 0044 DA68     		ldr	r2, [r3, #12]	@ _24, _21->CR1
 164 0046 22F02002 		bic	r2, r2, #32	@ _25, _24,
 165 004a DA60     		str	r2, [r3, #12]	@ _25, _21->CR1
1946:src/stm32f1xx_hal_smartcard.c ****         hsc->RxState= HAL_SMARTCARD_STATE_READY;
 166              		.loc 1 1946 0
 167 004c 2023     		movs	r3, #32	@ tmp125,
 168 004e 84F84930 		strb	r3, [r4, #73]	@ tmp125, hsc_5(D)->gState
1947:src/stm32f1xx_hal_smartcard.c **** 
 169              		.loc 1 1947 0
 170 0052 84F84A30 		strb	r3, [r4, #74]	@ tmp125, hsc_5(D)->RxState
1950:src/stm32f1xx_hal_smartcard.c **** 
 171              		.loc 1 1950 0
 172 0056 0023     		movs	r3, #0	@ tmp129,
 173 0058 84F84830 		strb	r3, [r4, #72]	@ tmp129, hsc_5(D)->Lock
 174              	.LVL7:
 175 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 176              	.LVL8:
 177              	.L5:
 178              	.LBE5:
 179              	.LBE4:
1940:src/stm32f1xx_hal_smartcard.c ****       {
 180              		.loc 1 1940 0
 181 005e FFF7FEFF 		bl	HAL_GetTick	@
 182              	.LVL9:
 183 0062 C01B     		subs	r0, r0, r7	@ tmp131,, Tickstart
 184 0064 8542     		cmp	r5, r0	@ Timeout, tmp131
 185 0066 DDD2     		bcs	.L3	@,
 186 0068 E6E7     		b	.L7	@
 187              		.cfi_endproc
 188              	.LFE121:
 189              		.size	SMARTCARD_WaitOnFlagUntilTimeout.constprop.3, .-SMARTCARD_WaitOnFlagUntilTimeout.constprop.3
 190              		.align	1
 191              		.weak	HAL_SMARTCARD_MspInit
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 195              		.fpu softvfp
 196              		.type	HAL_SMARTCARD_MspInit, %function
 197              	HAL_SMARTCARD_MspInit:
 198              	.LFB120:
ARM GAS  /tmp/ccvrs2bU.s 			page 39


 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202              		@ link register save eliminated.
 203 006a 7047     		bx	lr	@
 204              		.cfi_endproc
 205              	.LFE120:
 206              		.size	HAL_SMARTCARD_MspInit, .-HAL_SMARTCARD_MspInit
 207              		.align	1
 208              		.global	HAL_SMARTCARD_Init
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 212              		.fpu softvfp
 213              		.type	HAL_SMARTCARD_Init, %function
 214              	HAL_SMARTCARD_Init:
 215              	.LFB65:
 297:src/stm32f1xx_hal_smartcard.c ****   /* Check the SMARTCARD handle allocation */
 216              		.loc 1 297 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              	.LVL10:
 297:src/stm32f1xx_hal_smartcard.c ****   /* Check the SMARTCARD handle allocation */
 221              		.loc 1 297 0
 222 006c 38B5     		push	{r3, r4, r5, lr}	@
 223              	.LCFI1:
 224              		.cfi_def_cfa_offset 16
 225              		.cfi_offset 3, -16
 226              		.cfi_offset 4, -12
 227              		.cfi_offset 5, -8
 228              		.cfi_offset 14, -4
 299:src/stm32f1xx_hal_smartcard.c ****   {
 229              		.loc 1 299 0
 230 006e 0546     		mov	r5, r0	@ hsc, hsc
 231 0070 0028     		cmp	r0, #0	@ hsc
 232 0072 00F08380 		beq	.L17	@
 308:src/stm32f1xx_hal_smartcard.c ****   {
 233              		.loc 1 308 0
 234 0076 90F84930 		ldrb	r3, [r0, #73]	@ zero_extendqisi2	@ hsc_4(D)->gState, hsc_4(D)->gState
 235 007a 03F0FF02 		and	r2, r3, #255	@ _6, hsc_4(D)->gState,
 236 007e 1BB9     		cbnz	r3, .L14	@ hsc_4(D)->gState,
 311:src/stm32f1xx_hal_smartcard.c **** 
 237              		.loc 1 311 0
 238 0080 80F84820 		strb	r2, [r0, #72]	@ _6, hsc_4(D)->Lock
 325:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACKS */
 239              		.loc 1 325 0
 240 0084 FFF7FEFF 		bl	HAL_SMARTCARD_MspInit	@
 241              	.LVL11:
 242              	.L14:
 329:src/stm32f1xx_hal_smartcard.c **** 
 243              		.loc 1 329 0
 244 0088 2423     		movs	r3, #36	@ tmp197,
 245 008a 85F84930 		strb	r3, [r5, #73]	@ tmp197, hsc_4(D)->gState
 332:src/stm32f1xx_hal_smartcard.c **** 
 246              		.loc 1 332 0
 247 008e 2B68     		ldr	r3, [r5]	@ _10, hsc_4(D)->Instance
ARM GAS  /tmp/ccvrs2bU.s 			page 40


 248 0090 696A     		ldr	r1, [r5, #36]	@ hsc_4(D)->Init.Prescaler, hsc_4(D)->Init.Prescaler
 249 0092 9A69     		ldr	r2, [r3, #24]	@ _11, _10->GTPR
 250              	.LBB8:
 251              	.LBB9:
1958:src/stm32f1xx_hal_smartcard.c **** 
1959:src/stm32f1xx_hal_smartcard.c **** /**
1960:src/stm32f1xx_hal_smartcard.c ****   * @brief  End ongoing Tx transfer on SMARTCARD peripheral (following error detection or Transmit 
1961:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
1962:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
1963:src/stm32f1xx_hal_smartcard.c ****   * @retval None
1964:src/stm32f1xx_hal_smartcard.c ****   */
1965:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_EndTxTransfer(SMARTCARD_HandleTypeDef *hsc)
1966:src/stm32f1xx_hal_smartcard.c **** {
1967:src/stm32f1xx_hal_smartcard.c ****   /* At end of Tx process, restore hsc->gState to Ready */
1968:src/stm32f1xx_hal_smartcard.c ****   hsc->gState = HAL_SMARTCARD_STATE_READY;
1969:src/stm32f1xx_hal_smartcard.c **** 
1970:src/stm32f1xx_hal_smartcard.c ****   /* Disable TXEIE and TCIE interrupts */
1971:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1972:src/stm32f1xx_hal_smartcard.c **** }
1973:src/stm32f1xx_hal_smartcard.c **** 
1974:src/stm32f1xx_hal_smartcard.c **** 
1975:src/stm32f1xx_hal_smartcard.c **** /**
1976:src/stm32f1xx_hal_smartcard.c ****   * @brief  End ongoing Rx transfer on SMARTCARD peripheral (following error detection or Reception
1977:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
1978:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
1979:src/stm32f1xx_hal_smartcard.c ****   * @retval None
1980:src/stm32f1xx_hal_smartcard.c ****   */
1981:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_EndRxTransfer(SMARTCARD_HandleTypeDef *hsc)
1982:src/stm32f1xx_hal_smartcard.c **** {
1983:src/stm32f1xx_hal_smartcard.c ****   /* At end of Rx process, restore hsc->RxState to Ready */
1984:src/stm32f1xx_hal_smartcard.c ****   hsc->RxState = HAL_SMARTCARD_STATE_READY;
1985:src/stm32f1xx_hal_smartcard.c **** 
1986:src/stm32f1xx_hal_smartcard.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1987:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1988:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
1989:src/stm32f1xx_hal_smartcard.c **** }
1990:src/stm32f1xx_hal_smartcard.c **** 
1991:src/stm32f1xx_hal_smartcard.c **** /**
1992:src/stm32f1xx_hal_smartcard.c ****   * @brief Send an amount of data in non blocking mode
1993:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
1994:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
1995:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
1996:src/stm32f1xx_hal_smartcard.c ****   */
1997:src/stm32f1xx_hal_smartcard.c **** static HAL_StatusTypeDef SMARTCARD_Transmit_IT(SMARTCARD_HandleTypeDef *hsc)
1998:src/stm32f1xx_hal_smartcard.c **** {
1999:src/stm32f1xx_hal_smartcard.c ****   uint16_t* tmp;
2000:src/stm32f1xx_hal_smartcard.c **** 
2001:src/stm32f1xx_hal_smartcard.c ****   /* Check that a Tx process is ongoing */
2002:src/stm32f1xx_hal_smartcard.c ****   if(hsc->gState == HAL_SMARTCARD_STATE_BUSY_TX)
2003:src/stm32f1xx_hal_smartcard.c ****   {
2004:src/stm32f1xx_hal_smartcard.c ****     tmp = (uint16_t*) hsc->pTxBuffPtr;
2005:src/stm32f1xx_hal_smartcard.c ****     hsc->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
2006:src/stm32f1xx_hal_smartcard.c ****     hsc->pTxBuffPtr += 1U;
2007:src/stm32f1xx_hal_smartcard.c **** 
2008:src/stm32f1xx_hal_smartcard.c ****     if(--hsc->TxXferCount == 0U)
2009:src/stm32f1xx_hal_smartcard.c ****     {
2010:src/stm32f1xx_hal_smartcard.c ****       /* Disable the SMARTCARD Transmit data register empty Interrupt */
ARM GAS  /tmp/ccvrs2bU.s 			page 41


2011:src/stm32f1xx_hal_smartcard.c ****       CLEAR_BIT(hsc->Instance->CR1, USART_CR1_TXEIE);
2012:src/stm32f1xx_hal_smartcard.c **** 
2013:src/stm32f1xx_hal_smartcard.c ****       /* Enable the SMARTCARD Transmit Complete Interrupt */
2014:src/stm32f1xx_hal_smartcard.c ****       SET_BIT(hsc->Instance->CR1, USART_CR1_TCIE);
2015:src/stm32f1xx_hal_smartcard.c ****     }
2016:src/stm32f1xx_hal_smartcard.c **** 
2017:src/stm32f1xx_hal_smartcard.c ****     return HAL_OK;
2018:src/stm32f1xx_hal_smartcard.c ****   }
2019:src/stm32f1xx_hal_smartcard.c ****   else
2020:src/stm32f1xx_hal_smartcard.c ****   {
2021:src/stm32f1xx_hal_smartcard.c ****     return HAL_BUSY;
2022:src/stm32f1xx_hal_smartcard.c ****   }
2023:src/stm32f1xx_hal_smartcard.c **** }
2024:src/stm32f1xx_hal_smartcard.c **** 
2025:src/stm32f1xx_hal_smartcard.c **** /**
2026:src/stm32f1xx_hal_smartcard.c ****   * @brief  Wraps up transmission in non blocking mode.
2027:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
2028:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for the specified SMARTCARD module.
2029:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
2030:src/stm32f1xx_hal_smartcard.c ****   */
2031:src/stm32f1xx_hal_smartcard.c **** static HAL_StatusTypeDef SMARTCARD_EndTransmit_IT(SMARTCARD_HandleTypeDef *hsc)
2032:src/stm32f1xx_hal_smartcard.c **** {
2033:src/stm32f1xx_hal_smartcard.c ****   /* Disable the SMARTCARD Transmit Complete Interrupt */
2034:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR1, USART_CR1_TCIE);
2035:src/stm32f1xx_hal_smartcard.c **** 
2036:src/stm32f1xx_hal_smartcard.c ****   /* Disable the SMARTCARD Error Interrupt: (Frame error, noise error, overrun error) */
2037:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
2038:src/stm32f1xx_hal_smartcard.c **** 
2039:src/stm32f1xx_hal_smartcard.c ****   /* Tx process is ended, restore hsc->gState to Ready */
2040:src/stm32f1xx_hal_smartcard.c ****   hsc->gState = HAL_SMARTCARD_STATE_READY;
2041:src/stm32f1xx_hal_smartcard.c **** 
2042:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
2043:src/stm32f1xx_hal_smartcard.c ****   /* Call registered Tx complete callback */
2044:src/stm32f1xx_hal_smartcard.c ****   hsc->TxCpltCallback(hsc);
2045:src/stm32f1xx_hal_smartcard.c **** #else
2046:src/stm32f1xx_hal_smartcard.c ****   /* Call legacy weak Tx complete callback */
2047:src/stm32f1xx_hal_smartcard.c ****   HAL_SMARTCARD_TxCpltCallback(hsc);
2048:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
2049:src/stm32f1xx_hal_smartcard.c **** 
2050:src/stm32f1xx_hal_smartcard.c ****   return HAL_OK;
2051:src/stm32f1xx_hal_smartcard.c **** }
2052:src/stm32f1xx_hal_smartcard.c **** 
2053:src/stm32f1xx_hal_smartcard.c **** /**
2054:src/stm32f1xx_hal_smartcard.c ****   * @brief Receive an amount of data in non blocking mode
2055:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
2056:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
2057:src/stm32f1xx_hal_smartcard.c ****   * @retval HAL status
2058:src/stm32f1xx_hal_smartcard.c ****   */
2059:src/stm32f1xx_hal_smartcard.c **** static HAL_StatusTypeDef SMARTCARD_Receive_IT(SMARTCARD_HandleTypeDef *hsc)
2060:src/stm32f1xx_hal_smartcard.c **** {
2061:src/stm32f1xx_hal_smartcard.c ****   uint16_t* tmp;
2062:src/stm32f1xx_hal_smartcard.c **** 
2063:src/stm32f1xx_hal_smartcard.c ****   /* Check that a Rx process is ongoing */
2064:src/stm32f1xx_hal_smartcard.c ****   if(hsc->RxState == HAL_SMARTCARD_STATE_BUSY_RX)
2065:src/stm32f1xx_hal_smartcard.c ****   {
2066:src/stm32f1xx_hal_smartcard.c ****     tmp = (uint16_t*) hsc->pRxBuffPtr;
2067:src/stm32f1xx_hal_smartcard.c ****     *tmp = (uint8_t)(hsc->Instance->DR & (uint8_t)0x00FF);
ARM GAS  /tmp/ccvrs2bU.s 			page 42


2068:src/stm32f1xx_hal_smartcard.c ****     hsc->pRxBuffPtr += 1U;
2069:src/stm32f1xx_hal_smartcard.c **** 
2070:src/stm32f1xx_hal_smartcard.c ****     if(--hsc->RxXferCount == 0U)
2071:src/stm32f1xx_hal_smartcard.c ****     {
2072:src/stm32f1xx_hal_smartcard.c ****       CLEAR_BIT(hsc->Instance->CR1, USART_CR1_RXNEIE);
2073:src/stm32f1xx_hal_smartcard.c **** 
2074:src/stm32f1xx_hal_smartcard.c ****       /* Disable the SMARTCARD Parity Error Interrupt */
2075:src/stm32f1xx_hal_smartcard.c ****       CLEAR_BIT(hsc->Instance->CR1, USART_CR1_PEIE);
2076:src/stm32f1xx_hal_smartcard.c **** 
2077:src/stm32f1xx_hal_smartcard.c ****       /* Disable the SMARTCARD Error Interrupt: (Frame error, noise error, overrun error) */
2078:src/stm32f1xx_hal_smartcard.c ****       CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
2079:src/stm32f1xx_hal_smartcard.c **** 
2080:src/stm32f1xx_hal_smartcard.c ****       /* Rx process is completed, restore hsc->RxState to Ready */
2081:src/stm32f1xx_hal_smartcard.c ****       hsc->RxState = HAL_SMARTCARD_STATE_READY;
2082:src/stm32f1xx_hal_smartcard.c **** 
2083:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
2084:src/stm32f1xx_hal_smartcard.c ****       /* Call registered Rx complete callback */
2085:src/stm32f1xx_hal_smartcard.c ****       hsc->RxCpltCallback(hsc);
2086:src/stm32f1xx_hal_smartcard.c **** #else
2087:src/stm32f1xx_hal_smartcard.c ****       /* Call legacy weak Rx complete callback */
2088:src/stm32f1xx_hal_smartcard.c ****       HAL_SMARTCARD_RxCpltCallback(hsc);
2089:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
2090:src/stm32f1xx_hal_smartcard.c **** 
2091:src/stm32f1xx_hal_smartcard.c ****       return HAL_OK;
2092:src/stm32f1xx_hal_smartcard.c ****     }
2093:src/stm32f1xx_hal_smartcard.c ****     return HAL_OK;
2094:src/stm32f1xx_hal_smartcard.c ****   }
2095:src/stm32f1xx_hal_smartcard.c ****   else
2096:src/stm32f1xx_hal_smartcard.c ****   {
2097:src/stm32f1xx_hal_smartcard.c ****     return HAL_BUSY;
2098:src/stm32f1xx_hal_smartcard.c ****   }
2099:src/stm32f1xx_hal_smartcard.c **** }
2100:src/stm32f1xx_hal_smartcard.c **** 
2101:src/stm32f1xx_hal_smartcard.c **** /**
2102:src/stm32f1xx_hal_smartcard.c ****   * @brief  DMA SMARTCARD communication abort callback, when initiated by HAL services on Error
2103:src/stm32f1xx_hal_smartcard.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
2104:src/stm32f1xx_hal_smartcard.c ****   * @param  hdma DMA handle.
2105:src/stm32f1xx_hal_smartcard.c ****   * @retval None
2106:src/stm32f1xx_hal_smartcard.c ****   */
2107:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_DMAAbortOnError(DMA_HandleTypeDef *hdma)
2108:src/stm32f1xx_hal_smartcard.c **** {
2109:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_HandleTypeDef* hsc = (SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2110:src/stm32f1xx_hal_smartcard.c ****   hsc->RxXferCount = 0x00U;
2111:src/stm32f1xx_hal_smartcard.c ****   hsc->TxXferCount = 0x00U;
2112:src/stm32f1xx_hal_smartcard.c **** 
2113:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
2114:src/stm32f1xx_hal_smartcard.c ****   /* Call registered user error callback */
2115:src/stm32f1xx_hal_smartcard.c ****   hsc->ErrorCallback(hsc);
2116:src/stm32f1xx_hal_smartcard.c **** #else
2117:src/stm32f1xx_hal_smartcard.c ****   /* Call legacy weak user error callback */
2118:src/stm32f1xx_hal_smartcard.c ****   HAL_SMARTCARD_ErrorCallback(hsc);
2119:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
2120:src/stm32f1xx_hal_smartcard.c **** }
2121:src/stm32f1xx_hal_smartcard.c **** 
2122:src/stm32f1xx_hal_smartcard.c **** /**
2123:src/stm32f1xx_hal_smartcard.c ****   * @brief  DMA SMARTCARD Tx communication abort callback, when initiated by user
2124:src/stm32f1xx_hal_smartcard.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
ARM GAS  /tmp/ccvrs2bU.s 			page 43


2125:src/stm32f1xx_hal_smartcard.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2126:src/stm32f1xx_hal_smartcard.c ****   *         Abort still ongoing for Rx DMA Handle.
2127:src/stm32f1xx_hal_smartcard.c ****   * @param  hdma DMA handle.
2128:src/stm32f1xx_hal_smartcard.c ****   * @retval None
2129:src/stm32f1xx_hal_smartcard.c ****   */
2130:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
2131:src/stm32f1xx_hal_smartcard.c **** {
2132:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2133:src/stm32f1xx_hal_smartcard.c **** 
2134:src/stm32f1xx_hal_smartcard.c ****   hsc->hdmatx->XferAbortCallback = NULL;
2135:src/stm32f1xx_hal_smartcard.c **** 
2136:src/stm32f1xx_hal_smartcard.c ****   /* Check if an Abort process is still ongoing */
2137:src/stm32f1xx_hal_smartcard.c ****   if(hsc->hdmarx != NULL)
2138:src/stm32f1xx_hal_smartcard.c ****   {
2139:src/stm32f1xx_hal_smartcard.c ****     if(hsc->hdmarx->XferAbortCallback != NULL)
2140:src/stm32f1xx_hal_smartcard.c ****     {
2141:src/stm32f1xx_hal_smartcard.c ****       return;
2142:src/stm32f1xx_hal_smartcard.c ****     }
2143:src/stm32f1xx_hal_smartcard.c ****   }
2144:src/stm32f1xx_hal_smartcard.c **** 
2145:src/stm32f1xx_hal_smartcard.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2146:src/stm32f1xx_hal_smartcard.c ****   hsc->TxXferCount = 0x00U;
2147:src/stm32f1xx_hal_smartcard.c ****   hsc->RxXferCount = 0x00U;
2148:src/stm32f1xx_hal_smartcard.c **** 
2149:src/stm32f1xx_hal_smartcard.c ****   /* Reset ErrorCode */
2150:src/stm32f1xx_hal_smartcard.c ****   hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
2151:src/stm32f1xx_hal_smartcard.c **** 
2152:src/stm32f1xx_hal_smartcard.c ****   /* Restore hsc->gState and hsc->RxState to Ready */
2153:src/stm32f1xx_hal_smartcard.c ****   hsc->gState  = HAL_SMARTCARD_STATE_READY;
2154:src/stm32f1xx_hal_smartcard.c ****   hsc->RxState = HAL_SMARTCARD_STATE_READY;
2155:src/stm32f1xx_hal_smartcard.c **** 
2156:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
2157:src/stm32f1xx_hal_smartcard.c ****   /* Call registered Abort complete callback */
2158:src/stm32f1xx_hal_smartcard.c ****   hsc->AbortCpltCallback(hsc);
2159:src/stm32f1xx_hal_smartcard.c **** #else
2160:src/stm32f1xx_hal_smartcard.c ****   /* Call legacy weak Abort complete callback */
2161:src/stm32f1xx_hal_smartcard.c ****   HAL_SMARTCARD_AbortCpltCallback(hsc);
2162:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
2163:src/stm32f1xx_hal_smartcard.c **** }
2164:src/stm32f1xx_hal_smartcard.c **** 
2165:src/stm32f1xx_hal_smartcard.c **** /**
2166:src/stm32f1xx_hal_smartcard.c ****   * @brief  DMA SMARTCARD Rx communication abort callback, when initiated by user
2167:src/stm32f1xx_hal_smartcard.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
2168:src/stm32f1xx_hal_smartcard.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2169:src/stm32f1xx_hal_smartcard.c ****   *         Abort still ongoing for Tx DMA Handle.
2170:src/stm32f1xx_hal_smartcard.c ****   * @param  hdma DMA handle.
2171:src/stm32f1xx_hal_smartcard.c ****   * @retval None
2172:src/stm32f1xx_hal_smartcard.c ****   */
2173:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
2174:src/stm32f1xx_hal_smartcard.c **** {
2175:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2176:src/stm32f1xx_hal_smartcard.c **** 
2177:src/stm32f1xx_hal_smartcard.c ****   hsc->hdmarx->XferAbortCallback = NULL;
2178:src/stm32f1xx_hal_smartcard.c **** 
2179:src/stm32f1xx_hal_smartcard.c ****   /* Check if an Abort process is still ongoing */
2180:src/stm32f1xx_hal_smartcard.c ****   if(hsc->hdmatx != NULL)
2181:src/stm32f1xx_hal_smartcard.c ****   {
ARM GAS  /tmp/ccvrs2bU.s 			page 44


2182:src/stm32f1xx_hal_smartcard.c ****     if(hsc->hdmatx->XferAbortCallback != NULL)
2183:src/stm32f1xx_hal_smartcard.c ****     {
2184:src/stm32f1xx_hal_smartcard.c ****       return;
2185:src/stm32f1xx_hal_smartcard.c ****     }
2186:src/stm32f1xx_hal_smartcard.c ****   }
2187:src/stm32f1xx_hal_smartcard.c **** 
2188:src/stm32f1xx_hal_smartcard.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2189:src/stm32f1xx_hal_smartcard.c ****   hsc->TxXferCount = 0x00U;
2190:src/stm32f1xx_hal_smartcard.c ****   hsc->RxXferCount = 0x00U;
2191:src/stm32f1xx_hal_smartcard.c **** 
2192:src/stm32f1xx_hal_smartcard.c ****   /* Reset ErrorCode */
2193:src/stm32f1xx_hal_smartcard.c ****   hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
2194:src/stm32f1xx_hal_smartcard.c **** 
2195:src/stm32f1xx_hal_smartcard.c ****   /* Restore hsc->gState and hsc->RxState to Ready */
2196:src/stm32f1xx_hal_smartcard.c ****   hsc->gState  = HAL_SMARTCARD_STATE_READY;
2197:src/stm32f1xx_hal_smartcard.c ****   hsc->RxState = HAL_SMARTCARD_STATE_READY;
2198:src/stm32f1xx_hal_smartcard.c **** 
2199:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
2200:src/stm32f1xx_hal_smartcard.c ****   /* Call registered Abort complete callback */
2201:src/stm32f1xx_hal_smartcard.c ****   hsc->AbortCpltCallback(hsc);
2202:src/stm32f1xx_hal_smartcard.c **** #else
2203:src/stm32f1xx_hal_smartcard.c ****   /* Call legacy weak Abort complete callback */
2204:src/stm32f1xx_hal_smartcard.c ****   HAL_SMARTCARD_AbortCpltCallback(hsc);
2205:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
2206:src/stm32f1xx_hal_smartcard.c **** }
2207:src/stm32f1xx_hal_smartcard.c **** 
2208:src/stm32f1xx_hal_smartcard.c **** /**
2209:src/stm32f1xx_hal_smartcard.c ****   * @brief  DMA SMARTCARD Tx communication abort callback, when initiated by user by a call to
2210:src/stm32f1xx_hal_smartcard.c ****   *         HAL_SMARTCARD_AbortTransmit_IT API (Abort only Tx transfer)
2211:src/stm32f1xx_hal_smartcard.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
2212:src/stm32f1xx_hal_smartcard.c ****   *         and leads to user Tx Abort Complete callback execution).
2213:src/stm32f1xx_hal_smartcard.c ****   * @param  hdma DMA handle.
2214:src/stm32f1xx_hal_smartcard.c ****   * @retval None
2215:src/stm32f1xx_hal_smartcard.c ****   */
2216:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2217:src/stm32f1xx_hal_smartcard.c **** {
2218:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2219:src/stm32f1xx_hal_smartcard.c **** 
2220:src/stm32f1xx_hal_smartcard.c ****   hsc->TxXferCount = 0x00U;
2221:src/stm32f1xx_hal_smartcard.c **** 
2222:src/stm32f1xx_hal_smartcard.c ****   /* Restore hsc->gState to Ready */
2223:src/stm32f1xx_hal_smartcard.c ****   hsc->gState = HAL_SMARTCARD_STATE_READY;
2224:src/stm32f1xx_hal_smartcard.c **** 
2225:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
2226:src/stm32f1xx_hal_smartcard.c ****   /* Call registered Abort Transmit Complete Callback */
2227:src/stm32f1xx_hal_smartcard.c ****   hsc->AbortTransmitCpltCallback(hsc);
2228:src/stm32f1xx_hal_smartcard.c **** #else
2229:src/stm32f1xx_hal_smartcard.c ****   /* Call legacy weak Abort Transmit Complete Callback */
2230:src/stm32f1xx_hal_smartcard.c ****   HAL_SMARTCARD_AbortTransmitCpltCallback(hsc);
2231:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
2232:src/stm32f1xx_hal_smartcard.c **** }
2233:src/stm32f1xx_hal_smartcard.c **** 
2234:src/stm32f1xx_hal_smartcard.c **** /**
2235:src/stm32f1xx_hal_smartcard.c ****   * @brief  DMA SMARTCARD Rx communication abort callback, when initiated by user by a call to
2236:src/stm32f1xx_hal_smartcard.c ****   *         HAL_SMARTCARD_AbortReceive_IT API (Abort only Rx transfer)
2237:src/stm32f1xx_hal_smartcard.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
2238:src/stm32f1xx_hal_smartcard.c ****   *         and leads to user Rx Abort Complete callback execution).
ARM GAS  /tmp/ccvrs2bU.s 			page 45


2239:src/stm32f1xx_hal_smartcard.c ****   * @param  hdma DMA handle.
2240:src/stm32f1xx_hal_smartcard.c ****   * @retval None
2241:src/stm32f1xx_hal_smartcard.c ****   */
2242:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2243:src/stm32f1xx_hal_smartcard.c **** {
2244:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2245:src/stm32f1xx_hal_smartcard.c **** 
2246:src/stm32f1xx_hal_smartcard.c ****   hsc->RxXferCount = 0x00U;
2247:src/stm32f1xx_hal_smartcard.c **** 
2248:src/stm32f1xx_hal_smartcard.c ****   /* Restore hsc->RxState to Ready */
2249:src/stm32f1xx_hal_smartcard.c ****   hsc->RxState = HAL_SMARTCARD_STATE_READY;
2250:src/stm32f1xx_hal_smartcard.c **** 
2251:src/stm32f1xx_hal_smartcard.c **** #if (USE_HAL_SMARTCARD_REGISTER_CALLBACKS == 1)
2252:src/stm32f1xx_hal_smartcard.c ****   /* Call registered Abort Receive Complete Callback */
2253:src/stm32f1xx_hal_smartcard.c ****   hsc->AbortReceiveCpltCallback(hsc);
2254:src/stm32f1xx_hal_smartcard.c **** #else
2255:src/stm32f1xx_hal_smartcard.c ****   /* Call legacy weak Abort Receive Complete Callback */
2256:src/stm32f1xx_hal_smartcard.c ****   HAL_SMARTCARD_AbortReceiveCpltCallback(hsc);
2257:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
2258:src/stm32f1xx_hal_smartcard.c **** }
2259:src/stm32f1xx_hal_smartcard.c **** 
2260:src/stm32f1xx_hal_smartcard.c **** /**
2261:src/stm32f1xx_hal_smartcard.c ****   * @brief Configure the SMARTCARD peripheral
2262:src/stm32f1xx_hal_smartcard.c ****   * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
2263:src/stm32f1xx_hal_smartcard.c ****   *                the configuration information for SMARTCARD module.
2264:src/stm32f1xx_hal_smartcard.c ****   * @retval None
2265:src/stm32f1xx_hal_smartcard.c ****   */
2266:src/stm32f1xx_hal_smartcard.c **** static void SMARTCARD_SetConfig(SMARTCARD_HandleTypeDef *hsc)
2267:src/stm32f1xx_hal_smartcard.c **** {
2268:src/stm32f1xx_hal_smartcard.c ****   uint32_t tmpreg = 0x00U;
2269:src/stm32f1xx_hal_smartcard.c ****   uint32_t pclk;
2270:src/stm32f1xx_hal_smartcard.c **** 
2271:src/stm32f1xx_hal_smartcard.c ****   /* Check the parameters */
2272:src/stm32f1xx_hal_smartcard.c ****   assert_param(IS_SMARTCARD_INSTANCE(hsc->Instance));
2273:src/stm32f1xx_hal_smartcard.c ****   assert_param(IS_SMARTCARD_POLARITY(hsc->Init.CLKPolarity));
2274:src/stm32f1xx_hal_smartcard.c ****   assert_param(IS_SMARTCARD_PHASE(hsc->Init.CLKPhase));
2275:src/stm32f1xx_hal_smartcard.c ****   assert_param(IS_SMARTCARD_LASTBIT(hsc->Init.CLKLastBit));
2276:src/stm32f1xx_hal_smartcard.c ****   assert_param(IS_SMARTCARD_BAUDRATE(hsc->Init.BaudRate));
2277:src/stm32f1xx_hal_smartcard.c ****   assert_param(IS_SMARTCARD_WORD_LENGTH(hsc->Init.WordLength));
2278:src/stm32f1xx_hal_smartcard.c ****   assert_param(IS_SMARTCARD_STOPBITS(hsc->Init.StopBits));
2279:src/stm32f1xx_hal_smartcard.c ****   assert_param(IS_SMARTCARD_PARITY(hsc->Init.Parity));
2280:src/stm32f1xx_hal_smartcard.c ****   assert_param(IS_SMARTCARD_MODE(hsc->Init.Mode));
2281:src/stm32f1xx_hal_smartcard.c ****   assert_param(IS_SMARTCARD_NACK_STATE(hsc->Init.NACKState));
2282:src/stm32f1xx_hal_smartcard.c **** 
2283:src/stm32f1xx_hal_smartcard.c ****   /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
2284:src/stm32f1xx_hal_smartcard.c ****      receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
2285:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
2286:src/stm32f1xx_hal_smartcard.c **** 
2287:src/stm32f1xx_hal_smartcard.c ****   /*---------------------------- USART CR2 Configuration ---------------------*/
2288:src/stm32f1xx_hal_smartcard.c ****   tmpreg = hsc->Instance->CR2;
2289:src/stm32f1xx_hal_smartcard.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
2290:src/stm32f1xx_hal_smartcard.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LB
2291:src/stm32f1xx_hal_smartcard.c ****   /* Configure the SMARTCARD Clock, CPOL, CPHA and LastBit -----------------------*/
2292:src/stm32f1xx_hal_smartcard.c ****   /* Set CPOL bit according to hsc->Init.CLKPolarity value */
2293:src/stm32f1xx_hal_smartcard.c ****   /* Set CPHA bit according to hsc->Init.CLKPhase value */
2294:src/stm32f1xx_hal_smartcard.c ****   /* Set LBCL bit according to hsc->Init.CLKLastBit value */
2295:src/stm32f1xx_hal_smartcard.c ****   /* Set Stop Bits: Set STOP[13:12] bits according to hsc->Init.StopBits value */
ARM GAS  /tmp/ccvrs2bU.s 			page 46


2296:src/stm32f1xx_hal_smartcard.c ****   tmpreg |= (uint32_t)(USART_CR2_CLKEN | hsc->Init.CLKPolarity |
 252              		.loc 1 2296 0
 253 0094 EC69     		ldr	r4, [r5, #28]	@ hsc_4(D)->Init.CLKPhase, hsc_4(D)->Init.CLKPhase
 254              	.LBE9:
 255              	.LBE8:
 332:src/stm32f1xx_hal_smartcard.c **** 
 256              		.loc 1 332 0
 257 0096 22F0FF02 		bic	r2, r2, #255	@ tmp199, _11,
 258 009a 0A43     		orrs	r2, r2, r1	@, _14, tmp199, hsc_4(D)->Init.Prescaler
 259 009c 9A61     		str	r2, [r3, #24]	@ _14, _10->GTPR
 335:src/stm32f1xx_hal_smartcard.c **** 
 260              		.loc 1 335 0
 261 009e 9A69     		ldr	r2, [r3, #24]	@ _16, _10->GTPR
 262 00a0 A96A     		ldr	r1, [r5, #40]	@ hsc_4(D)->Init.GuardTime, hsc_4(D)->Init.GuardTime
 263 00a2 22F47F42 		bic	r2, r2, #65280	@ tmp203, _16,
 264 00a6 42EA0122 		orr	r2, r2, r1, lsl #8	@ _20, tmp203, hsc_4(D)->Init.GuardTime,
 265 00aa 9A61     		str	r2, [r3, #24]	@ _20, _10->GTPR
 266              	.LVL12:
 267              	.LBB12:
 268              	.LBB10:
2285:src/stm32f1xx_hal_smartcard.c **** 
 269              		.loc 1 2285 0
 270 00ac DA68     		ldr	r2, [r3, #12]	@ _51, _10->CR1
2297:src/stm32f1xx_hal_smartcard.c ****                       hsc->Init.CLKPhase| hsc->Init.CLKLastBit | hsc->Init.StopBits);
 271              		.loc 1 2297 0
 272 00ae E968     		ldr	r1, [r5, #12]	@ _60, hsc_4(D)->Init.StopBits
2285:src/stm32f1xx_hal_smartcard.c **** 
 273              		.loc 1 2285 0
 274 00b0 22F00C02 		bic	r2, r2, #12	@ _52, _51,
 275 00b4 DA60     		str	r2, [r3, #12]	@ _52, _10->CR1
2296:src/stm32f1xx_hal_smartcard.c ****                       hsc->Init.CLKPhase| hsc->Init.CLKLastBit | hsc->Init.StopBits);
 276              		.loc 1 2296 0
 277 00b6 AA69     		ldr	r2, [r5, #24]	@ hsc_4(D)->Init.CLKPolarity, hsc_4(D)->Init.CLKPolarity
2288:src/stm32f1xx_hal_smartcard.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 278              		.loc 1 2288 0
 279 00b8 1869     		ldr	r0, [r3, #16]	@ tmpreg, _10->CR2
 280              	.LVL13:
2296:src/stm32f1xx_hal_smartcard.c ****                       hsc->Init.CLKPhase| hsc->Init.CLKLastBit | hsc->Init.StopBits);
 281              		.loc 1 2296 0
 282 00ba 2243     		orrs	r2, r2, r4	@, tmp204, hsc_4(D)->Init.CLKPolarity, hsc_4(D)->Init.CLKPhase
 283 00bc 2C6A     		ldr	r4, [r5, #32]	@ hsc_4(D)->Init.CLKLastBit, hsc_4(D)->Init.CLKLastBit
 284 00be 42F40062 		orr	r2, r2, #2048	@ tmp207, tmp204,
 285 00c2 2243     		orrs	r2, r2, r4	@, tmp208, tmp207, hsc_4(D)->Init.CLKLastBit
2290:src/stm32f1xx_hal_smartcard.c ****   /* Configure the SMARTCARD Clock, CPOL, CPHA and LastBit -----------------------*/
 286              		.loc 1 2290 0
 287 00c4 20F47060 		bic	r0, r0, #3840	@ tmpreg, tmpreg,
 288              	.LVL14:
2296:src/stm32f1xx_hal_smartcard.c ****                       hsc->Init.CLKPhase| hsc->Init.CLKLastBit | hsc->Init.StopBits);
 289              		.loc 1 2296 0
 290 00c8 0A43     		orrs	r2, r2, r1	@, tmp210, tmp208, _60
 291 00ca 0243     		orrs	r2, r2, r0	@, tmpreg, tmp210, tmpreg
 292              	.LVL15:
2298:src/stm32f1xx_hal_smartcard.c ****   /* Write to USART CR2 */
2299:src/stm32f1xx_hal_smartcard.c ****   WRITE_REG(hsc->Instance->CR2, (uint32_t)tmpreg);
 293              		.loc 1 2299 0
 294 00cc 1A61     		str	r2, [r3, #16]	@ tmpreg, _10->CR2
2300:src/stm32f1xx_hal_smartcard.c **** 
ARM GAS  /tmp/ccvrs2bU.s 			page 47


2301:src/stm32f1xx_hal_smartcard.c ****   tmpreg = hsc->Instance->CR2;
 295              		.loc 1 2301 0
 296 00ce 1A69     		ldr	r2, [r3, #16]	@ tmpreg, _10->CR2
 297              	.LVL16:
2302:src/stm32f1xx_hal_smartcard.c **** 
2303:src/stm32f1xx_hal_smartcard.c ****   /* Clear STOP[13:12] bits */
2304:src/stm32f1xx_hal_smartcard.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
2305:src/stm32f1xx_hal_smartcard.c **** 
2306:src/stm32f1xx_hal_smartcard.c ****   /* Set Stop Bits: Set STOP[13:12] bits according to hsc->Init.StopBits value */
2307:src/stm32f1xx_hal_smartcard.c ****   tmpreg |= (uint32_t)(hsc->Init.StopBits);
2308:src/stm32f1xx_hal_smartcard.c **** 
2309:src/stm32f1xx_hal_smartcard.c ****   /* Write to USART CR2 */
2310:src/stm32f1xx_hal_smartcard.c ****   WRITE_REG(hsc->Instance->CR2, (uint32_t)tmpreg);
2311:src/stm32f1xx_hal_smartcard.c **** 
2312:src/stm32f1xx_hal_smartcard.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2313:src/stm32f1xx_hal_smartcard.c ****   tmpreg = hsc->Instance->CR1;
2314:src/stm32f1xx_hal_smartcard.c **** 
2315:src/stm32f1xx_hal_smartcard.c ****   /* Clear M, PCE, PS, TE and RE bits */
2316:src/stm32f1xx_hal_smartcard.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
2317:src/stm32f1xx_hal_smartcard.c ****                                    USART_CR1_RE));
2318:src/stm32f1xx_hal_smartcard.c **** 
2319:src/stm32f1xx_hal_smartcard.c ****   /* Configure the SMARTCARD Word Length, Parity and mode:
2320:src/stm32f1xx_hal_smartcard.c ****      Set the M bits according to hsc->Init.WordLength value
2321:src/stm32f1xx_hal_smartcard.c ****      Set PCE and PS bits according to hsc->Init.Parity value
2322:src/stm32f1xx_hal_smartcard.c ****      Set TE and RE bits according to hsc->Init.Mode value */
2323:src/stm32f1xx_hal_smartcard.c ****   tmpreg |= (uint32_t)hsc->Init.WordLength | hsc->Init.Parity | hsc->Init.Mode;
 298              		.loc 1 2323 0
 299 00d0 2869     		ldr	r0, [r5, #16]	@ hsc_4(D)->Init.Parity, hsc_4(D)->Init.Parity
2304:src/stm32f1xx_hal_smartcard.c **** 
 300              		.loc 1 2304 0
 301 00d2 22F44052 		bic	r2, r2, #12288	@ tmpreg, tmpreg,
 302              	.LVL17:
2307:src/stm32f1xx_hal_smartcard.c **** 
 303              		.loc 1 2307 0
 304 00d6 1143     		orrs	r1, r1, r2	@, tmpreg, _60, tmpreg
 305              	.LVL18:
2310:src/stm32f1xx_hal_smartcard.c **** 
 306              		.loc 1 2310 0
 307 00d8 1961     		str	r1, [r3, #16]	@ tmpreg, _10->CR2
 308              		.loc 1 2323 0
 309 00da AA68     		ldr	r2, [r5, #8]	@ hsc_4(D)->Init.WordLength, hsc_4(D)->Init.WordLength
2313:src/stm32f1xx_hal_smartcard.c **** 
 310              		.loc 1 2313 0
 311 00dc D968     		ldr	r1, [r3, #12]	@ tmpreg, _10->CR1
 312              	.LVL19:
 313              		.loc 1 2323 0
 314 00de 0243     		orrs	r2, r2, r0	@, tmp212, hsc_4(D)->Init.WordLength, hsc_4(D)->Init.Parity
 315 00e0 6869     		ldr	r0, [r5, #20]	@ hsc_4(D)->Init.Mode, hsc_4(D)->Init.Mode
2316:src/stm32f1xx_hal_smartcard.c ****                                    USART_CR1_RE));
 316              		.loc 1 2316 0
 317 00e2 21F4B051 		bic	r1, r1, #5632	@ tmpreg, tmpreg,
 318              	.LVL20:
 319 00e6 21F00C01 		bic	r1, r1, #12	@ tmpreg, tmpreg,
 320              	.LVL21:
 321              		.loc 1 2323 0
 322 00ea 0243     		orrs	r2, r2, r0	@, tmp215, tmp212, hsc_4(D)->Init.Mode
 323 00ec 0A43     		orrs	r2, r2, r1	@, tmpreg, tmp215, tmpreg
ARM GAS  /tmp/ccvrs2bU.s 			page 48


 324              	.LVL22:
2324:src/stm32f1xx_hal_smartcard.c **** 
2325:src/stm32f1xx_hal_smartcard.c ****   /* Write to USART CR1 */
2326:src/stm32f1xx_hal_smartcard.c ****   WRITE_REG(hsc->Instance->CR1, (uint32_t)tmpreg);
 325              		.loc 1 2326 0
 326 00ee DA60     		str	r2, [r3, #12]	@ tmpreg, _10->CR1
2327:src/stm32f1xx_hal_smartcard.c **** 
2328:src/stm32f1xx_hal_smartcard.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
2329:src/stm32f1xx_hal_smartcard.c ****   /* Clear CTSE and RTSE bits */
2330:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 327              		.loc 1 2330 0
 328 00f0 5A69     		ldr	r2, [r3, #20]	@ _75, _10->CR3
 329              	.LVL23:
 330 00f2 1924     		movs	r4, #25	@ tmp268,
 331 00f4 22F44072 		bic	r2, r2, #768	@ _76, _75,
 332 00f8 5A61     		str	r2, [r3, #20]	@ _76, _10->CR3
 333              	.LVL24:
2331:src/stm32f1xx_hal_smartcard.c **** 
2332:src/stm32f1xx_hal_smartcard.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
2333:src/stm32f1xx_hal_smartcard.c ****   if(hsc->Instance == USART1)
 334              		.loc 1 2333 0
 335 00fa 214A     		ldr	r2, .L19	@ tmp217,
 336 00fc 9342     		cmp	r3, r2	@ _10, tmp217
 337 00fe 3AD1     		bne	.L15	@,
2334:src/stm32f1xx_hal_smartcard.c ****   {
2335:src/stm32f1xx_hal_smartcard.c ****     pclk = HAL_RCC_GetPCLK2Freq();
 338              		.loc 1 2335 0
 339 0100 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq	@
 340              	.LVL25:
 341              	.L18:
2336:src/stm32f1xx_hal_smartcard.c ****     hsc->Instance->BRR = SMARTCARD_BRR(pclk, hsc->Init.BaudRate);
2337:src/stm32f1xx_hal_smartcard.c ****   }
2338:src/stm32f1xx_hal_smartcard.c ****   else
2339:src/stm32f1xx_hal_smartcard.c ****   {
2340:src/stm32f1xx_hal_smartcard.c ****     pclk = HAL_RCC_GetPCLK1Freq();
2341:src/stm32f1xx_hal_smartcard.c ****     hsc->Instance->BRR = SMARTCARD_BRR(pclk, hsc->Init.BaudRate);
 342              		.loc 1 2341 0
 343 0104 6043     		muls	r0, r4, r0	@ tmp239, tmp268
 344              	.LVL26:
 345 0106 6C68     		ldr	r4, [r5, #4]	@ hsc_4(D)->Init.BaudRate, hsc_4(D)->Init.BaudRate
 346 0108 6421     		movs	r1, #100	@ tmp247,
 347 010a A400     		lsls	r4, r4, #2	@ tmp241, hsc_4(D)->Init.BaudRate,
 348 010c B0FBF4F0 		udiv	r0, r0, r4	@ _98, tmp239, tmp241
 349 0110 B0FBF1F4 		udiv	r4, r0, r1	@ tmp246, _98, tmp247
 350 0114 01FB1403 		mls	r3, r1, r4, r0	@ tmp250, tmp247, tmp246, _98
 351 0118 1B01     		lsls	r3, r3, #4	@ tmp251, tmp250,
 352 011a 3233     		adds	r3, r3, #50	@ tmp252, tmp251,
 353 011c B3FBF1F3 		udiv	r3, r3, r1	@ tmp254, tmp252, tmp247
 354 0120 2A68     		ldr	r2, [r5]	@ _94, hsc_4(D)->Instance
 355 0122 03EB0413 		add	r3, r3, r4, lsl #4	@ _108, tmp254, tmp246,
 356 0126 9360     		str	r3, [r2, #8]	@ _108,
 357              	.LVL27:
 358              	.LBE10:
 359              	.LBE12:
 343:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
 360              		.loc 1 343 0
 361 0128 2B68     		ldr	r3, [r5]	@ _23, hsc_4(D)->Instance
ARM GAS  /tmp/ccvrs2bU.s 			page 49


 356:src/stm32f1xx_hal_smartcard.c **** 
 362              		.loc 1 356 0
 363 012a E96A     		ldr	r1, [r5, #44]	@ hsc_4(D)->Init.NACKState, hsc_4(D)->Init.NACKState
 343:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
 364              		.loc 1 343 0
 365 012c 1A69     		ldr	r2, [r3, #16]	@ _24, _23->CR2
 362:src/stm32f1xx_hal_smartcard.c ****   hsc->gState= HAL_SMARTCARD_STATE_READY;
 366              		.loc 1 362 0
 367 012e 0020     		movs	r0, #0	@ tmp262,
 343:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
 368              		.loc 1 343 0
 369 0130 22F48042 		bic	r2, r2, #16384	@ _25, _24,
 370 0134 1A61     		str	r2, [r3, #16]	@ _25, _23->CR2
 344:src/stm32f1xx_hal_smartcard.c **** 
 371              		.loc 1 344 0
 372 0136 5A69     		ldr	r2, [r3, #20]	@ _27, _23->CR3
 373 0138 22F00A02 		bic	r2, r2, #10	@ _28, _27,
 374 013c 5A61     		str	r2, [r3, #20]	@ _28, _23->CR3
 347:src/stm32f1xx_hal_smartcard.c **** 
 375              		.loc 1 347 0
 376 013e DA68     		ldr	r2, [r3, #12]	@ _30, _23->CR1
 377 0140 42F48072 		orr	r2, r2, #256	@ _31, _30,
 378 0144 DA60     		str	r2, [r3, #12]	@ _31, _23->CR1
 350:src/stm32f1xx_hal_smartcard.c **** 
 379              		.loc 1 350 0
 380 0146 5A69     		ldr	r2, [r3, #20]	@ _33, _23->CR3
 381 0148 42F00102 		orr	r2, r2, #1	@ _34, _33,
 382 014c 5A61     		str	r2, [r3, #20]	@ _34, _23->CR3
 353:src/stm32f1xx_hal_smartcard.c **** 
 383              		.loc 1 353 0
 384 014e DA68     		ldr	r2, [r3, #12]	@ _36, _23->CR1
 385 0150 42F40052 		orr	r2, r2, #8192	@ _37, _36,
 386 0154 DA60     		str	r2, [r3, #12]	@ _37, _23->CR1
 356:src/stm32f1xx_hal_smartcard.c **** 
 387              		.loc 1 356 0
 388 0156 5A69     		ldr	r2, [r3, #20]	@ _39, _23->CR3
 389 0158 22F01002 		bic	r2, r2, #16	@ tmp260, _39,
 390 015c 0A43     		orrs	r2, r2, r1	@, _42, tmp260, hsc_4(D)->Init.NACKState
 391 015e 5A61     		str	r2, [r3, #20]	@ _42, _23->CR3
 359:src/stm32f1xx_hal_smartcard.c **** 
 392              		.loc 1 359 0
 393 0160 5A69     		ldr	r2, [r3, #20]	@ _44, _23->CR3
 394 0162 42F02002 		orr	r2, r2, #32	@ _45, _44,
 395 0166 5A61     		str	r2, [r3, #20]	@ _45, _23->CR3
 363:src/stm32f1xx_hal_smartcard.c ****   hsc->RxState= HAL_SMARTCARD_STATE_READY;
 396              		.loc 1 363 0
 397 0168 2023     		movs	r3, #32	@ tmp263,
 362:src/stm32f1xx_hal_smartcard.c ****   hsc->gState= HAL_SMARTCARD_STATE_READY;
 398              		.loc 1 362 0
 399 016a E864     		str	r0, [r5, #76]	@ tmp262, hsc_4(D)->ErrorCode
 363:src/stm32f1xx_hal_smartcard.c ****   hsc->RxState= HAL_SMARTCARD_STATE_READY;
 400              		.loc 1 363 0
 401 016c 85F84930 		strb	r3, [r5, #73]	@ tmp263, hsc_4(D)->gState
 364:src/stm32f1xx_hal_smartcard.c **** 
 402              		.loc 1 364 0
 403 0170 85F84A30 		strb	r3, [r5, #74]	@ tmp263, hsc_4(D)->RxState
 366:src/stm32f1xx_hal_smartcard.c **** }
ARM GAS  /tmp/ccvrs2bU.s 			page 50


 404              		.loc 1 366 0
 405 0174 38BD     		pop	{r3, r4, r5, pc}	@
 406              	.LVL28:
 407              	.L15:
 408              	.LBB13:
 409              	.LBB11:
2340:src/stm32f1xx_hal_smartcard.c ****     hsc->Instance->BRR = SMARTCARD_BRR(pclk, hsc->Init.BaudRate);
 410              		.loc 1 2340 0
 411 0176 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq	@
 412              	.LVL29:
 413 017a C3E7     		b	.L18	@
 414              	.LVL30:
 415              	.L17:
 416              	.LBE11:
 417              	.LBE13:
 301:src/stm32f1xx_hal_smartcard.c ****   }
 418              		.loc 1 301 0
 419 017c 0120     		movs	r0, #1	@ <retval>,
 420              	.LVL31:
 367:src/stm32f1xx_hal_smartcard.c **** 
 421              		.loc 1 367 0
 422 017e 38BD     		pop	{r3, r4, r5, pc}	@
 423              	.LVL32:
 424              	.L20:
 425              		.align	2
 426              	.L19:
 427 0180 00380140 		.word	1073821696
 428              		.cfi_endproc
 429              	.LFE65:
 430              		.size	HAL_SMARTCARD_Init, .-HAL_SMARTCARD_Init
 431              		.align	1
 432              		.weak	HAL_SMARTCARD_MspDeInit
 433              		.syntax unified
 434              		.thumb
 435              		.thumb_func
 436              		.fpu softvfp
 437              		.type	HAL_SMARTCARD_MspDeInit, %function
 438              	HAL_SMARTCARD_MspDeInit:
 439              	.LFB118:
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443              		@ link register save eliminated.
 444 0184 7047     		bx	lr	@
 445              		.cfi_endproc
 446              	.LFE118:
 447              		.size	HAL_SMARTCARD_MspDeInit, .-HAL_SMARTCARD_MspDeInit
 448              		.align	1
 449              		.global	HAL_SMARTCARD_DeInit
 450              		.syntax unified
 451              		.thumb
 452              		.thumb_func
 453              		.fpu softvfp
 454              		.type	HAL_SMARTCARD_DeInit, %function
 455              	HAL_SMARTCARD_DeInit:
 456              	.LFB66:
 376:src/stm32f1xx_hal_smartcard.c ****   /* Check the SMARTCARD handle allocation */
ARM GAS  /tmp/ccvrs2bU.s 			page 51


 457              		.loc 1 376 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              	.LVL33:
 376:src/stm32f1xx_hal_smartcard.c ****   /* Check the SMARTCARD handle allocation */
 462              		.loc 1 376 0
 463 0186 10B5     		push	{r4, lr}	@
 464              	.LCFI2:
 465              		.cfi_def_cfa_offset 8
 466              		.cfi_offset 4, -8
 467              		.cfi_offset 14, -4
 378:src/stm32f1xx_hal_smartcard.c ****   {
 468              		.loc 1 378 0
 469 0188 0446     		mov	r4, r0	@ hsc, hsc
 470 018a 90B1     		cbz	r0, .L24	@ hsc,
 386:src/stm32f1xx_hal_smartcard.c **** 
 471              		.loc 1 386 0
 472 018c 2423     		movs	r3, #36	@ tmp115,
 389:src/stm32f1xx_hal_smartcard.c **** 
 473              		.loc 1 389 0
 474 018e 0268     		ldr	r2, [r0]	@ _6, hsc_3(D)->Instance
 386:src/stm32f1xx_hal_smartcard.c **** 
 475              		.loc 1 386 0
 476 0190 80F84930 		strb	r3, [r0, #73]	@ tmp115, hsc_3(D)->gState
 389:src/stm32f1xx_hal_smartcard.c **** 
 477              		.loc 1 389 0
 478 0194 D368     		ldr	r3, [r2, #12]	@ _7, _6->CR1
 479 0196 23F40053 		bic	r3, r3, #8192	@ _8, _7,
 480 019a D360     		str	r3, [r2, #12]	@ _8, _6->CR1
 400:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACKS */
 481              		.loc 1 400 0
 482 019c FFF7FEFF 		bl	HAL_SMARTCARD_MspDeInit	@
 483              	.LVL34:
 403:src/stm32f1xx_hal_smartcard.c ****   hsc->gState = HAL_SMARTCARD_STATE_RESET;
 484              		.loc 1 403 0
 485 01a0 0020     		movs	r0, #0	@ tmp117,
 486 01a2 E064     		str	r0, [r4, #76]	@ tmp117, hsc_3(D)->ErrorCode
 408:src/stm32f1xx_hal_smartcard.c **** 
 487              		.loc 1 408 0
 488 01a4 84F84800 		strb	r0, [r4, #72]	@ tmp117, hsc_3(D)->Lock
 404:src/stm32f1xx_hal_smartcard.c ****   hsc->RxState = HAL_SMARTCARD_STATE_RESET;
 489              		.loc 1 404 0
 490 01a8 84F84900 		strb	r0, [r4, #73]	@ tmp117, hsc_3(D)->gState
 405:src/stm32f1xx_hal_smartcard.c **** 
 491              		.loc 1 405 0
 492 01ac 84F84A00 		strb	r0, [r4, #74]	@ tmp117, hsc_3(D)->RxState
 410:src/stm32f1xx_hal_smartcard.c **** }
 493              		.loc 1 410 0
 494 01b0 10BD     		pop	{r4, pc}	@
 495              	.LVL35:
 496              	.L24:
 380:src/stm32f1xx_hal_smartcard.c ****   }
 497              		.loc 1 380 0
 498 01b2 0120     		movs	r0, #1	@ <retval>,
 499              	.LVL36:
 411:src/stm32f1xx_hal_smartcard.c **** 
ARM GAS  /tmp/ccvrs2bU.s 			page 52


 500              		.loc 1 411 0
 501 01b4 10BD     		pop	{r4, pc}	@
 502              		.cfi_endproc
 503              	.LFE66:
 504              		.size	HAL_SMARTCARD_DeInit, .-HAL_SMARTCARD_DeInit
 505              		.align	1
 506              		.global	HAL_SMARTCARD_Transmit
 507              		.syntax unified
 508              		.thumb
 509              		.thumb_func
 510              		.fpu softvfp
 511              		.type	HAL_SMARTCARD_Transmit, %function
 512              	HAL_SMARTCARD_Transmit:
 513              	.LFB69:
 757:src/stm32f1xx_hal_smartcard.c ****   uint16_t* tmp;
 514              		.loc 1 757 0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 0
 517              		@ frame_needed = 0, uses_anonymous_args = 0
 518              	.LVL37:
 519 01b6 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 520              	.LCFI3:
 521              		.cfi_def_cfa_offset 24
 522              		.cfi_offset 4, -24
 523              		.cfi_offset 5, -20
 524              		.cfi_offset 6, -16
 525              		.cfi_offset 7, -12
 526              		.cfi_offset 8, -8
 527              		.cfi_offset 14, -4
 757:src/stm32f1xx_hal_smartcard.c ****   uint16_t* tmp;
 528              		.loc 1 757 0
 529 01ba 1F46     		mov	r7, r3	@ Timeout, Timeout
 761:src/stm32f1xx_hal_smartcard.c ****   {
 530              		.loc 1 761 0
 531 01bc 90F84930 		ldrb	r3, [r0, #73]	@ zero_extendqisi2	@ hsc_7(D)->gState, hsc_7(D)->gState
 532              	.LVL38:
 757:src/stm32f1xx_hal_smartcard.c ****   uint16_t* tmp;
 533              		.loc 1 757 0
 534 01c0 0446     		mov	r4, r0	@ hsc, hsc
 761:src/stm32f1xx_hal_smartcard.c ****   {
 535              		.loc 1 761 0
 536 01c2 202B     		cmp	r3, #32	@ hsc_7(D)->gState,
 757:src/stm32f1xx_hal_smartcard.c ****   uint16_t* tmp;
 537              		.loc 1 757 0
 538 01c4 0D46     		mov	r5, r1	@ pData, pData
 539 01c6 9046     		mov	r8, r2	@ Size, Size
 761:src/stm32f1xx_hal_smartcard.c ****   {
 540              		.loc 1 761 0
 541 01c8 3FD1     		bne	.L34	@,
 763:src/stm32f1xx_hal_smartcard.c ****     {
 542              		.loc 1 763 0
 543 01ca 0029     		cmp	r1, #0	@ pData
 544 01cc 3AD0     		beq	.L33	@
 763:src/stm32f1xx_hal_smartcard.c ****     {
 545              		.loc 1 763 0 is_stmt 0 discriminator 1
 546 01ce 002A     		cmp	r2, #0	@ Size
 547 01d0 38D0     		beq	.L33	@
ARM GAS  /tmp/ccvrs2bU.s 			page 53


 769:src/stm32f1xx_hal_smartcard.c **** 
 548              		.loc 1 769 0 is_stmt 1
 549 01d2 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2	@ hsc_7(D)->Lock, hsc_7(D)->Lock
 550 01d6 012B     		cmp	r3, #1	@ hsc_7(D)->Lock,
 551 01d8 37D0     		beq	.L34	@,
 769:src/stm32f1xx_hal_smartcard.c **** 
 552              		.loc 1 769 0 is_stmt 0 discriminator 2
 553 01da 0123     		movs	r3, #1	@ tmp130,
 554 01dc 80F84830 		strb	r3, [r0, #72]	@ tmp130, hsc_7(D)->Lock
 771:src/stm32f1xx_hal_smartcard.c ****     hsc->gState = HAL_SMARTCARD_STATE_BUSY_TX;
 555              		.loc 1 771 0 is_stmt 1 discriminator 2
 556 01e0 0023     		movs	r3, #0	@ tmp132,
 557 01e2 C364     		str	r3, [r0, #76]	@ tmp132, hsc_7(D)->ErrorCode
 772:src/stm32f1xx_hal_smartcard.c **** 
 558              		.loc 1 772 0 discriminator 2
 559 01e4 2123     		movs	r3, #33	@ tmp133,
 560 01e6 80F84930 		strb	r3, [r0, #73]	@ tmp133, hsc_7(D)->gState
 775:src/stm32f1xx_hal_smartcard.c **** 
 561              		.loc 1 775 0 discriminator 2
 562 01ea FFF7FEFF 		bl	HAL_GetTick	@
 563              	.LVL39:
 564 01ee 0646     		mov	r6, r0	@ tickstart,
 565              	.LVL40:
 777:src/stm32f1xx_hal_smartcard.c ****     hsc->TxXferCount = Size;
 566              		.loc 1 777 0 discriminator 2
 567 01f0 A4F83480 		strh	r8, [r4, #52]	@ movhi	@ Size, hsc_7(D)->TxXferSize
 778:src/stm32f1xx_hal_smartcard.c ****     while(hsc->TxXferCount > 0U)
 568              		.loc 1 778 0 discriminator 2
 569 01f4 A4F83680 		strh	r8, [r4, #54]	@ movhi	@ Size, hsc_7(D)->TxXferCount
 570              	.LVL41:
 571              	.L27:
 779:src/stm32f1xx_hal_smartcard.c ****     {
 572              		.loc 1 779 0
 573 01f8 E38E     		ldrh	r3, [r4, #54]	@, hsc_7(D)->TxXferCount
 574 01fa 9BB2     		uxth	r3, r3	@ _19, hsc_7(D)->TxXferCount
 575 01fc 6BB9     		cbnz	r3, .L29	@ _19,
 791:src/stm32f1xx_hal_smartcard.c ****     {
 576              		.loc 1 791 0
 577 01fe 3B46     		mov	r3, r7	@, Timeout
 578 0200 3246     		mov	r2, r6	@, tickstart
 579 0202 4021     		movs	r1, #64	@,
 580 0204 2046     		mov	r0, r4	@, hsc
 581 0206 FFF708FF 		bl	SMARTCARD_WaitOnFlagUntilTimeout.constprop.3	@
 582              	.LVL42:
 583 020a 88B9     		cbnz	r0, .L30	@ <retval>,
 797:src/stm32f1xx_hal_smartcard.c **** 
 584              		.loc 1 797 0
 585 020c 2023     		movs	r3, #32	@ tmp148,
 800:src/stm32f1xx_hal_smartcard.c **** 
 586              		.loc 1 800 0
 587 020e 84F84800 		strb	r0, [r4, #72]	@ <retval>, hsc_7(D)->Lock
 797:src/stm32f1xx_hal_smartcard.c **** 
 588              		.loc 1 797 0
 589 0212 84F84930 		strb	r3, [r4, #73]	@ tmp148, hsc_7(D)->gState
 802:src/stm32f1xx_hal_smartcard.c ****   }
 590              		.loc 1 802 0
 591 0216 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
ARM GAS  /tmp/ccvrs2bU.s 			page 54


 592              	.LVL43:
 593              	.L29:
 781:src/stm32f1xx_hal_smartcard.c ****       if(SMARTCARD_WaitOnFlagUntilTimeout(hsc, SMARTCARD_FLAG_TXE, RESET, tickstart, Timeout) != HA
 594              		.loc 1 781 0
 595 021a E38E     		ldrh	r3, [r4, #54]	@, hsc_7(D)->TxXferCount
 782:src/stm32f1xx_hal_smartcard.c ****       {
 596              		.loc 1 782 0
 597 021c 3246     		mov	r2, r6	@, tickstart
 781:src/stm32f1xx_hal_smartcard.c ****       if(SMARTCARD_WaitOnFlagUntilTimeout(hsc, SMARTCARD_FLAG_TXE, RESET, tickstart, Timeout) != HA
 598              		.loc 1 781 0
 599 021e 013B     		subs	r3, r3, #1	@ tmp139, hsc_7(D)->TxXferCount,
 600 0220 9BB2     		uxth	r3, r3	@ _21, tmp139
 601 0222 E386     		strh	r3, [r4, #54]	@ movhi	@ _21, hsc_7(D)->TxXferCount
 782:src/stm32f1xx_hal_smartcard.c ****       {
 602              		.loc 1 782 0
 603 0224 8021     		movs	r1, #128	@,
 604 0226 3B46     		mov	r3, r7	@, Timeout
 605 0228 2046     		mov	r0, r4	@, hsc
 606 022a FFF7F6FE 		bl	SMARTCARD_WaitOnFlagUntilTimeout.constprop.3	@
 607              	.LVL44:
 608 022e 10B1     		cbz	r0, .L28	@,
 609              	.L30:
 784:src/stm32f1xx_hal_smartcard.c ****       }
 610              		.loc 1 784 0
 611 0230 0320     		movs	r0, #3	@ <retval>,
 612 0232 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 613              	.LVL45:
 614              	.L28:
 787:src/stm32f1xx_hal_smartcard.c ****       pData +=1U;
 615              		.loc 1 787 0
 616 0236 35F8013B 		ldrh	r3, [r5], #1	@, MEM[(uint16_t *)pData_1]
 617              	.LVL46:
 618 023a 2268     		ldr	r2, [r4]	@ _26, hsc_7(D)->Instance
 619 023c C3F30803 		ubfx	r3, r3, #0, #9	@ _28, MEM[(uint16_t *)pData_1],,
 620 0240 5360     		str	r3, [r2, #4]	@ _28, _26->DR
 621              	.LVL47:
 622 0242 D9E7     		b	.L27	@
 623              	.LVL48:
 624              	.L33:
 765:src/stm32f1xx_hal_smartcard.c ****     }
 625              		.loc 1 765 0
 626 0244 0120     		movs	r0, #1	@ <retval>,
 627              	.LVL49:
 628 0246 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 629              	.LVL50:
 630              	.L34:
 806:src/stm32f1xx_hal_smartcard.c ****   }
 631              		.loc 1 806 0
 632 024a 0220     		movs	r0, #2	@ <retval>,
 633              	.LVL51:
 808:src/stm32f1xx_hal_smartcard.c **** 
 634              		.loc 1 808 0
 635 024c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 636              		.cfi_endproc
 637              	.LFE69:
 638              		.size	HAL_SMARTCARD_Transmit, .-HAL_SMARTCARD_Transmit
 639              		.align	1
ARM GAS  /tmp/ccvrs2bU.s 			page 55


 640              		.global	HAL_SMARTCARD_Receive
 641              		.syntax unified
 642              		.thumb
 643              		.thumb_func
 644              		.fpu softvfp
 645              		.type	HAL_SMARTCARD_Receive, %function
 646              	HAL_SMARTCARD_Receive:
 647              	.LFB70:
 820:src/stm32f1xx_hal_smartcard.c ****   uint16_t* tmp;
 648              		.loc 1 820 0
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 0
 651              		@ frame_needed = 0, uses_anonymous_args = 0
 652              	.LVL52:
 653 0250 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 654              	.LCFI4:
 655              		.cfi_def_cfa_offset 24
 656              		.cfi_offset 4, -24
 657              		.cfi_offset 5, -20
 658              		.cfi_offset 6, -16
 659              		.cfi_offset 7, -12
 660              		.cfi_offset 8, -8
 661              		.cfi_offset 14, -4
 820:src/stm32f1xx_hal_smartcard.c ****   uint16_t* tmp;
 662              		.loc 1 820 0
 663 0254 1F46     		mov	r7, r3	@ Timeout, Timeout
 824:src/stm32f1xx_hal_smartcard.c ****   {
 664              		.loc 1 824 0
 665 0256 90F84A30 		ldrb	r3, [r0, #74]	@ zero_extendqisi2	@ hsc_6(D)->RxState, hsc_6(D)->RxState
 666              	.LVL53:
 820:src/stm32f1xx_hal_smartcard.c ****   uint16_t* tmp;
 667              		.loc 1 820 0
 668 025a 0446     		mov	r4, r0	@ hsc, hsc
 824:src/stm32f1xx_hal_smartcard.c ****   {
 669              		.loc 1 824 0
 670 025c 202B     		cmp	r3, #32	@ hsc_6(D)->RxState,
 820:src/stm32f1xx_hal_smartcard.c ****   uint16_t* tmp;
 671              		.loc 1 820 0
 672 025e 0D46     		mov	r5, r1	@ pData, pData
 673 0260 9046     		mov	r8, r2	@ Size, Size
 824:src/stm32f1xx_hal_smartcard.c ****   {
 674              		.loc 1 824 0
 675 0262 32D1     		bne	.L42	@,
 826:src/stm32f1xx_hal_smartcard.c ****     {
 676              		.loc 1 826 0
 677 0264 71B3     		cbz	r1, .L41	@ pData,
 826:src/stm32f1xx_hal_smartcard.c ****     {
 678              		.loc 1 826 0 is_stmt 0 discriminator 1
 679 0266 6AB3     		cbz	r2, .L41	@ Size,
 832:src/stm32f1xx_hal_smartcard.c **** 
 680              		.loc 1 832 0 is_stmt 1
 681 0268 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2	@ hsc_6(D)->Lock, hsc_6(D)->Lock
 682 026c 012B     		cmp	r3, #1	@ hsc_6(D)->Lock,
 683 026e 2CD0     		beq	.L42	@,
 832:src/stm32f1xx_hal_smartcard.c **** 
 684              		.loc 1 832 0 is_stmt 0 discriminator 2
 685 0270 0123     		movs	r3, #1	@ tmp130,
ARM GAS  /tmp/ccvrs2bU.s 			page 56


 686 0272 80F84830 		strb	r3, [r0, #72]	@ tmp130, hsc_6(D)->Lock
 834:src/stm32f1xx_hal_smartcard.c ****     hsc->RxState = HAL_SMARTCARD_STATE_BUSY_RX;
 687              		.loc 1 834 0 is_stmt 1 discriminator 2
 688 0276 0023     		movs	r3, #0	@ tmp132,
 689 0278 C364     		str	r3, [r0, #76]	@ tmp132, hsc_6(D)->ErrorCode
 835:src/stm32f1xx_hal_smartcard.c **** 
 690              		.loc 1 835 0 discriminator 2
 691 027a 2223     		movs	r3, #34	@ tmp133,
 692 027c 80F84A30 		strb	r3, [r0, #74]	@ tmp133, hsc_6(D)->RxState
 838:src/stm32f1xx_hal_smartcard.c **** 
 693              		.loc 1 838 0 discriminator 2
 694 0280 FFF7FEFF 		bl	HAL_GetTick	@
 695              	.LVL54:
 696 0284 0646     		mov	r6, r0	@ tickstart,
 697              	.LVL55:
 840:src/stm32f1xx_hal_smartcard.c ****     hsc->RxXferCount = Size;
 698              		.loc 1 840 0 discriminator 2
 699 0286 A4F83C80 		strh	r8, [r4, #60]	@ movhi	@ Size, hsc_6(D)->RxXferSize
 841:src/stm32f1xx_hal_smartcard.c **** 
 700              		.loc 1 841 0 discriminator 2
 701 028a A4F83E80 		strh	r8, [r4, #62]	@ movhi	@ Size, hsc_6(D)->RxXferCount
 702              	.LVL56:
 703              	.L37:
 844:src/stm32f1xx_hal_smartcard.c ****     {
 704              		.loc 1 844 0
 705 028e E08F     		ldrh	r0, [r4, #62]	@, hsc_6(D)->RxXferCount
 706 0290 80B2     		uxth	r0, r0	@ _18, hsc_6(D)->RxXferCount
 707 0292 30B9     		cbnz	r0, .L38	@ _18,
 857:src/stm32f1xx_hal_smartcard.c **** 
 708              		.loc 1 857 0
 709 0294 2023     		movs	r3, #32	@ tmp146,
 860:src/stm32f1xx_hal_smartcard.c **** 
 710              		.loc 1 860 0
 711 0296 84F84800 		strb	r0, [r4, #72]	@ _18, hsc_6(D)->Lock
 857:src/stm32f1xx_hal_smartcard.c **** 
 712              		.loc 1 857 0
 713 029a 84F84A30 		strb	r3, [r4, #74]	@ tmp146, hsc_6(D)->RxState
 862:src/stm32f1xx_hal_smartcard.c ****   }
 714              		.loc 1 862 0
 715 029e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 716              	.LVL57:
 717              	.L38:
 846:src/stm32f1xx_hal_smartcard.c ****       if(SMARTCARD_WaitOnFlagUntilTimeout(hsc, SMARTCARD_FLAG_RXNE, RESET, tickstart, Timeout) != H
 718              		.loc 1 846 0
 719 02a2 E38F     		ldrh	r3, [r4, #62]	@, hsc_6(D)->RxXferCount
 847:src/stm32f1xx_hal_smartcard.c ****       {
 720              		.loc 1 847 0
 721 02a4 3246     		mov	r2, r6	@, tickstart
 846:src/stm32f1xx_hal_smartcard.c ****       if(SMARTCARD_WaitOnFlagUntilTimeout(hsc, SMARTCARD_FLAG_RXNE, RESET, tickstart, Timeout) != H
 722              		.loc 1 846 0
 723 02a6 013B     		subs	r3, r3, #1	@ tmp139, hsc_6(D)->RxXferCount,
 724 02a8 9BB2     		uxth	r3, r3	@ _20, tmp139
 725 02aa E387     		strh	r3, [r4, #62]	@ movhi	@ _20, hsc_6(D)->RxXferCount
 847:src/stm32f1xx_hal_smartcard.c ****       {
 726              		.loc 1 847 0
 727 02ac 2021     		movs	r1, #32	@,
 728 02ae 3B46     		mov	r3, r7	@, Timeout
ARM GAS  /tmp/ccvrs2bU.s 			page 57


 729 02b0 2046     		mov	r0, r4	@, hsc
 730 02b2 FFF7B2FE 		bl	SMARTCARD_WaitOnFlagUntilTimeout.constprop.3	@
 731              	.LVL58:
 732 02b6 58B9     		cbnz	r0, .L43	@,
 733              	.LVL59:
 852:src/stm32f1xx_hal_smartcard.c ****       pData +=1U;
 734              		.loc 1 852 0
 735 02b8 2368     		ldr	r3, [r4]	@ _25, hsc_6(D)->Instance
 736 02ba 5B68     		ldr	r3, [r3, #4]	@ _26, _25->DR
 737 02bc DBB2     		uxtb	r3, r3	@ _26, _26
 738 02be 25F8013B 		strh	r3, [r5], #1	@ movhi	@ _26, MEM[(uint16_t *)pData_1]
 739              	.LVL60:
 740 02c2 E4E7     		b	.L37	@
 741              	.LVL61:
 742              	.L41:
 828:src/stm32f1xx_hal_smartcard.c ****     }
 743              		.loc 1 828 0
 744 02c4 0120     		movs	r0, #1	@ <retval>,
 745              	.LVL62:
 746 02c6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 747              	.LVL63:
 748              	.L42:
 866:src/stm32f1xx_hal_smartcard.c ****   }
 749              		.loc 1 866 0
 750 02ca 0220     		movs	r0, #2	@ <retval>,
 751              	.LVL64:
 752 02cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 753              	.LVL65:
 754              	.L43:
 849:src/stm32f1xx_hal_smartcard.c ****       }
 755              		.loc 1 849 0
 756 02d0 0320     		movs	r0, #3	@ <retval>,
 868:src/stm32f1xx_hal_smartcard.c **** 
 757              		.loc 1 868 0
 758 02d2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 759              		.cfi_endproc
 760              	.LFE70:
 761              		.size	HAL_SMARTCARD_Receive, .-HAL_SMARTCARD_Receive
 762              		.align	1
 763              		.global	HAL_SMARTCARD_Transmit_IT
 764              		.syntax unified
 765              		.thumb
 766              		.thumb_func
 767              		.fpu softvfp
 768              		.type	HAL_SMARTCARD_Transmit_IT, %function
 769              	HAL_SMARTCARD_Transmit_IT:
 770              	.LFB71:
 879:src/stm32f1xx_hal_smartcard.c ****   /* Check that a Tx process is not already ongoing */
 771              		.loc 1 879 0
 772              		.cfi_startproc
 773              		@ args = 0, pretend = 0, frame = 0
 774              		@ frame_needed = 0, uses_anonymous_args = 0
 775              		@ link register save eliminated.
 776              	.LVL66:
 881:src/stm32f1xx_hal_smartcard.c ****   {
 777              		.loc 1 881 0
 778 02d6 90F84930 		ldrb	r3, [r0, #73]	@ zero_extendqisi2	@ hsc_4(D)->gState, hsc_4(D)->gState
ARM GAS  /tmp/ccvrs2bU.s 			page 58


 779 02da 202B     		cmp	r3, #32	@ hsc_4(D)->gState,
 780 02dc 20D1     		bne	.L49	@,
 883:src/stm32f1xx_hal_smartcard.c ****     {
 781              		.loc 1 883 0
 782 02de E9B1     		cbz	r1, .L48	@ pData,
 883:src/stm32f1xx_hal_smartcard.c ****     {
 783              		.loc 1 883 0 is_stmt 0 discriminator 1
 784 02e0 E2B1     		cbz	r2, .L48	@ Size,
 889:src/stm32f1xx_hal_smartcard.c **** 
 785              		.loc 1 889 0 is_stmt 1
 786 02e2 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2	@ hsc_4(D)->Lock, hsc_4(D)->Lock
 787 02e6 012B     		cmp	r3, #1	@ hsc_4(D)->Lock,
 788 02e8 1AD0     		beq	.L49	@,
 893:src/stm32f1xx_hal_smartcard.c **** 
 789              		.loc 1 893 0 discriminator 2
 790 02ea C286     		strh	r2, [r0, #54]	@ movhi	@ Size, hsc_4(D)->TxXferCount
 892:src/stm32f1xx_hal_smartcard.c ****     hsc->TxXferCount = Size;
 791              		.loc 1 892 0 discriminator 2
 792 02ec 8286     		strh	r2, [r0, #52]	@ movhi	@ Size, hsc_4(D)->TxXferSize
 895:src/stm32f1xx_hal_smartcard.c ****     hsc->gState = HAL_SMARTCARD_STATE_BUSY_TX;
 793              		.loc 1 895 0 discriminator 2
 794 02ee 0023     		movs	r3, #0	@ tmp129,
 896:src/stm32f1xx_hal_smartcard.c **** 
 795              		.loc 1 896 0 discriminator 2
 796 02f0 2122     		movs	r2, #33	@ tmp130,
 797              	.LVL67:
 895:src/stm32f1xx_hal_smartcard.c ****     hsc->gState = HAL_SMARTCARD_STATE_BUSY_TX;
 798              		.loc 1 895 0 discriminator 2
 799 02f2 C364     		str	r3, [r0, #76]	@ tmp129, hsc_4(D)->ErrorCode
 800              	.LVL68:
 896:src/stm32f1xx_hal_smartcard.c **** 
 801              		.loc 1 896 0 discriminator 2
 802 02f4 80F84920 		strb	r2, [r0, #73]	@ tmp130, hsc_4(D)->gState
 902:src/stm32f1xx_hal_smartcard.c **** 
 803              		.loc 1 902 0 discriminator 2
 804 02f8 0268     		ldr	r2, [r0]	@ _15, hsc_4(D)->Instance
 891:src/stm32f1xx_hal_smartcard.c ****     hsc->TxXferSize = Size;
 805              		.loc 1 891 0 discriminator 2
 806 02fa 0163     		str	r1, [r0, #48]	@ pData, hsc_4(D)->pTxBuffPtr
 902:src/stm32f1xx_hal_smartcard.c **** 
 807              		.loc 1 902 0 discriminator 2
 808 02fc D168     		ldr	r1, [r2, #12]	@ _16, _15->CR1
 809              	.LVL69:
 899:src/stm32f1xx_hal_smartcard.c **** 
 810              		.loc 1 899 0 discriminator 2
 811 02fe 80F84830 		strb	r3, [r0, #72]	@ tmp129, hsc_4(D)->Lock
 902:src/stm32f1xx_hal_smartcard.c **** 
 812              		.loc 1 902 0 discriminator 2
 813 0302 41F48071 		orr	r1, r1, #256	@ _17, _16,
 814 0306 D160     		str	r1, [r2, #12]	@ _17, _15->CR1
 905:src/stm32f1xx_hal_smartcard.c **** 
 815              		.loc 1 905 0 discriminator 2
 816 0308 5169     		ldr	r1, [r2, #20]	@ _19, _15->CR3
 910:src/stm32f1xx_hal_smartcard.c ****   }
 817              		.loc 1 910 0 discriminator 2
 818 030a 1846     		mov	r0, r3	@ <retval>, tmp129
 819              	.LVL70:
ARM GAS  /tmp/ccvrs2bU.s 			page 59


 905:src/stm32f1xx_hal_smartcard.c **** 
 820              		.loc 1 905 0 discriminator 2
 821 030c 21F00101 		bic	r1, r1, #1	@ _20, _19,
 822 0310 5161     		str	r1, [r2, #20]	@ _20, _15->CR3
 908:src/stm32f1xx_hal_smartcard.c **** 
 823              		.loc 1 908 0 discriminator 2
 824 0312 D168     		ldr	r1, [r2, #12]	@ _22, _15->CR1
 825 0314 41F08001 		orr	r1, r1, #128	@ _23, _22,
 826 0318 D160     		str	r1, [r2, #12]	@ _23, _15->CR1
 910:src/stm32f1xx_hal_smartcard.c ****   }
 827              		.loc 1 910 0 discriminator 2
 828 031a 7047     		bx	lr	@
 829              	.LVL71:
 830              	.L48:
 885:src/stm32f1xx_hal_smartcard.c ****     }
 831              		.loc 1 885 0
 832 031c 0120     		movs	r0, #1	@ <retval>,
 833              	.LVL72:
 834 031e 7047     		bx	lr	@
 835              	.LVL73:
 836              	.L49:
 914:src/stm32f1xx_hal_smartcard.c ****   }
 837              		.loc 1 914 0
 838 0320 0220     		movs	r0, #2	@ <retval>,
 839              	.LVL74:
 916:src/stm32f1xx_hal_smartcard.c **** 
 840              		.loc 1 916 0
 841 0322 7047     		bx	lr	@
 842              		.cfi_endproc
 843              	.LFE71:
 844              		.size	HAL_SMARTCARD_Transmit_IT, .-HAL_SMARTCARD_Transmit_IT
 845              		.align	1
 846              		.global	HAL_SMARTCARD_Receive_IT
 847              		.syntax unified
 848              		.thumb
 849              		.thumb_func
 850              		.fpu softvfp
 851              		.type	HAL_SMARTCARD_Receive_IT, %function
 852              	HAL_SMARTCARD_Receive_IT:
 853              	.LFB72:
 927:src/stm32f1xx_hal_smartcard.c ****   /* Check that a Rx process is not already ongoing */
 854              		.loc 1 927 0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 0
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 858              		@ link register save eliminated.
 859              	.LVL75:
 929:src/stm32f1xx_hal_smartcard.c ****   {
 860              		.loc 1 929 0
 861 0324 90F84A30 		ldrb	r3, [r0, #74]	@ zero_extendqisi2	@ hsc_4(D)->RxState, hsc_4(D)->RxState
 862 0328 202B     		cmp	r3, #32	@ hsc_4(D)->RxState,
 863 032a 1CD1     		bne	.L55	@,
 931:src/stm32f1xx_hal_smartcard.c ****     {
 864              		.loc 1 931 0
 865 032c C9B1     		cbz	r1, .L54	@ pData,
 931:src/stm32f1xx_hal_smartcard.c ****     {
 866              		.loc 1 931 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccvrs2bU.s 			page 60


 867 032e C2B1     		cbz	r2, .L54	@ Size,
 937:src/stm32f1xx_hal_smartcard.c **** 
 868              		.loc 1 937 0 is_stmt 1
 869 0330 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2	@ hsc_4(D)->Lock, hsc_4(D)->Lock
 870 0334 012B     		cmp	r3, #1	@ hsc_4(D)->Lock,
 871 0336 16D0     		beq	.L55	@,
 941:src/stm32f1xx_hal_smartcard.c **** 
 872              		.loc 1 941 0 discriminator 2
 873 0338 C287     		strh	r2, [r0, #62]	@ movhi	@ Size, hsc_4(D)->RxXferCount
 940:src/stm32f1xx_hal_smartcard.c ****     hsc->RxXferCount = Size;
 874              		.loc 1 940 0 discriminator 2
 875 033a 8287     		strh	r2, [r0, #60]	@ movhi	@ Size, hsc_4(D)->RxXferSize
 943:src/stm32f1xx_hal_smartcard.c ****     hsc->RxState = HAL_SMARTCARD_STATE_BUSY_RX;
 876              		.loc 1 943 0 discriminator 2
 877 033c 0023     		movs	r3, #0	@ tmp127,
 944:src/stm32f1xx_hal_smartcard.c **** 
 878              		.loc 1 944 0 discriminator 2
 879 033e 2222     		movs	r2, #34	@ tmp128,
 880              	.LVL76:
 943:src/stm32f1xx_hal_smartcard.c ****     hsc->RxState = HAL_SMARTCARD_STATE_BUSY_RX;
 881              		.loc 1 943 0 discriminator 2
 882 0340 C364     		str	r3, [r0, #76]	@ tmp127, hsc_4(D)->ErrorCode
 883              	.LVL77:
 944:src/stm32f1xx_hal_smartcard.c **** 
 884              		.loc 1 944 0 discriminator 2
 885 0342 80F84A20 		strb	r2, [r0, #74]	@ tmp128, hsc_4(D)->RxState
 950:src/stm32f1xx_hal_smartcard.c **** 
 886              		.loc 1 950 0 discriminator 2
 887 0346 0268     		ldr	r2, [r0]	@ _15, hsc_4(D)->Instance
 939:src/stm32f1xx_hal_smartcard.c ****     hsc->RxXferSize = Size;
 888              		.loc 1 939 0 discriminator 2
 889 0348 8163     		str	r1, [r0, #56]	@ pData, hsc_4(D)->pRxBuffPtr
 950:src/stm32f1xx_hal_smartcard.c **** 
 890              		.loc 1 950 0 discriminator 2
 891 034a D168     		ldr	r1, [r2, #12]	@ _16, _15->CR1
 892              	.LVL78:
 947:src/stm32f1xx_hal_smartcard.c **** 
 893              		.loc 1 947 0 discriminator 2
 894 034c 80F84830 		strb	r3, [r0, #72]	@ tmp127, hsc_4(D)->Lock
 950:src/stm32f1xx_hal_smartcard.c **** 
 895              		.loc 1 950 0 discriminator 2
 896 0350 41F49071 		orr	r1, r1, #288	@ _17, _16,
 897 0354 D160     		str	r1, [r2, #12]	@ _17, _15->CR1
 953:src/stm32f1xx_hal_smartcard.c **** 
 898              		.loc 1 953 0 discriminator 2
 899 0356 5169     		ldr	r1, [r2, #20]	@ _19, _15->CR3
 955:src/stm32f1xx_hal_smartcard.c ****   }
 900              		.loc 1 955 0 discriminator 2
 901 0358 1846     		mov	r0, r3	@ <retval>, tmp127
 902              	.LVL79:
 953:src/stm32f1xx_hal_smartcard.c **** 
 903              		.loc 1 953 0 discriminator 2
 904 035a 41F00101 		orr	r1, r1, #1	@ _20, _19,
 905 035e 5161     		str	r1, [r2, #20]	@ _20, _15->CR3
 955:src/stm32f1xx_hal_smartcard.c ****   }
 906              		.loc 1 955 0 discriminator 2
 907 0360 7047     		bx	lr	@
ARM GAS  /tmp/ccvrs2bU.s 			page 61


 908              	.LVL80:
 909              	.L54:
 933:src/stm32f1xx_hal_smartcard.c ****     }
 910              		.loc 1 933 0
 911 0362 0120     		movs	r0, #1	@ <retval>,
 912              	.LVL81:
 913 0364 7047     		bx	lr	@
 914              	.LVL82:
 915              	.L55:
 959:src/stm32f1xx_hal_smartcard.c ****   }
 916              		.loc 1 959 0
 917 0366 0220     		movs	r0, #2	@ <retval>,
 918              	.LVL83:
 961:src/stm32f1xx_hal_smartcard.c **** 
 919              		.loc 1 961 0
 920 0368 7047     		bx	lr	@
 921              		.cfi_endproc
 922              	.LFE72:
 923              		.size	HAL_SMARTCARD_Receive_IT, .-HAL_SMARTCARD_Receive_IT
 924              		.align	1
 925              		.global	HAL_SMARTCARD_Transmit_DMA
 926              		.syntax unified
 927              		.thumb
 928              		.thumb_func
 929              		.fpu softvfp
 930              		.type	HAL_SMARTCARD_Transmit_DMA, %function
 931              	HAL_SMARTCARD_Transmit_DMA:
 932              	.LFB73:
 972:src/stm32f1xx_hal_smartcard.c ****   uint32_t *tmp;
 933              		.loc 1 972 0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 0
 936              		@ frame_needed = 0, uses_anonymous_args = 0
 937              	.LVL84:
 938 036a 38B5     		push	{r3, r4, r5, lr}	@
 939              	.LCFI5:
 940              		.cfi_def_cfa_offset 16
 941              		.cfi_offset 3, -16
 942              		.cfi_offset 4, -12
 943              		.cfi_offset 5, -8
 944              		.cfi_offset 14, -4
 972:src/stm32f1xx_hal_smartcard.c ****   uint32_t *tmp;
 945              		.loc 1 972 0
 946 036c 0446     		mov	r4, r0	@ hsc, hsc
 947 036e 1346     		mov	r3, r2	@ Size, Size
 976:src/stm32f1xx_hal_smartcard.c ****   {
 948              		.loc 1 976 0
 949 0370 94F84920 		ldrb	r2, [r4, #73]	@ zero_extendqisi2	@ hsc_4(D)->gState, hsc_4(D)->gState
 950              	.LVL85:
 951 0374 202A     		cmp	r2, #32	@ hsc_4(D)->gState,
 952 0376 28D1     		bne	.L61	@,
 978:src/stm32f1xx_hal_smartcard.c ****     {
 953              		.loc 1 978 0
 954 0378 29B3     		cbz	r1, .L60	@ pData,
 978:src/stm32f1xx_hal_smartcard.c ****     {
 955              		.loc 1 978 0 is_stmt 0 discriminator 1
 956 037a 23B3     		cbz	r3, .L60	@ Size,
ARM GAS  /tmp/ccvrs2bU.s 			page 62


 984:src/stm32f1xx_hal_smartcard.c **** 
 957              		.loc 1 984 0 is_stmt 1
 958 037c 94F84820 		ldrb	r2, [r4, #72]	@ zero_extendqisi2	@ hsc_4(D)->Lock, hsc_4(D)->Lock
 959 0380 012A     		cmp	r2, #1	@ hsc_4(D)->Lock,
 960 0382 22D0     		beq	.L61	@,
 984:src/stm32f1xx_hal_smartcard.c **** 
 961              		.loc 1 984 0 is_stmt 0 discriminator 2
 962 0384 0122     		movs	r2, #1	@ tmp129,
 990:src/stm32f1xx_hal_smartcard.c ****     hsc->gState = HAL_SMARTCARD_STATE_BUSY_TX;
 963              		.loc 1 990 0 is_stmt 1 discriminator 2
 964 0386 0025     		movs	r5, #0	@ tmp133,
 984:src/stm32f1xx_hal_smartcard.c **** 
 965              		.loc 1 984 0 discriminator 2
 966 0388 84F84820 		strb	r2, [r4, #72]	@ tmp129, hsc_4(D)->Lock
 991:src/stm32f1xx_hal_smartcard.c **** 
 967              		.loc 1 991 0 discriminator 2
 968 038c 2122     		movs	r2, #33	@ tmp134,
 988:src/stm32f1xx_hal_smartcard.c **** 
 969              		.loc 1 988 0 discriminator 2
 970 038e E386     		strh	r3, [r4, #54]	@ movhi	@ Size, hsc_4(D)->TxXferCount
 994:src/stm32f1xx_hal_smartcard.c **** 
 971              		.loc 1 994 0 discriminator 2
 972 0390 206C     		ldr	r0, [r4, #64]	@ _14, hsc_4(D)->hdmatx
 973              	.LVL86:
 990:src/stm32f1xx_hal_smartcard.c ****     hsc->gState = HAL_SMARTCARD_STATE_BUSY_TX;
 974              		.loc 1 990 0 discriminator 2
 975 0392 E564     		str	r5, [r4, #76]	@ tmp133, hsc_4(D)->ErrorCode
 991:src/stm32f1xx_hal_smartcard.c **** 
 976              		.loc 1 991 0 discriminator 2
 977 0394 84F84920 		strb	r2, [r4, #73]	@ tmp134, hsc_4(D)->gState
 994:src/stm32f1xx_hal_smartcard.c **** 
 978              		.loc 1 994 0 discriminator 2
 979 0398 0D4A     		ldr	r2, .L62	@ tmp136,
 987:src/stm32f1xx_hal_smartcard.c ****     hsc->TxXferCount = Size;
 980              		.loc 1 987 0 discriminator 2
 981 039a A386     		strh	r3, [r4, #52]	@ movhi	@ Size, hsc_4(D)->TxXferSize
 986:src/stm32f1xx_hal_smartcard.c ****     hsc->TxXferSize = Size;
 982              		.loc 1 986 0 discriminator 2
 983 039c 2163     		str	r1, [r4, #48]	@ pData, hsc_4(D)->pTxBuffPtr
 994:src/stm32f1xx_hal_smartcard.c **** 
 984              		.loc 1 994 0 discriminator 2
 985 039e 8262     		str	r2, [r0, #40]	@ tmp136, _14->XferCpltCallback
 997:src/stm32f1xx_hal_smartcard.c **** 
 986              		.loc 1 997 0 discriminator 2
 987 03a0 0C4A     		ldr	r2, .L62+4	@ tmp137,
1000:src/stm32f1xx_hal_smartcard.c **** 
 988              		.loc 1 1000 0 discriminator 2
 989 03a2 4563     		str	r5, [r0, #52]	@ tmp133, _14->XferAbortCallback
 990              	.LVL87:
 997:src/stm32f1xx_hal_smartcard.c **** 
 991              		.loc 1 997 0 discriminator 2
 992 03a4 0263     		str	r2, [r0, #48]	@ tmp137, _14->XferErrorCallback
1004:src/stm32f1xx_hal_smartcard.c **** 
 993              		.loc 1 1004 0 discriminator 2
 994 03a6 2268     		ldr	r2, [r4]	@ hsc_4(D)->Instance, hsc_4(D)->Instance
 995 03a8 0432     		adds	r2, r2, #4	@, hsc_4(D)->Instance,
 996 03aa FFF7FEFF 		bl	HAL_DMA_Start_IT	@
ARM GAS  /tmp/ccvrs2bU.s 			page 63


 997              	.LVL88:
1007:src/stm32f1xx_hal_smartcard.c **** 
 998              		.loc 1 1007 0 discriminator 2
 999 03ae 6FF04002 		mvn	r2, #64	@ tmp141,
 1000 03b2 2368     		ldr	r3, [r4]	@ _24, hsc_4(D)->Instance
1016:src/stm32f1xx_hal_smartcard.c ****   }
 1001              		.loc 1 1016 0 discriminator 2
 1002 03b4 2846     		mov	r0, r5	@ <retval>, tmp133
1007:src/stm32f1xx_hal_smartcard.c **** 
 1003              		.loc 1 1007 0 discriminator 2
 1004 03b6 1A60     		str	r2, [r3]	@ tmp141, _24->SR
1014:src/stm32f1xx_hal_smartcard.c **** 
 1005              		.loc 1 1014 0 discriminator 2
 1006 03b8 5A69     		ldr	r2, [r3, #20]	@ _27, _24->CR3
1010:src/stm32f1xx_hal_smartcard.c **** 
 1007              		.loc 1 1010 0 discriminator 2
 1008 03ba 84F84850 		strb	r5, [r4, #72]	@ tmp133, hsc_4(D)->Lock
1014:src/stm32f1xx_hal_smartcard.c **** 
 1009              		.loc 1 1014 0 discriminator 2
 1010 03be 42F08002 		orr	r2, r2, #128	@ _28, _27,
 1011 03c2 5A61     		str	r2, [r3, #20]	@ _28, _24->CR3
1016:src/stm32f1xx_hal_smartcard.c ****   }
 1012              		.loc 1 1016 0 discriminator 2
 1013 03c4 38BD     		pop	{r3, r4, r5, pc}	@
 1014              	.LVL89:
 1015              	.L60:
 980:src/stm32f1xx_hal_smartcard.c ****     }
 1016              		.loc 1 980 0
 1017 03c6 0120     		movs	r0, #1	@ <retval>,
 1018              	.LVL90:
 1019 03c8 38BD     		pop	{r3, r4, r5, pc}	@
 1020              	.LVL91:
 1021              	.L61:
1020:src/stm32f1xx_hal_smartcard.c ****   }
 1022              		.loc 1 1020 0
 1023 03ca 0220     		movs	r0, #2	@ <retval>,
 1024              	.LVL92:
1022:src/stm32f1xx_hal_smartcard.c **** 
 1025              		.loc 1 1022 0
 1026 03cc 38BD     		pop	{r3, r4, r5, pc}	@
 1027              	.LVL93:
 1028              	.L63:
 1029 03ce 00BF     		.align	2
 1030              	.L62:
 1031 03d0 00000000 		.word	SMARTCARD_DMATransmitCplt
 1032 03d4 00000000 		.word	SMARTCARD_DMAError
 1033              		.cfi_endproc
 1034              	.LFE73:
 1035              		.size	HAL_SMARTCARD_Transmit_DMA, .-HAL_SMARTCARD_Transmit_DMA
 1036              		.align	1
 1037              		.global	HAL_SMARTCARD_Receive_DMA
 1038              		.syntax unified
 1039              		.thumb
 1040              		.thumb_func
 1041              		.fpu softvfp
 1042              		.type	HAL_SMARTCARD_Receive_DMA, %function
 1043              	HAL_SMARTCARD_Receive_DMA:
ARM GAS  /tmp/ccvrs2bU.s 			page 64


 1044              	.LFB74:
1034:src/stm32f1xx_hal_smartcard.c ****   uint32_t *tmp;
 1045              		.loc 1 1034 0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 8
 1048              		@ frame_needed = 0, uses_anonymous_args = 0
 1049              	.LVL94:
 1050 03d8 1346     		mov	r3, r2	@ Size, Size
1038:src/stm32f1xx_hal_smartcard.c ****   {
 1051              		.loc 1 1038 0
 1052 03da 90F84A20 		ldrb	r2, [r0, #74]	@ zero_extendqisi2	@ hsc_4(D)->RxState, hsc_4(D)->RxState
 1053              	.LVL95:
1034:src/stm32f1xx_hal_smartcard.c ****   uint32_t *tmp;
 1054              		.loc 1 1034 0
 1055 03de 73B5     		push	{r0, r1, r4, r5, r6, lr}	@
 1056              	.LCFI6:
 1057              		.cfi_def_cfa_offset 24
 1058              		.cfi_offset 4, -16
 1059              		.cfi_offset 5, -12
 1060              		.cfi_offset 6, -8
 1061              		.cfi_offset 14, -4
1038:src/stm32f1xx_hal_smartcard.c ****   {
 1062              		.loc 1 1038 0
 1063 03e0 202A     		cmp	r2, #32	@ hsc_4(D)->RxState,
1034:src/stm32f1xx_hal_smartcard.c ****   uint32_t *tmp;
 1064              		.loc 1 1034 0
 1065 03e2 0446     		mov	r4, r0	@ hsc, hsc
1038:src/stm32f1xx_hal_smartcard.c ****   {
 1066              		.loc 1 1038 0
 1067 03e4 37D1     		bne	.L69	@,
1040:src/stm32f1xx_hal_smartcard.c ****     {
 1068              		.loc 1 1040 0
 1069 03e6 0029     		cmp	r1, #0	@ pData
 1070 03e8 33D0     		beq	.L68	@
1040:src/stm32f1xx_hal_smartcard.c ****     {
 1071              		.loc 1 1040 0 is_stmt 0 discriminator 1
 1072 03ea 002B     		cmp	r3, #0	@ Size
 1073 03ec 31D0     		beq	.L68	@
1046:src/stm32f1xx_hal_smartcard.c **** 
 1074              		.loc 1 1046 0 is_stmt 1
 1075 03ee 90F84820 		ldrb	r2, [r0, #72]	@ zero_extendqisi2	@ hsc_4(D)->Lock, hsc_4(D)->Lock
 1076 03f2 012A     		cmp	r2, #1	@ hsc_4(D)->Lock,
 1077 03f4 2FD0     		beq	.L69	@,
1046:src/stm32f1xx_hal_smartcard.c **** 
 1078              		.loc 1 1046 0 is_stmt 0 discriminator 2
 1079 03f6 0122     		movs	r2, #1	@ tmp137,
1051:src/stm32f1xx_hal_smartcard.c ****     hsc->RxState = HAL_SMARTCARD_STATE_BUSY_RX;
 1080              		.loc 1 1051 0 is_stmt 1 discriminator 2
 1081 03f8 0025     		movs	r5, #0	@ tmp140,
1046:src/stm32f1xx_hal_smartcard.c **** 
 1082              		.loc 1 1046 0 discriminator 2
 1083 03fa 80F84820 		strb	r2, [r0, #72]	@ tmp137, hsc_4(D)->Lock
1052:src/stm32f1xx_hal_smartcard.c **** 
 1084              		.loc 1 1052 0 discriminator 2
 1085 03fe 2222     		movs	r2, #34	@ tmp141,
1048:src/stm32f1xx_hal_smartcard.c ****     hsc->RxXferSize = Size;
 1086              		.loc 1 1048 0 discriminator 2
ARM GAS  /tmp/ccvrs2bU.s 			page 65


 1087 0400 8163     		str	r1, [r0, #56]	@ pData, hsc_4(D)->pRxBuffPtr
1049:src/stm32f1xx_hal_smartcard.c **** 
 1088              		.loc 1 1049 0 discriminator 2
 1089 0402 8387     		strh	r3, [r0, #60]	@ movhi	@ Size, hsc_4(D)->RxXferSize
1051:src/stm32f1xx_hal_smartcard.c ****     hsc->RxState = HAL_SMARTCARD_STATE_BUSY_RX;
 1090              		.loc 1 1051 0 discriminator 2
 1091 0404 C564     		str	r5, [r0, #76]	@ tmp140, hsc_4(D)->ErrorCode
1052:src/stm32f1xx_hal_smartcard.c **** 
 1092              		.loc 1 1052 0 discriminator 2
 1093 0406 80F84A20 		strb	r2, [r0, #74]	@ tmp141, hsc_4(D)->RxState
1055:src/stm32f1xx_hal_smartcard.c **** 
 1094              		.loc 1 1055 0 discriminator 2
 1095 040a 406C     		ldr	r0, [r0, #68]	@ _13, hsc_4(D)->hdmarx
 1096              	.LVL96:
 1097 040c 134A     		ldr	r2, .L70	@ tmp143,
1065:src/stm32f1xx_hal_smartcard.c **** 
 1098              		.loc 1 1065 0 discriminator 2
 1099 040e 2668     		ldr	r6, [r4]	@ hsc_4(D)->Instance, hsc_4(D)->Instance
1055:src/stm32f1xx_hal_smartcard.c **** 
 1100              		.loc 1 1055 0 discriminator 2
 1101 0410 8262     		str	r2, [r0, #40]	@ tmp143, _13->XferCpltCallback
1058:src/stm32f1xx_hal_smartcard.c **** 
 1102              		.loc 1 1058 0 discriminator 2
 1103 0412 134A     		ldr	r2, .L70+4	@ tmp144,
 1104 0414 0263     		str	r2, [r0, #48]	@ tmp144, _13->XferErrorCallback
1061:src/stm32f1xx_hal_smartcard.c **** 
 1105              		.loc 1 1061 0 discriminator 2
 1106 0416 226C     		ldr	r2, [r4, #64]	@ hsc_4(D)->hdmatx, hsc_4(D)->hdmatx
 1107 0418 5563     		str	r5, [r2, #52]	@ tmp140, _16->XferAbortCallback
 1108              	.LVL97:
1065:src/stm32f1xx_hal_smartcard.c **** 
 1109              		.loc 1 1065 0 discriminator 2
 1110 041a 0A46     		mov	r2, r1	@, pData
 1111 041c 311D     		adds	r1, r6, #4	@, hsc_4(D)->Instance,
 1112              	.LVL98:
 1113 041e FFF7FEFF 		bl	HAL_DMA_Start_IT	@
 1114              	.LVL99:
1083:src/stm32f1xx_hal_smartcard.c ****   }
 1115              		.loc 1 1083 0 discriminator 2
 1116 0422 2846     		mov	r0, r5	@ <retval>, tmp140
 1117              	.LBB14:
1068:src/stm32f1xx_hal_smartcard.c **** 
 1118              		.loc 1 1068 0 discriminator 2
 1119 0424 2368     		ldr	r3, [r4]	@ _25, hsc_4(D)->Instance
 1120 0426 0195     		str	r5, [sp, #4]	@ tmp140, tmpreg
 1121 0428 1A68     		ldr	r2, [r3]	@ tmpreg.2_26, _25->SR
 1122 042a 0192     		str	r2, [sp, #4]	@ tmpreg.2_26, tmpreg
 1123 042c 5A68     		ldr	r2, [r3, #4]	@ tmpreg.3_28, _25->DR
 1124              	.LBE14:
1071:src/stm32f1xx_hal_smartcard.c **** 
 1125              		.loc 1 1071 0 discriminator 2
 1126 042e 84F84850 		strb	r5, [r4, #72]	@ tmp140, hsc_4(D)->Lock
 1127              	.LBB15:
1068:src/stm32f1xx_hal_smartcard.c **** 
 1128              		.loc 1 1068 0 discriminator 2
 1129 0432 0192     		str	r2, [sp, #4]	@ tmpreg.3_28, tmpreg
 1130 0434 019A     		ldr	r2, [sp, #4]	@ vol.4_30, tmpreg
ARM GAS  /tmp/ccvrs2bU.s 			page 66


 1131              	.LBE15:
1074:src/stm32f1xx_hal_smartcard.c **** 
 1132              		.loc 1 1074 0 discriminator 2
 1133 0436 DA68     		ldr	r2, [r3, #12]	@ _32, _25->CR1
 1134 0438 42F48072 		orr	r2, r2, #256	@ _33, _32,
 1135 043c DA60     		str	r2, [r3, #12]	@ _33, _25->CR1
1077:src/stm32f1xx_hal_smartcard.c **** 
 1136              		.loc 1 1077 0 discriminator 2
 1137 043e 5A69     		ldr	r2, [r3, #20]	@ _35, _25->CR3
 1138 0440 42F00102 		orr	r2, r2, #1	@ _36, _35,
 1139 0444 5A61     		str	r2, [r3, #20]	@ _36, _25->CR3
1081:src/stm32f1xx_hal_smartcard.c **** 
 1140              		.loc 1 1081 0 discriminator 2
 1141 0446 5A69     		ldr	r2, [r3, #20]	@ _38, _25->CR3
 1142 0448 42F04002 		orr	r2, r2, #64	@ _39, _38,
 1143 044c 5A61     		str	r2, [r3, #20]	@ _39, _25->CR3
 1144              	.LVL100:
 1145              	.L65:
1089:src/stm32f1xx_hal_smartcard.c **** 
 1146              		.loc 1 1089 0
 1147 044e 02B0     		add	sp, sp, #8	@,,
 1148              	.LCFI7:
 1149              		.cfi_remember_state
 1150              		.cfi_def_cfa_offset 16
 1151              		@ sp needed	@
 1152 0450 70BD     		pop	{r4, r5, r6, pc}	@
 1153              	.LVL101:
 1154              	.L68:
 1155              	.LCFI8:
 1156              		.cfi_restore_state
1042:src/stm32f1xx_hal_smartcard.c ****     }
 1157              		.loc 1 1042 0
 1158 0452 0120     		movs	r0, #1	@ <retval>,
 1159              	.LVL102:
 1160 0454 FBE7     		b	.L65	@
 1161              	.LVL103:
 1162              	.L69:
1087:src/stm32f1xx_hal_smartcard.c ****   }
 1163              		.loc 1 1087 0
 1164 0456 0220     		movs	r0, #2	@ <retval>,
 1165              	.LVL104:
 1166 0458 F9E7     		b	.L65	@
 1167              	.L71:
 1168 045a 00BF     		.align	2
 1169              	.L70:
 1170 045c 00000000 		.word	SMARTCARD_DMAReceiveCplt
 1171 0460 00000000 		.word	SMARTCARD_DMAError
 1172              		.cfi_endproc
 1173              	.LFE74:
 1174              		.size	HAL_SMARTCARD_Receive_DMA, .-HAL_SMARTCARD_Receive_DMA
 1175              		.align	1
 1176              		.global	HAL_SMARTCARD_Abort
 1177              		.syntax unified
 1178              		.thumb
 1179              		.thumb_func
 1180              		.fpu softvfp
 1181              		.type	HAL_SMARTCARD_Abort, %function
ARM GAS  /tmp/ccvrs2bU.s 			page 67


 1182              	HAL_SMARTCARD_Abort:
 1183              	.LFB75:
1104:src/stm32f1xx_hal_smartcard.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1184              		.loc 1 1104 0
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 0
 1187              		@ frame_needed = 0, uses_anonymous_args = 0
 1188              	.LVL105:
1106:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 1189              		.loc 1 1106 0
 1190 0464 0368     		ldr	r3, [r0]	@ _5, hsc_4(D)->Instance
1104:src/stm32f1xx_hal_smartcard.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1191              		.loc 1 1104 0
 1192 0466 10B5     		push	{r4, lr}	@
 1193              	.LCFI9:
 1194              		.cfi_def_cfa_offset 8
 1195              		.cfi_offset 4, -8
 1196              		.cfi_offset 14, -4
1106:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 1197              		.loc 1 1106 0
 1198 0468 DA68     		ldr	r2, [r3, #12]	@ _6, _5->CR1
1104:src/stm32f1xx_hal_smartcard.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1199              		.loc 1 1104 0
 1200 046a 0446     		mov	r4, r0	@ hsc, hsc
1106:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 1201              		.loc 1 1106 0
 1202 046c 22F4F072 		bic	r2, r2, #480	@ _7, _6,
 1203 0470 DA60     		str	r2, [r3, #12]	@ _7, _5->CR1
1107:src/stm32f1xx_hal_smartcard.c **** 
 1204              		.loc 1 1107 0
 1205 0472 5A69     		ldr	r2, [r3, #20]	@ _9, _5->CR3
 1206 0474 22F00102 		bic	r2, r2, #1	@ _10, _9,
 1207 0478 5A61     		str	r2, [r3, #20]	@ _10, _5->CR3
1110:src/stm32f1xx_hal_smartcard.c ****   {
 1208              		.loc 1 1110 0
 1209 047a 5A69     		ldr	r2, [r3, #20]	@ _12, _5->CR3
 1210 047c 1106     		lsls	r1, r2, #24	@, _12,
 1211 047e 09D5     		bpl	.L74	@,
1112:src/stm32f1xx_hal_smartcard.c **** 
 1212              		.loc 1 1112 0
 1213 0480 5A69     		ldr	r2, [r3, #20]	@ _14, _5->CR3
1115:src/stm32f1xx_hal_smartcard.c ****     {
 1214              		.loc 1 1115 0
 1215 0482 006C     		ldr	r0, [r0, #64]	@ _17, hsc_4(D)->hdmatx
 1216              	.LVL106:
1112:src/stm32f1xx_hal_smartcard.c **** 
 1217              		.loc 1 1112 0
 1218 0484 22F08002 		bic	r2, r2, #128	@ _15, _14,
 1219 0488 5A61     		str	r2, [r3, #20]	@ _15, _5->CR3
1115:src/stm32f1xx_hal_smartcard.c ****     {
 1220              		.loc 1 1115 0
 1221 048a 18B1     		cbz	r0, .L74	@ _17,
1119:src/stm32f1xx_hal_smartcard.c **** 
 1222              		.loc 1 1119 0
 1223 048c 0023     		movs	r3, #0	@ tmp129,
 1224 048e 4363     		str	r3, [r0, #52]	@ tmp129, _17->XferAbortCallback
1121:src/stm32f1xx_hal_smartcard.c ****     }
ARM GAS  /tmp/ccvrs2bU.s 			page 68


 1225              		.loc 1 1121 0
 1226 0490 FFF7FEFF 		bl	HAL_DMA_Abort	@
 1227              	.LVL107:
 1228              	.L74:
1126:src/stm32f1xx_hal_smartcard.c ****   {
 1229              		.loc 1 1126 0
 1230 0494 2368     		ldr	r3, [r4]	@ _20, hsc_4(D)->Instance
 1231 0496 5A69     		ldr	r2, [r3, #20]	@ _21, _20->CR3
 1232 0498 5206     		lsls	r2, r2, #25	@, _21,
 1233 049a 09D5     		bpl	.L77	@,
1128:src/stm32f1xx_hal_smartcard.c **** 
 1234              		.loc 1 1128 0
 1235 049c 5A69     		ldr	r2, [r3, #20]	@ _23, _20->CR3
1131:src/stm32f1xx_hal_smartcard.c ****     {
 1236              		.loc 1 1131 0
 1237 049e 606C     		ldr	r0, [r4, #68]	@ _26, hsc_4(D)->hdmarx
1128:src/stm32f1xx_hal_smartcard.c **** 
 1238              		.loc 1 1128 0
 1239 04a0 22F04002 		bic	r2, r2, #64	@ _24, _23,
 1240 04a4 5A61     		str	r2, [r3, #20]	@ _24, _20->CR3
1131:src/stm32f1xx_hal_smartcard.c ****     {
 1241              		.loc 1 1131 0
 1242 04a6 18B1     		cbz	r0, .L77	@ _26,
1135:src/stm32f1xx_hal_smartcard.c **** 
 1243              		.loc 1 1135 0
 1244 04a8 0023     		movs	r3, #0	@ tmp131,
 1245 04aa 4363     		str	r3, [r0, #52]	@ tmp131, _26->XferAbortCallback
1137:src/stm32f1xx_hal_smartcard.c ****     }
 1246              		.loc 1 1137 0
 1247 04ac FFF7FEFF 		bl	HAL_DMA_Abort	@
 1248              	.LVL108:
 1249              	.L77:
1142:src/stm32f1xx_hal_smartcard.c ****   hsc->RxXferCount = 0x00U;
 1250              		.loc 1 1142 0
 1251 04b0 0020     		movs	r0, #0	@ tmp133,
1149:src/stm32f1xx_hal_smartcard.c ****   hsc->gState = HAL_SMARTCARD_STATE_READY;
 1252              		.loc 1 1149 0
 1253 04b2 2023     		movs	r3, #32	@ tmp137,
1142:src/stm32f1xx_hal_smartcard.c ****   hsc->RxXferCount = 0x00U;
 1254              		.loc 1 1142 0
 1255 04b4 E086     		strh	r0, [r4, #54]	@ movhi	@ tmp133, hsc_4(D)->TxXferCount
1143:src/stm32f1xx_hal_smartcard.c **** 
 1256              		.loc 1 1143 0
 1257 04b6 E087     		strh	r0, [r4, #62]	@ movhi	@ tmp133, hsc_4(D)->RxXferCount
1146:src/stm32f1xx_hal_smartcard.c **** 
 1258              		.loc 1 1146 0
 1259 04b8 E064     		str	r0, [r4, #76]	@ tmp133, hsc_4(D)->ErrorCode
1149:src/stm32f1xx_hal_smartcard.c ****   hsc->gState = HAL_SMARTCARD_STATE_READY;
 1260              		.loc 1 1149 0
 1261 04ba 84F84A30 		strb	r3, [r4, #74]	@ tmp137, hsc_4(D)->RxState
1150:src/stm32f1xx_hal_smartcard.c **** 
 1262              		.loc 1 1150 0
 1263 04be 84F84930 		strb	r3, [r4, #73]	@ tmp137, hsc_4(D)->gState
1153:src/stm32f1xx_hal_smartcard.c **** 
 1264              		.loc 1 1153 0
 1265 04c2 10BD     		pop	{r4, pc}	@
 1266              		.cfi_endproc
ARM GAS  /tmp/ccvrs2bU.s 			page 69


 1267              	.LFE75:
 1268              		.size	HAL_SMARTCARD_Abort, .-HAL_SMARTCARD_Abort
 1269              		.align	1
 1270              		.global	HAL_SMARTCARD_AbortTransmit
 1271              		.syntax unified
 1272              		.thumb
 1273              		.thumb_func
 1274              		.fpu softvfp
 1275              		.type	HAL_SMARTCARD_AbortTransmit, %function
 1276              	HAL_SMARTCARD_AbortTransmit:
 1277              	.LFB76:
1168:src/stm32f1xx_hal_smartcard.c ****   /* Disable TXEIE and TCIE interrupts */
 1278              		.loc 1 1168 0
 1279              		.cfi_startproc
 1280              		@ args = 0, pretend = 0, frame = 0
 1281              		@ frame_needed = 0, uses_anonymous_args = 0
 1282              	.LVL109:
1170:src/stm32f1xx_hal_smartcard.c **** 
 1283              		.loc 1 1170 0
 1284 04c4 0368     		ldr	r3, [r0]	@ _4, hsc_3(D)->Instance
1168:src/stm32f1xx_hal_smartcard.c ****   /* Disable TXEIE and TCIE interrupts */
 1285              		.loc 1 1168 0
 1286 04c6 10B5     		push	{r4, lr}	@
 1287              	.LCFI10:
 1288              		.cfi_def_cfa_offset 8
 1289              		.cfi_offset 4, -8
 1290              		.cfi_offset 14, -4
1170:src/stm32f1xx_hal_smartcard.c **** 
 1291              		.loc 1 1170 0
 1292 04c8 DA68     		ldr	r2, [r3, #12]	@ _5, _4->CR1
1168:src/stm32f1xx_hal_smartcard.c ****   /* Disable TXEIE and TCIE interrupts */
 1293              		.loc 1 1168 0
 1294 04ca 0446     		mov	r4, r0	@ hsc, hsc
1170:src/stm32f1xx_hal_smartcard.c **** 
 1295              		.loc 1 1170 0
 1296 04cc 22F0C002 		bic	r2, r2, #192	@ _6, _5,
 1297 04d0 DA60     		str	r2, [r3, #12]	@ _6, _4->CR1
1173:src/stm32f1xx_hal_smartcard.c ****   {
 1298              		.loc 1 1173 0
 1299 04d2 5A69     		ldr	r2, [r3, #20]	@ _8, _4->CR3
 1300 04d4 1206     		lsls	r2, r2, #24	@, _8,
 1301 04d6 09D5     		bpl	.L87	@,
1175:src/stm32f1xx_hal_smartcard.c **** 
 1302              		.loc 1 1175 0
 1303 04d8 5A69     		ldr	r2, [r3, #20]	@ _10, _4->CR3
1178:src/stm32f1xx_hal_smartcard.c ****     {
 1304              		.loc 1 1178 0
 1305 04da 006C     		ldr	r0, [r0, #64]	@ _13, hsc_3(D)->hdmatx
 1306              	.LVL110:
1175:src/stm32f1xx_hal_smartcard.c **** 
 1307              		.loc 1 1175 0
 1308 04dc 22F08002 		bic	r2, r2, #128	@ _11, _10,
 1309 04e0 5A61     		str	r2, [r3, #20]	@ _11, _4->CR3
1178:src/stm32f1xx_hal_smartcard.c ****     {
 1310              		.loc 1 1178 0
 1311 04e2 18B1     		cbz	r0, .L87	@ _13,
1182:src/stm32f1xx_hal_smartcard.c **** 
ARM GAS  /tmp/ccvrs2bU.s 			page 70


 1312              		.loc 1 1182 0
 1313 04e4 0023     		movs	r3, #0	@ tmp121,
 1314 04e6 4363     		str	r3, [r0, #52]	@ tmp121, _13->XferAbortCallback
1184:src/stm32f1xx_hal_smartcard.c ****     }
 1315              		.loc 1 1184 0
 1316 04e8 FFF7FEFF 		bl	HAL_DMA_Abort	@
 1317              	.LVL111:
 1318              	.L87:
1189:src/stm32f1xx_hal_smartcard.c **** 
 1319              		.loc 1 1189 0
 1320 04ec 0020     		movs	r0, #0	@ tmp123,
1192:src/stm32f1xx_hal_smartcard.c **** 
 1321              		.loc 1 1192 0
 1322 04ee 2023     		movs	r3, #32	@ tmp124,
1189:src/stm32f1xx_hal_smartcard.c **** 
 1323              		.loc 1 1189 0
 1324 04f0 E086     		strh	r0, [r4, #54]	@ movhi	@ tmp123, hsc_3(D)->TxXferCount
1192:src/stm32f1xx_hal_smartcard.c **** 
 1325              		.loc 1 1192 0
 1326 04f2 84F84930 		strb	r3, [r4, #73]	@ tmp124, hsc_3(D)->gState
1195:src/stm32f1xx_hal_smartcard.c **** 
 1327              		.loc 1 1195 0
 1328 04f6 10BD     		pop	{r4, pc}	@
 1329              		.cfi_endproc
 1330              	.LFE76:
 1331              		.size	HAL_SMARTCARD_AbortTransmit, .-HAL_SMARTCARD_AbortTransmit
 1332              		.align	1
 1333              		.global	HAL_SMARTCARD_AbortReceive
 1334              		.syntax unified
 1335              		.thumb
 1336              		.thumb_func
 1337              		.fpu softvfp
 1338              		.type	HAL_SMARTCARD_AbortReceive, %function
 1339              	HAL_SMARTCARD_AbortReceive:
 1340              	.LFB77:
1210:src/stm32f1xx_hal_smartcard.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1341              		.loc 1 1210 0
 1342              		.cfi_startproc
 1343              		@ args = 0, pretend = 0, frame = 0
 1344              		@ frame_needed = 0, uses_anonymous_args = 0
 1345              	.LVL112:
1212:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 1346              		.loc 1 1212 0
 1347 04f8 0368     		ldr	r3, [r0]	@ _4, hsc_3(D)->Instance
1210:src/stm32f1xx_hal_smartcard.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1348              		.loc 1 1210 0
 1349 04fa 10B5     		push	{r4, lr}	@
 1350              	.LCFI11:
 1351              		.cfi_def_cfa_offset 8
 1352              		.cfi_offset 4, -8
 1353              		.cfi_offset 14, -4
1212:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 1354              		.loc 1 1212 0
 1355 04fc DA68     		ldr	r2, [r3, #12]	@ _5, _4->CR1
1210:src/stm32f1xx_hal_smartcard.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1356              		.loc 1 1210 0
 1357 04fe 0446     		mov	r4, r0	@ hsc, hsc
ARM GAS  /tmp/ccvrs2bU.s 			page 71


1212:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 1358              		.loc 1 1212 0
 1359 0500 22F49072 		bic	r2, r2, #288	@ _6, _5,
 1360 0504 DA60     		str	r2, [r3, #12]	@ _6, _4->CR1
1213:src/stm32f1xx_hal_smartcard.c **** 
 1361              		.loc 1 1213 0
 1362 0506 5A69     		ldr	r2, [r3, #20]	@ _8, _4->CR3
 1363 0508 22F00102 		bic	r2, r2, #1	@ _9, _8,
 1364 050c 5A61     		str	r2, [r3, #20]	@ _9, _4->CR3
1216:src/stm32f1xx_hal_smartcard.c ****   {
 1365              		.loc 1 1216 0
 1366 050e 5A69     		ldr	r2, [r3, #20]	@ _11, _4->CR3
 1367 0510 5206     		lsls	r2, r2, #25	@, _11,
 1368 0512 09D5     		bpl	.L94	@,
1218:src/stm32f1xx_hal_smartcard.c **** 
 1369              		.loc 1 1218 0
 1370 0514 5A69     		ldr	r2, [r3, #20]	@ _13, _4->CR3
1221:src/stm32f1xx_hal_smartcard.c ****     {
 1371              		.loc 1 1221 0
 1372 0516 406C     		ldr	r0, [r0, #68]	@ _16, hsc_3(D)->hdmarx
 1373              	.LVL113:
1218:src/stm32f1xx_hal_smartcard.c **** 
 1374              		.loc 1 1218 0
 1375 0518 22F04002 		bic	r2, r2, #64	@ _14, _13,
 1376 051c 5A61     		str	r2, [r3, #20]	@ _14, _4->CR3
1221:src/stm32f1xx_hal_smartcard.c ****     {
 1377              		.loc 1 1221 0
 1378 051e 18B1     		cbz	r0, .L94	@ _16,
1225:src/stm32f1xx_hal_smartcard.c **** 
 1379              		.loc 1 1225 0
 1380 0520 0023     		movs	r3, #0	@ tmp123,
 1381 0522 4363     		str	r3, [r0, #52]	@ tmp123, _16->XferAbortCallback
1227:src/stm32f1xx_hal_smartcard.c ****     }
 1382              		.loc 1 1227 0
 1383 0524 FFF7FEFF 		bl	HAL_DMA_Abort	@
 1384              	.LVL114:
 1385              	.L94:
1232:src/stm32f1xx_hal_smartcard.c **** 
 1386              		.loc 1 1232 0
 1387 0528 0020     		movs	r0, #0	@ tmp125,
1235:src/stm32f1xx_hal_smartcard.c **** 
 1388              		.loc 1 1235 0
 1389 052a 2023     		movs	r3, #32	@ tmp126,
1232:src/stm32f1xx_hal_smartcard.c **** 
 1390              		.loc 1 1232 0
 1391 052c E087     		strh	r0, [r4, #62]	@ movhi	@ tmp125, hsc_3(D)->RxXferCount
1235:src/stm32f1xx_hal_smartcard.c **** 
 1392              		.loc 1 1235 0
 1393 052e 84F84A30 		strb	r3, [r4, #74]	@ tmp126, hsc_3(D)->RxState
1238:src/stm32f1xx_hal_smartcard.c **** 
 1394              		.loc 1 1238 0
 1395 0532 10BD     		pop	{r4, pc}	@
 1396              		.cfi_endproc
 1397              	.LFE77:
 1398              		.size	HAL_SMARTCARD_AbortReceive, .-HAL_SMARTCARD_AbortReceive
 1399              		.align	1
 1400              		.weak	HAL_SMARTCARD_TxCpltCallback
ARM GAS  /tmp/ccvrs2bU.s 			page 72


 1401              		.syntax unified
 1402              		.thumb
 1403              		.thumb_func
 1404              		.fpu softvfp
 1405              		.type	HAL_SMARTCARD_TxCpltCallback, %function
 1406              	HAL_SMARTCARD_TxCpltCallback:
 1407              	.LFB116:
 1408              		.cfi_startproc
 1409              		@ args = 0, pretend = 0, frame = 0
 1410              		@ frame_needed = 0, uses_anonymous_args = 0
 1411              		@ link register save eliminated.
 1412 0534 7047     		bx	lr	@
 1413              		.cfi_endproc
 1414              	.LFE116:
 1415              		.size	HAL_SMARTCARD_TxCpltCallback, .-HAL_SMARTCARD_TxCpltCallback
 1416              		.align	1
 1417              		.weak	HAL_SMARTCARD_RxCpltCallback
 1418              		.syntax unified
 1419              		.thumb
 1420              		.thumb_func
 1421              		.fpu softvfp
 1422              		.type	HAL_SMARTCARD_RxCpltCallback, %function
 1423              	HAL_SMARTCARD_RxCpltCallback:
 1424              	.LFB114:
 1425              		.cfi_startproc
 1426              		@ args = 0, pretend = 0, frame = 0
 1427              		@ frame_needed = 0, uses_anonymous_args = 0
 1428              		@ link register save eliminated.
 1429 0536 7047     		bx	lr	@
 1430              		.cfi_endproc
 1431              	.LFE114:
 1432              		.size	HAL_SMARTCARD_RxCpltCallback, .-HAL_SMARTCARD_RxCpltCallback
 1433              		.align	1
 1434              		.syntax unified
 1435              		.thumb
 1436              		.thumb_func
 1437              		.fpu softvfp
 1438              		.type	SMARTCARD_DMAReceiveCplt, %function
 1439              	SMARTCARD_DMAReceiveCplt:
 1440              	.LFB91:
1860:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1441              		.loc 1 1860 0
 1442              		.cfi_startproc
 1443              		@ args = 0, pretend = 0, frame = 0
 1444              		@ frame_needed = 0, uses_anonymous_args = 0
 1445              	.LVL115:
1860:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1446              		.loc 1 1860 0
 1447 0538 08B5     		push	{r3, lr}	@
 1448              	.LCFI12:
 1449              		.cfi_def_cfa_offset 8
 1450              		.cfi_offset 3, -8
 1451              		.cfi_offset 14, -4
1863:src/stm32f1xx_hal_smartcard.c **** 
 1452              		.loc 1 1863 0
 1453 053a 0023     		movs	r3, #0	@ tmp120,
1861:src/stm32f1xx_hal_smartcard.c **** 
ARM GAS  /tmp/ccvrs2bU.s 			page 73


 1454              		.loc 1 1861 0
 1455 053c 406A     		ldr	r0, [r0, #36]	@ hsc, hdma_2(D)->Parent
 1456              	.LVL116:
1863:src/stm32f1xx_hal_smartcard.c **** 
 1457              		.loc 1 1863 0
 1458 053e C387     		strh	r3, [r0, #62]	@ movhi	@ tmp120, hsc_3->RxXferCount
1866:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 1459              		.loc 1 1866 0
 1460 0540 0368     		ldr	r3, [r0]	@ _5, hsc_3->Instance
 1461 0542 DA68     		ldr	r2, [r3, #12]	@ _6, _5->CR1
 1462 0544 22F49072 		bic	r2, r2, #288	@ _7, _6,
 1463 0548 DA60     		str	r2, [r3, #12]	@ _7, _5->CR1
1867:src/stm32f1xx_hal_smartcard.c **** 
 1464              		.loc 1 1867 0
 1465 054a 5A69     		ldr	r2, [r3, #20]	@ _9, _5->CR3
 1466 054c 22F00102 		bic	r2, r2, #1	@ _10, _9,
 1467 0550 5A61     		str	r2, [r3, #20]	@ _10, _5->CR3
1871:src/stm32f1xx_hal_smartcard.c **** 
 1468              		.loc 1 1871 0
 1469 0552 5A69     		ldr	r2, [r3, #20]	@ _12, _5->CR3
 1470 0554 22F04002 		bic	r2, r2, #64	@ _13, _12,
 1471 0558 5A61     		str	r2, [r3, #20]	@ _13, _5->CR3
1874:src/stm32f1xx_hal_smartcard.c **** 
 1472              		.loc 1 1874 0
 1473 055a 2023     		movs	r3, #32	@ tmp121,
 1474 055c 80F84A30 		strb	r3, [r0, #74]	@ tmp121, hsc_3->RxState
1881:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
 1475              		.loc 1 1881 0
 1476 0560 FFF7FEFF 		bl	HAL_SMARTCARD_RxCpltCallback	@
 1477              	.LVL117:
 1478 0564 08BD     		pop	{r3, pc}	@
 1479              		.cfi_endproc
 1480              	.LFE91:
 1481              		.size	SMARTCARD_DMAReceiveCplt, .-SMARTCARD_DMAReceiveCplt
 1482              		.align	1
 1483              		.syntax unified
 1484              		.thumb
 1485              		.thumb_func
 1486              		.fpu softvfp
 1487              		.type	SMARTCARD_Receive_IT, %function
 1488              	SMARTCARD_Receive_IT:
 1489              	.LFB98:
2060:src/stm32f1xx_hal_smartcard.c ****   uint16_t* tmp;
 1490              		.loc 1 2060 0
 1491              		.cfi_startproc
 1492              		@ args = 0, pretend = 0, frame = 0
 1493              		@ frame_needed = 0, uses_anonymous_args = 0
 1494              	.LVL118:
2064:src/stm32f1xx_hal_smartcard.c ****   {
 1495              		.loc 1 2064 0
 1496 0566 90F84A20 		ldrb	r2, [r0, #74]	@ zero_extendqisi2	@ hsc_3(D)->RxState, hsc_3(D)->RxState
2060:src/stm32f1xx_hal_smartcard.c ****   uint16_t* tmp;
 1497              		.loc 1 2060 0
 1498 056a 10B5     		push	{r4, lr}	@
 1499              	.LCFI13:
 1500              		.cfi_def_cfa_offset 8
 1501              		.cfi_offset 4, -8
ARM GAS  /tmp/ccvrs2bU.s 			page 74


 1502              		.cfi_offset 14, -4
2064:src/stm32f1xx_hal_smartcard.c ****   {
 1503              		.loc 1 2064 0
 1504 056c 222A     		cmp	r2, #34	@ hsc_3(D)->RxState,
 1505 056e 1ED1     		bne	.L104	@,
 1506              	.LVL119:
 1507              	.LBB18:
 1508              	.LBB19:
2067:src/stm32f1xx_hal_smartcard.c ****     hsc->pRxBuffPtr += 1U;
 1509              		.loc 1 2067 0
 1510 0570 0268     		ldr	r2, [r0]	@ _9, hsc_3(D)->Instance
 1511 0572 816B     		ldr	r1, [r0, #56]	@ tmp132, hsc_3(D)->pRxBuffPtr
 1512 0574 5468     		ldr	r4, [r2, #4]	@ _10, _9->DR
 1513 0576 E4B2     		uxtb	r4, r4	@ _10, _10
 1514 0578 21F8014B 		strh	r4, [r1], #1	@ movhi	@ _10, *tmp_8
2070:src/stm32f1xx_hal_smartcard.c ****     {
 1515              		.loc 1 2070 0
 1516 057c C48F     		ldrh	r4, [r0, #62]	@, hsc_3(D)->RxXferCount
2068:src/stm32f1xx_hal_smartcard.c **** 
 1517              		.loc 1 2068 0
 1518 057e 8163     		str	r1, [r0, #56]	@ tmp132, hsc_3(D)->pRxBuffPtr
 1519              	.LVL120:
2070:src/stm32f1xx_hal_smartcard.c ****     {
 1520              		.loc 1 2070 0
 1521 0580 013C     		subs	r4, r4, #1	@ tmp135, hsc_3(D)->RxXferCount,
 1522 0582 A4B2     		uxth	r4, r4	@ _15, tmp135
 1523 0584 C487     		strh	r4, [r0, #62]	@ movhi	@ _15, hsc_3(D)->RxXferCount
 1524 0586 84B9     		cbnz	r4, .L105	@ _15,
2072:src/stm32f1xx_hal_smartcard.c **** 
 1525              		.loc 1 2072 0
 1526 0588 D168     		ldr	r1, [r2, #12]	@ _16, _9->CR1
 1527              	.LVL121:
 1528 058a 21F02001 		bic	r1, r1, #32	@ _17, _16,
 1529 058e D160     		str	r1, [r2, #12]	@ _17, _9->CR1
2075:src/stm32f1xx_hal_smartcard.c **** 
 1530              		.loc 1 2075 0
 1531 0590 D168     		ldr	r1, [r2, #12]	@ _18, _9->CR1
 1532 0592 21F48071 		bic	r1, r1, #256	@ _19, _18,
 1533 0596 D160     		str	r1, [r2, #12]	@ _19, _9->CR1
2078:src/stm32f1xx_hal_smartcard.c **** 
 1534              		.loc 1 2078 0
 1535 0598 5169     		ldr	r1, [r2, #20]	@ _20, _9->CR3
 1536 059a 21F00101 		bic	r1, r1, #1	@ _21, _20,
 1537 059e 5161     		str	r1, [r2, #20]	@ _21, _9->CR3
2081:src/stm32f1xx_hal_smartcard.c **** 
 1538              		.loc 1 2081 0
 1539 05a0 2022     		movs	r2, #32	@ tmp137,
 1540 05a2 80F84A20 		strb	r2, [r0, #74]	@ tmp137, hsc_3(D)->RxState
2088:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
 1541              		.loc 1 2088 0
 1542 05a6 FFF7FEFF 		bl	HAL_SMARTCARD_RxCpltCallback	@
 1543              	.LVL122:
 1544              	.L105:
2070:src/stm32f1xx_hal_smartcard.c ****     {
 1545              		.loc 1 2070 0
 1546 05aa 0020     		movs	r0, #0	@ <retval>,
 1547              	.LBE19:
ARM GAS  /tmp/ccvrs2bU.s 			page 75


 1548              	.LBE18:
2099:src/stm32f1xx_hal_smartcard.c **** 
 1549              		.loc 1 2099 0
 1550 05ac 10BD     		pop	{r4, pc}	@
 1551              	.LVL123:
 1552              	.L104:
2097:src/stm32f1xx_hal_smartcard.c ****   }
 1553              		.loc 1 2097 0
 1554 05ae 0220     		movs	r0, #2	@ <retval>,
 1555              	.LVL124:
 1556 05b0 10BD     		pop	{r4, pc}	@
 1557              		.cfi_endproc
 1558              	.LFE98:
 1559              		.size	SMARTCARD_Receive_IT, .-SMARTCARD_Receive_IT
 1560              		.align	1
 1561              		.weak	HAL_SMARTCARD_ErrorCallback
 1562              		.syntax unified
 1563              		.thumb
 1564              		.thumb_func
 1565              		.fpu softvfp
 1566              		.type	HAL_SMARTCARD_ErrorCallback, %function
 1567              	HAL_SMARTCARD_ErrorCallback:
 1568              	.LFB112:
 1569              		.cfi_startproc
 1570              		@ args = 0, pretend = 0, frame = 0
 1571              		@ frame_needed = 0, uses_anonymous_args = 0
 1572              		@ link register save eliminated.
 1573 05b2 7047     		bx	lr	@
 1574              		.cfi_endproc
 1575              	.LFE112:
 1576              		.size	HAL_SMARTCARD_ErrorCallback, .-HAL_SMARTCARD_ErrorCallback
 1577              		.align	1
 1578              		.syntax unified
 1579              		.thumb
 1580              		.thumb_func
 1581              		.fpu softvfp
 1582              		.type	SMARTCARD_DMAError, %function
 1583              	SMARTCARD_DMAError:
 1584              	.LFB92:
1892:src/stm32f1xx_hal_smartcard.c ****   uint32_t dmarequest = 0x00U;
 1585              		.loc 1 1892 0
 1586              		.cfi_startproc
 1587              		@ args = 0, pretend = 0, frame = 0
 1588              		@ frame_needed = 0, uses_anonymous_args = 0
 1589              	.LVL125:
1892:src/stm32f1xx_hal_smartcard.c ****   uint32_t dmarequest = 0x00U;
 1590              		.loc 1 1892 0
 1591 05b4 08B5     		push	{r3, lr}	@
 1592              	.LCFI14:
 1593              		.cfi_def_cfa_offset 8
 1594              		.cfi_offset 3, -8
 1595              		.cfi_offset 14, -4
1895:src/stm32f1xx_hal_smartcard.c ****   hsc->TxXferCount = 0U;
 1596              		.loc 1 1895 0
 1597 05b6 0023     		movs	r3, #0	@ tmp126,
1894:src/stm32f1xx_hal_smartcard.c ****   hsc->RxXferCount = 0U;
 1598              		.loc 1 1894 0
ARM GAS  /tmp/ccvrs2bU.s 			page 76


 1599 05b8 406A     		ldr	r0, [r0, #36]	@ hsc, hdma_4(D)->Parent
 1600              	.LVL126:
1895:src/stm32f1xx_hal_smartcard.c ****   hsc->TxXferCount = 0U;
 1601              		.loc 1 1895 0
 1602 05ba C387     		strh	r3, [r0, #62]	@ movhi	@ tmp126, hsc_5->RxXferCount
1896:src/stm32f1xx_hal_smartcard.c ****   hsc->ErrorCode = HAL_SMARTCARD_ERROR_DMA;
 1603              		.loc 1 1896 0
 1604 05bc C386     		strh	r3, [r0, #54]	@ movhi	@ tmp126, hsc_5->TxXferCount
1897:src/stm32f1xx_hal_smartcard.c **** 
 1605              		.loc 1 1897 0
 1606 05be 1023     		movs	r3, #16	@ tmp129,
 1607 05c0 C364     		str	r3, [r0, #76]	@ tmp129, hsc_5->ErrorCode
1900:src/stm32f1xx_hal_smartcard.c ****   if((hsc->gState == HAL_SMARTCARD_STATE_BUSY_TX) && dmarequest)
 1608              		.loc 1 1900 0
 1609 05c2 0368     		ldr	r3, [r0]	@ _9, hsc_5->Instance
 1610 05c4 5A69     		ldr	r2, [r3, #20]	@ _10, _9->CR3
 1611              	.LVL127:
1901:src/stm32f1xx_hal_smartcard.c ****   {
 1612              		.loc 1 1901 0
 1613 05c6 90F84910 		ldrb	r1, [r0, #73]	@ zero_extendqisi2	@ hsc_5->gState, hsc_5->gState
 1614 05ca 2129     		cmp	r1, #33	@ hsc_5->gState,
 1615 05cc 08D1     		bne	.L108	@,
1901:src/stm32f1xx_hal_smartcard.c ****   {
 1616              		.loc 1 1901 0 is_stmt 0 discriminator 1
 1617 05ce 1106     		lsls	r1, r2, #24	@, _10,
 1618 05d0 06D5     		bpl	.L108	@,
 1619              	.LVL128:
 1620              	.LBB24:
 1621              	.LBB25:
1968:src/stm32f1xx_hal_smartcard.c **** 
 1622              		.loc 1 1968 0 is_stmt 1
 1623 05d2 2022     		movs	r2, #32	@ tmp134,
 1624              	.LVL129:
 1625 05d4 80F84920 		strb	r2, [r0, #73]	@ tmp134, hsc_5->gState
1971:src/stm32f1xx_hal_smartcard.c **** }
 1626              		.loc 1 1971 0
 1627 05d8 DA68     		ldr	r2, [r3, #12]	@ _21, _9->CR1
 1628 05da 22F0C002 		bic	r2, r2, #192	@ _22, _21,
 1629 05de DA60     		str	r2, [r3, #12]	@ _22, _9->CR1
 1630              	.LVL130:
 1631              	.L108:
 1632              	.LBE25:
 1633              	.LBE24:
1907:src/stm32f1xx_hal_smartcard.c ****   if((hsc->RxState == HAL_SMARTCARD_STATE_BUSY_RX) && dmarequest)
 1634              		.loc 1 1907 0
 1635 05e0 5A69     		ldr	r2, [r3, #20]	@ _15, _9->CR3
 1636              	.LVL131:
1908:src/stm32f1xx_hal_smartcard.c ****   {
 1637              		.loc 1 1908 0
 1638 05e2 90F84A10 		ldrb	r1, [r0, #74]	@ zero_extendqisi2	@ hsc_5->RxState, hsc_5->RxState
 1639 05e6 2229     		cmp	r1, #34	@ hsc_5->RxState,
 1640 05e8 0CD1     		bne	.L109	@,
1908:src/stm32f1xx_hal_smartcard.c ****   {
 1641              		.loc 1 1908 0 is_stmt 0 discriminator 1
 1642 05ea 5206     		lsls	r2, r2, #25	@, _15,
 1643              	.LVL132:
 1644 05ec 0AD5     		bpl	.L109	@,
ARM GAS  /tmp/ccvrs2bU.s 			page 77


 1645              	.LVL133:
 1646              	.LBB26:
 1647              	.LBB27:
1984:src/stm32f1xx_hal_smartcard.c **** 
 1648              		.loc 1 1984 0 is_stmt 1
 1649 05ee 2022     		movs	r2, #32	@ tmp140,
 1650 05f0 80F84A20 		strb	r2, [r0, #74]	@ tmp140, hsc_5->RxState
1987:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 1651              		.loc 1 1987 0
 1652 05f4 DA68     		ldr	r2, [r3, #12]	@ _24, _9->CR1
 1653 05f6 22F49072 		bic	r2, r2, #288	@ _25, _24,
 1654 05fa DA60     		str	r2, [r3, #12]	@ _25, _9->CR1
1988:src/stm32f1xx_hal_smartcard.c **** }
 1655              		.loc 1 1988 0
 1656 05fc 5A69     		ldr	r2, [r3, #20]	@ _26, _9->CR3
 1657 05fe 22F00102 		bic	r2, r2, #1	@ _27, _26,
 1658 0602 5A61     		str	r2, [r3, #20]	@ _27, _9->CR3
 1659              	.LVL134:
 1660              	.L109:
 1661              	.LBE27:
 1662              	.LBE26:
1918:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
 1663              		.loc 1 1918 0
 1664 0604 FFF7FEFF 		bl	HAL_SMARTCARD_ErrorCallback	@
 1665              	.LVL135:
 1666 0608 08BD     		pop	{r3, pc}	@
 1667              		.cfi_endproc
 1668              	.LFE92:
 1669              		.size	SMARTCARD_DMAError, .-SMARTCARD_DMAError
 1670              		.align	1
 1671              		.global	HAL_SMARTCARD_IRQHandler
 1672              		.syntax unified
 1673              		.thumb
 1674              		.thumb_func
 1675              		.fpu softvfp
 1676              		.type	HAL_SMARTCARD_IRQHandler, %function
 1677              	HAL_SMARTCARD_IRQHandler:
 1678              	.LFB81:
1529:src/stm32f1xx_hal_smartcard.c ****   uint32_t isrflags   = READ_REG(hsc->Instance->SR);
 1679              		.loc 1 1529 0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 0
 1682              		@ frame_needed = 0, uses_anonymous_args = 0
 1683              	.LVL136:
1530:src/stm32f1xx_hal_smartcard.c ****   uint32_t cr1its     = READ_REG(hsc->Instance->CR1);
 1684              		.loc 1 1530 0
 1685 060a 0368     		ldr	r3, [r0]	@ _9, hsc_8(D)->Instance
1529:src/stm32f1xx_hal_smartcard.c ****   uint32_t isrflags   = READ_REG(hsc->Instance->SR);
 1686              		.loc 1 1529 0
 1687 060c 70B5     		push	{r4, r5, r6, lr}	@
 1688              	.LCFI15:
 1689              		.cfi_def_cfa_offset 16
 1690              		.cfi_offset 4, -16
 1691              		.cfi_offset 5, -12
 1692              		.cfi_offset 6, -8
 1693              		.cfi_offset 14, -4
1530:src/stm32f1xx_hal_smartcard.c ****   uint32_t cr1its     = READ_REG(hsc->Instance->CR1);
ARM GAS  /tmp/ccvrs2bU.s 			page 78


 1694              		.loc 1 1530 0
 1695 060e 1A68     		ldr	r2, [r3]	@ isrflags, _9->SR
 1696              	.LVL137:
1529:src/stm32f1xx_hal_smartcard.c ****   uint32_t isrflags   = READ_REG(hsc->Instance->SR);
 1697              		.loc 1 1529 0
 1698 0610 0446     		mov	r4, r0	@ hsc, hsc
1538:src/stm32f1xx_hal_smartcard.c ****   {
 1699              		.loc 1 1538 0
 1700 0612 1607     		lsls	r6, r2, #28	@, isrflags,
1531:src/stm32f1xx_hal_smartcard.c ****   uint32_t cr3its     = READ_REG(hsc->Instance->CR3);
 1701              		.loc 1 1531 0
 1702 0614 D968     		ldr	r1, [r3, #12]	@ cr1its, _9->CR1
 1703              	.LVL138:
1532:src/stm32f1xx_hal_smartcard.c ****   uint32_t dmarequest = 0x00U;
 1704              		.loc 1 1532 0
 1705 0616 5D69     		ldr	r5, [r3, #20]	@ cr3its, _9->CR3
 1706              	.LVL139:
1538:src/stm32f1xx_hal_smartcard.c ****   {
 1707              		.loc 1 1538 0
 1708 0618 06D1     		bne	.L117	@,
1541:src/stm32f1xx_hal_smartcard.c ****     {
 1709              		.loc 1 1541 0
 1710 061a 9606     		lsls	r6, r2, #26	@, isrflags,
 1711 061c 61D5     		bpl	.L118	@,
1541:src/stm32f1xx_hal_smartcard.c ****     {
 1712              		.loc 1 1541 0 is_stmt 0 discriminator 1
 1713 061e 8D06     		lsls	r5, r1, #26	@, cr1its,
 1714              	.LVL140:
 1715 0620 5FD5     		bpl	.L118	@,
1662:src/stm32f1xx_hal_smartcard.c **** 
 1716              		.loc 1 1662 0 is_stmt 1
 1717 0622 BDE87040 		pop	{r4, r5, r6, lr}	@
 1718              	.LCFI16:
 1719              		.cfi_remember_state
 1720              		.cfi_restore 14
 1721              		.cfi_restore 6
 1722              		.cfi_restore 5
 1723              		.cfi_restore 4
 1724              		.cfi_def_cfa_offset 0
1543:src/stm32f1xx_hal_smartcard.c ****       return;
 1725              		.loc 1 1543 0
 1726 0626 9EE7     		b	SMARTCARD_Receive_IT	@
 1727              	.LVL141:
 1728              	.L117:
 1729              	.LCFI17:
 1730              		.cfi_restore_state
1549:src/stm32f1xx_hal_smartcard.c ****   {
 1731              		.loc 1 1549 0 discriminator 1
 1732 0628 15F00105 		ands	r5, r5, #1	@ _17, cr3its,
 1733              	.LVL142:
 1734 062c 02D1     		bne	.L119	@,
1549:src/stm32f1xx_hal_smartcard.c ****   {
 1735              		.loc 1 1549 0 is_stmt 0 discriminator 2
 1736 062e 11F4907F 		tst	r1, #288	@ cr1its,
 1737 0632 56D0     		beq	.L118	@,
 1738              	.L119:
1552:src/stm32f1xx_hal_smartcard.c ****     {
ARM GAS  /tmp/ccvrs2bU.s 			page 79


 1739              		.loc 1 1552 0 is_stmt 1
 1740 0634 D307     		lsls	r3, r2, #31	@, isrflags,
 1741 0636 05D5     		bpl	.L120	@,
1552:src/stm32f1xx_hal_smartcard.c ****     {
 1742              		.loc 1 1552 0 is_stmt 0 discriminator 1
 1743 0638 CE05     		lsls	r6, r1, #23	@, cr1its,
1554:src/stm32f1xx_hal_smartcard.c ****     }
 1744              		.loc 1 1554 0 is_stmt 1 discriminator 1
 1745 063a 42BF     		ittt	mi
 1746 063c E36C     		ldrmi	r3, [r4, #76]	@ _21, hsc_8(D)->ErrorCode
 1747 063e 43F00103 		orrmi	r3, r3, #1	@ _22, _21,
 1748 0642 E364     		strmi	r3, [r4, #76]	@ _22, hsc_8(D)->ErrorCode
 1749              	.L120:
1558:src/stm32f1xx_hal_smartcard.c ****     {
 1750              		.loc 1 1558 0
 1751 0644 9007     		lsls	r0, r2, #30	@, isrflags,
 1752              	.LVL143:
 1753 0646 04D5     		bpl	.L121	@,
1558:src/stm32f1xx_hal_smartcard.c ****     {
 1754              		.loc 1 1558 0 is_stmt 0 discriminator 1
 1755 0648 1DB1     		cbz	r5, .L121	@ _17,
1560:src/stm32f1xx_hal_smartcard.c ****     }
 1756              		.loc 1 1560 0 is_stmt 1
 1757 064a E36C     		ldr	r3, [r4, #76]	@ _25, hsc_8(D)->ErrorCode
 1758 064c 43F00403 		orr	r3, r3, #4	@ _26, _25,
 1759 0650 E364     		str	r3, [r4, #76]	@ _26, hsc_8(D)->ErrorCode
 1760              	.L121:
1564:src/stm32f1xx_hal_smartcard.c ****     {
 1761              		.loc 1 1564 0
 1762 0652 5307     		lsls	r3, r2, #29	@, isrflags,
 1763 0654 04D5     		bpl	.L122	@,
1564:src/stm32f1xx_hal_smartcard.c ****     {
 1764              		.loc 1 1564 0 is_stmt 0 discriminator 1
 1765 0656 1DB1     		cbz	r5, .L122	@ _17,
1566:src/stm32f1xx_hal_smartcard.c ****     }
 1766              		.loc 1 1566 0 is_stmt 1
 1767 0658 E36C     		ldr	r3, [r4, #76]	@ _29, hsc_8(D)->ErrorCode
 1768 065a 43F00203 		orr	r3, r3, #2	@ _30, _29,
 1769 065e E364     		str	r3, [r4, #76]	@ _30, hsc_8(D)->ErrorCode
 1770              	.L122:
1570:src/stm32f1xx_hal_smartcard.c ****     {
 1771              		.loc 1 1570 0
 1772 0660 1607     		lsls	r6, r2, #28	@, isrflags,
 1773 0662 04D5     		bpl	.L123	@,
1570:src/stm32f1xx_hal_smartcard.c ****     {
 1774              		.loc 1 1570 0 is_stmt 0 discriminator 1
 1775 0664 1DB1     		cbz	r5, .L123	@ _17,
1572:src/stm32f1xx_hal_smartcard.c ****     }
 1776              		.loc 1 1572 0 is_stmt 1
 1777 0666 E36C     		ldr	r3, [r4, #76]	@ _33, hsc_8(D)->ErrorCode
 1778 0668 43F00803 		orr	r3, r3, #8	@ _34, _33,
 1779 066c E364     		str	r3, [r4, #76]	@ _34, hsc_8(D)->ErrorCode
 1780              	.L123:
1575:src/stm32f1xx_hal_smartcard.c ****     {
 1781              		.loc 1 1575 0
 1782 066e E36C     		ldr	r3, [r4, #76]	@ _36, hsc_8(D)->ErrorCode
 1783 0670 002B     		cmp	r3, #0	@ _36
ARM GAS  /tmp/ccvrs2bU.s 			page 80


 1784 0672 65D0     		beq	.L116	@
1578:src/stm32f1xx_hal_smartcard.c ****       {
 1785              		.loc 1 1578 0
 1786 0674 9506     		lsls	r5, r2, #26	@, isrflags,
 1787 0676 04D5     		bpl	.L126	@,
1578:src/stm32f1xx_hal_smartcard.c ****       {
 1788              		.loc 1 1578 0 is_stmt 0 discriminator 1
 1789 0678 8806     		lsls	r0, r1, #26	@, cr1its,
 1790 067a 02D5     		bpl	.L126	@,
1580:src/stm32f1xx_hal_smartcard.c ****       }
 1791              		.loc 1 1580 0 is_stmt 1
 1792 067c 2046     		mov	r0, r4	@, hsc
 1793 067e FFF772FF 		bl	SMARTCARD_Receive_IT	@
 1794              	.LVL144:
 1795              	.L126:
1585:src/stm32f1xx_hal_smartcard.c ****       if(((hsc->ErrorCode & HAL_SMARTCARD_ERROR_ORE) != RESET) || dmarequest)
 1796              		.loc 1 1585 0
 1797 0682 2368     		ldr	r3, [r4]	@ _40, hsc_8(D)->Instance
 1798 0684 5D69     		ldr	r5, [r3, #20]	@ _41, _40->CR3
 1799              	.LVL145:
1586:src/stm32f1xx_hal_smartcard.c ****       {
 1800              		.loc 1 1586 0
 1801 0686 E16C     		ldr	r1, [r4, #76]	@ _43, hsc_8(D)->ErrorCode
 1802 0688 0907     		lsls	r1, r1, #28	@, _43,
 1803 068a 02D4     		bmi	.L127	@,
1586:src/stm32f1xx_hal_smartcard.c ****       {
 1804              		.loc 1 1586 0 is_stmt 0 discriminator 1
 1805 068c 15F04005 		ands	r5, r5, #64	@ tmp185, _41,
 1806              	.LVL146:
 1807 0690 22D0     		beq	.L128	@,
 1808              	.LVL147:
 1809              	.L127:
 1810              	.LBB34:
 1811              	.LBB35:
1984:src/stm32f1xx_hal_smartcard.c **** 
 1812              		.loc 1 1984 0 is_stmt 1
 1813 0692 2022     		movs	r2, #32	@ tmp186,
 1814 0694 84F84A20 		strb	r2, [r4, #74]	@ tmp186, hsc_8(D)->RxState
1987:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 1815              		.loc 1 1987 0
 1816 0698 DA68     		ldr	r2, [r3, #12]	@ _70, _40->CR1
 1817 069a 22F49072 		bic	r2, r2, #288	@ _71, _70,
 1818 069e DA60     		str	r2, [r3, #12]	@ _71, _40->CR1
1988:src/stm32f1xx_hal_smartcard.c **** }
 1819              		.loc 1 1988 0
 1820 06a0 5A69     		ldr	r2, [r3, #20]	@ _72, _40->CR3
 1821 06a2 22F00102 		bic	r2, r2, #1	@ _73, _72,
 1822 06a6 5A61     		str	r2, [r3, #20]	@ _73, _40->CR3
 1823              	.LVL148:
 1824              	.LBE35:
 1825              	.LBE34:
1593:src/stm32f1xx_hal_smartcard.c ****         {
 1826              		.loc 1 1593 0
 1827 06a8 5A69     		ldr	r2, [r3, #20]	@ _49, _40->CR3
 1828 06aa 5206     		lsls	r2, r2, #25	@, _49,
 1829 06ac 10D5     		bpl	.L129	@,
1595:src/stm32f1xx_hal_smartcard.c **** 
ARM GAS  /tmp/ccvrs2bU.s 			page 81


 1830              		.loc 1 1595 0
 1831 06ae 5A69     		ldr	r2, [r3, #20]	@ _52, _40->CR3
1598:src/stm32f1xx_hal_smartcard.c ****           {
 1832              		.loc 1 1598 0
 1833 06b0 606C     		ldr	r0, [r4, #68]	@ _55, hsc_8(D)->hdmarx
1595:src/stm32f1xx_hal_smartcard.c **** 
 1834              		.loc 1 1595 0
 1835 06b2 22F04002 		bic	r2, r2, #64	@ _53, _52,
 1836 06b6 5A61     		str	r2, [r3, #20]	@ _53, _40->CR3
1598:src/stm32f1xx_hal_smartcard.c ****           {
 1837              		.loc 1 1598 0
 1838 06b8 50B1     		cbz	r0, .L129	@ _55,
1602:src/stm32f1xx_hal_smartcard.c **** 
 1839              		.loc 1 1602 0
 1840 06ba 224B     		ldr	r3, .L192	@ tmp189,
 1841 06bc 4363     		str	r3, [r0, #52]	@ tmp189, _55->XferAbortCallback
1604:src/stm32f1xx_hal_smartcard.c ****             {
 1842              		.loc 1 1604 0
 1843 06be FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 1844              	.LVL149:
 1845 06c2 0028     		cmp	r0, #0	@
 1846 06c4 3CD0     		beq	.L116	@
1607:src/stm32f1xx_hal_smartcard.c ****             }
 1847              		.loc 1 1607 0
 1848 06c6 606C     		ldr	r0, [r4, #68]	@ _59, hsc_8(D)->hdmarx
1662:src/stm32f1xx_hal_smartcard.c **** 
 1849              		.loc 1 1662 0
 1850 06c8 BDE87040 		pop	{r4, r5, r6, lr}	@
 1851              	.LCFI18:
 1852              		.cfi_remember_state
 1853              		.cfi_restore 14
 1854              		.cfi_restore 6
 1855              		.cfi_restore 5
 1856              		.cfi_restore 4
 1857              		.cfi_def_cfa_offset 0
 1858              	.LVL150:
1607:src/stm32f1xx_hal_smartcard.c ****             }
 1859              		.loc 1 1607 0
 1860 06cc 436B     		ldr	r3, [r0, #52]	@ _59->XferAbortCallback, _59->XferAbortCallback
 1861 06ce 1847     		bx	r3	@ indirect register sibling call	@ _59->XferAbortCallback
 1862              	.LVL151:
 1863              	.L129:
 1864              	.LCFI19:
 1865              		.cfi_restore_state
1617:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
 1866              		.loc 1 1617 0
 1867 06d0 2046     		mov	r0, r4	@, hsc
 1868 06d2 FFF7FEFF 		bl	HAL_SMARTCARD_ErrorCallback	@
 1869              	.LVL152:
 1870 06d6 70BD     		pop	{r4, r5, r6, pc}	@
 1871              	.LVL153:
 1872              	.L128:
1641:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
 1873              		.loc 1 1641 0
 1874 06d8 2046     		mov	r0, r4	@, hsc
 1875 06da FFF7FEFF 		bl	HAL_SMARTCARD_ErrorCallback	@
 1876              	.LVL154:
ARM GAS  /tmp/ccvrs2bU.s 			page 82


1643:src/stm32f1xx_hal_smartcard.c ****       }
 1877              		.loc 1 1643 0
 1878 06de E564     		str	r5, [r4, #76]	@ tmp185, hsc_8(D)->ErrorCode
 1879 06e0 70BD     		pop	{r4, r5, r6, pc}	@
 1880              	.LVL155:
 1881              	.L118:
1650:src/stm32f1xx_hal_smartcard.c ****   {
 1882              		.loc 1 1650 0
 1883 06e2 1606     		lsls	r6, r2, #24	@, isrflags,
 1884 06e4 1AD5     		bpl	.L131	@,
1650:src/stm32f1xx_hal_smartcard.c ****   {
 1885              		.loc 1 1650 0 is_stmt 0 discriminator 1
 1886 06e6 0D06     		lsls	r5, r1, #24	@, cr1its,
 1887 06e8 18D5     		bpl	.L131	@,
 1888              	.LVL156:
 1889              	.LBB36:
 1890              	.LBB37:
2002:src/stm32f1xx_hal_smartcard.c ****   {
 1891              		.loc 1 2002 0 is_stmt 1
 1892 06ea 94F84920 		ldrb	r2, [r4, #73]	@ zero_extendqisi2	@ hsc_8(D)->gState, hsc_8(D)->gState
 1893              	.LVL157:
 1894 06ee 212A     		cmp	r2, #33	@ hsc_8(D)->gState,
 1895 06f0 26D1     		bne	.L116	@,
 1896              	.LVL158:
2005:src/stm32f1xx_hal_smartcard.c ****     hsc->pTxBuffPtr += 1U;
 1897              		.loc 1 2005 0
 1898 06f2 226B     		ldr	r2, [r4, #48]	@ tmp201, hsc_8(D)->pTxBuffPtr
 1899 06f4 32F8011B 		ldrh	r1, [r2], #1	@, *tmp_75
 1900              	.LVL159:
 1901 06f8 C1F30801 		ubfx	r1, r1, #0, #9	@ _79, *tmp_75,,
 1902 06fc 5960     		str	r1, [r3, #4]	@ _79, _9->DR
2006:src/stm32f1xx_hal_smartcard.c **** 
 1903              		.loc 1 2006 0
 1904 06fe 2263     		str	r2, [r4, #48]	@ tmp201, hsc_8(D)->pTxBuffPtr
 1905              	.LVL160:
2008:src/stm32f1xx_hal_smartcard.c ****     {
 1906              		.loc 1 2008 0
 1907 0700 E28E     		ldrh	r2, [r4, #54]	@, hsc_8(D)->TxXferCount
 1908              	.LVL161:
 1909 0702 013A     		subs	r2, r2, #1	@ tmp204, hsc_8(D)->TxXferCount,
 1910 0704 92B2     		uxth	r2, r2	@ _82, tmp204
 1911 0706 E286     		strh	r2, [r4, #54]	@ movhi	@ _82, hsc_8(D)->TxXferCount
 1912 0708 D2B9     		cbnz	r2, .L116	@ _82,
2011:src/stm32f1xx_hal_smartcard.c **** 
 1913              		.loc 1 2011 0
 1914 070a DA68     		ldr	r2, [r3, #12]	@ _83, _9->CR1
 1915 070c 22F08002 		bic	r2, r2, #128	@ _84, _83,
 1916 0710 DA60     		str	r2, [r3, #12]	@ _84, _9->CR1
2014:src/stm32f1xx_hal_smartcard.c ****     }
 1917              		.loc 1 2014 0
 1918 0712 DA68     		ldr	r2, [r3, #12]	@ _85, _9->CR1
 1919 0714 42F04002 		orr	r2, r2, #64	@ _86, _85,
 1920 0718 DA60     		str	r2, [r3, #12]	@ _86, _9->CR1
 1921 071a 70BD     		pop	{r4, r5, r6, pc}	@
 1922              	.LVL162:
 1923              	.L131:
 1924              	.LBE37:
ARM GAS  /tmp/ccvrs2bU.s 			page 83


 1925              	.LBE36:
1657:src/stm32f1xx_hal_smartcard.c ****   {
 1926              		.loc 1 1657 0
 1927 071c 5006     		lsls	r0, r2, #25	@, isrflags,
 1928              	.LVL163:
 1929 071e 0FD5     		bpl	.L116	@,
1657:src/stm32f1xx_hal_smartcard.c ****   {
 1930              		.loc 1 1657 0 is_stmt 0 discriminator 1
 1931 0720 4A06     		lsls	r2, r1, #25	@, cr1its,
 1932              	.LVL164:
 1933 0722 0DD5     		bpl	.L116	@,
 1934              	.LVL165:
 1935              	.LBB38:
 1936              	.LBB39:
2034:src/stm32f1xx_hal_smartcard.c **** 
 1937              		.loc 1 2034 0 is_stmt 1
 1938 0724 DA68     		ldr	r2, [r3, #12]	@ _89, _9->CR1
2047:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
 1939              		.loc 1 2047 0
 1940 0726 2046     		mov	r0, r4	@, hsc
2034:src/stm32f1xx_hal_smartcard.c **** 
 1941              		.loc 1 2034 0
 1942 0728 22F04002 		bic	r2, r2, #64	@ _90, _89,
 1943 072c DA60     		str	r2, [r3, #12]	@ _90, _9->CR1
2037:src/stm32f1xx_hal_smartcard.c **** 
 1944              		.loc 1 2037 0
 1945 072e 5A69     		ldr	r2, [r3, #20]	@ _91, _9->CR3
 1946 0730 22F00102 		bic	r2, r2, #1	@ _92, _91,
 1947 0734 5A61     		str	r2, [r3, #20]	@ _92, _9->CR3
2040:src/stm32f1xx_hal_smartcard.c **** 
 1948              		.loc 1 2040 0
 1949 0736 2023     		movs	r3, #32	@ tmp208,
 1950 0738 84F84930 		strb	r3, [r4, #73]	@ tmp208, hsc_8(D)->gState
2047:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
 1951              		.loc 1 2047 0
 1952 073c FFF7FEFF 		bl	HAL_SMARTCARD_TxCpltCallback	@
 1953              	.LVL166:
 1954              	.L116:
 1955 0740 70BD     		pop	{r4, r5, r6, pc}	@
 1956              	.LVL167:
 1957              	.L193:
 1958 0742 00BF     		.align	2
 1959              	.L192:
 1960 0744 00000000 		.word	SMARTCARD_DMAAbortOnError
 1961              	.LBE39:
 1962              	.LBE38:
 1963              		.cfi_endproc
 1964              	.LFE81:
 1965              		.size	HAL_SMARTCARD_IRQHandler, .-HAL_SMARTCARD_IRQHandler
 1966              		.align	1
 1967              		.syntax unified
 1968              		.thumb
 1969              		.thumb_func
 1970              		.fpu softvfp
 1971              		.type	SMARTCARD_DMAAbortOnError, %function
 1972              	SMARTCARD_DMAAbortOnError:
 1973              	.LFB99:
ARM GAS  /tmp/ccvrs2bU.s 			page 84


2108:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_HandleTypeDef* hsc = (SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1974              		.loc 1 2108 0
 1975              		.cfi_startproc
 1976              		@ args = 0, pretend = 0, frame = 0
 1977              		@ frame_needed = 0, uses_anonymous_args = 0
 1978              	.LVL168:
 1979 0748 08B5     		push	{r3, lr}	@
 1980              	.LCFI20:
 1981              		.cfi_def_cfa_offset 8
 1982              		.cfi_offset 3, -8
 1983              		.cfi_offset 14, -4
2110:src/stm32f1xx_hal_smartcard.c ****   hsc->TxXferCount = 0x00U;
 1984              		.loc 1 2110 0
 1985 074a 0023     		movs	r3, #0	@ tmp113,
2109:src/stm32f1xx_hal_smartcard.c ****   hsc->RxXferCount = 0x00U;
 1986              		.loc 1 2109 0
 1987 074c 406A     		ldr	r0, [r0, #36]	@ hsc, hdma_2(D)->Parent
 1988              	.LVL169:
2110:src/stm32f1xx_hal_smartcard.c ****   hsc->TxXferCount = 0x00U;
 1989              		.loc 1 2110 0
 1990 074e C387     		strh	r3, [r0, #62]	@ movhi	@ tmp113, hsc_3->RxXferCount
2111:src/stm32f1xx_hal_smartcard.c **** 
 1991              		.loc 1 2111 0
 1992 0750 C386     		strh	r3, [r0, #54]	@ movhi	@ tmp113, hsc_3->TxXferCount
2118:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
 1993              		.loc 1 2118 0
 1994 0752 FFF7FEFF 		bl	HAL_SMARTCARD_ErrorCallback	@
 1995              	.LVL170:
 1996 0756 08BD     		pop	{r3, pc}	@
 1997              		.cfi_endproc
 1998              	.LFE99:
 1999              		.size	SMARTCARD_DMAAbortOnError, .-SMARTCARD_DMAAbortOnError
 2000              		.align	1
 2001              		.weak	HAL_SMARTCARD_AbortCpltCallback
 2002              		.syntax unified
 2003              		.thumb
 2004              		.thumb_func
 2005              		.fpu softvfp
 2006              		.type	HAL_SMARTCARD_AbortCpltCallback, %function
 2007              	HAL_SMARTCARD_AbortCpltCallback:
 2008              	.LFB110:
 2009              		.cfi_startproc
 2010              		@ args = 0, pretend = 0, frame = 0
 2011              		@ frame_needed = 0, uses_anonymous_args = 0
 2012              		@ link register save eliminated.
 2013 0758 7047     		bx	lr	@
 2014              		.cfi_endproc
 2015              	.LFE110:
 2016              		.size	HAL_SMARTCARD_AbortCpltCallback, .-HAL_SMARTCARD_AbortCpltCallback
 2017              		.align	1
 2018              		.global	HAL_SMARTCARD_Abort_IT
 2019              		.syntax unified
 2020              		.thumb
 2021              		.thumb_func
 2022              		.fpu softvfp
 2023              		.type	HAL_SMARTCARD_Abort_IT, %function
 2024              	HAL_SMARTCARD_Abort_IT:
ARM GAS  /tmp/ccvrs2bU.s 			page 85


 2025              	.LFB78:
1255:src/stm32f1xx_hal_smartcard.c ****   uint32_t AbortCplt = 0x01U;
 2026              		.loc 1 1255 0
 2027              		.cfi_startproc
 2028              		@ args = 0, pretend = 0, frame = 0
 2029              		@ frame_needed = 0, uses_anonymous_args = 0
 2030              	.LVL171:
1259:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 2031              		.loc 1 1259 0
 2032 075a 0368     		ldr	r3, [r0]	@ _10, hsc_9(D)->Instance
1255:src/stm32f1xx_hal_smartcard.c ****   uint32_t AbortCplt = 0x01U;
 2033              		.loc 1 1255 0
 2034 075c 10B5     		push	{r4, lr}	@
 2035              	.LCFI21:
 2036              		.cfi_def_cfa_offset 8
 2037              		.cfi_offset 4, -8
 2038              		.cfi_offset 14, -4
1259:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 2039              		.loc 1 1259 0
 2040 075e DA68     		ldr	r2, [r3, #12]	@ _11, _10->CR1
1255:src/stm32f1xx_hal_smartcard.c ****   uint32_t AbortCplt = 0x01U;
 2041              		.loc 1 1255 0
 2042 0760 0446     		mov	r4, r0	@ hsc, hsc
1259:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 2043              		.loc 1 1259 0
 2044 0762 22F4F072 		bic	r2, r2, #480	@ _12, _11,
 2045 0766 DA60     		str	r2, [r3, #12]	@ _12, _10->CR1
1260:src/stm32f1xx_hal_smartcard.c **** 
 2046              		.loc 1 1260 0
 2047 0768 5A69     		ldr	r2, [r3, #20]	@ _14, _10->CR3
1265:src/stm32f1xx_hal_smartcard.c ****   {
 2048              		.loc 1 1265 0
 2049 076a 006C     		ldr	r0, [r0, #64]	@ _17, hsc_9(D)->hdmatx
 2050              	.LVL172:
1260:src/stm32f1xx_hal_smartcard.c **** 
 2051              		.loc 1 1260 0
 2052 076c 22F00102 		bic	r2, r2, #1	@ _15, _14,
 2053 0770 5A61     		str	r2, [r3, #20]	@ _15, _10->CR3
1265:src/stm32f1xx_hal_smartcard.c ****   {
 2054              		.loc 1 1265 0
 2055 0772 28B1     		cbz	r0, .L197	@ _17,
1269:src/stm32f1xx_hal_smartcard.c ****     {
 2056              		.loc 1 1269 0
 2057 0774 5A69     		ldr	r2, [r3, #20]	@ _18, _10->CR3
 2058 0776 12F08002 		ands	r2, r2, #128	@ tmp138, _18,
1271:src/stm32f1xx_hal_smartcard.c ****     }
 2059              		.loc 1 1271 0
 2060 077a 18BF     		it	ne
 2061 077c 1E4A     		ldrne	r2, .L226	@ tmp139,
1275:src/stm32f1xx_hal_smartcard.c ****     }
 2062              		.loc 1 1275 0
 2063 077e 4263     		str	r2, [r0, #52]	@ tmp138, _17->XferAbortCallback
 2064              	.L197:
1279:src/stm32f1xx_hal_smartcard.c ****   {
 2065              		.loc 1 1279 0
 2066 0780 616C     		ldr	r1, [r4, #68]	@ _22, hsc_9(D)->hdmarx
 2067 0782 29B1     		cbz	r1, .L199	@ _22,
ARM GAS  /tmp/ccvrs2bU.s 			page 86


1283:src/stm32f1xx_hal_smartcard.c ****     {
 2068              		.loc 1 1283 0
 2069 0784 5A69     		ldr	r2, [r3, #20]	@ _23, _10->CR3
 2070 0786 12F04002 		ands	r2, r2, #64	@ tmp141, _23,
1285:src/stm32f1xx_hal_smartcard.c ****     }
 2071              		.loc 1 1285 0
 2072 078a 18BF     		it	ne
 2073 078c 1B4A     		ldrne	r2, .L226+4	@ tmp142,
1289:src/stm32f1xx_hal_smartcard.c ****     }
 2074              		.loc 1 1289 0
 2075 078e 4A63     		str	r2, [r1, #52]	@ tmp141, _22->XferAbortCallback
 2076              	.L199:
1294:src/stm32f1xx_hal_smartcard.c ****   {
 2077              		.loc 1 1294 0
 2078 0790 5A69     		ldr	r2, [r3, #20]	@ _27, _10->CR3
 2079 0792 1206     		lsls	r2, r2, #24	@, _27,
 2080 0794 1DD4     		bmi	.L201	@,
 2081              	.L225:
1256:src/stm32f1xx_hal_smartcard.c **** 
 2082              		.loc 1 1256 0
 2083 0796 0123     		movs	r3, #1	@ AbortCplt,
 2084              	.L202:
 2085              	.LVL173:
1318:src/stm32f1xx_hal_smartcard.c ****   {
 2086              		.loc 1 1318 0
 2087 0798 2268     		ldr	r2, [r4]	@ _36, hsc_9(D)->Instance
 2088 079a 5169     		ldr	r1, [r2, #20]	@ _37, _36->CR3
 2089 079c 4906     		lsls	r1, r1, #25	@, _37,
 2090 079e 27D5     		bpl	.L204	@,
1320:src/stm32f1xx_hal_smartcard.c **** 
 2091              		.loc 1 1320 0
 2092 07a0 5169     		ldr	r1, [r2, #20]	@ _39, _36->CR3
1323:src/stm32f1xx_hal_smartcard.c ****     {
 2093              		.loc 1 1323 0
 2094 07a2 606C     		ldr	r0, [r4, #68]	@ _42, hsc_9(D)->hdmarx
1320:src/stm32f1xx_hal_smartcard.c **** 
 2095              		.loc 1 1320 0
 2096 07a4 21F04001 		bic	r1, r1, #64	@ _40, _39,
 2097 07a8 5161     		str	r1, [r2, #20]	@ _40, _36->CR3
1323:src/stm32f1xx_hal_smartcard.c ****     {
 2098              		.loc 1 1323 0
 2099 07aa 08B3     		cbz	r0, .L204	@ _42,
1329:src/stm32f1xx_hal_smartcard.c ****       {
 2100              		.loc 1 1329 0
 2101 07ac FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 2102              	.LVL174:
 2103 07b0 00B3     		cbz	r0, .L206	@,
1331:src/stm32f1xx_hal_smartcard.c ****         AbortCplt = 0x01U;
 2104              		.loc 1 1331 0
 2105 07b2 0022     		movs	r2, #0	@ tmp151,
 2106 07b4 636C     		ldr	r3, [r4, #68]	@ hsc_9(D)->hdmarx, hsc_9(D)->hdmarx
 2107 07b6 5A63     		str	r2, [r3, #52]	@ tmp151, _45->XferAbortCallback
 2108              	.LVL175:
 2109              	.L207:
1345:src/stm32f1xx_hal_smartcard.c ****     hsc->RxXferCount = 0x00U;
 2110              		.loc 1 1345 0
 2111 07b8 0023     		movs	r3, #0	@ tmp153,
ARM GAS  /tmp/ccvrs2bU.s 			page 87


 2112 07ba E386     		strh	r3, [r4, #54]	@ movhi	@ tmp153, hsc_9(D)->TxXferCount
1346:src/stm32f1xx_hal_smartcard.c **** 
 2113              		.loc 1 1346 0
 2114 07bc E387     		strh	r3, [r4, #62]	@ movhi	@ tmp153, hsc_9(D)->RxXferCount
1349:src/stm32f1xx_hal_smartcard.c **** 
 2115              		.loc 1 1349 0
 2116 07be E364     		str	r3, [r4, #76]	@ tmp153, hsc_9(D)->ErrorCode
1352:src/stm32f1xx_hal_smartcard.c ****     hsc->RxState = HAL_SMARTCARD_STATE_READY;
 2117              		.loc 1 1352 0
 2118 07c0 2023     		movs	r3, #32	@ tmp157,
1361:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
 2119              		.loc 1 1361 0
 2120 07c2 2046     		mov	r0, r4	@, hsc
1352:src/stm32f1xx_hal_smartcard.c ****     hsc->RxState = HAL_SMARTCARD_STATE_READY;
 2121              		.loc 1 1352 0
 2122 07c4 84F84930 		strb	r3, [r4, #73]	@ tmp157, hsc_9(D)->gState
1353:src/stm32f1xx_hal_smartcard.c **** 
 2123              		.loc 1 1353 0
 2124 07c8 84F84A30 		strb	r3, [r4, #74]	@ tmp157, hsc_9(D)->RxState
1361:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
 2125              		.loc 1 1361 0
 2126 07cc FFF7FEFF 		bl	HAL_SMARTCARD_AbortCpltCallback	@
 2127              	.LVL176:
 2128 07d0 10E0     		b	.L206	@
 2129              	.LVL177:
 2130              	.L201:
1297:src/stm32f1xx_hal_smartcard.c **** 
 2131              		.loc 1 1297 0
 2132 07d2 5A69     		ldr	r2, [r3, #20]	@ _29, _10->CR3
 2133 07d4 22F08002 		bic	r2, r2, #128	@ _30, _29,
 2134 07d8 5A61     		str	r2, [r3, #20]	@ _30, _10->CR3
1300:src/stm32f1xx_hal_smartcard.c ****     {
 2135              		.loc 1 1300 0
 2136 07da 0028     		cmp	r0, #0	@ _17
 2137 07dc DBD0     		beq	.L225	@
1306:src/stm32f1xx_hal_smartcard.c ****       {
 2138              		.loc 1 1306 0
 2139 07de FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 2140              	.LVL178:
 2141 07e2 18B1     		cbz	r0, .L209	@ tmp145,
1308:src/stm32f1xx_hal_smartcard.c ****       }
 2142              		.loc 1 1308 0
 2143 07e4 0022     		movs	r2, #0	@ AbortCplt,
 2144 07e6 236C     		ldr	r3, [r4, #64]	@ hsc_9(D)->hdmatx, hsc_9(D)->hdmatx
 2145 07e8 5A63     		str	r2, [r3, #52]	@ AbortCplt, _34->XferAbortCallback
 2146 07ea D4E7     		b	.L225	@
 2147              	.L209:
1312:src/stm32f1xx_hal_smartcard.c ****       }
 2148              		.loc 1 1312 0
 2149 07ec 0346     		mov	r3, r0	@ AbortCplt, tmp145
 2150 07ee D3E7     		b	.L202	@
 2151              	.LVL179:
 2152              	.L204:
1342:src/stm32f1xx_hal_smartcard.c ****   {
 2153              		.loc 1 1342 0
 2154 07f0 002B     		cmp	r3, #0	@ AbortCplt
 2155 07f2 E1D1     		bne	.L207	@
ARM GAS  /tmp/ccvrs2bU.s 			page 88


 2156              	.LVL180:
 2157              	.L206:
1365:src/stm32f1xx_hal_smartcard.c **** 
 2158              		.loc 1 1365 0
 2159 07f4 0020     		movs	r0, #0	@,
 2160 07f6 10BD     		pop	{r4, pc}	@
 2161              	.LVL181:
 2162              	.L227:
 2163              		.align	2
 2164              	.L226:
 2165 07f8 00000000 		.word	SMARTCARD_DMATxAbortCallback
 2166 07fc 00000000 		.word	SMARTCARD_DMARxAbortCallback
 2167              		.cfi_endproc
 2168              	.LFE78:
 2169              		.size	HAL_SMARTCARD_Abort_IT, .-HAL_SMARTCARD_Abort_IT
 2170              		.align	1
 2171              		.syntax unified
 2172              		.thumb
 2173              		.thumb_func
 2174              		.fpu softvfp
 2175              		.type	SMARTCARD_DMARxAbortCallback, %function
 2176              	SMARTCARD_DMARxAbortCallback:
 2177              	.LFB101:
2174:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2178              		.loc 1 2174 0
 2179              		.cfi_startproc
 2180              		@ args = 0, pretend = 0, frame = 0
 2181              		@ frame_needed = 0, uses_anonymous_args = 0
 2182              	.LVL182:
 2183 0800 08B5     		push	{r3, lr}	@
 2184              	.LCFI22:
 2185              		.cfi_def_cfa_offset 8
 2186              		.cfi_offset 3, -8
 2187              		.cfi_offset 14, -4
2177:src/stm32f1xx_hal_smartcard.c **** 
 2188              		.loc 1 2177 0
 2189 0802 0023     		movs	r3, #0	@ tmp116,
2175:src/stm32f1xx_hal_smartcard.c **** 
 2190              		.loc 1 2175 0
 2191 0804 406A     		ldr	r0, [r0, #36]	@ hsc, hdma_3(D)->Parent
 2192              	.LVL183:
2177:src/stm32f1xx_hal_smartcard.c **** 
 2193              		.loc 1 2177 0
 2194 0806 426C     		ldr	r2, [r0, #68]	@ hsc_4->hdmarx, hsc_4->hdmarx
 2195 0808 5363     		str	r3, [r2, #52]	@ tmp116, _5->XferAbortCallback
2180:src/stm32f1xx_hal_smartcard.c ****   {
 2196              		.loc 1 2180 0
 2197 080a 026C     		ldr	r2, [r0, #64]	@ _7, hsc_4->hdmatx
 2198 080c 0AB1     		cbz	r2, .L229	@ _7,
2182:src/stm32f1xx_hal_smartcard.c ****     {
 2199              		.loc 1 2182 0
 2200 080e 526B     		ldr	r2, [r2, #52]	@ _7->XferAbortCallback, _7->XferAbortCallback
 2201 0810 4AB9     		cbnz	r2, .L228	@ _7->XferAbortCallback,
 2202              	.L229:
2189:src/stm32f1xx_hal_smartcard.c ****   hsc->RxXferCount = 0x00U;
 2203              		.loc 1 2189 0
 2204 0812 C386     		strh	r3, [r0, #54]	@ movhi	@ tmp127, hsc_4->TxXferCount
ARM GAS  /tmp/ccvrs2bU.s 			page 89


2190:src/stm32f1xx_hal_smartcard.c **** 
 2205              		.loc 1 2190 0
 2206 0814 C387     		strh	r3, [r0, #62]	@ movhi	@ tmp127, hsc_4->RxXferCount
2193:src/stm32f1xx_hal_smartcard.c **** 
 2207              		.loc 1 2193 0
 2208 0816 C364     		str	r3, [r0, #76]	@ tmp127, hsc_4->ErrorCode
2196:src/stm32f1xx_hal_smartcard.c ****   hsc->RxState = HAL_SMARTCARD_STATE_READY;
 2209              		.loc 1 2196 0
 2210 0818 2023     		movs	r3, #32	@ tmp123,
 2211 081a 80F84930 		strb	r3, [r0, #73]	@ tmp123, hsc_4->gState
2197:src/stm32f1xx_hal_smartcard.c **** 
 2212              		.loc 1 2197 0
 2213 081e 80F84A30 		strb	r3, [r0, #74]	@ tmp123, hsc_4->RxState
2204:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
 2214              		.loc 1 2204 0
 2215 0822 FFF7FEFF 		bl	HAL_SMARTCARD_AbortCpltCallback	@
 2216              	.LVL184:
 2217              	.L228:
 2218 0826 08BD     		pop	{r3, pc}	@
 2219              		.cfi_endproc
 2220              	.LFE101:
 2221              		.size	SMARTCARD_DMARxAbortCallback, .-SMARTCARD_DMARxAbortCallback
 2222              		.align	1
 2223              		.syntax unified
 2224              		.thumb
 2225              		.thumb_func
 2226              		.fpu softvfp
 2227              		.type	SMARTCARD_DMATxAbortCallback, %function
 2228              	SMARTCARD_DMATxAbortCallback:
 2229              	.LFB100:
2131:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2230              		.loc 1 2131 0
 2231              		.cfi_startproc
 2232              		@ args = 0, pretend = 0, frame = 0
 2233              		@ frame_needed = 0, uses_anonymous_args = 0
 2234              	.LVL185:
 2235 0828 08B5     		push	{r3, lr}	@
 2236              	.LCFI23:
 2237              		.cfi_def_cfa_offset 8
 2238              		.cfi_offset 3, -8
 2239              		.cfi_offset 14, -4
2134:src/stm32f1xx_hal_smartcard.c **** 
 2240              		.loc 1 2134 0
 2241 082a 0023     		movs	r3, #0	@ tmp116,
2132:src/stm32f1xx_hal_smartcard.c **** 
 2242              		.loc 1 2132 0
 2243 082c 406A     		ldr	r0, [r0, #36]	@ hsc, hdma_3(D)->Parent
 2244              	.LVL186:
2134:src/stm32f1xx_hal_smartcard.c **** 
 2245              		.loc 1 2134 0
 2246 082e 026C     		ldr	r2, [r0, #64]	@ hsc_4->hdmatx, hsc_4->hdmatx
 2247 0830 5363     		str	r3, [r2, #52]	@ tmp116, _5->XferAbortCallback
2137:src/stm32f1xx_hal_smartcard.c ****   {
 2248              		.loc 1 2137 0
 2249 0832 426C     		ldr	r2, [r0, #68]	@ _7, hsc_4->hdmarx
 2250 0834 0AB1     		cbz	r2, .L235	@ _7,
2139:src/stm32f1xx_hal_smartcard.c ****     {
ARM GAS  /tmp/ccvrs2bU.s 			page 90


 2251              		.loc 1 2139 0
 2252 0836 526B     		ldr	r2, [r2, #52]	@ _7->XferAbortCallback, _7->XferAbortCallback
 2253 0838 4AB9     		cbnz	r2, .L234	@ _7->XferAbortCallback,
 2254              	.L235:
2146:src/stm32f1xx_hal_smartcard.c ****   hsc->RxXferCount = 0x00U;
 2255              		.loc 1 2146 0
 2256 083a C386     		strh	r3, [r0, #54]	@ movhi	@ tmp127, hsc_4->TxXferCount
2147:src/stm32f1xx_hal_smartcard.c **** 
 2257              		.loc 1 2147 0
 2258 083c C387     		strh	r3, [r0, #62]	@ movhi	@ tmp127, hsc_4->RxXferCount
2150:src/stm32f1xx_hal_smartcard.c **** 
 2259              		.loc 1 2150 0
 2260 083e C364     		str	r3, [r0, #76]	@ tmp127, hsc_4->ErrorCode
2153:src/stm32f1xx_hal_smartcard.c ****   hsc->RxState = HAL_SMARTCARD_STATE_READY;
 2261              		.loc 1 2153 0
 2262 0840 2023     		movs	r3, #32	@ tmp123,
 2263 0842 80F84930 		strb	r3, [r0, #73]	@ tmp123, hsc_4->gState
2154:src/stm32f1xx_hal_smartcard.c **** 
 2264              		.loc 1 2154 0
 2265 0846 80F84A30 		strb	r3, [r0, #74]	@ tmp123, hsc_4->RxState
2161:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
 2266              		.loc 1 2161 0
 2267 084a FFF7FEFF 		bl	HAL_SMARTCARD_AbortCpltCallback	@
 2268              	.LVL187:
 2269              	.L234:
 2270 084e 08BD     		pop	{r3, pc}	@
 2271              		.cfi_endproc
 2272              	.LFE100:
 2273              		.size	SMARTCARD_DMATxAbortCallback, .-SMARTCARD_DMATxAbortCallback
 2274              		.align	1
 2275              		.weak	HAL_SMARTCARD_AbortTransmitCpltCallback
 2276              		.syntax unified
 2277              		.thumb
 2278              		.thumb_func
 2279              		.fpu softvfp
 2280              		.type	HAL_SMARTCARD_AbortTransmitCpltCallback, %function
 2281              	HAL_SMARTCARD_AbortTransmitCpltCallback:
 2282              	.LFB108:
 2283              		.cfi_startproc
 2284              		@ args = 0, pretend = 0, frame = 0
 2285              		@ frame_needed = 0, uses_anonymous_args = 0
 2286              		@ link register save eliminated.
 2287 0850 7047     		bx	lr	@
 2288              		.cfi_endproc
 2289              	.LFE108:
 2290              		.size	HAL_SMARTCARD_AbortTransmitCpltCallback, .-HAL_SMARTCARD_AbortTransmitCpltCallback
 2291              		.align	1
 2292              		.global	HAL_SMARTCARD_AbortTransmit_IT
 2293              		.syntax unified
 2294              		.thumb
 2295              		.thumb_func
 2296              		.fpu softvfp
 2297              		.type	HAL_SMARTCARD_AbortTransmit_IT, %function
 2298              	HAL_SMARTCARD_AbortTransmit_IT:
 2299              	.LFB79:
1382:src/stm32f1xx_hal_smartcard.c ****   /* Disable TXEIE and TCIE interrupts */
 2300              		.loc 1 1382 0
ARM GAS  /tmp/ccvrs2bU.s 			page 91


 2301              		.cfi_startproc
 2302              		@ args = 0, pretend = 0, frame = 0
 2303              		@ frame_needed = 0, uses_anonymous_args = 0
 2304              	.LVL188:
1384:src/stm32f1xx_hal_smartcard.c **** 
 2305              		.loc 1 1384 0
 2306 0852 0368     		ldr	r3, [r0]	@ _4, hsc_3(D)->Instance
1382:src/stm32f1xx_hal_smartcard.c ****   /* Disable TXEIE and TCIE interrupts */
 2307              		.loc 1 1382 0
 2308 0854 10B5     		push	{r4, lr}	@
 2309              	.LCFI24:
 2310              		.cfi_def_cfa_offset 8
 2311              		.cfi_offset 4, -8
 2312              		.cfi_offset 14, -4
1384:src/stm32f1xx_hal_smartcard.c **** 
 2313              		.loc 1 1384 0
 2314 0856 DA68     		ldr	r2, [r3, #12]	@ _5, _4->CR1
1382:src/stm32f1xx_hal_smartcard.c ****   /* Disable TXEIE and TCIE interrupts */
 2315              		.loc 1 1382 0
 2316 0858 0446     		mov	r4, r0	@ hsc, hsc
1384:src/stm32f1xx_hal_smartcard.c **** 
 2317              		.loc 1 1384 0
 2318 085a 22F0C002 		bic	r2, r2, #192	@ _6, _5,
 2319 085e DA60     		str	r2, [r3, #12]	@ _6, _4->CR1
1387:src/stm32f1xx_hal_smartcard.c ****   {
 2320              		.loc 1 1387 0
 2321 0860 5A69     		ldr	r2, [r3, #20]	@ _8, _4->CR3
 2322 0862 12F08002 		ands	r2, r2, #128	@ tmp123, _8,
 2323 0866 17D0     		beq	.L242	@,
1389:src/stm32f1xx_hal_smartcard.c **** 
 2324              		.loc 1 1389 0
 2325 0868 5A69     		ldr	r2, [r3, #20]	@ _10, _4->CR3
 2326 086a 22F08002 		bic	r2, r2, #128	@ _11, _10,
 2327 086e 5A61     		str	r2, [r3, #20]	@ _11, _4->CR3
1392:src/stm32f1xx_hal_smartcard.c ****     {
 2328              		.loc 1 1392 0
 2329 0870 036C     		ldr	r3, [r0, #64]	@ _13, hsc_3(D)->hdmatx
 2330 0872 53B1     		cbz	r3, .L243	@ _13,
1396:src/stm32f1xx_hal_smartcard.c **** 
 2331              		.loc 1 1396 0
 2332 0874 094A     		ldr	r2, .L249	@ tmp124,
1399:src/stm32f1xx_hal_smartcard.c ****       {
 2333              		.loc 1 1399 0
 2334 0876 1846     		mov	r0, r3	@, _13
 2335              	.LVL189:
1396:src/stm32f1xx_hal_smartcard.c **** 
 2336              		.loc 1 1396 0
 2337 0878 5A63     		str	r2, [r3, #52]	@ tmp124, _13->XferAbortCallback
1399:src/stm32f1xx_hal_smartcard.c ****       {
 2338              		.loc 1 1399 0
 2339 087a FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 2340              	.LVL190:
 2341 087e 10B1     		cbz	r0, .L244	@,
1402:src/stm32f1xx_hal_smartcard.c ****       }
 2342              		.loc 1 1402 0
 2343 0880 206C     		ldr	r0, [r4, #64]	@ _20, hsc_3(D)->hdmatx
 2344 0882 436B     		ldr	r3, [r0, #52]	@ _20->XferAbortCallback, _20->XferAbortCallback
ARM GAS  /tmp/ccvrs2bU.s 			page 92


 2345 0884 9847     		blx	r3	@ _20->XferAbortCallback
 2346              	.LVL191:
 2347              	.L244:
1442:src/stm32f1xx_hal_smartcard.c **** 
 2348              		.loc 1 1442 0
 2349 0886 0020     		movs	r0, #0	@,
 2350 0888 10BD     		pop	{r4, pc}	@
 2351              	.LVL192:
 2352              	.L243:
1408:src/stm32f1xx_hal_smartcard.c **** 
 2353              		.loc 1 1408 0
 2354 088a C386     		strh	r3, [r0, #54]	@ movhi	@ _13, hsc_3(D)->TxXferCount
 2355              	.L248:
1429:src/stm32f1xx_hal_smartcard.c **** 
 2356              		.loc 1 1429 0
 2357 088c 2023     		movs	r3, #32	@ tmp133,
 2358 088e 84F84930 		strb	r3, [r4, #73]	@ tmp133,
1437:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
 2359              		.loc 1 1437 0
 2360 0892 FFF7FEFF 		bl	HAL_SMARTCARD_AbortTransmitCpltCallback	@
 2361              	.LVL193:
 2362 0896 F6E7     		b	.L244	@
 2363              	.LVL194:
 2364              	.L242:
1426:src/stm32f1xx_hal_smartcard.c **** 
 2365              		.loc 1 1426 0
 2366 0898 C286     		strh	r2, [r0, #54]	@ movhi	@ tmp123, hsc_3(D)->TxXferCount
 2367 089a F7E7     		b	.L248	@
 2368              	.L250:
 2369              		.align	2
 2370              	.L249:
 2371 089c 00000000 		.word	SMARTCARD_DMATxOnlyAbortCallback
 2372              		.cfi_endproc
 2373              	.LFE79:
 2374              		.size	HAL_SMARTCARD_AbortTransmit_IT, .-HAL_SMARTCARD_AbortTransmit_IT
 2375              		.align	1
 2376              		.syntax unified
 2377              		.thumb
 2378              		.thumb_func
 2379              		.fpu softvfp
 2380              		.type	SMARTCARD_DMATxOnlyAbortCallback, %function
 2381              	SMARTCARD_DMATxOnlyAbortCallback:
 2382              	.LFB102:
2217:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2383              		.loc 1 2217 0
 2384              		.cfi_startproc
 2385              		@ args = 0, pretend = 0, frame = 0
 2386              		@ frame_needed = 0, uses_anonymous_args = 0
 2387              	.LVL195:
 2388 08a0 08B5     		push	{r3, lr}	@
 2389              	.LCFI25:
 2390              		.cfi_def_cfa_offset 8
 2391              		.cfi_offset 3, -8
 2392              		.cfi_offset 14, -4
2220:src/stm32f1xx_hal_smartcard.c **** 
 2393              		.loc 1 2220 0
 2394 08a2 0023     		movs	r3, #0	@ tmp113,
ARM GAS  /tmp/ccvrs2bU.s 			page 93


2218:src/stm32f1xx_hal_smartcard.c **** 
 2395              		.loc 1 2218 0
 2396 08a4 406A     		ldr	r0, [r0, #36]	@ hsc, hdma_2(D)->Parent
 2397              	.LVL196:
2220:src/stm32f1xx_hal_smartcard.c **** 
 2398              		.loc 1 2220 0
 2399 08a6 C386     		strh	r3, [r0, #54]	@ movhi	@ tmp113, hsc_3->TxXferCount
2223:src/stm32f1xx_hal_smartcard.c **** 
 2400              		.loc 1 2223 0
 2401 08a8 2023     		movs	r3, #32	@ tmp114,
 2402 08aa 80F84930 		strb	r3, [r0, #73]	@ tmp114, hsc_3->gState
2230:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
 2403              		.loc 1 2230 0
 2404 08ae FFF7FEFF 		bl	HAL_SMARTCARD_AbortTransmitCpltCallback	@
 2405              	.LVL197:
 2406 08b2 08BD     		pop	{r3, pc}	@
 2407              		.cfi_endproc
 2408              	.LFE102:
 2409              		.size	SMARTCARD_DMATxOnlyAbortCallback, .-SMARTCARD_DMATxOnlyAbortCallback
 2410              		.align	1
 2411              		.weak	HAL_SMARTCARD_AbortReceiveCpltCallback
 2412              		.syntax unified
 2413              		.thumb
 2414              		.thumb_func
 2415              		.fpu softvfp
 2416              		.type	HAL_SMARTCARD_AbortReceiveCpltCallback, %function
 2417              	HAL_SMARTCARD_AbortReceiveCpltCallback:
 2418              	.LFB87:
1748:src/stm32f1xx_hal_smartcard.c ****     /* Prevent unused argument(s) compilation warning */
 2419              		.loc 1 1748 0
 2420              		.cfi_startproc
 2421              		@ args = 0, pretend = 0, frame = 0
 2422              		@ frame_needed = 0, uses_anonymous_args = 0
 2423              		@ link register save eliminated.
 2424              	.LVL198:
 2425 08b4 7047     		bx	lr	@
 2426              		.cfi_endproc
 2427              	.LFE87:
 2428              		.size	HAL_SMARTCARD_AbortReceiveCpltCallback, .-HAL_SMARTCARD_AbortReceiveCpltCallback
 2429              		.align	1
 2430              		.global	HAL_SMARTCARD_AbortReceive_IT
 2431              		.syntax unified
 2432              		.thumb
 2433              		.thumb_func
 2434              		.fpu softvfp
 2435              		.type	HAL_SMARTCARD_AbortReceive_IT, %function
 2436              	HAL_SMARTCARD_AbortReceive_IT:
 2437              	.LFB80:
1459:src/stm32f1xx_hal_smartcard.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2438              		.loc 1 1459 0
 2439              		.cfi_startproc
 2440              		@ args = 0, pretend = 0, frame = 0
 2441              		@ frame_needed = 0, uses_anonymous_args = 0
 2442              	.LVL199:
1461:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 2443              		.loc 1 1461 0
 2444 08b6 0368     		ldr	r3, [r0]	@ _4, hsc_3(D)->Instance
ARM GAS  /tmp/ccvrs2bU.s 			page 94


1459:src/stm32f1xx_hal_smartcard.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2445              		.loc 1 1459 0
 2446 08b8 10B5     		push	{r4, lr}	@
 2447              	.LCFI26:
 2448              		.cfi_def_cfa_offset 8
 2449              		.cfi_offset 4, -8
 2450              		.cfi_offset 14, -4
1461:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 2451              		.loc 1 1461 0
 2452 08ba DA68     		ldr	r2, [r3, #12]	@ _5, _4->CR1
1459:src/stm32f1xx_hal_smartcard.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2453              		.loc 1 1459 0
 2454 08bc 0446     		mov	r4, r0	@ hsc, hsc
1461:src/stm32f1xx_hal_smartcard.c ****   CLEAR_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 2455              		.loc 1 1461 0
 2456 08be 22F49072 		bic	r2, r2, #288	@ _6, _5,
 2457 08c2 DA60     		str	r2, [r3, #12]	@ _6, _4->CR1
1462:src/stm32f1xx_hal_smartcard.c **** 
 2458              		.loc 1 1462 0
 2459 08c4 5A69     		ldr	r2, [r3, #20]	@ _8, _4->CR3
 2460 08c6 22F00102 		bic	r2, r2, #1	@ _9, _8,
 2461 08ca 5A61     		str	r2, [r3, #20]	@ _9, _4->CR3
1465:src/stm32f1xx_hal_smartcard.c ****   {
 2462              		.loc 1 1465 0
 2463 08cc 5A69     		ldr	r2, [r3, #20]	@ _11, _4->CR3
 2464 08ce 12F04002 		ands	r2, r2, #64	@ tmp125, _11,
 2465 08d2 17D0     		beq	.L254	@,
1467:src/stm32f1xx_hal_smartcard.c **** 
 2466              		.loc 1 1467 0
 2467 08d4 5A69     		ldr	r2, [r3, #20]	@ _13, _4->CR3
 2468 08d6 22F04002 		bic	r2, r2, #64	@ _14, _13,
 2469 08da 5A61     		str	r2, [r3, #20]	@ _14, _4->CR3
1470:src/stm32f1xx_hal_smartcard.c ****     {
 2470              		.loc 1 1470 0
 2471 08dc 436C     		ldr	r3, [r0, #68]	@ _16, hsc_3(D)->hdmarx
 2472 08de 53B1     		cbz	r3, .L255	@ _16,
1474:src/stm32f1xx_hal_smartcard.c **** 
 2473              		.loc 1 1474 0
 2474 08e0 094A     		ldr	r2, .L261	@ tmp126,
1477:src/stm32f1xx_hal_smartcard.c ****       {
 2475              		.loc 1 1477 0
 2476 08e2 1846     		mov	r0, r3	@, _16
 2477              	.LVL200:
1474:src/stm32f1xx_hal_smartcard.c **** 
 2478              		.loc 1 1474 0
 2479 08e4 5A63     		str	r2, [r3, #52]	@ tmp126, _16->XferAbortCallback
1477:src/stm32f1xx_hal_smartcard.c ****       {
 2480              		.loc 1 1477 0
 2481 08e6 FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 2482              	.LVL201:
 2483 08ea 10B1     		cbz	r0, .L256	@,
1480:src/stm32f1xx_hal_smartcard.c ****       }
 2484              		.loc 1 1480 0
 2485 08ec 606C     		ldr	r0, [r4, #68]	@ _23, hsc_3(D)->hdmarx
 2486 08ee 436B     		ldr	r3, [r0, #52]	@ _23->XferAbortCallback, _23->XferAbortCallback
 2487 08f0 9847     		blx	r3	@ _23->XferAbortCallback
 2488              	.LVL202:
ARM GAS  /tmp/ccvrs2bU.s 			page 95


 2489              	.L256:
1520:src/stm32f1xx_hal_smartcard.c **** 
 2490              		.loc 1 1520 0
 2491 08f2 0020     		movs	r0, #0	@,
 2492 08f4 10BD     		pop	{r4, pc}	@
 2493              	.LVL203:
 2494              	.L255:
1486:src/stm32f1xx_hal_smartcard.c **** 
 2495              		.loc 1 1486 0
 2496 08f6 C387     		strh	r3, [r0, #62]	@ movhi	@ _16, hsc_3(D)->RxXferCount
 2497              	.L260:
1507:src/stm32f1xx_hal_smartcard.c **** 
 2498              		.loc 1 1507 0
 2499 08f8 2023     		movs	r3, #32	@ tmp135,
 2500 08fa 84F84A30 		strb	r3, [r4, #74]	@ tmp135,
1515:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
 2501              		.loc 1 1515 0
 2502 08fe FFF7FEFF 		bl	HAL_SMARTCARD_AbortReceiveCpltCallback	@
 2503              	.LVL204:
 2504 0902 F6E7     		b	.L256	@
 2505              	.LVL205:
 2506              	.L254:
1504:src/stm32f1xx_hal_smartcard.c **** 
 2507              		.loc 1 1504 0
 2508 0904 C287     		strh	r2, [r0, #62]	@ movhi	@ tmp125, hsc_3(D)->RxXferCount
 2509 0906 F7E7     		b	.L260	@
 2510              	.L262:
 2511              		.align	2
 2512              	.L261:
 2513 0908 00000000 		.word	SMARTCARD_DMARxOnlyAbortCallback
 2514              		.cfi_endproc
 2515              	.LFE80:
 2516              		.size	HAL_SMARTCARD_AbortReceive_IT, .-HAL_SMARTCARD_AbortReceive_IT
 2517              		.align	1
 2518              		.syntax unified
 2519              		.thumb
 2520              		.thumb_func
 2521              		.fpu softvfp
 2522              		.type	SMARTCARD_DMARxOnlyAbortCallback, %function
 2523              	SMARTCARD_DMARxOnlyAbortCallback:
 2524              	.LFB103:
2243:src/stm32f1xx_hal_smartcard.c ****   SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2525              		.loc 1 2243 0
 2526              		.cfi_startproc
 2527              		@ args = 0, pretend = 0, frame = 0
 2528              		@ frame_needed = 0, uses_anonymous_args = 0
 2529              	.LVL206:
 2530 090c 08B5     		push	{r3, lr}	@
 2531              	.LCFI27:
 2532              		.cfi_def_cfa_offset 8
 2533              		.cfi_offset 3, -8
 2534              		.cfi_offset 14, -4
2246:src/stm32f1xx_hal_smartcard.c **** 
 2535              		.loc 1 2246 0
 2536 090e 0023     		movs	r3, #0	@ tmp113,
2244:src/stm32f1xx_hal_smartcard.c **** 
 2537              		.loc 1 2244 0
ARM GAS  /tmp/ccvrs2bU.s 			page 96


 2538 0910 406A     		ldr	r0, [r0, #36]	@ hsc, hdma_2(D)->Parent
 2539              	.LVL207:
2246:src/stm32f1xx_hal_smartcard.c **** 
 2540              		.loc 1 2246 0
 2541 0912 C387     		strh	r3, [r0, #62]	@ movhi	@ tmp113, hsc_3->RxXferCount
2249:src/stm32f1xx_hal_smartcard.c **** 
 2542              		.loc 1 2249 0
 2543 0914 2023     		movs	r3, #32	@ tmp114,
 2544 0916 80F84A30 		strb	r3, [r0, #74]	@ tmp114, hsc_3->RxState
2256:src/stm32f1xx_hal_smartcard.c **** #endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACK */
 2545              		.loc 1 2256 0
 2546 091a FFF7FEFF 		bl	HAL_SMARTCARD_AbortReceiveCpltCallback	@
 2547              	.LVL208:
 2548 091e 08BD     		pop	{r3, pc}	@
 2549              		.cfi_endproc
 2550              	.LFE103:
 2551              		.size	SMARTCARD_DMARxOnlyAbortCallback, .-SMARTCARD_DMARxOnlyAbortCallback
 2552              		.align	1
 2553              		.global	HAL_SMARTCARD_GetState
 2554              		.syntax unified
 2555              		.thumb
 2556              		.thumb_func
 2557              		.fpu softvfp
 2558              		.type	HAL_SMARTCARD_GetState, %function
 2559              	HAL_SMARTCARD_GetState:
 2560              	.LFB88:
1783:src/stm32f1xx_hal_smartcard.c ****   uint32_t temp1= 0x00U, temp2 = 0x00U;
 2561              		.loc 1 1783 0
 2562              		.cfi_startproc
 2563              		@ args = 0, pretend = 0, frame = 0
 2564              		@ frame_needed = 0, uses_anonymous_args = 0
 2565              		@ link register save eliminated.
 2566              	.LVL209:
1785:src/stm32f1xx_hal_smartcard.c ****   temp2 = hsc->RxState;
 2567              		.loc 1 1785 0
 2568 0920 90F84920 		ldrb	r2, [r0, #73]	@ zero_extendqisi2	@ hsc_2(D)->gState, hsc_2(D)->gState
 2569              	.LVL210:
1786:src/stm32f1xx_hal_smartcard.c **** 
 2570              		.loc 1 1786 0
 2571 0924 90F84A00 		ldrb	r0, [r0, #74]	@ zero_extendqisi2	@ hsc_2(D)->RxState, hsc_2(D)->RxState
 2572              	.LVL211:
1789:src/stm32f1xx_hal_smartcard.c **** 
 2573              		.loc 1 1789 0
 2574 0928 1043     		orrs	r0, r0, r2	@,, hsc_2(D)->RxState, hsc_2(D)->gState
 2575              	.LVL212:
 2576 092a 7047     		bx	lr	@
 2577              		.cfi_endproc
 2578              	.LFE88:
 2579              		.size	HAL_SMARTCARD_GetState, .-HAL_SMARTCARD_GetState
 2580              		.align	1
 2581              		.global	HAL_SMARTCARD_GetError
 2582              		.syntax unified
 2583              		.thumb
 2584              		.thumb_func
 2585              		.fpu softvfp
 2586              		.type	HAL_SMARTCARD_GetError, %function
 2587              	HAL_SMARTCARD_GetError:
ARM GAS  /tmp/ccvrs2bU.s 			page 97


 2588              	.LFB89:
1798:src/stm32f1xx_hal_smartcard.c ****   return hsc->ErrorCode;
 2589              		.loc 1 1798 0
 2590              		.cfi_startproc
 2591              		@ args = 0, pretend = 0, frame = 0
 2592              		@ frame_needed = 0, uses_anonymous_args = 0
 2593              		@ link register save eliminated.
 2594              	.LVL213:
1799:src/stm32f1xx_hal_smartcard.c **** }
 2595              		.loc 1 1799 0
 2596 092c C06C     		ldr	r0, [r0, #76]	@ <retval>, hsc_2(D)->ErrorCode
 2597              	.LVL214:
1800:src/stm32f1xx_hal_smartcard.c **** 
 2598              		.loc 1 1800 0
 2599 092e 7047     		bx	lr	@
 2600              		.cfi_endproc
 2601              	.LFE89:
 2602              		.size	HAL_SMARTCARD_GetError, .-HAL_SMARTCARD_GetError
 2603              	.Letext0:
 2604              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2605              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2606              		.file 4 "../cmsiscore/inc/core_cm3.h"
 2607              		.file 5 "../cmsisstm32f1xx/inc/system_stm32f1xx.h"
 2608              		.file 6 "../cmsisstm32f1xx/inc/stm32f103x6.h"
 2609              		.file 7 "../cmsisstm32f1xx/inc/stm32f1xx.h"
 2610              		.file 8 "./inc/stm32f1xx_hal_def.h"
 2611              		.file 9 "./inc/stm32f1xx_hal_dma.h"
 2612              		.file 10 "./inc/stm32f1xx_hal_smartcard.h"
 2613              		.file 11 "./inc/stm32f1xx_hal.h"
 2614              		.file 12 "./inc/stm32f1xx_hal_rcc.h"
 2615              		.section	.debug_info,"",%progbits
 2616              	.Ldebug_info0:
 2617 0000 93130000 		.4byte	0x1393
 2618 0004 0200     		.2byte	0x2
 2619 0006 00000000 		.4byte	.Ldebug_abbrev0
 2620 000a 04       		.byte	0x4
 2621 000b 01       		.uleb128 0x1
 2622 000c FD070000 		.4byte	.LASF169
 2623 0010 0C       		.byte	0xc
 2624 0011 2A010000 		.4byte	.LASF170
 2625 0015 01070000 		.4byte	.LASF171
 2626 0019 00000000 		.4byte	.Ltext0
 2627 001d 30090000 		.4byte	.Letext0
 2628 0021 00000000 		.4byte	.Ldebug_line0
 2629 0025 02       		.uleb128 0x2
 2630 0026 01       		.byte	0x1
 2631 0027 06       		.byte	0x6
 2632 0028 73010000 		.4byte	.LASF0
 2633 002c 03       		.uleb128 0x3
 2634 002d 9A000000 		.4byte	.LASF3
 2635 0031 02       		.byte	0x2
 2636 0032 1D       		.byte	0x1d
 2637 0033 37000000 		.4byte	0x37
 2638 0037 02       		.uleb128 0x2
 2639 0038 01       		.byte	0x1
 2640 0039 08       		.byte	0x8
 2641 003a 35070000 		.4byte	.LASF1
ARM GAS  /tmp/ccvrs2bU.s 			page 98


 2642 003e 02       		.uleb128 0x2
 2643 003f 02       		.byte	0x2
 2644 0040 05       		.byte	0x5
 2645 0041 C2070000 		.4byte	.LASF2
 2646 0045 03       		.uleb128 0x3
 2647 0046 32090000 		.4byte	.LASF4
 2648 004a 02       		.byte	0x2
 2649 004b 2B       		.byte	0x2b
 2650 004c 50000000 		.4byte	0x50
 2651 0050 02       		.uleb128 0x2
 2652 0051 02       		.byte	0x2
 2653 0052 07       		.byte	0x7
 2654 0053 34040000 		.4byte	.LASF5
 2655 0057 03       		.uleb128 0x3
 2656 0058 3F050000 		.4byte	.LASF6
 2657 005c 02       		.byte	0x2
 2658 005d 3F       		.byte	0x3f
 2659 005e 62000000 		.4byte	0x62
 2660 0062 02       		.uleb128 0x2
 2661 0063 04       		.byte	0x4
 2662 0064 05       		.byte	0x5
 2663 0065 25020000 		.4byte	.LASF7
 2664 0069 03       		.uleb128 0x3
 2665 006a 20030000 		.4byte	.LASF8
 2666 006e 02       		.byte	0x2
 2667 006f 41       		.byte	0x41
 2668 0070 74000000 		.4byte	0x74
 2669 0074 02       		.uleb128 0x2
 2670 0075 04       		.byte	0x4
 2671 0076 07       		.byte	0x7
 2672 0077 A4030000 		.4byte	.LASF9
 2673 007b 02       		.uleb128 0x2
 2674 007c 08       		.byte	0x8
 2675 007d 05       		.byte	0x5
 2676 007e 65010000 		.4byte	.LASF10
 2677 0082 02       		.uleb128 0x2
 2678 0083 08       		.byte	0x8
 2679 0084 07       		.byte	0x7
 2680 0085 ED000000 		.4byte	.LASF11
 2681 0089 04       		.uleb128 0x4
 2682 008a 04       		.byte	0x4
 2683 008b 05       		.byte	0x5
 2684 008c 696E7400 		.ascii	"int\000"
 2685 0090 02       		.uleb128 0x2
 2686 0091 04       		.byte	0x4
 2687 0092 07       		.byte	0x7
 2688 0093 50030000 		.4byte	.LASF12
 2689 0097 03       		.uleb128 0x3
 2690 0098 8D0A0000 		.4byte	.LASF13
 2691 009c 03       		.byte	0x3
 2692 009d 18       		.byte	0x18
 2693 009e 2C000000 		.4byte	0x2c
 2694 00a2 05       		.uleb128 0x5
 2695 00a3 97000000 		.4byte	0x97
 2696 00a7 03       		.uleb128 0x3
 2697 00a8 63020000 		.4byte	.LASF14
 2698 00ac 03       		.byte	0x3
ARM GAS  /tmp/ccvrs2bU.s 			page 99


 2699 00ad 24       		.byte	0x24
 2700 00ae 45000000 		.4byte	0x45
 2701 00b2 06       		.uleb128 0x6
 2702 00b3 A7000000 		.4byte	0xa7
 2703 00b7 03       		.uleb128 0x3
 2704 00b8 2D070000 		.4byte	.LASF15
 2705 00bc 03       		.byte	0x3
 2706 00bd 2C       		.byte	0x2c
 2707 00be 57000000 		.4byte	0x57
 2708 00c2 06       		.uleb128 0x6
 2709 00c3 B7000000 		.4byte	0xb7
 2710 00c7 03       		.uleb128 0x3
 2711 00c8 C3080000 		.4byte	.LASF16
 2712 00cc 03       		.byte	0x3
 2713 00cd 30       		.byte	0x30
 2714 00ce 69000000 		.4byte	0x69
 2715 00d2 06       		.uleb128 0x6
 2716 00d3 C7000000 		.4byte	0xc7
 2717 00d7 02       		.uleb128 0x2
 2718 00d8 04       		.byte	0x4
 2719 00d9 07       		.byte	0x7
 2720 00da C8050000 		.4byte	.LASF17
 2721 00de 07       		.uleb128 0x7
 2722 00df 17010000 		.4byte	.LASF18
 2723 00e3 04       		.byte	0x4
 2724 00e4 4807     		.2byte	0x748
 2725 00e6 C2000000 		.4byte	0xc2
 2726 00ea 01       		.byte	0x1
 2727 00eb 01       		.byte	0x1
 2728 00ec 08       		.uleb128 0x8
 2729 00ed 71030000 		.4byte	.LASF19
 2730 00f1 05       		.byte	0x5
 2731 00f2 33       		.byte	0x33
 2732 00f3 C7000000 		.4byte	0xc7
 2733 00f7 01       		.byte	0x1
 2734 00f8 01       		.byte	0x1
 2735 00f9 09       		.uleb128 0x9
 2736 00fa A2000000 		.4byte	0xa2
 2737 00fe 09010000 		.4byte	0x109
 2738 0102 0A       		.uleb128 0xa
 2739 0103 D7000000 		.4byte	0xd7
 2740 0107 0F       		.byte	0xf
 2741 0108 00       		.byte	0
 2742 0109 05       		.uleb128 0x5
 2743 010a F9000000 		.4byte	0xf9
 2744 010e 08       		.uleb128 0x8
 2745 010f 11050000 		.4byte	.LASF20
 2746 0113 05       		.byte	0x5
 2747 0114 34       		.byte	0x34
 2748 0115 09010000 		.4byte	0x109
 2749 0119 01       		.byte	0x1
 2750 011a 01       		.byte	0x1
 2751 011b 09       		.uleb128 0x9
 2752 011c A2000000 		.4byte	0xa2
 2753 0120 2B010000 		.4byte	0x12b
 2754 0124 0A       		.uleb128 0xa
 2755 0125 D7000000 		.4byte	0xd7
ARM GAS  /tmp/ccvrs2bU.s 			page 100


 2756 0129 07       		.byte	0x7
 2757 012a 00       		.byte	0
 2758 012b 05       		.uleb128 0x5
 2759 012c 1B010000 		.4byte	0x11b
 2760 0130 08       		.uleb128 0x8
 2761 0131 13060000 		.4byte	.LASF21
 2762 0135 05       		.byte	0x5
 2763 0136 35       		.byte	0x35
 2764 0137 2B010000 		.4byte	0x12b
 2765 013b 01       		.byte	0x1
 2766 013c 01       		.byte	0x1
 2767 013d 0B       		.uleb128 0xb
 2768 013e 10       		.byte	0x10
 2769 013f 06       		.byte	0x6
 2770 0140 1E01     		.2byte	0x11e
 2771 0142 83010000 		.4byte	0x183
 2772 0146 0C       		.uleb128 0xc
 2773 0147 43435200 		.ascii	"CCR\000"
 2774 014b 06       		.byte	0x6
 2775 014c 2001     		.2byte	0x120
 2776 014e D2000000 		.4byte	0xd2
 2777 0152 02       		.byte	0x2
 2778 0153 23       		.byte	0x23
 2779 0154 00       		.uleb128 0
 2780 0155 0D       		.uleb128 0xd
 2781 0156 400A0000 		.4byte	.LASF22
 2782 015a 06       		.byte	0x6
 2783 015b 2101     		.2byte	0x121
 2784 015d D2000000 		.4byte	0xd2
 2785 0161 02       		.byte	0x2
 2786 0162 23       		.byte	0x23
 2787 0163 04       		.uleb128 0x4
 2788 0164 0D       		.uleb128 0xd
 2789 0165 93030000 		.4byte	.LASF23
 2790 0169 06       		.byte	0x6
 2791 016a 2201     		.2byte	0x122
 2792 016c D2000000 		.4byte	0xd2
 2793 0170 02       		.byte	0x2
 2794 0171 23       		.byte	0x23
 2795 0172 08       		.uleb128 0x8
 2796 0173 0D       		.uleb128 0xd
 2797 0174 460A0000 		.4byte	.LASF24
 2798 0178 06       		.byte	0x6
 2799 0179 2301     		.2byte	0x123
 2800 017b D2000000 		.4byte	0xd2
 2801 017f 02       		.byte	0x2
 2802 0180 23       		.byte	0x23
 2803 0181 0C       		.uleb128 0xc
 2804 0182 00       		.byte	0
 2805 0183 0E       		.uleb128 0xe
 2806 0184 75060000 		.4byte	.LASF25
 2807 0188 06       		.byte	0x6
 2808 0189 2401     		.2byte	0x124
 2809 018b 3D010000 		.4byte	0x13d
 2810 018f 0B       		.uleb128 0xb
 2811 0190 08       		.byte	0x8
 2812 0191 06       		.byte	0x6
ARM GAS  /tmp/ccvrs2bU.s 			page 101


 2813 0192 2601     		.2byte	0x126
 2814 0194 B7010000 		.4byte	0x1b7
 2815 0198 0C       		.uleb128 0xc
 2816 0199 49535200 		.ascii	"ISR\000"
 2817 019d 06       		.byte	0x6
 2818 019e 2801     		.2byte	0x128
 2819 01a0 D2000000 		.4byte	0xd2
 2820 01a4 02       		.byte	0x2
 2821 01a5 23       		.byte	0x23
 2822 01a6 00       		.uleb128 0
 2823 01a7 0D       		.uleb128 0xd
 2824 01a8 FD080000 		.4byte	.LASF26
 2825 01ac 06       		.byte	0x6
 2826 01ad 2901     		.2byte	0x129
 2827 01af D2000000 		.4byte	0xd2
 2828 01b3 02       		.byte	0x2
 2829 01b4 23       		.byte	0x23
 2830 01b5 04       		.uleb128 0x4
 2831 01b6 00       		.byte	0
 2832 01b7 0E       		.uleb128 0xe
 2833 01b8 2B030000 		.4byte	.LASF27
 2834 01bc 06       		.byte	0x6
 2835 01bd 2A01     		.2byte	0x12a
 2836 01bf 8F010000 		.4byte	0x18f
 2837 01c3 0B       		.uleb128 0xb
 2838 01c4 1C       		.byte	0x1c
 2839 01c5 06       		.byte	0x6
 2840 01c6 F601     		.2byte	0x1f6
 2841 01c8 34020000 		.4byte	0x234
 2842 01cc 0C       		.uleb128 0xc
 2843 01cd 535200   		.ascii	"SR\000"
 2844 01d0 06       		.byte	0x6
 2845 01d1 F801     		.2byte	0x1f8
 2846 01d3 D2000000 		.4byte	0xd2
 2847 01d7 02       		.byte	0x2
 2848 01d8 23       		.byte	0x23
 2849 01d9 00       		.uleb128 0
 2850 01da 0C       		.uleb128 0xc
 2851 01db 445200   		.ascii	"DR\000"
 2852 01de 06       		.byte	0x6
 2853 01df F901     		.2byte	0x1f9
 2854 01e1 D2000000 		.4byte	0xd2
 2855 01e5 02       		.byte	0x2
 2856 01e6 23       		.byte	0x23
 2857 01e7 04       		.uleb128 0x4
 2858 01e8 0C       		.uleb128 0xc
 2859 01e9 42525200 		.ascii	"BRR\000"
 2860 01ed 06       		.byte	0x6
 2861 01ee FA01     		.2byte	0x1fa
 2862 01f0 D2000000 		.4byte	0xd2
 2863 01f4 02       		.byte	0x2
 2864 01f5 23       		.byte	0x23
 2865 01f6 08       		.uleb128 0x8
 2866 01f7 0C       		.uleb128 0xc
 2867 01f8 43523100 		.ascii	"CR1\000"
 2868 01fc 06       		.byte	0x6
 2869 01fd FB01     		.2byte	0x1fb
ARM GAS  /tmp/ccvrs2bU.s 			page 102


 2870 01ff D2000000 		.4byte	0xd2
 2871 0203 02       		.byte	0x2
 2872 0204 23       		.byte	0x23
 2873 0205 0C       		.uleb128 0xc
 2874 0206 0C       		.uleb128 0xc
 2875 0207 43523200 		.ascii	"CR2\000"
 2876 020b 06       		.byte	0x6
 2877 020c FC01     		.2byte	0x1fc
 2878 020e D2000000 		.4byte	0xd2
 2879 0212 02       		.byte	0x2
 2880 0213 23       		.byte	0x23
 2881 0214 10       		.uleb128 0x10
 2882 0215 0C       		.uleb128 0xc
 2883 0216 43523300 		.ascii	"CR3\000"
 2884 021a 06       		.byte	0x6
 2885 021b FD01     		.2byte	0x1fd
 2886 021d D2000000 		.4byte	0xd2
 2887 0221 02       		.byte	0x2
 2888 0222 23       		.byte	0x23
 2889 0223 14       		.uleb128 0x14
 2890 0224 0D       		.uleb128 0xd
 2891 0225 B6010000 		.4byte	.LASF28
 2892 0229 06       		.byte	0x6
 2893 022a FE01     		.2byte	0x1fe
 2894 022c D2000000 		.4byte	0xd2
 2895 0230 02       		.byte	0x2
 2896 0231 23       		.byte	0x23
 2897 0232 18       		.uleb128 0x18
 2898 0233 00       		.byte	0
 2899 0234 0E       		.uleb128 0xe
 2900 0235 E3040000 		.4byte	.LASF29
 2901 0239 06       		.byte	0x6
 2902 023a FF01     		.2byte	0x1ff
 2903 023c C3010000 		.4byte	0x1c3
 2904 0240 0F       		.uleb128 0xf
 2905 0241 01       		.byte	0x1
 2906 0242 37000000 		.4byte	0x37
 2907 0246 07       		.byte	0x7
 2908 0247 98       		.byte	0x98
 2909 0248 59020000 		.4byte	0x259
 2910 024c 10       		.uleb128 0x10
 2911 024d A9050000 		.4byte	.LASF30
 2912 0251 00       		.byte	0
 2913 0252 11       		.uleb128 0x11
 2914 0253 53455400 		.ascii	"SET\000"
 2915 0257 01       		.byte	0x1
 2916 0258 00       		.byte	0
 2917 0259 03       		.uleb128 0x3
 2918 025a 65000000 		.4byte	.LASF31
 2919 025e 07       		.byte	0x7
 2920 025f 9B       		.byte	0x9b
 2921 0260 40020000 		.4byte	0x240
 2922 0264 02       		.uleb128 0x2
 2923 0265 08       		.byte	0x8
 2924 0266 04       		.byte	0x4
 2925 0267 DD050000 		.4byte	.LASF32
 2926 026b 0F       		.uleb128 0xf
ARM GAS  /tmp/ccvrs2bU.s 			page 103


 2927 026c 01       		.byte	0x1
 2928 026d 37000000 		.4byte	0x37
 2929 0271 08       		.byte	0x8
 2930 0272 2A       		.byte	0x2a
 2931 0273 90020000 		.4byte	0x290
 2932 0277 10       		.uleb128 0x10
 2933 0278 F1030000 		.4byte	.LASF33
 2934 027c 00       		.byte	0
 2935 027d 10       		.uleb128 0x10
 2936 027e E2080000 		.4byte	.LASF34
 2937 0282 01       		.byte	0x1
 2938 0283 10       		.uleb128 0x10
 2939 0284 A4000000 		.4byte	.LASF35
 2940 0288 02       		.byte	0x2
 2941 0289 10       		.uleb128 0x10
 2942 028a 98030000 		.4byte	.LASF36
 2943 028e 03       		.byte	0x3
 2944 028f 00       		.byte	0
 2945 0290 03       		.uleb128 0x3
 2946 0291 F1040000 		.4byte	.LASF37
 2947 0295 08       		.byte	0x8
 2948 0296 2F       		.byte	0x2f
 2949 0297 6B020000 		.4byte	0x26b
 2950 029b 0F       		.uleb128 0xf
 2951 029c 01       		.byte	0x1
 2952 029d 37000000 		.4byte	0x37
 2953 02a1 08       		.byte	0x8
 2954 02a2 35       		.byte	0x35
 2955 02a3 B4020000 		.4byte	0x2b4
 2956 02a7 10       		.uleb128 0x10
 2957 02a8 F70A0000 		.4byte	.LASF38
 2958 02ac 00       		.byte	0
 2959 02ad 10       		.uleb128 0x10
 2960 02ae 08060000 		.4byte	.LASF39
 2961 02b2 01       		.byte	0x1
 2962 02b3 00       		.byte	0
 2963 02b4 03       		.uleb128 0x3
 2964 02b5 F6010000 		.4byte	.LASF40
 2965 02b9 08       		.byte	0x8
 2966 02ba 38       		.byte	0x38
 2967 02bb 9B020000 		.4byte	0x29b
 2968 02bf 12       		.uleb128 0x12
 2969 02c0 1C       		.byte	0x1c
 2970 02c1 09       		.byte	0x9
 2971 02c2 30       		.byte	0x30
 2972 02c3 2A030000 		.4byte	0x32a
 2973 02c7 13       		.uleb128 0x13
 2974 02c8 E9020000 		.4byte	.LASF41
 2975 02cc 09       		.byte	0x9
 2976 02cd 32       		.byte	0x32
 2977 02ce C7000000 		.4byte	0xc7
 2978 02d2 02       		.byte	0x2
 2979 02d3 23       		.byte	0x23
 2980 02d4 00       		.uleb128 0
 2981 02d5 13       		.uleb128 0x13
 2982 02d6 54020000 		.4byte	.LASF42
 2983 02da 09       		.byte	0x9
ARM GAS  /tmp/ccvrs2bU.s 			page 104


 2984 02db 36       		.byte	0x36
 2985 02dc C7000000 		.4byte	0xc7
 2986 02e0 02       		.byte	0x2
 2987 02e1 23       		.byte	0x23
 2988 02e2 04       		.uleb128 0x4
 2989 02e3 13       		.uleb128 0x13
 2990 02e4 F6070000 		.4byte	.LASF43
 2991 02e8 09       		.byte	0x9
 2992 02e9 39       		.byte	0x39
 2993 02ea C7000000 		.4byte	0xc7
 2994 02ee 02       		.byte	0x2
 2995 02ef 23       		.byte	0x23
 2996 02f0 08       		.uleb128 0x8
 2997 02f1 13       		.uleb128 0x13
 2998 02f2 E7090000 		.4byte	.LASF44
 2999 02f6 09       		.byte	0x9
 3000 02f7 3C       		.byte	0x3c
 3001 02f8 C7000000 		.4byte	0xc7
 3002 02fc 02       		.byte	0x2
 3003 02fd 23       		.byte	0x23
 3004 02fe 0C       		.uleb128 0xc
 3005 02ff 13       		.uleb128 0x13
 3006 0300 D2040000 		.4byte	.LASF45
 3007 0304 09       		.byte	0x9
 3008 0305 3F       		.byte	0x3f
 3009 0306 C7000000 		.4byte	0xc7
 3010 030a 02       		.byte	0x2
 3011 030b 23       		.byte	0x23
 3012 030c 10       		.uleb128 0x10
 3013 030d 13       		.uleb128 0x13
 3014 030e 2D090000 		.4byte	.LASF46
 3015 0312 09       		.byte	0x9
 3016 0313 42       		.byte	0x42
 3017 0314 C7000000 		.4byte	0xc7
 3018 0318 02       		.byte	0x2
 3019 0319 23       		.byte	0x23
 3020 031a 14       		.uleb128 0x14
 3021 031b 13       		.uleb128 0x13
 3022 031c 790A0000 		.4byte	.LASF47
 3023 0320 09       		.byte	0x9
 3024 0321 47       		.byte	0x47
 3025 0322 C7000000 		.4byte	0xc7
 3026 0326 02       		.byte	0x2
 3027 0327 23       		.byte	0x23
 3028 0328 18       		.uleb128 0x18
 3029 0329 00       		.byte	0
 3030 032a 03       		.uleb128 0x3
 3031 032b 70000000 		.4byte	.LASF48
 3032 032f 09       		.byte	0x9
 3033 0330 49       		.byte	0x49
 3034 0331 BF020000 		.4byte	0x2bf
 3035 0335 0F       		.uleb128 0xf
 3036 0336 01       		.byte	0x1
 3037 0337 37000000 		.4byte	0x37
 3038 033b 09       		.byte	0x9
 3039 033c 4F       		.byte	0x4f
 3040 033d 5A030000 		.4byte	0x35a
ARM GAS  /tmp/ccvrs2bU.s 			page 105


 3041 0341 10       		.uleb128 0x10
 3042 0342 5D030000 		.4byte	.LASF49
 3043 0346 00       		.byte	0
 3044 0347 10       		.uleb128 0x10
 3045 0348 49050000 		.4byte	.LASF50
 3046 034c 01       		.byte	0x1
 3047 034d 10       		.uleb128 0x10
 3048 034e C0000000 		.4byte	.LASF51
 3049 0352 02       		.byte	0x2
 3050 0353 10       		.uleb128 0x10
 3051 0354 630A0000 		.4byte	.LASF52
 3052 0358 03       		.byte	0x3
 3053 0359 00       		.byte	0
 3054 035a 03       		.uleb128 0x3
 3055 035b AD070000 		.4byte	.LASF53
 3056 035f 09       		.byte	0x9
 3057 0360 54       		.byte	0x54
 3058 0361 35030000 		.4byte	0x335
 3059 0365 14       		.uleb128 0x14
 3060 0366 AF080000 		.4byte	.LASF87
 3061 036a 44       		.byte	0x44
 3062 036b 09       		.byte	0x9
 3063 036c 6F       		.byte	0x6f
 3064 036d 1A040000 		.4byte	0x41a
 3065 0371 13       		.uleb128 0x13
 3066 0372 9F060000 		.4byte	.LASF54
 3067 0376 09       		.byte	0x9
 3068 0377 71       		.byte	0x71
 3069 0378 1A040000 		.4byte	0x41a
 3070 037c 02       		.byte	0x2
 3071 037d 23       		.byte	0x23
 3072 037e 00       		.uleb128 0
 3073 037f 13       		.uleb128 0x13
 3074 0380 89060000 		.4byte	.LASF55
 3075 0384 09       		.byte	0x9
 3076 0385 73       		.byte	0x73
 3077 0386 2A030000 		.4byte	0x32a
 3078 038a 02       		.byte	0x2
 3079 038b 23       		.byte	0x23
 3080 038c 04       		.uleb128 0x4
 3081 038d 13       		.uleb128 0x13
 3082 038e C0020000 		.4byte	.LASF56
 3083 0392 09       		.byte	0x9
 3084 0393 75       		.byte	0x75
 3085 0394 B4020000 		.4byte	0x2b4
 3086 0398 02       		.byte	0x2
 3087 0399 23       		.byte	0x23
 3088 039a 20       		.uleb128 0x20
 3089 039b 13       		.uleb128 0x13
 3090 039c 27090000 		.4byte	.LASF57
 3091 03a0 09       		.byte	0x9
 3092 03a1 77       		.byte	0x77
 3093 03a2 5A030000 		.4byte	0x35a
 3094 03a6 02       		.byte	0x2
 3095 03a7 23       		.byte	0x23
 3096 03a8 21       		.uleb128 0x21
 3097 03a9 13       		.uleb128 0x13
ARM GAS  /tmp/ccvrs2bU.s 			page 106


 3098 03aa B9020000 		.4byte	.LASF58
 3099 03ae 09       		.byte	0x9
 3100 03af 79       		.byte	0x79
 3101 03b0 20040000 		.4byte	0x420
 3102 03b4 02       		.byte	0x2
 3103 03b5 23       		.byte	0x23
 3104 03b6 24       		.uleb128 0x24
 3105 03b7 13       		.uleb128 0x13
 3106 03b8 610B0000 		.4byte	.LASF59
 3107 03bc 09       		.byte	0x9
 3108 03bd 7B       		.byte	0x7b
 3109 03be 34040000 		.4byte	0x434
 3110 03c2 02       		.byte	0x2
 3111 03c3 23       		.byte	0x23
 3112 03c4 28       		.uleb128 0x28
 3113 03c5 13       		.uleb128 0x13
 3114 03c6 10020000 		.4byte	.LASF60
 3115 03ca 09       		.byte	0x9
 3116 03cb 7D       		.byte	0x7d
 3117 03cc 34040000 		.4byte	0x434
 3118 03d0 02       		.byte	0x2
 3119 03d1 23       		.byte	0x23
 3120 03d2 2C       		.uleb128 0x2c
 3121 03d3 13       		.uleb128 0x13
 3122 03d4 3F060000 		.4byte	.LASF61
 3123 03d8 09       		.byte	0x9
 3124 03d9 7F       		.byte	0x7f
 3125 03da 34040000 		.4byte	0x434
 3126 03de 02       		.byte	0x2
 3127 03df 23       		.byte	0x23
 3128 03e0 30       		.uleb128 0x30
 3129 03e1 13       		.uleb128 0x13
 3130 03e2 3B0B0000 		.4byte	.LASF62
 3131 03e6 09       		.byte	0x9
 3132 03e7 81       		.byte	0x81
 3133 03e8 34040000 		.4byte	0x434
 3134 03ec 02       		.byte	0x2
 3135 03ed 23       		.byte	0x23
 3136 03ee 34       		.uleb128 0x34
 3137 03ef 13       		.uleb128 0x13
 3138 03f0 A1040000 		.4byte	.LASF63
 3139 03f4 09       		.byte	0x9
 3140 03f5 83       		.byte	0x83
 3141 03f6 D2000000 		.4byte	0xd2
 3142 03fa 02       		.byte	0x2
 3143 03fb 23       		.byte	0x23
 3144 03fc 38       		.uleb128 0x38
 3145 03fd 13       		.uleb128 0x13
 3146 03fe 6E040000 		.4byte	.LASF64
 3147 0402 09       		.byte	0x9
 3148 0403 85       		.byte	0x85
 3149 0404 3A040000 		.4byte	0x43a
 3150 0408 02       		.byte	0x2
 3151 0409 23       		.byte	0x23
 3152 040a 3C       		.uleb128 0x3c
 3153 040b 13       		.uleb128 0x13
 3154 040c 0B0B0000 		.4byte	.LASF65
ARM GAS  /tmp/ccvrs2bU.s 			page 107


 3155 0410 09       		.byte	0x9
 3156 0411 87       		.byte	0x87
 3157 0412 C7000000 		.4byte	0xc7
 3158 0416 02       		.byte	0x2
 3159 0417 23       		.byte	0x23
 3160 0418 40       		.uleb128 0x40
 3161 0419 00       		.byte	0
 3162 041a 15       		.uleb128 0x15
 3163 041b 04       		.byte	0x4
 3164 041c 83010000 		.4byte	0x183
 3165 0420 16       		.uleb128 0x16
 3166 0421 04       		.byte	0x4
 3167 0422 17       		.uleb128 0x17
 3168 0423 01       		.byte	0x1
 3169 0424 2E040000 		.4byte	0x42e
 3170 0428 18       		.uleb128 0x18
 3171 0429 2E040000 		.4byte	0x42e
 3172 042d 00       		.byte	0
 3173 042e 15       		.uleb128 0x15
 3174 042f 04       		.byte	0x4
 3175 0430 65030000 		.4byte	0x365
 3176 0434 15       		.uleb128 0x15
 3177 0435 04       		.byte	0x4
 3178 0436 22040000 		.4byte	0x422
 3179 043a 15       		.uleb128 0x15
 3180 043b 04       		.byte	0x4
 3181 043c B7010000 		.4byte	0x1b7
 3182 0440 03       		.uleb128 0x3
 3183 0441 120A0000 		.4byte	.LASF66
 3184 0445 09       		.byte	0x9
 3185 0446 89       		.byte	0x89
 3186 0447 65030000 		.4byte	0x365
 3187 044b 15       		.uleb128 0x15
 3188 044c 04       		.byte	0x4
 3189 044d 40040000 		.4byte	0x440
 3190 0451 15       		.uleb128 0x15
 3191 0452 04       		.byte	0x4
 3192 0453 97000000 		.4byte	0x97
 3193 0457 15       		.uleb128 0x15
 3194 0458 04       		.byte	0x4
 3195 0459 34020000 		.4byte	0x234
 3196 045d 12       		.uleb128 0x12
 3197 045e 2C       		.byte	0x2c
 3198 045f 0A       		.byte	0xa
 3199 0460 2F       		.byte	0x2f
 3200 0461 00050000 		.4byte	0x500
 3201 0465 13       		.uleb128 0x13
 3202 0466 BB010000 		.4byte	.LASF67
 3203 046a 0A       		.byte	0xa
 3204 046b 31       		.byte	0x31
 3205 046c C7000000 		.4byte	0xc7
 3206 0470 02       		.byte	0x2
 3207 0471 23       		.byte	0x23
 3208 0472 00       		.uleb128 0
 3209 0473 13       		.uleb128 0x13
 3210 0474 AF050000 		.4byte	.LASF68
 3211 0478 0A       		.byte	0xa
ARM GAS  /tmp/ccvrs2bU.s 			page 108


 3212 0479 36       		.byte	0x36
 3213 047a C7000000 		.4byte	0xc7
 3214 047e 02       		.byte	0x2
 3215 047f 23       		.byte	0x23
 3216 0480 04       		.uleb128 0x4
 3217 0481 13       		.uleb128 0x13
 3218 0482 A6020000 		.4byte	.LASF69
 3219 0486 0A       		.byte	0xa
 3220 0487 39       		.byte	0x39
 3221 0488 C7000000 		.4byte	0xc7
 3222 048c 02       		.byte	0x2
 3223 048d 23       		.byte	0x23
 3224 048e 08       		.uleb128 0x8
 3225 048f 13       		.uleb128 0x13
 3226 0490 8C030000 		.4byte	.LASF70
 3227 0494 0A       		.byte	0xa
 3228 0495 3C       		.byte	0x3c
 3229 0496 C7000000 		.4byte	0xc7
 3230 049a 02       		.byte	0x2
 3231 049b 23       		.byte	0x23
 3232 049c 0C       		.uleb128 0xc
 3233 049d 13       		.uleb128 0x13
 3234 049e 2D090000 		.4byte	.LASF46
 3235 04a2 0A       		.byte	0xa
 3236 04a3 43       		.byte	0x43
 3237 04a4 C7000000 		.4byte	0xc7
 3238 04a8 02       		.byte	0x2
 3239 04a9 23       		.byte	0x23
 3240 04aa 10       		.uleb128 0x10
 3241 04ab 13       		.uleb128 0x13
 3242 04ac AD0A0000 		.4byte	.LASF71
 3243 04b0 0A       		.byte	0xa
 3244 04b1 46       		.byte	0x46
 3245 04b2 C7000000 		.4byte	0xc7
 3246 04b6 02       		.byte	0x2
 3247 04b7 23       		.byte	0x23
 3248 04b8 14       		.uleb128 0x14
 3249 04b9 13       		.uleb128 0x13
 3250 04ba 58060000 		.4byte	.LASF72
 3251 04be 0A       		.byte	0xa
 3252 04bf 49       		.byte	0x49
 3253 04c0 C7000000 		.4byte	0xc7
 3254 04c4 02       		.byte	0x2
 3255 04c5 23       		.byte	0x23
 3256 04c6 18       		.uleb128 0x18
 3257 04c7 13       		.uleb128 0x13
 3258 04c8 F2080000 		.4byte	.LASF73
 3259 04cc 0A       		.byte	0xa
 3260 04cd 4C       		.byte	0x4c
 3261 04ce C7000000 		.4byte	0xc7
 3262 04d2 02       		.byte	0x2
 3263 04d3 23       		.byte	0x23
 3264 04d4 1C       		.uleb128 0x1c
 3265 04d5 13       		.uleb128 0x13
 3266 04d6 8B090000 		.4byte	.LASF74
 3267 04da 0A       		.byte	0xa
 3268 04db 50       		.byte	0x50
ARM GAS  /tmp/ccvrs2bU.s 			page 109


 3269 04dc C7000000 		.4byte	0xc7
 3270 04e0 02       		.byte	0x2
 3271 04e1 23       		.byte	0x23
 3272 04e2 20       		.uleb128 0x20
 3273 04e3 13       		.uleb128 0x13
 3274 04e4 15000000 		.4byte	.LASF75
 3275 04e8 0A       		.byte	0xa
 3276 04e9 55       		.byte	0x55
 3277 04ea C7000000 		.4byte	0xc7
 3278 04ee 02       		.byte	0x2
 3279 04ef 23       		.byte	0x23
 3280 04f0 24       		.uleb128 0x24
 3281 04f1 13       		.uleb128 0x13
 3282 04f2 6E080000 		.4byte	.LASF76
 3283 04f6 0A       		.byte	0xa
 3284 04f7 57       		.byte	0x57
 3285 04f8 C7000000 		.4byte	0xc7
 3286 04fc 02       		.byte	0x2
 3287 04fd 23       		.byte	0x23
 3288 04fe 28       		.uleb128 0x28
 3289 04ff 00       		.byte	0
 3290 0500 03       		.uleb128 0x3
 3291 0501 CC080000 		.4byte	.LASF77
 3292 0505 0A       		.byte	0xa
 3293 0506 59       		.byte	0x59
 3294 0507 5D040000 		.4byte	0x45d
 3295 050b 0F       		.uleb128 0xf
 3296 050c 01       		.byte	0x1
 3297 050d 37000000 		.4byte	0x37
 3298 0511 0A       		.byte	0xa
 3299 0512 83       		.byte	0x83
 3300 0513 48050000 		.4byte	0x548
 3301 0517 10       		.uleb128 0x10
 3302 0518 80000000 		.4byte	.LASF78
 3303 051c 00       		.byte	0
 3304 051d 10       		.uleb128 0x10
 3305 051e D5010000 		.4byte	.LASF79
 3306 0522 20       		.byte	0x20
 3307 0523 10       		.uleb128 0x10
 3308 0524 5D050000 		.4byte	.LASF80
 3309 0528 24       		.byte	0x24
 3310 0529 10       		.uleb128 0x10
 3311 052a 52040000 		.4byte	.LASF81
 3312 052e 21       		.byte	0x21
 3313 052f 10       		.uleb128 0x10
 3314 0530 240A0000 		.4byte	.LASF82
 3315 0534 22       		.byte	0x22
 3316 0535 10       		.uleb128 0x10
 3317 0536 01030000 		.4byte	.LASF83
 3318 053a 23       		.byte	0x23
 3319 053b 10       		.uleb128 0x10
 3320 053c D0060000 		.4byte	.LASF84
 3321 0540 A0       		.byte	0xa0
 3322 0541 10       		.uleb128 0x10
 3323 0542 CD090000 		.4byte	.LASF85
 3324 0546 E0       		.byte	0xe0
 3325 0547 00       		.byte	0
ARM GAS  /tmp/ccvrs2bU.s 			page 110


 3326 0548 03       		.uleb128 0x3
 3327 0549 B2090000 		.4byte	.LASF86
 3328 054d 0A       		.byte	0xa
 3329 054e 95       		.byte	0x95
 3330 054f 0B050000 		.4byte	0x50b
 3331 0553 06       		.uleb128 0x6
 3332 0554 48050000 		.4byte	0x548
 3333 0558 14       		.uleb128 0x14
 3334 0559 B90A0000 		.4byte	.LASF88
 3335 055d 50       		.byte	0x50
 3336 055e 0A       		.byte	0xa
 3337 055f 9A       		.byte	0x9a
 3338 0560 29060000 		.4byte	0x629
 3339 0564 13       		.uleb128 0x13
 3340 0565 9F060000 		.4byte	.LASF54
 3341 0569 0A       		.byte	0xa
 3342 056a 9C       		.byte	0x9c
 3343 056b 57040000 		.4byte	0x457
 3344 056f 02       		.byte	0x2
 3345 0570 23       		.byte	0x23
 3346 0571 00       		.uleb128 0
 3347 0572 13       		.uleb128 0x13
 3348 0573 89060000 		.4byte	.LASF55
 3349 0577 0A       		.byte	0xa
 3350 0578 9E       		.byte	0x9e
 3351 0579 00050000 		.4byte	0x500
 3352 057d 02       		.byte	0x2
 3353 057e 23       		.byte	0x23
 3354 057f 04       		.uleb128 0x4
 3355 0580 13       		.uleb128 0x13
 3356 0581 2E020000 		.4byte	.LASF89
 3357 0585 0A       		.byte	0xa
 3358 0586 A0       		.byte	0xa0
 3359 0587 51040000 		.4byte	0x451
 3360 058b 02       		.byte	0x2
 3361 058c 23       		.byte	0x23
 3362 058d 30       		.uleb128 0x30
 3363 058e 13       		.uleb128 0x13
 3364 058f 47040000 		.4byte	.LASF90
 3365 0593 0A       		.byte	0xa
 3366 0594 A2       		.byte	0xa2
 3367 0595 A7000000 		.4byte	0xa7
 3368 0599 02       		.byte	0x2
 3369 059a 23       		.byte	0x23
 3370 059b 34       		.uleb128 0x34
 3371 059c 13       		.uleb128 0x13
 3372 059d 8E060000 		.4byte	.LASF91
 3373 05a1 0A       		.byte	0xa
 3374 05a2 A4       		.byte	0xa4
 3375 05a3 B2000000 		.4byte	0xb2
 3376 05a7 02       		.byte	0x2
 3377 05a8 23       		.byte	0x23
 3378 05a9 36       		.uleb128 0x36
 3379 05aa 13       		.uleb128 0x13
 3380 05ab 820A0000 		.4byte	.LASF92
 3381 05af 0A       		.byte	0xa
 3382 05b0 A6       		.byte	0xa6
ARM GAS  /tmp/ccvrs2bU.s 			page 111


 3383 05b1 51040000 		.4byte	0x451
 3384 05b5 02       		.byte	0x2
 3385 05b6 23       		.byte	0x23
 3386 05b7 38       		.uleb128 0x38
 3387 05b8 13       		.uleb128 0x13
 3388 05b9 29040000 		.4byte	.LASF93
 3389 05bd 0A       		.byte	0xa
 3390 05be A8       		.byte	0xa8
 3391 05bf A7000000 		.4byte	0xa7
 3392 05c3 02       		.byte	0x2
 3393 05c4 23       		.byte	0x23
 3394 05c5 3C       		.uleb128 0x3c
 3395 05c6 13       		.uleb128 0x13
 3396 05c7 D30A0000 		.4byte	.LASF94
 3397 05cb 0A       		.byte	0xa
 3398 05cc AA       		.byte	0xaa
 3399 05cd B2000000 		.4byte	0xb2
 3400 05d1 02       		.byte	0x2
 3401 05d2 23       		.byte	0x23
 3402 05d3 3E       		.uleb128 0x3e
 3403 05d4 13       		.uleb128 0x13
 3404 05d5 51060000 		.4byte	.LASF95
 3405 05d9 0A       		.byte	0xa
 3406 05da AC       		.byte	0xac
 3407 05db 4B040000 		.4byte	0x44b
 3408 05df 02       		.byte	0x2
 3409 05e0 23       		.byte	0x23
 3410 05e1 40       		.uleb128 0x40
 3411 05e2 13       		.uleb128 0x13
 3412 05e3 FA020000 		.4byte	.LASF96
 3413 05e7 0A       		.byte	0xa
 3414 05e8 AE       		.byte	0xae
 3415 05e9 4B040000 		.4byte	0x44b
 3416 05ed 02       		.byte	0x2
 3417 05ee 23       		.byte	0x23
 3418 05ef 44       		.uleb128 0x44
 3419 05f0 13       		.uleb128 0x13
 3420 05f1 C0020000 		.4byte	.LASF56
 3421 05f5 0A       		.byte	0xa
 3422 05f6 B0       		.byte	0xb0
 3423 05f7 B4020000 		.4byte	0x2b4
 3424 05fb 02       		.byte	0x2
 3425 05fc 23       		.byte	0x23
 3426 05fd 48       		.uleb128 0x48
 3427 05fe 13       		.uleb128 0x13
 3428 05ff 33000000 		.4byte	.LASF97
 3429 0603 0A       		.byte	0xa
 3430 0604 B2       		.byte	0xb2
 3431 0605 53050000 		.4byte	0x553
 3432 0609 02       		.byte	0x2
 3433 060a 23       		.byte	0x23
 3434 060b 49       		.uleb128 0x49
 3435 060c 13       		.uleb128 0x13
 3436 060d 180B0000 		.4byte	.LASF98
 3437 0611 0A       		.byte	0xa
 3438 0612 B6       		.byte	0xb6
 3439 0613 53050000 		.4byte	0x553
ARM GAS  /tmp/ccvrs2bU.s 			page 112


 3440 0617 02       		.byte	0x2
 3441 0618 23       		.byte	0x23
 3442 0619 4A       		.uleb128 0x4a
 3443 061a 13       		.uleb128 0x13
 3444 061b A1040000 		.4byte	.LASF63
 3445 061f 0A       		.byte	0xa
 3446 0620 B9       		.byte	0xb9
 3447 0621 D2000000 		.4byte	0xd2
 3448 0625 02       		.byte	0x2
 3449 0626 23       		.byte	0x23
 3450 0627 4C       		.uleb128 0x4c
 3451 0628 00       		.byte	0
 3452 0629 03       		.uleb128 0x3
 3453 062a 4B0A0000 		.4byte	.LASF99
 3454 062e 0A       		.byte	0xa
 3455 062f CD       		.byte	0xcd
 3456 0630 58050000 		.4byte	0x558
 3457 0634 0F       		.uleb128 0xf
 3458 0635 01       		.byte	0x1
 3459 0636 37000000 		.4byte	0x37
 3460 063a 0B       		.byte	0xb
 3461 063b 33       		.byte	0x33
 3462 063c 59060000 		.4byte	0x659
 3463 0640 10       		.uleb128 0x10
 3464 0641 DA000000 		.4byte	.LASF100
 3465 0645 64       		.byte	0x64
 3466 0646 10       		.uleb128 0x10
 3467 0647 3D090000 		.4byte	.LASF101
 3468 064b 0A       		.byte	0xa
 3469 064c 10       		.uleb128 0x10
 3470 064d DE030000 		.4byte	.LASF102
 3471 0651 01       		.byte	0x1
 3472 0652 10       		.uleb128 0x10
 3473 0653 3A000000 		.4byte	.LASF103
 3474 0657 01       		.byte	0x1
 3475 0658 00       		.byte	0
 3476 0659 03       		.uleb128 0x3
 3477 065a 1F000000 		.4byte	.LASF104
 3478 065e 0B       		.byte	0xb
 3479 065f 38       		.byte	0x38
 3480 0660 34060000 		.4byte	0x634
 3481 0664 08       		.uleb128 0x8
 3482 0665 02090000 		.4byte	.LASF105
 3483 0669 0B       		.byte	0xb
 3484 066a 3D       		.byte	0x3d
 3485 066b C7000000 		.4byte	0xc7
 3486 066f 01       		.byte	0x1
 3487 0670 01       		.byte	0x1
 3488 0671 08       		.uleb128 0x8
 3489 0672 81030000 		.4byte	.LASF106
 3490 0676 0B       		.byte	0xb
 3491 0677 3E       		.byte	0x3e
 3492 0678 59060000 		.4byte	0x659
 3493 067c 01       		.byte	0x1
 3494 067d 01       		.byte	0x1
 3495 067e 19       		.uleb128 0x19
 3496 067f 4D0B0000 		.4byte	.LASF118
ARM GAS  /tmp/ccvrs2bU.s 			page 113


 3497 0683 01       		.byte	0x1
 3498 0684 DA08     		.2byte	0x8da
 3499 0686 01       		.byte	0x1
 3500 0687 01       		.byte	0x1
 3501 0688 B1060000 		.4byte	0x6b1
 3502 068c 1A       		.uleb128 0x1a
 3503 068d 68736300 		.ascii	"hsc\000"
 3504 0691 01       		.byte	0x1
 3505 0692 DA08     		.2byte	0x8da
 3506 0694 B1060000 		.4byte	0x6b1
 3507 0698 1B       		.uleb128 0x1b
 3508 0699 EF010000 		.4byte	.LASF107
 3509 069d 01       		.byte	0x1
 3510 069e DC08     		.2byte	0x8dc
 3511 06a0 C7000000 		.4byte	0xc7
 3512 06a4 1B       		.uleb128 0x1b
 3513 06a5 CC070000 		.4byte	.LASF108
 3514 06a9 01       		.byte	0x1
 3515 06aa DD08     		.2byte	0x8dd
 3516 06ac C7000000 		.4byte	0xc7
 3517 06b0 00       		.byte	0
 3518 06b1 15       		.uleb128 0x15
 3519 06b2 04       		.byte	0x4
 3520 06b3 29060000 		.4byte	0x629
 3521 06b7 1C       		.uleb128 0x1c
 3522 06b8 43070000 		.4byte	.LASF109
 3523 06bc 01       		.byte	0x1
 3524 06bd C208     		.2byte	0x8c2
 3525 06bf 01       		.byte	0x1
 3526 06c0 0C090000 		.4byte	.LFB103
 3527 06c4 20090000 		.4byte	.LFE103
 3528 06c8 00000000 		.4byte	.LLST97
 3529 06cc 01       		.byte	0x1
 3530 06cd FB060000 		.4byte	0x6fb
 3531 06d1 1D       		.uleb128 0x1d
 3532 06d2 BA050000 		.4byte	.LASF111
 3533 06d6 01       		.byte	0x1
 3534 06d7 C208     		.2byte	0x8c2
 3535 06d9 4B040000 		.4byte	0x44b
 3536 06dd 20000000 		.4byte	.LLST98
 3537 06e1 1E       		.uleb128 0x1e
 3538 06e2 68736300 		.ascii	"hsc\000"
 3539 06e6 01       		.byte	0x1
 3540 06e7 C408     		.2byte	0x8c4
 3541 06e9 B1060000 		.4byte	0x6b1
 3542 06ed 41000000 		.4byte	.LLST99
 3543 06f1 1F       		.uleb128 0x1f
 3544 06f2 1E090000 		.4byte	.LVL208
 3545 06f6 950A0000 		.4byte	0xa95
 3546 06fa 00       		.byte	0
 3547 06fb 1C       		.uleb128 0x1c
 3548 06fc 95010000 		.4byte	.LASF110
 3549 0700 01       		.byte	0x1
 3550 0701 A808     		.2byte	0x8a8
 3551 0703 01       		.byte	0x1
 3552 0704 A0080000 		.4byte	.LFB102
 3553 0708 B4080000 		.4byte	.LFE102
ARM GAS  /tmp/ccvrs2bU.s 			page 114


 3554 070c 54000000 		.4byte	.LLST92
 3555 0710 01       		.byte	0x1
 3556 0711 3F070000 		.4byte	0x73f
 3557 0715 1D       		.uleb128 0x1d
 3558 0716 BA050000 		.4byte	.LASF111
 3559 071a 01       		.byte	0x1
 3560 071b A808     		.2byte	0x8a8
 3561 071d 4B040000 		.4byte	0x44b
 3562 0721 74000000 		.4byte	.LLST93
 3563 0725 1E       		.uleb128 0x1e
 3564 0726 68736300 		.ascii	"hsc\000"
 3565 072a 01       		.byte	0x1
 3566 072b AA08     		.2byte	0x8aa
 3567 072d B1060000 		.4byte	0x6b1
 3568 0731 95000000 		.4byte	.LLST94
 3569 0735 1F       		.uleb128 0x1f
 3570 0736 B2080000 		.4byte	.LVL197
 3571 073a B10A0000 		.4byte	0xab1
 3572 073e 00       		.byte	0
 3573 073f 1C       		.uleb128 0x1c
 3574 0740 89020000 		.4byte	.LASF112
 3575 0744 01       		.byte	0x1
 3576 0745 7D08     		.2byte	0x87d
 3577 0747 01       		.byte	0x1
 3578 0748 00080000 		.4byte	.LFB101
 3579 074c 28080000 		.4byte	.LFE101
 3580 0750 A8000000 		.4byte	.LLST84
 3581 0754 01       		.byte	0x1
 3582 0755 83070000 		.4byte	0x783
 3583 0759 1D       		.uleb128 0x1d
 3584 075a BA050000 		.4byte	.LASF111
 3585 075e 01       		.byte	0x1
 3586 075f 7D08     		.2byte	0x87d
 3587 0761 4B040000 		.4byte	0x44b
 3588 0765 C8000000 		.4byte	.LLST85
 3589 0769 1E       		.uleb128 0x1e
 3590 076a 68736300 		.ascii	"hsc\000"
 3591 076e 01       		.byte	0x1
 3592 076f 7F08     		.2byte	0x87f
 3593 0771 B1060000 		.4byte	0x6b1
 3594 0775 E9000000 		.4byte	.LLST86
 3595 0779 1F       		.uleb128 0x1f
 3596 077a 26080000 		.4byte	.LVL184
 3597 077e CC0A0000 		.4byte	0xacc
 3598 0782 00       		.byte	0
 3599 0783 1C       		.uleb128 0x1c
 3600 0784 6C020000 		.4byte	.LASF113
 3601 0788 01       		.byte	0x1
 3602 0789 5208     		.2byte	0x852
 3603 078b 01       		.byte	0x1
 3604 078c 28080000 		.4byte	.LFB100
 3605 0790 50080000 		.4byte	.LFE100
 3606 0794 FC000000 		.4byte	.LLST87
 3607 0798 01       		.byte	0x1
 3608 0799 C7070000 		.4byte	0x7c7
 3609 079d 1D       		.uleb128 0x1d
 3610 079e BA050000 		.4byte	.LASF111
ARM GAS  /tmp/ccvrs2bU.s 			page 115


 3611 07a2 01       		.byte	0x1
 3612 07a3 5208     		.2byte	0x852
 3613 07a5 4B040000 		.4byte	0x44b
 3614 07a9 1C010000 		.4byte	.LLST88
 3615 07ad 1E       		.uleb128 0x1e
 3616 07ae 68736300 		.ascii	"hsc\000"
 3617 07b2 01       		.byte	0x1
 3618 07b3 5408     		.2byte	0x854
 3619 07b5 B1060000 		.4byte	0x6b1
 3620 07b9 3D010000 		.4byte	.LLST89
 3621 07bd 1F       		.uleb128 0x1f
 3622 07be 4E080000 		.4byte	.LVL187
 3623 07c2 CC0A0000 		.4byte	0xacc
 3624 07c6 00       		.byte	0
 3625 07c7 1C       		.uleb128 0x1c
 3626 07c8 8F050000 		.4byte	.LASF114
 3627 07cc 01       		.byte	0x1
 3628 07cd 3B08     		.2byte	0x83b
 3629 07cf 01       		.byte	0x1
 3630 07d0 48070000 		.4byte	.LFB99
 3631 07d4 58070000 		.4byte	.LFE99
 3632 07d8 50010000 		.4byte	.LLST78
 3633 07dc 01       		.byte	0x1
 3634 07dd 0B080000 		.4byte	0x80b
 3635 07e1 1D       		.uleb128 0x1d
 3636 07e2 BA050000 		.4byte	.LASF111
 3637 07e6 01       		.byte	0x1
 3638 07e7 3B08     		.2byte	0x83b
 3639 07e9 4B040000 		.4byte	0x44b
 3640 07ed 70010000 		.4byte	.LLST79
 3641 07f1 1E       		.uleb128 0x1e
 3642 07f2 68736300 		.ascii	"hsc\000"
 3643 07f6 01       		.byte	0x1
 3644 07f7 3D08     		.2byte	0x83d
 3645 07f9 B1060000 		.4byte	0x6b1
 3646 07fd 91010000 		.4byte	.LLST80
 3647 0801 1F       		.uleb128 0x1f
 3648 0802 56070000 		.4byte	.LVL170
 3649 0806 E70A0000 		.4byte	0xae7
 3650 080a 00       		.byte	0
 3651 080b 20       		.uleb128 0x20
 3652 080c 50000000 		.4byte	.LASF115
 3653 0810 01       		.byte	0x1
 3654 0811 0B08     		.2byte	0x80b
 3655 0813 01       		.byte	0x1
 3656 0814 90020000 		.4byte	0x290
 3657 0818 01       		.byte	0x1
 3658 0819 36080000 		.4byte	0x836
 3659 081d 1A       		.uleb128 0x1a
 3660 081e 68736300 		.ascii	"hsc\000"
 3661 0822 01       		.byte	0x1
 3662 0823 0B08     		.2byte	0x80b
 3663 0825 B1060000 		.4byte	0x6b1
 3664 0829 21       		.uleb128 0x21
 3665 082a 746D7000 		.ascii	"tmp\000"
 3666 082e 01       		.byte	0x1
 3667 082f 0D08     		.2byte	0x80d
ARM GAS  /tmp/ccvrs2bU.s 			page 116


 3668 0831 36080000 		.4byte	0x836
 3669 0835 00       		.byte	0
 3670 0836 15       		.uleb128 0x15
 3671 0837 04       		.byte	0x4
 3672 0838 A7000000 		.4byte	0xa7
 3673 083c 20       		.uleb128 0x20
 3674 083d 37030000 		.4byte	.LASF116
 3675 0841 01       		.byte	0x1
 3676 0842 EF07     		.2byte	0x7ef
 3677 0844 01       		.byte	0x1
 3678 0845 90020000 		.4byte	0x290
 3679 0849 01       		.byte	0x1
 3680 084a 5B080000 		.4byte	0x85b
 3681 084e 1A       		.uleb128 0x1a
 3682 084f 68736300 		.ascii	"hsc\000"
 3683 0853 01       		.byte	0x1
 3684 0854 EF07     		.2byte	0x7ef
 3685 0856 B1060000 		.4byte	0x6b1
 3686 085a 00       		.byte	0
 3687 085b 20       		.uleb128 0x20
 3688 085c 7F010000 		.4byte	.LASF117
 3689 0860 01       		.byte	0x1
 3690 0861 CD07     		.2byte	0x7cd
 3691 0863 01       		.byte	0x1
 3692 0864 90020000 		.4byte	0x290
 3693 0868 01       		.byte	0x1
 3694 0869 86080000 		.4byte	0x886
 3695 086d 1A       		.uleb128 0x1a
 3696 086e 68736300 		.ascii	"hsc\000"
 3697 0872 01       		.byte	0x1
 3698 0873 CD07     		.2byte	0x7cd
 3699 0875 B1060000 		.4byte	0x6b1
 3700 0879 21       		.uleb128 0x21
 3701 087a 746D7000 		.ascii	"tmp\000"
 3702 087e 01       		.byte	0x1
 3703 087f CF07     		.2byte	0x7cf
 3704 0881 36080000 		.4byte	0x836
 3705 0885 00       		.byte	0
 3706 0886 19       		.uleb128 0x19
 3707 0887 DF0A0000 		.4byte	.LASF119
 3708 088b 01       		.byte	0x1
 3709 088c BD07     		.2byte	0x7bd
 3710 088e 01       		.byte	0x1
 3711 088f 01       		.byte	0x1
 3712 0890 A1080000 		.4byte	0x8a1
 3713 0894 1A       		.uleb128 0x1a
 3714 0895 68736300 		.ascii	"hsc\000"
 3715 0899 01       		.byte	0x1
 3716 089a BD07     		.2byte	0x7bd
 3717 089c B1060000 		.4byte	0x6b1
 3718 08a0 00       		.byte	0
 3719 08a1 19       		.uleb128 0x19
 3720 08a2 7B070000 		.4byte	.LASF120
 3721 08a6 01       		.byte	0x1
 3722 08a7 AD07     		.2byte	0x7ad
 3723 08a9 01       		.byte	0x1
 3724 08aa 01       		.byte	0x1
ARM GAS  /tmp/ccvrs2bU.s 			page 117


 3725 08ab BC080000 		.4byte	0x8bc
 3726 08af 1A       		.uleb128 0x1a
 3727 08b0 68736300 		.ascii	"hsc\000"
 3728 08b4 01       		.byte	0x1
 3729 08b5 AD07     		.2byte	0x7ad
 3730 08b7 B1060000 		.4byte	0x6b1
 3731 08bb 00       		.byte	0
 3732 08bc 20       		.uleb128 0x20
 3733 08bd 51090000 		.4byte	.LASF121
 3734 08c1 01       		.byte	0x1
 3735 08c2 8C07     		.2byte	0x78c
 3736 08c4 01       		.byte	0x1
 3737 08c5 90020000 		.4byte	0x290
 3738 08c9 01       		.byte	0x1
 3739 08ca 0B090000 		.4byte	0x90b
 3740 08ce 1A       		.uleb128 0x1a
 3741 08cf 68736300 		.ascii	"hsc\000"
 3742 08d3 01       		.byte	0x1
 3743 08d4 8C07     		.2byte	0x78c
 3744 08d6 B1060000 		.4byte	0x6b1
 3745 08da 22       		.uleb128 0x22
 3746 08db 5E020000 		.4byte	.LASF122
 3747 08df 01       		.byte	0x1
 3748 08e0 8C07     		.2byte	0x78c
 3749 08e2 C7000000 		.4byte	0xc7
 3750 08e6 22       		.uleb128 0x22
 3751 08e7 040B0000 		.4byte	.LASF123
 3752 08eb 01       		.byte	0x1
 3753 08ec 8C07     		.2byte	0x78c
 3754 08ee 59020000 		.4byte	0x259
 3755 08f2 22       		.uleb128 0x22
 3756 08f3 AF020000 		.4byte	.LASF124
 3757 08f7 01       		.byte	0x1
 3758 08f8 8C07     		.2byte	0x78c
 3759 08fa C7000000 		.4byte	0xc7
 3760 08fe 22       		.uleb128 0x22
 3761 08ff E1020000 		.4byte	.LASF125
 3762 0903 01       		.byte	0x1
 3763 0904 8C07     		.2byte	0x78c
 3764 0906 C7000000 		.4byte	0xc7
 3765 090a 00       		.byte	0
 3766 090b 1C       		.uleb128 0x1c
 3767 090c AD000000 		.4byte	.LASF126
 3768 0910 01       		.byte	0x1
 3769 0911 6307     		.2byte	0x763
 3770 0913 01       		.byte	0x1
 3771 0914 B4050000 		.4byte	.LFB92
 3772 0918 0A060000 		.4byte	.LFE92
 3773 091c A4010000 		.4byte	.LLST61
 3774 0920 01       		.byte	0x1
 3775 0921 9B090000 		.4byte	0x99b
 3776 0925 1D       		.uleb128 0x1d
 3777 0926 BA050000 		.4byte	.LASF111
 3778 092a 01       		.byte	0x1
 3779 092b 6307     		.2byte	0x763
 3780 092d 4B040000 		.4byte	0x44b
 3781 0931 C4010000 		.4byte	.LLST62
ARM GAS  /tmp/ccvrs2bU.s 			page 118


 3782 0935 23       		.uleb128 0x23
 3783 0936 A4080000 		.4byte	.LASF127
 3784 093a 01       		.byte	0x1
 3785 093b 6507     		.2byte	0x765
 3786 093d C7000000 		.4byte	0xc7
 3787 0941 E5010000 		.4byte	.LLST63
 3788 0945 1E       		.uleb128 0x1e
 3789 0946 68736300 		.ascii	"hsc\000"
 3790 094a 01       		.byte	0x1
 3791 094b 6607     		.2byte	0x766
 3792 094d B1060000 		.4byte	0x6b1
 3793 0951 23020000 		.4byte	.LLST64
 3794 0955 24       		.uleb128 0x24
 3795 0956 A1080000 		.4byte	0x8a1
 3796 095a D2050000 		.4byte	.LBB24
 3797 095e E0050000 		.4byte	.LBE24
 3798 0962 01       		.byte	0x1
 3799 0963 6F07     		.2byte	0x76f
 3800 0965 73090000 		.4byte	0x973
 3801 0969 25       		.uleb128 0x25
 3802 096a AF080000 		.4byte	0x8af
 3803 096e 36020000 		.4byte	.LLST65
 3804 0972 00       		.byte	0
 3805 0973 24       		.uleb128 0x24
 3806 0974 86080000 		.4byte	0x886
 3807 0978 EE050000 		.4byte	.LBB26
 3808 097c 04060000 		.4byte	.LBE26
 3809 0980 01       		.byte	0x1
 3810 0981 7607     		.2byte	0x776
 3811 0983 91090000 		.4byte	0x991
 3812 0987 25       		.uleb128 0x25
 3813 0988 94080000 		.4byte	0x894
 3814 098c 49020000 		.4byte	.LLST66
 3815 0990 00       		.byte	0
 3816 0991 1F       		.uleb128 0x1f
 3817 0992 08060000 		.4byte	.LVL135
 3818 0996 E70A0000 		.4byte	0xae7
 3819 099a 00       		.byte	0
 3820 099b 1C       		.uleb128 0x1c
 3821 099c 88040000 		.4byte	.LASF128
 3822 09a0 01       		.byte	0x1
 3823 09a1 4307     		.2byte	0x743
 3824 09a3 01       		.byte	0x1
 3825 09a4 38050000 		.4byte	.LFB91
 3826 09a8 66050000 		.4byte	.LFE91
 3827 09ac 5C020000 		.4byte	.LLST54
 3828 09b0 01       		.byte	0x1
 3829 09b1 DF090000 		.4byte	0x9df
 3830 09b5 1D       		.uleb128 0x1d
 3831 09b6 BA050000 		.4byte	.LASF111
 3832 09ba 01       		.byte	0x1
 3833 09bb 4307     		.2byte	0x743
 3834 09bd 4B040000 		.4byte	0x44b
 3835 09c1 7C020000 		.4byte	.LLST55
 3836 09c5 1E       		.uleb128 0x1e
 3837 09c6 68736300 		.ascii	"hsc\000"
 3838 09ca 01       		.byte	0x1
ARM GAS  /tmp/ccvrs2bU.s 			page 119


 3839 09cb 4507     		.2byte	0x745
 3840 09cd B1060000 		.4byte	0x6b1
 3841 09d1 9D020000 		.4byte	.LLST56
 3842 09d5 1F       		.uleb128 0x1f
 3843 09d6 64050000 		.4byte	.LVL117
 3844 09da 020B0000 		.4byte	0xb02
 3845 09de 00       		.byte	0
 3846 09df 26       		.uleb128 0x26
 3847 09e0 93070000 		.4byte	.LASF129
 3848 09e4 01       		.byte	0x1
 3849 09e5 2F07     		.2byte	0x72f
 3850 09e7 01       		.byte	0x1
 3851 09e8 00000000 		.4byte	.LFB90
 3852 09ec 1A000000 		.4byte	.LFE90
 3853 09f0 02       		.byte	0x2
 3854 09f1 7D       		.byte	0x7d
 3855 09f2 00       		.sleb128 0
 3856 09f3 01       		.byte	0x1
 3857 09f4 170A0000 		.4byte	0xa17
 3858 09f8 27       		.uleb128 0x27
 3859 09f9 BA050000 		.4byte	.LASF111
 3860 09fd 01       		.byte	0x1
 3861 09fe 2F07     		.2byte	0x72f
 3862 0a00 4B040000 		.4byte	0x44b
 3863 0a04 01       		.byte	0x1
 3864 0a05 50       		.byte	0x50
 3865 0a06 1E       		.uleb128 0x1e
 3866 0a07 68736300 		.ascii	"hsc\000"
 3867 0a0b 01       		.byte	0x1
 3868 0a0c 3107     		.2byte	0x731
 3869 0a0e B1060000 		.4byte	0x6b1
 3870 0a12 B0020000 		.4byte	.LLST0
 3871 0a16 00       		.byte	0
 3872 0a17 28       		.uleb128 0x28
 3873 0a18 01       		.byte	0x1
 3874 0a19 C7030000 		.4byte	.LASF130
 3875 0a1d 01       		.byte	0x1
 3876 0a1e 0507     		.2byte	0x705
 3877 0a20 01       		.byte	0x1
 3878 0a21 C7000000 		.4byte	0xc7
 3879 0a25 2C090000 		.4byte	.LFB89
 3880 0a29 30090000 		.4byte	.LFE89
 3881 0a2d 02       		.byte	0x2
 3882 0a2e 7D       		.byte	0x7d
 3883 0a2f 00       		.sleb128 0
 3884 0a30 01       		.byte	0x1
 3885 0a31 460A0000 		.4byte	0xa46
 3886 0a35 29       		.uleb128 0x29
 3887 0a36 68736300 		.ascii	"hsc\000"
 3888 0a3a 01       		.byte	0x1
 3889 0a3b 0507     		.2byte	0x705
 3890 0a3d B1060000 		.4byte	0x6b1
 3891 0a41 CF020000 		.4byte	.LLST103
 3892 0a45 00       		.byte	0
 3893 0a46 28       		.uleb128 0x28
 3894 0a47 01       		.byte	0x1
 3895 0a48 64070000 		.4byte	.LASF131
ARM GAS  /tmp/ccvrs2bU.s 			page 120


 3896 0a4c 01       		.byte	0x1
 3897 0a4d F606     		.2byte	0x6f6
 3898 0a4f 01       		.byte	0x1
 3899 0a50 48050000 		.4byte	0x548
 3900 0a54 20090000 		.4byte	.LFB88
 3901 0a58 2C090000 		.4byte	.LFE88
 3902 0a5c 02       		.byte	0x2
 3903 0a5d 7D       		.byte	0x7d
 3904 0a5e 00       		.sleb128 0
 3905 0a5f 01       		.byte	0x1
 3906 0a60 950A0000 		.4byte	0xa95
 3907 0a64 29       		.uleb128 0x29
 3908 0a65 68736300 		.ascii	"hsc\000"
 3909 0a69 01       		.byte	0x1
 3910 0a6a F606     		.2byte	0x6f6
 3911 0a6c B1060000 		.4byte	0x6b1
 3912 0a70 F0020000 		.4byte	.LLST100
 3913 0a74 23       		.uleb128 0x23
 3914 0a75 EC080000 		.4byte	.LASF132
 3915 0a79 01       		.byte	0x1
 3916 0a7a F806     		.2byte	0x6f8
 3917 0a7c C7000000 		.4byte	0xc7
 3918 0a80 11030000 		.4byte	.LLST101
 3919 0a84 23       		.uleb128 0x23
 3920 0a85 E6070000 		.4byte	.LASF133
 3921 0a89 01       		.byte	0x1
 3922 0a8a F806     		.2byte	0x6f8
 3923 0a8c C7000000 		.4byte	0xc7
 3924 0a90 30030000 		.4byte	.LLST102
 3925 0a94 00       		.byte	0
 3926 0a95 2A       		.uleb128 0x2a
 3927 0a96 01       		.byte	0x1
 3928 0a97 AB040000 		.4byte	.LASF172
 3929 0a9b 01       		.byte	0x1
 3930 0a9c D306     		.2byte	0x6d3
 3931 0a9e 01       		.byte	0x1
 3932 0a9f 01       		.byte	0x1
 3933 0aa0 B10A0000 		.4byte	0xab1
 3934 0aa4 1A       		.uleb128 0x1a
 3935 0aa5 68736300 		.ascii	"hsc\000"
 3936 0aa9 01       		.byte	0x1
 3937 0aaa D306     		.2byte	0x6d3
 3938 0aac B1060000 		.4byte	0x6b1
 3939 0ab0 00       		.byte	0
 3940 0ab1 2B       		.uleb128 0x2b
 3941 0ab2 01       		.byte	0x1
 3942 0ab3 A8060000 		.4byte	.LASF134
 3943 0ab7 01       		.byte	0x1
 3944 0ab8 C406     		.2byte	0x6c4
 3945 0aba 01       		.byte	0x1
 3946 0abb CC0A0000 		.4byte	0xacc
 3947 0abf 1A       		.uleb128 0x1a
 3948 0ac0 68736300 		.ascii	"hsc\000"
 3949 0ac4 01       		.byte	0x1
 3950 0ac5 C406     		.2byte	0x6c4
 3951 0ac7 B1060000 		.4byte	0x6b1
 3952 0acb 00       		.byte	0
ARM GAS  /tmp/ccvrs2bU.s 			page 121


 3953 0acc 2B       		.uleb128 0x2b
 3954 0acd 01       		.byte	0x1
 3955 0ace 1F050000 		.4byte	.LASF135
 3956 0ad2 01       		.byte	0x1
 3957 0ad3 B506     		.2byte	0x6b5
 3958 0ad5 01       		.byte	0x1
 3959 0ad6 E70A0000 		.4byte	0xae7
 3960 0ada 1A       		.uleb128 0x1a
 3961 0adb 68736300 		.ascii	"hsc\000"
 3962 0adf 01       		.byte	0x1
 3963 0ae0 B506     		.2byte	0x6b5
 3964 0ae2 B1060000 		.4byte	0x6b1
 3965 0ae6 00       		.byte	0
 3966 0ae7 2B       		.uleb128 0x2b
 3967 0ae8 01       		.byte	0x1
 3968 0ae9 C5020000 		.4byte	.LASF136
 3969 0aed 01       		.byte	0x1
 3970 0aee A606     		.2byte	0x6a6
 3971 0af0 01       		.byte	0x1
 3972 0af1 020B0000 		.4byte	0xb02
 3973 0af5 1A       		.uleb128 0x1a
 3974 0af6 68736300 		.ascii	"hsc\000"
 3975 0afa 01       		.byte	0x1
 3976 0afb A606     		.2byte	0x6a6
 3977 0afd B1060000 		.4byte	0x6b1
 3978 0b01 00       		.byte	0
 3979 0b02 2B       		.uleb128 0x2b
 3980 0b03 01       		.byte	0x1
 3981 0b04 48010000 		.4byte	.LASF137
 3982 0b08 01       		.byte	0x1
 3983 0b09 9606     		.2byte	0x696
 3984 0b0b 01       		.byte	0x1
 3985 0b0c 1D0B0000 		.4byte	0xb1d
 3986 0b10 1A       		.uleb128 0x1a
 3987 0b11 68736300 		.ascii	"hsc\000"
 3988 0b15 01       		.byte	0x1
 3989 0b16 9606     		.2byte	0x696
 3990 0b18 B1060000 		.4byte	0x6b1
 3991 0b1c 00       		.byte	0
 3992 0b1d 2B       		.uleb128 0x2b
 3993 0b1e 01       		.byte	0x1
 3994 0b1f 95090000 		.4byte	.LASF138
 3995 0b23 01       		.byte	0x1
 3996 0b24 8606     		.2byte	0x686
 3997 0b26 01       		.byte	0x1
 3998 0b27 380B0000 		.4byte	0xb38
 3999 0b2b 1A       		.uleb128 0x1a
 4000 0b2c 68736300 		.ascii	"hsc\000"
 4001 0b30 01       		.byte	0x1
 4002 0b31 8606     		.2byte	0x686
 4003 0b33 B1060000 		.4byte	0x6b1
 4004 0b37 00       		.byte	0
 4005 0b38 2C       		.uleb128 0x2c
 4006 0b39 01       		.byte	0x1
 4007 0b3a 72090000 		.4byte	.LASF173
 4008 0b3e 01       		.byte	0x1
 4009 0b3f F805     		.2byte	0x5f8
ARM GAS  /tmp/ccvrs2bU.s 			page 122


 4010 0b41 01       		.byte	0x1
 4011 0b42 0A060000 		.4byte	.LFB81
 4012 0b46 48070000 		.4byte	.LFE81
 4013 0b4a 4F030000 		.4byte	.LLST67
 4014 0b4e 870C0000 		.4byte	0xc87
 4015 0b52 29       		.uleb128 0x29
 4016 0b53 68736300 		.ascii	"hsc\000"
 4017 0b57 01       		.byte	0x1
 4018 0b58 F805     		.2byte	0x5f8
 4019 0b5a B1060000 		.4byte	0x6b1
 4020 0b5e 9F030000 		.4byte	.LLST68
 4021 0b62 23       		.uleb128 0x23
 4022 0b63 BF050000 		.4byte	.LASF139
 4023 0b67 01       		.byte	0x1
 4024 0b68 FA05     		.2byte	0x5fa
 4025 0b6a C7000000 		.4byte	0xc7
 4026 0b6e 13040000 		.4byte	.LLST69
 4027 0b72 23       		.uleb128 0x23
 4028 0b73 F3020000 		.4byte	.LASF140
 4029 0b77 01       		.byte	0x1
 4030 0b78 FB05     		.2byte	0x5fb
 4031 0b7a C7000000 		.4byte	0xc7
 4032 0b7e 47040000 		.4byte	.LLST70
 4033 0b82 23       		.uleb128 0x23
 4034 0b83 D3000000 		.4byte	.LASF141
 4035 0b87 01       		.byte	0x1
 4036 0b88 FC05     		.2byte	0x5fc
 4037 0b8a C7000000 		.4byte	0xc7
 4038 0b8e 7B040000 		.4byte	.LLST71
 4039 0b92 23       		.uleb128 0x23
 4040 0b93 A4080000 		.4byte	.LASF127
 4041 0b97 01       		.byte	0x1
 4042 0b98 FD05     		.2byte	0x5fd
 4043 0b9a C7000000 		.4byte	0xc7
 4044 0b9e 99040000 		.4byte	.LLST72
 4045 0ba2 23       		.uleb128 0x23
 4046 0ba3 7D040000 		.4byte	.LASF142
 4047 0ba7 01       		.byte	0x1
 4048 0ba8 FE05     		.2byte	0x5fe
 4049 0baa C7000000 		.4byte	0xc7
 4050 0bae F2040000 		.4byte	.LLST73
 4051 0bb2 24       		.uleb128 0x24
 4052 0bb3 86080000 		.4byte	0x886
 4053 0bb7 92060000 		.4byte	.LBB34
 4054 0bbb A8060000 		.4byte	.LBE34
 4055 0bbf 01       		.byte	0x1
 4056 0bc0 3706     		.2byte	0x637
 4057 0bc2 D00B0000 		.4byte	0xbd0
 4058 0bc6 25       		.uleb128 0x25
 4059 0bc7 94080000 		.4byte	0x894
 4060 0bcb 36050000 		.4byte	.LLST74
 4061 0bcf 00       		.byte	0
 4062 0bd0 24       		.uleb128 0x24
 4063 0bd1 5B080000 		.4byte	0x85b
 4064 0bd5 EA060000 		.4byte	.LBB36
 4065 0bd9 1C070000 		.4byte	.LBE36
 4066 0bdd 01       		.byte	0x1
ARM GAS  /tmp/ccvrs2bU.s 			page 123


 4067 0bde 7406     		.2byte	0x674
 4068 0be0 010C0000 		.4byte	0xc01
 4069 0be4 25       		.uleb128 0x25
 4070 0be5 6D080000 		.4byte	0x86d
 4071 0be9 49050000 		.4byte	.LLST75
 4072 0bed 2D       		.uleb128 0x2d
 4073 0bee EA060000 		.4byte	.LBB37
 4074 0bf2 1C070000 		.4byte	.LBE37
 4075 0bf6 2E       		.uleb128 0x2e
 4076 0bf7 79080000 		.4byte	0x879
 4077 0bfb 5C050000 		.4byte	.LLST76
 4078 0bff 00       		.byte	0
 4079 0c00 00       		.byte	0
 4080 0c01 24       		.uleb128 0x24
 4081 0c02 3C080000 		.4byte	0x83c
 4082 0c06 24070000 		.4byte	.LBB38
 4083 0c0a 48070000 		.4byte	.LBE38
 4084 0c0e 01       		.byte	0x1
 4085 0c0f 7B06     		.2byte	0x67b
 4086 0c11 2F0C0000 		.4byte	0xc2f
 4087 0c15 25       		.uleb128 0x25
 4088 0c16 4E080000 		.4byte	0x84e
 4089 0c1a 8D050000 		.4byte	.LLST77
 4090 0c1e 2F       		.uleb128 0x2f
 4091 0c1f 40070000 		.4byte	.LVL166
 4092 0c23 1D0B0000 		.4byte	0xb1d
 4093 0c27 30       		.uleb128 0x30
 4094 0c28 01       		.byte	0x1
 4095 0c29 50       		.byte	0x50
 4096 0c2a 02       		.byte	0x2
 4097 0c2b 74       		.byte	0x74
 4098 0c2c 00       		.sleb128 0
 4099 0c2d 00       		.byte	0
 4100 0c2e 00       		.byte	0
 4101 0c2f 31       		.uleb128 0x31
 4102 0c30 28060000 		.4byte	.LVL141
 4103 0c34 01       		.byte	0x1
 4104 0c35 0B080000 		.4byte	0x80b
 4105 0c39 450C0000 		.4byte	0xc45
 4106 0c3d 30       		.uleb128 0x30
 4107 0c3e 01       		.byte	0x1
 4108 0c3f 50       		.byte	0x50
 4109 0c40 03       		.byte	0x3
 4110 0c41 F3       		.byte	0xf3
 4111 0c42 01       		.uleb128 0x1
 4112 0c43 50       		.byte	0x50
 4113 0c44 00       		.byte	0
 4114 0c45 32       		.uleb128 0x32
 4115 0c46 82060000 		.4byte	.LVL144
 4116 0c4a 0B080000 		.4byte	0x80b
 4117 0c4e 590C0000 		.4byte	0xc59
 4118 0c52 30       		.uleb128 0x30
 4119 0c53 01       		.byte	0x1
 4120 0c54 50       		.byte	0x50
 4121 0c55 02       		.byte	0x2
 4122 0c56 74       		.byte	0x74
 4123 0c57 00       		.sleb128 0
ARM GAS  /tmp/ccvrs2bU.s 			page 124


 4124 0c58 00       		.byte	0
 4125 0c59 1F       		.uleb128 0x1f
 4126 0c5a C2060000 		.4byte	.LVL149
 4127 0c5e 42130000 		.4byte	0x1342
 4128 0c62 32       		.uleb128 0x32
 4129 0c63 D6060000 		.4byte	.LVL152
 4130 0c67 E70A0000 		.4byte	0xae7
 4131 0c6b 760C0000 		.4byte	0xc76
 4132 0c6f 30       		.uleb128 0x30
 4133 0c70 01       		.byte	0x1
 4134 0c71 50       		.byte	0x50
 4135 0c72 02       		.byte	0x2
 4136 0c73 74       		.byte	0x74
 4137 0c74 00       		.sleb128 0
 4138 0c75 00       		.byte	0
 4139 0c76 2F       		.uleb128 0x2f
 4140 0c77 DE060000 		.4byte	.LVL154
 4141 0c7b E70A0000 		.4byte	0xae7
 4142 0c7f 30       		.uleb128 0x30
 4143 0c80 01       		.byte	0x1
 4144 0c81 50       		.byte	0x50
 4145 0c82 02       		.byte	0x2
 4146 0c83 74       		.byte	0x74
 4147 0c84 00       		.sleb128 0
 4148 0c85 00       		.byte	0
 4149 0c86 00       		.byte	0
 4150 0c87 33       		.uleb128 0x33
 4151 0c88 01       		.byte	0x1
 4152 0c89 21060000 		.4byte	.LASF143
 4153 0c8d 01       		.byte	0x1
 4154 0c8e B205     		.2byte	0x5b2
 4155 0c90 01       		.byte	0x1
 4156 0c91 90020000 		.4byte	0x290
 4157 0c95 B6080000 		.4byte	.LFB80
 4158 0c99 0C090000 		.4byte	.LFE80
 4159 0c9d A0050000 		.4byte	.LLST95
 4160 0ca1 01       		.byte	0x1
 4161 0ca2 C90C0000 		.4byte	0xcc9
 4162 0ca6 29       		.uleb128 0x29
 4163 0ca7 68736300 		.ascii	"hsc\000"
 4164 0cab 01       		.byte	0x1
 4165 0cac B205     		.2byte	0x5b2
 4166 0cae B1060000 		.4byte	0x6b1
 4167 0cb2 C0050000 		.4byte	.LLST96
 4168 0cb6 1F       		.uleb128 0x1f
 4169 0cb7 EA080000 		.4byte	.LVL201
 4170 0cbb 42130000 		.4byte	0x1342
 4171 0cbf 1F       		.uleb128 0x1f
 4172 0cc0 02090000 		.4byte	.LVL204
 4173 0cc4 950A0000 		.4byte	0xa95
 4174 0cc8 00       		.byte	0
 4175 0cc9 33       		.uleb128 0x33
 4176 0cca 01       		.byte	0x1
 4177 0ccb E9050000 		.4byte	.LASF144
 4178 0ccf 01       		.byte	0x1
 4179 0cd0 6505     		.2byte	0x565
 4180 0cd2 01       		.byte	0x1
ARM GAS  /tmp/ccvrs2bU.s 			page 125


 4181 0cd3 90020000 		.4byte	0x290
 4182 0cd7 52080000 		.4byte	.LFB79
 4183 0cdb A0080000 		.4byte	.LFE79
 4184 0cdf FF050000 		.4byte	.LLST90
 4185 0ce3 01       		.byte	0x1
 4186 0ce4 0B0D0000 		.4byte	0xd0b
 4187 0ce8 29       		.uleb128 0x29
 4188 0ce9 68736300 		.ascii	"hsc\000"
 4189 0ced 01       		.byte	0x1
 4190 0cee 6505     		.2byte	0x565
 4191 0cf0 B1060000 		.4byte	0x6b1
 4192 0cf4 1F060000 		.4byte	.LLST91
 4193 0cf8 1F       		.uleb128 0x1f
 4194 0cf9 7E080000 		.4byte	.LVL190
 4195 0cfd 42130000 		.4byte	0x1342
 4196 0d01 1F       		.uleb128 0x1f
 4197 0d02 96080000 		.4byte	.LVL193
 4198 0d06 B10A0000 		.4byte	0xab1
 4199 0d0a 00       		.byte	0
 4200 0d0b 34       		.uleb128 0x34
 4201 0d0c 01       		.byte	0x1
 4202 0d0d FB090000 		.4byte	.LASF145
 4203 0d11 01       		.byte	0x1
 4204 0d12 E604     		.2byte	0x4e6
 4205 0d14 01       		.byte	0x1
 4206 0d15 90020000 		.4byte	0x290
 4207 0d19 5A070000 		.4byte	.LFB78
 4208 0d1d 00080000 		.4byte	.LFE78
 4209 0d21 5E060000 		.4byte	.LLST81
 4210 0d25 01       		.byte	0x1
 4211 0d26 710D0000 		.4byte	0xd71
 4212 0d2a 29       		.uleb128 0x29
 4213 0d2b 68736300 		.ascii	"hsc\000"
 4214 0d2f 01       		.byte	0x1
 4215 0d30 E604     		.2byte	0x4e6
 4216 0d32 B1060000 		.4byte	0x6b1
 4217 0d36 7E060000 		.4byte	.LLST82
 4218 0d3a 23       		.uleb128 0x23
 4219 0d3b 06020000 		.4byte	.LASF146
 4220 0d3f 01       		.byte	0x1
 4221 0d40 E804     		.2byte	0x4e8
 4222 0d42 C7000000 		.4byte	0xc7
 4223 0d46 AA060000 		.4byte	.LLST83
 4224 0d4a 1F       		.uleb128 0x1f
 4225 0d4b B0070000 		.4byte	.LVL174
 4226 0d4f 42130000 		.4byte	0x1342
 4227 0d53 32       		.uleb128 0x32
 4228 0d54 D0070000 		.4byte	.LVL176
 4229 0d58 CC0A0000 		.4byte	0xacc
 4230 0d5c 670D0000 		.4byte	0xd67
 4231 0d60 30       		.uleb128 0x30
 4232 0d61 01       		.byte	0x1
 4233 0d62 50       		.byte	0x50
 4234 0d63 02       		.byte	0x2
 4235 0d64 74       		.byte	0x74
 4236 0d65 00       		.sleb128 0
 4237 0d66 00       		.byte	0
ARM GAS  /tmp/ccvrs2bU.s 			page 126


 4238 0d67 1F       		.uleb128 0x1f
 4239 0d68 E2070000 		.4byte	.LVL178
 4240 0d6c 42130000 		.4byte	0x1342
 4241 0d70 00       		.byte	0
 4242 0d71 34       		.uleb128 0x34
 4243 0d72 01       		.byte	0x1
 4244 0d73 200B0000 		.4byte	.LASF147
 4245 0d77 01       		.byte	0x1
 4246 0d78 B904     		.2byte	0x4b9
 4247 0d7a 01       		.byte	0x1
 4248 0d7b 90020000 		.4byte	0x290
 4249 0d7f F8040000 		.4byte	.LFB77
 4250 0d83 34050000 		.4byte	.LFE77
 4251 0d87 E0060000 		.4byte	.LLST52
 4252 0d8b 01       		.byte	0x1
 4253 0d8c AA0D0000 		.4byte	0xdaa
 4254 0d90 29       		.uleb128 0x29
 4255 0d91 68736300 		.ascii	"hsc\000"
 4256 0d95 01       		.byte	0x1
 4257 0d96 B904     		.2byte	0x4b9
 4258 0d98 B1060000 		.4byte	0x6b1
 4259 0d9c 00070000 		.4byte	.LLST53
 4260 0da0 1F       		.uleb128 0x1f
 4261 0da1 28050000 		.4byte	.LVL114
 4262 0da5 50130000 		.4byte	0x1350
 4263 0da9 00       		.byte	0
 4264 0daa 34       		.uleb128 0x34
 4265 0dab 01       		.byte	0x1
 4266 0dac 52080000 		.4byte	.LASF148
 4267 0db0 01       		.byte	0x1
 4268 0db1 8F04     		.2byte	0x48f
 4269 0db3 01       		.byte	0x1
 4270 0db4 90020000 		.4byte	0x290
 4271 0db8 C4040000 		.4byte	.LFB76
 4272 0dbc F8040000 		.4byte	.LFE76
 4273 0dc0 1E070000 		.4byte	.LLST50
 4274 0dc4 01       		.byte	0x1
 4275 0dc5 E30D0000 		.4byte	0xde3
 4276 0dc9 29       		.uleb128 0x29
 4277 0dca 68736300 		.ascii	"hsc\000"
 4278 0dce 01       		.byte	0x1
 4279 0dcf 8F04     		.2byte	0x48f
 4280 0dd1 B1060000 		.4byte	0x6b1
 4281 0dd5 3E070000 		.4byte	.LLST51
 4282 0dd9 1F       		.uleb128 0x1f
 4283 0dda EC040000 		.4byte	.LVL111
 4284 0dde 50130000 		.4byte	0x1350
 4285 0de2 00       		.byte	0
 4286 0de3 34       		.uleb128 0x34
 4287 0de4 01       		.byte	0x1
 4288 0de5 61060000 		.4byte	.LASF149
 4289 0de9 01       		.byte	0x1
 4290 0dea 4F04     		.2byte	0x44f
 4291 0dec 01       		.byte	0x1
 4292 0ded 90020000 		.4byte	0x290
 4293 0df1 64040000 		.4byte	.LFB75
 4294 0df5 C4040000 		.4byte	.LFE75
ARM GAS  /tmp/ccvrs2bU.s 			page 127


 4295 0df9 5C070000 		.4byte	.LLST48
 4296 0dfd 01       		.byte	0x1
 4297 0dfe 250E0000 		.4byte	0xe25
 4298 0e02 29       		.uleb128 0x29
 4299 0e03 68736300 		.ascii	"hsc\000"
 4300 0e07 01       		.byte	0x1
 4301 0e08 4F04     		.2byte	0x44f
 4302 0e0a B1060000 		.4byte	0x6b1
 4303 0e0e 7C070000 		.4byte	.LLST49
 4304 0e12 1F       		.uleb128 0x1f
 4305 0e13 94040000 		.4byte	.LVL107
 4306 0e17 50130000 		.4byte	0x1350
 4307 0e1b 1F       		.uleb128 0x1f
 4308 0e1c B0040000 		.4byte	.LVL108
 4309 0e20 50130000 		.4byte	0x1350
 4310 0e24 00       		.byte	0
 4311 0e25 34       		.uleb128 0x34
 4312 0e26 01       		.byte	0x1
 4313 0e27 0D090000 		.4byte	.LASF150
 4314 0e2b 01       		.byte	0x1
 4315 0e2c 0904     		.2byte	0x409
 4316 0e2e 01       		.byte	0x1
 4317 0e2f 90020000 		.4byte	0x290
 4318 0e33 D8030000 		.4byte	.LFB74
 4319 0e37 64040000 		.4byte	.LFE74
 4320 0e3b 9A070000 		.4byte	.LLST43
 4321 0e3f 01       		.byte	0x1
 4322 0e40 B50E0000 		.4byte	0xeb5
 4323 0e44 29       		.uleb128 0x29
 4324 0e45 68736300 		.ascii	"hsc\000"
 4325 0e49 01       		.byte	0x1
 4326 0e4a 0904     		.2byte	0x409
 4327 0e4c B1060000 		.4byte	0x6b1
 4328 0e50 D2070000 		.4byte	.LLST44
 4329 0e54 1D       		.uleb128 0x1d
 4330 0e55 24010000 		.4byte	.LASF151
 4331 0e59 01       		.byte	0x1
 4332 0e5a 0904     		.2byte	0x409
 4333 0e5c 51040000 		.4byte	0x451
 4334 0e60 1C080000 		.4byte	.LLST45
 4335 0e64 1D       		.uleb128 0x1d
 4336 0e65 9A060000 		.4byte	.LASF152
 4337 0e69 01       		.byte	0x1
 4338 0e6a 0904     		.2byte	0x409
 4339 0e6c A7000000 		.4byte	0xa7
 4340 0e70 53080000 		.4byte	.LLST46
 4341 0e74 1E       		.uleb128 0x1e
 4342 0e75 746D7000 		.ascii	"tmp\000"
 4343 0e79 01       		.byte	0x1
 4344 0e7a 0B04     		.2byte	0x40b
 4345 0e7c B50E0000 		.4byte	0xeb5
 4346 0e80 74080000 		.4byte	.LLST47
 4347 0e84 35       		.uleb128 0x35
 4348 0e85 20000000 		.4byte	.Ldebug_ranges0+0x20
 4349 0e89 9D0E0000 		.4byte	0xe9d
 4350 0e8d 36       		.uleb128 0x36
 4351 0e8e EF010000 		.4byte	.LASF107
ARM GAS  /tmp/ccvrs2bU.s 			page 128


 4352 0e92 01       		.byte	0x1
 4353 0e93 2C04     		.2byte	0x42c
 4354 0e95 D2000000 		.4byte	0xd2
 4355 0e99 02       		.byte	0x2
 4356 0e9a 91       		.byte	0x91
 4357 0e9b 6C       		.sleb128 -20
 4358 0e9c 00       		.byte	0
 4359 0e9d 2F       		.uleb128 0x2f
 4360 0e9e 22040000 		.4byte	.LVL99
 4361 0ea2 5E130000 		.4byte	0x135e
 4362 0ea6 30       		.uleb128 0x30
 4363 0ea7 01       		.byte	0x1
 4364 0ea8 51       		.byte	0x51
 4365 0ea9 02       		.byte	0x2
 4366 0eaa 76       		.byte	0x76
 4367 0eab 04       		.sleb128 4
 4368 0eac 30       		.uleb128 0x30
 4369 0ead 01       		.byte	0x1
 4370 0eae 52       		.byte	0x52
 4371 0eaf 03       		.byte	0x3
 4372 0eb0 F3       		.byte	0xf3
 4373 0eb1 01       		.uleb128 0x1
 4374 0eb2 51       		.byte	0x51
 4375 0eb3 00       		.byte	0
 4376 0eb4 00       		.byte	0
 4377 0eb5 15       		.uleb128 0x15
 4378 0eb6 04       		.byte	0x4
 4379 0eb7 C7000000 		.4byte	0xc7
 4380 0ebb 34       		.uleb128 0x34
 4381 0ebc 01       		.byte	0x1
 4382 0ebd 39020000 		.4byte	.LASF153
 4383 0ec1 01       		.byte	0x1
 4384 0ec2 CB03     		.2byte	0x3cb
 4385 0ec4 01       		.byte	0x1
 4386 0ec5 90020000 		.4byte	0x290
 4387 0ec9 6A030000 		.4byte	.LFB73
 4388 0ecd D8030000 		.4byte	.LFE73
 4389 0ed1 8C080000 		.4byte	.LLST38
 4390 0ed5 01       		.byte	0x1
 4391 0ed6 2C0F0000 		.4byte	0xf2c
 4392 0eda 29       		.uleb128 0x29
 4393 0edb 68736300 		.ascii	"hsc\000"
 4394 0edf 01       		.byte	0x1
 4395 0ee0 CB03     		.2byte	0x3cb
 4396 0ee2 B1060000 		.4byte	0x6b1
 4397 0ee6 AC080000 		.4byte	.LLST39
 4398 0eea 1D       		.uleb128 0x1d
 4399 0eeb 24010000 		.4byte	.LASF151
 4400 0eef 01       		.byte	0x1
 4401 0ef0 CB03     		.2byte	0x3cb
 4402 0ef2 51040000 		.4byte	0x451
 4403 0ef6 04090000 		.4byte	.LLST40
 4404 0efa 1D       		.uleb128 0x1d
 4405 0efb 9A060000 		.4byte	.LASF152
 4406 0eff 01       		.byte	0x1
 4407 0f00 CB03     		.2byte	0x3cb
 4408 0f02 A7000000 		.4byte	0xa7
ARM GAS  /tmp/ccvrs2bU.s 			page 129


 4409 0f06 30090000 		.4byte	.LLST41
 4410 0f0a 1E       		.uleb128 0x1e
 4411 0f0b 746D7000 		.ascii	"tmp\000"
 4412 0f0f 01       		.byte	0x1
 4413 0f10 CD03     		.2byte	0x3cd
 4414 0f12 B50E0000 		.4byte	0xeb5
 4415 0f16 51090000 		.4byte	.LLST42
 4416 0f1a 2F       		.uleb128 0x2f
 4417 0f1b AE030000 		.4byte	.LVL88
 4418 0f1f 5E130000 		.4byte	0x135e
 4419 0f23 30       		.uleb128 0x30
 4420 0f24 01       		.byte	0x1
 4421 0f25 51       		.byte	0x51
 4422 0f26 03       		.byte	0x3
 4423 0f27 F3       		.byte	0xf3
 4424 0f28 01       		.uleb128 0x1
 4425 0f29 51       		.byte	0x51
 4426 0f2a 00       		.byte	0
 4427 0f2b 00       		.byte	0
 4428 0f2c 28       		.uleb128 0x28
 4429 0f2d 01       		.byte	0x1
 4430 0f2e 76050000 		.4byte	.LASF154
 4431 0f32 01       		.byte	0x1
 4432 0f33 9E03     		.2byte	0x39e
 4433 0f35 01       		.byte	0x1
 4434 0f36 90020000 		.4byte	0x290
 4435 0f3a 24030000 		.4byte	.LFB72
 4436 0f3e 6A030000 		.4byte	.LFE72
 4437 0f42 02       		.byte	0x2
 4438 0f43 7D       		.byte	0x7d
 4439 0f44 00       		.sleb128 0
 4440 0f45 01       		.byte	0x1
 4441 0f46 7B0F0000 		.4byte	0xf7b
 4442 0f4a 29       		.uleb128 0x29
 4443 0f4b 68736300 		.ascii	"hsc\000"
 4444 0f4f 01       		.byte	0x1
 4445 0f50 9E03     		.2byte	0x39e
 4446 0f52 B1060000 		.4byte	0x6b1
 4447 0f56 69090000 		.4byte	.LLST35
 4448 0f5a 1D       		.uleb128 0x1d
 4449 0f5b 24010000 		.4byte	.LASF151
 4450 0f5f 01       		.byte	0x1
 4451 0f60 9E03     		.2byte	0x39e
 4452 0f62 51040000 		.4byte	0x451
 4453 0f66 BC090000 		.4byte	.LLST36
 4454 0f6a 1D       		.uleb128 0x1d
 4455 0f6b 9A060000 		.4byte	.LASF152
 4456 0f6f 01       		.byte	0x1
 4457 0f70 9E03     		.2byte	0x39e
 4458 0f72 A7000000 		.4byte	0xa7
 4459 0f76 F5090000 		.4byte	.LLST37
 4460 0f7a 00       		.byte	0
 4461 0f7b 28       		.uleb128 0x28
 4462 0f7c 01       		.byte	0x1
 4463 0f7d 0F040000 		.4byte	.LASF155
 4464 0f81 01       		.byte	0x1
 4465 0f82 6E03     		.2byte	0x36e
ARM GAS  /tmp/ccvrs2bU.s 			page 130


 4466 0f84 01       		.byte	0x1
 4467 0f85 90020000 		.4byte	0x290
 4468 0f89 D6020000 		.4byte	.LFB71
 4469 0f8d 24030000 		.4byte	.LFE71
 4470 0f91 02       		.byte	0x2
 4471 0f92 7D       		.byte	0x7d
 4472 0f93 00       		.sleb128 0
 4473 0f94 01       		.byte	0x1
 4474 0f95 CA0F0000 		.4byte	0xfca
 4475 0f99 29       		.uleb128 0x29
 4476 0f9a 68736300 		.ascii	"hsc\000"
 4477 0f9e 01       		.byte	0x1
 4478 0f9f 6E03     		.2byte	0x36e
 4479 0fa1 B1060000 		.4byte	0x6b1
 4480 0fa5 3A0A0000 		.4byte	.LLST32
 4481 0fa9 1D       		.uleb128 0x1d
 4482 0faa 24010000 		.4byte	.LASF151
 4483 0fae 01       		.byte	0x1
 4484 0faf 6E03     		.2byte	0x36e
 4485 0fb1 51040000 		.4byte	0x451
 4486 0fb5 8D0A0000 		.4byte	.LLST33
 4487 0fb9 1D       		.uleb128 0x1d
 4488 0fba 9A060000 		.4byte	.LASF152
 4489 0fbe 01       		.byte	0x1
 4490 0fbf 6E03     		.2byte	0x36e
 4491 0fc1 A7000000 		.4byte	0xa7
 4492 0fc5 C60A0000 		.4byte	.LLST34
 4493 0fc9 00       		.byte	0
 4494 0fca 34       		.uleb128 0x34
 4495 0fcb 01       		.byte	0x1
 4496 0fcc 78080000 		.4byte	.LASF156
 4497 0fd0 01       		.byte	0x1
 4498 0fd1 3303     		.2byte	0x333
 4499 0fd3 01       		.byte	0x1
 4500 0fd4 90020000 		.4byte	0x290
 4501 0fd8 50020000 		.4byte	.LFB70
 4502 0fdc D6020000 		.4byte	.LFE70
 4503 0fe0 0B0B0000 		.4byte	.LLST25
 4504 0fe4 01       		.byte	0x1
 4505 0fe5 75100000 		.4byte	0x1075
 4506 0fe9 29       		.uleb128 0x29
 4507 0fea 68736300 		.ascii	"hsc\000"
 4508 0fee 01       		.byte	0x1
 4509 0fef 3303     		.2byte	0x333
 4510 0ff1 B1060000 		.4byte	0x6b1
 4511 0ff5 2B0B0000 		.4byte	.LLST26
 4512 0ff9 1D       		.uleb128 0x1d
 4513 0ffa 24010000 		.4byte	.LASF151
 4514 0ffe 01       		.byte	0x1
 4515 0fff 3303     		.2byte	0x333
 4516 1001 51040000 		.4byte	0x451
 4517 1005 750B0000 		.4byte	.LLST27
 4518 1009 1D       		.uleb128 0x1d
 4519 100a 9A060000 		.4byte	.LASF152
 4520 100e 01       		.byte	0x1
 4521 100f 3303     		.2byte	0x333
 4522 1011 A7000000 		.4byte	0xa7
ARM GAS  /tmp/ccvrs2bU.s 			page 131


 4523 1015 A90B0000 		.4byte	.LLST28
 4524 1019 1D       		.uleb128 0x1d
 4525 101a E1020000 		.4byte	.LASF125
 4526 101e 01       		.byte	0x1
 4527 101f 3303     		.2byte	0x333
 4528 1021 C7000000 		.4byte	0xc7
 4529 1025 E30B0000 		.4byte	.LLST29
 4530 1029 1E       		.uleb128 0x1e
 4531 102a 746D7000 		.ascii	"tmp\000"
 4532 102e 01       		.byte	0x1
 4533 102f 3503     		.2byte	0x335
 4534 1031 36080000 		.4byte	0x836
 4535 1035 010C0000 		.4byte	.LLST30
 4536 1039 23       		.uleb128 0x23
 4537 103a EC070000 		.4byte	.LASF157
 4538 103e 01       		.byte	0x1
 4539 103f 3603     		.2byte	0x336
 4540 1041 C7000000 		.4byte	0xc7
 4541 1045 210C0000 		.4byte	.LLST31
 4542 1049 1F       		.uleb128 0x1f
 4543 104a 84020000 		.4byte	.LVL54
 4544 104e 6C130000 		.4byte	0x136c
 4545 1052 2F       		.uleb128 0x2f
 4546 1053 B6020000 		.4byte	.LVL58
 4547 1057 44120000 		.4byte	0x1244
 4548 105b 30       		.uleb128 0x30
 4549 105c 01       		.byte	0x1
 4550 105d 50       		.byte	0x50
 4551 105e 02       		.byte	0x2
 4552 105f 74       		.byte	0x74
 4553 1060 00       		.sleb128 0
 4554 1061 30       		.uleb128 0x30
 4555 1062 01       		.byte	0x1
 4556 1063 51       		.byte	0x51
 4557 1064 02       		.byte	0x2
 4558 1065 08       		.byte	0x8
 4559 1066 20       		.byte	0x20
 4560 1067 30       		.uleb128 0x30
 4561 1068 01       		.byte	0x1
 4562 1069 52       		.byte	0x52
 4563 106a 02       		.byte	0x2
 4564 106b 76       		.byte	0x76
 4565 106c 00       		.sleb128 0
 4566 106d 30       		.uleb128 0x30
 4567 106e 01       		.byte	0x1
 4568 106f 53       		.byte	0x53
 4569 1070 02       		.byte	0x2
 4570 1071 77       		.byte	0x77
 4571 1072 00       		.sleb128 0
 4572 1073 00       		.byte	0
 4573 1074 00       		.byte	0
 4574 1075 34       		.uleb128 0x34
 4575 1076 01       		.byte	0x1
 4576 1077 F8030000 		.4byte	.LASF158
 4577 107b 01       		.byte	0x1
 4578 107c F402     		.2byte	0x2f4
 4579 107e 01       		.byte	0x1
ARM GAS  /tmp/ccvrs2bU.s 			page 132


 4580 107f 90020000 		.4byte	0x290
 4581 1083 B6010000 		.4byte	.LFB69
 4582 1087 50020000 		.4byte	.LFE69
 4583 108b 620C0000 		.4byte	.LLST18
 4584 108f 01       		.byte	0x1
 4585 1090 46110000 		.4byte	0x1146
 4586 1094 29       		.uleb128 0x29
 4587 1095 68736300 		.ascii	"hsc\000"
 4588 1099 01       		.byte	0x1
 4589 109a F402     		.2byte	0x2f4
 4590 109c B1060000 		.4byte	0x6b1
 4591 10a0 820C0000 		.4byte	.LLST19
 4592 10a4 1D       		.uleb128 0x1d
 4593 10a5 24010000 		.4byte	.LASF151
 4594 10a9 01       		.byte	0x1
 4595 10aa F402     		.2byte	0x2f4
 4596 10ac 51040000 		.4byte	0x451
 4597 10b0 CC0C0000 		.4byte	.LLST20
 4598 10b4 1D       		.uleb128 0x1d
 4599 10b5 9A060000 		.4byte	.LASF152
 4600 10b9 01       		.byte	0x1
 4601 10ba F402     		.2byte	0x2f4
 4602 10bc A7000000 		.4byte	0xa7
 4603 10c0 0D0D0000 		.4byte	.LLST21
 4604 10c4 1D       		.uleb128 0x1d
 4605 10c5 E1020000 		.4byte	.LASF125
 4606 10c9 01       		.byte	0x1
 4607 10ca F402     		.2byte	0x2f4
 4608 10cc C7000000 		.4byte	0xc7
 4609 10d0 390D0000 		.4byte	.LLST22
 4610 10d4 1E       		.uleb128 0x1e
 4611 10d5 746D7000 		.ascii	"tmp\000"
 4612 10d9 01       		.byte	0x1
 4613 10da F602     		.2byte	0x2f6
 4614 10dc 36080000 		.4byte	0x836
 4615 10e0 570D0000 		.4byte	.LLST23
 4616 10e4 23       		.uleb128 0x23
 4617 10e5 EC070000 		.4byte	.LASF157
 4618 10e9 01       		.byte	0x1
 4619 10ea F702     		.2byte	0x2f7
 4620 10ec C7000000 		.4byte	0xc7
 4621 10f0 770D0000 		.4byte	.LLST24
 4622 10f4 1F       		.uleb128 0x1f
 4623 10f5 EE010000 		.4byte	.LVL39
 4624 10f9 6C130000 		.4byte	0x136c
 4625 10fd 32       		.uleb128 0x32
 4626 10fe 0A020000 		.4byte	.LVL42
 4627 1102 44120000 		.4byte	0x1244
 4628 1106 23110000 		.4byte	0x1123
 4629 110a 30       		.uleb128 0x30
 4630 110b 01       		.byte	0x1
 4631 110c 50       		.byte	0x50
 4632 110d 02       		.byte	0x2
 4633 110e 74       		.byte	0x74
 4634 110f 00       		.sleb128 0
 4635 1110 30       		.uleb128 0x30
 4636 1111 01       		.byte	0x1
ARM GAS  /tmp/ccvrs2bU.s 			page 133


 4637 1112 51       		.byte	0x51
 4638 1113 02       		.byte	0x2
 4639 1114 08       		.byte	0x8
 4640 1115 40       		.byte	0x40
 4641 1116 30       		.uleb128 0x30
 4642 1117 01       		.byte	0x1
 4643 1118 52       		.byte	0x52
 4644 1119 02       		.byte	0x2
 4645 111a 76       		.byte	0x76
 4646 111b 00       		.sleb128 0
 4647 111c 30       		.uleb128 0x30
 4648 111d 01       		.byte	0x1
 4649 111e 53       		.byte	0x53
 4650 111f 02       		.byte	0x2
 4651 1120 77       		.byte	0x77
 4652 1121 00       		.sleb128 0
 4653 1122 00       		.byte	0
 4654 1123 2F       		.uleb128 0x2f
 4655 1124 2E020000 		.4byte	.LVL44
 4656 1128 44120000 		.4byte	0x1244
 4657 112c 30       		.uleb128 0x30
 4658 112d 01       		.byte	0x1
 4659 112e 50       		.byte	0x50
 4660 112f 02       		.byte	0x2
 4661 1130 74       		.byte	0x74
 4662 1131 00       		.sleb128 0
 4663 1132 30       		.uleb128 0x30
 4664 1133 01       		.byte	0x1
 4665 1134 51       		.byte	0x51
 4666 1135 02       		.byte	0x2
 4667 1136 08       		.byte	0x8
 4668 1137 80       		.byte	0x80
 4669 1138 30       		.uleb128 0x30
 4670 1139 01       		.byte	0x1
 4671 113a 52       		.byte	0x52
 4672 113b 02       		.byte	0x2
 4673 113c 76       		.byte	0x76
 4674 113d 00       		.sleb128 0
 4675 113e 30       		.uleb128 0x30
 4676 113f 01       		.byte	0x1
 4677 1140 53       		.byte	0x53
 4678 1141 02       		.byte	0x2
 4679 1142 77       		.byte	0x77
 4680 1143 00       		.sleb128 0
 4681 1144 00       		.byte	0
 4682 1145 00       		.byte	0
 4683 1146 2B       		.uleb128 0x2b
 4684 1147 01       		.byte	0x1
 4685 1148 950A0000 		.4byte	.LASF159
 4686 114c 01       		.byte	0x1
 4687 114d B301     		.2byte	0x1b3
 4688 114f 01       		.byte	0x1
 4689 1150 61110000 		.4byte	0x1161
 4690 1154 1A       		.uleb128 0x1a
 4691 1155 68736300 		.ascii	"hsc\000"
 4692 1159 01       		.byte	0x1
 4693 115a B301     		.2byte	0x1b3
ARM GAS  /tmp/ccvrs2bU.s 			page 134


 4694 115c B1060000 		.4byte	0x6b1
 4695 1160 00       		.byte	0
 4696 1161 2B       		.uleb128 0x2b
 4697 1162 01       		.byte	0x1
 4698 1163 8E080000 		.4byte	.LASF160
 4699 1167 01       		.byte	0x1
 4700 1168 A301     		.2byte	0x1a3
 4701 116a 01       		.byte	0x1
 4702 116b 7C110000 		.4byte	0x117c
 4703 116f 1A       		.uleb128 0x1a
 4704 1170 68736300 		.ascii	"hsc\000"
 4705 1174 01       		.byte	0x1
 4706 1175 A301     		.2byte	0x1a3
 4707 1177 B1060000 		.4byte	0x6b1
 4708 117b 00       		.byte	0
 4709 117c 34       		.uleb128 0x34
 4710 117d 01       		.byte	0x1
 4711 117e D1070000 		.4byte	.LASF161
 4712 1182 01       		.byte	0x1
 4713 1183 7701     		.2byte	0x177
 4714 1185 01       		.byte	0x1
 4715 1186 90020000 		.4byte	0x290
 4716 118a 86010000 		.4byte	.LFB66
 4717 118e B6010000 		.4byte	.LFE66
 4718 1192 AD0D0000 		.4byte	.LLST16
 4719 1196 01       		.byte	0x1
 4720 1197 BC110000 		.4byte	0x11bc
 4721 119b 29       		.uleb128 0x29
 4722 119c 68736300 		.ascii	"hsc\000"
 4723 11a0 01       		.byte	0x1
 4724 11a1 7701     		.2byte	0x177
 4725 11a3 B1060000 		.4byte	0x6b1
 4726 11a7 CD0D0000 		.4byte	.LLST17
 4727 11ab 2F       		.uleb128 0x2f
 4728 11ac A0010000 		.4byte	.LVL34
 4729 11b0 46110000 		.4byte	0x1146
 4730 11b4 30       		.uleb128 0x30
 4731 11b5 01       		.byte	0x1
 4732 11b6 50       		.byte	0x50
 4733 11b7 02       		.byte	0x2
 4734 11b8 74       		.byte	0x74
 4735 11b9 00       		.sleb128 0
 4736 11ba 00       		.byte	0
 4737 11bb 00       		.byte	0
 4738 11bc 34       		.uleb128 0x34
 4739 11bd 01       		.byte	0x1
 4740 11be 04010000 		.4byte	.LASF162
 4741 11c2 01       		.byte	0x1
 4742 11c3 2801     		.2byte	0x128
 4743 11c5 01       		.byte	0x1
 4744 11c6 90020000 		.4byte	0x290
 4745 11ca 6C000000 		.4byte	.LFB65
 4746 11ce 84010000 		.4byte	.LFE65
 4747 11d2 010E0000 		.4byte	.LLST11
 4748 11d6 01       		.byte	0x1
 4749 11d7 44120000 		.4byte	0x1244
 4750 11db 29       		.uleb128 0x29
ARM GAS  /tmp/ccvrs2bU.s 			page 135


 4751 11dc 68736300 		.ascii	"hsc\000"
 4752 11e0 01       		.byte	0x1
 4753 11e1 2801     		.2byte	0x128
 4754 11e3 B1060000 		.4byte	0x6b1
 4755 11e7 210E0000 		.4byte	.LLST12
 4756 11eb 37       		.uleb128 0x37
 4757 11ec 7E060000 		.4byte	0x67e
 4758 11f0 94000000 		.4byte	.LBB8
 4759 11f4 00000000 		.4byte	.Ldebug_ranges0+0
 4760 11f8 01       		.byte	0x1
 4761 11f9 5201     		.2byte	0x152
 4762 11fb 33120000 		.4byte	0x1233
 4763 11ff 25       		.uleb128 0x25
 4764 1200 8C060000 		.4byte	0x68c
 4765 1204 630E0000 		.4byte	.LLST13
 4766 1208 38       		.uleb128 0x38
 4767 1209 00000000 		.4byte	.Ldebug_ranges0+0
 4768 120d 2E       		.uleb128 0x2e
 4769 120e 98060000 		.4byte	0x698
 4770 1212 810E0000 		.4byte	.LLST14
 4771 1216 2E       		.uleb128 0x2e
 4772 1217 A4060000 		.4byte	0x6a4
 4773 121b 080F0000 		.4byte	.LLST15
 4774 121f 1F       		.uleb128 0x1f
 4775 1220 04010000 		.4byte	.LVL25
 4776 1224 7A130000 		.4byte	0x137a
 4777 1228 1F       		.uleb128 0x1f
 4778 1229 7A010000 		.4byte	.LVL29
 4779 122d 88130000 		.4byte	0x1388
 4780 1231 00       		.byte	0
 4781 1232 00       		.byte	0
 4782 1233 2F       		.uleb128 0x2f
 4783 1234 88000000 		.4byte	.LVL11
 4784 1238 61110000 		.4byte	0x1161
 4785 123c 30       		.uleb128 0x30
 4786 123d 01       		.byte	0x1
 4787 123e 50       		.byte	0x50
 4788 123f 02       		.byte	0x2
 4789 1240 75       		.byte	0x75
 4790 1241 00       		.sleb128 0
 4791 1242 00       		.byte	0
 4792 1243 00       		.byte	0
 4793 1244 39       		.uleb128 0x39
 4794 1245 BC080000 		.4byte	0x8bc
 4795 1249 1A000000 		.4byte	.LFB121
 4796 124d 6A000000 		.4byte	.LFE121
 4797 1251 1B0F0000 		.4byte	.LLST1
 4798 1255 01       		.byte	0x1
 4799 1256 C9120000 		.4byte	0x12c9
 4800 125a 25       		.uleb128 0x25
 4801 125b CE080000 		.4byte	0x8ce
 4802 125f 3B0F0000 		.4byte	.LLST2
 4803 1263 25       		.uleb128 0x25
 4804 1264 DA080000 		.4byte	0x8da
 4805 1268 590F0000 		.4byte	.LLST3
 4806 126c 25       		.uleb128 0x25
 4807 126d F2080000 		.4byte	0x8f2
ARM GAS  /tmp/ccvrs2bU.s 			page 136


 4808 1271 770F0000 		.4byte	.LLST4
 4809 1275 25       		.uleb128 0x25
 4810 1276 FE080000 		.4byte	0x8fe
 4811 127a 950F0000 		.4byte	.LLST5
 4812 127e 3A       		.uleb128 0x3a
 4813 127f E6080000 		.4byte	0x8e6
 4814 1283 00       		.byte	0
 4815 1284 3B       		.uleb128 0x3b
 4816 1285 38000000 		.4byte	.LBB4
 4817 1289 5E000000 		.4byte	.LBE4
 4818 128d BF120000 		.4byte	0x12bf
 4819 1291 25       		.uleb128 0x25
 4820 1292 DA080000 		.4byte	0x8da
 4821 1296 B30F0000 		.4byte	.LLST6
 4822 129a 25       		.uleb128 0x25
 4823 129b E6080000 		.4byte	0x8e6
 4824 129f C60F0000 		.4byte	.LLST7
 4825 12a3 25       		.uleb128 0x25
 4826 12a4 F2080000 		.4byte	0x8f2
 4827 12a8 DA0F0000 		.4byte	.LLST8
 4828 12ac 25       		.uleb128 0x25
 4829 12ad FE080000 		.4byte	0x8fe
 4830 12b1 ED0F0000 		.4byte	.LLST9
 4831 12b5 25       		.uleb128 0x25
 4832 12b6 CE080000 		.4byte	0x8ce
 4833 12ba 00100000 		.4byte	.LLST10
 4834 12be 00       		.byte	0
 4835 12bf 1F       		.uleb128 0x1f
 4836 12c0 62000000 		.4byte	.LVL9
 4837 12c4 6C130000 		.4byte	0x136c
 4838 12c8 00       		.byte	0
 4839 12c9 39       		.uleb128 0x39
 4840 12ca 0B080000 		.4byte	0x80b
 4841 12ce 66050000 		.4byte	.LFB98
 4842 12d2 B2050000 		.4byte	.LFE98
 4843 12d6 13100000 		.4byte	.LLST57
 4844 12da 01       		.byte	0x1
 4845 12db 25130000 		.4byte	0x1325
 4846 12df 25       		.uleb128 0x25
 4847 12e0 1D080000 		.4byte	0x81d
 4848 12e4 33100000 		.4byte	.LLST58
 4849 12e8 3C       		.uleb128 0x3c
 4850 12e9 29080000 		.4byte	0x829
 4851 12ed 2D       		.uleb128 0x2d
 4852 12ee 70050000 		.4byte	.LBB18
 4853 12f2 AC050000 		.4byte	.LBE18
 4854 12f6 25       		.uleb128 0x25
 4855 12f7 1D080000 		.4byte	0x81d
 4856 12fb 6D100000 		.4byte	.LLST59
 4857 12ff 2D       		.uleb128 0x2d
 4858 1300 70050000 		.4byte	.LBB19
 4859 1304 AC050000 		.4byte	.LBE19
 4860 1308 2E       		.uleb128 0x2e
 4861 1309 E8120000 		.4byte	0x12e8
 4862 130d 8E100000 		.4byte	.LLST60
 4863 1311 2F       		.uleb128 0x2f
 4864 1312 AA050000 		.4byte	.LVL122
ARM GAS  /tmp/ccvrs2bU.s 			page 137


 4865 1316 020B0000 		.4byte	0xb02
 4866 131a 30       		.uleb128 0x30
 4867 131b 01       		.byte	0x1
 4868 131c 50       		.byte	0x50
 4869 131d 03       		.byte	0x3
 4870 131e F3       		.byte	0xf3
 4871 131f 01       		.uleb128 0x1
 4872 1320 50       		.byte	0x50
 4873 1321 00       		.byte	0
 4874 1322 00       		.byte	0
 4875 1323 00       		.byte	0
 4876 1324 00       		.byte	0
 4877 1325 3D       		.uleb128 0x3d
 4878 1326 950A0000 		.4byte	0xa95
 4879 132a B4080000 		.4byte	.LFB87
 4880 132e B6080000 		.4byte	.LFE87
 4881 1332 02       		.byte	0x2
 4882 1333 7D       		.byte	0x7d
 4883 1334 00       		.sleb128 0
 4884 1335 01       		.byte	0x1
 4885 1336 42130000 		.4byte	0x1342
 4886 133a 3E       		.uleb128 0x3e
 4887 133b A40A0000 		.4byte	0xaa4
 4888 133f 01       		.byte	0x1
 4889 1340 50       		.byte	0x50
 4890 1341 00       		.byte	0
 4891 1342 3F       		.uleb128 0x3f
 4892 1343 01       		.byte	0x1
 4893 1344 01       		.byte	0x1
 4894 1345 B6030000 		.4byte	.LASF163
 4895 1349 B6030000 		.4byte	.LASF163
 4896 134d 09       		.byte	0x9
 4897 134e 7C01     		.2byte	0x17c
 4898 1350 3F       		.uleb128 0x3f
 4899 1351 01       		.byte	0x1
 4900 1352 01       		.byte	0x1
 4901 1353 03050000 		.4byte	.LASF164
 4902 1357 03050000 		.4byte	.LASF164
 4903 135b 09       		.byte	0x9
 4904 135c 7B01     		.2byte	0x17b
 4905 135e 3F       		.uleb128 0x3f
 4906 135f 01       		.byte	0x1
 4907 1360 01       		.byte	0x1
 4908 1361 C4010000 		.4byte	.LASF165
 4909 1365 C4010000 		.4byte	.LASF165
 4910 1369 09       		.byte	0x9
 4911 136a 7A01     		.2byte	0x17a
 4912 136c 3F       		.uleb128 0x3f
 4913 136d 01       		.byte	0x1
 4914 136e 01       		.byte	0x1
 4915 136f D1050000 		.4byte	.LASF166
 4916 1373 D1050000 		.4byte	.LASF166
 4917 1377 0B       		.byte	0xb
 4918 1378 2A01     		.2byte	0x12a
 4919 137a 3F       		.uleb128 0x3f
 4920 137b 01       		.byte	0x1
 4921 137c 01       		.byte	0x1
ARM GAS  /tmp/ccvrs2bU.s 			page 138


 4922 137d EC060000 		.4byte	.LASF167
 4923 1381 EC060000 		.4byte	.LASF167
 4924 1385 0C       		.byte	0xc
 4925 1386 9704     		.2byte	0x497
 4926 1388 3F       		.uleb128 0x3f
 4927 1389 01       		.byte	0x1
 4928 138a 01       		.byte	0x1
 4929 138b 00000000 		.4byte	.LASF168
 4930 138f 00000000 		.4byte	.LASF168
 4931 1393 0C       		.byte	0xc
 4932 1394 9604     		.2byte	0x496
 4933 1396 00       		.byte	0
 4934              		.section	.debug_abbrev,"",%progbits
 4935              	.Ldebug_abbrev0:
 4936 0000 01       		.uleb128 0x1
 4937 0001 11       		.uleb128 0x11
 4938 0002 01       		.byte	0x1
 4939 0003 25       		.uleb128 0x25
 4940 0004 0E       		.uleb128 0xe
 4941 0005 13       		.uleb128 0x13
 4942 0006 0B       		.uleb128 0xb
 4943 0007 03       		.uleb128 0x3
 4944 0008 0E       		.uleb128 0xe
 4945 0009 1B       		.uleb128 0x1b
 4946 000a 0E       		.uleb128 0xe
 4947 000b 11       		.uleb128 0x11
 4948 000c 01       		.uleb128 0x1
 4949 000d 12       		.uleb128 0x12
 4950 000e 01       		.uleb128 0x1
 4951 000f 10       		.uleb128 0x10
 4952 0010 06       		.uleb128 0x6
 4953 0011 00       		.byte	0
 4954 0012 00       		.byte	0
 4955 0013 02       		.uleb128 0x2
 4956 0014 24       		.uleb128 0x24
 4957 0015 00       		.byte	0
 4958 0016 0B       		.uleb128 0xb
 4959 0017 0B       		.uleb128 0xb
 4960 0018 3E       		.uleb128 0x3e
 4961 0019 0B       		.uleb128 0xb
 4962 001a 03       		.uleb128 0x3
 4963 001b 0E       		.uleb128 0xe
 4964 001c 00       		.byte	0
 4965 001d 00       		.byte	0
 4966 001e 03       		.uleb128 0x3
 4967 001f 16       		.uleb128 0x16
 4968 0020 00       		.byte	0
 4969 0021 03       		.uleb128 0x3
 4970 0022 0E       		.uleb128 0xe
 4971 0023 3A       		.uleb128 0x3a
 4972 0024 0B       		.uleb128 0xb
 4973 0025 3B       		.uleb128 0x3b
 4974 0026 0B       		.uleb128 0xb
 4975 0027 49       		.uleb128 0x49
 4976 0028 13       		.uleb128 0x13
 4977 0029 00       		.byte	0
 4978 002a 00       		.byte	0
ARM GAS  /tmp/ccvrs2bU.s 			page 139


 4979 002b 04       		.uleb128 0x4
 4980 002c 24       		.uleb128 0x24
 4981 002d 00       		.byte	0
 4982 002e 0B       		.uleb128 0xb
 4983 002f 0B       		.uleb128 0xb
 4984 0030 3E       		.uleb128 0x3e
 4985 0031 0B       		.uleb128 0xb
 4986 0032 03       		.uleb128 0x3
 4987 0033 08       		.uleb128 0x8
 4988 0034 00       		.byte	0
 4989 0035 00       		.byte	0
 4990 0036 05       		.uleb128 0x5
 4991 0037 26       		.uleb128 0x26
 4992 0038 00       		.byte	0
 4993 0039 49       		.uleb128 0x49
 4994 003a 13       		.uleb128 0x13
 4995 003b 00       		.byte	0
 4996 003c 00       		.byte	0
 4997 003d 06       		.uleb128 0x6
 4998 003e 35       		.uleb128 0x35
 4999 003f 00       		.byte	0
 5000 0040 49       		.uleb128 0x49
 5001 0041 13       		.uleb128 0x13
 5002 0042 00       		.byte	0
 5003 0043 00       		.byte	0
 5004 0044 07       		.uleb128 0x7
 5005 0045 34       		.uleb128 0x34
 5006 0046 00       		.byte	0
 5007 0047 03       		.uleb128 0x3
 5008 0048 0E       		.uleb128 0xe
 5009 0049 3A       		.uleb128 0x3a
 5010 004a 0B       		.uleb128 0xb
 5011 004b 3B       		.uleb128 0x3b
 5012 004c 05       		.uleb128 0x5
 5013 004d 49       		.uleb128 0x49
 5014 004e 13       		.uleb128 0x13
 5015 004f 3F       		.uleb128 0x3f
 5016 0050 0C       		.uleb128 0xc
 5017 0051 3C       		.uleb128 0x3c
 5018 0052 0C       		.uleb128 0xc
 5019 0053 00       		.byte	0
 5020 0054 00       		.byte	0
 5021 0055 08       		.uleb128 0x8
 5022 0056 34       		.uleb128 0x34
 5023 0057 00       		.byte	0
 5024 0058 03       		.uleb128 0x3
 5025 0059 0E       		.uleb128 0xe
 5026 005a 3A       		.uleb128 0x3a
 5027 005b 0B       		.uleb128 0xb
 5028 005c 3B       		.uleb128 0x3b
 5029 005d 0B       		.uleb128 0xb
 5030 005e 49       		.uleb128 0x49
 5031 005f 13       		.uleb128 0x13
 5032 0060 3F       		.uleb128 0x3f
 5033 0061 0C       		.uleb128 0xc
 5034 0062 3C       		.uleb128 0x3c
 5035 0063 0C       		.uleb128 0xc
ARM GAS  /tmp/ccvrs2bU.s 			page 140


 5036 0064 00       		.byte	0
 5037 0065 00       		.byte	0
 5038 0066 09       		.uleb128 0x9
 5039 0067 01       		.uleb128 0x1
 5040 0068 01       		.byte	0x1
 5041 0069 49       		.uleb128 0x49
 5042 006a 13       		.uleb128 0x13
 5043 006b 01       		.uleb128 0x1
 5044 006c 13       		.uleb128 0x13
 5045 006d 00       		.byte	0
 5046 006e 00       		.byte	0
 5047 006f 0A       		.uleb128 0xa
 5048 0070 21       		.uleb128 0x21
 5049 0071 00       		.byte	0
 5050 0072 49       		.uleb128 0x49
 5051 0073 13       		.uleb128 0x13
 5052 0074 2F       		.uleb128 0x2f
 5053 0075 0B       		.uleb128 0xb
 5054 0076 00       		.byte	0
 5055 0077 00       		.byte	0
 5056 0078 0B       		.uleb128 0xb
 5057 0079 13       		.uleb128 0x13
 5058 007a 01       		.byte	0x1
 5059 007b 0B       		.uleb128 0xb
 5060 007c 0B       		.uleb128 0xb
 5061 007d 3A       		.uleb128 0x3a
 5062 007e 0B       		.uleb128 0xb
 5063 007f 3B       		.uleb128 0x3b
 5064 0080 05       		.uleb128 0x5
 5065 0081 01       		.uleb128 0x1
 5066 0082 13       		.uleb128 0x13
 5067 0083 00       		.byte	0
 5068 0084 00       		.byte	0
 5069 0085 0C       		.uleb128 0xc
 5070 0086 0D       		.uleb128 0xd
 5071 0087 00       		.byte	0
 5072 0088 03       		.uleb128 0x3
 5073 0089 08       		.uleb128 0x8
 5074 008a 3A       		.uleb128 0x3a
 5075 008b 0B       		.uleb128 0xb
 5076 008c 3B       		.uleb128 0x3b
 5077 008d 05       		.uleb128 0x5
 5078 008e 49       		.uleb128 0x49
 5079 008f 13       		.uleb128 0x13
 5080 0090 38       		.uleb128 0x38
 5081 0091 0A       		.uleb128 0xa
 5082 0092 00       		.byte	0
 5083 0093 00       		.byte	0
 5084 0094 0D       		.uleb128 0xd
 5085 0095 0D       		.uleb128 0xd
 5086 0096 00       		.byte	0
 5087 0097 03       		.uleb128 0x3
 5088 0098 0E       		.uleb128 0xe
 5089 0099 3A       		.uleb128 0x3a
 5090 009a 0B       		.uleb128 0xb
 5091 009b 3B       		.uleb128 0x3b
 5092 009c 05       		.uleb128 0x5
ARM GAS  /tmp/ccvrs2bU.s 			page 141


 5093 009d 49       		.uleb128 0x49
 5094 009e 13       		.uleb128 0x13
 5095 009f 38       		.uleb128 0x38
 5096 00a0 0A       		.uleb128 0xa
 5097 00a1 00       		.byte	0
 5098 00a2 00       		.byte	0
 5099 00a3 0E       		.uleb128 0xe
 5100 00a4 16       		.uleb128 0x16
 5101 00a5 00       		.byte	0
 5102 00a6 03       		.uleb128 0x3
 5103 00a7 0E       		.uleb128 0xe
 5104 00a8 3A       		.uleb128 0x3a
 5105 00a9 0B       		.uleb128 0xb
 5106 00aa 3B       		.uleb128 0x3b
 5107 00ab 05       		.uleb128 0x5
 5108 00ac 49       		.uleb128 0x49
 5109 00ad 13       		.uleb128 0x13
 5110 00ae 00       		.byte	0
 5111 00af 00       		.byte	0
 5112 00b0 0F       		.uleb128 0xf
 5113 00b1 04       		.uleb128 0x4
 5114 00b2 01       		.byte	0x1
 5115 00b3 0B       		.uleb128 0xb
 5116 00b4 0B       		.uleb128 0xb
 5117 00b5 49       		.uleb128 0x49
 5118 00b6 13       		.uleb128 0x13
 5119 00b7 3A       		.uleb128 0x3a
 5120 00b8 0B       		.uleb128 0xb
 5121 00b9 3B       		.uleb128 0x3b
 5122 00ba 0B       		.uleb128 0xb
 5123 00bb 01       		.uleb128 0x1
 5124 00bc 13       		.uleb128 0x13
 5125 00bd 00       		.byte	0
 5126 00be 00       		.byte	0
 5127 00bf 10       		.uleb128 0x10
 5128 00c0 28       		.uleb128 0x28
 5129 00c1 00       		.byte	0
 5130 00c2 03       		.uleb128 0x3
 5131 00c3 0E       		.uleb128 0xe
 5132 00c4 1C       		.uleb128 0x1c
 5133 00c5 0B       		.uleb128 0xb
 5134 00c6 00       		.byte	0
 5135 00c7 00       		.byte	0
 5136 00c8 11       		.uleb128 0x11
 5137 00c9 28       		.uleb128 0x28
 5138 00ca 00       		.byte	0
 5139 00cb 03       		.uleb128 0x3
 5140 00cc 08       		.uleb128 0x8
 5141 00cd 1C       		.uleb128 0x1c
 5142 00ce 0B       		.uleb128 0xb
 5143 00cf 00       		.byte	0
 5144 00d0 00       		.byte	0
 5145 00d1 12       		.uleb128 0x12
 5146 00d2 13       		.uleb128 0x13
 5147 00d3 01       		.byte	0x1
 5148 00d4 0B       		.uleb128 0xb
 5149 00d5 0B       		.uleb128 0xb
ARM GAS  /tmp/ccvrs2bU.s 			page 142


 5150 00d6 3A       		.uleb128 0x3a
 5151 00d7 0B       		.uleb128 0xb
 5152 00d8 3B       		.uleb128 0x3b
 5153 00d9 0B       		.uleb128 0xb
 5154 00da 01       		.uleb128 0x1
 5155 00db 13       		.uleb128 0x13
 5156 00dc 00       		.byte	0
 5157 00dd 00       		.byte	0
 5158 00de 13       		.uleb128 0x13
 5159 00df 0D       		.uleb128 0xd
 5160 00e0 00       		.byte	0
 5161 00e1 03       		.uleb128 0x3
 5162 00e2 0E       		.uleb128 0xe
 5163 00e3 3A       		.uleb128 0x3a
 5164 00e4 0B       		.uleb128 0xb
 5165 00e5 3B       		.uleb128 0x3b
 5166 00e6 0B       		.uleb128 0xb
 5167 00e7 49       		.uleb128 0x49
 5168 00e8 13       		.uleb128 0x13
 5169 00e9 38       		.uleb128 0x38
 5170 00ea 0A       		.uleb128 0xa
 5171 00eb 00       		.byte	0
 5172 00ec 00       		.byte	0
 5173 00ed 14       		.uleb128 0x14
 5174 00ee 13       		.uleb128 0x13
 5175 00ef 01       		.byte	0x1
 5176 00f0 03       		.uleb128 0x3
 5177 00f1 0E       		.uleb128 0xe
 5178 00f2 0B       		.uleb128 0xb
 5179 00f3 0B       		.uleb128 0xb
 5180 00f4 3A       		.uleb128 0x3a
 5181 00f5 0B       		.uleb128 0xb
 5182 00f6 3B       		.uleb128 0x3b
 5183 00f7 0B       		.uleb128 0xb
 5184 00f8 01       		.uleb128 0x1
 5185 00f9 13       		.uleb128 0x13
 5186 00fa 00       		.byte	0
 5187 00fb 00       		.byte	0
 5188 00fc 15       		.uleb128 0x15
 5189 00fd 0F       		.uleb128 0xf
 5190 00fe 00       		.byte	0
 5191 00ff 0B       		.uleb128 0xb
 5192 0100 0B       		.uleb128 0xb
 5193 0101 49       		.uleb128 0x49
 5194 0102 13       		.uleb128 0x13
 5195 0103 00       		.byte	0
 5196 0104 00       		.byte	0
 5197 0105 16       		.uleb128 0x16
 5198 0106 0F       		.uleb128 0xf
 5199 0107 00       		.byte	0
 5200 0108 0B       		.uleb128 0xb
 5201 0109 0B       		.uleb128 0xb
 5202 010a 00       		.byte	0
 5203 010b 00       		.byte	0
 5204 010c 17       		.uleb128 0x17
 5205 010d 15       		.uleb128 0x15
 5206 010e 01       		.byte	0x1
ARM GAS  /tmp/ccvrs2bU.s 			page 143


 5207 010f 27       		.uleb128 0x27
 5208 0110 0C       		.uleb128 0xc
 5209 0111 01       		.uleb128 0x1
 5210 0112 13       		.uleb128 0x13
 5211 0113 00       		.byte	0
 5212 0114 00       		.byte	0
 5213 0115 18       		.uleb128 0x18
 5214 0116 05       		.uleb128 0x5
 5215 0117 00       		.byte	0
 5216 0118 49       		.uleb128 0x49
 5217 0119 13       		.uleb128 0x13
 5218 011a 00       		.byte	0
 5219 011b 00       		.byte	0
 5220 011c 19       		.uleb128 0x19
 5221 011d 2E       		.uleb128 0x2e
 5222 011e 01       		.byte	0x1
 5223 011f 03       		.uleb128 0x3
 5224 0120 0E       		.uleb128 0xe
 5225 0121 3A       		.uleb128 0x3a
 5226 0122 0B       		.uleb128 0xb
 5227 0123 3B       		.uleb128 0x3b
 5228 0124 05       		.uleb128 0x5
 5229 0125 27       		.uleb128 0x27
 5230 0126 0C       		.uleb128 0xc
 5231 0127 20       		.uleb128 0x20
 5232 0128 0B       		.uleb128 0xb
 5233 0129 01       		.uleb128 0x1
 5234 012a 13       		.uleb128 0x13
 5235 012b 00       		.byte	0
 5236 012c 00       		.byte	0
 5237 012d 1A       		.uleb128 0x1a
 5238 012e 05       		.uleb128 0x5
 5239 012f 00       		.byte	0
 5240 0130 03       		.uleb128 0x3
 5241 0131 08       		.uleb128 0x8
 5242 0132 3A       		.uleb128 0x3a
 5243 0133 0B       		.uleb128 0xb
 5244 0134 3B       		.uleb128 0x3b
 5245 0135 05       		.uleb128 0x5
 5246 0136 49       		.uleb128 0x49
 5247 0137 13       		.uleb128 0x13
 5248 0138 00       		.byte	0
 5249 0139 00       		.byte	0
 5250 013a 1B       		.uleb128 0x1b
 5251 013b 34       		.uleb128 0x34
 5252 013c 00       		.byte	0
 5253 013d 03       		.uleb128 0x3
 5254 013e 0E       		.uleb128 0xe
 5255 013f 3A       		.uleb128 0x3a
 5256 0140 0B       		.uleb128 0xb
 5257 0141 3B       		.uleb128 0x3b
 5258 0142 05       		.uleb128 0x5
 5259 0143 49       		.uleb128 0x49
 5260 0144 13       		.uleb128 0x13
 5261 0145 00       		.byte	0
 5262 0146 00       		.byte	0
 5263 0147 1C       		.uleb128 0x1c
ARM GAS  /tmp/ccvrs2bU.s 			page 144


 5264 0148 2E       		.uleb128 0x2e
 5265 0149 01       		.byte	0x1
 5266 014a 03       		.uleb128 0x3
 5267 014b 0E       		.uleb128 0xe
 5268 014c 3A       		.uleb128 0x3a
 5269 014d 0B       		.uleb128 0xb
 5270 014e 3B       		.uleb128 0x3b
 5271 014f 05       		.uleb128 0x5
 5272 0150 27       		.uleb128 0x27
 5273 0151 0C       		.uleb128 0xc
 5274 0152 11       		.uleb128 0x11
 5275 0153 01       		.uleb128 0x1
 5276 0154 12       		.uleb128 0x12
 5277 0155 01       		.uleb128 0x1
 5278 0156 40       		.uleb128 0x40
 5279 0157 06       		.uleb128 0x6
 5280 0158 9742     		.uleb128 0x2117
 5281 015a 0C       		.uleb128 0xc
 5282 015b 01       		.uleb128 0x1
 5283 015c 13       		.uleb128 0x13
 5284 015d 00       		.byte	0
 5285 015e 00       		.byte	0
 5286 015f 1D       		.uleb128 0x1d
 5287 0160 05       		.uleb128 0x5
 5288 0161 00       		.byte	0
 5289 0162 03       		.uleb128 0x3
 5290 0163 0E       		.uleb128 0xe
 5291 0164 3A       		.uleb128 0x3a
 5292 0165 0B       		.uleb128 0xb
 5293 0166 3B       		.uleb128 0x3b
 5294 0167 05       		.uleb128 0x5
 5295 0168 49       		.uleb128 0x49
 5296 0169 13       		.uleb128 0x13
 5297 016a 02       		.uleb128 0x2
 5298 016b 06       		.uleb128 0x6
 5299 016c 00       		.byte	0
 5300 016d 00       		.byte	0
 5301 016e 1E       		.uleb128 0x1e
 5302 016f 34       		.uleb128 0x34
 5303 0170 00       		.byte	0
 5304 0171 03       		.uleb128 0x3
 5305 0172 08       		.uleb128 0x8
 5306 0173 3A       		.uleb128 0x3a
 5307 0174 0B       		.uleb128 0xb
 5308 0175 3B       		.uleb128 0x3b
 5309 0176 05       		.uleb128 0x5
 5310 0177 49       		.uleb128 0x49
 5311 0178 13       		.uleb128 0x13
 5312 0179 02       		.uleb128 0x2
 5313 017a 06       		.uleb128 0x6
 5314 017b 00       		.byte	0
 5315 017c 00       		.byte	0
 5316 017d 1F       		.uleb128 0x1f
 5317 017e 898201   		.uleb128 0x4109
 5318 0181 00       		.byte	0
 5319 0182 11       		.uleb128 0x11
 5320 0183 01       		.uleb128 0x1
ARM GAS  /tmp/ccvrs2bU.s 			page 145


 5321 0184 31       		.uleb128 0x31
 5322 0185 13       		.uleb128 0x13
 5323 0186 00       		.byte	0
 5324 0187 00       		.byte	0
 5325 0188 20       		.uleb128 0x20
 5326 0189 2E       		.uleb128 0x2e
 5327 018a 01       		.byte	0x1
 5328 018b 03       		.uleb128 0x3
 5329 018c 0E       		.uleb128 0xe
 5330 018d 3A       		.uleb128 0x3a
 5331 018e 0B       		.uleb128 0xb
 5332 018f 3B       		.uleb128 0x3b
 5333 0190 05       		.uleb128 0x5
 5334 0191 27       		.uleb128 0x27
 5335 0192 0C       		.uleb128 0xc
 5336 0193 49       		.uleb128 0x49
 5337 0194 13       		.uleb128 0x13
 5338 0195 20       		.uleb128 0x20
 5339 0196 0B       		.uleb128 0xb
 5340 0197 01       		.uleb128 0x1
 5341 0198 13       		.uleb128 0x13
 5342 0199 00       		.byte	0
 5343 019a 00       		.byte	0
 5344 019b 21       		.uleb128 0x21
 5345 019c 34       		.uleb128 0x34
 5346 019d 00       		.byte	0
 5347 019e 03       		.uleb128 0x3
 5348 019f 08       		.uleb128 0x8
 5349 01a0 3A       		.uleb128 0x3a
 5350 01a1 0B       		.uleb128 0xb
 5351 01a2 3B       		.uleb128 0x3b
 5352 01a3 05       		.uleb128 0x5
 5353 01a4 49       		.uleb128 0x49
 5354 01a5 13       		.uleb128 0x13
 5355 01a6 00       		.byte	0
 5356 01a7 00       		.byte	0
 5357 01a8 22       		.uleb128 0x22
 5358 01a9 05       		.uleb128 0x5
 5359 01aa 00       		.byte	0
 5360 01ab 03       		.uleb128 0x3
 5361 01ac 0E       		.uleb128 0xe
 5362 01ad 3A       		.uleb128 0x3a
 5363 01ae 0B       		.uleb128 0xb
 5364 01af 3B       		.uleb128 0x3b
 5365 01b0 05       		.uleb128 0x5
 5366 01b1 49       		.uleb128 0x49
 5367 01b2 13       		.uleb128 0x13
 5368 01b3 00       		.byte	0
 5369 01b4 00       		.byte	0
 5370 01b5 23       		.uleb128 0x23
 5371 01b6 34       		.uleb128 0x34
 5372 01b7 00       		.byte	0
 5373 01b8 03       		.uleb128 0x3
 5374 01b9 0E       		.uleb128 0xe
 5375 01ba 3A       		.uleb128 0x3a
 5376 01bb 0B       		.uleb128 0xb
 5377 01bc 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccvrs2bU.s 			page 146


 5378 01bd 05       		.uleb128 0x5
 5379 01be 49       		.uleb128 0x49
 5380 01bf 13       		.uleb128 0x13
 5381 01c0 02       		.uleb128 0x2
 5382 01c1 06       		.uleb128 0x6
 5383 01c2 00       		.byte	0
 5384 01c3 00       		.byte	0
 5385 01c4 24       		.uleb128 0x24
 5386 01c5 1D       		.uleb128 0x1d
 5387 01c6 01       		.byte	0x1
 5388 01c7 31       		.uleb128 0x31
 5389 01c8 13       		.uleb128 0x13
 5390 01c9 11       		.uleb128 0x11
 5391 01ca 01       		.uleb128 0x1
 5392 01cb 12       		.uleb128 0x12
 5393 01cc 01       		.uleb128 0x1
 5394 01cd 58       		.uleb128 0x58
 5395 01ce 0B       		.uleb128 0xb
 5396 01cf 59       		.uleb128 0x59
 5397 01d0 05       		.uleb128 0x5
 5398 01d1 01       		.uleb128 0x1
 5399 01d2 13       		.uleb128 0x13
 5400 01d3 00       		.byte	0
 5401 01d4 00       		.byte	0
 5402 01d5 25       		.uleb128 0x25
 5403 01d6 05       		.uleb128 0x5
 5404 01d7 00       		.byte	0
 5405 01d8 31       		.uleb128 0x31
 5406 01d9 13       		.uleb128 0x13
 5407 01da 02       		.uleb128 0x2
 5408 01db 06       		.uleb128 0x6
 5409 01dc 00       		.byte	0
 5410 01dd 00       		.byte	0
 5411 01de 26       		.uleb128 0x26
 5412 01df 2E       		.uleb128 0x2e
 5413 01e0 01       		.byte	0x1
 5414 01e1 03       		.uleb128 0x3
 5415 01e2 0E       		.uleb128 0xe
 5416 01e3 3A       		.uleb128 0x3a
 5417 01e4 0B       		.uleb128 0xb
 5418 01e5 3B       		.uleb128 0x3b
 5419 01e6 05       		.uleb128 0x5
 5420 01e7 27       		.uleb128 0x27
 5421 01e8 0C       		.uleb128 0xc
 5422 01e9 11       		.uleb128 0x11
 5423 01ea 01       		.uleb128 0x1
 5424 01eb 12       		.uleb128 0x12
 5425 01ec 01       		.uleb128 0x1
 5426 01ed 40       		.uleb128 0x40
 5427 01ee 0A       		.uleb128 0xa
 5428 01ef 9742     		.uleb128 0x2117
 5429 01f1 0C       		.uleb128 0xc
 5430 01f2 01       		.uleb128 0x1
 5431 01f3 13       		.uleb128 0x13
 5432 01f4 00       		.byte	0
 5433 01f5 00       		.byte	0
 5434 01f6 27       		.uleb128 0x27
ARM GAS  /tmp/ccvrs2bU.s 			page 147


 5435 01f7 05       		.uleb128 0x5
 5436 01f8 00       		.byte	0
 5437 01f9 03       		.uleb128 0x3
 5438 01fa 0E       		.uleb128 0xe
 5439 01fb 3A       		.uleb128 0x3a
 5440 01fc 0B       		.uleb128 0xb
 5441 01fd 3B       		.uleb128 0x3b
 5442 01fe 05       		.uleb128 0x5
 5443 01ff 49       		.uleb128 0x49
 5444 0200 13       		.uleb128 0x13
 5445 0201 02       		.uleb128 0x2
 5446 0202 0A       		.uleb128 0xa
 5447 0203 00       		.byte	0
 5448 0204 00       		.byte	0
 5449 0205 28       		.uleb128 0x28
 5450 0206 2E       		.uleb128 0x2e
 5451 0207 01       		.byte	0x1
 5452 0208 3F       		.uleb128 0x3f
 5453 0209 0C       		.uleb128 0xc
 5454 020a 03       		.uleb128 0x3
 5455 020b 0E       		.uleb128 0xe
 5456 020c 3A       		.uleb128 0x3a
 5457 020d 0B       		.uleb128 0xb
 5458 020e 3B       		.uleb128 0x3b
 5459 020f 05       		.uleb128 0x5
 5460 0210 27       		.uleb128 0x27
 5461 0211 0C       		.uleb128 0xc
 5462 0212 49       		.uleb128 0x49
 5463 0213 13       		.uleb128 0x13
 5464 0214 11       		.uleb128 0x11
 5465 0215 01       		.uleb128 0x1
 5466 0216 12       		.uleb128 0x12
 5467 0217 01       		.uleb128 0x1
 5468 0218 40       		.uleb128 0x40
 5469 0219 0A       		.uleb128 0xa
 5470 021a 9742     		.uleb128 0x2117
 5471 021c 0C       		.uleb128 0xc
 5472 021d 01       		.uleb128 0x1
 5473 021e 13       		.uleb128 0x13
 5474 021f 00       		.byte	0
 5475 0220 00       		.byte	0
 5476 0221 29       		.uleb128 0x29
 5477 0222 05       		.uleb128 0x5
 5478 0223 00       		.byte	0
 5479 0224 03       		.uleb128 0x3
 5480 0225 08       		.uleb128 0x8
 5481 0226 3A       		.uleb128 0x3a
 5482 0227 0B       		.uleb128 0xb
 5483 0228 3B       		.uleb128 0x3b
 5484 0229 05       		.uleb128 0x5
 5485 022a 49       		.uleb128 0x49
 5486 022b 13       		.uleb128 0x13
 5487 022c 02       		.uleb128 0x2
 5488 022d 06       		.uleb128 0x6
 5489 022e 00       		.byte	0
 5490 022f 00       		.byte	0
 5491 0230 2A       		.uleb128 0x2a
ARM GAS  /tmp/ccvrs2bU.s 			page 148


 5492 0231 2E       		.uleb128 0x2e
 5493 0232 01       		.byte	0x1
 5494 0233 3F       		.uleb128 0x3f
 5495 0234 0C       		.uleb128 0xc
 5496 0235 03       		.uleb128 0x3
 5497 0236 0E       		.uleb128 0xe
 5498 0237 3A       		.uleb128 0x3a
 5499 0238 0B       		.uleb128 0xb
 5500 0239 3B       		.uleb128 0x3b
 5501 023a 05       		.uleb128 0x5
 5502 023b 27       		.uleb128 0x27
 5503 023c 0C       		.uleb128 0xc
 5504 023d 20       		.uleb128 0x20
 5505 023e 0B       		.uleb128 0xb
 5506 023f 01       		.uleb128 0x1
 5507 0240 13       		.uleb128 0x13
 5508 0241 00       		.byte	0
 5509 0242 00       		.byte	0
 5510 0243 2B       		.uleb128 0x2b
 5511 0244 2E       		.uleb128 0x2e
 5512 0245 01       		.byte	0x1
 5513 0246 3F       		.uleb128 0x3f
 5514 0247 0C       		.uleb128 0xc
 5515 0248 03       		.uleb128 0x3
 5516 0249 0E       		.uleb128 0xe
 5517 024a 3A       		.uleb128 0x3a
 5518 024b 0B       		.uleb128 0xb
 5519 024c 3B       		.uleb128 0x3b
 5520 024d 05       		.uleb128 0x5
 5521 024e 27       		.uleb128 0x27
 5522 024f 0C       		.uleb128 0xc
 5523 0250 01       		.uleb128 0x1
 5524 0251 13       		.uleb128 0x13
 5525 0252 00       		.byte	0
 5526 0253 00       		.byte	0
 5527 0254 2C       		.uleb128 0x2c
 5528 0255 2E       		.uleb128 0x2e
 5529 0256 01       		.byte	0x1
 5530 0257 3F       		.uleb128 0x3f
 5531 0258 0C       		.uleb128 0xc
 5532 0259 03       		.uleb128 0x3
 5533 025a 0E       		.uleb128 0xe
 5534 025b 3A       		.uleb128 0x3a
 5535 025c 0B       		.uleb128 0xb
 5536 025d 3B       		.uleb128 0x3b
 5537 025e 05       		.uleb128 0x5
 5538 025f 27       		.uleb128 0x27
 5539 0260 0C       		.uleb128 0xc
 5540 0261 11       		.uleb128 0x11
 5541 0262 01       		.uleb128 0x1
 5542 0263 12       		.uleb128 0x12
 5543 0264 01       		.uleb128 0x1
 5544 0265 40       		.uleb128 0x40
 5545 0266 06       		.uleb128 0x6
 5546 0267 01       		.uleb128 0x1
 5547 0268 13       		.uleb128 0x13
 5548 0269 00       		.byte	0
ARM GAS  /tmp/ccvrs2bU.s 			page 149


 5549 026a 00       		.byte	0
 5550 026b 2D       		.uleb128 0x2d
 5551 026c 0B       		.uleb128 0xb
 5552 026d 01       		.byte	0x1
 5553 026e 11       		.uleb128 0x11
 5554 026f 01       		.uleb128 0x1
 5555 0270 12       		.uleb128 0x12
 5556 0271 01       		.uleb128 0x1
 5557 0272 00       		.byte	0
 5558 0273 00       		.byte	0
 5559 0274 2E       		.uleb128 0x2e
 5560 0275 34       		.uleb128 0x34
 5561 0276 00       		.byte	0
 5562 0277 31       		.uleb128 0x31
 5563 0278 13       		.uleb128 0x13
 5564 0279 02       		.uleb128 0x2
 5565 027a 06       		.uleb128 0x6
 5566 027b 00       		.byte	0
 5567 027c 00       		.byte	0
 5568 027d 2F       		.uleb128 0x2f
 5569 027e 898201   		.uleb128 0x4109
 5570 0281 01       		.byte	0x1
 5571 0282 11       		.uleb128 0x11
 5572 0283 01       		.uleb128 0x1
 5573 0284 31       		.uleb128 0x31
 5574 0285 13       		.uleb128 0x13
 5575 0286 00       		.byte	0
 5576 0287 00       		.byte	0
 5577 0288 30       		.uleb128 0x30
 5578 0289 8A8201   		.uleb128 0x410a
 5579 028c 00       		.byte	0
 5580 028d 02       		.uleb128 0x2
 5581 028e 0A       		.uleb128 0xa
 5582 028f 9142     		.uleb128 0x2111
 5583 0291 0A       		.uleb128 0xa
 5584 0292 00       		.byte	0
 5585 0293 00       		.byte	0
 5586 0294 31       		.uleb128 0x31
 5587 0295 898201   		.uleb128 0x4109
 5588 0298 01       		.byte	0x1
 5589 0299 11       		.uleb128 0x11
 5590 029a 01       		.uleb128 0x1
 5591 029b 9542     		.uleb128 0x2115
 5592 029d 0C       		.uleb128 0xc
 5593 029e 31       		.uleb128 0x31
 5594 029f 13       		.uleb128 0x13
 5595 02a0 01       		.uleb128 0x1
 5596 02a1 13       		.uleb128 0x13
 5597 02a2 00       		.byte	0
 5598 02a3 00       		.byte	0
 5599 02a4 32       		.uleb128 0x32
 5600 02a5 898201   		.uleb128 0x4109
 5601 02a8 01       		.byte	0x1
 5602 02a9 11       		.uleb128 0x11
 5603 02aa 01       		.uleb128 0x1
 5604 02ab 31       		.uleb128 0x31
 5605 02ac 13       		.uleb128 0x13
ARM GAS  /tmp/ccvrs2bU.s 			page 150


 5606 02ad 01       		.uleb128 0x1
 5607 02ae 13       		.uleb128 0x13
 5608 02af 00       		.byte	0
 5609 02b0 00       		.byte	0
 5610 02b1 33       		.uleb128 0x33
 5611 02b2 2E       		.uleb128 0x2e
 5612 02b3 01       		.byte	0x1
 5613 02b4 3F       		.uleb128 0x3f
 5614 02b5 0C       		.uleb128 0xc
 5615 02b6 03       		.uleb128 0x3
 5616 02b7 0E       		.uleb128 0xe
 5617 02b8 3A       		.uleb128 0x3a
 5618 02b9 0B       		.uleb128 0xb
 5619 02ba 3B       		.uleb128 0x3b
 5620 02bb 05       		.uleb128 0x5
 5621 02bc 27       		.uleb128 0x27
 5622 02bd 0C       		.uleb128 0xc
 5623 02be 49       		.uleb128 0x49
 5624 02bf 13       		.uleb128 0x13
 5625 02c0 11       		.uleb128 0x11
 5626 02c1 01       		.uleb128 0x1
 5627 02c2 12       		.uleb128 0x12
 5628 02c3 01       		.uleb128 0x1
 5629 02c4 40       		.uleb128 0x40
 5630 02c5 06       		.uleb128 0x6
 5631 02c6 9642     		.uleb128 0x2116
 5632 02c8 0C       		.uleb128 0xc
 5633 02c9 01       		.uleb128 0x1
 5634 02ca 13       		.uleb128 0x13
 5635 02cb 00       		.byte	0
 5636 02cc 00       		.byte	0
 5637 02cd 34       		.uleb128 0x34
 5638 02ce 2E       		.uleb128 0x2e
 5639 02cf 01       		.byte	0x1
 5640 02d0 3F       		.uleb128 0x3f
 5641 02d1 0C       		.uleb128 0xc
 5642 02d2 03       		.uleb128 0x3
 5643 02d3 0E       		.uleb128 0xe
 5644 02d4 3A       		.uleb128 0x3a
 5645 02d5 0B       		.uleb128 0xb
 5646 02d6 3B       		.uleb128 0x3b
 5647 02d7 05       		.uleb128 0x5
 5648 02d8 27       		.uleb128 0x27
 5649 02d9 0C       		.uleb128 0xc
 5650 02da 49       		.uleb128 0x49
 5651 02db 13       		.uleb128 0x13
 5652 02dc 11       		.uleb128 0x11
 5653 02dd 01       		.uleb128 0x1
 5654 02de 12       		.uleb128 0x12
 5655 02df 01       		.uleb128 0x1
 5656 02e0 40       		.uleb128 0x40
 5657 02e1 06       		.uleb128 0x6
 5658 02e2 9742     		.uleb128 0x2117
 5659 02e4 0C       		.uleb128 0xc
 5660 02e5 01       		.uleb128 0x1
 5661 02e6 13       		.uleb128 0x13
 5662 02e7 00       		.byte	0
ARM GAS  /tmp/ccvrs2bU.s 			page 151


 5663 02e8 00       		.byte	0
 5664 02e9 35       		.uleb128 0x35
 5665 02ea 0B       		.uleb128 0xb
 5666 02eb 01       		.byte	0x1
 5667 02ec 55       		.uleb128 0x55
 5668 02ed 06       		.uleb128 0x6
 5669 02ee 01       		.uleb128 0x1
 5670 02ef 13       		.uleb128 0x13
 5671 02f0 00       		.byte	0
 5672 02f1 00       		.byte	0
 5673 02f2 36       		.uleb128 0x36
 5674 02f3 34       		.uleb128 0x34
 5675 02f4 00       		.byte	0
 5676 02f5 03       		.uleb128 0x3
 5677 02f6 0E       		.uleb128 0xe
 5678 02f7 3A       		.uleb128 0x3a
 5679 02f8 0B       		.uleb128 0xb
 5680 02f9 3B       		.uleb128 0x3b
 5681 02fa 05       		.uleb128 0x5
 5682 02fb 49       		.uleb128 0x49
 5683 02fc 13       		.uleb128 0x13
 5684 02fd 02       		.uleb128 0x2
 5685 02fe 0A       		.uleb128 0xa
 5686 02ff 00       		.byte	0
 5687 0300 00       		.byte	0
 5688 0301 37       		.uleb128 0x37
 5689 0302 1D       		.uleb128 0x1d
 5690 0303 01       		.byte	0x1
 5691 0304 31       		.uleb128 0x31
 5692 0305 13       		.uleb128 0x13
 5693 0306 52       		.uleb128 0x52
 5694 0307 01       		.uleb128 0x1
 5695 0308 55       		.uleb128 0x55
 5696 0309 06       		.uleb128 0x6
 5697 030a 58       		.uleb128 0x58
 5698 030b 0B       		.uleb128 0xb
 5699 030c 59       		.uleb128 0x59
 5700 030d 05       		.uleb128 0x5
 5701 030e 01       		.uleb128 0x1
 5702 030f 13       		.uleb128 0x13
 5703 0310 00       		.byte	0
 5704 0311 00       		.byte	0
 5705 0312 38       		.uleb128 0x38
 5706 0313 0B       		.uleb128 0xb
 5707 0314 01       		.byte	0x1
 5708 0315 55       		.uleb128 0x55
 5709 0316 06       		.uleb128 0x6
 5710 0317 00       		.byte	0
 5711 0318 00       		.byte	0
 5712 0319 39       		.uleb128 0x39
 5713 031a 2E       		.uleb128 0x2e
 5714 031b 01       		.byte	0x1
 5715 031c 31       		.uleb128 0x31
 5716 031d 13       		.uleb128 0x13
 5717 031e 11       		.uleb128 0x11
 5718 031f 01       		.uleb128 0x1
 5719 0320 12       		.uleb128 0x12
ARM GAS  /tmp/ccvrs2bU.s 			page 152


 5720 0321 01       		.uleb128 0x1
 5721 0322 40       		.uleb128 0x40
 5722 0323 06       		.uleb128 0x6
 5723 0324 9742     		.uleb128 0x2117
 5724 0326 0C       		.uleb128 0xc
 5725 0327 01       		.uleb128 0x1
 5726 0328 13       		.uleb128 0x13
 5727 0329 00       		.byte	0
 5728 032a 00       		.byte	0
 5729 032b 3A       		.uleb128 0x3a
 5730 032c 05       		.uleb128 0x5
 5731 032d 00       		.byte	0
 5732 032e 31       		.uleb128 0x31
 5733 032f 13       		.uleb128 0x13
 5734 0330 1C       		.uleb128 0x1c
 5735 0331 0B       		.uleb128 0xb
 5736 0332 00       		.byte	0
 5737 0333 00       		.byte	0
 5738 0334 3B       		.uleb128 0x3b
 5739 0335 0B       		.uleb128 0xb
 5740 0336 01       		.byte	0x1
 5741 0337 11       		.uleb128 0x11
 5742 0338 01       		.uleb128 0x1
 5743 0339 12       		.uleb128 0x12
 5744 033a 01       		.uleb128 0x1
 5745 033b 01       		.uleb128 0x1
 5746 033c 13       		.uleb128 0x13
 5747 033d 00       		.byte	0
 5748 033e 00       		.byte	0
 5749 033f 3C       		.uleb128 0x3c
 5750 0340 34       		.uleb128 0x34
 5751 0341 00       		.byte	0
 5752 0342 31       		.uleb128 0x31
 5753 0343 13       		.uleb128 0x13
 5754 0344 00       		.byte	0
 5755 0345 00       		.byte	0
 5756 0346 3D       		.uleb128 0x3d
 5757 0347 2E       		.uleb128 0x2e
 5758 0348 01       		.byte	0x1
 5759 0349 31       		.uleb128 0x31
 5760 034a 13       		.uleb128 0x13
 5761 034b 11       		.uleb128 0x11
 5762 034c 01       		.uleb128 0x1
 5763 034d 12       		.uleb128 0x12
 5764 034e 01       		.uleb128 0x1
 5765 034f 40       		.uleb128 0x40
 5766 0350 0A       		.uleb128 0xa
 5767 0351 9742     		.uleb128 0x2117
 5768 0353 0C       		.uleb128 0xc
 5769 0354 01       		.uleb128 0x1
 5770 0355 13       		.uleb128 0x13
 5771 0356 00       		.byte	0
 5772 0357 00       		.byte	0
 5773 0358 3E       		.uleb128 0x3e
 5774 0359 05       		.uleb128 0x5
 5775 035a 00       		.byte	0
 5776 035b 31       		.uleb128 0x31
ARM GAS  /tmp/ccvrs2bU.s 			page 153


 5777 035c 13       		.uleb128 0x13
 5778 035d 02       		.uleb128 0x2
 5779 035e 0A       		.uleb128 0xa
 5780 035f 00       		.byte	0
 5781 0360 00       		.byte	0
 5782 0361 3F       		.uleb128 0x3f
 5783 0362 2E       		.uleb128 0x2e
 5784 0363 00       		.byte	0
 5785 0364 3F       		.uleb128 0x3f
 5786 0365 0C       		.uleb128 0xc
 5787 0366 3C       		.uleb128 0x3c
 5788 0367 0C       		.uleb128 0xc
 5789 0368 8740     		.uleb128 0x2007
 5790 036a 0E       		.uleb128 0xe
 5791 036b 03       		.uleb128 0x3
 5792 036c 0E       		.uleb128 0xe
 5793 036d 3A       		.uleb128 0x3a
 5794 036e 0B       		.uleb128 0xb
 5795 036f 3B       		.uleb128 0x3b
 5796 0370 05       		.uleb128 0x5
 5797 0371 00       		.byte	0
 5798 0372 00       		.byte	0
 5799 0373 00       		.byte	0
 5800              		.section	.debug_loc,"",%progbits
 5801              	.Ldebug_loc0:
 5802              	.LLST97:
 5803 0000 0C090000 		.4byte	.LFB103-.Ltext0
 5804 0004 0E090000 		.4byte	.LCFI27-.Ltext0
 5805 0008 0200     		.2byte	0x2
 5806 000a 7D       		.byte	0x7d
 5807 000b 00       		.sleb128 0
 5808 000c 0E090000 		.4byte	.LCFI27-.Ltext0
 5809 0010 20090000 		.4byte	.LFE103-.Ltext0
 5810 0014 0200     		.2byte	0x2
 5811 0016 7D       		.byte	0x7d
 5812 0017 08       		.sleb128 8
 5813 0018 00000000 		.4byte	0
 5814 001c 00000000 		.4byte	0
 5815              	.LLST98:
 5816 0020 0C090000 		.4byte	.LVL206-.Ltext0
 5817 0024 12090000 		.4byte	.LVL207-.Ltext0
 5818 0028 0100     		.2byte	0x1
 5819 002a 50       		.byte	0x50
 5820 002b 12090000 		.4byte	.LVL207-.Ltext0
 5821 002f 20090000 		.4byte	.LFE103-.Ltext0
 5822 0033 0400     		.2byte	0x4
 5823 0035 F3       		.byte	0xf3
 5824 0036 01       		.uleb128 0x1
 5825 0037 50       		.byte	0x50
 5826 0038 9F       		.byte	0x9f
 5827 0039 00000000 		.4byte	0
 5828 003d 00000000 		.4byte	0
 5829              	.LLST99:
 5830 0041 12090000 		.4byte	.LVL207-.Ltext0
 5831 0045 1D090000 		.4byte	.LVL208-1-.Ltext0
 5832 0049 0100     		.2byte	0x1
 5833 004b 50       		.byte	0x50
ARM GAS  /tmp/ccvrs2bU.s 			page 154


 5834 004c 00000000 		.4byte	0
 5835 0050 00000000 		.4byte	0
 5836              	.LLST92:
 5837 0054 A0080000 		.4byte	.LFB102-.Ltext0
 5838 0058 A2080000 		.4byte	.LCFI25-.Ltext0
 5839 005c 0200     		.2byte	0x2
 5840 005e 7D       		.byte	0x7d
 5841 005f 00       		.sleb128 0
 5842 0060 A2080000 		.4byte	.LCFI25-.Ltext0
 5843 0064 B4080000 		.4byte	.LFE102-.Ltext0
 5844 0068 0200     		.2byte	0x2
 5845 006a 7D       		.byte	0x7d
 5846 006b 08       		.sleb128 8
 5847 006c 00000000 		.4byte	0
 5848 0070 00000000 		.4byte	0
 5849              	.LLST93:
 5850 0074 A0080000 		.4byte	.LVL195-.Ltext0
 5851 0078 A6080000 		.4byte	.LVL196-.Ltext0
 5852 007c 0100     		.2byte	0x1
 5853 007e 50       		.byte	0x50
 5854 007f A6080000 		.4byte	.LVL196-.Ltext0
 5855 0083 B4080000 		.4byte	.LFE102-.Ltext0
 5856 0087 0400     		.2byte	0x4
 5857 0089 F3       		.byte	0xf3
 5858 008a 01       		.uleb128 0x1
 5859 008b 50       		.byte	0x50
 5860 008c 9F       		.byte	0x9f
 5861 008d 00000000 		.4byte	0
 5862 0091 00000000 		.4byte	0
 5863              	.LLST94:
 5864 0095 A6080000 		.4byte	.LVL196-.Ltext0
 5865 0099 B1080000 		.4byte	.LVL197-1-.Ltext0
 5866 009d 0100     		.2byte	0x1
 5867 009f 50       		.byte	0x50
 5868 00a0 00000000 		.4byte	0
 5869 00a4 00000000 		.4byte	0
 5870              	.LLST84:
 5871 00a8 00080000 		.4byte	.LFB101-.Ltext0
 5872 00ac 02080000 		.4byte	.LCFI22-.Ltext0
 5873 00b0 0200     		.2byte	0x2
 5874 00b2 7D       		.byte	0x7d
 5875 00b3 00       		.sleb128 0
 5876 00b4 02080000 		.4byte	.LCFI22-.Ltext0
 5877 00b8 28080000 		.4byte	.LFE101-.Ltext0
 5878 00bc 0200     		.2byte	0x2
 5879 00be 7D       		.byte	0x7d
 5880 00bf 08       		.sleb128 8
 5881 00c0 00000000 		.4byte	0
 5882 00c4 00000000 		.4byte	0
 5883              	.LLST85:
 5884 00c8 00080000 		.4byte	.LVL182-.Ltext0
 5885 00cc 06080000 		.4byte	.LVL183-.Ltext0
 5886 00d0 0100     		.2byte	0x1
 5887 00d2 50       		.byte	0x50
 5888 00d3 06080000 		.4byte	.LVL183-.Ltext0
 5889 00d7 28080000 		.4byte	.LFE101-.Ltext0
 5890 00db 0400     		.2byte	0x4
ARM GAS  /tmp/ccvrs2bU.s 			page 155


 5891 00dd F3       		.byte	0xf3
 5892 00de 01       		.uleb128 0x1
 5893 00df 50       		.byte	0x50
 5894 00e0 9F       		.byte	0x9f
 5895 00e1 00000000 		.4byte	0
 5896 00e5 00000000 		.4byte	0
 5897              	.LLST86:
 5898 00e9 06080000 		.4byte	.LVL183-.Ltext0
 5899 00ed 25080000 		.4byte	.LVL184-1-.Ltext0
 5900 00f1 0100     		.2byte	0x1
 5901 00f3 50       		.byte	0x50
 5902 00f4 00000000 		.4byte	0
 5903 00f8 00000000 		.4byte	0
 5904              	.LLST87:
 5905 00fc 28080000 		.4byte	.LFB100-.Ltext0
 5906 0100 2A080000 		.4byte	.LCFI23-.Ltext0
 5907 0104 0200     		.2byte	0x2
 5908 0106 7D       		.byte	0x7d
 5909 0107 00       		.sleb128 0
 5910 0108 2A080000 		.4byte	.LCFI23-.Ltext0
 5911 010c 50080000 		.4byte	.LFE100-.Ltext0
 5912 0110 0200     		.2byte	0x2
 5913 0112 7D       		.byte	0x7d
 5914 0113 08       		.sleb128 8
 5915 0114 00000000 		.4byte	0
 5916 0118 00000000 		.4byte	0
 5917              	.LLST88:
 5918 011c 28080000 		.4byte	.LVL185-.Ltext0
 5919 0120 2E080000 		.4byte	.LVL186-.Ltext0
 5920 0124 0100     		.2byte	0x1
 5921 0126 50       		.byte	0x50
 5922 0127 2E080000 		.4byte	.LVL186-.Ltext0
 5923 012b 50080000 		.4byte	.LFE100-.Ltext0
 5924 012f 0400     		.2byte	0x4
 5925 0131 F3       		.byte	0xf3
 5926 0132 01       		.uleb128 0x1
 5927 0133 50       		.byte	0x50
 5928 0134 9F       		.byte	0x9f
 5929 0135 00000000 		.4byte	0
 5930 0139 00000000 		.4byte	0
 5931              	.LLST89:
 5932 013d 2E080000 		.4byte	.LVL186-.Ltext0
 5933 0141 4D080000 		.4byte	.LVL187-1-.Ltext0
 5934 0145 0100     		.2byte	0x1
 5935 0147 50       		.byte	0x50
 5936 0148 00000000 		.4byte	0
 5937 014c 00000000 		.4byte	0
 5938              	.LLST78:
 5939 0150 48070000 		.4byte	.LFB99-.Ltext0
 5940 0154 4A070000 		.4byte	.LCFI20-.Ltext0
 5941 0158 0200     		.2byte	0x2
 5942 015a 7D       		.byte	0x7d
 5943 015b 00       		.sleb128 0
 5944 015c 4A070000 		.4byte	.LCFI20-.Ltext0
 5945 0160 58070000 		.4byte	.LFE99-.Ltext0
 5946 0164 0200     		.2byte	0x2
 5947 0166 7D       		.byte	0x7d
ARM GAS  /tmp/ccvrs2bU.s 			page 156


 5948 0167 08       		.sleb128 8
 5949 0168 00000000 		.4byte	0
 5950 016c 00000000 		.4byte	0
 5951              	.LLST79:
 5952 0170 48070000 		.4byte	.LVL168-.Ltext0
 5953 0174 4E070000 		.4byte	.LVL169-.Ltext0
 5954 0178 0100     		.2byte	0x1
 5955 017a 50       		.byte	0x50
 5956 017b 4E070000 		.4byte	.LVL169-.Ltext0
 5957 017f 58070000 		.4byte	.LFE99-.Ltext0
 5958 0183 0400     		.2byte	0x4
 5959 0185 F3       		.byte	0xf3
 5960 0186 01       		.uleb128 0x1
 5961 0187 50       		.byte	0x50
 5962 0188 9F       		.byte	0x9f
 5963 0189 00000000 		.4byte	0
 5964 018d 00000000 		.4byte	0
 5965              	.LLST80:
 5966 0191 4E070000 		.4byte	.LVL169-.Ltext0
 5967 0195 55070000 		.4byte	.LVL170-1-.Ltext0
 5968 0199 0100     		.2byte	0x1
 5969 019b 50       		.byte	0x50
 5970 019c 00000000 		.4byte	0
 5971 01a0 00000000 		.4byte	0
 5972              	.LLST61:
 5973 01a4 B4050000 		.4byte	.LFB92-.Ltext0
 5974 01a8 B6050000 		.4byte	.LCFI14-.Ltext0
 5975 01ac 0200     		.2byte	0x2
 5976 01ae 7D       		.byte	0x7d
 5977 01af 00       		.sleb128 0
 5978 01b0 B6050000 		.4byte	.LCFI14-.Ltext0
 5979 01b4 0A060000 		.4byte	.LFE92-.Ltext0
 5980 01b8 0200     		.2byte	0x2
 5981 01ba 7D       		.byte	0x7d
 5982 01bb 08       		.sleb128 8
 5983 01bc 00000000 		.4byte	0
 5984 01c0 00000000 		.4byte	0
 5985              	.LLST62:
 5986 01c4 B4050000 		.4byte	.LVL125-.Ltext0
 5987 01c8 BA050000 		.4byte	.LVL126-.Ltext0
 5988 01cc 0100     		.2byte	0x1
 5989 01ce 50       		.byte	0x50
 5990 01cf BA050000 		.4byte	.LVL126-.Ltext0
 5991 01d3 0A060000 		.4byte	.LFE92-.Ltext0
 5992 01d7 0400     		.2byte	0x4
 5993 01d9 F3       		.byte	0xf3
 5994 01da 01       		.uleb128 0x1
 5995 01db 50       		.byte	0x50
 5996 01dc 9F       		.byte	0x9f
 5997 01dd 00000000 		.4byte	0
 5998 01e1 00000000 		.4byte	0
 5999              	.LLST63:
 6000 01e5 B4050000 		.4byte	.LVL125-.Ltext0
 6001 01e9 C6050000 		.4byte	.LVL127-.Ltext0
 6002 01ed 0200     		.2byte	0x2
 6003 01ef 30       		.byte	0x30
 6004 01f0 9F       		.byte	0x9f
ARM GAS  /tmp/ccvrs2bU.s 			page 157


 6005 01f1 C6050000 		.4byte	.LVL127-.Ltext0
 6006 01f5 D4050000 		.4byte	.LVL129-.Ltext0
 6007 01f9 0B00     		.2byte	0xb
 6008 01fb 72       		.byte	0x72
 6009 01fc 00       		.sleb128 0
 6010 01fd 08       		.byte	0x8
 6011 01fe 80       		.byte	0x80
 6012 01ff 1A       		.byte	0x1a
 6013 0200 30       		.byte	0x30
 6014 0201 2E       		.byte	0x2e
 6015 0202 08       		.byte	0x8
 6016 0203 FF       		.byte	0xff
 6017 0204 1A       		.byte	0x1a
 6018 0205 9F       		.byte	0x9f
 6019 0206 E2050000 		.4byte	.LVL131-.Ltext0
 6020 020a EC050000 		.4byte	.LVL132-.Ltext0
 6021 020e 0B00     		.2byte	0xb
 6022 0210 72       		.byte	0x72
 6023 0211 00       		.sleb128 0
 6024 0212 08       		.byte	0x8
 6025 0213 40       		.byte	0x40
 6026 0214 1A       		.byte	0x1a
 6027 0215 30       		.byte	0x30
 6028 0216 2E       		.byte	0x2e
 6029 0217 08       		.byte	0x8
 6030 0218 FF       		.byte	0xff
 6031 0219 1A       		.byte	0x1a
 6032 021a 9F       		.byte	0x9f
 6033 021b 00000000 		.4byte	0
 6034 021f 00000000 		.4byte	0
 6035              	.LLST64:
 6036 0223 BA050000 		.4byte	.LVL126-.Ltext0
 6037 0227 07060000 		.4byte	.LVL135-1-.Ltext0
 6038 022b 0100     		.2byte	0x1
 6039 022d 50       		.byte	0x50
 6040 022e 00000000 		.4byte	0
 6041 0232 00000000 		.4byte	0
 6042              	.LLST65:
 6043 0236 D2050000 		.4byte	.LVL128-.Ltext0
 6044 023a E0050000 		.4byte	.LVL130-.Ltext0
 6045 023e 0100     		.2byte	0x1
 6046 0240 50       		.byte	0x50
 6047 0241 00000000 		.4byte	0
 6048 0245 00000000 		.4byte	0
 6049              	.LLST66:
 6050 0249 EE050000 		.4byte	.LVL133-.Ltext0
 6051 024d 04060000 		.4byte	.LVL134-.Ltext0
 6052 0251 0100     		.2byte	0x1
 6053 0253 50       		.byte	0x50
 6054 0254 00000000 		.4byte	0
 6055 0258 00000000 		.4byte	0
 6056              	.LLST54:
 6057 025c 38050000 		.4byte	.LFB91-.Ltext0
 6058 0260 3A050000 		.4byte	.LCFI12-.Ltext0
 6059 0264 0200     		.2byte	0x2
 6060 0266 7D       		.byte	0x7d
 6061 0267 00       		.sleb128 0
ARM GAS  /tmp/ccvrs2bU.s 			page 158


 6062 0268 3A050000 		.4byte	.LCFI12-.Ltext0
 6063 026c 66050000 		.4byte	.LFE91-.Ltext0
 6064 0270 0200     		.2byte	0x2
 6065 0272 7D       		.byte	0x7d
 6066 0273 08       		.sleb128 8
 6067 0274 00000000 		.4byte	0
 6068 0278 00000000 		.4byte	0
 6069              	.LLST55:
 6070 027c 38050000 		.4byte	.LVL115-.Ltext0
 6071 0280 3E050000 		.4byte	.LVL116-.Ltext0
 6072 0284 0100     		.2byte	0x1
 6073 0286 50       		.byte	0x50
 6074 0287 3E050000 		.4byte	.LVL116-.Ltext0
 6075 028b 66050000 		.4byte	.LFE91-.Ltext0
 6076 028f 0400     		.2byte	0x4
 6077 0291 F3       		.byte	0xf3
 6078 0292 01       		.uleb128 0x1
 6079 0293 50       		.byte	0x50
 6080 0294 9F       		.byte	0x9f
 6081 0295 00000000 		.4byte	0
 6082 0299 00000000 		.4byte	0
 6083              	.LLST56:
 6084 029d 3E050000 		.4byte	.LVL116-.Ltext0
 6085 02a1 63050000 		.4byte	.LVL117-1-.Ltext0
 6086 02a5 0100     		.2byte	0x1
 6087 02a7 50       		.byte	0x50
 6088 02a8 00000000 		.4byte	0
 6089 02ac 00000000 		.4byte	0
 6090              	.LLST0:
 6091 02b0 04000000 		.4byte	.LVL1-.Ltext0
 6092 02b4 08000000 		.4byte	.LVL2-.Ltext0
 6093 02b8 0100     		.2byte	0x1
 6094 02ba 53       		.byte	0x53
 6095 02bb 08000000 		.4byte	.LVL2-.Ltext0
 6096 02bf 1A000000 		.4byte	.LFE90-.Ltext0
 6097 02c3 0200     		.2byte	0x2
 6098 02c5 70       		.byte	0x70
 6099 02c6 24       		.sleb128 36
 6100 02c7 00000000 		.4byte	0
 6101 02cb 00000000 		.4byte	0
 6102              	.LLST103:
 6103 02cf 2C090000 		.4byte	.LVL213-.Ltext0
 6104 02d3 2E090000 		.4byte	.LVL214-.Ltext0
 6105 02d7 0100     		.2byte	0x1
 6106 02d9 50       		.byte	0x50
 6107 02da 2E090000 		.4byte	.LVL214-.Ltext0
 6108 02de 30090000 		.4byte	.LFE89-.Ltext0
 6109 02e2 0400     		.2byte	0x4
 6110 02e4 F3       		.byte	0xf3
 6111 02e5 01       		.uleb128 0x1
 6112 02e6 50       		.byte	0x50
 6113 02e7 9F       		.byte	0x9f
 6114 02e8 00000000 		.4byte	0
 6115 02ec 00000000 		.4byte	0
 6116              	.LLST100:
 6117 02f0 20090000 		.4byte	.LVL209-.Ltext0
 6118 02f4 28090000 		.4byte	.LVL211-.Ltext0
ARM GAS  /tmp/ccvrs2bU.s 			page 159


 6119 02f8 0100     		.2byte	0x1
 6120 02fa 50       		.byte	0x50
 6121 02fb 28090000 		.4byte	.LVL211-.Ltext0
 6122 02ff 2C090000 		.4byte	.LFE88-.Ltext0
 6123 0303 0400     		.2byte	0x4
 6124 0305 F3       		.byte	0xf3
 6125 0306 01       		.uleb128 0x1
 6126 0307 50       		.byte	0x50
 6127 0308 9F       		.byte	0x9f
 6128 0309 00000000 		.4byte	0
 6129 030d 00000000 		.4byte	0
 6130              	.LLST101:
 6131 0311 20090000 		.4byte	.LVL209-.Ltext0
 6132 0315 24090000 		.4byte	.LVL210-.Ltext0
 6133 0319 0200     		.2byte	0x2
 6134 031b 30       		.byte	0x30
 6135 031c 9F       		.byte	0x9f
 6136 031d 24090000 		.4byte	.LVL210-.Ltext0
 6137 0321 2C090000 		.4byte	.LFE88-.Ltext0
 6138 0325 0100     		.2byte	0x1
 6139 0327 52       		.byte	0x52
 6140 0328 00000000 		.4byte	0
 6141 032c 00000000 		.4byte	0
 6142              	.LLST102:
 6143 0330 20090000 		.4byte	.LVL209-.Ltext0
 6144 0334 28090000 		.4byte	.LVL211-.Ltext0
 6145 0338 0200     		.2byte	0x2
 6146 033a 30       		.byte	0x30
 6147 033b 9F       		.byte	0x9f
 6148 033c 28090000 		.4byte	.LVL211-.Ltext0
 6149 0340 2A090000 		.4byte	.LVL212-.Ltext0
 6150 0344 0100     		.2byte	0x1
 6151 0346 50       		.byte	0x50
 6152 0347 00000000 		.4byte	0
 6153 034b 00000000 		.4byte	0
 6154              	.LLST67:
 6155 034f 0A060000 		.4byte	.LFB81-.Ltext0
 6156 0353 0E060000 		.4byte	.LCFI15-.Ltext0
 6157 0357 0200     		.2byte	0x2
 6158 0359 7D       		.byte	0x7d
 6159 035a 00       		.sleb128 0
 6160 035b 0E060000 		.4byte	.LCFI15-.Ltext0
 6161 035f 26060000 		.4byte	.LCFI16-.Ltext0
 6162 0363 0200     		.2byte	0x2
 6163 0365 7D       		.byte	0x7d
 6164 0366 10       		.sleb128 16
 6165 0367 26060000 		.4byte	.LCFI16-.Ltext0
 6166 036b 28060000 		.4byte	.LCFI17-.Ltext0
 6167 036f 0200     		.2byte	0x2
 6168 0371 7D       		.byte	0x7d
 6169 0372 00       		.sleb128 0
 6170 0373 28060000 		.4byte	.LCFI17-.Ltext0
 6171 0377 CC060000 		.4byte	.LCFI18-.Ltext0
 6172 037b 0200     		.2byte	0x2
 6173 037d 7D       		.byte	0x7d
 6174 037e 10       		.sleb128 16
 6175 037f CC060000 		.4byte	.LCFI18-.Ltext0
ARM GAS  /tmp/ccvrs2bU.s 			page 160


 6176 0383 D0060000 		.4byte	.LCFI19-.Ltext0
 6177 0387 0200     		.2byte	0x2
 6178 0389 7D       		.byte	0x7d
 6179 038a 00       		.sleb128 0
 6180 038b D0060000 		.4byte	.LCFI19-.Ltext0
 6181 038f 48070000 		.4byte	.LFE81-.Ltext0
 6182 0393 0200     		.2byte	0x2
 6183 0395 7D       		.byte	0x7d
 6184 0396 10       		.sleb128 16
 6185 0397 00000000 		.4byte	0
 6186 039b 00000000 		.4byte	0
 6187              	.LLST68:
 6188 039f 0A060000 		.4byte	.LVL136-.Ltext0
 6189 03a3 27060000 		.4byte	.LVL141-1-.Ltext0
 6190 03a7 0100     		.2byte	0x1
 6191 03a9 50       		.byte	0x50
 6192 03aa 27060000 		.4byte	.LVL141-1-.Ltext0
 6193 03ae 28060000 		.4byte	.LVL141-.Ltext0
 6194 03b2 0400     		.2byte	0x4
 6195 03b4 F3       		.byte	0xf3
 6196 03b5 01       		.uleb128 0x1
 6197 03b6 50       		.byte	0x50
 6198 03b7 9F       		.byte	0x9f
 6199 03b8 28060000 		.4byte	.LVL141-.Ltext0
 6200 03bc 46060000 		.4byte	.LVL143-.Ltext0
 6201 03c0 0100     		.2byte	0x1
 6202 03c2 50       		.byte	0x50
 6203 03c3 46060000 		.4byte	.LVL143-.Ltext0
 6204 03c7 CC060000 		.4byte	.LVL150-.Ltext0
 6205 03cb 0100     		.2byte	0x1
 6206 03cd 54       		.byte	0x54
 6207 03ce CC060000 		.4byte	.LVL150-.Ltext0
 6208 03d2 D0060000 		.4byte	.LVL151-.Ltext0
 6209 03d6 0400     		.2byte	0x4
 6210 03d8 F3       		.byte	0xf3
 6211 03d9 01       		.uleb128 0x1
 6212 03da 50       		.byte	0x50
 6213 03db 9F       		.byte	0x9f
 6214 03dc D0060000 		.4byte	.LVL151-.Ltext0
 6215 03e0 E2060000 		.4byte	.LVL155-.Ltext0
 6216 03e4 0100     		.2byte	0x1
 6217 03e6 54       		.byte	0x54
 6218 03e7 E2060000 		.4byte	.LVL155-.Ltext0
 6219 03eb 1E070000 		.4byte	.LVL163-.Ltext0
 6220 03ef 0100     		.2byte	0x1
 6221 03f1 50       		.byte	0x50
 6222 03f2 1E070000 		.4byte	.LVL163-.Ltext0
 6223 03f6 42070000 		.4byte	.LVL167-.Ltext0
 6224 03fa 0100     		.2byte	0x1
 6225 03fc 54       		.byte	0x54
 6226 03fd 42070000 		.4byte	.LVL167-.Ltext0
 6227 0401 48070000 		.4byte	.LFE81-.Ltext0
 6228 0405 0400     		.2byte	0x4
 6229 0407 F3       		.byte	0xf3
 6230 0408 01       		.uleb128 0x1
 6231 0409 50       		.byte	0x50
 6232 040a 9F       		.byte	0x9f
ARM GAS  /tmp/ccvrs2bU.s 			page 161


 6233 040b 00000000 		.4byte	0
 6234 040f 00000000 		.4byte	0
 6235              	.LLST69:
 6236 0413 10060000 		.4byte	.LVL137-.Ltext0
 6237 0417 27060000 		.4byte	.LVL141-1-.Ltext0
 6238 041b 0100     		.2byte	0x1
 6239 041d 52       		.byte	0x52
 6240 041e 28060000 		.4byte	.LVL141-.Ltext0
 6241 0422 81060000 		.4byte	.LVL144-1-.Ltext0
 6242 0426 0100     		.2byte	0x1
 6243 0428 52       		.byte	0x52
 6244 0429 E2060000 		.4byte	.LVL155-.Ltext0
 6245 042d EE060000 		.4byte	.LVL157-.Ltext0
 6246 0431 0100     		.2byte	0x1
 6247 0433 52       		.byte	0x52
 6248 0434 1C070000 		.4byte	.LVL162-.Ltext0
 6249 0438 22070000 		.4byte	.LVL164-.Ltext0
 6250 043c 0100     		.2byte	0x1
 6251 043e 52       		.byte	0x52
 6252 043f 00000000 		.4byte	0
 6253 0443 00000000 		.4byte	0
 6254              	.LLST70:
 6255 0447 16060000 		.4byte	.LVL138-.Ltext0
 6256 044b 27060000 		.4byte	.LVL141-1-.Ltext0
 6257 044f 0100     		.2byte	0x1
 6258 0451 51       		.byte	0x51
 6259 0452 28060000 		.4byte	.LVL141-.Ltext0
 6260 0456 81060000 		.4byte	.LVL144-1-.Ltext0
 6261 045a 0100     		.2byte	0x1
 6262 045c 51       		.byte	0x51
 6263 045d E2060000 		.4byte	.LVL155-.Ltext0
 6264 0461 F8060000 		.4byte	.LVL159-.Ltext0
 6265 0465 0100     		.2byte	0x1
 6266 0467 51       		.byte	0x51
 6267 0468 1C070000 		.4byte	.LVL162-.Ltext0
 6268 046c 3F070000 		.4byte	.LVL166-1-.Ltext0
 6269 0470 0100     		.2byte	0x1
 6270 0472 51       		.byte	0x51
 6271 0473 00000000 		.4byte	0
 6272 0477 00000000 		.4byte	0
 6273              	.LLST71:
 6274 047b 18060000 		.4byte	.LVL139-.Ltext0
 6275 047f 20060000 		.4byte	.LVL140-.Ltext0
 6276 0483 0100     		.2byte	0x1
 6277 0485 55       		.byte	0x55
 6278 0486 28060000 		.4byte	.LVL141-.Ltext0
 6279 048a 2C060000 		.4byte	.LVL142-.Ltext0
 6280 048e 0100     		.2byte	0x1
 6281 0490 55       		.byte	0x55
 6282 0491 00000000 		.4byte	0
 6283 0495 00000000 		.4byte	0
 6284              	.LLST72:
 6285 0499 18060000 		.4byte	.LVL139-.Ltext0
 6286 049d 86060000 		.4byte	.LVL145-.Ltext0
 6287 04a1 0200     		.2byte	0x2
 6288 04a3 30       		.byte	0x30
 6289 04a4 9F       		.byte	0x9f
ARM GAS  /tmp/ccvrs2bU.s 			page 162


 6290 04a5 86060000 		.4byte	.LVL145-.Ltext0
 6291 04a9 90060000 		.4byte	.LVL146-.Ltext0
 6292 04ad 0B00     		.2byte	0xb
 6293 04af 75       		.byte	0x75
 6294 04b0 00       		.sleb128 0
 6295 04b1 08       		.byte	0x8
 6296 04b2 40       		.byte	0x40
 6297 04b3 1A       		.byte	0x1a
 6298 04b4 30       		.byte	0x30
 6299 04b5 2E       		.byte	0x2e
 6300 04b6 08       		.byte	0x8
 6301 04b7 FF       		.byte	0xff
 6302 04b8 1A       		.byte	0x1a
 6303 04b9 9F       		.byte	0x9f
 6304 04ba 90060000 		.4byte	.LVL146-.Ltext0
 6305 04be 92060000 		.4byte	.LVL147-.Ltext0
 6306 04c2 0800     		.2byte	0x8
 6307 04c4 75       		.byte	0x75
 6308 04c5 00       		.sleb128 0
 6309 04c6 30       		.byte	0x30
 6310 04c7 2E       		.byte	0x2e
 6311 04c8 08       		.byte	0x8
 6312 04c9 FF       		.byte	0xff
 6313 04ca 1A       		.byte	0x1a
 6314 04cb 9F       		.byte	0x9f
 6315 04cc D8060000 		.4byte	.LVL153-.Ltext0
 6316 04d0 E2060000 		.4byte	.LVL155-.Ltext0
 6317 04d4 0800     		.2byte	0x8
 6318 04d6 75       		.byte	0x75
 6319 04d7 00       		.sleb128 0
 6320 04d8 30       		.byte	0x30
 6321 04d9 2E       		.byte	0x2e
 6322 04da 08       		.byte	0x8
 6323 04db FF       		.byte	0xff
 6324 04dc 1A       		.byte	0x1a
 6325 04dd 9F       		.byte	0x9f
 6326 04de E2060000 		.4byte	.LVL155-.Ltext0
 6327 04e2 40070000 		.4byte	.LVL166-.Ltext0
 6328 04e6 0200     		.2byte	0x2
 6329 04e8 30       		.byte	0x30
 6330 04e9 9F       		.byte	0x9f
 6331 04ea 00000000 		.4byte	0
 6332 04ee 00000000 		.4byte	0
 6333              	.LLST73:
 6334 04f2 18060000 		.4byte	.LVL139-.Ltext0
 6335 04f6 27060000 		.4byte	.LVL141-1-.Ltext0
 6336 04fa 0500     		.2byte	0x5
 6337 04fc 72       		.byte	0x72
 6338 04fd 00       		.sleb128 0
 6339 04fe 3F       		.byte	0x3f
 6340 04ff 1A       		.byte	0x1a
 6341 0500 9F       		.byte	0x9f
 6342 0501 28060000 		.4byte	.LVL141-.Ltext0
 6343 0505 81060000 		.4byte	.LVL144-1-.Ltext0
 6344 0509 0500     		.2byte	0x5
 6345 050b 72       		.byte	0x72
 6346 050c 00       		.sleb128 0
ARM GAS  /tmp/ccvrs2bU.s 			page 163


 6347 050d 3F       		.byte	0x3f
 6348 050e 1A       		.byte	0x1a
 6349 050f 9F       		.byte	0x9f
 6350 0510 E2060000 		.4byte	.LVL155-.Ltext0
 6351 0514 EE060000 		.4byte	.LVL157-.Ltext0
 6352 0518 0500     		.2byte	0x5
 6353 051a 72       		.byte	0x72
 6354 051b 00       		.sleb128 0
 6355 051c 3F       		.byte	0x3f
 6356 051d 1A       		.byte	0x1a
 6357 051e 9F       		.byte	0x9f
 6358 051f 1C070000 		.4byte	.LVL162-.Ltext0
 6359 0523 22070000 		.4byte	.LVL164-.Ltext0
 6360 0527 0500     		.2byte	0x5
 6361 0529 72       		.byte	0x72
 6362 052a 00       		.sleb128 0
 6363 052b 3F       		.byte	0x3f
 6364 052c 1A       		.byte	0x1a
 6365 052d 9F       		.byte	0x9f
 6366 052e 00000000 		.4byte	0
 6367 0532 00000000 		.4byte	0
 6368              	.LLST74:
 6369 0536 92060000 		.4byte	.LVL147-.Ltext0
 6370 053a A8060000 		.4byte	.LVL148-.Ltext0
 6371 053e 0100     		.2byte	0x1
 6372 0540 54       		.byte	0x54
 6373 0541 00000000 		.4byte	0
 6374 0545 00000000 		.4byte	0
 6375              	.LLST75:
 6376 0549 EA060000 		.4byte	.LVL156-.Ltext0
 6377 054d 1C070000 		.4byte	.LVL162-.Ltext0
 6378 0551 0100     		.2byte	0x1
 6379 0553 50       		.byte	0x50
 6380 0554 00000000 		.4byte	0
 6381 0558 00000000 		.4byte	0
 6382              	.LLST76:
 6383 055c F2060000 		.4byte	.LVL158-.Ltext0
 6384 0560 00070000 		.4byte	.LVL160-.Ltext0
 6385 0564 0200     		.2byte	0x2
 6386 0566 70       		.byte	0x70
 6387 0567 30       		.sleb128 48
 6388 0568 00070000 		.4byte	.LVL160-.Ltext0
 6389 056c 02070000 		.4byte	.LVL161-.Ltext0
 6390 0570 0300     		.2byte	0x3
 6391 0572 72       		.byte	0x72
 6392 0573 7F       		.sleb128 -1
 6393 0574 9F       		.byte	0x9f
 6394 0575 02070000 		.4byte	.LVL161-.Ltext0
 6395 0579 1C070000 		.4byte	.LVL162-.Ltext0
 6396 057d 0600     		.2byte	0x6
 6397 057f 70       		.byte	0x70
 6398 0580 30       		.sleb128 48
 6399 0581 06       		.byte	0x6
 6400 0582 31       		.byte	0x31
 6401 0583 1C       		.byte	0x1c
 6402 0584 9F       		.byte	0x9f
 6403 0585 00000000 		.4byte	0
ARM GAS  /tmp/ccvrs2bU.s 			page 164


 6404 0589 00000000 		.4byte	0
 6405              	.LLST77:
 6406 058d 24070000 		.4byte	.LVL165-.Ltext0
 6407 0591 40070000 		.4byte	.LVL166-.Ltext0
 6408 0595 0100     		.2byte	0x1
 6409 0597 54       		.byte	0x54
 6410 0598 00000000 		.4byte	0
 6411 059c 00000000 		.4byte	0
 6412              	.LLST95:
 6413 05a0 B6080000 		.4byte	.LFB80-.Ltext0
 6414 05a4 BA080000 		.4byte	.LCFI26-.Ltext0
 6415 05a8 0200     		.2byte	0x2
 6416 05aa 7D       		.byte	0x7d
 6417 05ab 00       		.sleb128 0
 6418 05ac BA080000 		.4byte	.LCFI26-.Ltext0
 6419 05b0 0C090000 		.4byte	.LFE80-.Ltext0
 6420 05b4 0200     		.2byte	0x2
 6421 05b6 7D       		.byte	0x7d
 6422 05b7 08       		.sleb128 8
 6423 05b8 00000000 		.4byte	0
 6424 05bc 00000000 		.4byte	0
 6425              	.LLST96:
 6426 05c0 B6080000 		.4byte	.LVL199-.Ltext0
 6427 05c4 E4080000 		.4byte	.LVL200-.Ltext0
 6428 05c8 0100     		.2byte	0x1
 6429 05ca 50       		.byte	0x50
 6430 05cb E4080000 		.4byte	.LVL200-.Ltext0
 6431 05cf F6080000 		.4byte	.LVL203-.Ltext0
 6432 05d3 0100     		.2byte	0x1
 6433 05d5 54       		.byte	0x54
 6434 05d6 F6080000 		.4byte	.LVL203-.Ltext0
 6435 05da 01090000 		.4byte	.LVL204-1-.Ltext0
 6436 05de 0100     		.2byte	0x1
 6437 05e0 50       		.byte	0x50
 6438 05e1 01090000 		.4byte	.LVL204-1-.Ltext0
 6439 05e5 04090000 		.4byte	.LVL205-.Ltext0
 6440 05e9 0100     		.2byte	0x1
 6441 05eb 54       		.byte	0x54
 6442 05ec 04090000 		.4byte	.LVL205-.Ltext0
 6443 05f0 0C090000 		.4byte	.LFE80-.Ltext0
 6444 05f4 0100     		.2byte	0x1
 6445 05f6 50       		.byte	0x50
 6446 05f7 00000000 		.4byte	0
 6447 05fb 00000000 		.4byte	0
 6448              	.LLST90:
 6449 05ff 52080000 		.4byte	.LFB79-.Ltext0
 6450 0603 56080000 		.4byte	.LCFI24-.Ltext0
 6451 0607 0200     		.2byte	0x2
 6452 0609 7D       		.byte	0x7d
 6453 060a 00       		.sleb128 0
 6454 060b 56080000 		.4byte	.LCFI24-.Ltext0
 6455 060f A0080000 		.4byte	.LFE79-.Ltext0
 6456 0613 0200     		.2byte	0x2
 6457 0615 7D       		.byte	0x7d
 6458 0616 08       		.sleb128 8
 6459 0617 00000000 		.4byte	0
 6460 061b 00000000 		.4byte	0
ARM GAS  /tmp/ccvrs2bU.s 			page 165


 6461              	.LLST91:
 6462 061f 52080000 		.4byte	.LVL188-.Ltext0
 6463 0623 78080000 		.4byte	.LVL189-.Ltext0
 6464 0627 0100     		.2byte	0x1
 6465 0629 50       		.byte	0x50
 6466 062a 78080000 		.4byte	.LVL189-.Ltext0
 6467 062e 8A080000 		.4byte	.LVL192-.Ltext0
 6468 0632 0100     		.2byte	0x1
 6469 0634 54       		.byte	0x54
 6470 0635 8A080000 		.4byte	.LVL192-.Ltext0
 6471 0639 95080000 		.4byte	.LVL193-1-.Ltext0
 6472 063d 0100     		.2byte	0x1
 6473 063f 50       		.byte	0x50
 6474 0640 95080000 		.4byte	.LVL193-1-.Ltext0
 6475 0644 98080000 		.4byte	.LVL194-.Ltext0
 6476 0648 0100     		.2byte	0x1
 6477 064a 54       		.byte	0x54
 6478 064b 98080000 		.4byte	.LVL194-.Ltext0
 6479 064f A0080000 		.4byte	.LFE79-.Ltext0
 6480 0653 0100     		.2byte	0x1
 6481 0655 50       		.byte	0x50
 6482 0656 00000000 		.4byte	0
 6483 065a 00000000 		.4byte	0
 6484              	.LLST81:
 6485 065e 5A070000 		.4byte	.LFB78-.Ltext0
 6486 0662 5E070000 		.4byte	.LCFI21-.Ltext0
 6487 0666 0200     		.2byte	0x2
 6488 0668 7D       		.byte	0x7d
 6489 0669 00       		.sleb128 0
 6490 066a 5E070000 		.4byte	.LCFI21-.Ltext0
 6491 066e 00080000 		.4byte	.LFE78-.Ltext0
 6492 0672 0200     		.2byte	0x2
 6493 0674 7D       		.byte	0x7d
 6494 0675 08       		.sleb128 8
 6495 0676 00000000 		.4byte	0
 6496 067a 00000000 		.4byte	0
 6497              	.LLST82:
 6498 067e 5A070000 		.4byte	.LVL171-.Ltext0
 6499 0682 6C070000 		.4byte	.LVL172-.Ltext0
 6500 0686 0100     		.2byte	0x1
 6501 0688 50       		.byte	0x50
 6502 0689 6C070000 		.4byte	.LVL172-.Ltext0
 6503 068d F8070000 		.4byte	.LVL181-.Ltext0
 6504 0691 0100     		.2byte	0x1
 6505 0693 54       		.byte	0x54
 6506 0694 F8070000 		.4byte	.LVL181-.Ltext0
 6507 0698 00080000 		.4byte	.LFE78-.Ltext0
 6508 069c 0400     		.2byte	0x4
 6509 069e F3       		.byte	0xf3
 6510 069f 01       		.uleb128 0x1
 6511 06a0 50       		.byte	0x50
 6512 06a1 9F       		.byte	0x9f
 6513 06a2 00000000 		.4byte	0
 6514 06a6 00000000 		.4byte	0
 6515              	.LLST83:
 6516 06aa 5A070000 		.4byte	.LVL171-.Ltext0
 6517 06ae 98070000 		.4byte	.LVL173-.Ltext0
ARM GAS  /tmp/ccvrs2bU.s 			page 166


 6518 06b2 0200     		.2byte	0x2
 6519 06b4 31       		.byte	0x31
 6520 06b5 9F       		.byte	0x9f
 6521 06b6 98070000 		.4byte	.LVL173-.Ltext0
 6522 06ba AF070000 		.4byte	.LVL174-1-.Ltext0
 6523 06be 0100     		.2byte	0x1
 6524 06c0 53       		.byte	0x53
 6525 06c1 D2070000 		.4byte	.LVL177-.Ltext0
 6526 06c5 F0070000 		.4byte	.LVL179-.Ltext0
 6527 06c9 0200     		.2byte	0x2
 6528 06cb 31       		.byte	0x31
 6529 06cc 9F       		.byte	0x9f
 6530 06cd F0070000 		.4byte	.LVL179-.Ltext0
 6531 06d1 F4070000 		.4byte	.LVL180-.Ltext0
 6532 06d5 0100     		.2byte	0x1
 6533 06d7 53       		.byte	0x53
 6534 06d8 00000000 		.4byte	0
 6535 06dc 00000000 		.4byte	0
 6536              	.LLST52:
 6537 06e0 F8040000 		.4byte	.LFB77-.Ltext0
 6538 06e4 FC040000 		.4byte	.LCFI11-.Ltext0
 6539 06e8 0200     		.2byte	0x2
 6540 06ea 7D       		.byte	0x7d
 6541 06eb 00       		.sleb128 0
 6542 06ec FC040000 		.4byte	.LCFI11-.Ltext0
 6543 06f0 34050000 		.4byte	.LFE77-.Ltext0
 6544 06f4 0200     		.2byte	0x2
 6545 06f6 7D       		.byte	0x7d
 6546 06f7 08       		.sleb128 8
 6547 06f8 00000000 		.4byte	0
 6548 06fc 00000000 		.4byte	0
 6549              	.LLST53:
 6550 0700 F8040000 		.4byte	.LVL112-.Ltext0
 6551 0704 18050000 		.4byte	.LVL113-.Ltext0
 6552 0708 0100     		.2byte	0x1
 6553 070a 50       		.byte	0x50
 6554 070b 18050000 		.4byte	.LVL113-.Ltext0
 6555 070f 34050000 		.4byte	.LFE77-.Ltext0
 6556 0713 0100     		.2byte	0x1
 6557 0715 54       		.byte	0x54
 6558 0716 00000000 		.4byte	0
 6559 071a 00000000 		.4byte	0
 6560              	.LLST50:
 6561 071e C4040000 		.4byte	.LFB76-.Ltext0
 6562 0722 C8040000 		.4byte	.LCFI10-.Ltext0
 6563 0726 0200     		.2byte	0x2
 6564 0728 7D       		.byte	0x7d
 6565 0729 00       		.sleb128 0
 6566 072a C8040000 		.4byte	.LCFI10-.Ltext0
 6567 072e F8040000 		.4byte	.LFE76-.Ltext0
 6568 0732 0200     		.2byte	0x2
 6569 0734 7D       		.byte	0x7d
 6570 0735 08       		.sleb128 8
 6571 0736 00000000 		.4byte	0
 6572 073a 00000000 		.4byte	0
 6573              	.LLST51:
 6574 073e C4040000 		.4byte	.LVL109-.Ltext0
ARM GAS  /tmp/ccvrs2bU.s 			page 167


 6575 0742 DC040000 		.4byte	.LVL110-.Ltext0
 6576 0746 0100     		.2byte	0x1
 6577 0748 50       		.byte	0x50
 6578 0749 DC040000 		.4byte	.LVL110-.Ltext0
 6579 074d F8040000 		.4byte	.LFE76-.Ltext0
 6580 0751 0100     		.2byte	0x1
 6581 0753 54       		.byte	0x54
 6582 0754 00000000 		.4byte	0
 6583 0758 00000000 		.4byte	0
 6584              	.LLST48:
 6585 075c 64040000 		.4byte	.LFB75-.Ltext0
 6586 0760 68040000 		.4byte	.LCFI9-.Ltext0
 6587 0764 0200     		.2byte	0x2
 6588 0766 7D       		.byte	0x7d
 6589 0767 00       		.sleb128 0
 6590 0768 68040000 		.4byte	.LCFI9-.Ltext0
 6591 076c C4040000 		.4byte	.LFE75-.Ltext0
 6592 0770 0200     		.2byte	0x2
 6593 0772 7D       		.byte	0x7d
 6594 0773 08       		.sleb128 8
 6595 0774 00000000 		.4byte	0
 6596 0778 00000000 		.4byte	0
 6597              	.LLST49:
 6598 077c 64040000 		.4byte	.LVL105-.Ltext0
 6599 0780 84040000 		.4byte	.LVL106-.Ltext0
 6600 0784 0100     		.2byte	0x1
 6601 0786 50       		.byte	0x50
 6602 0787 84040000 		.4byte	.LVL106-.Ltext0
 6603 078b C4040000 		.4byte	.LFE75-.Ltext0
 6604 078f 0100     		.2byte	0x1
 6605 0791 54       		.byte	0x54
 6606 0792 00000000 		.4byte	0
 6607 0796 00000000 		.4byte	0
 6608              	.LLST43:
 6609 079a D8030000 		.4byte	.LFB74-.Ltext0
 6610 079e E0030000 		.4byte	.LCFI6-.Ltext0
 6611 07a2 0200     		.2byte	0x2
 6612 07a4 7D       		.byte	0x7d
 6613 07a5 00       		.sleb128 0
 6614 07a6 E0030000 		.4byte	.LCFI6-.Ltext0
 6615 07aa 50040000 		.4byte	.LCFI7-.Ltext0
 6616 07ae 0200     		.2byte	0x2
 6617 07b0 7D       		.byte	0x7d
 6618 07b1 18       		.sleb128 24
 6619 07b2 50040000 		.4byte	.LCFI7-.Ltext0
 6620 07b6 52040000 		.4byte	.LCFI8-.Ltext0
 6621 07ba 0200     		.2byte	0x2
 6622 07bc 7D       		.byte	0x7d
 6623 07bd 10       		.sleb128 16
 6624 07be 52040000 		.4byte	.LCFI8-.Ltext0
 6625 07c2 64040000 		.4byte	.LFE74-.Ltext0
 6626 07c6 0200     		.2byte	0x2
 6627 07c8 7D       		.byte	0x7d
 6628 07c9 18       		.sleb128 24
 6629 07ca 00000000 		.4byte	0
 6630 07ce 00000000 		.4byte	0
 6631              	.LLST44:
ARM GAS  /tmp/ccvrs2bU.s 			page 168


 6632 07d2 D8030000 		.4byte	.LVL94-.Ltext0
 6633 07d6 0C040000 		.4byte	.LVL96-.Ltext0
 6634 07da 0100     		.2byte	0x1
 6635 07dc 50       		.byte	0x50
 6636 07dd 0C040000 		.4byte	.LVL96-.Ltext0
 6637 07e1 52040000 		.4byte	.LVL101-.Ltext0
 6638 07e5 0100     		.2byte	0x1
 6639 07e7 54       		.byte	0x54
 6640 07e8 52040000 		.4byte	.LVL101-.Ltext0
 6641 07ec 54040000 		.4byte	.LVL102-.Ltext0
 6642 07f0 0100     		.2byte	0x1
 6643 07f2 50       		.byte	0x50
 6644 07f3 54040000 		.4byte	.LVL102-.Ltext0
 6645 07f7 56040000 		.4byte	.LVL103-.Ltext0
 6646 07fb 0100     		.2byte	0x1
 6647 07fd 54       		.byte	0x54
 6648 07fe 56040000 		.4byte	.LVL103-.Ltext0
 6649 0802 58040000 		.4byte	.LVL104-.Ltext0
 6650 0806 0100     		.2byte	0x1
 6651 0808 50       		.byte	0x50
 6652 0809 58040000 		.4byte	.LVL104-.Ltext0
 6653 080d 64040000 		.4byte	.LFE74-.Ltext0
 6654 0811 0100     		.2byte	0x1
 6655 0813 54       		.byte	0x54
 6656 0814 00000000 		.4byte	0
 6657 0818 00000000 		.4byte	0
 6658              	.LLST45:
 6659 081c D8030000 		.4byte	.LVL94-.Ltext0
 6660 0820 1E040000 		.4byte	.LVL98-.Ltext0
 6661 0824 0100     		.2byte	0x1
 6662 0826 51       		.byte	0x51
 6663 0827 1E040000 		.4byte	.LVL98-.Ltext0
 6664 082b 21040000 		.4byte	.LVL99-1-.Ltext0
 6665 082f 0100     		.2byte	0x1
 6666 0831 52       		.byte	0x52
 6667 0832 21040000 		.4byte	.LVL99-1-.Ltext0
 6668 0836 52040000 		.4byte	.LVL101-.Ltext0
 6669 083a 0400     		.2byte	0x4
 6670 083c F3       		.byte	0xf3
 6671 083d 01       		.uleb128 0x1
 6672 083e 51       		.byte	0x51
 6673 083f 9F       		.byte	0x9f
 6674 0840 52040000 		.4byte	.LVL101-.Ltext0
 6675 0844 64040000 		.4byte	.LFE74-.Ltext0
 6676 0848 0100     		.2byte	0x1
 6677 084a 51       		.byte	0x51
 6678 084b 00000000 		.4byte	0
 6679 084f 00000000 		.4byte	0
 6680              	.LLST46:
 6681 0853 D8030000 		.4byte	.LVL94-.Ltext0
 6682 0857 DE030000 		.4byte	.LVL95-.Ltext0
 6683 085b 0100     		.2byte	0x1
 6684 085d 52       		.byte	0x52
 6685 085e DE030000 		.4byte	.LVL95-.Ltext0
 6686 0862 64040000 		.4byte	.LFE74-.Ltext0
 6687 0866 0400     		.2byte	0x4
 6688 0868 F3       		.byte	0xf3
ARM GAS  /tmp/ccvrs2bU.s 			page 169


 6689 0869 01       		.uleb128 0x1
 6690 086a 52       		.byte	0x52
 6691 086b 9F       		.byte	0x9f
 6692 086c 00000000 		.4byte	0
 6693 0870 00000000 		.4byte	0
 6694              	.LLST47:
 6695 0874 1A040000 		.4byte	.LVL97-.Ltext0
 6696 0878 4E040000 		.4byte	.LVL100-.Ltext0
 6697 087c 0600     		.2byte	0x6
 6698 087e F2       		.byte	0xf2
 6699 087f 540E0000 		.4byte	.Ldebug_info0+3668
 6700 0883 00       		.sleb128 0
 6701 0884 00000000 		.4byte	0
 6702 0888 00000000 		.4byte	0
 6703              	.LLST38:
 6704 088c 6A030000 		.4byte	.LFB73-.Ltext0
 6705 0890 6C030000 		.4byte	.LCFI5-.Ltext0
 6706 0894 0200     		.2byte	0x2
 6707 0896 7D       		.byte	0x7d
 6708 0897 00       		.sleb128 0
 6709 0898 6C030000 		.4byte	.LCFI5-.Ltext0
 6710 089c D8030000 		.4byte	.LFE73-.Ltext0
 6711 08a0 0200     		.2byte	0x2
 6712 08a2 7D       		.byte	0x7d
 6713 08a3 10       		.sleb128 16
 6714 08a4 00000000 		.4byte	0
 6715 08a8 00000000 		.4byte	0
 6716              	.LLST39:
 6717 08ac 6A030000 		.4byte	.LVL84-.Ltext0
 6718 08b0 92030000 		.4byte	.LVL86-.Ltext0
 6719 08b4 0100     		.2byte	0x1
 6720 08b6 50       		.byte	0x50
 6721 08b7 92030000 		.4byte	.LVL86-.Ltext0
 6722 08bb C6030000 		.4byte	.LVL89-.Ltext0
 6723 08bf 0100     		.2byte	0x1
 6724 08c1 54       		.byte	0x54
 6725 08c2 C6030000 		.4byte	.LVL89-.Ltext0
 6726 08c6 C8030000 		.4byte	.LVL90-.Ltext0
 6727 08ca 0100     		.2byte	0x1
 6728 08cc 50       		.byte	0x50
 6729 08cd C8030000 		.4byte	.LVL90-.Ltext0
 6730 08d1 CA030000 		.4byte	.LVL91-.Ltext0
 6731 08d5 0100     		.2byte	0x1
 6732 08d7 54       		.byte	0x54
 6733 08d8 CA030000 		.4byte	.LVL91-.Ltext0
 6734 08dc CC030000 		.4byte	.LVL92-.Ltext0
 6735 08e0 0100     		.2byte	0x1
 6736 08e2 50       		.byte	0x50
 6737 08e3 CC030000 		.4byte	.LVL92-.Ltext0
 6738 08e7 CE030000 		.4byte	.LVL93-.Ltext0
 6739 08eb 0100     		.2byte	0x1
 6740 08ed 54       		.byte	0x54
 6741 08ee CE030000 		.4byte	.LVL93-.Ltext0
 6742 08f2 D8030000 		.4byte	.LFE73-.Ltext0
 6743 08f6 0400     		.2byte	0x4
 6744 08f8 F3       		.byte	0xf3
 6745 08f9 01       		.uleb128 0x1
ARM GAS  /tmp/ccvrs2bU.s 			page 170


 6746 08fa 50       		.byte	0x50
 6747 08fb 9F       		.byte	0x9f
 6748 08fc 00000000 		.4byte	0
 6749 0900 00000000 		.4byte	0
 6750              	.LLST40:
 6751 0904 6A030000 		.4byte	.LVL84-.Ltext0
 6752 0908 AD030000 		.4byte	.LVL88-1-.Ltext0
 6753 090c 0100     		.2byte	0x1
 6754 090e 51       		.byte	0x51
 6755 090f AD030000 		.4byte	.LVL88-1-.Ltext0
 6756 0913 C6030000 		.4byte	.LVL89-.Ltext0
 6757 0917 0400     		.2byte	0x4
 6758 0919 F3       		.byte	0xf3
 6759 091a 01       		.uleb128 0x1
 6760 091b 51       		.byte	0x51
 6761 091c 9F       		.byte	0x9f
 6762 091d C6030000 		.4byte	.LVL89-.Ltext0
 6763 0921 D8030000 		.4byte	.LFE73-.Ltext0
 6764 0925 0100     		.2byte	0x1
 6765 0927 51       		.byte	0x51
 6766 0928 00000000 		.4byte	0
 6767 092c 00000000 		.4byte	0
 6768              	.LLST41:
 6769 0930 6A030000 		.4byte	.LVL84-.Ltext0
 6770 0934 74030000 		.4byte	.LVL85-.Ltext0
 6771 0938 0100     		.2byte	0x1
 6772 093a 52       		.byte	0x52
 6773 093b 74030000 		.4byte	.LVL85-.Ltext0
 6774 093f D8030000 		.4byte	.LFE73-.Ltext0
 6775 0943 0400     		.2byte	0x4
 6776 0945 F3       		.byte	0xf3
 6777 0946 01       		.uleb128 0x1
 6778 0947 52       		.byte	0x52
 6779 0948 9F       		.byte	0x9f
 6780 0949 00000000 		.4byte	0
 6781 094d 00000000 		.4byte	0
 6782              	.LLST42:
 6783 0951 A4030000 		.4byte	.LVL87-.Ltext0
 6784 0955 C6030000 		.4byte	.LVL89-.Ltext0
 6785 0959 0600     		.2byte	0x6
 6786 095b F2       		.byte	0xf2
 6787 095c EA0E0000 		.4byte	.Ldebug_info0+3818
 6788 0960 00       		.sleb128 0
 6789 0961 00000000 		.4byte	0
 6790 0965 00000000 		.4byte	0
 6791              	.LLST35:
 6792 0969 24030000 		.4byte	.LVL75-.Ltext0
 6793 096d 5A030000 		.4byte	.LVL79-.Ltext0
 6794 0971 0100     		.2byte	0x1
 6795 0973 50       		.byte	0x50
 6796 0974 5A030000 		.4byte	.LVL79-.Ltext0
 6797 0978 62030000 		.4byte	.LVL80-.Ltext0
 6798 097c 0400     		.2byte	0x4
 6799 097e F3       		.byte	0xf3
 6800 097f 01       		.uleb128 0x1
 6801 0980 50       		.byte	0x50
 6802 0981 9F       		.byte	0x9f
ARM GAS  /tmp/ccvrs2bU.s 			page 171


 6803 0982 62030000 		.4byte	.LVL80-.Ltext0
 6804 0986 64030000 		.4byte	.LVL81-.Ltext0
 6805 098a 0100     		.2byte	0x1
 6806 098c 50       		.byte	0x50
 6807 098d 64030000 		.4byte	.LVL81-.Ltext0
 6808 0991 66030000 		.4byte	.LVL82-.Ltext0
 6809 0995 0400     		.2byte	0x4
 6810 0997 F3       		.byte	0xf3
 6811 0998 01       		.uleb128 0x1
 6812 0999 50       		.byte	0x50
 6813 099a 9F       		.byte	0x9f
 6814 099b 66030000 		.4byte	.LVL82-.Ltext0
 6815 099f 68030000 		.4byte	.LVL83-.Ltext0
 6816 09a3 0100     		.2byte	0x1
 6817 09a5 50       		.byte	0x50
 6818 09a6 68030000 		.4byte	.LVL83-.Ltext0
 6819 09aa 6A030000 		.4byte	.LFE72-.Ltext0
 6820 09ae 0400     		.2byte	0x4
 6821 09b0 F3       		.byte	0xf3
 6822 09b1 01       		.uleb128 0x1
 6823 09b2 50       		.byte	0x50
 6824 09b3 9F       		.byte	0x9f
 6825 09b4 00000000 		.4byte	0
 6826 09b8 00000000 		.4byte	0
 6827              	.LLST36:
 6828 09bc 24030000 		.4byte	.LVL75-.Ltext0
 6829 09c0 4C030000 		.4byte	.LVL78-.Ltext0
 6830 09c4 0100     		.2byte	0x1
 6831 09c6 51       		.byte	0x51
 6832 09c7 4C030000 		.4byte	.LVL78-.Ltext0
 6833 09cb 5A030000 		.4byte	.LVL79-.Ltext0
 6834 09cf 0200     		.2byte	0x2
 6835 09d1 70       		.byte	0x70
 6836 09d2 38       		.sleb128 56
 6837 09d3 5A030000 		.4byte	.LVL79-.Ltext0
 6838 09d7 62030000 		.4byte	.LVL80-.Ltext0
 6839 09db 0500     		.2byte	0x5
 6840 09dd F3       		.byte	0xf3
 6841 09de 01       		.uleb128 0x1
 6842 09df 50       		.byte	0x50
 6843 09e0 23       		.byte	0x23
 6844 09e1 38       		.uleb128 0x38
 6845 09e2 62030000 		.4byte	.LVL80-.Ltext0
 6846 09e6 6A030000 		.4byte	.LFE72-.Ltext0
 6847 09ea 0100     		.2byte	0x1
 6848 09ec 51       		.byte	0x51
 6849 09ed 00000000 		.4byte	0
 6850 09f1 00000000 		.4byte	0
 6851              	.LLST37:
 6852 09f5 24030000 		.4byte	.LVL75-.Ltext0
 6853 09f9 40030000 		.4byte	.LVL76-.Ltext0
 6854 09fd 0100     		.2byte	0x1
 6855 09ff 52       		.byte	0x52
 6856 0a00 40030000 		.4byte	.LVL76-.Ltext0
 6857 0a04 42030000 		.4byte	.LVL77-.Ltext0
 6858 0a08 0200     		.2byte	0x2
 6859 0a0a 70       		.byte	0x70
ARM GAS  /tmp/ccvrs2bU.s 			page 172


 6860 0a0b 3E       		.sleb128 62
 6861 0a0c 42030000 		.4byte	.LVL77-.Ltext0
 6862 0a10 5A030000 		.4byte	.LVL79-.Ltext0
 6863 0a14 0200     		.2byte	0x2
 6864 0a16 70       		.byte	0x70
 6865 0a17 3C       		.sleb128 60
 6866 0a18 5A030000 		.4byte	.LVL79-.Ltext0
 6867 0a1c 62030000 		.4byte	.LVL80-.Ltext0
 6868 0a20 0500     		.2byte	0x5
 6869 0a22 F3       		.byte	0xf3
 6870 0a23 01       		.uleb128 0x1
 6871 0a24 50       		.byte	0x50
 6872 0a25 23       		.byte	0x23
 6873 0a26 3C       		.uleb128 0x3c
 6874 0a27 62030000 		.4byte	.LVL80-.Ltext0
 6875 0a2b 6A030000 		.4byte	.LFE72-.Ltext0
 6876 0a2f 0100     		.2byte	0x1
 6877 0a31 52       		.byte	0x52
 6878 0a32 00000000 		.4byte	0
 6879 0a36 00000000 		.4byte	0
 6880              	.LLST32:
 6881 0a3a D6020000 		.4byte	.LVL66-.Ltext0
 6882 0a3e 0C030000 		.4byte	.LVL70-.Ltext0
 6883 0a42 0100     		.2byte	0x1
 6884 0a44 50       		.byte	0x50
 6885 0a45 0C030000 		.4byte	.LVL70-.Ltext0
 6886 0a49 1C030000 		.4byte	.LVL71-.Ltext0
 6887 0a4d 0400     		.2byte	0x4
 6888 0a4f F3       		.byte	0xf3
 6889 0a50 01       		.uleb128 0x1
 6890 0a51 50       		.byte	0x50
 6891 0a52 9F       		.byte	0x9f
 6892 0a53 1C030000 		.4byte	.LVL71-.Ltext0
 6893 0a57 1E030000 		.4byte	.LVL72-.Ltext0
 6894 0a5b 0100     		.2byte	0x1
 6895 0a5d 50       		.byte	0x50
 6896 0a5e 1E030000 		.4byte	.LVL72-.Ltext0
 6897 0a62 20030000 		.4byte	.LVL73-.Ltext0
 6898 0a66 0400     		.2byte	0x4
 6899 0a68 F3       		.byte	0xf3
 6900 0a69 01       		.uleb128 0x1
 6901 0a6a 50       		.byte	0x50
 6902 0a6b 9F       		.byte	0x9f
 6903 0a6c 20030000 		.4byte	.LVL73-.Ltext0
 6904 0a70 22030000 		.4byte	.LVL74-.Ltext0
 6905 0a74 0100     		.2byte	0x1
 6906 0a76 50       		.byte	0x50
 6907 0a77 22030000 		.4byte	.LVL74-.Ltext0
 6908 0a7b 24030000 		.4byte	.LFE71-.Ltext0
 6909 0a7f 0400     		.2byte	0x4
 6910 0a81 F3       		.byte	0xf3
 6911 0a82 01       		.uleb128 0x1
 6912 0a83 50       		.byte	0x50
 6913 0a84 9F       		.byte	0x9f
 6914 0a85 00000000 		.4byte	0
 6915 0a89 00000000 		.4byte	0
 6916              	.LLST33:
ARM GAS  /tmp/ccvrs2bU.s 			page 173


 6917 0a8d D6020000 		.4byte	.LVL66-.Ltext0
 6918 0a91 FE020000 		.4byte	.LVL69-.Ltext0
 6919 0a95 0100     		.2byte	0x1
 6920 0a97 51       		.byte	0x51
 6921 0a98 FE020000 		.4byte	.LVL69-.Ltext0
 6922 0a9c 0C030000 		.4byte	.LVL70-.Ltext0
 6923 0aa0 0200     		.2byte	0x2
 6924 0aa2 70       		.byte	0x70
 6925 0aa3 30       		.sleb128 48
 6926 0aa4 0C030000 		.4byte	.LVL70-.Ltext0
 6927 0aa8 1C030000 		.4byte	.LVL71-.Ltext0
 6928 0aac 0500     		.2byte	0x5
 6929 0aae F3       		.byte	0xf3
 6930 0aaf 01       		.uleb128 0x1
 6931 0ab0 50       		.byte	0x50
 6932 0ab1 23       		.byte	0x23
 6933 0ab2 30       		.uleb128 0x30
 6934 0ab3 1C030000 		.4byte	.LVL71-.Ltext0
 6935 0ab7 24030000 		.4byte	.LFE71-.Ltext0
 6936 0abb 0100     		.2byte	0x1
 6937 0abd 51       		.byte	0x51
 6938 0abe 00000000 		.4byte	0
 6939 0ac2 00000000 		.4byte	0
 6940              	.LLST34:
 6941 0ac6 D6020000 		.4byte	.LVL66-.Ltext0
 6942 0aca F2020000 		.4byte	.LVL67-.Ltext0
 6943 0ace 0100     		.2byte	0x1
 6944 0ad0 52       		.byte	0x52
 6945 0ad1 F2020000 		.4byte	.LVL67-.Ltext0
 6946 0ad5 F4020000 		.4byte	.LVL68-.Ltext0
 6947 0ad9 0200     		.2byte	0x2
 6948 0adb 70       		.byte	0x70
 6949 0adc 36       		.sleb128 54
 6950 0add F4020000 		.4byte	.LVL68-.Ltext0
 6951 0ae1 0C030000 		.4byte	.LVL70-.Ltext0
 6952 0ae5 0200     		.2byte	0x2
 6953 0ae7 70       		.byte	0x70
 6954 0ae8 34       		.sleb128 52
 6955 0ae9 0C030000 		.4byte	.LVL70-.Ltext0
 6956 0aed 1C030000 		.4byte	.LVL71-.Ltext0
 6957 0af1 0500     		.2byte	0x5
 6958 0af3 F3       		.byte	0xf3
 6959 0af4 01       		.uleb128 0x1
 6960 0af5 50       		.byte	0x50
 6961 0af6 23       		.byte	0x23
 6962 0af7 34       		.uleb128 0x34
 6963 0af8 1C030000 		.4byte	.LVL71-.Ltext0
 6964 0afc 24030000 		.4byte	.LFE71-.Ltext0
 6965 0b00 0100     		.2byte	0x1
 6966 0b02 52       		.byte	0x52
 6967 0b03 00000000 		.4byte	0
 6968 0b07 00000000 		.4byte	0
 6969              	.LLST25:
 6970 0b0b 50020000 		.4byte	.LFB70-.Ltext0
 6971 0b0f 54020000 		.4byte	.LCFI4-.Ltext0
 6972 0b13 0200     		.2byte	0x2
 6973 0b15 7D       		.byte	0x7d
ARM GAS  /tmp/ccvrs2bU.s 			page 174


 6974 0b16 00       		.sleb128 0
 6975 0b17 54020000 		.4byte	.LCFI4-.Ltext0
 6976 0b1b D6020000 		.4byte	.LFE70-.Ltext0
 6977 0b1f 0200     		.2byte	0x2
 6978 0b21 7D       		.byte	0x7d
 6979 0b22 18       		.sleb128 24
 6980 0b23 00000000 		.4byte	0
 6981 0b27 00000000 		.4byte	0
 6982              	.LLST26:
 6983 0b2b 50020000 		.4byte	.LVL52-.Ltext0
 6984 0b2f 83020000 		.4byte	.LVL54-1-.Ltext0
 6985 0b33 0100     		.2byte	0x1
 6986 0b35 50       		.byte	0x50
 6987 0b36 83020000 		.4byte	.LVL54-1-.Ltext0
 6988 0b3a C4020000 		.4byte	.LVL61-.Ltext0
 6989 0b3e 0100     		.2byte	0x1
 6990 0b40 54       		.byte	0x54
 6991 0b41 C4020000 		.4byte	.LVL61-.Ltext0
 6992 0b45 C6020000 		.4byte	.LVL62-.Ltext0
 6993 0b49 0100     		.2byte	0x1
 6994 0b4b 50       		.byte	0x50
 6995 0b4c C6020000 		.4byte	.LVL62-.Ltext0
 6996 0b50 CA020000 		.4byte	.LVL63-.Ltext0
 6997 0b54 0100     		.2byte	0x1
 6998 0b56 54       		.byte	0x54
 6999 0b57 CA020000 		.4byte	.LVL63-.Ltext0
 7000 0b5b CC020000 		.4byte	.LVL64-.Ltext0
 7001 0b5f 0100     		.2byte	0x1
 7002 0b61 50       		.byte	0x50
 7003 0b62 CC020000 		.4byte	.LVL64-.Ltext0
 7004 0b66 D6020000 		.4byte	.LFE70-.Ltext0
 7005 0b6a 0100     		.2byte	0x1
 7006 0b6c 54       		.byte	0x54
 7007 0b6d 00000000 		.4byte	0
 7008 0b71 00000000 		.4byte	0
 7009              	.LLST27:
 7010 0b75 50020000 		.4byte	.LVL52-.Ltext0
 7011 0b79 83020000 		.4byte	.LVL54-1-.Ltext0
 7012 0b7d 0100     		.2byte	0x1
 7013 0b7f 51       		.byte	0x51
 7014 0b80 83020000 		.4byte	.LVL54-1-.Ltext0
 7015 0b84 C4020000 		.4byte	.LVL61-.Ltext0
 7016 0b88 0100     		.2byte	0x1
 7017 0b8a 55       		.byte	0x55
 7018 0b8b C4020000 		.4byte	.LVL61-.Ltext0
 7019 0b8f D0020000 		.4byte	.LVL65-.Ltext0
 7020 0b93 0100     		.2byte	0x1
 7021 0b95 51       		.byte	0x51
 7022 0b96 D0020000 		.4byte	.LVL65-.Ltext0
 7023 0b9a D6020000 		.4byte	.LFE70-.Ltext0
 7024 0b9e 0100     		.2byte	0x1
 7025 0ba0 55       		.byte	0x55
 7026 0ba1 00000000 		.4byte	0
 7027 0ba5 00000000 		.4byte	0
 7028              	.LLST28:
 7029 0ba9 50020000 		.4byte	.LVL52-.Ltext0
 7030 0bad 83020000 		.4byte	.LVL54-1-.Ltext0
ARM GAS  /tmp/ccvrs2bU.s 			page 175


 7031 0bb1 0100     		.2byte	0x1
 7032 0bb3 52       		.byte	0x52
 7033 0bb4 83020000 		.4byte	.LVL54-1-.Ltext0
 7034 0bb8 C4020000 		.4byte	.LVL61-.Ltext0
 7035 0bbc 0400     		.2byte	0x4
 7036 0bbe F3       		.byte	0xf3
 7037 0bbf 01       		.uleb128 0x1
 7038 0bc0 52       		.byte	0x52
 7039 0bc1 9F       		.byte	0x9f
 7040 0bc2 C4020000 		.4byte	.LVL61-.Ltext0
 7041 0bc6 D0020000 		.4byte	.LVL65-.Ltext0
 7042 0bca 0100     		.2byte	0x1
 7043 0bcc 52       		.byte	0x52
 7044 0bcd D0020000 		.4byte	.LVL65-.Ltext0
 7045 0bd1 D6020000 		.4byte	.LFE70-.Ltext0
 7046 0bd5 0400     		.2byte	0x4
 7047 0bd7 F3       		.byte	0xf3
 7048 0bd8 01       		.uleb128 0x1
 7049 0bd9 52       		.byte	0x52
 7050 0bda 9F       		.byte	0x9f
 7051 0bdb 00000000 		.4byte	0
 7052 0bdf 00000000 		.4byte	0
 7053              	.LLST29:
 7054 0be3 50020000 		.4byte	.LVL52-.Ltext0
 7055 0be7 5A020000 		.4byte	.LVL53-.Ltext0
 7056 0beb 0100     		.2byte	0x1
 7057 0bed 53       		.byte	0x53
 7058 0bee 5A020000 		.4byte	.LVL53-.Ltext0
 7059 0bf2 D6020000 		.4byte	.LFE70-.Ltext0
 7060 0bf6 0100     		.2byte	0x1
 7061 0bf8 57       		.byte	0x57
 7062 0bf9 00000000 		.4byte	0
 7063 0bfd 00000000 		.4byte	0
 7064              	.LLST30:
 7065 0c01 B8020000 		.4byte	.LVL59-.Ltext0
 7066 0c05 C2020000 		.4byte	.LVL60-.Ltext0
 7067 0c09 0100     		.2byte	0x1
 7068 0c0b 55       		.byte	0x55
 7069 0c0c C2020000 		.4byte	.LVL60-.Ltext0
 7070 0c10 C4020000 		.4byte	.LVL61-.Ltext0
 7071 0c14 0300     		.2byte	0x3
 7072 0c16 75       		.byte	0x75
 7073 0c17 7F       		.sleb128 -1
 7074 0c18 9F       		.byte	0x9f
 7075 0c19 00000000 		.4byte	0
 7076 0c1d 00000000 		.4byte	0
 7077              	.LLST31:
 7078 0c21 50020000 		.4byte	.LVL52-.Ltext0
 7079 0c25 86020000 		.4byte	.LVL55-.Ltext0
 7080 0c29 0200     		.2byte	0x2
 7081 0c2b 30       		.byte	0x30
 7082 0c2c 9F       		.byte	0x9f
 7083 0c2d 86020000 		.4byte	.LVL55-.Ltext0
 7084 0c31 8E020000 		.4byte	.LVL56-.Ltext0
 7085 0c35 0100     		.2byte	0x1
 7086 0c37 50       		.byte	0x50
 7087 0c38 8E020000 		.4byte	.LVL56-.Ltext0
ARM GAS  /tmp/ccvrs2bU.s 			page 176


 7088 0c3c C4020000 		.4byte	.LVL61-.Ltext0
 7089 0c40 0100     		.2byte	0x1
 7090 0c42 56       		.byte	0x56
 7091 0c43 C4020000 		.4byte	.LVL61-.Ltext0
 7092 0c47 D0020000 		.4byte	.LVL65-.Ltext0
 7093 0c4b 0200     		.2byte	0x2
 7094 0c4d 30       		.byte	0x30
 7095 0c4e 9F       		.byte	0x9f
 7096 0c4f D0020000 		.4byte	.LVL65-.Ltext0
 7097 0c53 D6020000 		.4byte	.LFE70-.Ltext0
 7098 0c57 0100     		.2byte	0x1
 7099 0c59 56       		.byte	0x56
 7100 0c5a 00000000 		.4byte	0
 7101 0c5e 00000000 		.4byte	0
 7102              	.LLST18:
 7103 0c62 B6010000 		.4byte	.LFB69-.Ltext0
 7104 0c66 BA010000 		.4byte	.LCFI3-.Ltext0
 7105 0c6a 0200     		.2byte	0x2
 7106 0c6c 7D       		.byte	0x7d
 7107 0c6d 00       		.sleb128 0
 7108 0c6e BA010000 		.4byte	.LCFI3-.Ltext0
 7109 0c72 50020000 		.4byte	.LFE69-.Ltext0
 7110 0c76 0200     		.2byte	0x2
 7111 0c78 7D       		.byte	0x7d
 7112 0c79 18       		.sleb128 24
 7113 0c7a 00000000 		.4byte	0
 7114 0c7e 00000000 		.4byte	0
 7115              	.LLST19:
 7116 0c82 B6010000 		.4byte	.LVL37-.Ltext0
 7117 0c86 ED010000 		.4byte	.LVL39-1-.Ltext0
 7118 0c8a 0100     		.2byte	0x1
 7119 0c8c 50       		.byte	0x50
 7120 0c8d ED010000 		.4byte	.LVL39-1-.Ltext0
 7121 0c91 44020000 		.4byte	.LVL48-.Ltext0
 7122 0c95 0100     		.2byte	0x1
 7123 0c97 54       		.byte	0x54
 7124 0c98 44020000 		.4byte	.LVL48-.Ltext0
 7125 0c9c 46020000 		.4byte	.LVL49-.Ltext0
 7126 0ca0 0100     		.2byte	0x1
 7127 0ca2 50       		.byte	0x50
 7128 0ca3 46020000 		.4byte	.LVL49-.Ltext0
 7129 0ca7 4A020000 		.4byte	.LVL50-.Ltext0
 7130 0cab 0100     		.2byte	0x1
 7131 0cad 54       		.byte	0x54
 7132 0cae 4A020000 		.4byte	.LVL50-.Ltext0
 7133 0cb2 4C020000 		.4byte	.LVL51-.Ltext0
 7134 0cb6 0100     		.2byte	0x1
 7135 0cb8 50       		.byte	0x50
 7136 0cb9 4C020000 		.4byte	.LVL51-.Ltext0
 7137 0cbd 50020000 		.4byte	.LFE69-.Ltext0
 7138 0cc1 0100     		.2byte	0x1
 7139 0cc3 54       		.byte	0x54
 7140 0cc4 00000000 		.4byte	0
 7141 0cc8 00000000 		.4byte	0
 7142              	.LLST20:
 7143 0ccc B6010000 		.4byte	.LVL37-.Ltext0
 7144 0cd0 ED010000 		.4byte	.LVL39-1-.Ltext0
ARM GAS  /tmp/ccvrs2bU.s 			page 177


 7145 0cd4 0100     		.2byte	0x1
 7146 0cd6 51       		.byte	0x51
 7147 0cd7 ED010000 		.4byte	.LVL39-1-.Ltext0
 7148 0cdb 3A020000 		.4byte	.LVL46-.Ltext0
 7149 0cdf 0100     		.2byte	0x1
 7150 0ce1 55       		.byte	0x55
 7151 0ce2 3A020000 		.4byte	.LVL46-.Ltext0
 7152 0ce6 42020000 		.4byte	.LVL47-.Ltext0
 7153 0cea 0300     		.2byte	0x3
 7154 0cec 75       		.byte	0x75
 7155 0ced 7F       		.sleb128 -1
 7156 0cee 9F       		.byte	0x9f
 7157 0cef 42020000 		.4byte	.LVL47-.Ltext0
 7158 0cf3 44020000 		.4byte	.LVL48-.Ltext0
 7159 0cf7 0100     		.2byte	0x1
 7160 0cf9 55       		.byte	0x55
 7161 0cfa 44020000 		.4byte	.LVL48-.Ltext0
 7162 0cfe 50020000 		.4byte	.LFE69-.Ltext0
 7163 0d02 0100     		.2byte	0x1
 7164 0d04 51       		.byte	0x51
 7165 0d05 00000000 		.4byte	0
 7166 0d09 00000000 		.4byte	0
 7167              	.LLST21:
 7168 0d0d B6010000 		.4byte	.LVL37-.Ltext0
 7169 0d11 ED010000 		.4byte	.LVL39-1-.Ltext0
 7170 0d15 0100     		.2byte	0x1
 7171 0d17 52       		.byte	0x52
 7172 0d18 ED010000 		.4byte	.LVL39-1-.Ltext0
 7173 0d1c 44020000 		.4byte	.LVL48-.Ltext0
 7174 0d20 0400     		.2byte	0x4
 7175 0d22 F3       		.byte	0xf3
 7176 0d23 01       		.uleb128 0x1
 7177 0d24 52       		.byte	0x52
 7178 0d25 9F       		.byte	0x9f
 7179 0d26 44020000 		.4byte	.LVL48-.Ltext0
 7180 0d2a 50020000 		.4byte	.LFE69-.Ltext0
 7181 0d2e 0100     		.2byte	0x1
 7182 0d30 52       		.byte	0x52
 7183 0d31 00000000 		.4byte	0
 7184 0d35 00000000 		.4byte	0
 7185              	.LLST22:
 7186 0d39 B6010000 		.4byte	.LVL37-.Ltext0
 7187 0d3d C0010000 		.4byte	.LVL38-.Ltext0
 7188 0d41 0100     		.2byte	0x1
 7189 0d43 53       		.byte	0x53
 7190 0d44 C0010000 		.4byte	.LVL38-.Ltext0
 7191 0d48 50020000 		.4byte	.LFE69-.Ltext0
 7192 0d4c 0100     		.2byte	0x1
 7193 0d4e 57       		.byte	0x57
 7194 0d4f 00000000 		.4byte	0
 7195 0d53 00000000 		.4byte	0
 7196              	.LLST23:
 7197 0d57 36020000 		.4byte	.LVL45-.Ltext0
 7198 0d5b 3A020000 		.4byte	.LVL46-.Ltext0
 7199 0d5f 0100     		.2byte	0x1
 7200 0d61 55       		.byte	0x55
 7201 0d62 3A020000 		.4byte	.LVL46-.Ltext0
ARM GAS  /tmp/ccvrs2bU.s 			page 178


 7202 0d66 44020000 		.4byte	.LVL48-.Ltext0
 7203 0d6a 0300     		.2byte	0x3
 7204 0d6c 75       		.byte	0x75
 7205 0d6d 7F       		.sleb128 -1
 7206 0d6e 9F       		.byte	0x9f
 7207 0d6f 00000000 		.4byte	0
 7208 0d73 00000000 		.4byte	0
 7209              	.LLST24:
 7210 0d77 B6010000 		.4byte	.LVL37-.Ltext0
 7211 0d7b F0010000 		.4byte	.LVL40-.Ltext0
 7212 0d7f 0200     		.2byte	0x2
 7213 0d81 30       		.byte	0x30
 7214 0d82 9F       		.byte	0x9f
 7215 0d83 F0010000 		.4byte	.LVL40-.Ltext0
 7216 0d87 F8010000 		.4byte	.LVL41-.Ltext0
 7217 0d8b 0100     		.2byte	0x1
 7218 0d8d 50       		.byte	0x50
 7219 0d8e F8010000 		.4byte	.LVL41-.Ltext0
 7220 0d92 44020000 		.4byte	.LVL48-.Ltext0
 7221 0d96 0100     		.2byte	0x1
 7222 0d98 56       		.byte	0x56
 7223 0d99 44020000 		.4byte	.LVL48-.Ltext0
 7224 0d9d 50020000 		.4byte	.LFE69-.Ltext0
 7225 0da1 0200     		.2byte	0x2
 7226 0da3 30       		.byte	0x30
 7227 0da4 9F       		.byte	0x9f
 7228 0da5 00000000 		.4byte	0
 7229 0da9 00000000 		.4byte	0
 7230              	.LLST16:
 7231 0dad 86010000 		.4byte	.LFB66-.Ltext0
 7232 0db1 88010000 		.4byte	.LCFI2-.Ltext0
 7233 0db5 0200     		.2byte	0x2
 7234 0db7 7D       		.byte	0x7d
 7235 0db8 00       		.sleb128 0
 7236 0db9 88010000 		.4byte	.LCFI2-.Ltext0
 7237 0dbd B6010000 		.4byte	.LFE66-.Ltext0
 7238 0dc1 0200     		.2byte	0x2
 7239 0dc3 7D       		.byte	0x7d
 7240 0dc4 08       		.sleb128 8
 7241 0dc5 00000000 		.4byte	0
 7242 0dc9 00000000 		.4byte	0
 7243              	.LLST17:
 7244 0dcd 86010000 		.4byte	.LVL33-.Ltext0
 7245 0dd1 9F010000 		.4byte	.LVL34-1-.Ltext0
 7246 0dd5 0100     		.2byte	0x1
 7247 0dd7 50       		.byte	0x50
 7248 0dd8 9F010000 		.4byte	.LVL34-1-.Ltext0
 7249 0ddc B2010000 		.4byte	.LVL35-.Ltext0
 7250 0de0 0100     		.2byte	0x1
 7251 0de2 54       		.byte	0x54
 7252 0de3 B2010000 		.4byte	.LVL35-.Ltext0
 7253 0de7 B4010000 		.4byte	.LVL36-.Ltext0
 7254 0deb 0100     		.2byte	0x1
 7255 0ded 50       		.byte	0x50
 7256 0dee B4010000 		.4byte	.LVL36-.Ltext0
 7257 0df2 B6010000 		.4byte	.LFE66-.Ltext0
 7258 0df6 0100     		.2byte	0x1
ARM GAS  /tmp/ccvrs2bU.s 			page 179


 7259 0df8 54       		.byte	0x54
 7260 0df9 00000000 		.4byte	0
 7261 0dfd 00000000 		.4byte	0
 7262              	.LLST11:
 7263 0e01 6C000000 		.4byte	.LFB65-.Ltext0
 7264 0e05 6E000000 		.4byte	.LCFI1-.Ltext0
 7265 0e09 0200     		.2byte	0x2
 7266 0e0b 7D       		.byte	0x7d
 7267 0e0c 00       		.sleb128 0
 7268 0e0d 6E000000 		.4byte	.LCFI1-.Ltext0
 7269 0e11 84010000 		.4byte	.LFE65-.Ltext0
 7270 0e15 0200     		.2byte	0x2
 7271 0e17 7D       		.byte	0x7d
 7272 0e18 10       		.sleb128 16
 7273 0e19 00000000 		.4byte	0
 7274 0e1d 00000000 		.4byte	0
 7275              	.LLST12:
 7276 0e21 6C000000 		.4byte	.LVL10-.Ltext0
 7277 0e25 87000000 		.4byte	.LVL11-1-.Ltext0
 7278 0e29 0100     		.2byte	0x1
 7279 0e2b 50       		.byte	0x50
 7280 0e2c 87000000 		.4byte	.LVL11-1-.Ltext0
 7281 0e30 7C010000 		.4byte	.LVL30-.Ltext0
 7282 0e34 0100     		.2byte	0x1
 7283 0e36 55       		.byte	0x55
 7284 0e37 7C010000 		.4byte	.LVL30-.Ltext0
 7285 0e3b 7E010000 		.4byte	.LVL31-.Ltext0
 7286 0e3f 0100     		.2byte	0x1
 7287 0e41 50       		.byte	0x50
 7288 0e42 7E010000 		.4byte	.LVL31-.Ltext0
 7289 0e46 80010000 		.4byte	.LVL32-.Ltext0
 7290 0e4a 0100     		.2byte	0x1
 7291 0e4c 55       		.byte	0x55
 7292 0e4d 80010000 		.4byte	.LVL32-.Ltext0
 7293 0e51 84010000 		.4byte	.LFE65-.Ltext0
 7294 0e55 0400     		.2byte	0x4
 7295 0e57 F3       		.byte	0xf3
 7296 0e58 01       		.uleb128 0x1
 7297 0e59 50       		.byte	0x50
 7298 0e5a 9F       		.byte	0x9f
 7299 0e5b 00000000 		.4byte	0
 7300 0e5f 00000000 		.4byte	0
 7301              	.LLST13:
 7302 0e63 AC000000 		.4byte	.LVL12-.Ltext0
 7303 0e67 28010000 		.4byte	.LVL27-.Ltext0
 7304 0e6b 0100     		.2byte	0x1
 7305 0e6d 55       		.byte	0x55
 7306 0e6e 76010000 		.4byte	.LVL28-.Ltext0
 7307 0e72 7C010000 		.4byte	.LVL30-.Ltext0
 7308 0e76 0100     		.2byte	0x1
 7309 0e78 55       		.byte	0x55
 7310 0e79 00000000 		.4byte	0
 7311 0e7d 00000000 		.4byte	0
 7312              	.LLST14:
 7313 0e81 AC000000 		.4byte	.LVL12-.Ltext0
 7314 0e85 BA000000 		.4byte	.LVL13-.Ltext0
 7315 0e89 0200     		.2byte	0x2
ARM GAS  /tmp/ccvrs2bU.s 			page 180


 7316 0e8b 30       		.byte	0x30
 7317 0e8c 9F       		.byte	0x9f
 7318 0e8d BA000000 		.4byte	.LVL13-.Ltext0
 7319 0e91 CC000000 		.4byte	.LVL15-.Ltext0
 7320 0e95 0100     		.2byte	0x1
 7321 0e97 50       		.byte	0x50
 7322 0e98 CC000000 		.4byte	.LVL15-.Ltext0
 7323 0e9c D8000000 		.4byte	.LVL18-.Ltext0
 7324 0ea0 0100     		.2byte	0x1
 7325 0ea2 52       		.byte	0x52
 7326 0ea3 D8000000 		.4byte	.LVL18-.Ltext0
 7327 0ea7 E6000000 		.4byte	.LVL20-.Ltext0
 7328 0eab 0100     		.2byte	0x1
 7329 0ead 51       		.byte	0x51
 7330 0eae EA000000 		.4byte	.LVL21-.Ltext0
 7331 0eb2 EE000000 		.4byte	.LVL22-.Ltext0
 7332 0eb6 0100     		.2byte	0x1
 7333 0eb8 51       		.byte	0x51
 7334 0eb9 EE000000 		.4byte	.LVL22-.Ltext0
 7335 0ebd F2000000 		.4byte	.LVL23-.Ltext0
 7336 0ec1 0100     		.2byte	0x1
 7337 0ec3 52       		.byte	0x52
 7338 0ec4 F2000000 		.4byte	.LVL23-.Ltext0
 7339 0ec8 FA000000 		.4byte	.LVL24-.Ltext0
 7340 0ecc 0200     		.2byte	0x2
 7341 0ece 73       		.byte	0x73
 7342 0ecf 0C       		.sleb128 12
 7343 0ed0 FA000000 		.4byte	.LVL24-.Ltext0
 7344 0ed4 03010000 		.4byte	.LVL25-1-.Ltext0
 7345 0ed8 0E00     		.2byte	0xe
 7346 0eda 75       		.byte	0x75
 7347 0edb 08       		.sleb128 8
 7348 0edc 06       		.byte	0x6
 7349 0edd 75       		.byte	0x75
 7350 0ede 10       		.sleb128 16
 7351 0edf 06       		.byte	0x6
 7352 0ee0 21       		.byte	0x21
 7353 0ee1 70       		.byte	0x70
 7354 0ee2 00       		.sleb128 0
 7355 0ee3 21       		.byte	0x21
 7356 0ee4 71       		.byte	0x71
 7357 0ee5 00       		.sleb128 0
 7358 0ee6 21       		.byte	0x21
 7359 0ee7 9F       		.byte	0x9f
 7360 0ee8 76010000 		.4byte	.LVL28-.Ltext0
 7361 0eec 79010000 		.4byte	.LVL29-1-.Ltext0
 7362 0ef0 0E00     		.2byte	0xe
 7363 0ef2 75       		.byte	0x75
 7364 0ef3 08       		.sleb128 8
 7365 0ef4 06       		.byte	0x6
 7366 0ef5 75       		.byte	0x75
 7367 0ef6 10       		.sleb128 16
 7368 0ef7 06       		.byte	0x6
 7369 0ef8 21       		.byte	0x21
 7370 0ef9 70       		.byte	0x70
 7371 0efa 00       		.sleb128 0
 7372 0efb 21       		.byte	0x21
ARM GAS  /tmp/ccvrs2bU.s 			page 181


 7373 0efc 71       		.byte	0x71
 7374 0efd 00       		.sleb128 0
 7375 0efe 21       		.byte	0x21
 7376 0eff 9F       		.byte	0x9f
 7377 0f00 00000000 		.4byte	0
 7378 0f04 00000000 		.4byte	0
 7379              	.LLST15:
 7380 0f08 04010000 		.4byte	.LVL25-.Ltext0
 7381 0f0c 06010000 		.4byte	.LVL26-.Ltext0
 7382 0f10 0100     		.2byte	0x1
 7383 0f12 50       		.byte	0x50
 7384 0f13 00000000 		.4byte	0
 7385 0f17 00000000 		.4byte	0
 7386              	.LLST1:
 7387 0f1b 1A000000 		.4byte	.LFB121-.Ltext0
 7388 0f1f 1C000000 		.4byte	.LCFI0-.Ltext0
 7389 0f23 0200     		.2byte	0x2
 7390 0f25 7D       		.byte	0x7d
 7391 0f26 00       		.sleb128 0
 7392 0f27 1C000000 		.4byte	.LCFI0-.Ltext0
 7393 0f2b 6A000000 		.4byte	.LFE121-.Ltext0
 7394 0f2f 0200     		.2byte	0x2
 7395 0f31 7D       		.byte	0x7d
 7396 0f32 18       		.sleb128 24
 7397 0f33 00000000 		.4byte	0
 7398 0f37 00000000 		.4byte	0
 7399              	.LLST2:
 7400 0f3b 1A000000 		.4byte	.LVL3-.Ltext0
 7401 0f3f 24000000 		.4byte	.LVL4-.Ltext0
 7402 0f43 0100     		.2byte	0x1
 7403 0f45 50       		.byte	0x50
 7404 0f46 24000000 		.4byte	.LVL4-.Ltext0
 7405 0f4a 6A000000 		.4byte	.LFE121-.Ltext0
 7406 0f4e 0100     		.2byte	0x1
 7407 0f50 54       		.byte	0x54
 7408 0f51 00000000 		.4byte	0
 7409 0f55 00000000 		.4byte	0
 7410              	.LLST3:
 7411 0f59 1A000000 		.4byte	.LVL3-.Ltext0
 7412 0f5d 24000000 		.4byte	.LVL4-.Ltext0
 7413 0f61 0100     		.2byte	0x1
 7414 0f63 51       		.byte	0x51
 7415 0f64 24000000 		.4byte	.LVL4-.Ltext0
 7416 0f68 6A000000 		.4byte	.LFE121-.Ltext0
 7417 0f6c 0100     		.2byte	0x1
 7418 0f6e 56       		.byte	0x56
 7419 0f6f 00000000 		.4byte	0
 7420 0f73 00000000 		.4byte	0
 7421              	.LLST4:
 7422 0f77 1A000000 		.4byte	.LVL3-.Ltext0
 7423 0f7b 24000000 		.4byte	.LVL4-.Ltext0
 7424 0f7f 0100     		.2byte	0x1
 7425 0f81 52       		.byte	0x52
 7426 0f82 24000000 		.4byte	.LVL4-.Ltext0
 7427 0f86 6A000000 		.4byte	.LFE121-.Ltext0
 7428 0f8a 0100     		.2byte	0x1
 7429 0f8c 57       		.byte	0x57
ARM GAS  /tmp/ccvrs2bU.s 			page 182


 7430 0f8d 00000000 		.4byte	0
 7431 0f91 00000000 		.4byte	0
 7432              	.LLST5:
 7433 0f95 1A000000 		.4byte	.LVL3-.Ltext0
 7434 0f99 24000000 		.4byte	.LVL4-.Ltext0
 7435 0f9d 0100     		.2byte	0x1
 7436 0f9f 53       		.byte	0x53
 7437 0fa0 24000000 		.4byte	.LVL4-.Ltext0
 7438 0fa4 6A000000 		.4byte	.LFE121-.Ltext0
 7439 0fa8 0100     		.2byte	0x1
 7440 0faa 55       		.byte	0x55
 7441 0fab 00000000 		.4byte	0
 7442 0faf 00000000 		.4byte	0
 7443              	.LLST6:
 7444 0fb3 38000000 		.4byte	.LVL6-.Ltext0
 7445 0fb7 5C000000 		.4byte	.LVL7-.Ltext0
 7446 0fbb 0100     		.2byte	0x1
 7447 0fbd 56       		.byte	0x56
 7448 0fbe 00000000 		.4byte	0
 7449 0fc2 00000000 		.4byte	0
 7450              	.LLST7:
 7451 0fc6 38000000 		.4byte	.LVL6-.Ltext0
 7452 0fca 5C000000 		.4byte	.LVL7-.Ltext0
 7453 0fce 0200     		.2byte	0x2
 7454 0fd0 30       		.byte	0x30
 7455 0fd1 9F       		.byte	0x9f
 7456 0fd2 00000000 		.4byte	0
 7457 0fd6 00000000 		.4byte	0
 7458              	.LLST8:
 7459 0fda 38000000 		.4byte	.LVL6-.Ltext0
 7460 0fde 5C000000 		.4byte	.LVL7-.Ltext0
 7461 0fe2 0100     		.2byte	0x1
 7462 0fe4 57       		.byte	0x57
 7463 0fe5 00000000 		.4byte	0
 7464 0fe9 00000000 		.4byte	0
 7465              	.LLST9:
 7466 0fed 38000000 		.4byte	.LVL6-.Ltext0
 7467 0ff1 5C000000 		.4byte	.LVL7-.Ltext0
 7468 0ff5 0100     		.2byte	0x1
 7469 0ff7 55       		.byte	0x55
 7470 0ff8 00000000 		.4byte	0
 7471 0ffc 00000000 		.4byte	0
 7472              	.LLST10:
 7473 1000 38000000 		.4byte	.LVL6-.Ltext0
 7474 1004 5C000000 		.4byte	.LVL7-.Ltext0
 7475 1008 0100     		.2byte	0x1
 7476 100a 54       		.byte	0x54
 7477 100b 00000000 		.4byte	0
 7478 100f 00000000 		.4byte	0
 7479              	.LLST57:
 7480 1013 66050000 		.4byte	.LFB98-.Ltext0
 7481 1017 6C050000 		.4byte	.LCFI13-.Ltext0
 7482 101b 0200     		.2byte	0x2
 7483 101d 7D       		.byte	0x7d
 7484 101e 00       		.sleb128 0
 7485 101f 6C050000 		.4byte	.LCFI13-.Ltext0
 7486 1023 B2050000 		.4byte	.LFE98-.Ltext0
ARM GAS  /tmp/ccvrs2bU.s 			page 183


 7487 1027 0200     		.2byte	0x2
 7488 1029 7D       		.byte	0x7d
 7489 102a 08       		.sleb128 8
 7490 102b 00000000 		.4byte	0
 7491 102f 00000000 		.4byte	0
 7492              	.LLST58:
 7493 1033 66050000 		.4byte	.LVL118-.Ltext0
 7494 1037 A9050000 		.4byte	.LVL122-1-.Ltext0
 7495 103b 0100     		.2byte	0x1
 7496 103d 50       		.byte	0x50
 7497 103e A9050000 		.4byte	.LVL122-1-.Ltext0
 7498 1042 AE050000 		.4byte	.LVL123-.Ltext0
 7499 1046 0400     		.2byte	0x4
 7500 1048 F3       		.byte	0xf3
 7501 1049 01       		.uleb128 0x1
 7502 104a 50       		.byte	0x50
 7503 104b 9F       		.byte	0x9f
 7504 104c AE050000 		.4byte	.LVL123-.Ltext0
 7505 1050 B0050000 		.4byte	.LVL124-.Ltext0
 7506 1054 0100     		.2byte	0x1
 7507 1056 50       		.byte	0x50
 7508 1057 B0050000 		.4byte	.LVL124-.Ltext0
 7509 105b B2050000 		.4byte	.LFE98-.Ltext0
 7510 105f 0400     		.2byte	0x4
 7511 1061 F3       		.byte	0xf3
 7512 1062 01       		.uleb128 0x1
 7513 1063 50       		.byte	0x50
 7514 1064 9F       		.byte	0x9f
 7515 1065 00000000 		.4byte	0
 7516 1069 00000000 		.4byte	0
 7517              	.LLST59:
 7518 106d 70050000 		.4byte	.LVL119-.Ltext0
 7519 1071 A9050000 		.4byte	.LVL122-1-.Ltext0
 7520 1075 0100     		.2byte	0x1
 7521 1077 50       		.byte	0x50
 7522 1078 A9050000 		.4byte	.LVL122-1-.Ltext0
 7523 107c AE050000 		.4byte	.LVL123-.Ltext0
 7524 1080 0400     		.2byte	0x4
 7525 1082 F3       		.byte	0xf3
 7526 1083 01       		.uleb128 0x1
 7527 1084 50       		.byte	0x50
 7528 1085 9F       		.byte	0x9f
 7529 1086 00000000 		.4byte	0
 7530 108a 00000000 		.4byte	0
 7531              	.LLST60:
 7532 108e 70050000 		.4byte	.LVL119-.Ltext0
 7533 1092 80050000 		.4byte	.LVL120-.Ltext0
 7534 1096 0200     		.2byte	0x2
 7535 1098 70       		.byte	0x70
 7536 1099 38       		.sleb128 56
 7537 109a 80050000 		.4byte	.LVL120-.Ltext0
 7538 109e 8A050000 		.4byte	.LVL121-.Ltext0
 7539 10a2 0300     		.2byte	0x3
 7540 10a4 71       		.byte	0x71
 7541 10a5 7F       		.sleb128 -1
 7542 10a6 9F       		.byte	0x9f
 7543 10a7 8A050000 		.4byte	.LVL121-.Ltext0
ARM GAS  /tmp/ccvrs2bU.s 			page 184


 7544 10ab A9050000 		.4byte	.LVL122-1-.Ltext0
 7545 10af 0600     		.2byte	0x6
 7546 10b1 70       		.byte	0x70
 7547 10b2 38       		.sleb128 56
 7548 10b3 06       		.byte	0x6
 7549 10b4 31       		.byte	0x31
 7550 10b5 1C       		.byte	0x1c
 7551 10b6 9F       		.byte	0x9f
 7552 10b7 00000000 		.4byte	0
 7553 10bb 00000000 		.4byte	0
 7554              		.section	.debug_aranges,"",%progbits
 7555 0000 1C000000 		.4byte	0x1c
 7556 0004 0200     		.2byte	0x2
 7557 0006 00000000 		.4byte	.Ldebug_info0
 7558 000a 04       		.byte	0x4
 7559 000b 00       		.byte	0
 7560 000c 0000     		.2byte	0
 7561 000e 0000     		.2byte	0
 7562 0010 00000000 		.4byte	.Ltext0
 7563 0014 30090000 		.4byte	.Letext0-.Ltext0
 7564 0018 00000000 		.4byte	0
 7565 001c 00000000 		.4byte	0
 7566              		.section	.debug_ranges,"",%progbits
 7567              	.Ldebug_ranges0:
 7568 0000 94000000 		.4byte	.LBB8-.Ltext0
 7569 0004 96000000 		.4byte	.LBE8-.Ltext0
 7570 0008 AC000000 		.4byte	.LBB12-.Ltext0
 7571 000c 28010000 		.4byte	.LBE12-.Ltext0
 7572 0010 76010000 		.4byte	.LBB13-.Ltext0
 7573 0014 7C010000 		.4byte	.LBE13-.Ltext0
 7574 0018 00000000 		.4byte	0
 7575 001c 00000000 		.4byte	0
 7576 0020 24040000 		.4byte	.LBB14-.Ltext0
 7577 0024 2E040000 		.4byte	.LBE14-.Ltext0
 7578 0028 32040000 		.4byte	.LBB15-.Ltext0
 7579 002c 36040000 		.4byte	.LBE15-.Ltext0
 7580 0030 00000000 		.4byte	0
 7581 0034 00000000 		.4byte	0
 7582              		.section	.debug_line,"",%progbits
 7583              	.Ldebug_line0:
 7584 0000 B3060000 		.section	.debug_str,"MS",%progbits,1
 7584      02006F01 
 7584      00000201 
 7584      FB0E0D00 
 7584      01010101 
 7585              	.LASF168:
 7586 0000 48414C5F 		.ascii	"HAL_RCC_GetPCLK1Freq\000"
 7586      5243435F 
 7586      47657450 
 7586      434C4B31 
 7586      46726571 
 7587              	.LASF75:
 7588 0015 47756172 		.ascii	"GuardTime\000"
 7588      6454696D 
 7588      6500
 7589              	.LASF104:
 7590 001f 48414C5F 		.ascii	"HAL_TickFreqTypeDef\000"
ARM GAS  /tmp/ccvrs2bU.s 			page 185


 7590      5469636B 
 7590      46726571 
 7590      54797065 
 7590      44656600 
 7591              	.LASF97:
 7592 0033 67537461 		.ascii	"gState\000"
 7592      746500
 7593              	.LASF103:
 7594 003a 48414C5F 		.ascii	"HAL_TICK_FREQ_DEFAULT\000"
 7594      5449434B 
 7594      5F465245 
 7594      515F4445 
 7594      4641554C 
 7595              	.LASF115:
 7596 0050 534D4152 		.ascii	"SMARTCARD_Receive_IT\000"
 7596      54434152 
 7596      445F5265 
 7596      63656976 
 7596      655F4954 
 7597              	.LASF31:
 7598 0065 466C6167 		.ascii	"FlagStatus\000"
 7598      53746174 
 7598      757300
 7599              	.LASF48:
 7600 0070 444D415F 		.ascii	"DMA_InitTypeDef\000"
 7600      496E6974 
 7600      54797065 
 7600      44656600 
 7601              	.LASF78:
 7602 0080 48414C5F 		.ascii	"HAL_SMARTCARD_STATE_RESET\000"
 7602      534D4152 
 7602      54434152 
 7602      445F5354 
 7602      4154455F 
 7603              	.LASF3:
 7604 009a 5F5F7569 		.ascii	"__uint8_t\000"
 7604      6E74385F 
 7604      7400
 7605              	.LASF35:
 7606 00a4 48414C5F 		.ascii	"HAL_BUSY\000"
 7606      42555359 
 7606      00
 7607              	.LASF126:
 7608 00ad 534D4152 		.ascii	"SMARTCARD_DMAError\000"
 7608      54434152 
 7608      445F444D 
 7608      41457272 
 7608      6F7200
 7609              	.LASF51:
 7610 00c0 48414C5F 		.ascii	"HAL_DMA_STATE_BUSY\000"
 7610      444D415F 
 7610      53544154 
 7610      455F4255 
 7610      535900
 7611              	.LASF141:
 7612 00d3 63723369 		.ascii	"cr3its\000"
 7612      747300
ARM GAS  /tmp/ccvrs2bU.s 			page 186


 7613              	.LASF100:
 7614 00da 48414C5F 		.ascii	"HAL_TICK_FREQ_10HZ\000"
 7614      5449434B 
 7614      5F465245 
 7614      515F3130 
 7614      485A00
 7615              	.LASF11:
 7616 00ed 6C6F6E67 		.ascii	"long long unsigned int\000"
 7616      206C6F6E 
 7616      6720756E 
 7616      7369676E 
 7616      65642069 
 7617              	.LASF162:
 7618 0104 48414C5F 		.ascii	"HAL_SMARTCARD_Init\000"
 7618      534D4152 
 7618      54434152 
 7618      445F496E 
 7618      697400
 7619              	.LASF18:
 7620 0117 49544D5F 		.ascii	"ITM_RxBuffer\000"
 7620      52784275 
 7620      66666572 
 7620      00
 7621              	.LASF151:
 7622 0124 70446174 		.ascii	"pData\000"
 7622      6100
 7623              	.LASF170:
 7624 012a 7372632F 		.ascii	"src/stm32f1xx_hal_smartcard.c\000"
 7624      73746D33 
 7624      32663178 
 7624      785F6861 
 7624      6C5F736D 
 7625              	.LASF137:
 7626 0148 48414C5F 		.ascii	"HAL_SMARTCARD_RxCpltCallback\000"
 7626      534D4152 
 7626      54434152 
 7626      445F5278 
 7626      43706C74 
 7627              	.LASF10:
 7628 0165 6C6F6E67 		.ascii	"long long int\000"
 7628      206C6F6E 
 7628      6720696E 
 7628      7400
 7629              	.LASF0:
 7630 0173 7369676E 		.ascii	"signed char\000"
 7630      65642063 
 7630      68617200 
 7631              	.LASF117:
 7632 017f 534D4152 		.ascii	"SMARTCARD_Transmit_IT\000"
 7632      54434152 
 7632      445F5472 
 7632      616E736D 
 7632      69745F49 
 7633              	.LASF110:
 7634 0195 534D4152 		.ascii	"SMARTCARD_DMATxOnlyAbortCallback\000"
 7634      54434152 
 7634      445F444D 
ARM GAS  /tmp/ccvrs2bU.s 			page 187


 7634      4154784F 
 7634      6E6C7941 
 7635              	.LASF28:
 7636 01b6 47545052 		.ascii	"GTPR\000"
 7636      00
 7637              	.LASF67:
 7638 01bb 42617564 		.ascii	"BaudRate\000"
 7638      52617465 
 7638      00
 7639              	.LASF165:
 7640 01c4 48414C5F 		.ascii	"HAL_DMA_Start_IT\000"
 7640      444D415F 
 7640      53746172 
 7640      745F4954 
 7640      00
 7641              	.LASF79:
 7642 01d5 48414C5F 		.ascii	"HAL_SMARTCARD_STATE_READY\000"
 7642      534D4152 
 7642      54434152 
 7642      445F5354 
 7642      4154455F 
 7643              	.LASF107:
 7644 01ef 746D7072 		.ascii	"tmpreg\000"
 7644      656700
 7645              	.LASF40:
 7646 01f6 48414C5F 		.ascii	"HAL_LockTypeDef\000"
 7646      4C6F636B 
 7646      54797065 
 7646      44656600 
 7647              	.LASF146:
 7648 0206 41626F72 		.ascii	"AbortCplt\000"
 7648      7443706C 
 7648      7400
 7649              	.LASF60:
 7650 0210 58666572 		.ascii	"XferHalfCpltCallback\000"
 7650      48616C66 
 7650      43706C74 
 7650      43616C6C 
 7650      6261636B 
 7651              	.LASF7:
 7652 0225 6C6F6E67 		.ascii	"long int\000"
 7652      20696E74 
 7652      00
 7653              	.LASF89:
 7654 022e 70547842 		.ascii	"pTxBuffPtr\000"
 7654      75666650 
 7654      747200
 7655              	.LASF153:
 7656 0239 48414C5F 		.ascii	"HAL_SMARTCARD_Transmit_DMA\000"
 7656      534D4152 
 7656      54434152 
 7656      445F5472 
 7656      616E736D 
 7657              	.LASF42:
 7658 0254 50657269 		.ascii	"PeriphInc\000"
 7658      7068496E 
 7658      6300
ARM GAS  /tmp/ccvrs2bU.s 			page 188


 7659              	.LASF122:
 7660 025e 466C6167 		.ascii	"Flag\000"
 7660      00
 7661              	.LASF14:
 7662 0263 75696E74 		.ascii	"uint16_t\000"
 7662      31365F74 
 7662      00
 7663              	.LASF113:
 7664 026c 534D4152 		.ascii	"SMARTCARD_DMATxAbortCallback\000"
 7664      54434152 
 7664      445F444D 
 7664      41547841 
 7664      626F7274 
 7665              	.LASF112:
 7666 0289 534D4152 		.ascii	"SMARTCARD_DMARxAbortCallback\000"
 7666      54434152 
 7666      445F444D 
 7666      41527841 
 7666      626F7274 
 7667              	.LASF69:
 7668 02a6 53746F70 		.ascii	"StopBits\000"
 7668      42697473 
 7668      00
 7669              	.LASF124:
 7670 02af 5469636B 		.ascii	"Tickstart\000"
 7670      73746172 
 7670      7400
 7671              	.LASF58:
 7672 02b9 50617265 		.ascii	"Parent\000"
 7672      6E7400
 7673              	.LASF56:
 7674 02c0 4C6F636B 		.ascii	"Lock\000"
 7674      00
 7675              	.LASF136:
 7676 02c5 48414C5F 		.ascii	"HAL_SMARTCARD_ErrorCallback\000"
 7676      534D4152 
 7676      54434152 
 7676      445F4572 
 7676      726F7243 
 7677              	.LASF125:
 7678 02e1 54696D65 		.ascii	"Timeout\000"
 7678      6F757400 
 7679              	.LASF41:
 7680 02e9 44697265 		.ascii	"Direction\000"
 7680      6374696F 
 7680      6E00
 7681              	.LASF140:
 7682 02f3 63723169 		.ascii	"cr1its\000"
 7682      747300
 7683              	.LASF96:
 7684 02fa 68646D61 		.ascii	"hdmarx\000"
 7684      727800
 7685              	.LASF83:
 7686 0301 48414C5F 		.ascii	"HAL_SMARTCARD_STATE_BUSY_TX_RX\000"
 7686      534D4152 
 7686      54434152 
 7686      445F5354 
ARM GAS  /tmp/ccvrs2bU.s 			page 189


 7686      4154455F 
 7687              	.LASF8:
 7688 0320 5F5F7569 		.ascii	"__uint32_t\000"
 7688      6E743332 
 7688      5F7400
 7689              	.LASF27:
 7690 032b 444D415F 		.ascii	"DMA_TypeDef\000"
 7690      54797065 
 7690      44656600 
 7691              	.LASF116:
 7692 0337 534D4152 		.ascii	"SMARTCARD_EndTransmit_IT\000"
 7692      54434152 
 7692      445F456E 
 7692      64547261 
 7692      6E736D69 
 7693              	.LASF12:
 7694 0350 756E7369 		.ascii	"unsigned int\000"
 7694      676E6564 
 7694      20696E74 
 7694      00
 7695              	.LASF49:
 7696 035d 48414C5F 		.ascii	"HAL_DMA_STATE_RESET\000"
 7696      444D415F 
 7696      53544154 
 7696      455F5245 
 7696      53455400 
 7697              	.LASF19:
 7698 0371 53797374 		.ascii	"SystemCoreClock\000"
 7698      656D436F 
 7698      7265436C 
 7698      6F636B00 
 7699              	.LASF106:
 7700 0381 75775469 		.ascii	"uwTickFreq\000"
 7700      636B4672 
 7700      657100
 7701              	.LASF70:
 7702 038c 50617269 		.ascii	"Parity\000"
 7702      747900
 7703              	.LASF23:
 7704 0393 43504152 		.ascii	"CPAR\000"
 7704      00
 7705              	.LASF36:
 7706 0398 48414C5F 		.ascii	"HAL_TIMEOUT\000"
 7706      54494D45 
 7706      4F555400 
 7707              	.LASF9:
 7708 03a4 6C6F6E67 		.ascii	"long unsigned int\000"
 7708      20756E73 
 7708      69676E65 
 7708      6420696E 
 7708      7400
 7709              	.LASF163:
 7710 03b6 48414C5F 		.ascii	"HAL_DMA_Abort_IT\000"
 7710      444D415F 
 7710      41626F72 
 7710      745F4954 
 7710      00
ARM GAS  /tmp/ccvrs2bU.s 			page 190


 7711              	.LASF130:
 7712 03c7 48414C5F 		.ascii	"HAL_SMARTCARD_GetError\000"
 7712      534D4152 
 7712      54434152 
 7712      445F4765 
 7712      74457272 
 7713              	.LASF102:
 7714 03de 48414C5F 		.ascii	"HAL_TICK_FREQ_1KHZ\000"
 7714      5449434B 
 7714      5F465245 
 7714      515F314B 
 7714      485A00
 7715              	.LASF33:
 7716 03f1 48414C5F 		.ascii	"HAL_OK\000"
 7716      4F4B00
 7717              	.LASF158:
 7718 03f8 48414C5F 		.ascii	"HAL_SMARTCARD_Transmit\000"
 7718      534D4152 
 7718      54434152 
 7718      445F5472 
 7718      616E736D 
 7719              	.LASF155:
 7720 040f 48414C5F 		.ascii	"HAL_SMARTCARD_Transmit_IT\000"
 7720      534D4152 
 7720      54434152 
 7720      445F5472 
 7720      616E736D 
 7721              	.LASF93:
 7722 0429 52785866 		.ascii	"RxXferSize\000"
 7722      65725369 
 7722      7A6500
 7723              	.LASF5:
 7724 0434 73686F72 		.ascii	"short unsigned int\000"
 7724      7420756E 
 7724      7369676E 
 7724      65642069 
 7724      6E7400
 7725              	.LASF90:
 7726 0447 54785866 		.ascii	"TxXferSize\000"
 7726      65725369 
 7726      7A6500
 7727              	.LASF81:
 7728 0452 48414C5F 		.ascii	"HAL_SMARTCARD_STATE_BUSY_TX\000"
 7728      534D4152 
 7728      54434152 
 7728      445F5354 
 7728      4154455F 
 7729              	.LASF64:
 7730 046e 446D6142 		.ascii	"DmaBaseAddress\000"
 7730      61736541 
 7730      64647265 
 7730      737300
 7731              	.LASF142:
 7732 047d 6572726F 		.ascii	"errorflags\000"
 7732      72666C61 
 7732      677300
 7733              	.LASF128:
ARM GAS  /tmp/ccvrs2bU.s 			page 191


 7734 0488 534D4152 		.ascii	"SMARTCARD_DMAReceiveCplt\000"
 7734      54434152 
 7734      445F444D 
 7734      41526563 
 7734      65697665 
 7735              	.LASF63:
 7736 04a1 4572726F 		.ascii	"ErrorCode\000"
 7736      72436F64 
 7736      6500
 7737              	.LASF172:
 7738 04ab 48414C5F 		.ascii	"HAL_SMARTCARD_AbortReceiveCpltCallback\000"
 7738      534D4152 
 7738      54434152 
 7738      445F4162 
 7738      6F727452 
 7739              	.LASF45:
 7740 04d2 4D656D44 		.ascii	"MemDataAlignment\000"
 7740      61746141 
 7740      6C69676E 
 7740      6D656E74 
 7740      00
 7741              	.LASF29:
 7742 04e3 55534152 		.ascii	"USART_TypeDef\000"
 7742      545F5479 
 7742      70654465 
 7742      6600
 7743              	.LASF37:
 7744 04f1 48414C5F 		.ascii	"HAL_StatusTypeDef\000"
 7744      53746174 
 7744      75735479 
 7744      70654465 
 7744      6600
 7745              	.LASF164:
 7746 0503 48414C5F 		.ascii	"HAL_DMA_Abort\000"
 7746      444D415F 
 7746      41626F72 
 7746      7400
 7747              	.LASF20:
 7748 0511 41484250 		.ascii	"AHBPrescTable\000"
 7748      72657363 
 7748      5461626C 
 7748      6500
 7749              	.LASF135:
 7750 051f 48414C5F 		.ascii	"HAL_SMARTCARD_AbortCpltCallback\000"
 7750      534D4152 
 7750      54434152 
 7750      445F4162 
 7750      6F727443 
 7751              	.LASF6:
 7752 053f 5F5F696E 		.ascii	"__int32_t\000"
 7752      7433325F 
 7752      7400
 7753              	.LASF50:
 7754 0549 48414C5F 		.ascii	"HAL_DMA_STATE_READY\000"
 7754      444D415F 
 7754      53544154 
 7754      455F5245 
ARM GAS  /tmp/ccvrs2bU.s 			page 192


 7754      41445900 
 7755              	.LASF80:
 7756 055d 48414C5F 		.ascii	"HAL_SMARTCARD_STATE_BUSY\000"
 7756      534D4152 
 7756      54434152 
 7756      445F5354 
 7756      4154455F 
 7757              	.LASF154:
 7758 0576 48414C5F 		.ascii	"HAL_SMARTCARD_Receive_IT\000"
 7758      534D4152 
 7758      54434152 
 7758      445F5265 
 7758      63656976 
 7759              	.LASF114:
 7760 058f 534D4152 		.ascii	"SMARTCARD_DMAAbortOnError\000"
 7760      54434152 
 7760      445F444D 
 7760      4141626F 
 7760      72744F6E 
 7761              	.LASF30:
 7762 05a9 52455345 		.ascii	"RESET\000"
 7762      5400
 7763              	.LASF68:
 7764 05af 576F7264 		.ascii	"WordLength\000"
 7764      4C656E67 
 7764      746800
 7765              	.LASF111:
 7766 05ba 68646D61 		.ascii	"hdma\000"
 7766      00
 7767              	.LASF139:
 7768 05bf 69737266 		.ascii	"isrflags\000"
 7768      6C616773 
 7768      00
 7769              	.LASF17:
 7770 05c8 73697A65 		.ascii	"sizetype\000"
 7770      74797065 
 7770      00
 7771              	.LASF166:
 7772 05d1 48414C5F 		.ascii	"HAL_GetTick\000"
 7772      47657454 
 7772      69636B00 
 7773              	.LASF32:
 7774 05dd 6C6F6E67 		.ascii	"long double\000"
 7774      20646F75 
 7774      626C6500 
 7775              	.LASF144:
 7776 05e9 48414C5F 		.ascii	"HAL_SMARTCARD_AbortTransmit_IT\000"
 7776      534D4152 
 7776      54434152 
 7776      445F4162 
 7776      6F727454 
 7777              	.LASF39:
 7778 0608 48414C5F 		.ascii	"HAL_LOCKED\000"
 7778      4C4F434B 
 7778      454400
 7779              	.LASF21:
 7780 0613 41504250 		.ascii	"APBPrescTable\000"
ARM GAS  /tmp/ccvrs2bU.s 			page 193


 7780      72657363 
 7780      5461626C 
 7780      6500
 7781              	.LASF143:
 7782 0621 48414C5F 		.ascii	"HAL_SMARTCARD_AbortReceive_IT\000"
 7782      534D4152 
 7782      54434152 
 7782      445F4162 
 7782      6F727452 
 7783              	.LASF61:
 7784 063f 58666572 		.ascii	"XferErrorCallback\000"
 7784      4572726F 
 7784      7243616C 
 7784      6C626163 
 7784      6B00
 7785              	.LASF95:
 7786 0651 68646D61 		.ascii	"hdmatx\000"
 7786      747800
 7787              	.LASF72:
 7788 0658 434C4B50 		.ascii	"CLKPhase\000"
 7788      68617365 
 7788      00
 7789              	.LASF149:
 7790 0661 48414C5F 		.ascii	"HAL_SMARTCARD_Abort\000"
 7790      534D4152 
 7790      54434152 
 7790      445F4162 
 7790      6F727400 
 7791              	.LASF25:
 7792 0675 444D415F 		.ascii	"DMA_Channel_TypeDef\000"
 7792      4368616E 
 7792      6E656C5F 
 7792      54797065 
 7792      44656600 
 7793              	.LASF55:
 7794 0689 496E6974 		.ascii	"Init\000"
 7794      00
 7795              	.LASF91:
 7796 068e 54785866 		.ascii	"TxXferCount\000"
 7796      6572436F 
 7796      756E7400 
 7797              	.LASF152:
 7798 069a 53697A65 		.ascii	"Size\000"
 7798      00
 7799              	.LASF54:
 7800 069f 496E7374 		.ascii	"Instance\000"
 7800      616E6365 
 7800      00
 7801              	.LASF134:
 7802 06a8 48414C5F 		.ascii	"HAL_SMARTCARD_AbortTransmitCpltCallback\000"
 7802      534D4152 
 7802      54434152 
 7802      445F4162 
 7802      6F727454 
 7803              	.LASF84:
 7804 06d0 48414C5F 		.ascii	"HAL_SMARTCARD_STATE_TIMEOUT\000"
 7804      534D4152 
ARM GAS  /tmp/ccvrs2bU.s 			page 194


 7804      54434152 
 7804      445F5354 
 7804      4154455F 
 7805              	.LASF167:
 7806 06ec 48414C5F 		.ascii	"HAL_RCC_GetPCLK2Freq\000"
 7806      5243435F 
 7806      47657450 
 7806      434C4B32 
 7806      46726571 
 7807              	.LASF171:
 7808 0701 2F686F6D 		.ascii	"/home/berndoj/git/stm32tctst/lib/stm32f1hal\000"
 7808      652F6265 
 7808      726E646F 
 7808      6A2F6769 
 7808      742F7374 
 7809              	.LASF15:
 7810 072d 696E7433 		.ascii	"int32_t\000"
 7810      325F7400 
 7811              	.LASF1:
 7812 0735 756E7369 		.ascii	"unsigned char\000"
 7812      676E6564 
 7812      20636861 
 7812      7200
 7813              	.LASF109:
 7814 0743 534D4152 		.ascii	"SMARTCARD_DMARxOnlyAbortCallback\000"
 7814      54434152 
 7814      445F444D 
 7814      4152784F 
 7814      6E6C7941 
 7815              	.LASF131:
 7816 0764 48414C5F 		.ascii	"HAL_SMARTCARD_GetState\000"
 7816      534D4152 
 7816      54434152 
 7816      445F4765 
 7816      74537461 
 7817              	.LASF120:
 7818 077b 534D4152 		.ascii	"SMARTCARD_EndTxTransfer\000"
 7818      54434152 
 7818      445F456E 
 7818      64547854 
 7818      72616E73 
 7819              	.LASF129:
 7820 0793 534D4152 		.ascii	"SMARTCARD_DMATransmitCplt\000"
 7820      54434152 
 7820      445F444D 
 7820      41547261 
 7820      6E736D69 
 7821              	.LASF53:
 7822 07ad 48414C5F 		.ascii	"HAL_DMA_StateTypeDef\000"
 7822      444D415F 
 7822      53746174 
 7822      65547970 
 7822      65446566 
 7823              	.LASF2:
 7824 07c2 73686F72 		.ascii	"short int\000"
 7824      7420696E 
 7824      7400
ARM GAS  /tmp/ccvrs2bU.s 			page 195


 7825              	.LASF108:
 7826 07cc 70636C6B 		.ascii	"pclk\000"
 7826      00
 7827              	.LASF161:
 7828 07d1 48414C5F 		.ascii	"HAL_SMARTCARD_DeInit\000"
 7828      534D4152 
 7828      54434152 
 7828      445F4465 
 7828      496E6974 
 7829              	.LASF133:
 7830 07e6 74656D70 		.ascii	"temp2\000"
 7830      3200
 7831              	.LASF157:
 7832 07ec 7469636B 		.ascii	"tickstart\000"
 7832      73746172 
 7832      7400
 7833              	.LASF43:
 7834 07f6 4D656D49 		.ascii	"MemInc\000"
 7834      6E6300
 7835              	.LASF169:
 7836 07fd 474E5520 		.ascii	"GNU C11 6.3.1 20170620 -mcpu=cortex-m3 -mthumb -g -"
 7836      43313120 
 7836      362E332E 
 7836      31203230 
 7836      31373036 
 7837 0830 67647761 		.ascii	"gdwarf-2 -Os -fomit-frame-pointer\000"
 7837      72662D32 
 7837      202D4F73 
 7837      202D666F 
 7837      6D69742D 
 7838              	.LASF148:
 7839 0852 48414C5F 		.ascii	"HAL_SMARTCARD_AbortTransmit\000"
 7839      534D4152 
 7839      54434152 
 7839      445F4162 
 7839      6F727454 
 7840              	.LASF76:
 7841 086e 4E41434B 		.ascii	"NACKState\000"
 7841      53746174 
 7841      6500
 7842              	.LASF156:
 7843 0878 48414C5F 		.ascii	"HAL_SMARTCARD_Receive\000"
 7843      534D4152 
 7843      54434152 
 7843      445F5265 
 7843      63656976 
 7844              	.LASF160:
 7845 088e 48414C5F 		.ascii	"HAL_SMARTCARD_MspInit\000"
 7845      534D4152 
 7845      54434152 
 7845      445F4D73 
 7845      70496E69 
 7846              	.LASF127:
 7847 08a4 646D6172 		.ascii	"dmarequest\000"
 7847      65717565 
 7847      737400
 7848              	.LASF87:
ARM GAS  /tmp/ccvrs2bU.s 			page 196


 7849 08af 5F5F444D 		.ascii	"__DMA_HandleTypeDef\000"
 7849      415F4861 
 7849      6E646C65 
 7849      54797065 
 7849      44656600 
 7850              	.LASF16:
 7851 08c3 75696E74 		.ascii	"uint32_t\000"
 7851      33325F74 
 7851      00
 7852              	.LASF77:
 7853 08cc 534D4152 		.ascii	"SMARTCARD_InitTypeDef\000"
 7853      54434152 
 7853      445F496E 
 7853      69745479 
 7853      70654465 
 7854              	.LASF34:
 7855 08e2 48414C5F 		.ascii	"HAL_ERROR\000"
 7855      4552524F 
 7855      5200
 7856              	.LASF132:
 7857 08ec 74656D70 		.ascii	"temp1\000"
 7857      3100
 7858              	.LASF73:
 7859 08f2 434C4B4C 		.ascii	"CLKLastBit\000"
 7859      61737442 
 7859      697400
 7860              	.LASF26:
 7861 08fd 49464352 		.ascii	"IFCR\000"
 7861      00
 7862              	.LASF105:
 7863 0902 75775469 		.ascii	"uwTickPrio\000"
 7863      636B5072 
 7863      696F00
 7864              	.LASF150:
 7865 090d 48414C5F 		.ascii	"HAL_SMARTCARD_Receive_DMA\000"
 7865      534D4152 
 7865      54434152 
 7865      445F5265 
 7865      63656976 
 7866              	.LASF57:
 7867 0927 53746174 		.ascii	"State\000"
 7867      6500
 7868              	.LASF46:
 7869 092d 4D6F6465 		.ascii	"Mode\000"
 7869      00
 7870              	.LASF4:
 7871 0932 5F5F7569 		.ascii	"__uint16_t\000"
 7871      6E743136 
 7871      5F7400
 7872              	.LASF101:
 7873 093d 48414C5F 		.ascii	"HAL_TICK_FREQ_100HZ\000"
 7873      5449434B 
 7873      5F465245 
 7873      515F3130 
 7873      30485A00 
 7874              	.LASF121:
 7875 0951 534D4152 		.ascii	"SMARTCARD_WaitOnFlagUntilTimeout\000"
ARM GAS  /tmp/ccvrs2bU.s 			page 197


 7875      54434152 
 7875      445F5761 
 7875      69744F6E 
 7875      466C6167 
 7876              	.LASF173:
 7877 0972 48414C5F 		.ascii	"HAL_SMARTCARD_IRQHandler\000"
 7877      534D4152 
 7877      54434152 
 7877      445F4952 
 7877      5148616E 
 7878              	.LASF74:
 7879 098b 50726573 		.ascii	"Prescaler\000"
 7879      63616C65 
 7879      7200
 7880              	.LASF138:
 7881 0995 48414C5F 		.ascii	"HAL_SMARTCARD_TxCpltCallback\000"
 7881      534D4152 
 7881      54434152 
 7881      445F5478 
 7881      43706C74 
 7882              	.LASF86:
 7883 09b2 48414C5F 		.ascii	"HAL_SMARTCARD_StateTypeDef\000"
 7883      534D4152 
 7883      54434152 
 7883      445F5374 
 7883      61746554 
 7884              	.LASF85:
 7885 09cd 48414C5F 		.ascii	"HAL_SMARTCARD_STATE_ERROR\000"
 7885      534D4152 
 7885      54434152 
 7885      445F5354 
 7885      4154455F 
 7886              	.LASF44:
 7887 09e7 50657269 		.ascii	"PeriphDataAlignment\000"
 7887      70684461 
 7887      7461416C 
 7887      69676E6D 
 7887      656E7400 
 7888              	.LASF145:
 7889 09fb 48414C5F 		.ascii	"HAL_SMARTCARD_Abort_IT\000"
 7889      534D4152 
 7889      54434152 
 7889      445F4162 
 7889      6F72745F 
 7890              	.LASF66:
 7891 0a12 444D415F 		.ascii	"DMA_HandleTypeDef\000"
 7891      48616E64 
 7891      6C655479 
 7891      70654465 
 7891      6600
 7892              	.LASF82:
 7893 0a24 48414C5F 		.ascii	"HAL_SMARTCARD_STATE_BUSY_RX\000"
 7893      534D4152 
 7893      54434152 
 7893      445F5354 
 7893      4154455F 
 7894              	.LASF22:
ARM GAS  /tmp/ccvrs2bU.s 			page 198


 7895 0a40 434E4454 		.ascii	"CNDTR\000"
 7895      5200
 7896              	.LASF24:
 7897 0a46 434D4152 		.ascii	"CMAR\000"
 7897      00
 7898              	.LASF99:
 7899 0a4b 534D4152 		.ascii	"SMARTCARD_HandleTypeDef\000"
 7899      54434152 
 7899      445F4861 
 7899      6E646C65 
 7899      54797065 
 7900              	.LASF52:
 7901 0a63 48414C5F 		.ascii	"HAL_DMA_STATE_TIMEOUT\000"
 7901      444D415F 
 7901      53544154 
 7901      455F5449 
 7901      4D454F55 
 7902              	.LASF47:
 7903 0a79 5072696F 		.ascii	"Priority\000"
 7903      72697479 
 7903      00
 7904              	.LASF92:
 7905 0a82 70527842 		.ascii	"pRxBuffPtr\000"
 7905      75666650 
 7905      747200
 7906              	.LASF13:
 7907 0a8d 75696E74 		.ascii	"uint8_t\000"
 7907      385F7400 
 7908              	.LASF159:
 7909 0a95 48414C5F 		.ascii	"HAL_SMARTCARD_MspDeInit\000"
 7909      534D4152 
 7909      54434152 
 7909      445F4D73 
 7909      70446549 
 7910              	.LASF71:
 7911 0aad 434C4B50 		.ascii	"CLKPolarity\000"
 7911      6F6C6172 
 7911      69747900 
 7912              	.LASF88:
 7913 0ab9 5F5F534D 		.ascii	"__SMARTCARD_HandleTypeDef\000"
 7913      41525443 
 7913      4152445F 
 7913      48616E64 
 7913      6C655479 
 7914              	.LASF94:
 7915 0ad3 52785866 		.ascii	"RxXferCount\000"
 7915      6572436F 
 7915      756E7400 
 7916              	.LASF119:
 7917 0adf 534D4152 		.ascii	"SMARTCARD_EndRxTransfer\000"
 7917      54434152 
 7917      445F456E 
 7917      64527854 
 7917      72616E73 
 7918              	.LASF38:
 7919 0af7 48414C5F 		.ascii	"HAL_UNLOCKED\000"
 7919      554E4C4F 
ARM GAS  /tmp/ccvrs2bU.s 			page 199


 7919      434B4544 
 7919      00
 7920              	.LASF123:
 7921 0b04 53746174 		.ascii	"Status\000"
 7921      757300
 7922              	.LASF65:
 7923 0b0b 4368616E 		.ascii	"ChannelIndex\000"
 7923      6E656C49 
 7923      6E646578 
 7923      00
 7924              	.LASF98:
 7925 0b18 52785374 		.ascii	"RxState\000"
 7925      61746500 
 7926              	.LASF147:
 7927 0b20 48414C5F 		.ascii	"HAL_SMARTCARD_AbortReceive\000"
 7927      534D4152 
 7927      54434152 
 7927      445F4162 
 7927      6F727452 
 7928              	.LASF62:
 7929 0b3b 58666572 		.ascii	"XferAbortCallback\000"
 7929      41626F72 
 7929      7443616C 
 7929      6C626163 
 7929      6B00
 7930              	.LASF118:
 7931 0b4d 534D4152 		.ascii	"SMARTCARD_SetConfig\000"
 7931      54434152 
 7931      445F5365 
 7931      74436F6E 
 7931      66696700 
 7932              	.LASF59:
 7933 0b61 58666572 		.ascii	"XferCpltCallback\000"
 7933      43706C74 
 7933      43616C6C 
 7933      6261636B 
 7933      00
 7934              		.ident	"GCC: (15:6.3.1+svn253039-1build1) 6.3.1 20170620"
ARM GAS  /tmp/ccvrs2bU.s 			page 200


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_smartcard.c
     /tmp/ccvrs2bU.s:69     .text:0000000000000000 $t
     /tmp/ccvrs2bU.s:75     .text:0000000000000000 SMARTCARD_DMATransmitCplt
     /tmp/ccvrs2bU.s:111    .text:000000000000001a SMARTCARD_WaitOnFlagUntilTimeout.constprop.3
     /tmp/ccvrs2bU.s:197    .text:000000000000006a HAL_SMARTCARD_MspInit
     /tmp/ccvrs2bU.s:214    .text:000000000000006c HAL_SMARTCARD_Init
     /tmp/ccvrs2bU.s:427    .text:0000000000000180 $d
     /tmp/ccvrs2bU.s:431    .text:0000000000000184 $t
     /tmp/ccvrs2bU.s:438    .text:0000000000000184 HAL_SMARTCARD_MspDeInit
     /tmp/ccvrs2bU.s:455    .text:0000000000000186 HAL_SMARTCARD_DeInit
     /tmp/ccvrs2bU.s:512    .text:00000000000001b6 HAL_SMARTCARD_Transmit
     /tmp/ccvrs2bU.s:646    .text:0000000000000250 HAL_SMARTCARD_Receive
     /tmp/ccvrs2bU.s:769    .text:00000000000002d6 HAL_SMARTCARD_Transmit_IT
     /tmp/ccvrs2bU.s:852    .text:0000000000000324 HAL_SMARTCARD_Receive_IT
     /tmp/ccvrs2bU.s:931    .text:000000000000036a HAL_SMARTCARD_Transmit_DMA
     /tmp/ccvrs2bU.s:1031   .text:00000000000003d0 $d
     /tmp/ccvrs2bU.s:1583   .text:00000000000005b4 SMARTCARD_DMAError
     /tmp/ccvrs2bU.s:1036   .text:00000000000003d8 $t
     /tmp/ccvrs2bU.s:1043   .text:00000000000003d8 HAL_SMARTCARD_Receive_DMA
     /tmp/ccvrs2bU.s:1170   .text:000000000000045c $d
     /tmp/ccvrs2bU.s:1439   .text:0000000000000538 SMARTCARD_DMAReceiveCplt
     /tmp/ccvrs2bU.s:1175   .text:0000000000000464 $t
     /tmp/ccvrs2bU.s:1182   .text:0000000000000464 HAL_SMARTCARD_Abort
     /tmp/ccvrs2bU.s:1276   .text:00000000000004c4 HAL_SMARTCARD_AbortTransmit
     /tmp/ccvrs2bU.s:1339   .text:00000000000004f8 HAL_SMARTCARD_AbortReceive
     /tmp/ccvrs2bU.s:1406   .text:0000000000000534 HAL_SMARTCARD_TxCpltCallback
     /tmp/ccvrs2bU.s:1423   .text:0000000000000536 HAL_SMARTCARD_RxCpltCallback
     /tmp/ccvrs2bU.s:1488   .text:0000000000000566 SMARTCARD_Receive_IT
     /tmp/ccvrs2bU.s:1567   .text:00000000000005b2 HAL_SMARTCARD_ErrorCallback
     /tmp/ccvrs2bU.s:1677   .text:000000000000060a HAL_SMARTCARD_IRQHandler
     /tmp/ccvrs2bU.s:1960   .text:0000000000000744 $d
     /tmp/ccvrs2bU.s:1972   .text:0000000000000748 SMARTCARD_DMAAbortOnError
     /tmp/ccvrs2bU.s:1966   .text:0000000000000748 $t
     /tmp/ccvrs2bU.s:2007   .text:0000000000000758 HAL_SMARTCARD_AbortCpltCallback
     /tmp/ccvrs2bU.s:2024   .text:000000000000075a HAL_SMARTCARD_Abort_IT
     /tmp/ccvrs2bU.s:2165   .text:00000000000007f8 $d
     /tmp/ccvrs2bU.s:2228   .text:0000000000000828 SMARTCARD_DMATxAbortCallback
     /tmp/ccvrs2bU.s:2176   .text:0000000000000800 SMARTCARD_DMARxAbortCallback
     /tmp/ccvrs2bU.s:2170   .text:0000000000000800 $t
     /tmp/ccvrs2bU.s:2281   .text:0000000000000850 HAL_SMARTCARD_AbortTransmitCpltCallback
     /tmp/ccvrs2bU.s:2298   .text:0000000000000852 HAL_SMARTCARD_AbortTransmit_IT
     /tmp/ccvrs2bU.s:2371   .text:000000000000089c $d
     /tmp/ccvrs2bU.s:2381   .text:00000000000008a0 SMARTCARD_DMATxOnlyAbortCallback
     /tmp/ccvrs2bU.s:2375   .text:00000000000008a0 $t
     /tmp/ccvrs2bU.s:2417   .text:00000000000008b4 HAL_SMARTCARD_AbortReceiveCpltCallback
     /tmp/ccvrs2bU.s:2436   .text:00000000000008b6 HAL_SMARTCARD_AbortReceive_IT
     /tmp/ccvrs2bU.s:2513   .text:0000000000000908 $d
     /tmp/ccvrs2bU.s:2523   .text:000000000000090c SMARTCARD_DMARxOnlyAbortCallback
     /tmp/ccvrs2bU.s:2517   .text:000000000000090c $t
     /tmp/ccvrs2bU.s:2559   .text:0000000000000920 HAL_SMARTCARD_GetState
     /tmp/ccvrs2bU.s:2587   .text:000000000000092c HAL_SMARTCARD_GetError
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RCC_GetPCLK2Freq
ARM GAS  /tmp/ccvrs2bU.s 			page 201


HAL_RCC_GetPCLK1Freq
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_Abort_IT
