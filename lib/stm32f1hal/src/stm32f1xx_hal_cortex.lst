ARM GAS  /tmp/cc4CJeQn.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"stm32f1xx_hal_cortex.c"
  12              	@ GNU C11 (15:6.3.1+svn253039-1build1) version 6.3.1 20170620 (arm-none-eabi)
  13              	@	compiled by GNU C version 7.2.0, GMP version 6.1.2, MPFR version 4.0.1-rc1, MPC version 1.1.0, is
  14              	@ warning: MPFR header version 4.0.1-rc1 differs from library version 4.0.1.
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I ./inc -I ./inc/Legacy -I ../cmsisstm32f1xx/inc
  17              	@ -I ../cmsiscore/inc -imultilib thumb/v7-m -D__USES_INITFINI__
  18              	@ -D STM32F103x6 -D RUN_FROM_FLASH=1 -D __c src/stm32f1xx_hal_cortex.c
  19              	@ -mcpu=cortex-m3 -mthumb -auxbase-strip bin/stm32f1xx_hal_cortex.o -g
  20              	@ -gdwarf-2 -Os -Wall -fomit-frame-pointer -fverbose-asm
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffunction-cse -fgcse
  32              	@ -fgcse-lm -fgnu-runtime -fgnu-unique -fguess-branch-probability
  33              	@ -fhoist-adjacent-loads -fident -fif-conversion -fif-conversion2
  34              	@ -findirect-inlining -finline -finline-atomics -finline-functions
  35              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  36              	@ -fipa-cp-alignment -fipa-icf -fipa-icf-functions -fipa-icf-variables
  37              	@ -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra
  38              	@ -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  39              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  40              	@ -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  41              	@ -fmath-errno -fmerge-constants -fmerge-debug-strings
  42              	@ -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  43              	@ -fpartial-inlining -fpeephole -fpeephole2 -fplt -fprefetch-loop-arrays
  44              	@ -freg-struct-return -freorder-blocks -freorder-functions
  45              	@ -frerun-cse-after-loop -fsched-critical-path-heuristic
  46              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  47              	@ -fsched-last-insn-heuristic -fsched-pressure -fsched-rank-heuristic
  48              	@ -fsched-spec -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  49              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  50              	@ -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types
  51              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstrict-aliasing
  52              	@ -fstrict-overflow -fstrict-volatile-bitfields -fsync-libcalls
  53              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  54              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  55              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  56              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  57              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
ARM GAS  /tmp/cc4CJeQn.s 			page 2


  58              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  59              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  60              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  61              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  62              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  63              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  64              	@ -munaligned-access -mvectorize-with-neon-quad
  65              	
  66              		.text
  67              	.Ltext0:
  68              		.cfi_sections	.debug_frame
  69              		.align	1
  70              		.global	HAL_NVIC_SetPriorityGrouping
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu softvfp
  75              		.type	HAL_NVIC_SetPriorityGrouping, %function
  76              	HAL_NVIC_SetPriorityGrouping:
  77              	.LFB65:
  78              		.file 1 "src/stm32f1xx_hal_cortex.c"
   1:src/stm32f1xx_hal_cortex.c **** /**
   2:src/stm32f1xx_hal_cortex.c ****   ******************************************************************************
   3:src/stm32f1xx_hal_cortex.c ****   * @file    stm32f1xx_hal_cortex.c
   4:src/stm32f1xx_hal_cortex.c ****   * @author  MCD Application Team
   5:src/stm32f1xx_hal_cortex.c ****   * @brief   CORTEX HAL module driver.
   6:src/stm32f1xx_hal_cortex.c ****   *          This file provides firmware functions to manage the following 
   7:src/stm32f1xx_hal_cortex.c ****   *          functionalities of the CORTEX:
   8:src/stm32f1xx_hal_cortex.c ****   *           + Initialization and de-initialization functions
   9:src/stm32f1xx_hal_cortex.c ****   *           + Peripheral Control functions 
  10:src/stm32f1xx_hal_cortex.c ****   *
  11:src/stm32f1xx_hal_cortex.c ****   @verbatim  
  12:src/stm32f1xx_hal_cortex.c ****   ==============================================================================
  13:src/stm32f1xx_hal_cortex.c ****                         ##### How to use this driver #####
  14:src/stm32f1xx_hal_cortex.c ****   ==============================================================================
  15:src/stm32f1xx_hal_cortex.c **** 
  16:src/stm32f1xx_hal_cortex.c ****     [..]  
  17:src/stm32f1xx_hal_cortex.c ****     *** How to configure Interrupts using CORTEX HAL driver ***
  18:src/stm32f1xx_hal_cortex.c ****     ===========================================================
  19:src/stm32f1xx_hal_cortex.c ****     [..]     
  20:src/stm32f1xx_hal_cortex.c ****     This section provides functions allowing to configure the NVIC interrupts (IRQ).
  21:src/stm32f1xx_hal_cortex.c ****     The Cortex-M3 exceptions are managed by CMSIS functions.
  22:src/stm32f1xx_hal_cortex.c ****    
  23:src/stm32f1xx_hal_cortex.c ****     (#) Configure the NVIC Priority Grouping using HAL_NVIC_SetPriorityGrouping()
  24:src/stm32f1xx_hal_cortex.c ****         function according to the following table.
  25:src/stm32f1xx_hal_cortex.c ****     (#) Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority(). 
  26:src/stm32f1xx_hal_cortex.c ****     (#) Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ().
  27:src/stm32f1xx_hal_cortex.c ****     (#) please refer to programming manual for details in how to configure priority. 
  28:src/stm32f1xx_hal_cortex.c ****       
  29:src/stm32f1xx_hal_cortex.c ****      -@- When the NVIC_PRIORITYGROUP_0 is selected, IRQ preemption is no more possible. 
  30:src/stm32f1xx_hal_cortex.c ****          The pending IRQ priority will be managed only by the sub priority.
  31:src/stm32f1xx_hal_cortex.c ****    
  32:src/stm32f1xx_hal_cortex.c ****      -@- IRQ priority order (sorted by highest to lowest priority):
  33:src/stm32f1xx_hal_cortex.c ****         (+@) Lowest preemption priority
  34:src/stm32f1xx_hal_cortex.c ****         (+@) Lowest sub priority
  35:src/stm32f1xx_hal_cortex.c ****         (+@) Lowest hardware priority (IRQ number)
  36:src/stm32f1xx_hal_cortex.c ****  
ARM GAS  /tmp/cc4CJeQn.s 			page 3


  37:src/stm32f1xx_hal_cortex.c ****     [..]  
  38:src/stm32f1xx_hal_cortex.c ****     *** How to configure Systick using CORTEX HAL driver ***
  39:src/stm32f1xx_hal_cortex.c ****     ========================================================
  40:src/stm32f1xx_hal_cortex.c ****     [..]
  41:src/stm32f1xx_hal_cortex.c ****     Setup SysTick Timer for time base.
  42:src/stm32f1xx_hal_cortex.c ****            
  43:src/stm32f1xx_hal_cortex.c ****    (+) The HAL_SYSTICK_Config()function calls the SysTick_Config() function which
  44:src/stm32f1xx_hal_cortex.c ****        is a CMSIS function that:
  45:src/stm32f1xx_hal_cortex.c ****         (++) Configures the SysTick Reload register with value passed as function parameter.
  46:src/stm32f1xx_hal_cortex.c ****         (++) Configures the SysTick IRQ priority to the lowest value 0x0F.
  47:src/stm32f1xx_hal_cortex.c ****         (++) Resets the SysTick Counter register.
  48:src/stm32f1xx_hal_cortex.c ****         (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
  49:src/stm32f1xx_hal_cortex.c ****         (++) Enables the SysTick Interrupt.
  50:src/stm32f1xx_hal_cortex.c ****         (++) Starts the SysTick Counter.
  51:src/stm32f1xx_hal_cortex.c ****     
  52:src/stm32f1xx_hal_cortex.c ****    (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the macro
  53:src/stm32f1xx_hal_cortex.c ****        __HAL_CORTEX_SYSTICKCLK_CONFIG(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
  54:src/stm32f1xx_hal_cortex.c ****        HAL_SYSTICK_Config() function call. The __HAL_CORTEX_SYSTICKCLK_CONFIG() macro is defined
  55:src/stm32f1xx_hal_cortex.c ****        inside the stm32f1xx_hal_cortex.h file.
  56:src/stm32f1xx_hal_cortex.c **** 
  57:src/stm32f1xx_hal_cortex.c ****    (+) You can change the SysTick IRQ priority by calling the
  58:src/stm32f1xx_hal_cortex.c ****        HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function
  59:src/stm32f1xx_hal_cortex.c ****        call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS funct
  60:src/stm32f1xx_hal_cortex.c **** 
  61:src/stm32f1xx_hal_cortex.c ****    (+) To adjust the SysTick time base, use the following formula:
  62:src/stm32f1xx_hal_cortex.c ****                             
  63:src/stm32f1xx_hal_cortex.c ****        Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
  64:src/stm32f1xx_hal_cortex.c ****        (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
  65:src/stm32f1xx_hal_cortex.c ****        (++) Reload Value should not exceed 0xFFFFFF
  66:src/stm32f1xx_hal_cortex.c ****    
  67:src/stm32f1xx_hal_cortex.c ****   @endverbatim
  68:src/stm32f1xx_hal_cortex.c ****   ******************************************************************************
  69:src/stm32f1xx_hal_cortex.c ****   * @attention
  70:src/stm32f1xx_hal_cortex.c ****   *
  71:src/stm32f1xx_hal_cortex.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  72:src/stm32f1xx_hal_cortex.c ****   * All rights reserved.</center></h2>
  73:src/stm32f1xx_hal_cortex.c ****   *
  74:src/stm32f1xx_hal_cortex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  75:src/stm32f1xx_hal_cortex.c ****   * the "License"; You may not use this file except in compliance with the
  76:src/stm32f1xx_hal_cortex.c ****   * License. You may obtain a copy of the License at:
  77:src/stm32f1xx_hal_cortex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  78:src/stm32f1xx_hal_cortex.c ****   *
  79:src/stm32f1xx_hal_cortex.c ****   ******************************************************************************
  80:src/stm32f1xx_hal_cortex.c ****   */
  81:src/stm32f1xx_hal_cortex.c **** 
  82:src/stm32f1xx_hal_cortex.c **** /* Includes ------------------------------------------------------------------*/
  83:src/stm32f1xx_hal_cortex.c **** #include "stm32f1xx_hal.h"
  84:src/stm32f1xx_hal_cortex.c **** 
  85:src/stm32f1xx_hal_cortex.c **** /** @addtogroup STM32F1xx_HAL_Driver
  86:src/stm32f1xx_hal_cortex.c ****   * @{
  87:src/stm32f1xx_hal_cortex.c ****   */
  88:src/stm32f1xx_hal_cortex.c **** 
  89:src/stm32f1xx_hal_cortex.c **** /** @defgroup CORTEX CORTEX
  90:src/stm32f1xx_hal_cortex.c ****   * @brief CORTEX HAL module driver
  91:src/stm32f1xx_hal_cortex.c ****   * @{
  92:src/stm32f1xx_hal_cortex.c ****   */
  93:src/stm32f1xx_hal_cortex.c **** 
ARM GAS  /tmp/cc4CJeQn.s 			page 4


  94:src/stm32f1xx_hal_cortex.c **** #ifdef HAL_CORTEX_MODULE_ENABLED
  95:src/stm32f1xx_hal_cortex.c **** 
  96:src/stm32f1xx_hal_cortex.c **** /* Private types -------------------------------------------------------------*/
  97:src/stm32f1xx_hal_cortex.c **** /* Private variables ---------------------------------------------------------*/
  98:src/stm32f1xx_hal_cortex.c **** /* Private constants ---------------------------------------------------------*/
  99:src/stm32f1xx_hal_cortex.c **** /* Private macros ------------------------------------------------------------*/
 100:src/stm32f1xx_hal_cortex.c **** /* Private functions ---------------------------------------------------------*/
 101:src/stm32f1xx_hal_cortex.c **** /* Exported functions --------------------------------------------------------*/
 102:src/stm32f1xx_hal_cortex.c **** 
 103:src/stm32f1xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions CORTEX Exported Functions
 104:src/stm32f1xx_hal_cortex.c ****   * @{
 105:src/stm32f1xx_hal_cortex.c ****   */
 106:src/stm32f1xx_hal_cortex.c **** 
 107:src/stm32f1xx_hal_cortex.c **** 
 108:src/stm32f1xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions_Group1 Initialization and de-initialization functions
 109:src/stm32f1xx_hal_cortex.c ****   *  @brief    Initialization and Configuration functions 
 110:src/stm32f1xx_hal_cortex.c ****   *
 111:src/stm32f1xx_hal_cortex.c **** @verbatim    
 112:src/stm32f1xx_hal_cortex.c ****   ==============================================================================
 113:src/stm32f1xx_hal_cortex.c ****               ##### Initialization and de-initialization functions #####
 114:src/stm32f1xx_hal_cortex.c ****   ==============================================================================
 115:src/stm32f1xx_hal_cortex.c ****     [..]
 116:src/stm32f1xx_hal_cortex.c ****       This section provides the CORTEX HAL driver functions allowing to configure Interrupts
 117:src/stm32f1xx_hal_cortex.c ****       Systick functionalities 
 118:src/stm32f1xx_hal_cortex.c **** 
 119:src/stm32f1xx_hal_cortex.c **** @endverbatim
 120:src/stm32f1xx_hal_cortex.c ****   * @{
 121:src/stm32f1xx_hal_cortex.c ****   */
 122:src/stm32f1xx_hal_cortex.c **** 
 123:src/stm32f1xx_hal_cortex.c **** 
 124:src/stm32f1xx_hal_cortex.c **** /**
 125:src/stm32f1xx_hal_cortex.c ****   * @brief  Sets the priority grouping field (preemption priority and subpriority)
 126:src/stm32f1xx_hal_cortex.c ****   *         using the required unlock sequence.
 127:src/stm32f1xx_hal_cortex.c ****   * @param  PriorityGroup: The priority grouping bits length. 
 128:src/stm32f1xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 129:src/stm32f1xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_0: 0 bits for preemption priority
 130:src/stm32f1xx_hal_cortex.c ****   *                                    4 bits for subpriority
 131:src/stm32f1xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_1: 1 bits for preemption priority
 132:src/stm32f1xx_hal_cortex.c ****   *                                    3 bits for subpriority
 133:src/stm32f1xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_2: 2 bits for preemption priority
 134:src/stm32f1xx_hal_cortex.c ****   *                                    2 bits for subpriority
 135:src/stm32f1xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_3: 3 bits for preemption priority
 136:src/stm32f1xx_hal_cortex.c ****   *                                    1 bits for subpriority
 137:src/stm32f1xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_4: 4 bits for preemption priority
 138:src/stm32f1xx_hal_cortex.c ****   *                                    0 bits for subpriority
 139:src/stm32f1xx_hal_cortex.c ****   * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 140:src/stm32f1xx_hal_cortex.c ****   *         The pending IRQ priority will be managed only by the subpriority. 
 141:src/stm32f1xx_hal_cortex.c ****   * @retval None
 142:src/stm32f1xx_hal_cortex.c ****   */
 143:src/stm32f1xx_hal_cortex.c **** void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 144:src/stm32f1xx_hal_cortex.c **** {
  79              		.loc 1 144 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  84              	.LVL0:
ARM GAS  /tmp/cc4CJeQn.s 			page 5


  85              	.LBB14:
  86              	.LBB15:
  87              		.file 2 "../cmsiscore/inc/core_cm3.h"
   1:../cmsiscore/inc/core_cm3.h **** /**************************************************************************//**
   2:../cmsiscore/inc/core_cm3.h ****  * @file     core_cm3.h
   3:../cmsiscore/inc/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:../cmsiscore/inc/core_cm3.h ****  * @version  V5.0.8
   5:../cmsiscore/inc/core_cm3.h ****  * @date     04. June 2018
   6:../cmsiscore/inc/core_cm3.h ****  ******************************************************************************/
   7:../cmsiscore/inc/core_cm3.h **** /*
   8:../cmsiscore/inc/core_cm3.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:../cmsiscore/inc/core_cm3.h ****  *
  10:../cmsiscore/inc/core_cm3.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../cmsiscore/inc/core_cm3.h ****  *
  12:../cmsiscore/inc/core_cm3.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../cmsiscore/inc/core_cm3.h ****  * not use this file except in compliance with the License.
  14:../cmsiscore/inc/core_cm3.h ****  * You may obtain a copy of the License at
  15:../cmsiscore/inc/core_cm3.h ****  *
  16:../cmsiscore/inc/core_cm3.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../cmsiscore/inc/core_cm3.h ****  *
  18:../cmsiscore/inc/core_cm3.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../cmsiscore/inc/core_cm3.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../cmsiscore/inc/core_cm3.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../cmsiscore/inc/core_cm3.h ****  * See the License for the specific language governing permissions and
  22:../cmsiscore/inc/core_cm3.h ****  * limitations under the License.
  23:../cmsiscore/inc/core_cm3.h ****  */
  24:../cmsiscore/inc/core_cm3.h **** 
  25:../cmsiscore/inc/core_cm3.h **** #if   defined ( __ICCARM__ )
  26:../cmsiscore/inc/core_cm3.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:../cmsiscore/inc/core_cm3.h **** #elif defined (__clang__)
  28:../cmsiscore/inc/core_cm3.h ****   #pragma clang system_header   /* treat file as system include file */
  29:../cmsiscore/inc/core_cm3.h **** #endif
  30:../cmsiscore/inc/core_cm3.h **** 
  31:../cmsiscore/inc/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:../cmsiscore/inc/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:../cmsiscore/inc/core_cm3.h **** 
  34:../cmsiscore/inc/core_cm3.h **** #include <stdint.h>
  35:../cmsiscore/inc/core_cm3.h **** 
  36:../cmsiscore/inc/core_cm3.h **** #ifdef __cplusplus
  37:../cmsiscore/inc/core_cm3.h ****  extern "C" {
  38:../cmsiscore/inc/core_cm3.h **** #endif
  39:../cmsiscore/inc/core_cm3.h **** 
  40:../cmsiscore/inc/core_cm3.h **** /**
  41:../cmsiscore/inc/core_cm3.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:../cmsiscore/inc/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:../cmsiscore/inc/core_cm3.h **** 
  44:../cmsiscore/inc/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:../cmsiscore/inc/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  46:../cmsiscore/inc/core_cm3.h **** 
  47:../cmsiscore/inc/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:../cmsiscore/inc/core_cm3.h ****      Unions are used for effective representation of core registers.
  49:../cmsiscore/inc/core_cm3.h **** 
  50:../cmsiscore/inc/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:../cmsiscore/inc/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  52:../cmsiscore/inc/core_cm3.h ****  */
  53:../cmsiscore/inc/core_cm3.h **** 
  54:../cmsiscore/inc/core_cm3.h **** 
ARM GAS  /tmp/cc4CJeQn.s 			page 6


  55:../cmsiscore/inc/core_cm3.h **** /*******************************************************************************
  56:../cmsiscore/inc/core_cm3.h ****  *                 CMSIS definitions
  57:../cmsiscore/inc/core_cm3.h ****  ******************************************************************************/
  58:../cmsiscore/inc/core_cm3.h **** /**
  59:../cmsiscore/inc/core_cm3.h ****   \ingroup Cortex_M3
  60:../cmsiscore/inc/core_cm3.h ****   @{
  61:../cmsiscore/inc/core_cm3.h ****  */
  62:../cmsiscore/inc/core_cm3.h **** 
  63:../cmsiscore/inc/core_cm3.h **** #include "cmsis_version.h"
  64:../cmsiscore/inc/core_cm3.h **** 
  65:../cmsiscore/inc/core_cm3.h **** /*  CMSIS CM3 definitions */
  66:../cmsiscore/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:../cmsiscore/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:../cmsiscore/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16U) | \
  69:../cmsiscore/inc/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:../cmsiscore/inc/core_cm3.h **** 
  71:../cmsiscore/inc/core_cm3.h **** #define __CORTEX_M                (3U)                                   /*!< Cortex-M Core */
  72:../cmsiscore/inc/core_cm3.h **** 
  73:../cmsiscore/inc/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:../cmsiscore/inc/core_cm3.h ****     This core does not support an FPU at all
  75:../cmsiscore/inc/core_cm3.h **** */
  76:../cmsiscore/inc/core_cm3.h **** #define __FPU_USED       0U
  77:../cmsiscore/inc/core_cm3.h **** 
  78:../cmsiscore/inc/core_cm3.h **** #if defined ( __CC_ARM )
  79:../cmsiscore/inc/core_cm3.h ****   #if defined __TARGET_FPU_VFP
  80:../cmsiscore/inc/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:../cmsiscore/inc/core_cm3.h ****   #endif
  82:../cmsiscore/inc/core_cm3.h **** 
  83:../cmsiscore/inc/core_cm3.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:../cmsiscore/inc/core_cm3.h ****   #if defined __ARM_PCS_VFP
  85:../cmsiscore/inc/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:../cmsiscore/inc/core_cm3.h ****   #endif
  87:../cmsiscore/inc/core_cm3.h **** 
  88:../cmsiscore/inc/core_cm3.h **** #elif defined ( __GNUC__ )
  89:../cmsiscore/inc/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:../cmsiscore/inc/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:../cmsiscore/inc/core_cm3.h ****   #endif
  92:../cmsiscore/inc/core_cm3.h **** 
  93:../cmsiscore/inc/core_cm3.h **** #elif defined ( __ICCARM__ )
  94:../cmsiscore/inc/core_cm3.h ****   #if defined __ARMVFP__
  95:../cmsiscore/inc/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:../cmsiscore/inc/core_cm3.h ****   #endif
  97:../cmsiscore/inc/core_cm3.h **** 
  98:../cmsiscore/inc/core_cm3.h **** #elif defined ( __TI_ARM__ )
  99:../cmsiscore/inc/core_cm3.h ****   #if defined __TI_VFP_SUPPORT__
 100:../cmsiscore/inc/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:../cmsiscore/inc/core_cm3.h ****   #endif
 102:../cmsiscore/inc/core_cm3.h **** 
 103:../cmsiscore/inc/core_cm3.h **** #elif defined ( __TASKING__ )
 104:../cmsiscore/inc/core_cm3.h ****   #if defined __FPU_VFP__
 105:../cmsiscore/inc/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:../cmsiscore/inc/core_cm3.h ****   #endif
 107:../cmsiscore/inc/core_cm3.h **** 
 108:../cmsiscore/inc/core_cm3.h **** #elif defined ( __CSMC__ )
 109:../cmsiscore/inc/core_cm3.h ****   #if ( __CSMC__ & 0x400U)
 110:../cmsiscore/inc/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:../cmsiscore/inc/core_cm3.h ****   #endif
ARM GAS  /tmp/cc4CJeQn.s 			page 7


 112:../cmsiscore/inc/core_cm3.h **** 
 113:../cmsiscore/inc/core_cm3.h **** #endif
 114:../cmsiscore/inc/core_cm3.h **** 
 115:../cmsiscore/inc/core_cm3.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:../cmsiscore/inc/core_cm3.h **** 
 117:../cmsiscore/inc/core_cm3.h **** 
 118:../cmsiscore/inc/core_cm3.h **** #ifdef __cplusplus
 119:../cmsiscore/inc/core_cm3.h **** }
 120:../cmsiscore/inc/core_cm3.h **** #endif
 121:../cmsiscore/inc/core_cm3.h **** 
 122:../cmsiscore/inc/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 123:../cmsiscore/inc/core_cm3.h **** 
 124:../cmsiscore/inc/core_cm3.h **** #ifndef __CMSIS_GENERIC
 125:../cmsiscore/inc/core_cm3.h **** 
 126:../cmsiscore/inc/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 127:../cmsiscore/inc/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 128:../cmsiscore/inc/core_cm3.h **** 
 129:../cmsiscore/inc/core_cm3.h **** #ifdef __cplusplus
 130:../cmsiscore/inc/core_cm3.h ****  extern "C" {
 131:../cmsiscore/inc/core_cm3.h **** #endif
 132:../cmsiscore/inc/core_cm3.h **** 
 133:../cmsiscore/inc/core_cm3.h **** /* check device defines and use defaults */
 134:../cmsiscore/inc/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 135:../cmsiscore/inc/core_cm3.h ****   #ifndef __CM3_REV
 136:../cmsiscore/inc/core_cm3.h ****     #define __CM3_REV               0x0200U
 137:../cmsiscore/inc/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 138:../cmsiscore/inc/core_cm3.h ****   #endif
 139:../cmsiscore/inc/core_cm3.h **** 
 140:../cmsiscore/inc/core_cm3.h ****   #ifndef __MPU_PRESENT
 141:../cmsiscore/inc/core_cm3.h ****     #define __MPU_PRESENT             0U
 142:../cmsiscore/inc/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:../cmsiscore/inc/core_cm3.h ****   #endif
 144:../cmsiscore/inc/core_cm3.h **** 
 145:../cmsiscore/inc/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 146:../cmsiscore/inc/core_cm3.h ****     #define __NVIC_PRIO_BITS          3U
 147:../cmsiscore/inc/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 148:../cmsiscore/inc/core_cm3.h ****   #endif
 149:../cmsiscore/inc/core_cm3.h **** 
 150:../cmsiscore/inc/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 151:../cmsiscore/inc/core_cm3.h ****     #define __Vendor_SysTickConfig    0U
 152:../cmsiscore/inc/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 153:../cmsiscore/inc/core_cm3.h ****   #endif
 154:../cmsiscore/inc/core_cm3.h **** #endif
 155:../cmsiscore/inc/core_cm3.h **** 
 156:../cmsiscore/inc/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 157:../cmsiscore/inc/core_cm3.h **** /**
 158:../cmsiscore/inc/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 159:../cmsiscore/inc/core_cm3.h **** 
 160:../cmsiscore/inc/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 161:../cmsiscore/inc/core_cm3.h ****     \li to specify the access to peripheral variables.
 162:../cmsiscore/inc/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 163:../cmsiscore/inc/core_cm3.h **** */
 164:../cmsiscore/inc/core_cm3.h **** #ifdef __cplusplus
 165:../cmsiscore/inc/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 166:../cmsiscore/inc/core_cm3.h **** #else
 167:../cmsiscore/inc/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 168:../cmsiscore/inc/core_cm3.h **** #endif
ARM GAS  /tmp/cc4CJeQn.s 			page 8


 169:../cmsiscore/inc/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 170:../cmsiscore/inc/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 171:../cmsiscore/inc/core_cm3.h **** 
 172:../cmsiscore/inc/core_cm3.h **** /* following defines should be used for structure members */
 173:../cmsiscore/inc/core_cm3.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 174:../cmsiscore/inc/core_cm3.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 175:../cmsiscore/inc/core_cm3.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 176:../cmsiscore/inc/core_cm3.h **** 
 177:../cmsiscore/inc/core_cm3.h **** /*@} end of group Cortex_M3 */
 178:../cmsiscore/inc/core_cm3.h **** 
 179:../cmsiscore/inc/core_cm3.h **** 
 180:../cmsiscore/inc/core_cm3.h **** 
 181:../cmsiscore/inc/core_cm3.h **** /*******************************************************************************
 182:../cmsiscore/inc/core_cm3.h ****  *                 Register Abstraction
 183:../cmsiscore/inc/core_cm3.h ****   Core Register contain:
 184:../cmsiscore/inc/core_cm3.h ****   - Core Register
 185:../cmsiscore/inc/core_cm3.h ****   - Core NVIC Register
 186:../cmsiscore/inc/core_cm3.h ****   - Core SCB Register
 187:../cmsiscore/inc/core_cm3.h ****   - Core SysTick Register
 188:../cmsiscore/inc/core_cm3.h ****   - Core Debug Register
 189:../cmsiscore/inc/core_cm3.h ****   - Core MPU Register
 190:../cmsiscore/inc/core_cm3.h ****  ******************************************************************************/
 191:../cmsiscore/inc/core_cm3.h **** /**
 192:../cmsiscore/inc/core_cm3.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 193:../cmsiscore/inc/core_cm3.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 194:../cmsiscore/inc/core_cm3.h **** */
 195:../cmsiscore/inc/core_cm3.h **** 
 196:../cmsiscore/inc/core_cm3.h **** /**
 197:../cmsiscore/inc/core_cm3.h ****   \ingroup    CMSIS_core_register
 198:../cmsiscore/inc/core_cm3.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 199:../cmsiscore/inc/core_cm3.h ****   \brief      Core Register type definitions.
 200:../cmsiscore/inc/core_cm3.h ****   @{
 201:../cmsiscore/inc/core_cm3.h ****  */
 202:../cmsiscore/inc/core_cm3.h **** 
 203:../cmsiscore/inc/core_cm3.h **** /**
 204:../cmsiscore/inc/core_cm3.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 205:../cmsiscore/inc/core_cm3.h ****  */
 206:../cmsiscore/inc/core_cm3.h **** typedef union
 207:../cmsiscore/inc/core_cm3.h **** {
 208:../cmsiscore/inc/core_cm3.h ****   struct
 209:../cmsiscore/inc/core_cm3.h ****   {
 210:../cmsiscore/inc/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved */
 211:../cmsiscore/inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 212:../cmsiscore/inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 213:../cmsiscore/inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 214:../cmsiscore/inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 215:../cmsiscore/inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 216:../cmsiscore/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 217:../cmsiscore/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 218:../cmsiscore/inc/core_cm3.h **** } APSR_Type;
 219:../cmsiscore/inc/core_cm3.h **** 
 220:../cmsiscore/inc/core_cm3.h **** /* APSR Register Definitions */
 221:../cmsiscore/inc/core_cm3.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 222:../cmsiscore/inc/core_cm3.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 223:../cmsiscore/inc/core_cm3.h **** 
 224:../cmsiscore/inc/core_cm3.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 225:../cmsiscore/inc/core_cm3.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
ARM GAS  /tmp/cc4CJeQn.s 			page 9


 226:../cmsiscore/inc/core_cm3.h **** 
 227:../cmsiscore/inc/core_cm3.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 228:../cmsiscore/inc/core_cm3.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 229:../cmsiscore/inc/core_cm3.h **** 
 230:../cmsiscore/inc/core_cm3.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 231:../cmsiscore/inc/core_cm3.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 232:../cmsiscore/inc/core_cm3.h **** 
 233:../cmsiscore/inc/core_cm3.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 234:../cmsiscore/inc/core_cm3.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 235:../cmsiscore/inc/core_cm3.h **** 
 236:../cmsiscore/inc/core_cm3.h **** 
 237:../cmsiscore/inc/core_cm3.h **** /**
 238:../cmsiscore/inc/core_cm3.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:../cmsiscore/inc/core_cm3.h ****  */
 240:../cmsiscore/inc/core_cm3.h **** typedef union
 241:../cmsiscore/inc/core_cm3.h **** {
 242:../cmsiscore/inc/core_cm3.h ****   struct
 243:../cmsiscore/inc/core_cm3.h ****   {
 244:../cmsiscore/inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:../cmsiscore/inc/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:../cmsiscore/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 247:../cmsiscore/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:../cmsiscore/inc/core_cm3.h **** } IPSR_Type;
 249:../cmsiscore/inc/core_cm3.h **** 
 250:../cmsiscore/inc/core_cm3.h **** /* IPSR Register Definitions */
 251:../cmsiscore/inc/core_cm3.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:../cmsiscore/inc/core_cm3.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:../cmsiscore/inc/core_cm3.h **** 
 254:../cmsiscore/inc/core_cm3.h **** 
 255:../cmsiscore/inc/core_cm3.h **** /**
 256:../cmsiscore/inc/core_cm3.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:../cmsiscore/inc/core_cm3.h ****  */
 258:../cmsiscore/inc/core_cm3.h **** typedef union
 259:../cmsiscore/inc/core_cm3.h **** {
 260:../cmsiscore/inc/core_cm3.h ****   struct
 261:../cmsiscore/inc/core_cm3.h ****   {
 262:../cmsiscore/inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:../cmsiscore/inc/core_cm3.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 264:../cmsiscore/inc/core_cm3.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 265:../cmsiscore/inc/core_cm3.h ****     uint32_t _reserved1:8;               /*!< bit: 16..23  Reserved */
 266:../cmsiscore/inc/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 267:../cmsiscore/inc/core_cm3.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 268:../cmsiscore/inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 269:../cmsiscore/inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 270:../cmsiscore/inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 271:../cmsiscore/inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 272:../cmsiscore/inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 273:../cmsiscore/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 274:../cmsiscore/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 275:../cmsiscore/inc/core_cm3.h **** } xPSR_Type;
 276:../cmsiscore/inc/core_cm3.h **** 
 277:../cmsiscore/inc/core_cm3.h **** /* xPSR Register Definitions */
 278:../cmsiscore/inc/core_cm3.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 279:../cmsiscore/inc/core_cm3.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 280:../cmsiscore/inc/core_cm3.h **** 
 281:../cmsiscore/inc/core_cm3.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 282:../cmsiscore/inc/core_cm3.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
ARM GAS  /tmp/cc4CJeQn.s 			page 10


 283:../cmsiscore/inc/core_cm3.h **** 
 284:../cmsiscore/inc/core_cm3.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 285:../cmsiscore/inc/core_cm3.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 286:../cmsiscore/inc/core_cm3.h **** 
 287:../cmsiscore/inc/core_cm3.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 288:../cmsiscore/inc/core_cm3.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 289:../cmsiscore/inc/core_cm3.h **** 
 290:../cmsiscore/inc/core_cm3.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 291:../cmsiscore/inc/core_cm3.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 292:../cmsiscore/inc/core_cm3.h **** 
 293:../cmsiscore/inc/core_cm3.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 294:../cmsiscore/inc/core_cm3.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 295:../cmsiscore/inc/core_cm3.h **** 
 296:../cmsiscore/inc/core_cm3.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 297:../cmsiscore/inc/core_cm3.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 298:../cmsiscore/inc/core_cm3.h **** 
 299:../cmsiscore/inc/core_cm3.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 300:../cmsiscore/inc/core_cm3.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 301:../cmsiscore/inc/core_cm3.h **** 
 302:../cmsiscore/inc/core_cm3.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 303:../cmsiscore/inc/core_cm3.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 304:../cmsiscore/inc/core_cm3.h **** 
 305:../cmsiscore/inc/core_cm3.h **** 
 306:../cmsiscore/inc/core_cm3.h **** /**
 307:../cmsiscore/inc/core_cm3.h ****   \brief  Union type to access the Control Registers (CONTROL).
 308:../cmsiscore/inc/core_cm3.h ****  */
 309:../cmsiscore/inc/core_cm3.h **** typedef union
 310:../cmsiscore/inc/core_cm3.h **** {
 311:../cmsiscore/inc/core_cm3.h ****   struct
 312:../cmsiscore/inc/core_cm3.h ****   {
 313:../cmsiscore/inc/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 314:../cmsiscore/inc/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 315:../cmsiscore/inc/core_cm3.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 316:../cmsiscore/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 317:../cmsiscore/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 318:../cmsiscore/inc/core_cm3.h **** } CONTROL_Type;
 319:../cmsiscore/inc/core_cm3.h **** 
 320:../cmsiscore/inc/core_cm3.h **** /* CONTROL Register Definitions */
 321:../cmsiscore/inc/core_cm3.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 322:../cmsiscore/inc/core_cm3.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 323:../cmsiscore/inc/core_cm3.h **** 
 324:../cmsiscore/inc/core_cm3.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 325:../cmsiscore/inc/core_cm3.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 326:../cmsiscore/inc/core_cm3.h **** 
 327:../cmsiscore/inc/core_cm3.h **** /*@} end of group CMSIS_CORE */
 328:../cmsiscore/inc/core_cm3.h **** 
 329:../cmsiscore/inc/core_cm3.h **** 
 330:../cmsiscore/inc/core_cm3.h **** /**
 331:../cmsiscore/inc/core_cm3.h ****   \ingroup    CMSIS_core_register
 332:../cmsiscore/inc/core_cm3.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 333:../cmsiscore/inc/core_cm3.h ****   \brief      Type definitions for the NVIC Registers
 334:../cmsiscore/inc/core_cm3.h ****   @{
 335:../cmsiscore/inc/core_cm3.h ****  */
 336:../cmsiscore/inc/core_cm3.h **** 
 337:../cmsiscore/inc/core_cm3.h **** /**
 338:../cmsiscore/inc/core_cm3.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 339:../cmsiscore/inc/core_cm3.h ****  */
ARM GAS  /tmp/cc4CJeQn.s 			page 11


 340:../cmsiscore/inc/core_cm3.h **** typedef struct
 341:../cmsiscore/inc/core_cm3.h **** {
 342:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 343:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED0[24U];
 344:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 345:../cmsiscore/inc/core_cm3.h ****         uint32_t RSERVED1[24U];
 346:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 347:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED2[24U];
 348:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 349:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED3[24U];
 350:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 351:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED4[56U];
 352:../cmsiscore/inc/core_cm3.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 353:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED5[644U];
 354:../cmsiscore/inc/core_cm3.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 355:../cmsiscore/inc/core_cm3.h **** }  NVIC_Type;
 356:../cmsiscore/inc/core_cm3.h **** 
 357:../cmsiscore/inc/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 358:../cmsiscore/inc/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 359:../cmsiscore/inc/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 360:../cmsiscore/inc/core_cm3.h **** 
 361:../cmsiscore/inc/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 362:../cmsiscore/inc/core_cm3.h **** 
 363:../cmsiscore/inc/core_cm3.h **** 
 364:../cmsiscore/inc/core_cm3.h **** /**
 365:../cmsiscore/inc/core_cm3.h ****   \ingroup  CMSIS_core_register
 366:../cmsiscore/inc/core_cm3.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 367:../cmsiscore/inc/core_cm3.h ****   \brief    Type definitions for the System Control Block Registers
 368:../cmsiscore/inc/core_cm3.h ****   @{
 369:../cmsiscore/inc/core_cm3.h ****  */
 370:../cmsiscore/inc/core_cm3.h **** 
 371:../cmsiscore/inc/core_cm3.h **** /**
 372:../cmsiscore/inc/core_cm3.h ****   \brief  Structure type to access the System Control Block (SCB).
 373:../cmsiscore/inc/core_cm3.h ****  */
 374:../cmsiscore/inc/core_cm3.h **** typedef struct
 375:../cmsiscore/inc/core_cm3.h **** {
 376:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 377:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 378:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 379:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 380:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 381:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 382:../cmsiscore/inc/core_cm3.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 383:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 384:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 385:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 386:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 387:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 388:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 389:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 390:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 391:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 392:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 393:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 394:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 395:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED0[5U];
 396:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
ARM GAS  /tmp/cc4CJeQn.s 			page 12


 397:../cmsiscore/inc/core_cm3.h **** } SCB_Type;
 398:../cmsiscore/inc/core_cm3.h **** 
 399:../cmsiscore/inc/core_cm3.h **** /* SCB CPUID Register Definitions */
 400:../cmsiscore/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 401:../cmsiscore/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 402:../cmsiscore/inc/core_cm3.h **** 
 403:../cmsiscore/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 404:../cmsiscore/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 405:../cmsiscore/inc/core_cm3.h **** 
 406:../cmsiscore/inc/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 407:../cmsiscore/inc/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 408:../cmsiscore/inc/core_cm3.h **** 
 409:../cmsiscore/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 410:../cmsiscore/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 411:../cmsiscore/inc/core_cm3.h **** 
 412:../cmsiscore/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 413:../cmsiscore/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 414:../cmsiscore/inc/core_cm3.h **** 
 415:../cmsiscore/inc/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 416:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 417:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 418:../cmsiscore/inc/core_cm3.h **** 
 419:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 420:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 421:../cmsiscore/inc/core_cm3.h **** 
 422:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 423:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 424:../cmsiscore/inc/core_cm3.h **** 
 425:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 426:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 427:../cmsiscore/inc/core_cm3.h **** 
 428:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 429:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 430:../cmsiscore/inc/core_cm3.h **** 
 431:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 432:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 433:../cmsiscore/inc/core_cm3.h **** 
 434:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 435:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 436:../cmsiscore/inc/core_cm3.h **** 
 437:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 438:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 439:../cmsiscore/inc/core_cm3.h **** 
 440:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 441:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 442:../cmsiscore/inc/core_cm3.h **** 
 443:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:../cmsiscore/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:../cmsiscore/inc/core_cm3.h **** 
 446:../cmsiscore/inc/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 447:../cmsiscore/inc/core_cm3.h **** #if defined (__CM3_REV) && (__CM3_REV < 0x0201U)                   /* core r2p1 */
 448:../cmsiscore/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29U                                            /*!< SCB 
 449:../cmsiscore/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 450:../cmsiscore/inc/core_cm3.h **** 
 451:../cmsiscore/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 452:../cmsiscore/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 453:../cmsiscore/inc/core_cm3.h **** #else
ARM GAS  /tmp/cc4CJeQn.s 			page 13


 454:../cmsiscore/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 455:../cmsiscore/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 456:../cmsiscore/inc/core_cm3.h **** #endif
 457:../cmsiscore/inc/core_cm3.h **** 
 458:../cmsiscore/inc/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 459:../cmsiscore/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 460:../cmsiscore/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 461:../cmsiscore/inc/core_cm3.h **** 
 462:../cmsiscore/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 463:../cmsiscore/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 464:../cmsiscore/inc/core_cm3.h **** 
 465:../cmsiscore/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 466:../cmsiscore/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 467:../cmsiscore/inc/core_cm3.h **** 
 468:../cmsiscore/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 469:../cmsiscore/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 470:../cmsiscore/inc/core_cm3.h **** 
 471:../cmsiscore/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 472:../cmsiscore/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 473:../cmsiscore/inc/core_cm3.h **** 
 474:../cmsiscore/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 475:../cmsiscore/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 476:../cmsiscore/inc/core_cm3.h **** 
 477:../cmsiscore/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 478:../cmsiscore/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 479:../cmsiscore/inc/core_cm3.h **** 
 480:../cmsiscore/inc/core_cm3.h **** /* SCB System Control Register Definitions */
 481:../cmsiscore/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 482:../cmsiscore/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 483:../cmsiscore/inc/core_cm3.h **** 
 484:../cmsiscore/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 485:../cmsiscore/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 486:../cmsiscore/inc/core_cm3.h **** 
 487:../cmsiscore/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 488:../cmsiscore/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 489:../cmsiscore/inc/core_cm3.h **** 
 490:../cmsiscore/inc/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 491:../cmsiscore/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 492:../cmsiscore/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 493:../cmsiscore/inc/core_cm3.h **** 
 494:../cmsiscore/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 495:../cmsiscore/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 496:../cmsiscore/inc/core_cm3.h **** 
 497:../cmsiscore/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 498:../cmsiscore/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 499:../cmsiscore/inc/core_cm3.h **** 
 500:../cmsiscore/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 501:../cmsiscore/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 502:../cmsiscore/inc/core_cm3.h **** 
 503:../cmsiscore/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 504:../cmsiscore/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 505:../cmsiscore/inc/core_cm3.h **** 
 506:../cmsiscore/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 507:../cmsiscore/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 508:../cmsiscore/inc/core_cm3.h **** 
 509:../cmsiscore/inc/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 510:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
ARM GAS  /tmp/cc4CJeQn.s 			page 14


 511:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 512:../cmsiscore/inc/core_cm3.h **** 
 513:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 514:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 515:../cmsiscore/inc/core_cm3.h **** 
 516:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 517:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 518:../cmsiscore/inc/core_cm3.h **** 
 519:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 520:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 521:../cmsiscore/inc/core_cm3.h **** 
 522:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 523:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 524:../cmsiscore/inc/core_cm3.h **** 
 525:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 526:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 527:../cmsiscore/inc/core_cm3.h **** 
 528:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 529:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 530:../cmsiscore/inc/core_cm3.h **** 
 531:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 532:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 533:../cmsiscore/inc/core_cm3.h **** 
 534:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 535:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 536:../cmsiscore/inc/core_cm3.h **** 
 537:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 538:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 539:../cmsiscore/inc/core_cm3.h **** 
 540:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 541:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 542:../cmsiscore/inc/core_cm3.h **** 
 543:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 544:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 545:../cmsiscore/inc/core_cm3.h **** 
 546:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 547:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 548:../cmsiscore/inc/core_cm3.h **** 
 549:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 550:../cmsiscore/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 551:../cmsiscore/inc/core_cm3.h **** 
 552:../cmsiscore/inc/core_cm3.h **** /* SCB Configurable Fault Status Register Definitions */
 553:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 554:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 555:../cmsiscore/inc/core_cm3.h **** 
 556:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 557:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 558:../cmsiscore/inc/core_cm3.h **** 
 559:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 560:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 561:../cmsiscore/inc/core_cm3.h **** 
 562:../cmsiscore/inc/core_cm3.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 563:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 564:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 565:../cmsiscore/inc/core_cm3.h **** 
 566:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 567:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
ARM GAS  /tmp/cc4CJeQn.s 			page 15


 568:../cmsiscore/inc/core_cm3.h **** 
 569:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 570:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 571:../cmsiscore/inc/core_cm3.h **** 
 572:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 573:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 574:../cmsiscore/inc/core_cm3.h **** 
 575:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 576:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 577:../cmsiscore/inc/core_cm3.h **** 
 578:../cmsiscore/inc/core_cm3.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 579:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 580:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 581:../cmsiscore/inc/core_cm3.h **** 
 582:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 583:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 584:../cmsiscore/inc/core_cm3.h **** 
 585:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 586:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 587:../cmsiscore/inc/core_cm3.h **** 
 588:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 589:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 590:../cmsiscore/inc/core_cm3.h **** 
 591:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 592:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 593:../cmsiscore/inc/core_cm3.h **** 
 594:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 595:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 596:../cmsiscore/inc/core_cm3.h **** 
 597:../cmsiscore/inc/core_cm3.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 598:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 599:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 600:../cmsiscore/inc/core_cm3.h **** 
 601:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 602:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 603:../cmsiscore/inc/core_cm3.h **** 
 604:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 605:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 606:../cmsiscore/inc/core_cm3.h **** 
 607:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 608:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 609:../cmsiscore/inc/core_cm3.h **** 
 610:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 611:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 612:../cmsiscore/inc/core_cm3.h **** 
 613:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 614:../cmsiscore/inc/core_cm3.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 615:../cmsiscore/inc/core_cm3.h **** 
 616:../cmsiscore/inc/core_cm3.h **** /* SCB Hard Fault Status Register Definitions */
 617:../cmsiscore/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 618:../cmsiscore/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 619:../cmsiscore/inc/core_cm3.h **** 
 620:../cmsiscore/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 621:../cmsiscore/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 622:../cmsiscore/inc/core_cm3.h **** 
 623:../cmsiscore/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 624:../cmsiscore/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
ARM GAS  /tmp/cc4CJeQn.s 			page 16


 625:../cmsiscore/inc/core_cm3.h **** 
 626:../cmsiscore/inc/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 627:../cmsiscore/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 628:../cmsiscore/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 629:../cmsiscore/inc/core_cm3.h **** 
 630:../cmsiscore/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 631:../cmsiscore/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 632:../cmsiscore/inc/core_cm3.h **** 
 633:../cmsiscore/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 634:../cmsiscore/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 635:../cmsiscore/inc/core_cm3.h **** 
 636:../cmsiscore/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 637:../cmsiscore/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 638:../cmsiscore/inc/core_cm3.h **** 
 639:../cmsiscore/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 640:../cmsiscore/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 641:../cmsiscore/inc/core_cm3.h **** 
 642:../cmsiscore/inc/core_cm3.h **** /*@} end of group CMSIS_SCB */
 643:../cmsiscore/inc/core_cm3.h **** 
 644:../cmsiscore/inc/core_cm3.h **** 
 645:../cmsiscore/inc/core_cm3.h **** /**
 646:../cmsiscore/inc/core_cm3.h ****   \ingroup  CMSIS_core_register
 647:../cmsiscore/inc/core_cm3.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 648:../cmsiscore/inc/core_cm3.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 649:../cmsiscore/inc/core_cm3.h ****   @{
 650:../cmsiscore/inc/core_cm3.h ****  */
 651:../cmsiscore/inc/core_cm3.h **** 
 652:../cmsiscore/inc/core_cm3.h **** /**
 653:../cmsiscore/inc/core_cm3.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 654:../cmsiscore/inc/core_cm3.h ****  */
 655:../cmsiscore/inc/core_cm3.h **** typedef struct
 656:../cmsiscore/inc/core_cm3.h **** {
 657:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED0[1U];
 658:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 659:../cmsiscore/inc/core_cm3.h **** #if defined (__CM3_REV) && (__CM3_REV >= 0x200U)
 660:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 661:../cmsiscore/inc/core_cm3.h **** #else
 662:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED1[1U];
 663:../cmsiscore/inc/core_cm3.h **** #endif
 664:../cmsiscore/inc/core_cm3.h **** } SCnSCB_Type;
 665:../cmsiscore/inc/core_cm3.h **** 
 666:../cmsiscore/inc/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 667:../cmsiscore/inc/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 668:../cmsiscore/inc/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 669:../cmsiscore/inc/core_cm3.h **** 
 670:../cmsiscore/inc/core_cm3.h **** /* Auxiliary Control Register Definitions */
 671:../cmsiscore/inc/core_cm3.h **** 
 672:../cmsiscore/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 673:../cmsiscore/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 674:../cmsiscore/inc/core_cm3.h **** 
 675:../cmsiscore/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 676:../cmsiscore/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 677:../cmsiscore/inc/core_cm3.h **** 
 678:../cmsiscore/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 679:../cmsiscore/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 680:../cmsiscore/inc/core_cm3.h **** 
 681:../cmsiscore/inc/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
ARM GAS  /tmp/cc4CJeQn.s 			page 17


 682:../cmsiscore/inc/core_cm3.h **** 
 683:../cmsiscore/inc/core_cm3.h **** 
 684:../cmsiscore/inc/core_cm3.h **** /**
 685:../cmsiscore/inc/core_cm3.h ****   \ingroup  CMSIS_core_register
 686:../cmsiscore/inc/core_cm3.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 687:../cmsiscore/inc/core_cm3.h ****   \brief    Type definitions for the System Timer Registers.
 688:../cmsiscore/inc/core_cm3.h ****   @{
 689:../cmsiscore/inc/core_cm3.h ****  */
 690:../cmsiscore/inc/core_cm3.h **** 
 691:../cmsiscore/inc/core_cm3.h **** /**
 692:../cmsiscore/inc/core_cm3.h ****   \brief  Structure type to access the System Timer (SysTick).
 693:../cmsiscore/inc/core_cm3.h ****  */
 694:../cmsiscore/inc/core_cm3.h **** typedef struct
 695:../cmsiscore/inc/core_cm3.h **** {
 696:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 697:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 698:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 699:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 700:../cmsiscore/inc/core_cm3.h **** } SysTick_Type;
 701:../cmsiscore/inc/core_cm3.h **** 
 702:../cmsiscore/inc/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 703:../cmsiscore/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 704:../cmsiscore/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 705:../cmsiscore/inc/core_cm3.h **** 
 706:../cmsiscore/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 707:../cmsiscore/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 708:../cmsiscore/inc/core_cm3.h **** 
 709:../cmsiscore/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 710:../cmsiscore/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 711:../cmsiscore/inc/core_cm3.h **** 
 712:../cmsiscore/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 713:../cmsiscore/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 714:../cmsiscore/inc/core_cm3.h **** 
 715:../cmsiscore/inc/core_cm3.h **** /* SysTick Reload Register Definitions */
 716:../cmsiscore/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 717:../cmsiscore/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 718:../cmsiscore/inc/core_cm3.h **** 
 719:../cmsiscore/inc/core_cm3.h **** /* SysTick Current Register Definitions */
 720:../cmsiscore/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 721:../cmsiscore/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 722:../cmsiscore/inc/core_cm3.h **** 
 723:../cmsiscore/inc/core_cm3.h **** /* SysTick Calibration Register Definitions */
 724:../cmsiscore/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 725:../cmsiscore/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 726:../cmsiscore/inc/core_cm3.h **** 
 727:../cmsiscore/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 728:../cmsiscore/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 729:../cmsiscore/inc/core_cm3.h **** 
 730:../cmsiscore/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 731:../cmsiscore/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 732:../cmsiscore/inc/core_cm3.h **** 
 733:../cmsiscore/inc/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 734:../cmsiscore/inc/core_cm3.h **** 
 735:../cmsiscore/inc/core_cm3.h **** 
 736:../cmsiscore/inc/core_cm3.h **** /**
 737:../cmsiscore/inc/core_cm3.h ****   \ingroup  CMSIS_core_register
 738:../cmsiscore/inc/core_cm3.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
ARM GAS  /tmp/cc4CJeQn.s 			page 18


 739:../cmsiscore/inc/core_cm3.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 740:../cmsiscore/inc/core_cm3.h ****   @{
 741:../cmsiscore/inc/core_cm3.h ****  */
 742:../cmsiscore/inc/core_cm3.h **** 
 743:../cmsiscore/inc/core_cm3.h **** /**
 744:../cmsiscore/inc/core_cm3.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 745:../cmsiscore/inc/core_cm3.h ****  */
 746:../cmsiscore/inc/core_cm3.h **** typedef struct
 747:../cmsiscore/inc/core_cm3.h **** {
 748:../cmsiscore/inc/core_cm3.h ****   __OM  union
 749:../cmsiscore/inc/core_cm3.h ****   {
 750:../cmsiscore/inc/core_cm3.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 751:../cmsiscore/inc/core_cm3.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 752:../cmsiscore/inc/core_cm3.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 753:../cmsiscore/inc/core_cm3.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 754:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED0[864U];
 755:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 756:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED1[15U];
 757:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 758:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED2[15U];
 759:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 760:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED3[29U];
 761:../cmsiscore/inc/core_cm3.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 762:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 763:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 764:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED4[43U];
 765:../cmsiscore/inc/core_cm3.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 766:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 767:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED5[6U];
 768:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 769:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 770:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 771:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 772:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 773:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 774:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 775:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 776:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 777:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 778:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 779:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 780:../cmsiscore/inc/core_cm3.h **** } ITM_Type;
 781:../cmsiscore/inc/core_cm3.h **** 
 782:../cmsiscore/inc/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 783:../cmsiscore/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 784:../cmsiscore/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFFFFFFFFUL /*<< ITM_TPR_PRIVMASK_Pos*/)     /*!< ITM 
 785:../cmsiscore/inc/core_cm3.h **** 
 786:../cmsiscore/inc/core_cm3.h **** /* ITM Trace Control Register Definitions */
 787:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 788:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 789:../cmsiscore/inc/core_cm3.h **** 
 790:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 791:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 792:../cmsiscore/inc/core_cm3.h **** 
 793:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 794:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 795:../cmsiscore/inc/core_cm3.h **** 
ARM GAS  /tmp/cc4CJeQn.s 			page 19


 796:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 797:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 798:../cmsiscore/inc/core_cm3.h **** 
 799:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 800:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 801:../cmsiscore/inc/core_cm3.h **** 
 802:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 803:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 804:../cmsiscore/inc/core_cm3.h **** 
 805:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 806:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 807:../cmsiscore/inc/core_cm3.h **** 
 808:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 809:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 810:../cmsiscore/inc/core_cm3.h **** 
 811:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 812:../cmsiscore/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 813:../cmsiscore/inc/core_cm3.h **** 
 814:../cmsiscore/inc/core_cm3.h **** /* ITM Integration Write Register Definitions */
 815:../cmsiscore/inc/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 816:../cmsiscore/inc/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 817:../cmsiscore/inc/core_cm3.h **** 
 818:../cmsiscore/inc/core_cm3.h **** /* ITM Integration Read Register Definitions */
 819:../cmsiscore/inc/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 820:../cmsiscore/inc/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 821:../cmsiscore/inc/core_cm3.h **** 
 822:../cmsiscore/inc/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 823:../cmsiscore/inc/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 824:../cmsiscore/inc/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 825:../cmsiscore/inc/core_cm3.h **** 
 826:../cmsiscore/inc/core_cm3.h **** /* ITM Lock Status Register Definitions */
 827:../cmsiscore/inc/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 828:../cmsiscore/inc/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 829:../cmsiscore/inc/core_cm3.h **** 
 830:../cmsiscore/inc/core_cm3.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 831:../cmsiscore/inc/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 832:../cmsiscore/inc/core_cm3.h **** 
 833:../cmsiscore/inc/core_cm3.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 834:../cmsiscore/inc/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 835:../cmsiscore/inc/core_cm3.h **** 
 836:../cmsiscore/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 837:../cmsiscore/inc/core_cm3.h **** 
 838:../cmsiscore/inc/core_cm3.h **** 
 839:../cmsiscore/inc/core_cm3.h **** /**
 840:../cmsiscore/inc/core_cm3.h ****   \ingroup  CMSIS_core_register
 841:../cmsiscore/inc/core_cm3.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 842:../cmsiscore/inc/core_cm3.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 843:../cmsiscore/inc/core_cm3.h ****   @{
 844:../cmsiscore/inc/core_cm3.h ****  */
 845:../cmsiscore/inc/core_cm3.h **** 
 846:../cmsiscore/inc/core_cm3.h **** /**
 847:../cmsiscore/inc/core_cm3.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 848:../cmsiscore/inc/core_cm3.h ****  */
 849:../cmsiscore/inc/core_cm3.h **** typedef struct
 850:../cmsiscore/inc/core_cm3.h **** {
 851:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 852:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
ARM GAS  /tmp/cc4CJeQn.s 			page 20


 853:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 854:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 855:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 856:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 857:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 858:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 859:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 860:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 861:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 862:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED0[1U];
 863:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 864:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 865:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 866:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED1[1U];
 867:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 868:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 869:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 870:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED2[1U];
 871:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 872:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 873:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 874:../cmsiscore/inc/core_cm3.h **** } DWT_Type;
 875:../cmsiscore/inc/core_cm3.h **** 
 876:../cmsiscore/inc/core_cm3.h **** /* DWT Control Register Definitions */
 877:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 878:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 879:../cmsiscore/inc/core_cm3.h **** 
 880:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 881:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 882:../cmsiscore/inc/core_cm3.h **** 
 883:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 884:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 885:../cmsiscore/inc/core_cm3.h **** 
 886:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 887:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 888:../cmsiscore/inc/core_cm3.h **** 
 889:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 890:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 891:../cmsiscore/inc/core_cm3.h **** 
 892:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 893:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 894:../cmsiscore/inc/core_cm3.h **** 
 895:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 896:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 897:../cmsiscore/inc/core_cm3.h **** 
 898:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 899:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 900:../cmsiscore/inc/core_cm3.h **** 
 901:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 902:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 903:../cmsiscore/inc/core_cm3.h **** 
 904:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 905:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 906:../cmsiscore/inc/core_cm3.h **** 
 907:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 908:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 909:../cmsiscore/inc/core_cm3.h **** 
ARM GAS  /tmp/cc4CJeQn.s 			page 21


 910:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 911:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 912:../cmsiscore/inc/core_cm3.h **** 
 913:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 914:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 915:../cmsiscore/inc/core_cm3.h **** 
 916:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 917:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 918:../cmsiscore/inc/core_cm3.h **** 
 919:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 920:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 921:../cmsiscore/inc/core_cm3.h **** 
 922:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 923:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 924:../cmsiscore/inc/core_cm3.h **** 
 925:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 926:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 927:../cmsiscore/inc/core_cm3.h **** 
 928:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 929:../cmsiscore/inc/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 930:../cmsiscore/inc/core_cm3.h **** 
 931:../cmsiscore/inc/core_cm3.h **** /* DWT CPI Count Register Definitions */
 932:../cmsiscore/inc/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 933:../cmsiscore/inc/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 934:../cmsiscore/inc/core_cm3.h **** 
 935:../cmsiscore/inc/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 936:../cmsiscore/inc/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 937:../cmsiscore/inc/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 938:../cmsiscore/inc/core_cm3.h **** 
 939:../cmsiscore/inc/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 940:../cmsiscore/inc/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 941:../cmsiscore/inc/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 942:../cmsiscore/inc/core_cm3.h **** 
 943:../cmsiscore/inc/core_cm3.h **** /* DWT LSU Count Register Definitions */
 944:../cmsiscore/inc/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 945:../cmsiscore/inc/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 946:../cmsiscore/inc/core_cm3.h **** 
 947:../cmsiscore/inc/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 948:../cmsiscore/inc/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 949:../cmsiscore/inc/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
 950:../cmsiscore/inc/core_cm3.h **** 
 951:../cmsiscore/inc/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 952:../cmsiscore/inc/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
 953:../cmsiscore/inc/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
 954:../cmsiscore/inc/core_cm3.h **** 
 955:../cmsiscore/inc/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 956:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
 957:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 958:../cmsiscore/inc/core_cm3.h **** 
 959:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
 960:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 961:../cmsiscore/inc/core_cm3.h **** 
 962:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
 963:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 964:../cmsiscore/inc/core_cm3.h **** 
 965:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
 966:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
ARM GAS  /tmp/cc4CJeQn.s 			page 22


 967:../cmsiscore/inc/core_cm3.h **** 
 968:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
 969:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 970:../cmsiscore/inc/core_cm3.h **** 
 971:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
 972:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 973:../cmsiscore/inc/core_cm3.h **** 
 974:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
 975:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 976:../cmsiscore/inc/core_cm3.h **** 
 977:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
 978:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 979:../cmsiscore/inc/core_cm3.h **** 
 980:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
 981:../cmsiscore/inc/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
 982:../cmsiscore/inc/core_cm3.h **** 
 983:../cmsiscore/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 984:../cmsiscore/inc/core_cm3.h **** 
 985:../cmsiscore/inc/core_cm3.h **** 
 986:../cmsiscore/inc/core_cm3.h **** /**
 987:../cmsiscore/inc/core_cm3.h ****   \ingroup  CMSIS_core_register
 988:../cmsiscore/inc/core_cm3.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 989:../cmsiscore/inc/core_cm3.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
 990:../cmsiscore/inc/core_cm3.h ****   @{
 991:../cmsiscore/inc/core_cm3.h ****  */
 992:../cmsiscore/inc/core_cm3.h **** 
 993:../cmsiscore/inc/core_cm3.h **** /**
 994:../cmsiscore/inc/core_cm3.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
 995:../cmsiscore/inc/core_cm3.h ****  */
 996:../cmsiscore/inc/core_cm3.h **** typedef struct
 997:../cmsiscore/inc/core_cm3.h **** {
 998:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 999:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1000:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED0[2U];
1001:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1002:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED1[55U];
1003:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1004:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED2[131U];
1005:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1006:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1007:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1008:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED3[759U];
1009:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER Register */
1010:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1011:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1012:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED4[1U];
1013:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1014:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1015:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1016:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED5[39U];
1017:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1018:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1019:../cmsiscore/inc/core_cm3.h ****         uint32_t RESERVED7[8U];
1020:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1021:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1022:../cmsiscore/inc/core_cm3.h **** } TPI_Type;
1023:../cmsiscore/inc/core_cm3.h **** 
ARM GAS  /tmp/cc4CJeQn.s 			page 23


1024:../cmsiscore/inc/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1025:../cmsiscore/inc/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1026:../cmsiscore/inc/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1027:../cmsiscore/inc/core_cm3.h **** 
1028:../cmsiscore/inc/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
1029:../cmsiscore/inc/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1030:../cmsiscore/inc/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1031:../cmsiscore/inc/core_cm3.h **** 
1032:../cmsiscore/inc/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
1033:../cmsiscore/inc/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1034:../cmsiscore/inc/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1035:../cmsiscore/inc/core_cm3.h **** 
1036:../cmsiscore/inc/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1037:../cmsiscore/inc/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1038:../cmsiscore/inc/core_cm3.h **** 
1039:../cmsiscore/inc/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1040:../cmsiscore/inc/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1041:../cmsiscore/inc/core_cm3.h **** 
1042:../cmsiscore/inc/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1043:../cmsiscore/inc/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1044:../cmsiscore/inc/core_cm3.h **** 
1045:../cmsiscore/inc/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
1046:../cmsiscore/inc/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1047:../cmsiscore/inc/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1048:../cmsiscore/inc/core_cm3.h **** 
1049:../cmsiscore/inc/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1050:../cmsiscore/inc/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1051:../cmsiscore/inc/core_cm3.h **** 
1052:../cmsiscore/inc/core_cm3.h **** /* TPI TRIGGER Register Definitions */
1053:../cmsiscore/inc/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1054:../cmsiscore/inc/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1055:../cmsiscore/inc/core_cm3.h **** 
1056:../cmsiscore/inc/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1057:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1058:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1059:../cmsiscore/inc/core_cm3.h **** 
1060:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1061:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1062:../cmsiscore/inc/core_cm3.h **** 
1063:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1064:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1065:../cmsiscore/inc/core_cm3.h **** 
1066:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1067:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1068:../cmsiscore/inc/core_cm3.h **** 
1069:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1070:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1071:../cmsiscore/inc/core_cm3.h **** 
1072:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1073:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1074:../cmsiscore/inc/core_cm3.h **** 
1075:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1076:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1077:../cmsiscore/inc/core_cm3.h **** 
1078:../cmsiscore/inc/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
1079:../cmsiscore/inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY2_Pos          0U                                         /*!< TPI ITA
1080:../cmsiscore/inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY2_Pos*/)   /*!< TPI ITA
ARM GAS  /tmp/cc4CJeQn.s 			page 24


1081:../cmsiscore/inc/core_cm3.h **** 
1082:../cmsiscore/inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY1_Pos          0U                                         /*!< TPI ITA
1083:../cmsiscore/inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY1_Pos*/)   /*!< TPI ITA
1084:../cmsiscore/inc/core_cm3.h **** 
1085:../cmsiscore/inc/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1086:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1087:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1088:../cmsiscore/inc/core_cm3.h **** 
1089:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1090:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1091:../cmsiscore/inc/core_cm3.h **** 
1092:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1093:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1094:../cmsiscore/inc/core_cm3.h **** 
1095:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1096:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1097:../cmsiscore/inc/core_cm3.h **** 
1098:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1099:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1100:../cmsiscore/inc/core_cm3.h **** 
1101:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1102:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1103:../cmsiscore/inc/core_cm3.h **** 
1104:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1105:../cmsiscore/inc/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1106:../cmsiscore/inc/core_cm3.h **** 
1107:../cmsiscore/inc/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
1108:../cmsiscore/inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY2_Pos          0U                                         /*!< TPI ITA
1109:../cmsiscore/inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY2_Pos*/)   /*!< TPI ITA
1110:../cmsiscore/inc/core_cm3.h **** 
1111:../cmsiscore/inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY1_Pos          0U                                         /*!< TPI ITA
1112:../cmsiscore/inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY1_Pos*/)   /*!< TPI ITA
1113:../cmsiscore/inc/core_cm3.h **** 
1114:../cmsiscore/inc/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
1115:../cmsiscore/inc/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1116:../cmsiscore/inc/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x3UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1117:../cmsiscore/inc/core_cm3.h **** 
1118:../cmsiscore/inc/core_cm3.h **** /* TPI DEVID Register Definitions */
1119:../cmsiscore/inc/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1120:../cmsiscore/inc/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1121:../cmsiscore/inc/core_cm3.h **** 
1122:../cmsiscore/inc/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1123:../cmsiscore/inc/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1124:../cmsiscore/inc/core_cm3.h **** 
1125:../cmsiscore/inc/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1126:../cmsiscore/inc/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1127:../cmsiscore/inc/core_cm3.h **** 
1128:../cmsiscore/inc/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1129:../cmsiscore/inc/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1130:../cmsiscore/inc/core_cm3.h **** 
1131:../cmsiscore/inc/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1132:../cmsiscore/inc/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1133:../cmsiscore/inc/core_cm3.h **** 
1134:../cmsiscore/inc/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1135:../cmsiscore/inc/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1136:../cmsiscore/inc/core_cm3.h **** 
1137:../cmsiscore/inc/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
ARM GAS  /tmp/cc4CJeQn.s 			page 25


1138:../cmsiscore/inc/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             4U                                         /*!< TPI DEV
1139:../cmsiscore/inc/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1140:../cmsiscore/inc/core_cm3.h **** 
1141:../cmsiscore/inc/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           0U                                         /*!< TPI DEV
1142:../cmsiscore/inc/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1143:../cmsiscore/inc/core_cm3.h **** 
1144:../cmsiscore/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1145:../cmsiscore/inc/core_cm3.h **** 
1146:../cmsiscore/inc/core_cm3.h **** 
1147:../cmsiscore/inc/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1148:../cmsiscore/inc/core_cm3.h **** /**
1149:../cmsiscore/inc/core_cm3.h ****   \ingroup  CMSIS_core_register
1150:../cmsiscore/inc/core_cm3.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1151:../cmsiscore/inc/core_cm3.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1152:../cmsiscore/inc/core_cm3.h ****   @{
1153:../cmsiscore/inc/core_cm3.h ****  */
1154:../cmsiscore/inc/core_cm3.h **** 
1155:../cmsiscore/inc/core_cm3.h **** /**
1156:../cmsiscore/inc/core_cm3.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1157:../cmsiscore/inc/core_cm3.h ****  */
1158:../cmsiscore/inc/core_cm3.h **** typedef struct
1159:../cmsiscore/inc/core_cm3.h **** {
1160:../cmsiscore/inc/core_cm3.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1161:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1162:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1163:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1164:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1165:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1166:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1167:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1168:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1169:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1170:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1171:../cmsiscore/inc/core_cm3.h **** } MPU_Type;
1172:../cmsiscore/inc/core_cm3.h **** 
1173:../cmsiscore/inc/core_cm3.h **** #define MPU_TYPE_RALIASES                  4U
1174:../cmsiscore/inc/core_cm3.h **** 
1175:../cmsiscore/inc/core_cm3.h **** /* MPU Type Register Definitions */
1176:../cmsiscore/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1177:../cmsiscore/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1178:../cmsiscore/inc/core_cm3.h **** 
1179:../cmsiscore/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1180:../cmsiscore/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1181:../cmsiscore/inc/core_cm3.h **** 
1182:../cmsiscore/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1183:../cmsiscore/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1184:../cmsiscore/inc/core_cm3.h **** 
1185:../cmsiscore/inc/core_cm3.h **** /* MPU Control Register Definitions */
1186:../cmsiscore/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1187:../cmsiscore/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1188:../cmsiscore/inc/core_cm3.h **** 
1189:../cmsiscore/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1190:../cmsiscore/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1191:../cmsiscore/inc/core_cm3.h **** 
1192:../cmsiscore/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1193:../cmsiscore/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1194:../cmsiscore/inc/core_cm3.h **** 
ARM GAS  /tmp/cc4CJeQn.s 			page 26


1195:../cmsiscore/inc/core_cm3.h **** /* MPU Region Number Register Definitions */
1196:../cmsiscore/inc/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1197:../cmsiscore/inc/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1198:../cmsiscore/inc/core_cm3.h **** 
1199:../cmsiscore/inc/core_cm3.h **** /* MPU Region Base Address Register Definitions */
1200:../cmsiscore/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1201:../cmsiscore/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1202:../cmsiscore/inc/core_cm3.h **** 
1203:../cmsiscore/inc/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1204:../cmsiscore/inc/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1205:../cmsiscore/inc/core_cm3.h **** 
1206:../cmsiscore/inc/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1207:../cmsiscore/inc/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1208:../cmsiscore/inc/core_cm3.h **** 
1209:../cmsiscore/inc/core_cm3.h **** /* MPU Region Attribute and Size Register Definitions */
1210:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1211:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1212:../cmsiscore/inc/core_cm3.h **** 
1213:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1214:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1215:../cmsiscore/inc/core_cm3.h **** 
1216:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1217:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1218:../cmsiscore/inc/core_cm3.h **** 
1219:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1220:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1221:../cmsiscore/inc/core_cm3.h **** 
1222:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1223:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1224:../cmsiscore/inc/core_cm3.h **** 
1225:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1226:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1227:../cmsiscore/inc/core_cm3.h **** 
1228:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1229:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1230:../cmsiscore/inc/core_cm3.h **** 
1231:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1232:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1233:../cmsiscore/inc/core_cm3.h **** 
1234:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1235:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1236:../cmsiscore/inc/core_cm3.h **** 
1237:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1238:../cmsiscore/inc/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1239:../cmsiscore/inc/core_cm3.h **** 
1240:../cmsiscore/inc/core_cm3.h **** /*@} end of group CMSIS_MPU */
1241:../cmsiscore/inc/core_cm3.h **** #endif
1242:../cmsiscore/inc/core_cm3.h **** 
1243:../cmsiscore/inc/core_cm3.h **** 
1244:../cmsiscore/inc/core_cm3.h **** /**
1245:../cmsiscore/inc/core_cm3.h ****   \ingroup  CMSIS_core_register
1246:../cmsiscore/inc/core_cm3.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1247:../cmsiscore/inc/core_cm3.h ****   \brief    Type definitions for the Core Debug Registers
1248:../cmsiscore/inc/core_cm3.h ****   @{
1249:../cmsiscore/inc/core_cm3.h ****  */
1250:../cmsiscore/inc/core_cm3.h **** 
1251:../cmsiscore/inc/core_cm3.h **** /**
ARM GAS  /tmp/cc4CJeQn.s 			page 27


1252:../cmsiscore/inc/core_cm3.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1253:../cmsiscore/inc/core_cm3.h ****  */
1254:../cmsiscore/inc/core_cm3.h **** typedef struct
1255:../cmsiscore/inc/core_cm3.h **** {
1256:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1257:../cmsiscore/inc/core_cm3.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1258:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1259:../cmsiscore/inc/core_cm3.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1260:../cmsiscore/inc/core_cm3.h **** } CoreDebug_Type;
1261:../cmsiscore/inc/core_cm3.h **** 
1262:../cmsiscore/inc/core_cm3.h **** /* Debug Halting Control and Status Register Definitions */
1263:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1264:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1265:../cmsiscore/inc/core_cm3.h **** 
1266:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1267:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1268:../cmsiscore/inc/core_cm3.h **** 
1269:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1270:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1271:../cmsiscore/inc/core_cm3.h **** 
1272:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1273:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1274:../cmsiscore/inc/core_cm3.h **** 
1275:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1276:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1277:../cmsiscore/inc/core_cm3.h **** 
1278:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1279:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1280:../cmsiscore/inc/core_cm3.h **** 
1281:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1282:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1283:../cmsiscore/inc/core_cm3.h **** 
1284:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1285:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1286:../cmsiscore/inc/core_cm3.h **** 
1287:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1288:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1289:../cmsiscore/inc/core_cm3.h **** 
1290:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1291:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1292:../cmsiscore/inc/core_cm3.h **** 
1293:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1294:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1295:../cmsiscore/inc/core_cm3.h **** 
1296:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1297:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1298:../cmsiscore/inc/core_cm3.h **** 
1299:../cmsiscore/inc/core_cm3.h **** /* Debug Core Register Selector Register Definitions */
1300:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1301:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1302:../cmsiscore/inc/core_cm3.h **** 
1303:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1304:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1305:../cmsiscore/inc/core_cm3.h **** 
1306:../cmsiscore/inc/core_cm3.h **** /* Debug Exception and Monitor Control Register Definitions */
1307:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1308:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
ARM GAS  /tmp/cc4CJeQn.s 			page 28


1309:../cmsiscore/inc/core_cm3.h **** 
1310:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1311:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1312:../cmsiscore/inc/core_cm3.h **** 
1313:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1314:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1315:../cmsiscore/inc/core_cm3.h **** 
1316:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1317:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1318:../cmsiscore/inc/core_cm3.h **** 
1319:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1320:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1321:../cmsiscore/inc/core_cm3.h **** 
1322:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1323:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1324:../cmsiscore/inc/core_cm3.h **** 
1325:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1326:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1327:../cmsiscore/inc/core_cm3.h **** 
1328:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1329:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1330:../cmsiscore/inc/core_cm3.h **** 
1331:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1332:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1333:../cmsiscore/inc/core_cm3.h **** 
1334:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1335:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1336:../cmsiscore/inc/core_cm3.h **** 
1337:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1338:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1339:../cmsiscore/inc/core_cm3.h **** 
1340:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1341:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1342:../cmsiscore/inc/core_cm3.h **** 
1343:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1344:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1345:../cmsiscore/inc/core_cm3.h **** 
1346:../cmsiscore/inc/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1347:../cmsiscore/inc/core_cm3.h **** 
1348:../cmsiscore/inc/core_cm3.h **** 
1349:../cmsiscore/inc/core_cm3.h **** /**
1350:../cmsiscore/inc/core_cm3.h ****   \ingroup    CMSIS_core_register
1351:../cmsiscore/inc/core_cm3.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1352:../cmsiscore/inc/core_cm3.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1353:../cmsiscore/inc/core_cm3.h ****   @{
1354:../cmsiscore/inc/core_cm3.h ****  */
1355:../cmsiscore/inc/core_cm3.h **** 
1356:../cmsiscore/inc/core_cm3.h **** /**
1357:../cmsiscore/inc/core_cm3.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1358:../cmsiscore/inc/core_cm3.h ****   \param[in] field  Name of the register bit field.
1359:../cmsiscore/inc/core_cm3.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1360:../cmsiscore/inc/core_cm3.h ****   \return           Masked and shifted value.
1361:../cmsiscore/inc/core_cm3.h **** */
1362:../cmsiscore/inc/core_cm3.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1363:../cmsiscore/inc/core_cm3.h **** 
1364:../cmsiscore/inc/core_cm3.h **** /**
1365:../cmsiscore/inc/core_cm3.h ****   \brief     Mask and shift a register value to extract a bit filed value.
ARM GAS  /tmp/cc4CJeQn.s 			page 29


1366:../cmsiscore/inc/core_cm3.h ****   \param[in] field  Name of the register bit field.
1367:../cmsiscore/inc/core_cm3.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1368:../cmsiscore/inc/core_cm3.h ****   \return           Masked and shifted bit field value.
1369:../cmsiscore/inc/core_cm3.h **** */
1370:../cmsiscore/inc/core_cm3.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1371:../cmsiscore/inc/core_cm3.h **** 
1372:../cmsiscore/inc/core_cm3.h **** /*@} end of group CMSIS_core_bitfield */
1373:../cmsiscore/inc/core_cm3.h **** 
1374:../cmsiscore/inc/core_cm3.h **** 
1375:../cmsiscore/inc/core_cm3.h **** /**
1376:../cmsiscore/inc/core_cm3.h ****   \ingroup    CMSIS_core_register
1377:../cmsiscore/inc/core_cm3.h ****   \defgroup   CMSIS_core_base     Core Definitions
1378:../cmsiscore/inc/core_cm3.h ****   \brief      Definitions for base addresses, unions, and structures.
1379:../cmsiscore/inc/core_cm3.h ****   @{
1380:../cmsiscore/inc/core_cm3.h ****  */
1381:../cmsiscore/inc/core_cm3.h **** 
1382:../cmsiscore/inc/core_cm3.h **** /* Memory mapping of Core Hardware */
1383:../cmsiscore/inc/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1384:../cmsiscore/inc/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1385:../cmsiscore/inc/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1386:../cmsiscore/inc/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1387:../cmsiscore/inc/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1388:../cmsiscore/inc/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1389:../cmsiscore/inc/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1390:../cmsiscore/inc/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1391:../cmsiscore/inc/core_cm3.h **** 
1392:../cmsiscore/inc/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1393:../cmsiscore/inc/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1394:../cmsiscore/inc/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1395:../cmsiscore/inc/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1396:../cmsiscore/inc/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1397:../cmsiscore/inc/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1398:../cmsiscore/inc/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1399:../cmsiscore/inc/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1400:../cmsiscore/inc/core_cm3.h **** 
1401:../cmsiscore/inc/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1402:../cmsiscore/inc/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1403:../cmsiscore/inc/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1404:../cmsiscore/inc/core_cm3.h **** #endif
1405:../cmsiscore/inc/core_cm3.h **** 
1406:../cmsiscore/inc/core_cm3.h **** /*@} */
1407:../cmsiscore/inc/core_cm3.h **** 
1408:../cmsiscore/inc/core_cm3.h **** 
1409:../cmsiscore/inc/core_cm3.h **** 
1410:../cmsiscore/inc/core_cm3.h **** /*******************************************************************************
1411:../cmsiscore/inc/core_cm3.h ****  *                Hardware Abstraction Layer
1412:../cmsiscore/inc/core_cm3.h ****   Core Function Interface contains:
1413:../cmsiscore/inc/core_cm3.h ****   - Core NVIC Functions
1414:../cmsiscore/inc/core_cm3.h ****   - Core SysTick Functions
1415:../cmsiscore/inc/core_cm3.h ****   - Core Debug Functions
1416:../cmsiscore/inc/core_cm3.h ****   - Core Register Access Functions
1417:../cmsiscore/inc/core_cm3.h ****  ******************************************************************************/
1418:../cmsiscore/inc/core_cm3.h **** /**
1419:../cmsiscore/inc/core_cm3.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1420:../cmsiscore/inc/core_cm3.h **** */
1421:../cmsiscore/inc/core_cm3.h **** 
1422:../cmsiscore/inc/core_cm3.h **** 
ARM GAS  /tmp/cc4CJeQn.s 			page 30


1423:../cmsiscore/inc/core_cm3.h **** 
1424:../cmsiscore/inc/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1425:../cmsiscore/inc/core_cm3.h **** /**
1426:../cmsiscore/inc/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1427:../cmsiscore/inc/core_cm3.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1428:../cmsiscore/inc/core_cm3.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1429:../cmsiscore/inc/core_cm3.h ****   @{
1430:../cmsiscore/inc/core_cm3.h ****  */
1431:../cmsiscore/inc/core_cm3.h **** 
1432:../cmsiscore/inc/core_cm3.h **** #ifdef CMSIS_NVIC_VIRTUAL
1433:../cmsiscore/inc/core_cm3.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1434:../cmsiscore/inc/core_cm3.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1435:../cmsiscore/inc/core_cm3.h ****   #endif
1436:../cmsiscore/inc/core_cm3.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1437:../cmsiscore/inc/core_cm3.h **** #else
1438:../cmsiscore/inc/core_cm3.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1439:../cmsiscore/inc/core_cm3.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1440:../cmsiscore/inc/core_cm3.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1441:../cmsiscore/inc/core_cm3.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1442:../cmsiscore/inc/core_cm3.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1443:../cmsiscore/inc/core_cm3.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1444:../cmsiscore/inc/core_cm3.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1445:../cmsiscore/inc/core_cm3.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1446:../cmsiscore/inc/core_cm3.h ****   #define NVIC_GetActive              __NVIC_GetActive
1447:../cmsiscore/inc/core_cm3.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1448:../cmsiscore/inc/core_cm3.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1449:../cmsiscore/inc/core_cm3.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1450:../cmsiscore/inc/core_cm3.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1451:../cmsiscore/inc/core_cm3.h **** 
1452:../cmsiscore/inc/core_cm3.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1453:../cmsiscore/inc/core_cm3.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1454:../cmsiscore/inc/core_cm3.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1455:../cmsiscore/inc/core_cm3.h ****   #endif
1456:../cmsiscore/inc/core_cm3.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1457:../cmsiscore/inc/core_cm3.h **** #else
1458:../cmsiscore/inc/core_cm3.h ****   #define NVIC_SetVector              __NVIC_SetVector
1459:../cmsiscore/inc/core_cm3.h ****   #define NVIC_GetVector              __NVIC_GetVector
1460:../cmsiscore/inc/core_cm3.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1461:../cmsiscore/inc/core_cm3.h **** 
1462:../cmsiscore/inc/core_cm3.h **** #define NVIC_USER_IRQ_OFFSET          16
1463:../cmsiscore/inc/core_cm3.h **** 
1464:../cmsiscore/inc/core_cm3.h **** 
1465:../cmsiscore/inc/core_cm3.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
1466:../cmsiscore/inc/core_cm3.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
1467:../cmsiscore/inc/core_cm3.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
1468:../cmsiscore/inc/core_cm3.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
1469:../cmsiscore/inc/core_cm3.h **** 
1470:../cmsiscore/inc/core_cm3.h **** 
1471:../cmsiscore/inc/core_cm3.h **** /**
1472:../cmsiscore/inc/core_cm3.h ****   \brief   Set Priority Grouping
1473:../cmsiscore/inc/core_cm3.h ****   \details Sets the priority grouping field using the required unlock sequence.
1474:../cmsiscore/inc/core_cm3.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1475:../cmsiscore/inc/core_cm3.h ****            Only values from 0..7 are used.
1476:../cmsiscore/inc/core_cm3.h ****            In case of a conflict between priority grouping and available
1477:../cmsiscore/inc/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1478:../cmsiscore/inc/core_cm3.h ****   \param [in]      PriorityGroup  Priority grouping field.
1479:../cmsiscore/inc/core_cm3.h ****  */
ARM GAS  /tmp/cc4CJeQn.s 			page 31


1480:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1481:../cmsiscore/inc/core_cm3.h **** {
1482:../cmsiscore/inc/core_cm3.h ****   uint32_t reg_value;
1483:../cmsiscore/inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1484:../cmsiscore/inc/core_cm3.h **** 
1485:../cmsiscore/inc/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
  88              		.loc 2 1485 0
  89 0000 074A     		ldr	r2, .L2	@ tmp117,
1486:../cmsiscore/inc/core_cm3.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1487:../cmsiscore/inc/core_cm3.h ****   reg_value  =  (reg_value                                   |
1488:../cmsiscore/inc/core_cm3.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1489:../cmsiscore/inc/core_cm3.h ****                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key a
  90              		.loc 2 1489 0
  91 0002 0002     		lsls	r0, r0, #8	@ tmp121, PriorityGroup,
  92              	.LVL1:
1485:../cmsiscore/inc/core_cm3.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
  93              		.loc 2 1485 0
  94 0004 D368     		ldr	r3, [r2, #12]	@ reg_value, MEM[(struct SCB_Type *)3758157056B].AIRCR
  95              	.LVL2:
  96              		.loc 2 1489 0
  97 0006 00F4E060 		and	r0, r0, #1792	@ tmp122, tmp121,
1486:../cmsiscore/inc/core_cm3.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
  98              		.loc 2 1486 0
  99 000a 23F4E063 		bic	r3, r3, #1792	@ reg_value, reg_value,
 100              	.LVL3:
 101 000e 1B04     		lsls	r3, r3, #16	@ reg_value, reg_value,
 102 0010 1B0C     		lsrs	r3, r3, #16	@ reg_value, reg_value,
 103 0012 43F0BF63 		orr	r3, r3, #100139008	@ _3, reg_value,
 104 0016 43F40033 		orr	r3, r3, #131072	@ _3, _3,
1487:../cmsiscore/inc/core_cm3.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 105              		.loc 2 1487 0
 106 001a 0343     		orrs	r3, r3, r0	@, reg_value, _3, tmp122
 107              	.LVL4:
1490:../cmsiscore/inc/core_cm3.h ****   SCB->AIRCR =  reg_value;
 108              		.loc 2 1490 0
 109 001c D360     		str	r3, [r2, #12]	@ reg_value, MEM[(struct SCB_Type *)3758157056B].AIRCR
 110              	.LVL5:
 111 001e 7047     		bx	lr	@
 112              	.L3:
 113              		.align	2
 114              	.L2:
 115 0020 00ED00E0 		.word	-536810240
 116              	.LBE15:
 117              	.LBE14:
 118              		.cfi_endproc
 119              	.LFE65:
 120              		.size	HAL_NVIC_SetPriorityGrouping, .-HAL_NVIC_SetPriorityGrouping
 121              		.align	1
 122              		.global	HAL_NVIC_SetPriority
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu softvfp
 127              		.type	HAL_NVIC_SetPriority, %function
 128              	HAL_NVIC_SetPriority:
 129              	.LFB66:
 145:src/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
ARM GAS  /tmp/cc4CJeQn.s 			page 32


 146:src/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 147:src/stm32f1xx_hal_cortex.c ****   
 148:src/stm32f1xx_hal_cortex.c ****   /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
 149:src/stm32f1xx_hal_cortex.c ****   NVIC_SetPriorityGrouping(PriorityGroup);
 150:src/stm32f1xx_hal_cortex.c **** }
 151:src/stm32f1xx_hal_cortex.c **** 
 152:src/stm32f1xx_hal_cortex.c **** /**
 153:src/stm32f1xx_hal_cortex.c ****   * @brief  Sets the priority of an interrupt.
 154:src/stm32f1xx_hal_cortex.c ****   * @param  IRQn: External interrupt number.
 155:src/stm32f1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 156:src/stm32f1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 157:src/stm32f1xx_hal_cortex.c ****   * @param  PreemptPriority: The preemption priority for the IRQn channel.
 158:src/stm32f1xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 15
 159:src/stm32f1xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority 
 160:src/stm32f1xx_hal_cortex.c ****   * @param  SubPriority: the subpriority level for the IRQ channel.
 161:src/stm32f1xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 15
 162:src/stm32f1xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority.          
 163:src/stm32f1xx_hal_cortex.c ****   * @retval None
 164:src/stm32f1xx_hal_cortex.c ****   */
 165:src/stm32f1xx_hal_cortex.c **** void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 166:src/stm32f1xx_hal_cortex.c **** { 
 130              		.loc 1 166 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              	.LVL6:
 135              	.LBB22:
 136              	.LBB23:
1491:../cmsiscore/inc/core_cm3.h **** }
1492:../cmsiscore/inc/core_cm3.h **** 
1493:../cmsiscore/inc/core_cm3.h **** 
1494:../cmsiscore/inc/core_cm3.h **** /**
1495:../cmsiscore/inc/core_cm3.h ****   \brief   Get Priority Grouping
1496:../cmsiscore/inc/core_cm3.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1497:../cmsiscore/inc/core_cm3.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1498:../cmsiscore/inc/core_cm3.h ****  */
1499:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1500:../cmsiscore/inc/core_cm3.h **** {
1501:../cmsiscore/inc/core_cm3.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 137              		.loc 2 1501 0
 138 0024 174B     		ldr	r3, .L9	@ tmp137,
 139              	.LBE23:
 140              	.LBE22:
 141              		.loc 1 166 0
 142 0026 30B5     		push	{r4, r5, lr}	@
 143              	.LCFI0:
 144              		.cfi_def_cfa_offset 12
 145              		.cfi_offset 4, -12
 146              		.cfi_offset 5, -8
 147              		.cfi_offset 14, -4
 148              	.LBB25:
 149              	.LBB24:
 150              		.loc 2 1501 0
 151 0028 DC68     		ldr	r4, [r3, #12]	@ _32, MEM[(struct SCB_Type *)3758157056B].AIRCR
 152 002a C4F30224 		ubfx	r4, r4, #8, #3	@ _34, _32,,
 153              	.LVL7:
 154              	.LBE24:
ARM GAS  /tmp/cc4CJeQn.s 			page 33


 155              	.LBE25:
 156              	.LBB26:
 157              	.LBB27:
1502:../cmsiscore/inc/core_cm3.h **** }
1503:../cmsiscore/inc/core_cm3.h **** 
1504:../cmsiscore/inc/core_cm3.h **** 
1505:../cmsiscore/inc/core_cm3.h **** /**
1506:../cmsiscore/inc/core_cm3.h ****   \brief   Enable Interrupt
1507:../cmsiscore/inc/core_cm3.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1508:../cmsiscore/inc/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1509:../cmsiscore/inc/core_cm3.h ****   \note    IRQn must not be negative.
1510:../cmsiscore/inc/core_cm3.h ****  */
1511:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1512:../cmsiscore/inc/core_cm3.h **** {
1513:../cmsiscore/inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1514:../cmsiscore/inc/core_cm3.h ****   {
1515:../cmsiscore/inc/core_cm3.h ****     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1516:../cmsiscore/inc/core_cm3.h ****   }
1517:../cmsiscore/inc/core_cm3.h **** }
1518:../cmsiscore/inc/core_cm3.h **** 
1519:../cmsiscore/inc/core_cm3.h **** 
1520:../cmsiscore/inc/core_cm3.h **** /**
1521:../cmsiscore/inc/core_cm3.h ****   \brief   Get Interrupt Enable status
1522:../cmsiscore/inc/core_cm3.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1523:../cmsiscore/inc/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1524:../cmsiscore/inc/core_cm3.h ****   \return             0  Interrupt is not enabled.
1525:../cmsiscore/inc/core_cm3.h ****   \return             1  Interrupt is enabled.
1526:../cmsiscore/inc/core_cm3.h ****   \note    IRQn must not be negative.
1527:../cmsiscore/inc/core_cm3.h ****  */
1528:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1529:../cmsiscore/inc/core_cm3.h **** {
1530:../cmsiscore/inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1531:../cmsiscore/inc/core_cm3.h ****   {
1532:../cmsiscore/inc/core_cm3.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1533:../cmsiscore/inc/core_cm3.h ****   }
1534:../cmsiscore/inc/core_cm3.h ****   else
1535:../cmsiscore/inc/core_cm3.h ****   {
1536:../cmsiscore/inc/core_cm3.h ****     return(0U);
1537:../cmsiscore/inc/core_cm3.h ****   }
1538:../cmsiscore/inc/core_cm3.h **** }
1539:../cmsiscore/inc/core_cm3.h **** 
1540:../cmsiscore/inc/core_cm3.h **** 
1541:../cmsiscore/inc/core_cm3.h **** /**
1542:../cmsiscore/inc/core_cm3.h ****   \brief   Disable Interrupt
1543:../cmsiscore/inc/core_cm3.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1544:../cmsiscore/inc/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1545:../cmsiscore/inc/core_cm3.h ****   \note    IRQn must not be negative.
1546:../cmsiscore/inc/core_cm3.h ****  */
1547:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1548:../cmsiscore/inc/core_cm3.h **** {
1549:../cmsiscore/inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1550:../cmsiscore/inc/core_cm3.h ****   {
1551:../cmsiscore/inc/core_cm3.h ****     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1552:../cmsiscore/inc/core_cm3.h ****     __DSB();
1553:../cmsiscore/inc/core_cm3.h ****     __ISB();
1554:../cmsiscore/inc/core_cm3.h ****   }
1555:../cmsiscore/inc/core_cm3.h **** }
ARM GAS  /tmp/cc4CJeQn.s 			page 34


1556:../cmsiscore/inc/core_cm3.h **** 
1557:../cmsiscore/inc/core_cm3.h **** 
1558:../cmsiscore/inc/core_cm3.h **** /**
1559:../cmsiscore/inc/core_cm3.h ****   \brief   Get Pending Interrupt
1560:../cmsiscore/inc/core_cm3.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
1561:../cmsiscore/inc/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1562:../cmsiscore/inc/core_cm3.h ****   \return             0  Interrupt status is not pending.
1563:../cmsiscore/inc/core_cm3.h ****   \return             1  Interrupt status is pending.
1564:../cmsiscore/inc/core_cm3.h ****   \note    IRQn must not be negative.
1565:../cmsiscore/inc/core_cm3.h ****  */
1566:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
1567:../cmsiscore/inc/core_cm3.h **** {
1568:../cmsiscore/inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1569:../cmsiscore/inc/core_cm3.h ****   {
1570:../cmsiscore/inc/core_cm3.h ****     return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1571:../cmsiscore/inc/core_cm3.h ****   }
1572:../cmsiscore/inc/core_cm3.h ****   else
1573:../cmsiscore/inc/core_cm3.h ****   {
1574:../cmsiscore/inc/core_cm3.h ****     return(0U);
1575:../cmsiscore/inc/core_cm3.h ****   }
1576:../cmsiscore/inc/core_cm3.h **** }
1577:../cmsiscore/inc/core_cm3.h **** 
1578:../cmsiscore/inc/core_cm3.h **** 
1579:../cmsiscore/inc/core_cm3.h **** /**
1580:../cmsiscore/inc/core_cm3.h ****   \brief   Set Pending Interrupt
1581:../cmsiscore/inc/core_cm3.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
1582:../cmsiscore/inc/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1583:../cmsiscore/inc/core_cm3.h ****   \note    IRQn must not be negative.
1584:../cmsiscore/inc/core_cm3.h ****  */
1585:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
1586:../cmsiscore/inc/core_cm3.h **** {
1587:../cmsiscore/inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1588:../cmsiscore/inc/core_cm3.h ****   {
1589:../cmsiscore/inc/core_cm3.h ****     NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1590:../cmsiscore/inc/core_cm3.h ****   }
1591:../cmsiscore/inc/core_cm3.h **** }
1592:../cmsiscore/inc/core_cm3.h **** 
1593:../cmsiscore/inc/core_cm3.h **** 
1594:../cmsiscore/inc/core_cm3.h **** /**
1595:../cmsiscore/inc/core_cm3.h ****   \brief   Clear Pending Interrupt
1596:../cmsiscore/inc/core_cm3.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
1597:../cmsiscore/inc/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1598:../cmsiscore/inc/core_cm3.h ****   \note    IRQn must not be negative.
1599:../cmsiscore/inc/core_cm3.h ****  */
1600:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1601:../cmsiscore/inc/core_cm3.h **** {
1602:../cmsiscore/inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1603:../cmsiscore/inc/core_cm3.h ****   {
1604:../cmsiscore/inc/core_cm3.h ****     NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1605:../cmsiscore/inc/core_cm3.h ****   }
1606:../cmsiscore/inc/core_cm3.h **** }
1607:../cmsiscore/inc/core_cm3.h **** 
1608:../cmsiscore/inc/core_cm3.h **** 
1609:../cmsiscore/inc/core_cm3.h **** /**
1610:../cmsiscore/inc/core_cm3.h ****   \brief   Get Active Interrupt
1611:../cmsiscore/inc/core_cm3.h ****   \details Reads the active register in the NVIC and returns the active bit for the device specific
1612:../cmsiscore/inc/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
ARM GAS  /tmp/cc4CJeQn.s 			page 35


1613:../cmsiscore/inc/core_cm3.h ****   \return             0  Interrupt status is not active.
1614:../cmsiscore/inc/core_cm3.h ****   \return             1  Interrupt status is active.
1615:../cmsiscore/inc/core_cm3.h ****   \note    IRQn must not be negative.
1616:../cmsiscore/inc/core_cm3.h ****  */
1617:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
1618:../cmsiscore/inc/core_cm3.h **** {
1619:../cmsiscore/inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1620:../cmsiscore/inc/core_cm3.h ****   {
1621:../cmsiscore/inc/core_cm3.h ****     return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1622:../cmsiscore/inc/core_cm3.h ****   }
1623:../cmsiscore/inc/core_cm3.h ****   else
1624:../cmsiscore/inc/core_cm3.h ****   {
1625:../cmsiscore/inc/core_cm3.h ****     return(0U);
1626:../cmsiscore/inc/core_cm3.h ****   }
1627:../cmsiscore/inc/core_cm3.h **** }
1628:../cmsiscore/inc/core_cm3.h **** 
1629:../cmsiscore/inc/core_cm3.h **** 
1630:../cmsiscore/inc/core_cm3.h **** /**
1631:../cmsiscore/inc/core_cm3.h ****   \brief   Set Interrupt Priority
1632:../cmsiscore/inc/core_cm3.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
1633:../cmsiscore/inc/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1634:../cmsiscore/inc/core_cm3.h ****            or negative to specify a processor exception.
1635:../cmsiscore/inc/core_cm3.h ****   \param [in]      IRQn  Interrupt number.
1636:../cmsiscore/inc/core_cm3.h ****   \param [in]  priority  Priority to set.
1637:../cmsiscore/inc/core_cm3.h ****   \note    The priority cannot be set for every processor exception.
1638:../cmsiscore/inc/core_cm3.h ****  */
1639:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1640:../cmsiscore/inc/core_cm3.h **** {
1641:../cmsiscore/inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1642:../cmsiscore/inc/core_cm3.h ****   {
1643:../cmsiscore/inc/core_cm3.h ****     NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1644:../cmsiscore/inc/core_cm3.h ****   }
1645:../cmsiscore/inc/core_cm3.h ****   else
1646:../cmsiscore/inc/core_cm3.h ****   {
1647:../cmsiscore/inc/core_cm3.h ****     SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1648:../cmsiscore/inc/core_cm3.h ****   }
1649:../cmsiscore/inc/core_cm3.h **** }
1650:../cmsiscore/inc/core_cm3.h **** 
1651:../cmsiscore/inc/core_cm3.h **** 
1652:../cmsiscore/inc/core_cm3.h **** /**
1653:../cmsiscore/inc/core_cm3.h ****   \brief   Get Interrupt Priority
1654:../cmsiscore/inc/core_cm3.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
1655:../cmsiscore/inc/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1656:../cmsiscore/inc/core_cm3.h ****            or negative to specify a processor exception.
1657:../cmsiscore/inc/core_cm3.h ****   \param [in]   IRQn  Interrupt number.
1658:../cmsiscore/inc/core_cm3.h ****   \return             Interrupt Priority.
1659:../cmsiscore/inc/core_cm3.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1660:../cmsiscore/inc/core_cm3.h ****  */
1661:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
1662:../cmsiscore/inc/core_cm3.h **** {
1663:../cmsiscore/inc/core_cm3.h **** 
1664:../cmsiscore/inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1665:../cmsiscore/inc/core_cm3.h ****   {
1666:../cmsiscore/inc/core_cm3.h ****     return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
1667:../cmsiscore/inc/core_cm3.h ****   }
1668:../cmsiscore/inc/core_cm3.h ****   else
1669:../cmsiscore/inc/core_cm3.h ****   {
ARM GAS  /tmp/cc4CJeQn.s 			page 36


1670:../cmsiscore/inc/core_cm3.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
1671:../cmsiscore/inc/core_cm3.h ****   }
1672:../cmsiscore/inc/core_cm3.h **** }
1673:../cmsiscore/inc/core_cm3.h **** 
1674:../cmsiscore/inc/core_cm3.h **** 
1675:../cmsiscore/inc/core_cm3.h **** /**
1676:../cmsiscore/inc/core_cm3.h ****   \brief   Encode Priority
1677:../cmsiscore/inc/core_cm3.h ****   \details Encodes the priority for an interrupt with the given priority group,
1678:../cmsiscore/inc/core_cm3.h ****            preemptive priority value, and subpriority value.
1679:../cmsiscore/inc/core_cm3.h ****            In case of a conflict between priority grouping and available
1680:../cmsiscore/inc/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1681:../cmsiscore/inc/core_cm3.h ****   \param [in]     PriorityGroup  Used priority group.
1682:../cmsiscore/inc/core_cm3.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1683:../cmsiscore/inc/core_cm3.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1684:../cmsiscore/inc/core_cm3.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1685:../cmsiscore/inc/core_cm3.h ****  */
1686:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1687:../cmsiscore/inc/core_cm3.h **** {
1688:../cmsiscore/inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1689:../cmsiscore/inc/core_cm3.h ****   uint32_t PreemptPriorityBits;
1690:../cmsiscore/inc/core_cm3.h ****   uint32_t SubPriorityBits;
1691:../cmsiscore/inc/core_cm3.h **** 
1692:../cmsiscore/inc/core_cm3.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 158              		.loc 2 1692 0
 159 002e C4F10703 		rsb	r3, r4, #7	@ PreemptPriorityBits, _34,
1693:../cmsiscore/inc/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 160              		.loc 2 1693 0
 161 0032 251D     		adds	r5, r4, #4	@ tmp139, _34,
1692:../cmsiscore/inc/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 162              		.loc 2 1692 0
 163 0034 042B     		cmp	r3, #4	@ PreemptPriorityBits,
 164 0036 28BF     		it	cs
 165 0038 0423     		movcs	r3, #4	@ PreemptPriorityBits,
 166              	.LVL8:
 167              		.loc 2 1693 0
 168 003a 062D     		cmp	r5, #6	@ tmp139,
1694:../cmsiscore/inc/core_cm3.h **** 
1695:../cmsiscore/inc/core_cm3.h ****   return (
1696:../cmsiscore/inc/core_cm3.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 169              		.loc 2 1696 0
 170 003c 4FF00105 		mov	r5, #1	@ tmp141,
1693:../cmsiscore/inc/core_cm3.h **** 
 171              		.loc 2 1693 0
 172 0040 98BF     		it	ls
 173 0042 0024     		movls	r4, #0	@ iftmp.0_26,
 174              	.LVL9:
 175              		.loc 2 1696 0
 176 0044 05FA03F3 		lsl	r3, r5, r3	@ tmp140, tmp141, PreemptPriorityBits
 177              	.LVL10:
 178 0048 03F1FF33 		add	r3, r3, #-1	@ tmp142, tmp140,
1693:../cmsiscore/inc/core_cm3.h **** 
 179              		.loc 2 1693 0
 180 004c 88BF     		it	hi
 181 004e 033C     		subhi	r4, r4, #3	@ iftmp.0_26, _34,
 182              	.LVL11:
 183              		.loc 2 1696 0
 184 0050 1940     		ands	r1, r1, r3	@, tmp143, PreemptPriority, tmp142
ARM GAS  /tmp/cc4CJeQn.s 			page 37


 185              	.LVL12:
 186 0052 A140     		lsls	r1, r1, r4	@ tmp144, tmp143, iftmp.0_26
1697:../cmsiscore/inc/core_cm3.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 187              		.loc 2 1697 0
 188 0054 05FA04F4 		lsl	r4, r5, r4	@ tmp145, tmp141, iftmp.0_26
 189              	.LVL13:
 190 0058 013C     		subs	r4, r4, #1	@ tmp147, tmp145,
 191 005a 2240     		ands	r2, r2, r4	@, tmp148, SubPriority, tmp147
 192              	.LVL14:
 193              	.LBE27:
 194              	.LBE26:
 195              	.LBB29:
 196              	.LBB30:
1641:../cmsiscore/inc/core_cm3.h ****   {
 197              		.loc 2 1641 0
 198 005c 0028     		cmp	r0, #0	@ IRQn,
 199              	.LBE30:
 200              	.LBE29:
 201              	.LBB32:
 202              	.LBB28:
1696:../cmsiscore/inc/core_cm3.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 203              		.loc 2 1696 0
 204 005e 42EA0102 		orr	r2, r2, r1	@ _31, tmp148, tmp144
 205              	.LVL15:
 206 0062 4FEA0212 		lsl	r2, r2, #4	@ tmp162, _31,
 207              	.LBE28:
 208              	.LBE32:
 209              	.LBB33:
 210              	.LBB31:
1643:../cmsiscore/inc/core_cm3.h ****   }
 211              		.loc 2 1643 0
 212 0066 A9BF     		itett	ge
 213 0068 00F16040 		addge	r0, r0, #-536870912	@ tmp152, IRQn,
 214              	.LVL16:
1647:../cmsiscore/inc/core_cm3.h ****   }
 215              		.loc 2 1647 0
 216 006c 064B     		ldrlt	r3, .L9+4	@ tmp160,
1643:../cmsiscore/inc/core_cm3.h ****   }
 217              		.loc 2 1643 0
 218 006e D2B2     		uxtbge	r2, r2	@ _11, tmp162
 219 0070 00F56140 		addge	r0, r0, #57600	@ tmp152, tmp152,
1647:../cmsiscore/inc/core_cm3.h ****   }
 220              		.loc 2 1647 0
 221 0074 BBBF     		ittet	lt
 222 0076 00F00F00 		andlt	r0, r0, #15	@ tmp156, IRQn,
 223 007a D2B2     		uxtblt	r2, r2	@ _17, tmp162
1643:../cmsiscore/inc/core_cm3.h ****   }
 224              		.loc 2 1643 0
 225 007c 80F80023 		strbge	r2, [r0, #768]	@ _11, MEM[(struct NVIC_Type *)3758153984B].IP
1647:../cmsiscore/inc/core_cm3.h ****   }
 226              		.loc 2 1647 0
 227 0080 1A54     		strblt	r2, [r3, r0]	@ _17, MEM[(struct SCB_Type *)3758157056B].SHP
 228              	.LVL17:
 229 0082 30BD     		pop	{r4, r5, pc}	@
 230              	.L10:
 231              		.align	2
 232              	.L9:
ARM GAS  /tmp/cc4CJeQn.s 			page 38


 233 0084 00ED00E0 		.word	-536810240
 234 0088 14ED00E0 		.word	-536810220
 235              	.LBE31:
 236              	.LBE33:
 237              		.cfi_endproc
 238              	.LFE66:
 239              		.size	HAL_NVIC_SetPriority, .-HAL_NVIC_SetPriority
 240              		.align	1
 241              		.global	HAL_NVIC_EnableIRQ
 242              		.syntax unified
 243              		.thumb
 244              		.thumb_func
 245              		.fpu softvfp
 246              		.type	HAL_NVIC_EnableIRQ, %function
 247              	HAL_NVIC_EnableIRQ:
 248              	.LFB67:
 167:src/stm32f1xx_hal_cortex.c ****   uint32_t prioritygroup = 0x00U;
 168:src/stm32f1xx_hal_cortex.c ****   
 169:src/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 170:src/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 171:src/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 172:src/stm32f1xx_hal_cortex.c ****   
 173:src/stm32f1xx_hal_cortex.c ****   prioritygroup = NVIC_GetPriorityGrouping();
 174:src/stm32f1xx_hal_cortex.c ****   
 175:src/stm32f1xx_hal_cortex.c ****   NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 176:src/stm32f1xx_hal_cortex.c **** }
 177:src/stm32f1xx_hal_cortex.c **** 
 178:src/stm32f1xx_hal_cortex.c **** /**
 179:src/stm32f1xx_hal_cortex.c ****   * @brief  Enables a device specific interrupt in the NVIC interrupt controller.
 180:src/stm32f1xx_hal_cortex.c ****   * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
 181:src/stm32f1xx_hal_cortex.c ****   *         function should be called before. 
 182:src/stm32f1xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 183:src/stm32f1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 184:src/stm32f1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 185:src/stm32f1xx_hal_cortex.c ****   * @retval None
 186:src/stm32f1xx_hal_cortex.c ****   */
 187:src/stm32f1xx_hal_cortex.c **** void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
 188:src/stm32f1xx_hal_cortex.c **** {
 249              		.loc 1 188 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              		@ link register save eliminated.
 254              	.LVL18:
 255              	.LBB36:
 256              	.LBB37:
1513:../cmsiscore/inc/core_cm3.h ****   {
 257              		.loc 2 1513 0
 258 008c 0028     		cmp	r0, #0	@ IRQn
 259              	.LVL19:
 260 008e 08DB     		blt	.L11	@,
1515:../cmsiscore/inc/core_cm3.h ****   }
 261              		.loc 2 1515 0
 262 0090 0123     		movs	r3, #1	@ tmp120,
 263 0092 4209     		lsrs	r2, r0, #5	@ _5, IRQn,
 264 0094 00F01F00 		and	r0, r0, #31	@ tmp119, IRQn,
 265 0098 03FA00F0 		lsl	r0, r3, r0	@ _9, tmp120, tmp119
ARM GAS  /tmp/cc4CJeQn.s 			page 39


 266 009c 014B     		ldr	r3, .L13	@ tmp121,
 267 009e 43F82200 		str	r0, [r3, r2, lsl #2]	@ _9, MEM[(struct NVIC_Type *)3758153984B].ISER
 268              	.LVL20:
 269              	.L11:
 270 00a2 7047     		bx	lr	@
 271              	.L14:
 272              		.align	2
 273              	.L13:
 274 00a4 00E100E0 		.word	-536813312
 275              	.LBE37:
 276              	.LBE36:
 277              		.cfi_endproc
 278              	.LFE67:
 279              		.size	HAL_NVIC_EnableIRQ, .-HAL_NVIC_EnableIRQ
 280              		.align	1
 281              		.global	HAL_NVIC_DisableIRQ
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu softvfp
 286              		.type	HAL_NVIC_DisableIRQ, %function
 287              	HAL_NVIC_DisableIRQ:
 288              	.LFB68:
 189:src/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 190:src/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 191:src/stm32f1xx_hal_cortex.c **** 
 192:src/stm32f1xx_hal_cortex.c ****   /* Enable interrupt */
 193:src/stm32f1xx_hal_cortex.c ****   NVIC_EnableIRQ(IRQn);
 194:src/stm32f1xx_hal_cortex.c **** }
 195:src/stm32f1xx_hal_cortex.c **** 
 196:src/stm32f1xx_hal_cortex.c **** /**
 197:src/stm32f1xx_hal_cortex.c ****   * @brief  Disables a device specific interrupt in the NVIC interrupt controller.
 198:src/stm32f1xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 199:src/stm32f1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 200:src/stm32f1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 201:src/stm32f1xx_hal_cortex.c ****   * @retval None
 202:src/stm32f1xx_hal_cortex.c ****   */
 203:src/stm32f1xx_hal_cortex.c **** void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
 204:src/stm32f1xx_hal_cortex.c **** {
 289              		.loc 1 204 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293              		@ link register save eliminated.
 294              	.LVL21:
 295              	.LBB44:
 296              	.LBB45:
1549:../cmsiscore/inc/core_cm3.h ****   {
 297              		.loc 2 1549 0
 298 00a8 0028     		cmp	r0, #0	@ IRQn
 299              	.LVL22:
 300 00aa 0DDB     		blt	.L15	@,
1551:../cmsiscore/inc/core_cm3.h ****     __DSB();
 301              		.loc 2 1551 0
 302 00ac 0122     		movs	r2, #1	@ tmp120,
 303 00ae 4309     		lsrs	r3, r0, #5	@ _5, IRQn,
 304 00b0 00F01F00 		and	r0, r0, #31	@ tmp119, IRQn,
ARM GAS  /tmp/cc4CJeQn.s 			page 40


 305 00b4 02FA00F0 		lsl	r0, r2, r0	@ _9, tmp120, tmp119
 306 00b8 044A     		ldr	r2, .L17	@ tmp121,
 307 00ba 2033     		adds	r3, r3, #32	@ tmp122, _5,
 308 00bc 42F82300 		str	r0, [r2, r3, lsl #2]	@ _9, MEM[(struct NVIC_Type *)3758153984B].ICER
 309              	.LBB46:
 310              	.LBB47:
 311              		.file 3 "../cmsiscore/inc/cmsis_gcc.h"
   1:../cmsiscore/inc/cmsis_gcc.h **** /**************************************************************************//**
   2:../cmsiscore/inc/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../cmsiscore/inc/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../cmsiscore/inc/cmsis_gcc.h ****  * @version  V5.0.4
   5:../cmsiscore/inc/cmsis_gcc.h ****  * @date     09. April 2018
   6:../cmsiscore/inc/cmsis_gcc.h ****  ******************************************************************************/
   7:../cmsiscore/inc/cmsis_gcc.h **** /*
   8:../cmsiscore/inc/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:../cmsiscore/inc/cmsis_gcc.h ****  *
  10:../cmsiscore/inc/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../cmsiscore/inc/cmsis_gcc.h ****  *
  12:../cmsiscore/inc/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../cmsiscore/inc/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../cmsiscore/inc/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../cmsiscore/inc/cmsis_gcc.h ****  *
  16:../cmsiscore/inc/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../cmsiscore/inc/cmsis_gcc.h ****  *
  18:../cmsiscore/inc/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../cmsiscore/inc/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../cmsiscore/inc/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../cmsiscore/inc/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../cmsiscore/inc/cmsis_gcc.h ****  * limitations under the License.
  23:../cmsiscore/inc/cmsis_gcc.h ****  */
  24:../cmsiscore/inc/cmsis_gcc.h **** 
  25:../cmsiscore/inc/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../cmsiscore/inc/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../cmsiscore/inc/cmsis_gcc.h **** 
  28:../cmsiscore/inc/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../cmsiscore/inc/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../cmsiscore/inc/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../cmsiscore/inc/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../cmsiscore/inc/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../cmsiscore/inc/cmsis_gcc.h **** 
  34:../cmsiscore/inc/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../cmsiscore/inc/cmsis_gcc.h **** #ifndef __has_builtin
  36:../cmsiscore/inc/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../cmsiscore/inc/cmsis_gcc.h **** #endif
  38:../cmsiscore/inc/cmsis_gcc.h **** 
  39:../cmsiscore/inc/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __ASM
  41:../cmsiscore/inc/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../cmsiscore/inc/cmsis_gcc.h **** #endif
  43:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __INLINE
  44:../cmsiscore/inc/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../cmsiscore/inc/cmsis_gcc.h **** #endif
  46:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../cmsiscore/inc/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../cmsiscore/inc/cmsis_gcc.h **** #endif
  49:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:../cmsiscore/inc/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
ARM GAS  /tmp/cc4CJeQn.s 			page 41


  51:../cmsiscore/inc/cmsis_gcc.h **** #endif                                           
  52:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:../cmsiscore/inc/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:../cmsiscore/inc/cmsis_gcc.h **** #endif
  55:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __USED
  56:../cmsiscore/inc/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:../cmsiscore/inc/cmsis_gcc.h **** #endif
  58:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __WEAK
  59:../cmsiscore/inc/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:../cmsiscore/inc/cmsis_gcc.h **** #endif
  61:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __PACKED
  62:../cmsiscore/inc/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:../cmsiscore/inc/cmsis_gcc.h **** #endif
  64:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:../cmsiscore/inc/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:../cmsiscore/inc/cmsis_gcc.h **** #endif
  67:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:../cmsiscore/inc/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:../cmsiscore/inc/cmsis_gcc.h **** #endif
  70:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:../cmsiscore/inc/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:../cmsiscore/inc/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:../cmsiscore/inc/cmsis_gcc.h **** #endif
  78:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:../cmsiscore/inc/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:../cmsiscore/inc/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:../cmsiscore/inc/cmsis_gcc.h **** #endif
  86:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:../cmsiscore/inc/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:../cmsiscore/inc/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:../cmsiscore/inc/cmsis_gcc.h **** #endif
  94:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:../cmsiscore/inc/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:../cmsiscore/inc/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:../cmsiscore/inc/cmsis_gcc.h **** #endif
 102:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:../cmsiscore/inc/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/cc4CJeQn.s 			page 42


 108:../cmsiscore/inc/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:../cmsiscore/inc/cmsis_gcc.h **** #endif
 110:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:../cmsiscore/inc/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:../cmsiscore/inc/cmsis_gcc.h **** #endif
 113:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:../cmsiscore/inc/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:../cmsiscore/inc/cmsis_gcc.h **** #endif
 116:../cmsiscore/inc/cmsis_gcc.h **** 
 117:../cmsiscore/inc/cmsis_gcc.h **** 
 118:../cmsiscore/inc/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:../cmsiscore/inc/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:../cmsiscore/inc/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:../cmsiscore/inc/cmsis_gcc.h ****   @{
 122:../cmsiscore/inc/cmsis_gcc.h ****  */
 123:../cmsiscore/inc/cmsis_gcc.h **** 
 124:../cmsiscore/inc/cmsis_gcc.h **** /**
 125:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:../cmsiscore/inc/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:../cmsiscore/inc/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:../cmsiscore/inc/cmsis_gcc.h ****  */
 129:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:../cmsiscore/inc/cmsis_gcc.h **** {
 131:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:../cmsiscore/inc/cmsis_gcc.h **** }
 133:../cmsiscore/inc/cmsis_gcc.h **** 
 134:../cmsiscore/inc/cmsis_gcc.h **** 
 135:../cmsiscore/inc/cmsis_gcc.h **** /**
 136:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:../cmsiscore/inc/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:../cmsiscore/inc/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:../cmsiscore/inc/cmsis_gcc.h ****  */
 140:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:../cmsiscore/inc/cmsis_gcc.h **** {
 142:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:../cmsiscore/inc/cmsis_gcc.h **** }
 144:../cmsiscore/inc/cmsis_gcc.h **** 
 145:../cmsiscore/inc/cmsis_gcc.h **** 
 146:../cmsiscore/inc/cmsis_gcc.h **** /**
 147:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Control Register
 148:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:../cmsiscore/inc/cmsis_gcc.h ****   \return               Control Register value
 150:../cmsiscore/inc/cmsis_gcc.h ****  */
 151:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:../cmsiscore/inc/cmsis_gcc.h **** {
 153:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 154:../cmsiscore/inc/cmsis_gcc.h **** 
 155:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 157:../cmsiscore/inc/cmsis_gcc.h **** }
 158:../cmsiscore/inc/cmsis_gcc.h **** 
 159:../cmsiscore/inc/cmsis_gcc.h **** 
 160:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:../cmsiscore/inc/cmsis_gcc.h **** /**
 162:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:../cmsiscore/inc/cmsis_gcc.h ****   \return               non-secure Control Register value
ARM GAS  /tmp/cc4CJeQn.s 			page 43


 165:../cmsiscore/inc/cmsis_gcc.h ****  */
 166:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:../cmsiscore/inc/cmsis_gcc.h **** {
 168:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 169:../cmsiscore/inc/cmsis_gcc.h **** 
 170:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 172:../cmsiscore/inc/cmsis_gcc.h **** }
 173:../cmsiscore/inc/cmsis_gcc.h **** #endif
 174:../cmsiscore/inc/cmsis_gcc.h **** 
 175:../cmsiscore/inc/cmsis_gcc.h **** 
 176:../cmsiscore/inc/cmsis_gcc.h **** /**
 177:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Control Register
 178:../cmsiscore/inc/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:../cmsiscore/inc/cmsis_gcc.h ****  */
 181:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:../cmsiscore/inc/cmsis_gcc.h **** {
 183:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:../cmsiscore/inc/cmsis_gcc.h **** }
 185:../cmsiscore/inc/cmsis_gcc.h **** 
 186:../cmsiscore/inc/cmsis_gcc.h **** 
 187:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:../cmsiscore/inc/cmsis_gcc.h **** /**
 189:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:../cmsiscore/inc/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:../cmsiscore/inc/cmsis_gcc.h ****  */
 193:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:../cmsiscore/inc/cmsis_gcc.h **** {
 195:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:../cmsiscore/inc/cmsis_gcc.h **** }
 197:../cmsiscore/inc/cmsis_gcc.h **** #endif
 198:../cmsiscore/inc/cmsis_gcc.h **** 
 199:../cmsiscore/inc/cmsis_gcc.h **** 
 200:../cmsiscore/inc/cmsis_gcc.h **** /**
 201:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:../cmsiscore/inc/cmsis_gcc.h ****   \return               IPSR Register value
 204:../cmsiscore/inc/cmsis_gcc.h ****  */
 205:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:../cmsiscore/inc/cmsis_gcc.h **** {
 207:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 208:../cmsiscore/inc/cmsis_gcc.h **** 
 209:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 211:../cmsiscore/inc/cmsis_gcc.h **** }
 212:../cmsiscore/inc/cmsis_gcc.h **** 
 213:../cmsiscore/inc/cmsis_gcc.h **** 
 214:../cmsiscore/inc/cmsis_gcc.h **** /**
 215:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get APSR Register
 216:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:../cmsiscore/inc/cmsis_gcc.h ****   \return               APSR Register value
 218:../cmsiscore/inc/cmsis_gcc.h ****  */
 219:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:../cmsiscore/inc/cmsis_gcc.h **** {
 221:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/cc4CJeQn.s 			page 44


 222:../cmsiscore/inc/cmsis_gcc.h **** 
 223:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 225:../cmsiscore/inc/cmsis_gcc.h **** }
 226:../cmsiscore/inc/cmsis_gcc.h **** 
 227:../cmsiscore/inc/cmsis_gcc.h **** 
 228:../cmsiscore/inc/cmsis_gcc.h **** /**
 229:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:../cmsiscore/inc/cmsis_gcc.h ****   \return               xPSR Register value
 232:../cmsiscore/inc/cmsis_gcc.h ****  */
 233:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:../cmsiscore/inc/cmsis_gcc.h **** {
 235:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 236:../cmsiscore/inc/cmsis_gcc.h **** 
 237:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 239:../cmsiscore/inc/cmsis_gcc.h **** }
 240:../cmsiscore/inc/cmsis_gcc.h **** 
 241:../cmsiscore/inc/cmsis_gcc.h **** 
 242:../cmsiscore/inc/cmsis_gcc.h **** /**
 243:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:../cmsiscore/inc/cmsis_gcc.h ****   \return               PSP Register value
 246:../cmsiscore/inc/cmsis_gcc.h ****  */
 247:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:../cmsiscore/inc/cmsis_gcc.h **** {
 249:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 250:../cmsiscore/inc/cmsis_gcc.h **** 
 251:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 253:../cmsiscore/inc/cmsis_gcc.h **** }
 254:../cmsiscore/inc/cmsis_gcc.h **** 
 255:../cmsiscore/inc/cmsis_gcc.h **** 
 256:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:../cmsiscore/inc/cmsis_gcc.h **** /**
 258:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:../cmsiscore/inc/cmsis_gcc.h ****   \return               PSP Register value
 261:../cmsiscore/inc/cmsis_gcc.h ****  */
 262:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:../cmsiscore/inc/cmsis_gcc.h **** {
 264:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 265:../cmsiscore/inc/cmsis_gcc.h **** 
 266:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 268:../cmsiscore/inc/cmsis_gcc.h **** }
 269:../cmsiscore/inc/cmsis_gcc.h **** #endif
 270:../cmsiscore/inc/cmsis_gcc.h **** 
 271:../cmsiscore/inc/cmsis_gcc.h **** 
 272:../cmsiscore/inc/cmsis_gcc.h **** /**
 273:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:../cmsiscore/inc/cmsis_gcc.h ****  */
 277:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:../cmsiscore/inc/cmsis_gcc.h **** {
ARM GAS  /tmp/cc4CJeQn.s 			page 45


 279:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:../cmsiscore/inc/cmsis_gcc.h **** }
 281:../cmsiscore/inc/cmsis_gcc.h **** 
 282:../cmsiscore/inc/cmsis_gcc.h **** 
 283:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:../cmsiscore/inc/cmsis_gcc.h **** /**
 285:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:../cmsiscore/inc/cmsis_gcc.h ****  */
 289:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:../cmsiscore/inc/cmsis_gcc.h **** {
 291:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:../cmsiscore/inc/cmsis_gcc.h **** }
 293:../cmsiscore/inc/cmsis_gcc.h **** #endif
 294:../cmsiscore/inc/cmsis_gcc.h **** 
 295:../cmsiscore/inc/cmsis_gcc.h **** 
 296:../cmsiscore/inc/cmsis_gcc.h **** /**
 297:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:../cmsiscore/inc/cmsis_gcc.h ****   \return               MSP Register value
 300:../cmsiscore/inc/cmsis_gcc.h ****  */
 301:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:../cmsiscore/inc/cmsis_gcc.h **** {
 303:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 304:../cmsiscore/inc/cmsis_gcc.h **** 
 305:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 307:../cmsiscore/inc/cmsis_gcc.h **** }
 308:../cmsiscore/inc/cmsis_gcc.h **** 
 309:../cmsiscore/inc/cmsis_gcc.h **** 
 310:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:../cmsiscore/inc/cmsis_gcc.h **** /**
 312:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:../cmsiscore/inc/cmsis_gcc.h ****   \return               MSP Register value
 315:../cmsiscore/inc/cmsis_gcc.h ****  */
 316:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:../cmsiscore/inc/cmsis_gcc.h **** {
 318:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 319:../cmsiscore/inc/cmsis_gcc.h **** 
 320:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 322:../cmsiscore/inc/cmsis_gcc.h **** }
 323:../cmsiscore/inc/cmsis_gcc.h **** #endif
 324:../cmsiscore/inc/cmsis_gcc.h **** 
 325:../cmsiscore/inc/cmsis_gcc.h **** 
 326:../cmsiscore/inc/cmsis_gcc.h **** /**
 327:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:../cmsiscore/inc/cmsis_gcc.h ****  */
 331:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:../cmsiscore/inc/cmsis_gcc.h **** {
 333:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:../cmsiscore/inc/cmsis_gcc.h **** }
 335:../cmsiscore/inc/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4CJeQn.s 			page 46


 336:../cmsiscore/inc/cmsis_gcc.h **** 
 337:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:../cmsiscore/inc/cmsis_gcc.h **** /**
 339:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:../cmsiscore/inc/cmsis_gcc.h ****  */
 343:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:../cmsiscore/inc/cmsis_gcc.h **** {
 345:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:../cmsiscore/inc/cmsis_gcc.h **** }
 347:../cmsiscore/inc/cmsis_gcc.h **** #endif
 348:../cmsiscore/inc/cmsis_gcc.h **** 
 349:../cmsiscore/inc/cmsis_gcc.h **** 
 350:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:../cmsiscore/inc/cmsis_gcc.h **** /**
 352:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:../cmsiscore/inc/cmsis_gcc.h ****   \return               SP Register value
 355:../cmsiscore/inc/cmsis_gcc.h ****  */
 356:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:../cmsiscore/inc/cmsis_gcc.h **** {
 358:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 359:../cmsiscore/inc/cmsis_gcc.h **** 
 360:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 362:../cmsiscore/inc/cmsis_gcc.h **** }
 363:../cmsiscore/inc/cmsis_gcc.h **** 
 364:../cmsiscore/inc/cmsis_gcc.h **** 
 365:../cmsiscore/inc/cmsis_gcc.h **** /**
 366:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:../cmsiscore/inc/cmsis_gcc.h ****  */
 370:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:../cmsiscore/inc/cmsis_gcc.h **** {
 372:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:../cmsiscore/inc/cmsis_gcc.h **** }
 374:../cmsiscore/inc/cmsis_gcc.h **** #endif
 375:../cmsiscore/inc/cmsis_gcc.h **** 
 376:../cmsiscore/inc/cmsis_gcc.h **** 
 377:../cmsiscore/inc/cmsis_gcc.h **** /**
 378:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:../cmsiscore/inc/cmsis_gcc.h ****   \return               Priority Mask value
 381:../cmsiscore/inc/cmsis_gcc.h ****  */
 382:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:../cmsiscore/inc/cmsis_gcc.h **** {
 384:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 385:../cmsiscore/inc/cmsis_gcc.h **** 
 386:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 388:../cmsiscore/inc/cmsis_gcc.h **** }
 389:../cmsiscore/inc/cmsis_gcc.h **** 
 390:../cmsiscore/inc/cmsis_gcc.h **** 
 391:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:../cmsiscore/inc/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc4CJeQn.s 			page 47


 393:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:../cmsiscore/inc/cmsis_gcc.h ****   \return               Priority Mask value
 396:../cmsiscore/inc/cmsis_gcc.h ****  */
 397:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:../cmsiscore/inc/cmsis_gcc.h **** {
 399:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 400:../cmsiscore/inc/cmsis_gcc.h **** 
 401:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 403:../cmsiscore/inc/cmsis_gcc.h **** }
 404:../cmsiscore/inc/cmsis_gcc.h **** #endif
 405:../cmsiscore/inc/cmsis_gcc.h **** 
 406:../cmsiscore/inc/cmsis_gcc.h **** 
 407:../cmsiscore/inc/cmsis_gcc.h **** /**
 408:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:../cmsiscore/inc/cmsis_gcc.h ****  */
 412:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:../cmsiscore/inc/cmsis_gcc.h **** {
 414:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:../cmsiscore/inc/cmsis_gcc.h **** }
 416:../cmsiscore/inc/cmsis_gcc.h **** 
 417:../cmsiscore/inc/cmsis_gcc.h **** 
 418:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:../cmsiscore/inc/cmsis_gcc.h **** /**
 420:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:../cmsiscore/inc/cmsis_gcc.h ****  */
 424:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:../cmsiscore/inc/cmsis_gcc.h **** {
 426:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:../cmsiscore/inc/cmsis_gcc.h **** }
 428:../cmsiscore/inc/cmsis_gcc.h **** #endif
 429:../cmsiscore/inc/cmsis_gcc.h **** 
 430:../cmsiscore/inc/cmsis_gcc.h **** 
 431:../cmsiscore/inc/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:../cmsiscore/inc/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:../cmsiscore/inc/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:../cmsiscore/inc/cmsis_gcc.h **** /**
 435:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Enable FIQ
 436:../cmsiscore/inc/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:../cmsiscore/inc/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:../cmsiscore/inc/cmsis_gcc.h ****  */
 439:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:../cmsiscore/inc/cmsis_gcc.h **** {
 441:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:../cmsiscore/inc/cmsis_gcc.h **** }
 443:../cmsiscore/inc/cmsis_gcc.h **** 
 444:../cmsiscore/inc/cmsis_gcc.h **** 
 445:../cmsiscore/inc/cmsis_gcc.h **** /**
 446:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Disable FIQ
 447:../cmsiscore/inc/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:../cmsiscore/inc/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:../cmsiscore/inc/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc4CJeQn.s 			page 48


 450:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:../cmsiscore/inc/cmsis_gcc.h **** {
 452:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:../cmsiscore/inc/cmsis_gcc.h **** }
 454:../cmsiscore/inc/cmsis_gcc.h **** 
 455:../cmsiscore/inc/cmsis_gcc.h **** 
 456:../cmsiscore/inc/cmsis_gcc.h **** /**
 457:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Base Priority
 458:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:../cmsiscore/inc/cmsis_gcc.h ****   \return               Base Priority register value
 460:../cmsiscore/inc/cmsis_gcc.h ****  */
 461:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:../cmsiscore/inc/cmsis_gcc.h **** {
 463:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 464:../cmsiscore/inc/cmsis_gcc.h **** 
 465:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 467:../cmsiscore/inc/cmsis_gcc.h **** }
 468:../cmsiscore/inc/cmsis_gcc.h **** 
 469:../cmsiscore/inc/cmsis_gcc.h **** 
 470:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:../cmsiscore/inc/cmsis_gcc.h **** /**
 472:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:../cmsiscore/inc/cmsis_gcc.h ****   \return               Base Priority register value
 475:../cmsiscore/inc/cmsis_gcc.h ****  */
 476:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:../cmsiscore/inc/cmsis_gcc.h **** {
 478:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 479:../cmsiscore/inc/cmsis_gcc.h **** 
 480:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 482:../cmsiscore/inc/cmsis_gcc.h **** }
 483:../cmsiscore/inc/cmsis_gcc.h **** #endif
 484:../cmsiscore/inc/cmsis_gcc.h **** 
 485:../cmsiscore/inc/cmsis_gcc.h **** 
 486:../cmsiscore/inc/cmsis_gcc.h **** /**
 487:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Base Priority
 488:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:../cmsiscore/inc/cmsis_gcc.h ****  */
 491:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:../cmsiscore/inc/cmsis_gcc.h **** {
 493:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:../cmsiscore/inc/cmsis_gcc.h **** }
 495:../cmsiscore/inc/cmsis_gcc.h **** 
 496:../cmsiscore/inc/cmsis_gcc.h **** 
 497:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:../cmsiscore/inc/cmsis_gcc.h **** /**
 499:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:../cmsiscore/inc/cmsis_gcc.h ****  */
 503:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:../cmsiscore/inc/cmsis_gcc.h **** {
 505:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:../cmsiscore/inc/cmsis_gcc.h **** }
ARM GAS  /tmp/cc4CJeQn.s 			page 49


 507:../cmsiscore/inc/cmsis_gcc.h **** #endif
 508:../cmsiscore/inc/cmsis_gcc.h **** 
 509:../cmsiscore/inc/cmsis_gcc.h **** 
 510:../cmsiscore/inc/cmsis_gcc.h **** /**
 511:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:../cmsiscore/inc/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:../cmsiscore/inc/cmsis_gcc.h ****  */
 516:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:../cmsiscore/inc/cmsis_gcc.h **** {
 518:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:../cmsiscore/inc/cmsis_gcc.h **** }
 520:../cmsiscore/inc/cmsis_gcc.h **** 
 521:../cmsiscore/inc/cmsis_gcc.h **** 
 522:../cmsiscore/inc/cmsis_gcc.h **** /**
 523:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:../cmsiscore/inc/cmsis_gcc.h ****   \return               Fault Mask register value
 526:../cmsiscore/inc/cmsis_gcc.h ****  */
 527:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:../cmsiscore/inc/cmsis_gcc.h **** {
 529:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 530:../cmsiscore/inc/cmsis_gcc.h **** 
 531:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 533:../cmsiscore/inc/cmsis_gcc.h **** }
 534:../cmsiscore/inc/cmsis_gcc.h **** 
 535:../cmsiscore/inc/cmsis_gcc.h **** 
 536:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:../cmsiscore/inc/cmsis_gcc.h **** /**
 538:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:../cmsiscore/inc/cmsis_gcc.h ****   \return               Fault Mask register value
 541:../cmsiscore/inc/cmsis_gcc.h ****  */
 542:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:../cmsiscore/inc/cmsis_gcc.h **** {
 544:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 545:../cmsiscore/inc/cmsis_gcc.h **** 
 546:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 548:../cmsiscore/inc/cmsis_gcc.h **** }
 549:../cmsiscore/inc/cmsis_gcc.h **** #endif
 550:../cmsiscore/inc/cmsis_gcc.h **** 
 551:../cmsiscore/inc/cmsis_gcc.h **** 
 552:../cmsiscore/inc/cmsis_gcc.h **** /**
 553:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:../cmsiscore/inc/cmsis_gcc.h ****  */
 557:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:../cmsiscore/inc/cmsis_gcc.h **** {
 559:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:../cmsiscore/inc/cmsis_gcc.h **** }
 561:../cmsiscore/inc/cmsis_gcc.h **** 
 562:../cmsiscore/inc/cmsis_gcc.h **** 
 563:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /tmp/cc4CJeQn.s 			page 50


 564:../cmsiscore/inc/cmsis_gcc.h **** /**
 565:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:../cmsiscore/inc/cmsis_gcc.h ****  */
 569:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:../cmsiscore/inc/cmsis_gcc.h **** {
 571:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:../cmsiscore/inc/cmsis_gcc.h **** }
 573:../cmsiscore/inc/cmsis_gcc.h **** #endif
 574:../cmsiscore/inc/cmsis_gcc.h **** 
 575:../cmsiscore/inc/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:../cmsiscore/inc/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:../cmsiscore/inc/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:../cmsiscore/inc/cmsis_gcc.h **** 
 579:../cmsiscore/inc/cmsis_gcc.h **** 
 580:../cmsiscore/inc/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:../cmsiscore/inc/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:../cmsiscore/inc/cmsis_gcc.h **** 
 583:../cmsiscore/inc/cmsis_gcc.h **** /**
 584:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:../cmsiscore/inc/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:../cmsiscore/inc/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:../cmsiscore/inc/cmsis_gcc.h ****   mode.
 588:../cmsiscore/inc/cmsis_gcc.h ****   
 589:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:../cmsiscore/inc/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:../cmsiscore/inc/cmsis_gcc.h ****  */
 592:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:../cmsiscore/inc/cmsis_gcc.h **** {
 594:../cmsiscore/inc/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:../cmsiscore/inc/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:../cmsiscore/inc/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:../cmsiscore/inc/cmsis_gcc.h ****   return 0U;
 598:../cmsiscore/inc/cmsis_gcc.h **** #else
 599:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 600:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:../cmsiscore/inc/cmsis_gcc.h ****   return result;
 602:../cmsiscore/inc/cmsis_gcc.h **** #endif
 603:../cmsiscore/inc/cmsis_gcc.h **** }
 604:../cmsiscore/inc/cmsis_gcc.h **** 
 605:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:../cmsiscore/inc/cmsis_gcc.h **** /**
 607:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:../cmsiscore/inc/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:../cmsiscore/inc/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:../cmsiscore/inc/cmsis_gcc.h **** 
 611:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:../cmsiscore/inc/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:../cmsiscore/inc/cmsis_gcc.h ****  */
 614:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:../cmsiscore/inc/cmsis_gcc.h **** {
 616:../cmsiscore/inc/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:../cmsiscore/inc/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:../cmsiscore/inc/cmsis_gcc.h ****   return 0U;
 619:../cmsiscore/inc/cmsis_gcc.h **** #else
 620:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/cc4CJeQn.s 			page 51


 621:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:../cmsiscore/inc/cmsis_gcc.h ****   return result;
 623:../cmsiscore/inc/cmsis_gcc.h **** #endif
 624:../cmsiscore/inc/cmsis_gcc.h **** }
 625:../cmsiscore/inc/cmsis_gcc.h **** #endif
 626:../cmsiscore/inc/cmsis_gcc.h **** 
 627:../cmsiscore/inc/cmsis_gcc.h **** 
 628:../cmsiscore/inc/cmsis_gcc.h **** /**
 629:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:../cmsiscore/inc/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:../cmsiscore/inc/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:../cmsiscore/inc/cmsis_gcc.h ****   mode.
 633:../cmsiscore/inc/cmsis_gcc.h ****   
 634:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:../cmsiscore/inc/cmsis_gcc.h ****  */
 637:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:../cmsiscore/inc/cmsis_gcc.h **** {
 639:../cmsiscore/inc/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:../cmsiscore/inc/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:../cmsiscore/inc/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:../cmsiscore/inc/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:../cmsiscore/inc/cmsis_gcc.h **** #else
 644:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:../cmsiscore/inc/cmsis_gcc.h **** #endif
 646:../cmsiscore/inc/cmsis_gcc.h **** }
 647:../cmsiscore/inc/cmsis_gcc.h **** 
 648:../cmsiscore/inc/cmsis_gcc.h **** 
 649:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:../cmsiscore/inc/cmsis_gcc.h **** /**
 651:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:../cmsiscore/inc/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:../cmsiscore/inc/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:../cmsiscore/inc/cmsis_gcc.h **** 
 655:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:../cmsiscore/inc/cmsis_gcc.h ****  */
 658:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:../cmsiscore/inc/cmsis_gcc.h **** {
 660:../cmsiscore/inc/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:../cmsiscore/inc/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:../cmsiscore/inc/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:../cmsiscore/inc/cmsis_gcc.h **** #else
 664:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:../cmsiscore/inc/cmsis_gcc.h **** #endif
 666:../cmsiscore/inc/cmsis_gcc.h **** }
 667:../cmsiscore/inc/cmsis_gcc.h **** #endif
 668:../cmsiscore/inc/cmsis_gcc.h **** 
 669:../cmsiscore/inc/cmsis_gcc.h **** 
 670:../cmsiscore/inc/cmsis_gcc.h **** /**
 671:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:../cmsiscore/inc/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:../cmsiscore/inc/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:../cmsiscore/inc/cmsis_gcc.h ****   mode.
 675:../cmsiscore/inc/cmsis_gcc.h **** 
 676:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:../cmsiscore/inc/cmsis_gcc.h ****   \return               MSPLIM Register value
ARM GAS  /tmp/cc4CJeQn.s 			page 52


 678:../cmsiscore/inc/cmsis_gcc.h ****  */
 679:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:../cmsiscore/inc/cmsis_gcc.h **** {
 681:../cmsiscore/inc/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:../cmsiscore/inc/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:../cmsiscore/inc/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:../cmsiscore/inc/cmsis_gcc.h ****   return 0U;
 685:../cmsiscore/inc/cmsis_gcc.h **** #else
 686:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 687:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:../cmsiscore/inc/cmsis_gcc.h ****   return result;
 689:../cmsiscore/inc/cmsis_gcc.h **** #endif
 690:../cmsiscore/inc/cmsis_gcc.h **** }
 691:../cmsiscore/inc/cmsis_gcc.h **** 
 692:../cmsiscore/inc/cmsis_gcc.h **** 
 693:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:../cmsiscore/inc/cmsis_gcc.h **** /**
 695:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:../cmsiscore/inc/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:../cmsiscore/inc/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:../cmsiscore/inc/cmsis_gcc.h **** 
 699:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:../cmsiscore/inc/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:../cmsiscore/inc/cmsis_gcc.h ****  */
 702:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:../cmsiscore/inc/cmsis_gcc.h **** {
 704:../cmsiscore/inc/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:../cmsiscore/inc/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:../cmsiscore/inc/cmsis_gcc.h ****   return 0U;
 707:../cmsiscore/inc/cmsis_gcc.h **** #else
 708:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 709:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:../cmsiscore/inc/cmsis_gcc.h ****   return result;
 711:../cmsiscore/inc/cmsis_gcc.h **** #endif
 712:../cmsiscore/inc/cmsis_gcc.h **** }
 713:../cmsiscore/inc/cmsis_gcc.h **** #endif
 714:../cmsiscore/inc/cmsis_gcc.h **** 
 715:../cmsiscore/inc/cmsis_gcc.h **** 
 716:../cmsiscore/inc/cmsis_gcc.h **** /**
 717:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:../cmsiscore/inc/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:../cmsiscore/inc/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:../cmsiscore/inc/cmsis_gcc.h ****   mode.
 721:../cmsiscore/inc/cmsis_gcc.h **** 
 722:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:../cmsiscore/inc/cmsis_gcc.h ****  */
 725:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:../cmsiscore/inc/cmsis_gcc.h **** {
 727:../cmsiscore/inc/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:../cmsiscore/inc/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:../cmsiscore/inc/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:../cmsiscore/inc/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:../cmsiscore/inc/cmsis_gcc.h **** #else
 732:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:../cmsiscore/inc/cmsis_gcc.h **** #endif
 734:../cmsiscore/inc/cmsis_gcc.h **** }
ARM GAS  /tmp/cc4CJeQn.s 			page 53


 735:../cmsiscore/inc/cmsis_gcc.h **** 
 736:../cmsiscore/inc/cmsis_gcc.h **** 
 737:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:../cmsiscore/inc/cmsis_gcc.h **** /**
 739:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:../cmsiscore/inc/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:../cmsiscore/inc/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:../cmsiscore/inc/cmsis_gcc.h **** 
 743:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:../cmsiscore/inc/cmsis_gcc.h ****  */
 746:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:../cmsiscore/inc/cmsis_gcc.h **** {
 748:../cmsiscore/inc/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:../cmsiscore/inc/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:../cmsiscore/inc/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:../cmsiscore/inc/cmsis_gcc.h **** #else
 752:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:../cmsiscore/inc/cmsis_gcc.h **** #endif
 754:../cmsiscore/inc/cmsis_gcc.h **** }
 755:../cmsiscore/inc/cmsis_gcc.h **** #endif
 756:../cmsiscore/inc/cmsis_gcc.h **** 
 757:../cmsiscore/inc/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:../cmsiscore/inc/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:../cmsiscore/inc/cmsis_gcc.h **** 
 760:../cmsiscore/inc/cmsis_gcc.h **** 
 761:../cmsiscore/inc/cmsis_gcc.h **** /**
 762:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get FPSCR
 763:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:../cmsiscore/inc/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:../cmsiscore/inc/cmsis_gcc.h ****  */
 766:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:../cmsiscore/inc/cmsis_gcc.h **** {
 768:../cmsiscore/inc/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:../cmsiscore/inc/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:../cmsiscore/inc/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:../cmsiscore/inc/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:../cmsiscore/inc/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:../cmsiscore/inc/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:../cmsiscore/inc/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:../cmsiscore/inc/cmsis_gcc.h **** #else
 776:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 777:../cmsiscore/inc/cmsis_gcc.h **** 
 778:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 780:../cmsiscore/inc/cmsis_gcc.h **** #endif
 781:../cmsiscore/inc/cmsis_gcc.h **** #else
 782:../cmsiscore/inc/cmsis_gcc.h ****   return(0U);
 783:../cmsiscore/inc/cmsis_gcc.h **** #endif
 784:../cmsiscore/inc/cmsis_gcc.h **** }
 785:../cmsiscore/inc/cmsis_gcc.h **** 
 786:../cmsiscore/inc/cmsis_gcc.h **** 
 787:../cmsiscore/inc/cmsis_gcc.h **** /**
 788:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set FPSCR
 789:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:../cmsiscore/inc/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc4CJeQn.s 			page 54


 792:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:../cmsiscore/inc/cmsis_gcc.h **** {
 794:../cmsiscore/inc/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:../cmsiscore/inc/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:../cmsiscore/inc/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:../cmsiscore/inc/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:../cmsiscore/inc/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:../cmsiscore/inc/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:../cmsiscore/inc/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:../cmsiscore/inc/cmsis_gcc.h **** #else
 802:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:../cmsiscore/inc/cmsis_gcc.h **** #endif
 804:../cmsiscore/inc/cmsis_gcc.h **** #else
 805:../cmsiscore/inc/cmsis_gcc.h ****   (void)fpscr;
 806:../cmsiscore/inc/cmsis_gcc.h **** #endif
 807:../cmsiscore/inc/cmsis_gcc.h **** }
 808:../cmsiscore/inc/cmsis_gcc.h **** 
 809:../cmsiscore/inc/cmsis_gcc.h **** 
 810:../cmsiscore/inc/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:../cmsiscore/inc/cmsis_gcc.h **** 
 812:../cmsiscore/inc/cmsis_gcc.h **** 
 813:../cmsiscore/inc/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:../cmsiscore/inc/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:../cmsiscore/inc/cmsis_gcc.h ****   Access to dedicated instructions
 816:../cmsiscore/inc/cmsis_gcc.h ****   @{
 817:../cmsiscore/inc/cmsis_gcc.h **** */
 818:../cmsiscore/inc/cmsis_gcc.h **** 
 819:../cmsiscore/inc/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:../cmsiscore/inc/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:../cmsiscore/inc/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:../cmsiscore/inc/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:../cmsiscore/inc/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:../cmsiscore/inc/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:../cmsiscore/inc/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:../cmsiscore/inc/cmsis_gcc.h **** #else
 827:../cmsiscore/inc/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:../cmsiscore/inc/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:../cmsiscore/inc/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:../cmsiscore/inc/cmsis_gcc.h **** #endif
 831:../cmsiscore/inc/cmsis_gcc.h **** 
 832:../cmsiscore/inc/cmsis_gcc.h **** /**
 833:../cmsiscore/inc/cmsis_gcc.h ****   \brief   No Operation
 834:../cmsiscore/inc/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:../cmsiscore/inc/cmsis_gcc.h ****  */
 836:../cmsiscore/inc/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:../cmsiscore/inc/cmsis_gcc.h **** 
 838:../cmsiscore/inc/cmsis_gcc.h **** /**
 839:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:../cmsiscore/inc/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:../cmsiscore/inc/cmsis_gcc.h ****  */
 842:../cmsiscore/inc/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:../cmsiscore/inc/cmsis_gcc.h **** 
 844:../cmsiscore/inc/cmsis_gcc.h **** 
 845:../cmsiscore/inc/cmsis_gcc.h **** /**
 846:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Wait For Event
 847:../cmsiscore/inc/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:../cmsiscore/inc/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
ARM GAS  /tmp/cc4CJeQn.s 			page 55


 849:../cmsiscore/inc/cmsis_gcc.h ****  */
 850:../cmsiscore/inc/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:../cmsiscore/inc/cmsis_gcc.h **** 
 852:../cmsiscore/inc/cmsis_gcc.h **** 
 853:../cmsiscore/inc/cmsis_gcc.h **** /**
 854:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Send Event
 855:../cmsiscore/inc/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:../cmsiscore/inc/cmsis_gcc.h ****  */
 857:../cmsiscore/inc/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:../cmsiscore/inc/cmsis_gcc.h **** 
 859:../cmsiscore/inc/cmsis_gcc.h **** 
 860:../cmsiscore/inc/cmsis_gcc.h **** /**
 861:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:../cmsiscore/inc/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:../cmsiscore/inc/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:../cmsiscore/inc/cmsis_gcc.h ****            after the instruction has been completed.
 865:../cmsiscore/inc/cmsis_gcc.h ****  */
 866:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:../cmsiscore/inc/cmsis_gcc.h **** {
 868:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:../cmsiscore/inc/cmsis_gcc.h **** }
 870:../cmsiscore/inc/cmsis_gcc.h **** 
 871:../cmsiscore/inc/cmsis_gcc.h **** 
 872:../cmsiscore/inc/cmsis_gcc.h **** /**
 873:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:../cmsiscore/inc/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:../cmsiscore/inc/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:../cmsiscore/inc/cmsis_gcc.h ****  */
 877:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:../cmsiscore/inc/cmsis_gcc.h **** {
 879:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 312              		.loc 3 879 0
 313              		.syntax unified
 314              	@ 879 "../cmsiscore/inc/cmsis_gcc.h" 1
 315 00c0 BFF34F8F 		dsb 0xF
 316              	@ 0 "" 2
 317              		.thumb
 318              		.syntax unified
 319              	.LBE47:
 320              	.LBE46:
 321              	.LBB48:
 322              	.LBB49:
 868:../cmsiscore/inc/cmsis_gcc.h **** }
 323              		.loc 3 868 0
 324              		.syntax unified
 325              	@ 868 "../cmsiscore/inc/cmsis_gcc.h" 1
 326 00c4 BFF36F8F 		isb 0xF
 327              	@ 0 "" 2
 328              	.LVL23:
 329              		.thumb
 330              		.syntax unified
 331              	.L15:
 332 00c8 7047     		bx	lr	@
 333              	.L18:
 334 00ca 00BF     		.align	2
 335              	.L17:
 336 00cc 00E100E0 		.word	-536813312
ARM GAS  /tmp/cc4CJeQn.s 			page 56


 337              	.LBE49:
 338              	.LBE48:
 339              	.LBE45:
 340              	.LBE44:
 341              		.cfi_endproc
 342              	.LFE68:
 343              		.size	HAL_NVIC_DisableIRQ, .-HAL_NVIC_DisableIRQ
 344              		.align	1
 345              		.global	HAL_NVIC_SystemReset
 346              		.syntax unified
 347              		.thumb
 348              		.thumb_func
 349              		.fpu softvfp
 350              		.type	HAL_NVIC_SystemReset, %function
 351              	HAL_NVIC_SystemReset:
 352              	.LFB69:
 205:src/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 206:src/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 207:src/stm32f1xx_hal_cortex.c **** 
 208:src/stm32f1xx_hal_cortex.c ****   /* Disable interrupt */
 209:src/stm32f1xx_hal_cortex.c ****   NVIC_DisableIRQ(IRQn);
 210:src/stm32f1xx_hal_cortex.c **** }
 211:src/stm32f1xx_hal_cortex.c **** 
 212:src/stm32f1xx_hal_cortex.c **** /**
 213:src/stm32f1xx_hal_cortex.c ****   * @brief  Initiates a system reset request to reset the MCU.
 214:src/stm32f1xx_hal_cortex.c ****   * @retval None
 215:src/stm32f1xx_hal_cortex.c ****   */
 216:src/stm32f1xx_hal_cortex.c **** void HAL_NVIC_SystemReset(void)
 217:src/stm32f1xx_hal_cortex.c **** {
 353              		.loc 1 217 0
 354              		.cfi_startproc
 355              		@ Volatile: function does not return.
 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358              		@ link register save eliminated.
 359              	.LBB56:
 360              	.LBB57:
 361              	.LBB58:
 362              	.LBB59:
 363              		.loc 3 879 0
 364              		.syntax unified
 365              	@ 879 "../cmsiscore/inc/cmsis_gcc.h" 1
 366 00d0 BFF34F8F 		dsb 0xF
 367              	@ 0 "" 2
 368              		.thumb
 369              		.syntax unified
 370              	.LBE59:
 371              	.LBE58:
1698:../cmsiscore/inc/core_cm3.h ****          );
1699:../cmsiscore/inc/core_cm3.h **** }
1700:../cmsiscore/inc/core_cm3.h **** 
1701:../cmsiscore/inc/core_cm3.h **** 
1702:../cmsiscore/inc/core_cm3.h **** /**
1703:../cmsiscore/inc/core_cm3.h ****   \brief   Decode Priority
1704:../cmsiscore/inc/core_cm3.h ****   \details Decodes an interrupt priority value with a given priority group to
1705:../cmsiscore/inc/core_cm3.h ****            preemptive priority value and subpriority value.
1706:../cmsiscore/inc/core_cm3.h ****            In case of a conflict between priority grouping and available
ARM GAS  /tmp/cc4CJeQn.s 			page 57


1707:../cmsiscore/inc/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1708:../cmsiscore/inc/core_cm3.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1709:../cmsiscore/inc/core_cm3.h ****   \param [in]     PriorityGroup  Used priority group.
1710:../cmsiscore/inc/core_cm3.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1711:../cmsiscore/inc/core_cm3.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1712:../cmsiscore/inc/core_cm3.h ****  */
1713:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1714:../cmsiscore/inc/core_cm3.h **** {
1715:../cmsiscore/inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1716:../cmsiscore/inc/core_cm3.h ****   uint32_t PreemptPriorityBits;
1717:../cmsiscore/inc/core_cm3.h ****   uint32_t SubPriorityBits;
1718:../cmsiscore/inc/core_cm3.h **** 
1719:../cmsiscore/inc/core_cm3.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1720:../cmsiscore/inc/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1721:../cmsiscore/inc/core_cm3.h **** 
1722:../cmsiscore/inc/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1723:../cmsiscore/inc/core_cm3.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1724:../cmsiscore/inc/core_cm3.h **** }
1725:../cmsiscore/inc/core_cm3.h **** 
1726:../cmsiscore/inc/core_cm3.h **** 
1727:../cmsiscore/inc/core_cm3.h **** /**
1728:../cmsiscore/inc/core_cm3.h ****   \brief   Set Interrupt Vector
1729:../cmsiscore/inc/core_cm3.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
1730:../cmsiscore/inc/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1731:../cmsiscore/inc/core_cm3.h ****            or negative to specify a processor exception.
1732:../cmsiscore/inc/core_cm3.h ****            VTOR must been relocated to SRAM before.
1733:../cmsiscore/inc/core_cm3.h ****   \param [in]   IRQn      Interrupt number
1734:../cmsiscore/inc/core_cm3.h ****   \param [in]   vector    Address of interrupt handler function
1735:../cmsiscore/inc/core_cm3.h ****  */
1736:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
1737:../cmsiscore/inc/core_cm3.h **** {
1738:../cmsiscore/inc/core_cm3.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1739:../cmsiscore/inc/core_cm3.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
1740:../cmsiscore/inc/core_cm3.h **** }
1741:../cmsiscore/inc/core_cm3.h **** 
1742:../cmsiscore/inc/core_cm3.h **** 
1743:../cmsiscore/inc/core_cm3.h **** /**
1744:../cmsiscore/inc/core_cm3.h ****   \brief   Get Interrupt Vector
1745:../cmsiscore/inc/core_cm3.h ****   \details Reads an interrupt vector from interrupt vector table.
1746:../cmsiscore/inc/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1747:../cmsiscore/inc/core_cm3.h ****            or negative to specify a processor exception.
1748:../cmsiscore/inc/core_cm3.h ****   \param [in]   IRQn      Interrupt number.
1749:../cmsiscore/inc/core_cm3.h ****   \return                 Address of interrupt handler function
1750:../cmsiscore/inc/core_cm3.h ****  */
1751:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
1752:../cmsiscore/inc/core_cm3.h **** {
1753:../cmsiscore/inc/core_cm3.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1754:../cmsiscore/inc/core_cm3.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
1755:../cmsiscore/inc/core_cm3.h **** }
1756:../cmsiscore/inc/core_cm3.h **** 
1757:../cmsiscore/inc/core_cm3.h **** 
1758:../cmsiscore/inc/core_cm3.h **** /**
1759:../cmsiscore/inc/core_cm3.h ****   \brief   System Reset
1760:../cmsiscore/inc/core_cm3.h ****   \details Initiates a system reset request to reset the MCU.
1761:../cmsiscore/inc/core_cm3.h ****  */
1762:../cmsiscore/inc/core_cm3.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
1763:../cmsiscore/inc/core_cm3.h **** {
ARM GAS  /tmp/cc4CJeQn.s 			page 58


1764:../cmsiscore/inc/core_cm3.h ****   __DSB();                                                          /* Ensure all outstanding memor
1765:../cmsiscore/inc/core_cm3.h ****                                                                        buffered write are completed
1766:../cmsiscore/inc/core_cm3.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
1767:../cmsiscore/inc/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 372              		.loc 2 1767 0
 373 00d4 0549     		ldr	r1, .L21	@ tmp113,
1766:../cmsiscore/inc/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 374              		.loc 2 1766 0
 375 00d6 064B     		ldr	r3, .L21+4	@ _4,
 376              		.loc 2 1767 0
 377 00d8 CA68     		ldr	r2, [r1, #12]	@ _2, MEM[(struct SCB_Type *)3758157056B].AIRCR
 378 00da 02F4E062 		and	r2, r2, #1792	@ tmp114, _2,
1766:../cmsiscore/inc/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 379              		.loc 2 1766 0
 380 00de 1343     		orrs	r3, r3, r2	@, _4, _4, tmp114
 381 00e0 CB60     		str	r3, [r1, #12]	@ _4, MEM[(struct SCB_Type *)3758157056B].AIRCR
 382              	.LBB60:
 383              	.LBB61:
 384              		.loc 3 879 0
 385              		.syntax unified
 386              	@ 879 "../cmsiscore/inc/cmsis_gcc.h" 1
 387 00e2 BFF34F8F 		dsb 0xF
 388              	@ 0 "" 2
 389              		.thumb
 390              		.syntax unified
 391              	.L20:
 392              	.LBE61:
 393              	.LBE60:
1768:../cmsiscore/inc/core_cm3.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
1769:../cmsiscore/inc/core_cm3.h ****   __DSB();                                                          /* Ensure completion of memory 
1770:../cmsiscore/inc/core_cm3.h **** 
1771:../cmsiscore/inc/core_cm3.h ****   for(;;)                                                           /* wait until reset */
1772:../cmsiscore/inc/core_cm3.h ****   {
1773:../cmsiscore/inc/core_cm3.h ****     __NOP();
 394              		.loc 2 1773 0
 395              		.syntax unified
 396              	@ 1773 "../cmsiscore/inc/core_cm3.h" 1
 397 00e6 00BF     		nop
 398              	@ 0 "" 2
 399              		.thumb
 400              		.syntax unified
 401 00e8 FDE7     		b	.L20	@
 402              	.L22:
 403 00ea 00BF     		.align	2
 404              	.L21:
 405 00ec 00ED00E0 		.word	-536810240
 406 00f0 0400FA05 		.word	100270084
 407              	.LBE57:
 408              	.LBE56:
 409              		.cfi_endproc
 410              	.LFE69:
 411              		.size	HAL_NVIC_SystemReset, .-HAL_NVIC_SystemReset
 412              		.align	1
 413              		.global	HAL_SYSTICK_Config
 414              		.syntax unified
 415              		.thumb
 416              		.thumb_func
ARM GAS  /tmp/cc4CJeQn.s 			page 59


 417              		.fpu softvfp
 418              		.type	HAL_SYSTICK_Config, %function
 419              	HAL_SYSTICK_Config:
 420              	.LFB70:
 218:src/stm32f1xx_hal_cortex.c ****   /* System Reset */
 219:src/stm32f1xx_hal_cortex.c ****   NVIC_SystemReset();
 220:src/stm32f1xx_hal_cortex.c **** }
 221:src/stm32f1xx_hal_cortex.c **** 
 222:src/stm32f1xx_hal_cortex.c **** /**
 223:src/stm32f1xx_hal_cortex.c ****   * @brief  Initializes the System Timer and its interrupt, and starts the System Tick Timer.
 224:src/stm32f1xx_hal_cortex.c ****   *         Counter is in free running mode to generate periodic interrupts.
 225:src/stm32f1xx_hal_cortex.c ****   * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
 226:src/stm32f1xx_hal_cortex.c ****   * @retval status:  - 0  Function succeeded.
 227:src/stm32f1xx_hal_cortex.c ****   *                  - 1  Function failed.
 228:src/stm32f1xx_hal_cortex.c ****   */
 229:src/stm32f1xx_hal_cortex.c **** uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
 230:src/stm32f1xx_hal_cortex.c **** {
 421              		.loc 1 230 0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 0
 424              		@ frame_needed = 0, uses_anonymous_args = 0
 425              		@ link register save eliminated.
 426              	.LVL24:
 427              	.LBB66:
 428              	.LBB67:
1774:../cmsiscore/inc/core_cm3.h ****   }
1775:../cmsiscore/inc/core_cm3.h **** }
1776:../cmsiscore/inc/core_cm3.h **** 
1777:../cmsiscore/inc/core_cm3.h **** /*@} end of CMSIS_Core_NVICFunctions */
1778:../cmsiscore/inc/core_cm3.h **** 
1779:../cmsiscore/inc/core_cm3.h **** /* ##########################  MPU functions  #################################### */
1780:../cmsiscore/inc/core_cm3.h **** 
1781:../cmsiscore/inc/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1782:../cmsiscore/inc/core_cm3.h **** 
1783:../cmsiscore/inc/core_cm3.h **** #include "mpu_armv7.h"
1784:../cmsiscore/inc/core_cm3.h **** 
1785:../cmsiscore/inc/core_cm3.h **** #endif
1786:../cmsiscore/inc/core_cm3.h **** 
1787:../cmsiscore/inc/core_cm3.h **** /* ##########################  FPU functions  #################################### */
1788:../cmsiscore/inc/core_cm3.h **** /**
1789:../cmsiscore/inc/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1790:../cmsiscore/inc/core_cm3.h ****   \defgroup CMSIS_Core_FpuFunctions FPU Functions
1791:../cmsiscore/inc/core_cm3.h ****   \brief    Function that provides FPU type.
1792:../cmsiscore/inc/core_cm3.h ****   @{
1793:../cmsiscore/inc/core_cm3.h ****  */
1794:../cmsiscore/inc/core_cm3.h **** 
1795:../cmsiscore/inc/core_cm3.h **** /**
1796:../cmsiscore/inc/core_cm3.h ****   \brief   get FPU type
1797:../cmsiscore/inc/core_cm3.h ****   \details returns the FPU type
1798:../cmsiscore/inc/core_cm3.h ****   \returns
1799:../cmsiscore/inc/core_cm3.h ****    - \b  0: No FPU
1800:../cmsiscore/inc/core_cm3.h ****    - \b  1: Single precision FPU
1801:../cmsiscore/inc/core_cm3.h ****    - \b  2: Double + Single precision FPU
1802:../cmsiscore/inc/core_cm3.h ****  */
1803:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE uint32_t SCB_GetFPUType(void)
1804:../cmsiscore/inc/core_cm3.h **** {
1805:../cmsiscore/inc/core_cm3.h ****     return 0U;           /* No FPU */
ARM GAS  /tmp/cc4CJeQn.s 			page 60


1806:../cmsiscore/inc/core_cm3.h **** }
1807:../cmsiscore/inc/core_cm3.h **** 
1808:../cmsiscore/inc/core_cm3.h **** 
1809:../cmsiscore/inc/core_cm3.h **** /*@} end of CMSIS_Core_FpuFunctions */
1810:../cmsiscore/inc/core_cm3.h **** 
1811:../cmsiscore/inc/core_cm3.h **** 
1812:../cmsiscore/inc/core_cm3.h **** 
1813:../cmsiscore/inc/core_cm3.h **** /* ##################################    SysTick function  ########################################
1814:../cmsiscore/inc/core_cm3.h **** /**
1815:../cmsiscore/inc/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1816:../cmsiscore/inc/core_cm3.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1817:../cmsiscore/inc/core_cm3.h ****   \brief    Functions that configure the System.
1818:../cmsiscore/inc/core_cm3.h ****   @{
1819:../cmsiscore/inc/core_cm3.h ****  */
1820:../cmsiscore/inc/core_cm3.h **** 
1821:../cmsiscore/inc/core_cm3.h **** #if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
1822:../cmsiscore/inc/core_cm3.h **** 
1823:../cmsiscore/inc/core_cm3.h **** /**
1824:../cmsiscore/inc/core_cm3.h ****   \brief   System Tick Configuration
1825:../cmsiscore/inc/core_cm3.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
1826:../cmsiscore/inc/core_cm3.h ****            Counter is in free running mode to generate periodic interrupts.
1827:../cmsiscore/inc/core_cm3.h ****   \param [in]  ticks  Number of ticks between two interrupts.
1828:../cmsiscore/inc/core_cm3.h ****   \return          0  Function succeeded.
1829:../cmsiscore/inc/core_cm3.h ****   \return          1  Function failed.
1830:../cmsiscore/inc/core_cm3.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1831:../cmsiscore/inc/core_cm3.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
1832:../cmsiscore/inc/core_cm3.h ****            must contain a vendor-specific implementation of this function.
1833:../cmsiscore/inc/core_cm3.h ****  */
1834:../cmsiscore/inc/core_cm3.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
1835:../cmsiscore/inc/core_cm3.h **** {
1836:../cmsiscore/inc/core_cm3.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 429              		.loc 2 1836 0
 430 00f4 0138     		subs	r0, r0, #1	@ _5, TicksNumb,
 431              	.LVL25:
 432 00f6 B0F1807F 		cmp	r0, #16777216	@ _5,
 433 00fa 0AD2     		bcs	.L25	@,
 434              	.LBB68:
 435              	.LBB69:
1647:../cmsiscore/inc/core_cm3.h ****   }
 436              		.loc 2 1647 0
 437 00fc F021     		movs	r1, #240	@ tmp115,
 438              	.LBE69:
 439              	.LBE68:
1837:../cmsiscore/inc/core_cm3.h ****   {
1838:../cmsiscore/inc/core_cm3.h ****     return (1UL);                                                   /* Reload value impossible */
1839:../cmsiscore/inc/core_cm3.h ****   }
1840:../cmsiscore/inc/core_cm3.h **** 
1841:../cmsiscore/inc/core_cm3.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 440              		.loc 2 1841 0
 441 00fe 064B     		ldr	r3, .L26	@ tmp113,
 442              	.LBB72:
 443              	.LBB70:
1647:../cmsiscore/inc/core_cm3.h ****   }
 444              		.loc 2 1647 0
 445 0100 064A     		ldr	r2, .L26+4	@ tmp114,
 446              	.LBE70:
 447              	.LBE72:
ARM GAS  /tmp/cc4CJeQn.s 			page 61


 448              		.loc 2 1841 0
 449 0102 5860     		str	r0, [r3, #4]	@ _5, MEM[(struct SysTick_Type *)3758153744B].LOAD
 450              	.LVL26:
 451              	.LBB73:
 452              	.LBB71:
1647:../cmsiscore/inc/core_cm3.h ****   }
 453              		.loc 2 1647 0
 454 0104 82F82310 		strb	r1, [r2, #35]	@ tmp115, MEM[(struct SCB_Type *)3758157056B].SHP
 455              	.LVL27:
 456              	.LBE71:
 457              	.LBE73:
1842:../cmsiscore/inc/core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
1843:../cmsiscore/inc/core_cm3.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 458              		.loc 2 1843 0
 459 0108 0020     		movs	r0, #0	@ tmp118,
 460              	.LVL28:
1844:../cmsiscore/inc/core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 461              		.loc 2 1844 0
 462 010a 0722     		movs	r2, #7	@ tmp120,
1843:../cmsiscore/inc/core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 463              		.loc 2 1843 0
 464 010c 9860     		str	r0, [r3, #8]	@ tmp118, MEM[(struct SysTick_Type *)3758153744B].VAL
 465              		.loc 2 1844 0
 466 010e 1A60     		str	r2, [r3]	@ tmp120, MEM[(struct SysTick_Type *)3758153744B].CTRL
 467 0110 7047     		bx	lr	@
 468              	.L25:
1838:../cmsiscore/inc/core_cm3.h ****   }
 469              		.loc 2 1838 0
 470 0112 0120     		movs	r0, #1	@ <retval>,
 471              	.LVL29:
 472              	.LBE67:
 473              	.LBE66:
 231:src/stm32f1xx_hal_cortex.c ****    return SysTick_Config(TicksNumb);
 232:src/stm32f1xx_hal_cortex.c **** }
 474              		.loc 1 232 0
 475 0114 7047     		bx	lr	@
 476              	.L27:
 477 0116 00BF     		.align	2
 478              	.L26:
 479 0118 10E000E0 		.word	-536813552
 480 011c 00ED00E0 		.word	-536810240
 481              		.cfi_endproc
 482              	.LFE70:
 483              		.size	HAL_SYSTICK_Config, .-HAL_SYSTICK_Config
 484              		.align	1
 485              		.global	HAL_NVIC_GetPriorityGrouping
 486              		.syntax unified
 487              		.thumb
 488              		.thumb_func
 489              		.fpu softvfp
 490              		.type	HAL_NVIC_GetPriorityGrouping, %function
 491              	HAL_NVIC_GetPriorityGrouping:
 492              	.LFB71:
 233:src/stm32f1xx_hal_cortex.c **** /**
 234:src/stm32f1xx_hal_cortex.c ****   * @}
 235:src/stm32f1xx_hal_cortex.c ****   */
 236:src/stm32f1xx_hal_cortex.c **** 
ARM GAS  /tmp/cc4CJeQn.s 			page 62


 237:src/stm32f1xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions_Group2 Peripheral Control functions
 238:src/stm32f1xx_hal_cortex.c ****   *  @brief   Cortex control functions 
 239:src/stm32f1xx_hal_cortex.c ****   *
 240:src/stm32f1xx_hal_cortex.c **** @verbatim   
 241:src/stm32f1xx_hal_cortex.c ****   ==============================================================================
 242:src/stm32f1xx_hal_cortex.c ****                       ##### Peripheral Control functions #####
 243:src/stm32f1xx_hal_cortex.c ****   ==============================================================================
 244:src/stm32f1xx_hal_cortex.c ****     [..]
 245:src/stm32f1xx_hal_cortex.c ****       This subsection provides a set of functions allowing to control the CORTEX
 246:src/stm32f1xx_hal_cortex.c ****       (NVIC, SYSTICK, MPU) functionalities. 
 247:src/stm32f1xx_hal_cortex.c ****  
 248:src/stm32f1xx_hal_cortex.c ****       
 249:src/stm32f1xx_hal_cortex.c **** @endverbatim
 250:src/stm32f1xx_hal_cortex.c ****   * @{
 251:src/stm32f1xx_hal_cortex.c ****   */
 252:src/stm32f1xx_hal_cortex.c **** 
 253:src/stm32f1xx_hal_cortex.c **** #if (__MPU_PRESENT == 1U)
 254:src/stm32f1xx_hal_cortex.c **** /**
 255:src/stm32f1xx_hal_cortex.c ****   * @brief  Disables the MPU
 256:src/stm32f1xx_hal_cortex.c ****   * @retval None
 257:src/stm32f1xx_hal_cortex.c ****   */
 258:src/stm32f1xx_hal_cortex.c **** void HAL_MPU_Disable(void)
 259:src/stm32f1xx_hal_cortex.c **** {
 260:src/stm32f1xx_hal_cortex.c ****   /* Make sure outstanding transfers are done */
 261:src/stm32f1xx_hal_cortex.c ****   __DMB();
 262:src/stm32f1xx_hal_cortex.c **** 
 263:src/stm32f1xx_hal_cortex.c ****   /* Disable fault exceptions */
 264:src/stm32f1xx_hal_cortex.c ****   SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 265:src/stm32f1xx_hal_cortex.c ****   
 266:src/stm32f1xx_hal_cortex.c ****   /* Disable the MPU and clear the control register*/
 267:src/stm32f1xx_hal_cortex.c ****   MPU->CTRL = 0U;
 268:src/stm32f1xx_hal_cortex.c **** }
 269:src/stm32f1xx_hal_cortex.c **** 
 270:src/stm32f1xx_hal_cortex.c **** /**
 271:src/stm32f1xx_hal_cortex.c ****   * @brief  Enable the MPU.
 272:src/stm32f1xx_hal_cortex.c ****   * @param  MPU_Control: Specifies the control mode of the MPU during hard fault, 
 273:src/stm32f1xx_hal_cortex.c ****   *          NMI, FAULTMASK and privileged access to the default memory 
 274:src/stm32f1xx_hal_cortex.c ****   *          This parameter can be one of the following values:
 275:src/stm32f1xx_hal_cortex.c ****   *            @arg MPU_HFNMI_PRIVDEF_NONE
 276:src/stm32f1xx_hal_cortex.c ****   *            @arg MPU_HARDFAULT_NMI
 277:src/stm32f1xx_hal_cortex.c ****   *            @arg MPU_PRIVILEGED_DEFAULT
 278:src/stm32f1xx_hal_cortex.c ****   *            @arg MPU_HFNMI_PRIVDEF
 279:src/stm32f1xx_hal_cortex.c ****   * @retval None
 280:src/stm32f1xx_hal_cortex.c ****   */
 281:src/stm32f1xx_hal_cortex.c **** void HAL_MPU_Enable(uint32_t MPU_Control)
 282:src/stm32f1xx_hal_cortex.c **** {
 283:src/stm32f1xx_hal_cortex.c ****   /* Enable the MPU */
 284:src/stm32f1xx_hal_cortex.c ****   MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 285:src/stm32f1xx_hal_cortex.c ****   
 286:src/stm32f1xx_hal_cortex.c ****   /* Enable fault exceptions */
 287:src/stm32f1xx_hal_cortex.c ****   SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 288:src/stm32f1xx_hal_cortex.c ****   
 289:src/stm32f1xx_hal_cortex.c ****   /* Ensure MPU setting take effects */
 290:src/stm32f1xx_hal_cortex.c ****   __DSB();
 291:src/stm32f1xx_hal_cortex.c ****   __ISB();
 292:src/stm32f1xx_hal_cortex.c **** }
 293:src/stm32f1xx_hal_cortex.c **** 
ARM GAS  /tmp/cc4CJeQn.s 			page 63


 294:src/stm32f1xx_hal_cortex.c **** /**
 295:src/stm32f1xx_hal_cortex.c ****   * @brief  Initializes and configures the Region and the memory to be protected.
 296:src/stm32f1xx_hal_cortex.c ****   * @param  MPU_Init: Pointer to a MPU_Region_InitTypeDef structure that contains
 297:src/stm32f1xx_hal_cortex.c ****   *                the initialization and configuration information.
 298:src/stm32f1xx_hal_cortex.c ****   * @retval None
 299:src/stm32f1xx_hal_cortex.c ****   */
 300:src/stm32f1xx_hal_cortex.c **** void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
 301:src/stm32f1xx_hal_cortex.c **** {
 302:src/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 303:src/stm32f1xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 304:src/stm32f1xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 305:src/stm32f1xx_hal_cortex.c **** 
 306:src/stm32f1xx_hal_cortex.c ****   /* Set the Region number */
 307:src/stm32f1xx_hal_cortex.c ****   MPU->RNR = MPU_Init->Number;
 308:src/stm32f1xx_hal_cortex.c **** 
 309:src/stm32f1xx_hal_cortex.c ****   if ((MPU_Init->Enable) != RESET)
 310:src/stm32f1xx_hal_cortex.c ****   {
 311:src/stm32f1xx_hal_cortex.c ****     /* Check the parameters */
 312:src/stm32f1xx_hal_cortex.c ****     assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 313:src/stm32f1xx_hal_cortex.c ****     assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 314:src/stm32f1xx_hal_cortex.c ****     assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 315:src/stm32f1xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 316:src/stm32f1xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 317:src/stm32f1xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 318:src/stm32f1xx_hal_cortex.c ****     assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 319:src/stm32f1xx_hal_cortex.c ****     assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 320:src/stm32f1xx_hal_cortex.c ****     
 321:src/stm32f1xx_hal_cortex.c ****     MPU->RBAR = MPU_Init->BaseAddress;
 322:src/stm32f1xx_hal_cortex.c ****     MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 323:src/stm32f1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 324:src/stm32f1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 325:src/stm32f1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 326:src/stm32f1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 327:src/stm32f1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 328:src/stm32f1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 329:src/stm32f1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 330:src/stm32f1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 331:src/stm32f1xx_hal_cortex.c ****   }
 332:src/stm32f1xx_hal_cortex.c ****   else
 333:src/stm32f1xx_hal_cortex.c ****   {
 334:src/stm32f1xx_hal_cortex.c ****     MPU->RBAR = 0x00U;
 335:src/stm32f1xx_hal_cortex.c ****     MPU->RASR = 0x00U;
 336:src/stm32f1xx_hal_cortex.c ****   }
 337:src/stm32f1xx_hal_cortex.c **** }
 338:src/stm32f1xx_hal_cortex.c **** #endif /* __MPU_PRESENT */
 339:src/stm32f1xx_hal_cortex.c **** 
 340:src/stm32f1xx_hal_cortex.c **** /**
 341:src/stm32f1xx_hal_cortex.c ****   * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
 342:src/stm32f1xx_hal_cortex.c ****   * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
 343:src/stm32f1xx_hal_cortex.c ****   */
 344:src/stm32f1xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPriorityGrouping(void)
 345:src/stm32f1xx_hal_cortex.c **** {
 493              		.loc 1 345 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 497              		@ link register save eliminated.
ARM GAS  /tmp/cc4CJeQn.s 			page 64


 498              	.LBB76:
 499              	.LBB77:
1501:../cmsiscore/inc/core_cm3.h **** }
 500              		.loc 2 1501 0
 501 0120 024B     		ldr	r3, .L29	@ tmp113,
 502 0122 D868     		ldr	r0, [r3, #12]	@ _4, MEM[(struct SCB_Type *)3758157056B].AIRCR
 503              	.LBE77:
 504              	.LBE76:
 346:src/stm32f1xx_hal_cortex.c ****   /* Get the PRIGROUP[10:8] field value */
 347:src/stm32f1xx_hal_cortex.c ****   return NVIC_GetPriorityGrouping();
 348:src/stm32f1xx_hal_cortex.c **** }
 505              		.loc 1 348 0
 506 0124 C0F30220 		ubfx	r0, r0, #8, #3	@, _4,,
 507 0128 7047     		bx	lr	@
 508              	.L30:
 509 012a 00BF     		.align	2
 510              	.L29:
 511 012c 00ED00E0 		.word	-536810240
 512              		.cfi_endproc
 513              	.LFE71:
 514              		.size	HAL_NVIC_GetPriorityGrouping, .-HAL_NVIC_GetPriorityGrouping
 515              		.align	1
 516              		.global	HAL_NVIC_GetPriority
 517              		.syntax unified
 518              		.thumb
 519              		.thumb_func
 520              		.fpu softvfp
 521              		.type	HAL_NVIC_GetPriority, %function
 522              	HAL_NVIC_GetPriority:
 523              	.LFB72:
 349:src/stm32f1xx_hal_cortex.c **** 
 350:src/stm32f1xx_hal_cortex.c **** /**
 351:src/stm32f1xx_hal_cortex.c ****   * @brief  Gets the priority of an interrupt.
 352:src/stm32f1xx_hal_cortex.c ****   * @param  IRQn: External interrupt number.
 353:src/stm32f1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 354:src/stm32f1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 355:src/stm32f1xx_hal_cortex.c ****   * @param   PriorityGroup: the priority grouping bits length.
 356:src/stm32f1xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 357:src/stm32f1xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_0: 0 bits for preemption priority
 358:src/stm32f1xx_hal_cortex.c ****   *                                      4 bits for subpriority
 359:src/stm32f1xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_1: 1 bits for preemption priority
 360:src/stm32f1xx_hal_cortex.c ****   *                                      3 bits for subpriority
 361:src/stm32f1xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_2: 2 bits for preemption priority
 362:src/stm32f1xx_hal_cortex.c ****   *                                      2 bits for subpriority
 363:src/stm32f1xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_3: 3 bits for preemption priority
 364:src/stm32f1xx_hal_cortex.c ****   *                                      1 bits for subpriority
 365:src/stm32f1xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_4: 4 bits for preemption priority
 366:src/stm32f1xx_hal_cortex.c ****   *                                      0 bits for subpriority
 367:src/stm32f1xx_hal_cortex.c ****   * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
 368:src/stm32f1xx_hal_cortex.c ****   * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
 369:src/stm32f1xx_hal_cortex.c ****   * @retval None
 370:src/stm32f1xx_hal_cortex.c ****   */
 371:src/stm32f1xx_hal_cortex.c **** void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint3
 372:src/stm32f1xx_hal_cortex.c **** {
 524              		.loc 1 372 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc4CJeQn.s 			page 65


 527              		@ frame_needed = 0, uses_anonymous_args = 0
 528              	.LVL30:
 529 0130 70B5     		push	{r4, r5, r6, lr}	@
 530              	.LCFI1:
 531              		.cfi_def_cfa_offset 16
 532              		.cfi_offset 4, -16
 533              		.cfi_offset 5, -12
 534              		.cfi_offset 6, -8
 535              		.cfi_offset 14, -4
 536              	.LBB82:
 537              	.LBB83:
1664:../cmsiscore/inc/core_cm3.h ****   {
 538              		.loc 2 1664 0
 539 0132 0028     		cmp	r0, #0	@ IRQn
 540              	.LVL31:
1666:../cmsiscore/inc/core_cm3.h ****   }
 541              		.loc 2 1666 0
 542 0134 ACBF     		ite	ge
 543 0136 00F16040 		addge	r0, r0, #-536870912	@ tmp137, IRQn,
1670:../cmsiscore/inc/core_cm3.h ****   }
 544              		.loc 2 1670 0
 545 013a 134C     		ldrlt	r4, .L37	@ tmp146,
 546              	.LBE83:
 547              	.LBE82:
 548              	.LBB86:
 549              	.LBB87:
1715:../cmsiscore/inc/core_cm3.h ****   uint32_t PreemptPriorityBits;
 550              		.loc 2 1715 0
 551 013c 01F00701 		and	r1, r1, #7	@ PriorityGroupTmp, PriorityGroup,
 552              	.LVL32:
 553              	.LBE87:
 554              	.LBE86:
 555              	.LBB90:
 556              	.LBB84:
1666:../cmsiscore/inc/core_cm3.h ****   }
 557              		.loc 2 1666 0
 558 0140 ADBF     		iteet	ge
 559 0142 00F56140 		addge	r0, r0, #57600	@ tmp137, tmp137,
1670:../cmsiscore/inc/core_cm3.h ****   }
 560              		.loc 2 1670 0
 561 0146 00F00F00 		andlt	r0, r0, #15	@ tmp144, IRQn,
 562 014a 255C     		ldrblt	r5, [r4, r0]	@ zero_extendqisi2	@ tmp149, MEM[(struct SCB_Type *)3758157056B].SHP
1666:../cmsiscore/inc/core_cm3.h ****   }
 563              		.loc 2 1666 0
 564 014c 90F80053 		ldrbge	r5, [r0, #768]	@ zero_extendqisi2	@ tmp140, MEM[(struct NVIC_Type *)3758153984B].IP
 565              	.LBE84:
 566              	.LBE90:
 567              	.LBB91:
 568              	.LBB88:
1719:../cmsiscore/inc/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 569              		.loc 2 1719 0
 570 0150 C1F10700 		rsb	r0, r1, #7	@ PreemptPriorityBits, PriorityGroupTmp,
1720:../cmsiscore/inc/core_cm3.h **** 
 571              		.loc 2 1720 0
 572 0154 0C1D     		adds	r4, r1, #4	@ tmp151, PriorityGroupTmp,
1719:../cmsiscore/inc/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 573              		.loc 2 1719 0
ARM GAS  /tmp/cc4CJeQn.s 			page 66


 574 0156 0428     		cmp	r0, #4	@ PreemptPriorityBits,
 575 0158 28BF     		it	cs
 576 015a 0420     		movcs	r0, #4	@ PreemptPriorityBits,
1720:../cmsiscore/inc/core_cm3.h **** 
 577              		.loc 2 1720 0
 578 015c 062C     		cmp	r4, #6	@ tmp151,
 579 015e 98BF     		it	ls
 580 0160 0021     		movls	r1, #0	@ iftmp.5_14,
1722:../cmsiscore/inc/core_cm3.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 581              		.loc 2 1722 0
 582 0162 4FF00104 		mov	r4, #1	@ tmp153,
 583              	.LBE88:
 584              	.LBE91:
 585              	.LBB92:
 586              	.LBB85:
1670:../cmsiscore/inc/core_cm3.h ****   }
 587              		.loc 2 1670 0
 588 0166 4FEA1515 		lsr	r5, r5, #4	@ _33, tmp149,
 589              	.LVL33:
 590              	.LBE85:
 591              	.LBE92:
 592              	.LBB93:
 593              	.LBB89:
1720:../cmsiscore/inc/core_cm3.h **** 
 594              		.loc 2 1720 0
 595 016a 88BF     		it	hi
 596 016c 0339     		subhi	r1, r1, #3	@ iftmp.5_14, PriorityGroupTmp,
 597              	.LVL34:
1722:../cmsiscore/inc/core_cm3.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 598              		.loc 2 1722 0
 599 016e 25FA01F6 		lsr	r6, r5, r1	@ tmp155, _33, iftmp.5_14
 600 0172 04FA00F0 		lsl	r0, r4, r0	@ tmp152, tmp153, PreemptPriorityBits
 601              	.LVL35:
1723:../cmsiscore/inc/core_cm3.h **** }
 602              		.loc 2 1723 0
 603 0176 04FA01F1 		lsl	r1, r4, r1	@ tmp157, tmp153, iftmp.5_14
 604              	.LVL36:
1722:../cmsiscore/inc/core_cm3.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 605              		.loc 2 1722 0
 606 017a 0138     		subs	r0, r0, #1	@ tmp154, tmp152,
1723:../cmsiscore/inc/core_cm3.h **** }
 607              		.loc 2 1723 0
 608 017c 0139     		subs	r1, r1, #1	@ tmp159, tmp157,
1722:../cmsiscore/inc/core_cm3.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 609              		.loc 2 1722 0
 610 017e 3040     		ands	r0, r0, r6	@, tmp156, tmp154, tmp155
1723:../cmsiscore/inc/core_cm3.h **** }
 611              		.loc 2 1723 0
 612 0180 2940     		ands	r1, r1, r5	@, tmp160, tmp159, _33
1722:../cmsiscore/inc/core_cm3.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 613              		.loc 2 1722 0
 614 0182 1060     		str	r0, [r2]	@ tmp156, *pPreemptPriority_6(D)
1723:../cmsiscore/inc/core_cm3.h **** }
 615              		.loc 2 1723 0
 616 0184 1960     		str	r1, [r3]	@ tmp160, *pSubPriority_7(D)
 617              	.LVL37:
 618 0186 70BD     		pop	{r4, r5, r6, pc}	@
ARM GAS  /tmp/cc4CJeQn.s 			page 67


 619              	.L38:
 620              		.align	2
 621              	.L37:
 622 0188 14ED00E0 		.word	-536810220
 623              	.LBE89:
 624              	.LBE93:
 625              		.cfi_endproc
 626              	.LFE72:
 627              		.size	HAL_NVIC_GetPriority, .-HAL_NVIC_GetPriority
 628              		.align	1
 629              		.global	HAL_NVIC_SetPendingIRQ
 630              		.syntax unified
 631              		.thumb
 632              		.thumb_func
 633              		.fpu softvfp
 634              		.type	HAL_NVIC_SetPendingIRQ, %function
 635              	HAL_NVIC_SetPendingIRQ:
 636              	.LFB73:
 373:src/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 374:src/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 375:src/stm32f1xx_hal_cortex.c ****  /* Get priority for Cortex-M system or device specific interrupts */
 376:src/stm32f1xx_hal_cortex.c ****   NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 377:src/stm32f1xx_hal_cortex.c **** }
 378:src/stm32f1xx_hal_cortex.c **** 
 379:src/stm32f1xx_hal_cortex.c **** /**
 380:src/stm32f1xx_hal_cortex.c ****   * @brief  Sets Pending bit of an external interrupt.
 381:src/stm32f1xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 382:src/stm32f1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 383:src/stm32f1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 384:src/stm32f1xx_hal_cortex.c ****   * @retval None
 385:src/stm32f1xx_hal_cortex.c ****   */
 386:src/stm32f1xx_hal_cortex.c **** void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
 387:src/stm32f1xx_hal_cortex.c **** {
 637              		.loc 1 387 0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 641              		@ link register save eliminated.
 642              	.LVL38:
 643              	.LBB96:
 644              	.LBB97:
1587:../cmsiscore/inc/core_cm3.h ****   {
 645              		.loc 2 1587 0
 646 018c 0028     		cmp	r0, #0	@ IRQn
 647              	.LVL39:
 648 018e 09DB     		blt	.L39	@,
1589:../cmsiscore/inc/core_cm3.h ****   }
 649              		.loc 2 1589 0
 650 0190 0122     		movs	r2, #1	@ tmp120,
 651 0192 4309     		lsrs	r3, r0, #5	@ _5, IRQn,
 652 0194 00F01F00 		and	r0, r0, #31	@ tmp119, IRQn,
 653 0198 02FA00F0 		lsl	r0, r2, r0	@ _9, tmp120, tmp119
 654 019c 024A     		ldr	r2, .L41	@ tmp121,
 655 019e 4033     		adds	r3, r3, #64	@ tmp122, _5,
 656 01a0 42F82300 		str	r0, [r2, r3, lsl #2]	@ _9, MEM[(struct NVIC_Type *)3758153984B].ISPR
 657              	.LVL40:
 658              	.L39:
ARM GAS  /tmp/cc4CJeQn.s 			page 68


 659 01a4 7047     		bx	lr	@
 660              	.L42:
 661 01a6 00BF     		.align	2
 662              	.L41:
 663 01a8 00E100E0 		.word	-536813312
 664              	.LBE97:
 665              	.LBE96:
 666              		.cfi_endproc
 667              	.LFE73:
 668              		.size	HAL_NVIC_SetPendingIRQ, .-HAL_NVIC_SetPendingIRQ
 669              		.align	1
 670              		.global	HAL_NVIC_GetPendingIRQ
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu softvfp
 675              		.type	HAL_NVIC_GetPendingIRQ, %function
 676              	HAL_NVIC_GetPendingIRQ:
 677              	.LFB74:
 388:src/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 389:src/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 390:src/stm32f1xx_hal_cortex.c ****   
 391:src/stm32f1xx_hal_cortex.c ****   /* Set interrupt pending */
 392:src/stm32f1xx_hal_cortex.c ****   NVIC_SetPendingIRQ(IRQn);
 393:src/stm32f1xx_hal_cortex.c **** }
 394:src/stm32f1xx_hal_cortex.c **** 
 395:src/stm32f1xx_hal_cortex.c **** /**
 396:src/stm32f1xx_hal_cortex.c ****   * @brief  Gets Pending Interrupt (reads the pending register in the NVIC 
 397:src/stm32f1xx_hal_cortex.c ****   *         and returns the pending bit for the specified interrupt).
 398:src/stm32f1xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 399:src/stm32f1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 400:src/stm32f1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 401:src/stm32f1xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 402:src/stm32f1xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 403:src/stm32f1xx_hal_cortex.c ****   */
 404:src/stm32f1xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
 405:src/stm32f1xx_hal_cortex.c **** {
 678              		.loc 1 405 0
 679              		.cfi_startproc
 680              		@ args = 0, pretend = 0, frame = 0
 681              		@ frame_needed = 0, uses_anonymous_args = 0
 682              		@ link register save eliminated.
 683              	.LVL41:
 684              	.LBB100:
 685              	.LBB101:
1568:../cmsiscore/inc/core_cm3.h ****   {
 686              		.loc 2 1568 0
 687 01ac 031E     		subs	r3, r0, #0	@ IRQn, IRQn
1570:../cmsiscore/inc/core_cm3.h ****   }
 688              		.loc 2 1570 0
 689 01ae A1BF     		itttt	ge
 690 01b0 5A09     		lsrge	r2, r3, #5	@ _6, IRQn,
 691 01b2 0649     		ldrge	r1, .L46	@ tmp119,
 692 01b4 4032     		addge	r2, r2, #64	@ tmp120, _6,
 693 01b6 51F82200 		ldrge	r0, [r1, r2, lsl #2]	@ _7, MEM[(struct NVIC_Type *)3758153984B].ISPR
 694              	.LVL42:
 695 01ba A3BF     		ittte	ge
ARM GAS  /tmp/cc4CJeQn.s 			page 69


 696 01bc 03F01F03 		andge	r3, r3, #31	@ tmp123, IRQn,
 697 01c0 D840     		lsrge	r0, r0, r3	@ tmp124, _7, tmp123
 698 01c2 00F00100 		andge	r0, r0, #1	@ <retval>, tmp124,
1574:../cmsiscore/inc/core_cm3.h ****   }
 699              		.loc 2 1574 0
 700 01c6 0020     		movlt	r0, #0	@ <retval>,
 701              	.LVL43:
 702              	.LBE101:
 703              	.LBE100:
 406:src/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 407:src/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 408:src/stm32f1xx_hal_cortex.c **** 
 409:src/stm32f1xx_hal_cortex.c ****   /* Return 1 if pending else 0 */
 410:src/stm32f1xx_hal_cortex.c ****   return NVIC_GetPendingIRQ(IRQn);
 411:src/stm32f1xx_hal_cortex.c **** }
 704              		.loc 1 411 0
 705 01c8 7047     		bx	lr	@
 706              	.L47:
 707 01ca 00BF     		.align	2
 708              	.L46:
 709 01cc 00E100E0 		.word	-536813312
 710              		.cfi_endproc
 711              	.LFE74:
 712              		.size	HAL_NVIC_GetPendingIRQ, .-HAL_NVIC_GetPendingIRQ
 713              		.align	1
 714              		.global	HAL_NVIC_ClearPendingIRQ
 715              		.syntax unified
 716              		.thumb
 717              		.thumb_func
 718              		.fpu softvfp
 719              		.type	HAL_NVIC_ClearPendingIRQ, %function
 720              	HAL_NVIC_ClearPendingIRQ:
 721              	.LFB75:
 412:src/stm32f1xx_hal_cortex.c **** 
 413:src/stm32f1xx_hal_cortex.c **** /**
 414:src/stm32f1xx_hal_cortex.c ****   * @brief  Clears the pending bit of an external interrupt.
 415:src/stm32f1xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 416:src/stm32f1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 417:src/stm32f1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 418:src/stm32f1xx_hal_cortex.c ****   * @retval None
 419:src/stm32f1xx_hal_cortex.c ****   */
 420:src/stm32f1xx_hal_cortex.c **** void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 421:src/stm32f1xx_hal_cortex.c **** {
 722              		.loc 1 421 0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 0
 725              		@ frame_needed = 0, uses_anonymous_args = 0
 726              		@ link register save eliminated.
 727              	.LVL44:
 728              	.LBB104:
 729              	.LBB105:
1602:../cmsiscore/inc/core_cm3.h ****   {
 730              		.loc 2 1602 0
 731 01d0 0028     		cmp	r0, #0	@ IRQn
 732              	.LVL45:
 733 01d2 09DB     		blt	.L48	@,
1604:../cmsiscore/inc/core_cm3.h ****   }
ARM GAS  /tmp/cc4CJeQn.s 			page 70


 734              		.loc 2 1604 0
 735 01d4 0122     		movs	r2, #1	@ tmp120,
 736 01d6 4309     		lsrs	r3, r0, #5	@ _5, IRQn,
 737 01d8 00F01F00 		and	r0, r0, #31	@ tmp119, IRQn,
 738 01dc 02FA00F0 		lsl	r0, r2, r0	@ _9, tmp120, tmp119
 739 01e0 024A     		ldr	r2, .L50	@ tmp121,
 740 01e2 6033     		adds	r3, r3, #96	@ tmp122, _5,
 741 01e4 42F82300 		str	r0, [r2, r3, lsl #2]	@ _9, MEM[(struct NVIC_Type *)3758153984B].ICPR
 742              	.LVL46:
 743              	.L48:
 744 01e8 7047     		bx	lr	@
 745              	.L51:
 746 01ea 00BF     		.align	2
 747              	.L50:
 748 01ec 00E100E0 		.word	-536813312
 749              	.LBE105:
 750              	.LBE104:
 751              		.cfi_endproc
 752              	.LFE75:
 753              		.size	HAL_NVIC_ClearPendingIRQ, .-HAL_NVIC_ClearPendingIRQ
 754              		.align	1
 755              		.global	HAL_NVIC_GetActive
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 759              		.fpu softvfp
 760              		.type	HAL_NVIC_GetActive, %function
 761              	HAL_NVIC_GetActive:
 762              	.LFB76:
 422:src/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 423:src/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 424:src/stm32f1xx_hal_cortex.c **** 
 425:src/stm32f1xx_hal_cortex.c ****   /* Clear pending interrupt */
 426:src/stm32f1xx_hal_cortex.c ****   NVIC_ClearPendingIRQ(IRQn);
 427:src/stm32f1xx_hal_cortex.c **** }
 428:src/stm32f1xx_hal_cortex.c **** 
 429:src/stm32f1xx_hal_cortex.c **** /**
 430:src/stm32f1xx_hal_cortex.c ****   * @brief Gets active interrupt ( reads the active register in NVIC and returns the active bit).
 431:src/stm32f1xx_hal_cortex.c ****   * @param IRQn External interrupt number
 432:src/stm32f1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 433:src/stm32f1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 434:src/stm32f1xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 435:src/stm32f1xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 436:src/stm32f1xx_hal_cortex.c ****   */
 437:src/stm32f1xx_hal_cortex.c **** uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
 438:src/stm32f1xx_hal_cortex.c **** {
 763              		.loc 1 438 0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767              		@ link register save eliminated.
 768              	.LVL47:
 769              	.LBB108:
 770              	.LBB109:
1619:../cmsiscore/inc/core_cm3.h ****   {
 771              		.loc 2 1619 0
 772 01f0 031E     		subs	r3, r0, #0	@ IRQn, IRQn
ARM GAS  /tmp/cc4CJeQn.s 			page 71


1621:../cmsiscore/inc/core_cm3.h ****   }
 773              		.loc 2 1621 0
 774 01f2 A1BF     		itttt	ge
 775 01f4 5A09     		lsrge	r2, r3, #5	@ _6, IRQn,
 776 01f6 0649     		ldrge	r1, .L55	@ tmp119,
 777 01f8 8032     		addge	r2, r2, #128	@ tmp120, _6,
 778 01fa 51F82200 		ldrge	r0, [r1, r2, lsl #2]	@ _7, MEM[(struct NVIC_Type *)3758153984B].IABR
 779              	.LVL48:
 780 01fe A3BF     		ittte	ge
 781 0200 03F01F03 		andge	r3, r3, #31	@ tmp123, IRQn,
 782 0204 D840     		lsrge	r0, r0, r3	@ tmp124, _7, tmp123
 783 0206 00F00100 		andge	r0, r0, #1	@ <retval>, tmp124,
1625:../cmsiscore/inc/core_cm3.h ****   }
 784              		.loc 2 1625 0
 785 020a 0020     		movlt	r0, #0	@ <retval>,
 786              	.LVL49:
 787              	.LBE109:
 788              	.LBE108:
 439:src/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 440:src/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 441:src/stm32f1xx_hal_cortex.c **** 
 442:src/stm32f1xx_hal_cortex.c ****   /* Return 1 if active else 0 */
 443:src/stm32f1xx_hal_cortex.c ****   return NVIC_GetActive(IRQn);
 444:src/stm32f1xx_hal_cortex.c **** }
 789              		.loc 1 444 0
 790 020c 7047     		bx	lr	@
 791              	.L56:
 792 020e 00BF     		.align	2
 793              	.L55:
 794 0210 00E100E0 		.word	-536813312
 795              		.cfi_endproc
 796              	.LFE76:
 797              		.size	HAL_NVIC_GetActive, .-HAL_NVIC_GetActive
 798              		.align	1
 799              		.global	HAL_SYSTICK_CLKSourceConfig
 800              		.syntax unified
 801              		.thumb
 802              		.thumb_func
 803              		.fpu softvfp
 804              		.type	HAL_SYSTICK_CLKSourceConfig, %function
 805              	HAL_SYSTICK_CLKSourceConfig:
 806              	.LFB77:
 445:src/stm32f1xx_hal_cortex.c **** 
 446:src/stm32f1xx_hal_cortex.c **** /**
 447:src/stm32f1xx_hal_cortex.c ****   * @brief  Configures the SysTick clock source.
 448:src/stm32f1xx_hal_cortex.c ****   * @param  CLKSource: specifies the SysTick clock source.
 449:src/stm32f1xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 450:src/stm32f1xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock 
 451:src/stm32f1xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
 452:src/stm32f1xx_hal_cortex.c ****   * @retval None
 453:src/stm32f1xx_hal_cortex.c ****   */
 454:src/stm32f1xx_hal_cortex.c **** void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
 455:src/stm32f1xx_hal_cortex.c **** {
 807              		.loc 1 455 0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 0
 810              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc4CJeQn.s 			page 72


 811              		@ link register save eliminated.
 812              	.LVL50:
 813 0214 044B     		ldr	r3, .L61	@ tmp119,
 456:src/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 457:src/stm32f1xx_hal_cortex.c ****   assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 458:src/stm32f1xx_hal_cortex.c ****   if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 814              		.loc 1 458 0
 815 0216 0428     		cmp	r0, #4	@ CLKSource,
 459:src/stm32f1xx_hal_cortex.c ****   {
 460:src/stm32f1xx_hal_cortex.c ****     SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 816              		.loc 1 460 0
 817 0218 1A68     		ldr	r2, [r3]	@ _4,
 818 021a 0CBF     		ite	eq
 819 021c 42F00402 		orreq	r2, r2, #4	@ _5, _4,
 461:src/stm32f1xx_hal_cortex.c ****   }
 462:src/stm32f1xx_hal_cortex.c ****   else
 463:src/stm32f1xx_hal_cortex.c ****   {
 464:src/stm32f1xx_hal_cortex.c ****     SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 820              		.loc 1 464 0
 821 0220 22F00402 		bicne	r2, r2, #4	@ _8, _7,
 822 0224 1A60     		str	r2, [r3]	@ _8,
 823 0226 7047     		bx	lr	@
 824              	.L62:
 825              		.align	2
 826              	.L61:
 827 0228 10E000E0 		.word	-536813552
 828              		.cfi_endproc
 829              	.LFE77:
 830              		.size	HAL_SYSTICK_CLKSourceConfig, .-HAL_SYSTICK_CLKSourceConfig
 831              		.align	1
 832              		.weak	HAL_SYSTICK_Callback
 833              		.syntax unified
 834              		.thumb
 835              		.thumb_func
 836              		.fpu softvfp
 837              		.type	HAL_SYSTICK_Callback, %function
 838              	HAL_SYSTICK_Callback:
 839              	.LFB79:
 465:src/stm32f1xx_hal_cortex.c ****   }
 466:src/stm32f1xx_hal_cortex.c **** }
 467:src/stm32f1xx_hal_cortex.c **** 
 468:src/stm32f1xx_hal_cortex.c **** /**
 469:src/stm32f1xx_hal_cortex.c ****   * @brief  This function handles SYSTICK interrupt request.
 470:src/stm32f1xx_hal_cortex.c ****   * @retval None
 471:src/stm32f1xx_hal_cortex.c ****   */
 472:src/stm32f1xx_hal_cortex.c **** void HAL_SYSTICK_IRQHandler(void)
 473:src/stm32f1xx_hal_cortex.c **** {
 474:src/stm32f1xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 475:src/stm32f1xx_hal_cortex.c **** }
 476:src/stm32f1xx_hal_cortex.c **** 
 477:src/stm32f1xx_hal_cortex.c **** /**
 478:src/stm32f1xx_hal_cortex.c ****   * @brief  SYSTICK callback.
 479:src/stm32f1xx_hal_cortex.c ****   * @retval None
 480:src/stm32f1xx_hal_cortex.c ****   */
 481:src/stm32f1xx_hal_cortex.c **** __weak void HAL_SYSTICK_Callback(void)
 482:src/stm32f1xx_hal_cortex.c **** {
 840              		.loc 1 482 0
ARM GAS  /tmp/cc4CJeQn.s 			page 73


 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 0
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 844              		@ link register save eliminated.
 845 022c 7047     		bx	lr	@
 846              		.cfi_endproc
 847              	.LFE79:
 848              		.size	HAL_SYSTICK_Callback, .-HAL_SYSTICK_Callback
 849              		.align	1
 850              		.global	HAL_SYSTICK_IRQHandler
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 854              		.fpu softvfp
 855              		.type	HAL_SYSTICK_IRQHandler, %function
 856              	HAL_SYSTICK_IRQHandler:
 857              	.LFB78:
 473:src/stm32f1xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 858              		.loc 1 473 0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 0
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 473:src/stm32f1xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 862              		.loc 1 473 0
 863 022e 08B5     		push	{r3, lr}	@
 864              	.LCFI2:
 865              		.cfi_def_cfa_offset 8
 866              		.cfi_offset 3, -8
 867              		.cfi_offset 14, -4
 474:src/stm32f1xx_hal_cortex.c **** }
 868              		.loc 1 474 0
 869 0230 FFF7FEFF 		bl	HAL_SYSTICK_Callback	@
 870              	.LVL51:
 871 0234 08BD     		pop	{r3, pc}	@
 872              		.cfi_endproc
 873              	.LFE78:
 874              		.size	HAL_SYSTICK_IRQHandler, .-HAL_SYSTICK_IRQHandler
 875              	.Letext0:
 876              		.file 4 "../cmsisstm32f1xx/inc/stm32f103x6.h"
 877              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 878              		.file 6 "/usr/include/newlib/sys/_stdint.h"
 879              		.file 7 "../cmsisstm32f1xx/inc/system_stm32f1xx.h"
 880              		.file 8 "./inc/stm32f1xx_hal.h"
 881 0236 00BF     		.section	.debug_info,"",%progbits
 882              	.Ldebug_info0:
 883 0000 300D0000 		.4byte	0xd30
 884 0004 0200     		.2byte	0x2
 885 0006 00000000 		.4byte	.Ldebug_abbrev0
 886 000a 04       		.byte	0x4
 887 000b 01       		.uleb128 0x1
 888 000c 38060000 		.4byte	.LASF153
 889 0010 0C       		.byte	0xc
 890 0011 04050000 		.4byte	.LASF154
 891 0015 70050000 		.4byte	.LASF155
 892 0019 00000000 		.4byte	.Ltext0
 893 001d 36020000 		.4byte	.Letext0
 894 0021 00000000 		.4byte	.Ldebug_line0
ARM GAS  /tmp/cc4CJeQn.s 			page 74


 895 0025 02       		.uleb128 0x2
 896 0026 01       		.byte	0x1
 897 0027 4C010000 		.4byte	0x14c
 898 002b 04       		.byte	0x4
 899 002c 46       		.byte	0x46
 900 002d 4C010000 		.4byte	0x14c
 901 0031 03       		.uleb128 0x3
 902 0032 60070000 		.4byte	.LASF0
 903 0036 72       		.sleb128 -14
 904 0037 03       		.uleb128 0x3
 905 0038 42030000 		.4byte	.LASF1
 906 003c 73       		.sleb128 -13
 907 003d 03       		.uleb128 0x3
 908 003e D6020000 		.4byte	.LASF2
 909 0042 74       		.sleb128 -12
 910 0043 03       		.uleb128 0x3
 911 0044 4D020000 		.4byte	.LASF3
 912 0048 75       		.sleb128 -11
 913 0049 03       		.uleb128 0x3
 914 004a FA060000 		.4byte	.LASF4
 915 004e 76       		.sleb128 -10
 916 004f 03       		.uleb128 0x3
 917 0050 64050000 		.4byte	.LASF5
 918 0054 7B       		.sleb128 -5
 919 0055 03       		.uleb128 0x3
 920 0056 E3070000 		.4byte	.LASF6
 921 005a 7C       		.sleb128 -4
 922 005b 03       		.uleb128 0x3
 923 005c 07020000 		.4byte	.LASF7
 924 0060 7E       		.sleb128 -2
 925 0061 03       		.uleb128 0x3
 926 0062 E8030000 		.4byte	.LASF8
 927 0066 7F       		.sleb128 -1
 928 0067 04       		.uleb128 0x4
 929 0068 EA000000 		.4byte	.LASF9
 930 006c 00       		.byte	0
 931 006d 04       		.uleb128 0x4
 932 006e 4E000000 		.4byte	.LASF10
 933 0072 01       		.byte	0x1
 934 0073 04       		.uleb128 0x4
 935 0074 9E070000 		.4byte	.LASF11
 936 0078 02       		.byte	0x2
 937 0079 04       		.uleb128 0x4
 938 007a 8C080000 		.4byte	.LASF12
 939 007e 03       		.byte	0x3
 940 007f 04       		.uleb128 0x4
 941 0080 D0060000 		.4byte	.LASF13
 942 0084 04       		.byte	0x4
 943 0085 04       		.uleb128 0x4
 944 0086 AE080000 		.4byte	.LASF14
 945 008a 05       		.byte	0x5
 946 008b 04       		.uleb128 0x4
 947 008c 1B080000 		.4byte	.LASF15
 948 0090 06       		.byte	0x6
 949 0091 04       		.uleb128 0x4
 950 0092 D0080000 		.4byte	.LASF16
 951 0096 07       		.byte	0x7
ARM GAS  /tmp/cc4CJeQn.s 			page 75


 952 0097 04       		.uleb128 0x4
 953 0098 D5000000 		.4byte	.LASF17
 954 009c 08       		.byte	0x8
 955 009d 04       		.uleb128 0x4
 956 009e 85040000 		.4byte	.LASF18
 957 00a2 09       		.byte	0x9
 958 00a3 04       		.uleb128 0x4
 959 00a4 D9050000 		.4byte	.LASF19
 960 00a8 0A       		.byte	0xa
 961 00a9 04       		.uleb128 0x4
 962 00aa 1F050000 		.4byte	.LASF20
 963 00ae 0B       		.byte	0xb
 964 00af 04       		.uleb128 0x4
 965 00b0 31040000 		.4byte	.LASF21
 966 00b4 0C       		.byte	0xc
 967 00b5 04       		.uleb128 0x4
 968 00b6 10060000 		.4byte	.LASF22
 969 00ba 0D       		.byte	0xd
 970 00bb 04       		.uleb128 0x4
 971 00bc 18020000 		.4byte	.LASF23
 972 00c0 0E       		.byte	0xe
 973 00c1 04       		.uleb128 0x4
 974 00c2 2A030000 		.4byte	.LASF24
 975 00c6 0F       		.byte	0xf
 976 00c7 04       		.uleb128 0x4
 977 00c8 8B070000 		.4byte	.LASF25
 978 00cc 10       		.byte	0x10
 979 00cd 04       		.uleb128 0x4
 980 00ce 6C080000 		.4byte	.LASF26
 981 00d2 11       		.byte	0x11
 982 00d3 04       		.uleb128 0x4
 983 00d4 FB010000 		.4byte	.LASF27
 984 00d8 12       		.byte	0x12
 985 00d9 04       		.uleb128 0x4
 986 00da B8050000 		.4byte	.LASF28
 987 00de 13       		.byte	0x13
 988 00df 04       		.uleb128 0x4
 989 00e0 23060000 		.4byte	.LASF29
 990 00e4 14       		.byte	0x14
 991 00e5 04       		.uleb128 0x4
 992 00e6 A1000000 		.4byte	.LASF30
 993 00ea 15       		.byte	0x15
 994 00eb 04       		.uleb128 0x4
 995 00ec A0080000 		.4byte	.LASF31
 996 00f0 16       		.byte	0x16
 997 00f1 04       		.uleb128 0x4
 998 00f2 BD010000 		.4byte	.LASF32
 999 00f6 17       		.byte	0x17
 1000 00f7 04       		.uleb128 0x4
 1001 00f8 36070000 		.4byte	.LASF33
 1002 00fc 18       		.byte	0x18
 1003 00fd 04       		.uleb128 0x4
 1004 00fe AA070000 		.4byte	.LASF34
 1005 0102 19       		.byte	0x19
 1006 0103 04       		.uleb128 0x4
 1007 0104 57000000 		.4byte	.LASF35
 1008 0108 1A       		.byte	0x1a
ARM GAS  /tmp/cc4CJeQn.s 			page 76


 1009 0109 04       		.uleb128 0x4
 1010 010a F5030000 		.4byte	.LASF36
 1011 010e 1B       		.byte	0x1b
 1012 010f 04       		.uleb128 0x4
 1013 0110 11080000 		.4byte	.LASF37
 1014 0114 1C       		.byte	0x1c
 1015 0115 04       		.uleb128 0x4
 1016 0116 C6080000 		.4byte	.LASF38
 1017 011a 1D       		.byte	0x1d
 1018 011b 04       		.uleb128 0x4
 1019 011c 69000000 		.4byte	.LASF39
 1020 0120 1F       		.byte	0x1f
 1021 0121 04       		.uleb128 0x4
 1022 0122 7F080000 		.4byte	.LASF40
 1023 0126 20       		.byte	0x20
 1024 0127 04       		.uleb128 0x4
 1025 0128 71030000 		.4byte	.LASF41
 1026 012c 23       		.byte	0x23
 1027 012d 04       		.uleb128 0x4
 1028 012e 26080000 		.4byte	.LASF42
 1029 0132 25       		.byte	0x25
 1030 0133 04       		.uleb128 0x4
 1031 0134 EE060000 		.4byte	.LASF43
 1032 0138 26       		.byte	0x26
 1033 0139 04       		.uleb128 0x4
 1034 013a 5C030000 		.4byte	.LASF44
 1035 013e 28       		.byte	0x28
 1036 013f 04       		.uleb128 0x4
 1037 0140 C6000000 		.4byte	.LASF45
 1038 0144 29       		.byte	0x29
 1039 0145 04       		.uleb128 0x4
 1040 0146 B7070000 		.4byte	.LASF46
 1041 014a 2A       		.byte	0x2a
 1042 014b 00       		.byte	0
 1043 014c 05       		.uleb128 0x5
 1044 014d 01       		.byte	0x1
 1045 014e 06       		.byte	0x6
 1046 014f 2D010000 		.4byte	.LASF49
 1047 0153 06       		.uleb128 0x6
 1048 0154 DB060000 		.4byte	.LASF47
 1049 0158 04       		.byte	0x4
 1050 0159 79       		.byte	0x79
 1051 015a 25000000 		.4byte	0x25
 1052 015e 06       		.uleb128 0x6
 1053 015f 76000000 		.4byte	.LASF48
 1054 0163 05       		.byte	0x5
 1055 0164 1D       		.byte	0x1d
 1056 0165 69010000 		.4byte	0x169
 1057 0169 05       		.uleb128 0x5
 1058 016a 01       		.byte	0x1
 1059 016b 08       		.byte	0x8
 1060 016c A4050000 		.4byte	.LASF50
 1061 0170 05       		.uleb128 0x5
 1062 0171 02       		.byte	0x2
 1063 0172 05       		.byte	0x5
 1064 0173 F7050000 		.4byte	.LASF51
 1065 0177 05       		.uleb128 0x5
ARM GAS  /tmp/cc4CJeQn.s 			page 77


 1066 0178 02       		.byte	0x2
 1067 0179 07       		.byte	0x7
 1068 017a 07010000 		.4byte	.LASF52
 1069 017e 06       		.uleb128 0x6
 1070 017f 74070000 		.4byte	.LASF53
 1071 0183 05       		.byte	0x5
 1072 0184 3F       		.byte	0x3f
 1073 0185 89010000 		.4byte	0x189
 1074 0189 05       		.uleb128 0x5
 1075 018a 04       		.byte	0x4
 1076 018b 05       		.byte	0x5
 1077 018c 7E010000 		.4byte	.LASF54
 1078 0190 06       		.uleb128 0x6
 1079 0191 42020000 		.4byte	.LASF55
 1080 0195 05       		.byte	0x5
 1081 0196 41       		.byte	0x41
 1082 0197 9B010000 		.4byte	0x19b
 1083 019b 05       		.uleb128 0x5
 1084 019c 04       		.byte	0x4
 1085 019d 07       		.byte	0x7
 1086 019e 00030000 		.4byte	.LASF56
 1087 01a2 05       		.uleb128 0x5
 1088 01a3 08       		.byte	0x8
 1089 01a4 05       		.byte	0x5
 1090 01a5 1F010000 		.4byte	.LASF57
 1091 01a9 05       		.uleb128 0x5
 1092 01aa 08       		.byte	0x8
 1093 01ab 07       		.byte	0x7
 1094 01ac AF000000 		.4byte	.LASF58
 1095 01b0 07       		.uleb128 0x7
 1096 01b1 04       		.byte	0x4
 1097 01b2 05       		.byte	0x5
 1098 01b3 696E7400 		.ascii	"int\000"
 1099 01b7 05       		.uleb128 0x5
 1100 01b8 04       		.byte	0x4
 1101 01b9 07       		.byte	0x7
 1102 01ba A4020000 		.4byte	.LASF59
 1103 01be 06       		.uleb128 0x6
 1104 01bf 3B080000 		.4byte	.LASF60
 1105 01c3 06       		.byte	0x6
 1106 01c4 18       		.byte	0x18
 1107 01c5 5E010000 		.4byte	0x15e
 1108 01c9 08       		.uleb128 0x8
 1109 01ca BE010000 		.4byte	0x1be
 1110 01ce 09       		.uleb128 0x9
 1111 01cf BE010000 		.4byte	0x1be
 1112 01d3 06       		.uleb128 0x6
 1113 01d4 9C050000 		.4byte	.LASF61
 1114 01d8 06       		.byte	0x6
 1115 01d9 2C       		.byte	0x2c
 1116 01da 7E010000 		.4byte	0x17e
 1117 01de 08       		.uleb128 0x8
 1118 01df D3010000 		.4byte	0x1d3
 1119 01e3 06       		.uleb128 0x6
 1120 01e4 E5060000 		.4byte	.LASF62
 1121 01e8 06       		.byte	0x6
 1122 01e9 30       		.byte	0x30
ARM GAS  /tmp/cc4CJeQn.s 			page 78


 1123 01ea 90010000 		.4byte	0x190
 1124 01ee 08       		.uleb128 0x8
 1125 01ef E3010000 		.4byte	0x1e3
 1126 01f3 09       		.uleb128 0x9
 1127 01f4 EE010000 		.4byte	0x1ee
 1128 01f8 0A       		.uleb128 0xa
 1129 01f9 040E     		.2byte	0xe04
 1130 01fb 02       		.byte	0x2
 1131 01fc 5401     		.2byte	0x154
 1132 01fe D0020000 		.4byte	0x2d0
 1133 0202 0B       		.uleb128 0xb
 1134 0203 01060000 		.4byte	.LASF63
 1135 0207 02       		.byte	0x2
 1136 0208 5601     		.2byte	0x156
 1137 020a E0020000 		.4byte	0x2e0
 1138 020e 02       		.byte	0x2
 1139 020f 23       		.byte	0x23
 1140 0210 00       		.uleb128 0
 1141 0211 0B       		.uleb128 0xb
 1142 0212 32050000 		.4byte	.LASF64
 1143 0216 02       		.byte	0x2
 1144 0217 5701     		.2byte	0x157
 1145 0219 EC020000 		.4byte	0x2ec
 1146 021d 02       		.byte	0x2
 1147 021e 23       		.byte	0x23
 1148 021f 20       		.uleb128 0x20
 1149 0220 0B       		.uleb128 0xb
 1150 0221 AA040000 		.4byte	.LASF65
 1151 0225 02       		.byte	0x2
 1152 0226 5801     		.2byte	0x158
 1153 0228 E0020000 		.4byte	0x2e0
 1154 022c 03       		.byte	0x3
 1155 022d 23       		.byte	0x23
 1156 022e 8001     		.uleb128 0x80
 1157 0230 0B       		.uleb128 0xb
 1158 0231 5E080000 		.4byte	.LASF66
 1159 0235 02       		.byte	0x2
 1160 0236 5901     		.2byte	0x159
 1161 0238 EC020000 		.4byte	0x2ec
 1162 023c 03       		.byte	0x3
 1163 023d 23       		.byte	0x23
 1164 023e A001     		.uleb128 0xa0
 1165 0240 0B       		.uleb128 0xb
 1166 0241 F4000000 		.4byte	.LASF67
 1167 0245 02       		.byte	0x2
 1168 0246 5A01     		.2byte	0x15a
 1169 0248 E0020000 		.4byte	0x2e0
 1170 024c 03       		.byte	0x3
 1171 024d 23       		.byte	0x23
 1172 024e 8002     		.uleb128 0x100
 1173 0250 0B       		.uleb128 0xb
 1174 0251 3C050000 		.4byte	.LASF68
 1175 0255 02       		.byte	0x2
 1176 0256 5B01     		.2byte	0x15b
 1177 0258 EC020000 		.4byte	0x2ec
 1178 025c 03       		.byte	0x3
 1179 025d 23       		.byte	0x23
ARM GAS  /tmp/cc4CJeQn.s 			page 79


 1180 025e A002     		.uleb128 0x120
 1181 0260 0B       		.uleb128 0xb
 1182 0261 00000000 		.4byte	.LASF69
 1183 0265 02       		.byte	0x2
 1184 0266 5C01     		.2byte	0x15c
 1185 0268 E0020000 		.4byte	0x2e0
 1186 026c 03       		.byte	0x3
 1187 026d 23       		.byte	0x23
 1188 026e 8003     		.uleb128 0x180
 1189 0270 0B       		.uleb128 0xb
 1190 0271 46050000 		.4byte	.LASF70
 1191 0275 02       		.byte	0x2
 1192 0276 5D01     		.2byte	0x15d
 1193 0278 EC020000 		.4byte	0x2ec
 1194 027c 03       		.byte	0x3
 1195 027d 23       		.byte	0x23
 1196 027e A003     		.uleb128 0x1a0
 1197 0280 0B       		.uleb128 0xb
 1198 0281 6B040000 		.4byte	.LASF71
 1199 0285 02       		.byte	0x2
 1200 0286 5E01     		.2byte	0x15e
 1201 0288 E0020000 		.4byte	0x2e0
 1202 028c 03       		.byte	0x3
 1203 028d 23       		.byte	0x23
 1204 028e 8004     		.uleb128 0x200
 1205 0290 0B       		.uleb128 0xb
 1206 0291 50050000 		.4byte	.LASF72
 1207 0295 02       		.byte	0x2
 1208 0296 5F01     		.2byte	0x15f
 1209 0298 FC020000 		.4byte	0x2fc
 1210 029c 03       		.byte	0x3
 1211 029d 23       		.byte	0x23
 1212 029e A004     		.uleb128 0x220
 1213 02a0 0C       		.uleb128 0xc
 1214 02a1 495000   		.ascii	"IP\000"
 1215 02a4 02       		.byte	0x2
 1216 02a5 6001     		.2byte	0x160
 1217 02a7 1C030000 		.4byte	0x31c
 1218 02ab 03       		.byte	0x3
 1219 02ac 23       		.byte	0x23
 1220 02ad 8006     		.uleb128 0x300
 1221 02af 0B       		.uleb128 0xb
 1222 02b0 5A050000 		.4byte	.LASF73
 1223 02b4 02       		.byte	0x2
 1224 02b5 6101     		.2byte	0x161
 1225 02b7 21030000 		.4byte	0x321
 1226 02bb 03       		.byte	0x3
 1227 02bc 23       		.byte	0x23
 1228 02bd F007     		.uleb128 0x3f0
 1229 02bf 0B       		.uleb128 0xb
 1230 02c0 67080000 		.4byte	.LASF74
 1231 02c4 02       		.byte	0x2
 1232 02c5 6201     		.2byte	0x162
 1233 02c7 EE010000 		.4byte	0x1ee
 1234 02cb 03       		.byte	0x3
 1235 02cc 23       		.byte	0x23
 1236 02cd 801C     		.uleb128 0xe00
ARM GAS  /tmp/cc4CJeQn.s 			page 80


 1237 02cf 00       		.byte	0
 1238 02d0 0D       		.uleb128 0xd
 1239 02d1 EE010000 		.4byte	0x1ee
 1240 02d5 E0020000 		.4byte	0x2e0
 1241 02d9 0E       		.uleb128 0xe
 1242 02da E5020000 		.4byte	0x2e5
 1243 02de 07       		.byte	0x7
 1244 02df 00       		.byte	0
 1245 02e0 08       		.uleb128 0x8
 1246 02e1 D0020000 		.4byte	0x2d0
 1247 02e5 05       		.uleb128 0x5
 1248 02e6 04       		.byte	0x4
 1249 02e7 07       		.byte	0x7
 1250 02e8 52040000 		.4byte	.LASF75
 1251 02ec 0D       		.uleb128 0xd
 1252 02ed E3010000 		.4byte	0x1e3
 1253 02f1 FC020000 		.4byte	0x2fc
 1254 02f5 0E       		.uleb128 0xe
 1255 02f6 E5020000 		.4byte	0x2e5
 1256 02fa 17       		.byte	0x17
 1257 02fb 00       		.byte	0
 1258 02fc 0D       		.uleb128 0xd
 1259 02fd E3010000 		.4byte	0x1e3
 1260 0301 0C030000 		.4byte	0x30c
 1261 0305 0E       		.uleb128 0xe
 1262 0306 E5020000 		.4byte	0x2e5
 1263 030a 37       		.byte	0x37
 1264 030b 00       		.byte	0
 1265 030c 0D       		.uleb128 0xd
 1266 030d C9010000 		.4byte	0x1c9
 1267 0311 1C030000 		.4byte	0x31c
 1268 0315 0E       		.uleb128 0xe
 1269 0316 E5020000 		.4byte	0x2e5
 1270 031a EF       		.byte	0xef
 1271 031b 00       		.byte	0
 1272 031c 08       		.uleb128 0x8
 1273 031d 0C030000 		.4byte	0x30c
 1274 0321 0D       		.uleb128 0xd
 1275 0322 E3010000 		.4byte	0x1e3
 1276 0326 32030000 		.4byte	0x332
 1277 032a 0F       		.uleb128 0xf
 1278 032b E5020000 		.4byte	0x2e5
 1279 032f 8302     		.2byte	0x283
 1280 0331 00       		.byte	0
 1281 0332 10       		.uleb128 0x10
 1282 0333 06060000 		.4byte	.LASF76
 1283 0337 02       		.byte	0x2
 1284 0338 6301     		.2byte	0x163
 1285 033a F8010000 		.4byte	0x1f8
 1286 033e 11       		.uleb128 0x11
 1287 033f 8C       		.byte	0x8c
 1288 0340 02       		.byte	0x2
 1289 0341 7601     		.2byte	0x176
 1290 0343 84040000 		.4byte	0x484
 1291 0347 0B       		.uleb128 0xb
 1292 0348 FE040000 		.4byte	.LASF77
 1293 034c 02       		.byte	0x2
ARM GAS  /tmp/cc4CJeQn.s 			page 81


 1294 034d 7801     		.2byte	0x178
 1295 034f F3010000 		.4byte	0x1f3
 1296 0353 02       		.byte	0x2
 1297 0354 23       		.byte	0x23
 1298 0355 00       		.uleb128 0
 1299 0356 0B       		.uleb128 0xb
 1300 0357 3D030000 		.4byte	.LASF78
 1301 035b 02       		.byte	0x2
 1302 035c 7901     		.2byte	0x179
 1303 035e EE010000 		.4byte	0x1ee
 1304 0362 02       		.byte	0x2
 1305 0363 23       		.byte	0x23
 1306 0364 04       		.uleb128 0x4
 1307 0365 0B       		.uleb128 0xb
 1308 0366 25030000 		.4byte	.LASF79
 1309 036a 02       		.byte	0x2
 1310 036b 7A01     		.2byte	0x17a
 1311 036d EE010000 		.4byte	0x1ee
 1312 0371 02       		.byte	0x2
 1313 0372 23       		.byte	0x23
 1314 0373 08       		.uleb128 0x8
 1315 0374 0B       		.uleb128 0xb
 1316 0375 51030000 		.4byte	.LASF80
 1317 0379 02       		.byte	0x2
 1318 037a 7B01     		.2byte	0x17b
 1319 037c EE010000 		.4byte	0x1ee
 1320 0380 02       		.byte	0x2
 1321 0381 23       		.byte	0x23
 1322 0382 0C       		.uleb128 0xc
 1323 0383 0C       		.uleb128 0xc
 1324 0384 53435200 		.ascii	"SCR\000"
 1325 0388 02       		.byte	0x2
 1326 0389 7C01     		.2byte	0x17c
 1327 038b EE010000 		.4byte	0x1ee
 1328 038f 02       		.byte	0x2
 1329 0390 23       		.byte	0x23
 1330 0391 10       		.uleb128 0x10
 1331 0392 0C       		.uleb128 0xc
 1332 0393 43435200 		.ascii	"CCR\000"
 1333 0397 02       		.byte	0x2
 1334 0398 7D01     		.2byte	0x17d
 1335 039a EE010000 		.4byte	0x1ee
 1336 039e 02       		.byte	0x2
 1337 039f 23       		.byte	0x23
 1338 03a0 14       		.uleb128 0x14
 1339 03a1 0C       		.uleb128 0xc
 1340 03a2 53485000 		.ascii	"SHP\000"
 1341 03a6 02       		.byte	0x2
 1342 03a7 7E01     		.2byte	0x17e
 1343 03a9 94040000 		.4byte	0x494
 1344 03ad 02       		.byte	0x2
 1345 03ae 23       		.byte	0x23
 1346 03af 18       		.uleb128 0x18
 1347 03b0 0B       		.uleb128 0xb
 1348 03b1 B2050000 		.4byte	.LASF81
 1349 03b5 02       		.byte	0x2
 1350 03b6 7F01     		.2byte	0x17f
ARM GAS  /tmp/cc4CJeQn.s 			page 82


 1351 03b8 EE010000 		.4byte	0x1ee
 1352 03bc 02       		.byte	0x2
 1353 03bd 23       		.byte	0x23
 1354 03be 24       		.uleb128 0x24
 1355 03bf 0B       		.uleb128 0xb
 1356 03c0 66040000 		.4byte	.LASF82
 1357 03c4 02       		.byte	0x2
 1358 03c5 8001     		.2byte	0x180
 1359 03c7 EE010000 		.4byte	0x1ee
 1360 03cb 02       		.byte	0x2
 1361 03cc 23       		.byte	0x23
 1362 03cd 28       		.uleb128 0x28
 1363 03ce 0B       		.uleb128 0xb
 1364 03cf 9B080000 		.4byte	.LASF83
 1365 03d3 02       		.byte	0x2
 1366 03d4 8101     		.2byte	0x181
 1367 03d6 EE010000 		.4byte	0x1ee
 1368 03da 02       		.byte	0x2
 1369 03db 23       		.byte	0x23
 1370 03dc 2C       		.uleb128 0x2c
 1371 03dd 0B       		.uleb128 0xb
 1372 03de 57030000 		.4byte	.LASF84
 1373 03e2 02       		.byte	0x2
 1374 03e3 8201     		.2byte	0x182
 1375 03e5 EE010000 		.4byte	0x1ee
 1376 03e9 02       		.byte	0x2
 1377 03ea 23       		.byte	0x23
 1378 03eb 30       		.uleb128 0x30
 1379 03ec 0B       		.uleb128 0xb
 1380 03ed 6B030000 		.4byte	.LASF85
 1381 03f1 02       		.byte	0x2
 1382 03f2 8301     		.2byte	0x183
 1383 03f4 EE010000 		.4byte	0x1ee
 1384 03f8 02       		.byte	0x2
 1385 03f9 23       		.byte	0x23
 1386 03fa 34       		.uleb128 0x34
 1387 03fb 0B       		.uleb128 0xb
 1388 03fc 13020000 		.4byte	.LASF86
 1389 0400 02       		.byte	0x2
 1390 0401 8401     		.2byte	0x184
 1391 0403 EE010000 		.4byte	0x1ee
 1392 0407 02       		.byte	0x2
 1393 0408 23       		.byte	0x23
 1394 0409 38       		.uleb128 0x38
 1395 040a 0B       		.uleb128 0xb
 1396 040b 3D020000 		.4byte	.LASF87
 1397 040f 02       		.byte	0x2
 1398 0410 8501     		.2byte	0x185
 1399 0412 EE010000 		.4byte	0x1ee
 1400 0416 02       		.byte	0x2
 1401 0417 23       		.byte	0x23
 1402 0418 3C       		.uleb128 0x3c
 1403 0419 0C       		.uleb128 0xc
 1404 041a 50465200 		.ascii	"PFR\000"
 1405 041e 02       		.byte	0x2
 1406 041f 8601     		.2byte	0x186
 1407 0421 AE040000 		.4byte	0x4ae
ARM GAS  /tmp/cc4CJeQn.s 			page 83


 1408 0425 02       		.byte	0x2
 1409 0426 23       		.byte	0x23
 1410 0427 40       		.uleb128 0x40
 1411 0428 0C       		.uleb128 0xc
 1412 0429 44465200 		.ascii	"DFR\000"
 1413 042d 02       		.byte	0x2
 1414 042e 8701     		.2byte	0x187
 1415 0430 F3010000 		.4byte	0x1f3
 1416 0434 02       		.byte	0x2
 1417 0435 23       		.byte	0x23
 1418 0436 48       		.uleb128 0x48
 1419 0437 0C       		.uleb128 0xc
 1420 0438 41445200 		.ascii	"ADR\000"
 1421 043c 02       		.byte	0x2
 1422 043d 8801     		.2byte	0x188
 1423 043f F3010000 		.4byte	0x1f3
 1424 0443 02       		.byte	0x2
 1425 0444 23       		.byte	0x23
 1426 0445 4C       		.uleb128 0x4c
 1427 0446 0B       		.uleb128 0xb
 1428 0447 A1030000 		.4byte	.LASF88
 1429 044b 02       		.byte	0x2
 1430 044c 8901     		.2byte	0x189
 1431 044e C8040000 		.4byte	0x4c8
 1432 0452 02       		.byte	0x2
 1433 0453 23       		.byte	0x23
 1434 0454 50       		.uleb128 0x50
 1435 0455 0B       		.uleb128 0xb
 1436 0456 1A010000 		.4byte	.LASF89
 1437 045a 02       		.byte	0x2
 1438 045b 8A01     		.2byte	0x18a
 1439 045d E2040000 		.4byte	0x4e2
 1440 0461 02       		.byte	0x2
 1441 0462 23       		.byte	0x23
 1442 0463 60       		.uleb128 0x60
 1443 0464 0B       		.uleb128 0xb
 1444 0465 32050000 		.4byte	.LASF64
 1445 0469 02       		.byte	0x2
 1446 046a 8B01     		.2byte	0x18b
 1447 046c E7040000 		.4byte	0x4e7
 1448 0470 02       		.byte	0x2
 1449 0471 23       		.byte	0x23
 1450 0472 74       		.uleb128 0x74
 1451 0473 0B       		.uleb128 0xb
 1452 0474 95080000 		.4byte	.LASF90
 1453 0478 02       		.byte	0x2
 1454 0479 8C01     		.2byte	0x18c
 1455 047b EE010000 		.4byte	0x1ee
 1456 047f 03       		.byte	0x3
 1457 0480 23       		.byte	0x23
 1458 0481 8801     		.uleb128 0x88
 1459 0483 00       		.byte	0
 1460 0484 0D       		.uleb128 0xd
 1461 0485 C9010000 		.4byte	0x1c9
 1462 0489 94040000 		.4byte	0x494
 1463 048d 0E       		.uleb128 0xe
 1464 048e E5020000 		.4byte	0x2e5
ARM GAS  /tmp/cc4CJeQn.s 			page 84


 1465 0492 0B       		.byte	0xb
 1466 0493 00       		.byte	0
 1467 0494 08       		.uleb128 0x8
 1468 0495 84040000 		.4byte	0x484
 1469 0499 0D       		.uleb128 0xd
 1470 049a F3010000 		.4byte	0x1f3
 1471 049e A9040000 		.4byte	0x4a9
 1472 04a2 0E       		.uleb128 0xe
 1473 04a3 E5020000 		.4byte	0x2e5
 1474 04a7 01       		.byte	0x1
 1475 04a8 00       		.byte	0
 1476 04a9 09       		.uleb128 0x9
 1477 04aa 99040000 		.4byte	0x499
 1478 04ae 08       		.uleb128 0x8
 1479 04af A9040000 		.4byte	0x4a9
 1480 04b3 0D       		.uleb128 0xd
 1481 04b4 F3010000 		.4byte	0x1f3
 1482 04b8 C3040000 		.4byte	0x4c3
 1483 04bc 0E       		.uleb128 0xe
 1484 04bd E5020000 		.4byte	0x2e5
 1485 04c1 03       		.byte	0x3
 1486 04c2 00       		.byte	0
 1487 04c3 09       		.uleb128 0x9
 1488 04c4 B3040000 		.4byte	0x4b3
 1489 04c8 08       		.uleb128 0x8
 1490 04c9 C3040000 		.4byte	0x4c3
 1491 04cd 0D       		.uleb128 0xd
 1492 04ce F3010000 		.4byte	0x1f3
 1493 04d2 DD040000 		.4byte	0x4dd
 1494 04d6 0E       		.uleb128 0xe
 1495 04d7 E5020000 		.4byte	0x2e5
 1496 04db 04       		.byte	0x4
 1497 04dc 00       		.byte	0
 1498 04dd 09       		.uleb128 0x9
 1499 04de CD040000 		.4byte	0x4cd
 1500 04e2 08       		.uleb128 0x8
 1501 04e3 DD040000 		.4byte	0x4dd
 1502 04e7 0D       		.uleb128 0xd
 1503 04e8 E3010000 		.4byte	0x1e3
 1504 04ec F7040000 		.4byte	0x4f7
 1505 04f0 0E       		.uleb128 0xe
 1506 04f1 E5020000 		.4byte	0x2e5
 1507 04f5 04       		.byte	0x4
 1508 04f6 00       		.byte	0
 1509 04f7 10       		.uleb128 0x10
 1510 04f8 5B020000 		.4byte	.LASF91
 1511 04fc 02       		.byte	0x2
 1512 04fd 8D01     		.2byte	0x18d
 1513 04ff 3E030000 		.4byte	0x33e
 1514 0503 11       		.uleb128 0x11
 1515 0504 10       		.byte	0x10
 1516 0505 02       		.byte	0x2
 1517 0506 B602     		.2byte	0x2b6
 1518 0508 49050000 		.4byte	0x549
 1519 050c 0B       		.uleb128 0xb
 1520 050d F5070000 		.4byte	.LASF92
 1521 0511 02       		.byte	0x2
ARM GAS  /tmp/cc4CJeQn.s 			page 85


 1522 0512 B802     		.2byte	0x2b8
 1523 0514 EE010000 		.4byte	0x1ee
 1524 0518 02       		.byte	0x2
 1525 0519 23       		.byte	0x23
 1526 051a 00       		.uleb128 0
 1527 051b 0B       		.uleb128 0xb
 1528 051c 5B040000 		.4byte	.LASF93
 1529 0520 02       		.byte	0x2
 1530 0521 B902     		.2byte	0x2b9
 1531 0523 EE010000 		.4byte	0x1ee
 1532 0527 02       		.byte	0x2
 1533 0528 23       		.byte	0x23
 1534 0529 04       		.uleb128 0x4
 1535 052a 0C       		.uleb128 0xc
 1536 052b 56414C00 		.ascii	"VAL\000"
 1537 052f 02       		.byte	0x2
 1538 0530 BA02     		.2byte	0x2ba
 1539 0532 EE010000 		.4byte	0x1ee
 1540 0536 02       		.byte	0x2
 1541 0537 23       		.byte	0x23
 1542 0538 08       		.uleb128 0x8
 1543 0539 0B       		.uleb128 0xb
 1544 053a 0B080000 		.4byte	.LASF94
 1545 053e 02       		.byte	0x2
 1546 053f BB02     		.2byte	0x2bb
 1547 0541 F3010000 		.4byte	0x1f3
 1548 0545 02       		.byte	0x2
 1549 0546 23       		.byte	0x23
 1550 0547 0C       		.uleb128 0xc
 1551 0548 00       		.byte	0
 1552 0549 10       		.uleb128 0x10
 1553 054a 7B030000 		.4byte	.LASF95
 1554 054e 02       		.byte	0x2
 1555 054f BC02     		.2byte	0x2bc
 1556 0551 03050000 		.4byte	0x503
 1557 0555 12       		.uleb128 0x12
 1558 0556 CC050000 		.4byte	.LASF96
 1559 055a 02       		.byte	0x2
 1560 055b 4807     		.2byte	0x748
 1561 055d DE010000 		.4byte	0x1de
 1562 0561 01       		.byte	0x1
 1563 0562 01       		.byte	0x1
 1564 0563 13       		.uleb128 0x13
 1565 0564 BB020000 		.4byte	.LASF97
 1566 0568 07       		.byte	0x7
 1567 0569 33       		.byte	0x33
 1568 056a E3010000 		.4byte	0x1e3
 1569 056e 01       		.byte	0x1
 1570 056f 01       		.byte	0x1
 1571 0570 0D       		.uleb128 0xd
 1572 0571 CE010000 		.4byte	0x1ce
 1573 0575 80050000 		.4byte	0x580
 1574 0579 0E       		.uleb128 0xe
 1575 057a E5020000 		.4byte	0x2e5
 1576 057e 0F       		.byte	0xf
 1577 057f 00       		.byte	0
 1578 0580 09       		.uleb128 0x9
ARM GAS  /tmp/cc4CJeQn.s 			page 86


 1579 0581 70050000 		.4byte	0x570
 1580 0585 13       		.uleb128 0x13
 1581 0586 A6030000 		.4byte	.LASF98
 1582 058a 07       		.byte	0x7
 1583 058b 34       		.byte	0x34
 1584 058c 80050000 		.4byte	0x580
 1585 0590 01       		.byte	0x1
 1586 0591 01       		.byte	0x1
 1587 0592 0D       		.uleb128 0xd
 1588 0593 CE010000 		.4byte	0x1ce
 1589 0597 A2050000 		.4byte	0x5a2
 1590 059b 0E       		.uleb128 0xe
 1591 059c E5020000 		.4byte	0x2e5
 1592 05a0 07       		.byte	0x7
 1593 05a1 00       		.byte	0
 1594 05a2 09       		.uleb128 0x9
 1595 05a3 92050000 		.4byte	0x592
 1596 05a7 13       		.uleb128 0x13
 1597 05a8 93000000 		.4byte	.LASF99
 1598 05ac 07       		.byte	0x7
 1599 05ad 35       		.byte	0x35
 1600 05ae A2050000 		.4byte	0x5a2
 1601 05b2 01       		.byte	0x1
 1602 05b3 01       		.byte	0x1
 1603 05b4 05       		.uleb128 0x5
 1604 05b5 08       		.byte	0x8
 1605 05b6 04       		.byte	0x4
 1606 05b7 0A070000 		.4byte	.LASF100
 1607 05bb 02       		.uleb128 0x2
 1608 05bc 01       		.byte	0x1
 1609 05bd 69010000 		.4byte	0x169
 1610 05c1 08       		.byte	0x8
 1611 05c2 33       		.byte	0x33
 1612 05c3 E0050000 		.4byte	0x5e0
 1613 05c7 04       		.uleb128 0x4
 1614 05c8 E8010000 		.4byte	.LASF101
 1615 05cc 64       		.byte	0x64
 1616 05cd 04       		.uleb128 0x4
 1617 05ce 90020000 		.4byte	.LASF102
 1618 05d2 0A       		.byte	0xa
 1619 05d3 04       		.uleb128 0x4
 1620 05d4 12030000 		.4byte	.LASF103
 1621 05d8 01       		.byte	0x1
 1622 05d9 04       		.uleb128 0x4
 1623 05da BF040000 		.4byte	.LASF104
 1624 05de 01       		.byte	0x1
 1625 05df 00       		.byte	0
 1626 05e0 06       		.uleb128 0x6
 1627 05e1 29000000 		.4byte	.LASF105
 1628 05e5 08       		.byte	0x8
 1629 05e6 38       		.byte	0x38
 1630 05e7 BB050000 		.4byte	0x5bb
 1631 05eb 13       		.uleb128 0x13
 1632 05ec 16070000 		.4byte	.LASF106
 1633 05f0 08       		.byte	0x8
 1634 05f1 3D       		.byte	0x3d
 1635 05f2 E3010000 		.4byte	0x1e3
ARM GAS  /tmp/cc4CJeQn.s 			page 87


 1636 05f6 01       		.byte	0x1
 1637 05f7 01       		.byte	0x1
 1638 05f8 13       		.uleb128 0x13
 1639 05f9 CB020000 		.4byte	.LASF107
 1640 05fd 08       		.byte	0x8
 1641 05fe 3E       		.byte	0x3e
 1642 05ff E0050000 		.4byte	0x5e0
 1643 0603 01       		.byte	0x1
 1644 0604 01       		.byte	0x1
 1645 0605 14       		.uleb128 0x14
 1646 0606 01       		.byte	0x1
 1647 0607 E9040000 		.4byte	.LASF156
 1648 060b 01       		.byte	0x1
 1649 060c E101     		.2byte	0x1e1
 1650 060e 01       		.byte	0x1
 1651 060f 2C020000 		.4byte	.LFB79
 1652 0613 2E020000 		.4byte	.LFE79
 1653 0617 02       		.byte	0x2
 1654 0618 7D       		.byte	0x7d
 1655 0619 00       		.sleb128 0
 1656 061a 01       		.byte	0x1
 1657 061b 15       		.uleb128 0x15
 1658 061c 01       		.byte	0x1
 1659 061d 39010000 		.4byte	.LASF108
 1660 0621 01       		.byte	0x1
 1661 0622 D801     		.2byte	0x1d8
 1662 0624 01       		.byte	0x1
 1663 0625 2E020000 		.4byte	.LFB78
 1664 0629 36020000 		.4byte	.LFE78
 1665 062d 00000000 		.4byte	.LLST39
 1666 0631 01       		.byte	0x1
 1667 0632 40060000 		.4byte	0x640
 1668 0636 16       		.uleb128 0x16
 1669 0637 34020000 		.4byte	.LVL51
 1670 063b 05060000 		.4byte	0x605
 1671 063f 00       		.byte	0
 1672 0640 17       		.uleb128 0x17
 1673 0641 01       		.byte	0x1
 1674 0642 44070000 		.4byte	.LASF109
 1675 0646 01       		.byte	0x1
 1676 0647 C601     		.2byte	0x1c6
 1677 0649 01       		.byte	0x1
 1678 064a 14020000 		.4byte	.LFB77
 1679 064e 2C020000 		.4byte	.LFE77
 1680 0652 02       		.byte	0x2
 1681 0653 7D       		.byte	0x7d
 1682 0654 00       		.sleb128 0
 1683 0655 01       		.byte	0x1
 1684 0656 69060000 		.4byte	0x669
 1685 065a 18       		.uleb128 0x18
 1686 065b CA010000 		.4byte	.LASF110
 1687 065f 01       		.byte	0x1
 1688 0660 C601     		.2byte	0x1c6
 1689 0662 E3010000 		.4byte	0x1e3
 1690 0666 01       		.byte	0x1
 1691 0667 50       		.byte	0x50
 1692 0668 00       		.byte	0
ARM GAS  /tmp/cc4CJeQn.s 			page 88


 1693 0669 19       		.uleb128 0x19
 1694 066a 01       		.byte	0x1
 1695 066b D5030000 		.4byte	.LASF113
 1696 066f 01       		.byte	0x1
 1697 0670 B501     		.2byte	0x1b5
 1698 0672 01       		.byte	0x1
 1699 0673 E3010000 		.4byte	0x1e3
 1700 0677 F0010000 		.4byte	.LFB76
 1701 067b 14020000 		.4byte	.LFE76
 1702 067f 02       		.byte	0x2
 1703 0680 7D       		.byte	0x7d
 1704 0681 00       		.sleb128 0
 1705 0682 01       		.byte	0x1
 1706 0683 B2060000 		.4byte	0x6b2
 1707 0687 1A       		.uleb128 0x1a
 1708 0688 2C040000 		.4byte	.LASF111
 1709 068c 01       		.byte	0x1
 1710 068d B501     		.2byte	0x1b5
 1711 068f 53010000 		.4byte	0x153
 1712 0693 20000000 		.4byte	.LLST37
 1713 0697 1B       		.uleb128 0x1b
 1714 0698 340C0000 		.4byte	0xc34
 1715 069c F0010000 		.4byte	.LBB108
 1716 06a0 0C020000 		.4byte	.LBE108
 1717 06a4 01       		.byte	0x1
 1718 06a5 BB01     		.2byte	0x1bb
 1719 06a7 1C       		.uleb128 0x1c
 1720 06a8 460C0000 		.4byte	0xc46
 1721 06ac 41000000 		.4byte	.LLST38
 1722 06b0 00       		.byte	0
 1723 06b1 00       		.byte	0
 1724 06b2 17       		.uleb128 0x17
 1725 06b3 01       		.byte	0x1
 1726 06b4 50010000 		.4byte	.LASF112
 1727 06b8 01       		.byte	0x1
 1728 06b9 A401     		.2byte	0x1a4
 1729 06bb 01       		.byte	0x1
 1730 06bc D0010000 		.4byte	.LFB75
 1731 06c0 F0010000 		.4byte	.LFE75
 1732 06c4 02       		.byte	0x2
 1733 06c5 7D       		.byte	0x7d
 1734 06c6 00       		.sleb128 0
 1735 06c7 01       		.byte	0x1
 1736 06c8 F7060000 		.4byte	0x6f7
 1737 06cc 1A       		.uleb128 0x1a
 1738 06cd 2C040000 		.4byte	.LASF111
 1739 06d1 01       		.byte	0x1
 1740 06d2 A401     		.2byte	0x1a4
 1741 06d4 53010000 		.4byte	0x153
 1742 06d8 62000000 		.4byte	.LLST35
 1743 06dc 1B       		.uleb128 0x1b
 1744 06dd 530C0000 		.4byte	0xc53
 1745 06e1 D0010000 		.4byte	.LBB104
 1746 06e5 F0010000 		.4byte	.LBE104
 1747 06e9 01       		.byte	0x1
 1748 06ea AA01     		.2byte	0x1aa
 1749 06ec 1C       		.uleb128 0x1c
ARM GAS  /tmp/cc4CJeQn.s 			page 89


 1750 06ed 610C0000 		.4byte	0xc61
 1751 06f1 83000000 		.4byte	.LLST36
 1752 06f5 00       		.byte	0
 1753 06f6 00       		.byte	0
 1754 06f7 19       		.uleb128 0x19
 1755 06f8 01       		.byte	0x1
 1756 06f9 64020000 		.4byte	.LASF114
 1757 06fd 01       		.byte	0x1
 1758 06fe 9401     		.2byte	0x194
 1759 0700 01       		.byte	0x1
 1760 0701 E3010000 		.4byte	0x1e3
 1761 0705 AC010000 		.4byte	.LFB74
 1762 0709 D0010000 		.4byte	.LFE74
 1763 070d 02       		.byte	0x2
 1764 070e 7D       		.byte	0x7d
 1765 070f 00       		.sleb128 0
 1766 0710 01       		.byte	0x1
 1767 0711 40070000 		.4byte	0x740
 1768 0715 1A       		.uleb128 0x1a
 1769 0716 2C040000 		.4byte	.LASF111
 1770 071a 01       		.byte	0x1
 1771 071b 9401     		.2byte	0x194
 1772 071d 53010000 		.4byte	0x153
 1773 0721 A4000000 		.4byte	.LLST33
 1774 0725 1B       		.uleb128 0x1b
 1775 0726 890C0000 		.4byte	0xc89
 1776 072a AC010000 		.4byte	.LBB100
 1777 072e C8010000 		.4byte	.LBE100
 1778 0732 01       		.byte	0x1
 1779 0733 9A01     		.2byte	0x19a
 1780 0735 1C       		.uleb128 0x1c
 1781 0736 9B0C0000 		.4byte	0xc9b
 1782 073a C5000000 		.4byte	.LLST34
 1783 073e 00       		.byte	0
 1784 073f 00       		.byte	0
 1785 0740 17       		.uleb128 0x17
 1786 0741 01       		.byte	0x1
 1787 0742 15040000 		.4byte	.LASF115
 1788 0746 01       		.byte	0x1
 1789 0747 8201     		.2byte	0x182
 1790 0749 01       		.byte	0x1
 1791 074a 8C010000 		.4byte	.LFB73
 1792 074e AC010000 		.4byte	.LFE73
 1793 0752 02       		.byte	0x2
 1794 0753 7D       		.byte	0x7d
 1795 0754 00       		.sleb128 0
 1796 0755 01       		.byte	0x1
 1797 0756 85070000 		.4byte	0x785
 1798 075a 1A       		.uleb128 0x1a
 1799 075b 2C040000 		.4byte	.LASF111
 1800 075f 01       		.byte	0x1
 1801 0760 8201     		.2byte	0x182
 1802 0762 53010000 		.4byte	0x153
 1803 0766 E6000000 		.4byte	.LLST31
 1804 076a 1B       		.uleb128 0x1b
 1805 076b 6E0C0000 		.4byte	0xc6e
 1806 076f 8C010000 		.4byte	.LBB96
ARM GAS  /tmp/cc4CJeQn.s 			page 90


 1807 0773 AC010000 		.4byte	.LBE96
 1808 0777 01       		.byte	0x1
 1809 0778 8801     		.2byte	0x188
 1810 077a 1C       		.uleb128 0x1c
 1811 077b 7C0C0000 		.4byte	0xc7c
 1812 077f 07010000 		.4byte	.LLST32
 1813 0783 00       		.byte	0
 1814 0784 00       		.byte	0
 1815 0785 15       		.uleb128 0x15
 1816 0786 01       		.byte	0x1
 1817 0787 69010000 		.4byte	.LASF116
 1818 078b 01       		.byte	0x1
 1819 078c 7301     		.2byte	0x173
 1820 078e 01       		.byte	0x1
 1821 078f 30010000 		.4byte	.LFB72
 1822 0793 8C010000 		.4byte	.LFE72
 1823 0797 28010000 		.4byte	.LLST23
 1824 079b 01       		.byte	0x1
 1825 079c 47080000 		.4byte	0x847
 1826 07a0 1A       		.uleb128 0x1a
 1827 07a1 2C040000 		.4byte	.LASF111
 1828 07a5 01       		.byte	0x1
 1829 07a6 7301     		.2byte	0x173
 1830 07a8 53010000 		.4byte	0x153
 1831 07ac 48010000 		.4byte	.LLST24
 1832 07b0 1A       		.uleb128 0x1a
 1833 07b1 F9000000 		.4byte	.LASF117
 1834 07b5 01       		.byte	0x1
 1835 07b6 7301     		.2byte	0x173
 1836 07b8 E3010000 		.4byte	0x1e3
 1837 07bc 69010000 		.4byte	.LLST25
 1838 07c0 18       		.uleb128 0x18
 1839 07c1 3D000000 		.4byte	.LASF118
 1840 07c5 01       		.byte	0x1
 1841 07c6 7301     		.2byte	0x173
 1842 07c8 47080000 		.4byte	0x847
 1843 07cc 01       		.byte	0x1
 1844 07cd 52       		.byte	0x52
 1845 07ce 18       		.uleb128 0x18
 1846 07cf 7E070000 		.4byte	.LASF119
 1847 07d3 01       		.byte	0x1
 1848 07d4 7301     		.2byte	0x173
 1849 07d6 47080000 		.4byte	0x847
 1850 07da 01       		.byte	0x1
 1851 07db 53       		.byte	0x53
 1852 07dc 1D       		.uleb128 0x1d
 1853 07dd EE0B0000 		.4byte	0xbee
 1854 07e1 32010000 		.4byte	.LBB82
 1855 07e5 68000000 		.4byte	.Ldebug_ranges0+0x68
 1856 07e9 01       		.byte	0x1
 1857 07ea 7801     		.2byte	0x178
 1858 07ec FA070000 		.4byte	0x7fa
 1859 07f0 1C       		.uleb128 0x1c
 1860 07f1 000C0000 		.4byte	0xc00
 1861 07f5 8A010000 		.4byte	.LLST26
 1862 07f9 00       		.byte	0
 1863 07fa 1E       		.uleb128 0x1e
ARM GAS  /tmp/cc4CJeQn.s 			page 91


 1864 07fb 300B0000 		.4byte	0xb30
 1865 07ff 3C010000 		.4byte	.LBB86
 1866 0803 88000000 		.4byte	.Ldebug_ranges0+0x88
 1867 0807 01       		.byte	0x1
 1868 0808 7801     		.2byte	0x178
 1869 080a 1C       		.uleb128 0x1c
 1870 080b 620B0000 		.4byte	0xb62
 1871 080f AB010000 		.4byte	.LLST27
 1872 0813 1C       		.uleb128 0x1c
 1873 0814 560B0000 		.4byte	0xb56
 1874 0818 BE010000 		.4byte	.LLST28
 1875 081c 1F       		.uleb128 0x1f
 1876 081d 4A0B0000 		.4byte	0xb4a
 1877 0821 1F       		.uleb128 0x1f
 1878 0822 3E0B0000 		.4byte	0xb3e
 1879 0826 20       		.uleb128 0x20
 1880 0827 88000000 		.4byte	.Ldebug_ranges0+0x88
 1881 082b 21       		.uleb128 0x21
 1882 082c 6E0B0000 		.4byte	0xb6e
 1883 0830 01       		.byte	0x1
 1884 0831 51       		.byte	0x51
 1885 0832 22       		.uleb128 0x22
 1886 0833 7A0B0000 		.4byte	0xb7a
 1887 0837 D1010000 		.4byte	.LLST29
 1888 083b 22       		.uleb128 0x22
 1889 083c 860B0000 		.4byte	0xb86
 1890 0840 0B020000 		.4byte	.LLST30
 1891 0844 00       		.byte	0
 1892 0845 00       		.byte	0
 1893 0846 00       		.byte	0
 1894 0847 23       		.uleb128 0x23
 1895 0848 04       		.byte	0x4
 1896 0849 E3010000 		.4byte	0x1e3
 1897 084d 09       		.uleb128 0x9
 1898 084e 47080000 		.4byte	0x847
 1899 0852 19       		.uleb128 0x19
 1900 0853 01       		.byte	0x1
 1901 0854 C6070000 		.4byte	.LASF120
 1902 0858 01       		.byte	0x1
 1903 0859 5801     		.2byte	0x158
 1904 085b 01       		.byte	0x1
 1905 085c E3010000 		.4byte	0x1e3
 1906 0860 20010000 		.4byte	.LFB71
 1907 0864 30010000 		.4byte	.LFE71
 1908 0868 02       		.byte	0x2
 1909 0869 7D       		.byte	0x7d
 1910 086a 00       		.sleb128 0
 1911 086b 01       		.byte	0x1
 1912 086c 81080000 		.4byte	0x881
 1913 0870 24       		.uleb128 0x24
 1914 0871 DE0C0000 		.4byte	0xcde
 1915 0875 20010000 		.4byte	.LBB76
 1916 0879 24010000 		.4byte	.LBE76
 1917 087d 01       		.byte	0x1
 1918 087e 5B01     		.2byte	0x15b
 1919 0880 00       		.byte	0
 1920 0881 25       		.uleb128 0x25
ARM GAS  /tmp/cc4CJeQn.s 			page 92


 1921 0882 01       		.byte	0x1
 1922 0883 E4050000 		.4byte	.LASF121
 1923 0887 01       		.byte	0x1
 1924 0888 E5       		.byte	0xe5
 1925 0889 01       		.byte	0x1
 1926 088a E3010000 		.4byte	0x1e3
 1927 088e F4000000 		.4byte	.LFB70
 1928 0892 20010000 		.4byte	.LFE70
 1929 0896 02       		.byte	0x2
 1930 0897 7D       		.byte	0x7d
 1931 0898 00       		.sleb128 0
 1932 0899 01       		.byte	0x1
 1933 089a EA080000 		.4byte	0x8ea
 1934 089e 26       		.uleb128 0x26
 1935 089f E0000000 		.4byte	.LASF122
 1936 08a3 01       		.byte	0x1
 1937 08a4 E5       		.byte	0xe5
 1938 08a5 E3010000 		.4byte	0x1e3
 1939 08a9 1E020000 		.4byte	.LLST19
 1940 08ad 27       		.uleb128 0x27
 1941 08ae 060B0000 		.4byte	0xb06
 1942 08b2 F4000000 		.4byte	.LBB66
 1943 08b6 14010000 		.4byte	.LBE66
 1944 08ba 01       		.byte	0x1
 1945 08bb E7       		.byte	0xe7
 1946 08bc 1C       		.uleb128 0x1c
 1947 08bd 180B0000 		.4byte	0xb18
 1948 08c1 4C020000 		.4byte	.LLST20
 1949 08c5 1E       		.uleb128 0x1e
 1950 08c6 0D0C0000 		.4byte	0xc0d
 1951 08ca FC000000 		.4byte	.LBB68
 1952 08ce 48000000 		.4byte	.Ldebug_ranges0+0x48
 1953 08d2 02       		.byte	0x2
 1954 08d3 3207     		.2byte	0x732
 1955 08d5 1C       		.uleb128 0x1c
 1956 08d6 270C0000 		.4byte	0xc27
 1957 08da 7A020000 		.4byte	.LLST21
 1958 08de 1C       		.uleb128 0x1c
 1959 08df 1B0C0000 		.4byte	0xc1b
 1960 08e3 8E020000 		.4byte	.LLST22
 1961 08e7 00       		.byte	0
 1962 08e8 00       		.byte	0
 1963 08e9 00       		.byte	0
 1964 08ea 28       		.uleb128 0x28
 1965 08eb 01       		.byte	0x1
 1966 08ec 7B020000 		.4byte	.LASF123
 1967 08f0 01       		.byte	0x1
 1968 08f1 D8       		.byte	0xd8
 1969 08f2 01       		.byte	0x1
 1970 08f3 D0000000 		.4byte	.LFB69
 1971 08f7 F4000000 		.4byte	.LFE69
 1972 08fb 02       		.byte	0x2
 1973 08fc 7D       		.byte	0x7d
 1974 08fd 00       		.sleb128 0
 1975 08fe 01       		.byte	0x1
 1976 08ff 34090000 		.4byte	0x934
 1977 0903 27       		.uleb128 0x27
ARM GAS  /tmp/cc4CJeQn.s 			page 93


 1978 0904 250B0000 		.4byte	0xb25
 1979 0908 D0000000 		.4byte	.LBB56
 1980 090c F4000000 		.4byte	.LBE56
 1981 0910 01       		.byte	0x1
 1982 0911 DB       		.byte	0xdb
 1983 0912 24       		.uleb128 0x24
 1984 0913 1F0D0000 		.4byte	0xd1f
 1985 0917 D0000000 		.4byte	.LBB58
 1986 091b D4000000 		.4byte	.LBE58
 1987 091f 02       		.byte	0x2
 1988 0920 E406     		.2byte	0x6e4
 1989 0922 24       		.uleb128 0x24
 1990 0923 1F0D0000 		.4byte	0xd1f
 1991 0927 E2000000 		.4byte	.LBB60
 1992 092b E6000000 		.4byte	.LBE60
 1993 092f 02       		.byte	0x2
 1994 0930 E906     		.2byte	0x6e9
 1995 0932 00       		.byte	0
 1996 0933 00       		.byte	0
 1997 0934 28       		.uleb128 0x28
 1998 0935 01       		.byte	0x1
 1999 0936 EC020000 		.4byte	.LASF124
 2000 093a 01       		.byte	0x1
 2001 093b CB       		.byte	0xcb
 2002 093c 01       		.byte	0x1
 2003 093d A8000000 		.4byte	.LFB68
 2004 0941 D0000000 		.4byte	.LFE68
 2005 0945 02       		.byte	0x2
 2006 0946 7D       		.byte	0x7d
 2007 0947 00       		.sleb128 0
 2008 0948 01       		.byte	0x1
 2009 0949 96090000 		.4byte	0x996
 2010 094d 26       		.uleb128 0x26
 2011 094e 2C040000 		.4byte	.LASF111
 2012 0952 01       		.byte	0x1
 2013 0953 CB       		.byte	0xcb
 2014 0954 53010000 		.4byte	0x153
 2015 0958 A3020000 		.4byte	.LLST17
 2016 095c 27       		.uleb128 0x27
 2017 095d A80C0000 		.4byte	0xca8
 2018 0961 A8000000 		.4byte	.LBB44
 2019 0965 D0000000 		.4byte	.LBE44
 2020 0969 01       		.byte	0x1
 2021 096a D1       		.byte	0xd1
 2022 096b 1C       		.uleb128 0x1c
 2023 096c B60C0000 		.4byte	0xcb6
 2024 0970 C4020000 		.4byte	.LLST18
 2025 0974 24       		.uleb128 0x24
 2026 0975 1F0D0000 		.4byte	0xd1f
 2027 0979 C0000000 		.4byte	.LBB46
 2028 097d C4000000 		.4byte	.LBE46
 2029 0981 02       		.byte	0x2
 2030 0982 1006     		.2byte	0x610
 2031 0984 24       		.uleb128 0x24
 2032 0985 290D0000 		.4byte	0xd29
 2033 0989 C4000000 		.4byte	.LBB48
 2034 098d D0000000 		.4byte	.LBE48
ARM GAS  /tmp/cc4CJeQn.s 			page 94


 2035 0991 02       		.byte	0x2
 2036 0992 1106     		.2byte	0x611
 2037 0994 00       		.byte	0
 2038 0995 00       		.byte	0
 2039 0996 28       		.uleb128 0x28
 2040 0997 01       		.byte	0x1
 2041 0998 16000000 		.4byte	.LASF125
 2042 099c 01       		.byte	0x1
 2043 099d BB       		.byte	0xbb
 2044 099e 01       		.byte	0x1
 2045 099f 8C000000 		.4byte	.LFB67
 2046 09a3 A8000000 		.4byte	.LFE67
 2047 09a7 02       		.byte	0x2
 2048 09a8 7D       		.byte	0x7d
 2049 09a9 00       		.sleb128 0
 2050 09aa 01       		.byte	0x1
 2051 09ab D8090000 		.4byte	0x9d8
 2052 09af 26       		.uleb128 0x26
 2053 09b0 2C040000 		.4byte	.LASF111
 2054 09b4 01       		.byte	0x1
 2055 09b5 BB       		.byte	0xbb
 2056 09b6 53010000 		.4byte	0x153
 2057 09ba E5020000 		.4byte	.LLST15
 2058 09be 27       		.uleb128 0x27
 2059 09bf C30C0000 		.4byte	0xcc3
 2060 09c3 8C000000 		.4byte	.LBB36
 2061 09c7 A8000000 		.4byte	.LBE36
 2062 09cb 01       		.byte	0x1
 2063 09cc C1       		.byte	0xc1
 2064 09cd 1C       		.uleb128 0x1c
 2065 09ce D10C0000 		.4byte	0xcd1
 2066 09d2 06030000 		.4byte	.LLST16
 2067 09d6 00       		.byte	0
 2068 09d7 00       		.byte	0
 2069 09d8 29       		.uleb128 0x29
 2070 09d9 01       		.byte	0x1
 2071 09da 21070000 		.4byte	.LASF126
 2072 09de 01       		.byte	0x1
 2073 09df A5       		.byte	0xa5
 2074 09e0 01       		.byte	0x1
 2075 09e1 24000000 		.4byte	.LFB66
 2076 09e5 8C000000 		.4byte	.LFE66
 2077 09e9 27030000 		.4byte	.LLST4
 2078 09ed 01       		.byte	0x1
 2079 09ee A80A0000 		.4byte	0xaa8
 2080 09f2 26       		.uleb128 0x26
 2081 09f3 2C040000 		.4byte	.LASF111
 2082 09f7 01       		.byte	0x1
 2083 09f8 A5       		.byte	0xa5
 2084 09f9 53010000 		.4byte	0x153
 2085 09fd 47030000 		.4byte	.LLST5
 2086 0a01 26       		.uleb128 0x26
 2087 0a02 91030000 		.4byte	.LASF127
 2088 0a06 01       		.byte	0x1
 2089 0a07 A5       		.byte	0xa5
 2090 0a08 E3010000 		.4byte	0x1e3
 2091 0a0c 68030000 		.4byte	.LLST6
ARM GAS  /tmp/cc4CJeQn.s 			page 95


 2092 0a10 26       		.uleb128 0x26
 2093 0a11 B1010000 		.4byte	.LASF128
 2094 0a15 01       		.byte	0x1
 2095 0a16 A5       		.byte	0xa5
 2096 0a17 E3010000 		.4byte	0x1e3
 2097 0a1b 89030000 		.4byte	.LLST7
 2098 0a1f 2A       		.uleb128 0x2a
 2099 0a20 44040000 		.4byte	.LASF157
 2100 0a24 01       		.byte	0x1
 2101 0a25 A7       		.byte	0xa7
 2102 0a26 E3010000 		.4byte	0x1e3
 2103 0a2a AA030000 		.4byte	.LLST8
 2104 0a2e 2B       		.uleb128 0x2b
 2105 0a2f DE0C0000 		.4byte	0xcde
 2106 0a33 24000000 		.4byte	.LBB22
 2107 0a37 00000000 		.4byte	.Ldebug_ranges0+0
 2108 0a3b 01       		.byte	0x1
 2109 0a3c AD       		.byte	0xad
 2110 0a3d 2C       		.uleb128 0x2c
 2111 0a3e 930B0000 		.4byte	0xb93
 2112 0a42 2E000000 		.4byte	.LBB26
 2113 0a46 18000000 		.4byte	.Ldebug_ranges0+0x18
 2114 0a4a 01       		.byte	0x1
 2115 0a4b AF       		.byte	0xaf
 2116 0a4c 890A0000 		.4byte	0xa89
 2117 0a50 1C       		.uleb128 0x1c
 2118 0a51 BD0B0000 		.4byte	0xbbd
 2119 0a55 BE030000 		.4byte	.LLST9
 2120 0a59 1C       		.uleb128 0x1c
 2121 0a5a B10B0000 		.4byte	0xbb1
 2122 0a5e DF030000 		.4byte	.LLST10
 2123 0a62 1F       		.uleb128 0x1f
 2124 0a63 A50B0000 		.4byte	0xba5
 2125 0a67 20       		.uleb128 0x20
 2126 0a68 18000000 		.4byte	.Ldebug_ranges0+0x18
 2127 0a6c 22       		.uleb128 0x22
 2128 0a6d C90B0000 		.4byte	0xbc9
 2129 0a71 00040000 		.4byte	.LLST11
 2130 0a75 22       		.uleb128 0x22
 2131 0a76 D50B0000 		.4byte	0xbd5
 2132 0a7a 13040000 		.4byte	.LLST12
 2133 0a7e 22       		.uleb128 0x22
 2134 0a7f E10B0000 		.4byte	0xbe1
 2135 0a83 26040000 		.4byte	.LLST13
 2136 0a87 00       		.byte	0
 2137 0a88 00       		.byte	0
 2138 0a89 2D       		.uleb128 0x2d
 2139 0a8a 0D0C0000 		.4byte	0xc0d
 2140 0a8e 5C000000 		.4byte	.LBB29
 2141 0a92 30000000 		.4byte	.Ldebug_ranges0+0x30
 2142 0a96 01       		.byte	0x1
 2143 0a97 AF       		.byte	0xaf
 2144 0a98 1F       		.uleb128 0x1f
 2145 0a99 270C0000 		.4byte	0xc27
 2146 0a9d 1C       		.uleb128 0x1c
 2147 0a9e 1B0C0000 		.4byte	0xc1b
 2148 0aa2 39040000 		.4byte	.LLST14
ARM GAS  /tmp/cc4CJeQn.s 			page 96


 2149 0aa6 00       		.byte	0
 2150 0aa7 00       		.byte	0
 2151 0aa8 28       		.uleb128 0x28
 2152 0aa9 01       		.byte	0x1
 2153 0aaa 8D060000 		.4byte	.LASF129
 2154 0aae 01       		.byte	0x1
 2155 0aaf 8F       		.byte	0x8f
 2156 0ab0 01       		.byte	0x1
 2157 0ab1 00000000 		.4byte	.LFB65
 2158 0ab5 24000000 		.4byte	.LFE65
 2159 0ab9 02       		.byte	0x2
 2160 0aba 7D       		.byte	0x7d
 2161 0abb 00       		.sleb128 0
 2162 0abc 01       		.byte	0x1
 2163 0abd 060B0000 		.4byte	0xb06
 2164 0ac1 26       		.uleb128 0x26
 2165 0ac2 F9000000 		.4byte	.LASF117
 2166 0ac6 01       		.byte	0x1
 2167 0ac7 8F       		.byte	0x8f
 2168 0ac8 E3010000 		.4byte	0x1e3
 2169 0acc 5A040000 		.4byte	.LLST0
 2170 0ad0 27       		.uleb128 0x27
 2171 0ad1 EC0C0000 		.4byte	0xcec
 2172 0ad5 00000000 		.4byte	.LBB14
 2173 0ad9 24000000 		.4byte	.LBE14
 2174 0add 01       		.byte	0x1
 2175 0ade 95       		.byte	0x95
 2176 0adf 1C       		.uleb128 0x1c
 2177 0ae0 FA0C0000 		.4byte	0xcfa
 2178 0ae4 7B040000 		.4byte	.LLST1
 2179 0ae8 2E       		.uleb128 0x2e
 2180 0ae9 00000000 		.4byte	.LBB15
 2181 0aed 24000000 		.4byte	.LBE15
 2182 0af1 22       		.uleb128 0x22
 2183 0af2 060D0000 		.4byte	0xd06
 2184 0af6 9C040000 		.4byte	.LLST2
 2185 0afa 22       		.uleb128 0x22
 2186 0afb 120D0000 		.4byte	0xd12
 2187 0aff C0040000 		.4byte	.LLST3
 2188 0b03 00       		.byte	0
 2189 0b04 00       		.byte	0
 2190 0b05 00       		.byte	0
 2191 0b06 2F       		.uleb128 0x2f
 2192 0b07 B7080000 		.4byte	.LASF135
 2193 0b0b 02       		.byte	0x2
 2194 0b0c 2A07     		.2byte	0x72a
 2195 0b0e 01       		.byte	0x1
 2196 0b0f E3010000 		.4byte	0x1e3
 2197 0b13 03       		.byte	0x3
 2198 0b14 250B0000 		.4byte	0xb25
 2199 0b18 30       		.uleb128 0x30
 2200 0b19 60040000 		.4byte	.LASF130
 2201 0b1d 02       		.byte	0x2
 2202 0b1e 2A07     		.2byte	0x72a
 2203 0b20 E3010000 		.4byte	0x1e3
 2204 0b24 00       		.byte	0
 2205 0b25 31       		.uleb128 0x31
ARM GAS  /tmp/cc4CJeQn.s 			page 97


 2206 0b26 9E010000 		.4byte	.LASF147
 2207 0b2a 02       		.byte	0x2
 2208 0b2b E206     		.2byte	0x6e2
 2209 0b2d 01       		.byte	0x1
 2210 0b2e 01       		.byte	0x1
 2211 0b2f 03       		.byte	0x3
 2212 0b30 32       		.uleb128 0x32
 2213 0b31 D5040000 		.4byte	.LASF138
 2214 0b35 02       		.byte	0x2
 2215 0b36 B106     		.2byte	0x6b1
 2216 0b38 01       		.byte	0x1
 2217 0b39 03       		.byte	0x3
 2218 0b3a 930B0000 		.4byte	0xb93
 2219 0b3e 30       		.uleb128 0x30
 2220 0b3f 32080000 		.4byte	.LASF131
 2221 0b43 02       		.byte	0x2
 2222 0b44 B106     		.2byte	0x6b1
 2223 0b46 E3010000 		.4byte	0x1e3
 2224 0b4a 30       		.uleb128 0x30
 2225 0b4b F9000000 		.4byte	.LASF117
 2226 0b4f 02       		.byte	0x2
 2227 0b50 B106     		.2byte	0x6b1
 2228 0b52 E3010000 		.4byte	0x1e3
 2229 0b56 30       		.uleb128 0x30
 2230 0b57 3D000000 		.4byte	.LASF118
 2231 0b5b 02       		.byte	0x2
 2232 0b5c B106     		.2byte	0x6b1
 2233 0b5e 4D080000 		.4byte	0x84d
 2234 0b62 30       		.uleb128 0x30
 2235 0b63 7E070000 		.4byte	.LASF119
 2236 0b67 02       		.byte	0x2
 2237 0b68 B106     		.2byte	0x6b1
 2238 0b6a 4D080000 		.4byte	0x84d
 2239 0b6e 33       		.uleb128 0x33
 2240 0b6f 05000000 		.4byte	.LASF132
 2241 0b73 02       		.byte	0x2
 2242 0b74 B306     		.2byte	0x6b3
 2243 0b76 E3010000 		.4byte	0x1e3
 2244 0b7a 33       		.uleb128 0x33
 2245 0b7b D4010000 		.4byte	.LASF133
 2246 0b7f 02       		.byte	0x2
 2247 0b80 B406     		.2byte	0x6b4
 2248 0b82 E3010000 		.4byte	0x1e3
 2249 0b86 33       		.uleb128 0x33
 2250 0b87 AF040000 		.4byte	.LASF134
 2251 0b8b 02       		.byte	0x2
 2252 0b8c B506     		.2byte	0x6b5
 2253 0b8e E3010000 		.4byte	0x1e3
 2254 0b92 00       		.byte	0
 2255 0b93 2F       		.uleb128 0x2f
 2256 0b94 96040000 		.4byte	.LASF136
 2257 0b98 02       		.byte	0x2
 2258 0b99 9606     		.2byte	0x696
 2259 0b9b 01       		.byte	0x1
 2260 0b9c E3010000 		.4byte	0x1e3
 2261 0ba0 03       		.byte	0x3
 2262 0ba1 EE0B0000 		.4byte	0xbee
ARM GAS  /tmp/cc4CJeQn.s 			page 98


 2263 0ba5 30       		.uleb128 0x30
 2264 0ba6 F9000000 		.4byte	.LASF117
 2265 0baa 02       		.byte	0x2
 2266 0bab 9606     		.2byte	0x696
 2267 0bad E3010000 		.4byte	0x1e3
 2268 0bb1 30       		.uleb128 0x30
 2269 0bb2 91030000 		.4byte	.LASF127
 2270 0bb6 02       		.byte	0x2
 2271 0bb7 9606     		.2byte	0x696
 2272 0bb9 E3010000 		.4byte	0x1e3
 2273 0bbd 30       		.uleb128 0x30
 2274 0bbe B1010000 		.4byte	.LASF128
 2275 0bc2 02       		.byte	0x2
 2276 0bc3 9606     		.2byte	0x696
 2277 0bc5 E3010000 		.4byte	0x1e3
 2278 0bc9 33       		.uleb128 0x33
 2279 0bca 05000000 		.4byte	.LASF132
 2280 0bce 02       		.byte	0x2
 2281 0bcf 9806     		.2byte	0x698
 2282 0bd1 E3010000 		.4byte	0x1e3
 2283 0bd5 33       		.uleb128 0x33
 2284 0bd6 D4010000 		.4byte	.LASF133
 2285 0bda 02       		.byte	0x2
 2286 0bdb 9906     		.2byte	0x699
 2287 0bdd E3010000 		.4byte	0x1e3
 2288 0be1 33       		.uleb128 0x33
 2289 0be2 AF040000 		.4byte	.LASF134
 2290 0be6 02       		.byte	0x2
 2291 0be7 9A06     		.2byte	0x69a
 2292 0be9 E3010000 		.4byte	0x1e3
 2293 0bed 00       		.byte	0
 2294 0bee 2F       		.uleb128 0x2f
 2295 0bef 02040000 		.4byte	.LASF137
 2296 0bf3 02       		.byte	0x2
 2297 0bf4 7D06     		.2byte	0x67d
 2298 0bf6 01       		.byte	0x1
 2299 0bf7 E3010000 		.4byte	0x1e3
 2300 0bfb 03       		.byte	0x3
 2301 0bfc 0D0C0000 		.4byte	0xc0d
 2302 0c00 30       		.uleb128 0x30
 2303 0c01 2C040000 		.4byte	.LASF111
 2304 0c05 02       		.byte	0x2
 2305 0c06 7D06     		.2byte	0x67d
 2306 0c08 53010000 		.4byte	0x153
 2307 0c0c 00       		.byte	0
 2308 0c0d 32       		.uleb128 0x32
 2309 0c0e 80000000 		.4byte	.LASF139
 2310 0c12 02       		.byte	0x2
 2311 0c13 6706     		.2byte	0x667
 2312 0c15 01       		.byte	0x1
 2313 0c16 03       		.byte	0x3
 2314 0c17 340C0000 		.4byte	0xc34
 2315 0c1b 30       		.uleb128 0x30
 2316 0c1c 2C040000 		.4byte	.LASF111
 2317 0c20 02       		.byte	0x2
 2318 0c21 6706     		.2byte	0x667
 2319 0c23 53010000 		.4byte	0x153
ARM GAS  /tmp/cc4CJeQn.s 			page 99


 2320 0c27 30       		.uleb128 0x30
 2321 0c28 88030000 		.4byte	.LASF140
 2322 0c2c 02       		.byte	0x2
 2323 0c2d 6706     		.2byte	0x667
 2324 0c2f E3010000 		.4byte	0x1e3
 2325 0c33 00       		.byte	0
 2326 0c34 2F       		.uleb128 0x2f
 2327 0c35 FA070000 		.4byte	.LASF141
 2328 0c39 02       		.byte	0x2
 2329 0c3a 5106     		.2byte	0x651
 2330 0c3c 01       		.byte	0x1
 2331 0c3d E3010000 		.4byte	0x1e3
 2332 0c41 03       		.byte	0x3
 2333 0c42 530C0000 		.4byte	0xc53
 2334 0c46 30       		.uleb128 0x30
 2335 0c47 2C040000 		.4byte	.LASF111
 2336 0c4b 02       		.byte	0x2
 2337 0c4c 5106     		.2byte	0x651
 2338 0c4e 53010000 		.4byte	0x153
 2339 0c52 00       		.byte	0
 2340 0c53 32       		.uleb128 0x32
 2341 0c54 87010000 		.4byte	.LASF142
 2342 0c58 02       		.byte	0x2
 2343 0c59 4006     		.2byte	0x640
 2344 0c5b 01       		.byte	0x1
 2345 0c5c 03       		.byte	0x3
 2346 0c5d 6E0C0000 		.4byte	0xc6e
 2347 0c61 30       		.uleb128 0x30
 2348 0c62 2C040000 		.4byte	.LASF111
 2349 0c66 02       		.byte	0x2
 2350 0c67 4006     		.2byte	0x640
 2351 0c69 53010000 		.4byte	0x153
 2352 0c6d 00       		.byte	0
 2353 0c6e 32       		.uleb128 0x32
 2354 0c6f AA060000 		.4byte	.LASF143
 2355 0c73 02       		.byte	0x2
 2356 0c74 3106     		.2byte	0x631
 2357 0c76 01       		.byte	0x1
 2358 0c77 03       		.byte	0x3
 2359 0c78 890C0000 		.4byte	0xc89
 2360 0c7c 30       		.uleb128 0x30
 2361 0c7d 2C040000 		.4byte	.LASF111
 2362 0c81 02       		.byte	0x2
 2363 0c82 3106     		.2byte	0x631
 2364 0c84 53010000 		.4byte	0x153
 2365 0c88 00       		.byte	0
 2366 0c89 2F       		.uleb128 0x2f
 2367 0c8a 70040000 		.4byte	.LASF144
 2368 0c8e 02       		.byte	0x2
 2369 0c8f 1E06     		.2byte	0x61e
 2370 0c91 01       		.byte	0x1
 2371 0c92 E3010000 		.4byte	0x1e3
 2372 0c96 03       		.byte	0x3
 2373 0c97 A80C0000 		.4byte	0xca8
 2374 0c9b 30       		.uleb128 0x30
 2375 0c9c 2C040000 		.4byte	.LASF111
 2376 0ca0 02       		.byte	0x2
ARM GAS  /tmp/cc4CJeQn.s 			page 100


 2377 0ca1 1E06     		.2byte	0x61e
 2378 0ca3 53010000 		.4byte	0x153
 2379 0ca7 00       		.byte	0
 2380 0ca8 32       		.uleb128 0x32
 2381 0ca9 2B020000 		.4byte	.LASF145
 2382 0cad 02       		.byte	0x2
 2383 0cae 0B06     		.2byte	0x60b
 2384 0cb0 01       		.byte	0x1
 2385 0cb1 03       		.byte	0x3
 2386 0cb2 C30C0000 		.4byte	0xcc3
 2387 0cb6 30       		.uleb128 0x30
 2388 0cb7 2C040000 		.4byte	.LASF111
 2389 0cbb 02       		.byte	0x2
 2390 0cbc 0B06     		.2byte	0x60b
 2391 0cbe 53010000 		.4byte	0x153
 2392 0cc2 00       		.byte	0
 2393 0cc3 32       		.uleb128 0x32
 2394 0cc4 BF060000 		.4byte	.LASF146
 2395 0cc8 02       		.byte	0x2
 2396 0cc9 E705     		.2byte	0x5e7
 2397 0ccb 01       		.byte	0x1
 2398 0ccc 03       		.byte	0x3
 2399 0ccd DE0C0000 		.4byte	0xcde
 2400 0cd1 30       		.uleb128 0x30
 2401 0cd2 2C040000 		.4byte	.LASF111
 2402 0cd6 02       		.byte	0x2
 2403 0cd7 E705     		.2byte	0x5e7
 2404 0cd9 53010000 		.4byte	0x153
 2405 0cdd 00       		.byte	0
 2406 0cde 34       		.uleb128 0x34
 2407 0cdf 43080000 		.4byte	.LASF148
 2408 0ce3 02       		.byte	0x2
 2409 0ce4 DB05     		.2byte	0x5db
 2410 0ce6 01       		.byte	0x1
 2411 0ce7 E3010000 		.4byte	0x1e3
 2412 0ceb 03       		.byte	0x3
 2413 0cec 32       		.uleb128 0x32
 2414 0ced BA030000 		.4byte	.LASF149
 2415 0cf1 02       		.byte	0x2
 2416 0cf2 C805     		.2byte	0x5c8
 2417 0cf4 01       		.byte	0x1
 2418 0cf5 03       		.byte	0x3
 2419 0cf6 1F0D0000 		.4byte	0xd1f
 2420 0cfa 30       		.uleb128 0x30
 2421 0cfb F9000000 		.4byte	.LASF117
 2422 0cff 02       		.byte	0x2
 2423 0d00 C805     		.2byte	0x5c8
 2424 0d02 E3010000 		.4byte	0x1e3
 2425 0d06 33       		.uleb128 0x33
 2426 0d07 B1020000 		.4byte	.LASF150
 2427 0d0b 02       		.byte	0x2
 2428 0d0c CA05     		.2byte	0x5ca
 2429 0d0e E3010000 		.4byte	0x1e3
 2430 0d12 33       		.uleb128 0x33
 2431 0d13 05000000 		.4byte	.LASF132
 2432 0d17 02       		.byte	0x2
 2433 0d18 CB05     		.2byte	0x5cb
ARM GAS  /tmp/cc4CJeQn.s 			page 101


 2434 0d1a E3010000 		.4byte	0x1e3
 2435 0d1e 00       		.byte	0
 2436 0d1f 35       		.uleb128 0x35
 2437 0d20 B4030000 		.4byte	.LASF151
 2438 0d24 03       		.byte	0x3
 2439 0d25 6D03     		.2byte	0x36d
 2440 0d27 01       		.byte	0x1
 2441 0d28 03       		.byte	0x3
 2442 0d29 35       		.uleb128 0x35
 2443 0d2a 90040000 		.4byte	.LASF152
 2444 0d2e 03       		.byte	0x3
 2445 0d2f 6203     		.2byte	0x362
 2446 0d31 01       		.byte	0x1
 2447 0d32 03       		.byte	0x3
 2448 0d33 00       		.byte	0
 2449              		.section	.debug_abbrev,"",%progbits
 2450              	.Ldebug_abbrev0:
 2451 0000 01       		.uleb128 0x1
 2452 0001 11       		.uleb128 0x11
 2453 0002 01       		.byte	0x1
 2454 0003 25       		.uleb128 0x25
 2455 0004 0E       		.uleb128 0xe
 2456 0005 13       		.uleb128 0x13
 2457 0006 0B       		.uleb128 0xb
 2458 0007 03       		.uleb128 0x3
 2459 0008 0E       		.uleb128 0xe
 2460 0009 1B       		.uleb128 0x1b
 2461 000a 0E       		.uleb128 0xe
 2462 000b 11       		.uleb128 0x11
 2463 000c 01       		.uleb128 0x1
 2464 000d 12       		.uleb128 0x12
 2465 000e 01       		.uleb128 0x1
 2466 000f 10       		.uleb128 0x10
 2467 0010 06       		.uleb128 0x6
 2468 0011 00       		.byte	0
 2469 0012 00       		.byte	0
 2470 0013 02       		.uleb128 0x2
 2471 0014 04       		.uleb128 0x4
 2472 0015 01       		.byte	0x1
 2473 0016 0B       		.uleb128 0xb
 2474 0017 0B       		.uleb128 0xb
 2475 0018 49       		.uleb128 0x49
 2476 0019 13       		.uleb128 0x13
 2477 001a 3A       		.uleb128 0x3a
 2478 001b 0B       		.uleb128 0xb
 2479 001c 3B       		.uleb128 0x3b
 2480 001d 0B       		.uleb128 0xb
 2481 001e 01       		.uleb128 0x1
 2482 001f 13       		.uleb128 0x13
 2483 0020 00       		.byte	0
 2484 0021 00       		.byte	0
 2485 0022 03       		.uleb128 0x3
 2486 0023 28       		.uleb128 0x28
 2487 0024 00       		.byte	0
 2488 0025 03       		.uleb128 0x3
 2489 0026 0E       		.uleb128 0xe
 2490 0027 1C       		.uleb128 0x1c
ARM GAS  /tmp/cc4CJeQn.s 			page 102


 2491 0028 0D       		.uleb128 0xd
 2492 0029 00       		.byte	0
 2493 002a 00       		.byte	0
 2494 002b 04       		.uleb128 0x4
 2495 002c 28       		.uleb128 0x28
 2496 002d 00       		.byte	0
 2497 002e 03       		.uleb128 0x3
 2498 002f 0E       		.uleb128 0xe
 2499 0030 1C       		.uleb128 0x1c
 2500 0031 0B       		.uleb128 0xb
 2501 0032 00       		.byte	0
 2502 0033 00       		.byte	0
 2503 0034 05       		.uleb128 0x5
 2504 0035 24       		.uleb128 0x24
 2505 0036 00       		.byte	0
 2506 0037 0B       		.uleb128 0xb
 2507 0038 0B       		.uleb128 0xb
 2508 0039 3E       		.uleb128 0x3e
 2509 003a 0B       		.uleb128 0xb
 2510 003b 03       		.uleb128 0x3
 2511 003c 0E       		.uleb128 0xe
 2512 003d 00       		.byte	0
 2513 003e 00       		.byte	0
 2514 003f 06       		.uleb128 0x6
 2515 0040 16       		.uleb128 0x16
 2516 0041 00       		.byte	0
 2517 0042 03       		.uleb128 0x3
 2518 0043 0E       		.uleb128 0xe
 2519 0044 3A       		.uleb128 0x3a
 2520 0045 0B       		.uleb128 0xb
 2521 0046 3B       		.uleb128 0x3b
 2522 0047 0B       		.uleb128 0xb
 2523 0048 49       		.uleb128 0x49
 2524 0049 13       		.uleb128 0x13
 2525 004a 00       		.byte	0
 2526 004b 00       		.byte	0
 2527 004c 07       		.uleb128 0x7
 2528 004d 24       		.uleb128 0x24
 2529 004e 00       		.byte	0
 2530 004f 0B       		.uleb128 0xb
 2531 0050 0B       		.uleb128 0xb
 2532 0051 3E       		.uleb128 0x3e
 2533 0052 0B       		.uleb128 0xb
 2534 0053 03       		.uleb128 0x3
 2535 0054 08       		.uleb128 0x8
 2536 0055 00       		.byte	0
 2537 0056 00       		.byte	0
 2538 0057 08       		.uleb128 0x8
 2539 0058 35       		.uleb128 0x35
 2540 0059 00       		.byte	0
 2541 005a 49       		.uleb128 0x49
 2542 005b 13       		.uleb128 0x13
 2543 005c 00       		.byte	0
 2544 005d 00       		.byte	0
 2545 005e 09       		.uleb128 0x9
 2546 005f 26       		.uleb128 0x26
 2547 0060 00       		.byte	0
ARM GAS  /tmp/cc4CJeQn.s 			page 103


 2548 0061 49       		.uleb128 0x49
 2549 0062 13       		.uleb128 0x13
 2550 0063 00       		.byte	0
 2551 0064 00       		.byte	0
 2552 0065 0A       		.uleb128 0xa
 2553 0066 13       		.uleb128 0x13
 2554 0067 01       		.byte	0x1
 2555 0068 0B       		.uleb128 0xb
 2556 0069 05       		.uleb128 0x5
 2557 006a 3A       		.uleb128 0x3a
 2558 006b 0B       		.uleb128 0xb
 2559 006c 3B       		.uleb128 0x3b
 2560 006d 05       		.uleb128 0x5
 2561 006e 01       		.uleb128 0x1
 2562 006f 13       		.uleb128 0x13
 2563 0070 00       		.byte	0
 2564 0071 00       		.byte	0
 2565 0072 0B       		.uleb128 0xb
 2566 0073 0D       		.uleb128 0xd
 2567 0074 00       		.byte	0
 2568 0075 03       		.uleb128 0x3
 2569 0076 0E       		.uleb128 0xe
 2570 0077 3A       		.uleb128 0x3a
 2571 0078 0B       		.uleb128 0xb
 2572 0079 3B       		.uleb128 0x3b
 2573 007a 05       		.uleb128 0x5
 2574 007b 49       		.uleb128 0x49
 2575 007c 13       		.uleb128 0x13
 2576 007d 38       		.uleb128 0x38
 2577 007e 0A       		.uleb128 0xa
 2578 007f 00       		.byte	0
 2579 0080 00       		.byte	0
 2580 0081 0C       		.uleb128 0xc
 2581 0082 0D       		.uleb128 0xd
 2582 0083 00       		.byte	0
 2583 0084 03       		.uleb128 0x3
 2584 0085 08       		.uleb128 0x8
 2585 0086 3A       		.uleb128 0x3a
 2586 0087 0B       		.uleb128 0xb
 2587 0088 3B       		.uleb128 0x3b
 2588 0089 05       		.uleb128 0x5
 2589 008a 49       		.uleb128 0x49
 2590 008b 13       		.uleb128 0x13
 2591 008c 38       		.uleb128 0x38
 2592 008d 0A       		.uleb128 0xa
 2593 008e 00       		.byte	0
 2594 008f 00       		.byte	0
 2595 0090 0D       		.uleb128 0xd
 2596 0091 01       		.uleb128 0x1
 2597 0092 01       		.byte	0x1
 2598 0093 49       		.uleb128 0x49
 2599 0094 13       		.uleb128 0x13
 2600 0095 01       		.uleb128 0x1
 2601 0096 13       		.uleb128 0x13
 2602 0097 00       		.byte	0
 2603 0098 00       		.byte	0
 2604 0099 0E       		.uleb128 0xe
ARM GAS  /tmp/cc4CJeQn.s 			page 104


 2605 009a 21       		.uleb128 0x21
 2606 009b 00       		.byte	0
 2607 009c 49       		.uleb128 0x49
 2608 009d 13       		.uleb128 0x13
 2609 009e 2F       		.uleb128 0x2f
 2610 009f 0B       		.uleb128 0xb
 2611 00a0 00       		.byte	0
 2612 00a1 00       		.byte	0
 2613 00a2 0F       		.uleb128 0xf
 2614 00a3 21       		.uleb128 0x21
 2615 00a4 00       		.byte	0
 2616 00a5 49       		.uleb128 0x49
 2617 00a6 13       		.uleb128 0x13
 2618 00a7 2F       		.uleb128 0x2f
 2619 00a8 05       		.uleb128 0x5
 2620 00a9 00       		.byte	0
 2621 00aa 00       		.byte	0
 2622 00ab 10       		.uleb128 0x10
 2623 00ac 16       		.uleb128 0x16
 2624 00ad 00       		.byte	0
 2625 00ae 03       		.uleb128 0x3
 2626 00af 0E       		.uleb128 0xe
 2627 00b0 3A       		.uleb128 0x3a
 2628 00b1 0B       		.uleb128 0xb
 2629 00b2 3B       		.uleb128 0x3b
 2630 00b3 05       		.uleb128 0x5
 2631 00b4 49       		.uleb128 0x49
 2632 00b5 13       		.uleb128 0x13
 2633 00b6 00       		.byte	0
 2634 00b7 00       		.byte	0
 2635 00b8 11       		.uleb128 0x11
 2636 00b9 13       		.uleb128 0x13
 2637 00ba 01       		.byte	0x1
 2638 00bb 0B       		.uleb128 0xb
 2639 00bc 0B       		.uleb128 0xb
 2640 00bd 3A       		.uleb128 0x3a
 2641 00be 0B       		.uleb128 0xb
 2642 00bf 3B       		.uleb128 0x3b
 2643 00c0 05       		.uleb128 0x5
 2644 00c1 01       		.uleb128 0x1
 2645 00c2 13       		.uleb128 0x13
 2646 00c3 00       		.byte	0
 2647 00c4 00       		.byte	0
 2648 00c5 12       		.uleb128 0x12
 2649 00c6 34       		.uleb128 0x34
 2650 00c7 00       		.byte	0
 2651 00c8 03       		.uleb128 0x3
 2652 00c9 0E       		.uleb128 0xe
 2653 00ca 3A       		.uleb128 0x3a
 2654 00cb 0B       		.uleb128 0xb
 2655 00cc 3B       		.uleb128 0x3b
 2656 00cd 05       		.uleb128 0x5
 2657 00ce 49       		.uleb128 0x49
 2658 00cf 13       		.uleb128 0x13
 2659 00d0 3F       		.uleb128 0x3f
 2660 00d1 0C       		.uleb128 0xc
 2661 00d2 3C       		.uleb128 0x3c
ARM GAS  /tmp/cc4CJeQn.s 			page 105


 2662 00d3 0C       		.uleb128 0xc
 2663 00d4 00       		.byte	0
 2664 00d5 00       		.byte	0
 2665 00d6 13       		.uleb128 0x13
 2666 00d7 34       		.uleb128 0x34
 2667 00d8 00       		.byte	0
 2668 00d9 03       		.uleb128 0x3
 2669 00da 0E       		.uleb128 0xe
 2670 00db 3A       		.uleb128 0x3a
 2671 00dc 0B       		.uleb128 0xb
 2672 00dd 3B       		.uleb128 0x3b
 2673 00de 0B       		.uleb128 0xb
 2674 00df 49       		.uleb128 0x49
 2675 00e0 13       		.uleb128 0x13
 2676 00e1 3F       		.uleb128 0x3f
 2677 00e2 0C       		.uleb128 0xc
 2678 00e3 3C       		.uleb128 0x3c
 2679 00e4 0C       		.uleb128 0xc
 2680 00e5 00       		.byte	0
 2681 00e6 00       		.byte	0
 2682 00e7 14       		.uleb128 0x14
 2683 00e8 2E       		.uleb128 0x2e
 2684 00e9 00       		.byte	0
 2685 00ea 3F       		.uleb128 0x3f
 2686 00eb 0C       		.uleb128 0xc
 2687 00ec 03       		.uleb128 0x3
 2688 00ed 0E       		.uleb128 0xe
 2689 00ee 3A       		.uleb128 0x3a
 2690 00ef 0B       		.uleb128 0xb
 2691 00f0 3B       		.uleb128 0x3b
 2692 00f1 05       		.uleb128 0x5
 2693 00f2 27       		.uleb128 0x27
 2694 00f3 0C       		.uleb128 0xc
 2695 00f4 11       		.uleb128 0x11
 2696 00f5 01       		.uleb128 0x1
 2697 00f6 12       		.uleb128 0x12
 2698 00f7 01       		.uleb128 0x1
 2699 00f8 40       		.uleb128 0x40
 2700 00f9 0A       		.uleb128 0xa
 2701 00fa 9742     		.uleb128 0x2117
 2702 00fc 0C       		.uleb128 0xc
 2703 00fd 00       		.byte	0
 2704 00fe 00       		.byte	0
 2705 00ff 15       		.uleb128 0x15
 2706 0100 2E       		.uleb128 0x2e
 2707 0101 01       		.byte	0x1
 2708 0102 3F       		.uleb128 0x3f
 2709 0103 0C       		.uleb128 0xc
 2710 0104 03       		.uleb128 0x3
 2711 0105 0E       		.uleb128 0xe
 2712 0106 3A       		.uleb128 0x3a
 2713 0107 0B       		.uleb128 0xb
 2714 0108 3B       		.uleb128 0x3b
 2715 0109 05       		.uleb128 0x5
 2716 010a 27       		.uleb128 0x27
 2717 010b 0C       		.uleb128 0xc
 2718 010c 11       		.uleb128 0x11
ARM GAS  /tmp/cc4CJeQn.s 			page 106


 2719 010d 01       		.uleb128 0x1
 2720 010e 12       		.uleb128 0x12
 2721 010f 01       		.uleb128 0x1
 2722 0110 40       		.uleb128 0x40
 2723 0111 06       		.uleb128 0x6
 2724 0112 9742     		.uleb128 0x2117
 2725 0114 0C       		.uleb128 0xc
 2726 0115 01       		.uleb128 0x1
 2727 0116 13       		.uleb128 0x13
 2728 0117 00       		.byte	0
 2729 0118 00       		.byte	0
 2730 0119 16       		.uleb128 0x16
 2731 011a 898201   		.uleb128 0x4109
 2732 011d 00       		.byte	0
 2733 011e 11       		.uleb128 0x11
 2734 011f 01       		.uleb128 0x1
 2735 0120 31       		.uleb128 0x31
 2736 0121 13       		.uleb128 0x13
 2737 0122 00       		.byte	0
 2738 0123 00       		.byte	0
 2739 0124 17       		.uleb128 0x17
 2740 0125 2E       		.uleb128 0x2e
 2741 0126 01       		.byte	0x1
 2742 0127 3F       		.uleb128 0x3f
 2743 0128 0C       		.uleb128 0xc
 2744 0129 03       		.uleb128 0x3
 2745 012a 0E       		.uleb128 0xe
 2746 012b 3A       		.uleb128 0x3a
 2747 012c 0B       		.uleb128 0xb
 2748 012d 3B       		.uleb128 0x3b
 2749 012e 05       		.uleb128 0x5
 2750 012f 27       		.uleb128 0x27
 2751 0130 0C       		.uleb128 0xc
 2752 0131 11       		.uleb128 0x11
 2753 0132 01       		.uleb128 0x1
 2754 0133 12       		.uleb128 0x12
 2755 0134 01       		.uleb128 0x1
 2756 0135 40       		.uleb128 0x40
 2757 0136 0A       		.uleb128 0xa
 2758 0137 9742     		.uleb128 0x2117
 2759 0139 0C       		.uleb128 0xc
 2760 013a 01       		.uleb128 0x1
 2761 013b 13       		.uleb128 0x13
 2762 013c 00       		.byte	0
 2763 013d 00       		.byte	0
 2764 013e 18       		.uleb128 0x18
 2765 013f 05       		.uleb128 0x5
 2766 0140 00       		.byte	0
 2767 0141 03       		.uleb128 0x3
 2768 0142 0E       		.uleb128 0xe
 2769 0143 3A       		.uleb128 0x3a
 2770 0144 0B       		.uleb128 0xb
 2771 0145 3B       		.uleb128 0x3b
 2772 0146 05       		.uleb128 0x5
 2773 0147 49       		.uleb128 0x49
 2774 0148 13       		.uleb128 0x13
 2775 0149 02       		.uleb128 0x2
ARM GAS  /tmp/cc4CJeQn.s 			page 107


 2776 014a 0A       		.uleb128 0xa
 2777 014b 00       		.byte	0
 2778 014c 00       		.byte	0
 2779 014d 19       		.uleb128 0x19
 2780 014e 2E       		.uleb128 0x2e
 2781 014f 01       		.byte	0x1
 2782 0150 3F       		.uleb128 0x3f
 2783 0151 0C       		.uleb128 0xc
 2784 0152 03       		.uleb128 0x3
 2785 0153 0E       		.uleb128 0xe
 2786 0154 3A       		.uleb128 0x3a
 2787 0155 0B       		.uleb128 0xb
 2788 0156 3B       		.uleb128 0x3b
 2789 0157 05       		.uleb128 0x5
 2790 0158 27       		.uleb128 0x27
 2791 0159 0C       		.uleb128 0xc
 2792 015a 49       		.uleb128 0x49
 2793 015b 13       		.uleb128 0x13
 2794 015c 11       		.uleb128 0x11
 2795 015d 01       		.uleb128 0x1
 2796 015e 12       		.uleb128 0x12
 2797 015f 01       		.uleb128 0x1
 2798 0160 40       		.uleb128 0x40
 2799 0161 0A       		.uleb128 0xa
 2800 0162 9742     		.uleb128 0x2117
 2801 0164 0C       		.uleb128 0xc
 2802 0165 01       		.uleb128 0x1
 2803 0166 13       		.uleb128 0x13
 2804 0167 00       		.byte	0
 2805 0168 00       		.byte	0
 2806 0169 1A       		.uleb128 0x1a
 2807 016a 05       		.uleb128 0x5
 2808 016b 00       		.byte	0
 2809 016c 03       		.uleb128 0x3
 2810 016d 0E       		.uleb128 0xe
 2811 016e 3A       		.uleb128 0x3a
 2812 016f 0B       		.uleb128 0xb
 2813 0170 3B       		.uleb128 0x3b
 2814 0171 05       		.uleb128 0x5
 2815 0172 49       		.uleb128 0x49
 2816 0173 13       		.uleb128 0x13
 2817 0174 02       		.uleb128 0x2
 2818 0175 06       		.uleb128 0x6
 2819 0176 00       		.byte	0
 2820 0177 00       		.byte	0
 2821 0178 1B       		.uleb128 0x1b
 2822 0179 1D       		.uleb128 0x1d
 2823 017a 01       		.byte	0x1
 2824 017b 31       		.uleb128 0x31
 2825 017c 13       		.uleb128 0x13
 2826 017d 11       		.uleb128 0x11
 2827 017e 01       		.uleb128 0x1
 2828 017f 12       		.uleb128 0x12
 2829 0180 01       		.uleb128 0x1
 2830 0181 58       		.uleb128 0x58
 2831 0182 0B       		.uleb128 0xb
 2832 0183 59       		.uleb128 0x59
ARM GAS  /tmp/cc4CJeQn.s 			page 108


 2833 0184 05       		.uleb128 0x5
 2834 0185 00       		.byte	0
 2835 0186 00       		.byte	0
 2836 0187 1C       		.uleb128 0x1c
 2837 0188 05       		.uleb128 0x5
 2838 0189 00       		.byte	0
 2839 018a 31       		.uleb128 0x31
 2840 018b 13       		.uleb128 0x13
 2841 018c 02       		.uleb128 0x2
 2842 018d 06       		.uleb128 0x6
 2843 018e 00       		.byte	0
 2844 018f 00       		.byte	0
 2845 0190 1D       		.uleb128 0x1d
 2846 0191 1D       		.uleb128 0x1d
 2847 0192 01       		.byte	0x1
 2848 0193 31       		.uleb128 0x31
 2849 0194 13       		.uleb128 0x13
 2850 0195 52       		.uleb128 0x52
 2851 0196 01       		.uleb128 0x1
 2852 0197 55       		.uleb128 0x55
 2853 0198 06       		.uleb128 0x6
 2854 0199 58       		.uleb128 0x58
 2855 019a 0B       		.uleb128 0xb
 2856 019b 59       		.uleb128 0x59
 2857 019c 05       		.uleb128 0x5
 2858 019d 01       		.uleb128 0x1
 2859 019e 13       		.uleb128 0x13
 2860 019f 00       		.byte	0
 2861 01a0 00       		.byte	0
 2862 01a1 1E       		.uleb128 0x1e
 2863 01a2 1D       		.uleb128 0x1d
 2864 01a3 01       		.byte	0x1
 2865 01a4 31       		.uleb128 0x31
 2866 01a5 13       		.uleb128 0x13
 2867 01a6 52       		.uleb128 0x52
 2868 01a7 01       		.uleb128 0x1
 2869 01a8 55       		.uleb128 0x55
 2870 01a9 06       		.uleb128 0x6
 2871 01aa 58       		.uleb128 0x58
 2872 01ab 0B       		.uleb128 0xb
 2873 01ac 59       		.uleb128 0x59
 2874 01ad 05       		.uleb128 0x5
 2875 01ae 00       		.byte	0
 2876 01af 00       		.byte	0
 2877 01b0 1F       		.uleb128 0x1f
 2878 01b1 05       		.uleb128 0x5
 2879 01b2 00       		.byte	0
 2880 01b3 31       		.uleb128 0x31
 2881 01b4 13       		.uleb128 0x13
 2882 01b5 00       		.byte	0
 2883 01b6 00       		.byte	0
 2884 01b7 20       		.uleb128 0x20
 2885 01b8 0B       		.uleb128 0xb
 2886 01b9 01       		.byte	0x1
 2887 01ba 55       		.uleb128 0x55
 2888 01bb 06       		.uleb128 0x6
 2889 01bc 00       		.byte	0
ARM GAS  /tmp/cc4CJeQn.s 			page 109


 2890 01bd 00       		.byte	0
 2891 01be 21       		.uleb128 0x21
 2892 01bf 34       		.uleb128 0x34
 2893 01c0 00       		.byte	0
 2894 01c1 31       		.uleb128 0x31
 2895 01c2 13       		.uleb128 0x13
 2896 01c3 02       		.uleb128 0x2
 2897 01c4 0A       		.uleb128 0xa
 2898 01c5 00       		.byte	0
 2899 01c6 00       		.byte	0
 2900 01c7 22       		.uleb128 0x22
 2901 01c8 34       		.uleb128 0x34
 2902 01c9 00       		.byte	0
 2903 01ca 31       		.uleb128 0x31
 2904 01cb 13       		.uleb128 0x13
 2905 01cc 02       		.uleb128 0x2
 2906 01cd 06       		.uleb128 0x6
 2907 01ce 00       		.byte	0
 2908 01cf 00       		.byte	0
 2909 01d0 23       		.uleb128 0x23
 2910 01d1 0F       		.uleb128 0xf
 2911 01d2 00       		.byte	0
 2912 01d3 0B       		.uleb128 0xb
 2913 01d4 0B       		.uleb128 0xb
 2914 01d5 49       		.uleb128 0x49
 2915 01d6 13       		.uleb128 0x13
 2916 01d7 00       		.byte	0
 2917 01d8 00       		.byte	0
 2918 01d9 24       		.uleb128 0x24
 2919 01da 1D       		.uleb128 0x1d
 2920 01db 00       		.byte	0
 2921 01dc 31       		.uleb128 0x31
 2922 01dd 13       		.uleb128 0x13
 2923 01de 11       		.uleb128 0x11
 2924 01df 01       		.uleb128 0x1
 2925 01e0 12       		.uleb128 0x12
 2926 01e1 01       		.uleb128 0x1
 2927 01e2 58       		.uleb128 0x58
 2928 01e3 0B       		.uleb128 0xb
 2929 01e4 59       		.uleb128 0x59
 2930 01e5 05       		.uleb128 0x5
 2931 01e6 00       		.byte	0
 2932 01e7 00       		.byte	0
 2933 01e8 25       		.uleb128 0x25
 2934 01e9 2E       		.uleb128 0x2e
 2935 01ea 01       		.byte	0x1
 2936 01eb 3F       		.uleb128 0x3f
 2937 01ec 0C       		.uleb128 0xc
 2938 01ed 03       		.uleb128 0x3
 2939 01ee 0E       		.uleb128 0xe
 2940 01ef 3A       		.uleb128 0x3a
 2941 01f0 0B       		.uleb128 0xb
 2942 01f1 3B       		.uleb128 0x3b
 2943 01f2 0B       		.uleb128 0xb
 2944 01f3 27       		.uleb128 0x27
 2945 01f4 0C       		.uleb128 0xc
 2946 01f5 49       		.uleb128 0x49
ARM GAS  /tmp/cc4CJeQn.s 			page 110


 2947 01f6 13       		.uleb128 0x13
 2948 01f7 11       		.uleb128 0x11
 2949 01f8 01       		.uleb128 0x1
 2950 01f9 12       		.uleb128 0x12
 2951 01fa 01       		.uleb128 0x1
 2952 01fb 40       		.uleb128 0x40
 2953 01fc 0A       		.uleb128 0xa
 2954 01fd 9742     		.uleb128 0x2117
 2955 01ff 0C       		.uleb128 0xc
 2956 0200 01       		.uleb128 0x1
 2957 0201 13       		.uleb128 0x13
 2958 0202 00       		.byte	0
 2959 0203 00       		.byte	0
 2960 0204 26       		.uleb128 0x26
 2961 0205 05       		.uleb128 0x5
 2962 0206 00       		.byte	0
 2963 0207 03       		.uleb128 0x3
 2964 0208 0E       		.uleb128 0xe
 2965 0209 3A       		.uleb128 0x3a
 2966 020a 0B       		.uleb128 0xb
 2967 020b 3B       		.uleb128 0x3b
 2968 020c 0B       		.uleb128 0xb
 2969 020d 49       		.uleb128 0x49
 2970 020e 13       		.uleb128 0x13
 2971 020f 02       		.uleb128 0x2
 2972 0210 06       		.uleb128 0x6
 2973 0211 00       		.byte	0
 2974 0212 00       		.byte	0
 2975 0213 27       		.uleb128 0x27
 2976 0214 1D       		.uleb128 0x1d
 2977 0215 01       		.byte	0x1
 2978 0216 31       		.uleb128 0x31
 2979 0217 13       		.uleb128 0x13
 2980 0218 11       		.uleb128 0x11
 2981 0219 01       		.uleb128 0x1
 2982 021a 12       		.uleb128 0x12
 2983 021b 01       		.uleb128 0x1
 2984 021c 58       		.uleb128 0x58
 2985 021d 0B       		.uleb128 0xb
 2986 021e 59       		.uleb128 0x59
 2987 021f 0B       		.uleb128 0xb
 2988 0220 00       		.byte	0
 2989 0221 00       		.byte	0
 2990 0222 28       		.uleb128 0x28
 2991 0223 2E       		.uleb128 0x2e
 2992 0224 01       		.byte	0x1
 2993 0225 3F       		.uleb128 0x3f
 2994 0226 0C       		.uleb128 0xc
 2995 0227 03       		.uleb128 0x3
 2996 0228 0E       		.uleb128 0xe
 2997 0229 3A       		.uleb128 0x3a
 2998 022a 0B       		.uleb128 0xb
 2999 022b 3B       		.uleb128 0x3b
 3000 022c 0B       		.uleb128 0xb
 3001 022d 27       		.uleb128 0x27
 3002 022e 0C       		.uleb128 0xc
 3003 022f 11       		.uleb128 0x11
ARM GAS  /tmp/cc4CJeQn.s 			page 111


 3004 0230 01       		.uleb128 0x1
 3005 0231 12       		.uleb128 0x12
 3006 0232 01       		.uleb128 0x1
 3007 0233 40       		.uleb128 0x40
 3008 0234 0A       		.uleb128 0xa
 3009 0235 9742     		.uleb128 0x2117
 3010 0237 0C       		.uleb128 0xc
 3011 0238 01       		.uleb128 0x1
 3012 0239 13       		.uleb128 0x13
 3013 023a 00       		.byte	0
 3014 023b 00       		.byte	0
 3015 023c 29       		.uleb128 0x29
 3016 023d 2E       		.uleb128 0x2e
 3017 023e 01       		.byte	0x1
 3018 023f 3F       		.uleb128 0x3f
 3019 0240 0C       		.uleb128 0xc
 3020 0241 03       		.uleb128 0x3
 3021 0242 0E       		.uleb128 0xe
 3022 0243 3A       		.uleb128 0x3a
 3023 0244 0B       		.uleb128 0xb
 3024 0245 3B       		.uleb128 0x3b
 3025 0246 0B       		.uleb128 0xb
 3026 0247 27       		.uleb128 0x27
 3027 0248 0C       		.uleb128 0xc
 3028 0249 11       		.uleb128 0x11
 3029 024a 01       		.uleb128 0x1
 3030 024b 12       		.uleb128 0x12
 3031 024c 01       		.uleb128 0x1
 3032 024d 40       		.uleb128 0x40
 3033 024e 06       		.uleb128 0x6
 3034 024f 9742     		.uleb128 0x2117
 3035 0251 0C       		.uleb128 0xc
 3036 0252 01       		.uleb128 0x1
 3037 0253 13       		.uleb128 0x13
 3038 0254 00       		.byte	0
 3039 0255 00       		.byte	0
 3040 0256 2A       		.uleb128 0x2a
 3041 0257 34       		.uleb128 0x34
 3042 0258 00       		.byte	0
 3043 0259 03       		.uleb128 0x3
 3044 025a 0E       		.uleb128 0xe
 3045 025b 3A       		.uleb128 0x3a
 3046 025c 0B       		.uleb128 0xb
 3047 025d 3B       		.uleb128 0x3b
 3048 025e 0B       		.uleb128 0xb
 3049 025f 49       		.uleb128 0x49
 3050 0260 13       		.uleb128 0x13
 3051 0261 02       		.uleb128 0x2
 3052 0262 06       		.uleb128 0x6
 3053 0263 00       		.byte	0
 3054 0264 00       		.byte	0
 3055 0265 2B       		.uleb128 0x2b
 3056 0266 1D       		.uleb128 0x1d
 3057 0267 00       		.byte	0
 3058 0268 31       		.uleb128 0x31
 3059 0269 13       		.uleb128 0x13
 3060 026a 52       		.uleb128 0x52
ARM GAS  /tmp/cc4CJeQn.s 			page 112


 3061 026b 01       		.uleb128 0x1
 3062 026c 55       		.uleb128 0x55
 3063 026d 06       		.uleb128 0x6
 3064 026e 58       		.uleb128 0x58
 3065 026f 0B       		.uleb128 0xb
 3066 0270 59       		.uleb128 0x59
 3067 0271 0B       		.uleb128 0xb
 3068 0272 00       		.byte	0
 3069 0273 00       		.byte	0
 3070 0274 2C       		.uleb128 0x2c
 3071 0275 1D       		.uleb128 0x1d
 3072 0276 01       		.byte	0x1
 3073 0277 31       		.uleb128 0x31
 3074 0278 13       		.uleb128 0x13
 3075 0279 52       		.uleb128 0x52
 3076 027a 01       		.uleb128 0x1
 3077 027b 55       		.uleb128 0x55
 3078 027c 06       		.uleb128 0x6
 3079 027d 58       		.uleb128 0x58
 3080 027e 0B       		.uleb128 0xb
 3081 027f 59       		.uleb128 0x59
 3082 0280 0B       		.uleb128 0xb
 3083 0281 01       		.uleb128 0x1
 3084 0282 13       		.uleb128 0x13
 3085 0283 00       		.byte	0
 3086 0284 00       		.byte	0
 3087 0285 2D       		.uleb128 0x2d
 3088 0286 1D       		.uleb128 0x1d
 3089 0287 01       		.byte	0x1
 3090 0288 31       		.uleb128 0x31
 3091 0289 13       		.uleb128 0x13
 3092 028a 52       		.uleb128 0x52
 3093 028b 01       		.uleb128 0x1
 3094 028c 55       		.uleb128 0x55
 3095 028d 06       		.uleb128 0x6
 3096 028e 58       		.uleb128 0x58
 3097 028f 0B       		.uleb128 0xb
 3098 0290 59       		.uleb128 0x59
 3099 0291 0B       		.uleb128 0xb
 3100 0292 00       		.byte	0
 3101 0293 00       		.byte	0
 3102 0294 2E       		.uleb128 0x2e
 3103 0295 0B       		.uleb128 0xb
 3104 0296 01       		.byte	0x1
 3105 0297 11       		.uleb128 0x11
 3106 0298 01       		.uleb128 0x1
 3107 0299 12       		.uleb128 0x12
 3108 029a 01       		.uleb128 0x1
 3109 029b 00       		.byte	0
 3110 029c 00       		.byte	0
 3111 029d 2F       		.uleb128 0x2f
 3112 029e 2E       		.uleb128 0x2e
 3113 029f 01       		.byte	0x1
 3114 02a0 03       		.uleb128 0x3
 3115 02a1 0E       		.uleb128 0xe
 3116 02a2 3A       		.uleb128 0x3a
 3117 02a3 0B       		.uleb128 0xb
ARM GAS  /tmp/cc4CJeQn.s 			page 113


 3118 02a4 3B       		.uleb128 0x3b
 3119 02a5 05       		.uleb128 0x5
 3120 02a6 27       		.uleb128 0x27
 3121 02a7 0C       		.uleb128 0xc
 3122 02a8 49       		.uleb128 0x49
 3123 02a9 13       		.uleb128 0x13
 3124 02aa 20       		.uleb128 0x20
 3125 02ab 0B       		.uleb128 0xb
 3126 02ac 01       		.uleb128 0x1
 3127 02ad 13       		.uleb128 0x13
 3128 02ae 00       		.byte	0
 3129 02af 00       		.byte	0
 3130 02b0 30       		.uleb128 0x30
 3131 02b1 05       		.uleb128 0x5
 3132 02b2 00       		.byte	0
 3133 02b3 03       		.uleb128 0x3
 3134 02b4 0E       		.uleb128 0xe
 3135 02b5 3A       		.uleb128 0x3a
 3136 02b6 0B       		.uleb128 0xb
 3137 02b7 3B       		.uleb128 0x3b
 3138 02b8 05       		.uleb128 0x5
 3139 02b9 49       		.uleb128 0x49
 3140 02ba 13       		.uleb128 0x13
 3141 02bb 00       		.byte	0
 3142 02bc 00       		.byte	0
 3143 02bd 31       		.uleb128 0x31
 3144 02be 2E       		.uleb128 0x2e
 3145 02bf 00       		.byte	0
 3146 02c0 03       		.uleb128 0x3
 3147 02c1 0E       		.uleb128 0xe
 3148 02c2 3A       		.uleb128 0x3a
 3149 02c3 0B       		.uleb128 0xb
 3150 02c4 3B       		.uleb128 0x3b
 3151 02c5 05       		.uleb128 0x5
 3152 02c6 27       		.uleb128 0x27
 3153 02c7 0C       		.uleb128 0xc
 3154 02c8 8701     		.uleb128 0x87
 3155 02ca 0C       		.uleb128 0xc
 3156 02cb 20       		.uleb128 0x20
 3157 02cc 0B       		.uleb128 0xb
 3158 02cd 00       		.byte	0
 3159 02ce 00       		.byte	0
 3160 02cf 32       		.uleb128 0x32
 3161 02d0 2E       		.uleb128 0x2e
 3162 02d1 01       		.byte	0x1
 3163 02d2 03       		.uleb128 0x3
 3164 02d3 0E       		.uleb128 0xe
 3165 02d4 3A       		.uleb128 0x3a
 3166 02d5 0B       		.uleb128 0xb
 3167 02d6 3B       		.uleb128 0x3b
 3168 02d7 05       		.uleb128 0x5
 3169 02d8 27       		.uleb128 0x27
 3170 02d9 0C       		.uleb128 0xc
 3171 02da 20       		.uleb128 0x20
 3172 02db 0B       		.uleb128 0xb
 3173 02dc 01       		.uleb128 0x1
 3174 02dd 13       		.uleb128 0x13
ARM GAS  /tmp/cc4CJeQn.s 			page 114


 3175 02de 00       		.byte	0
 3176 02df 00       		.byte	0
 3177 02e0 33       		.uleb128 0x33
 3178 02e1 34       		.uleb128 0x34
 3179 02e2 00       		.byte	0
 3180 02e3 03       		.uleb128 0x3
 3181 02e4 0E       		.uleb128 0xe
 3182 02e5 3A       		.uleb128 0x3a
 3183 02e6 0B       		.uleb128 0xb
 3184 02e7 3B       		.uleb128 0x3b
 3185 02e8 05       		.uleb128 0x5
 3186 02e9 49       		.uleb128 0x49
 3187 02ea 13       		.uleb128 0x13
 3188 02eb 00       		.byte	0
 3189 02ec 00       		.byte	0
 3190 02ed 34       		.uleb128 0x34
 3191 02ee 2E       		.uleb128 0x2e
 3192 02ef 00       		.byte	0
 3193 02f0 03       		.uleb128 0x3
 3194 02f1 0E       		.uleb128 0xe
 3195 02f2 3A       		.uleb128 0x3a
 3196 02f3 0B       		.uleb128 0xb
 3197 02f4 3B       		.uleb128 0x3b
 3198 02f5 05       		.uleb128 0x5
 3199 02f6 27       		.uleb128 0x27
 3200 02f7 0C       		.uleb128 0xc
 3201 02f8 49       		.uleb128 0x49
 3202 02f9 13       		.uleb128 0x13
 3203 02fa 20       		.uleb128 0x20
 3204 02fb 0B       		.uleb128 0xb
 3205 02fc 00       		.byte	0
 3206 02fd 00       		.byte	0
 3207 02fe 35       		.uleb128 0x35
 3208 02ff 2E       		.uleb128 0x2e
 3209 0300 00       		.byte	0
 3210 0301 03       		.uleb128 0x3
 3211 0302 0E       		.uleb128 0xe
 3212 0303 3A       		.uleb128 0x3a
 3213 0304 0B       		.uleb128 0xb
 3214 0305 3B       		.uleb128 0x3b
 3215 0306 05       		.uleb128 0x5
 3216 0307 27       		.uleb128 0x27
 3217 0308 0C       		.uleb128 0xc
 3218 0309 20       		.uleb128 0x20
 3219 030a 0B       		.uleb128 0xb
 3220 030b 00       		.byte	0
 3221 030c 00       		.byte	0
 3222 030d 00       		.byte	0
 3223              		.section	.debug_loc,"",%progbits
 3224              	.Ldebug_loc0:
 3225              	.LLST39:
 3226 0000 2E020000 		.4byte	.LFB78-.Ltext0
 3227 0004 30020000 		.4byte	.LCFI2-.Ltext0
 3228 0008 0200     		.2byte	0x2
 3229 000a 7D       		.byte	0x7d
 3230 000b 00       		.sleb128 0
 3231 000c 30020000 		.4byte	.LCFI2-.Ltext0
ARM GAS  /tmp/cc4CJeQn.s 			page 115


 3232 0010 36020000 		.4byte	.LFE78-.Ltext0
 3233 0014 0200     		.2byte	0x2
 3234 0016 7D       		.byte	0x7d
 3235 0017 08       		.sleb128 8
 3236 0018 00000000 		.4byte	0
 3237 001c 00000000 		.4byte	0
 3238              	.LLST37:
 3239 0020 F0010000 		.4byte	.LVL47-.Ltext0
 3240 0024 FE010000 		.4byte	.LVL48-.Ltext0
 3241 0028 0100     		.2byte	0x1
 3242 002a 50       		.byte	0x50
 3243 002b FE010000 		.4byte	.LVL48-.Ltext0
 3244 002f 14020000 		.4byte	.LFE76-.Ltext0
 3245 0033 0400     		.2byte	0x4
 3246 0035 F3       		.byte	0xf3
 3247 0036 01       		.uleb128 0x1
 3248 0037 50       		.byte	0x50
 3249 0038 9F       		.byte	0x9f
 3250 0039 00000000 		.4byte	0
 3251 003d 00000000 		.4byte	0
 3252              	.LLST38:
 3253 0041 F0010000 		.4byte	.LVL47-.Ltext0
 3254 0045 FE010000 		.4byte	.LVL48-.Ltext0
 3255 0049 0100     		.2byte	0x1
 3256 004b 50       		.byte	0x50
 3257 004c FE010000 		.4byte	.LVL48-.Ltext0
 3258 0050 0C020000 		.4byte	.LVL49-.Ltext0
 3259 0054 0400     		.2byte	0x4
 3260 0056 F3       		.byte	0xf3
 3261 0057 01       		.uleb128 0x1
 3262 0058 50       		.byte	0x50
 3263 0059 9F       		.byte	0x9f
 3264 005a 00000000 		.4byte	0
 3265 005e 00000000 		.4byte	0
 3266              	.LLST35:
 3267 0062 D0010000 		.4byte	.LVL44-.Ltext0
 3268 0066 D2010000 		.4byte	.LVL45-.Ltext0
 3269 006a 0100     		.2byte	0x1
 3270 006c 50       		.byte	0x50
 3271 006d D2010000 		.4byte	.LVL45-.Ltext0
 3272 0071 F0010000 		.4byte	.LFE75-.Ltext0
 3273 0075 0400     		.2byte	0x4
 3274 0077 F3       		.byte	0xf3
 3275 0078 01       		.uleb128 0x1
 3276 0079 50       		.byte	0x50
 3277 007a 9F       		.byte	0x9f
 3278 007b 00000000 		.4byte	0
 3279 007f 00000000 		.4byte	0
 3280              	.LLST36:
 3281 0083 D0010000 		.4byte	.LVL44-.Ltext0
 3282 0087 D2010000 		.4byte	.LVL45-.Ltext0
 3283 008b 0100     		.2byte	0x1
 3284 008d 50       		.byte	0x50
 3285 008e D2010000 		.4byte	.LVL45-.Ltext0
 3286 0092 E8010000 		.4byte	.LVL46-.Ltext0
 3287 0096 0400     		.2byte	0x4
 3288 0098 F3       		.byte	0xf3
ARM GAS  /tmp/cc4CJeQn.s 			page 116


 3289 0099 01       		.uleb128 0x1
 3290 009a 50       		.byte	0x50
 3291 009b 9F       		.byte	0x9f
 3292 009c 00000000 		.4byte	0
 3293 00a0 00000000 		.4byte	0
 3294              	.LLST33:
 3295 00a4 AC010000 		.4byte	.LVL41-.Ltext0
 3296 00a8 BA010000 		.4byte	.LVL42-.Ltext0
 3297 00ac 0100     		.2byte	0x1
 3298 00ae 50       		.byte	0x50
 3299 00af BA010000 		.4byte	.LVL42-.Ltext0
 3300 00b3 D0010000 		.4byte	.LFE74-.Ltext0
 3301 00b7 0400     		.2byte	0x4
 3302 00b9 F3       		.byte	0xf3
 3303 00ba 01       		.uleb128 0x1
 3304 00bb 50       		.byte	0x50
 3305 00bc 9F       		.byte	0x9f
 3306 00bd 00000000 		.4byte	0
 3307 00c1 00000000 		.4byte	0
 3308              	.LLST34:
 3309 00c5 AC010000 		.4byte	.LVL41-.Ltext0
 3310 00c9 BA010000 		.4byte	.LVL42-.Ltext0
 3311 00cd 0100     		.2byte	0x1
 3312 00cf 50       		.byte	0x50
 3313 00d0 BA010000 		.4byte	.LVL42-.Ltext0
 3314 00d4 C8010000 		.4byte	.LVL43-.Ltext0
 3315 00d8 0400     		.2byte	0x4
 3316 00da F3       		.byte	0xf3
 3317 00db 01       		.uleb128 0x1
 3318 00dc 50       		.byte	0x50
 3319 00dd 9F       		.byte	0x9f
 3320 00de 00000000 		.4byte	0
 3321 00e2 00000000 		.4byte	0
 3322              	.LLST31:
 3323 00e6 8C010000 		.4byte	.LVL38-.Ltext0
 3324 00ea 8E010000 		.4byte	.LVL39-.Ltext0
 3325 00ee 0100     		.2byte	0x1
 3326 00f0 50       		.byte	0x50
 3327 00f1 8E010000 		.4byte	.LVL39-.Ltext0
 3328 00f5 AC010000 		.4byte	.LFE73-.Ltext0
 3329 00f9 0400     		.2byte	0x4
 3330 00fb F3       		.byte	0xf3
 3331 00fc 01       		.uleb128 0x1
 3332 00fd 50       		.byte	0x50
 3333 00fe 9F       		.byte	0x9f
 3334 00ff 00000000 		.4byte	0
 3335 0103 00000000 		.4byte	0
 3336              	.LLST32:
 3337 0107 8C010000 		.4byte	.LVL38-.Ltext0
 3338 010b 8E010000 		.4byte	.LVL39-.Ltext0
 3339 010f 0100     		.2byte	0x1
 3340 0111 50       		.byte	0x50
 3341 0112 8E010000 		.4byte	.LVL39-.Ltext0
 3342 0116 A4010000 		.4byte	.LVL40-.Ltext0
 3343 011a 0400     		.2byte	0x4
 3344 011c F3       		.byte	0xf3
 3345 011d 01       		.uleb128 0x1
ARM GAS  /tmp/cc4CJeQn.s 			page 117


 3346 011e 50       		.byte	0x50
 3347 011f 9F       		.byte	0x9f
 3348 0120 00000000 		.4byte	0
 3349 0124 00000000 		.4byte	0
 3350              	.LLST23:
 3351 0128 30010000 		.4byte	.LFB72-.Ltext0
 3352 012c 32010000 		.4byte	.LCFI1-.Ltext0
 3353 0130 0200     		.2byte	0x2
 3354 0132 7D       		.byte	0x7d
 3355 0133 00       		.sleb128 0
 3356 0134 32010000 		.4byte	.LCFI1-.Ltext0
 3357 0138 8C010000 		.4byte	.LFE72-.Ltext0
 3358 013c 0200     		.2byte	0x2
 3359 013e 7D       		.byte	0x7d
 3360 013f 10       		.sleb128 16
 3361 0140 00000000 		.4byte	0
 3362 0144 00000000 		.4byte	0
 3363              	.LLST24:
 3364 0148 30010000 		.4byte	.LVL30-.Ltext0
 3365 014c 34010000 		.4byte	.LVL31-.Ltext0
 3366 0150 0100     		.2byte	0x1
 3367 0152 50       		.byte	0x50
 3368 0153 34010000 		.4byte	.LVL31-.Ltext0
 3369 0157 8C010000 		.4byte	.LFE72-.Ltext0
 3370 015b 0400     		.2byte	0x4
 3371 015d F3       		.byte	0xf3
 3372 015e 01       		.uleb128 0x1
 3373 015f 50       		.byte	0x50
 3374 0160 9F       		.byte	0x9f
 3375 0161 00000000 		.4byte	0
 3376 0165 00000000 		.4byte	0
 3377              	.LLST25:
 3378 0169 30010000 		.4byte	.LVL30-.Ltext0
 3379 016d 40010000 		.4byte	.LVL32-.Ltext0
 3380 0171 0100     		.2byte	0x1
 3381 0173 51       		.byte	0x51
 3382 0174 40010000 		.4byte	.LVL32-.Ltext0
 3383 0178 8C010000 		.4byte	.LFE72-.Ltext0
 3384 017c 0400     		.2byte	0x4
 3385 017e F3       		.byte	0xf3
 3386 017f 01       		.uleb128 0x1
 3387 0180 51       		.byte	0x51
 3388 0181 9F       		.byte	0x9f
 3389 0182 00000000 		.4byte	0
 3390 0186 00000000 		.4byte	0
 3391              	.LLST26:
 3392 018a 30010000 		.4byte	.LVL30-.Ltext0
 3393 018e 34010000 		.4byte	.LVL31-.Ltext0
 3394 0192 0100     		.2byte	0x1
 3395 0194 50       		.byte	0x50
 3396 0195 34010000 		.4byte	.LVL31-.Ltext0
 3397 0199 6A010000 		.4byte	.LVL33-.Ltext0
 3398 019d 0400     		.2byte	0x4
 3399 019f F3       		.byte	0xf3
 3400 01a0 01       		.uleb128 0x1
 3401 01a1 50       		.byte	0x50
 3402 01a2 9F       		.byte	0x9f
ARM GAS  /tmp/cc4CJeQn.s 			page 118


 3403 01a3 00000000 		.4byte	0
 3404 01a7 00000000 		.4byte	0
 3405              	.LLST27:
 3406 01ab 6A010000 		.4byte	.LVL33-.Ltext0
 3407 01af 86010000 		.4byte	.LVL37-.Ltext0
 3408 01b3 0100     		.2byte	0x1
 3409 01b5 53       		.byte	0x53
 3410 01b6 00000000 		.4byte	0
 3411 01ba 00000000 		.4byte	0
 3412              	.LLST28:
 3413 01be 6A010000 		.4byte	.LVL33-.Ltext0
 3414 01c2 86010000 		.4byte	.LVL37-.Ltext0
 3415 01c6 0100     		.2byte	0x1
 3416 01c8 52       		.byte	0x52
 3417 01c9 00000000 		.4byte	0
 3418 01cd 00000000 		.4byte	0
 3419              	.LLST29:
 3420 01d1 6A010000 		.4byte	.LVL33-.Ltext0
 3421 01d5 76010000 		.4byte	.LVL35-.Ltext0
 3422 01d9 0100     		.2byte	0x1
 3423 01db 50       		.byte	0x50
 3424 01dc 76010000 		.4byte	.LVL35-.Ltext0
 3425 01e0 86010000 		.4byte	.LVL37-.Ltext0
 3426 01e4 1D00     		.2byte	0x1d
 3427 01e6 34       		.byte	0x34
 3428 01e7 F3       		.byte	0xf3
 3429 01e8 01       		.uleb128 0x1
 3430 01e9 51       		.byte	0x51
 3431 01ea 20       		.byte	0x20
 3432 01eb 37       		.byte	0x37
 3433 01ec 1A       		.byte	0x1a
 3434 01ed F3       		.byte	0xf3
 3435 01ee 01       		.uleb128 0x1
 3436 01ef 51       		.byte	0x51
 3437 01f0 20       		.byte	0x20
 3438 01f1 37       		.byte	0x37
 3439 01f2 1A       		.byte	0x1a
 3440 01f3 40       		.byte	0x40
 3441 01f4 4B       		.byte	0x4b
 3442 01f5 24       		.byte	0x24
 3443 01f6 22       		.byte	0x22
 3444 01f7 0C       		.byte	0xc
 3445 01f8 04000080 		.4byte	0x80000004
 3446 01fc 2A       		.byte	0x2a
 3447 01fd 28       		.byte	0x28
 3448 01fe 0100     		.2byte	0x1
 3449 0200 16       		.byte	0x16
 3450 0201 13       		.byte	0x13
 3451 0202 9F       		.byte	0x9f
 3452 0203 00000000 		.4byte	0
 3453 0207 00000000 		.4byte	0
 3454              	.LLST30:
 3455 020b 6E010000 		.4byte	.LVL34-.Ltext0
 3456 020f 7A010000 		.4byte	.LVL36-.Ltext0
 3457 0213 0100     		.2byte	0x1
 3458 0215 51       		.byte	0x51
 3459 0216 00000000 		.4byte	0
ARM GAS  /tmp/cc4CJeQn.s 			page 119


 3460 021a 00000000 		.4byte	0
 3461              	.LLST19:
 3462 021e F4000000 		.4byte	.LVL24-.Ltext0
 3463 0222 F6000000 		.4byte	.LVL25-.Ltext0
 3464 0226 0100     		.2byte	0x1
 3465 0228 50       		.byte	0x50
 3466 0229 F6000000 		.4byte	.LVL25-.Ltext0
 3467 022d 0A010000 		.4byte	.LVL28-.Ltext0
 3468 0231 0300     		.2byte	0x3
 3469 0233 70       		.byte	0x70
 3470 0234 01       		.sleb128 1
 3471 0235 9F       		.byte	0x9f
 3472 0236 0A010000 		.4byte	.LVL28-.Ltext0
 3473 023a 20010000 		.4byte	.LFE70-.Ltext0
 3474 023e 0400     		.2byte	0x4
 3475 0240 F3       		.byte	0xf3
 3476 0241 01       		.uleb128 0x1
 3477 0242 50       		.byte	0x50
 3478 0243 9F       		.byte	0x9f
 3479 0244 00000000 		.4byte	0
 3480 0248 00000000 		.4byte	0
 3481              	.LLST20:
 3482 024c F4000000 		.4byte	.LVL24-.Ltext0
 3483 0250 F6000000 		.4byte	.LVL25-.Ltext0
 3484 0254 0100     		.2byte	0x1
 3485 0256 50       		.byte	0x50
 3486 0257 F6000000 		.4byte	.LVL25-.Ltext0
 3487 025b 0A010000 		.4byte	.LVL28-.Ltext0
 3488 025f 0300     		.2byte	0x3
 3489 0261 70       		.byte	0x70
 3490 0262 01       		.sleb128 1
 3491 0263 9F       		.byte	0x9f
 3492 0264 0A010000 		.4byte	.LVL28-.Ltext0
 3493 0268 14010000 		.4byte	.LVL29-.Ltext0
 3494 026c 0400     		.2byte	0x4
 3495 026e F3       		.byte	0xf3
 3496 026f 01       		.uleb128 0x1
 3497 0270 50       		.byte	0x50
 3498 0271 9F       		.byte	0x9f
 3499 0272 00000000 		.4byte	0
 3500 0276 00000000 		.4byte	0
 3501              	.LLST21:
 3502 027a 04010000 		.4byte	.LVL26-.Ltext0
 3503 027e 08010000 		.4byte	.LVL27-.Ltext0
 3504 0282 0200     		.2byte	0x2
 3505 0284 3F       		.byte	0x3f
 3506 0285 9F       		.byte	0x9f
 3507 0286 00000000 		.4byte	0
 3508 028a 00000000 		.4byte	0
 3509              	.LLST22:
 3510 028e 04010000 		.4byte	.LVL26-.Ltext0
 3511 0292 08010000 		.4byte	.LVL27-.Ltext0
 3512 0296 0300     		.2byte	0x3
 3513 0298 09       		.byte	0x9
 3514 0299 FF       		.byte	0xff
 3515 029a 9F       		.byte	0x9f
 3516 029b 00000000 		.4byte	0
ARM GAS  /tmp/cc4CJeQn.s 			page 120


 3517 029f 00000000 		.4byte	0
 3518              	.LLST17:
 3519 02a3 A8000000 		.4byte	.LVL21-.Ltext0
 3520 02a7 AA000000 		.4byte	.LVL22-.Ltext0
 3521 02ab 0100     		.2byte	0x1
 3522 02ad 50       		.byte	0x50
 3523 02ae AA000000 		.4byte	.LVL22-.Ltext0
 3524 02b2 D0000000 		.4byte	.LFE68-.Ltext0
 3525 02b6 0400     		.2byte	0x4
 3526 02b8 F3       		.byte	0xf3
 3527 02b9 01       		.uleb128 0x1
 3528 02ba 50       		.byte	0x50
 3529 02bb 9F       		.byte	0x9f
 3530 02bc 00000000 		.4byte	0
 3531 02c0 00000000 		.4byte	0
 3532              	.LLST18:
 3533 02c4 A8000000 		.4byte	.LVL21-.Ltext0
 3534 02c8 AA000000 		.4byte	.LVL22-.Ltext0
 3535 02cc 0100     		.2byte	0x1
 3536 02ce 50       		.byte	0x50
 3537 02cf AA000000 		.4byte	.LVL22-.Ltext0
 3538 02d3 C8000000 		.4byte	.LVL23-.Ltext0
 3539 02d7 0400     		.2byte	0x4
 3540 02d9 F3       		.byte	0xf3
 3541 02da 01       		.uleb128 0x1
 3542 02db 50       		.byte	0x50
 3543 02dc 9F       		.byte	0x9f
 3544 02dd 00000000 		.4byte	0
 3545 02e1 00000000 		.4byte	0
 3546              	.LLST15:
 3547 02e5 8C000000 		.4byte	.LVL18-.Ltext0
 3548 02e9 8E000000 		.4byte	.LVL19-.Ltext0
 3549 02ed 0100     		.2byte	0x1
 3550 02ef 50       		.byte	0x50
 3551 02f0 8E000000 		.4byte	.LVL19-.Ltext0
 3552 02f4 A8000000 		.4byte	.LFE67-.Ltext0
 3553 02f8 0400     		.2byte	0x4
 3554 02fa F3       		.byte	0xf3
 3555 02fb 01       		.uleb128 0x1
 3556 02fc 50       		.byte	0x50
 3557 02fd 9F       		.byte	0x9f
 3558 02fe 00000000 		.4byte	0
 3559 0302 00000000 		.4byte	0
 3560              	.LLST16:
 3561 0306 8C000000 		.4byte	.LVL18-.Ltext0
 3562 030a 8E000000 		.4byte	.LVL19-.Ltext0
 3563 030e 0100     		.2byte	0x1
 3564 0310 50       		.byte	0x50
 3565 0311 8E000000 		.4byte	.LVL19-.Ltext0
 3566 0315 A2000000 		.4byte	.LVL20-.Ltext0
 3567 0319 0400     		.2byte	0x4
 3568 031b F3       		.byte	0xf3
 3569 031c 01       		.uleb128 0x1
 3570 031d 50       		.byte	0x50
 3571 031e 9F       		.byte	0x9f
 3572 031f 00000000 		.4byte	0
 3573 0323 00000000 		.4byte	0
ARM GAS  /tmp/cc4CJeQn.s 			page 121


 3574              	.LLST4:
 3575 0327 24000000 		.4byte	.LFB66-.Ltext0
 3576 032b 28000000 		.4byte	.LCFI0-.Ltext0
 3577 032f 0200     		.2byte	0x2
 3578 0331 7D       		.byte	0x7d
 3579 0332 00       		.sleb128 0
 3580 0333 28000000 		.4byte	.LCFI0-.Ltext0
 3581 0337 8C000000 		.4byte	.LFE66-.Ltext0
 3582 033b 0200     		.2byte	0x2
 3583 033d 7D       		.byte	0x7d
 3584 033e 0C       		.sleb128 12
 3585 033f 00000000 		.4byte	0
 3586 0343 00000000 		.4byte	0
 3587              	.LLST5:
 3588 0347 24000000 		.4byte	.LVL6-.Ltext0
 3589 034b 6C000000 		.4byte	.LVL16-.Ltext0
 3590 034f 0100     		.2byte	0x1
 3591 0351 50       		.byte	0x50
 3592 0352 6C000000 		.4byte	.LVL16-.Ltext0
 3593 0356 8C000000 		.4byte	.LFE66-.Ltext0
 3594 035a 0400     		.2byte	0x4
 3595 035c F3       		.byte	0xf3
 3596 035d 01       		.uleb128 0x1
 3597 035e 50       		.byte	0x50
 3598 035f 9F       		.byte	0x9f
 3599 0360 00000000 		.4byte	0
 3600 0364 00000000 		.4byte	0
 3601              	.LLST6:
 3602 0368 24000000 		.4byte	.LVL6-.Ltext0
 3603 036c 52000000 		.4byte	.LVL12-.Ltext0
 3604 0370 0100     		.2byte	0x1
 3605 0372 51       		.byte	0x51
 3606 0373 52000000 		.4byte	.LVL12-.Ltext0
 3607 0377 8C000000 		.4byte	.LFE66-.Ltext0
 3608 037b 0400     		.2byte	0x4
 3609 037d F3       		.byte	0xf3
 3610 037e 01       		.uleb128 0x1
 3611 037f 51       		.byte	0x51
 3612 0380 9F       		.byte	0x9f
 3613 0381 00000000 		.4byte	0
 3614 0385 00000000 		.4byte	0
 3615              	.LLST7:
 3616 0389 24000000 		.4byte	.LVL6-.Ltext0
 3617 038d 5C000000 		.4byte	.LVL14-.Ltext0
 3618 0391 0100     		.2byte	0x1
 3619 0393 52       		.byte	0x52
 3620 0394 5C000000 		.4byte	.LVL14-.Ltext0
 3621 0398 8C000000 		.4byte	.LFE66-.Ltext0
 3622 039c 0400     		.2byte	0x4
 3623 039e F3       		.byte	0xf3
 3624 039f 01       		.uleb128 0x1
 3625 03a0 52       		.byte	0x52
 3626 03a1 9F       		.byte	0x9f
 3627 03a2 00000000 		.4byte	0
 3628 03a6 00000000 		.4byte	0
 3629              	.LLST8:
 3630 03aa 24000000 		.4byte	.LVL6-.Ltext0
ARM GAS  /tmp/cc4CJeQn.s 			page 122


 3631 03ae 2E000000 		.4byte	.LVL7-.Ltext0
 3632 03b2 0200     		.2byte	0x2
 3633 03b4 30       		.byte	0x30
 3634 03b5 9F       		.byte	0x9f
 3635 03b6 00000000 		.4byte	0
 3636 03ba 00000000 		.4byte	0
 3637              	.LLST9:
 3638 03be 2E000000 		.4byte	.LVL7-.Ltext0
 3639 03c2 5C000000 		.4byte	.LVL14-.Ltext0
 3640 03c6 0100     		.2byte	0x1
 3641 03c8 52       		.byte	0x52
 3642 03c9 5C000000 		.4byte	.LVL14-.Ltext0
 3643 03cd 62000000 		.4byte	.LVL15-.Ltext0
 3644 03d1 0400     		.2byte	0x4
 3645 03d3 F3       		.byte	0xf3
 3646 03d4 01       		.uleb128 0x1
 3647 03d5 52       		.byte	0x52
 3648 03d6 9F       		.byte	0x9f
 3649 03d7 00000000 		.4byte	0
 3650 03db 00000000 		.4byte	0
 3651              	.LLST10:
 3652 03df 2E000000 		.4byte	.LVL7-.Ltext0
 3653 03e3 52000000 		.4byte	.LVL12-.Ltext0
 3654 03e7 0100     		.2byte	0x1
 3655 03e9 51       		.byte	0x51
 3656 03ea 52000000 		.4byte	.LVL12-.Ltext0
 3657 03ee 62000000 		.4byte	.LVL15-.Ltext0
 3658 03f2 0400     		.2byte	0x4
 3659 03f4 F3       		.byte	0xf3
 3660 03f5 01       		.uleb128 0x1
 3661 03f6 51       		.byte	0x51
 3662 03f7 9F       		.byte	0x9f
 3663 03f8 00000000 		.4byte	0
 3664 03fc 00000000 		.4byte	0
 3665              	.LLST11:
 3666 0400 2E000000 		.4byte	.LVL7-.Ltext0
 3667 0404 44000000 		.4byte	.LVL9-.Ltext0
 3668 0408 0100     		.2byte	0x1
 3669 040a 54       		.byte	0x54
 3670 040b 00000000 		.4byte	0
 3671 040f 00000000 		.4byte	0
 3672              	.LLST12:
 3673 0413 3A000000 		.4byte	.LVL8-.Ltext0
 3674 0417 48000000 		.4byte	.LVL10-.Ltext0
 3675 041b 0100     		.2byte	0x1
 3676 041d 53       		.byte	0x53
 3677 041e 00000000 		.4byte	0
 3678 0422 00000000 		.4byte	0
 3679              	.LLST13:
 3680 0426 50000000 		.4byte	.LVL11-.Ltext0
 3681 042a 58000000 		.4byte	.LVL13-.Ltext0
 3682 042e 0100     		.2byte	0x1
 3683 0430 54       		.byte	0x54
 3684 0431 00000000 		.4byte	0
 3685 0435 00000000 		.4byte	0
 3686              	.LLST14:
 3687 0439 62000000 		.4byte	.LVL15-.Ltext0
ARM GAS  /tmp/cc4CJeQn.s 			page 123


 3688 043d 6C000000 		.4byte	.LVL16-.Ltext0
 3689 0441 0100     		.2byte	0x1
 3690 0443 50       		.byte	0x50
 3691 0444 6C000000 		.4byte	.LVL16-.Ltext0
 3692 0448 82000000 		.4byte	.LVL17-.Ltext0
 3693 044c 0400     		.2byte	0x4
 3694 044e F3       		.byte	0xf3
 3695 044f 01       		.uleb128 0x1
 3696 0450 50       		.byte	0x50
 3697 0451 9F       		.byte	0x9f
 3698 0452 00000000 		.4byte	0
 3699 0456 00000000 		.4byte	0
 3700              	.LLST0:
 3701 045a 00000000 		.4byte	.LVL0-.Ltext0
 3702 045e 04000000 		.4byte	.LVL1-.Ltext0
 3703 0462 0100     		.2byte	0x1
 3704 0464 50       		.byte	0x50
 3705 0465 04000000 		.4byte	.LVL1-.Ltext0
 3706 0469 24000000 		.4byte	.LFE65-.Ltext0
 3707 046d 0400     		.2byte	0x4
 3708 046f F3       		.byte	0xf3
 3709 0470 01       		.uleb128 0x1
 3710 0471 50       		.byte	0x50
 3711 0472 9F       		.byte	0x9f
 3712 0473 00000000 		.4byte	0
 3713 0477 00000000 		.4byte	0
 3714              	.LLST1:
 3715 047b 00000000 		.4byte	.LVL0-.Ltext0
 3716 047f 04000000 		.4byte	.LVL1-.Ltext0
 3717 0483 0100     		.2byte	0x1
 3718 0485 50       		.byte	0x50
 3719 0486 04000000 		.4byte	.LVL1-.Ltext0
 3720 048a 1E000000 		.4byte	.LVL5-.Ltext0
 3721 048e 0400     		.2byte	0x4
 3722 0490 F3       		.byte	0xf3
 3723 0491 01       		.uleb128 0x1
 3724 0492 50       		.byte	0x50
 3725 0493 9F       		.byte	0x9f
 3726 0494 00000000 		.4byte	0
 3727 0498 00000000 		.4byte	0
 3728              	.LLST2:
 3729 049c 06000000 		.4byte	.LVL2-.Ltext0
 3730 04a0 0E000000 		.4byte	.LVL3-.Ltext0
 3731 04a4 0700     		.2byte	0x7
 3732 04a6 73       		.byte	0x73
 3733 04a7 00       		.sleb128 0
 3734 04a8 0A       		.byte	0xa
 3735 04a9 FFF8     		.2byte	0xf8ff
 3736 04ab 1A       		.byte	0x1a
 3737 04ac 9F       		.byte	0x9f
 3738 04ad 1C000000 		.4byte	.LVL4-.Ltext0
 3739 04b1 1E000000 		.4byte	.LVL5-.Ltext0
 3740 04b5 0100     		.2byte	0x1
 3741 04b7 53       		.byte	0x53
 3742 04b8 00000000 		.4byte	0
 3743 04bc 00000000 		.4byte	0
 3744              	.LLST3:
ARM GAS  /tmp/cc4CJeQn.s 			page 124


 3745 04c0 00000000 		.4byte	.LVL0-.Ltext0
 3746 04c4 04000000 		.4byte	.LVL1-.Ltext0
 3747 04c8 0500     		.2byte	0x5
 3748 04ca 70       		.byte	0x70
 3749 04cb 00       		.sleb128 0
 3750 04cc 37       		.byte	0x37
 3751 04cd 1A       		.byte	0x1a
 3752 04ce 9F       		.byte	0x9f
 3753 04cf 04000000 		.4byte	.LVL1-.Ltext0
 3754 04d3 24000000 		.4byte	.LFE65-.Ltext0
 3755 04d7 0600     		.2byte	0x6
 3756 04d9 F3       		.byte	0xf3
 3757 04da 01       		.uleb128 0x1
 3758 04db 50       		.byte	0x50
 3759 04dc 37       		.byte	0x37
 3760 04dd 1A       		.byte	0x1a
 3761 04de 9F       		.byte	0x9f
 3762 04df 00000000 		.4byte	0
 3763 04e3 00000000 		.4byte	0
 3764              		.section	.debug_aranges,"",%progbits
 3765 0000 1C000000 		.4byte	0x1c
 3766 0004 0200     		.2byte	0x2
 3767 0006 00000000 		.4byte	.Ldebug_info0
 3768 000a 04       		.byte	0x4
 3769 000b 00       		.byte	0
 3770 000c 0000     		.2byte	0
 3771 000e 0000     		.2byte	0
 3772 0010 00000000 		.4byte	.Ltext0
 3773 0014 36020000 		.4byte	.Letext0-.Ltext0
 3774 0018 00000000 		.4byte	0
 3775 001c 00000000 		.4byte	0
 3776              		.section	.debug_ranges,"",%progbits
 3777              	.Ldebug_ranges0:
 3778 0000 24000000 		.4byte	.LBB22-.Ltext0
 3779 0004 26000000 		.4byte	.LBE22-.Ltext0
 3780 0008 28000000 		.4byte	.LBB25-.Ltext0
 3781 000c 2E000000 		.4byte	.LBE25-.Ltext0
 3782 0010 00000000 		.4byte	0
 3783 0014 00000000 		.4byte	0
 3784 0018 2E000000 		.4byte	.LBB26-.Ltext0
 3785 001c 5C000000 		.4byte	.LBE26-.Ltext0
 3786 0020 5E000000 		.4byte	.LBB32-.Ltext0
 3787 0024 66000000 		.4byte	.LBE32-.Ltext0
 3788 0028 00000000 		.4byte	0
 3789 002c 00000000 		.4byte	0
 3790 0030 5C000000 		.4byte	.LBB29-.Ltext0
 3791 0034 5E000000 		.4byte	.LBE29-.Ltext0
 3792 0038 66000000 		.4byte	.LBB33-.Ltext0
 3793 003c 8C000000 		.4byte	.LBE33-.Ltext0
 3794 0040 00000000 		.4byte	0
 3795 0044 00000000 		.4byte	0
 3796 0048 FC000000 		.4byte	.LBB68-.Ltext0
 3797 004c FE000000 		.4byte	.LBE68-.Ltext0
 3798 0050 00010000 		.4byte	.LBB72-.Ltext0
 3799 0054 02010000 		.4byte	.LBE72-.Ltext0
 3800 0058 04010000 		.4byte	.LBB73-.Ltext0
 3801 005c 08010000 		.4byte	.LBE73-.Ltext0
ARM GAS  /tmp/cc4CJeQn.s 			page 125


 3802 0060 00000000 		.4byte	0
 3803 0064 00000000 		.4byte	0
 3804 0068 32010000 		.4byte	.LBB82-.Ltext0
 3805 006c 3C010000 		.4byte	.LBE82-.Ltext0
 3806 0070 40010000 		.4byte	.LBB90-.Ltext0
 3807 0074 50010000 		.4byte	.LBE90-.Ltext0
 3808 0078 66010000 		.4byte	.LBB92-.Ltext0
 3809 007c 6A010000 		.4byte	.LBE92-.Ltext0
 3810 0080 00000000 		.4byte	0
 3811 0084 00000000 		.4byte	0
 3812 0088 3C010000 		.4byte	.LBB86-.Ltext0
 3813 008c 40010000 		.4byte	.LBE86-.Ltext0
 3814 0090 50010000 		.4byte	.LBB91-.Ltext0
 3815 0094 66010000 		.4byte	.LBE91-.Ltext0
 3816 0098 6A010000 		.4byte	.LBB93-.Ltext0
 3817 009c 8C010000 		.4byte	.LBE93-.Ltext0
 3818 00a0 00000000 		.4byte	0
 3819 00a4 00000000 		.4byte	0
 3820              		.section	.debug_line,"",%progbits
 3821              	.Ldebug_line0:
 3822 0000 58020000 		.section	.debug_str,"MS",%progbits,1
 3822      02000A01 
 3822      00000201 
 3822      FB0E0D00 
 3822      01010101 
 3823              	.LASF69:
 3824 0000 49435052 		.ascii	"ICPR\000"
 3824      00
 3825              	.LASF132:
 3826 0005 5072696F 		.ascii	"PriorityGroupTmp\000"
 3826      72697479 
 3826      47726F75 
 3826      70546D70 
 3826      00
 3827              	.LASF125:
 3828 0016 48414C5F 		.ascii	"HAL_NVIC_EnableIRQ\000"
 3828      4E564943 
 3828      5F456E61 
 3828      626C6549 
 3828      525100
 3829              	.LASF105:
 3830 0029 48414C5F 		.ascii	"HAL_TickFreqTypeDef\000"
 3830      5469636B 
 3830      46726571 
 3830      54797065 
 3830      44656600 
 3831              	.LASF118:
 3832 003d 70507265 		.ascii	"pPreemptPriority\000"
 3832      656D7074 
 3832      5072696F 
 3832      72697479 
 3832      00
 3833              	.LASF10:
 3834 004e 5056445F 		.ascii	"PVD_IRQn\000"
 3834      4952516E 
 3834      00
 3835              	.LASF35:
ARM GAS  /tmp/cc4CJeQn.s 			page 126


 3836 0057 54494D31 		.ascii	"TIM1_TRG_COM_IRQn\000"
 3836      5F545247 
 3836      5F434F4D 
 3836      5F495251 
 3836      6E00
 3837              	.LASF39:
 3838 0069 49324331 		.ascii	"I2C1_EV_IRQn\000"
 3838      5F45565F 
 3838      4952516E 
 3838      00
 3839              	.LASF48:
 3840 0076 5F5F7569 		.ascii	"__uint8_t\000"
 3840      6E74385F 
 3840      7400
 3841              	.LASF139:
 3842 0080 5F5F4E56 		.ascii	"__NVIC_SetPriority\000"
 3842      49435F53 
 3842      65745072 
 3842      696F7269 
 3842      747900
 3843              	.LASF99:
 3844 0093 41504250 		.ascii	"APBPrescTable\000"
 3844      72657363 
 3844      5461626C 
 3844      6500
 3845              	.LASF30:
 3846 00a1 43414E31 		.ascii	"CAN1_RX1_IRQn\000"
 3846      5F525831 
 3846      5F495251 
 3846      6E00
 3847              	.LASF58:
 3848 00af 6C6F6E67 		.ascii	"long long unsigned int\000"
 3848      206C6F6E 
 3848      6720756E 
 3848      7369676E 
 3848      65642069 
 3849              	.LASF45:
 3850 00c6 5254435F 		.ascii	"RTC_Alarm_IRQn\000"
 3850      416C6172 
 3850      6D5F4952 
 3850      516E00
 3851              	.LASF17:
 3852 00d5 45585449 		.ascii	"EXTI2_IRQn\000"
 3852      325F4952 
 3852      516E00
 3853              	.LASF122:
 3854 00e0 5469636B 		.ascii	"TicksNumb\000"
 3854      734E756D 
 3854      6200
 3855              	.LASF9:
 3856 00ea 57574447 		.ascii	"WWDG_IRQn\000"
 3856      5F495251 
 3856      6E00
 3857              	.LASF67:
 3858 00f4 49535052 		.ascii	"ISPR\000"
 3858      00
 3859              	.LASF117:
ARM GAS  /tmp/cc4CJeQn.s 			page 127


 3860 00f9 5072696F 		.ascii	"PriorityGroup\000"
 3860      72697479 
 3860      47726F75 
 3860      7000
 3861              	.LASF52:
 3862 0107 73686F72 		.ascii	"short unsigned int\000"
 3862      7420756E 
 3862      7369676E 
 3862      65642069 
 3862      6E7400
 3863              	.LASF89:
 3864 011a 49534152 		.ascii	"ISAR\000"
 3864      00
 3865              	.LASF57:
 3866 011f 6C6F6E67 		.ascii	"long long int\000"
 3866      206C6F6E 
 3866      6720696E 
 3866      7400
 3867              	.LASF49:
 3868 012d 7369676E 		.ascii	"signed char\000"
 3868      65642063 
 3868      68617200 
 3869              	.LASF108:
 3870 0139 48414C5F 		.ascii	"HAL_SYSTICK_IRQHandler\000"
 3870      53595354 
 3870      49434B5F 
 3870      49525148 
 3870      616E646C 
 3871              	.LASF112:
 3872 0150 48414C5F 		.ascii	"HAL_NVIC_ClearPendingIRQ\000"
 3872      4E564943 
 3872      5F436C65 
 3872      61725065 
 3872      6E64696E 
 3873              	.LASF116:
 3874 0169 48414C5F 		.ascii	"HAL_NVIC_GetPriority\000"
 3874      4E564943 
 3874      5F476574 
 3874      5072696F 
 3874      72697479 
 3875              	.LASF54:
 3876 017e 6C6F6E67 		.ascii	"long int\000"
 3876      20696E74 
 3876      00
 3877              	.LASF142:
 3878 0187 5F5F4E56 		.ascii	"__NVIC_ClearPendingIRQ\000"
 3878      49435F43 
 3878      6C656172 
 3878      50656E64 
 3878      696E6749 
 3879              	.LASF147:
 3880 019e 5F5F4E56 		.ascii	"__NVIC_SystemReset\000"
 3880      49435F53 
 3880      79737465 
 3880      6D526573 
 3880      657400
 3881              	.LASF128:
ARM GAS  /tmp/cc4CJeQn.s 			page 128


 3882 01b1 53756250 		.ascii	"SubPriority\000"
 3882      72696F72 
 3882      69747900 
 3883              	.LASF32:
 3884 01bd 45585449 		.ascii	"EXTI9_5_IRQn\000"
 3884      395F355F 
 3884      4952516E 
 3884      00
 3885              	.LASF110:
 3886 01ca 434C4B53 		.ascii	"CLKSource\000"
 3886      6F757263 
 3886      6500
 3887              	.LASF133:
 3888 01d4 50726565 		.ascii	"PreemptPriorityBits\000"
 3888      6D707450 
 3888      72696F72 
 3888      69747942 
 3888      69747300 
 3889              	.LASF101:
 3890 01e8 48414C5F 		.ascii	"HAL_TICK_FREQ_10HZ\000"
 3890      5449434B 
 3890      5F465245 
 3890      515F3130 
 3890      485A00
 3891              	.LASF27:
 3892 01fb 41444331 		.ascii	"ADC1_2_IRQn\000"
 3892      5F325F49 
 3892      52516E00 
 3893              	.LASF7:
 3894 0207 50656E64 		.ascii	"PendSV_IRQn\000"
 3894      53565F49 
 3894      52516E00 
 3895              	.LASF86:
 3896 0213 42464152 		.ascii	"BFAR\000"
 3896      00
 3897              	.LASF23:
 3898 0218 444D4131 		.ascii	"DMA1_Channel4_IRQn\000"
 3898      5F436861 
 3898      6E6E656C 
 3898      345F4952 
 3898      516E00
 3899              	.LASF145:
 3900 022b 5F5F4E56 		.ascii	"__NVIC_DisableIRQ\000"
 3900      49435F44 
 3900      69736162 
 3900      6C654952 
 3900      5100
 3901              	.LASF87:
 3902 023d 41465352 		.ascii	"AFSR\000"
 3902      00
 3903              	.LASF55:
 3904 0242 5F5F7569 		.ascii	"__uint32_t\000"
 3904      6E743332 
 3904      5F7400
 3905              	.LASF3:
 3906 024d 42757346 		.ascii	"BusFault_IRQn\000"
 3906      61756C74 
ARM GAS  /tmp/cc4CJeQn.s 			page 129


 3906      5F495251 
 3906      6E00
 3907              	.LASF91:
 3908 025b 5343425F 		.ascii	"SCB_Type\000"
 3908      54797065 
 3908      00
 3909              	.LASF114:
 3910 0264 48414C5F 		.ascii	"HAL_NVIC_GetPendingIRQ\000"
 3910      4E564943 
 3910      5F476574 
 3910      50656E64 
 3910      696E6749 
 3911              	.LASF123:
 3912 027b 48414C5F 		.ascii	"HAL_NVIC_SystemReset\000"
 3912      4E564943 
 3912      5F537973 
 3912      74656D52 
 3912      65736574 
 3913              	.LASF102:
 3914 0290 48414C5F 		.ascii	"HAL_TICK_FREQ_100HZ\000"
 3914      5449434B 
 3914      5F465245 
 3914      515F3130 
 3914      30485A00 
 3915              	.LASF59:
 3916 02a4 756E7369 		.ascii	"unsigned int\000"
 3916      676E6564 
 3916      20696E74 
 3916      00
 3917              	.LASF150:
 3918 02b1 7265675F 		.ascii	"reg_value\000"
 3918      76616C75 
 3918      6500
 3919              	.LASF97:
 3920 02bb 53797374 		.ascii	"SystemCoreClock\000"
 3920      656D436F 
 3920      7265436C 
 3920      6F636B00 
 3921              	.LASF107:
 3922 02cb 75775469 		.ascii	"uwTickFreq\000"
 3922      636B4672 
 3922      657100
 3923              	.LASF2:
 3924 02d6 4D656D6F 		.ascii	"MemoryManagement_IRQn\000"
 3924      72794D61 
 3924      6E616765 
 3924      6D656E74 
 3924      5F495251 
 3925              	.LASF124:
 3926 02ec 48414C5F 		.ascii	"HAL_NVIC_DisableIRQ\000"
 3926      4E564943 
 3926      5F446973 
 3926      61626C65 
 3926      49525100 
 3927              	.LASF56:
 3928 0300 6C6F6E67 		.ascii	"long unsigned int\000"
 3928      20756E73 
ARM GAS  /tmp/cc4CJeQn.s 			page 130


 3928      69676E65 
 3928      6420696E 
 3928      7400
 3929              	.LASF103:
 3930 0312 48414C5F 		.ascii	"HAL_TICK_FREQ_1KHZ\000"
 3930      5449434B 
 3930      5F465245 
 3930      515F314B 
 3930      485A00
 3931              	.LASF79:
 3932 0325 56544F52 		.ascii	"VTOR\000"
 3932      00
 3933              	.LASF24:
 3934 032a 444D4131 		.ascii	"DMA1_Channel5_IRQn\000"
 3934      5F436861 
 3934      6E6E656C 
 3934      355F4952 
 3934      516E00
 3935              	.LASF78:
 3936 033d 49435352 		.ascii	"ICSR\000"
 3936      00
 3937              	.LASF1:
 3938 0342 48617264 		.ascii	"HardFault_IRQn\000"
 3938      4661756C 
 3938      745F4952 
 3938      516E00
 3939              	.LASF80:
 3940 0351 41495243 		.ascii	"AIRCR\000"
 3940      5200
 3941              	.LASF84:
 3942 0357 44465352 		.ascii	"DFSR\000"
 3942      00
 3943              	.LASF44:
 3944 035c 45585449 		.ascii	"EXTI15_10_IRQn\000"
 3944      31355F31 
 3944      305F4952 
 3944      516E00
 3945              	.LASF85:
 3946 036b 4D4D4641 		.ascii	"MMFAR\000"
 3946      5200
 3947              	.LASF41:
 3948 0371 53504931 		.ascii	"SPI1_IRQn\000"
 3948      5F495251 
 3948      6E00
 3949              	.LASF95:
 3950 037b 53797354 		.ascii	"SysTick_Type\000"
 3950      69636B5F 
 3950      54797065 
 3950      00
 3951              	.LASF140:
 3952 0388 7072696F 		.ascii	"priority\000"
 3952      72697479 
 3952      00
 3953              	.LASF127:
 3954 0391 50726565 		.ascii	"PreemptPriority\000"
 3954      6D707450 
 3954      72696F72 
ARM GAS  /tmp/cc4CJeQn.s 			page 131


 3954      69747900 
 3955              	.LASF88:
 3956 03a1 4D4D4652 		.ascii	"MMFR\000"
 3956      00
 3957              	.LASF98:
 3958 03a6 41484250 		.ascii	"AHBPrescTable\000"
 3958      72657363 
 3958      5461626C 
 3958      6500
 3959              	.LASF151:
 3960 03b4 5F5F4453 		.ascii	"__DSB\000"
 3960      4200
 3961              	.LASF149:
 3962 03ba 5F5F4E56 		.ascii	"__NVIC_SetPriorityGrouping\000"
 3962      49435F53 
 3962      65745072 
 3962      696F7269 
 3962      74794772 
 3963              	.LASF113:
 3964 03d5 48414C5F 		.ascii	"HAL_NVIC_GetActive\000"
 3964      4E564943 
 3964      5F476574 
 3964      41637469 
 3964      766500
 3965              	.LASF8:
 3966 03e8 53797354 		.ascii	"SysTick_IRQn\000"
 3966      69636B5F 
 3966      4952516E 
 3966      00
 3967              	.LASF36:
 3968 03f5 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 3968      5F43435F 
 3968      4952516E 
 3968      00
 3969              	.LASF137:
 3970 0402 5F5F4E56 		.ascii	"__NVIC_GetPriority\000"
 3970      49435F47 
 3970      65745072 
 3970      696F7269 
 3970      747900
 3971              	.LASF115:
 3972 0415 48414C5F 		.ascii	"HAL_NVIC_SetPendingIRQ\000"
 3972      4E564943 
 3972      5F536574 
 3972      50656E64 
 3972      696E6749 
 3973              	.LASF111:
 3974 042c 4952516E 		.ascii	"IRQn\000"
 3974      00
 3975              	.LASF21:
 3976 0431 444D4131 		.ascii	"DMA1_Channel2_IRQn\000"
 3976      5F436861 
 3976      6E6E656C 
 3976      325F4952 
 3976      516E00
 3977              	.LASF157:
 3978 0444 7072696F 		.ascii	"prioritygroup\000"
ARM GAS  /tmp/cc4CJeQn.s 			page 132


 3978      72697479 
 3978      67726F75 
 3978      7000
 3979              	.LASF75:
 3980 0452 73697A65 		.ascii	"sizetype\000"
 3980      74797065 
 3980      00
 3981              	.LASF93:
 3982 045b 4C4F4144 		.ascii	"LOAD\000"
 3982      00
 3983              	.LASF130:
 3984 0460 7469636B 		.ascii	"ticks\000"
 3984      7300
 3985              	.LASF82:
 3986 0466 43465352 		.ascii	"CFSR\000"
 3986      00
 3987              	.LASF71:
 3988 046b 49414252 		.ascii	"IABR\000"
 3988      00
 3989              	.LASF144:
 3990 0470 5F5F4E56 		.ascii	"__NVIC_GetPendingIRQ\000"
 3990      49435F47 
 3990      65745065 
 3990      6E64696E 
 3990      67495251 
 3991              	.LASF18:
 3992 0485 45585449 		.ascii	"EXTI3_IRQn\000"
 3992      335F4952 
 3992      516E00
 3993              	.LASF152:
 3994 0490 5F5F4953 		.ascii	"__ISB\000"
 3994      4200
 3995              	.LASF136:
 3996 0496 4E564943 		.ascii	"NVIC_EncodePriority\000"
 3996      5F456E63 
 3996      6F646550 
 3996      72696F72 
 3996      69747900 
 3997              	.LASF65:
 3998 04aa 49434552 		.ascii	"ICER\000"
 3998      00
 3999              	.LASF134:
 4000 04af 53756250 		.ascii	"SubPriorityBits\000"
 4000      72696F72 
 4000      69747942 
 4000      69747300 
 4001              	.LASF104:
 4002 04bf 48414C5F 		.ascii	"HAL_TICK_FREQ_DEFAULT\000"
 4002      5449434B 
 4002      5F465245 
 4002      515F4445 
 4002      4641554C 
 4003              	.LASF138:
 4004 04d5 4E564943 		.ascii	"NVIC_DecodePriority\000"
 4004      5F446563 
 4004      6F646550 
 4004      72696F72 
ARM GAS  /tmp/cc4CJeQn.s 			page 133


 4004      69747900 
 4005              	.LASF156:
 4006 04e9 48414C5F 		.ascii	"HAL_SYSTICK_Callback\000"
 4006      53595354 
 4006      49434B5F 
 4006      43616C6C 
 4006      6261636B 
 4007              	.LASF77:
 4008 04fe 43505549 		.ascii	"CPUID\000"
 4008      4400
 4009              	.LASF154:
 4010 0504 7372632F 		.ascii	"src/stm32f1xx_hal_cortex.c\000"
 4010      73746D33 
 4010      32663178 
 4010      785F6861 
 4010      6C5F636F 
 4011              	.LASF20:
 4012 051f 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 4012      5F436861 
 4012      6E6E656C 
 4012      315F4952 
 4012      516E00
 4013              	.LASF64:
 4014 0532 52455345 		.ascii	"RESERVED0\000"
 4014      52564544 
 4014      3000
 4015              	.LASF68:
 4016 053c 52455345 		.ascii	"RESERVED2\000"
 4016      52564544 
 4016      3200
 4017              	.LASF70:
 4018 0546 52455345 		.ascii	"RESERVED3\000"
 4018      52564544 
 4018      3300
 4019              	.LASF72:
 4020 0550 52455345 		.ascii	"RESERVED4\000"
 4020      52564544 
 4020      3400
 4021              	.LASF73:
 4022 055a 52455345 		.ascii	"RESERVED5\000"
 4022      52564544 
 4022      3500
 4023              	.LASF5:
 4024 0564 53564361 		.ascii	"SVCall_IRQn\000"
 4024      6C6C5F49 
 4024      52516E00 
 4025              	.LASF155:
 4026 0570 2F686F6D 		.ascii	"/home/berndoj/git/stm32tctst/lib/stm32f1hal\000"
 4026      652F6265 
 4026      726E646F 
 4026      6A2F6769 
 4026      742F7374 
 4027              	.LASF61:
 4028 059c 696E7433 		.ascii	"int32_t\000"
 4028      325F7400 
 4029              	.LASF50:
 4030 05a4 756E7369 		.ascii	"unsigned char\000"
ARM GAS  /tmp/cc4CJeQn.s 			page 134


 4030      676E6564 
 4030      20636861 
 4030      7200
 4031              	.LASF81:
 4032 05b2 53484353 		.ascii	"SHCSR\000"
 4032      5200
 4033              	.LASF28:
 4034 05b8 5553425F 		.ascii	"USB_HP_CAN1_TX_IRQn\000"
 4034      48505F43 
 4034      414E315F 
 4034      54585F49 
 4034      52516E00 
 4035              	.LASF96:
 4036 05cc 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4036      52784275 
 4036      66666572 
 4036      00
 4037              	.LASF19:
 4038 05d9 45585449 		.ascii	"EXTI4_IRQn\000"
 4038      345F4952 
 4038      516E00
 4039              	.LASF121:
 4040 05e4 48414C5F 		.ascii	"HAL_SYSTICK_Config\000"
 4040      53595354 
 4040      49434B5F 
 4040      436F6E66 
 4040      696700
 4041              	.LASF51:
 4042 05f7 73686F72 		.ascii	"short int\000"
 4042      7420696E 
 4042      7400
 4043              	.LASF63:
 4044 0601 49534552 		.ascii	"ISER\000"
 4044      00
 4045              	.LASF76:
 4046 0606 4E564943 		.ascii	"NVIC_Type\000"
 4046      5F547970 
 4046      6500
 4047              	.LASF22:
 4048 0610 444D4131 		.ascii	"DMA1_Channel3_IRQn\000"
 4048      5F436861 
 4048      6E6E656C 
 4048      335F4952 
 4048      516E00
 4049              	.LASF29:
 4050 0623 5553425F 		.ascii	"USB_LP_CAN1_RX0_IRQn\000"
 4050      4C505F43 
 4050      414E315F 
 4050      5258305F 
 4050      4952516E 
 4051              	.LASF153:
 4052 0638 474E5520 		.ascii	"GNU C11 6.3.1 20170620 -mcpu=cortex-m3 -mthumb -g -"
 4052      43313120 
 4052      362E332E 
 4052      31203230 
 4052      31373036 
 4053 066b 67647761 		.ascii	"gdwarf-2 -Os -fomit-frame-pointer\000"
ARM GAS  /tmp/cc4CJeQn.s 			page 135


 4053      72662D32 
 4053      202D4F73 
 4053      202D666F 
 4053      6D69742D 
 4054              	.LASF129:
 4055 068d 48414C5F 		.ascii	"HAL_NVIC_SetPriorityGrouping\000"
 4055      4E564943 
 4055      5F536574 
 4055      5072696F 
 4055      72697479 
 4056              	.LASF143:
 4057 06aa 5F5F4E56 		.ascii	"__NVIC_SetPendingIRQ\000"
 4057      49435F53 
 4057      65745065 
 4057      6E64696E 
 4057      67495251 
 4058              	.LASF146:
 4059 06bf 5F5F4E56 		.ascii	"__NVIC_EnableIRQ\000"
 4059      49435F45 
 4059      6E61626C 
 4059      65495251 
 4059      00
 4060              	.LASF13:
 4061 06d0 464C4153 		.ascii	"FLASH_IRQn\000"
 4061      485F4952 
 4061      516E00
 4062              	.LASF47:
 4063 06db 4952516E 		.ascii	"IRQn_Type\000"
 4063      5F547970 
 4063      6500
 4064              	.LASF62:
 4065 06e5 75696E74 		.ascii	"uint32_t\000"
 4065      33325F74 
 4065      00
 4066              	.LASF43:
 4067 06ee 55534152 		.ascii	"USART2_IRQn\000"
 4067      54325F49 
 4067      52516E00 
 4068              	.LASF4:
 4069 06fa 55736167 		.ascii	"UsageFault_IRQn\000"
 4069      65466175 
 4069      6C745F49 
 4069      52516E00 
 4070              	.LASF100:
 4071 070a 6C6F6E67 		.ascii	"long double\000"
 4071      20646F75 
 4071      626C6500 
 4072              	.LASF106:
 4073 0716 75775469 		.ascii	"uwTickPrio\000"
 4073      636B5072 
 4073      696F00
 4074              	.LASF126:
 4075 0721 48414C5F 		.ascii	"HAL_NVIC_SetPriority\000"
 4075      4E564943 
 4075      5F536574 
 4075      5072696F 
 4075      72697479 
ARM GAS  /tmp/cc4CJeQn.s 			page 136


 4076              	.LASF33:
 4077 0736 54494D31 		.ascii	"TIM1_BRK_IRQn\000"
 4077      5F42524B 
 4077      5F495251 
 4077      6E00
 4078              	.LASF109:
 4079 0744 48414C5F 		.ascii	"HAL_SYSTICK_CLKSourceConfig\000"
 4079      53595354 
 4079      49434B5F 
 4079      434C4B53 
 4079      6F757263 
 4080              	.LASF0:
 4081 0760 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 4081      61736B61 
 4081      626C6549 
 4081      6E745F49 
 4081      52516E00 
 4082              	.LASF53:
 4083 0774 5F5F696E 		.ascii	"__int32_t\000"
 4083      7433325F 
 4083      7400
 4084              	.LASF119:
 4085 077e 70537562 		.ascii	"pSubPriority\000"
 4085      5072696F 
 4085      72697479 
 4085      00
 4086              	.LASF25:
 4087 078b 444D4131 		.ascii	"DMA1_Channel6_IRQn\000"
 4087      5F436861 
 4087      6E6E656C 
 4087      365F4952 
 4087      516E00
 4088              	.LASF11:
 4089 079e 54414D50 		.ascii	"TAMPER_IRQn\000"
 4089      45525F49 
 4089      52516E00 
 4090              	.LASF34:
 4091 07aa 54494D31 		.ascii	"TIM1_UP_IRQn\000"
 4091      5F55505F 
 4091      4952516E 
 4091      00
 4092              	.LASF46:
 4093 07b7 55534257 		.ascii	"USBWakeUp_IRQn\000"
 4093      616B6555 
 4093      705F4952 
 4093      516E00
 4094              	.LASF120:
 4095 07c6 48414C5F 		.ascii	"HAL_NVIC_GetPriorityGrouping\000"
 4095      4E564943 
 4095      5F476574 
 4095      5072696F 
 4095      72697479 
 4096              	.LASF6:
 4097 07e3 44656275 		.ascii	"DebugMonitor_IRQn\000"
 4097      674D6F6E 
 4097      69746F72 
 4097      5F495251 
ARM GAS  /tmp/cc4CJeQn.s 			page 137


 4097      6E00
 4098              	.LASF92:
 4099 07f5 4354524C 		.ascii	"CTRL\000"
 4099      00
 4100              	.LASF141:
 4101 07fa 5F5F4E56 		.ascii	"__NVIC_GetActive\000"
 4101      49435F47 
 4101      65744163 
 4101      74697665 
 4101      00
 4102              	.LASF94:
 4103 080b 43414C49 		.ascii	"CALIB\000"
 4103      4200
 4104              	.LASF37:
 4105 0811 54494D32 		.ascii	"TIM2_IRQn\000"
 4105      5F495251 
 4105      6E00
 4106              	.LASF15:
 4107 081b 45585449 		.ascii	"EXTI0_IRQn\000"
 4107      305F4952 
 4107      516E00
 4108              	.LASF42:
 4109 0826 55534152 		.ascii	"USART1_IRQn\000"
 4109      54315F49 
 4109      52516E00 
 4110              	.LASF131:
 4111 0832 5072696F 		.ascii	"Priority\000"
 4111      72697479 
 4111      00
 4112              	.LASF60:
 4113 083b 75696E74 		.ascii	"uint8_t\000"
 4113      385F7400 
 4114              	.LASF148:
 4115 0843 5F5F4E56 		.ascii	"__NVIC_GetPriorityGrouping\000"
 4115      49435F47 
 4115      65745072 
 4115      696F7269 
 4115      74794772 
 4116              	.LASF66:
 4117 085e 52534552 		.ascii	"RSERVED1\000"
 4117      56454431 
 4117      00
 4118              	.LASF74:
 4119 0867 53544952 		.ascii	"STIR\000"
 4119      00
 4120              	.LASF26:
 4121 086c 444D4131 		.ascii	"DMA1_Channel7_IRQn\000"
 4121      5F436861 
 4121      6E6E656C 
 4121      375F4952 
 4121      516E00
 4122              	.LASF40:
 4123 087f 49324331 		.ascii	"I2C1_ER_IRQn\000"
 4123      5F45525F 
 4123      4952516E 
 4123      00
 4124              	.LASF12:
ARM GAS  /tmp/cc4CJeQn.s 			page 138


 4125 088c 5254435F 		.ascii	"RTC_IRQn\000"
 4125      4952516E 
 4125      00
 4126              	.LASF90:
 4127 0895 43504143 		.ascii	"CPACR\000"
 4127      5200
 4128              	.LASF83:
 4129 089b 48465352 		.ascii	"HFSR\000"
 4129      00
 4130              	.LASF31:
 4131 08a0 43414E31 		.ascii	"CAN1_SCE_IRQn\000"
 4131      5F534345 
 4131      5F495251 
 4131      6E00
 4132              	.LASF14:
 4133 08ae 5243435F 		.ascii	"RCC_IRQn\000"
 4133      4952516E 
 4133      00
 4134              	.LASF135:
 4135 08b7 53797354 		.ascii	"SysTick_Config\000"
 4135      69636B5F 
 4135      436F6E66 
 4135      696700
 4136              	.LASF38:
 4137 08c6 54494D33 		.ascii	"TIM3_IRQn\000"
 4137      5F495251 
 4137      6E00
 4138              	.LASF16:
 4139 08d0 45585449 		.ascii	"EXTI1_IRQn\000"
 4139      315F4952 
 4139      516E00
 4140              		.ident	"GCC: (15:6.3.1+svn253039-1build1) 6.3.1 20170620"
ARM GAS  /tmp/cc4CJeQn.s 			page 139


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_cortex.c
     /tmp/cc4CJeQn.s:69     .text:0000000000000000 $t
     /tmp/cc4CJeQn.s:76     .text:0000000000000000 HAL_NVIC_SetPriorityGrouping
     /tmp/cc4CJeQn.s:115    .text:0000000000000020 $d
     /tmp/cc4CJeQn.s:121    .text:0000000000000024 $t
     /tmp/cc4CJeQn.s:128    .text:0000000000000024 HAL_NVIC_SetPriority
     /tmp/cc4CJeQn.s:233    .text:0000000000000084 $d
     /tmp/cc4CJeQn.s:240    .text:000000000000008c $t
     /tmp/cc4CJeQn.s:247    .text:000000000000008c HAL_NVIC_EnableIRQ
     /tmp/cc4CJeQn.s:274    .text:00000000000000a4 $d
     /tmp/cc4CJeQn.s:280    .text:00000000000000a8 $t
     /tmp/cc4CJeQn.s:287    .text:00000000000000a8 HAL_NVIC_DisableIRQ
     /tmp/cc4CJeQn.s:336    .text:00000000000000cc $d
     /tmp/cc4CJeQn.s:344    .text:00000000000000d0 $t
     /tmp/cc4CJeQn.s:351    .text:00000000000000d0 HAL_NVIC_SystemReset
     /tmp/cc4CJeQn.s:405    .text:00000000000000ec $d
     /tmp/cc4CJeQn.s:412    .text:00000000000000f4 $t
     /tmp/cc4CJeQn.s:419    .text:00000000000000f4 HAL_SYSTICK_Config
     /tmp/cc4CJeQn.s:479    .text:0000000000000118 $d
     /tmp/cc4CJeQn.s:484    .text:0000000000000120 $t
     /tmp/cc4CJeQn.s:491    .text:0000000000000120 HAL_NVIC_GetPriorityGrouping
     /tmp/cc4CJeQn.s:511    .text:000000000000012c $d
     /tmp/cc4CJeQn.s:515    .text:0000000000000130 $t
     /tmp/cc4CJeQn.s:522    .text:0000000000000130 HAL_NVIC_GetPriority
     /tmp/cc4CJeQn.s:622    .text:0000000000000188 $d
     /tmp/cc4CJeQn.s:628    .text:000000000000018c $t
     /tmp/cc4CJeQn.s:635    .text:000000000000018c HAL_NVIC_SetPendingIRQ
     /tmp/cc4CJeQn.s:663    .text:00000000000001a8 $d
     /tmp/cc4CJeQn.s:669    .text:00000000000001ac $t
     /tmp/cc4CJeQn.s:676    .text:00000000000001ac HAL_NVIC_GetPendingIRQ
     /tmp/cc4CJeQn.s:709    .text:00000000000001cc $d
     /tmp/cc4CJeQn.s:713    .text:00000000000001d0 $t
     /tmp/cc4CJeQn.s:720    .text:00000000000001d0 HAL_NVIC_ClearPendingIRQ
     /tmp/cc4CJeQn.s:748    .text:00000000000001ec $d
     /tmp/cc4CJeQn.s:754    .text:00000000000001f0 $t
     /tmp/cc4CJeQn.s:761    .text:00000000000001f0 HAL_NVIC_GetActive
     /tmp/cc4CJeQn.s:794    .text:0000000000000210 $d
     /tmp/cc4CJeQn.s:798    .text:0000000000000214 $t
     /tmp/cc4CJeQn.s:805    .text:0000000000000214 HAL_SYSTICK_CLKSourceConfig
     /tmp/cc4CJeQn.s:827    .text:0000000000000228 $d
     /tmp/cc4CJeQn.s:831    .text:000000000000022c $t
     /tmp/cc4CJeQn.s:838    .text:000000000000022c HAL_SYSTICK_Callback
     /tmp/cc4CJeQn.s:856    .text:000000000000022e HAL_SYSTICK_IRQHandler
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
