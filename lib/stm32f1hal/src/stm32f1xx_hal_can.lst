ARM GAS  /tmp/ccDRaG8a.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"stm32f1xx_hal_can.c"
  12              	@ GNU C11 (15:6.3.1+svn253039-1build1) version 6.3.1 20170620 (arm-none-eabi)
  13              	@	compiled by GNU C version 7.2.0, GMP version 6.1.2, MPFR version 4.0.1-rc1, MPC version 1.1.0, is
  14              	@ warning: MPFR header version 4.0.1-rc1 differs from library version 4.0.1.
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I ./inc -I ./inc/Legacy -I ../cmsisstm32f1xx/inc
  17              	@ -I ../cmsiscore/inc -imultilib thumb/v7-m -D__USES_INITFINI__
  18              	@ -D STM32F103x6 -D RUN_FROM_FLASH=1 src/stm32f1xx_hal_can.c
  19              	@ -mcpu=cortex-m3 -mthumb -auxbase-strip bin/stm32f1xx_hal_can.o -g
  20              	@ -gdwarf-2 -Os -Wall -fomit-frame-pointer -fverbose-asm
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffunction-cse -fgcse
  32              	@ -fgcse-lm -fgnu-runtime -fgnu-unique -fguess-branch-probability
  33              	@ -fhoist-adjacent-loads -fident -fif-conversion -fif-conversion2
  34              	@ -findirect-inlining -finline -finline-atomics -finline-functions
  35              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  36              	@ -fipa-cp-alignment -fipa-icf -fipa-icf-functions -fipa-icf-variables
  37              	@ -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra
  38              	@ -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  39              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  40              	@ -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  41              	@ -fmath-errno -fmerge-constants -fmerge-debug-strings
  42              	@ -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  43              	@ -fpartial-inlining -fpeephole -fpeephole2 -fplt -fprefetch-loop-arrays
  44              	@ -freg-struct-return -freorder-blocks -freorder-functions
  45              	@ -frerun-cse-after-loop -fsched-critical-path-heuristic
  46              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  47              	@ -fsched-last-insn-heuristic -fsched-pressure -fsched-rank-heuristic
  48              	@ -fsched-spec -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  49              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  50              	@ -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types
  51              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstrict-aliasing
  52              	@ -fstrict-overflow -fstrict-volatile-bitfields -fsync-libcalls
  53              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  54              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  55              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  56              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  57              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
ARM GAS  /tmp/ccDRaG8a.s 			page 2


  58              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  59              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  60              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  61              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  62              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  63              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  64              	@ -munaligned-access -mvectorize-with-neon-quad
  65              	
  66              		.text
  67              	.Ltext0:
  68              		.cfi_sections	.debug_frame
  69              		.align	1
  70              		.weak	HAL_CAN_MspInit
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu softvfp
  75              		.type	HAL_CAN_MspInit, %function
  76              	HAL_CAN_MspInit:
  77              	.LFB129:
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82 0000 7047     		bx	lr	@
  83              		.cfi_endproc
  84              	.LFE129:
  85              		.size	HAL_CAN_MspInit, .-HAL_CAN_MspInit
  86              		.align	1
  87              		.global	HAL_CAN_Init
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  91              		.fpu softvfp
  92              		.type	HAL_CAN_Init, %function
  93              	HAL_CAN_Init:
  94              	.LFB65:
  95              		.file 1 "src/stm32f1xx_hal_can.c"
   1:src/stm32f1xx_hal_can.c **** /**
   2:src/stm32f1xx_hal_can.c ****   ******************************************************************************
   3:src/stm32f1xx_hal_can.c ****   * @file    stm32f1xx_hal_can.c
   4:src/stm32f1xx_hal_can.c ****   * @author  MCD Application Team
   5:src/stm32f1xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:src/stm32f1xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:src/stm32f1xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:src/stm32f1xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:src/stm32f1xx_hal_can.c ****   *           + Configuration functions
  10:src/stm32f1xx_hal_can.c ****   *           + Control functions
  11:src/stm32f1xx_hal_can.c ****   *           + Interrupts management
  12:src/stm32f1xx_hal_can.c ****   *           + Callbacks functions
  13:src/stm32f1xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:src/stm32f1xx_hal_can.c ****   *
  15:src/stm32f1xx_hal_can.c ****   @verbatim
  16:src/stm32f1xx_hal_can.c ****   ==============================================================================
  17:src/stm32f1xx_hal_can.c ****                         ##### How to use this driver #####
  18:src/stm32f1xx_hal_can.c ****   ==============================================================================
  19:src/stm32f1xx_hal_can.c ****     [..]
ARM GAS  /tmp/ccDRaG8a.s 			page 3


  20:src/stm32f1xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
  21:src/stm32f1xx_hal_can.c ****           HAL_CAN_MspInit():
  22:src/stm32f1xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  23:src/stm32f1xx_hal_can.c ****          (++) Configure CAN pins
  24:src/stm32f1xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  25:src/stm32f1xx_hal_can.c ****              (+++) Configure CAN pins as alternate function open-drain
  26:src/stm32f1xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  27:src/stm32f1xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  28:src/stm32f1xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  29:src/stm32f1xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
  30:src/stm32f1xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
  31:src/stm32f1xx_hal_can.c **** 
  32:src/stm32f1xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  33:src/stm32f1xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
  34:src/stm32f1xx_hal_can.c **** 
  35:src/stm32f1xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  36:src/stm32f1xx_hal_can.c ****           functions:
  37:src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  38:src/stm32f1xx_hal_can.c **** 
  39:src/stm32f1xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  40:src/stm32f1xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  41:src/stm32f1xx_hal_can.c ****           messages.
  42:src/stm32f1xx_hal_can.c **** 
  43:src/stm32f1xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  44:src/stm32f1xx_hal_can.c ****           can be used:
  45:src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  46:src/stm32f1xx_hal_can.c ****                  message.
  47:src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  48:src/stm32f1xx_hal_can.c ****                  message.
  49:src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  50:src/stm32f1xx_hal_can.c ****                  mailboxes.
  51:src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  52:src/stm32f1xx_hal_can.c ****                  in a Tx mailbox.
  53:src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  54:src/stm32f1xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  55:src/stm32f1xx_hal_can.c **** 
  56:src/stm32f1xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  57:src/stm32f1xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  58:src/stm32f1xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  59:src/stm32f1xx_hal_can.c ****           stored in the Rx Fifo.
  60:src/stm32f1xx_hal_can.c **** 
  61:src/stm32f1xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  62:src/stm32f1xx_hal_can.c **** 
  63:src/stm32f1xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  64:src/stm32f1xx_hal_can.c **** 
  65:src/stm32f1xx_hal_can.c **** 
  66:src/stm32f1xx_hal_can.c ****       *** Polling mode operation ***
  67:src/stm32f1xx_hal_can.c ****       ==============================
  68:src/stm32f1xx_hal_can.c ****     [..]
  69:src/stm32f1xx_hal_can.c ****       (#) Reception:
  70:src/stm32f1xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  71:src/stm32f1xx_hal_can.c ****                  until at least one message is received.
  72:src/stm32f1xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  73:src/stm32f1xx_hal_can.c **** 
  74:src/stm32f1xx_hal_can.c ****       (#) Transmission:
  75:src/stm32f1xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
  76:src/stm32f1xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
ARM GAS  /tmp/ccDRaG8a.s 			page 4


  77:src/stm32f1xx_hal_can.c ****             (++) Then request transmission of a message using
  78:src/stm32f1xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  79:src/stm32f1xx_hal_can.c **** 
  80:src/stm32f1xx_hal_can.c **** 
  81:src/stm32f1xx_hal_can.c ****       *** Interrupt mode operation ***
  82:src/stm32f1xx_hal_can.c ****       ================================
  83:src/stm32f1xx_hal_can.c ****     [..]
  84:src/stm32f1xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  85:src/stm32f1xx_hal_can.c ****           function. Then, the process can be controlled through the
  86:src/stm32f1xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
  87:src/stm32f1xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
  88:src/stm32f1xx_hal_can.c **** 
  89:src/stm32f1xx_hal_can.c ****       (#) Notifications can be deactivated using
  90:src/stm32f1xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
  91:src/stm32f1xx_hal_can.c **** 
  92:src/stm32f1xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
  93:src/stm32f1xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
  94:src/stm32f1xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
  95:src/stm32f1xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
  96:src/stm32f1xx_hal_can.c ****           here.
  97:src/stm32f1xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
  98:src/stm32f1xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
  99:src/stm32f1xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 100:src/stm32f1xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 101:src/stm32f1xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 102:src/stm32f1xx_hal_can.c ****                  read, the notification can be activated again.
 103:src/stm32f1xx_hal_can.c **** 
 104:src/stm32f1xx_hal_can.c **** 
 105:src/stm32f1xx_hal_can.c ****       *** Sleep mode ***
 106:src/stm32f1xx_hal_can.c ****       ==================
 107:src/stm32f1xx_hal_can.c ****     [..]
 108:src/stm32f1xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 109:src/stm32f1xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 110:src/stm32f1xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 111:src/stm32f1xx_hal_can.c ****           be completed.
 112:src/stm32f1xx_hal_can.c **** 
 113:src/stm32f1xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 114:src/stm32f1xx_hal_can.c ****           will be entered.
 115:src/stm32f1xx_hal_can.c **** 
 116:src/stm32f1xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 117:src/stm32f1xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 118:src/stm32f1xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 119:src/stm32f1xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 120:src/stm32f1xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 121:src/stm32f1xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 122:src/stm32f1xx_hal_can.c **** 
 123:src/stm32f1xx_hal_can.c ****       (#) The wake-up from sleep mode can be trigged by two ways:
 124:src/stm32f1xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 125:src/stm32f1xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 126:src/stm32f1xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 127:src/stm32f1xx_hal_can.c ****                  if automatic wake up mode is enabled.
 128:src/stm32f1xx_hal_can.c **** 
 129:src/stm32f1xx_hal_can.c ****   *** Callback registration ***
 130:src/stm32f1xx_hal_can.c ****   =============================================
 131:src/stm32f1xx_hal_can.c **** 
 132:src/stm32f1xx_hal_can.c ****   The compilation define  USE_HAL_CAN_REGISTER_CALLBACKS when set to 1
 133:src/stm32f1xx_hal_can.c ****   allows the user to configure dynamically the driver callbacks.
ARM GAS  /tmp/ccDRaG8a.s 			page 5


 134:src/stm32f1xx_hal_can.c ****   Use Function @ref HAL_CAN_RegisterCallback() to register an interrupt callback.
 135:src/stm32f1xx_hal_can.c **** 
 136:src/stm32f1xx_hal_can.c ****   Function @ref HAL_CAN_RegisterCallback() allows to register following callbacks:
 137:src/stm32f1xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 138:src/stm32f1xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 139:src/stm32f1xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 140:src/stm32f1xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 141:src/stm32f1xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 142:src/stm32f1xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 143:src/stm32f1xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
 144:src/stm32f1xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 145:src/stm32f1xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 146:src/stm32f1xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 147:src/stm32f1xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 148:src/stm32f1xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 149:src/stm32f1xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 150:src/stm32f1xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 151:src/stm32f1xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 152:src/stm32f1xx_hal_can.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 153:src/stm32f1xx_hal_can.c ****   and a pointer to the user callback function.
 154:src/stm32f1xx_hal_can.c **** 
 155:src/stm32f1xx_hal_can.c ****   Use function @ref HAL_CAN_UnRegisterCallback() to reset a callback to the default
 156:src/stm32f1xx_hal_can.c ****   weak function.
 157:src/stm32f1xx_hal_can.c ****   @ref HAL_CAN_UnRegisterCallback takes as parameters the HAL peripheral handle,
 158:src/stm32f1xx_hal_can.c ****   and the Callback ID.
 159:src/stm32f1xx_hal_can.c ****   This function allows to reset following callbacks:
 160:src/stm32f1xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 161:src/stm32f1xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 162:src/stm32f1xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 163:src/stm32f1xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 164:src/stm32f1xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 165:src/stm32f1xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 166:src/stm32f1xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
 167:src/stm32f1xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 168:src/stm32f1xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 169:src/stm32f1xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 170:src/stm32f1xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 171:src/stm32f1xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 172:src/stm32f1xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 173:src/stm32f1xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 174:src/stm32f1xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 175:src/stm32f1xx_hal_can.c **** 
 176:src/stm32f1xx_hal_can.c ****   By default, after the @ref HAL_CAN_Init() and when the state is HAL_CAN_STATE_RESET,
 177:src/stm32f1xx_hal_can.c ****   all callbacks are set to the corresponding weak functions:
 178:src/stm32f1xx_hal_can.c ****   example @ref HAL_CAN_ErrorCallback().
 179:src/stm32f1xx_hal_can.c ****   Exception done for MspInit and MspDeInit functions that are
 180:src/stm32f1xx_hal_can.c ****   reset to the legacy weak function in the @ref HAL_CAN_Init()/ @ref HAL_CAN_DeInit() only when
 181:src/stm32f1xx_hal_can.c ****   these callbacks are null (not registered beforehand).
 182:src/stm32f1xx_hal_can.c ****   if not, MspInit or MspDeInit are not null, the @ref HAL_CAN_Init()/ @ref HAL_CAN_DeInit()
 183:src/stm32f1xx_hal_can.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 184:src/stm32f1xx_hal_can.c **** 
 185:src/stm32f1xx_hal_can.c ****   Callbacks can be registered/unregistered in HAL_CAN_STATE_READY state only.
 186:src/stm32f1xx_hal_can.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 187:src/stm32f1xx_hal_can.c ****   in HAL_CAN_STATE_READY or HAL_CAN_STATE_RESET state,
 188:src/stm32f1xx_hal_can.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 189:src/stm32f1xx_hal_can.c ****   In that case first register the MspInit/MspDeInit user callbacks
 190:src/stm32f1xx_hal_can.c ****   using @ref HAL_CAN_RegisterCallback() before calling @ref HAL_CAN_DeInit()
ARM GAS  /tmp/ccDRaG8a.s 			page 6


 191:src/stm32f1xx_hal_can.c ****   or @ref HAL_CAN_Init() function.
 192:src/stm32f1xx_hal_can.c **** 
 193:src/stm32f1xx_hal_can.c ****   When The compilation define USE_HAL_CAN_REGISTER_CALLBACKS is set to 0 or
 194:src/stm32f1xx_hal_can.c ****   not defined, the callback registration feature is not available and all callbacks
 195:src/stm32f1xx_hal_can.c ****   are set to the corresponding weak functions.
 196:src/stm32f1xx_hal_can.c **** 
 197:src/stm32f1xx_hal_can.c ****   @endverbatim
 198:src/stm32f1xx_hal_can.c ****   ******************************************************************************
 199:src/stm32f1xx_hal_can.c ****   * @attention
 200:src/stm32f1xx_hal_can.c ****   *
 201:src/stm32f1xx_hal_can.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 202:src/stm32f1xx_hal_can.c ****   * All rights reserved.</center></h2>
 203:src/stm32f1xx_hal_can.c ****   *
 204:src/stm32f1xx_hal_can.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 205:src/stm32f1xx_hal_can.c ****   * the "License"; You may not use this file except in compliance with the
 206:src/stm32f1xx_hal_can.c ****   * License. You may obtain a copy of the License at:
 207:src/stm32f1xx_hal_can.c ****   *                        opensource.org/licenses/BSD-3-Clause
 208:src/stm32f1xx_hal_can.c ****   *
 209:src/stm32f1xx_hal_can.c ****   ******************************************************************************
 210:src/stm32f1xx_hal_can.c ****   */
 211:src/stm32f1xx_hal_can.c **** 
 212:src/stm32f1xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 213:src/stm32f1xx_hal_can.c **** #include "stm32f1xx_hal.h"
 214:src/stm32f1xx_hal_can.c **** 
 215:src/stm32f1xx_hal_can.c **** /** @addtogroup STM32F1xx_HAL_Driver
 216:src/stm32f1xx_hal_can.c ****   * @{
 217:src/stm32f1xx_hal_can.c ****   */
 218:src/stm32f1xx_hal_can.c **** 
 219:src/stm32f1xx_hal_can.c **** #if defined(CAN1)
 220:src/stm32f1xx_hal_can.c **** 
 221:src/stm32f1xx_hal_can.c **** /** @defgroup CAN CAN
 222:src/stm32f1xx_hal_can.c ****   * @brief CAN driver modules
 223:src/stm32f1xx_hal_can.c ****   * @{
 224:src/stm32f1xx_hal_can.c ****   */
 225:src/stm32f1xx_hal_can.c **** 
 226:src/stm32f1xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 227:src/stm32f1xx_hal_can.c **** 
 228:src/stm32f1xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 229:src/stm32f1xx_hal_can.c ****   #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 230:src/stm32f1xx_hal_can.c **** #endif
 231:src/stm32f1xx_hal_can.c **** 
 232:src/stm32f1xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 233:src/stm32f1xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 234:src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 235:src/stm32f1xx_hal_can.c ****   * @{
 236:src/stm32f1xx_hal_can.c ****   */
 237:src/stm32f1xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 238:src/stm32f1xx_hal_can.c **** /**
 239:src/stm32f1xx_hal_can.c ****   * @}
 240:src/stm32f1xx_hal_can.c ****   */
 241:src/stm32f1xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 242:src/stm32f1xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 243:src/stm32f1xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 244:src/stm32f1xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
 245:src/stm32f1xx_hal_can.c **** 
 246:src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 247:src/stm32f1xx_hal_can.c ****   * @{
ARM GAS  /tmp/ccDRaG8a.s 			page 7


 248:src/stm32f1xx_hal_can.c ****   */
 249:src/stm32f1xx_hal_can.c **** 
 250:src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 251:src/stm32f1xx_hal_can.c ****  *  @brief    Initialization and Configuration functions
 252:src/stm32f1xx_hal_can.c ****  *
 253:src/stm32f1xx_hal_can.c **** @verbatim
 254:src/stm32f1xx_hal_can.c ****   ==============================================================================
 255:src/stm32f1xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 256:src/stm32f1xx_hal_can.c ****   ==============================================================================
 257:src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 258:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
 259:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
 260:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 261:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
 262:src/stm32f1xx_hal_can.c **** 
 263:src/stm32f1xx_hal_can.c **** @endverbatim
 264:src/stm32f1xx_hal_can.c ****   * @{
 265:src/stm32f1xx_hal_can.c ****   */
 266:src/stm32f1xx_hal_can.c **** 
 267:src/stm32f1xx_hal_can.c **** /**
 268:src/stm32f1xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 269:src/stm32f1xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 270:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 271:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 272:src/stm32f1xx_hal_can.c ****   * @retval HAL status
 273:src/stm32f1xx_hal_can.c ****   */
 274:src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 275:src/stm32f1xx_hal_can.c **** {
  96              		.loc 1 275 0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              	.LVL0:
 101              		.loc 1 275 0
 102 0002 38B5     		push	{r3, r4, r5, lr}	@
 103              	.LCFI0:
 104              		.cfi_def_cfa_offset 16
 105              		.cfi_offset 3, -16
 106              		.cfi_offset 4, -12
 107              		.cfi_offset 5, -8
 108              		.cfi_offset 14, -4
 276:src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
 277:src/stm32f1xx_hal_can.c **** 
 278:src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 279:src/stm32f1xx_hal_can.c ****   if (hcan == NULL)
 109              		.loc 1 279 0
 110 0004 0446     		mov	r4, r0	@ hcan, hcan
 111 0006 0028     		cmp	r0, #0	@ hcan
 112 0008 6ED0     		beq	.L21	@
 280:src/stm32f1xx_hal_can.c ****   {
 281:src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 282:src/stm32f1xx_hal_can.c ****   }
 283:src/stm32f1xx_hal_can.c **** 
 284:src/stm32f1xx_hal_can.c ****   /* Check the parameters */
 285:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 286:src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 287:src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
ARM GAS  /tmp/ccDRaG8a.s 			page 8


 288:src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 289:src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 290:src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 291:src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 292:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 293:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 294:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 295:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 296:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 297:src/stm32f1xx_hal_can.c **** 
 298:src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 299:src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 300:src/stm32f1xx_hal_can.c ****   {
 301:src/stm32f1xx_hal_can.c ****     /* Reset callbacks to legacy functions */
 302:src/stm32f1xx_hal_can.c ****     hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0M
 303:src/stm32f1xx_hal_can.c ****     hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0F
 304:src/stm32f1xx_hal_can.c ****     hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1M
 305:src/stm32f1xx_hal_can.c ****     hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1F
 306:src/stm32f1xx_hal_can.c ****     hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbo
 307:src/stm32f1xx_hal_can.c ****     hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbo
 308:src/stm32f1xx_hal_can.c ****     hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbo
 309:src/stm32f1xx_hal_can.c ****     hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbo
 310:src/stm32f1xx_hal_can.c ****     hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbo
 311:src/stm32f1xx_hal_can.c ****     hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbo
 312:src/stm32f1xx_hal_can.c ****     hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCal
 313:src/stm32f1xx_hal_can.c ****     hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFr
 314:src/stm32f1xx_hal_can.c ****     hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCal
 315:src/stm32f1xx_hal_can.c **** 
 316:src/stm32f1xx_hal_can.c ****     if (hcan->MspInitCallback == NULL)
 317:src/stm32f1xx_hal_can.c ****     {
 318:src/stm32f1xx_hal_can.c ****       hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 319:src/stm32f1xx_hal_can.c ****     }
 320:src/stm32f1xx_hal_can.c **** 
 321:src/stm32f1xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 322:src/stm32f1xx_hal_can.c ****     hcan->MspInitCallback(hcan);
 323:src/stm32f1xx_hal_can.c ****   }
 324:src/stm32f1xx_hal_can.c **** 
 325:src/stm32f1xx_hal_can.c **** #else
 326:src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 113              		.loc 1 326 0
 114 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2	@ hcan_12(D)->State, hcan_12(D)->State
 115 000e 0BB9     		cbnz	r3, .L4	@ hcan_12(D)->State,
 327:src/stm32f1xx_hal_can.c ****   {
 328:src/stm32f1xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 329:src/stm32f1xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
 116              		.loc 1 329 0
 117 0010 FFF7FEFF 		bl	HAL_CAN_MspInit	@
 118              	.LVL1:
 119              	.L4:
 330:src/stm32f1xx_hal_can.c ****   }
 331:src/stm32f1xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 332:src/stm32f1xx_hal_can.c **** 
 333:src/stm32f1xx_hal_can.c ****   /* Exit from sleep mode */
 334:src/stm32f1xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 120              		.loc 1 334 0
 121 0014 2268     		ldr	r2, [r4]	@ _16, hcan_12(D)->Instance
 122 0016 1368     		ldr	r3, [r2]	@ _17, _16->MCR
ARM GAS  /tmp/ccDRaG8a.s 			page 9


 123 0018 23F00203 		bic	r3, r3, #2	@ _18, _17,
 124 001c 1360     		str	r3, [r2]	@ _18, _16->MCR
 335:src/stm32f1xx_hal_can.c **** 
 336:src/stm32f1xx_hal_can.c ****   /* Get tick */
 337:src/stm32f1xx_hal_can.c ****   tickstart = HAL_GetTick();
 125              		.loc 1 337 0
 126 001e FFF7FEFF 		bl	HAL_GetTick	@
 127              	.LVL2:
 128 0022 0546     		mov	r5, r0	@ tickstart,
 129              	.LVL3:
 130              	.L5:
 338:src/stm32f1xx_hal_can.c **** 
 339:src/stm32f1xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
 340:src/stm32f1xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 131              		.loc 1 340 0
 132 0024 2368     		ldr	r3, [r4]	@ _22, hcan_12(D)->Instance
 133 0026 5A68     		ldr	r2, [r3, #4]	@ _23, _22->MSR
 134 0028 9107     		lsls	r1, r2, #30	@, _23,
 135 002a 51D4     		bmi	.L6	@,
 341:src/stm32f1xx_hal_can.c ****   {
 342:src/stm32f1xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 343:src/stm32f1xx_hal_can.c ****     {
 344:src/stm32f1xx_hal_can.c ****       /* Update error code */
 345:src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 346:src/stm32f1xx_hal_can.c **** 
 347:src/stm32f1xx_hal_can.c ****       /* Change CAN state */
 348:src/stm32f1xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 349:src/stm32f1xx_hal_can.c **** 
 350:src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
 351:src/stm32f1xx_hal_can.c ****     }
 352:src/stm32f1xx_hal_can.c ****   }
 353:src/stm32f1xx_hal_can.c **** 
 354:src/stm32f1xx_hal_can.c ****   /* Request initialisation */
 355:src/stm32f1xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 136              		.loc 1 355 0
 137 002c 1A68     		ldr	r2, [r3]	@ _32, _22->MCR
 138 002e 42F00102 		orr	r2, r2, #1	@ _33, _32,
 139 0032 1A60     		str	r2, [r3]	@ _33, _22->MCR
 356:src/stm32f1xx_hal_can.c **** 
 357:src/stm32f1xx_hal_can.c ****   /* Get tick */
 358:src/stm32f1xx_hal_can.c ****   tickstart = HAL_GetTick();
 140              		.loc 1 358 0
 141 0034 FFF7FEFF 		bl	HAL_GetTick	@
 142              	.LVL4:
 143 0038 0546     		mov	r5, r0	@ tickstart,
 144              	.LVL5:
 145              	.L7:
 359:src/stm32f1xx_hal_can.c **** 
 360:src/stm32f1xx_hal_can.c ****   /* Wait initialisation acknowledge */
 361:src/stm32f1xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 146              		.loc 1 361 0
 147 003a 2368     		ldr	r3, [r4]	@ _37, hcan_12(D)->Instance
 148 003c 5A68     		ldr	r2, [r3, #4]	@ _38, _37->MSR
 149 003e D207     		lsls	r2, r2, #31	@, _38,
 150 0040 54D5     		bpl	.L8	@,
 362:src/stm32f1xx_hal_can.c ****   {
 363:src/stm32f1xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
ARM GAS  /tmp/ccDRaG8a.s 			page 10


 364:src/stm32f1xx_hal_can.c ****     {
 365:src/stm32f1xx_hal_can.c ****       /* Update error code */
 366:src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 367:src/stm32f1xx_hal_can.c **** 
 368:src/stm32f1xx_hal_can.c ****       /* Change CAN state */
 369:src/stm32f1xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 370:src/stm32f1xx_hal_can.c **** 
 371:src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
 372:src/stm32f1xx_hal_can.c ****     }
 373:src/stm32f1xx_hal_can.c ****   }
 374:src/stm32f1xx_hal_can.c **** 
 375:src/stm32f1xx_hal_can.c ****   /* Set the time triggered communication mode */
 376:src/stm32f1xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 151              		.loc 1 376 0
 152 0042 227E     		ldrb	r2, [r4, #24]	@ zero_extendqisi2	@ hcan_12(D)->Init.TimeTriggeredMode, hcan_12(D)->Init.TimeT
 377:src/stm32f1xx_hal_can.c ****   {
 378:src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 379:src/stm32f1xx_hal_can.c ****   }
 380:src/stm32f1xx_hal_can.c ****   else
 381:src/stm32f1xx_hal_can.c ****   {
 382:src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 383:src/stm32f1xx_hal_can.c ****   }
 384:src/stm32f1xx_hal_can.c **** 
 385:src/stm32f1xx_hal_can.c ****   /* Set the automatic bus-off management */
 386:src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 387:src/stm32f1xx_hal_can.c ****   {
 388:src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 389:src/stm32f1xx_hal_can.c ****   }
 390:src/stm32f1xx_hal_can.c ****   else
 391:src/stm32f1xx_hal_can.c ****   {
 392:src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 393:src/stm32f1xx_hal_can.c ****   }
 394:src/stm32f1xx_hal_can.c **** 
 395:src/stm32f1xx_hal_can.c ****   /* Set the automatic wake-up mode */
 396:src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
 397:src/stm32f1xx_hal_can.c ****   {
 398:src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 399:src/stm32f1xx_hal_can.c ****   }
 400:src/stm32f1xx_hal_can.c ****   else
 401:src/stm32f1xx_hal_can.c ****   {
 402:src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 403:src/stm32f1xx_hal_can.c ****   }
 404:src/stm32f1xx_hal_can.c **** 
 405:src/stm32f1xx_hal_can.c ****   /* Set the automatic retransmission */
 406:src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 407:src/stm32f1xx_hal_can.c ****   {
 408:src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 409:src/stm32f1xx_hal_can.c ****   }
 410:src/stm32f1xx_hal_can.c ****   else
 411:src/stm32f1xx_hal_can.c ****   {
 412:src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 413:src/stm32f1xx_hal_can.c ****   }
 414:src/stm32f1xx_hal_can.c **** 
 415:src/stm32f1xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 416:src/stm32f1xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 417:src/stm32f1xx_hal_can.c ****   {
 418:src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
ARM GAS  /tmp/ccDRaG8a.s 			page 11


 419:src/stm32f1xx_hal_can.c ****   }
 420:src/stm32f1xx_hal_can.c ****   else
 421:src/stm32f1xx_hal_can.c ****   {
 422:src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 423:src/stm32f1xx_hal_can.c ****   }
 424:src/stm32f1xx_hal_can.c **** 
 425:src/stm32f1xx_hal_can.c ****   /* Set the transmit FIFO priority */
 426:src/stm32f1xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 427:src/stm32f1xx_hal_can.c ****   {
 428:src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 429:src/stm32f1xx_hal_can.c ****   }
 430:src/stm32f1xx_hal_can.c ****   else
 431:src/stm32f1xx_hal_can.c ****   {
 432:src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 433:src/stm32f1xx_hal_can.c ****   }
 434:src/stm32f1xx_hal_can.c **** 
 435:src/stm32f1xx_hal_can.c ****   /* Set the bit timing register */
 436:src/stm32f1xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 437:src/stm32f1xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 438:src/stm32f1xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 439:src/stm32f1xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 440:src/stm32f1xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 441:src/stm32f1xx_hal_can.c **** 
 442:src/stm32f1xx_hal_can.c ****   /* Initialize the error code */
 443:src/stm32f1xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 153              		.loc 1 443 0
 154 0044 0020     		movs	r0, #0	@ tmp200,
 376:src/stm32f1xx_hal_can.c ****   {
 155              		.loc 1 376 0
 156 0046 012A     		cmp	r2, #1	@ hcan_12(D)->Init.TimeTriggeredMode,
 378:src/stm32f1xx_hal_can.c ****   }
 157              		.loc 1 378 0
 158 0048 1A68     		ldr	r2, [r3]	@ _48,* _37
 159 004a 0CBF     		ite	eq
 160 004c 42F08002 		orreq	r2, r2, #128	@ _49, _48,
 382:src/stm32f1xx_hal_can.c ****   }
 161              		.loc 1 382 0
 162 0050 22F08002 		bicne	r2, r2, #128	@ _52, _51,
 163 0054 1A60     		str	r2, [r3]	@ _52,* _37
 386:src/stm32f1xx_hal_can.c ****   {
 164              		.loc 1 386 0
 165 0056 627E     		ldrb	r2, [r4, #25]	@ zero_extendqisi2	@ hcan_12(D)->Init.AutoBusOff, hcan_12(D)->Init.AutoBusOff
 166 0058 012A     		cmp	r2, #1	@ hcan_12(D)->Init.AutoBusOff,
 388:src/stm32f1xx_hal_can.c ****   }
 167              		.loc 1 388 0
 168 005a 1A68     		ldr	r2, [r3]	@ _55,* _37
 169 005c 0CBF     		ite	eq
 170 005e 42F04002 		orreq	r2, r2, #64	@ _56, _55,
 392:src/stm32f1xx_hal_can.c ****   }
 171              		.loc 1 392 0
 172 0062 22F04002 		bicne	r2, r2, #64	@ _59, _58,
 173 0066 1A60     		str	r2, [r3]	@ _59,* _37
 396:src/stm32f1xx_hal_can.c ****   {
 174              		.loc 1 396 0
 175 0068 A27E     		ldrb	r2, [r4, #26]	@ zero_extendqisi2	@ hcan_12(D)->Init.AutoWakeUp, hcan_12(D)->Init.AutoWakeUp
 176 006a 012A     		cmp	r2, #1	@ hcan_12(D)->Init.AutoWakeUp,
 398:src/stm32f1xx_hal_can.c ****   }
ARM GAS  /tmp/ccDRaG8a.s 			page 12


 177              		.loc 1 398 0
 178 006c 1A68     		ldr	r2, [r3]	@ _62,* _37
 179 006e 0CBF     		ite	eq
 180 0070 42F02002 		orreq	r2, r2, #32	@ _63, _62,
 402:src/stm32f1xx_hal_can.c ****   }
 181              		.loc 1 402 0
 182 0074 22F02002 		bicne	r2, r2, #32	@ _66, _65,
 183 0078 1A60     		str	r2, [r3]	@ _66,* _37
 406:src/stm32f1xx_hal_can.c ****   {
 184              		.loc 1 406 0
 185 007a E27E     		ldrb	r2, [r4, #27]	@ zero_extendqisi2	@ hcan_12(D)->Init.AutoRetransmission, hcan_12(D)->Init.Auto
 186 007c 012A     		cmp	r2, #1	@ hcan_12(D)->Init.AutoRetransmission,
 408:src/stm32f1xx_hal_can.c ****   }
 187              		.loc 1 408 0
 188 007e 1A68     		ldr	r2, [r3]	@ _69,* _37
 189 0080 0CBF     		ite	eq
 190 0082 22F01002 		biceq	r2, r2, #16	@ _70, _69,
 412:src/stm32f1xx_hal_can.c ****   }
 191              		.loc 1 412 0
 192 0086 42F01002 		orrne	r2, r2, #16	@ _73, _72,
 193 008a 1A60     		str	r2, [r3]	@ _73,* _37
 416:src/stm32f1xx_hal_can.c ****   {
 194              		.loc 1 416 0
 195 008c 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2	@ hcan_12(D)->Init.ReceiveFifoLocked, hcan_12(D)->Init.Recei
 196 008e 012A     		cmp	r2, #1	@ hcan_12(D)->Init.ReceiveFifoLocked,
 418:src/stm32f1xx_hal_can.c ****   }
 197              		.loc 1 418 0
 198 0090 1A68     		ldr	r2, [r3]	@ _76,* _37
 199 0092 0CBF     		ite	eq
 200 0094 42F00802 		orreq	r2, r2, #8	@ _77, _76,
 422:src/stm32f1xx_hal_can.c ****   }
 201              		.loc 1 422 0
 202 0098 22F00802 		bicne	r2, r2, #8	@ _80, _79,
 203 009c 1A60     		str	r2, [r3]	@ _80,* _37
 426:src/stm32f1xx_hal_can.c ****   {
 204              		.loc 1 426 0
 205 009e 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2	@ hcan_12(D)->Init.TransmitFifoPriority, hcan_12(D)->Init.Tr
 206 00a0 012A     		cmp	r2, #1	@ hcan_12(D)->Init.TransmitFifoPriority,
 428:src/stm32f1xx_hal_can.c ****   }
 207              		.loc 1 428 0
 208 00a2 1A68     		ldr	r2, [r3]	@ _83,* _37
 209 00a4 0CBF     		ite	eq
 210 00a6 42F00402 		orreq	r2, r2, #4	@ _84, _83,
 432:src/stm32f1xx_hal_can.c ****   }
 211              		.loc 1 432 0
 212 00aa 22F00402 		bicne	r2, r2, #4	@ _87, _86,
 213 00ae 1A60     		str	r2, [r3]	@ _87,* _37
 436:src/stm32f1xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 214              		.loc 1 436 0
 215 00b0 E168     		ldr	r1, [r4, #12]	@ hcan_12(D)->Init.SyncJumpWidth, hcan_12(D)->Init.SyncJumpWidth
 216 00b2 A268     		ldr	r2, [r4, #8]	@ hcan_12(D)->Init.Mode, hcan_12(D)->Init.Mode
 217 00b4 0A43     		orrs	r2, r2, r1	@, tmp191, hcan_12(D)->Init.Mode, hcan_12(D)->Init.SyncJumpWidth
 218 00b6 2169     		ldr	r1, [r4, #16]	@ hcan_12(D)->Init.TimeSeg1, hcan_12(D)->Init.TimeSeg1
 219 00b8 0A43     		orrs	r2, r2, r1	@, tmp194, tmp191, hcan_12(D)->Init.TimeSeg1
 220 00ba 6169     		ldr	r1, [r4, #20]	@ hcan_12(D)->Init.TimeSeg2, hcan_12(D)->Init.TimeSeg2
 221 00bc 0A43     		orrs	r2, r2, r1	@, tmp196, tmp194, hcan_12(D)->Init.TimeSeg2
 222 00be 6168     		ldr	r1, [r4, #4]	@ hcan_12(D)->Init.Prescaler, hcan_12(D)->Init.Prescaler
ARM GAS  /tmp/ccDRaG8a.s 			page 13


 223 00c0 0139     		subs	r1, r1, #1	@ tmp198, hcan_12(D)->Init.Prescaler,
 224 00c2 0A43     		orrs	r2, r2, r1	@, _98, tmp196, tmp198
 225 00c4 DA61     		str	r2, [r3, #28]	@ _98, _37->BTR
 444:src/stm32f1xx_hal_can.c **** 
 445:src/stm32f1xx_hal_can.c ****   /* Initialize the CAN state */
 446:src/stm32f1xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 226              		.loc 1 446 0
 227 00c6 0123     		movs	r3, #1	@ tmp201,
 443:src/stm32f1xx_hal_can.c **** 
 228              		.loc 1 443 0
 229 00c8 6062     		str	r0, [r4, #36]	@ tmp200, hcan_12(D)->ErrorCode
 230              		.loc 1 446 0
 231 00ca 84F82030 		strb	r3, [r4, #32]	@ tmp201, hcan_12(D)->State
 447:src/stm32f1xx_hal_can.c **** 
 448:src/stm32f1xx_hal_can.c ****   /* Return function status */
 449:src/stm32f1xx_hal_can.c ****   return HAL_OK;
 232              		.loc 1 449 0
 233 00ce 38BD     		pop	{r3, r4, r5, pc}	@
 234              	.LVL6:
 235              	.L6:
 342:src/stm32f1xx_hal_can.c ****     {
 236              		.loc 1 342 0
 237 00d0 FFF7FEFF 		bl	HAL_GetTick	@
 238              	.LVL7:
 239 00d4 401B     		subs	r0, r0, r5	@ tmp177,, tickstart
 240 00d6 0A28     		cmp	r0, #10	@ tmp177,
 241 00d8 A4D9     		bls	.L5	@,
 242              	.L30:
 366:src/stm32f1xx_hal_can.c **** 
 243              		.loc 1 366 0
 244 00da 636A     		ldr	r3, [r4, #36]	@ _43,
 245 00dc 43F40033 		orr	r3, r3, #131072	@ _44, _43,
 246 00e0 6362     		str	r3, [r4, #36]	@ _44,
 369:src/stm32f1xx_hal_can.c **** 
 247              		.loc 1 369 0
 248 00e2 0523     		movs	r3, #5	@ tmp182,
 249 00e4 84F82030 		strb	r3, [r4, #32]	@ tmp182,
 250              	.LVL8:
 251              	.L21:
 281:src/stm32f1xx_hal_can.c ****   }
 252              		.loc 1 281 0
 253 00e8 0120     		movs	r0, #1	@ <retval>,
 450:src/stm32f1xx_hal_can.c **** }
 254              		.loc 1 450 0
 255 00ea 38BD     		pop	{r3, r4, r5, pc}	@
 256              	.LVL9:
 257              	.L8:
 363:src/stm32f1xx_hal_can.c ****     {
 258              		.loc 1 363 0
 259 00ec FFF7FEFF 		bl	HAL_GetTick	@
 260              	.LVL10:
 261 00f0 401B     		subs	r0, r0, r5	@ tmp181,, tickstart
 262 00f2 0A28     		cmp	r0, #10	@ tmp181,
 263 00f4 A1D9     		bls	.L7	@,
 264 00f6 F0E7     		b	.L30	@
 265              		.cfi_endproc
 266              	.LFE65:
ARM GAS  /tmp/ccDRaG8a.s 			page 14


 267              		.size	HAL_CAN_Init, .-HAL_CAN_Init
 268              		.align	1
 269              		.weak	HAL_CAN_MspDeInit
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 273              		.fpu softvfp
 274              		.type	HAL_CAN_MspDeInit, %function
 275              	HAL_CAN_MspDeInit:
 276              	.LFB127:
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 280              		@ link register save eliminated.
 281 00f8 7047     		bx	lr	@
 282              		.cfi_endproc
 283              	.LFE127:
 284              		.size	HAL_CAN_MspDeInit, .-HAL_CAN_MspDeInit
 285              		.align	1
 286              		.global	HAL_CAN_ConfigFilter
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 290              		.fpu softvfp
 291              		.type	HAL_CAN_ConfigFilter, %function
 292              	HAL_CAN_ConfigFilter:
 293              	.LFB69:
 451:src/stm32f1xx_hal_can.c **** 
 452:src/stm32f1xx_hal_can.c **** /**
 453:src/stm32f1xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
 454:src/stm32f1xx_hal_can.c ****   *         reset values.
 455:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 456:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 457:src/stm32f1xx_hal_can.c ****   * @retval HAL status
 458:src/stm32f1xx_hal_can.c ****   */
 459:src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 460:src/stm32f1xx_hal_can.c **** {
 461:src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 462:src/stm32f1xx_hal_can.c ****   if (hcan == NULL)
 463:src/stm32f1xx_hal_can.c ****   {
 464:src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 465:src/stm32f1xx_hal_can.c ****   }
 466:src/stm32f1xx_hal_can.c **** 
 467:src/stm32f1xx_hal_can.c ****   /* Check the parameters */
 468:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 469:src/stm32f1xx_hal_can.c **** 
 470:src/stm32f1xx_hal_can.c ****   /* Stop the CAN module */
 471:src/stm32f1xx_hal_can.c ****   (void)HAL_CAN_Stop(hcan);
 472:src/stm32f1xx_hal_can.c **** 
 473:src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 474:src/stm32f1xx_hal_can.c ****   if (hcan->MspDeInitCallback == NULL)
 475:src/stm32f1xx_hal_can.c ****   {
 476:src/stm32f1xx_hal_can.c ****     hcan->MspDeInitCallback = HAL_CAN_MspDeInit; /* Legacy weak MspDeInit */
 477:src/stm32f1xx_hal_can.c ****   }
 478:src/stm32f1xx_hal_can.c **** 
 479:src/stm32f1xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 480:src/stm32f1xx_hal_can.c ****   hcan->MspDeInitCallback(hcan);
ARM GAS  /tmp/ccDRaG8a.s 			page 15


 481:src/stm32f1xx_hal_can.c **** 
 482:src/stm32f1xx_hal_can.c **** #else
 483:src/stm32f1xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 484:src/stm32f1xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
 485:src/stm32f1xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 486:src/stm32f1xx_hal_can.c **** 
 487:src/stm32f1xx_hal_can.c ****   /* Reset the CAN peripheral */
 488:src/stm32f1xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 489:src/stm32f1xx_hal_can.c **** 
 490:src/stm32f1xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 491:src/stm32f1xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 492:src/stm32f1xx_hal_can.c **** 
 493:src/stm32f1xx_hal_can.c ****   /* Change CAN state */
 494:src/stm32f1xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 495:src/stm32f1xx_hal_can.c **** 
 496:src/stm32f1xx_hal_can.c ****   /* Return function status */
 497:src/stm32f1xx_hal_can.c ****   return HAL_OK;
 498:src/stm32f1xx_hal_can.c **** }
 499:src/stm32f1xx_hal_can.c **** 
 500:src/stm32f1xx_hal_can.c **** /**
 501:src/stm32f1xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 502:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 503:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 504:src/stm32f1xx_hal_can.c ****   * @retval None
 505:src/stm32f1xx_hal_can.c ****   */
 506:src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 507:src/stm32f1xx_hal_can.c **** {
 508:src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 509:src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 510:src/stm32f1xx_hal_can.c **** 
 511:src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 512:src/stm32f1xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 513:src/stm32f1xx_hal_can.c ****    */
 514:src/stm32f1xx_hal_can.c **** }
 515:src/stm32f1xx_hal_can.c **** 
 516:src/stm32f1xx_hal_can.c **** /**
 517:src/stm32f1xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 518:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 519:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 520:src/stm32f1xx_hal_can.c ****   * @retval None
 521:src/stm32f1xx_hal_can.c ****   */
 522:src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 523:src/stm32f1xx_hal_can.c **** {
 524:src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 525:src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 526:src/stm32f1xx_hal_can.c **** 
 527:src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 528:src/stm32f1xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 529:src/stm32f1xx_hal_can.c ****    */
 530:src/stm32f1xx_hal_can.c **** }
 531:src/stm32f1xx_hal_can.c **** 
 532:src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 533:src/stm32f1xx_hal_can.c **** /**
 534:src/stm32f1xx_hal_can.c ****   * @brief  Register a CAN CallBack.
 535:src/stm32f1xx_hal_can.c ****   *         To be used instead of the weak predefined callback
 536:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 537:src/stm32f1xx_hal_can.c ****   *         the configuration information for CAN module
ARM GAS  /tmp/ccDRaG8a.s 			page 16


 538:src/stm32f1xx_hal_can.c ****   * @param  CallbackID ID of the callback to be registered
 539:src/stm32f1xx_hal_can.c ****   *         This parameter can be one of the following values:
 540:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CALLBACK_CB_ID Tx Mailbox 0 Complete callback 
 541:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CALLBACK_CB_ID Tx Mailbox 1 Complete callback 
 542:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CALLBACK_CB_ID Tx Mailbox 2 Complete callback 
 543:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CALLBACK_CB_ID Tx Mailbox 0 Abort callback ID
 544:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CALLBACK_CB_ID Tx Mailbox 1 Abort callback ID
 545:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CALLBACK_CB_ID Tx Mailbox 2 Abort callback ID
 546:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CALLBACK_CB_ID Rx Fifo 0 message pending callb
 547:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CALLBACK_CB_ID Rx Fifo 0 full callback ID
 548:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSGPENDING_CALLBACK_CB_ID Rx Fifo 1 message pending callba
 549:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CALLBACK_CB_ID Rx Fifo 1 full callback ID
 550:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CALLBACK_CB_ID Sleep callback ID
 551:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CALLBACK_CB_ID Wake Up from Rx message callback 
 552:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CALLBACK_CB_ID Error callback ID
 553:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 554:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 555:src/stm32f1xx_hal_can.c ****   * @param  pCallback pointer to the Callback function
 556:src/stm32f1xx_hal_can.c ****   * @retval HAL status
 557:src/stm32f1xx_hal_can.c ****   */
 558:src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Callb
 559:src/stm32f1xx_hal_can.c **** {
 560:src/stm32f1xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 561:src/stm32f1xx_hal_can.c **** 
 562:src/stm32f1xx_hal_can.c ****   if (pCallback == NULL)
 563:src/stm32f1xx_hal_can.c ****   {
 564:src/stm32f1xx_hal_can.c ****     /* Update the error code */
 565:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 566:src/stm32f1xx_hal_can.c **** 
 567:src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 568:src/stm32f1xx_hal_can.c ****   }
 569:src/stm32f1xx_hal_can.c **** 
 570:src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 571:src/stm32f1xx_hal_can.c ****   {
 572:src/stm32f1xx_hal_can.c ****     switch (CallbackID)
 573:src/stm32f1xx_hal_can.c ****     {
 574:src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 575:src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = pCallback;
 576:src/stm32f1xx_hal_can.c ****         break;
 577:src/stm32f1xx_hal_can.c **** 
 578:src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 579:src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = pCallback;
 580:src/stm32f1xx_hal_can.c ****         break;
 581:src/stm32f1xx_hal_can.c **** 
 582:src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 583:src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = pCallback;
 584:src/stm32f1xx_hal_can.c ****         break;
 585:src/stm32f1xx_hal_can.c **** 
 586:src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 587:src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = pCallback;
 588:src/stm32f1xx_hal_can.c ****         break;
 589:src/stm32f1xx_hal_can.c **** 
 590:src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 591:src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = pCallback;
 592:src/stm32f1xx_hal_can.c ****         break;
 593:src/stm32f1xx_hal_can.c **** 
 594:src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
ARM GAS  /tmp/ccDRaG8a.s 			page 17


 595:src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = pCallback;
 596:src/stm32f1xx_hal_can.c ****         break;
 597:src/stm32f1xx_hal_can.c **** 
 598:src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 599:src/stm32f1xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = pCallback;
 600:src/stm32f1xx_hal_can.c ****         break;
 601:src/stm32f1xx_hal_can.c **** 
 602:src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
 603:src/stm32f1xx_hal_can.c ****         hcan->RxFifo0FullCallback = pCallback;
 604:src/stm32f1xx_hal_can.c ****         break;
 605:src/stm32f1xx_hal_can.c **** 
 606:src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 607:src/stm32f1xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = pCallback;
 608:src/stm32f1xx_hal_can.c ****         break;
 609:src/stm32f1xx_hal_can.c **** 
 610:src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 611:src/stm32f1xx_hal_can.c ****         hcan->RxFifo1FullCallback = pCallback;
 612:src/stm32f1xx_hal_can.c ****         break;
 613:src/stm32f1xx_hal_can.c **** 
 614:src/stm32f1xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 615:src/stm32f1xx_hal_can.c ****         hcan->SleepCallback = pCallback;
 616:src/stm32f1xx_hal_can.c ****         break;
 617:src/stm32f1xx_hal_can.c **** 
 618:src/stm32f1xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 619:src/stm32f1xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = pCallback;
 620:src/stm32f1xx_hal_can.c ****         break;
 621:src/stm32f1xx_hal_can.c **** 
 622:src/stm32f1xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
 623:src/stm32f1xx_hal_can.c ****         hcan->ErrorCallback = pCallback;
 624:src/stm32f1xx_hal_can.c ****         break;
 625:src/stm32f1xx_hal_can.c **** 
 626:src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 627:src/stm32f1xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
 628:src/stm32f1xx_hal_can.c ****         break;
 629:src/stm32f1xx_hal_can.c **** 
 630:src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 631:src/stm32f1xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 632:src/stm32f1xx_hal_can.c ****         break;
 633:src/stm32f1xx_hal_can.c **** 
 634:src/stm32f1xx_hal_can.c ****       default :
 635:src/stm32f1xx_hal_can.c ****         /* Update the error code */
 636:src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 637:src/stm32f1xx_hal_can.c **** 
 638:src/stm32f1xx_hal_can.c ****         /* Return error status */
 639:src/stm32f1xx_hal_can.c ****         status =  HAL_ERROR;
 640:src/stm32f1xx_hal_can.c ****         break;
 641:src/stm32f1xx_hal_can.c ****     }
 642:src/stm32f1xx_hal_can.c ****   }
 643:src/stm32f1xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 644:src/stm32f1xx_hal_can.c ****   {
 645:src/stm32f1xx_hal_can.c ****     switch (CallbackID)
 646:src/stm32f1xx_hal_can.c ****     {
 647:src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 648:src/stm32f1xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
 649:src/stm32f1xx_hal_can.c ****         break;
 650:src/stm32f1xx_hal_can.c **** 
 651:src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
ARM GAS  /tmp/ccDRaG8a.s 			page 18


 652:src/stm32f1xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 653:src/stm32f1xx_hal_can.c ****         break;
 654:src/stm32f1xx_hal_can.c **** 
 655:src/stm32f1xx_hal_can.c ****       default :
 656:src/stm32f1xx_hal_can.c ****         /* Update the error code */
 657:src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 658:src/stm32f1xx_hal_can.c **** 
 659:src/stm32f1xx_hal_can.c ****         /* Return error status */
 660:src/stm32f1xx_hal_can.c ****         status =  HAL_ERROR;
 661:src/stm32f1xx_hal_can.c ****         break;
 662:src/stm32f1xx_hal_can.c ****     }
 663:src/stm32f1xx_hal_can.c ****   }
 664:src/stm32f1xx_hal_can.c ****   else
 665:src/stm32f1xx_hal_can.c ****   {
 666:src/stm32f1xx_hal_can.c ****     /* Update the error code */
 667:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 668:src/stm32f1xx_hal_can.c **** 
 669:src/stm32f1xx_hal_can.c ****     /* Return error status */
 670:src/stm32f1xx_hal_can.c ****     status =  HAL_ERROR;
 671:src/stm32f1xx_hal_can.c ****   }
 672:src/stm32f1xx_hal_can.c **** 
 673:src/stm32f1xx_hal_can.c ****   return status;
 674:src/stm32f1xx_hal_can.c **** }
 675:src/stm32f1xx_hal_can.c **** 
 676:src/stm32f1xx_hal_can.c **** /**
 677:src/stm32f1xx_hal_can.c ****   * @brief  Unregister a CAN CallBack.
 678:src/stm32f1xx_hal_can.c ****   *         CAN callabck is redirected to the weak predefined callback
 679:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 680:src/stm32f1xx_hal_can.c ****   *         the configuration information for CAN module
 681:src/stm32f1xx_hal_can.c ****   * @param  CallbackID ID of the callback to be unregistered
 682:src/stm32f1xx_hal_can.c ****   *         This parameter can be one of the following values:
 683:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CALLBACK_CB_ID Tx Mailbox 0 Complete callback 
 684:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CALLBACK_CB_ID Tx Mailbox 1 Complete callback 
 685:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CALLBACK_CB_ID Tx Mailbox 2 Complete callback 
 686:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CALLBACK_CB_ID Tx Mailbox 0 Abort callback ID
 687:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CALLBACK_CB_ID Tx Mailbox 1 Abort callback ID
 688:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CALLBACK_CB_ID Tx Mailbox 2 Abort callback ID
 689:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CALLBACK_CB_ID Rx Fifo 0 message pending callb
 690:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CALLBACK_CB_ID Rx Fifo 0 full callback ID
 691:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSGPENDING_CALLBACK_CB_ID Rx Fifo 1 message pending callba
 692:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CALLBACK_CB_ID Rx Fifo 1 full callback ID
 693:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CALLBACK_CB_ID Sleep callback ID
 694:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CALLBACK_CB_ID Wake Up from Rx message callback 
 695:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CALLBACK_CB_ID Error callback ID
 696:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 697:src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 698:src/stm32f1xx_hal_can.c ****   * @retval HAL status
 699:src/stm32f1xx_hal_can.c ****   */
 700:src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_UnRegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Cal
 701:src/stm32f1xx_hal_can.c **** {
 702:src/stm32f1xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 703:src/stm32f1xx_hal_can.c **** 
 704:src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 705:src/stm32f1xx_hal_can.c ****   {
 706:src/stm32f1xx_hal_can.c ****     switch (CallbackID)
 707:src/stm32f1xx_hal_can.c ****     {
 708:src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
ARM GAS  /tmp/ccDRaG8a.s 			page 19


 709:src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = HAL_CAN_TxMailbox0CompleteCallback;
 710:src/stm32f1xx_hal_can.c ****         break;
 711:src/stm32f1xx_hal_can.c **** 
 712:src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 713:src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = HAL_CAN_TxMailbox1CompleteCallback;
 714:src/stm32f1xx_hal_can.c ****         break;
 715:src/stm32f1xx_hal_can.c **** 
 716:src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 717:src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = HAL_CAN_TxMailbox2CompleteCallback;
 718:src/stm32f1xx_hal_can.c ****         break;
 719:src/stm32f1xx_hal_can.c **** 
 720:src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 721:src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = HAL_CAN_TxMailbox0AbortCallback;
 722:src/stm32f1xx_hal_can.c ****         break;
 723:src/stm32f1xx_hal_can.c **** 
 724:src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 725:src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = HAL_CAN_TxMailbox1AbortCallback;
 726:src/stm32f1xx_hal_can.c ****         break;
 727:src/stm32f1xx_hal_can.c **** 
 728:src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 729:src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = HAL_CAN_TxMailbox2AbortCallback;
 730:src/stm32f1xx_hal_can.c ****         break;
 731:src/stm32f1xx_hal_can.c **** 
 732:src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 733:src/stm32f1xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = HAL_CAN_RxFifo0MsgPendingCallback;
 734:src/stm32f1xx_hal_can.c ****         break;
 735:src/stm32f1xx_hal_can.c **** 
 736:src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
 737:src/stm32f1xx_hal_can.c ****         hcan->RxFifo0FullCallback = HAL_CAN_RxFifo0FullCallback;
 738:src/stm32f1xx_hal_can.c ****         break;
 739:src/stm32f1xx_hal_can.c **** 
 740:src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 741:src/stm32f1xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = HAL_CAN_RxFifo1MsgPendingCallback;
 742:src/stm32f1xx_hal_can.c ****         break;
 743:src/stm32f1xx_hal_can.c **** 
 744:src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 745:src/stm32f1xx_hal_can.c ****         hcan->RxFifo1FullCallback = HAL_CAN_RxFifo1FullCallback;
 746:src/stm32f1xx_hal_can.c ****         break;
 747:src/stm32f1xx_hal_can.c **** 
 748:src/stm32f1xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 749:src/stm32f1xx_hal_can.c ****         hcan->SleepCallback = HAL_CAN_SleepCallback;
 750:src/stm32f1xx_hal_can.c ****         break;
 751:src/stm32f1xx_hal_can.c **** 
 752:src/stm32f1xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 753:src/stm32f1xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = HAL_CAN_WakeUpFromRxMsgCallback;
 754:src/stm32f1xx_hal_can.c ****         break;
 755:src/stm32f1xx_hal_can.c **** 
 756:src/stm32f1xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
 757:src/stm32f1xx_hal_can.c ****         hcan->ErrorCallback = HAL_CAN_ErrorCallback;
 758:src/stm32f1xx_hal_can.c ****         break;
 759:src/stm32f1xx_hal_can.c **** 
 760:src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 761:src/stm32f1xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 762:src/stm32f1xx_hal_can.c ****         break;
 763:src/stm32f1xx_hal_can.c **** 
 764:src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 765:src/stm32f1xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
ARM GAS  /tmp/ccDRaG8a.s 			page 20


 766:src/stm32f1xx_hal_can.c ****         break;
 767:src/stm32f1xx_hal_can.c **** 
 768:src/stm32f1xx_hal_can.c ****       default :
 769:src/stm32f1xx_hal_can.c ****         /* Update the error code */
 770:src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 771:src/stm32f1xx_hal_can.c **** 
 772:src/stm32f1xx_hal_can.c ****         /* Return error status */
 773:src/stm32f1xx_hal_can.c ****         status =  HAL_ERROR;
 774:src/stm32f1xx_hal_can.c ****         break;
 775:src/stm32f1xx_hal_can.c ****     }
 776:src/stm32f1xx_hal_can.c ****   }
 777:src/stm32f1xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 778:src/stm32f1xx_hal_can.c ****   {
 779:src/stm32f1xx_hal_can.c ****     switch (CallbackID)
 780:src/stm32f1xx_hal_can.c ****     {
 781:src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 782:src/stm32f1xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 783:src/stm32f1xx_hal_can.c ****         break;
 784:src/stm32f1xx_hal_can.c **** 
 785:src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 786:src/stm32f1xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 787:src/stm32f1xx_hal_can.c ****         break;
 788:src/stm32f1xx_hal_can.c **** 
 789:src/stm32f1xx_hal_can.c ****       default :
 790:src/stm32f1xx_hal_can.c ****         /* Update the error code */
 791:src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 792:src/stm32f1xx_hal_can.c **** 
 793:src/stm32f1xx_hal_can.c ****         /* Return error status */
 794:src/stm32f1xx_hal_can.c ****         status =  HAL_ERROR;
 795:src/stm32f1xx_hal_can.c ****         break;
 796:src/stm32f1xx_hal_can.c ****     }
 797:src/stm32f1xx_hal_can.c ****   }
 798:src/stm32f1xx_hal_can.c ****   else
 799:src/stm32f1xx_hal_can.c ****   {
 800:src/stm32f1xx_hal_can.c ****     /* Update the error code */
 801:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 802:src/stm32f1xx_hal_can.c **** 
 803:src/stm32f1xx_hal_can.c ****     /* Return error status */
 804:src/stm32f1xx_hal_can.c ****     status =  HAL_ERROR;
 805:src/stm32f1xx_hal_can.c ****   }
 806:src/stm32f1xx_hal_can.c **** 
 807:src/stm32f1xx_hal_can.c ****   return status;
 808:src/stm32f1xx_hal_can.c **** }
 809:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 810:src/stm32f1xx_hal_can.c **** 
 811:src/stm32f1xx_hal_can.c **** /**
 812:src/stm32f1xx_hal_can.c ****   * @}
 813:src/stm32f1xx_hal_can.c ****   */
 814:src/stm32f1xx_hal_can.c **** 
 815:src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 816:src/stm32f1xx_hal_can.c ****  *  @brief    Configuration functions.
 817:src/stm32f1xx_hal_can.c ****  *
 818:src/stm32f1xx_hal_can.c **** @verbatim
 819:src/stm32f1xx_hal_can.c ****   ==============================================================================
 820:src/stm32f1xx_hal_can.c ****               ##### Configuration functions #####
 821:src/stm32f1xx_hal_can.c ****   ==============================================================================
 822:src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
ARM GAS  /tmp/ccDRaG8a.s 			page 21


 823:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 824:src/stm32f1xx_hal_can.c **** 
 825:src/stm32f1xx_hal_can.c **** @endverbatim
 826:src/stm32f1xx_hal_can.c ****   * @{
 827:src/stm32f1xx_hal_can.c ****   */
 828:src/stm32f1xx_hal_can.c **** 
 829:src/stm32f1xx_hal_can.c **** /**
 830:src/stm32f1xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 831:src/stm32f1xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 832:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 833:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 834:src/stm32f1xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 835:src/stm32f1xx_hal_can.c ****   *         contains the filter configuration information.
 836:src/stm32f1xx_hal_can.c ****   * @retval None
 837:src/stm32f1xx_hal_can.c ****   */
 838:src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
 839:src/stm32f1xx_hal_can.c **** {
 294              		.loc 1 839 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 0, uses_anonymous_args = 0
 298              	.LVL11:
 840:src/stm32f1xx_hal_can.c ****   uint32_t filternbrbitpos;
 841:src/stm32f1xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
 842:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 299              		.loc 1 842 0
 300 00fa 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2	@ hcan_9(D)->State, hcan_9(D)->State
 301              	.LVL12:
 839:src/stm32f1xx_hal_can.c ****   uint32_t filternbrbitpos;
 302              		.loc 1 839 0
 303 00fe 70B5     		push	{r4, r5, r6, lr}	@
 304              	.LCFI1:
 305              		.cfi_def_cfa_offset 16
 306              		.cfi_offset 4, -16
 307              		.cfi_offset 5, -12
 308              		.cfi_offset 6, -8
 309              		.cfi_offset 14, -4
 843:src/stm32f1xx_hal_can.c **** 
 844:src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 310              		.loc 1 844 0
 311 0100 013B     		subs	r3, r3, #1	@ tmp174, hcan_9(D)->State,
 312              	.LVL13:
 313 0102 012B     		cmp	r3, #1	@ tmp174,
 314 0104 5FD8     		bhi	.L33	@,
 845:src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 846:src/stm32f1xx_hal_can.c ****   {
 847:src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 848:src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 849:src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 850:src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 851:src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 852:src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 853:src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 854:src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 855:src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 856:src/stm32f1xx_hal_can.c **** 
 857:src/stm32f1xx_hal_can.c **** #if   defined(CAN2)
ARM GAS  /tmp/ccDRaG8a.s 			page 22


 858:src/stm32f1xx_hal_can.c ****     /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 859:src/stm32f1xx_hal_can.c ****     /* Select master instance to access the filter banks */
 860:src/stm32f1xx_hal_can.c ****     can_ip = CAN1;
 861:src/stm32f1xx_hal_can.c **** 
 862:src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 863:src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 864:src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 865:src/stm32f1xx_hal_can.c **** #else
 866:src/stm32f1xx_hal_can.c ****     /* CAN1 is single instance with 14 dedicated filters banks */
 867:src/stm32f1xx_hal_can.c **** 
 868:src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 869:src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 870:src/stm32f1xx_hal_can.c **** #endif
 871:src/stm32f1xx_hal_can.c **** 
 872:src/stm32f1xx_hal_can.c ****     /* Initialisation mode for the filter */
 873:src/stm32f1xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 874:src/stm32f1xx_hal_can.c **** 
 875:src/stm32f1xx_hal_can.c **** #if   defined(CAN2)
 876:src/stm32f1xx_hal_can.c ****     /* Select the start filter number of CAN2 slave instance */
 877:src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 878:src/stm32f1xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 879:src/stm32f1xx_hal_can.c **** 
 880:src/stm32f1xx_hal_can.c **** #endif
 881:src/stm32f1xx_hal_can.c ****     /* Convert filter number into bit position */
 882:src/stm32f1xx_hal_can.c ****     filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 315              		.loc 1 882 0
 316 0106 0124     		movs	r4, #1	@ tmp176,
 841:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 317              		.loc 1 841 0
 318 0108 0368     		ldr	r3, [r0]	@ can_ip, hcan_9(D)->Instance
 319              		.loc 1 882 0
 320 010a 4869     		ldr	r0, [r1, #20]	@ _17, sFilterConfig_16(D)->FilterBank
 321              	.LVL14:
 873:src/stm32f1xx_hal_can.c **** 
 322              		.loc 1 873 0
 323 010c D3F80022 		ldr	r2, [r3, #512]	@ _13, can_ip_10->FMR
 324 0110 42F00102 		orr	r2, r2, #1	@ _14, _13,
 325 0114 C3F80022 		str	r2, [r3, #512]	@ _14, can_ip_10->FMR
 326              		.loc 1 882 0
 327 0118 00F01F02 		and	r2, r0, #31	@ tmp175, _17,
 328 011c 04FA02F2 		lsl	r2, r4, r2	@ filternbrbitpos, tmp176, tmp175
 329              	.LVL15:
 883:src/stm32f1xx_hal_can.c **** 
 884:src/stm32f1xx_hal_can.c ****     /* Filter Deactivation */
 885:src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 330              		.loc 1 885 0
 331 0120 D443     		mvns	r4, r2	@ _21, filternbrbitpos
 332 0122 D3F81C52 		ldr	r5, [r3, #540]	@ _20, can_ip_10->FA1R
 333 0126 2540     		ands	r5, r5, r4	@, _22, _20, _21
 334 0128 C3F81C52 		str	r5, [r3, #540]	@ _22, can_ip_10->FA1R
 886:src/stm32f1xx_hal_can.c **** 
 887:src/stm32f1xx_hal_can.c ****     /* Filter Scale */
 888:src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 335              		.loc 1 888 0
 336 012c CD69     		ldr	r5, [r1, #28]	@ _24, sFilterConfig_16(D)->FilterScale
 337 012e 85BB     		cbnz	r5, .L34	@ _24,
 889:src/stm32f1xx_hal_can.c ****     {
ARM GAS  /tmp/ccDRaG8a.s 			page 23


 890:src/stm32f1xx_hal_can.c ****       /* 16-bit scale for the filter */
 891:src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 338              		.loc 1 891 0
 339 0130 D3F80C52 		ldr	r5, [r3, #524]	@ _25, can_ip_10->FS1R
 892:src/stm32f1xx_hal_can.c **** 
 893:src/stm32f1xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 894:src/stm32f1xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 895:src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 896:src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 340              		.loc 1 896 0
 341 0134 CE68     		ldr	r6, [r1, #12]	@ sFilterConfig_16(D)->FilterMaskIdLow, sFilterConfig_16(D)->FilterMaskIdLow
 891:src/stm32f1xx_hal_can.c **** 
 342              		.loc 1 891 0
 343 0136 2540     		ands	r5, r5, r4	@, _26, _25, _21
 344 0138 C3F80C52 		str	r5, [r3, #524]	@ _26, can_ip_10->FS1R
 897:src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 345              		.loc 1 897 0
 346 013c 8D88     		ldrh	r5, [r1, #4]	@ tmp179, sFilterConfig_16(D)->FilterIdLow
 347 013e 03EBC000 		add	r0, r3, r0, lsl #3	@ _85, can_ip, _17,
 896:src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 348              		.loc 1 896 0
 349 0142 45EA0645 		orr	r5, r5, r6, lsl #16	@ _32, tmp179, sFilterConfig_16(D)->FilterMaskIdLow,
 895:src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 350              		.loc 1 895 0
 351 0146 C0F84052 		str	r5, [r0, #576]	@ _32, MEM[(struct CAN_TypeDef *)_85 + 576B]
 898:src/stm32f1xx_hal_can.c **** 
 899:src/stm32f1xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 900:src/stm32f1xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 901:src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 902:src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 352              		.loc 1 902 0
 353 014a 8E68     		ldr	r6, [r1, #8]	@ sFilterConfig_16(D)->FilterMaskIdHigh, sFilterConfig_16(D)->FilterMaskIdHigh
 903:src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 354              		.loc 1 903 0
 355 014c 0D88     		ldrh	r5, [r1]	@ tmp185, sFilterConfig_16(D)->FilterIdHigh
 356              	.L42:
 904:src/stm32f1xx_hal_can.c ****     }
 905:src/stm32f1xx_hal_can.c **** 
 906:src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 907:src/stm32f1xx_hal_can.c ****     {
 908:src/stm32f1xx_hal_can.c ****       /* 32-bit scale for the filter */
 909:src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 910:src/stm32f1xx_hal_can.c **** 
 911:src/stm32f1xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
 912:src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 913:src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 914:src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 915:src/stm32f1xx_hal_can.c **** 
 916:src/stm32f1xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
 917:src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 918:src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 357              		.loc 1 918 0
 358 014e 45EA0645 		orr	r5, r5, r6, lsl #16	@ _53, tmp196, sFilterConfig_16(D)->FilterMaskIdHigh,
 917:src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 359              		.loc 1 917 0
 360 0152 C0F84452 		str	r5, [r0, #580]	@ _53,
 361              	.L35:
ARM GAS  /tmp/ccDRaG8a.s 			page 24


 919:src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 920:src/stm32f1xx_hal_can.c ****     }
 921:src/stm32f1xx_hal_can.c **** 
 922:src/stm32f1xx_hal_can.c ****     /* Filter Mode */
 923:src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 362              		.loc 1 923 0
 363 0156 8869     		ldr	r0, [r1, #24]	@ sFilterConfig_16(D)->FilterMode, sFilterConfig_16(D)->FilterMode
 364 0158 68BB     		cbnz	r0, .L36	@ sFilterConfig_16(D)->FilterMode,
 924:src/stm32f1xx_hal_can.c ****     {
 925:src/stm32f1xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 926:src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 365              		.loc 1 926 0
 366 015a D3F80402 		ldr	r0, [r3, #516]	@ _56,
 367 015e 2040     		ands	r0, r0, r4	@, _57, _56, _21
 368              	.L43:
 927:src/stm32f1xx_hal_can.c ****     }
 928:src/stm32f1xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 929:src/stm32f1xx_hal_can.c ****     {
 930:src/stm32f1xx_hal_can.c ****       /* Identifier list mode for the filter*/
 931:src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 369              		.loc 1 931 0
 370 0160 C3F80402 		str	r0, [r3, #516]	@ _60,
 932:src/stm32f1xx_hal_can.c ****     }
 933:src/stm32f1xx_hal_can.c **** 
 934:src/stm32f1xx_hal_can.c ****     /* Filter FIFO assignment */
 935:src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 371              		.loc 1 935 0
 372 0164 0869     		ldr	r0, [r1, #16]	@ sFilterConfig_16(D)->FilterFIFOAssignment, sFilterConfig_16(D)->FilterFIFOAssi
 373 0166 50BB     		cbnz	r0, .L38	@ sFilterConfig_16(D)->FilterFIFOAssignment,
 936:src/stm32f1xx_hal_can.c ****     {
 937:src/stm32f1xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
 938:src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 374              		.loc 1 938 0
 375 0168 D3F81402 		ldr	r0, [r3, #532]	@ _63,
 376 016c 2040     		ands	r0, r0, r4	@, _64, _63, _21
 377              	.L44:
 939:src/stm32f1xx_hal_can.c ****     }
 940:src/stm32f1xx_hal_can.c ****     else
 941:src/stm32f1xx_hal_can.c ****     {
 942:src/stm32f1xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 943:src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 378              		.loc 1 943 0
 379 016e C3F81402 		str	r0, [r3, #532]	@ _67,
 944:src/stm32f1xx_hal_can.c ****     }
 945:src/stm32f1xx_hal_can.c **** 
 946:src/stm32f1xx_hal_can.c ****     /* Filter activation */
 947:src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 380              		.loc 1 947 0
 381 0172 096A     		ldr	r1, [r1, #32]	@ sFilterConfig_16(D)->FilterActivation, sFilterConfig_16(D)->FilterActivation
 382              	.LVL16:
 948:src/stm32f1xx_hal_can.c ****     {
 949:src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 950:src/stm32f1xx_hal_can.c ****     }
 951:src/stm32f1xx_hal_can.c **** 
 952:src/stm32f1xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 953:src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 954:src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccDRaG8a.s 			page 25


 955:src/stm32f1xx_hal_can.c ****     /* Return function status */
 956:src/stm32f1xx_hal_can.c ****     return HAL_OK;
 383              		.loc 1 956 0
 384 0174 0020     		movs	r0, #0	@ <retval>,
 947:src/stm32f1xx_hal_can.c ****     {
 385              		.loc 1 947 0
 386 0176 0129     		cmp	r1, #1	@ sFilterConfig_16(D)->FilterActivation,
 949:src/stm32f1xx_hal_can.c ****     }
 387              		.loc 1 949 0
 388 0178 02BF     		ittt	eq
 389 017a D3F81C12 		ldreq	r1, [r3, #540]	@ _70, can_ip_10->FA1R
 390 017e 0A43     		orreq	r2, r2, r1	@ _71, filternbrbitpos, _70
 391              	.LVL17:
 392 0180 C3F81C22 		streq	r2, [r3, #540]	@ _71, can_ip_10->FA1R
 953:src/stm32f1xx_hal_can.c **** 
 393              		.loc 1 953 0
 394 0184 D3F80022 		ldr	r2, [r3, #512]	@ _73, can_ip_10->FMR
 395 0188 22F00102 		bic	r2, r2, #1	@ _74, _73,
 396 018c C3F80022 		str	r2, [r3, #512]	@ _74, can_ip_10->FMR
 397              		.loc 1 956 0
 398 0190 70BD     		pop	{r4, r5, r6, pc}	@
 399              	.LVL18:
 400              	.L34:
 906:src/stm32f1xx_hal_can.c ****     {
 401              		.loc 1 906 0
 402 0192 012D     		cmp	r5, #1	@ _24,
 403 0194 DFD1     		bne	.L35	@,
 909:src/stm32f1xx_hal_can.c **** 
 404              		.loc 1 909 0
 405 0196 D3F80C52 		ldr	r5, [r3, #524]	@ _40, can_ip_10->FS1R
 913:src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 406              		.loc 1 913 0
 407 019a 0E68     		ldr	r6, [r1]	@ sFilterConfig_16(D)->FilterIdHigh, sFilterConfig_16(D)->FilterIdHigh
 909:src/stm32f1xx_hal_can.c **** 
 408              		.loc 1 909 0
 409 019c 1543     		orrs	r5, r5, r2	@, _41, _40, filternbrbitpos
 410 019e C3F80C52 		str	r5, [r3, #524]	@ _41, can_ip_10->FS1R
 914:src/stm32f1xx_hal_can.c **** 
 411              		.loc 1 914 0
 412 01a2 8D88     		ldrh	r5, [r1, #4]	@ tmp190, sFilterConfig_16(D)->FilterIdLow
 413 01a4 03EBC000 		add	r0, r3, r0, lsl #3	@ _2, can_ip, _17,
 913:src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 414              		.loc 1 913 0
 415 01a8 45EA0645 		orr	r5, r5, r6, lsl #16	@ _47, tmp190, sFilterConfig_16(D)->FilterIdHigh,
 912:src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 416              		.loc 1 912 0
 417 01ac C0F84052 		str	r5, [r0, #576]	@ _47, MEM[(struct CAN_TypeDef *)_2 + 576B]
 918:src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 418              		.loc 1 918 0
 419 01b0 8E68     		ldr	r6, [r1, #8]	@ sFilterConfig_16(D)->FilterMaskIdHigh, sFilterConfig_16(D)->FilterMaskIdHigh
 919:src/stm32f1xx_hal_can.c ****     }
 420              		.loc 1 919 0
 421 01b2 8D89     		ldrh	r5, [r1, #12]	@ tmp196, sFilterConfig_16(D)->FilterMaskIdLow
 422 01b4 CBE7     		b	.L42	@
 423              	.L36:
 931:src/stm32f1xx_hal_can.c ****     }
 424              		.loc 1 931 0
ARM GAS  /tmp/ccDRaG8a.s 			page 26


 425 01b6 D3F80402 		ldr	r0, [r3, #516]	@ _59,
 426 01ba 1043     		orrs	r0, r0, r2	@, _60, _59, filternbrbitpos
 427 01bc D0E7     		b	.L43	@
 428              	.L38:
 943:src/stm32f1xx_hal_can.c ****     }
 429              		.loc 1 943 0
 430 01be D3F81402 		ldr	r0, [r3, #532]	@ _66,
 431 01c2 1043     		orrs	r0, r0, r2	@, _67, _66, filternbrbitpos
 432 01c4 D3E7     		b	.L44	@
 433              	.LVL19:
 434              	.L33:
 957:src/stm32f1xx_hal_can.c ****   }
 958:src/stm32f1xx_hal_can.c ****   else
 959:src/stm32f1xx_hal_can.c ****   {
 960:src/stm32f1xx_hal_can.c ****     /* Update error code */
 961:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 435              		.loc 1 961 0
 436 01c6 436A     		ldr	r3, [r0, #36]	@ _76, hcan_9(D)->ErrorCode
 437 01c8 43F48023 		orr	r3, r3, #262144	@ _77, _76,
 438 01cc 4362     		str	r3, [r0, #36]	@ _77, hcan_9(D)->ErrorCode
 962:src/stm32f1xx_hal_can.c **** 
 963:src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 439              		.loc 1 963 0
 440 01ce 0120     		movs	r0, #1	@ <retval>,
 441              	.LVL20:
 964:src/stm32f1xx_hal_can.c ****   }
 965:src/stm32f1xx_hal_can.c **** }
 442              		.loc 1 965 0
 443 01d0 70BD     		pop	{r4, r5, r6, pc}	@
 444              		.cfi_endproc
 445              	.LFE69:
 446              		.size	HAL_CAN_ConfigFilter, .-HAL_CAN_ConfigFilter
 447              		.align	1
 448              		.global	HAL_CAN_Start
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 452              		.fpu softvfp
 453              		.type	HAL_CAN_Start, %function
 454              	HAL_CAN_Start:
 455              	.LFB70:
 966:src/stm32f1xx_hal_can.c **** 
 967:src/stm32f1xx_hal_can.c **** /**
 968:src/stm32f1xx_hal_can.c ****   * @}
 969:src/stm32f1xx_hal_can.c ****   */
 970:src/stm32f1xx_hal_can.c **** 
 971:src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
 972:src/stm32f1xx_hal_can.c ****  *  @brief    Control functions
 973:src/stm32f1xx_hal_can.c ****  *
 974:src/stm32f1xx_hal_can.c **** @verbatim
 975:src/stm32f1xx_hal_can.c ****   ==============================================================================
 976:src/stm32f1xx_hal_can.c ****                       ##### Control functions #####
 977:src/stm32f1xx_hal_can.c ****   ==============================================================================
 978:src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 979:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
 980:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
 981:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
ARM GAS  /tmp/ccDRaG8a.s 			page 27


 982:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
 983:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
 984:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
 985:src/stm32f1xx_hal_can.c ****                                              and activate the corresponding
 986:src/stm32f1xx_hal_can.c ****                                              transmission request
 987:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
 988:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
 989:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
 990:src/stm32f1xx_hal_can.c ****                                              pending on the selected Tx mailbox
 991:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
 992:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
 993:src/stm32f1xx_hal_can.c **** 
 994:src/stm32f1xx_hal_can.c **** @endverbatim
 995:src/stm32f1xx_hal_can.c ****   * @{
 996:src/stm32f1xx_hal_can.c ****   */
 997:src/stm32f1xx_hal_can.c **** 
 998:src/stm32f1xx_hal_can.c **** /**
 999:src/stm32f1xx_hal_can.c ****   * @brief  Start the CAN module.
1000:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1001:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1002:src/stm32f1xx_hal_can.c ****   * @retval HAL status
1003:src/stm32f1xx_hal_can.c ****   */
1004:src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
1005:src/stm32f1xx_hal_can.c **** {
 456              		.loc 1 1005 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 0
 459              		@ frame_needed = 0, uses_anonymous_args = 0
 460              	.LVL21:
 461 01d2 38B5     		push	{r3, r4, r5, lr}	@
 462              	.LCFI2:
 463              		.cfi_def_cfa_offset 16
 464              		.cfi_offset 3, -16
 465              		.cfi_offset 4, -12
 466              		.cfi_offset 5, -8
 467              		.cfi_offset 14, -4
1006:src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
1007:src/stm32f1xx_hal_can.c **** 
1008:src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 468              		.loc 1 1008 0
 469 01d4 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2	@ hcan_5(D)->State, hcan_5(D)->State
1005:src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
 470              		.loc 1 1005 0
 471 01d8 0446     		mov	r4, r0	@ hcan, hcan
 472              		.loc 1 1008 0
 473 01da 012B     		cmp	r3, #1	@ hcan_5(D)->State,
 474 01dc 1FD1     		bne	.L46	@,
1009:src/stm32f1xx_hal_can.c ****   {
1010:src/stm32f1xx_hal_can.c ****     /* Change CAN peripheral state */
1011:src/stm32f1xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
 475              		.loc 1 1011 0
 476 01de 0223     		movs	r3, #2	@ tmp129,
1012:src/stm32f1xx_hal_can.c **** 
1013:src/stm32f1xx_hal_can.c ****     /* Request leave initialisation */
1014:src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 477              		.loc 1 1014 0
 478 01e0 0268     		ldr	r2, [r0]	@ _8, hcan_5(D)->Instance
ARM GAS  /tmp/ccDRaG8a.s 			page 28


1011:src/stm32f1xx_hal_can.c **** 
 479              		.loc 1 1011 0
 480 01e2 80F82030 		strb	r3, [r0, #32]	@ tmp129, hcan_5(D)->State
 481              		.loc 1 1014 0
 482 01e6 1368     		ldr	r3, [r2]	@ _9, _8->MCR
 483 01e8 23F00103 		bic	r3, r3, #1	@ _10, _9,
 484 01ec 1360     		str	r3, [r2]	@ _10, _8->MCR
1015:src/stm32f1xx_hal_can.c **** 
1016:src/stm32f1xx_hal_can.c ****     /* Get tick */
1017:src/stm32f1xx_hal_can.c ****     tickstart = HAL_GetTick();
 485              		.loc 1 1017 0
 486 01ee FFF7FEFF 		bl	HAL_GetTick	@
 487              	.LVL22:
 488 01f2 0546     		mov	r5, r0	@ tickstart,
 489              	.LVL23:
 490              	.L47:
1018:src/stm32f1xx_hal_can.c **** 
1019:src/stm32f1xx_hal_can.c ****     /* Wait the acknowledge */
1020:src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 491              		.loc 1 1020 0
 492 01f4 2368     		ldr	r3, [r4]	@ _14, hcan_5(D)->Instance
 493 01f6 5868     		ldr	r0, [r3, #4]	@ _15, _14->MSR
 494 01f8 10F00100 		ands	r0, r0, #1	@ tmp134, _15,
 495 01fc 01D1     		bne	.L49	@,
1021:src/stm32f1xx_hal_can.c ****     {
1022:src/stm32f1xx_hal_can.c ****       /* Check for the Timeout */
1023:src/stm32f1xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
1024:src/stm32f1xx_hal_can.c ****       {
1025:src/stm32f1xx_hal_can.c ****         /* Update error code */
1026:src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1027:src/stm32f1xx_hal_can.c **** 
1028:src/stm32f1xx_hal_can.c ****         /* Change CAN state */
1029:src/stm32f1xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
1030:src/stm32f1xx_hal_can.c **** 
1031:src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1032:src/stm32f1xx_hal_can.c ****       }
1033:src/stm32f1xx_hal_can.c ****     }
1034:src/stm32f1xx_hal_can.c **** 
1035:src/stm32f1xx_hal_can.c ****     /* Reset the CAN ErrorCode */
1036:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 496              		.loc 1 1036 0
 497 01fe 6062     		str	r0, [r4, #36]	@ tmp134, hcan_5(D)->ErrorCode
1037:src/stm32f1xx_hal_can.c **** 
1038:src/stm32f1xx_hal_can.c ****     /* Return function status */
1039:src/stm32f1xx_hal_can.c ****     return HAL_OK;
 498              		.loc 1 1039 0
 499 0200 38BD     		pop	{r3, r4, r5, pc}	@
 500              	.LVL24:
 501              	.L49:
1023:src/stm32f1xx_hal_can.c ****       {
 502              		.loc 1 1023 0
 503 0202 FFF7FEFF 		bl	HAL_GetTick	@
 504              	.LVL25:
 505 0206 401B     		subs	r0, r0, r5	@ tmp131,, tickstart
 506 0208 0A28     		cmp	r0, #10	@ tmp131,
 507 020a F3D9     		bls	.L47	@,
1026:src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccDRaG8a.s 			page 29


 508              		.loc 1 1026 0
 509 020c 636A     		ldr	r3, [r4, #36]	@ _20, hcan_5(D)->ErrorCode
 510 020e 43F40033 		orr	r3, r3, #131072	@ _21, _20,
 511 0212 6362     		str	r3, [r4, #36]	@ _21, hcan_5(D)->ErrorCode
1029:src/stm32f1xx_hal_can.c **** 
 512              		.loc 1 1029 0
 513 0214 0523     		movs	r3, #5	@ tmp132,
 514 0216 84F82030 		strb	r3, [r4, #32]	@ tmp132, hcan_5(D)->State
 515              	.LVL26:
 516              	.L51:
1040:src/stm32f1xx_hal_can.c ****   }
1041:src/stm32f1xx_hal_can.c ****   else
1042:src/stm32f1xx_hal_can.c ****   {
1043:src/stm32f1xx_hal_can.c ****     /* Update error code */
1044:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
1045:src/stm32f1xx_hal_can.c **** 
1046:src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 517              		.loc 1 1046 0
 518 021a 0120     		movs	r0, #1	@ <retval>,
1047:src/stm32f1xx_hal_can.c ****   }
1048:src/stm32f1xx_hal_can.c **** }
 519              		.loc 1 1048 0
 520 021c 38BD     		pop	{r3, r4, r5, pc}	@
 521              	.LVL27:
 522              	.L46:
1044:src/stm32f1xx_hal_can.c **** 
 523              		.loc 1 1044 0
 524 021e 436A     		ldr	r3, [r0, #36]	@ _25, hcan_5(D)->ErrorCode
 525 0220 43F40023 		orr	r3, r3, #524288	@ _26, _25,
 526 0224 4362     		str	r3, [r0, #36]	@ _26, hcan_5(D)->ErrorCode
 527 0226 F8E7     		b	.L51	@
 528              		.cfi_endproc
 529              	.LFE70:
 530              		.size	HAL_CAN_Start, .-HAL_CAN_Start
 531              		.align	1
 532              		.global	HAL_CAN_Stop
 533              		.syntax unified
 534              		.thumb
 535              		.thumb_func
 536              		.fpu softvfp
 537              		.type	HAL_CAN_Stop, %function
 538              	HAL_CAN_Stop:
 539              	.LFB71:
1049:src/stm32f1xx_hal_can.c **** 
1050:src/stm32f1xx_hal_can.c **** /**
1051:src/stm32f1xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
1052:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1053:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1054:src/stm32f1xx_hal_can.c ****   * @retval HAL status
1055:src/stm32f1xx_hal_can.c ****   */
1056:src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
1057:src/stm32f1xx_hal_can.c **** {
 540              		.loc 1 1057 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              	.LVL28:
ARM GAS  /tmp/ccDRaG8a.s 			page 30


 545 0228 38B5     		push	{r3, r4, r5, lr}	@
 546              	.LCFI3:
 547              		.cfi_def_cfa_offset 16
 548              		.cfi_offset 3, -16
 549              		.cfi_offset 4, -12
 550              		.cfi_offset 5, -8
 551              		.cfi_offset 14, -4
1058:src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
1059:src/stm32f1xx_hal_can.c **** 
1060:src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
 552              		.loc 1 1060 0
 553 022a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2	@ hcan_4(D)->State, hcan_4(D)->State
1057:src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
 554              		.loc 1 1057 0
 555 022e 0446     		mov	r4, r0	@ hcan, hcan
 556              		.loc 1 1060 0
 557 0230 022B     		cmp	r3, #2	@ hcan_4(D)->State,
 558 0232 22D1     		bne	.L53	@,
1061:src/stm32f1xx_hal_can.c ****   {
1062:src/stm32f1xx_hal_can.c ****     /* Request initialisation */
1063:src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 559              		.loc 1 1063 0
 560 0234 0268     		ldr	r2, [r0]	@ _6, hcan_4(D)->Instance
 561 0236 1368     		ldr	r3, [r2]	@ _8, _6->MCR
 562 0238 43F00103 		orr	r3, r3, #1	@ _9, _8,
 563 023c 1360     		str	r3, [r2]	@ _9, _6->MCR
1064:src/stm32f1xx_hal_can.c **** 
1065:src/stm32f1xx_hal_can.c ****     /* Get tick */
1066:src/stm32f1xx_hal_can.c ****     tickstart = HAL_GetTick();
 564              		.loc 1 1066 0
 565 023e FFF7FEFF 		bl	HAL_GetTick	@
 566              	.LVL29:
 567 0242 0546     		mov	r5, r0	@ tickstart,
 568              	.LVL30:
 569              	.L54:
1067:src/stm32f1xx_hal_can.c **** 
1068:src/stm32f1xx_hal_can.c ****     /* Wait the acknowledge */
1069:src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 570              		.loc 1 1069 0
 571 0244 2368     		ldr	r3, [r4]	@ _13, hcan_4(D)->Instance
 572 0246 5A68     		ldr	r2, [r3, #4]	@ _14, _13->MSR
 573 0248 D207     		lsls	r2, r2, #31	@, _14,
 574 024a 08D5     		bpl	.L56	@,
1070:src/stm32f1xx_hal_can.c ****     {
1071:src/stm32f1xx_hal_can.c ****       /* Check for the Timeout */
1072:src/stm32f1xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
1073:src/stm32f1xx_hal_can.c ****       {
1074:src/stm32f1xx_hal_can.c ****         /* Update error code */
1075:src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1076:src/stm32f1xx_hal_can.c **** 
1077:src/stm32f1xx_hal_can.c ****         /* Change CAN state */
1078:src/stm32f1xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
1079:src/stm32f1xx_hal_can.c **** 
1080:src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1081:src/stm32f1xx_hal_can.c ****       }
1082:src/stm32f1xx_hal_can.c ****     }
1083:src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccDRaG8a.s 			page 31


1084:src/stm32f1xx_hal_can.c ****     /* Exit from sleep mode */
1085:src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 575              		.loc 1 1085 0
 576 024c 1A68     		ldr	r2, [r3]	@ _21, _13->MCR
1086:src/stm32f1xx_hal_can.c **** 
1087:src/stm32f1xx_hal_can.c ****     /* Change CAN peripheral state */
1088:src/stm32f1xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
1089:src/stm32f1xx_hal_can.c **** 
1090:src/stm32f1xx_hal_can.c ****     /* Return function status */
1091:src/stm32f1xx_hal_can.c ****     return HAL_OK;
 577              		.loc 1 1091 0
 578 024e 0020     		movs	r0, #0	@ <retval>,
1085:src/stm32f1xx_hal_can.c **** 
 579              		.loc 1 1085 0
 580 0250 22F00202 		bic	r2, r2, #2	@ _22, _21,
 581 0254 1A60     		str	r2, [r3]	@ _22, _13->MCR
1088:src/stm32f1xx_hal_can.c **** 
 582              		.loc 1 1088 0
 583 0256 0123     		movs	r3, #1	@ tmp135,
 584 0258 84F82030 		strb	r3, [r4, #32]	@ tmp135, hcan_4(D)->State
 585              		.loc 1 1091 0
 586 025c 38BD     		pop	{r3, r4, r5, pc}	@
 587              	.LVL31:
 588              	.L56:
1072:src/stm32f1xx_hal_can.c ****       {
 589              		.loc 1 1072 0
 590 025e FFF7FEFF 		bl	HAL_GetTick	@
 591              	.LVL32:
 592 0262 401B     		subs	r0, r0, r5	@ tmp131,, tickstart
 593 0264 0A28     		cmp	r0, #10	@ tmp131,
 594 0266 EDD9     		bls	.L54	@,
 595              	.LVL33:
 596              	.LBB6:
 597              	.LBB7:
1075:src/stm32f1xx_hal_can.c **** 
 598              		.loc 1 1075 0
 599 0268 636A     		ldr	r3, [r4, #36]	@ _28, hcan_4(D)->ErrorCode
 600 026a 43F40033 		orr	r3, r3, #131072	@ _29, _28,
 601 026e 6362     		str	r3, [r4, #36]	@ _29, hcan_4(D)->ErrorCode
1078:src/stm32f1xx_hal_can.c **** 
 602              		.loc 1 1078 0
 603 0270 0523     		movs	r3, #5	@ tmp132,
 604 0272 84F82030 		strb	r3, [r4, #32]	@ tmp132, hcan_4(D)->State
 605              	.LVL34:
 606              	.L58:
 607              	.LBE7:
 608              	.LBE6:
1092:src/stm32f1xx_hal_can.c ****   }
1093:src/stm32f1xx_hal_can.c ****   else
1094:src/stm32f1xx_hal_can.c ****   {
1095:src/stm32f1xx_hal_can.c ****     /* Update error code */
1096:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
1097:src/stm32f1xx_hal_can.c **** 
1098:src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 609              		.loc 1 1098 0
 610 0276 0120     		movs	r0, #1	@ <retval>,
1099:src/stm32f1xx_hal_can.c ****   }
ARM GAS  /tmp/ccDRaG8a.s 			page 32


1100:src/stm32f1xx_hal_can.c **** }
 611              		.loc 1 1100 0
 612 0278 38BD     		pop	{r3, r4, r5, pc}	@
 613              	.LVL35:
 614              	.L53:
1096:src/stm32f1xx_hal_can.c **** 
 615              		.loc 1 1096 0
 616 027a 436A     		ldr	r3, [r0, #36]	@ _25, hcan_4(D)->ErrorCode
 617 027c 43F48013 		orr	r3, r3, #1048576	@ _26, _25,
 618 0280 4362     		str	r3, [r0, #36]	@ _26, hcan_4(D)->ErrorCode
 619 0282 F8E7     		b	.L58	@
 620              		.cfi_endproc
 621              	.LFE71:
 622              		.size	HAL_CAN_Stop, .-HAL_CAN_Stop
 623              		.align	1
 624              		.global	HAL_CAN_DeInit
 625              		.syntax unified
 626              		.thumb
 627              		.thumb_func
 628              		.fpu softvfp
 629              		.type	HAL_CAN_DeInit, %function
 630              	HAL_CAN_DeInit:
 631              	.LFB66:
 460:src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 632              		.loc 1 460 0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 636              	.LVL36:
 637 0284 10B5     		push	{r4, lr}	@
 638              	.LCFI4:
 639              		.cfi_def_cfa_offset 8
 640              		.cfi_offset 4, -8
 641              		.cfi_offset 14, -4
 462:src/stm32f1xx_hal_can.c ****   {
 642              		.loc 1 462 0
 643 0286 0446     		mov	r4, r0	@ hcan, hcan
 644 0288 70B1     		cbz	r0, .L61	@ hcan,
 471:src/stm32f1xx_hal_can.c **** 
 645              		.loc 1 471 0
 646 028a FFF7FEFF 		bl	HAL_CAN_Stop	@
 647              	.LVL37:
 484:src/stm32f1xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 648              		.loc 1 484 0
 649 028e 2046     		mov	r0, r4	@, hcan
 650 0290 FFF7FEFF 		bl	HAL_CAN_MspDeInit	@
 651              	.LVL38:
 491:src/stm32f1xx_hal_can.c **** 
 652              		.loc 1 491 0
 653 0294 0020     		movs	r0, #0	@ tmp115,
 488:src/stm32f1xx_hal_can.c **** 
 654              		.loc 1 488 0
 655 0296 2268     		ldr	r2, [r4]	@ _7, hcan_3(D)->Instance
 656 0298 1368     		ldr	r3, [r2]	@ _8, _7->MCR
 657 029a 43F40043 		orr	r3, r3, #32768	@ _9, _8,
 658 029e 1360     		str	r3, [r2]	@ _9, _7->MCR
 491:src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccDRaG8a.s 			page 33


 659              		.loc 1 491 0
 660 02a0 6062     		str	r0, [r4, #36]	@ tmp115, hcan_3(D)->ErrorCode
 494:src/stm32f1xx_hal_can.c **** 
 661              		.loc 1 494 0
 662 02a2 84F82000 		strb	r0, [r4, #32]	@ tmp115, hcan_3(D)->State
 497:src/stm32f1xx_hal_can.c **** }
 663              		.loc 1 497 0
 664 02a6 10BD     		pop	{r4, pc}	@
 665              	.LVL39:
 666              	.L61:
 464:src/stm32f1xx_hal_can.c ****   }
 667              		.loc 1 464 0
 668 02a8 0120     		movs	r0, #1	@ <retval>,
 669              	.LVL40:
 498:src/stm32f1xx_hal_can.c **** 
 670              		.loc 1 498 0
 671 02aa 10BD     		pop	{r4, pc}	@
 672              		.cfi_endproc
 673              	.LFE66:
 674              		.size	HAL_CAN_DeInit, .-HAL_CAN_DeInit
 675              		.align	1
 676              		.global	HAL_CAN_RequestSleep
 677              		.syntax unified
 678              		.thumb
 679              		.thumb_func
 680              		.fpu softvfp
 681              		.type	HAL_CAN_RequestSleep, %function
 682              	HAL_CAN_RequestSleep:
 683              	.LFB72:
1101:src/stm32f1xx_hal_can.c **** 
1102:src/stm32f1xx_hal_can.c **** /**
1103:src/stm32f1xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
1104:src/stm32f1xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
1105:src/stm32f1xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
1106:src/stm32f1xx_hal_can.c ****   *         of a CAN frame) has been completed.
1107:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1108:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1109:src/stm32f1xx_hal_can.c ****   * @retval HAL status.
1110:src/stm32f1xx_hal_can.c ****   */
1111:src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
1112:src/stm32f1xx_hal_can.c **** {
 684              		.loc 1 1112 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 0
 687              		@ frame_needed = 0, uses_anonymous_args = 0
 688              		@ link register save eliminated.
 689              	.LVL41:
1113:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 690              		.loc 1 1113 0
 691 02ac 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2	@ hcan_4(D)->State, hcan_4(D)->State
 692              	.LVL42:
1114:src/stm32f1xx_hal_can.c **** 
1115:src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 693              		.loc 1 1115 0
 694 02b0 013B     		subs	r3, r3, #1	@ tmp123, hcan_4(D)->State,
 695              	.LVL43:
 696 02b2 012B     		cmp	r3, #1	@ tmp123,
ARM GAS  /tmp/ccDRaG8a.s 			page 34


 697 02b4 06D8     		bhi	.L63	@,
1116:src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1117:src/stm32f1xx_hal_can.c ****   {
1118:src/stm32f1xx_hal_can.c ****     /* Request Sleep mode */
1119:src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 698              		.loc 1 1119 0
 699 02b6 0268     		ldr	r2, [r0]	@ _7, hcan_4(D)->Instance
1120:src/stm32f1xx_hal_can.c **** 
1121:src/stm32f1xx_hal_can.c ****     /* Return function status */
1122:src/stm32f1xx_hal_can.c ****     return HAL_OK;
 700              		.loc 1 1122 0
 701 02b8 0020     		movs	r0, #0	@ <retval>,
 702              	.LVL44:
1119:src/stm32f1xx_hal_can.c **** 
 703              		.loc 1 1119 0
 704 02ba 1368     		ldr	r3, [r2]	@ _8, _7->MCR
 705 02bc 43F00203 		orr	r3, r3, #2	@ _9, _8,
 706 02c0 1360     		str	r3, [r2]	@ _9, _7->MCR
 707              		.loc 1 1122 0
 708 02c2 7047     		bx	lr	@
 709              	.LVL45:
 710              	.L63:
1123:src/stm32f1xx_hal_can.c ****   }
1124:src/stm32f1xx_hal_can.c ****   else
1125:src/stm32f1xx_hal_can.c ****   {
1126:src/stm32f1xx_hal_can.c ****     /* Update error code */
1127:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 711              		.loc 1 1127 0
 712 02c4 436A     		ldr	r3, [r0, #36]	@ _11, hcan_4(D)->ErrorCode
 713 02c6 43F48023 		orr	r3, r3, #262144	@ _12, _11,
 714 02ca 4362     		str	r3, [r0, #36]	@ _12, hcan_4(D)->ErrorCode
1128:src/stm32f1xx_hal_can.c **** 
1129:src/stm32f1xx_hal_can.c ****     /* Return function status */
1130:src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 715              		.loc 1 1130 0
 716 02cc 0120     		movs	r0, #1	@ <retval>,
 717              	.LVL46:
1131:src/stm32f1xx_hal_can.c ****   }
1132:src/stm32f1xx_hal_can.c **** }
 718              		.loc 1 1132 0
 719 02ce 7047     		bx	lr	@
 720              		.cfi_endproc
 721              	.LFE72:
 722              		.size	HAL_CAN_RequestSleep, .-HAL_CAN_RequestSleep
 723              		.align	1
 724              		.global	HAL_CAN_WakeUp
 725              		.syntax unified
 726              		.thumb
 727              		.thumb_func
 728              		.fpu softvfp
 729              		.type	HAL_CAN_WakeUp, %function
 730              	HAL_CAN_WakeUp:
 731              	.LFB73:
1133:src/stm32f1xx_hal_can.c **** 
1134:src/stm32f1xx_hal_can.c **** /**
1135:src/stm32f1xx_hal_can.c ****   * @brief  Wake up from sleep mode.
1136:src/stm32f1xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
ARM GAS  /tmp/ccDRaG8a.s 			page 35


1137:src/stm32f1xx_hal_can.c ****   *         is exited.
1138:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1139:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1140:src/stm32f1xx_hal_can.c ****   * @retval HAL status.
1141:src/stm32f1xx_hal_can.c ****   */
1142:src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
1143:src/stm32f1xx_hal_can.c **** {
 732              		.loc 1 1143 0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 8
 735              		@ frame_needed = 0, uses_anonymous_args = 0
 736              		@ link register save eliminated.
 737              	.LVL47:
1144:src/stm32f1xx_hal_can.c ****   __IO uint32_t count = 0;
 738              		.loc 1 1144 0
 739 02d0 0023     		movs	r3, #0	@ tmp126,
1143:src/stm32f1xx_hal_can.c ****   __IO uint32_t count = 0;
 740              		.loc 1 1143 0
 741 02d2 82B0     		sub	sp, sp, #8	@,,
 742              	.LCFI5:
 743              		.cfi_def_cfa_offset 8
 744              		.loc 1 1144 0
 745 02d4 0193     		str	r3, [sp, #4]	@ tmp126, count
 746              	.LVL48:
1145:src/stm32f1xx_hal_can.c ****   uint32_t timeout = 1000000U;
1146:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 747              		.loc 1 1146 0
 748 02d6 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2	@ hcan_6(D)->State, hcan_6(D)->State
 749              	.LVL49:
1147:src/stm32f1xx_hal_can.c **** 
1148:src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 750              		.loc 1 1148 0
 751 02da 013B     		subs	r3, r3, #1	@ tmp131, hcan_6(D)->State,
 752              	.LVL50:
 753 02dc 012B     		cmp	r3, #1	@ tmp131,
 754 02de 18D8     		bhi	.L66	@,
1149:src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1150:src/stm32f1xx_hal_can.c ****   {
1151:src/stm32f1xx_hal_can.c ****     /* Wake up request */
1152:src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 755              		.loc 1 1152 0
 756 02e0 0268     		ldr	r2, [r0]	@ _9, hcan_6(D)->Instance
1153:src/stm32f1xx_hal_can.c **** 
1154:src/stm32f1xx_hal_can.c ****     /* Wait sleep mode is exited */
1155:src/stm32f1xx_hal_can.c ****     do
1156:src/stm32f1xx_hal_can.c ****     {
1157:src/stm32f1xx_hal_can.c ****       /* Increment counter */
1158:src/stm32f1xx_hal_can.c ****       count++;
1159:src/stm32f1xx_hal_can.c **** 
1160:src/stm32f1xx_hal_can.c ****       /* Check if timeout is reached */
1161:src/stm32f1xx_hal_can.c ****       if (count > timeout)
 757              		.loc 1 1161 0
 758 02e2 0E49     		ldr	r1, .L72	@ tmp132,
1152:src/stm32f1xx_hal_can.c **** 
 759              		.loc 1 1152 0
 760 02e4 1368     		ldr	r3, [r2]	@ _10, _9->MCR
 761 02e6 23F00203 		bic	r3, r3, #2	@ _11, _10,
ARM GAS  /tmp/ccDRaG8a.s 			page 36


 762 02ea 1360     		str	r3, [r2]	@ _11, _9->MCR
 763              	.L69:
1158:src/stm32f1xx_hal_can.c **** 
 764              		.loc 1 1158 0
 765 02ec 019B     		ldr	r3, [sp, #4]	@ count.0_13, count
 766 02ee 0133     		adds	r3, r3, #1	@ count.1_14, count.0_13,
 767 02f0 0193     		str	r3, [sp, #4]	@ count.1_14, count
 768              		.loc 1 1161 0
 769 02f2 019B     		ldr	r3, [sp, #4]	@ count.2_16, count
 770 02f4 8B42     		cmp	r3, r1	@ count.2_16, tmp132
 771 02f6 05D9     		bls	.L67	@,
1162:src/stm32f1xx_hal_can.c ****       {
1163:src/stm32f1xx_hal_can.c ****         /* Update error code */
1164:src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 772              		.loc 1 1164 0
 773 02f8 436A     		ldr	r3, [r0, #36]	@ _19, hcan_6(D)->ErrorCode
 774 02fa 43F40033 		orr	r3, r3, #131072	@ _20, _19,
 775              	.L71:
1165:src/stm32f1xx_hal_can.c **** 
1166:src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1167:src/stm32f1xx_hal_can.c ****       }
1168:src/stm32f1xx_hal_can.c ****     }
1169:src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
1170:src/stm32f1xx_hal_can.c **** 
1171:src/stm32f1xx_hal_can.c ****     /* Return function status */
1172:src/stm32f1xx_hal_can.c ****     return HAL_OK;
1173:src/stm32f1xx_hal_can.c ****   }
1174:src/stm32f1xx_hal_can.c ****   else
1175:src/stm32f1xx_hal_can.c ****   {
1176:src/stm32f1xx_hal_can.c ****     /* Update error code */
1177:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 776              		.loc 1 1177 0
 777 02fe 4362     		str	r3, [r0, #36]	@ _23,
1178:src/stm32f1xx_hal_can.c **** 
1179:src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 778              		.loc 1 1179 0
 779 0300 0120     		movs	r0, #1	@ <retval>,
 780              	.LVL51:
 781 0302 04E0     		b	.L68	@
 782              	.LVL52:
 783              	.L67:
1169:src/stm32f1xx_hal_can.c **** 
 784              		.loc 1 1169 0
 785 0304 5368     		ldr	r3, [r2, #4]	@ _17, _9->MSR
 786 0306 13F00203 		ands	r3, r3, #2	@ tmp133, _17,
 787 030a EFD1     		bne	.L69	@,
1172:src/stm32f1xx_hal_can.c ****   }
 788              		.loc 1 1172 0
 789 030c 1846     		mov	r0, r3	@ <retval>, tmp133
 790              	.LVL53:
 791              	.L68:
1180:src/stm32f1xx_hal_can.c ****   }
1181:src/stm32f1xx_hal_can.c **** }
 792              		.loc 1 1181 0
 793 030e 02B0     		add	sp, sp, #8	@,,
 794              	.LCFI6:
 795              		.cfi_remember_state
ARM GAS  /tmp/ccDRaG8a.s 			page 37


 796              		.cfi_def_cfa_offset 0
 797              		@ sp needed	@
 798 0310 7047     		bx	lr	@
 799              	.LVL54:
 800              	.L66:
 801              	.LCFI7:
 802              		.cfi_restore_state
1177:src/stm32f1xx_hal_can.c **** 
 803              		.loc 1 1177 0
 804 0312 436A     		ldr	r3, [r0, #36]	@ _22, hcan_6(D)->ErrorCode
 805 0314 43F48023 		orr	r3, r3, #262144	@ _23, _22,
 806 0318 F1E7     		b	.L71	@
 807              	.L73:
 808 031a 00BF     		.align	2
 809              	.L72:
 810 031c 40420F00 		.word	1000000
 811              		.cfi_endproc
 812              	.LFE73:
 813              		.size	HAL_CAN_WakeUp, .-HAL_CAN_WakeUp
 814              		.align	1
 815              		.global	HAL_CAN_IsSleepActive
 816              		.syntax unified
 817              		.thumb
 818              		.thumb_func
 819              		.fpu softvfp
 820              		.type	HAL_CAN_IsSleepActive, %function
 821              	HAL_CAN_IsSleepActive:
 822              	.LFB74:
1182:src/stm32f1xx_hal_can.c **** 
1183:src/stm32f1xx_hal_can.c **** /**
1184:src/stm32f1xx_hal_can.c ****   * @brief  Check is sleep mode is active.
1185:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1186:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1187:src/stm32f1xx_hal_can.c ****   * @retval Status
1188:src/stm32f1xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
1189:src/stm32f1xx_hal_can.c ****   *          - 1 : Sleep mode is active.
1190:src/stm32f1xx_hal_can.c ****   */
1191:src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
1192:src/stm32f1xx_hal_can.c **** {
 823              		.loc 1 1192 0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 0
 826              		@ frame_needed = 0, uses_anonymous_args = 0
 827              		@ link register save eliminated.
 828              	.LVL55:
1193:src/stm32f1xx_hal_can.c ****   uint32_t status = 0U;
1194:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 829              		.loc 1 1194 0
 830 0320 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2	@ hcan_3(D)->State, hcan_3(D)->State
 831              	.LVL56:
1195:src/stm32f1xx_hal_can.c **** 
1196:src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 832              		.loc 1 1196 0
 833 0324 013B     		subs	r3, r3, #1	@ tmp122, hcan_3(D)->State,
 834              	.LVL57:
 835 0326 012B     		cmp	r3, #1	@ tmp122,
1197:src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
ARM GAS  /tmp/ccDRaG8a.s 			page 38


1198:src/stm32f1xx_hal_can.c ****   {
1199:src/stm32f1xx_hal_can.c ****     /* Check Sleep mode */
1200:src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 836              		.loc 1 1200 0
 837 0328 9DBF     		ittte	ls
 838 032a 0368     		ldrls	r3, [r0]	@ _6, hcan_3(D)->Instance
 839 032c 5868     		ldrls	r0, [r3, #4]	@ _7, _6->MSR
 840              	.LVL58:
 841 032e C0F34000 		ubfxls	r0, r0, #1, #1	@ _11, _7,,
 842 0332 0020     		movhi	r0, #0	@ _11,
 843              	.LVL59:
1201:src/stm32f1xx_hal_can.c ****     {
1202:src/stm32f1xx_hal_can.c ****       status = 1U;
1203:src/stm32f1xx_hal_can.c ****     }
1204:src/stm32f1xx_hal_can.c ****   }
1205:src/stm32f1xx_hal_can.c **** 
1206:src/stm32f1xx_hal_can.c ****   /* Return function status */
1207:src/stm32f1xx_hal_can.c ****   return status;
1208:src/stm32f1xx_hal_can.c **** }
 844              		.loc 1 1208 0
 845 0334 7047     		bx	lr	@
 846              		.cfi_endproc
 847              	.LFE74:
 848              		.size	HAL_CAN_IsSleepActive, .-HAL_CAN_IsSleepActive
 849              		.align	1
 850              		.global	HAL_CAN_AddTxMessage
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 854              		.fpu softvfp
 855              		.type	HAL_CAN_AddTxMessage, %function
 856              	HAL_CAN_AddTxMessage:
 857              	.LFB75:
1209:src/stm32f1xx_hal_can.c **** 
1210:src/stm32f1xx_hal_can.c **** /**
1211:src/stm32f1xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
1212:src/stm32f1xx_hal_can.c ****   *         corresponding transmission request.
1213:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1214:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1215:src/stm32f1xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
1216:src/stm32f1xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
1217:src/stm32f1xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
1218:src/stm32f1xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
1219:src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
1220:src/stm32f1xx_hal_can.c ****   * @retval HAL status
1221:src/stm32f1xx_hal_can.c ****   */
1222:src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8
1223:src/stm32f1xx_hal_can.c **** {
 858              		.loc 1 1223 0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 0
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862              	.LVL60:
 863 0336 F0B5     		push	{r4, r5, r6, r7, lr}	@
 864              	.LCFI8:
 865              		.cfi_def_cfa_offset 20
 866              		.cfi_offset 4, -20
ARM GAS  /tmp/ccDRaG8a.s 			page 39


 867              		.cfi_offset 5, -16
 868              		.cfi_offset 6, -12
 869              		.cfi_offset 7, -8
 870              		.cfi_offset 14, -4
1224:src/stm32f1xx_hal_can.c ****   uint32_t transmitmailbox;
1225:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 871              		.loc 1 1225 0
 872 0338 90F82050 		ldrb	r5, [r0, #32]	@ zero_extendqisi2	@ hcan_6(D)->State, hcan_6(D)->State
 873              	.LVL61:
1226:src/stm32f1xx_hal_can.c ****   uint32_t tsr = READ_REG(hcan->Instance->TSR);
 874              		.loc 1 1226 0
 875 033c 0668     		ldr	r6, [r0]	@ _8, hcan_6(D)->Instance
1227:src/stm32f1xx_hal_can.c **** 
1228:src/stm32f1xx_hal_can.c ****   /* Check the parameters */
1229:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
1230:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
1231:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
1232:src/stm32f1xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
1233:src/stm32f1xx_hal_can.c ****   {
1234:src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
1235:src/stm32f1xx_hal_can.c ****   }
1236:src/stm32f1xx_hal_can.c ****   else
1237:src/stm32f1xx_hal_can.c ****   {
1238:src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
1239:src/stm32f1xx_hal_can.c ****   }
1240:src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
1241:src/stm32f1xx_hal_can.c **** 
1242:src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 876              		.loc 1 1242 0
 877 033e 013D     		subs	r5, r5, #1	@ tmp153, hcan_6(D)->State,
 878              	.LVL62:
 879 0340 012D     		cmp	r5, #1	@ tmp153,
1226:src/stm32f1xx_hal_can.c ****   uint32_t tsr = READ_REG(hcan->Instance->TSR);
 880              		.loc 1 1226 0
 881 0342 B468     		ldr	r4, [r6, #8]	@ tsr, _8->TSR
 882              	.LVL63:
 883              		.loc 1 1242 0
 884 0344 41D8     		bhi	.L78	@,
1243:src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1244:src/stm32f1xx_hal_can.c ****   {
1245:src/stm32f1xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
1246:src/stm32f1xx_hal_can.c ****     if (((tsr & CAN_TSR_TME0) != 0U) ||
 885              		.loc 1 1246 0
 886 0346 14F0E05F 		tst	r4, #469762048	@ tsr,
 887 034a 3AD0     		beq	.L79	@,
1247:src/stm32f1xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
1248:src/stm32f1xx_hal_can.c ****         ((tsr & CAN_TSR_TME2) != 0U))
1249:src/stm32f1xx_hal_can.c ****     {
1250:src/stm32f1xx_hal_can.c ****       /* Select an empty transmit mailbox */
1251:src/stm32f1xx_hal_can.c ****       transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 888              		.loc 1 1251 0
 889 034c C4F30164 		ubfx	r4, r4, #24, #2	@ transmitmailbox, tsr,,
 890              	.LVL64:
1252:src/stm32f1xx_hal_can.c **** 
1253:src/stm32f1xx_hal_can.c ****       /* Check transmit mailbox value */
1254:src/stm32f1xx_hal_can.c ****       if (transmitmailbox > 2U)
 891              		.loc 1 1254 0
ARM GAS  /tmp/ccDRaG8a.s 			page 40


 892 0350 032C     		cmp	r4, #3	@ transmitmailbox,
 893 0352 4FF00105 		mov	r5, #1	@ tmp182,
 894 0356 05D1     		bne	.L80	@,
1255:src/stm32f1xx_hal_can.c ****       {
1256:src/stm32f1xx_hal_can.c ****         /* Update error code */
1257:src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 895              		.loc 1 1257 0
 896 0358 436A     		ldr	r3, [r0, #36]	@ _15, hcan_6(D)->ErrorCode
 897              	.LVL65:
 898 035a 43F40003 		orr	r3, r3, #8388608	@ _16, _15,
 899              	.LVL66:
 900              	.L86:
1258:src/stm32f1xx_hal_can.c **** 
1259:src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1260:src/stm32f1xx_hal_can.c ****       }
1261:src/stm32f1xx_hal_can.c **** 
1262:src/stm32f1xx_hal_can.c ****       /* Store the Tx mailbox */
1263:src/stm32f1xx_hal_can.c ****       *pTxMailbox = (uint32_t)1 << transmitmailbox;
1264:src/stm32f1xx_hal_can.c **** 
1265:src/stm32f1xx_hal_can.c ****       /* Set up the Id */
1266:src/stm32f1xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
1267:src/stm32f1xx_hal_can.c ****       {
1268:src/stm32f1xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
1269:src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
1270:src/stm32f1xx_hal_can.c ****       }
1271:src/stm32f1xx_hal_can.c ****       else
1272:src/stm32f1xx_hal_can.c ****       {
1273:src/stm32f1xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
1274:src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
1275:src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
1276:src/stm32f1xx_hal_can.c ****       }
1277:src/stm32f1xx_hal_can.c **** 
1278:src/stm32f1xx_hal_can.c ****       /* Set up the DLC */
1279:src/stm32f1xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
1280:src/stm32f1xx_hal_can.c **** 
1281:src/stm32f1xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
1282:src/stm32f1xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
1283:src/stm32f1xx_hal_can.c ****       {
1284:src/stm32f1xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
1285:src/stm32f1xx_hal_can.c ****       }
1286:src/stm32f1xx_hal_can.c **** 
1287:src/stm32f1xx_hal_can.c ****       /* Set up the data field */
1288:src/stm32f1xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
1289:src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
1290:src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
1291:src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
1292:src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
1293:src/stm32f1xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
1294:src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
1295:src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
1296:src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
1297:src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
1298:src/stm32f1xx_hal_can.c **** 
1299:src/stm32f1xx_hal_can.c ****       /* Request transmission */
1300:src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
1301:src/stm32f1xx_hal_can.c **** 
1302:src/stm32f1xx_hal_can.c ****       /* Return function status */
ARM GAS  /tmp/ccDRaG8a.s 			page 41


1303:src/stm32f1xx_hal_can.c ****       return HAL_OK;
1304:src/stm32f1xx_hal_can.c ****     }
1305:src/stm32f1xx_hal_can.c ****     else
1306:src/stm32f1xx_hal_can.c ****     {
1307:src/stm32f1xx_hal_can.c ****       /* Update error code */
1308:src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
1309:src/stm32f1xx_hal_can.c **** 
1310:src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
1311:src/stm32f1xx_hal_can.c ****     }
1312:src/stm32f1xx_hal_can.c ****   }
1313:src/stm32f1xx_hal_can.c ****   else
1314:src/stm32f1xx_hal_can.c ****   {
1315:src/stm32f1xx_hal_can.c ****     /* Update error code */
1316:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 901              		.loc 1 1316 0
 902 035e 4362     		str	r3, [r0, #36]	@ _77,
1317:src/stm32f1xx_hal_can.c **** 
1318:src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 903              		.loc 1 1318 0
 904 0360 0120     		movs	r0, #1	@ <retval>,
 905              	.LVL67:
1319:src/stm32f1xx_hal_can.c ****   }
1320:src/stm32f1xx_hal_can.c **** }
 906              		.loc 1 1320 0
 907 0362 F0BD     		pop	{r4, r5, r6, r7, pc}	@
 908              	.LVL68:
 909              	.L80:
1263:src/stm32f1xx_hal_can.c **** 
 910              		.loc 1 1263 0
 911 0364 A540     		lsls	r5, r5, r4	@ tmp156, tmp182, transmitmailbox
 912 0366 1D60     		str	r5, [r3]	@ tmp156, *pTxMailbox_19(D)
1266:src/stm32f1xx_hal_can.c ****       {
 913              		.loc 1 1266 0
 914 0368 8868     		ldr	r0, [r1, #8]	@ _21, pHeader_10(D)->IDE
 915              	.LVL69:
 916 036a CF68     		ldr	r7, [r1, #12]	@ pHeader_10(D)->RTR, pHeader_10(D)->RTR
 917 036c 04F11803 		add	r3, r4, #24	@ tmp184, transmitmailbox,
 918              	.LVL70:
 919 0370 10BB     		cbnz	r0, .L82	@ _21,
1268:src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 920              		.loc 1 1268 0
 921 0372 0868     		ldr	r0, [r1]	@ pHeader_10(D)->StdId, pHeader_10(D)->StdId
 922 0374 47EA4050 		orr	r0, r7, r0, lsl #21	@ _25, pHeader_10(D)->RTR, pHeader_10(D)->StdId,
 923              	.L85:
1273:src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 924              		.loc 1 1273 0
 925 0378 1B01     		lsls	r3, r3, #4	@ tmp169, tmp184,
 926 037a F050     		str	r0, [r6, r3]	@ _31,
1279:src/stm32f1xx_hal_can.c **** 
 927              		.loc 1 1279 0
 928 037c 0869     		ldr	r0, [r1, #16]	@ _33, pHeader_10(D)->DLC
 929 037e 2401     		lsls	r4, r4, #4	@ tmp171, transmitmailbox,
 930              	.LVL71:
1282:src/stm32f1xx_hal_can.c ****       {
 931              		.loc 1 1282 0
 932 0380 097D     		ldrb	r1, [r1, #20]	@ zero_extendqisi2	@ pHeader_10(D)->TransmitGlobalTime, pHeader_10(D)->Transmit
 933              	.LVL72:
ARM GAS  /tmp/ccDRaG8a.s 			page 42


 934 0382 3319     		adds	r3, r6, r4	@ _100, _8, tmp171
1279:src/stm32f1xx_hal_can.c **** 
 935              		.loc 1 1279 0
 936 0384 C3F88401 		str	r0, [r3, #388]	@ _33, MEM[(struct CAN_TypeDef *)_100 + 388B]
1282:src/stm32f1xx_hal_can.c ****       {
 937              		.loc 1 1282 0
 938 0388 0129     		cmp	r1, #1	@ pHeader_10(D)->TransmitGlobalTime,
1284:src/stm32f1xx_hal_can.c ****       }
 939              		.loc 1 1284 0
 940 038a 08BF     		it	eq
 941 038c D3F88411 		ldreq	r1, [r3, #388]	@ _36, MEM[(struct CAN_TypeDef *)_100 + 388B]
1288:src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
 942              		.loc 1 1288 0
 943 0390 3444     		add	r4, r4, r6	@ tmp175, _8
1284:src/stm32f1xx_hal_can.c ****       }
 944              		.loc 1 1284 0
 945 0392 04BF     		itt	eq
 946 0394 41F48071 		orreq	r1, r1, #256	@ _37, _36,
 947 0398 C3F88411 		streq	r1, [r3, #388]	@ _37, MEM[(struct CAN_TypeDef *)_100 + 388B]
1288:src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
 948              		.loc 1 1288 0
 949 039c 5168     		ldr	r1, [r2, #4]	@ unaligned	@ tmp173, MEM[(uint8_t *)aData_39(D) + 4B]
1303:src/stm32f1xx_hal_can.c ****     }
 950              		.loc 1 1303 0
 951 039e 0020     		movs	r0, #0	@ <retval>,
1288:src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
 952              		.loc 1 1288 0
 953 03a0 C4F88C11 		str	r1, [r4, #396]	@ tmp173, _8->sTxMailBox[transmitmailbox_14].TDHR
1293:src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
 954              		.loc 1 1293 0
 955 03a4 1268     		ldr	r2, [r2]	@ unaligned	@ tmp177, MEM[(uint8_t *)aData_39(D)]
 956              	.LVL73:
 957 03a6 C4F88821 		str	r2, [r4, #392]	@ tmp177, _8->sTxMailBox[transmitmailbox_14].TDLR
1300:src/stm32f1xx_hal_can.c **** 
 958              		.loc 1 1300 0
 959 03aa D3F88021 		ldr	r2, [r3, #384]	@ _70, MEM[(struct CAN_TypeDef *)_100 + 384B]
 960 03ae 42F00102 		orr	r2, r2, #1	@ _71, _70,
 961 03b2 C3F88021 		str	r2, [r3, #384]	@ _71, MEM[(struct CAN_TypeDef *)_100 + 384B]
1303:src/stm32f1xx_hal_can.c ****     }
 962              		.loc 1 1303 0
 963 03b6 F0BD     		pop	{r4, r5, r6, r7, pc}	@
 964              	.LVL74:
 965              	.L82:
1273:src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 966              		.loc 1 1273 0
 967 03b8 4D68     		ldr	r5, [r1, #4]	@ pHeader_10(D)->ExtId, pHeader_10(D)->ExtId
1274:src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 968              		.loc 1 1274 0
 969 03ba 3843     		orrs	r0, r0, r7	@, tmp166, _21, pHeader_10(D)->RTR
 970 03bc 40EAC500 		orr	r0, r0, r5, lsl #3	@ _31, tmp166, pHeader_10(D)->ExtId,
 971 03c0 DAE7     		b	.L85	@
 972              	.LVL75:
 973              	.L79:
1308:src/stm32f1xx_hal_can.c **** 
 974              		.loc 1 1308 0
 975 03c2 436A     		ldr	r3, [r0, #36]	@ _73, hcan_6(D)->ErrorCode
 976              	.LVL76:
ARM GAS  /tmp/ccDRaG8a.s 			page 43


 977 03c4 43F40013 		orr	r3, r3, #2097152	@ _74, _73,
 978 03c8 C9E7     		b	.L86	@
 979              	.LVL77:
 980              	.L78:
1316:src/stm32f1xx_hal_can.c **** 
 981              		.loc 1 1316 0
 982 03ca 436A     		ldr	r3, [r0, #36]	@ _76, hcan_6(D)->ErrorCode
 983              	.LVL78:
 984 03cc 43F48023 		orr	r3, r3, #262144	@ _77, _76,
 985 03d0 C5E7     		b	.L86	@
 986              		.cfi_endproc
 987              	.LFE75:
 988              		.size	HAL_CAN_AddTxMessage, .-HAL_CAN_AddTxMessage
 989              		.align	1
 990              		.global	HAL_CAN_AbortTxRequest
 991              		.syntax unified
 992              		.thumb
 993              		.thumb_func
 994              		.fpu softvfp
 995              		.type	HAL_CAN_AbortTxRequest, %function
 996              	HAL_CAN_AbortTxRequest:
 997              	.LFB76:
1321:src/stm32f1xx_hal_can.c **** 
1322:src/stm32f1xx_hal_can.c **** /**
1323:src/stm32f1xx_hal_can.c ****   * @brief  Abort transmission requests
1324:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1325:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1326:src/stm32f1xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
1327:src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1328:src/stm32f1xx_hal_can.c ****   * @retval HAL status
1329:src/stm32f1xx_hal_can.c ****   */
1330:src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1331:src/stm32f1xx_hal_can.c **** {
 998              		.loc 1 1331 0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 0
 1001              		@ frame_needed = 0, uses_anonymous_args = 0
 1002              		@ link register save eliminated.
 1003              	.LVL79:
1332:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1004              		.loc 1 1332 0
 1005 03d2 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2	@ hcan_6(D)->State, hcan_6(D)->State
 1006              	.LVL80:
1333:src/stm32f1xx_hal_can.c **** 
1334:src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1335:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1336:src/stm32f1xx_hal_can.c **** 
1337:src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1007              		.loc 1 1337 0
 1008 03d6 013B     		subs	r3, r3, #1	@ tmp133, hcan_6(D)->State,
 1009              	.LVL81:
 1010 03d8 012B     		cmp	r3, #1	@ tmp133,
 1011 03da 19D8     		bhi	.L88	@,
1338:src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1339:src/stm32f1xx_hal_can.c ****   {
1340:src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 0 */
1341:src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
ARM GAS  /tmp/ccDRaG8a.s 			page 44


 1012              		.loc 1 1341 0
 1013 03dc CA07     		lsls	r2, r1, #31	@, TxMailboxes,
1342:src/stm32f1xx_hal_can.c ****     {
1343:src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
1344:src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 1014              		.loc 1 1344 0
 1015 03de 41BF     		itttt	mi
 1016 03e0 0268     		ldrmi	r2, [r0]	@ _11, hcan_6(D)->Instance
 1017 03e2 9368     		ldrmi	r3, [r2, #8]	@ _12, _11->TSR
 1018 03e4 43F08003 		orrmi	r3, r3, #128	@ _13, _12,
 1019 03e8 9360     		strmi	r3, [r2, #8]	@ _13, _11->TSR
1345:src/stm32f1xx_hal_can.c ****     }
1346:src/stm32f1xx_hal_can.c **** 
1347:src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 1 */
1348:src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 1020              		.loc 1 1348 0
 1021 03ea 8B07     		lsls	r3, r1, #30	@, TxMailboxes,
1349:src/stm32f1xx_hal_can.c ****     {
1350:src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
1351:src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 1022              		.loc 1 1351 0
 1023 03ec 41BF     		itttt	mi
 1024 03ee 0268     		ldrmi	r2, [r0]	@ _16, hcan_6(D)->Instance
 1025 03f0 9368     		ldrmi	r3, [r2, #8]	@ _17, _16->TSR
 1026 03f2 43F40043 		orrmi	r3, r3, #32768	@ _18, _17,
 1027 03f6 9360     		strmi	r3, [r2, #8]	@ _18, _16->TSR
1352:src/stm32f1xx_hal_can.c ****     }
1353:src/stm32f1xx_hal_can.c **** 
1354:src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 2 */
1355:src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 1028              		.loc 1 1355 0
 1029 03f8 11F00401 		ands	r1, r1, #4	@ tmp136, TxMailboxes,
 1030              	.LVL82:
1356:src/stm32f1xx_hal_can.c ****     {
1357:src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
1358:src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 1031              		.loc 1 1358 0
 1032 03fc 18BF     		it	ne
 1033 03fe 0268     		ldrne	r2, [r0]	@ _21, hcan_6(D)->Instance
1359:src/stm32f1xx_hal_can.c ****     }
1360:src/stm32f1xx_hal_can.c **** 
1361:src/stm32f1xx_hal_can.c ****     /* Return function status */
1362:src/stm32f1xx_hal_can.c ****     return HAL_OK;
 1034              		.loc 1 1362 0
 1035 0400 4FF00000 		mov	r0, #0	@ <retval>,
 1036              	.LVL83:
1358:src/stm32f1xx_hal_can.c ****     }
 1037              		.loc 1 1358 0
 1038 0404 1EBF     		ittt	ne
 1039 0406 9368     		ldrne	r3, [r2, #8]	@ _22, _21->TSR
 1040 0408 43F40003 		orrne	r3, r3, #8388608	@ _23, _22,
 1041 040c 9360     		strne	r3, [r2, #8]	@ _23, _21->TSR
 1042 040e 7047     		bx	lr	@
 1043              	.LVL84:
 1044              	.L88:
1363:src/stm32f1xx_hal_can.c ****   }
1364:src/stm32f1xx_hal_can.c ****   else
ARM GAS  /tmp/ccDRaG8a.s 			page 45


1365:src/stm32f1xx_hal_can.c ****   {
1366:src/stm32f1xx_hal_can.c ****     /* Update error code */
1367:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1045              		.loc 1 1367 0
 1046 0410 436A     		ldr	r3, [r0, #36]	@ _25, hcan_6(D)->ErrorCode
 1047 0412 43F48023 		orr	r3, r3, #262144	@ _26, _25,
 1048 0416 4362     		str	r3, [r0, #36]	@ _26, hcan_6(D)->ErrorCode
1368:src/stm32f1xx_hal_can.c **** 
1369:src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1049              		.loc 1 1369 0
 1050 0418 0120     		movs	r0, #1	@ <retval>,
 1051              	.LVL85:
 1052 041a 7047     		bx	lr	@
 1053              		.cfi_endproc
 1054              	.LFE76:
 1055              		.size	HAL_CAN_AbortTxRequest, .-HAL_CAN_AbortTxRequest
 1056              		.align	1
 1057              		.global	HAL_CAN_GetTxMailboxesFreeLevel
 1058              		.syntax unified
 1059              		.thumb
 1060              		.thumb_func
 1061              		.fpu softvfp
 1062              		.type	HAL_CAN_GetTxMailboxesFreeLevel, %function
 1063              	HAL_CAN_GetTxMailboxesFreeLevel:
 1064              	.LFB77:
1370:src/stm32f1xx_hal_can.c ****   }
1371:src/stm32f1xx_hal_can.c **** }
1372:src/stm32f1xx_hal_can.c **** 
1373:src/stm32f1xx_hal_can.c **** /**
1374:src/stm32f1xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
1375:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1376:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1377:src/stm32f1xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
1378:src/stm32f1xx_hal_can.c ****   */
1379:src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
1380:src/stm32f1xx_hal_can.c **** {
 1065              		.loc 1 1380 0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 0
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 1069              		@ link register save eliminated.
 1070              	.LVL86:
1381:src/stm32f1xx_hal_can.c ****   uint32_t freelevel = 0U;
1382:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1071              		.loc 1 1382 0
 1072 041c 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2	@ hcan_5(D)->State, hcan_5(D)->State
 1073              	.LVL87:
1383:src/stm32f1xx_hal_can.c **** 
1384:src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1074              		.loc 1 1384 0
 1075 0420 013B     		subs	r3, r3, #1	@ tmp126, hcan_5(D)->State,
 1076              	.LVL88:
 1077 0422 012B     		cmp	r3, #1	@ tmp126,
 1078 0424 0CD8     		bhi	.L103	@,
1385:src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1386:src/stm32f1xx_hal_can.c ****   {
1387:src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
ARM GAS  /tmp/ccDRaG8a.s 			page 46


1388:src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 1079              		.loc 1 1388 0
 1080 0426 0368     		ldr	r3, [r0]	@ _8, hcan_5(D)->Instance
 1081 0428 9868     		ldr	r0, [r3, #8]	@ _9, _8->TSR
 1082              	.LVL89:
1389:src/stm32f1xx_hal_can.c ****     {
1390:src/stm32f1xx_hal_can.c ****       freelevel++;
1391:src/stm32f1xx_hal_can.c ****     }
1392:src/stm32f1xx_hal_can.c **** 
1393:src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
1394:src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 1083              		.loc 1 1394 0
 1084 042a 9A68     		ldr	r2, [r3, #8]	@ _11, _8->TSR
1395:src/stm32f1xx_hal_can.c ****     {
1396:src/stm32f1xx_hal_can.c ****       freelevel++;
1397:src/stm32f1xx_hal_can.c ****     }
1398:src/stm32f1xx_hal_can.c **** 
1399:src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1400:src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 1085              		.loc 1 1400 0
 1086 042c 9B68     		ldr	r3, [r3, #8]	@ _14, _8->TSR
1394:src/stm32f1xx_hal_can.c ****     {
 1087              		.loc 1 1394 0
 1088 042e 1201     		lsls	r2, r2, #4	@, _11,
1388:src/stm32f1xx_hal_can.c ****     {
 1089              		.loc 1 1388 0
 1090 0430 C0F38060 		ubfx	r0, r0, #26, #1	@ <retval>, _9,,
 1091              	.LVL90:
1396:src/stm32f1xx_hal_can.c ****     }
 1092              		.loc 1 1396 0
 1093 0434 48BF     		it	mi
 1094 0436 0130     		addmi	r0, r0, #1	@ <retval>, <retval>,
 1095              	.LVL91:
 1096              		.loc 1 1400 0
 1097 0438 DB00     		lsls	r3, r3, #3	@, _14,
 1098 043a 02D5     		bpl	.L100	@,
1401:src/stm32f1xx_hal_can.c ****     {
1402:src/stm32f1xx_hal_can.c ****       freelevel++;
 1099              		.loc 1 1402 0
 1100 043c 0130     		adds	r0, r0, #1	@ <retval>, <retval>,
 1101              	.LVL92:
 1102 043e 7047     		bx	lr	@
 1103              	.LVL93:
 1104              	.L103:
1381:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1105              		.loc 1 1381 0
 1106 0440 0020     		movs	r0, #0	@ <retval>,
 1107              	.LVL94:
 1108              	.L100:
1403:src/stm32f1xx_hal_can.c ****     }
1404:src/stm32f1xx_hal_can.c ****   }
1405:src/stm32f1xx_hal_can.c **** 
1406:src/stm32f1xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1407:src/stm32f1xx_hal_can.c ****   return freelevel;
1408:src/stm32f1xx_hal_can.c **** }
 1109              		.loc 1 1408 0
 1110 0442 7047     		bx	lr	@
ARM GAS  /tmp/ccDRaG8a.s 			page 47


 1111              		.cfi_endproc
 1112              	.LFE77:
 1113              		.size	HAL_CAN_GetTxMailboxesFreeLevel, .-HAL_CAN_GetTxMailboxesFreeLevel
 1114              		.align	1
 1115              		.global	HAL_CAN_IsTxMessagePending
 1116              		.syntax unified
 1117              		.thumb
 1118              		.thumb_func
 1119              		.fpu softvfp
 1120              		.type	HAL_CAN_IsTxMessagePending, %function
 1121              	HAL_CAN_IsTxMessagePending:
 1122              	.LFB78:
1409:src/stm32f1xx_hal_can.c **** 
1410:src/stm32f1xx_hal_can.c **** /**
1411:src/stm32f1xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1412:src/stm32f1xx_hal_can.c ****   *         Mailboxes.
1413:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1414:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1415:src/stm32f1xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1416:src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1417:src/stm32f1xx_hal_can.c ****   * @retval Status
1418:src/stm32f1xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1419:src/stm32f1xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1420:src/stm32f1xx_hal_can.c ****   *                Tx Mailbox.
1421:src/stm32f1xx_hal_can.c ****   */
1422:src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1423:src/stm32f1xx_hal_can.c **** {
 1123              		.loc 1 1423 0
 1124              		.cfi_startproc
 1125              		@ args = 0, pretend = 0, frame = 0
 1126              		@ frame_needed = 0, uses_anonymous_args = 0
 1127              		@ link register save eliminated.
 1128              	.LVL95:
1424:src/stm32f1xx_hal_can.c ****   uint32_t status = 0U;
1425:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1129              		.loc 1 1425 0
 1130 0444 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2	@ hcan_3(D)->State, hcan_3(D)->State
 1131              	.LVL96:
1426:src/stm32f1xx_hal_can.c **** 
1427:src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1428:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1429:src/stm32f1xx_hal_can.c **** 
1430:src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1132              		.loc 1 1430 0
 1133 0448 013B     		subs	r3, r3, #1	@ tmp124, hcan_3(D)->State,
 1134              	.LVL97:
 1135 044a 012B     		cmp	r3, #1	@ tmp124,
 1136 044c 08D8     		bhi	.L112	@,
1431:src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1432:src/stm32f1xx_hal_can.c ****   {
1433:src/stm32f1xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1434:src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
 1137              		.loc 1 1434 0
 1138 044e 0368     		ldr	r3, [r0]	@ _6, hcan_3(D)->Instance
 1139 0450 8906     		lsls	r1, r1, #26	@ _9, TxMailboxes,
 1140              	.LVL98:
 1141 0452 9B68     		ldr	r3, [r3, #8]	@ _7, _6->TSR
ARM GAS  /tmp/ccDRaG8a.s 			page 48


 1142 0454 31EA0303 		bics	r3, r1, r3	@ tmp129, _9, _7
 1143 0458 14BF     		ite	ne
 1144 045a 0120     		movne	r0, #1	@ _13,
 1145              	.LVL99:
 1146 045c 0020     		moveq	r0, #0	@ _13,
 1147 045e 7047     		bx	lr	@
 1148              	.LVL100:
 1149              	.L112:
 1150 0460 0020     		movs	r0, #0	@ _13,
 1151              	.LVL101:
1435:src/stm32f1xx_hal_can.c ****     {
1436:src/stm32f1xx_hal_can.c ****       status = 1U;
1437:src/stm32f1xx_hal_can.c ****     }
1438:src/stm32f1xx_hal_can.c ****   }
1439:src/stm32f1xx_hal_can.c **** 
1440:src/stm32f1xx_hal_can.c ****   /* Return status */
1441:src/stm32f1xx_hal_can.c ****   return status;
1442:src/stm32f1xx_hal_can.c **** }
 1152              		.loc 1 1442 0
 1153 0462 7047     		bx	lr	@
 1154              		.cfi_endproc
 1155              	.LFE78:
 1156              		.size	HAL_CAN_IsTxMessagePending, .-HAL_CAN_IsTxMessagePending
 1157              		.align	1
 1158              		.global	HAL_CAN_GetTxTimestamp
 1159              		.syntax unified
 1160              		.thumb
 1161              		.thumb_func
 1162              		.fpu softvfp
 1163              		.type	HAL_CAN_GetTxTimestamp, %function
 1164              	HAL_CAN_GetTxTimestamp:
 1165              	.LFB79:
1443:src/stm32f1xx_hal_can.c **** 
1444:src/stm32f1xx_hal_can.c **** /**
1445:src/stm32f1xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1446:src/stm32f1xx_hal_can.c ****             mode is enabled.
1447:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1448:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1449:src/stm32f1xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1450:src/stm32f1xx_hal_can.c ****   *         read.
1451:src/stm32f1xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1452:src/stm32f1xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1453:src/stm32f1xx_hal_can.c ****   */
1454:src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
1455:src/stm32f1xx_hal_can.c **** {
 1166              		.loc 1 1455 0
 1167              		.cfi_startproc
 1168              		@ args = 0, pretend = 0, frame = 0
 1169              		@ frame_needed = 0, uses_anonymous_args = 0
 1170              		@ link register save eliminated.
 1171              	.LVL102:
1456:src/stm32f1xx_hal_can.c ****   uint32_t timestamp = 0U;
1457:src/stm32f1xx_hal_can.c ****   uint32_t transmitmailbox;
1458:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1172              		.loc 1 1458 0
 1173 0464 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2	@ hcan_4(D)->State, hcan_4(D)->State
 1174              	.LVL103:
ARM GAS  /tmp/ccDRaG8a.s 			page 49


1459:src/stm32f1xx_hal_can.c **** 
1460:src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1461:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
1462:src/stm32f1xx_hal_can.c **** 
1463:src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1175              		.loc 1 1463 0
 1176 0468 013B     		subs	r3, r3, #1	@ tmp124, hcan_4(D)->State,
 1177              	.LVL104:
 1178 046a 012B     		cmp	r3, #1	@ tmp124,
 1179 046c 0AD8     		bhi	.L115	@,
 1180              	.LVL105:
 1181              	.LBB8:
 1182              	.LBB9:
 1183              		.file 2 "../cmsiscore/inc/cmsis_gcc.h"
   1:../cmsiscore/inc/cmsis_gcc.h **** /**************************************************************************//**
   2:../cmsiscore/inc/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../cmsiscore/inc/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../cmsiscore/inc/cmsis_gcc.h ****  * @version  V5.0.4
   5:../cmsiscore/inc/cmsis_gcc.h ****  * @date     09. April 2018
   6:../cmsiscore/inc/cmsis_gcc.h ****  ******************************************************************************/
   7:../cmsiscore/inc/cmsis_gcc.h **** /*
   8:../cmsiscore/inc/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:../cmsiscore/inc/cmsis_gcc.h ****  *
  10:../cmsiscore/inc/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../cmsiscore/inc/cmsis_gcc.h ****  *
  12:../cmsiscore/inc/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../cmsiscore/inc/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../cmsiscore/inc/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../cmsiscore/inc/cmsis_gcc.h ****  *
  16:../cmsiscore/inc/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../cmsiscore/inc/cmsis_gcc.h ****  *
  18:../cmsiscore/inc/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../cmsiscore/inc/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../cmsiscore/inc/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../cmsiscore/inc/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../cmsiscore/inc/cmsis_gcc.h ****  * limitations under the License.
  23:../cmsiscore/inc/cmsis_gcc.h ****  */
  24:../cmsiscore/inc/cmsis_gcc.h **** 
  25:../cmsiscore/inc/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../cmsiscore/inc/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../cmsiscore/inc/cmsis_gcc.h **** 
  28:../cmsiscore/inc/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../cmsiscore/inc/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../cmsiscore/inc/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../cmsiscore/inc/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../cmsiscore/inc/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../cmsiscore/inc/cmsis_gcc.h **** 
  34:../cmsiscore/inc/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../cmsiscore/inc/cmsis_gcc.h **** #ifndef __has_builtin
  36:../cmsiscore/inc/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../cmsiscore/inc/cmsis_gcc.h **** #endif
  38:../cmsiscore/inc/cmsis_gcc.h **** 
  39:../cmsiscore/inc/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __ASM
  41:../cmsiscore/inc/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../cmsiscore/inc/cmsis_gcc.h **** #endif
  43:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __INLINE
ARM GAS  /tmp/ccDRaG8a.s 			page 50


  44:../cmsiscore/inc/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../cmsiscore/inc/cmsis_gcc.h **** #endif
  46:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../cmsiscore/inc/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../cmsiscore/inc/cmsis_gcc.h **** #endif
  49:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:../cmsiscore/inc/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:../cmsiscore/inc/cmsis_gcc.h **** #endif                                           
  52:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:../cmsiscore/inc/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:../cmsiscore/inc/cmsis_gcc.h **** #endif
  55:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __USED
  56:../cmsiscore/inc/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:../cmsiscore/inc/cmsis_gcc.h **** #endif
  58:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __WEAK
  59:../cmsiscore/inc/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:../cmsiscore/inc/cmsis_gcc.h **** #endif
  61:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __PACKED
  62:../cmsiscore/inc/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:../cmsiscore/inc/cmsis_gcc.h **** #endif
  64:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:../cmsiscore/inc/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:../cmsiscore/inc/cmsis_gcc.h **** #endif
  67:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:../cmsiscore/inc/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:../cmsiscore/inc/cmsis_gcc.h **** #endif
  70:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:../cmsiscore/inc/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:../cmsiscore/inc/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:../cmsiscore/inc/cmsis_gcc.h **** #endif
  78:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:../cmsiscore/inc/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:../cmsiscore/inc/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:../cmsiscore/inc/cmsis_gcc.h **** #endif
  86:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:../cmsiscore/inc/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:../cmsiscore/inc/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:../cmsiscore/inc/cmsis_gcc.h **** #endif
  94:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:../cmsiscore/inc/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:../cmsiscore/inc/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
ARM GAS  /tmp/ccDRaG8a.s 			page 51


 101:../cmsiscore/inc/cmsis_gcc.h **** #endif
 102:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:../cmsiscore/inc/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:../cmsiscore/inc/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:../cmsiscore/inc/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:../cmsiscore/inc/cmsis_gcc.h **** #endif
 110:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:../cmsiscore/inc/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:../cmsiscore/inc/cmsis_gcc.h **** #endif
 113:../cmsiscore/inc/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:../cmsiscore/inc/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:../cmsiscore/inc/cmsis_gcc.h **** #endif
 116:../cmsiscore/inc/cmsis_gcc.h **** 
 117:../cmsiscore/inc/cmsis_gcc.h **** 
 118:../cmsiscore/inc/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:../cmsiscore/inc/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:../cmsiscore/inc/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:../cmsiscore/inc/cmsis_gcc.h ****   @{
 122:../cmsiscore/inc/cmsis_gcc.h ****  */
 123:../cmsiscore/inc/cmsis_gcc.h **** 
 124:../cmsiscore/inc/cmsis_gcc.h **** /**
 125:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:../cmsiscore/inc/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:../cmsiscore/inc/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:../cmsiscore/inc/cmsis_gcc.h ****  */
 129:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:../cmsiscore/inc/cmsis_gcc.h **** {
 131:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:../cmsiscore/inc/cmsis_gcc.h **** }
 133:../cmsiscore/inc/cmsis_gcc.h **** 
 134:../cmsiscore/inc/cmsis_gcc.h **** 
 135:../cmsiscore/inc/cmsis_gcc.h **** /**
 136:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:../cmsiscore/inc/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:../cmsiscore/inc/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:../cmsiscore/inc/cmsis_gcc.h ****  */
 140:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:../cmsiscore/inc/cmsis_gcc.h **** {
 142:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:../cmsiscore/inc/cmsis_gcc.h **** }
 144:../cmsiscore/inc/cmsis_gcc.h **** 
 145:../cmsiscore/inc/cmsis_gcc.h **** 
 146:../cmsiscore/inc/cmsis_gcc.h **** /**
 147:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Control Register
 148:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:../cmsiscore/inc/cmsis_gcc.h ****   \return               Control Register value
 150:../cmsiscore/inc/cmsis_gcc.h ****  */
 151:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:../cmsiscore/inc/cmsis_gcc.h **** {
 153:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 154:../cmsiscore/inc/cmsis_gcc.h **** 
 155:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 157:../cmsiscore/inc/cmsis_gcc.h **** }
ARM GAS  /tmp/ccDRaG8a.s 			page 52


 158:../cmsiscore/inc/cmsis_gcc.h **** 
 159:../cmsiscore/inc/cmsis_gcc.h **** 
 160:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:../cmsiscore/inc/cmsis_gcc.h **** /**
 162:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:../cmsiscore/inc/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:../cmsiscore/inc/cmsis_gcc.h ****  */
 166:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:../cmsiscore/inc/cmsis_gcc.h **** {
 168:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 169:../cmsiscore/inc/cmsis_gcc.h **** 
 170:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 172:../cmsiscore/inc/cmsis_gcc.h **** }
 173:../cmsiscore/inc/cmsis_gcc.h **** #endif
 174:../cmsiscore/inc/cmsis_gcc.h **** 
 175:../cmsiscore/inc/cmsis_gcc.h **** 
 176:../cmsiscore/inc/cmsis_gcc.h **** /**
 177:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Control Register
 178:../cmsiscore/inc/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:../cmsiscore/inc/cmsis_gcc.h ****  */
 181:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:../cmsiscore/inc/cmsis_gcc.h **** {
 183:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:../cmsiscore/inc/cmsis_gcc.h **** }
 185:../cmsiscore/inc/cmsis_gcc.h **** 
 186:../cmsiscore/inc/cmsis_gcc.h **** 
 187:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:../cmsiscore/inc/cmsis_gcc.h **** /**
 189:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:../cmsiscore/inc/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:../cmsiscore/inc/cmsis_gcc.h ****  */
 193:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:../cmsiscore/inc/cmsis_gcc.h **** {
 195:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:../cmsiscore/inc/cmsis_gcc.h **** }
 197:../cmsiscore/inc/cmsis_gcc.h **** #endif
 198:../cmsiscore/inc/cmsis_gcc.h **** 
 199:../cmsiscore/inc/cmsis_gcc.h **** 
 200:../cmsiscore/inc/cmsis_gcc.h **** /**
 201:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:../cmsiscore/inc/cmsis_gcc.h ****   \return               IPSR Register value
 204:../cmsiscore/inc/cmsis_gcc.h ****  */
 205:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:../cmsiscore/inc/cmsis_gcc.h **** {
 207:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 208:../cmsiscore/inc/cmsis_gcc.h **** 
 209:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 211:../cmsiscore/inc/cmsis_gcc.h **** }
 212:../cmsiscore/inc/cmsis_gcc.h **** 
 213:../cmsiscore/inc/cmsis_gcc.h **** 
 214:../cmsiscore/inc/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccDRaG8a.s 			page 53


 215:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get APSR Register
 216:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:../cmsiscore/inc/cmsis_gcc.h ****   \return               APSR Register value
 218:../cmsiscore/inc/cmsis_gcc.h ****  */
 219:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:../cmsiscore/inc/cmsis_gcc.h **** {
 221:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 222:../cmsiscore/inc/cmsis_gcc.h **** 
 223:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 225:../cmsiscore/inc/cmsis_gcc.h **** }
 226:../cmsiscore/inc/cmsis_gcc.h **** 
 227:../cmsiscore/inc/cmsis_gcc.h **** 
 228:../cmsiscore/inc/cmsis_gcc.h **** /**
 229:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:../cmsiscore/inc/cmsis_gcc.h ****   \return               xPSR Register value
 232:../cmsiscore/inc/cmsis_gcc.h ****  */
 233:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:../cmsiscore/inc/cmsis_gcc.h **** {
 235:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 236:../cmsiscore/inc/cmsis_gcc.h **** 
 237:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 239:../cmsiscore/inc/cmsis_gcc.h **** }
 240:../cmsiscore/inc/cmsis_gcc.h **** 
 241:../cmsiscore/inc/cmsis_gcc.h **** 
 242:../cmsiscore/inc/cmsis_gcc.h **** /**
 243:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:../cmsiscore/inc/cmsis_gcc.h ****   \return               PSP Register value
 246:../cmsiscore/inc/cmsis_gcc.h ****  */
 247:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:../cmsiscore/inc/cmsis_gcc.h **** {
 249:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 250:../cmsiscore/inc/cmsis_gcc.h **** 
 251:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 253:../cmsiscore/inc/cmsis_gcc.h **** }
 254:../cmsiscore/inc/cmsis_gcc.h **** 
 255:../cmsiscore/inc/cmsis_gcc.h **** 
 256:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:../cmsiscore/inc/cmsis_gcc.h **** /**
 258:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:../cmsiscore/inc/cmsis_gcc.h ****   \return               PSP Register value
 261:../cmsiscore/inc/cmsis_gcc.h ****  */
 262:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:../cmsiscore/inc/cmsis_gcc.h **** {
 264:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 265:../cmsiscore/inc/cmsis_gcc.h **** 
 266:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 268:../cmsiscore/inc/cmsis_gcc.h **** }
 269:../cmsiscore/inc/cmsis_gcc.h **** #endif
 270:../cmsiscore/inc/cmsis_gcc.h **** 
 271:../cmsiscore/inc/cmsis_gcc.h **** 
ARM GAS  /tmp/ccDRaG8a.s 			page 54


 272:../cmsiscore/inc/cmsis_gcc.h **** /**
 273:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:../cmsiscore/inc/cmsis_gcc.h ****  */
 277:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:../cmsiscore/inc/cmsis_gcc.h **** {
 279:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:../cmsiscore/inc/cmsis_gcc.h **** }
 281:../cmsiscore/inc/cmsis_gcc.h **** 
 282:../cmsiscore/inc/cmsis_gcc.h **** 
 283:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:../cmsiscore/inc/cmsis_gcc.h **** /**
 285:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:../cmsiscore/inc/cmsis_gcc.h ****  */
 289:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:../cmsiscore/inc/cmsis_gcc.h **** {
 291:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:../cmsiscore/inc/cmsis_gcc.h **** }
 293:../cmsiscore/inc/cmsis_gcc.h **** #endif
 294:../cmsiscore/inc/cmsis_gcc.h **** 
 295:../cmsiscore/inc/cmsis_gcc.h **** 
 296:../cmsiscore/inc/cmsis_gcc.h **** /**
 297:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:../cmsiscore/inc/cmsis_gcc.h ****   \return               MSP Register value
 300:../cmsiscore/inc/cmsis_gcc.h ****  */
 301:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:../cmsiscore/inc/cmsis_gcc.h **** {
 303:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 304:../cmsiscore/inc/cmsis_gcc.h **** 
 305:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 307:../cmsiscore/inc/cmsis_gcc.h **** }
 308:../cmsiscore/inc/cmsis_gcc.h **** 
 309:../cmsiscore/inc/cmsis_gcc.h **** 
 310:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:../cmsiscore/inc/cmsis_gcc.h **** /**
 312:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:../cmsiscore/inc/cmsis_gcc.h ****   \return               MSP Register value
 315:../cmsiscore/inc/cmsis_gcc.h ****  */
 316:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:../cmsiscore/inc/cmsis_gcc.h **** {
 318:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 319:../cmsiscore/inc/cmsis_gcc.h **** 
 320:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 322:../cmsiscore/inc/cmsis_gcc.h **** }
 323:../cmsiscore/inc/cmsis_gcc.h **** #endif
 324:../cmsiscore/inc/cmsis_gcc.h **** 
 325:../cmsiscore/inc/cmsis_gcc.h **** 
 326:../cmsiscore/inc/cmsis_gcc.h **** /**
 327:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
ARM GAS  /tmp/ccDRaG8a.s 			page 55


 329:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:../cmsiscore/inc/cmsis_gcc.h ****  */
 331:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:../cmsiscore/inc/cmsis_gcc.h **** {
 333:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:../cmsiscore/inc/cmsis_gcc.h **** }
 335:../cmsiscore/inc/cmsis_gcc.h **** 
 336:../cmsiscore/inc/cmsis_gcc.h **** 
 337:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:../cmsiscore/inc/cmsis_gcc.h **** /**
 339:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:../cmsiscore/inc/cmsis_gcc.h ****  */
 343:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:../cmsiscore/inc/cmsis_gcc.h **** {
 345:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:../cmsiscore/inc/cmsis_gcc.h **** }
 347:../cmsiscore/inc/cmsis_gcc.h **** #endif
 348:../cmsiscore/inc/cmsis_gcc.h **** 
 349:../cmsiscore/inc/cmsis_gcc.h **** 
 350:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:../cmsiscore/inc/cmsis_gcc.h **** /**
 352:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:../cmsiscore/inc/cmsis_gcc.h ****   \return               SP Register value
 355:../cmsiscore/inc/cmsis_gcc.h ****  */
 356:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:../cmsiscore/inc/cmsis_gcc.h **** {
 358:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 359:../cmsiscore/inc/cmsis_gcc.h **** 
 360:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 362:../cmsiscore/inc/cmsis_gcc.h **** }
 363:../cmsiscore/inc/cmsis_gcc.h **** 
 364:../cmsiscore/inc/cmsis_gcc.h **** 
 365:../cmsiscore/inc/cmsis_gcc.h **** /**
 366:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:../cmsiscore/inc/cmsis_gcc.h ****  */
 370:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:../cmsiscore/inc/cmsis_gcc.h **** {
 372:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:../cmsiscore/inc/cmsis_gcc.h **** }
 374:../cmsiscore/inc/cmsis_gcc.h **** #endif
 375:../cmsiscore/inc/cmsis_gcc.h **** 
 376:../cmsiscore/inc/cmsis_gcc.h **** 
 377:../cmsiscore/inc/cmsis_gcc.h **** /**
 378:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:../cmsiscore/inc/cmsis_gcc.h ****   \return               Priority Mask value
 381:../cmsiscore/inc/cmsis_gcc.h ****  */
 382:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:../cmsiscore/inc/cmsis_gcc.h **** {
 384:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 385:../cmsiscore/inc/cmsis_gcc.h **** 
ARM GAS  /tmp/ccDRaG8a.s 			page 56


 386:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 388:../cmsiscore/inc/cmsis_gcc.h **** }
 389:../cmsiscore/inc/cmsis_gcc.h **** 
 390:../cmsiscore/inc/cmsis_gcc.h **** 
 391:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:../cmsiscore/inc/cmsis_gcc.h **** /**
 393:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:../cmsiscore/inc/cmsis_gcc.h ****   \return               Priority Mask value
 396:../cmsiscore/inc/cmsis_gcc.h ****  */
 397:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:../cmsiscore/inc/cmsis_gcc.h **** {
 399:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 400:../cmsiscore/inc/cmsis_gcc.h **** 
 401:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 403:../cmsiscore/inc/cmsis_gcc.h **** }
 404:../cmsiscore/inc/cmsis_gcc.h **** #endif
 405:../cmsiscore/inc/cmsis_gcc.h **** 
 406:../cmsiscore/inc/cmsis_gcc.h **** 
 407:../cmsiscore/inc/cmsis_gcc.h **** /**
 408:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:../cmsiscore/inc/cmsis_gcc.h ****  */
 412:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:../cmsiscore/inc/cmsis_gcc.h **** {
 414:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:../cmsiscore/inc/cmsis_gcc.h **** }
 416:../cmsiscore/inc/cmsis_gcc.h **** 
 417:../cmsiscore/inc/cmsis_gcc.h **** 
 418:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:../cmsiscore/inc/cmsis_gcc.h **** /**
 420:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:../cmsiscore/inc/cmsis_gcc.h ****  */
 424:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:../cmsiscore/inc/cmsis_gcc.h **** {
 426:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:../cmsiscore/inc/cmsis_gcc.h **** }
 428:../cmsiscore/inc/cmsis_gcc.h **** #endif
 429:../cmsiscore/inc/cmsis_gcc.h **** 
 430:../cmsiscore/inc/cmsis_gcc.h **** 
 431:../cmsiscore/inc/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:../cmsiscore/inc/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:../cmsiscore/inc/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:../cmsiscore/inc/cmsis_gcc.h **** /**
 435:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Enable FIQ
 436:../cmsiscore/inc/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:../cmsiscore/inc/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:../cmsiscore/inc/cmsis_gcc.h ****  */
 439:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:../cmsiscore/inc/cmsis_gcc.h **** {
 441:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:../cmsiscore/inc/cmsis_gcc.h **** }
ARM GAS  /tmp/ccDRaG8a.s 			page 57


 443:../cmsiscore/inc/cmsis_gcc.h **** 
 444:../cmsiscore/inc/cmsis_gcc.h **** 
 445:../cmsiscore/inc/cmsis_gcc.h **** /**
 446:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Disable FIQ
 447:../cmsiscore/inc/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:../cmsiscore/inc/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:../cmsiscore/inc/cmsis_gcc.h ****  */
 450:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:../cmsiscore/inc/cmsis_gcc.h **** {
 452:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:../cmsiscore/inc/cmsis_gcc.h **** }
 454:../cmsiscore/inc/cmsis_gcc.h **** 
 455:../cmsiscore/inc/cmsis_gcc.h **** 
 456:../cmsiscore/inc/cmsis_gcc.h **** /**
 457:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Base Priority
 458:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:../cmsiscore/inc/cmsis_gcc.h ****   \return               Base Priority register value
 460:../cmsiscore/inc/cmsis_gcc.h ****  */
 461:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:../cmsiscore/inc/cmsis_gcc.h **** {
 463:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 464:../cmsiscore/inc/cmsis_gcc.h **** 
 465:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 467:../cmsiscore/inc/cmsis_gcc.h **** }
 468:../cmsiscore/inc/cmsis_gcc.h **** 
 469:../cmsiscore/inc/cmsis_gcc.h **** 
 470:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:../cmsiscore/inc/cmsis_gcc.h **** /**
 472:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:../cmsiscore/inc/cmsis_gcc.h ****   \return               Base Priority register value
 475:../cmsiscore/inc/cmsis_gcc.h ****  */
 476:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:../cmsiscore/inc/cmsis_gcc.h **** {
 478:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 479:../cmsiscore/inc/cmsis_gcc.h **** 
 480:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 482:../cmsiscore/inc/cmsis_gcc.h **** }
 483:../cmsiscore/inc/cmsis_gcc.h **** #endif
 484:../cmsiscore/inc/cmsis_gcc.h **** 
 485:../cmsiscore/inc/cmsis_gcc.h **** 
 486:../cmsiscore/inc/cmsis_gcc.h **** /**
 487:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Base Priority
 488:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:../cmsiscore/inc/cmsis_gcc.h ****  */
 491:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:../cmsiscore/inc/cmsis_gcc.h **** {
 493:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:../cmsiscore/inc/cmsis_gcc.h **** }
 495:../cmsiscore/inc/cmsis_gcc.h **** 
 496:../cmsiscore/inc/cmsis_gcc.h **** 
 497:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:../cmsiscore/inc/cmsis_gcc.h **** /**
 499:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
ARM GAS  /tmp/ccDRaG8a.s 			page 58


 500:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:../cmsiscore/inc/cmsis_gcc.h ****  */
 503:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:../cmsiscore/inc/cmsis_gcc.h **** {
 505:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:../cmsiscore/inc/cmsis_gcc.h **** }
 507:../cmsiscore/inc/cmsis_gcc.h **** #endif
 508:../cmsiscore/inc/cmsis_gcc.h **** 
 509:../cmsiscore/inc/cmsis_gcc.h **** 
 510:../cmsiscore/inc/cmsis_gcc.h **** /**
 511:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:../cmsiscore/inc/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:../cmsiscore/inc/cmsis_gcc.h ****  */
 516:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:../cmsiscore/inc/cmsis_gcc.h **** {
 518:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:../cmsiscore/inc/cmsis_gcc.h **** }
 520:../cmsiscore/inc/cmsis_gcc.h **** 
 521:../cmsiscore/inc/cmsis_gcc.h **** 
 522:../cmsiscore/inc/cmsis_gcc.h **** /**
 523:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:../cmsiscore/inc/cmsis_gcc.h ****   \return               Fault Mask register value
 526:../cmsiscore/inc/cmsis_gcc.h ****  */
 527:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:../cmsiscore/inc/cmsis_gcc.h **** {
 529:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 530:../cmsiscore/inc/cmsis_gcc.h **** 
 531:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 533:../cmsiscore/inc/cmsis_gcc.h **** }
 534:../cmsiscore/inc/cmsis_gcc.h **** 
 535:../cmsiscore/inc/cmsis_gcc.h **** 
 536:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:../cmsiscore/inc/cmsis_gcc.h **** /**
 538:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:../cmsiscore/inc/cmsis_gcc.h ****   \return               Fault Mask register value
 541:../cmsiscore/inc/cmsis_gcc.h ****  */
 542:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:../cmsiscore/inc/cmsis_gcc.h **** {
 544:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 545:../cmsiscore/inc/cmsis_gcc.h **** 
 546:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 548:../cmsiscore/inc/cmsis_gcc.h **** }
 549:../cmsiscore/inc/cmsis_gcc.h **** #endif
 550:../cmsiscore/inc/cmsis_gcc.h **** 
 551:../cmsiscore/inc/cmsis_gcc.h **** 
 552:../cmsiscore/inc/cmsis_gcc.h **** /**
 553:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:../cmsiscore/inc/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccDRaG8a.s 			page 59


 557:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:../cmsiscore/inc/cmsis_gcc.h **** {
 559:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:../cmsiscore/inc/cmsis_gcc.h **** }
 561:../cmsiscore/inc/cmsis_gcc.h **** 
 562:../cmsiscore/inc/cmsis_gcc.h **** 
 563:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:../cmsiscore/inc/cmsis_gcc.h **** /**
 565:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:../cmsiscore/inc/cmsis_gcc.h ****  */
 569:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:../cmsiscore/inc/cmsis_gcc.h **** {
 571:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:../cmsiscore/inc/cmsis_gcc.h **** }
 573:../cmsiscore/inc/cmsis_gcc.h **** #endif
 574:../cmsiscore/inc/cmsis_gcc.h **** 
 575:../cmsiscore/inc/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:../cmsiscore/inc/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:../cmsiscore/inc/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:../cmsiscore/inc/cmsis_gcc.h **** 
 579:../cmsiscore/inc/cmsis_gcc.h **** 
 580:../cmsiscore/inc/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:../cmsiscore/inc/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:../cmsiscore/inc/cmsis_gcc.h **** 
 583:../cmsiscore/inc/cmsis_gcc.h **** /**
 584:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:../cmsiscore/inc/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:../cmsiscore/inc/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:../cmsiscore/inc/cmsis_gcc.h ****   mode.
 588:../cmsiscore/inc/cmsis_gcc.h ****   
 589:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:../cmsiscore/inc/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:../cmsiscore/inc/cmsis_gcc.h ****  */
 592:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:../cmsiscore/inc/cmsis_gcc.h **** {
 594:../cmsiscore/inc/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:../cmsiscore/inc/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:../cmsiscore/inc/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:../cmsiscore/inc/cmsis_gcc.h ****   return 0U;
 598:../cmsiscore/inc/cmsis_gcc.h **** #else
 599:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 600:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:../cmsiscore/inc/cmsis_gcc.h ****   return result;
 602:../cmsiscore/inc/cmsis_gcc.h **** #endif
 603:../cmsiscore/inc/cmsis_gcc.h **** }
 604:../cmsiscore/inc/cmsis_gcc.h **** 
 605:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:../cmsiscore/inc/cmsis_gcc.h **** /**
 607:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:../cmsiscore/inc/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:../cmsiscore/inc/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:../cmsiscore/inc/cmsis_gcc.h **** 
 611:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:../cmsiscore/inc/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:../cmsiscore/inc/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccDRaG8a.s 			page 60


 614:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:../cmsiscore/inc/cmsis_gcc.h **** {
 616:../cmsiscore/inc/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:../cmsiscore/inc/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:../cmsiscore/inc/cmsis_gcc.h ****   return 0U;
 619:../cmsiscore/inc/cmsis_gcc.h **** #else
 620:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 621:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:../cmsiscore/inc/cmsis_gcc.h ****   return result;
 623:../cmsiscore/inc/cmsis_gcc.h **** #endif
 624:../cmsiscore/inc/cmsis_gcc.h **** }
 625:../cmsiscore/inc/cmsis_gcc.h **** #endif
 626:../cmsiscore/inc/cmsis_gcc.h **** 
 627:../cmsiscore/inc/cmsis_gcc.h **** 
 628:../cmsiscore/inc/cmsis_gcc.h **** /**
 629:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:../cmsiscore/inc/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:../cmsiscore/inc/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:../cmsiscore/inc/cmsis_gcc.h ****   mode.
 633:../cmsiscore/inc/cmsis_gcc.h ****   
 634:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:../cmsiscore/inc/cmsis_gcc.h ****  */
 637:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:../cmsiscore/inc/cmsis_gcc.h **** {
 639:../cmsiscore/inc/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:../cmsiscore/inc/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:../cmsiscore/inc/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:../cmsiscore/inc/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:../cmsiscore/inc/cmsis_gcc.h **** #else
 644:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:../cmsiscore/inc/cmsis_gcc.h **** #endif
 646:../cmsiscore/inc/cmsis_gcc.h **** }
 647:../cmsiscore/inc/cmsis_gcc.h **** 
 648:../cmsiscore/inc/cmsis_gcc.h **** 
 649:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:../cmsiscore/inc/cmsis_gcc.h **** /**
 651:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:../cmsiscore/inc/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:../cmsiscore/inc/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:../cmsiscore/inc/cmsis_gcc.h **** 
 655:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:../cmsiscore/inc/cmsis_gcc.h ****  */
 658:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:../cmsiscore/inc/cmsis_gcc.h **** {
 660:../cmsiscore/inc/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:../cmsiscore/inc/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:../cmsiscore/inc/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:../cmsiscore/inc/cmsis_gcc.h **** #else
 664:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:../cmsiscore/inc/cmsis_gcc.h **** #endif
 666:../cmsiscore/inc/cmsis_gcc.h **** }
 667:../cmsiscore/inc/cmsis_gcc.h **** #endif
 668:../cmsiscore/inc/cmsis_gcc.h **** 
 669:../cmsiscore/inc/cmsis_gcc.h **** 
 670:../cmsiscore/inc/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccDRaG8a.s 			page 61


 671:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:../cmsiscore/inc/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:../cmsiscore/inc/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:../cmsiscore/inc/cmsis_gcc.h ****   mode.
 675:../cmsiscore/inc/cmsis_gcc.h **** 
 676:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:../cmsiscore/inc/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:../cmsiscore/inc/cmsis_gcc.h ****  */
 679:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:../cmsiscore/inc/cmsis_gcc.h **** {
 681:../cmsiscore/inc/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:../cmsiscore/inc/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:../cmsiscore/inc/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:../cmsiscore/inc/cmsis_gcc.h ****   return 0U;
 685:../cmsiscore/inc/cmsis_gcc.h **** #else
 686:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 687:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:../cmsiscore/inc/cmsis_gcc.h ****   return result;
 689:../cmsiscore/inc/cmsis_gcc.h **** #endif
 690:../cmsiscore/inc/cmsis_gcc.h **** }
 691:../cmsiscore/inc/cmsis_gcc.h **** 
 692:../cmsiscore/inc/cmsis_gcc.h **** 
 693:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:../cmsiscore/inc/cmsis_gcc.h **** /**
 695:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:../cmsiscore/inc/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:../cmsiscore/inc/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:../cmsiscore/inc/cmsis_gcc.h **** 
 699:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:../cmsiscore/inc/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:../cmsiscore/inc/cmsis_gcc.h ****  */
 702:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:../cmsiscore/inc/cmsis_gcc.h **** {
 704:../cmsiscore/inc/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:../cmsiscore/inc/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:../cmsiscore/inc/cmsis_gcc.h ****   return 0U;
 707:../cmsiscore/inc/cmsis_gcc.h **** #else
 708:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 709:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:../cmsiscore/inc/cmsis_gcc.h ****   return result;
 711:../cmsiscore/inc/cmsis_gcc.h **** #endif
 712:../cmsiscore/inc/cmsis_gcc.h **** }
 713:../cmsiscore/inc/cmsis_gcc.h **** #endif
 714:../cmsiscore/inc/cmsis_gcc.h **** 
 715:../cmsiscore/inc/cmsis_gcc.h **** 
 716:../cmsiscore/inc/cmsis_gcc.h **** /**
 717:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:../cmsiscore/inc/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:../cmsiscore/inc/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:../cmsiscore/inc/cmsis_gcc.h ****   mode.
 721:../cmsiscore/inc/cmsis_gcc.h **** 
 722:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:../cmsiscore/inc/cmsis_gcc.h ****  */
 725:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:../cmsiscore/inc/cmsis_gcc.h **** {
 727:../cmsiscore/inc/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
ARM GAS  /tmp/ccDRaG8a.s 			page 62


 728:../cmsiscore/inc/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:../cmsiscore/inc/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:../cmsiscore/inc/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:../cmsiscore/inc/cmsis_gcc.h **** #else
 732:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:../cmsiscore/inc/cmsis_gcc.h **** #endif
 734:../cmsiscore/inc/cmsis_gcc.h **** }
 735:../cmsiscore/inc/cmsis_gcc.h **** 
 736:../cmsiscore/inc/cmsis_gcc.h **** 
 737:../cmsiscore/inc/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:../cmsiscore/inc/cmsis_gcc.h **** /**
 739:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:../cmsiscore/inc/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:../cmsiscore/inc/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:../cmsiscore/inc/cmsis_gcc.h **** 
 743:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:../cmsiscore/inc/cmsis_gcc.h ****  */
 746:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:../cmsiscore/inc/cmsis_gcc.h **** {
 748:../cmsiscore/inc/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:../cmsiscore/inc/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:../cmsiscore/inc/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:../cmsiscore/inc/cmsis_gcc.h **** #else
 752:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:../cmsiscore/inc/cmsis_gcc.h **** #endif
 754:../cmsiscore/inc/cmsis_gcc.h **** }
 755:../cmsiscore/inc/cmsis_gcc.h **** #endif
 756:../cmsiscore/inc/cmsis_gcc.h **** 
 757:../cmsiscore/inc/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:../cmsiscore/inc/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:../cmsiscore/inc/cmsis_gcc.h **** 
 760:../cmsiscore/inc/cmsis_gcc.h **** 
 761:../cmsiscore/inc/cmsis_gcc.h **** /**
 762:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Get FPSCR
 763:../cmsiscore/inc/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:../cmsiscore/inc/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:../cmsiscore/inc/cmsis_gcc.h ****  */
 766:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:../cmsiscore/inc/cmsis_gcc.h **** {
 768:../cmsiscore/inc/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:../cmsiscore/inc/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:../cmsiscore/inc/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:../cmsiscore/inc/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:../cmsiscore/inc/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:../cmsiscore/inc/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:../cmsiscore/inc/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:../cmsiscore/inc/cmsis_gcc.h **** #else
 776:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 777:../cmsiscore/inc/cmsis_gcc.h **** 
 778:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:../cmsiscore/inc/cmsis_gcc.h ****   return(result);
 780:../cmsiscore/inc/cmsis_gcc.h **** #endif
 781:../cmsiscore/inc/cmsis_gcc.h **** #else
 782:../cmsiscore/inc/cmsis_gcc.h ****   return(0U);
 783:../cmsiscore/inc/cmsis_gcc.h **** #endif
 784:../cmsiscore/inc/cmsis_gcc.h **** }
ARM GAS  /tmp/ccDRaG8a.s 			page 63


 785:../cmsiscore/inc/cmsis_gcc.h **** 
 786:../cmsiscore/inc/cmsis_gcc.h **** 
 787:../cmsiscore/inc/cmsis_gcc.h **** /**
 788:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Set FPSCR
 789:../cmsiscore/inc/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:../cmsiscore/inc/cmsis_gcc.h ****  */
 792:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:../cmsiscore/inc/cmsis_gcc.h **** {
 794:../cmsiscore/inc/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:../cmsiscore/inc/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:../cmsiscore/inc/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:../cmsiscore/inc/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:../cmsiscore/inc/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:../cmsiscore/inc/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:../cmsiscore/inc/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:../cmsiscore/inc/cmsis_gcc.h **** #else
 802:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:../cmsiscore/inc/cmsis_gcc.h **** #endif
 804:../cmsiscore/inc/cmsis_gcc.h **** #else
 805:../cmsiscore/inc/cmsis_gcc.h ****   (void)fpscr;
 806:../cmsiscore/inc/cmsis_gcc.h **** #endif
 807:../cmsiscore/inc/cmsis_gcc.h **** }
 808:../cmsiscore/inc/cmsis_gcc.h **** 
 809:../cmsiscore/inc/cmsis_gcc.h **** 
 810:../cmsiscore/inc/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:../cmsiscore/inc/cmsis_gcc.h **** 
 812:../cmsiscore/inc/cmsis_gcc.h **** 
 813:../cmsiscore/inc/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:../cmsiscore/inc/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:../cmsiscore/inc/cmsis_gcc.h ****   Access to dedicated instructions
 816:../cmsiscore/inc/cmsis_gcc.h ****   @{
 817:../cmsiscore/inc/cmsis_gcc.h **** */
 818:../cmsiscore/inc/cmsis_gcc.h **** 
 819:../cmsiscore/inc/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:../cmsiscore/inc/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:../cmsiscore/inc/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:../cmsiscore/inc/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:../cmsiscore/inc/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:../cmsiscore/inc/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:../cmsiscore/inc/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:../cmsiscore/inc/cmsis_gcc.h **** #else
 827:../cmsiscore/inc/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:../cmsiscore/inc/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:../cmsiscore/inc/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:../cmsiscore/inc/cmsis_gcc.h **** #endif
 831:../cmsiscore/inc/cmsis_gcc.h **** 
 832:../cmsiscore/inc/cmsis_gcc.h **** /**
 833:../cmsiscore/inc/cmsis_gcc.h ****   \brief   No Operation
 834:../cmsiscore/inc/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:../cmsiscore/inc/cmsis_gcc.h ****  */
 836:../cmsiscore/inc/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:../cmsiscore/inc/cmsis_gcc.h **** 
 838:../cmsiscore/inc/cmsis_gcc.h **** /**
 839:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:../cmsiscore/inc/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:../cmsiscore/inc/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccDRaG8a.s 			page 64


 842:../cmsiscore/inc/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:../cmsiscore/inc/cmsis_gcc.h **** 
 844:../cmsiscore/inc/cmsis_gcc.h **** 
 845:../cmsiscore/inc/cmsis_gcc.h **** /**
 846:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Wait For Event
 847:../cmsiscore/inc/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:../cmsiscore/inc/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:../cmsiscore/inc/cmsis_gcc.h ****  */
 850:../cmsiscore/inc/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:../cmsiscore/inc/cmsis_gcc.h **** 
 852:../cmsiscore/inc/cmsis_gcc.h **** 
 853:../cmsiscore/inc/cmsis_gcc.h **** /**
 854:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Send Event
 855:../cmsiscore/inc/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:../cmsiscore/inc/cmsis_gcc.h ****  */
 857:../cmsiscore/inc/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:../cmsiscore/inc/cmsis_gcc.h **** 
 859:../cmsiscore/inc/cmsis_gcc.h **** 
 860:../cmsiscore/inc/cmsis_gcc.h **** /**
 861:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:../cmsiscore/inc/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:../cmsiscore/inc/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:../cmsiscore/inc/cmsis_gcc.h ****            after the instruction has been completed.
 865:../cmsiscore/inc/cmsis_gcc.h ****  */
 866:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:../cmsiscore/inc/cmsis_gcc.h **** {
 868:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:../cmsiscore/inc/cmsis_gcc.h **** }
 870:../cmsiscore/inc/cmsis_gcc.h **** 
 871:../cmsiscore/inc/cmsis_gcc.h **** 
 872:../cmsiscore/inc/cmsis_gcc.h **** /**
 873:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:../cmsiscore/inc/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:../cmsiscore/inc/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:../cmsiscore/inc/cmsis_gcc.h ****  */
 877:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:../cmsiscore/inc/cmsis_gcc.h **** {
 879:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:../cmsiscore/inc/cmsis_gcc.h **** }
 881:../cmsiscore/inc/cmsis_gcc.h **** 
 882:../cmsiscore/inc/cmsis_gcc.h **** 
 883:../cmsiscore/inc/cmsis_gcc.h **** /**
 884:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:../cmsiscore/inc/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:../cmsiscore/inc/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:../cmsiscore/inc/cmsis_gcc.h ****  */
 888:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:../cmsiscore/inc/cmsis_gcc.h **** {
 890:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:../cmsiscore/inc/cmsis_gcc.h **** }
 892:../cmsiscore/inc/cmsis_gcc.h **** 
 893:../cmsiscore/inc/cmsis_gcc.h **** 
 894:../cmsiscore/inc/cmsis_gcc.h **** /**
 895:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:../cmsiscore/inc/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:../cmsiscore/inc/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  /tmp/ccDRaG8a.s 			page 65


 899:../cmsiscore/inc/cmsis_gcc.h ****  */
 900:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:../cmsiscore/inc/cmsis_gcc.h **** {
 902:../cmsiscore/inc/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:../cmsiscore/inc/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:../cmsiscore/inc/cmsis_gcc.h **** #else
 905:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 906:../cmsiscore/inc/cmsis_gcc.h **** 
 907:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:../cmsiscore/inc/cmsis_gcc.h ****   return result;
 909:../cmsiscore/inc/cmsis_gcc.h **** #endif
 910:../cmsiscore/inc/cmsis_gcc.h **** }
 911:../cmsiscore/inc/cmsis_gcc.h **** 
 912:../cmsiscore/inc/cmsis_gcc.h **** 
 913:../cmsiscore/inc/cmsis_gcc.h **** /**
 914:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:../cmsiscore/inc/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:../cmsiscore/inc/cmsis_gcc.h ****   \return               Reversed value
 918:../cmsiscore/inc/cmsis_gcc.h ****  */
 919:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:../cmsiscore/inc/cmsis_gcc.h **** {
 921:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 922:../cmsiscore/inc/cmsis_gcc.h **** 
 923:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:../cmsiscore/inc/cmsis_gcc.h ****   return result;
 925:../cmsiscore/inc/cmsis_gcc.h **** }
 926:../cmsiscore/inc/cmsis_gcc.h **** 
 927:../cmsiscore/inc/cmsis_gcc.h **** 
 928:../cmsiscore/inc/cmsis_gcc.h **** /**
 929:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:../cmsiscore/inc/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:../cmsiscore/inc/cmsis_gcc.h ****   \return               Reversed value
 933:../cmsiscore/inc/cmsis_gcc.h ****  */
 934:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:../cmsiscore/inc/cmsis_gcc.h **** {
 936:../cmsiscore/inc/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:../cmsiscore/inc/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:../cmsiscore/inc/cmsis_gcc.h **** #else
 939:../cmsiscore/inc/cmsis_gcc.h ****   int16_t result;
 940:../cmsiscore/inc/cmsis_gcc.h **** 
 941:../cmsiscore/inc/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:../cmsiscore/inc/cmsis_gcc.h ****   return result;
 943:../cmsiscore/inc/cmsis_gcc.h **** #endif
 944:../cmsiscore/inc/cmsis_gcc.h **** }
 945:../cmsiscore/inc/cmsis_gcc.h **** 
 946:../cmsiscore/inc/cmsis_gcc.h **** 
 947:../cmsiscore/inc/cmsis_gcc.h **** /**
 948:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:../cmsiscore/inc/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:../cmsiscore/inc/cmsis_gcc.h ****   \return               Rotated value
 953:../cmsiscore/inc/cmsis_gcc.h ****  */
 954:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:../cmsiscore/inc/cmsis_gcc.h **** {
ARM GAS  /tmp/ccDRaG8a.s 			page 66


 956:../cmsiscore/inc/cmsis_gcc.h ****   op2 %= 32U;
 957:../cmsiscore/inc/cmsis_gcc.h ****   if (op2 == 0U)
 958:../cmsiscore/inc/cmsis_gcc.h ****   {
 959:../cmsiscore/inc/cmsis_gcc.h ****     return op1;
 960:../cmsiscore/inc/cmsis_gcc.h ****   }
 961:../cmsiscore/inc/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:../cmsiscore/inc/cmsis_gcc.h **** }
 963:../cmsiscore/inc/cmsis_gcc.h **** 
 964:../cmsiscore/inc/cmsis_gcc.h **** 
 965:../cmsiscore/inc/cmsis_gcc.h **** /**
 966:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Breakpoint
 967:../cmsiscore/inc/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:../cmsiscore/inc/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:../cmsiscore/inc/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:../cmsiscore/inc/cmsis_gcc.h ****  */
 972:../cmsiscore/inc/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:../cmsiscore/inc/cmsis_gcc.h **** 
 974:../cmsiscore/inc/cmsis_gcc.h **** 
 975:../cmsiscore/inc/cmsis_gcc.h **** /**
 976:../cmsiscore/inc/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:../cmsiscore/inc/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:../cmsiscore/inc/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:../cmsiscore/inc/cmsis_gcc.h ****   \return               Reversed value
 980:../cmsiscore/inc/cmsis_gcc.h ****  */
 981:../cmsiscore/inc/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 982:../cmsiscore/inc/cmsis_gcc.h **** {
 983:../cmsiscore/inc/cmsis_gcc.h ****   uint32_t result;
 984:../cmsiscore/inc/cmsis_gcc.h **** 
 985:../cmsiscore/inc/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:../cmsiscore/inc/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:../cmsiscore/inc/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:../cmsiscore/inc/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1184              		.loc 2 988 0
 1185              		.syntax unified
 1186              	@ 988 "../cmsiscore/inc/cmsis_gcc.h" 1
 1187 046e 91FAA1F1 		rbit r1, r1	@ result, TxMailbox
 1188              	@ 0 "" 2
 1189              	.LVL106:
 1190              		.thumb
 1191              		.syntax unified
 1192              	.LBE9:
 1193              	.LBE8:
1464:src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1465:src/stm32f1xx_hal_can.c ****   {
1466:src/stm32f1xx_hal_can.c ****     /* Select the Tx mailbox */
1467:src/stm32f1xx_hal_can.c ****     transmitmailbox = POSITION_VAL(TxMailbox);
 1194              		.loc 1 1467 0
 1195 0472 B1FA81F1 		clz	r1, r1	@ _8, result
 1196              	.LVL107:
1468:src/stm32f1xx_hal_can.c **** 
1469:src/stm32f1xx_hal_can.c ****     /* Get timestamp */
1470:src/stm32f1xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
 1197              		.loc 1 1470 0
 1198 0476 0368     		ldr	r3, [r0]	@ _10, hcan_4(D)->Instance
 1199 0478 1831     		adds	r1, r1, #24	@ tmp126, _8,
 1200              	.LVL108:
ARM GAS  /tmp/ccDRaG8a.s 			page 67


 1201 047a 03EB0111 		add	r1, r3, r1, lsl #4	@ tmp128, _10, tmp126,
 1202              	.LVL109:
 1203 047e 4868     		ldr	r0, [r1, #4]	@ _11, _10->sTxMailBox[transmitmailbox_9].TDTR
 1204              	.LVL110:
 1205 0480 000C     		lsrs	r0, r0, #16	@ <retval>, _11,
 1206              	.LVL111:
 1207 0482 7047     		bx	lr	@
 1208              	.LVL112:
 1209              	.L115:
1456:src/stm32f1xx_hal_can.c ****   uint32_t transmitmailbox;
 1210              		.loc 1 1456 0
 1211 0484 0020     		movs	r0, #0	@ <retval>,
 1212              	.LVL113:
1471:src/stm32f1xx_hal_can.c ****   }
1472:src/stm32f1xx_hal_can.c **** 
1473:src/stm32f1xx_hal_can.c ****   /* Return the timestamp */
1474:src/stm32f1xx_hal_can.c ****   return timestamp;
1475:src/stm32f1xx_hal_can.c **** }
 1213              		.loc 1 1475 0
 1214 0486 7047     		bx	lr	@
 1215              		.cfi_endproc
 1216              	.LFE79:
 1217              		.size	HAL_CAN_GetTxTimestamp, .-HAL_CAN_GetTxTimestamp
 1218              		.align	1
 1219              		.global	HAL_CAN_GetRxMessage
 1220              		.syntax unified
 1221              		.thumb
 1222              		.thumb_func
 1223              		.fpu softvfp
 1224              		.type	HAL_CAN_GetRxMessage, %function
 1225              	HAL_CAN_GetRxMessage:
 1226              	.LFB80:
1476:src/stm32f1xx_hal_can.c **** 
1477:src/stm32f1xx_hal_can.c **** /**
1478:src/stm32f1xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1479:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1480:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1481:src/stm32f1xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1482:src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1483:src/stm32f1xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
1484:src/stm32f1xx_hal_can.c ****   *         of the Rx frame will be stored.
1485:src/stm32f1xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
1486:src/stm32f1xx_hal_can.c ****   * @retval HAL status
1487:src/stm32f1xx_hal_can.c ****   */
1488:src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDe
1489:src/stm32f1xx_hal_can.c **** {
 1227              		.loc 1 1489 0
 1228              		.cfi_startproc
 1229              		@ args = 0, pretend = 0, frame = 0
 1230              		@ frame_needed = 0, uses_anonymous_args = 0
 1231              	.LVL114:
 1232 0488 F0B5     		push	{r4, r5, r6, r7, lr}	@
 1233              	.LCFI9:
 1234              		.cfi_def_cfa_offset 20
 1235              		.cfi_offset 4, -20
 1236              		.cfi_offset 5, -16
 1237              		.cfi_offset 6, -12
ARM GAS  /tmp/ccDRaG8a.s 			page 68


 1238              		.cfi_offset 7, -8
 1239              		.cfi_offset 14, -4
1490:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1240              		.loc 1 1490 0
 1241 048a 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2	@ hcan_5(D)->State, hcan_5(D)->State
 1242              	.LVL115:
1491:src/stm32f1xx_hal_can.c **** 
1492:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1493:src/stm32f1xx_hal_can.c **** 
1494:src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1243              		.loc 1 1494 0
 1244 048e 013C     		subs	r4, r4, #1	@ tmp186, hcan_5(D)->State,
 1245              	.LVL116:
 1246 0490 012C     		cmp	r4, #1	@ tmp186,
 1247 0492 6BD8     		bhi	.L117	@,
 1248 0494 0668     		ldr	r6, [r0]	@ _21, hcan_5(D)->Instance
1495:src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1496:src/stm32f1xx_hal_can.c ****   {
1497:src/stm32f1xx_hal_can.c ****     /* Check the Rx FIFO */
1498:src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1249              		.loc 1 1498 0
 1250 0496 41B9     		cbnz	r1, .L118	@ RxFifo,
1499:src/stm32f1xx_hal_can.c ****     {
1500:src/stm32f1xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1501:src/stm32f1xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 1251              		.loc 1 1501 0
 1252 0498 F468     		ldr	r4, [r6, #12]	@ _10, _9->RF0R
 1253              	.L128:
1502:src/stm32f1xx_hal_can.c ****       {
1503:src/stm32f1xx_hal_can.c ****         /* Update error code */
1504:src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
1505:src/stm32f1xx_hal_can.c **** 
1506:src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1507:src/stm32f1xx_hal_can.c ****       }
1508:src/stm32f1xx_hal_can.c ****     }
1509:src/stm32f1xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1510:src/stm32f1xx_hal_can.c ****     {
1511:src/stm32f1xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1512:src/stm32f1xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 1254              		.loc 1 1512 0
 1255 049a A407     		lsls	r4, r4, #30	@, _16,
 1256 049c 07D1     		bne	.L119	@,
1513:src/stm32f1xx_hal_can.c ****       {
1514:src/stm32f1xx_hal_can.c ****         /* Update error code */
1515:src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1257              		.loc 1 1515 0
 1258 049e 436A     		ldr	r3, [r0, #36]	@ _18,
 1259              	.LVL117:
 1260 04a0 43F40013 		orr	r3, r3, #2097152	@ _19, _18,
 1261              	.L124:
1516:src/stm32f1xx_hal_can.c **** 
1517:src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1518:src/stm32f1xx_hal_can.c ****       }
1519:src/stm32f1xx_hal_can.c ****     }
1520:src/stm32f1xx_hal_can.c **** 
1521:src/stm32f1xx_hal_can.c ****     /* Get the header */
1522:src/stm32f1xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
ARM GAS  /tmp/ccDRaG8a.s 			page 69


1523:src/stm32f1xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
1524:src/stm32f1xx_hal_can.c ****     {
1525:src/stm32f1xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
1526:src/stm32f1xx_hal_can.c ****     }
1527:src/stm32f1xx_hal_can.c ****     else
1528:src/stm32f1xx_hal_can.c ****     {
1529:src/stm32f1xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR)
1530:src/stm32f1xx_hal_can.c ****     }
1531:src/stm32f1xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
1532:src/stm32f1xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
1533:src/stm32f1xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
1534:src/stm32f1xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
1535:src/stm32f1xx_hal_can.c **** 
1536:src/stm32f1xx_hal_can.c ****     /* Get the data */
1537:src/stm32f1xx_hal_can.c ****     aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
1538:src/stm32f1xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
1539:src/stm32f1xx_hal_can.c ****     aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
1540:src/stm32f1xx_hal_can.c ****     aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
1541:src/stm32f1xx_hal_can.c ****     aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
1542:src/stm32f1xx_hal_can.c ****     aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
1543:src/stm32f1xx_hal_can.c ****     aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
1544:src/stm32f1xx_hal_can.c ****     aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
1545:src/stm32f1xx_hal_can.c **** 
1546:src/stm32f1xx_hal_can.c ****     /* Release the FIFO */
1547:src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
1548:src/stm32f1xx_hal_can.c ****     {
1549:src/stm32f1xx_hal_can.c ****       /* Release RX FIFO 0 */
1550:src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
1551:src/stm32f1xx_hal_can.c ****     }
1552:src/stm32f1xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1553:src/stm32f1xx_hal_can.c ****     {
1554:src/stm32f1xx_hal_can.c ****       /* Release RX FIFO 1 */
1555:src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
1556:src/stm32f1xx_hal_can.c ****     }
1557:src/stm32f1xx_hal_can.c **** 
1558:src/stm32f1xx_hal_can.c ****     /* Return function status */
1559:src/stm32f1xx_hal_can.c ****     return HAL_OK;
1560:src/stm32f1xx_hal_can.c ****   }
1561:src/stm32f1xx_hal_can.c ****   else
1562:src/stm32f1xx_hal_can.c ****   {
1563:src/stm32f1xx_hal_can.c ****     /* Update error code */
1564:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1262              		.loc 1 1564 0
 1263 04a4 4362     		str	r3, [r0, #36]	@ _92,
1565:src/stm32f1xx_hal_can.c **** 
1566:src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1264              		.loc 1 1566 0
 1265 04a6 0120     		movs	r0, #1	@ <retval>,
 1266              	.LVL118:
1567:src/stm32f1xx_hal_can.c ****   }
1568:src/stm32f1xx_hal_can.c **** }
 1267              		.loc 1 1568 0
 1268 04a8 F0BD     		pop	{r4, r5, r6, r7, pc}	@
 1269              	.LVL119:
 1270              	.L118:
1512:src/stm32f1xx_hal_can.c ****       {
 1271              		.loc 1 1512 0
ARM GAS  /tmp/ccDRaG8a.s 			page 70


 1272 04aa 3469     		ldr	r4, [r6, #16]	@ _16, _15->RF1R
 1273 04ac F5E7     		b	.L128	@
 1274              	.L119:
 1275 04ae 0C01     		lsls	r4, r1, #4	@ tmp189, RxFifo,
 1276 04b0 3519     		adds	r5, r6, r4	@ _108, _21, tmp189
1522:src/stm32f1xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 1277              		.loc 1 1522 0
 1278 04b2 D5F8B071 		ldr	r7, [r5, #432]	@ _22, MEM[(struct CAN_TypeDef *)_108 + 432B]
 1279 04b6 07F00407 		and	r7, r7, #4	@ _23, _22,
 1280 04ba 9760     		str	r7, [r2, #8]	@ _23, pHeader_24(D)->IDE
1523:src/stm32f1xx_hal_can.c ****     {
 1281              		.loc 1 1523 0
 1282 04bc 002F     		cmp	r7, #0	@ _23
 1283 04be 4BD1     		bne	.L121	@
1525:src/stm32f1xx_hal_can.c ****     }
 1284              		.loc 1 1525 0
 1285 04c0 D5F8B071 		ldr	r7, [r5, #432]	@ _26,
 1286 04c4 7F0D     		lsrs	r7, r7, #21	@ tmp190, _26,
 1287 04c6 1760     		str	r7, [r2]	@ tmp190, pHeader_24(D)->StdId
 1288              	.L122:
1531:src/stm32f1xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 1289              		.loc 1 1531 0
 1290 04c8 D5F8B071 		ldr	r7, [r5, #432]	@ _32, MEM[(struct CAN_TypeDef *)_108 + 432B]
1537:src/stm32f1xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1291              		.loc 1 1537 0
 1292 04cc 2644     		add	r6, r6, r4	@ tmp198, tmp189
1531:src/stm32f1xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 1293              		.loc 1 1531 0
 1294 04ce 07F00207 		and	r7, r7, #2	@ tmp192, _32,
 1295 04d2 D760     		str	r7, [r2, #12]	@ tmp192, pHeader_24(D)->RTR
1532:src/stm32f1xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1296              		.loc 1 1532 0
 1297 04d4 D5F8B471 		ldr	r7, [r5, #436]	@ _35, MEM[(struct CAN_TypeDef *)_108 + 436B]
 1298 04d8 07F00F07 		and	r7, r7, #15	@ tmp193, _35,
 1299 04dc 1761     		str	r7, [r2, #16]	@ tmp193, pHeader_24(D)->DLC
1533:src/stm32f1xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1300              		.loc 1 1533 0
 1301 04de D5F8B471 		ldr	r7, [r5, #436]	@ _38, MEM[(struct CAN_TypeDef *)_108 + 436B]
1534:src/stm32f1xx_hal_can.c **** 
 1302              		.loc 1 1534 0
 1303 04e2 D5F8B451 		ldr	r5, [r5, #436]	@ _42, MEM[(struct CAN_TypeDef *)_108 + 436B]
1533:src/stm32f1xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1304              		.loc 1 1533 0
 1305 04e6 C7F30727 		ubfx	r7, r7, #8, #8	@ tmp195, _38,,
1534:src/stm32f1xx_hal_can.c **** 
 1306              		.loc 1 1534 0
 1307 04ea 2D0C     		lsrs	r5, r5, #16	@ tmp196, _42,
1533:src/stm32f1xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1308              		.loc 1 1533 0
 1309 04ec 9761     		str	r7, [r2, #24]	@ tmp195, pHeader_24(D)->FilterMatchIndex
1534:src/stm32f1xx_hal_can.c **** 
 1310              		.loc 1 1534 0
 1311 04ee 5561     		str	r5, [r2, #20]	@ tmp196, pHeader_24(D)->Timestamp
1537:src/stm32f1xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1312              		.loc 1 1537 0
 1313 04f0 D6F8B821 		ldr	r2, [r6, #440]	@ _45, _21->sFIFOMailBox[RxFifo_8(D)].RDLR
 1314              	.LVL120:
ARM GAS  /tmp/ccDRaG8a.s 			page 71


 1315 04f4 1A70     		strb	r2, [r3]	@ _45, *aData_47(D)
1538:src/stm32f1xx_hal_can.c ****     aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1316              		.loc 1 1538 0
 1317 04f6 0268     		ldr	r2, [r0]	@ _49, hcan_5(D)->Instance
 1318 04f8 2244     		add	r2, r2, r4	@ tmp202, tmp189
 1319 04fa D2F8B821 		ldr	r2, [r2, #440]	@ _50, _49->sFIFOMailBox[RxFifo_8(D)].RDLR
 1320 04fe 120A     		lsrs	r2, r2, #8	@ tmp204, _50,
 1321 0500 5A70     		strb	r2, [r3, #1]	@ tmp204, MEM[(uint8_t *)aData_47(D) + 1B]
1539:src/stm32f1xx_hal_can.c ****     aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1322              		.loc 1 1539 0
 1323 0502 0268     		ldr	r2, [r0]	@ _54, hcan_5(D)->Instance
 1324 0504 2244     		add	r2, r2, r4	@ tmp207, tmp189
 1325 0506 D2F8B821 		ldr	r2, [r2, #440]	@ _55, _54->sFIFOMailBox[RxFifo_8(D)].RDLR
 1326 050a 120C     		lsrs	r2, r2, #16	@ tmp209, _55,
 1327 050c 9A70     		strb	r2, [r3, #2]	@ tmp209, MEM[(uint8_t *)aData_47(D) + 2B]
1540:src/stm32f1xx_hal_can.c ****     aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1328              		.loc 1 1540 0
 1329 050e 0268     		ldr	r2, [r0]	@ _59, hcan_5(D)->Instance
 1330 0510 2244     		add	r2, r2, r4	@ tmp212, tmp189
 1331 0512 D2F8B821 		ldr	r2, [r2, #440]	@ _60, _59->sFIFOMailBox[RxFifo_8(D)].RDLR
 1332 0516 120E     		lsrs	r2, r2, #24	@ tmp214, _60,
 1333 0518 DA70     		strb	r2, [r3, #3]	@ tmp214, MEM[(uint8_t *)aData_47(D) + 3B]
1541:src/stm32f1xx_hal_can.c ****     aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1334              		.loc 1 1541 0
 1335 051a 0268     		ldr	r2, [r0]	@ _64, hcan_5(D)->Instance
 1336 051c 2244     		add	r2, r2, r4	@ tmp217, tmp189
 1337 051e D2F8BC21 		ldr	r2, [r2, #444]	@ _65, _64->sFIFOMailBox[RxFifo_8(D)].RDHR
 1338 0522 1A71     		strb	r2, [r3, #4]	@ _65, MEM[(uint8_t *)aData_47(D) + 4B]
1542:src/stm32f1xx_hal_can.c ****     aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1339              		.loc 1 1542 0
 1340 0524 0268     		ldr	r2, [r0]	@ _68, hcan_5(D)->Instance
 1341 0526 2244     		add	r2, r2, r4	@ tmp221, tmp189
 1342 0528 D2F8BC21 		ldr	r2, [r2, #444]	@ _69, _68->sFIFOMailBox[RxFifo_8(D)].RDHR
 1343 052c 120A     		lsrs	r2, r2, #8	@ tmp223, _69,
 1344 052e 5A71     		strb	r2, [r3, #5]	@ tmp223, MEM[(uint8_t *)aData_47(D) + 5B]
1543:src/stm32f1xx_hal_can.c ****     aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1345              		.loc 1 1543 0
 1346 0530 0268     		ldr	r2, [r0]	@ _73, hcan_5(D)->Instance
 1347 0532 2244     		add	r2, r2, r4	@ tmp226, tmp189
 1348 0534 D2F8BC21 		ldr	r2, [r2, #444]	@ _74, _73->sFIFOMailBox[RxFifo_8(D)].RDHR
 1349 0538 120C     		lsrs	r2, r2, #16	@ tmp228, _74,
 1350 053a 9A71     		strb	r2, [r3, #6]	@ tmp228, MEM[(uint8_t *)aData_47(D) + 6B]
1544:src/stm32f1xx_hal_can.c **** 
 1351              		.loc 1 1544 0
 1352 053c 0268     		ldr	r2, [r0]	@ _78, hcan_5(D)->Instance
 1353 053e 1444     		add	r4, r4, r2	@ tmp231, _78
 1354 0540 D4F8BC21 		ldr	r2, [r4, #444]	@ _79, _78->sFIFOMailBox[RxFifo_8(D)].RDHR
 1355 0544 120E     		lsrs	r2, r2, #24	@ tmp233, _79,
 1356 0546 DA71     		strb	r2, [r3, #7]	@ tmp233, MEM[(uint8_t *)aData_47(D) + 7B]
 1357 0548 0368     		ldr	r3, [r0]	@ _87, hcan_5(D)->Instance
 1358              	.LVL121:
1547:src/stm32f1xx_hal_can.c ****     {
 1359              		.loc 1 1547 0
 1360 054a 51B9     		cbnz	r1, .L123	@ RxFifo,
1550:src/stm32f1xx_hal_can.c ****     }
 1361              		.loc 1 1550 0
 1362 054c DA68     		ldr	r2, [r3, #12]	@ _84, _83->RF0R
ARM GAS  /tmp/ccDRaG8a.s 			page 72


 1363 054e 42F02002 		orr	r2, r2, #32	@ _85, _84,
 1364 0552 DA60     		str	r2, [r3, #12]	@ _85, _83->RF0R
 1365              	.L125:
1559:src/stm32f1xx_hal_can.c ****   }
 1366              		.loc 1 1559 0
 1367 0554 0020     		movs	r0, #0	@ <retval>,
 1368              	.LVL122:
 1369 0556 F0BD     		pop	{r4, r5, r6, r7, pc}	@
 1370              	.LVL123:
 1371              	.L121:
1529:src/stm32f1xx_hal_can.c ****     }
 1372              		.loc 1 1529 0
 1373 0558 D5F8B071 		ldr	r7, [r5, #432]	@ _29,
 1374 055c FF08     		lsrs	r7, r7, #3	@ tmp191, _29,
 1375 055e 5760     		str	r7, [r2, #4]	@ tmp191, pHeader_24(D)->ExtId
 1376 0560 B2E7     		b	.L122	@
 1377              	.LVL124:
 1378              	.L123:
1555:src/stm32f1xx_hal_can.c ****     }
 1379              		.loc 1 1555 0
 1380 0562 1A69     		ldr	r2, [r3, #16]	@ _88, _87->RF1R
 1381 0564 42F02002 		orr	r2, r2, #32	@ _89, _88,
 1382 0568 1A61     		str	r2, [r3, #16]	@ _89, _87->RF1R
 1383 056a F3E7     		b	.L125	@
 1384              	.LVL125:
 1385              	.L117:
1564:src/stm32f1xx_hal_can.c **** 
 1386              		.loc 1 1564 0
 1387 056c 436A     		ldr	r3, [r0, #36]	@ _91, hcan_5(D)->ErrorCode
 1388              	.LVL126:
 1389 056e 43F48023 		orr	r3, r3, #262144	@ _92, _91,
 1390 0572 97E7     		b	.L124	@
 1391              		.cfi_endproc
 1392              	.LFE80:
 1393              		.size	HAL_CAN_GetRxMessage, .-HAL_CAN_GetRxMessage
 1394              		.align	1
 1395              		.global	HAL_CAN_GetRxFifoFillLevel
 1396              		.syntax unified
 1397              		.thumb
 1398              		.thumb_func
 1399              		.fpu softvfp
 1400              		.type	HAL_CAN_GetRxFifoFillLevel, %function
 1401              	HAL_CAN_GetRxFifoFillLevel:
 1402              	.LFB81:
1569:src/stm32f1xx_hal_can.c **** 
1570:src/stm32f1xx_hal_can.c **** /**
1571:src/stm32f1xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
1572:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1573:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1574:src/stm32f1xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
1575:src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1576:src/stm32f1xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1577:src/stm32f1xx_hal_can.c ****   */
1578:src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
1579:src/stm32f1xx_hal_can.c **** {
 1403              		.loc 1 1579 0
 1404              		.cfi_startproc
ARM GAS  /tmp/ccDRaG8a.s 			page 73


 1405              		@ args = 0, pretend = 0, frame = 0
 1406              		@ frame_needed = 0, uses_anonymous_args = 0
 1407              		@ link register save eliminated.
 1408              	.LVL127:
1580:src/stm32f1xx_hal_can.c ****   uint32_t filllevel = 0U;
1581:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1409              		.loc 1 1581 0
 1410 0574 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2	@ hcan_3(D)->State, hcan_3(D)->State
 1411              	.LVL128:
1582:src/stm32f1xx_hal_can.c **** 
1583:src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1584:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1585:src/stm32f1xx_hal_can.c **** 
1586:src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1412              		.loc 1 1586 0
 1413 0578 013B     		subs	r3, r3, #1	@ tmp123, hcan_3(D)->State,
 1414              	.LVL129:
 1415 057a 012B     		cmp	r3, #1	@ tmp123,
 1416 057c 07D8     		bhi	.L132	@,
 1417 057e 0368     		ldr	r3, [r0]	@ _10, hcan_3(D)->Instance
1587:src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1588:src/stm32f1xx_hal_can.c ****   {
1589:src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
 1418              		.loc 1 1589 0
 1419 0580 19B9     		cbnz	r1, .L131	@ RxFifo,
1590:src/stm32f1xx_hal_can.c ****     {
1591:src/stm32f1xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 1420              		.loc 1 1591 0
 1421 0582 D868     		ldr	r0, [r3, #12]	@ _8, _7->RF0R
 1422              	.LVL130:
 1423              	.L133:
1592:src/stm32f1xx_hal_can.c ****     }
1593:src/stm32f1xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
1594:src/stm32f1xx_hal_can.c ****     {
1595:src/stm32f1xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 1424              		.loc 1 1595 0
 1425 0584 00F00300 		and	r0, r0, #3	@ <retval>, _11,
 1426              	.LVL131:
 1427 0588 7047     		bx	lr	@
 1428              	.LVL132:
 1429              	.L131:
 1430 058a 1869     		ldr	r0, [r3, #16]	@ _11, _10->RF1R
 1431              	.LVL133:
 1432 058c FAE7     		b	.L133	@
 1433              	.LVL134:
 1434              	.L132:
1580:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1435              		.loc 1 1580 0
 1436 058e 0020     		movs	r0, #0	@ <retval>,
 1437              	.LVL135:
1596:src/stm32f1xx_hal_can.c ****     }
1597:src/stm32f1xx_hal_can.c ****   }
1598:src/stm32f1xx_hal_can.c **** 
1599:src/stm32f1xx_hal_can.c ****   /* Return Rx FIFO fill level */
1600:src/stm32f1xx_hal_can.c ****   return filllevel;
1601:src/stm32f1xx_hal_can.c **** }
 1438              		.loc 1 1601 0
ARM GAS  /tmp/ccDRaG8a.s 			page 74


 1439 0590 7047     		bx	lr	@
 1440              		.cfi_endproc
 1441              	.LFE81:
 1442              		.size	HAL_CAN_GetRxFifoFillLevel, .-HAL_CAN_GetRxFifoFillLevel
 1443              		.align	1
 1444              		.global	HAL_CAN_ActivateNotification
 1445              		.syntax unified
 1446              		.thumb
 1447              		.thumb_func
 1448              		.fpu softvfp
 1449              		.type	HAL_CAN_ActivateNotification, %function
 1450              	HAL_CAN_ActivateNotification:
 1451              	.LFB82:
1602:src/stm32f1xx_hal_can.c **** 
1603:src/stm32f1xx_hal_can.c **** /**
1604:src/stm32f1xx_hal_can.c ****   * @}
1605:src/stm32f1xx_hal_can.c ****   */
1606:src/stm32f1xx_hal_can.c **** 
1607:src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1608:src/stm32f1xx_hal_can.c ****  *  @brief    Interrupts management
1609:src/stm32f1xx_hal_can.c ****  *
1610:src/stm32f1xx_hal_can.c **** @verbatim
1611:src/stm32f1xx_hal_can.c ****   ==============================================================================
1612:src/stm32f1xx_hal_can.c ****                        ##### Interrupts management #####
1613:src/stm32f1xx_hal_can.c ****   ==============================================================================
1614:src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
1615:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1616:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1617:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1618:src/stm32f1xx_hal_can.c **** 
1619:src/stm32f1xx_hal_can.c **** @endverbatim
1620:src/stm32f1xx_hal_can.c ****   * @{
1621:src/stm32f1xx_hal_can.c ****   */
1622:src/stm32f1xx_hal_can.c **** 
1623:src/stm32f1xx_hal_can.c **** /**
1624:src/stm32f1xx_hal_can.c ****   * @brief  Enable interrupts.
1625:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1626:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1627:src/stm32f1xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1628:src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1629:src/stm32f1xx_hal_can.c ****   * @retval HAL status
1630:src/stm32f1xx_hal_can.c ****   */
1631:src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1632:src/stm32f1xx_hal_can.c **** {
 1452              		.loc 1 1632 0
 1453              		.cfi_startproc
 1454              		@ args = 0, pretend = 0, frame = 0
 1455              		@ frame_needed = 0, uses_anonymous_args = 0
 1456              		@ link register save eliminated.
 1457              	.LVL136:
1633:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1458              		.loc 1 1633 0
 1459 0592 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2	@ hcan_4(D)->State, hcan_4(D)->State
 1460              	.LVL137:
1634:src/stm32f1xx_hal_can.c **** 
1635:src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1636:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
ARM GAS  /tmp/ccDRaG8a.s 			page 75


1637:src/stm32f1xx_hal_can.c **** 
1638:src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1461              		.loc 1 1638 0
 1462 0596 013B     		subs	r3, r3, #1	@ tmp124, hcan_4(D)->State,
 1463              	.LVL138:
 1464 0598 012B     		cmp	r3, #1	@ tmp124,
 1465 059a 05D8     		bhi	.L135	@,
1639:src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1640:src/stm32f1xx_hal_can.c ****   {
1641:src/stm32f1xx_hal_can.c ****     /* Enable the selected interrupts */
1642:src/stm32f1xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 1466              		.loc 1 1642 0
 1467 059c 0268     		ldr	r2, [r0]	@ _7, hcan_4(D)->Instance
1643:src/stm32f1xx_hal_can.c **** 
1644:src/stm32f1xx_hal_can.c ****     /* Return function status */
1645:src/stm32f1xx_hal_can.c ****     return HAL_OK;
 1468              		.loc 1 1645 0
 1469 059e 0020     		movs	r0, #0	@ <retval>,
 1470              	.LVL139:
1642:src/stm32f1xx_hal_can.c **** 
 1471              		.loc 1 1642 0
 1472 05a0 5369     		ldr	r3, [r2, #20]	@ _8, _7->IER
 1473 05a2 1943     		orrs	r1, r1, r3	@, _10, ActiveITs, _8
 1474              	.LVL140:
 1475 05a4 5161     		str	r1, [r2, #20]	@ _10, _7->IER
 1476              		.loc 1 1645 0
 1477 05a6 7047     		bx	lr	@
 1478              	.LVL141:
 1479              	.L135:
1646:src/stm32f1xx_hal_can.c ****   }
1647:src/stm32f1xx_hal_can.c ****   else
1648:src/stm32f1xx_hal_can.c ****   {
1649:src/stm32f1xx_hal_can.c ****     /* Update error code */
1650:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1480              		.loc 1 1650 0
 1481 05a8 436A     		ldr	r3, [r0, #36]	@ _12, hcan_4(D)->ErrorCode
 1482 05aa 43F48023 		orr	r3, r3, #262144	@ _13, _12,
 1483 05ae 4362     		str	r3, [r0, #36]	@ _13, hcan_4(D)->ErrorCode
1651:src/stm32f1xx_hal_can.c **** 
1652:src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1484              		.loc 1 1652 0
 1485 05b0 0120     		movs	r0, #1	@ <retval>,
 1486              	.LVL142:
1653:src/stm32f1xx_hal_can.c ****   }
1654:src/stm32f1xx_hal_can.c **** }
 1487              		.loc 1 1654 0
 1488 05b2 7047     		bx	lr	@
 1489              		.cfi_endproc
 1490              	.LFE82:
 1491              		.size	HAL_CAN_ActivateNotification, .-HAL_CAN_ActivateNotification
 1492              		.align	1
 1493              		.global	HAL_CAN_DeactivateNotification
 1494              		.syntax unified
 1495              		.thumb
 1496              		.thumb_func
 1497              		.fpu softvfp
 1498              		.type	HAL_CAN_DeactivateNotification, %function
ARM GAS  /tmp/ccDRaG8a.s 			page 76


 1499              	HAL_CAN_DeactivateNotification:
 1500              	.LFB83:
1655:src/stm32f1xx_hal_can.c **** 
1656:src/stm32f1xx_hal_can.c **** /**
1657:src/stm32f1xx_hal_can.c ****   * @brief  Disable interrupts.
1658:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1659:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1660:src/stm32f1xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1661:src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1662:src/stm32f1xx_hal_can.c ****   * @retval HAL status
1663:src/stm32f1xx_hal_can.c ****   */
1664:src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1665:src/stm32f1xx_hal_can.c **** {
 1501              		.loc 1 1665 0
 1502              		.cfi_startproc
 1503              		@ args = 0, pretend = 0, frame = 0
 1504              		@ frame_needed = 0, uses_anonymous_args = 0
 1505              		@ link register save eliminated.
 1506              	.LVL143:
1666:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1507              		.loc 1 1666 0
 1508 05b4 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2	@ hcan_4(D)->State, hcan_4(D)->State
 1509              	.LVL144:
1667:src/stm32f1xx_hal_can.c **** 
1668:src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1669:src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
1670:src/stm32f1xx_hal_can.c **** 
1671:src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1510              		.loc 1 1671 0
 1511 05b8 013B     		subs	r3, r3, #1	@ tmp125, hcan_4(D)->State,
 1512              	.LVL145:
 1513 05ba 012B     		cmp	r3, #1	@ tmp125,
 1514 05bc 06D8     		bhi	.L138	@,
1672:src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1673:src/stm32f1xx_hal_can.c ****   {
1674:src/stm32f1xx_hal_can.c ****     /* Disable the selected interrupts */
1675:src/stm32f1xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 1515              		.loc 1 1675 0
 1516 05be 0268     		ldr	r2, [r0]	@ _7, hcan_4(D)->Instance
1676:src/stm32f1xx_hal_can.c **** 
1677:src/stm32f1xx_hal_can.c ****     /* Return function status */
1678:src/stm32f1xx_hal_can.c ****     return HAL_OK;
 1517              		.loc 1 1678 0
 1518 05c0 0020     		movs	r0, #0	@ <retval>,
 1519              	.LVL146:
1675:src/stm32f1xx_hal_can.c **** 
 1520              		.loc 1 1675 0
 1521 05c2 5369     		ldr	r3, [r2, #20]	@ _8, _7->IER
 1522 05c4 23EA0101 		bic	r1, r3, r1	@ _11, _8, InactiveITs
 1523              	.LVL147:
 1524 05c8 5161     		str	r1, [r2, #20]	@ _11, _7->IER
 1525              		.loc 1 1678 0
 1526 05ca 7047     		bx	lr	@
 1527              	.LVL148:
 1528              	.L138:
1679:src/stm32f1xx_hal_can.c ****   }
1680:src/stm32f1xx_hal_can.c ****   else
ARM GAS  /tmp/ccDRaG8a.s 			page 77


1681:src/stm32f1xx_hal_can.c ****   {
1682:src/stm32f1xx_hal_can.c ****     /* Update error code */
1683:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1529              		.loc 1 1683 0
 1530 05cc 436A     		ldr	r3, [r0, #36]	@ _13, hcan_4(D)->ErrorCode
 1531 05ce 43F48023 		orr	r3, r3, #262144	@ _14, _13,
 1532 05d2 4362     		str	r3, [r0, #36]	@ _14, hcan_4(D)->ErrorCode
1684:src/stm32f1xx_hal_can.c **** 
1685:src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1533              		.loc 1 1685 0
 1534 05d4 0120     		movs	r0, #1	@ <retval>,
 1535              	.LVL149:
1686:src/stm32f1xx_hal_can.c ****   }
1687:src/stm32f1xx_hal_can.c **** }
 1536              		.loc 1 1687 0
 1537 05d6 7047     		bx	lr	@
 1538              		.cfi_endproc
 1539              	.LFE83:
 1540              		.size	HAL_CAN_DeactivateNotification, .-HAL_CAN_DeactivateNotification
 1541              		.align	1
 1542              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 1543              		.syntax unified
 1544              		.thumb
 1545              		.thumb_func
 1546              		.fpu softvfp
 1547              		.type	HAL_CAN_TxMailbox0CompleteCallback, %function
 1548              	HAL_CAN_TxMailbox0CompleteCallback:
 1549              	.LFB125:
 1550              		.cfi_startproc
 1551              		@ args = 0, pretend = 0, frame = 0
 1552              		@ frame_needed = 0, uses_anonymous_args = 0
 1553              		@ link register save eliminated.
 1554 05d8 7047     		bx	lr	@
 1555              		.cfi_endproc
 1556              	.LFE125:
 1557              		.size	HAL_CAN_TxMailbox0CompleteCallback, .-HAL_CAN_TxMailbox0CompleteCallback
 1558              		.align	1
 1559              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 1560              		.syntax unified
 1561              		.thumb
 1562              		.thumb_func
 1563              		.fpu softvfp
 1564              		.type	HAL_CAN_TxMailbox1CompleteCallback, %function
 1565              	HAL_CAN_TxMailbox1CompleteCallback:
 1566              	.LFB123:
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 0
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
 1570              		@ link register save eliminated.
 1571 05da 7047     		bx	lr	@
 1572              		.cfi_endproc
 1573              	.LFE123:
 1574              		.size	HAL_CAN_TxMailbox1CompleteCallback, .-HAL_CAN_TxMailbox1CompleteCallback
 1575              		.align	1
 1576              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 1577              		.syntax unified
 1578              		.thumb
ARM GAS  /tmp/ccDRaG8a.s 			page 78


 1579              		.thumb_func
 1580              		.fpu softvfp
 1581              		.type	HAL_CAN_TxMailbox2CompleteCallback, %function
 1582              	HAL_CAN_TxMailbox2CompleteCallback:
 1583              	.LFB121:
 1584              		.cfi_startproc
 1585              		@ args = 0, pretend = 0, frame = 0
 1586              		@ frame_needed = 0, uses_anonymous_args = 0
 1587              		@ link register save eliminated.
 1588 05dc 7047     		bx	lr	@
 1589              		.cfi_endproc
 1590              	.LFE121:
 1591              		.size	HAL_CAN_TxMailbox2CompleteCallback, .-HAL_CAN_TxMailbox2CompleteCallback
 1592              		.align	1
 1593              		.weak	HAL_CAN_TxMailbox0AbortCallback
 1594              		.syntax unified
 1595              		.thumb
 1596              		.thumb_func
 1597              		.fpu softvfp
 1598              		.type	HAL_CAN_TxMailbox0AbortCallback, %function
 1599              	HAL_CAN_TxMailbox0AbortCallback:
 1600              	.LFB119:
 1601              		.cfi_startproc
 1602              		@ args = 0, pretend = 0, frame = 0
 1603              		@ frame_needed = 0, uses_anonymous_args = 0
 1604              		@ link register save eliminated.
 1605 05de 7047     		bx	lr	@
 1606              		.cfi_endproc
 1607              	.LFE119:
 1608              		.size	HAL_CAN_TxMailbox0AbortCallback, .-HAL_CAN_TxMailbox0AbortCallback
 1609              		.align	1
 1610              		.weak	HAL_CAN_TxMailbox1AbortCallback
 1611              		.syntax unified
 1612              		.thumb
 1613              		.thumb_func
 1614              		.fpu softvfp
 1615              		.type	HAL_CAN_TxMailbox1AbortCallback, %function
 1616              	HAL_CAN_TxMailbox1AbortCallback:
 1617              	.LFB117:
 1618              		.cfi_startproc
 1619              		@ args = 0, pretend = 0, frame = 0
 1620              		@ frame_needed = 0, uses_anonymous_args = 0
 1621              		@ link register save eliminated.
 1622 05e0 7047     		bx	lr	@
 1623              		.cfi_endproc
 1624              	.LFE117:
 1625              		.size	HAL_CAN_TxMailbox1AbortCallback, .-HAL_CAN_TxMailbox1AbortCallback
 1626              		.align	1
 1627              		.weak	HAL_CAN_TxMailbox2AbortCallback
 1628              		.syntax unified
 1629              		.thumb
 1630              		.thumb_func
 1631              		.fpu softvfp
 1632              		.type	HAL_CAN_TxMailbox2AbortCallback, %function
 1633              	HAL_CAN_TxMailbox2AbortCallback:
 1634              	.LFB115:
 1635              		.cfi_startproc
ARM GAS  /tmp/ccDRaG8a.s 			page 79


 1636              		@ args = 0, pretend = 0, frame = 0
 1637              		@ frame_needed = 0, uses_anonymous_args = 0
 1638              		@ link register save eliminated.
 1639 05e2 7047     		bx	lr	@
 1640              		.cfi_endproc
 1641              	.LFE115:
 1642              		.size	HAL_CAN_TxMailbox2AbortCallback, .-HAL_CAN_TxMailbox2AbortCallback
 1643              		.align	1
 1644              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 1645              		.syntax unified
 1646              		.thumb
 1647              		.thumb_func
 1648              		.fpu softvfp
 1649              		.type	HAL_CAN_RxFifo0MsgPendingCallback, %function
 1650              	HAL_CAN_RxFifo0MsgPendingCallback:
 1651              	.LFB113:
 1652              		.cfi_startproc
 1653              		@ args = 0, pretend = 0, frame = 0
 1654              		@ frame_needed = 0, uses_anonymous_args = 0
 1655              		@ link register save eliminated.
 1656 05e4 7047     		bx	lr	@
 1657              		.cfi_endproc
 1658              	.LFE113:
 1659              		.size	HAL_CAN_RxFifo0MsgPendingCallback, .-HAL_CAN_RxFifo0MsgPendingCallback
 1660              		.align	1
 1661              		.weak	HAL_CAN_RxFifo0FullCallback
 1662              		.syntax unified
 1663              		.thumb
 1664              		.thumb_func
 1665              		.fpu softvfp
 1666              		.type	HAL_CAN_RxFifo0FullCallback, %function
 1667              	HAL_CAN_RxFifo0FullCallback:
 1668              	.LFB111:
 1669              		.cfi_startproc
 1670              		@ args = 0, pretend = 0, frame = 0
 1671              		@ frame_needed = 0, uses_anonymous_args = 0
 1672              		@ link register save eliminated.
 1673 05e6 7047     		bx	lr	@
 1674              		.cfi_endproc
 1675              	.LFE111:
 1676              		.size	HAL_CAN_RxFifo0FullCallback, .-HAL_CAN_RxFifo0FullCallback
 1677              		.align	1
 1678              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 1679              		.syntax unified
 1680              		.thumb
 1681              		.thumb_func
 1682              		.fpu softvfp
 1683              		.type	HAL_CAN_RxFifo1MsgPendingCallback, %function
 1684              	HAL_CAN_RxFifo1MsgPendingCallback:
 1685              	.LFB109:
 1686              		.cfi_startproc
 1687              		@ args = 0, pretend = 0, frame = 0
 1688              		@ frame_needed = 0, uses_anonymous_args = 0
 1689              		@ link register save eliminated.
 1690 05e8 7047     		bx	lr	@
 1691              		.cfi_endproc
 1692              	.LFE109:
ARM GAS  /tmp/ccDRaG8a.s 			page 80


 1693              		.size	HAL_CAN_RxFifo1MsgPendingCallback, .-HAL_CAN_RxFifo1MsgPendingCallback
 1694              		.align	1
 1695              		.weak	HAL_CAN_RxFifo1FullCallback
 1696              		.syntax unified
 1697              		.thumb
 1698              		.thumb_func
 1699              		.fpu softvfp
 1700              		.type	HAL_CAN_RxFifo1FullCallback, %function
 1701              	HAL_CAN_RxFifo1FullCallback:
 1702              	.LFB107:
 1703              		.cfi_startproc
 1704              		@ args = 0, pretend = 0, frame = 0
 1705              		@ frame_needed = 0, uses_anonymous_args = 0
 1706              		@ link register save eliminated.
 1707 05ea 7047     		bx	lr	@
 1708              		.cfi_endproc
 1709              	.LFE107:
 1710              		.size	HAL_CAN_RxFifo1FullCallback, .-HAL_CAN_RxFifo1FullCallback
 1711              		.align	1
 1712              		.weak	HAL_CAN_SleepCallback
 1713              		.syntax unified
 1714              		.thumb
 1715              		.thumb_func
 1716              		.fpu softvfp
 1717              		.type	HAL_CAN_SleepCallback, %function
 1718              	HAL_CAN_SleepCallback:
 1719              	.LFB105:
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 0
 1722              		@ frame_needed = 0, uses_anonymous_args = 0
 1723              		@ link register save eliminated.
 1724 05ec 7047     		bx	lr	@
 1725              		.cfi_endproc
 1726              	.LFE105:
 1727              		.size	HAL_CAN_SleepCallback, .-HAL_CAN_SleepCallback
 1728              		.align	1
 1729              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 1730              		.syntax unified
 1731              		.thumb
 1732              		.thumb_func
 1733              		.fpu softvfp
 1734              		.type	HAL_CAN_WakeUpFromRxMsgCallback, %function
 1735              	HAL_CAN_WakeUpFromRxMsgCallback:
 1736              	.LFB103:
 1737              		.cfi_startproc
 1738              		@ args = 0, pretend = 0, frame = 0
 1739              		@ frame_needed = 0, uses_anonymous_args = 0
 1740              		@ link register save eliminated.
 1741 05ee 7047     		bx	lr	@
 1742              		.cfi_endproc
 1743              	.LFE103:
 1744              		.size	HAL_CAN_WakeUpFromRxMsgCallback, .-HAL_CAN_WakeUpFromRxMsgCallback
 1745              		.align	1
 1746              		.weak	HAL_CAN_ErrorCallback
 1747              		.syntax unified
 1748              		.thumb
 1749              		.thumb_func
ARM GAS  /tmp/ccDRaG8a.s 			page 81


 1750              		.fpu softvfp
 1751              		.type	HAL_CAN_ErrorCallback, %function
 1752              	HAL_CAN_ErrorCallback:
 1753              	.LFB97:
1688:src/stm32f1xx_hal_can.c **** 
1689:src/stm32f1xx_hal_can.c **** /**
1690:src/stm32f1xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1691:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1692:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1693:src/stm32f1xx_hal_can.c ****   * @retval None
1694:src/stm32f1xx_hal_can.c ****   */
1695:src/stm32f1xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1696:src/stm32f1xx_hal_can.c **** {
1697:src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
1698:src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
1699:src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
1700:src/stm32f1xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
1701:src/stm32f1xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
1702:src/stm32f1xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
1703:src/stm32f1xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
1704:src/stm32f1xx_hal_can.c **** 
1705:src/stm32f1xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1706:src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
1707:src/stm32f1xx_hal_can.c ****   {
1708:src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1709:src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != 0U)
1710:src/stm32f1xx_hal_can.c ****     {
1711:src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1712:src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
1713:src/stm32f1xx_hal_can.c **** 
1714:src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != 0U)
1715:src/stm32f1xx_hal_can.c ****       {
1716:src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
1717:src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1718:src/stm32f1xx_hal_can.c ****         /* Call registered callback*/
1719:src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback(hcan);
1720:src/stm32f1xx_hal_can.c **** #else
1721:src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1722:src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
1723:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1724:src/stm32f1xx_hal_can.c ****       }
1725:src/stm32f1xx_hal_can.c ****       else
1726:src/stm32f1xx_hal_can.c ****       {
1727:src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != 0U)
1728:src/stm32f1xx_hal_can.c ****         {
1729:src/stm32f1xx_hal_can.c ****           /* Update error code */
1730:src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
1731:src/stm32f1xx_hal_can.c ****         }
1732:src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != 0U)
1733:src/stm32f1xx_hal_can.c ****         {
1734:src/stm32f1xx_hal_can.c ****           /* Update error code */
1735:src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
1736:src/stm32f1xx_hal_can.c ****         }
1737:src/stm32f1xx_hal_can.c ****         else
1738:src/stm32f1xx_hal_can.c ****         {
1739:src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
1740:src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
ARM GAS  /tmp/ccDRaG8a.s 			page 82


1741:src/stm32f1xx_hal_can.c ****           /* Call registered callback*/
1742:src/stm32f1xx_hal_can.c ****           hcan->TxMailbox0AbortCallback(hcan);
1743:src/stm32f1xx_hal_can.c **** #else
1744:src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1745:src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
1746:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1747:src/stm32f1xx_hal_can.c ****         }
1748:src/stm32f1xx_hal_can.c ****       }
1749:src/stm32f1xx_hal_can.c ****     }
1750:src/stm32f1xx_hal_can.c **** 
1751:src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1752:src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != 0U)
1753:src/stm32f1xx_hal_can.c ****     {
1754:src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1755:src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
1756:src/stm32f1xx_hal_can.c **** 
1757:src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != 0U)
1758:src/stm32f1xx_hal_can.c ****       {
1759:src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1760:src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1761:src/stm32f1xx_hal_can.c ****         /* Call registered callback*/
1762:src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback(hcan);
1763:src/stm32f1xx_hal_can.c **** #else
1764:src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1765:src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
1766:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1767:src/stm32f1xx_hal_can.c ****       }
1768:src/stm32f1xx_hal_can.c ****       else
1769:src/stm32f1xx_hal_can.c ****       {
1770:src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != 0U)
1771:src/stm32f1xx_hal_can.c ****         {
1772:src/stm32f1xx_hal_can.c ****           /* Update error code */
1773:src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
1774:src/stm32f1xx_hal_can.c ****         }
1775:src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != 0U)
1776:src/stm32f1xx_hal_can.c ****         {
1777:src/stm32f1xx_hal_can.c ****           /* Update error code */
1778:src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
1779:src/stm32f1xx_hal_can.c ****         }
1780:src/stm32f1xx_hal_can.c ****         else
1781:src/stm32f1xx_hal_can.c ****         {
1782:src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
1783:src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1784:src/stm32f1xx_hal_can.c ****           /* Call registered callback*/
1785:src/stm32f1xx_hal_can.c ****           hcan->TxMailbox1AbortCallback(hcan);
1786:src/stm32f1xx_hal_can.c **** #else
1787:src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1788:src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
1789:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1790:src/stm32f1xx_hal_can.c ****         }
1791:src/stm32f1xx_hal_can.c ****       }
1792:src/stm32f1xx_hal_can.c ****     }
1793:src/stm32f1xx_hal_can.c **** 
1794:src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1795:src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != 0U)
1796:src/stm32f1xx_hal_can.c ****     {
1797:src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
ARM GAS  /tmp/ccDRaG8a.s 			page 83


1798:src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
1799:src/stm32f1xx_hal_can.c **** 
1800:src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != 0U)
1801:src/stm32f1xx_hal_can.c ****       {
1802:src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1803:src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1804:src/stm32f1xx_hal_can.c ****         /* Call registered callback*/
1805:src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback(hcan);
1806:src/stm32f1xx_hal_can.c **** #else
1807:src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1808:src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
1809:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1810:src/stm32f1xx_hal_can.c ****       }
1811:src/stm32f1xx_hal_can.c ****       else
1812:src/stm32f1xx_hal_can.c ****       {
1813:src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != 0U)
1814:src/stm32f1xx_hal_can.c ****         {
1815:src/stm32f1xx_hal_can.c ****           /* Update error code */
1816:src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
1817:src/stm32f1xx_hal_can.c ****         }
1818:src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != 0U)
1819:src/stm32f1xx_hal_can.c ****         {
1820:src/stm32f1xx_hal_can.c ****           /* Update error code */
1821:src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
1822:src/stm32f1xx_hal_can.c ****         }
1823:src/stm32f1xx_hal_can.c ****         else
1824:src/stm32f1xx_hal_can.c ****         {
1825:src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1826:src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1827:src/stm32f1xx_hal_can.c ****           /* Call registered callback*/
1828:src/stm32f1xx_hal_can.c ****           hcan->TxMailbox2AbortCallback(hcan);
1829:src/stm32f1xx_hal_can.c **** #else
1830:src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1831:src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
1832:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1833:src/stm32f1xx_hal_can.c ****         }
1834:src/stm32f1xx_hal_can.c ****       }
1835:src/stm32f1xx_hal_can.c ****     }
1836:src/stm32f1xx_hal_can.c ****   }
1837:src/stm32f1xx_hal_can.c **** 
1838:src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1839:src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
1840:src/stm32f1xx_hal_can.c ****   {
1841:src/stm32f1xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
1842:src/stm32f1xx_hal_can.c ****     {
1843:src/stm32f1xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
1844:src/stm32f1xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
1845:src/stm32f1xx_hal_can.c **** 
1846:src/stm32f1xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1847:src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
1848:src/stm32f1xx_hal_can.c ****     }
1849:src/stm32f1xx_hal_can.c ****   }
1850:src/stm32f1xx_hal_can.c **** 
1851:src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1852:src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
1853:src/stm32f1xx_hal_can.c ****   {
1854:src/stm32f1xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
ARM GAS  /tmp/ccDRaG8a.s 			page 84


1855:src/stm32f1xx_hal_can.c ****     {
1856:src/stm32f1xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
1857:src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
1858:src/stm32f1xx_hal_can.c **** 
1859:src/stm32f1xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1860:src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1861:src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1862:src/stm32f1xx_hal_can.c ****       hcan->RxFifo0FullCallback(hcan);
1863:src/stm32f1xx_hal_can.c **** #else
1864:src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1865:src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
1866:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1867:src/stm32f1xx_hal_can.c ****     }
1868:src/stm32f1xx_hal_can.c ****   }
1869:src/stm32f1xx_hal_can.c **** 
1870:src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1871:src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
1872:src/stm32f1xx_hal_can.c ****   {
1873:src/stm32f1xx_hal_can.c ****     /* Check if message is still pending */
1874:src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
1875:src/stm32f1xx_hal_can.c ****     {
1876:src/stm32f1xx_hal_can.c ****       /* Receive FIFO 0 mesage pending Callback */
1877:src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1878:src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1879:src/stm32f1xx_hal_can.c ****       hcan->RxFifo0MsgPendingCallback(hcan);
1880:src/stm32f1xx_hal_can.c **** #else
1881:src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1882:src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
1883:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1884:src/stm32f1xx_hal_can.c ****     }
1885:src/stm32f1xx_hal_can.c ****   }
1886:src/stm32f1xx_hal_can.c **** 
1887:src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1888:src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
1889:src/stm32f1xx_hal_can.c ****   {
1890:src/stm32f1xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
1891:src/stm32f1xx_hal_can.c ****     {
1892:src/stm32f1xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1893:src/stm32f1xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
1894:src/stm32f1xx_hal_can.c **** 
1895:src/stm32f1xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
1896:src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
1897:src/stm32f1xx_hal_can.c ****     }
1898:src/stm32f1xx_hal_can.c ****   }
1899:src/stm32f1xx_hal_can.c **** 
1900:src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1901:src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
1902:src/stm32f1xx_hal_can.c ****   {
1903:src/stm32f1xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
1904:src/stm32f1xx_hal_can.c ****     {
1905:src/stm32f1xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1906:src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
1907:src/stm32f1xx_hal_can.c **** 
1908:src/stm32f1xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1909:src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1910:src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1911:src/stm32f1xx_hal_can.c ****       hcan->RxFifo1FullCallback(hcan);
ARM GAS  /tmp/ccDRaG8a.s 			page 85


1912:src/stm32f1xx_hal_can.c **** #else
1913:src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1914:src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
1915:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1916:src/stm32f1xx_hal_can.c ****     }
1917:src/stm32f1xx_hal_can.c ****   }
1918:src/stm32f1xx_hal_can.c **** 
1919:src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
1920:src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
1921:src/stm32f1xx_hal_can.c ****   {
1922:src/stm32f1xx_hal_can.c ****     /* Check if message is still pending */
1923:src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
1924:src/stm32f1xx_hal_can.c ****     {
1925:src/stm32f1xx_hal_can.c ****       /* Receive FIFO 1 mesage pending Callback */
1926:src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1927:src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1928:src/stm32f1xx_hal_can.c ****       hcan->RxFifo1MsgPendingCallback(hcan);
1929:src/stm32f1xx_hal_can.c **** #else
1930:src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1931:src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
1932:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1933:src/stm32f1xx_hal_can.c ****     }
1934:src/stm32f1xx_hal_can.c ****   }
1935:src/stm32f1xx_hal_can.c **** 
1936:src/stm32f1xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1937:src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
1938:src/stm32f1xx_hal_can.c ****   {
1939:src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != 0U)
1940:src/stm32f1xx_hal_can.c ****     {
1941:src/stm32f1xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
1942:src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
1943:src/stm32f1xx_hal_can.c **** 
1944:src/stm32f1xx_hal_can.c ****       /* Sleep Callback */
1945:src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1946:src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1947:src/stm32f1xx_hal_can.c ****       hcan->SleepCallback(hcan);
1948:src/stm32f1xx_hal_can.c **** #else
1949:src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1950:src/stm32f1xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
1951:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1952:src/stm32f1xx_hal_can.c ****     }
1953:src/stm32f1xx_hal_can.c ****   }
1954:src/stm32f1xx_hal_can.c **** 
1955:src/stm32f1xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
1956:src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != 0U)
1957:src/stm32f1xx_hal_can.c ****   {
1958:src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != 0U)
1959:src/stm32f1xx_hal_can.c ****     {
1960:src/stm32f1xx_hal_can.c ****       /* Clear WakeUp Flag */
1961:src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
1962:src/stm32f1xx_hal_can.c **** 
1963:src/stm32f1xx_hal_can.c ****       /* WakeUp Callback */
1964:src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1965:src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1966:src/stm32f1xx_hal_can.c ****       hcan->WakeUpFromRxMsgCallback(hcan);
1967:src/stm32f1xx_hal_can.c **** #else
1968:src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
ARM GAS  /tmp/ccDRaG8a.s 			page 86


1969:src/stm32f1xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
1970:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1971:src/stm32f1xx_hal_can.c ****     }
1972:src/stm32f1xx_hal_can.c ****   }
1973:src/stm32f1xx_hal_can.c **** 
1974:src/stm32f1xx_hal_can.c ****   /* Error interrupts management *********************************************/
1975:src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != 0U)
1976:src/stm32f1xx_hal_can.c ****   {
1977:src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != 0U)
1978:src/stm32f1xx_hal_can.c ****     {
1979:src/stm32f1xx_hal_can.c ****       /* Check Error Warning Flag */
1980:src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
1981:src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
1982:src/stm32f1xx_hal_can.c ****       {
1983:src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Error Warning */
1984:src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
1985:src/stm32f1xx_hal_can.c **** 
1986:src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
1987:src/stm32f1xx_hal_can.c ****       }
1988:src/stm32f1xx_hal_can.c **** 
1989:src/stm32f1xx_hal_can.c ****       /* Check Error Passive Flag */
1990:src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
1991:src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
1992:src/stm32f1xx_hal_can.c ****       {
1993:src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Error Passive */
1994:src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
1995:src/stm32f1xx_hal_can.c **** 
1996:src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
1997:src/stm32f1xx_hal_can.c ****       }
1998:src/stm32f1xx_hal_can.c **** 
1999:src/stm32f1xx_hal_can.c ****       /* Check Bus-off Flag */
2000:src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
2001:src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
2002:src/stm32f1xx_hal_can.c ****       {
2003:src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
2004:src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
2005:src/stm32f1xx_hal_can.c **** 
2006:src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
2007:src/stm32f1xx_hal_can.c ****       }
2008:src/stm32f1xx_hal_can.c **** 
2009:src/stm32f1xx_hal_can.c ****       /* Check Last Error Code Flag */
2010:src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
2011:src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
2012:src/stm32f1xx_hal_can.c ****       {
2013:src/stm32f1xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
2014:src/stm32f1xx_hal_can.c ****         {
2015:src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_0):
2016:src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Stuff error */
2017:src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
2018:src/stm32f1xx_hal_can.c ****             break;
2019:src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1):
2020:src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Form error */
2021:src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
2022:src/stm32f1xx_hal_can.c ****             break;
2023:src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
2024:src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
2025:src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
ARM GAS  /tmp/ccDRaG8a.s 			page 87


2026:src/stm32f1xx_hal_can.c ****             break;
2027:src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2):
2028:src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
2029:src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
2030:src/stm32f1xx_hal_can.c ****             break;
2031:src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
2032:src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
2033:src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
2034:src/stm32f1xx_hal_can.c ****             break;
2035:src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
2036:src/stm32f1xx_hal_can.c ****             /* Set CAN error code to CRC error */
2037:src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
2038:src/stm32f1xx_hal_can.c ****             break;
2039:src/stm32f1xx_hal_can.c ****           default:
2040:src/stm32f1xx_hal_can.c ****             break;
2041:src/stm32f1xx_hal_can.c ****         }
2042:src/stm32f1xx_hal_can.c **** 
2043:src/stm32f1xx_hal_can.c ****         /* Clear Last error code Flag */
2044:src/stm32f1xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
2045:src/stm32f1xx_hal_can.c ****       }
2046:src/stm32f1xx_hal_can.c ****     }
2047:src/stm32f1xx_hal_can.c **** 
2048:src/stm32f1xx_hal_can.c ****     /* Clear ERRI Flag */
2049:src/stm32f1xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
2050:src/stm32f1xx_hal_can.c ****   }
2051:src/stm32f1xx_hal_can.c **** 
2052:src/stm32f1xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
2053:src/stm32f1xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
2054:src/stm32f1xx_hal_can.c ****   {
2055:src/stm32f1xx_hal_can.c ****     /* Update error code in handle */
2056:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
2057:src/stm32f1xx_hal_can.c **** 
2058:src/stm32f1xx_hal_can.c ****     /* Call Error callback function */
2059:src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
2060:src/stm32f1xx_hal_can.c ****     /* Call registered callback*/
2061:src/stm32f1xx_hal_can.c ****     hcan->ErrorCallback(hcan);
2062:src/stm32f1xx_hal_can.c **** #else
2063:src/stm32f1xx_hal_can.c ****     /* Call weak (surcharged) callback */
2064:src/stm32f1xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
2065:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
2066:src/stm32f1xx_hal_can.c ****   }
2067:src/stm32f1xx_hal_can.c **** }
2068:src/stm32f1xx_hal_can.c **** 
2069:src/stm32f1xx_hal_can.c **** /**
2070:src/stm32f1xx_hal_can.c ****   * @}
2071:src/stm32f1xx_hal_can.c ****   */
2072:src/stm32f1xx_hal_can.c **** 
2073:src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
2074:src/stm32f1xx_hal_can.c ****  *  @brief   CAN Callback functions
2075:src/stm32f1xx_hal_can.c ****  *
2076:src/stm32f1xx_hal_can.c **** @verbatim
2077:src/stm32f1xx_hal_can.c ****   ==============================================================================
2078:src/stm32f1xx_hal_can.c ****                           ##### Callback functions #####
2079:src/stm32f1xx_hal_can.c ****   ==============================================================================
2080:src/stm32f1xx_hal_can.c ****     [..]
2081:src/stm32f1xx_hal_can.c ****     This subsection provides the following callback functions:
2082:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
ARM GAS  /tmp/ccDRaG8a.s 			page 88


2083:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
2084:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
2085:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
2086:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
2087:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
2088:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
2089:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
2090:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
2091:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
2092:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
2093:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
2094:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
2095:src/stm32f1xx_hal_can.c **** 
2096:src/stm32f1xx_hal_can.c **** @endverbatim
2097:src/stm32f1xx_hal_can.c ****   * @{
2098:src/stm32f1xx_hal_can.c ****   */
2099:src/stm32f1xx_hal_can.c **** 
2100:src/stm32f1xx_hal_can.c **** /**
2101:src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
2102:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2103:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2104:src/stm32f1xx_hal_can.c ****   * @retval None
2105:src/stm32f1xx_hal_can.c ****   */
2106:src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
2107:src/stm32f1xx_hal_can.c **** {
2108:src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2109:src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2110:src/stm32f1xx_hal_can.c **** 
2111:src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2112:src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
2113:src/stm32f1xx_hal_can.c ****             user file
2114:src/stm32f1xx_hal_can.c ****    */
2115:src/stm32f1xx_hal_can.c **** }
2116:src/stm32f1xx_hal_can.c **** 
2117:src/stm32f1xx_hal_can.c **** /**
2118:src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
2119:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2120:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2121:src/stm32f1xx_hal_can.c ****   * @retval None
2122:src/stm32f1xx_hal_can.c ****   */
2123:src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
2124:src/stm32f1xx_hal_can.c **** {
2125:src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2126:src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2127:src/stm32f1xx_hal_can.c **** 
2128:src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2129:src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
2130:src/stm32f1xx_hal_can.c ****             user file
2131:src/stm32f1xx_hal_can.c ****    */
2132:src/stm32f1xx_hal_can.c **** }
2133:src/stm32f1xx_hal_can.c **** 
2134:src/stm32f1xx_hal_can.c **** /**
2135:src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
2136:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2137:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2138:src/stm32f1xx_hal_can.c ****   * @retval None
2139:src/stm32f1xx_hal_can.c ****   */
ARM GAS  /tmp/ccDRaG8a.s 			page 89


2140:src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
2141:src/stm32f1xx_hal_can.c **** {
2142:src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2143:src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2144:src/stm32f1xx_hal_can.c **** 
2145:src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2146:src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
2147:src/stm32f1xx_hal_can.c ****             user file
2148:src/stm32f1xx_hal_can.c ****    */
2149:src/stm32f1xx_hal_can.c **** }
2150:src/stm32f1xx_hal_can.c **** 
2151:src/stm32f1xx_hal_can.c **** /**
2152:src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
2153:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2154:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2155:src/stm32f1xx_hal_can.c ****   * @retval None
2156:src/stm32f1xx_hal_can.c ****   */
2157:src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
2158:src/stm32f1xx_hal_can.c **** {
2159:src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2160:src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2161:src/stm32f1xx_hal_can.c **** 
2162:src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2163:src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
2164:src/stm32f1xx_hal_can.c ****             user file
2165:src/stm32f1xx_hal_can.c ****    */
2166:src/stm32f1xx_hal_can.c **** }
2167:src/stm32f1xx_hal_can.c **** 
2168:src/stm32f1xx_hal_can.c **** /**
2169:src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
2170:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2171:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2172:src/stm32f1xx_hal_can.c ****   * @retval None
2173:src/stm32f1xx_hal_can.c ****   */
2174:src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
2175:src/stm32f1xx_hal_can.c **** {
2176:src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2177:src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2178:src/stm32f1xx_hal_can.c **** 
2179:src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2180:src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
2181:src/stm32f1xx_hal_can.c ****             user file
2182:src/stm32f1xx_hal_can.c ****    */
2183:src/stm32f1xx_hal_can.c **** }
2184:src/stm32f1xx_hal_can.c **** 
2185:src/stm32f1xx_hal_can.c **** /**
2186:src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
2187:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2188:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2189:src/stm32f1xx_hal_can.c ****   * @retval None
2190:src/stm32f1xx_hal_can.c ****   */
2191:src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
2192:src/stm32f1xx_hal_can.c **** {
2193:src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2194:src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2195:src/stm32f1xx_hal_can.c **** 
2196:src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
ARM GAS  /tmp/ccDRaG8a.s 			page 90


2197:src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
2198:src/stm32f1xx_hal_can.c ****             user file
2199:src/stm32f1xx_hal_can.c ****    */
2200:src/stm32f1xx_hal_can.c **** }
2201:src/stm32f1xx_hal_can.c **** 
2202:src/stm32f1xx_hal_can.c **** /**
2203:src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
2204:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2205:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2206:src/stm32f1xx_hal_can.c ****   * @retval None
2207:src/stm32f1xx_hal_can.c ****   */
2208:src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
2209:src/stm32f1xx_hal_can.c **** {
2210:src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2211:src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2212:src/stm32f1xx_hal_can.c **** 
2213:src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2214:src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
2215:src/stm32f1xx_hal_can.c ****             user file
2216:src/stm32f1xx_hal_can.c ****    */
2217:src/stm32f1xx_hal_can.c **** }
2218:src/stm32f1xx_hal_can.c **** 
2219:src/stm32f1xx_hal_can.c **** /**
2220:src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
2221:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2222:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2223:src/stm32f1xx_hal_can.c ****   * @retval None
2224:src/stm32f1xx_hal_can.c ****   */
2225:src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
2226:src/stm32f1xx_hal_can.c **** {
2227:src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2228:src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2229:src/stm32f1xx_hal_can.c **** 
2230:src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2231:src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
2232:src/stm32f1xx_hal_can.c ****             file
2233:src/stm32f1xx_hal_can.c ****    */
2234:src/stm32f1xx_hal_can.c **** }
2235:src/stm32f1xx_hal_can.c **** 
2236:src/stm32f1xx_hal_can.c **** /**
2237:src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
2238:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2239:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2240:src/stm32f1xx_hal_can.c ****   * @retval None
2241:src/stm32f1xx_hal_can.c ****   */
2242:src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
2243:src/stm32f1xx_hal_can.c **** {
2244:src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2245:src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2246:src/stm32f1xx_hal_can.c **** 
2247:src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2248:src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
2249:src/stm32f1xx_hal_can.c ****             user file
2250:src/stm32f1xx_hal_can.c ****    */
2251:src/stm32f1xx_hal_can.c **** }
2252:src/stm32f1xx_hal_can.c **** 
2253:src/stm32f1xx_hal_can.c **** /**
ARM GAS  /tmp/ccDRaG8a.s 			page 91


2254:src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
2255:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2256:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2257:src/stm32f1xx_hal_can.c ****   * @retval None
2258:src/stm32f1xx_hal_can.c ****   */
2259:src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
2260:src/stm32f1xx_hal_can.c **** {
2261:src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2262:src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2263:src/stm32f1xx_hal_can.c **** 
2264:src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2265:src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
2266:src/stm32f1xx_hal_can.c ****             file
2267:src/stm32f1xx_hal_can.c ****    */
2268:src/stm32f1xx_hal_can.c **** }
2269:src/stm32f1xx_hal_can.c **** 
2270:src/stm32f1xx_hal_can.c **** /**
2271:src/stm32f1xx_hal_can.c ****   * @brief  Sleep callback.
2272:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2273:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2274:src/stm32f1xx_hal_can.c ****   * @retval None
2275:src/stm32f1xx_hal_can.c ****   */
2276:src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
2277:src/stm32f1xx_hal_can.c **** {
2278:src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2279:src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2280:src/stm32f1xx_hal_can.c **** 
2281:src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2282:src/stm32f1xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
2283:src/stm32f1xx_hal_can.c ****    */
2284:src/stm32f1xx_hal_can.c **** }
2285:src/stm32f1xx_hal_can.c **** 
2286:src/stm32f1xx_hal_can.c **** /**
2287:src/stm32f1xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
2288:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2289:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2290:src/stm32f1xx_hal_can.c ****   * @retval None
2291:src/stm32f1xx_hal_can.c ****   */
2292:src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
2293:src/stm32f1xx_hal_can.c **** {
2294:src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2295:src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2296:src/stm32f1xx_hal_can.c **** 
2297:src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2298:src/stm32f1xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
2299:src/stm32f1xx_hal_can.c ****             user file
2300:src/stm32f1xx_hal_can.c ****    */
2301:src/stm32f1xx_hal_can.c **** }
2302:src/stm32f1xx_hal_can.c **** 
2303:src/stm32f1xx_hal_can.c **** /**
2304:src/stm32f1xx_hal_can.c ****   * @brief  Error CAN callback.
2305:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2306:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2307:src/stm32f1xx_hal_can.c ****   * @retval None
2308:src/stm32f1xx_hal_can.c ****   */
2309:src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
2310:src/stm32f1xx_hal_can.c **** {
ARM GAS  /tmp/ccDRaG8a.s 			page 92


 1754              		.loc 1 2310 0
 1755              		.cfi_startproc
 1756              		@ args = 0, pretend = 0, frame = 0
 1757              		@ frame_needed = 0, uses_anonymous_args = 0
 1758              		@ link register save eliminated.
 1759              	.LVL150:
 1760 05f0 7047     		bx	lr	@
 1761              		.cfi_endproc
 1762              	.LFE97:
 1763              		.size	HAL_CAN_ErrorCallback, .-HAL_CAN_ErrorCallback
 1764              		.align	1
 1765              		.global	HAL_CAN_IRQHandler
 1766              		.syntax unified
 1767              		.thumb
 1768              		.thumb_func
 1769              		.fpu softvfp
 1770              		.type	HAL_CAN_IRQHandler, %function
 1771              	HAL_CAN_IRQHandler:
 1772              	.LFB84:
1696:src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 1773              		.loc 1 1696 0
 1774              		.cfi_startproc
 1775              		@ args = 0, pretend = 0, frame = 0
 1776              		@ frame_needed = 0, uses_anonymous_args = 0
 1777              	.LVL151:
1696:src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 1778              		.loc 1 1696 0
 1779 05f2 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1780              	.LCFI10:
 1781              		.cfi_def_cfa_offset 40
 1782              		.cfi_offset 3, -40
 1783              		.cfi_offset 4, -36
 1784              		.cfi_offset 5, -32
 1785              		.cfi_offset 6, -28
 1786              		.cfi_offset 7, -24
 1787              		.cfi_offset 8, -20
 1788              		.cfi_offset 9, -16
 1789              		.cfi_offset 10, -12
 1790              		.cfi_offset 11, -8
 1791              		.cfi_offset 14, -4
1698:src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 1792              		.loc 1 1698 0
 1793 05f6 0368     		ldr	r3, [r0]	@ _28, hcan_27(D)->Instance
1696:src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 1794              		.loc 1 1696 0
 1795 05f8 0546     		mov	r5, r0	@ hcan, hcan
1698:src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 1796              		.loc 1 1698 0
 1797 05fa 5E69     		ldr	r6, [r3, #20]	@ interrupts, _28->IER
 1798              	.LVL152:
1699:src/stm32f1xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 1799              		.loc 1 1699 0
 1800 05fc D3F80490 		ldr	r9, [r3, #4]	@ msrflags, _28->MSR
 1801              	.LVL153:
1706:src/stm32f1xx_hal_can.c ****   {
 1802              		.loc 1 1706 0
 1803 0600 16F00104 		ands	r4, r6, #1	@ tmp176, interrupts,
ARM GAS  /tmp/ccDRaG8a.s 			page 93


1700:src/stm32f1xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 1804              		.loc 1 1700 0
 1805 0604 9F68     		ldr	r7, [r3, #8]	@ tsrflags, _28->TSR
 1806              	.LVL154:
1701:src/stm32f1xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 1807              		.loc 1 1701 0
 1808 0606 D3F80CB0 		ldr	fp, [r3, #12]	@ rf0rflags, _28->RF0R
 1809              	.LVL155:
1702:src/stm32f1xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 1810              		.loc 1 1702 0
 1811 060a D3F810A0 		ldr	r10, [r3, #16]	@ rf1rflags, _28->RF1R
 1812              	.LVL156:
1703:src/stm32f1xx_hal_can.c **** 
 1813              		.loc 1 1703 0
 1814 060e D3F81880 		ldr	r8, [r3, #24]	@ esrflags, _28->ESR
 1815              	.LVL157:
1706:src/stm32f1xx_hal_can.c ****   {
 1816              		.loc 1 1706 0
 1817 0612 22D0     		beq	.L154	@,
1709:src/stm32f1xx_hal_can.c ****     {
 1818              		.loc 1 1709 0
 1819 0614 17F00104 		ands	r4, r7, #1	@ tmp177, tsrflags,
 1820 0618 07D0     		beq	.L155	@,
1712:src/stm32f1xx_hal_can.c **** 
 1821              		.loc 1 1712 0
 1822 061a 0122     		movs	r2, #1	@ tmp178,
1714:src/stm32f1xx_hal_can.c ****       {
 1823              		.loc 1 1714 0
 1824 061c B907     		lsls	r1, r7, #30	@, tsrflags,
1712:src/stm32f1xx_hal_can.c **** 
 1825              		.loc 1 1712 0
 1826 061e 9A60     		str	r2, [r3, #8]	@ tmp178, _28->TSR
1714:src/stm32f1xx_hal_can.c ****       {
 1827              		.loc 1 1714 0
 1828 0620 40F1A380 		bpl	.L156	@,
1722:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 1829              		.loc 1 1722 0
 1830 0624 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback	@
 1831              	.LVL158:
1697:src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 1832              		.loc 1 1697 0
 1833 0628 0024     		movs	r4, #0	@ errorcode,
 1834              	.L155:
 1835              	.LVL159:
1752:src/stm32f1xx_hal_can.c ****     {
 1836              		.loc 1 1752 0
 1837 062a FB05     		lsls	r3, r7, #23	@, tsrflags,
 1838 062c 09D5     		bpl	.L157	@,
1755:src/stm32f1xx_hal_can.c **** 
 1839              		.loc 1 1755 0
 1840 062e 4FF48072 		mov	r2, #256	@ tmp183,
 1841 0632 2B68     		ldr	r3, [r5]	@ _44, hcan_27(D)->Instance
1757:src/stm32f1xx_hal_can.c ****       {
 1842              		.loc 1 1757 0
 1843 0634 B805     		lsls	r0, r7, #22	@, tsrflags,
1755:src/stm32f1xx_hal_can.c **** 
 1844              		.loc 1 1755 0
ARM GAS  /tmp/ccDRaG8a.s 			page 94


 1845 0636 9A60     		str	r2, [r3, #8]	@ tmp183, _44->TSR
1757:src/stm32f1xx_hal_can.c ****       {
 1846              		.loc 1 1757 0
 1847 0638 40F1A580 		bpl	.L158	@,
1765:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 1848              		.loc 1 1765 0
 1849 063c 2846     		mov	r0, r5	@, hcan
 1850 063e FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback	@
 1851              	.LVL160:
 1852              	.L157:
1795:src/stm32f1xx_hal_can.c ****     {
 1853              		.loc 1 1795 0
 1854 0642 FB03     		lsls	r3, r7, #15	@, tsrflags,
 1855 0644 09D5     		bpl	.L154	@,
1798:src/stm32f1xx_hal_can.c **** 
 1856              		.loc 1 1798 0
 1857 0646 4FF48032 		mov	r2, #65536	@ tmp188,
 1858 064a 2B68     		ldr	r3, [r5]	@ _54, hcan_27(D)->Instance
1800:src/stm32f1xx_hal_can.c ****       {
 1859              		.loc 1 1800 0
 1860 064c B803     		lsls	r0, r7, #14	@, tsrflags,
1798:src/stm32f1xx_hal_can.c **** 
 1861              		.loc 1 1798 0
 1862 064e 9A60     		str	r2, [r3, #8]	@ tmp188, _54->TSR
1800:src/stm32f1xx_hal_can.c ****       {
 1863              		.loc 1 1800 0
 1864 0650 40F1A780 		bpl	.L161	@,
1808:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 1865              		.loc 1 1808 0
 1866 0654 2846     		mov	r0, r5	@, hcan
 1867 0656 FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback	@
 1868              	.LVL161:
 1869              	.L154:
1839:src/stm32f1xx_hal_can.c ****   {
 1870              		.loc 1 1839 0
 1871 065a 3307     		lsls	r3, r6, #28	@, interrupts,
 1872 065c 07D5     		bpl	.L164	@,
1841:src/stm32f1xx_hal_can.c ****     {
 1873              		.loc 1 1841 0
 1874 065e 1BF0100F 		tst	fp, #16	@ rf0rflags,
1847:src/stm32f1xx_hal_can.c ****     }
 1875              		.loc 1 1847 0
 1876 0662 1FBF     		itttt	ne
 1877 0664 1022     		movne	r2, #16	@ tmp194,
 1878 0666 2B68     		ldrne	r3, [r5]	@ _66, hcan_27(D)->Instance
1844:src/stm32f1xx_hal_can.c **** 
 1879              		.loc 1 1844 0
 1880 0668 44F40074 		orrne	r4, r4, #512	@ errorcode, errorcode,
 1881              	.LVL162:
1847:src/stm32f1xx_hal_can.c ****     }
 1882              		.loc 1 1847 0
 1883 066c DA60     		strne	r2, [r3, #12]	@ tmp194, _66->RF0R
 1884              	.L164:
1852:src/stm32f1xx_hal_can.c ****   {
 1885              		.loc 1 1852 0
 1886 066e 7707     		lsls	r7, r6, #29	@, interrupts,
 1887              	.LVL163:
ARM GAS  /tmp/ccDRaG8a.s 			page 95


 1888 0670 08D5     		bpl	.L165	@,
1854:src/stm32f1xx_hal_can.c ****     {
 1889              		.loc 1 1854 0
 1890 0672 1BF0080F 		tst	fp, #8	@ rf0rflags,
 1891 0676 05D0     		beq	.L165	@,
1857:src/stm32f1xx_hal_can.c **** 
 1892              		.loc 1 1857 0
 1893 0678 0822     		movs	r2, #8	@ tmp197,
 1894 067a 2B68     		ldr	r3, [r5]	@ _70, hcan_27(D)->Instance
1865:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 1895              		.loc 1 1865 0
 1896 067c 2846     		mov	r0, r5	@, hcan
1857:src/stm32f1xx_hal_can.c **** 
 1897              		.loc 1 1857 0
 1898 067e DA60     		str	r2, [r3, #12]	@ tmp197, _70->RF0R
1865:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 1899              		.loc 1 1865 0
 1900 0680 FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback	@
 1901              	.LVL164:
 1902              	.L165:
1871:src/stm32f1xx_hal_can.c ****   {
 1903              		.loc 1 1871 0
 1904 0684 B007     		lsls	r0, r6, #30	@, interrupts,
 1905 0686 06D5     		bpl	.L166	@,
1874:src/stm32f1xx_hal_can.c ****     {
 1906              		.loc 1 1874 0
 1907 0688 2B68     		ldr	r3, [r5]	@ _74, hcan_27(D)->Instance
 1908 068a DB68     		ldr	r3, [r3, #12]	@ _75, _74->RF0R
 1909 068c 9907     		lsls	r1, r3, #30	@, _75,
 1910 068e 02D0     		beq	.L166	@,
1882:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 1911              		.loc 1 1882 0
 1912 0690 2846     		mov	r0, r5	@, hcan
 1913 0692 FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback	@
 1914              	.LVL165:
 1915              	.L166:
1888:src/stm32f1xx_hal_can.c ****   {
 1916              		.loc 1 1888 0
 1917 0696 7206     		lsls	r2, r6, #25	@, interrupts,
 1918 0698 07D5     		bpl	.L167	@,
1890:src/stm32f1xx_hal_can.c ****     {
 1919              		.loc 1 1890 0
 1920 069a 1AF0100F 		tst	r10, #16	@ rf1rflags,
1896:src/stm32f1xx_hal_can.c ****     }
 1921              		.loc 1 1896 0
 1922 069e 1FBF     		itttt	ne
 1923 06a0 1022     		movne	r2, #16	@ tmp202,
 1924 06a2 2B68     		ldrne	r3, [r5]	@ _81, hcan_27(D)->Instance
1893:src/stm32f1xx_hal_can.c **** 
 1925              		.loc 1 1893 0
 1926 06a4 44F48064 		orrne	r4, r4, #1024	@ errorcode, errorcode,
 1927              	.LVL166:
1896:src/stm32f1xx_hal_can.c ****     }
 1928              		.loc 1 1896 0
 1929 06a8 1A61     		strne	r2, [r3, #16]	@ tmp202, _81->RF1R
 1930              	.L167:
1901:src/stm32f1xx_hal_can.c ****   {
ARM GAS  /tmp/ccDRaG8a.s 			page 96


 1931              		.loc 1 1901 0
 1932 06aa B306     		lsls	r3, r6, #26	@, interrupts,
 1933 06ac 08D5     		bpl	.L168	@,
1903:src/stm32f1xx_hal_can.c ****     {
 1934              		.loc 1 1903 0
 1935 06ae 1AF0080F 		tst	r10, #8	@ rf1rflags,
 1936 06b2 05D0     		beq	.L168	@,
1906:src/stm32f1xx_hal_can.c **** 
 1937              		.loc 1 1906 0
 1938 06b4 0822     		movs	r2, #8	@ tmp205,
 1939 06b6 2B68     		ldr	r3, [r5]	@ _85, hcan_27(D)->Instance
1914:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 1940              		.loc 1 1914 0
 1941 06b8 2846     		mov	r0, r5	@, hcan
1906:src/stm32f1xx_hal_can.c **** 
 1942              		.loc 1 1906 0
 1943 06ba 1A61     		str	r2, [r3, #16]	@ tmp205, _85->RF1R
1914:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 1944              		.loc 1 1914 0
 1945 06bc FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback	@
 1946              	.LVL167:
 1947              	.L168:
1920:src/stm32f1xx_hal_can.c ****   {
 1948              		.loc 1 1920 0
 1949 06c0 F706     		lsls	r7, r6, #27	@, interrupts,
 1950 06c2 06D5     		bpl	.L169	@,
1923:src/stm32f1xx_hal_can.c ****     {
 1951              		.loc 1 1923 0
 1952 06c4 2B68     		ldr	r3, [r5]	@ _89, hcan_27(D)->Instance
 1953 06c6 1B69     		ldr	r3, [r3, #16]	@ _90, _89->RF1R
 1954 06c8 9807     		lsls	r0, r3, #30	@, _90,
 1955 06ca 02D0     		beq	.L169	@,
1931:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 1956              		.loc 1 1931 0
 1957 06cc 2846     		mov	r0, r5	@, hcan
 1958 06ce FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback	@
 1959              	.LVL168:
 1960              	.L169:
1937:src/stm32f1xx_hal_can.c ****   {
 1961              		.loc 1 1937 0
 1962 06d2 B103     		lsls	r1, r6, #14	@, interrupts,
 1963 06d4 08D5     		bpl	.L170	@,
1939:src/stm32f1xx_hal_can.c ****     {
 1964              		.loc 1 1939 0
 1965 06d6 19F0100F 		tst	r9, #16	@ msrflags,
 1966 06da 05D0     		beq	.L170	@,
1942:src/stm32f1xx_hal_can.c **** 
 1967              		.loc 1 1942 0
 1968 06dc 1022     		movs	r2, #16	@ tmp210,
 1969 06de 2B68     		ldr	r3, [r5]	@ _95, hcan_27(D)->Instance
1950:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 1970              		.loc 1 1950 0
 1971 06e0 2846     		mov	r0, r5	@, hcan
1942:src/stm32f1xx_hal_can.c **** 
 1972              		.loc 1 1942 0
 1973 06e2 5A60     		str	r2, [r3, #4]	@ tmp210, _95->MSR
1950:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
ARM GAS  /tmp/ccDRaG8a.s 			page 97


 1974              		.loc 1 1950 0
 1975 06e4 FFF7FEFF 		bl	HAL_CAN_SleepCallback	@
 1976              	.LVL169:
 1977              	.L170:
1956:src/stm32f1xx_hal_can.c ****   {
 1978              		.loc 1 1956 0
 1979 06e8 F203     		lsls	r2, r6, #15	@, interrupts,
 1980 06ea 08D5     		bpl	.L171	@,
1958:src/stm32f1xx_hal_can.c ****     {
 1981              		.loc 1 1958 0
 1982 06ec 19F0080F 		tst	r9, #8	@ msrflags,
 1983 06f0 05D0     		beq	.L171	@,
1961:src/stm32f1xx_hal_can.c **** 
 1984              		.loc 1 1961 0
 1985 06f2 0822     		movs	r2, #8	@ tmp213,
 1986 06f4 2B68     		ldr	r3, [r5]	@ _100, hcan_27(D)->Instance
1969:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 1987              		.loc 1 1969 0
 1988 06f6 2846     		mov	r0, r5	@, hcan
1961:src/stm32f1xx_hal_can.c **** 
 1989              		.loc 1 1961 0
 1990 06f8 5A60     		str	r2, [r3, #4]	@ tmp213, _100->MSR
1969:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 1991              		.loc 1 1969 0
 1992 06fa FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback	@
 1993              	.LVL170:
 1994              	.L171:
1975:src/stm32f1xx_hal_can.c ****   {
 1995              		.loc 1 1975 0
 1996 06fe 3304     		lsls	r3, r6, #16	@, interrupts,
 1997 0700 2AD5     		bpl	.L172	@,
1977:src/stm32f1xx_hal_can.c ****     {
 1998              		.loc 1 1977 0
 1999 0702 19F0040F 		tst	r9, #4	@ msrflags,
 2000 0706 2A68     		ldr	r2, [r5]	@ _126, hcan_27(D)->Instance
 2001 0708 24D0     		beq	.L173	@,
1980:src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2002              		.loc 1 1980 0
 2003 070a F705     		lsls	r7, r6, #23	@, interrupts,
 2004 070c 04D5     		bpl	.L174	@,
1980:src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2005              		.loc 1 1980 0 is_stmt 0 discriminator 1
 2006 070e 18F0010F 		tst	r8, #1	@ esrflags,
1984:src/stm32f1xx_hal_can.c **** 
 2007              		.loc 1 1984 0 is_stmt 1 discriminator 1
 2008 0712 18BF     		it	ne
 2009 0714 44F00104 		orrne	r4, r4, #1	@ errorcode, errorcode,
 2010              	.LVL171:
 2011              	.L174:
1990:src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2012              		.loc 1 1990 0
 2013 0718 B005     		lsls	r0, r6, #22	@, interrupts,
 2014 071a 04D5     		bpl	.L175	@,
1990:src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2015              		.loc 1 1990 0 is_stmt 0 discriminator 1
 2016 071c 18F0020F 		tst	r8, #2	@ esrflags,
1994:src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccDRaG8a.s 			page 98


 2017              		.loc 1 1994 0 is_stmt 1 discriminator 1
 2018 0720 18BF     		it	ne
 2019 0722 44F00204 		orrne	r4, r4, #2	@ errorcode, errorcode,
 2020              	.LVL172:
 2021              	.L175:
2000:src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2022              		.loc 1 2000 0
 2023 0726 7105     		lsls	r1, r6, #21	@, interrupts,
 2024 0728 04D5     		bpl	.L176	@,
2000:src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2025              		.loc 1 2000 0 is_stmt 0 discriminator 1
 2026 072a 18F0040F 		tst	r8, #4	@ esrflags,
2004:src/stm32f1xx_hal_can.c **** 
 2027              		.loc 1 2004 0 is_stmt 1 discriminator 1
 2028 072e 18BF     		it	ne
 2029 0730 44F00404 		orrne	r4, r4, #4	@ errorcode, errorcode,
 2030              	.LVL173:
 2031              	.L176:
2010:src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2032              		.loc 1 2010 0
 2033 0734 3305     		lsls	r3, r6, #20	@, interrupts,
 2034 0736 0DD5     		bpl	.L173	@,
2010:src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2035              		.loc 1 2010 0 is_stmt 0 discriminator 1
 2036 0738 18F07003 		ands	r3, r8, #112	@ _115, esrflags,
 2037 073c 0AD0     		beq	.L173	@,
2013:src/stm32f1xx_hal_can.c ****         {
 2038              		.loc 1 2013 0 is_stmt 1
 2039 073e 302B     		cmp	r3, #48	@ _115,
 2040 0740 4CD0     		beq	.L178	@,
 2041 0742 3CD8     		bhi	.L179	@,
 2042 0744 102B     		cmp	r3, #16	@ _115,
 2043 0746 43D0     		beq	.L180	@,
 2044 0748 202B     		cmp	r3, #32	@ _115,
 2045 074a 44D0     		beq	.L181	@,
 2046              	.L177:
2044:src/stm32f1xx_hal_can.c ****       }
 2047              		.loc 1 2044 0
 2048 074c 9369     		ldr	r3, [r2, #24]	@ _123, _122->ESR
 2049 074e 23F07003 		bic	r3, r3, #112	@ _124, _123,
 2050 0752 9361     		str	r3, [r2, #24]	@ _124, _122->ESR
 2051              	.L173:
2049:src/stm32f1xx_hal_can.c ****   }
 2052              		.loc 1 2049 0
 2053 0754 0423     		movs	r3, #4	@ tmp223,
 2054 0756 5360     		str	r3, [r2, #4]	@ tmp223, _126->MSR
 2055              	.L172:
2053:src/stm32f1xx_hal_can.c ****   {
 2056              		.loc 1 2053 0
 2057 0758 2CB1     		cbz	r4, .L153	@ errorcode,
2056:src/stm32f1xx_hal_can.c **** 
 2058              		.loc 1 2056 0
 2059 075a 6B6A     		ldr	r3, [r5, #36]	@ _128, hcan_27(D)->ErrorCode
2064:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2060              		.loc 1 2064 0
 2061 075c 2846     		mov	r0, r5	@, hcan
2056:src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccDRaG8a.s 			page 99


 2062              		.loc 1 2056 0
 2063 075e 1C43     		orrs	r4, r4, r3	@, _129, errorcode, _128
 2064              	.LVL174:
 2065 0760 6C62     		str	r4, [r5, #36]	@ _129, hcan_27(D)->ErrorCode
2064:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2066              		.loc 1 2064 0
 2067 0762 FFF7FEFF 		bl	HAL_CAN_ErrorCallback	@
 2068              	.LVL175:
 2069              	.L153:
 2070 0766 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2071              	.LVL176:
 2072              	.L156:
1727:src/stm32f1xx_hal_can.c ****         {
 2073              		.loc 1 1727 0
 2074 076a 7A07     		lsls	r2, r7, #29	@, tsrflags,
 2075 076c 05D4     		bmi	.L188	@,
1732:src/stm32f1xx_hal_can.c ****         {
 2076              		.loc 1 1732 0
 2077 076e 17F00804 		ands	r4, r7, #8	@ tmp181, tsrflags,
 2078 0772 05D1     		bne	.L189	@,
1745:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2079              		.loc 1 1745 0
 2080 0774 FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback	@
 2081              	.LVL177:
 2082 0778 57E7     		b	.L155	@
 2083              	.LVL178:
 2084              	.L188:
1730:src/stm32f1xx_hal_can.c ****         }
 2085              		.loc 1 1730 0
 2086 077a 4FF40064 		mov	r4, #2048	@ errorcode,
 2087 077e 54E7     		b	.L155	@
 2088              	.L189:
1735:src/stm32f1xx_hal_can.c ****         }
 2089              		.loc 1 1735 0
 2090 0780 4FF48054 		mov	r4, #4096	@ errorcode,
 2091 0784 51E7     		b	.L155	@
 2092              	.LVL179:
 2093              	.L158:
1770:src/stm32f1xx_hal_can.c ****         {
 2094              		.loc 1 1770 0
 2095 0786 7905     		lsls	r1, r7, #21	@, tsrflags,
 2096 0788 02D5     		bpl	.L159	@,
1773:src/stm32f1xx_hal_can.c ****         }
 2097              		.loc 1 1773 0
 2098 078a 44F40054 		orr	r4, r4, #8192	@ errorcode, errorcode,
 2099              	.LVL180:
 2100 078e 58E7     		b	.L157	@
 2101              	.L159:
1775:src/stm32f1xx_hal_can.c ****         {
 2102              		.loc 1 1775 0
 2103 0790 3A05     		lsls	r2, r7, #20	@, tsrflags,
 2104 0792 02D5     		bpl	.L160	@,
1778:src/stm32f1xx_hal_can.c ****         }
 2105              		.loc 1 1778 0
 2106 0794 44F48044 		orr	r4, r4, #16384	@ errorcode, errorcode,
 2107              	.LVL181:
 2108 0798 53E7     		b	.L157	@
ARM GAS  /tmp/ccDRaG8a.s 			page 100


 2109              	.L160:
1788:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2110              		.loc 1 1788 0
 2111 079a 2846     		mov	r0, r5	@, hcan
 2112 079c FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback	@
 2113              	.LVL182:
 2114 07a0 4FE7     		b	.L157	@
 2115              	.L161:
1813:src/stm32f1xx_hal_can.c ****         {
 2116              		.loc 1 1813 0
 2117 07a2 7903     		lsls	r1, r7, #13	@, tsrflags,
 2118 07a4 02D5     		bpl	.L162	@,
1816:src/stm32f1xx_hal_can.c ****         }
 2119              		.loc 1 1816 0
 2120 07a6 44F40044 		orr	r4, r4, #32768	@ errorcode, errorcode,
 2121              	.LVL183:
 2122 07aa 56E7     		b	.L154	@
 2123              	.L162:
1818:src/stm32f1xx_hal_can.c ****         {
 2124              		.loc 1 1818 0
 2125 07ac 3A03     		lsls	r2, r7, #12	@, tsrflags,
 2126 07ae 02D5     		bpl	.L163	@,
1821:src/stm32f1xx_hal_can.c ****         }
 2127              		.loc 1 1821 0
 2128 07b0 44F48034 		orr	r4, r4, #65536	@ errorcode, errorcode,
 2129              	.LVL184:
 2130 07b4 51E7     		b	.L154	@
 2131              	.L163:
1831:src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2132              		.loc 1 1831 0
 2133 07b6 2846     		mov	r0, r5	@, hcan
 2134 07b8 FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback	@
 2135              	.LVL185:
 2136 07bc 4DE7     		b	.L154	@
 2137              	.LVL186:
 2138              	.L179:
2013:src/stm32f1xx_hal_can.c ****         {
 2139              		.loc 1 2013 0
 2140 07be 502B     		cmp	r3, #80	@ _115,
 2141 07c0 0FD0     		beq	.L182	@,
 2142 07c2 602B     		cmp	r3, #96	@ _115,
 2143 07c4 10D0     		beq	.L183	@,
 2144 07c6 402B     		cmp	r3, #64	@ _115,
 2145 07c8 C0D1     		bne	.L177	@,
2029:src/stm32f1xx_hal_can.c ****             break;
 2146              		.loc 1 2029 0
 2147 07ca 44F04004 		orr	r4, r4, #64	@ errorcode, errorcode,
 2148              	.LVL187:
2030:src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 2149              		.loc 1 2030 0
 2150 07ce BDE7     		b	.L177	@
 2151              	.L180:
2017:src/stm32f1xx_hal_can.c ****             break;
 2152              		.loc 1 2017 0
 2153 07d0 44F00804 		orr	r4, r4, #8	@ errorcode, errorcode,
 2154              	.LVL188:
2018:src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1):
ARM GAS  /tmp/ccDRaG8a.s 			page 101


 2155              		.loc 1 2018 0
 2156 07d4 BAE7     		b	.L177	@
 2157              	.L181:
2021:src/stm32f1xx_hal_can.c ****             break;
 2158              		.loc 1 2021 0
 2159 07d6 44F01004 		orr	r4, r4, #16	@ errorcode, errorcode,
 2160              	.LVL189:
2022:src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 2161              		.loc 1 2022 0
 2162 07da B7E7     		b	.L177	@
 2163              	.L178:
2025:src/stm32f1xx_hal_can.c ****             break;
 2164              		.loc 1 2025 0
 2165 07dc 44F02004 		orr	r4, r4, #32	@ errorcode, errorcode,
 2166              	.LVL190:
2026:src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 2167              		.loc 1 2026 0
 2168 07e0 B4E7     		b	.L177	@
 2169              	.L182:
2033:src/stm32f1xx_hal_can.c ****             break;
 2170              		.loc 1 2033 0
 2171 07e2 44F08004 		orr	r4, r4, #128	@ errorcode, errorcode,
 2172              	.LVL191:
2034:src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 2173              		.loc 1 2034 0
 2174 07e6 B1E7     		b	.L177	@
 2175              	.L183:
2037:src/stm32f1xx_hal_can.c ****             break;
 2176              		.loc 1 2037 0
 2177 07e8 44F48074 		orr	r4, r4, #256	@ errorcode, errorcode,
 2178              	.LVL192:
2038:src/stm32f1xx_hal_can.c ****           default:
 2179              		.loc 1 2038 0
 2180 07ec AEE7     		b	.L177	@
 2181              		.cfi_endproc
 2182              	.LFE84:
 2183              		.size	HAL_CAN_IRQHandler, .-HAL_CAN_IRQHandler
 2184              		.align	1
 2185              		.global	HAL_CAN_GetState
 2186              		.syntax unified
 2187              		.thumb
 2188              		.thumb_func
 2189              		.fpu softvfp
 2190              		.type	HAL_CAN_GetState, %function
 2191              	HAL_CAN_GetState:
 2192              	.LFB98:
2311:src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2312:src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2313:src/stm32f1xx_hal_can.c **** 
2314:src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2315:src/stm32f1xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
2316:src/stm32f1xx_hal_can.c ****    */
2317:src/stm32f1xx_hal_can.c **** }
2318:src/stm32f1xx_hal_can.c **** 
2319:src/stm32f1xx_hal_can.c **** /**
2320:src/stm32f1xx_hal_can.c ****   * @}
2321:src/stm32f1xx_hal_can.c ****   */
ARM GAS  /tmp/ccDRaG8a.s 			page 102


2322:src/stm32f1xx_hal_can.c **** 
2323:src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
2324:src/stm32f1xx_hal_can.c ****  *  @brief   CAN Peripheral State functions
2325:src/stm32f1xx_hal_can.c ****  *
2326:src/stm32f1xx_hal_can.c **** @verbatim
2327:src/stm32f1xx_hal_can.c ****   ==============================================================================
2328:src/stm32f1xx_hal_can.c ****             ##### Peripheral State and Error functions #####
2329:src/stm32f1xx_hal_can.c ****   ==============================================================================
2330:src/stm32f1xx_hal_can.c ****     [..]
2331:src/stm32f1xx_hal_can.c ****     This subsection provides functions allowing to :
2332:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
2333:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
2334:src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
2335:src/stm32f1xx_hal_can.c **** 
2336:src/stm32f1xx_hal_can.c **** @endverbatim
2337:src/stm32f1xx_hal_can.c ****   * @{
2338:src/stm32f1xx_hal_can.c ****   */
2339:src/stm32f1xx_hal_can.c **** 
2340:src/stm32f1xx_hal_can.c **** /**
2341:src/stm32f1xx_hal_can.c ****   * @brief  Return the CAN state.
2342:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2343:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2344:src/stm32f1xx_hal_can.c ****   * @retval HAL state
2345:src/stm32f1xx_hal_can.c ****   */
2346:src/stm32f1xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
2347:src/stm32f1xx_hal_can.c **** {
 2193              		.loc 1 2347 0
 2194              		.cfi_startproc
 2195              		@ args = 0, pretend = 0, frame = 0
 2196              		@ frame_needed = 0, uses_anonymous_args = 0
 2197              		@ link register save eliminated.
 2198              	.LVL193:
2348:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2199              		.loc 1 2348 0
 2200 07ee 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2	@ hcan_3(D)->State, hcan_3(D)->State
 2201 07f2 DBB2     		uxtb	r3, r3	@ <retval>, hcan_3(D)->State
 2202              	.LVL194:
2349:src/stm32f1xx_hal_can.c **** 
2350:src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2203              		.loc 1 2350 0
 2204 07f4 5A1E     		subs	r2, r3, #1	@ tmp122, <retval>,
 2205 07f6 012A     		cmp	r2, #1	@ tmp122,
 2206 07f8 08D8     		bhi	.L278	@,
2351:src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2352:src/stm32f1xx_hal_can.c ****   {
2353:src/stm32f1xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
2354:src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 2207              		.loc 1 2354 0
 2208 07fa 0268     		ldr	r2, [r0]	@ _6, hcan_3(D)->Instance
 2209 07fc 5168     		ldr	r1, [r2, #4]	@ _7, _6->MSR
 2210 07fe 8907     		lsls	r1, r1, #30	@, _7,
 2211 0800 06D4     		bmi	.L279	@,
2355:src/stm32f1xx_hal_can.c ****     {
2356:src/stm32f1xx_hal_can.c ****       /* Sleep mode is active */
2357:src/stm32f1xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
2358:src/stm32f1xx_hal_can.c ****     }
2359:src/stm32f1xx_hal_can.c ****     /* Check sleep mode request flag */
ARM GAS  /tmp/ccDRaG8a.s 			page 103


2360:src/stm32f1xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 2212              		.loc 1 2360 0
 2213 0802 1268     		ldr	r2, [r2]	@ _9, _6->MCR
 2214 0804 12F0020F 		tst	r2, #2	@ _9,
2361:src/stm32f1xx_hal_can.c ****     {
2362:src/stm32f1xx_hal_can.c ****       /* Sleep mode request is pending */
2363:src/stm32f1xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
 2215              		.loc 1 2363 0
 2216 0808 18BF     		it	ne
 2217 080a 0323     		movne	r3, #3	@ <retval>,
 2218              	.LVL195:
 2219              	.L278:
2364:src/stm32f1xx_hal_can.c ****     }
2365:src/stm32f1xx_hal_can.c ****     else
2366:src/stm32f1xx_hal_can.c ****     {
2367:src/stm32f1xx_hal_can.c ****       /* Neither sleep mode request nor sleep mode acknowledge */
2368:src/stm32f1xx_hal_can.c ****     }
2369:src/stm32f1xx_hal_can.c ****   }
2370:src/stm32f1xx_hal_can.c **** 
2371:src/stm32f1xx_hal_can.c ****   /* Return CAN state */
2372:src/stm32f1xx_hal_can.c ****   return state;
2373:src/stm32f1xx_hal_can.c **** }
 2220              		.loc 1 2373 0
 2221 080c 1846     		mov	r0, r3	@, <retval>
 2222              	.LVL196:
 2223 080e 7047     		bx	lr	@
 2224              	.LVL197:
 2225              	.L279:
2357:src/stm32f1xx_hal_can.c ****     }
 2226              		.loc 1 2357 0
 2227 0810 0423     		movs	r3, #4	@ <retval>,
 2228              	.LVL198:
 2229 0812 FBE7     		b	.L278	@
 2230              		.cfi_endproc
 2231              	.LFE98:
 2232              		.size	HAL_CAN_GetState, .-HAL_CAN_GetState
 2233              		.align	1
 2234              		.global	HAL_CAN_GetError
 2235              		.syntax unified
 2236              		.thumb
 2237              		.thumb_func
 2238              		.fpu softvfp
 2239              		.type	HAL_CAN_GetError, %function
 2240              	HAL_CAN_GetError:
 2241              	.LFB99:
2374:src/stm32f1xx_hal_can.c **** 
2375:src/stm32f1xx_hal_can.c **** /**
2376:src/stm32f1xx_hal_can.c ****   * @brief  Return the CAN error code.
2377:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2378:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2379:src/stm32f1xx_hal_can.c ****   * @retval CAN Error Code
2380:src/stm32f1xx_hal_can.c ****   */
2381:src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
2382:src/stm32f1xx_hal_can.c **** {
 2242              		.loc 1 2382 0
 2243              		.cfi_startproc
 2244              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccDRaG8a.s 			page 104


 2245              		@ frame_needed = 0, uses_anonymous_args = 0
 2246              		@ link register save eliminated.
 2247              	.LVL199:
2383:src/stm32f1xx_hal_can.c ****   /* Return CAN error code */
2384:src/stm32f1xx_hal_can.c ****   return hcan->ErrorCode;
 2248              		.loc 1 2384 0
 2249 0814 406A     		ldr	r0, [r0, #36]	@ <retval>, hcan_2(D)->ErrorCode
 2250              	.LVL200:
2385:src/stm32f1xx_hal_can.c **** }
 2251              		.loc 1 2385 0
 2252 0816 7047     		bx	lr	@
 2253              		.cfi_endproc
 2254              	.LFE99:
 2255              		.size	HAL_CAN_GetError, .-HAL_CAN_GetError
 2256              		.align	1
 2257              		.global	HAL_CAN_ResetError
 2258              		.syntax unified
 2259              		.thumb
 2260              		.thumb_func
 2261              		.fpu softvfp
 2262              		.type	HAL_CAN_ResetError, %function
 2263              	HAL_CAN_ResetError:
 2264              	.LFB100:
2386:src/stm32f1xx_hal_can.c **** 
2387:src/stm32f1xx_hal_can.c **** /**
2388:src/stm32f1xx_hal_can.c ****   * @brief  Reset the CAN error code.
2389:src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2390:src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2391:src/stm32f1xx_hal_can.c ****   * @retval HAL status
2392:src/stm32f1xx_hal_can.c ****   */
2393:src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
2394:src/stm32f1xx_hal_can.c **** {
 2265              		.loc 1 2394 0
 2266              		.cfi_startproc
 2267              		@ args = 0, pretend = 0, frame = 0
 2268              		@ frame_needed = 0, uses_anonymous_args = 0
 2269              		@ link register save eliminated.
 2270              	.LVL201:
2395:src/stm32f1xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
2396:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2271              		.loc 1 2396 0
 2272 0818 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2	@ hcan_4(D)->State, hcan_4(D)->State
 2273              	.LVL202:
2397:src/stm32f1xx_hal_can.c **** 
2398:src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2274              		.loc 1 2398 0
 2275 081c 013B     		subs	r3, r3, #1	@ tmp120, hcan_4(D)->State,
 2276              	.LVL203:
 2277 081e 012B     		cmp	r3, #1	@ tmp120,
2399:src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2400:src/stm32f1xx_hal_can.c ****   {
2401:src/stm32f1xx_hal_can.c ****     /* Reset CAN error code */
2402:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode = 0U;
 2278              		.loc 1 2402 0
 2279 0820 95BF     		itete	ls
 2280 0822 0023     		movls	r3, #0	@ tmp121,
2403:src/stm32f1xx_hal_can.c ****   }
ARM GAS  /tmp/ccDRaG8a.s 			page 105


2404:src/stm32f1xx_hal_can.c ****   else
2405:src/stm32f1xx_hal_can.c ****   {
2406:src/stm32f1xx_hal_can.c ****     /* Update error code */
2407:src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2281              		.loc 1 2407 0
 2282 0824 436A     		ldrhi	r3, [r0, #36]	@ _8, hcan_4(D)->ErrorCode
2402:src/stm32f1xx_hal_can.c ****   }
 2283              		.loc 1 2402 0
 2284 0826 4362     		strls	r3, [r0, #36]	@ tmp121, hcan_4(D)->ErrorCode
 2285              		.loc 1 2407 0
 2286 0828 43F48023 		orrhi	r3, r3, #262144	@ _9, _8,
2395:src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2287              		.loc 1 2395 0
 2288 082c 92BF     		itee	ls
 2289 082e 1846     		movls	r0, r3	@ <retval>, tmp121
 2290              	.LVL204:
 2291              		.loc 1 2407 0
 2292 0830 4362     		strhi	r3, [r0, #36]	@ _9, hcan_4(D)->ErrorCode
 2293              	.LVL205:
2408:src/stm32f1xx_hal_can.c **** 
2409:src/stm32f1xx_hal_can.c ****     status = HAL_ERROR;
 2294              		.loc 1 2409 0
 2295 0832 0120     		movhi	r0, #1	@ <retval>,
 2296              	.LVL206:
2410:src/stm32f1xx_hal_can.c ****   }
2411:src/stm32f1xx_hal_can.c **** 
2412:src/stm32f1xx_hal_can.c ****   /* Return the status */
2413:src/stm32f1xx_hal_can.c ****   return status;
2414:src/stm32f1xx_hal_can.c **** }
 2297              		.loc 1 2414 0
 2298 0834 7047     		bx	lr	@
 2299              		.cfi_endproc
 2300              	.LFE100:
 2301              		.size	HAL_CAN_ResetError, .-HAL_CAN_ResetError
 2302              	.Letext0:
 2303              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 2304              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 2305              		.file 5 "../cmsiscore/inc/core_cm3.h"
 2306              		.file 6 "../cmsisstm32f1xx/inc/system_stm32f1xx.h"
 2307              		.file 7 "../cmsisstm32f1xx/inc/stm32f103x6.h"
 2308              		.file 8 "../cmsisstm32f1xx/inc/stm32f1xx.h"
 2309              		.file 9 "./inc/stm32f1xx_hal_def.h"
 2310              		.file 10 "./inc/stm32f1xx_hal_can.h"
 2311              		.file 11 "./inc/stm32f1xx_hal.h"
 2312 0836 00BF     		.section	.debug_info,"",%progbits
 2313              	.Ldebug_info0:
 2314 0000 F0110000 		.4byte	0x11f0
 2315 0004 0200     		.2byte	0x2
 2316 0006 00000000 		.4byte	.Ldebug_abbrev0
 2317 000a 04       		.byte	0x4
 2318 000b 01       		.uleb128 0x1
 2319 000c F5060000 		.4byte	.LASF166
 2320 0010 0C       		.byte	0xc
 2321 0011 C1000000 		.4byte	.LASF167
 2322 0015 60070000 		.4byte	.LASF168
 2323 0019 00000000 		.4byte	.Ltext0
 2324 001d 36080000 		.4byte	.Letext0
ARM GAS  /tmp/ccDRaG8a.s 			page 106


 2325 0021 00000000 		.4byte	.Ldebug_line0
 2326 0025 02       		.uleb128 0x2
 2327 0026 01       		.byte	0x1
 2328 0027 06       		.byte	0x6
 2329 0028 52000000 		.4byte	.LASF0
 2330 002c 03       		.uleb128 0x3
 2331 002d 5E000000 		.4byte	.LASF4
 2332 0031 03       		.byte	0x3
 2333 0032 1D       		.byte	0x1d
 2334 0033 37000000 		.4byte	0x37
 2335 0037 02       		.uleb128 0x2
 2336 0038 01       		.byte	0x1
 2337 0039 08       		.byte	0x8
 2338 003a 55060000 		.4byte	.LASF1
 2339 003e 02       		.uleb128 0x2
 2340 003f 02       		.byte	0x2
 2341 0040 05       		.byte	0x5
 2342 0041 07020000 		.4byte	.LASF2
 2343 0045 02       		.uleb128 0x2
 2344 0046 02       		.byte	0x2
 2345 0047 07       		.byte	0x7
 2346 0048 E5080000 		.4byte	.LASF3
 2347 004c 03       		.uleb128 0x3
 2348 004d 8E080000 		.4byte	.LASF5
 2349 0051 03       		.byte	0x3
 2350 0052 3F       		.byte	0x3f
 2351 0053 57000000 		.4byte	0x57
 2352 0057 02       		.uleb128 0x2
 2353 0058 04       		.byte	0x4
 2354 0059 05       		.byte	0x5
 2355 005a 8F010000 		.4byte	.LASF6
 2356 005e 03       		.uleb128 0x3
 2357 005f AD020000 		.4byte	.LASF7
 2358 0063 03       		.byte	0x3
 2359 0064 41       		.byte	0x41
 2360 0065 69000000 		.4byte	0x69
 2361 0069 02       		.uleb128 0x2
 2362 006a 04       		.byte	0x4
 2363 006b 07       		.byte	0x7
 2364 006c 5D030000 		.4byte	.LASF8
 2365 0070 02       		.uleb128 0x2
 2366 0071 08       		.byte	0x8
 2367 0072 05       		.byte	0x5
 2368 0073 30010000 		.4byte	.LASF9
 2369 0077 02       		.uleb128 0x2
 2370 0078 08       		.byte	0x8
 2371 0079 07       		.byte	0x7
 2372 007a A5000000 		.4byte	.LASF10
 2373 007e 04       		.uleb128 0x4
 2374 007f 04       		.byte	0x4
 2375 0080 05       		.byte	0x5
 2376 0081 696E7400 		.ascii	"int\000"
 2377 0085 02       		.uleb128 0x2
 2378 0086 04       		.byte	0x4
 2379 0087 07       		.byte	0x7
 2380 0088 42080000 		.4byte	.LASF11
 2381 008c 03       		.uleb128 0x3
ARM GAS  /tmp/ccDRaG8a.s 			page 107


 2382 008d A0090000 		.4byte	.LASF12
 2383 0091 04       		.byte	0x4
 2384 0092 18       		.byte	0x18
 2385 0093 2C000000 		.4byte	0x2c
 2386 0097 05       		.uleb128 0x5
 2387 0098 8C000000 		.4byte	0x8c
 2388 009c 03       		.uleb128 0x3
 2389 009d 4D060000 		.4byte	.LASF13
 2390 00a1 04       		.byte	0x4
 2391 00a2 2C       		.byte	0x2c
 2392 00a3 4C000000 		.4byte	0x4c
 2393 00a7 06       		.uleb128 0x6
 2394 00a8 9C000000 		.4byte	0x9c
 2395 00ac 03       		.uleb128 0x3
 2396 00ad E8070000 		.4byte	.LASF14
 2397 00b1 04       		.byte	0x4
 2398 00b2 30       		.byte	0x30
 2399 00b3 5E000000 		.4byte	0x5e
 2400 00b7 06       		.uleb128 0x6
 2401 00b8 AC000000 		.4byte	0xac
 2402 00bc 02       		.uleb128 0x2
 2403 00bd 04       		.byte	0x4
 2404 00be 07       		.byte	0x7
 2405 00bf 9A040000 		.4byte	.LASF15
 2406 00c3 07       		.uleb128 0x7
 2407 00c4 AC000000 		.4byte	0xac
 2408 00c8 D3000000 		.4byte	0xd3
 2409 00cc 08       		.uleb128 0x8
 2410 00cd BC000000 		.4byte	0xbc
 2411 00d1 07       		.byte	0x7
 2412 00d2 00       		.byte	0
 2413 00d3 09       		.uleb128 0x9
 2414 00d4 EE000000 		.4byte	.LASF16
 2415 00d8 05       		.byte	0x5
 2416 00d9 4807     		.2byte	0x748
 2417 00db A7000000 		.4byte	0xa7
 2418 00df 01       		.byte	0x1
 2419 00e0 01       		.byte	0x1
 2420 00e1 0A       		.uleb128 0xa
 2421 00e2 21030000 		.4byte	.LASF17
 2422 00e6 06       		.byte	0x6
 2423 00e7 33       		.byte	0x33
 2424 00e8 AC000000 		.4byte	0xac
 2425 00ec 01       		.byte	0x1
 2426 00ed 01       		.byte	0x1
 2427 00ee 07       		.uleb128 0x7
 2428 00ef 97000000 		.4byte	0x97
 2429 00f3 FE000000 		.4byte	0xfe
 2430 00f7 08       		.uleb128 0x8
 2431 00f8 BC000000 		.4byte	0xbc
 2432 00fc 0F       		.byte	0xf
 2433 00fd 00       		.byte	0
 2434 00fe 05       		.uleb128 0x5
 2435 00ff EE000000 		.4byte	0xee
 2436 0103 0A       		.uleb128 0xa
 2437 0104 98080000 		.4byte	.LASF18
 2438 0108 06       		.byte	0x6
ARM GAS  /tmp/ccDRaG8a.s 			page 108


 2439 0109 34       		.byte	0x34
 2440 010a FE000000 		.4byte	0xfe
 2441 010e 01       		.byte	0x1
 2442 010f 01       		.byte	0x1
 2443 0110 07       		.uleb128 0x7
 2444 0111 97000000 		.4byte	0x97
 2445 0115 20010000 		.4byte	0x120
 2446 0119 08       		.uleb128 0x8
 2447 011a BC000000 		.4byte	0xbc
 2448 011e 07       		.byte	0x7
 2449 011f 00       		.byte	0
 2450 0120 05       		.uleb128 0x5
 2451 0121 10010000 		.4byte	0x110
 2452 0125 0A       		.uleb128 0xa
 2453 0126 BD020000 		.4byte	.LASF19
 2454 012a 06       		.byte	0x6
 2455 012b 35       		.byte	0x35
 2456 012c 20010000 		.4byte	0x120
 2457 0130 01       		.byte	0x1
 2458 0131 01       		.byte	0x1
 2459 0132 0B       		.uleb128 0xb
 2460 0133 10       		.byte	0x10
 2461 0134 07       		.byte	0x7
 2462 0135 C6       		.byte	0xc6
 2463 0136 73010000 		.4byte	0x173
 2464 013a 0C       		.uleb128 0xc
 2465 013b 54495200 		.ascii	"TIR\000"
 2466 013f 07       		.byte	0x7
 2467 0140 C8       		.byte	0xc8
 2468 0141 B7000000 		.4byte	0xb7
 2469 0145 02       		.byte	0x2
 2470 0146 23       		.byte	0x23
 2471 0147 00       		.uleb128 0
 2472 0148 0D       		.uleb128 0xd
 2473 0149 CB020000 		.4byte	.LASF20
 2474 014d 07       		.byte	0x7
 2475 014e C9       		.byte	0xc9
 2476 014f B7000000 		.4byte	0xb7
 2477 0153 02       		.byte	0x2
 2478 0154 23       		.byte	0x23
 2479 0155 04       		.uleb128 0x4
 2480 0156 0D       		.uleb128 0xd
 2481 0157 8A010000 		.4byte	.LASF21
 2482 015b 07       		.byte	0x7
 2483 015c CA       		.byte	0xca
 2484 015d B7000000 		.4byte	0xb7
 2485 0161 02       		.byte	0x2
 2486 0162 23       		.byte	0x23
 2487 0163 08       		.uleb128 0x8
 2488 0164 0D       		.uleb128 0xd
 2489 0165 17010000 		.4byte	.LASF22
 2490 0169 07       		.byte	0x7
 2491 016a CB       		.byte	0xcb
 2492 016b B7000000 		.4byte	0xb7
 2493 016f 02       		.byte	0x2
 2494 0170 23       		.byte	0x23
 2495 0171 0C       		.uleb128 0xc
ARM GAS  /tmp/ccDRaG8a.s 			page 109


 2496 0172 00       		.byte	0
 2497 0173 03       		.uleb128 0x3
 2498 0174 C5010000 		.4byte	.LASF23
 2499 0178 07       		.byte	0x7
 2500 0179 CC       		.byte	0xcc
 2501 017a 32010000 		.4byte	0x132
 2502 017e 0B       		.uleb128 0xb
 2503 017f 10       		.byte	0x10
 2504 0180 07       		.byte	0x7
 2505 0181 D2       		.byte	0xd2
 2506 0182 BF010000 		.4byte	0x1bf
 2507 0186 0C       		.uleb128 0xc
 2508 0187 52495200 		.ascii	"RIR\000"
 2509 018b 07       		.byte	0x7
 2510 018c D4       		.byte	0xd4
 2511 018d B7000000 		.4byte	0xb7
 2512 0191 02       		.byte	0x2
 2513 0192 23       		.byte	0x23
 2514 0193 00       		.uleb128 0
 2515 0194 0D       		.uleb128 0xd
 2516 0195 98000000 		.4byte	.LASF24
 2517 0199 07       		.byte	0x7
 2518 019a D5       		.byte	0xd5
 2519 019b B7000000 		.4byte	0xb7
 2520 019f 02       		.byte	0x2
 2521 01a0 23       		.byte	0x23
 2522 01a1 04       		.uleb128 0x4
 2523 01a2 0D       		.uleb128 0xd
 2524 01a3 410A0000 		.4byte	.LASF25
 2525 01a7 07       		.byte	0x7
 2526 01a8 D6       		.byte	0xd6
 2527 01a9 B7000000 		.4byte	0xb7
 2528 01ad 02       		.byte	0x2
 2529 01ae 23       		.byte	0x23
 2530 01af 08       		.uleb128 0x8
 2531 01b0 0D       		.uleb128 0xd
 2532 01b1 E8090000 		.4byte	.LASF26
 2533 01b5 07       		.byte	0x7
 2534 01b6 D7       		.byte	0xd7
 2535 01b7 B7000000 		.4byte	0xb7
 2536 01bb 02       		.byte	0x2
 2537 01bc 23       		.byte	0x23
 2538 01bd 0C       		.uleb128 0xc
 2539 01be 00       		.byte	0
 2540 01bf 03       		.uleb128 0x3
 2541 01c0 61090000 		.4byte	.LASF27
 2542 01c4 07       		.byte	0x7
 2543 01c5 D8       		.byte	0xd8
 2544 01c6 7E010000 		.4byte	0x17e
 2545 01ca 0B       		.uleb128 0xb
 2546 01cb 08       		.byte	0x8
 2547 01cc 07       		.byte	0x7
 2548 01cd DE       		.byte	0xde
 2549 01ce EF010000 		.4byte	0x1ef
 2550 01d2 0C       		.uleb128 0xc
 2551 01d3 46523100 		.ascii	"FR1\000"
 2552 01d7 07       		.byte	0x7
ARM GAS  /tmp/ccDRaG8a.s 			page 110


 2553 01d8 E0       		.byte	0xe0
 2554 01d9 B7000000 		.4byte	0xb7
 2555 01dd 02       		.byte	0x2
 2556 01de 23       		.byte	0x23
 2557 01df 00       		.uleb128 0
 2558 01e0 0C       		.uleb128 0xc
 2559 01e1 46523200 		.ascii	"FR2\000"
 2560 01e5 07       		.byte	0x7
 2561 01e6 E1       		.byte	0xe1
 2562 01e7 B7000000 		.4byte	0xb7
 2563 01eb 02       		.byte	0x2
 2564 01ec 23       		.byte	0x23
 2565 01ed 04       		.uleb128 0x4
 2566 01ee 00       		.byte	0
 2567 01ef 03       		.uleb128 0x3
 2568 01f0 EE030000 		.4byte	.LASF28
 2569 01f4 07       		.byte	0x7
 2570 01f5 E2       		.byte	0xe2
 2571 01f6 CA010000 		.4byte	0x1ca
 2572 01fa 0E       		.uleb128 0xe
 2573 01fb B002     		.2byte	0x2b0
 2574 01fd 07       		.byte	0x7
 2575 01fe E8       		.byte	0xe8
 2576 01ff 45030000 		.4byte	0x345
 2577 0203 0C       		.uleb128 0xc
 2578 0204 4D435200 		.ascii	"MCR\000"
 2579 0208 07       		.byte	0x7
 2580 0209 EA       		.byte	0xea
 2581 020a B7000000 		.4byte	0xb7
 2582 020e 02       		.byte	0x2
 2583 020f 23       		.byte	0x23
 2584 0210 00       		.uleb128 0
 2585 0211 0C       		.uleb128 0xc
 2586 0212 4D535200 		.ascii	"MSR\000"
 2587 0216 07       		.byte	0x7
 2588 0217 EB       		.byte	0xeb
 2589 0218 B7000000 		.4byte	0xb7
 2590 021c 02       		.byte	0x2
 2591 021d 23       		.byte	0x23
 2592 021e 04       		.uleb128 0x4
 2593 021f 0C       		.uleb128 0xc
 2594 0220 54535200 		.ascii	"TSR\000"
 2595 0224 07       		.byte	0x7
 2596 0225 EC       		.byte	0xec
 2597 0226 B7000000 		.4byte	0xb7
 2598 022a 02       		.byte	0x2
 2599 022b 23       		.byte	0x23
 2600 022c 08       		.uleb128 0x8
 2601 022d 0D       		.uleb128 0xd
 2602 022e 5B020000 		.4byte	.LASF29
 2603 0232 07       		.byte	0x7
 2604 0233 ED       		.byte	0xed
 2605 0234 B7000000 		.4byte	0xb7
 2606 0238 02       		.byte	0x2
 2607 0239 23       		.byte	0x23
 2608 023a 0C       		.uleb128 0xc
 2609 023b 0D       		.uleb128 0xd
ARM GAS  /tmp/ccDRaG8a.s 			page 111


 2610 023c D3030000 		.4byte	.LASF30
 2611 0240 07       		.byte	0x7
 2612 0241 EE       		.byte	0xee
 2613 0242 B7000000 		.4byte	0xb7
 2614 0246 02       		.byte	0x2
 2615 0247 23       		.byte	0x23
 2616 0248 10       		.uleb128 0x10
 2617 0249 0C       		.uleb128 0xc
 2618 024a 49455200 		.ascii	"IER\000"
 2619 024e 07       		.byte	0x7
 2620 024f EF       		.byte	0xef
 2621 0250 B7000000 		.4byte	0xb7
 2622 0254 02       		.byte	0x2
 2623 0255 23       		.byte	0x23
 2624 0256 14       		.uleb128 0x14
 2625 0257 0C       		.uleb128 0xc
 2626 0258 45535200 		.ascii	"ESR\000"
 2627 025c 07       		.byte	0x7
 2628 025d F0       		.byte	0xf0
 2629 025e B7000000 		.4byte	0xb7
 2630 0262 02       		.byte	0x2
 2631 0263 23       		.byte	0x23
 2632 0264 18       		.uleb128 0x18
 2633 0265 0C       		.uleb128 0xc
 2634 0266 42545200 		.ascii	"BTR\000"
 2635 026a 07       		.byte	0x7
 2636 026b F1       		.byte	0xf1
 2637 026c B7000000 		.4byte	0xb7
 2638 0270 02       		.byte	0x2
 2639 0271 23       		.byte	0x23
 2640 0272 1C       		.uleb128 0x1c
 2641 0273 0D       		.uleb128 0xd
 2642 0274 D5050000 		.4byte	.LASF31
 2643 0278 07       		.byte	0x7
 2644 0279 F2       		.byte	0xf2
 2645 027a 45030000 		.4byte	0x345
 2646 027e 02       		.byte	0x2
 2647 027f 23       		.byte	0x23
 2648 0280 20       		.uleb128 0x20
 2649 0281 0D       		.uleb128 0xd
 2650 0282 3F000000 		.4byte	.LASF32
 2651 0286 07       		.byte	0x7
 2652 0287 F3       		.byte	0xf3
 2653 0288 55030000 		.4byte	0x355
 2654 028c 03       		.byte	0x3
 2655 028d 23       		.byte	0x23
 2656 028e 8003     		.uleb128 0x180
 2657 0290 0D       		.uleb128 0xd
 2658 0291 A6080000 		.4byte	.LASF33
 2659 0295 07       		.byte	0x7
 2660 0296 F4       		.byte	0xf4
 2661 0297 65030000 		.4byte	0x365
 2662 029b 03       		.byte	0x3
 2663 029c 23       		.byte	0x23
 2664 029d B003     		.uleb128 0x1b0
 2665 029f 0D       		.uleb128 0xd
 2666 02a0 DF050000 		.4byte	.LASF34
ARM GAS  /tmp/ccDRaG8a.s 			page 112


 2667 02a4 07       		.byte	0x7
 2668 02a5 F5       		.byte	0xf5
 2669 02a6 75030000 		.4byte	0x375
 2670 02aa 03       		.byte	0x3
 2671 02ab 23       		.byte	0x23
 2672 02ac D003     		.uleb128 0x1d0
 2673 02ae 0C       		.uleb128 0xc
 2674 02af 464D5200 		.ascii	"FMR\000"
 2675 02b3 07       		.byte	0x7
 2676 02b4 F6       		.byte	0xf6
 2677 02b5 B7000000 		.4byte	0xb7
 2678 02b9 03       		.byte	0x3
 2679 02ba 23       		.byte	0x23
 2680 02bb 8004     		.uleb128 0x200
 2681 02bd 0D       		.uleb128 0xd
 2682 02be 5B040000 		.4byte	.LASF35
 2683 02c2 07       		.byte	0x7
 2684 02c3 F7       		.byte	0xf7
 2685 02c4 B7000000 		.4byte	0xb7
 2686 02c8 03       		.byte	0x3
 2687 02c9 23       		.byte	0x23
 2688 02ca 8404     		.uleb128 0x204
 2689 02cc 0D       		.uleb128 0xd
 2690 02cd E9050000 		.4byte	.LASF36
 2691 02d1 07       		.byte	0x7
 2692 02d2 F8       		.byte	0xf8
 2693 02d3 AC000000 		.4byte	0xac
 2694 02d7 03       		.byte	0x3
 2695 02d8 23       		.byte	0x23
 2696 02d9 8804     		.uleb128 0x208
 2697 02db 0D       		.uleb128 0xd
 2698 02dc 94030000 		.4byte	.LASF37
 2699 02e0 07       		.byte	0x7
 2700 02e1 F9       		.byte	0xf9
 2701 02e2 B7000000 		.4byte	0xb7
 2702 02e6 03       		.byte	0x3
 2703 02e7 23       		.byte	0x23
 2704 02e8 8C04     		.uleb128 0x20c
 2705 02ea 0D       		.uleb128 0xd
 2706 02eb F3050000 		.4byte	.LASF38
 2707 02ef 07       		.byte	0x7
 2708 02f0 FA       		.byte	0xfa
 2709 02f1 AC000000 		.4byte	0xac
 2710 02f5 03       		.byte	0x3
 2711 02f6 23       		.byte	0x23
 2712 02f7 9004     		.uleb128 0x210
 2713 02f9 0D       		.uleb128 0xd
 2714 02fa 70050000 		.4byte	.LASF39
 2715 02fe 07       		.byte	0x7
 2716 02ff FB       		.byte	0xfb
 2717 0300 B7000000 		.4byte	0xb7
 2718 0304 03       		.byte	0x3
 2719 0305 23       		.byte	0x23
 2720 0306 9404     		.uleb128 0x214
 2721 0308 0D       		.uleb128 0xd
 2722 0309 FD050000 		.4byte	.LASF40
 2723 030d 07       		.byte	0x7
ARM GAS  /tmp/ccDRaG8a.s 			page 113


 2724 030e FC       		.byte	0xfc
 2725 030f AC000000 		.4byte	0xac
 2726 0313 03       		.byte	0x3
 2727 0314 23       		.byte	0x23
 2728 0315 9804     		.uleb128 0x218
 2729 0317 0D       		.uleb128 0xd
 2730 0318 07060000 		.4byte	.LASF41
 2731 031c 07       		.byte	0x7
 2732 031d FD       		.byte	0xfd
 2733 031e B7000000 		.4byte	0xb7
 2734 0322 03       		.byte	0x3
 2735 0323 23       		.byte	0x23
 2736 0324 9C04     		.uleb128 0x21c
 2737 0326 0D       		.uleb128 0xd
 2738 0327 C3070000 		.4byte	.LASF42
 2739 032b 07       		.byte	0x7
 2740 032c FE       		.byte	0xfe
 2741 032d C3000000 		.4byte	0xc3
 2742 0331 03       		.byte	0x3
 2743 0332 23       		.byte	0x23
 2744 0333 A004     		.uleb128 0x220
 2745 0335 0D       		.uleb128 0xd
 2746 0336 2B040000 		.4byte	.LASF43
 2747 033a 07       		.byte	0x7
 2748 033b FF       		.byte	0xff
 2749 033c 85030000 		.4byte	0x385
 2750 0340 03       		.byte	0x3
 2751 0341 23       		.byte	0x23
 2752 0342 C004     		.uleb128 0x240
 2753 0344 00       		.byte	0
 2754 0345 07       		.uleb128 0x7
 2755 0346 AC000000 		.4byte	0xac
 2756 034a 55030000 		.4byte	0x355
 2757 034e 08       		.uleb128 0x8
 2758 034f BC000000 		.4byte	0xbc
 2759 0353 57       		.byte	0x57
 2760 0354 00       		.byte	0
 2761 0355 07       		.uleb128 0x7
 2762 0356 73010000 		.4byte	0x173
 2763 035a 65030000 		.4byte	0x365
 2764 035e 08       		.uleb128 0x8
 2765 035f BC000000 		.4byte	0xbc
 2766 0363 02       		.byte	0x2
 2767 0364 00       		.byte	0
 2768 0365 07       		.uleb128 0x7
 2769 0366 BF010000 		.4byte	0x1bf
 2770 036a 75030000 		.4byte	0x375
 2771 036e 08       		.uleb128 0x8
 2772 036f BC000000 		.4byte	0xbc
 2773 0373 01       		.byte	0x1
 2774 0374 00       		.byte	0
 2775 0375 07       		.uleb128 0x7
 2776 0376 AC000000 		.4byte	0xac
 2777 037a 85030000 		.4byte	0x385
 2778 037e 08       		.uleb128 0x8
 2779 037f BC000000 		.4byte	0xbc
 2780 0383 0B       		.byte	0xb
ARM GAS  /tmp/ccDRaG8a.s 			page 114


 2781 0384 00       		.byte	0
 2782 0385 07       		.uleb128 0x7
 2783 0386 EF010000 		.4byte	0x1ef
 2784 038a 95030000 		.4byte	0x395
 2785 038e 08       		.uleb128 0x8
 2786 038f BC000000 		.4byte	0xbc
 2787 0393 0D       		.byte	0xd
 2788 0394 00       		.byte	0
 2789 0395 0F       		.uleb128 0xf
 2790 0396 11020000 		.4byte	.LASF44
 2791 039a 07       		.byte	0x7
 2792 039b 0001     		.2byte	0x100
 2793 039d FA010000 		.4byte	0x1fa
 2794 03a1 10       		.uleb128 0x10
 2795 03a2 01       		.byte	0x1
 2796 03a3 37000000 		.4byte	0x37
 2797 03a7 08       		.byte	0x8
 2798 03a8 9E       		.byte	0x9e
 2799 03a9 BA030000 		.4byte	0x3ba
 2800 03ad 11       		.uleb128 0x11
 2801 03ae 9D000000 		.4byte	.LASF45
 2802 03b2 00       		.byte	0
 2803 03b3 11       		.uleb128 0x11
 2804 03b4 F4010000 		.4byte	.LASF46
 2805 03b8 01       		.byte	0x1
 2806 03b9 00       		.byte	0
 2807 03ba 03       		.uleb128 0x3
 2808 03bb 1B050000 		.4byte	.LASF47
 2809 03bf 08       		.byte	0x8
 2810 03c0 A1       		.byte	0xa1
 2811 03c1 A1030000 		.4byte	0x3a1
 2812 03c5 02       		.uleb128 0x2
 2813 03c6 08       		.byte	0x8
 2814 03c7 04       		.byte	0x4
 2815 03c8 0B080000 		.4byte	.LASF48
 2816 03cc 10       		.uleb128 0x10
 2817 03cd 01       		.byte	0x1
 2818 03ce 37000000 		.4byte	0x37
 2819 03d2 09       		.byte	0x9
 2820 03d3 2A       		.byte	0x2a
 2821 03d4 F1030000 		.4byte	0x3f1
 2822 03d8 11       		.uleb128 0x11
 2823 03d9 99030000 		.4byte	.LASF49
 2824 03dd 00       		.byte	0
 2825 03de 11       		.uleb128 0x11
 2826 03df F1070000 		.4byte	.LASF50
 2827 03e3 01       		.byte	0x1
 2828 03e4 11       		.uleb128 0x11
 2829 03e5 68000000 		.4byte	.LASF51
 2830 03e9 02       		.byte	0x2
 2831 03ea 11       		.uleb128 0x11
 2832 03eb E0020000 		.4byte	.LASF52
 2833 03ef 03       		.byte	0x3
 2834 03f0 00       		.byte	0
 2835 03f1 03       		.uleb128 0x3
 2836 03f2 19040000 		.4byte	.LASF53
 2837 03f6 09       		.byte	0x9
ARM GAS  /tmp/ccDRaG8a.s 			page 115


 2838 03f7 2F       		.byte	0x2f
 2839 03f8 CC030000 		.4byte	0x3cc
 2840 03fc 10       		.uleb128 0x10
 2841 03fd 01       		.byte	0x1
 2842 03fe 37000000 		.4byte	0x37
 2843 0402 0A       		.byte	0xa
 2844 0403 30       		.byte	0x30
 2845 0404 2D040000 		.4byte	0x42d
 2846 0408 11       		.uleb128 0x11
 2847 0409 06000000 		.4byte	.LASF54
 2848 040d 00       		.byte	0
 2849 040e 11       		.uleb128 0x11
 2850 040f 1C010000 		.4byte	.LASF55
 2851 0413 01       		.byte	0x1
 2852 0414 11       		.uleb128 0x11
 2853 0415 AB070000 		.4byte	.LASF56
 2854 0419 02       		.byte	0x2
 2855 041a 11       		.uleb128 0x11
 2856 041b 98010000 		.4byte	.LASF57
 2857 041f 03       		.byte	0x3
 2858 0420 11       		.uleb128 0x11
 2859 0421 9A050000 		.4byte	.LASF58
 2860 0425 04       		.byte	0x4
 2861 0426 11       		.uleb128 0x11
 2862 0427 8C090000 		.4byte	.LASF59
 2863 042b 05       		.byte	0x5
 2864 042c 00       		.byte	0
 2865 042d 03       		.uleb128 0x3
 2866 042e B3080000 		.4byte	.LASF60
 2867 0432 0A       		.byte	0xa
 2868 0433 38       		.byte	0x38
 2869 0434 FC030000 		.4byte	0x3fc
 2870 0438 06       		.uleb128 0x6
 2871 0439 2D040000 		.4byte	0x42d
 2872 043d 0B       		.uleb128 0xb
 2873 043e 1C       		.byte	0x1c
 2874 043f 0A       		.byte	0xa
 2875 0440 3D       		.byte	0x3d
 2876 0441 E0040000 		.4byte	0x4e0
 2877 0445 0D       		.uleb128 0xd
 2878 0446 DB080000 		.4byte	.LASF61
 2879 044a 0A       		.byte	0xa
 2880 044b 3F       		.byte	0x3f
 2881 044c AC000000 		.4byte	0xac
 2882 0450 02       		.byte	0x2
 2883 0451 23       		.byte	0x23
 2884 0452 00       		.uleb128 0
 2885 0453 0D       		.uleb128 0xd
 2886 0454 B8020000 		.4byte	.LASF62
 2887 0458 0A       		.byte	0xa
 2888 0459 42       		.byte	0x42
 2889 045a AC000000 		.4byte	0xac
 2890 045e 02       		.byte	0x2
 2891 045f 23       		.byte	0x23
 2892 0460 04       		.uleb128 0x4
 2893 0461 0D       		.uleb128 0xd
 2894 0462 DB010000 		.4byte	.LASF63
ARM GAS  /tmp/ccDRaG8a.s 			page 116


 2895 0466 0A       		.byte	0xa
 2896 0467 45       		.byte	0x45
 2897 0468 AC000000 		.4byte	0xac
 2898 046c 02       		.byte	0x2
 2899 046d 23       		.byte	0x23
 2900 046e 08       		.uleb128 0x8
 2901 046f 0D       		.uleb128 0xd
 2902 0470 F8080000 		.4byte	.LASF64
 2903 0474 0A       		.byte	0xa
 2904 0475 49       		.byte	0x49
 2905 0476 AC000000 		.4byte	0xac
 2906 047a 02       		.byte	0x2
 2907 047b 23       		.byte	0x23
 2908 047c 0C       		.uleb128 0xc
 2909 047d 0D       		.uleb128 0xd
 2910 047e 01090000 		.4byte	.LASF65
 2911 0482 0A       		.byte	0xa
 2912 0483 4C       		.byte	0x4c
 2913 0484 AC000000 		.4byte	0xac
 2914 0488 02       		.byte	0x2
 2915 0489 23       		.byte	0x23
 2916 048a 10       		.uleb128 0x10
 2917 048b 0D       		.uleb128 0xd
 2918 048c 86000000 		.4byte	.LASF66
 2919 0490 0A       		.byte	0xa
 2920 0491 4F       		.byte	0x4f
 2921 0492 BA030000 		.4byte	0x3ba
 2922 0496 02       		.byte	0x2
 2923 0497 23       		.byte	0x23
 2924 0498 14       		.uleb128 0x14
 2925 0499 0D       		.uleb128 0xd
 2926 049a BF030000 		.4byte	.LASF67
 2927 049e 0A       		.byte	0xa
 2928 049f 52       		.byte	0x52
 2929 04a0 BA030000 		.4byte	0x3ba
 2930 04a4 02       		.byte	0x2
 2931 04a5 23       		.byte	0x23
 2932 04a6 15       		.uleb128 0x15
 2933 04a7 0D       		.uleb128 0xd
 2934 04a8 49010000 		.4byte	.LASF68
 2935 04ac 0A       		.byte	0xa
 2936 04ad 55       		.byte	0x55
 2937 04ae BA030000 		.4byte	0x3ba
 2938 04b2 02       		.byte	0x2
 2939 04b3 23       		.byte	0x23
 2940 04b4 16       		.uleb128 0x16
 2941 04b5 0D       		.uleb128 0xd
 2942 04b6 71010000 		.4byte	.LASF69
 2943 04ba 0A       		.byte	0xa
 2944 04bb 58       		.byte	0x58
 2945 04bc BA030000 		.4byte	0x3ba
 2946 04c0 02       		.byte	0x2
 2947 04c1 23       		.byte	0x23
 2948 04c2 17       		.uleb128 0x17
 2949 04c3 0D       		.uleb128 0xd
 2950 04c4 2B050000 		.4byte	.LASF70
 2951 04c8 0A       		.byte	0xa
ARM GAS  /tmp/ccDRaG8a.s 			page 117


 2952 04c9 5B       		.byte	0x5b
 2953 04ca BA030000 		.4byte	0x3ba
 2954 04ce 02       		.byte	0x2
 2955 04cf 23       		.byte	0x23
 2956 04d0 18       		.uleb128 0x18
 2957 04d1 0D       		.uleb128 0xd
 2958 04d2 E0040000 		.4byte	.LASF71
 2959 04d6 0A       		.byte	0xa
 2960 04d7 5E       		.byte	0x5e
 2961 04d8 BA030000 		.4byte	0x3ba
 2962 04dc 02       		.byte	0x2
 2963 04dd 23       		.byte	0x23
 2964 04de 19       		.uleb128 0x19
 2965 04df 00       		.byte	0
 2966 04e0 03       		.uleb128 0x3
 2967 04e1 8C070000 		.4byte	.LASF72
 2968 04e5 0A       		.byte	0xa
 2969 04e6 61       		.byte	0x61
 2970 04e7 3D040000 		.4byte	0x43d
 2971 04eb 0B       		.uleb128 0xb
 2972 04ec 28       		.byte	0x28
 2973 04ed 0A       		.byte	0xa
 2974 04ee 66       		.byte	0x66
 2975 04ef 80050000 		.4byte	0x580
 2976 04f3 0D       		.uleb128 0xd
 2977 04f4 4D0A0000 		.4byte	.LASF73
 2978 04f8 0A       		.byte	0xa
 2979 04f9 68       		.byte	0x68
 2980 04fa AC000000 		.4byte	0xac
 2981 04fe 02       		.byte	0x2
 2982 04ff 23       		.byte	0x23
 2983 0500 00       		.uleb128 0
 2984 0501 0D       		.uleb128 0xd
 2985 0502 6E080000 		.4byte	.LASF74
 2986 0506 0A       		.byte	0xa
 2987 0507 6C       		.byte	0x6c
 2988 0508 AC000000 		.4byte	0xac
 2989 050c 02       		.byte	0x2
 2990 050d 23       		.byte	0x23
 2991 050e 04       		.uleb128 0x4
 2992 050f 0D       		.uleb128 0xd
 2993 0510 B4010000 		.4byte	.LASF75
 2994 0514 0A       		.byte	0xa
 2995 0515 70       		.byte	0x70
 2996 0516 AC000000 		.4byte	0xac
 2997 051a 02       		.byte	0x2
 2998 051b 23       		.byte	0x23
 2999 051c 08       		.uleb128 0x8
 3000 051d 0D       		.uleb128 0xd
 3001 051e 6A060000 		.4byte	.LASF76
 3002 0522 0A       		.byte	0xa
 3003 0523 75       		.byte	0x75
 3004 0524 AC000000 		.4byte	0xac
 3005 0528 02       		.byte	0x2
 3006 0529 23       		.byte	0x23
 3007 052a 0C       		.uleb128 0xc
 3008 052b 0D       		.uleb128 0xd
ARM GAS  /tmp/ccDRaG8a.s 			page 118


 3009 052c 85050000 		.4byte	.LASF77
 3010 0530 0A       		.byte	0xa
 3011 0531 7A       		.byte	0x7a
 3012 0532 AC000000 		.4byte	0xac
 3013 0536 02       		.byte	0x2
 3014 0537 23       		.byte	0x23
 3015 0538 10       		.uleb128 0x10
 3016 0539 0D       		.uleb128 0xd
 3017 053a E9010000 		.4byte	.LASF78
 3018 053e 0A       		.byte	0xa
 3019 053f 7D       		.byte	0x7d
 3020 0540 AC000000 		.4byte	0xac
 3021 0544 02       		.byte	0x2
 3022 0545 23       		.byte	0x23
 3023 0546 14       		.uleb128 0x14
 3024 0547 0D       		.uleb128 0xd
 3025 0548 3E010000 		.4byte	.LASF79
 3026 054c 0A       		.byte	0xa
 3027 054d 83       		.byte	0x83
 3028 054e AC000000 		.4byte	0xac
 3029 0552 02       		.byte	0x2
 3030 0553 23       		.byte	0x23
 3031 0554 18       		.uleb128 0x18
 3032 0555 0D       		.uleb128 0xd
 3033 0556 020A0000 		.4byte	.LASF80
 3034 055a 0A       		.byte	0xa
 3035 055b 86       		.byte	0x86
 3036 055c AC000000 		.4byte	0xac
 3037 0560 02       		.byte	0x2
 3038 0561 23       		.byte	0x23
 3039 0562 1C       		.uleb128 0x1c
 3040 0563 0D       		.uleb128 0xd
 3041 0564 7D040000 		.4byte	.LASF81
 3042 0568 0A       		.byte	0xa
 3043 0569 89       		.byte	0x89
 3044 056a AC000000 		.4byte	0xac
 3045 056e 02       		.byte	0x2
 3046 056f 23       		.byte	0x23
 3047 0570 20       		.uleb128 0x20
 3048 0571 0D       		.uleb128 0xd
 3049 0572 AA030000 		.4byte	.LASF82
 3050 0576 0A       		.byte	0xa
 3051 0577 8C       		.byte	0x8c
 3052 0578 AC000000 		.4byte	0xac
 3053 057c 02       		.byte	0x2
 3054 057d 23       		.byte	0x23
 3055 057e 24       		.uleb128 0x24
 3056 057f 00       		.byte	0
 3057 0580 03       		.uleb128 0x3
 3058 0581 A8090000 		.4byte	.LASF83
 3059 0585 0A       		.byte	0xa
 3060 0586 93       		.byte	0x93
 3061 0587 EB040000 		.4byte	0x4eb
 3062 058b 0B       		.uleb128 0xb
 3063 058c 18       		.byte	0x18
 3064 058d 0A       		.byte	0xa
 3065 058e 98       		.byte	0x98
ARM GAS  /tmp/ccDRaG8a.s 			page 119


 3066 058f E8050000 		.4byte	0x5e8
 3067 0593 0D       		.uleb128 0xd
 3068 0594 54050000 		.4byte	.LASF84
 3069 0598 0A       		.byte	0xa
 3070 0599 9A       		.byte	0x9a
 3071 059a AC000000 		.4byte	0xac
 3072 059e 02       		.byte	0x2
 3073 059f 23       		.byte	0x23
 3074 05a0 00       		.uleb128 0
 3075 05a1 0D       		.uleb128 0xd
 3076 05a2 13040000 		.4byte	.LASF85
 3077 05a6 0A       		.byte	0xa
 3078 05a7 9D       		.byte	0x9d
 3079 05a8 AC000000 		.4byte	0xac
 3080 05ac 02       		.byte	0x2
 3081 05ad 23       		.byte	0x23
 3082 05ae 04       		.uleb128 0x4
 3083 05af 0C       		.uleb128 0xc
 3084 05b0 49444500 		.ascii	"IDE\000"
 3085 05b4 0A       		.byte	0xa
 3086 05b5 A0       		.byte	0xa0
 3087 05b6 AC000000 		.4byte	0xac
 3088 05ba 02       		.byte	0x2
 3089 05bb 23       		.byte	0x23
 3090 05bc 08       		.uleb128 0x8
 3091 05bd 0C       		.uleb128 0xc
 3092 05be 52545200 		.ascii	"RTR\000"
 3093 05c2 0A       		.byte	0xa
 3094 05c3 A3       		.byte	0xa3
 3095 05c4 AC000000 		.4byte	0xac
 3096 05c8 02       		.byte	0x2
 3097 05c9 23       		.byte	0x23
 3098 05ca 0C       		.uleb128 0xc
 3099 05cb 0C       		.uleb128 0xc
 3100 05cc 444C4300 		.ascii	"DLC\000"
 3101 05d0 0A       		.byte	0xa
 3102 05d1 A6       		.byte	0xa6
 3103 05d2 AC000000 		.4byte	0xac
 3104 05d6 02       		.byte	0x2
 3105 05d7 23       		.byte	0x23
 3106 05d8 10       		.uleb128 0x10
 3107 05d9 0D       		.uleb128 0xd
 3108 05da 08050000 		.4byte	.LASF86
 3109 05de 0A       		.byte	0xa
 3110 05df A9       		.byte	0xa9
 3111 05e0 BA030000 		.4byte	0x3ba
 3112 05e4 02       		.byte	0x2
 3113 05e5 23       		.byte	0x23
 3114 05e6 14       		.uleb128 0x14
 3115 05e7 00       		.byte	0
 3116 05e8 03       		.uleb128 0x3
 3117 05e9 7A060000 		.4byte	.LASF87
 3118 05ed 0A       		.byte	0xa
 3119 05ee AF       		.byte	0xaf
 3120 05ef 8B050000 		.4byte	0x58b
 3121 05f3 0B       		.uleb128 0xb
 3122 05f4 1C       		.byte	0x1c
ARM GAS  /tmp/ccDRaG8a.s 			page 120


 3123 05f5 0A       		.byte	0xa
 3124 05f6 B4       		.byte	0xb4
 3125 05f7 5E060000 		.4byte	0x65e
 3126 05fb 0D       		.uleb128 0xd
 3127 05fc 54050000 		.4byte	.LASF84
 3128 0600 0A       		.byte	0xa
 3129 0601 B6       		.byte	0xb6
 3130 0602 AC000000 		.4byte	0xac
 3131 0606 02       		.byte	0x2
 3132 0607 23       		.byte	0x23
 3133 0608 00       		.uleb128 0
 3134 0609 0D       		.uleb128 0xd
 3135 060a 13040000 		.4byte	.LASF85
 3136 060e 0A       		.byte	0xa
 3137 060f B9       		.byte	0xb9
 3138 0610 AC000000 		.4byte	0xac
 3139 0614 02       		.byte	0x2
 3140 0615 23       		.byte	0x23
 3141 0616 04       		.uleb128 0x4
 3142 0617 0C       		.uleb128 0xc
 3143 0618 49444500 		.ascii	"IDE\000"
 3144 061c 0A       		.byte	0xa
 3145 061d BC       		.byte	0xbc
 3146 061e AC000000 		.4byte	0xac
 3147 0622 02       		.byte	0x2
 3148 0623 23       		.byte	0x23
 3149 0624 08       		.uleb128 0x8
 3150 0625 0C       		.uleb128 0xc
 3151 0626 52545200 		.ascii	"RTR\000"
 3152 062a 0A       		.byte	0xa
 3153 062b BF       		.byte	0xbf
 3154 062c AC000000 		.4byte	0xac
 3155 0630 02       		.byte	0x2
 3156 0631 23       		.byte	0x23
 3157 0632 0C       		.uleb128 0xc
 3158 0633 0C       		.uleb128 0xc
 3159 0634 444C4300 		.ascii	"DLC\000"
 3160 0638 0A       		.byte	0xa
 3161 0639 C2       		.byte	0xc2
 3162 063a AC000000 		.4byte	0xac
 3163 063e 02       		.byte	0x2
 3164 063f 23       		.byte	0x23
 3165 0640 10       		.uleb128 0x10
 3166 0641 0D       		.uleb128 0xd
 3167 0642 3C030000 		.4byte	.LASF88
 3168 0646 0A       		.byte	0xa
 3169 0647 C5       		.byte	0xc5
 3170 0648 AC000000 		.4byte	0xac
 3171 064c 02       		.byte	0x2
 3172 064d 23       		.byte	0x23
 3173 064e 14       		.uleb128 0x14
 3174 064f 0D       		.uleb128 0xd
 3175 0650 3C060000 		.4byte	.LASF89
 3176 0654 0A       		.byte	0xa
 3177 0655 C9       		.byte	0xc9
 3178 0656 AC000000 		.4byte	0xac
 3179 065a 02       		.byte	0x2
ARM GAS  /tmp/ccDRaG8a.s 			page 121


 3180 065b 23       		.byte	0x23
 3181 065c 18       		.uleb128 0x18
 3182 065d 00       		.byte	0
 3183 065e 03       		.uleb128 0x3
 3184 065f 69040000 		.4byte	.LASF90
 3185 0663 0A       		.byte	0xa
 3186 0664 CC       		.byte	0xcc
 3187 0665 F3050000 		.4byte	0x5f3
 3188 0669 12       		.uleb128 0x12
 3189 066a 70020000 		.4byte	.LASF169
 3190 066e 28       		.byte	0x28
 3191 066f 0A       		.byte	0xa
 3192 0670 D1       		.byte	0xd1
 3193 0671 AE060000 		.4byte	0x6ae
 3194 0675 0D       		.uleb128 0xd
 3195 0676 F5040000 		.4byte	.LASF91
 3196 067a 0A       		.byte	0xa
 3197 067b D3       		.byte	0xd3
 3198 067c AE060000 		.4byte	0x6ae
 3199 0680 02       		.byte	0x2
 3200 0681 23       		.byte	0x23
 3201 0682 00       		.uleb128 0
 3202 0683 0D       		.uleb128 0xd
 3203 0684 80050000 		.4byte	.LASF92
 3204 0688 0A       		.byte	0xa
 3205 0689 D5       		.byte	0xd5
 3206 068a E0040000 		.4byte	0x4e0
 3207 068e 02       		.byte	0x2
 3208 068f 23       		.byte	0x23
 3209 0690 04       		.uleb128 0x4
 3210 0691 0D       		.uleb128 0xd
 3211 0692 41020000 		.4byte	.LASF93
 3212 0696 0A       		.byte	0xa
 3213 0697 D7       		.byte	0xd7
 3214 0698 38040000 		.4byte	0x438
 3215 069c 02       		.byte	0x2
 3216 069d 23       		.byte	0x23
 3217 069e 20       		.uleb128 0x20
 3218 069f 0D       		.uleb128 0xd
 3219 06a0 09040000 		.4byte	.LASF94
 3220 06a4 0A       		.byte	0xa
 3221 06a5 D9       		.byte	0xd9
 3222 06a6 B7000000 		.4byte	0xb7
 3223 06aa 02       		.byte	0x2
 3224 06ab 23       		.byte	0x23
 3225 06ac 24       		.uleb128 0x24
 3226 06ad 00       		.byte	0
 3227 06ae 13       		.uleb128 0x13
 3228 06af 04       		.byte	0x4
 3229 06b0 95030000 		.4byte	0x395
 3230 06b4 03       		.uleb128 0x3
 3231 06b5 CD060000 		.4byte	.LASF95
 3232 06b9 0A       		.byte	0xa
 3233 06ba EF       		.byte	0xef
 3234 06bb 69060000 		.4byte	0x669
 3235 06bf 13       		.uleb128 0x13
 3236 06c0 04       		.byte	0x4
ARM GAS  /tmp/ccDRaG8a.s 			page 122


 3237 06c1 8C000000 		.4byte	0x8c
 3238 06c5 10       		.uleb128 0x10
 3239 06c6 01       		.byte	0x1
 3240 06c7 37000000 		.4byte	0x37
 3241 06cb 0B       		.byte	0xb
 3242 06cc 33       		.byte	0x33
 3243 06cd EA060000 		.4byte	0x6ea
 3244 06d1 11       		.uleb128 0x11
 3245 06d2 2E020000 		.4byte	.LASF96
 3246 06d6 64       		.byte	0x64
 3247 06d7 11       		.uleb128 0x11
 3248 06d8 7A080000 		.4byte	.LASF97
 3249 06dc 0A       		.byte	0xa
 3250 06dd 11       		.uleb128 0x11
 3251 06de 81030000 		.4byte	.LASF98
 3252 06e2 01       		.byte	0x1
 3253 06e3 11       		.uleb128 0x11
 3254 06e4 5A050000 		.4byte	.LASF99
 3255 06e8 01       		.byte	0x1
 3256 06e9 00       		.byte	0
 3257 06ea 03       		.uleb128 0x3
 3258 06eb 2B000000 		.4byte	.LASF100
 3259 06ef 0B       		.byte	0xb
 3260 06f0 38       		.byte	0x38
 3261 06f1 C5060000 		.4byte	0x6c5
 3262 06f5 0A       		.uleb128 0xa
 3263 06f6 37080000 		.4byte	.LASF101
 3264 06fa 0B       		.byte	0xb
 3265 06fb 3D       		.byte	0x3d
 3266 06fc AC000000 		.4byte	0xac
 3267 0700 01       		.byte	0x1
 3268 0701 01       		.byte	0x1
 3269 0702 0A       		.uleb128 0xa
 3270 0703 31030000 		.4byte	.LASF102
 3271 0707 0B       		.byte	0xb
 3272 0708 3E       		.byte	0x3e
 3273 0709 EA060000 		.4byte	0x6ea
 3274 070d 01       		.byte	0x1
 3275 070e 01       		.byte	0x1
 3276 070f 14       		.uleb128 0x14
 3277 0710 01       		.byte	0x1
 3278 0711 79090000 		.4byte	.LASF105
 3279 0715 01       		.byte	0x1
 3280 0716 5909     		.2byte	0x959
 3281 0718 01       		.byte	0x1
 3282 0719 F1030000 		.4byte	0x3f1
 3283 071d 18080000 		.4byte	.LFB100
 3284 0721 36080000 		.4byte	.LFE100
 3285 0725 02       		.byte	0x2
 3286 0726 7D       		.byte	0x7d
 3287 0727 00       		.sleb128 0
 3288 0728 01       		.byte	0x1
 3289 0729 5E070000 		.4byte	0x75e
 3290 072d 15       		.uleb128 0x15
 3291 072e BC000000 		.4byte	.LASF107
 3292 0732 01       		.byte	0x1
 3293 0733 5909     		.2byte	0x959
ARM GAS  /tmp/ccDRaG8a.s 			page 123


 3294 0735 5E070000 		.4byte	0x75e
 3295 0739 00000000 		.4byte	.LLST71
 3296 073d 16       		.uleb128 0x16
 3297 073e 38090000 		.4byte	.LASF103
 3298 0742 01       		.byte	0x1
 3299 0743 5B09     		.2byte	0x95b
 3300 0745 F1030000 		.4byte	0x3f1
 3301 0749 21000000 		.4byte	.LLST72
 3302 074d 16       		.uleb128 0x16
 3303 074e 84010000 		.4byte	.LASF104
 3304 0752 01       		.byte	0x1
 3305 0753 5C09     		.2byte	0x95c
 3306 0755 2D040000 		.4byte	0x42d
 3307 0759 4C000000 		.4byte	.LLST73
 3308 075d 00       		.byte	0
 3309 075e 13       		.uleb128 0x13
 3310 075f 04       		.byte	0x4
 3311 0760 B4060000 		.4byte	0x6b4
 3312 0764 14       		.uleb128 0x14
 3313 0765 01       		.byte	0x1
 3314 0766 1A000000 		.4byte	.LASF106
 3315 076a 01       		.byte	0x1
 3316 076b 4D09     		.2byte	0x94d
 3317 076d 01       		.byte	0x1
 3318 076e AC000000 		.4byte	0xac
 3319 0772 14080000 		.4byte	.LFB99
 3320 0776 18080000 		.4byte	.LFE99
 3321 077a 02       		.byte	0x2
 3322 077b 7D       		.byte	0x7d
 3323 077c 00       		.sleb128 0
 3324 077d 01       		.byte	0x1
 3325 077e 93070000 		.4byte	0x793
 3326 0782 15       		.uleb128 0x15
 3327 0783 BC000000 		.4byte	.LASF107
 3328 0787 01       		.byte	0x1
 3329 0788 4D09     		.2byte	0x94d
 3330 078a 5E070000 		.4byte	0x75e
 3331 078e 5F000000 		.4byte	.LLST70
 3332 0792 00       		.byte	0
 3333 0793 14       		.uleb128 0x14
 3334 0794 01       		.byte	0x1
 3335 0795 1D020000 		.4byte	.LASF108
 3336 0799 01       		.byte	0x1
 3337 079a 2A09     		.2byte	0x92a
 3338 079c 01       		.byte	0x1
 3339 079d 2D040000 		.4byte	0x42d
 3340 07a1 EE070000 		.4byte	.LFB98
 3341 07a5 14080000 		.4byte	.LFE98
 3342 07a9 02       		.byte	0x2
 3343 07aa 7D       		.byte	0x7d
 3344 07ab 00       		.sleb128 0
 3345 07ac 01       		.byte	0x1
 3346 07ad D2070000 		.4byte	0x7d2
 3347 07b1 15       		.uleb128 0x15
 3348 07b2 BC000000 		.4byte	.LASF107
 3349 07b6 01       		.byte	0x1
 3350 07b7 2A09     		.2byte	0x92a
ARM GAS  /tmp/ccDRaG8a.s 			page 124


 3351 07b9 5E070000 		.4byte	0x75e
 3352 07bd 80000000 		.4byte	.LLST68
 3353 07c1 16       		.uleb128 0x16
 3354 07c2 84010000 		.4byte	.LASF104
 3355 07c6 01       		.byte	0x1
 3356 07c7 2C09     		.2byte	0x92c
 3357 07c9 2D040000 		.4byte	0x42d
 3358 07cd AC000000 		.4byte	.LLST69
 3359 07d1 00       		.byte	0
 3360 07d2 17       		.uleb128 0x17
 3361 07d3 01       		.byte	0x1
 3362 07d4 DF060000 		.4byte	.LASF170
 3363 07d8 01       		.byte	0x1
 3364 07d9 0509     		.2byte	0x905
 3365 07db 01       		.byte	0x1
 3366 07dc 01       		.byte	0x1
 3367 07dd EE070000 		.4byte	0x7ee
 3368 07e1 18       		.uleb128 0x18
 3369 07e2 BC000000 		.4byte	.LASF107
 3370 07e6 01       		.byte	0x1
 3371 07e7 0509     		.2byte	0x905
 3372 07e9 5E070000 		.4byte	0x75e
 3373 07ed 00       		.byte	0
 3374 07ee 19       		.uleb128 0x19
 3375 07ef 01       		.byte	0x1
 3376 07f0 8D020000 		.4byte	.LASF109
 3377 07f4 01       		.byte	0x1
 3378 07f5 F408     		.2byte	0x8f4
 3379 07f7 01       		.byte	0x1
 3380 07f8 09080000 		.4byte	0x809
 3381 07fc 18       		.uleb128 0x18
 3382 07fd BC000000 		.4byte	.LASF107
 3383 0801 01       		.byte	0x1
 3384 0802 F408     		.2byte	0x8f4
 3385 0804 5E070000 		.4byte	0x75e
 3386 0808 00       		.byte	0
 3387 0809 19       		.uleb128 0x19
 3388 080a 01       		.byte	0x1
 3389 080b 4A070000 		.4byte	.LASF110
 3390 080f 01       		.byte	0x1
 3391 0810 E408     		.2byte	0x8e4
 3392 0812 01       		.byte	0x1
 3393 0813 24080000 		.4byte	0x824
 3394 0817 18       		.uleb128 0x18
 3395 0818 BC000000 		.4byte	.LASF107
 3396 081c 01       		.byte	0x1
 3397 081d E408     		.2byte	0x8e4
 3398 081f 5E070000 		.4byte	0x75e
 3399 0823 00       		.byte	0
 3400 0824 19       		.uleb128 0x19
 3401 0825 01       		.byte	0x1
 3402 0826 8E060000 		.4byte	.LASF111
 3403 082a 01       		.byte	0x1
 3404 082b D308     		.2byte	0x8d3
 3405 082d 01       		.byte	0x1
 3406 082e 3F080000 		.4byte	0x83f
 3407 0832 18       		.uleb128 0x18
ARM GAS  /tmp/ccDRaG8a.s 			page 125


 3408 0833 BC000000 		.4byte	.LASF107
 3409 0837 01       		.byte	0x1
 3410 0838 D308     		.2byte	0x8d3
 3411 083a 5E070000 		.4byte	0x75e
 3412 083e 00       		.byte	0
 3413 083f 19       		.uleb128 0x19
 3414 0840 01       		.byte	0x1
 3415 0841 3F090000 		.4byte	.LASF112
 3416 0845 01       		.byte	0x1
 3417 0846 C208     		.2byte	0x8c2
 3418 0848 01       		.byte	0x1
 3419 0849 5A080000 		.4byte	0x85a
 3420 084d 18       		.uleb128 0x18
 3421 084e BC000000 		.4byte	.LASF107
 3422 0852 01       		.byte	0x1
 3423 0853 C208     		.2byte	0x8c2
 3424 0855 5E070000 		.4byte	0x75e
 3425 0859 00       		.byte	0
 3426 085a 19       		.uleb128 0x19
 3427 085b 01       		.byte	0x1
 3428 085c C4040000 		.4byte	.LASF113
 3429 0860 01       		.byte	0x1
 3430 0861 B108     		.2byte	0x8b1
 3431 0863 01       		.byte	0x1
 3432 0864 75080000 		.4byte	0x875
 3433 0868 18       		.uleb128 0x18
 3434 0869 BC000000 		.4byte	.LASF107
 3435 086d 01       		.byte	0x1
 3436 086e B108     		.2byte	0x8b1
 3437 0870 5E070000 		.4byte	0x75e
 3438 0874 00       		.byte	0
 3439 0875 19       		.uleb128 0x19
 3440 0876 01       		.byte	0x1
 3441 0877 0C060000 		.4byte	.LASF114
 3442 087b 01       		.byte	0x1
 3443 087c A008     		.2byte	0x8a0
 3444 087e 01       		.byte	0x1
 3445 087f 90080000 		.4byte	0x890
 3446 0883 18       		.uleb128 0x18
 3447 0884 BC000000 		.4byte	.LASF107
 3448 0888 01       		.byte	0x1
 3449 0889 A008     		.2byte	0x8a0
 3450 088b 5E070000 		.4byte	0x75e
 3451 088f 00       		.byte	0
 3452 0890 19       		.uleb128 0x19
 3453 0891 01       		.byte	0x1
 3454 0892 B5050000 		.4byte	.LASF115
 3455 0896 01       		.byte	0x1
 3456 0897 8F08     		.2byte	0x88f
 3457 0899 01       		.byte	0x1
 3458 089a AB080000 		.4byte	0x8ab
 3459 089e 18       		.uleb128 0x18
 3460 089f BC000000 		.4byte	.LASF107
 3461 08a3 01       		.byte	0x1
 3462 08a4 8F08     		.2byte	0x88f
 3463 08a6 5E070000 		.4byte	0x75e
 3464 08aa 00       		.byte	0
ARM GAS  /tmp/ccDRaG8a.s 			page 126


 3465 08ab 19       		.uleb128 0x19
 3466 08ac 01       		.byte	0x1
 3467 08ad 17080000 		.4byte	.LASF116
 3468 08b1 01       		.byte	0x1
 3469 08b2 7E08     		.2byte	0x87e
 3470 08b4 01       		.byte	0x1
 3471 08b5 C6080000 		.4byte	0x8c6
 3472 08b9 18       		.uleb128 0x18
 3473 08ba BC000000 		.4byte	.LASF107
 3474 08be 01       		.byte	0x1
 3475 08bf 7E08     		.2byte	0x87e
 3476 08c1 5E070000 		.4byte	0x75e
 3477 08c5 00       		.byte	0
 3478 08c6 19       		.uleb128 0x19
 3479 08c7 01       		.byte	0x1
 3480 08c8 C8090000 		.4byte	.LASF117
 3481 08cc 01       		.byte	0x1
 3482 08cd 6D08     		.2byte	0x86d
 3483 08cf 01       		.byte	0x1
 3484 08d0 E1080000 		.4byte	0x8e1
 3485 08d4 18       		.uleb128 0x18
 3486 08d5 BC000000 		.4byte	.LASF107
 3487 08d9 01       		.byte	0x1
 3488 08da 6D08     		.2byte	0x86d
 3489 08dc 5E070000 		.4byte	0x75e
 3490 08e0 00       		.byte	0
 3491 08e1 19       		.uleb128 0x19
 3492 08e2 01       		.byte	0x1
 3493 08e3 0E0A0000 		.4byte	.LASF118
 3494 08e7 01       		.byte	0x1
 3495 08e8 5C08     		.2byte	0x85c
 3496 08ea 01       		.byte	0x1
 3497 08eb FC080000 		.4byte	0x8fc
 3498 08ef 18       		.uleb128 0x18
 3499 08f0 BC000000 		.4byte	.LASF107
 3500 08f4 01       		.byte	0x1
 3501 08f5 5C08     		.2byte	0x85c
 3502 08f7 5E070000 		.4byte	0x75e
 3503 08fb 00       		.byte	0
 3504 08fc 19       		.uleb128 0x19
 3505 08fd 01       		.byte	0x1
 3506 08fe 6F0A0000 		.4byte	.LASF119
 3507 0902 01       		.byte	0x1
 3508 0903 4B08     		.2byte	0x84b
 3509 0905 01       		.byte	0x1
 3510 0906 17090000 		.4byte	0x917
 3511 090a 18       		.uleb128 0x18
 3512 090b BC000000 		.4byte	.LASF107
 3513 090f 01       		.byte	0x1
 3514 0910 4B08     		.2byte	0x84b
 3515 0912 5E070000 		.4byte	0x75e
 3516 0916 00       		.byte	0
 3517 0917 19       		.uleb128 0x19
 3518 0918 01       		.byte	0x1
 3519 0919 EC020000 		.4byte	.LASF120
 3520 091d 01       		.byte	0x1
 3521 091e 3A08     		.2byte	0x83a
ARM GAS  /tmp/ccDRaG8a.s 			page 127


 3522 0920 01       		.byte	0x1
 3523 0921 32090000 		.4byte	0x932
 3524 0925 18       		.uleb128 0x18
 3525 0926 BC000000 		.4byte	.LASF107
 3526 092a 01       		.byte	0x1
 3527 092b 3A08     		.2byte	0x83a
 3528 092d 5E070000 		.4byte	0x75e
 3529 0931 00       		.byte	0
 3530 0932 1A       		.uleb128 0x1a
 3531 0933 01       		.byte	0x1
 3532 0934 C8080000 		.4byte	.LASF171
 3533 0938 01       		.byte	0x1
 3534 0939 9F06     		.2byte	0x69f
 3535 093b 01       		.byte	0x1
 3536 093c F2050000 		.4byte	.LFB84
 3537 0940 EE070000 		.4byte	.LFE84
 3538 0944 BF000000 		.4byte	.LLST64
 3539 0948 01       		.byte	0x1
 3540 0949 B90A0000 		.4byte	0xab9
 3541 094d 15       		.uleb128 0x15
 3542 094e BC000000 		.4byte	.LASF107
 3543 0952 01       		.byte	0x1
 3544 0953 9F06     		.2byte	0x69f
 3545 0955 5E070000 		.4byte	0x75e
 3546 0959 DF000000 		.4byte	.LLST65
 3547 095d 16       		.uleb128 0x16
 3548 095e B9060000 		.4byte	.LASF121
 3549 0962 01       		.byte	0x1
 3550 0963 A106     		.2byte	0x6a1
 3551 0965 AC000000 		.4byte	0xac
 3552 0969 29010000 		.4byte	.LLST66
 3553 096d 1B       		.uleb128 0x1b
 3554 096e 16030000 		.4byte	.LASF122
 3555 0972 01       		.byte	0x1
 3556 0973 A206     		.2byte	0x6a2
 3557 0975 AC000000 		.4byte	0xac
 3558 0979 01       		.byte	0x1
 3559 097a 56       		.byte	0x56
 3560 097b 1B       		.uleb128 0x1b
 3561 097c 84020000 		.4byte	.LASF123
 3562 0980 01       		.byte	0x1
 3563 0981 A306     		.2byte	0x6a3
 3564 0983 AC000000 		.4byte	0xac
 3565 0987 01       		.byte	0x1
 3566 0988 59       		.byte	0x59
 3567 0989 16       		.uleb128 0x16
 3568 098a 60040000 		.4byte	.LASF124
 3569 098e 01       		.byte	0x1
 3570 098f A406     		.2byte	0x6a4
 3571 0991 AC000000 		.4byte	0xac
 3572 0995 5F010000 		.4byte	.LLST67
 3573 0999 1B       		.uleb128 0x1b
 3574 099a FE040000 		.4byte	.LASF125
 3575 099e 01       		.byte	0x1
 3576 099f A506     		.2byte	0x6a5
 3577 09a1 AC000000 		.4byte	0xac
 3578 09a5 01       		.byte	0x1
ARM GAS  /tmp/ccDRaG8a.s 			page 128


 3579 09a6 5B       		.byte	0x5b
 3580 09a7 1B       		.uleb128 0x1b
 3581 09a8 6F030000 		.4byte	.LASF126
 3582 09ac 01       		.byte	0x1
 3583 09ad A606     		.2byte	0x6a6
 3584 09af AC000000 		.4byte	0xac
 3585 09b3 01       		.byte	0x1
 3586 09b4 5A       		.byte	0x5a
 3587 09b5 1B       		.uleb128 0x1b
 3588 09b6 CA030000 		.4byte	.LASF127
 3589 09ba 01       		.byte	0x1
 3590 09bb A706     		.2byte	0x6a7
 3591 09bd AC000000 		.4byte	0xac
 3592 09c1 01       		.byte	0x1
 3593 09c2 58       		.byte	0x58
 3594 09c3 1C       		.uleb128 0x1c
 3595 09c4 28060000 		.4byte	.LVL158
 3596 09c8 17090000 		.4byte	0x917
 3597 09cc D7090000 		.4byte	0x9d7
 3598 09d0 1D       		.uleb128 0x1d
 3599 09d1 01       		.byte	0x1
 3600 09d2 50       		.byte	0x50
 3601 09d3 02       		.byte	0x2
 3602 09d4 75       		.byte	0x75
 3603 09d5 00       		.sleb128 0
 3604 09d6 00       		.byte	0
 3605 09d7 1C       		.uleb128 0x1c
 3606 09d8 42060000 		.4byte	.LVL160
 3607 09dc FC080000 		.4byte	0x8fc
 3608 09e0 EB090000 		.4byte	0x9eb
 3609 09e4 1D       		.uleb128 0x1d
 3610 09e5 01       		.byte	0x1
 3611 09e6 50       		.byte	0x50
 3612 09e7 02       		.byte	0x2
 3613 09e8 75       		.byte	0x75
 3614 09e9 00       		.sleb128 0
 3615 09ea 00       		.byte	0
 3616 09eb 1C       		.uleb128 0x1c
 3617 09ec 5A060000 		.4byte	.LVL161
 3618 09f0 E1080000 		.4byte	0x8e1
 3619 09f4 FF090000 		.4byte	0x9ff
 3620 09f8 1D       		.uleb128 0x1d
 3621 09f9 01       		.byte	0x1
 3622 09fa 50       		.byte	0x50
 3623 09fb 02       		.byte	0x2
 3624 09fc 75       		.byte	0x75
 3625 09fd 00       		.sleb128 0
 3626 09fe 00       		.byte	0
 3627 09ff 1C       		.uleb128 0x1c
 3628 0a00 84060000 		.4byte	.LVL164
 3629 0a04 5A080000 		.4byte	0x85a
 3630 0a08 130A0000 		.4byte	0xa13
 3631 0a0c 1D       		.uleb128 0x1d
 3632 0a0d 01       		.byte	0x1
 3633 0a0e 50       		.byte	0x50
 3634 0a0f 02       		.byte	0x2
 3635 0a10 75       		.byte	0x75
ARM GAS  /tmp/ccDRaG8a.s 			page 129


 3636 0a11 00       		.sleb128 0
 3637 0a12 00       		.byte	0
 3638 0a13 1C       		.uleb128 0x1c
 3639 0a14 96060000 		.4byte	.LVL165
 3640 0a18 75080000 		.4byte	0x875
 3641 0a1c 270A0000 		.4byte	0xa27
 3642 0a20 1D       		.uleb128 0x1d
 3643 0a21 01       		.byte	0x1
 3644 0a22 50       		.byte	0x50
 3645 0a23 02       		.byte	0x2
 3646 0a24 75       		.byte	0x75
 3647 0a25 00       		.sleb128 0
 3648 0a26 00       		.byte	0
 3649 0a27 1C       		.uleb128 0x1c
 3650 0a28 C0060000 		.4byte	.LVL167
 3651 0a2c 24080000 		.4byte	0x824
 3652 0a30 3B0A0000 		.4byte	0xa3b
 3653 0a34 1D       		.uleb128 0x1d
 3654 0a35 01       		.byte	0x1
 3655 0a36 50       		.byte	0x50
 3656 0a37 02       		.byte	0x2
 3657 0a38 75       		.byte	0x75
 3658 0a39 00       		.sleb128 0
 3659 0a3a 00       		.byte	0
 3660 0a3b 1C       		.uleb128 0x1c
 3661 0a3c D2060000 		.4byte	.LVL168
 3662 0a40 3F080000 		.4byte	0x83f
 3663 0a44 4F0A0000 		.4byte	0xa4f
 3664 0a48 1D       		.uleb128 0x1d
 3665 0a49 01       		.byte	0x1
 3666 0a4a 50       		.byte	0x50
 3667 0a4b 02       		.byte	0x2
 3668 0a4c 75       		.byte	0x75
 3669 0a4d 00       		.sleb128 0
 3670 0a4e 00       		.byte	0
 3671 0a4f 1C       		.uleb128 0x1c
 3672 0a50 E8060000 		.4byte	.LVL169
 3673 0a54 09080000 		.4byte	0x809
 3674 0a58 630A0000 		.4byte	0xa63
 3675 0a5c 1D       		.uleb128 0x1d
 3676 0a5d 01       		.byte	0x1
 3677 0a5e 50       		.byte	0x50
 3678 0a5f 02       		.byte	0x2
 3679 0a60 75       		.byte	0x75
 3680 0a61 00       		.sleb128 0
 3681 0a62 00       		.byte	0
 3682 0a63 1C       		.uleb128 0x1c
 3683 0a64 FE060000 		.4byte	.LVL170
 3684 0a68 EE070000 		.4byte	0x7ee
 3685 0a6c 770A0000 		.4byte	0xa77
 3686 0a70 1D       		.uleb128 0x1d
 3687 0a71 01       		.byte	0x1
 3688 0a72 50       		.byte	0x50
 3689 0a73 02       		.byte	0x2
 3690 0a74 75       		.byte	0x75
 3691 0a75 00       		.sleb128 0
 3692 0a76 00       		.byte	0
ARM GAS  /tmp/ccDRaG8a.s 			page 130


 3693 0a77 1C       		.uleb128 0x1c
 3694 0a78 66070000 		.4byte	.LVL175
 3695 0a7c D2070000 		.4byte	0x7d2
 3696 0a80 8B0A0000 		.4byte	0xa8b
 3697 0a84 1D       		.uleb128 0x1d
 3698 0a85 01       		.byte	0x1
 3699 0a86 50       		.byte	0x50
 3700 0a87 02       		.byte	0x2
 3701 0a88 75       		.byte	0x75
 3702 0a89 00       		.sleb128 0
 3703 0a8a 00       		.byte	0
 3704 0a8b 1E       		.uleb128 0x1e
 3705 0a8c 78070000 		.4byte	.LVL177
 3706 0a90 C6080000 		.4byte	0x8c6
 3707 0a94 1C       		.uleb128 0x1c
 3708 0a95 A0070000 		.4byte	.LVL182
 3709 0a99 AB080000 		.4byte	0x8ab
 3710 0a9d A80A0000 		.4byte	0xaa8
 3711 0aa1 1D       		.uleb128 0x1d
 3712 0aa2 01       		.byte	0x1
 3713 0aa3 50       		.byte	0x50
 3714 0aa4 02       		.byte	0x2
 3715 0aa5 75       		.byte	0x75
 3716 0aa6 00       		.sleb128 0
 3717 0aa7 00       		.byte	0
 3718 0aa8 1F       		.uleb128 0x1f
 3719 0aa9 BC070000 		.4byte	.LVL185
 3720 0aad 90080000 		.4byte	0x890
 3721 0ab1 1D       		.uleb128 0x1d
 3722 0ab2 01       		.byte	0x1
 3723 0ab3 50       		.byte	0x50
 3724 0ab4 02       		.byte	0x2
 3725 0ab5 75       		.byte	0x75
 3726 0ab6 00       		.sleb128 0
 3727 0ab7 00       		.byte	0
 3728 0ab8 00       		.byte	0
 3729 0ab9 14       		.uleb128 0x14
 3730 0aba 01       		.byte	0x1
 3731 0abb 4F080000 		.4byte	.LASF128
 3732 0abf 01       		.byte	0x1
 3733 0ac0 8006     		.2byte	0x680
 3734 0ac2 01       		.byte	0x1
 3735 0ac3 F1030000 		.4byte	0x3f1
 3736 0ac7 B4050000 		.4byte	.LFB83
 3737 0acb D8050000 		.4byte	.LFE83
 3738 0acf 02       		.byte	0x2
 3739 0ad0 7D       		.byte	0x7d
 3740 0ad1 00       		.sleb128 0
 3741 0ad2 01       		.byte	0x1
 3742 0ad3 080B0000 		.4byte	0xb08
 3743 0ad7 15       		.uleb128 0x15
 3744 0ad8 BC000000 		.4byte	.LASF107
 3745 0adc 01       		.byte	0x1
 3746 0add 8006     		.2byte	0x680
 3747 0adf 5E070000 		.4byte	0x75e
 3748 0ae3 7D010000 		.4byte	.LLST61
 3749 0ae7 15       		.uleb128 0x15
ARM GAS  /tmp/ccDRaG8a.s 			page 131


 3750 0ae8 FB010000 		.4byte	.LASF129
 3751 0aec 01       		.byte	0x1
 3752 0aed 8006     		.2byte	0x680
 3753 0aef AC000000 		.4byte	0xac
 3754 0af3 B7010000 		.4byte	.LLST62
 3755 0af7 16       		.uleb128 0x16
 3756 0af8 84010000 		.4byte	.LASF104
 3757 0afc 01       		.byte	0x1
 3758 0afd 8206     		.2byte	0x682
 3759 0aff 2D040000 		.4byte	0x42d
 3760 0b03 E3010000 		.4byte	.LLST63
 3761 0b07 00       		.byte	0
 3762 0b08 14       		.uleb128 0x14
 3763 0b09 01       		.byte	0x1
 3764 0b0a 54010000 		.4byte	.LASF130
 3765 0b0e 01       		.byte	0x1
 3766 0b0f 5F06     		.2byte	0x65f
 3767 0b11 01       		.byte	0x1
 3768 0b12 F1030000 		.4byte	0x3f1
 3769 0b16 92050000 		.4byte	.LFB82
 3770 0b1a B4050000 		.4byte	.LFE82
 3771 0b1e 02       		.byte	0x2
 3772 0b1f 7D       		.byte	0x7d
 3773 0b20 00       		.sleb128 0
 3774 0b21 01       		.byte	0x1
 3775 0b22 570B0000 		.4byte	0xb57
 3776 0b26 15       		.uleb128 0x15
 3777 0b27 BC000000 		.4byte	.LASF107
 3778 0b2b 01       		.byte	0x1
 3779 0b2c 5F06     		.2byte	0x65f
 3780 0b2e 5E070000 		.4byte	0x75e
 3781 0b32 F6010000 		.4byte	.LLST58
 3782 0b36 15       		.uleb128 0x15
 3783 0b37 D0020000 		.4byte	.LASF131
 3784 0b3b 01       		.byte	0x1
 3785 0b3c 5F06     		.2byte	0x65f
 3786 0b3e AC000000 		.4byte	0xac
 3787 0b42 30020000 		.4byte	.LLST59
 3788 0b46 16       		.uleb128 0x16
 3789 0b47 84010000 		.4byte	.LASF104
 3790 0b4b 01       		.byte	0x1
 3791 0b4c 6106     		.2byte	0x661
 3792 0b4e 2D040000 		.4byte	0x42d
 3793 0b52 5C020000 		.4byte	.LLST60
 3794 0b56 00       		.byte	0
 3795 0b57 14       		.uleb128 0x14
 3796 0b58 01       		.byte	0x1
 3797 0b59 CD070000 		.4byte	.LASF132
 3798 0b5d 01       		.byte	0x1
 3799 0b5e 2A06     		.2byte	0x62a
 3800 0b60 01       		.byte	0x1
 3801 0b61 AC000000 		.4byte	0xac
 3802 0b65 74050000 		.4byte	.LFB81
 3803 0b69 92050000 		.4byte	.LFE81
 3804 0b6d 02       		.byte	0x2
 3805 0b6e 7D       		.byte	0x7d
 3806 0b6f 00       		.sleb128 0
ARM GAS  /tmp/ccDRaG8a.s 			page 132


 3807 0b70 01       		.byte	0x1
 3808 0b71 B40B0000 		.4byte	0xbb4
 3809 0b75 15       		.uleb128 0x15
 3810 0b76 BC000000 		.4byte	.LASF107
 3811 0b7a 01       		.byte	0x1
 3812 0b7b 2A06     		.2byte	0x62a
 3813 0b7d 5E070000 		.4byte	0x75e
 3814 0b81 6F020000 		.4byte	.LLST55
 3815 0b85 20       		.uleb128 0x20
 3816 0b86 0F030000 		.4byte	.LASF133
 3817 0b8a 01       		.byte	0x1
 3818 0b8b 2A06     		.2byte	0x62a
 3819 0b8d AC000000 		.4byte	0xac
 3820 0b91 01       		.byte	0x1
 3821 0b92 51       		.byte	0x51
 3822 0b93 16       		.uleb128 0x16
 3823 0b94 A0030000 		.4byte	.LASF134
 3824 0b98 01       		.byte	0x1
 3825 0b99 2C06     		.2byte	0x62c
 3826 0b9b AC000000 		.4byte	0xac
 3827 0b9f C2020000 		.4byte	.LLST56
 3828 0ba3 16       		.uleb128 0x16
 3829 0ba4 84010000 		.4byte	.LASF104
 3830 0ba8 01       		.byte	0x1
 3831 0ba9 2D06     		.2byte	0x62d
 3832 0bab 2D040000 		.4byte	0x42d
 3833 0baf ED020000 		.4byte	.LLST57
 3834 0bb3 00       		.byte	0
 3835 0bb4 21       		.uleb128 0x21
 3836 0bb5 01       		.byte	0x1
 3837 0bb6 D9000000 		.4byte	.LASF135
 3838 0bba 01       		.byte	0x1
 3839 0bbb D005     		.2byte	0x5d0
 3840 0bbd 01       		.byte	0x1
 3841 0bbe F1030000 		.4byte	0x3f1
 3842 0bc2 88040000 		.4byte	.LFB80
 3843 0bc6 74050000 		.4byte	.LFE80
 3844 0bca 00030000 		.4byte	.LLST50
 3845 0bce 01       		.byte	0x1
 3846 0bcf 220C0000 		.4byte	0xc22
 3847 0bd3 15       		.uleb128 0x15
 3848 0bd4 BC000000 		.4byte	.LASF107
 3849 0bd8 01       		.byte	0x1
 3850 0bd9 D005     		.2byte	0x5d0
 3851 0bdb 5E070000 		.4byte	0x75e
 3852 0bdf 20030000 		.4byte	.LLST51
 3853 0be3 20       		.uleb128 0x20
 3854 0be4 0F030000 		.4byte	.LASF133
 3855 0be8 01       		.byte	0x1
 3856 0be9 D005     		.2byte	0x5d0
 3857 0beb AC000000 		.4byte	0xac
 3858 0bef 01       		.byte	0x1
 3859 0bf0 51       		.byte	0x51
 3860 0bf1 15       		.uleb128 0x15
 3861 0bf2 4A000000 		.4byte	.LASF136
 3862 0bf6 01       		.byte	0x1
 3863 0bf7 D005     		.2byte	0x5d0
ARM GAS  /tmp/ccDRaG8a.s 			page 133


 3864 0bf9 220C0000 		.4byte	0xc22
 3865 0bfd 65030000 		.4byte	.LLST52
 3866 0c01 15       		.uleb128 0x15
 3867 0c02 0A090000 		.4byte	.LASF137
 3868 0c06 01       		.byte	0x1
 3869 0c07 D005     		.2byte	0x5d0
 3870 0c09 BF060000 		.4byte	0x6bf
 3871 0c0d AA030000 		.4byte	.LLST53
 3872 0c11 16       		.uleb128 0x16
 3873 0c12 84010000 		.4byte	.LASF104
 3874 0c16 01       		.byte	0x1
 3875 0c17 D205     		.2byte	0x5d2
 3876 0c19 2D040000 		.4byte	0x42d
 3877 0c1d 16040000 		.4byte	.LLST54
 3878 0c21 00       		.byte	0
 3879 0c22 13       		.uleb128 0x13
 3880 0c23 04       		.byte	0x4
 3881 0c24 5E060000 		.4byte	0x65e
 3882 0c28 14       		.uleb128 0x14
 3883 0c29 01       		.byte	0x1
 3884 0c2a 46030000 		.4byte	.LASF138
 3885 0c2e 01       		.byte	0x1
 3886 0c2f AE05     		.2byte	0x5ae
 3887 0c31 01       		.byte	0x1
 3888 0c32 AC000000 		.4byte	0xac
 3889 0c36 64040000 		.4byte	.LFB79
 3890 0c3a 88040000 		.4byte	.LFE79
 3891 0c3e 02       		.byte	0x2
 3892 0c3f 7D       		.byte	0x7d
 3893 0c40 00       		.sleb128 0
 3894 0c41 01       		.byte	0x1
 3895 0c42 C00C0000 		.4byte	0xcc0
 3896 0c46 15       		.uleb128 0x15
 3897 0c47 BC000000 		.4byte	.LASF107
 3898 0c4b 01       		.byte	0x1
 3899 0c4c AE05     		.2byte	0x5ae
 3900 0c4e 5E070000 		.4byte	0x75e
 3901 0c52 29040000 		.4byte	.LLST44
 3902 0c56 15       		.uleb128 0x15
 3903 0c57 F8090000 		.4byte	.LASF139
 3904 0c5b 01       		.byte	0x1
 3905 0c5c AE05     		.2byte	0x5ae
 3906 0c5e AC000000 		.4byte	0xac
 3907 0c62 63040000 		.4byte	.LLST45
 3908 0c66 16       		.uleb128 0x16
 3909 0c67 0D010000 		.4byte	.LASF140
 3910 0c6b 01       		.byte	0x1
 3911 0c6c B005     		.2byte	0x5b0
 3912 0c6e AC000000 		.4byte	0xac
 3913 0c72 8F040000 		.4byte	.LLST46
 3914 0c76 16       		.uleb128 0x16
 3915 0c77 310A0000 		.4byte	.LASF141
 3916 0c7b 01       		.byte	0x1
 3917 0c7c B105     		.2byte	0x5b1
 3918 0c7e AC000000 		.4byte	0xac
 3919 0c82 BA040000 		.4byte	.LLST47
 3920 0c86 16       		.uleb128 0x16
ARM GAS  /tmp/ccDRaG8a.s 			page 134


 3921 0c87 84010000 		.4byte	.LASF104
 3922 0c8b 01       		.byte	0x1
 3923 0c8c B205     		.2byte	0x5b2
 3924 0c8e 2D040000 		.4byte	0x42d
 3925 0c92 DA040000 		.4byte	.LLST48
 3926 0c96 22       		.uleb128 0x22
 3927 0c97 3C110000 		.4byte	0x113c
 3928 0c9b 6E040000 		.4byte	.LBB8
 3929 0c9f 72040000 		.4byte	.LBE8
 3930 0ca3 01       		.byte	0x1
 3931 0ca4 BB05     		.2byte	0x5bb
 3932 0ca6 23       		.uleb128 0x23
 3933 0ca7 4E110000 		.4byte	0x114e
 3934 0cab ED040000 		.4byte	.LLST49
 3935 0caf 24       		.uleb128 0x24
 3936 0cb0 6E040000 		.4byte	.LBB9
 3937 0cb4 72040000 		.4byte	.LBE9
 3938 0cb8 25       		.uleb128 0x25
 3939 0cb9 5A110000 		.4byte	0x115a
 3940 0cbd 00       		.byte	0
 3941 0cbe 00       		.byte	0
 3942 0cbf 00       		.byte	0
 3943 0cc0 14       		.uleb128 0x14
 3944 0cc1 01       		.byte	0x1
 3945 0cc2 10090000 		.4byte	.LASF142
 3946 0cc6 01       		.byte	0x1
 3947 0cc7 8E05     		.2byte	0x58e
 3948 0cc9 01       		.byte	0x1
 3949 0cca AC000000 		.4byte	0xac
 3950 0cce 44040000 		.4byte	.LFB78
 3951 0cd2 64040000 		.4byte	.LFE78
 3952 0cd6 02       		.byte	0x2
 3953 0cd7 7D       		.byte	0x7d
 3954 0cd8 00       		.sleb128 0
 3955 0cd9 01       		.byte	0x1
 3956 0cda 1F0D0000 		.4byte	0xd1f
 3957 0cde 15       		.uleb128 0x15
 3958 0cdf BC000000 		.4byte	.LASF107
 3959 0ce3 01       		.byte	0x1
 3960 0ce4 8E05     		.2byte	0x58e
 3961 0ce6 5E070000 		.4byte	0x75e
 3962 0cea 00050000 		.4byte	.LLST40
 3963 0cee 15       		.uleb128 0x15
 3964 0cef 8E040000 		.4byte	.LASF143
 3965 0cf3 01       		.byte	0x1
 3966 0cf4 8E05     		.2byte	0x58e
 3967 0cf6 AC000000 		.4byte	0xac
 3968 0cfa 3A050000 		.4byte	.LLST41
 3969 0cfe 16       		.uleb128 0x16
 3970 0cff 38090000 		.4byte	.LASF103
 3971 0d03 01       		.byte	0x1
 3972 0d04 9005     		.2byte	0x590
 3973 0d06 AC000000 		.4byte	0xac
 3974 0d0a 66050000 		.4byte	.LLST42
 3975 0d0e 16       		.uleb128 0x16
 3976 0d0f 84010000 		.4byte	.LASF104
 3977 0d13 01       		.byte	0x1
ARM GAS  /tmp/ccDRaG8a.s 			page 135


 3978 0d14 9105     		.2byte	0x591
 3979 0d16 2D040000 		.4byte	0x42d
 3980 0d1a 8A050000 		.4byte	.LLST43
 3981 0d1e 00       		.byte	0
 3982 0d1f 14       		.uleb128 0x14
 3983 0d20 01       		.byte	0x1
 3984 0d21 3B040000 		.4byte	.LASF144
 3985 0d25 01       		.byte	0x1
 3986 0d26 6305     		.2byte	0x563
 3987 0d28 01       		.byte	0x1
 3988 0d29 AC000000 		.4byte	0xac
 3989 0d2d 1C040000 		.4byte	.LFB77
 3990 0d31 44040000 		.4byte	.LFE77
 3991 0d35 02       		.byte	0x2
 3992 0d36 7D       		.byte	0x7d
 3993 0d37 00       		.sleb128 0
 3994 0d38 01       		.byte	0x1
 3995 0d39 6E0D0000 		.4byte	0xd6e
 3996 0d3d 15       		.uleb128 0x15
 3997 0d3e BC000000 		.4byte	.LASF107
 3998 0d42 01       		.byte	0x1
 3999 0d43 6305     		.2byte	0x563
 4000 0d45 5E070000 		.4byte	0x75e
 4001 0d49 9D050000 		.4byte	.LLST37
 4002 0d4d 16       		.uleb128 0x16
 4003 0d4e 76050000 		.4byte	.LASF145
 4004 0d52 01       		.byte	0x1
 4005 0d53 6505     		.2byte	0x565
 4006 0d55 AC000000 		.4byte	0xac
 4007 0d59 D7050000 		.4byte	.LLST38
 4008 0d5d 16       		.uleb128 0x16
 4009 0d5e 84010000 		.4byte	.LASF104
 4010 0d62 01       		.byte	0x1
 4011 0d63 6605     		.2byte	0x566
 4012 0d65 2D040000 		.4byte	0x42d
 4013 0d69 02060000 		.4byte	.LLST39
 4014 0d6d 00       		.byte	0
 4015 0d6e 14       		.uleb128 0x14
 4016 0d6f 01       		.byte	0x1
 4017 0d70 3D050000 		.4byte	.LASF146
 4018 0d74 01       		.byte	0x1
 4019 0d75 3205     		.2byte	0x532
 4020 0d77 01       		.byte	0x1
 4021 0d78 F1030000 		.4byte	0x3f1
 4022 0d7c D2030000 		.4byte	.LFB76
 4023 0d80 1C040000 		.4byte	.LFE76
 4024 0d84 02       		.byte	0x2
 4025 0d85 7D       		.byte	0x7d
 4026 0d86 00       		.sleb128 0
 4027 0d87 01       		.byte	0x1
 4028 0d88 BD0D0000 		.4byte	0xdbd
 4029 0d8c 15       		.uleb128 0x15
 4030 0d8d BC000000 		.4byte	.LASF107
 4031 0d91 01       		.byte	0x1
 4032 0d92 3205     		.2byte	0x532
 4033 0d94 5E070000 		.4byte	0x75e
 4034 0d98 15060000 		.4byte	.LLST34
ARM GAS  /tmp/ccDRaG8a.s 			page 136


 4035 0d9c 15       		.uleb128 0x15
 4036 0d9d 8E040000 		.4byte	.LASF143
 4037 0da1 01       		.byte	0x1
 4038 0da2 3205     		.2byte	0x532
 4039 0da4 AC000000 		.4byte	0xac
 4040 0da8 4F060000 		.4byte	.LLST35
 4041 0dac 16       		.uleb128 0x16
 4042 0dad 84010000 		.4byte	.LASF104
 4043 0db1 01       		.byte	0x1
 4044 0db2 3405     		.2byte	0x534
 4045 0db4 2D040000 		.4byte	0x42d
 4046 0db8 7B060000 		.4byte	.LLST36
 4047 0dbc 00       		.byte	0
 4048 0dbd 21       		.uleb128 0x21
 4049 0dbe 01       		.byte	0x1
 4050 0dbf 71000000 		.4byte	.LASF147
 4051 0dc3 01       		.byte	0x1
 4052 0dc4 C604     		.2byte	0x4c6
 4053 0dc6 01       		.byte	0x1
 4054 0dc7 F1030000 		.4byte	0x3f1
 4055 0dcb 36030000 		.4byte	.LFB75
 4056 0dcf D2030000 		.4byte	.LFE75
 4057 0dd3 8E060000 		.4byte	.LLST26
 4058 0dd7 01       		.byte	0x1
 4059 0dd8 4D0E0000 		.4byte	0xe4d
 4060 0ddc 15       		.uleb128 0x15
 4061 0ddd BC000000 		.4byte	.LASF107
 4062 0de1 01       		.byte	0x1
 4063 0de2 C604     		.2byte	0x4c6
 4064 0de4 5E070000 		.4byte	0x75e
 4065 0de8 AE060000 		.4byte	.LLST27
 4066 0dec 15       		.uleb128 0x15
 4067 0ded 4A000000 		.4byte	.LASF136
 4068 0df1 01       		.byte	0x1
 4069 0df2 C604     		.2byte	0x4c6
 4070 0df4 4D0E0000 		.4byte	0xe4d
 4071 0df8 F3060000 		.4byte	.LLST28
 4072 0dfc 15       		.uleb128 0x15
 4073 0dfd 0A090000 		.4byte	.LASF137
 4074 0e01 01       		.byte	0x1
 4075 0e02 C604     		.2byte	0x4c6
 4076 0e04 BF060000 		.4byte	0x6bf
 4077 0e08 1F070000 		.4byte	.LLST29
 4078 0e0c 15       		.uleb128 0x15
 4079 0e0d ED090000 		.4byte	.LASF148
 4080 0e11 01       		.byte	0x1
 4081 0e12 C604     		.2byte	0x4c6
 4082 0e14 530E0000 		.4byte	0xe53
 4083 0e18 4B070000 		.4byte	.LLST30
 4084 0e1c 16       		.uleb128 0x16
 4085 0e1d 310A0000 		.4byte	.LASF141
 4086 0e21 01       		.byte	0x1
 4087 0e22 C804     		.2byte	0x4c8
 4088 0e24 AC000000 		.4byte	0xac
 4089 0e28 B7070000 		.4byte	.LLST31
 4090 0e2c 16       		.uleb128 0x16
 4091 0e2d 84010000 		.4byte	.LASF104
ARM GAS  /tmp/ccDRaG8a.s 			page 137


 4092 0e31 01       		.byte	0x1
 4093 0e32 C904     		.2byte	0x4c9
 4094 0e34 2D040000 		.4byte	0x42d
 4095 0e38 E0070000 		.4byte	.LLST32
 4096 0e3c 26       		.uleb128 0x26
 4097 0e3d 74737200 		.ascii	"tsr\000"
 4098 0e41 01       		.byte	0x1
 4099 0e42 CA04     		.2byte	0x4ca
 4100 0e44 AC000000 		.4byte	0xac
 4101 0e48 F3070000 		.4byte	.LLST33
 4102 0e4c 00       		.byte	0
 4103 0e4d 13       		.uleb128 0x13
 4104 0e4e 04       		.byte	0x4
 4105 0e4f E8050000 		.4byte	0x5e8
 4106 0e53 13       		.uleb128 0x13
 4107 0e54 04       		.byte	0x4
 4108 0e55 AC000000 		.4byte	0xac
 4109 0e59 14       		.uleb128 0x14
 4110 0e5a 01       		.byte	0x1
 4111 0e5b D8030000 		.4byte	.LASF149
 4112 0e5f 01       		.byte	0x1
 4113 0e60 A704     		.2byte	0x4a7
 4114 0e62 01       		.byte	0x1
 4115 0e63 AC000000 		.4byte	0xac
 4116 0e67 20030000 		.4byte	.LFB74
 4117 0e6b 36030000 		.4byte	.LFE74
 4118 0e6f 02       		.byte	0x2
 4119 0e70 7D       		.byte	0x7d
 4120 0e71 00       		.sleb128 0
 4121 0e72 01       		.byte	0x1
 4122 0e73 A80E0000 		.4byte	0xea8
 4123 0e77 15       		.uleb128 0x15
 4124 0e78 BC000000 		.4byte	.LASF107
 4125 0e7c 01       		.byte	0x1
 4126 0e7d A704     		.2byte	0x4a7
 4127 0e7f 5E070000 		.4byte	0x75e
 4128 0e83 11080000 		.4byte	.LLST23
 4129 0e87 16       		.uleb128 0x16
 4130 0e88 38090000 		.4byte	.LASF103
 4131 0e8c 01       		.byte	0x1
 4132 0e8d A904     		.2byte	0x4a9
 4133 0e8f AC000000 		.4byte	0xac
 4134 0e93 32080000 		.4byte	.LLST24
 4135 0e97 16       		.uleb128 0x16
 4136 0e98 84010000 		.4byte	.LASF104
 4137 0e9c 01       		.byte	0x1
 4138 0e9d AA04     		.2byte	0x4aa
 4139 0e9f 2D040000 		.4byte	0x42d
 4140 0ea3 56080000 		.4byte	.LLST25
 4141 0ea7 00       		.byte	0
 4142 0ea8 21       		.uleb128 0x21
 4143 0ea9 01       		.byte	0x1
 4144 0eaa AA060000 		.4byte	.LASF150
 4145 0eae 01       		.byte	0x1
 4146 0eaf 7604     		.2byte	0x476
 4147 0eb1 01       		.byte	0x1
 4148 0eb2 F1030000 		.4byte	0x3f1
ARM GAS  /tmp/ccDRaG8a.s 			page 138


 4149 0eb6 D0020000 		.4byte	.LFB73
 4150 0eba 20030000 		.4byte	.LFE73
 4151 0ebe 69080000 		.4byte	.LLST20
 4152 0ec2 01       		.byte	0x1
 4153 0ec3 070F0000 		.4byte	0xf07
 4154 0ec7 15       		.uleb128 0x15
 4155 0ec8 BC000000 		.4byte	.LASF107
 4156 0ecc 01       		.byte	0x1
 4157 0ecd 7604     		.2byte	0x476
 4158 0ecf 5E070000 		.4byte	0x75e
 4159 0ed3 A1080000 		.4byte	.LLST21
 4160 0ed7 1B       		.uleb128 0x1b
 4161 0ed8 00000000 		.4byte	.LASF151
 4162 0edc 01       		.byte	0x1
 4163 0edd 7804     		.2byte	0x478
 4164 0edf B7000000 		.4byte	0xb7
 4165 0ee3 02       		.byte	0x2
 4166 0ee4 91       		.byte	0x91
 4167 0ee5 7C       		.sleb128 -4
 4168 0ee6 27       		.uleb128 0x27
 4169 0ee7 79030000 		.4byte	.LASF152
 4170 0eeb 01       		.byte	0x1
 4171 0eec 7904     		.2byte	0x479
 4172 0eee AC000000 		.4byte	0xac
 4173 0ef2 40420F00 		.4byte	0xf4240
 4174 0ef6 16       		.uleb128 0x16
 4175 0ef7 84010000 		.4byte	.LASF104
 4176 0efb 01       		.byte	0x1
 4177 0efc 7A04     		.2byte	0x47a
 4178 0efe 2D040000 		.4byte	0x42d
 4179 0f02 E6080000 		.4byte	.LLST22
 4180 0f06 00       		.byte	0
 4181 0f07 14       		.uleb128 0x14
 4182 0f08 01       		.byte	0x1
 4183 0f09 AF040000 		.4byte	.LASF153
 4184 0f0d 01       		.byte	0x1
 4185 0f0e 5704     		.2byte	0x457
 4186 0f10 01       		.byte	0x1
 4187 0f11 F1030000 		.4byte	0x3f1
 4188 0f15 AC020000 		.4byte	.LFB72
 4189 0f19 D0020000 		.4byte	.LFE72
 4190 0f1d 02       		.byte	0x2
 4191 0f1e 7D       		.byte	0x7d
 4192 0f1f 00       		.sleb128 0
 4193 0f20 01       		.byte	0x1
 4194 0f21 460F0000 		.4byte	0xf46
 4195 0f25 15       		.uleb128 0x15
 4196 0f26 BC000000 		.4byte	.LASF107
 4197 0f2a 01       		.byte	0x1
 4198 0f2b 5704     		.2byte	0x457
 4199 0f2d 5E070000 		.4byte	0x75e
 4200 0f31 F9080000 		.4byte	.LLST18
 4201 0f35 16       		.uleb128 0x16
 4202 0f36 84010000 		.4byte	.LASF104
 4203 0f3a 01       		.byte	0x1
 4204 0f3b 5904     		.2byte	0x459
 4205 0f3d 2D040000 		.4byte	0x42d
ARM GAS  /tmp/ccDRaG8a.s 			page 139


 4206 0f41 33090000 		.4byte	.LLST19
 4207 0f45 00       		.byte	0
 4208 0f46 28       		.uleb128 0x28
 4209 0f47 01       		.byte	0x1
 4210 0f48 2B090000 		.4byte	.LASF172
 4211 0f4c 01       		.byte	0x1
 4212 0f4d 2004     		.2byte	0x420
 4213 0f4f 01       		.byte	0x1
 4214 0f50 F1030000 		.4byte	0x3f1
 4215 0f54 01       		.byte	0x1
 4216 0f55 720F0000 		.4byte	0xf72
 4217 0f59 18       		.uleb128 0x18
 4218 0f5a BC000000 		.4byte	.LASF107
 4219 0f5e 01       		.byte	0x1
 4220 0f5f 2004     		.2byte	0x420
 4221 0f61 5E070000 		.4byte	0x75e
 4222 0f65 29       		.uleb128 0x29
 4223 0f66 C3060000 		.4byte	.LASF155
 4224 0f6a 01       		.byte	0x1
 4225 0f6b 2204     		.2byte	0x422
 4226 0f6d AC000000 		.4byte	0xac
 4227 0f71 00       		.byte	0
 4228 0f72 21       		.uleb128 0x21
 4229 0f73 01       		.byte	0x1
 4230 0f74 BA090000 		.4byte	.LASF154
 4231 0f78 01       		.byte	0x1
 4232 0f79 EC03     		.2byte	0x3ec
 4233 0f7b 01       		.byte	0x1
 4234 0f7c F1030000 		.4byte	0x3f1
 4235 0f80 D2010000 		.4byte	.LFB70
 4236 0f84 28020000 		.4byte	.LFE70
 4237 0f88 46090000 		.4byte	.LLST9
 4238 0f8c 01       		.byte	0x1
 4239 0f8d C40F0000 		.4byte	0xfc4
 4240 0f91 15       		.uleb128 0x15
 4241 0f92 BC000000 		.4byte	.LASF107
 4242 0f96 01       		.byte	0x1
 4243 0f97 EC03     		.2byte	0x3ec
 4244 0f99 5E070000 		.4byte	0x75e
 4245 0f9d 66090000 		.4byte	.LLST10
 4246 0fa1 16       		.uleb128 0x16
 4247 0fa2 C3060000 		.4byte	.LASF155
 4248 0fa6 01       		.byte	0x1
 4249 0fa7 EE03     		.2byte	0x3ee
 4250 0fa9 AC000000 		.4byte	0xac
 4251 0fad 8F090000 		.4byte	.LLST11
 4252 0fb1 1E       		.uleb128 0x1e
 4253 0fb2 F2010000 		.4byte	.LVL22
 4254 0fb6 E5110000 		.4byte	0x11e5
 4255 0fba 1E       		.uleb128 0x1e
 4256 0fbb 06020000 		.4byte	.LVL25
 4257 0fbf E5110000 		.4byte	0x11e5
 4258 0fc3 00       		.byte	0
 4259 0fc4 21       		.uleb128 0x21
 4260 0fc5 01       		.byte	0x1
 4261 0fc6 5A0A0000 		.4byte	.LASF156
 4262 0fca 01       		.byte	0x1
ARM GAS  /tmp/ccDRaG8a.s 			page 140


 4263 0fcb 4603     		.2byte	0x346
 4264 0fcd 01       		.byte	0x1
 4265 0fce F1030000 		.4byte	0x3f1
 4266 0fd2 FA000000 		.4byte	.LFB69
 4267 0fd6 D2010000 		.4byte	.LFE69
 4268 0fda A2090000 		.4byte	.LLST3
 4269 0fde 01       		.byte	0x1
 4270 0fdf 34100000 		.4byte	0x1034
 4271 0fe3 15       		.uleb128 0x15
 4272 0fe4 BC000000 		.4byte	.LASF107
 4273 0fe8 01       		.byte	0x1
 4274 0fe9 4603     		.2byte	0x346
 4275 0feb 5E070000 		.4byte	0x75e
 4276 0fef C2090000 		.4byte	.LLST4
 4277 0ff3 15       		.uleb128 0x15
 4278 0ff4 2E060000 		.4byte	.LASF157
 4279 0ff8 01       		.byte	0x1
 4280 0ff9 4603     		.2byte	0x346
 4281 0ffb 34100000 		.4byte	0x1034
 4282 0fff FC090000 		.4byte	.LLST5
 4283 1003 16       		.uleb128 0x16
 4284 1004 FB070000 		.4byte	.LASF158
 4285 1008 01       		.byte	0x1
 4286 1009 4803     		.2byte	0x348
 4287 100b AC000000 		.4byte	0xac
 4288 100f 280A0000 		.4byte	.LLST6
 4289 1013 16       		.uleb128 0x16
 4290 1014 63060000 		.4byte	.LASF159
 4291 1018 01       		.byte	0x1
 4292 1019 4903     		.2byte	0x349
 4293 101b AE060000 		.4byte	0x6ae
 4294 101f 540A0000 		.4byte	.LLST7
 4295 1023 16       		.uleb128 0x16
 4296 1024 84010000 		.4byte	.LASF104
 4297 1028 01       		.byte	0x1
 4298 1029 4A03     		.2byte	0x34a
 4299 102b 2D040000 		.4byte	0x42d
 4300 102f 8E0A0000 		.4byte	.LLST8
 4301 1033 00       		.byte	0
 4302 1034 13       		.uleb128 0x13
 4303 1035 04       		.byte	0x4
 4304 1036 80050000 		.4byte	0x580
 4305 103a 19       		.uleb128 0x19
 4306 103b 01       		.byte	0x1
 4307 103c FB000000 		.4byte	.LASF160
 4308 1040 01       		.byte	0x1
 4309 1041 0A02     		.2byte	0x20a
 4310 1043 01       		.byte	0x1
 4311 1044 55100000 		.4byte	0x1055
 4312 1048 18       		.uleb128 0x18
 4313 1049 BC000000 		.4byte	.LASF107
 4314 104d 01       		.byte	0x1
 4315 104e 0A02     		.2byte	0x20a
 4316 1050 5E070000 		.4byte	0x75e
 4317 1054 00       		.byte	0
 4318 1055 19       		.uleb128 0x19
 4319 1056 01       		.byte	0x1
ARM GAS  /tmp/ccDRaG8a.s 			page 141


 4320 1057 60020000 		.4byte	.LASF161
 4321 105b 01       		.byte	0x1
 4322 105c FA01     		.2byte	0x1fa
 4323 105e 01       		.byte	0x1
 4324 105f 70100000 		.4byte	0x1070
 4325 1063 18       		.uleb128 0x18
 4326 1064 BC000000 		.4byte	.LASF107
 4327 1068 01       		.byte	0x1
 4328 1069 FA01     		.2byte	0x1fa
 4329 106b 5E070000 		.4byte	0x75e
 4330 106f 00       		.byte	0
 4331 1070 21       		.uleb128 0x21
 4332 1071 01       		.byte	0x1
 4333 1072 9C070000 		.4byte	.LASF162
 4334 1076 01       		.byte	0x1
 4335 1077 CB01     		.2byte	0x1cb
 4336 1079 01       		.byte	0x1
 4337 107a F1030000 		.4byte	0x3f1
 4338 107e 84020000 		.4byte	.LFB66
 4339 1082 AC020000 		.4byte	.LFE66
 4340 1086 A10A0000 		.4byte	.LLST16
 4341 108a 01       		.byte	0x1
 4342 108b C4100000 		.4byte	0x10c4
 4343 108f 15       		.uleb128 0x15
 4344 1090 BC000000 		.4byte	.LASF107
 4345 1094 01       		.byte	0x1
 4346 1095 CB01     		.2byte	0x1cb
 4347 1097 5E070000 		.4byte	0x75e
 4348 109b C10A0000 		.4byte	.LLST17
 4349 109f 1C       		.uleb128 0x1c
 4350 10a0 8E020000 		.4byte	.LVL37
 4351 10a4 460F0000 		.4byte	0xf46
 4352 10a8 B3100000 		.4byte	0x10b3
 4353 10ac 1D       		.uleb128 0x1d
 4354 10ad 01       		.byte	0x1
 4355 10ae 50       		.byte	0x50
 4356 10af 02       		.byte	0x2
 4357 10b0 74       		.byte	0x74
 4358 10b1 00       		.sleb128 0
 4359 10b2 00       		.byte	0
 4360 10b3 1F       		.uleb128 0x1f
 4361 10b4 94020000 		.4byte	.LVL38
 4362 10b8 3A100000 		.4byte	0x103a
 4363 10bc 1D       		.uleb128 0x1d
 4364 10bd 01       		.byte	0x1
 4365 10be 50       		.byte	0x50
 4366 10bf 02       		.byte	0x2
 4367 10c0 74       		.byte	0x74
 4368 10c1 00       		.sleb128 0
 4369 10c2 00       		.byte	0
 4370 10c3 00       		.byte	0
 4371 10c4 21       		.uleb128 0x21
 4372 10c5 01       		.byte	0x1
 4373 10c6 47020000 		.4byte	.LASF163
 4374 10ca 01       		.byte	0x1
 4375 10cb 1201     		.2byte	0x112
 4376 10cd 01       		.byte	0x1
ARM GAS  /tmp/ccDRaG8a.s 			page 142


 4377 10ce F1030000 		.4byte	0x3f1
 4378 10d2 02000000 		.4byte	.LFB65
 4379 10d6 F8000000 		.4byte	.LFE65
 4380 10da F50A0000 		.4byte	.LLST0
 4381 10de 01       		.byte	0x1
 4382 10df 3C110000 		.4byte	0x113c
 4383 10e3 15       		.uleb128 0x15
 4384 10e4 BC000000 		.4byte	.LASF107
 4385 10e8 01       		.byte	0x1
 4386 10e9 1201     		.2byte	0x112
 4387 10eb 5E070000 		.4byte	0x75e
 4388 10ef 150B0000 		.4byte	.LLST1
 4389 10f3 16       		.uleb128 0x16
 4390 10f4 C3060000 		.4byte	.LASF155
 4391 10f8 01       		.byte	0x1
 4392 10f9 1401     		.2byte	0x114
 4393 10fb AC000000 		.4byte	0xac
 4394 10ff 330B0000 		.4byte	.LLST2
 4395 1103 1C       		.uleb128 0x1c
 4396 1104 14000000 		.4byte	.LVL1
 4397 1108 55100000 		.4byte	0x1055
 4398 110c 17110000 		.4byte	0x1117
 4399 1110 1D       		.uleb128 0x1d
 4400 1111 01       		.byte	0x1
 4401 1112 50       		.byte	0x50
 4402 1113 02       		.byte	0x2
 4403 1114 74       		.byte	0x74
 4404 1115 00       		.sleb128 0
 4405 1116 00       		.byte	0
 4406 1117 1E       		.uleb128 0x1e
 4407 1118 22000000 		.4byte	.LVL2
 4408 111c E5110000 		.4byte	0x11e5
 4409 1120 1E       		.uleb128 0x1e
 4410 1121 38000000 		.4byte	.LVL4
 4411 1125 E5110000 		.4byte	0x11e5
 4412 1129 1E       		.uleb128 0x1e
 4413 112a D4000000 		.4byte	.LVL7
 4414 112e E5110000 		.4byte	0x11e5
 4415 1132 1E       		.uleb128 0x1e
 4416 1133 F0000000 		.4byte	.LVL10
 4417 1137 E5110000 		.4byte	0x11e5
 4418 113b 00       		.byte	0
 4419 113c 2A       		.uleb128 0x2a
 4420 113d 54020000 		.4byte	.LASF173
 4421 1141 02       		.byte	0x2
 4422 1142 D503     		.2byte	0x3d5
 4423 1144 01       		.byte	0x1
 4424 1145 AC000000 		.4byte	0xac
 4425 1149 03       		.byte	0x3
 4426 114a 67110000 		.4byte	0x1167
 4427 114e 18       		.uleb128 0x18
 4428 114f DA020000 		.4byte	.LASF164
 4429 1153 02       		.byte	0x2
 4430 1154 D503     		.2byte	0x3d5
 4431 1156 AC000000 		.4byte	0xac
 4432 115a 29       		.uleb128 0x29
 4433 115b 460A0000 		.4byte	.LASF165
ARM GAS  /tmp/ccDRaG8a.s 			page 143


 4434 115f 02       		.byte	0x2
 4435 1160 D703     		.2byte	0x3d7
 4436 1162 AC000000 		.4byte	0xac
 4437 1166 00       		.byte	0
 4438 1167 2B       		.uleb128 0x2b
 4439 1168 460F0000 		.4byte	0xf46
 4440 116c 28020000 		.4byte	.LFB71
 4441 1170 84020000 		.4byte	.LFE71
 4442 1174 510B0000 		.4byte	.LLST12
 4443 1178 01       		.byte	0x1
 4444 1179 C8110000 		.4byte	0x11c8
 4445 117d 23       		.uleb128 0x23
 4446 117e 590F0000 		.4byte	0xf59
 4447 1182 710B0000 		.4byte	.LLST13
 4448 1186 2C       		.uleb128 0x2c
 4449 1187 650F0000 		.4byte	0xf65
 4450 118b 9A0B0000 		.4byte	.LLST14
 4451 118f 2D       		.uleb128 0x2d
 4452 1190 68020000 		.4byte	.LBB6
 4453 1194 76020000 		.4byte	.LBE6
 4454 1198 B5110000 		.4byte	0x11b5
 4455 119c 23       		.uleb128 0x23
 4456 119d 590F0000 		.4byte	0xf59
 4457 11a1 AD0B0000 		.4byte	.LLST15
 4458 11a5 24       		.uleb128 0x24
 4459 11a6 68020000 		.4byte	.LBB7
 4460 11aa 76020000 		.4byte	.LBE7
 4461 11ae 25       		.uleb128 0x25
 4462 11af 86110000 		.4byte	0x1186
 4463 11b3 00       		.byte	0
 4464 11b4 00       		.byte	0
 4465 11b5 1E       		.uleb128 0x1e
 4466 11b6 42020000 		.4byte	.LVL29
 4467 11ba E5110000 		.4byte	0x11e5
 4468 11be 1E       		.uleb128 0x1e
 4469 11bf 62020000 		.4byte	.LVL32
 4470 11c3 E5110000 		.4byte	0x11e5
 4471 11c7 00       		.byte	0
 4472 11c8 2E       		.uleb128 0x2e
 4473 11c9 D2070000 		.4byte	0x7d2
 4474 11cd F0050000 		.4byte	.LFB97
 4475 11d1 F2050000 		.4byte	.LFE97
 4476 11d5 02       		.byte	0x2
 4477 11d6 7D       		.byte	0x7d
 4478 11d7 00       		.sleb128 0
 4479 11d8 01       		.byte	0x1
 4480 11d9 E5110000 		.4byte	0x11e5
 4481 11dd 2F       		.uleb128 0x2f
 4482 11de E1070000 		.4byte	0x7e1
 4483 11e2 01       		.byte	0x1
 4484 11e3 50       		.byte	0x50
 4485 11e4 00       		.byte	0
 4486 11e5 30       		.uleb128 0x30
 4487 11e6 01       		.byte	0x1
 4488 11e7 01       		.byte	0x1
 4489 11e8 A3040000 		.4byte	.LASF174
 4490 11ec A3040000 		.4byte	.LASF174
ARM GAS  /tmp/ccDRaG8a.s 			page 144


 4491 11f0 0B       		.byte	0xb
 4492 11f1 2A01     		.2byte	0x12a
 4493 11f3 00       		.byte	0
 4494              		.section	.debug_abbrev,"",%progbits
 4495              	.Ldebug_abbrev0:
 4496 0000 01       		.uleb128 0x1
 4497 0001 11       		.uleb128 0x11
 4498 0002 01       		.byte	0x1
 4499 0003 25       		.uleb128 0x25
 4500 0004 0E       		.uleb128 0xe
 4501 0005 13       		.uleb128 0x13
 4502 0006 0B       		.uleb128 0xb
 4503 0007 03       		.uleb128 0x3
 4504 0008 0E       		.uleb128 0xe
 4505 0009 1B       		.uleb128 0x1b
 4506 000a 0E       		.uleb128 0xe
 4507 000b 11       		.uleb128 0x11
 4508 000c 01       		.uleb128 0x1
 4509 000d 12       		.uleb128 0x12
 4510 000e 01       		.uleb128 0x1
 4511 000f 10       		.uleb128 0x10
 4512 0010 06       		.uleb128 0x6
 4513 0011 00       		.byte	0
 4514 0012 00       		.byte	0
 4515 0013 02       		.uleb128 0x2
 4516 0014 24       		.uleb128 0x24
 4517 0015 00       		.byte	0
 4518 0016 0B       		.uleb128 0xb
 4519 0017 0B       		.uleb128 0xb
 4520 0018 3E       		.uleb128 0x3e
 4521 0019 0B       		.uleb128 0xb
 4522 001a 03       		.uleb128 0x3
 4523 001b 0E       		.uleb128 0xe
 4524 001c 00       		.byte	0
 4525 001d 00       		.byte	0
 4526 001e 03       		.uleb128 0x3
 4527 001f 16       		.uleb128 0x16
 4528 0020 00       		.byte	0
 4529 0021 03       		.uleb128 0x3
 4530 0022 0E       		.uleb128 0xe
 4531 0023 3A       		.uleb128 0x3a
 4532 0024 0B       		.uleb128 0xb
 4533 0025 3B       		.uleb128 0x3b
 4534 0026 0B       		.uleb128 0xb
 4535 0027 49       		.uleb128 0x49
 4536 0028 13       		.uleb128 0x13
 4537 0029 00       		.byte	0
 4538 002a 00       		.byte	0
 4539 002b 04       		.uleb128 0x4
 4540 002c 24       		.uleb128 0x24
 4541 002d 00       		.byte	0
 4542 002e 0B       		.uleb128 0xb
 4543 002f 0B       		.uleb128 0xb
 4544 0030 3E       		.uleb128 0x3e
 4545 0031 0B       		.uleb128 0xb
 4546 0032 03       		.uleb128 0x3
 4547 0033 08       		.uleb128 0x8
ARM GAS  /tmp/ccDRaG8a.s 			page 145


 4548 0034 00       		.byte	0
 4549 0035 00       		.byte	0
 4550 0036 05       		.uleb128 0x5
 4551 0037 26       		.uleb128 0x26
 4552 0038 00       		.byte	0
 4553 0039 49       		.uleb128 0x49
 4554 003a 13       		.uleb128 0x13
 4555 003b 00       		.byte	0
 4556 003c 00       		.byte	0
 4557 003d 06       		.uleb128 0x6
 4558 003e 35       		.uleb128 0x35
 4559 003f 00       		.byte	0
 4560 0040 49       		.uleb128 0x49
 4561 0041 13       		.uleb128 0x13
 4562 0042 00       		.byte	0
 4563 0043 00       		.byte	0
 4564 0044 07       		.uleb128 0x7
 4565 0045 01       		.uleb128 0x1
 4566 0046 01       		.byte	0x1
 4567 0047 49       		.uleb128 0x49
 4568 0048 13       		.uleb128 0x13
 4569 0049 01       		.uleb128 0x1
 4570 004a 13       		.uleb128 0x13
 4571 004b 00       		.byte	0
 4572 004c 00       		.byte	0
 4573 004d 08       		.uleb128 0x8
 4574 004e 21       		.uleb128 0x21
 4575 004f 00       		.byte	0
 4576 0050 49       		.uleb128 0x49
 4577 0051 13       		.uleb128 0x13
 4578 0052 2F       		.uleb128 0x2f
 4579 0053 0B       		.uleb128 0xb
 4580 0054 00       		.byte	0
 4581 0055 00       		.byte	0
 4582 0056 09       		.uleb128 0x9
 4583 0057 34       		.uleb128 0x34
 4584 0058 00       		.byte	0
 4585 0059 03       		.uleb128 0x3
 4586 005a 0E       		.uleb128 0xe
 4587 005b 3A       		.uleb128 0x3a
 4588 005c 0B       		.uleb128 0xb
 4589 005d 3B       		.uleb128 0x3b
 4590 005e 05       		.uleb128 0x5
 4591 005f 49       		.uleb128 0x49
 4592 0060 13       		.uleb128 0x13
 4593 0061 3F       		.uleb128 0x3f
 4594 0062 0C       		.uleb128 0xc
 4595 0063 3C       		.uleb128 0x3c
 4596 0064 0C       		.uleb128 0xc
 4597 0065 00       		.byte	0
 4598 0066 00       		.byte	0
 4599 0067 0A       		.uleb128 0xa
 4600 0068 34       		.uleb128 0x34
 4601 0069 00       		.byte	0
 4602 006a 03       		.uleb128 0x3
 4603 006b 0E       		.uleb128 0xe
 4604 006c 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccDRaG8a.s 			page 146


 4605 006d 0B       		.uleb128 0xb
 4606 006e 3B       		.uleb128 0x3b
 4607 006f 0B       		.uleb128 0xb
 4608 0070 49       		.uleb128 0x49
 4609 0071 13       		.uleb128 0x13
 4610 0072 3F       		.uleb128 0x3f
 4611 0073 0C       		.uleb128 0xc
 4612 0074 3C       		.uleb128 0x3c
 4613 0075 0C       		.uleb128 0xc
 4614 0076 00       		.byte	0
 4615 0077 00       		.byte	0
 4616 0078 0B       		.uleb128 0xb
 4617 0079 13       		.uleb128 0x13
 4618 007a 01       		.byte	0x1
 4619 007b 0B       		.uleb128 0xb
 4620 007c 0B       		.uleb128 0xb
 4621 007d 3A       		.uleb128 0x3a
 4622 007e 0B       		.uleb128 0xb
 4623 007f 3B       		.uleb128 0x3b
 4624 0080 0B       		.uleb128 0xb
 4625 0081 01       		.uleb128 0x1
 4626 0082 13       		.uleb128 0x13
 4627 0083 00       		.byte	0
 4628 0084 00       		.byte	0
 4629 0085 0C       		.uleb128 0xc
 4630 0086 0D       		.uleb128 0xd
 4631 0087 00       		.byte	0
 4632 0088 03       		.uleb128 0x3
 4633 0089 08       		.uleb128 0x8
 4634 008a 3A       		.uleb128 0x3a
 4635 008b 0B       		.uleb128 0xb
 4636 008c 3B       		.uleb128 0x3b
 4637 008d 0B       		.uleb128 0xb
 4638 008e 49       		.uleb128 0x49
 4639 008f 13       		.uleb128 0x13
 4640 0090 38       		.uleb128 0x38
 4641 0091 0A       		.uleb128 0xa
 4642 0092 00       		.byte	0
 4643 0093 00       		.byte	0
 4644 0094 0D       		.uleb128 0xd
 4645 0095 0D       		.uleb128 0xd
 4646 0096 00       		.byte	0
 4647 0097 03       		.uleb128 0x3
 4648 0098 0E       		.uleb128 0xe
 4649 0099 3A       		.uleb128 0x3a
 4650 009a 0B       		.uleb128 0xb
 4651 009b 3B       		.uleb128 0x3b
 4652 009c 0B       		.uleb128 0xb
 4653 009d 49       		.uleb128 0x49
 4654 009e 13       		.uleb128 0x13
 4655 009f 38       		.uleb128 0x38
 4656 00a0 0A       		.uleb128 0xa
 4657 00a1 00       		.byte	0
 4658 00a2 00       		.byte	0
 4659 00a3 0E       		.uleb128 0xe
 4660 00a4 13       		.uleb128 0x13
 4661 00a5 01       		.byte	0x1
ARM GAS  /tmp/ccDRaG8a.s 			page 147


 4662 00a6 0B       		.uleb128 0xb
 4663 00a7 05       		.uleb128 0x5
 4664 00a8 3A       		.uleb128 0x3a
 4665 00a9 0B       		.uleb128 0xb
 4666 00aa 3B       		.uleb128 0x3b
 4667 00ab 0B       		.uleb128 0xb
 4668 00ac 01       		.uleb128 0x1
 4669 00ad 13       		.uleb128 0x13
 4670 00ae 00       		.byte	0
 4671 00af 00       		.byte	0
 4672 00b0 0F       		.uleb128 0xf
 4673 00b1 16       		.uleb128 0x16
 4674 00b2 00       		.byte	0
 4675 00b3 03       		.uleb128 0x3
 4676 00b4 0E       		.uleb128 0xe
 4677 00b5 3A       		.uleb128 0x3a
 4678 00b6 0B       		.uleb128 0xb
 4679 00b7 3B       		.uleb128 0x3b
 4680 00b8 05       		.uleb128 0x5
 4681 00b9 49       		.uleb128 0x49
 4682 00ba 13       		.uleb128 0x13
 4683 00bb 00       		.byte	0
 4684 00bc 00       		.byte	0
 4685 00bd 10       		.uleb128 0x10
 4686 00be 04       		.uleb128 0x4
 4687 00bf 01       		.byte	0x1
 4688 00c0 0B       		.uleb128 0xb
 4689 00c1 0B       		.uleb128 0xb
 4690 00c2 49       		.uleb128 0x49
 4691 00c3 13       		.uleb128 0x13
 4692 00c4 3A       		.uleb128 0x3a
 4693 00c5 0B       		.uleb128 0xb
 4694 00c6 3B       		.uleb128 0x3b
 4695 00c7 0B       		.uleb128 0xb
 4696 00c8 01       		.uleb128 0x1
 4697 00c9 13       		.uleb128 0x13
 4698 00ca 00       		.byte	0
 4699 00cb 00       		.byte	0
 4700 00cc 11       		.uleb128 0x11
 4701 00cd 28       		.uleb128 0x28
 4702 00ce 00       		.byte	0
 4703 00cf 03       		.uleb128 0x3
 4704 00d0 0E       		.uleb128 0xe
 4705 00d1 1C       		.uleb128 0x1c
 4706 00d2 0B       		.uleb128 0xb
 4707 00d3 00       		.byte	0
 4708 00d4 00       		.byte	0
 4709 00d5 12       		.uleb128 0x12
 4710 00d6 13       		.uleb128 0x13
 4711 00d7 01       		.byte	0x1
 4712 00d8 03       		.uleb128 0x3
 4713 00d9 0E       		.uleb128 0xe
 4714 00da 0B       		.uleb128 0xb
 4715 00db 0B       		.uleb128 0xb
 4716 00dc 3A       		.uleb128 0x3a
 4717 00dd 0B       		.uleb128 0xb
 4718 00de 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccDRaG8a.s 			page 148


 4719 00df 0B       		.uleb128 0xb
 4720 00e0 01       		.uleb128 0x1
 4721 00e1 13       		.uleb128 0x13
 4722 00e2 00       		.byte	0
 4723 00e3 00       		.byte	0
 4724 00e4 13       		.uleb128 0x13
 4725 00e5 0F       		.uleb128 0xf
 4726 00e6 00       		.byte	0
 4727 00e7 0B       		.uleb128 0xb
 4728 00e8 0B       		.uleb128 0xb
 4729 00e9 49       		.uleb128 0x49
 4730 00ea 13       		.uleb128 0x13
 4731 00eb 00       		.byte	0
 4732 00ec 00       		.byte	0
 4733 00ed 14       		.uleb128 0x14
 4734 00ee 2E       		.uleb128 0x2e
 4735 00ef 01       		.byte	0x1
 4736 00f0 3F       		.uleb128 0x3f
 4737 00f1 0C       		.uleb128 0xc
 4738 00f2 03       		.uleb128 0x3
 4739 00f3 0E       		.uleb128 0xe
 4740 00f4 3A       		.uleb128 0x3a
 4741 00f5 0B       		.uleb128 0xb
 4742 00f6 3B       		.uleb128 0x3b
 4743 00f7 05       		.uleb128 0x5
 4744 00f8 27       		.uleb128 0x27
 4745 00f9 0C       		.uleb128 0xc
 4746 00fa 49       		.uleb128 0x49
 4747 00fb 13       		.uleb128 0x13
 4748 00fc 11       		.uleb128 0x11
 4749 00fd 01       		.uleb128 0x1
 4750 00fe 12       		.uleb128 0x12
 4751 00ff 01       		.uleb128 0x1
 4752 0100 40       		.uleb128 0x40
 4753 0101 0A       		.uleb128 0xa
 4754 0102 9742     		.uleb128 0x2117
 4755 0104 0C       		.uleb128 0xc
 4756 0105 01       		.uleb128 0x1
 4757 0106 13       		.uleb128 0x13
 4758 0107 00       		.byte	0
 4759 0108 00       		.byte	0
 4760 0109 15       		.uleb128 0x15
 4761 010a 05       		.uleb128 0x5
 4762 010b 00       		.byte	0
 4763 010c 03       		.uleb128 0x3
 4764 010d 0E       		.uleb128 0xe
 4765 010e 3A       		.uleb128 0x3a
 4766 010f 0B       		.uleb128 0xb
 4767 0110 3B       		.uleb128 0x3b
 4768 0111 05       		.uleb128 0x5
 4769 0112 49       		.uleb128 0x49
 4770 0113 13       		.uleb128 0x13
 4771 0114 02       		.uleb128 0x2
 4772 0115 06       		.uleb128 0x6
 4773 0116 00       		.byte	0
 4774 0117 00       		.byte	0
 4775 0118 16       		.uleb128 0x16
ARM GAS  /tmp/ccDRaG8a.s 			page 149


 4776 0119 34       		.uleb128 0x34
 4777 011a 00       		.byte	0
 4778 011b 03       		.uleb128 0x3
 4779 011c 0E       		.uleb128 0xe
 4780 011d 3A       		.uleb128 0x3a
 4781 011e 0B       		.uleb128 0xb
 4782 011f 3B       		.uleb128 0x3b
 4783 0120 05       		.uleb128 0x5
 4784 0121 49       		.uleb128 0x49
 4785 0122 13       		.uleb128 0x13
 4786 0123 02       		.uleb128 0x2
 4787 0124 06       		.uleb128 0x6
 4788 0125 00       		.byte	0
 4789 0126 00       		.byte	0
 4790 0127 17       		.uleb128 0x17
 4791 0128 2E       		.uleb128 0x2e
 4792 0129 01       		.byte	0x1
 4793 012a 3F       		.uleb128 0x3f
 4794 012b 0C       		.uleb128 0xc
 4795 012c 03       		.uleb128 0x3
 4796 012d 0E       		.uleb128 0xe
 4797 012e 3A       		.uleb128 0x3a
 4798 012f 0B       		.uleb128 0xb
 4799 0130 3B       		.uleb128 0x3b
 4800 0131 05       		.uleb128 0x5
 4801 0132 27       		.uleb128 0x27
 4802 0133 0C       		.uleb128 0xc
 4803 0134 20       		.uleb128 0x20
 4804 0135 0B       		.uleb128 0xb
 4805 0136 01       		.uleb128 0x1
 4806 0137 13       		.uleb128 0x13
 4807 0138 00       		.byte	0
 4808 0139 00       		.byte	0
 4809 013a 18       		.uleb128 0x18
 4810 013b 05       		.uleb128 0x5
 4811 013c 00       		.byte	0
 4812 013d 03       		.uleb128 0x3
 4813 013e 0E       		.uleb128 0xe
 4814 013f 3A       		.uleb128 0x3a
 4815 0140 0B       		.uleb128 0xb
 4816 0141 3B       		.uleb128 0x3b
 4817 0142 05       		.uleb128 0x5
 4818 0143 49       		.uleb128 0x49
 4819 0144 13       		.uleb128 0x13
 4820 0145 00       		.byte	0
 4821 0146 00       		.byte	0
 4822 0147 19       		.uleb128 0x19
 4823 0148 2E       		.uleb128 0x2e
 4824 0149 01       		.byte	0x1
 4825 014a 3F       		.uleb128 0x3f
 4826 014b 0C       		.uleb128 0xc
 4827 014c 03       		.uleb128 0x3
 4828 014d 0E       		.uleb128 0xe
 4829 014e 3A       		.uleb128 0x3a
 4830 014f 0B       		.uleb128 0xb
 4831 0150 3B       		.uleb128 0x3b
 4832 0151 05       		.uleb128 0x5
ARM GAS  /tmp/ccDRaG8a.s 			page 150


 4833 0152 27       		.uleb128 0x27
 4834 0153 0C       		.uleb128 0xc
 4835 0154 01       		.uleb128 0x1
 4836 0155 13       		.uleb128 0x13
 4837 0156 00       		.byte	0
 4838 0157 00       		.byte	0
 4839 0158 1A       		.uleb128 0x1a
 4840 0159 2E       		.uleb128 0x2e
 4841 015a 01       		.byte	0x1
 4842 015b 3F       		.uleb128 0x3f
 4843 015c 0C       		.uleb128 0xc
 4844 015d 03       		.uleb128 0x3
 4845 015e 0E       		.uleb128 0xe
 4846 015f 3A       		.uleb128 0x3a
 4847 0160 0B       		.uleb128 0xb
 4848 0161 3B       		.uleb128 0x3b
 4849 0162 05       		.uleb128 0x5
 4850 0163 27       		.uleb128 0x27
 4851 0164 0C       		.uleb128 0xc
 4852 0165 11       		.uleb128 0x11
 4853 0166 01       		.uleb128 0x1
 4854 0167 12       		.uleb128 0x12
 4855 0168 01       		.uleb128 0x1
 4856 0169 40       		.uleb128 0x40
 4857 016a 06       		.uleb128 0x6
 4858 016b 9742     		.uleb128 0x2117
 4859 016d 0C       		.uleb128 0xc
 4860 016e 01       		.uleb128 0x1
 4861 016f 13       		.uleb128 0x13
 4862 0170 00       		.byte	0
 4863 0171 00       		.byte	0
 4864 0172 1B       		.uleb128 0x1b
 4865 0173 34       		.uleb128 0x34
 4866 0174 00       		.byte	0
 4867 0175 03       		.uleb128 0x3
 4868 0176 0E       		.uleb128 0xe
 4869 0177 3A       		.uleb128 0x3a
 4870 0178 0B       		.uleb128 0xb
 4871 0179 3B       		.uleb128 0x3b
 4872 017a 05       		.uleb128 0x5
 4873 017b 49       		.uleb128 0x49
 4874 017c 13       		.uleb128 0x13
 4875 017d 02       		.uleb128 0x2
 4876 017e 0A       		.uleb128 0xa
 4877 017f 00       		.byte	0
 4878 0180 00       		.byte	0
 4879 0181 1C       		.uleb128 0x1c
 4880 0182 898201   		.uleb128 0x4109
 4881 0185 01       		.byte	0x1
 4882 0186 11       		.uleb128 0x11
 4883 0187 01       		.uleb128 0x1
 4884 0188 31       		.uleb128 0x31
 4885 0189 13       		.uleb128 0x13
 4886 018a 01       		.uleb128 0x1
 4887 018b 13       		.uleb128 0x13
 4888 018c 00       		.byte	0
 4889 018d 00       		.byte	0
ARM GAS  /tmp/ccDRaG8a.s 			page 151


 4890 018e 1D       		.uleb128 0x1d
 4891 018f 8A8201   		.uleb128 0x410a
 4892 0192 00       		.byte	0
 4893 0193 02       		.uleb128 0x2
 4894 0194 0A       		.uleb128 0xa
 4895 0195 9142     		.uleb128 0x2111
 4896 0197 0A       		.uleb128 0xa
 4897 0198 00       		.byte	0
 4898 0199 00       		.byte	0
 4899 019a 1E       		.uleb128 0x1e
 4900 019b 898201   		.uleb128 0x4109
 4901 019e 00       		.byte	0
 4902 019f 11       		.uleb128 0x11
 4903 01a0 01       		.uleb128 0x1
 4904 01a1 31       		.uleb128 0x31
 4905 01a2 13       		.uleb128 0x13
 4906 01a3 00       		.byte	0
 4907 01a4 00       		.byte	0
 4908 01a5 1F       		.uleb128 0x1f
 4909 01a6 898201   		.uleb128 0x4109
 4910 01a9 01       		.byte	0x1
 4911 01aa 11       		.uleb128 0x11
 4912 01ab 01       		.uleb128 0x1
 4913 01ac 31       		.uleb128 0x31
 4914 01ad 13       		.uleb128 0x13
 4915 01ae 00       		.byte	0
 4916 01af 00       		.byte	0
 4917 01b0 20       		.uleb128 0x20
 4918 01b1 05       		.uleb128 0x5
 4919 01b2 00       		.byte	0
 4920 01b3 03       		.uleb128 0x3
 4921 01b4 0E       		.uleb128 0xe
 4922 01b5 3A       		.uleb128 0x3a
 4923 01b6 0B       		.uleb128 0xb
 4924 01b7 3B       		.uleb128 0x3b
 4925 01b8 05       		.uleb128 0x5
 4926 01b9 49       		.uleb128 0x49
 4927 01ba 13       		.uleb128 0x13
 4928 01bb 02       		.uleb128 0x2
 4929 01bc 0A       		.uleb128 0xa
 4930 01bd 00       		.byte	0
 4931 01be 00       		.byte	0
 4932 01bf 21       		.uleb128 0x21
 4933 01c0 2E       		.uleb128 0x2e
 4934 01c1 01       		.byte	0x1
 4935 01c2 3F       		.uleb128 0x3f
 4936 01c3 0C       		.uleb128 0xc
 4937 01c4 03       		.uleb128 0x3
 4938 01c5 0E       		.uleb128 0xe
 4939 01c6 3A       		.uleb128 0x3a
 4940 01c7 0B       		.uleb128 0xb
 4941 01c8 3B       		.uleb128 0x3b
 4942 01c9 05       		.uleb128 0x5
 4943 01ca 27       		.uleb128 0x27
 4944 01cb 0C       		.uleb128 0xc
 4945 01cc 49       		.uleb128 0x49
 4946 01cd 13       		.uleb128 0x13
ARM GAS  /tmp/ccDRaG8a.s 			page 152


 4947 01ce 11       		.uleb128 0x11
 4948 01cf 01       		.uleb128 0x1
 4949 01d0 12       		.uleb128 0x12
 4950 01d1 01       		.uleb128 0x1
 4951 01d2 40       		.uleb128 0x40
 4952 01d3 06       		.uleb128 0x6
 4953 01d4 9742     		.uleb128 0x2117
 4954 01d6 0C       		.uleb128 0xc
 4955 01d7 01       		.uleb128 0x1
 4956 01d8 13       		.uleb128 0x13
 4957 01d9 00       		.byte	0
 4958 01da 00       		.byte	0
 4959 01db 22       		.uleb128 0x22
 4960 01dc 1D       		.uleb128 0x1d
 4961 01dd 01       		.byte	0x1
 4962 01de 31       		.uleb128 0x31
 4963 01df 13       		.uleb128 0x13
 4964 01e0 11       		.uleb128 0x11
 4965 01e1 01       		.uleb128 0x1
 4966 01e2 12       		.uleb128 0x12
 4967 01e3 01       		.uleb128 0x1
 4968 01e4 58       		.uleb128 0x58
 4969 01e5 0B       		.uleb128 0xb
 4970 01e6 59       		.uleb128 0x59
 4971 01e7 05       		.uleb128 0x5
 4972 01e8 00       		.byte	0
 4973 01e9 00       		.byte	0
 4974 01ea 23       		.uleb128 0x23
 4975 01eb 05       		.uleb128 0x5
 4976 01ec 00       		.byte	0
 4977 01ed 31       		.uleb128 0x31
 4978 01ee 13       		.uleb128 0x13
 4979 01ef 02       		.uleb128 0x2
 4980 01f0 06       		.uleb128 0x6
 4981 01f1 00       		.byte	0
 4982 01f2 00       		.byte	0
 4983 01f3 24       		.uleb128 0x24
 4984 01f4 0B       		.uleb128 0xb
 4985 01f5 01       		.byte	0x1
 4986 01f6 11       		.uleb128 0x11
 4987 01f7 01       		.uleb128 0x1
 4988 01f8 12       		.uleb128 0x12
 4989 01f9 01       		.uleb128 0x1
 4990 01fa 00       		.byte	0
 4991 01fb 00       		.byte	0
 4992 01fc 25       		.uleb128 0x25
 4993 01fd 34       		.uleb128 0x34
 4994 01fe 00       		.byte	0
 4995 01ff 31       		.uleb128 0x31
 4996 0200 13       		.uleb128 0x13
 4997 0201 00       		.byte	0
 4998 0202 00       		.byte	0
 4999 0203 26       		.uleb128 0x26
 5000 0204 34       		.uleb128 0x34
 5001 0205 00       		.byte	0
 5002 0206 03       		.uleb128 0x3
 5003 0207 08       		.uleb128 0x8
ARM GAS  /tmp/ccDRaG8a.s 			page 153


 5004 0208 3A       		.uleb128 0x3a
 5005 0209 0B       		.uleb128 0xb
 5006 020a 3B       		.uleb128 0x3b
 5007 020b 05       		.uleb128 0x5
 5008 020c 49       		.uleb128 0x49
 5009 020d 13       		.uleb128 0x13
 5010 020e 02       		.uleb128 0x2
 5011 020f 06       		.uleb128 0x6
 5012 0210 00       		.byte	0
 5013 0211 00       		.byte	0
 5014 0212 27       		.uleb128 0x27
 5015 0213 34       		.uleb128 0x34
 5016 0214 00       		.byte	0
 5017 0215 03       		.uleb128 0x3
 5018 0216 0E       		.uleb128 0xe
 5019 0217 3A       		.uleb128 0x3a
 5020 0218 0B       		.uleb128 0xb
 5021 0219 3B       		.uleb128 0x3b
 5022 021a 05       		.uleb128 0x5
 5023 021b 49       		.uleb128 0x49
 5024 021c 13       		.uleb128 0x13
 5025 021d 1C       		.uleb128 0x1c
 5026 021e 06       		.uleb128 0x6
 5027 021f 00       		.byte	0
 5028 0220 00       		.byte	0
 5029 0221 28       		.uleb128 0x28
 5030 0222 2E       		.uleb128 0x2e
 5031 0223 01       		.byte	0x1
 5032 0224 3F       		.uleb128 0x3f
 5033 0225 0C       		.uleb128 0xc
 5034 0226 03       		.uleb128 0x3
 5035 0227 0E       		.uleb128 0xe
 5036 0228 3A       		.uleb128 0x3a
 5037 0229 0B       		.uleb128 0xb
 5038 022a 3B       		.uleb128 0x3b
 5039 022b 05       		.uleb128 0x5
 5040 022c 27       		.uleb128 0x27
 5041 022d 0C       		.uleb128 0xc
 5042 022e 49       		.uleb128 0x49
 5043 022f 13       		.uleb128 0x13
 5044 0230 20       		.uleb128 0x20
 5045 0231 0B       		.uleb128 0xb
 5046 0232 01       		.uleb128 0x1
 5047 0233 13       		.uleb128 0x13
 5048 0234 00       		.byte	0
 5049 0235 00       		.byte	0
 5050 0236 29       		.uleb128 0x29
 5051 0237 34       		.uleb128 0x34
 5052 0238 00       		.byte	0
 5053 0239 03       		.uleb128 0x3
 5054 023a 0E       		.uleb128 0xe
 5055 023b 3A       		.uleb128 0x3a
 5056 023c 0B       		.uleb128 0xb
 5057 023d 3B       		.uleb128 0x3b
 5058 023e 05       		.uleb128 0x5
 5059 023f 49       		.uleb128 0x49
 5060 0240 13       		.uleb128 0x13
ARM GAS  /tmp/ccDRaG8a.s 			page 154


 5061 0241 00       		.byte	0
 5062 0242 00       		.byte	0
 5063 0243 2A       		.uleb128 0x2a
 5064 0244 2E       		.uleb128 0x2e
 5065 0245 01       		.byte	0x1
 5066 0246 03       		.uleb128 0x3
 5067 0247 0E       		.uleb128 0xe
 5068 0248 3A       		.uleb128 0x3a
 5069 0249 0B       		.uleb128 0xb
 5070 024a 3B       		.uleb128 0x3b
 5071 024b 05       		.uleb128 0x5
 5072 024c 27       		.uleb128 0x27
 5073 024d 0C       		.uleb128 0xc
 5074 024e 49       		.uleb128 0x49
 5075 024f 13       		.uleb128 0x13
 5076 0250 20       		.uleb128 0x20
 5077 0251 0B       		.uleb128 0xb
 5078 0252 01       		.uleb128 0x1
 5079 0253 13       		.uleb128 0x13
 5080 0254 00       		.byte	0
 5081 0255 00       		.byte	0
 5082 0256 2B       		.uleb128 0x2b
 5083 0257 2E       		.uleb128 0x2e
 5084 0258 01       		.byte	0x1
 5085 0259 31       		.uleb128 0x31
 5086 025a 13       		.uleb128 0x13
 5087 025b 11       		.uleb128 0x11
 5088 025c 01       		.uleb128 0x1
 5089 025d 12       		.uleb128 0x12
 5090 025e 01       		.uleb128 0x1
 5091 025f 40       		.uleb128 0x40
 5092 0260 06       		.uleb128 0x6
 5093 0261 9742     		.uleb128 0x2117
 5094 0263 0C       		.uleb128 0xc
 5095 0264 01       		.uleb128 0x1
 5096 0265 13       		.uleb128 0x13
 5097 0266 00       		.byte	0
 5098 0267 00       		.byte	0
 5099 0268 2C       		.uleb128 0x2c
 5100 0269 34       		.uleb128 0x34
 5101 026a 00       		.byte	0
 5102 026b 31       		.uleb128 0x31
 5103 026c 13       		.uleb128 0x13
 5104 026d 02       		.uleb128 0x2
 5105 026e 06       		.uleb128 0x6
 5106 026f 00       		.byte	0
 5107 0270 00       		.byte	0
 5108 0271 2D       		.uleb128 0x2d
 5109 0272 0B       		.uleb128 0xb
 5110 0273 01       		.byte	0x1
 5111 0274 11       		.uleb128 0x11
 5112 0275 01       		.uleb128 0x1
 5113 0276 12       		.uleb128 0x12
 5114 0277 01       		.uleb128 0x1
 5115 0278 01       		.uleb128 0x1
 5116 0279 13       		.uleb128 0x13
 5117 027a 00       		.byte	0
ARM GAS  /tmp/ccDRaG8a.s 			page 155


 5118 027b 00       		.byte	0
 5119 027c 2E       		.uleb128 0x2e
 5120 027d 2E       		.uleb128 0x2e
 5121 027e 01       		.byte	0x1
 5122 027f 31       		.uleb128 0x31
 5123 0280 13       		.uleb128 0x13
 5124 0281 11       		.uleb128 0x11
 5125 0282 01       		.uleb128 0x1
 5126 0283 12       		.uleb128 0x12
 5127 0284 01       		.uleb128 0x1
 5128 0285 40       		.uleb128 0x40
 5129 0286 0A       		.uleb128 0xa
 5130 0287 9742     		.uleb128 0x2117
 5131 0289 0C       		.uleb128 0xc
 5132 028a 01       		.uleb128 0x1
 5133 028b 13       		.uleb128 0x13
 5134 028c 00       		.byte	0
 5135 028d 00       		.byte	0
 5136 028e 2F       		.uleb128 0x2f
 5137 028f 05       		.uleb128 0x5
 5138 0290 00       		.byte	0
 5139 0291 31       		.uleb128 0x31
 5140 0292 13       		.uleb128 0x13
 5141 0293 02       		.uleb128 0x2
 5142 0294 0A       		.uleb128 0xa
 5143 0295 00       		.byte	0
 5144 0296 00       		.byte	0
 5145 0297 30       		.uleb128 0x30
 5146 0298 2E       		.uleb128 0x2e
 5147 0299 00       		.byte	0
 5148 029a 3F       		.uleb128 0x3f
 5149 029b 0C       		.uleb128 0xc
 5150 029c 3C       		.uleb128 0x3c
 5151 029d 0C       		.uleb128 0xc
 5152 029e 8740     		.uleb128 0x2007
 5153 02a0 0E       		.uleb128 0xe
 5154 02a1 03       		.uleb128 0x3
 5155 02a2 0E       		.uleb128 0xe
 5156 02a3 3A       		.uleb128 0x3a
 5157 02a4 0B       		.uleb128 0xb
 5158 02a5 3B       		.uleb128 0x3b
 5159 02a6 05       		.uleb128 0x5
 5160 02a7 00       		.byte	0
 5161 02a8 00       		.byte	0
 5162 02a9 00       		.byte	0
 5163              		.section	.debug_loc,"",%progbits
 5164              	.Ldebug_loc0:
 5165              	.LLST71:
 5166 0000 18080000 		.4byte	.LVL201-.Ltext0
 5167 0004 30080000 		.4byte	.LVL204-.Ltext0
 5168 0008 0100     		.2byte	0x1
 5169 000a 50       		.byte	0x50
 5170 000b 30080000 		.4byte	.LVL204-.Ltext0
 5171 000f 36080000 		.4byte	.LFE100-.Ltext0
 5172 0013 0400     		.2byte	0x4
 5173 0015 F3       		.byte	0xf3
 5174 0016 01       		.uleb128 0x1
ARM GAS  /tmp/ccDRaG8a.s 			page 156


 5175 0017 50       		.byte	0x50
 5176 0018 9F       		.byte	0x9f
 5177 0019 00000000 		.4byte	0
 5178 001d 00000000 		.4byte	0
 5179              	.LLST72:
 5180 0021 18080000 		.4byte	.LVL201-.Ltext0
 5181 0025 32080000 		.4byte	.LVL205-.Ltext0
 5182 0029 0200     		.2byte	0x2
 5183 002b 30       		.byte	0x30
 5184 002c 9F       		.byte	0x9f
 5185 002d 32080000 		.4byte	.LVL205-.Ltext0
 5186 0031 34080000 		.4byte	.LVL206-.Ltext0
 5187 0035 0200     		.2byte	0x2
 5188 0037 31       		.byte	0x31
 5189 0038 9F       		.byte	0x9f
 5190 0039 34080000 		.4byte	.LVL206-.Ltext0
 5191 003d 36080000 		.4byte	.LFE100-.Ltext0
 5192 0041 0100     		.2byte	0x1
 5193 0043 50       		.byte	0x50
 5194 0044 00000000 		.4byte	0
 5195 0048 00000000 		.4byte	0
 5196              	.LLST73:
 5197 004c 1C080000 		.4byte	.LVL202-.Ltext0
 5198 0050 1E080000 		.4byte	.LVL203-.Ltext0
 5199 0054 0100     		.2byte	0x1
 5200 0056 53       		.byte	0x53
 5201 0057 00000000 		.4byte	0
 5202 005b 00000000 		.4byte	0
 5203              	.LLST70:
 5204 005f 14080000 		.4byte	.LVL199-.Ltext0
 5205 0063 16080000 		.4byte	.LVL200-.Ltext0
 5206 0067 0100     		.2byte	0x1
 5207 0069 50       		.byte	0x50
 5208 006a 16080000 		.4byte	.LVL200-.Ltext0
 5209 006e 18080000 		.4byte	.LFE99-.Ltext0
 5210 0072 0400     		.2byte	0x4
 5211 0074 F3       		.byte	0xf3
 5212 0075 01       		.uleb128 0x1
 5213 0076 50       		.byte	0x50
 5214 0077 9F       		.byte	0x9f
 5215 0078 00000000 		.4byte	0
 5216 007c 00000000 		.4byte	0
 5217              	.LLST68:
 5218 0080 EE070000 		.4byte	.LVL193-.Ltext0
 5219 0084 0E080000 		.4byte	.LVL196-.Ltext0
 5220 0088 0100     		.2byte	0x1
 5221 008a 50       		.byte	0x50
 5222 008b 0E080000 		.4byte	.LVL196-.Ltext0
 5223 008f 10080000 		.4byte	.LVL197-.Ltext0
 5224 0093 0400     		.2byte	0x4
 5225 0095 F3       		.byte	0xf3
 5226 0096 01       		.uleb128 0x1
 5227 0097 50       		.byte	0x50
 5228 0098 9F       		.byte	0x9f
 5229 0099 10080000 		.4byte	.LVL197-.Ltext0
 5230 009d 14080000 		.4byte	.LFE98-.Ltext0
 5231 00a1 0100     		.2byte	0x1
ARM GAS  /tmp/ccDRaG8a.s 			page 157


 5232 00a3 50       		.byte	0x50
 5233 00a4 00000000 		.4byte	0
 5234 00a8 00000000 		.4byte	0
 5235              	.LLST69:
 5236 00ac F4070000 		.4byte	.LVL194-.Ltext0
 5237 00b0 12080000 		.4byte	.LVL198-.Ltext0
 5238 00b4 0100     		.2byte	0x1
 5239 00b6 53       		.byte	0x53
 5240 00b7 00000000 		.4byte	0
 5241 00bb 00000000 		.4byte	0
 5242              	.LLST64:
 5243 00bf F2050000 		.4byte	.LFB84-.Ltext0
 5244 00c3 F6050000 		.4byte	.LCFI10-.Ltext0
 5245 00c7 0200     		.2byte	0x2
 5246 00c9 7D       		.byte	0x7d
 5247 00ca 00       		.sleb128 0
 5248 00cb F6050000 		.4byte	.LCFI10-.Ltext0
 5249 00cf EE070000 		.4byte	.LFE84-.Ltext0
 5250 00d3 0200     		.2byte	0x2
 5251 00d5 7D       		.byte	0x7d
 5252 00d6 28       		.sleb128 40
 5253 00d7 00000000 		.4byte	0
 5254 00db 00000000 		.4byte	0
 5255              	.LLST65:
 5256 00df F2050000 		.4byte	.LVL151-.Ltext0
 5257 00e3 27060000 		.4byte	.LVL158-1-.Ltext0
 5258 00e7 0100     		.2byte	0x1
 5259 00e9 50       		.byte	0x50
 5260 00ea 27060000 		.4byte	.LVL158-1-.Ltext0
 5261 00ee 6A070000 		.4byte	.LVL176-.Ltext0
 5262 00f2 0100     		.2byte	0x1
 5263 00f4 55       		.byte	0x55
 5264 00f5 6A070000 		.4byte	.LVL176-.Ltext0
 5265 00f9 77070000 		.4byte	.LVL177-1-.Ltext0
 5266 00fd 0100     		.2byte	0x1
 5267 00ff 50       		.byte	0x50
 5268 0100 77070000 		.4byte	.LVL177-1-.Ltext0
 5269 0104 7A070000 		.4byte	.LVL178-.Ltext0
 5270 0108 0100     		.2byte	0x1
 5271 010a 55       		.byte	0x55
 5272 010b 7A070000 		.4byte	.LVL178-.Ltext0
 5273 010f 86070000 		.4byte	.LVL179-.Ltext0
 5274 0113 0100     		.2byte	0x1
 5275 0115 50       		.byte	0x50
 5276 0116 86070000 		.4byte	.LVL179-.Ltext0
 5277 011a EE070000 		.4byte	.LFE84-.Ltext0
 5278 011e 0100     		.2byte	0x1
 5279 0120 55       		.byte	0x55
 5280 0121 00000000 		.4byte	0
 5281 0125 00000000 		.4byte	0
 5282              	.LLST66:
 5283 0129 F2050000 		.4byte	.LVL151-.Ltext0
 5284 012d 2A060000 		.4byte	.LVL159-.Ltext0
 5285 0131 0200     		.2byte	0x2
 5286 0133 30       		.byte	0x30
 5287 0134 9F       		.byte	0x9f
 5288 0135 2A060000 		.4byte	.LVL159-.Ltext0
ARM GAS  /tmp/ccDRaG8a.s 			page 158


 5289 0139 60070000 		.4byte	.LVL174-.Ltext0
 5290 013d 0100     		.2byte	0x1
 5291 013f 54       		.byte	0x54
 5292 0140 6A070000 		.4byte	.LVL176-.Ltext0
 5293 0144 86070000 		.4byte	.LVL179-.Ltext0
 5294 0148 0200     		.2byte	0x2
 5295 014a 30       		.byte	0x30
 5296 014b 9F       		.byte	0x9f
 5297 014c 86070000 		.4byte	.LVL179-.Ltext0
 5298 0150 EE070000 		.4byte	.LFE84-.Ltext0
 5299 0154 0100     		.2byte	0x1
 5300 0156 54       		.byte	0x54
 5301 0157 00000000 		.4byte	0
 5302 015b 00000000 		.4byte	0
 5303              	.LLST67:
 5304 015f 06060000 		.4byte	.LVL154-.Ltext0
 5305 0163 70060000 		.4byte	.LVL163-.Ltext0
 5306 0167 0100     		.2byte	0x1
 5307 0169 57       		.byte	0x57
 5308 016a 6A070000 		.4byte	.LVL176-.Ltext0
 5309 016e BE070000 		.4byte	.LVL186-.Ltext0
 5310 0172 0100     		.2byte	0x1
 5311 0174 57       		.byte	0x57
 5312 0175 00000000 		.4byte	0
 5313 0179 00000000 		.4byte	0
 5314              	.LLST61:
 5315 017d B4050000 		.4byte	.LVL143-.Ltext0
 5316 0181 C2050000 		.4byte	.LVL146-.Ltext0
 5317 0185 0100     		.2byte	0x1
 5318 0187 50       		.byte	0x50
 5319 0188 C2050000 		.4byte	.LVL146-.Ltext0
 5320 018c CC050000 		.4byte	.LVL148-.Ltext0
 5321 0190 0400     		.2byte	0x4
 5322 0192 F3       		.byte	0xf3
 5323 0193 01       		.uleb128 0x1
 5324 0194 50       		.byte	0x50
 5325 0195 9F       		.byte	0x9f
 5326 0196 CC050000 		.4byte	.LVL148-.Ltext0
 5327 019a D6050000 		.4byte	.LVL149-.Ltext0
 5328 019e 0100     		.2byte	0x1
 5329 01a0 50       		.byte	0x50
 5330 01a1 D6050000 		.4byte	.LVL149-.Ltext0
 5331 01a5 D8050000 		.4byte	.LFE83-.Ltext0
 5332 01a9 0400     		.2byte	0x4
 5333 01ab F3       		.byte	0xf3
 5334 01ac 01       		.uleb128 0x1
 5335 01ad 50       		.byte	0x50
 5336 01ae 9F       		.byte	0x9f
 5337 01af 00000000 		.4byte	0
 5338 01b3 00000000 		.4byte	0
 5339              	.LLST62:
 5340 01b7 B4050000 		.4byte	.LVL143-.Ltext0
 5341 01bb C8050000 		.4byte	.LVL147-.Ltext0
 5342 01bf 0100     		.2byte	0x1
 5343 01c1 51       		.byte	0x51
 5344 01c2 C8050000 		.4byte	.LVL147-.Ltext0
 5345 01c6 CC050000 		.4byte	.LVL148-.Ltext0
ARM GAS  /tmp/ccDRaG8a.s 			page 159


 5346 01ca 0400     		.2byte	0x4
 5347 01cc F3       		.byte	0xf3
 5348 01cd 01       		.uleb128 0x1
 5349 01ce 51       		.byte	0x51
 5350 01cf 9F       		.byte	0x9f
 5351 01d0 CC050000 		.4byte	.LVL148-.Ltext0
 5352 01d4 D8050000 		.4byte	.LFE83-.Ltext0
 5353 01d8 0100     		.2byte	0x1
 5354 01da 51       		.byte	0x51
 5355 01db 00000000 		.4byte	0
 5356 01df 00000000 		.4byte	0
 5357              	.LLST63:
 5358 01e3 B8050000 		.4byte	.LVL144-.Ltext0
 5359 01e7 BA050000 		.4byte	.LVL145-.Ltext0
 5360 01eb 0100     		.2byte	0x1
 5361 01ed 53       		.byte	0x53
 5362 01ee 00000000 		.4byte	0
 5363 01f2 00000000 		.4byte	0
 5364              	.LLST58:
 5365 01f6 92050000 		.4byte	.LVL136-.Ltext0
 5366 01fa A0050000 		.4byte	.LVL139-.Ltext0
 5367 01fe 0100     		.2byte	0x1
 5368 0200 50       		.byte	0x50
 5369 0201 A0050000 		.4byte	.LVL139-.Ltext0
 5370 0205 A8050000 		.4byte	.LVL141-.Ltext0
 5371 0209 0400     		.2byte	0x4
 5372 020b F3       		.byte	0xf3
 5373 020c 01       		.uleb128 0x1
 5374 020d 50       		.byte	0x50
 5375 020e 9F       		.byte	0x9f
 5376 020f A8050000 		.4byte	.LVL141-.Ltext0
 5377 0213 B2050000 		.4byte	.LVL142-.Ltext0
 5378 0217 0100     		.2byte	0x1
 5379 0219 50       		.byte	0x50
 5380 021a B2050000 		.4byte	.LVL142-.Ltext0
 5381 021e B4050000 		.4byte	.LFE82-.Ltext0
 5382 0222 0400     		.2byte	0x4
 5383 0224 F3       		.byte	0xf3
 5384 0225 01       		.uleb128 0x1
 5385 0226 50       		.byte	0x50
 5386 0227 9F       		.byte	0x9f
 5387 0228 00000000 		.4byte	0
 5388 022c 00000000 		.4byte	0
 5389              	.LLST59:
 5390 0230 92050000 		.4byte	.LVL136-.Ltext0
 5391 0234 A4050000 		.4byte	.LVL140-.Ltext0
 5392 0238 0100     		.2byte	0x1
 5393 023a 51       		.byte	0x51
 5394 023b A4050000 		.4byte	.LVL140-.Ltext0
 5395 023f A8050000 		.4byte	.LVL141-.Ltext0
 5396 0243 0400     		.2byte	0x4
 5397 0245 F3       		.byte	0xf3
 5398 0246 01       		.uleb128 0x1
 5399 0247 51       		.byte	0x51
 5400 0248 9F       		.byte	0x9f
 5401 0249 A8050000 		.4byte	.LVL141-.Ltext0
 5402 024d B4050000 		.4byte	.LFE82-.Ltext0
ARM GAS  /tmp/ccDRaG8a.s 			page 160


 5403 0251 0100     		.2byte	0x1
 5404 0253 51       		.byte	0x51
 5405 0254 00000000 		.4byte	0
 5406 0258 00000000 		.4byte	0
 5407              	.LLST60:
 5408 025c 96050000 		.4byte	.LVL137-.Ltext0
 5409 0260 98050000 		.4byte	.LVL138-.Ltext0
 5410 0264 0100     		.2byte	0x1
 5411 0266 53       		.byte	0x53
 5412 0267 00000000 		.4byte	0
 5413 026b 00000000 		.4byte	0
 5414              	.LLST55:
 5415 026f 74050000 		.4byte	.LVL127-.Ltext0
 5416 0273 84050000 		.4byte	.LVL130-.Ltext0
 5417 0277 0100     		.2byte	0x1
 5418 0279 50       		.byte	0x50
 5419 027a 84050000 		.4byte	.LVL130-.Ltext0
 5420 027e 8A050000 		.4byte	.LVL132-.Ltext0
 5421 0282 0400     		.2byte	0x4
 5422 0284 F3       		.byte	0xf3
 5423 0285 01       		.uleb128 0x1
 5424 0286 50       		.byte	0x50
 5425 0287 9F       		.byte	0x9f
 5426 0288 8A050000 		.4byte	.LVL132-.Ltext0
 5427 028c 8C050000 		.4byte	.LVL133-.Ltext0
 5428 0290 0100     		.2byte	0x1
 5429 0292 50       		.byte	0x50
 5430 0293 8C050000 		.4byte	.LVL133-.Ltext0
 5431 0297 8E050000 		.4byte	.LVL134-.Ltext0
 5432 029b 0400     		.2byte	0x4
 5433 029d F3       		.byte	0xf3
 5434 029e 01       		.uleb128 0x1
 5435 029f 50       		.byte	0x50
 5436 02a0 9F       		.byte	0x9f
 5437 02a1 8E050000 		.4byte	.LVL134-.Ltext0
 5438 02a5 90050000 		.4byte	.LVL135-.Ltext0
 5439 02a9 0100     		.2byte	0x1
 5440 02ab 50       		.byte	0x50
 5441 02ac 90050000 		.4byte	.LVL135-.Ltext0
 5442 02b0 92050000 		.4byte	.LFE81-.Ltext0
 5443 02b4 0400     		.2byte	0x4
 5444 02b6 F3       		.byte	0xf3
 5445 02b7 01       		.uleb128 0x1
 5446 02b8 50       		.byte	0x50
 5447 02b9 9F       		.byte	0x9f
 5448 02ba 00000000 		.4byte	0
 5449 02be 00000000 		.4byte	0
 5450              	.LLST56:
 5451 02c2 74050000 		.4byte	.LVL127-.Ltext0
 5452 02c6 88050000 		.4byte	.LVL131-.Ltext0
 5453 02ca 0200     		.2byte	0x2
 5454 02cc 30       		.byte	0x30
 5455 02cd 9F       		.byte	0x9f
 5456 02ce 88050000 		.4byte	.LVL131-.Ltext0
 5457 02d2 8A050000 		.4byte	.LVL132-.Ltext0
 5458 02d6 0100     		.2byte	0x1
 5459 02d8 50       		.byte	0x50
ARM GAS  /tmp/ccDRaG8a.s 			page 161


 5460 02d9 8A050000 		.4byte	.LVL132-.Ltext0
 5461 02dd 92050000 		.4byte	.LFE81-.Ltext0
 5462 02e1 0200     		.2byte	0x2
 5463 02e3 30       		.byte	0x30
 5464 02e4 9F       		.byte	0x9f
 5465 02e5 00000000 		.4byte	0
 5466 02e9 00000000 		.4byte	0
 5467              	.LLST57:
 5468 02ed 78050000 		.4byte	.LVL128-.Ltext0
 5469 02f1 7A050000 		.4byte	.LVL129-.Ltext0
 5470 02f5 0100     		.2byte	0x1
 5471 02f7 53       		.byte	0x53
 5472 02f8 00000000 		.4byte	0
 5473 02fc 00000000 		.4byte	0
 5474              	.LLST50:
 5475 0300 88040000 		.4byte	.LFB80-.Ltext0
 5476 0304 8A040000 		.4byte	.LCFI9-.Ltext0
 5477 0308 0200     		.2byte	0x2
 5478 030a 7D       		.byte	0x7d
 5479 030b 00       		.sleb128 0
 5480 030c 8A040000 		.4byte	.LCFI9-.Ltext0
 5481 0310 74050000 		.4byte	.LFE80-.Ltext0
 5482 0314 0200     		.2byte	0x2
 5483 0316 7D       		.byte	0x7d
 5484 0317 14       		.sleb128 20
 5485 0318 00000000 		.4byte	0
 5486 031c 00000000 		.4byte	0
 5487              	.LLST51:
 5488 0320 88040000 		.4byte	.LVL114-.Ltext0
 5489 0324 A8040000 		.4byte	.LVL118-.Ltext0
 5490 0328 0100     		.2byte	0x1
 5491 032a 50       		.byte	0x50
 5492 032b A8040000 		.4byte	.LVL118-.Ltext0
 5493 032f AA040000 		.4byte	.LVL119-.Ltext0
 5494 0333 0400     		.2byte	0x4
 5495 0335 F3       		.byte	0xf3
 5496 0336 01       		.uleb128 0x1
 5497 0337 50       		.byte	0x50
 5498 0338 9F       		.byte	0x9f
 5499 0339 AA040000 		.4byte	.LVL119-.Ltext0
 5500 033d 56050000 		.4byte	.LVL122-.Ltext0
 5501 0341 0100     		.2byte	0x1
 5502 0343 50       		.byte	0x50
 5503 0344 56050000 		.4byte	.LVL122-.Ltext0
 5504 0348 58050000 		.4byte	.LVL123-.Ltext0
 5505 034c 0400     		.2byte	0x4
 5506 034e F3       		.byte	0xf3
 5507 034f 01       		.uleb128 0x1
 5508 0350 50       		.byte	0x50
 5509 0351 9F       		.byte	0x9f
 5510 0352 58050000 		.4byte	.LVL123-.Ltext0
 5511 0356 74050000 		.4byte	.LFE80-.Ltext0
 5512 035a 0100     		.2byte	0x1
 5513 035c 50       		.byte	0x50
 5514 035d 00000000 		.4byte	0
 5515 0361 00000000 		.4byte	0
 5516              	.LLST52:
ARM GAS  /tmp/ccDRaG8a.s 			page 162


 5517 0365 88040000 		.4byte	.LVL114-.Ltext0
 5518 0369 F4040000 		.4byte	.LVL120-.Ltext0
 5519 036d 0100     		.2byte	0x1
 5520 036f 52       		.byte	0x52
 5521 0370 F4040000 		.4byte	.LVL120-.Ltext0
 5522 0374 58050000 		.4byte	.LVL123-.Ltext0
 5523 0378 0400     		.2byte	0x4
 5524 037a F3       		.byte	0xf3
 5525 037b 01       		.uleb128 0x1
 5526 037c 52       		.byte	0x52
 5527 037d 9F       		.byte	0x9f
 5528 037e 58050000 		.4byte	.LVL123-.Ltext0
 5529 0382 62050000 		.4byte	.LVL124-.Ltext0
 5530 0386 0100     		.2byte	0x1
 5531 0388 52       		.byte	0x52
 5532 0389 62050000 		.4byte	.LVL124-.Ltext0
 5533 038d 6C050000 		.4byte	.LVL125-.Ltext0
 5534 0391 0400     		.2byte	0x4
 5535 0393 F3       		.byte	0xf3
 5536 0394 01       		.uleb128 0x1
 5537 0395 52       		.byte	0x52
 5538 0396 9F       		.byte	0x9f
 5539 0397 6C050000 		.4byte	.LVL125-.Ltext0
 5540 039b 74050000 		.4byte	.LFE80-.Ltext0
 5541 039f 0100     		.2byte	0x1
 5542 03a1 52       		.byte	0x52
 5543 03a2 00000000 		.4byte	0
 5544 03a6 00000000 		.4byte	0
 5545              	.LLST53:
 5546 03aa 88040000 		.4byte	.LVL114-.Ltext0
 5547 03ae A0040000 		.4byte	.LVL117-.Ltext0
 5548 03b2 0100     		.2byte	0x1
 5549 03b4 53       		.byte	0x53
 5550 03b5 A0040000 		.4byte	.LVL117-.Ltext0
 5551 03b9 AA040000 		.4byte	.LVL119-.Ltext0
 5552 03bd 0400     		.2byte	0x4
 5553 03bf F3       		.byte	0xf3
 5554 03c0 01       		.uleb128 0x1
 5555 03c1 53       		.byte	0x53
 5556 03c2 9F       		.byte	0x9f
 5557 03c3 AA040000 		.4byte	.LVL119-.Ltext0
 5558 03c7 4A050000 		.4byte	.LVL121-.Ltext0
 5559 03cb 0100     		.2byte	0x1
 5560 03cd 53       		.byte	0x53
 5561 03ce 4A050000 		.4byte	.LVL121-.Ltext0
 5562 03d2 58050000 		.4byte	.LVL123-.Ltext0
 5563 03d6 0400     		.2byte	0x4
 5564 03d8 F3       		.byte	0xf3
 5565 03d9 01       		.uleb128 0x1
 5566 03da 53       		.byte	0x53
 5567 03db 9F       		.byte	0x9f
 5568 03dc 58050000 		.4byte	.LVL123-.Ltext0
 5569 03e0 62050000 		.4byte	.LVL124-.Ltext0
 5570 03e4 0100     		.2byte	0x1
 5571 03e6 53       		.byte	0x53
 5572 03e7 62050000 		.4byte	.LVL124-.Ltext0
 5573 03eb 6C050000 		.4byte	.LVL125-.Ltext0
ARM GAS  /tmp/ccDRaG8a.s 			page 163


 5574 03ef 0400     		.2byte	0x4
 5575 03f1 F3       		.byte	0xf3
 5576 03f2 01       		.uleb128 0x1
 5577 03f3 53       		.byte	0x53
 5578 03f4 9F       		.byte	0x9f
 5579 03f5 6C050000 		.4byte	.LVL125-.Ltext0
 5580 03f9 6E050000 		.4byte	.LVL126-.Ltext0
 5581 03fd 0100     		.2byte	0x1
 5582 03ff 53       		.byte	0x53
 5583 0400 6E050000 		.4byte	.LVL126-.Ltext0
 5584 0404 74050000 		.4byte	.LFE80-.Ltext0
 5585 0408 0400     		.2byte	0x4
 5586 040a F3       		.byte	0xf3
 5587 040b 01       		.uleb128 0x1
 5588 040c 53       		.byte	0x53
 5589 040d 9F       		.byte	0x9f
 5590 040e 00000000 		.4byte	0
 5591 0412 00000000 		.4byte	0
 5592              	.LLST54:
 5593 0416 8E040000 		.4byte	.LVL115-.Ltext0
 5594 041a 90040000 		.4byte	.LVL116-.Ltext0
 5595 041e 0100     		.2byte	0x1
 5596 0420 54       		.byte	0x54
 5597 0421 00000000 		.4byte	0
 5598 0425 00000000 		.4byte	0
 5599              	.LLST44:
 5600 0429 64040000 		.4byte	.LVL102-.Ltext0
 5601 042d 80040000 		.4byte	.LVL110-.Ltext0
 5602 0431 0100     		.2byte	0x1
 5603 0433 50       		.byte	0x50
 5604 0434 80040000 		.4byte	.LVL110-.Ltext0
 5605 0438 84040000 		.4byte	.LVL112-.Ltext0
 5606 043c 0400     		.2byte	0x4
 5607 043e F3       		.byte	0xf3
 5608 043f 01       		.uleb128 0x1
 5609 0440 50       		.byte	0x50
 5610 0441 9F       		.byte	0x9f
 5611 0442 84040000 		.4byte	.LVL112-.Ltext0
 5612 0446 86040000 		.4byte	.LVL113-.Ltext0
 5613 044a 0100     		.2byte	0x1
 5614 044c 50       		.byte	0x50
 5615 044d 86040000 		.4byte	.LVL113-.Ltext0
 5616 0451 88040000 		.4byte	.LFE79-.Ltext0
 5617 0455 0400     		.2byte	0x4
 5618 0457 F3       		.byte	0xf3
 5619 0458 01       		.uleb128 0x1
 5620 0459 50       		.byte	0x50
 5621 045a 9F       		.byte	0x9f
 5622 045b 00000000 		.4byte	0
 5623 045f 00000000 		.4byte	0
 5624              	.LLST45:
 5625 0463 64040000 		.4byte	.LVL102-.Ltext0
 5626 0467 72040000 		.4byte	.LVL106-.Ltext0
 5627 046b 0100     		.2byte	0x1
 5628 046d 51       		.byte	0x51
 5629 046e 72040000 		.4byte	.LVL106-.Ltext0
 5630 0472 84040000 		.4byte	.LVL112-.Ltext0
ARM GAS  /tmp/ccDRaG8a.s 			page 164


 5631 0476 0400     		.2byte	0x4
 5632 0478 F3       		.byte	0xf3
 5633 0479 01       		.uleb128 0x1
 5634 047a 51       		.byte	0x51
 5635 047b 9F       		.byte	0x9f
 5636 047c 84040000 		.4byte	.LVL112-.Ltext0
 5637 0480 88040000 		.4byte	.LFE79-.Ltext0
 5638 0484 0100     		.2byte	0x1
 5639 0486 51       		.byte	0x51
 5640 0487 00000000 		.4byte	0
 5641 048b 00000000 		.4byte	0
 5642              	.LLST46:
 5643 048f 64040000 		.4byte	.LVL102-.Ltext0
 5644 0493 82040000 		.4byte	.LVL111-.Ltext0
 5645 0497 0200     		.2byte	0x2
 5646 0499 30       		.byte	0x30
 5647 049a 9F       		.byte	0x9f
 5648 049b 82040000 		.4byte	.LVL111-.Ltext0
 5649 049f 84040000 		.4byte	.LVL112-.Ltext0
 5650 04a3 0100     		.2byte	0x1
 5651 04a5 50       		.byte	0x50
 5652 04a6 84040000 		.4byte	.LVL112-.Ltext0
 5653 04aa 88040000 		.4byte	.LFE79-.Ltext0
 5654 04ae 0200     		.2byte	0x2
 5655 04b0 30       		.byte	0x30
 5656 04b1 9F       		.byte	0x9f
 5657 04b2 00000000 		.4byte	0
 5658 04b6 00000000 		.4byte	0
 5659              	.LLST47:
 5660 04ba 76040000 		.4byte	.LVL107-.Ltext0
 5661 04be 7A040000 		.4byte	.LVL108-.Ltext0
 5662 04c2 0100     		.2byte	0x1
 5663 04c4 51       		.byte	0x51
 5664 04c5 7A040000 		.4byte	.LVL108-.Ltext0
 5665 04c9 7E040000 		.4byte	.LVL109-.Ltext0
 5666 04cd 0300     		.2byte	0x3
 5667 04cf 71       		.byte	0x71
 5668 04d0 68       		.sleb128 -24
 5669 04d1 9F       		.byte	0x9f
 5670 04d2 00000000 		.4byte	0
 5671 04d6 00000000 		.4byte	0
 5672              	.LLST48:
 5673 04da 68040000 		.4byte	.LVL103-.Ltext0
 5674 04de 6A040000 		.4byte	.LVL104-.Ltext0
 5675 04e2 0100     		.2byte	0x1
 5676 04e4 53       		.byte	0x53
 5677 04e5 00000000 		.4byte	0
 5678 04e9 00000000 		.4byte	0
 5679              	.LLST49:
 5680 04ed 6E040000 		.4byte	.LVL105-.Ltext0
 5681 04f1 72040000 		.4byte	.LVL106-.Ltext0
 5682 04f5 0100     		.2byte	0x1
 5683 04f7 51       		.byte	0x51
 5684 04f8 00000000 		.4byte	0
 5685 04fc 00000000 		.4byte	0
 5686              	.LLST40:
 5687 0500 44040000 		.4byte	.LVL95-.Ltext0
ARM GAS  /tmp/ccDRaG8a.s 			page 165


 5688 0504 5C040000 		.4byte	.LVL99-.Ltext0
 5689 0508 0100     		.2byte	0x1
 5690 050a 50       		.byte	0x50
 5691 050b 5C040000 		.4byte	.LVL99-.Ltext0
 5692 050f 60040000 		.4byte	.LVL100-.Ltext0
 5693 0513 0400     		.2byte	0x4
 5694 0515 F3       		.byte	0xf3
 5695 0516 01       		.uleb128 0x1
 5696 0517 50       		.byte	0x50
 5697 0518 9F       		.byte	0x9f
 5698 0519 60040000 		.4byte	.LVL100-.Ltext0
 5699 051d 62040000 		.4byte	.LVL101-.Ltext0
 5700 0521 0100     		.2byte	0x1
 5701 0523 50       		.byte	0x50
 5702 0524 62040000 		.4byte	.LVL101-.Ltext0
 5703 0528 64040000 		.4byte	.LFE78-.Ltext0
 5704 052c 0400     		.2byte	0x4
 5705 052e F3       		.byte	0xf3
 5706 052f 01       		.uleb128 0x1
 5707 0530 50       		.byte	0x50
 5708 0531 9F       		.byte	0x9f
 5709 0532 00000000 		.4byte	0
 5710 0536 00000000 		.4byte	0
 5711              	.LLST41:
 5712 053a 44040000 		.4byte	.LVL95-.Ltext0
 5713 053e 52040000 		.4byte	.LVL98-.Ltext0
 5714 0542 0100     		.2byte	0x1
 5715 0544 51       		.byte	0x51
 5716 0545 52040000 		.4byte	.LVL98-.Ltext0
 5717 0549 60040000 		.4byte	.LVL100-.Ltext0
 5718 054d 0400     		.2byte	0x4
 5719 054f F3       		.byte	0xf3
 5720 0550 01       		.uleb128 0x1
 5721 0551 51       		.byte	0x51
 5722 0552 9F       		.byte	0x9f
 5723 0553 60040000 		.4byte	.LVL100-.Ltext0
 5724 0557 64040000 		.4byte	.LFE78-.Ltext0
 5725 055b 0100     		.2byte	0x1
 5726 055d 51       		.byte	0x51
 5727 055e 00000000 		.4byte	0
 5728 0562 00000000 		.4byte	0
 5729              	.LLST42:
 5730 0566 44040000 		.4byte	.LVL95-.Ltext0
 5731 056a 62040000 		.4byte	.LVL101-.Ltext0
 5732 056e 0200     		.2byte	0x2
 5733 0570 30       		.byte	0x30
 5734 0571 9F       		.byte	0x9f
 5735 0572 62040000 		.4byte	.LVL101-.Ltext0
 5736 0576 64040000 		.4byte	.LFE78-.Ltext0
 5737 057a 0600     		.2byte	0x6
 5738 057c 70       		.byte	0x70
 5739 057d 00       		.sleb128 0
 5740 057e 08       		.byte	0x8
 5741 057f FF       		.byte	0xff
 5742 0580 1A       		.byte	0x1a
 5743 0581 9F       		.byte	0x9f
 5744 0582 00000000 		.4byte	0
ARM GAS  /tmp/ccDRaG8a.s 			page 166


 5745 0586 00000000 		.4byte	0
 5746              	.LLST43:
 5747 058a 48040000 		.4byte	.LVL96-.Ltext0
 5748 058e 4A040000 		.4byte	.LVL97-.Ltext0
 5749 0592 0100     		.2byte	0x1
 5750 0594 53       		.byte	0x53
 5751 0595 00000000 		.4byte	0
 5752 0599 00000000 		.4byte	0
 5753              	.LLST37:
 5754 059d 1C040000 		.4byte	.LVL86-.Ltext0
 5755 05a1 2A040000 		.4byte	.LVL89-.Ltext0
 5756 05a5 0100     		.2byte	0x1
 5757 05a7 50       		.byte	0x50
 5758 05a8 2A040000 		.4byte	.LVL89-.Ltext0
 5759 05ac 40040000 		.4byte	.LVL93-.Ltext0
 5760 05b0 0400     		.2byte	0x4
 5761 05b2 F3       		.byte	0xf3
 5762 05b3 01       		.uleb128 0x1
 5763 05b4 50       		.byte	0x50
 5764 05b5 9F       		.byte	0x9f
 5765 05b6 40040000 		.4byte	.LVL93-.Ltext0
 5766 05ba 42040000 		.4byte	.LVL94-.Ltext0
 5767 05be 0100     		.2byte	0x1
 5768 05c0 50       		.byte	0x50
 5769 05c1 42040000 		.4byte	.LVL94-.Ltext0
 5770 05c5 44040000 		.4byte	.LFE77-.Ltext0
 5771 05c9 0400     		.2byte	0x4
 5772 05cb F3       		.byte	0xf3
 5773 05cc 01       		.uleb128 0x1
 5774 05cd 50       		.byte	0x50
 5775 05ce 9F       		.byte	0x9f
 5776 05cf 00000000 		.4byte	0
 5777 05d3 00000000 		.4byte	0
 5778              	.LLST38:
 5779 05d7 1C040000 		.4byte	.LVL86-.Ltext0
 5780 05db 34040000 		.4byte	.LVL90-.Ltext0
 5781 05df 0200     		.2byte	0x2
 5782 05e1 30       		.byte	0x30
 5783 05e2 9F       		.byte	0x9f
 5784 05e3 34040000 		.4byte	.LVL90-.Ltext0
 5785 05e7 40040000 		.4byte	.LVL93-.Ltext0
 5786 05eb 0100     		.2byte	0x1
 5787 05ed 50       		.byte	0x50
 5788 05ee 40040000 		.4byte	.LVL93-.Ltext0
 5789 05f2 42040000 		.4byte	.LVL94-.Ltext0
 5790 05f6 0200     		.2byte	0x2
 5791 05f8 30       		.byte	0x30
 5792 05f9 9F       		.byte	0x9f
 5793 05fa 00000000 		.4byte	0
 5794 05fe 00000000 		.4byte	0
 5795              	.LLST39:
 5796 0602 20040000 		.4byte	.LVL87-.Ltext0
 5797 0606 22040000 		.4byte	.LVL88-.Ltext0
 5798 060a 0100     		.2byte	0x1
 5799 060c 53       		.byte	0x53
 5800 060d 00000000 		.4byte	0
 5801 0611 00000000 		.4byte	0
ARM GAS  /tmp/ccDRaG8a.s 			page 167


 5802              	.LLST34:
 5803 0615 D2030000 		.4byte	.LVL79-.Ltext0
 5804 0619 04040000 		.4byte	.LVL83-.Ltext0
 5805 061d 0100     		.2byte	0x1
 5806 061f 50       		.byte	0x50
 5807 0620 04040000 		.4byte	.LVL83-.Ltext0
 5808 0624 10040000 		.4byte	.LVL84-.Ltext0
 5809 0628 0400     		.2byte	0x4
 5810 062a F3       		.byte	0xf3
 5811 062b 01       		.uleb128 0x1
 5812 062c 50       		.byte	0x50
 5813 062d 9F       		.byte	0x9f
 5814 062e 10040000 		.4byte	.LVL84-.Ltext0
 5815 0632 1A040000 		.4byte	.LVL85-.Ltext0
 5816 0636 0100     		.2byte	0x1
 5817 0638 50       		.byte	0x50
 5818 0639 1A040000 		.4byte	.LVL85-.Ltext0
 5819 063d 1C040000 		.4byte	.LFE76-.Ltext0
 5820 0641 0400     		.2byte	0x4
 5821 0643 F3       		.byte	0xf3
 5822 0644 01       		.uleb128 0x1
 5823 0645 50       		.byte	0x50
 5824 0646 9F       		.byte	0x9f
 5825 0647 00000000 		.4byte	0
 5826 064b 00000000 		.4byte	0
 5827              	.LLST35:
 5828 064f D2030000 		.4byte	.LVL79-.Ltext0
 5829 0653 FC030000 		.4byte	.LVL82-.Ltext0
 5830 0657 0100     		.2byte	0x1
 5831 0659 51       		.byte	0x51
 5832 065a FC030000 		.4byte	.LVL82-.Ltext0
 5833 065e 10040000 		.4byte	.LVL84-.Ltext0
 5834 0662 0400     		.2byte	0x4
 5835 0664 F3       		.byte	0xf3
 5836 0665 01       		.uleb128 0x1
 5837 0666 51       		.byte	0x51
 5838 0667 9F       		.byte	0x9f
 5839 0668 10040000 		.4byte	.LVL84-.Ltext0
 5840 066c 1C040000 		.4byte	.LFE76-.Ltext0
 5841 0670 0100     		.2byte	0x1
 5842 0672 51       		.byte	0x51
 5843 0673 00000000 		.4byte	0
 5844 0677 00000000 		.4byte	0
 5845              	.LLST36:
 5846 067b D6030000 		.4byte	.LVL80-.Ltext0
 5847 067f D8030000 		.4byte	.LVL81-.Ltext0
 5848 0683 0100     		.2byte	0x1
 5849 0685 53       		.byte	0x53
 5850 0686 00000000 		.4byte	0
 5851 068a 00000000 		.4byte	0
 5852              	.LLST26:
 5853 068e 36030000 		.4byte	.LFB75-.Ltext0
 5854 0692 38030000 		.4byte	.LCFI8-.Ltext0
 5855 0696 0200     		.2byte	0x2
 5856 0698 7D       		.byte	0x7d
 5857 0699 00       		.sleb128 0
 5858 069a 38030000 		.4byte	.LCFI8-.Ltext0
ARM GAS  /tmp/ccDRaG8a.s 			page 168


 5859 069e D2030000 		.4byte	.LFE75-.Ltext0
 5860 06a2 0200     		.2byte	0x2
 5861 06a4 7D       		.byte	0x7d
 5862 06a5 14       		.sleb128 20
 5863 06a6 00000000 		.4byte	0
 5864 06aa 00000000 		.4byte	0
 5865              	.LLST27:
 5866 06ae 36030000 		.4byte	.LVL60-.Ltext0
 5867 06b2 62030000 		.4byte	.LVL67-.Ltext0
 5868 06b6 0100     		.2byte	0x1
 5869 06b8 50       		.byte	0x50
 5870 06b9 62030000 		.4byte	.LVL67-.Ltext0
 5871 06bd 64030000 		.4byte	.LVL68-.Ltext0
 5872 06c1 0400     		.2byte	0x4
 5873 06c3 F3       		.byte	0xf3
 5874 06c4 01       		.uleb128 0x1
 5875 06c5 50       		.byte	0x50
 5876 06c6 9F       		.byte	0x9f
 5877 06c7 64030000 		.4byte	.LVL68-.Ltext0
 5878 06cb 6A030000 		.4byte	.LVL69-.Ltext0
 5879 06cf 0100     		.2byte	0x1
 5880 06d1 50       		.byte	0x50
 5881 06d2 6A030000 		.4byte	.LVL69-.Ltext0
 5882 06d6 C2030000 		.4byte	.LVL75-.Ltext0
 5883 06da 0400     		.2byte	0x4
 5884 06dc F3       		.byte	0xf3
 5885 06dd 01       		.uleb128 0x1
 5886 06de 50       		.byte	0x50
 5887 06df 9F       		.byte	0x9f
 5888 06e0 C2030000 		.4byte	.LVL75-.Ltext0
 5889 06e4 D2030000 		.4byte	.LFE75-.Ltext0
 5890 06e8 0100     		.2byte	0x1
 5891 06ea 50       		.byte	0x50
 5892 06eb 00000000 		.4byte	0
 5893 06ef 00000000 		.4byte	0
 5894              	.LLST28:
 5895 06f3 36030000 		.4byte	.LVL60-.Ltext0
 5896 06f7 82030000 		.4byte	.LVL72-.Ltext0
 5897 06fb 0100     		.2byte	0x1
 5898 06fd 51       		.byte	0x51
 5899 06fe 82030000 		.4byte	.LVL72-.Ltext0
 5900 0702 B8030000 		.4byte	.LVL74-.Ltext0
 5901 0706 0400     		.2byte	0x4
 5902 0708 F3       		.byte	0xf3
 5903 0709 01       		.uleb128 0x1
 5904 070a 51       		.byte	0x51
 5905 070b 9F       		.byte	0x9f
 5906 070c B8030000 		.4byte	.LVL74-.Ltext0
 5907 0710 D2030000 		.4byte	.LFE75-.Ltext0
 5908 0714 0100     		.2byte	0x1
 5909 0716 51       		.byte	0x51
 5910 0717 00000000 		.4byte	0
 5911 071b 00000000 		.4byte	0
 5912              	.LLST29:
 5913 071f 36030000 		.4byte	.LVL60-.Ltext0
 5914 0723 A6030000 		.4byte	.LVL73-.Ltext0
 5915 0727 0100     		.2byte	0x1
ARM GAS  /tmp/ccDRaG8a.s 			page 169


 5916 0729 52       		.byte	0x52
 5917 072a A6030000 		.4byte	.LVL73-.Ltext0
 5918 072e B8030000 		.4byte	.LVL74-.Ltext0
 5919 0732 0400     		.2byte	0x4
 5920 0734 F3       		.byte	0xf3
 5921 0735 01       		.uleb128 0x1
 5922 0736 52       		.byte	0x52
 5923 0737 9F       		.byte	0x9f
 5924 0738 B8030000 		.4byte	.LVL74-.Ltext0
 5925 073c D2030000 		.4byte	.LFE75-.Ltext0
 5926 0740 0100     		.2byte	0x1
 5927 0742 52       		.byte	0x52
 5928 0743 00000000 		.4byte	0
 5929 0747 00000000 		.4byte	0
 5930              	.LLST30:
 5931 074b 36030000 		.4byte	.LVL60-.Ltext0
 5932 074f 5A030000 		.4byte	.LVL65-.Ltext0
 5933 0753 0100     		.2byte	0x1
 5934 0755 53       		.byte	0x53
 5935 0756 5A030000 		.4byte	.LVL65-.Ltext0
 5936 075a 64030000 		.4byte	.LVL68-.Ltext0
 5937 075e 0400     		.2byte	0x4
 5938 0760 F3       		.byte	0xf3
 5939 0761 01       		.uleb128 0x1
 5940 0762 53       		.byte	0x53
 5941 0763 9F       		.byte	0x9f
 5942 0764 64030000 		.4byte	.LVL68-.Ltext0
 5943 0768 70030000 		.4byte	.LVL70-.Ltext0
 5944 076c 0100     		.2byte	0x1
 5945 076e 53       		.byte	0x53
 5946 076f 70030000 		.4byte	.LVL70-.Ltext0
 5947 0773 C2030000 		.4byte	.LVL75-.Ltext0
 5948 0777 0400     		.2byte	0x4
 5949 0779 F3       		.byte	0xf3
 5950 077a 01       		.uleb128 0x1
 5951 077b 53       		.byte	0x53
 5952 077c 9F       		.byte	0x9f
 5953 077d C2030000 		.4byte	.LVL75-.Ltext0
 5954 0781 C4030000 		.4byte	.LVL76-.Ltext0
 5955 0785 0100     		.2byte	0x1
 5956 0787 53       		.byte	0x53
 5957 0788 C4030000 		.4byte	.LVL76-.Ltext0
 5958 078c CA030000 		.4byte	.LVL77-.Ltext0
 5959 0790 0400     		.2byte	0x4
 5960 0792 F3       		.byte	0xf3
 5961 0793 01       		.uleb128 0x1
 5962 0794 53       		.byte	0x53
 5963 0795 9F       		.byte	0x9f
 5964 0796 CA030000 		.4byte	.LVL77-.Ltext0
 5965 079a CC030000 		.4byte	.LVL78-.Ltext0
 5966 079e 0100     		.2byte	0x1
 5967 07a0 53       		.byte	0x53
 5968 07a1 CC030000 		.4byte	.LVL78-.Ltext0
 5969 07a5 D2030000 		.4byte	.LFE75-.Ltext0
 5970 07a9 0400     		.2byte	0x4
 5971 07ab F3       		.byte	0xf3
 5972 07ac 01       		.uleb128 0x1
ARM GAS  /tmp/ccDRaG8a.s 			page 170


 5973 07ad 53       		.byte	0x53
 5974 07ae 9F       		.byte	0x9f
 5975 07af 00000000 		.4byte	0
 5976 07b3 00000000 		.4byte	0
 5977              	.LLST31:
 5978 07b7 50030000 		.4byte	.LVL64-.Ltext0
 5979 07bb 5E030000 		.4byte	.LVL66-.Ltext0
 5980 07bf 0100     		.2byte	0x1
 5981 07c1 54       		.byte	0x54
 5982 07c2 64030000 		.4byte	.LVL68-.Ltext0
 5983 07c6 80030000 		.4byte	.LVL71-.Ltext0
 5984 07ca 0100     		.2byte	0x1
 5985 07cc 54       		.byte	0x54
 5986 07cd B8030000 		.4byte	.LVL74-.Ltext0
 5987 07d1 C2030000 		.4byte	.LVL75-.Ltext0
 5988 07d5 0100     		.2byte	0x1
 5989 07d7 54       		.byte	0x54
 5990 07d8 00000000 		.4byte	0
 5991 07dc 00000000 		.4byte	0
 5992              	.LLST32:
 5993 07e0 3C030000 		.4byte	.LVL61-.Ltext0
 5994 07e4 40030000 		.4byte	.LVL62-.Ltext0
 5995 07e8 0100     		.2byte	0x1
 5996 07ea 55       		.byte	0x55
 5997 07eb 00000000 		.4byte	0
 5998 07ef 00000000 		.4byte	0
 5999              	.LLST33:
 6000 07f3 44030000 		.4byte	.LVL63-.Ltext0
 6001 07f7 50030000 		.4byte	.LVL64-.Ltext0
 6002 07fb 0100     		.2byte	0x1
 6003 07fd 54       		.byte	0x54
 6004 07fe C2030000 		.4byte	.LVL75-.Ltext0
 6005 0802 D2030000 		.4byte	.LFE75-.Ltext0
 6006 0806 0100     		.2byte	0x1
 6007 0808 54       		.byte	0x54
 6008 0809 00000000 		.4byte	0
 6009 080d 00000000 		.4byte	0
 6010              	.LLST23:
 6011 0811 20030000 		.4byte	.LVL55-.Ltext0
 6012 0815 2E030000 		.4byte	.LVL58-.Ltext0
 6013 0819 0100     		.2byte	0x1
 6014 081b 50       		.byte	0x50
 6015 081c 2E030000 		.4byte	.LVL58-.Ltext0
 6016 0820 36030000 		.4byte	.LFE74-.Ltext0
 6017 0824 0400     		.2byte	0x4
 6018 0826 F3       		.byte	0xf3
 6019 0827 01       		.uleb128 0x1
 6020 0828 50       		.byte	0x50
 6021 0829 9F       		.byte	0x9f
 6022 082a 00000000 		.4byte	0
 6023 082e 00000000 		.4byte	0
 6024              	.LLST24:
 6025 0832 20030000 		.4byte	.LVL55-.Ltext0
 6026 0836 34030000 		.4byte	.LVL59-.Ltext0
 6027 083a 0200     		.2byte	0x2
 6028 083c 30       		.byte	0x30
 6029 083d 9F       		.byte	0x9f
ARM GAS  /tmp/ccDRaG8a.s 			page 171


 6030 083e 34030000 		.4byte	.LVL59-.Ltext0
 6031 0842 36030000 		.4byte	.LFE74-.Ltext0
 6032 0846 0600     		.2byte	0x6
 6033 0848 70       		.byte	0x70
 6034 0849 00       		.sleb128 0
 6035 084a 08       		.byte	0x8
 6036 084b FF       		.byte	0xff
 6037 084c 1A       		.byte	0x1a
 6038 084d 9F       		.byte	0x9f
 6039 084e 00000000 		.4byte	0
 6040 0852 00000000 		.4byte	0
 6041              	.LLST25:
 6042 0856 24030000 		.4byte	.LVL56-.Ltext0
 6043 085a 26030000 		.4byte	.LVL57-.Ltext0
 6044 085e 0100     		.2byte	0x1
 6045 0860 53       		.byte	0x53
 6046 0861 00000000 		.4byte	0
 6047 0865 00000000 		.4byte	0
 6048              	.LLST20:
 6049 0869 D0020000 		.4byte	.LFB73-.Ltext0
 6050 086d D4020000 		.4byte	.LCFI5-.Ltext0
 6051 0871 0200     		.2byte	0x2
 6052 0873 7D       		.byte	0x7d
 6053 0874 00       		.sleb128 0
 6054 0875 D4020000 		.4byte	.LCFI5-.Ltext0
 6055 0879 10030000 		.4byte	.LCFI6-.Ltext0
 6056 087d 0200     		.2byte	0x2
 6057 087f 7D       		.byte	0x7d
 6058 0880 08       		.sleb128 8
 6059 0881 10030000 		.4byte	.LCFI6-.Ltext0
 6060 0885 12030000 		.4byte	.LCFI7-.Ltext0
 6061 0889 0200     		.2byte	0x2
 6062 088b 7D       		.byte	0x7d
 6063 088c 00       		.sleb128 0
 6064 088d 12030000 		.4byte	.LCFI7-.Ltext0
 6065 0891 20030000 		.4byte	.LFE73-.Ltext0
 6066 0895 0200     		.2byte	0x2
 6067 0897 7D       		.byte	0x7d
 6068 0898 08       		.sleb128 8
 6069 0899 00000000 		.4byte	0
 6070 089d 00000000 		.4byte	0
 6071              	.LLST21:
 6072 08a1 D0020000 		.4byte	.LVL47-.Ltext0
 6073 08a5 02030000 		.4byte	.LVL51-.Ltext0
 6074 08a9 0100     		.2byte	0x1
 6075 08ab 50       		.byte	0x50
 6076 08ac 02030000 		.4byte	.LVL51-.Ltext0
 6077 08b0 04030000 		.4byte	.LVL52-.Ltext0
 6078 08b4 0400     		.2byte	0x4
 6079 08b6 F3       		.byte	0xf3
 6080 08b7 01       		.uleb128 0x1
 6081 08b8 50       		.byte	0x50
 6082 08b9 9F       		.byte	0x9f
 6083 08ba 04030000 		.4byte	.LVL52-.Ltext0
 6084 08be 0E030000 		.4byte	.LVL53-.Ltext0
 6085 08c2 0100     		.2byte	0x1
 6086 08c4 50       		.byte	0x50
ARM GAS  /tmp/ccDRaG8a.s 			page 172


 6087 08c5 0E030000 		.4byte	.LVL53-.Ltext0
 6088 08c9 12030000 		.4byte	.LVL54-.Ltext0
 6089 08cd 0400     		.2byte	0x4
 6090 08cf F3       		.byte	0xf3
 6091 08d0 01       		.uleb128 0x1
 6092 08d1 50       		.byte	0x50
 6093 08d2 9F       		.byte	0x9f
 6094 08d3 12030000 		.4byte	.LVL54-.Ltext0
 6095 08d7 20030000 		.4byte	.LFE73-.Ltext0
 6096 08db 0100     		.2byte	0x1
 6097 08dd 50       		.byte	0x50
 6098 08de 00000000 		.4byte	0
 6099 08e2 00000000 		.4byte	0
 6100              	.LLST22:
 6101 08e6 DA020000 		.4byte	.LVL49-.Ltext0
 6102 08ea DC020000 		.4byte	.LVL50-.Ltext0
 6103 08ee 0100     		.2byte	0x1
 6104 08f0 53       		.byte	0x53
 6105 08f1 00000000 		.4byte	0
 6106 08f5 00000000 		.4byte	0
 6107              	.LLST18:
 6108 08f9 AC020000 		.4byte	.LVL41-.Ltext0
 6109 08fd BA020000 		.4byte	.LVL44-.Ltext0
 6110 0901 0100     		.2byte	0x1
 6111 0903 50       		.byte	0x50
 6112 0904 BA020000 		.4byte	.LVL44-.Ltext0
 6113 0908 C4020000 		.4byte	.LVL45-.Ltext0
 6114 090c 0400     		.2byte	0x4
 6115 090e F3       		.byte	0xf3
 6116 090f 01       		.uleb128 0x1
 6117 0910 50       		.byte	0x50
 6118 0911 9F       		.byte	0x9f
 6119 0912 C4020000 		.4byte	.LVL45-.Ltext0
 6120 0916 CE020000 		.4byte	.LVL46-.Ltext0
 6121 091a 0100     		.2byte	0x1
 6122 091c 50       		.byte	0x50
 6123 091d CE020000 		.4byte	.LVL46-.Ltext0
 6124 0921 D0020000 		.4byte	.LFE72-.Ltext0
 6125 0925 0400     		.2byte	0x4
 6126 0927 F3       		.byte	0xf3
 6127 0928 01       		.uleb128 0x1
 6128 0929 50       		.byte	0x50
 6129 092a 9F       		.byte	0x9f
 6130 092b 00000000 		.4byte	0
 6131 092f 00000000 		.4byte	0
 6132              	.LLST19:
 6133 0933 B0020000 		.4byte	.LVL42-.Ltext0
 6134 0937 B2020000 		.4byte	.LVL43-.Ltext0
 6135 093b 0100     		.2byte	0x1
 6136 093d 53       		.byte	0x53
 6137 093e 00000000 		.4byte	0
 6138 0942 00000000 		.4byte	0
 6139              	.LLST9:
 6140 0946 D2010000 		.4byte	.LFB70-.Ltext0
 6141 094a D4010000 		.4byte	.LCFI2-.Ltext0
 6142 094e 0200     		.2byte	0x2
 6143 0950 7D       		.byte	0x7d
ARM GAS  /tmp/ccDRaG8a.s 			page 173


 6144 0951 00       		.sleb128 0
 6145 0952 D4010000 		.4byte	.LCFI2-.Ltext0
 6146 0956 28020000 		.4byte	.LFE70-.Ltext0
 6147 095a 0200     		.2byte	0x2
 6148 095c 7D       		.byte	0x7d
 6149 095d 10       		.sleb128 16
 6150 095e 00000000 		.4byte	0
 6151 0962 00000000 		.4byte	0
 6152              	.LLST10:
 6153 0966 D2010000 		.4byte	.LVL21-.Ltext0
 6154 096a F1010000 		.4byte	.LVL22-1-.Ltext0
 6155 096e 0100     		.2byte	0x1
 6156 0970 50       		.byte	0x50
 6157 0971 F1010000 		.4byte	.LVL22-1-.Ltext0
 6158 0975 1E020000 		.4byte	.LVL27-.Ltext0
 6159 0979 0100     		.2byte	0x1
 6160 097b 54       		.byte	0x54
 6161 097c 1E020000 		.4byte	.LVL27-.Ltext0
 6162 0980 28020000 		.4byte	.LFE70-.Ltext0
 6163 0984 0100     		.2byte	0x1
 6164 0986 50       		.byte	0x50
 6165 0987 00000000 		.4byte	0
 6166 098b 00000000 		.4byte	0
 6167              	.LLST11:
 6168 098f F4010000 		.4byte	.LVL23-.Ltext0
 6169 0993 1A020000 		.4byte	.LVL26-.Ltext0
 6170 0997 0100     		.2byte	0x1
 6171 0999 55       		.byte	0x55
 6172 099a 00000000 		.4byte	0
 6173 099e 00000000 		.4byte	0
 6174              	.LLST3:
 6175 09a2 FA000000 		.4byte	.LFB69-.Ltext0
 6176 09a6 00010000 		.4byte	.LCFI1-.Ltext0
 6177 09aa 0200     		.2byte	0x2
 6178 09ac 7D       		.byte	0x7d
 6179 09ad 00       		.sleb128 0
 6180 09ae 00010000 		.4byte	.LCFI1-.Ltext0
 6181 09b2 D2010000 		.4byte	.LFE69-.Ltext0
 6182 09b6 0200     		.2byte	0x2
 6183 09b8 7D       		.byte	0x7d
 6184 09b9 10       		.sleb128 16
 6185 09ba 00000000 		.4byte	0
 6186 09be 00000000 		.4byte	0
 6187              	.LLST4:
 6188 09c2 FA000000 		.4byte	.LVL11-.Ltext0
 6189 09c6 0C010000 		.4byte	.LVL14-.Ltext0
 6190 09ca 0100     		.2byte	0x1
 6191 09cc 50       		.byte	0x50
 6192 09cd 0C010000 		.4byte	.LVL14-.Ltext0
 6193 09d1 C6010000 		.4byte	.LVL19-.Ltext0
 6194 09d5 0400     		.2byte	0x4
 6195 09d7 F3       		.byte	0xf3
 6196 09d8 01       		.uleb128 0x1
 6197 09d9 50       		.byte	0x50
 6198 09da 9F       		.byte	0x9f
 6199 09db C6010000 		.4byte	.LVL19-.Ltext0
 6200 09df D0010000 		.4byte	.LVL20-.Ltext0
ARM GAS  /tmp/ccDRaG8a.s 			page 174


 6201 09e3 0100     		.2byte	0x1
 6202 09e5 50       		.byte	0x50
 6203 09e6 D0010000 		.4byte	.LVL20-.Ltext0
 6204 09ea D2010000 		.4byte	.LFE69-.Ltext0
 6205 09ee 0400     		.2byte	0x4
 6206 09f0 F3       		.byte	0xf3
 6207 09f1 01       		.uleb128 0x1
 6208 09f2 50       		.byte	0x50
 6209 09f3 9F       		.byte	0x9f
 6210 09f4 00000000 		.4byte	0
 6211 09f8 00000000 		.4byte	0
 6212              	.LLST5:
 6213 09fc FA000000 		.4byte	.LVL11-.Ltext0
 6214 0a00 74010000 		.4byte	.LVL16-.Ltext0
 6215 0a04 0100     		.2byte	0x1
 6216 0a06 51       		.byte	0x51
 6217 0a07 74010000 		.4byte	.LVL16-.Ltext0
 6218 0a0b 92010000 		.4byte	.LVL18-.Ltext0
 6219 0a0f 0400     		.2byte	0x4
 6220 0a11 F3       		.byte	0xf3
 6221 0a12 01       		.uleb128 0x1
 6222 0a13 51       		.byte	0x51
 6223 0a14 9F       		.byte	0x9f
 6224 0a15 92010000 		.4byte	.LVL18-.Ltext0
 6225 0a19 D2010000 		.4byte	.LFE69-.Ltext0
 6226 0a1d 0100     		.2byte	0x1
 6227 0a1f 51       		.byte	0x51
 6228 0a20 00000000 		.4byte	0
 6229 0a24 00000000 		.4byte	0
 6230              	.LLST6:
 6231 0a28 20010000 		.4byte	.LVL15-.Ltext0
 6232 0a2c 80010000 		.4byte	.LVL17-.Ltext0
 6233 0a30 0100     		.2byte	0x1
 6234 0a32 52       		.byte	0x52
 6235 0a33 80010000 		.4byte	.LVL17-.Ltext0
 6236 0a37 92010000 		.4byte	.LVL18-.Ltext0
 6237 0a3b 0400     		.2byte	0x4
 6238 0a3d 74       		.byte	0x74
 6239 0a3e 00       		.sleb128 0
 6240 0a3f 20       		.byte	0x20
 6241 0a40 9F       		.byte	0x9f
 6242 0a41 92010000 		.4byte	.LVL18-.Ltext0
 6243 0a45 C6010000 		.4byte	.LVL19-.Ltext0
 6244 0a49 0100     		.2byte	0x1
 6245 0a4b 52       		.byte	0x52
 6246 0a4c 00000000 		.4byte	0
 6247 0a50 00000000 		.4byte	0
 6248              	.LLST7:
 6249 0a54 FA000000 		.4byte	.LVL11-.Ltext0
 6250 0a58 0C010000 		.4byte	.LVL14-.Ltext0
 6251 0a5c 0200     		.2byte	0x2
 6252 0a5e 70       		.byte	0x70
 6253 0a5f 00       		.sleb128 0
 6254 0a60 0C010000 		.4byte	.LVL14-.Ltext0
 6255 0a64 C6010000 		.4byte	.LVL19-.Ltext0
 6256 0a68 0300     		.2byte	0x3
 6257 0a6a F3       		.byte	0xf3
ARM GAS  /tmp/ccDRaG8a.s 			page 175


 6258 0a6b 01       		.uleb128 0x1
 6259 0a6c 50       		.byte	0x50
 6260 0a6d C6010000 		.4byte	.LVL19-.Ltext0
 6261 0a71 D0010000 		.4byte	.LVL20-.Ltext0
 6262 0a75 0200     		.2byte	0x2
 6263 0a77 70       		.byte	0x70
 6264 0a78 00       		.sleb128 0
 6265 0a79 D0010000 		.4byte	.LVL20-.Ltext0
 6266 0a7d D2010000 		.4byte	.LFE69-.Ltext0
 6267 0a81 0300     		.2byte	0x3
 6268 0a83 F3       		.byte	0xf3
 6269 0a84 01       		.uleb128 0x1
 6270 0a85 50       		.byte	0x50
 6271 0a86 00000000 		.4byte	0
 6272 0a8a 00000000 		.4byte	0
 6273              	.LLST8:
 6274 0a8e FE000000 		.4byte	.LVL12-.Ltext0
 6275 0a92 02010000 		.4byte	.LVL13-.Ltext0
 6276 0a96 0100     		.2byte	0x1
 6277 0a98 53       		.byte	0x53
 6278 0a99 00000000 		.4byte	0
 6279 0a9d 00000000 		.4byte	0
 6280              	.LLST16:
 6281 0aa1 84020000 		.4byte	.LFB66-.Ltext0
 6282 0aa5 86020000 		.4byte	.LCFI4-.Ltext0
 6283 0aa9 0200     		.2byte	0x2
 6284 0aab 7D       		.byte	0x7d
 6285 0aac 00       		.sleb128 0
 6286 0aad 86020000 		.4byte	.LCFI4-.Ltext0
 6287 0ab1 AC020000 		.4byte	.LFE66-.Ltext0
 6288 0ab5 0200     		.2byte	0x2
 6289 0ab7 7D       		.byte	0x7d
 6290 0ab8 08       		.sleb128 8
 6291 0ab9 00000000 		.4byte	0
 6292 0abd 00000000 		.4byte	0
 6293              	.LLST17:
 6294 0ac1 84020000 		.4byte	.LVL36-.Ltext0
 6295 0ac5 8D020000 		.4byte	.LVL37-1-.Ltext0
 6296 0ac9 0100     		.2byte	0x1
 6297 0acb 50       		.byte	0x50
 6298 0acc 8D020000 		.4byte	.LVL37-1-.Ltext0
 6299 0ad0 A8020000 		.4byte	.LVL39-.Ltext0
 6300 0ad4 0100     		.2byte	0x1
 6301 0ad6 54       		.byte	0x54
 6302 0ad7 A8020000 		.4byte	.LVL39-.Ltext0
 6303 0adb AA020000 		.4byte	.LVL40-.Ltext0
 6304 0adf 0100     		.2byte	0x1
 6305 0ae1 50       		.byte	0x50
 6306 0ae2 AA020000 		.4byte	.LVL40-.Ltext0
 6307 0ae6 AC020000 		.4byte	.LFE66-.Ltext0
 6308 0aea 0100     		.2byte	0x1
 6309 0aec 54       		.byte	0x54
 6310 0aed 00000000 		.4byte	0
 6311 0af1 00000000 		.4byte	0
 6312              	.LLST0:
 6313 0af5 02000000 		.4byte	.LFB65-.Ltext0
 6314 0af9 04000000 		.4byte	.LCFI0-.Ltext0
ARM GAS  /tmp/ccDRaG8a.s 			page 176


 6315 0afd 0200     		.2byte	0x2
 6316 0aff 7D       		.byte	0x7d
 6317 0b00 00       		.sleb128 0
 6318 0b01 04000000 		.4byte	.LCFI0-.Ltext0
 6319 0b05 F8000000 		.4byte	.LFE65-.Ltext0
 6320 0b09 0200     		.2byte	0x2
 6321 0b0b 7D       		.byte	0x7d
 6322 0b0c 10       		.sleb128 16
 6323 0b0d 00000000 		.4byte	0
 6324 0b11 00000000 		.4byte	0
 6325              	.LLST1:
 6326 0b15 02000000 		.4byte	.LVL0-.Ltext0
 6327 0b19 13000000 		.4byte	.LVL1-1-.Ltext0
 6328 0b1d 0100     		.2byte	0x1
 6329 0b1f 50       		.byte	0x50
 6330 0b20 13000000 		.4byte	.LVL1-1-.Ltext0
 6331 0b24 F8000000 		.4byte	.LFE65-.Ltext0
 6332 0b28 0100     		.2byte	0x1
 6333 0b2a 54       		.byte	0x54
 6334 0b2b 00000000 		.4byte	0
 6335 0b2f 00000000 		.4byte	0
 6336              	.LLST2:
 6337 0b33 24000000 		.4byte	.LVL3-.Ltext0
 6338 0b37 E8000000 		.4byte	.LVL8-.Ltext0
 6339 0b3b 0100     		.2byte	0x1
 6340 0b3d 55       		.byte	0x55
 6341 0b3e EC000000 		.4byte	.LVL9-.Ltext0
 6342 0b42 F8000000 		.4byte	.LFE65-.Ltext0
 6343 0b46 0100     		.2byte	0x1
 6344 0b48 55       		.byte	0x55
 6345 0b49 00000000 		.4byte	0
 6346 0b4d 00000000 		.4byte	0
 6347              	.LLST12:
 6348 0b51 28020000 		.4byte	.LFB71-.Ltext0
 6349 0b55 2A020000 		.4byte	.LCFI3-.Ltext0
 6350 0b59 0200     		.2byte	0x2
 6351 0b5b 7D       		.byte	0x7d
 6352 0b5c 00       		.sleb128 0
 6353 0b5d 2A020000 		.4byte	.LCFI3-.Ltext0
 6354 0b61 84020000 		.4byte	.LFE71-.Ltext0
 6355 0b65 0200     		.2byte	0x2
 6356 0b67 7D       		.byte	0x7d
 6357 0b68 10       		.sleb128 16
 6358 0b69 00000000 		.4byte	0
 6359 0b6d 00000000 		.4byte	0
 6360              	.LLST13:
 6361 0b71 28020000 		.4byte	.LVL28-.Ltext0
 6362 0b75 41020000 		.4byte	.LVL29-1-.Ltext0
 6363 0b79 0100     		.2byte	0x1
 6364 0b7b 50       		.byte	0x50
 6365 0b7c 41020000 		.4byte	.LVL29-1-.Ltext0
 6366 0b80 7A020000 		.4byte	.LVL35-.Ltext0
 6367 0b84 0100     		.2byte	0x1
 6368 0b86 54       		.byte	0x54
 6369 0b87 7A020000 		.4byte	.LVL35-.Ltext0
 6370 0b8b 84020000 		.4byte	.LFE71-.Ltext0
 6371 0b8f 0100     		.2byte	0x1
ARM GAS  /tmp/ccDRaG8a.s 			page 177


 6372 0b91 50       		.byte	0x50
 6373 0b92 00000000 		.4byte	0
 6374 0b96 00000000 		.4byte	0
 6375              	.LLST14:
 6376 0b9a 44020000 		.4byte	.LVL30-.Ltext0
 6377 0b9e 76020000 		.4byte	.LVL34-.Ltext0
 6378 0ba2 0100     		.2byte	0x1
 6379 0ba4 55       		.byte	0x55
 6380 0ba5 00000000 		.4byte	0
 6381 0ba9 00000000 		.4byte	0
 6382              	.LLST15:
 6383 0bad 68020000 		.4byte	.LVL33-.Ltext0
 6384 0bb1 76020000 		.4byte	.LVL34-.Ltext0
 6385 0bb5 0100     		.2byte	0x1
 6386 0bb7 54       		.byte	0x54
 6387 0bb8 00000000 		.4byte	0
 6388 0bbc 00000000 		.4byte	0
 6389              		.section	.debug_aranges,"",%progbits
 6390 0000 1C000000 		.4byte	0x1c
 6391 0004 0200     		.2byte	0x2
 6392 0006 00000000 		.4byte	.Ldebug_info0
 6393 000a 04       		.byte	0x4
 6394 000b 00       		.byte	0
 6395 000c 0000     		.2byte	0
 6396 000e 0000     		.2byte	0
 6397 0010 00000000 		.4byte	.Ltext0
 6398 0014 36080000 		.4byte	.Letext0-.Ltext0
 6399 0018 00000000 		.4byte	0
 6400 001c 00000000 		.4byte	0
 6401              		.section	.debug_line,"",%progbits
 6402              	.Ldebug_line0:
 6403 0000 38040000 		.section	.debug_str,"MS",%progbits,1
 6403      02004401 
 6403      00000201 
 6403      FB0E0D00 
 6403      01010101 
 6404              	.LASF151:
 6405 0000 636F756E 		.ascii	"count\000"
 6405      7400
 6406              	.LASF54:
 6407 0006 48414C5F 		.ascii	"HAL_CAN_STATE_RESET\000"
 6407      43414E5F 
 6407      53544154 
 6407      455F5245 
 6407      53455400 
 6408              	.LASF106:
 6409 001a 48414C5F 		.ascii	"HAL_CAN_GetError\000"
 6409      43414E5F 
 6409      47657445 
 6409      72726F72 
 6409      00
 6410              	.LASF100:
 6411 002b 48414C5F 		.ascii	"HAL_TickFreqTypeDef\000"
 6411      5469636B 
 6411      46726571 
 6411      54797065 
 6411      44656600 
ARM GAS  /tmp/ccDRaG8a.s 			page 178


 6412              	.LASF32:
 6413 003f 7354784D 		.ascii	"sTxMailBox\000"
 6413      61696C42 
 6413      6F7800
 6414              	.LASF136:
 6415 004a 70486561 		.ascii	"pHeader\000"
 6415      64657200 
 6416              	.LASF0:
 6417 0052 7369676E 		.ascii	"signed char\000"
 6417      65642063 
 6417      68617200 
 6418              	.LASF4:
 6419 005e 5F5F7569 		.ascii	"__uint8_t\000"
 6419      6E74385F 
 6419      7400
 6420              	.LASF51:
 6421 0068 48414C5F 		.ascii	"HAL_BUSY\000"
 6421      42555359 
 6421      00
 6422              	.LASF147:
 6423 0071 48414C5F 		.ascii	"HAL_CAN_AddTxMessage\000"
 6423      43414E5F 
 6423      41646454 
 6423      784D6573 
 6423      73616765 
 6424              	.LASF66:
 6425 0086 54696D65 		.ascii	"TimeTriggeredMode\000"
 6425      54726967 
 6425      67657265 
 6425      644D6F64 
 6425      6500
 6426              	.LASF24:
 6427 0098 52445452 		.ascii	"RDTR\000"
 6427      00
 6428              	.LASF45:
 6429 009d 44495341 		.ascii	"DISABLE\000"
 6429      424C4500 
 6430              	.LASF10:
 6431 00a5 6C6F6E67 		.ascii	"long long unsigned int\000"
 6431      206C6F6E 
 6431      6720756E 
 6431      7369676E 
 6431      65642069 
 6432              	.LASF107:
 6433 00bc 6863616E 		.ascii	"hcan\000"
 6433      00
 6434              	.LASF167:
 6435 00c1 7372632F 		.ascii	"src/stm32f1xx_hal_can.c\000"
 6435      73746D33 
 6435      32663178 
 6435      785F6861 
 6435      6C5F6361 
 6436              	.LASF135:
 6437 00d9 48414C5F 		.ascii	"HAL_CAN_GetRxMessage\000"
 6437      43414E5F 
 6437      47657452 
 6437      784D6573 
ARM GAS  /tmp/ccDRaG8a.s 			page 179


 6437      73616765 
 6438              	.LASF16:
 6439 00ee 49544D5F 		.ascii	"ITM_RxBuffer\000"
 6439      52784275 
 6439      66666572 
 6439      00
 6440              	.LASF160:
 6441 00fb 48414C5F 		.ascii	"HAL_CAN_MspDeInit\000"
 6441      43414E5F 
 6441      4D737044 
 6441      65496E69 
 6441      7400
 6442              	.LASF140:
 6443 010d 74696D65 		.ascii	"timestamp\000"
 6443      7374616D 
 6443      7000
 6444              	.LASF22:
 6445 0117 54444852 		.ascii	"TDHR\000"
 6445      00
 6446              	.LASF55:
 6447 011c 48414C5F 		.ascii	"HAL_CAN_STATE_READY\000"
 6447      43414E5F 
 6447      53544154 
 6447      455F5245 
 6447      41445900 
 6448              	.LASF9:
 6449 0130 6C6F6E67 		.ascii	"long long int\000"
 6449      206C6F6E 
 6449      6720696E 
 6449      7400
 6450              	.LASF79:
 6451 013e 46696C74 		.ascii	"FilterMode\000"
 6451      65724D6F 
 6451      646500
 6452              	.LASF68:
 6453 0149 4175746F 		.ascii	"AutoWakeUp\000"
 6453      57616B65 
 6453      557000
 6454              	.LASF130:
 6455 0154 48414C5F 		.ascii	"HAL_CAN_ActivateNotification\000"
 6455      43414E5F 
 6455      41637469 
 6455      76617465 
 6455      4E6F7469 
 6456              	.LASF69:
 6457 0171 4175746F 		.ascii	"AutoRetransmission\000"
 6457      52657472 
 6457      616E736D 
 6457      69737369 
 6457      6F6E00
 6458              	.LASF104:
 6459 0184 73746174 		.ascii	"state\000"
 6459      6500
 6460              	.LASF21:
 6461 018a 54444C52 		.ascii	"TDLR\000"
 6461      00
 6462              	.LASF6:
ARM GAS  /tmp/ccDRaG8a.s 			page 180


 6463 018f 6C6F6E67 		.ascii	"long int\000"
 6463      20696E74 
 6463      00
 6464              	.LASF57:
 6465 0198 48414C5F 		.ascii	"HAL_CAN_STATE_SLEEP_PENDING\000"
 6465      43414E5F 
 6465      53544154 
 6465      455F534C 
 6465      4545505F 
 6466              	.LASF75:
 6467 01b4 46696C74 		.ascii	"FilterMaskIdHigh\000"
 6467      65724D61 
 6467      736B4964 
 6467      48696768 
 6467      00
 6468              	.LASF23:
 6469 01c5 43414E5F 		.ascii	"CAN_TxMailBox_TypeDef\000"
 6469      54784D61 
 6469      696C426F 
 6469      785F5479 
 6469      70654465 
 6470              	.LASF63:
 6471 01db 53796E63 		.ascii	"SyncJumpWidth\000"
 6471      4A756D70 
 6471      57696474 
 6471      6800
 6472              	.LASF78:
 6473 01e9 46696C74 		.ascii	"FilterBank\000"
 6473      65724261 
 6473      6E6B00
 6474              	.LASF46:
 6475 01f4 454E4142 		.ascii	"ENABLE\000"
 6475      4C4500
 6476              	.LASF129:
 6477 01fb 496E6163 		.ascii	"InactiveITs\000"
 6477      74697665 
 6477      49547300 
 6478              	.LASF2:
 6479 0207 73686F72 		.ascii	"short int\000"
 6479      7420696E 
 6479      7400
 6480              	.LASF44:
 6481 0211 43414E5F 		.ascii	"CAN_TypeDef\000"
 6481      54797065 
 6481      44656600 
 6482              	.LASF108:
 6483 021d 48414C5F 		.ascii	"HAL_CAN_GetState\000"
 6483      43414E5F 
 6483      47657453 
 6483      74617465 
 6483      00
 6484              	.LASF96:
 6485 022e 48414C5F 		.ascii	"HAL_TICK_FREQ_10HZ\000"
 6485      5449434B 
 6485      5F465245 
 6485      515F3130 
 6485      485A00
ARM GAS  /tmp/ccDRaG8a.s 			page 181


 6486              	.LASF93:
 6487 0241 53746174 		.ascii	"State\000"
 6487      6500
 6488              	.LASF163:
 6489 0247 48414C5F 		.ascii	"HAL_CAN_Init\000"
 6489      43414E5F 
 6489      496E6974 
 6489      00
 6490              	.LASF173:
 6491 0254 5F5F5242 		.ascii	"__RBIT\000"
 6491      495400
 6492              	.LASF29:
 6493 025b 52463052 		.ascii	"RF0R\000"
 6493      00
 6494              	.LASF161:
 6495 0260 48414C5F 		.ascii	"HAL_CAN_MspInit\000"
 6495      43414E5F 
 6495      4D737049 
 6495      6E697400 
 6496              	.LASF169:
 6497 0270 5F5F4341 		.ascii	"__CAN_HandleTypeDef\000"
 6497      4E5F4861 
 6497      6E646C65 
 6497      54797065 
 6497      44656600 
 6498              	.LASF123:
 6499 0284 6D737266 		.ascii	"msrflags\000"
 6499      6C616773 
 6499      00
 6500              	.LASF109:
 6501 028d 48414C5F 		.ascii	"HAL_CAN_WakeUpFromRxMsgCallback\000"
 6501      43414E5F 
 6501      57616B65 
 6501      55704672 
 6501      6F6D5278 
 6502              	.LASF7:
 6503 02ad 5F5F7569 		.ascii	"__uint32_t\000"
 6503      6E743332 
 6503      5F7400
 6504              	.LASF62:
 6505 02b8 4D6F6465 		.ascii	"Mode\000"
 6505      00
 6506              	.LASF19:
 6507 02bd 41504250 		.ascii	"APBPrescTable\000"
 6507      72657363 
 6507      5461626C 
 6507      6500
 6508              	.LASF20:
 6509 02cb 54445452 		.ascii	"TDTR\000"
 6509      00
 6510              	.LASF131:
 6511 02d0 41637469 		.ascii	"ActiveITs\000"
 6511      76654954 
 6511      7300
 6512              	.LASF164:
 6513 02da 76616C75 		.ascii	"value\000"
 6513      6500
ARM GAS  /tmp/ccDRaG8a.s 			page 182


 6514              	.LASF52:
 6515 02e0 48414C5F 		.ascii	"HAL_TIMEOUT\000"
 6515      54494D45 
 6515      4F555400 
 6516              	.LASF120:
 6517 02ec 48414C5F 		.ascii	"HAL_CAN_TxMailbox0CompleteCallback\000"
 6517      43414E5F 
 6517      54784D61 
 6517      696C626F 
 6517      7830436F 
 6518              	.LASF133:
 6519 030f 52784669 		.ascii	"RxFifo\000"
 6519      666F00
 6520              	.LASF122:
 6521 0316 696E7465 		.ascii	"interrupts\000"
 6521      72727570 
 6521      747300
 6522              	.LASF17:
 6523 0321 53797374 		.ascii	"SystemCoreClock\000"
 6523      656D436F 
 6523      7265436C 
 6523      6F636B00 
 6524              	.LASF102:
 6525 0331 75775469 		.ascii	"uwTickFreq\000"
 6525      636B4672 
 6525      657100
 6526              	.LASF88:
 6527 033c 54696D65 		.ascii	"Timestamp\000"
 6527      7374616D 
 6527      7000
 6528              	.LASF138:
 6529 0346 48414C5F 		.ascii	"HAL_CAN_GetTxTimestamp\000"
 6529      43414E5F 
 6529      47657454 
 6529      7854696D 
 6529      65737461 
 6530              	.LASF8:
 6531 035d 6C6F6E67 		.ascii	"long unsigned int\000"
 6531      20756E73 
 6531      69676E65 
 6531      6420696E 
 6531      7400
 6532              	.LASF126:
 6533 036f 72663172 		.ascii	"rf1rflags\000"
 6533      666C6167 
 6533      7300
 6534              	.LASF152:
 6535 0379 74696D65 		.ascii	"timeout\000"
 6535      6F757400 
 6536              	.LASF98:
 6537 0381 48414C5F 		.ascii	"HAL_TICK_FREQ_1KHZ\000"
 6537      5449434B 
 6537      5F465245 
 6537      515F314B 
 6537      485A00
 6538              	.LASF37:
 6539 0394 46533152 		.ascii	"FS1R\000"
ARM GAS  /tmp/ccDRaG8a.s 			page 183


 6539      00
 6540              	.LASF49:
 6541 0399 48414C5F 		.ascii	"HAL_OK\000"
 6541      4F4B00
 6542              	.LASF134:
 6543 03a0 66696C6C 		.ascii	"filllevel\000"
 6543      6C657665 
 6543      6C00
 6544              	.LASF82:
 6545 03aa 536C6176 		.ascii	"SlaveStartFilterBank\000"
 6545      65537461 
 6545      72744669 
 6545      6C746572 
 6545      42616E6B 
 6546              	.LASF67:
 6547 03bf 4175746F 		.ascii	"AutoBusOff\000"
 6547      4275734F 
 6547      666600
 6548              	.LASF127:
 6549 03ca 65737266 		.ascii	"esrflags\000"
 6549      6C616773 
 6549      00
 6550              	.LASF30:
 6551 03d3 52463152 		.ascii	"RF1R\000"
 6551      00
 6552              	.LASF149:
 6553 03d8 48414C5F 		.ascii	"HAL_CAN_IsSleepActive\000"
 6553      43414E5F 
 6553      4973536C 
 6553      65657041 
 6553      63746976 
 6554              	.LASF28:
 6555 03ee 43414E5F 		.ascii	"CAN_FilterRegister_TypeDef\000"
 6555      46696C74 
 6555      65725265 
 6555      67697374 
 6555      65725F54 
 6556              	.LASF94:
 6557 0409 4572726F 		.ascii	"ErrorCode\000"
 6557      72436F64 
 6557      6500
 6558              	.LASF85:
 6559 0413 45787449 		.ascii	"ExtId\000"
 6559      6400
 6560              	.LASF53:
 6561 0419 48414C5F 		.ascii	"HAL_StatusTypeDef\000"
 6561      53746174 
 6561      75735479 
 6561      70654465 
 6561      6600
 6562              	.LASF43:
 6563 042b 7346696C 		.ascii	"sFilterRegister\000"
 6563      74657252 
 6563      65676973 
 6563      74657200 
 6564              	.LASF144:
 6565 043b 48414C5F 		.ascii	"HAL_CAN_GetTxMailboxesFreeLevel\000"
ARM GAS  /tmp/ccDRaG8a.s 			page 184


 6565      43414E5F 
 6565      47657454 
 6565      784D6169 
 6565      6C626F78 
 6566              	.LASF35:
 6567 045b 464D3152 		.ascii	"FM1R\000"
 6567      00
 6568              	.LASF124:
 6569 0460 74737266 		.ascii	"tsrflags\000"
 6569      6C616773 
 6569      00
 6570              	.LASF90:
 6571 0469 43414E5F 		.ascii	"CAN_RxHeaderTypeDef\000"
 6571      52784865 
 6571      61646572 
 6571      54797065 
 6571      44656600 
 6572              	.LASF81:
 6573 047d 46696C74 		.ascii	"FilterActivation\000"
 6573      65724163 
 6573      74697661 
 6573      74696F6E 
 6573      00
 6574              	.LASF143:
 6575 048e 54784D61 		.ascii	"TxMailboxes\000"
 6575      696C626F 
 6575      78657300 
 6576              	.LASF15:
 6577 049a 73697A65 		.ascii	"sizetype\000"
 6577      74797065 
 6577      00
 6578              	.LASF174:
 6579 04a3 48414C5F 		.ascii	"HAL_GetTick\000"
 6579      47657454 
 6579      69636B00 
 6580              	.LASF153:
 6581 04af 48414C5F 		.ascii	"HAL_CAN_RequestSleep\000"
 6581      43414E5F 
 6581      52657175 
 6581      65737453 
 6581      6C656570 
 6582              	.LASF113:
 6583 04c4 48414C5F 		.ascii	"HAL_CAN_RxFifo0FullCallback\000"
 6583      43414E5F 
 6583      52784669 
 6583      666F3046 
 6583      756C6C43 
 6584              	.LASF71:
 6585 04e0 5472616E 		.ascii	"TransmitFifoPriority\000"
 6585      736D6974 
 6585      4669666F 
 6585      5072696F 
 6585      72697479 
 6586              	.LASF91:
 6587 04f5 496E7374 		.ascii	"Instance\000"
 6587      616E6365 
 6587      00
ARM GAS  /tmp/ccDRaG8a.s 			page 185


 6588              	.LASF125:
 6589 04fe 72663072 		.ascii	"rf0rflags\000"
 6589      666C6167 
 6589      7300
 6590              	.LASF86:
 6591 0508 5472616E 		.ascii	"TransmitGlobalTime\000"
 6591      736D6974 
 6591      476C6F62 
 6591      616C5469 
 6591      6D6500
 6592              	.LASF47:
 6593 051b 46756E63 		.ascii	"FunctionalState\000"
 6593      74696F6E 
 6593      616C5374 
 6593      61746500 
 6594              	.LASF70:
 6595 052b 52656365 		.ascii	"ReceiveFifoLocked\000"
 6595      69766546 
 6595      69666F4C 
 6595      6F636B65 
 6595      6400
 6596              	.LASF146:
 6597 053d 48414C5F 		.ascii	"HAL_CAN_AbortTxRequest\000"
 6597      43414E5F 
 6597      41626F72 
 6597      74547852 
 6597      65717565 
 6598              	.LASF84:
 6599 0554 53746449 		.ascii	"StdId\000"
 6599      6400
 6600              	.LASF99:
 6601 055a 48414C5F 		.ascii	"HAL_TICK_FREQ_DEFAULT\000"
 6601      5449434B 
 6601      5F465245 
 6601      515F4445 
 6601      4641554C 
 6602              	.LASF39:
 6603 0570 46464131 		.ascii	"FFA1R\000"
 6603      5200
 6604              	.LASF145:
 6605 0576 66726565 		.ascii	"freelevel\000"
 6605      6C657665 
 6605      6C00
 6606              	.LASF92:
 6607 0580 496E6974 		.ascii	"Init\000"
 6607      00
 6608              	.LASF77:
 6609 0585 46696C74 		.ascii	"FilterFIFOAssignment\000"
 6609      65724649 
 6609      464F4173 
 6609      7369676E 
 6609      6D656E74 
 6610              	.LASF58:
 6611 059a 48414C5F 		.ascii	"HAL_CAN_STATE_SLEEP_ACTIVE\000"
 6611      43414E5F 
 6611      53544154 
 6611      455F534C 
ARM GAS  /tmp/ccDRaG8a.s 			page 186


 6611      4545505F 
 6612              	.LASF115:
 6613 05b5 48414C5F 		.ascii	"HAL_CAN_TxMailbox2AbortCallback\000"
 6613      43414E5F 
 6613      54784D61 
 6613      696C626F 
 6613      78324162 
 6614              	.LASF31:
 6615 05d5 52455345 		.ascii	"RESERVED0\000"
 6615      52564544 
 6615      3000
 6616              	.LASF34:
 6617 05df 52455345 		.ascii	"RESERVED1\000"
 6617      52564544 
 6617      3100
 6618              	.LASF36:
 6619 05e9 52455345 		.ascii	"RESERVED2\000"
 6619      52564544 
 6619      3200
 6620              	.LASF38:
 6621 05f3 52455345 		.ascii	"RESERVED3\000"
 6621      52564544 
 6621      3300
 6622              	.LASF40:
 6623 05fd 52455345 		.ascii	"RESERVED4\000"
 6623      52564544 
 6623      3400
 6624              	.LASF41:
 6625 0607 46413152 		.ascii	"FA1R\000"
 6625      00
 6626              	.LASF114:
 6627 060c 48414C5F 		.ascii	"HAL_CAN_RxFifo0MsgPendingCallback\000"
 6627      43414E5F 
 6627      52784669 
 6627      666F304D 
 6627      73675065 
 6628              	.LASF157:
 6629 062e 7346696C 		.ascii	"sFilterConfig\000"
 6629      74657243 
 6629      6F6E6669 
 6629      6700
 6630              	.LASF89:
 6631 063c 46696C74 		.ascii	"FilterMatchIndex\000"
 6631      65724D61 
 6631      74636849 
 6631      6E646578 
 6631      00
 6632              	.LASF13:
 6633 064d 696E7433 		.ascii	"int32_t\000"
 6633      325F7400 
 6634              	.LASF1:
 6635 0655 756E7369 		.ascii	"unsigned char\000"
 6635      676E6564 
 6635      20636861 
 6635      7200
 6636              	.LASF159:
 6637 0663 63616E5F 		.ascii	"can_ip\000"
ARM GAS  /tmp/ccDRaG8a.s 			page 187


 6637      697000
 6638              	.LASF76:
 6639 066a 46696C74 		.ascii	"FilterMaskIdLow\000"
 6639      65724D61 
 6639      736B4964 
 6639      4C6F7700 
 6640              	.LASF87:
 6641 067a 43414E5F 		.ascii	"CAN_TxHeaderTypeDef\000"
 6641      54784865 
 6641      61646572 
 6641      54797065 
 6641      44656600 
 6642              	.LASF111:
 6643 068e 48414C5F 		.ascii	"HAL_CAN_RxFifo1FullCallback\000"
 6643      43414E5F 
 6643      52784669 
 6643      666F3146 
 6643      756C6C43 
 6644              	.LASF150:
 6645 06aa 48414C5F 		.ascii	"HAL_CAN_WakeUp\000"
 6645      43414E5F 
 6645      57616B65 
 6645      557000
 6646              	.LASF121:
 6647 06b9 6572726F 		.ascii	"errorcode\000"
 6647      72636F64 
 6647      6500
 6648              	.LASF155:
 6649 06c3 7469636B 		.ascii	"tickstart\000"
 6649      73746172 
 6649      7400
 6650              	.LASF95:
 6651 06cd 43414E5F 		.ascii	"CAN_HandleTypeDef\000"
 6651      48616E64 
 6651      6C655479 
 6651      70654465 
 6651      6600
 6652              	.LASF170:
 6653 06df 48414C5F 		.ascii	"HAL_CAN_ErrorCallback\000"
 6653      43414E5F 
 6653      4572726F 
 6653      7243616C 
 6653      6C626163 
 6654              	.LASF166:
 6655 06f5 474E5520 		.ascii	"GNU C11 6.3.1 20170620 -mcpu=cortex-m3 -mthumb -g -"
 6655      43313120 
 6655      362E332E 
 6655      31203230 
 6655      31373036 
 6656 0728 67647761 		.ascii	"gdwarf-2 -Os -fomit-frame-pointer\000"
 6656      72662D32 
 6656      202D4F73 
 6656      202D666F 
 6656      6D69742D 
 6657              	.LASF110:
 6658 074a 48414C5F 		.ascii	"HAL_CAN_SleepCallback\000"
 6658      43414E5F 
ARM GAS  /tmp/ccDRaG8a.s 			page 188


 6658      536C6565 
 6658      7043616C 
 6658      6C626163 
 6659              	.LASF168:
 6660 0760 2F686F6D 		.ascii	"/home/berndoj/git/stm32tctst/lib/stm32f1hal\000"
 6660      652F6265 
 6660      726E646F 
 6660      6A2F6769 
 6660      742F7374 
 6661              	.LASF72:
 6662 078c 43414E5F 		.ascii	"CAN_InitTypeDef\000"
 6662      496E6974 
 6662      54797065 
 6662      44656600 
 6663              	.LASF162:
 6664 079c 48414C5F 		.ascii	"HAL_CAN_DeInit\000"
 6664      43414E5F 
 6664      4465496E 
 6664      697400
 6665              	.LASF56:
 6666 07ab 48414C5F 		.ascii	"HAL_CAN_STATE_LISTENING\000"
 6666      43414E5F 
 6666      53544154 
 6666      455F4C49 
 6666      5354454E 
 6667              	.LASF42:
 6668 07c3 52455345 		.ascii	"RESERVED5\000"
 6668      52564544 
 6668      3500
 6669              	.LASF132:
 6670 07cd 48414C5F 		.ascii	"HAL_CAN_GetRxFifoFillLevel\000"
 6670      43414E5F 
 6670      47657452 
 6670      78466966 
 6670      6F46696C 
 6671              	.LASF14:
 6672 07e8 75696E74 		.ascii	"uint32_t\000"
 6672      33325F74 
 6672      00
 6673              	.LASF50:
 6674 07f1 48414C5F 		.ascii	"HAL_ERROR\000"
 6674      4552524F 
 6674      5200
 6675              	.LASF158:
 6676 07fb 66696C74 		.ascii	"filternbrbitpos\000"
 6676      65726E62 
 6676      72626974 
 6676      706F7300 
 6677              	.LASF48:
 6678 080b 6C6F6E67 		.ascii	"long double\000"
 6678      20646F75 
 6678      626C6500 
 6679              	.LASF116:
 6680 0817 48414C5F 		.ascii	"HAL_CAN_TxMailbox1AbortCallback\000"
 6680      43414E5F 
 6680      54784D61 
 6680      696C626F 
ARM GAS  /tmp/ccDRaG8a.s 			page 189


 6680      78314162 
 6681              	.LASF101:
 6682 0837 75775469 		.ascii	"uwTickPrio\000"
 6682      636B5072 
 6682      696F00
 6683              	.LASF11:
 6684 0842 756E7369 		.ascii	"unsigned int\000"
 6684      676E6564 
 6684      20696E74 
 6684      00
 6685              	.LASF128:
 6686 084f 48414C5F 		.ascii	"HAL_CAN_DeactivateNotification\000"
 6686      43414E5F 
 6686      44656163 
 6686      74697661 
 6686      74654E6F 
 6687              	.LASF74:
 6688 086e 46696C74 		.ascii	"FilterIdLow\000"
 6688      65724964 
 6688      4C6F7700 
 6689              	.LASF97:
 6690 087a 48414C5F 		.ascii	"HAL_TICK_FREQ_100HZ\000"
 6690      5449434B 
 6690      5F465245 
 6690      515F3130 
 6690      30485A00 
 6691              	.LASF5:
 6692 088e 5F5F696E 		.ascii	"__int32_t\000"
 6692      7433325F 
 6692      7400
 6693              	.LASF18:
 6694 0898 41484250 		.ascii	"AHBPrescTable\000"
 6694      72657363 
 6694      5461626C 
 6694      6500
 6695              	.LASF33:
 6696 08a6 73464946 		.ascii	"sFIFOMailBox\000"
 6696      4F4D6169 
 6696      6C426F78 
 6696      00
 6697              	.LASF60:
 6698 08b3 48414C5F 		.ascii	"HAL_CAN_StateTypeDef\000"
 6698      43414E5F 
 6698      53746174 
 6698      65547970 
 6698      65446566 
 6699              	.LASF171:
 6700 08c8 48414C5F 		.ascii	"HAL_CAN_IRQHandler\000"
 6700      43414E5F 
 6700      49525148 
 6700      616E646C 
 6700      657200
 6701              	.LASF61:
 6702 08db 50726573 		.ascii	"Prescaler\000"
 6702      63616C65 
 6702      7200
 6703              	.LASF3:
ARM GAS  /tmp/ccDRaG8a.s 			page 190


 6704 08e5 73686F72 		.ascii	"short unsigned int\000"
 6704      7420756E 
 6704      7369676E 
 6704      65642069 
 6704      6E7400
 6705              	.LASF64:
 6706 08f8 54696D65 		.ascii	"TimeSeg1\000"
 6706      53656731 
 6706      00
 6707              	.LASF65:
 6708 0901 54696D65 		.ascii	"TimeSeg2\000"
 6708      53656732 
 6708      00
 6709              	.LASF137:
 6710 090a 61446174 		.ascii	"aData\000"
 6710      6100
 6711              	.LASF142:
 6712 0910 48414C5F 		.ascii	"HAL_CAN_IsTxMessagePending\000"
 6712      43414E5F 
 6712      49735478 
 6712      4D657373 
 6712      61676550 
 6713              	.LASF172:
 6714 092b 48414C5F 		.ascii	"HAL_CAN_Stop\000"
 6714      43414E5F 
 6714      53746F70 
 6714      00
 6715              	.LASF103:
 6716 0938 73746174 		.ascii	"status\000"
 6716      757300
 6717              	.LASF112:
 6718 093f 48414C5F 		.ascii	"HAL_CAN_RxFifo1MsgPendingCallback\000"
 6718      43414E5F 
 6718      52784669 
 6718      666F314D 
 6718      73675065 
 6719              	.LASF27:
 6720 0961 43414E5F 		.ascii	"CAN_FIFOMailBox_TypeDef\000"
 6720      4649464F 
 6720      4D61696C 
 6720      426F785F 
 6720      54797065 
 6721              	.LASF105:
 6722 0979 48414C5F 		.ascii	"HAL_CAN_ResetError\000"
 6722      43414E5F 
 6722      52657365 
 6722      74457272 
 6722      6F7200
 6723              	.LASF59:
 6724 098c 48414C5F 		.ascii	"HAL_CAN_STATE_ERROR\000"
 6724      43414E5F 
 6724      53544154 
 6724      455F4552 
 6724      524F5200 
 6725              	.LASF12:
 6726 09a0 75696E74 		.ascii	"uint8_t\000"
 6726      385F7400 
ARM GAS  /tmp/ccDRaG8a.s 			page 191


 6727              	.LASF83:
 6728 09a8 43414E5F 		.ascii	"CAN_FilterTypeDef\000"
 6728      46696C74 
 6728      65725479 
 6728      70654465 
 6728      6600
 6729              	.LASF154:
 6730 09ba 48414C5F 		.ascii	"HAL_CAN_Start\000"
 6730      43414E5F 
 6730      53746172 
 6730      7400
 6731              	.LASF117:
 6732 09c8 48414C5F 		.ascii	"HAL_CAN_TxMailbox0AbortCallback\000"
 6732      43414E5F 
 6732      54784D61 
 6732      696C626F 
 6732      78304162 
 6733              	.LASF26:
 6734 09e8 52444852 		.ascii	"RDHR\000"
 6734      00
 6735              	.LASF148:
 6736 09ed 7054784D 		.ascii	"pTxMailbox\000"
 6736      61696C62 
 6736      6F7800
 6737              	.LASF139:
 6738 09f8 54784D61 		.ascii	"TxMailbox\000"
 6738      696C626F 
 6738      7800
 6739              	.LASF80:
 6740 0a02 46696C74 		.ascii	"FilterScale\000"
 6740      65725363 
 6740      616C6500 
 6741              	.LASF118:
 6742 0a0e 48414C5F 		.ascii	"HAL_CAN_TxMailbox2CompleteCallback\000"
 6742      43414E5F 
 6742      54784D61 
 6742      696C626F 
 6742      7832436F 
 6743              	.LASF141:
 6744 0a31 7472616E 		.ascii	"transmitmailbox\000"
 6744      736D6974 
 6744      6D61696C 
 6744      626F7800 
 6745              	.LASF25:
 6746 0a41 52444C52 		.ascii	"RDLR\000"
 6746      00
 6747              	.LASF165:
 6748 0a46 72657375 		.ascii	"result\000"
 6748      6C7400
 6749              	.LASF73:
 6750 0a4d 46696C74 		.ascii	"FilterIdHigh\000"
 6750      65724964 
 6750      48696768 
 6750      00
 6751              	.LASF156:
 6752 0a5a 48414C5F 		.ascii	"HAL_CAN_ConfigFilter\000"
 6752      43414E5F 
ARM GAS  /tmp/ccDRaG8a.s 			page 192


 6752      436F6E66 
 6752      69674669 
 6752      6C746572 
 6753              	.LASF119:
 6754 0a6f 48414C5F 		.ascii	"HAL_CAN_TxMailbox1CompleteCallback\000"
 6754      43414E5F 
 6754      54784D61 
 6754      696C626F 
 6754      7831436F 
 6755              		.ident	"GCC: (15:6.3.1+svn253039-1build1) 6.3.1 20170620"
ARM GAS  /tmp/ccDRaG8a.s 			page 193


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_can.c
     /tmp/ccDRaG8a.s:69     .text:0000000000000000 $t
     /tmp/ccDRaG8a.s:76     .text:0000000000000000 HAL_CAN_MspInit
     /tmp/ccDRaG8a.s:93     .text:0000000000000002 HAL_CAN_Init
     /tmp/ccDRaG8a.s:275    .text:00000000000000f8 HAL_CAN_MspDeInit
     /tmp/ccDRaG8a.s:292    .text:00000000000000fa HAL_CAN_ConfigFilter
     /tmp/ccDRaG8a.s:454    .text:00000000000001d2 HAL_CAN_Start
     /tmp/ccDRaG8a.s:538    .text:0000000000000228 HAL_CAN_Stop
     /tmp/ccDRaG8a.s:630    .text:0000000000000284 HAL_CAN_DeInit
     /tmp/ccDRaG8a.s:682    .text:00000000000002ac HAL_CAN_RequestSleep
     /tmp/ccDRaG8a.s:730    .text:00000000000002d0 HAL_CAN_WakeUp
     /tmp/ccDRaG8a.s:810    .text:000000000000031c $d
     /tmp/ccDRaG8a.s:814    .text:0000000000000320 $t
     /tmp/ccDRaG8a.s:821    .text:0000000000000320 HAL_CAN_IsSleepActive
     /tmp/ccDRaG8a.s:856    .text:0000000000000336 HAL_CAN_AddTxMessage
     /tmp/ccDRaG8a.s:996    .text:00000000000003d2 HAL_CAN_AbortTxRequest
     /tmp/ccDRaG8a.s:1063   .text:000000000000041c HAL_CAN_GetTxMailboxesFreeLevel
     /tmp/ccDRaG8a.s:1121   .text:0000000000000444 HAL_CAN_IsTxMessagePending
     /tmp/ccDRaG8a.s:1164   .text:0000000000000464 HAL_CAN_GetTxTimestamp
     /tmp/ccDRaG8a.s:1225   .text:0000000000000488 HAL_CAN_GetRxMessage
     /tmp/ccDRaG8a.s:1401   .text:0000000000000574 HAL_CAN_GetRxFifoFillLevel
     /tmp/ccDRaG8a.s:1450   .text:0000000000000592 HAL_CAN_ActivateNotification
     /tmp/ccDRaG8a.s:1499   .text:00000000000005b4 HAL_CAN_DeactivateNotification
     /tmp/ccDRaG8a.s:1548   .text:00000000000005d8 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccDRaG8a.s:1565   .text:00000000000005da HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccDRaG8a.s:1582   .text:00000000000005dc HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccDRaG8a.s:1599   .text:00000000000005de HAL_CAN_TxMailbox0AbortCallback
     /tmp/ccDRaG8a.s:1616   .text:00000000000005e0 HAL_CAN_TxMailbox1AbortCallback
     /tmp/ccDRaG8a.s:1633   .text:00000000000005e2 HAL_CAN_TxMailbox2AbortCallback
     /tmp/ccDRaG8a.s:1650   .text:00000000000005e4 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccDRaG8a.s:1667   .text:00000000000005e6 HAL_CAN_RxFifo0FullCallback
     /tmp/ccDRaG8a.s:1684   .text:00000000000005e8 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/ccDRaG8a.s:1701   .text:00000000000005ea HAL_CAN_RxFifo1FullCallback
     /tmp/ccDRaG8a.s:1718   .text:00000000000005ec HAL_CAN_SleepCallback
     /tmp/ccDRaG8a.s:1735   .text:00000000000005ee HAL_CAN_WakeUpFromRxMsgCallback
     /tmp/ccDRaG8a.s:1752   .text:00000000000005f0 HAL_CAN_ErrorCallback
     /tmp/ccDRaG8a.s:1771   .text:00000000000005f2 HAL_CAN_IRQHandler
     /tmp/ccDRaG8a.s:2191   .text:00000000000007ee HAL_CAN_GetState
     /tmp/ccDRaG8a.s:2240   .text:0000000000000814 HAL_CAN_GetError
     /tmp/ccDRaG8a.s:2263   .text:0000000000000818 HAL_CAN_ResetError
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
