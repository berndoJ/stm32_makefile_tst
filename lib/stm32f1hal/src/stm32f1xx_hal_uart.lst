ARM GAS  /tmp/ccPoddoo.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"stm32f1xx_hal_uart.c"
  12              	@ GNU C11 (15:6.3.1+svn253039-1build1) version 6.3.1 20170620 (arm-none-eabi)
  13              	@	compiled by GNU C version 7.2.0, GMP version 6.1.2, MPFR version 4.0.1-rc1, MPC version 1.1.0, is
  14              	@ warning: MPFR header version 4.0.1-rc1 differs from library version 4.0.1.
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I ./inc -I ./inc/Legacy -I ../cmsisstm32f1xx/inc
  17              	@ -I ../cmsiscore/inc -imultilib thumb/v7-m -D__USES_INITFINI__
  18              	@ -D STM32F103x6 -D RUN_FROM_FLASH=1 -D __c src/stm32f1xx_hal_uart.c
  19              	@ -mcpu=cortex-m3 -mthumb -auxbase-strip bin/stm32f1xx_hal_uart.o -g
  20              	@ -gdwarf-2 -Os -Wall -fomit-frame-pointer -fverbose-asm
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffunction-cse -fgcse
  32              	@ -fgcse-lm -fgnu-runtime -fgnu-unique -fguess-branch-probability
  33              	@ -fhoist-adjacent-loads -fident -fif-conversion -fif-conversion2
  34              	@ -findirect-inlining -finline -finline-atomics -finline-functions
  35              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  36              	@ -fipa-cp-alignment -fipa-icf -fipa-icf-functions -fipa-icf-variables
  37              	@ -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra
  38              	@ -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  39              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  40              	@ -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  41              	@ -fmath-errno -fmerge-constants -fmerge-debug-strings
  42              	@ -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  43              	@ -fpartial-inlining -fpeephole -fpeephole2 -fplt -fprefetch-loop-arrays
  44              	@ -freg-struct-return -freorder-blocks -freorder-functions
  45              	@ -frerun-cse-after-loop -fsched-critical-path-heuristic
  46              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  47              	@ -fsched-last-insn-heuristic -fsched-pressure -fsched-rank-heuristic
  48              	@ -fsched-spec -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  49              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  50              	@ -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types
  51              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstrict-aliasing
  52              	@ -fstrict-overflow -fstrict-volatile-bitfields -fsync-libcalls
  53              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  54              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  55              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  56              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  57              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
ARM GAS  /tmp/ccPoddoo.s 			page 2


  58              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  59              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  60              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  61              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  62              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  63              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  64              	@ -munaligned-access -mvectorize-with-neon-quad
  65              	
  66              		.text
  67              	.Ltext0:
  68              		.cfi_sections	.debug_frame
  69              		.align	1
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu softvfp
  74              		.type	UART_EndRxTransfer, %function
  75              	UART_EndRxTransfer:
  76              	.LFB110:
  77              		.file 1 "src/stm32f1xx_hal_uart.c"
   1:src/stm32f1xx_hal_uart.c **** /**
   2:src/stm32f1xx_hal_uart.c ****   ******************************************************************************
   3:src/stm32f1xx_hal_uart.c ****   * @file    stm32f1xx_hal_uart.c
   4:src/stm32f1xx_hal_uart.c ****   * @author  MCD Application Team
   5:src/stm32f1xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:src/stm32f1xx_hal_uart.c ****   *          This file provides firmware functions to manage the following
   7:src/stm32f1xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:src/stm32f1xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:src/stm32f1xx_hal_uart.c ****   *           + IO operation functions
  10:src/stm32f1xx_hal_uart.c ****   *           + Peripheral Control functions
  11:src/stm32f1xx_hal_uart.c ****   *           + Peripheral State and Errors functions
  12:src/stm32f1xx_hal_uart.c ****   @verbatim
  13:src/stm32f1xx_hal_uart.c ****   ==============================================================================
  14:src/stm32f1xx_hal_uart.c ****                         ##### How to use this driver #####
  15:src/stm32f1xx_hal_uart.c ****   ==============================================================================
  16:src/stm32f1xx_hal_uart.c ****   [..]
  17:src/stm32f1xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  18:src/stm32f1xx_hal_uart.c **** 
  19:src/stm32f1xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  20:src/stm32f1xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  21:src/stm32f1xx_hal_uart.c ****         (##) Enable the USARTx interface clock.
  22:src/stm32f1xx_hal_uart.c ****         (##) UART pins configuration:
  23:src/stm32f1xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  24:src/stm32f1xx_hal_uart.c ****             (+++) Configure these UART pins (TX as alternate function pull-up, RX as alternate func
  25:src/stm32f1xx_hal_uart.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  26:src/stm32f1xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  27:src/stm32f1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  28:src/stm32f1xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  29:src/stm32f1xx_hal_uart.c ****         (##) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  30:src/stm32f1xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  31:src/stm32f1xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  32:src/stm32f1xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  33:src/stm32f1xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required
  34:src/stm32f1xx_hal_uart.c ****                   Tx/Rx parameters.
  35:src/stm32f1xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  36:src/stm32f1xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  37:src/stm32f1xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete
ARM GAS  /tmp/ccPoddoo.s 			page 3


  38:src/stm32f1xx_hal_uart.c ****                   interrupt on the DMA Tx/Rx channel.
  39:src/stm32f1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority and enable the NVIC USART IRQ handle
  40:src/stm32f1xx_hal_uart.c ****                   (used for last byte sending completion detection in DMA non circular mode)
  41:src/stm32f1xx_hal_uart.c **** 
  42:src/stm32f1xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  43:src/stm32f1xx_hal_uart.c ****         flow control and Mode(Receiver/Transmitter) in the huart Init structure.
  44:src/stm32f1xx_hal_uart.c **** 
  45:src/stm32f1xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  46:src/stm32f1xx_hal_uart.c ****         the HAL_UART_Init() API.
  47:src/stm32f1xx_hal_uart.c **** 
  48:src/stm32f1xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  49:src/stm32f1xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  50:src/stm32f1xx_hal_uart.c **** 
  51:src/stm32f1xx_hal_uart.c ****     (#) For the LIN mode, initialize the UART registers by calling the HAL_LIN_Init() API.
  52:src/stm32f1xx_hal_uart.c **** 
  53:src/stm32f1xx_hal_uart.c ****     (#) For the Multi-Processor mode, initialize the UART registers by calling
  54:src/stm32f1xx_hal_uart.c ****         the HAL_MultiProcessor_Init() API.
  55:src/stm32f1xx_hal_uart.c **** 
  56:src/stm32f1xx_hal_uart.c ****      [..]
  57:src/stm32f1xx_hal_uart.c ****        (@) The specific UART interrupts (Transmission complete interrupt,
  58:src/stm32f1xx_hal_uart.c ****             RXNE interrupt and Error Interrupts) will be managed using the macros
  59:src/stm32f1xx_hal_uart.c ****             __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit
  60:src/stm32f1xx_hal_uart.c ****             and receive process.
  61:src/stm32f1xx_hal_uart.c **** 
  62:src/stm32f1xx_hal_uart.c ****      [..]
  63:src/stm32f1xx_hal_uart.c ****        (@) These APIs (HAL_UART_Init() and HAL_HalfDuplex_Init()) configure also the
  64:src/stm32f1xx_hal_uart.c ****             low level Hardware GPIO, CLOCK, CORTEX...etc) by calling the customized
  65:src/stm32f1xx_hal_uart.c ****             HAL_UART_MspInit() API.
  66:src/stm32f1xx_hal_uart.c **** 
  67:src/stm32f1xx_hal_uart.c ****     ##### Callback registration #####
  68:src/stm32f1xx_hal_uart.c ****     ==================================
  69:src/stm32f1xx_hal_uart.c **** 
  70:src/stm32f1xx_hal_uart.c ****     [..]
  71:src/stm32f1xx_hal_uart.c ****     The compilation define USE_HAL_UART_REGISTER_CALLBACKS when set to 1
  72:src/stm32f1xx_hal_uart.c ****     allows the user to configure dynamically the driver callbacks.
  73:src/stm32f1xx_hal_uart.c **** 
  74:src/stm32f1xx_hal_uart.c ****     [..]
  75:src/stm32f1xx_hal_uart.c ****     Use Function @ref HAL_UART_RegisterCallback() to register a user callback.
  76:src/stm32f1xx_hal_uart.c ****     Function @ref HAL_UART_RegisterCallback() allows to register following callbacks:
  77:src/stm32f1xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  78:src/stm32f1xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  79:src/stm32f1xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  80:src/stm32f1xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
  81:src/stm32f1xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
  82:src/stm32f1xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
  83:src/stm32f1xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  84:src/stm32f1xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
  85:src/stm32f1xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
  86:src/stm32f1xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
  87:src/stm32f1xx_hal_uart.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
  88:src/stm32f1xx_hal_uart.c ****     and a pointer to the user callback function.
  89:src/stm32f1xx_hal_uart.c **** 
  90:src/stm32f1xx_hal_uart.c ****     [..]
  91:src/stm32f1xx_hal_uart.c ****     Use function @ref HAL_UART_UnRegisterCallback() to reset a callback to the default
  92:src/stm32f1xx_hal_uart.c ****     weak (surcharged) function.
  93:src/stm32f1xx_hal_uart.c ****     @ref HAL_UART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
  94:src/stm32f1xx_hal_uart.c ****     and the Callback ID.
ARM GAS  /tmp/ccPoddoo.s 			page 4


  95:src/stm32f1xx_hal_uart.c ****     This function allows to reset following callbacks:
  96:src/stm32f1xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  97:src/stm32f1xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  98:src/stm32f1xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  99:src/stm32f1xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 100:src/stm32f1xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
 101:src/stm32f1xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 102:src/stm32f1xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 103:src/stm32f1xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 104:src/stm32f1xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
 105:src/stm32f1xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
 106:src/stm32f1xx_hal_uart.c **** 
 107:src/stm32f1xx_hal_uart.c ****     [..]
 108:src/stm32f1xx_hal_uart.c ****     By default, after the @ref HAL_UART_Init() and when the state is HAL_UART_STATE_RESET
 109:src/stm32f1xx_hal_uart.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 110:src/stm32f1xx_hal_uart.c ****     examples @ref HAL_UART_TxCpltCallback(), @ref HAL_UART_RxHalfCpltCallback().
 111:src/stm32f1xx_hal_uart.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 112:src/stm32f1xx_hal_uart.c ****     reset to the legacy weak (surcharged) functions in the @ref HAL_UART_Init()
 113:src/stm32f1xx_hal_uart.c ****     and @ref HAL_UART_DeInit() only when these callbacks are null (not registered beforehand).
 114:src/stm32f1xx_hal_uart.c ****     If not, MspInit or MspDeInit are not null, the @ref HAL_UART_Init() and @ref HAL_UART_DeInit()
 115:src/stm32f1xx_hal_uart.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 116:src/stm32f1xx_hal_uart.c **** 
 117:src/stm32f1xx_hal_uart.c ****     [..]
 118:src/stm32f1xx_hal_uart.c ****     Callbacks can be registered/unregistered in HAL_UART_STATE_READY state only.
 119:src/stm32f1xx_hal_uart.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
 120:src/stm32f1xx_hal_uart.c ****     in HAL_UART_STATE_READY or HAL_UART_STATE_RESET state, thus registered (user)
 121:src/stm32f1xx_hal_uart.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 122:src/stm32f1xx_hal_uart.c ****     In that case first register the MspInit/MspDeInit user callbacks
 123:src/stm32f1xx_hal_uart.c ****     using @ref HAL_UART_RegisterCallback() before calling @ref HAL_UART_DeInit()
 124:src/stm32f1xx_hal_uart.c ****     or @ref HAL_UART_Init() function.
 125:src/stm32f1xx_hal_uart.c **** 
 126:src/stm32f1xx_hal_uart.c ****     [..]
 127:src/stm32f1xx_hal_uart.c ****     When The compilation define USE_HAL_UART_REGISTER_CALLBACKS is set to 0 or
 128:src/stm32f1xx_hal_uart.c ****     not defined, the callback registration feature is not available
 129:src/stm32f1xx_hal_uart.c ****     and weak (surcharged) callbacks are used.
 130:src/stm32f1xx_hal_uart.c **** 
 131:src/stm32f1xx_hal_uart.c ****      [..]
 132:src/stm32f1xx_hal_uart.c ****         Three operation modes are available within this driver :
 133:src/stm32f1xx_hal_uart.c **** 
 134:src/stm32f1xx_hal_uart.c ****      *** Polling mode IO operation ***
 135:src/stm32f1xx_hal_uart.c ****      =================================
 136:src/stm32f1xx_hal_uart.c ****      [..]
 137:src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in blocking mode using HAL_UART_Transmit()
 138:src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in blocking mode using HAL_UART_Receive()
 139:src/stm32f1xx_hal_uart.c **** 
 140:src/stm32f1xx_hal_uart.c ****      *** Interrupt mode IO operation ***
 141:src/stm32f1xx_hal_uart.c ****      ===================================
 142:src/stm32f1xx_hal_uart.c ****      [..]
 143:src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT()
 144:src/stm32f1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 145:src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 146:src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT()
 147:src/stm32f1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 148:src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 149:src/stm32f1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 150:src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 151:src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccPoddoo.s 			page 5


 152:src/stm32f1xx_hal_uart.c ****      *** DMA mode IO operation ***
 153:src/stm32f1xx_hal_uart.c ****      ==============================
 154:src/stm32f1xx_hal_uart.c ****      [..]
 155:src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA()
 156:src/stm32f1xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
 157:src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback
 158:src/stm32f1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 159:src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 160:src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA()
 161:src/stm32f1xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can
 162:src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback
 163:src/stm32f1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 164:src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 165:src/stm32f1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 166:src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 167:src/stm32f1xx_hal_uart.c ****        (+) Pause the DMA Transfer using HAL_UART_DMAPause()
 168:src/stm32f1xx_hal_uart.c ****        (+) Resume the DMA Transfer using HAL_UART_DMAResume()
 169:src/stm32f1xx_hal_uart.c ****        (+) Stop the DMA Transfer using HAL_UART_DMAStop()
 170:src/stm32f1xx_hal_uart.c **** 
 171:src/stm32f1xx_hal_uart.c ****      *** UART HAL driver macros list ***
 172:src/stm32f1xx_hal_uart.c ****      =============================================
 173:src/stm32f1xx_hal_uart.c ****      [..]
 174:src/stm32f1xx_hal_uart.c ****        Below the list of most used macros in UART HAL driver.
 175:src/stm32f1xx_hal_uart.c **** 
 176:src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE: Enable the UART peripheral
 177:src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE: Disable the UART peripheral
 178:src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_GET_FLAG : Check whether the specified UART flag is set or not
 179:src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_CLEAR_FLAG : Clear the specified UART pending flag
 180:src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE_IT: Enable the specified UART interrupt
 181:src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE_IT: Disable the specified UART interrupt
 182:src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_GET_IT_SOURCE: Check whether the specified UART interrupt has occurred or not
 183:src/stm32f1xx_hal_uart.c **** 
 184:src/stm32f1xx_hal_uart.c ****      [..]
 185:src/stm32f1xx_hal_uart.c ****        (@) You can refer to the UART HAL driver header file for more useful macros
 186:src/stm32f1xx_hal_uart.c **** 
 187:src/stm32f1xx_hal_uart.c ****   @endverbatim
 188:src/stm32f1xx_hal_uart.c ****      [..]
 189:src/stm32f1xx_hal_uart.c ****        (@) Additionnal remark: If the parity is enabled, then the MSB bit of the data written
 190:src/stm32f1xx_hal_uart.c ****            in the data register is transmitted but is changed by the parity bit.
 191:src/stm32f1xx_hal_uart.c ****            Depending on the frame length defined by the M bit (8-bits or 9-bits),
 192:src/stm32f1xx_hal_uart.c ****            the possible UART frame formats are as listed in the following table:
 193:src/stm32f1xx_hal_uart.c ****     +-------------------------------------------------------------+
 194:src/stm32f1xx_hal_uart.c ****     |   M bit |  PCE bit  |            UART frame                 |
 195:src/stm32f1xx_hal_uart.c ****     |---------------------|---------------------------------------|
 196:src/stm32f1xx_hal_uart.c ****     |    0    |    0      |    | SB | 8 bit data | STB |          |
 197:src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 198:src/stm32f1xx_hal_uart.c ****     |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 199:src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 200:src/stm32f1xx_hal_uart.c ****     |    1    |    0      |    | SB | 9 bit data | STB |          |
 201:src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 202:src/stm32f1xx_hal_uart.c ****     |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 203:src/stm32f1xx_hal_uart.c ****     +-------------------------------------------------------------+
 204:src/stm32f1xx_hal_uart.c ****   ******************************************************************************
 205:src/stm32f1xx_hal_uart.c ****   * @attention
 206:src/stm32f1xx_hal_uart.c ****   *
 207:src/stm32f1xx_hal_uart.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 208:src/stm32f1xx_hal_uart.c ****   * All rights reserved.</center></h2>
ARM GAS  /tmp/ccPoddoo.s 			page 6


 209:src/stm32f1xx_hal_uart.c ****   *
 210:src/stm32f1xx_hal_uart.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 211:src/stm32f1xx_hal_uart.c ****   * the "License"; You may not use this file except in compliance with the
 212:src/stm32f1xx_hal_uart.c ****   * License. You may obtain a copy of the License at:
 213:src/stm32f1xx_hal_uart.c ****   *                        opensource.org/licenses/BSD-3-Clause
 214:src/stm32f1xx_hal_uart.c ****   *
 215:src/stm32f1xx_hal_uart.c ****   ******************************************************************************
 216:src/stm32f1xx_hal_uart.c ****   */
 217:src/stm32f1xx_hal_uart.c **** 
 218:src/stm32f1xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 219:src/stm32f1xx_hal_uart.c **** #include "stm32f1xx_hal.h"
 220:src/stm32f1xx_hal_uart.c **** 
 221:src/stm32f1xx_hal_uart.c **** /** @addtogroup STM32F1xx_HAL_Driver
 222:src/stm32f1xx_hal_uart.c ****   * @{
 223:src/stm32f1xx_hal_uart.c ****   */
 224:src/stm32f1xx_hal_uart.c **** 
 225:src/stm32f1xx_hal_uart.c **** /** @defgroup UART UART
 226:src/stm32f1xx_hal_uart.c ****   * @brief HAL UART module driver
 227:src/stm32f1xx_hal_uart.c ****   * @{
 228:src/stm32f1xx_hal_uart.c ****   */
 229:src/stm32f1xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 230:src/stm32f1xx_hal_uart.c **** 
 231:src/stm32f1xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 232:src/stm32f1xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 233:src/stm32f1xx_hal_uart.c **** /** @addtogroup UART_Private_Constants
 234:src/stm32f1xx_hal_uart.c ****   * @{
 235:src/stm32f1xx_hal_uart.c ****   */
 236:src/stm32f1xx_hal_uart.c **** /**
 237:src/stm32f1xx_hal_uart.c ****   * @}
 238:src/stm32f1xx_hal_uart.c ****   */
 239:src/stm32f1xx_hal_uart.c **** /* Private macro -------------------------------------------------------------*/
 240:src/stm32f1xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 241:src/stm32f1xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 242:src/stm32f1xx_hal_uart.c **** /** @addtogroup UART_Private_Functions  UART Private Functions
 243:src/stm32f1xx_hal_uart.c ****   * @{
 244:src/stm32f1xx_hal_uart.c ****   */
 245:src/stm32f1xx_hal_uart.c **** 
 246:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 247:src/stm32f1xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart);
 248:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 249:src/stm32f1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 250:src/stm32f1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 251:src/stm32f1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 252:src/stm32f1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 253:src/stm32f1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 254:src/stm32f1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 255:src/stm32f1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 256:src/stm32f1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 257:src/stm32f1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 258:src/stm32f1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 259:src/stm32f1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 260:src/stm32f1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 261:src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);
 262:src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 263:src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
 264:src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
 265:src/stm32f1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart);
ARM GAS  /tmp/ccPoddoo.s 			page 7


 266:src/stm32f1xx_hal_uart.c **** 
 267:src/stm32f1xx_hal_uart.c **** /**
 268:src/stm32f1xx_hal_uart.c ****   * @}
 269:src/stm32f1xx_hal_uart.c ****   */
 270:src/stm32f1xx_hal_uart.c **** 
 271:src/stm32f1xx_hal_uart.c **** /* Exported functions ---------------------------------------------------------*/
 272:src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 273:src/stm32f1xx_hal_uart.c ****   * @{
 274:src/stm32f1xx_hal_uart.c ****   */
 275:src/stm32f1xx_hal_uart.c **** 
 276:src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 277:src/stm32f1xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
 278:src/stm32f1xx_hal_uart.c ****   *
 279:src/stm32f1xx_hal_uart.c **** @verbatim
 280:src/stm32f1xx_hal_uart.c ****  ===============================================================================
 281:src/stm32f1xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 282:src/stm32f1xx_hal_uart.c ****  ===============================================================================
 283:src/stm32f1xx_hal_uart.c ****     [..]
 284:src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 285:src/stm32f1xx_hal_uart.c ****     in asynchronous mode.
 286:src/stm32f1xx_hal_uart.c ****       (+) For the asynchronous mode only these parameters can be configured:
 287:src/stm32f1xx_hal_uart.c ****         (++) Baud Rate
 288:src/stm32f1xx_hal_uart.c ****         (++) Word Length
 289:src/stm32f1xx_hal_uart.c ****         (++) Stop Bit
 290:src/stm32f1xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 291:src/stm32f1xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 292:src/stm32f1xx_hal_uart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 293:src/stm32f1xx_hal_uart.c ****              please refer to Reference manual for possible UART frame formats.
 294:src/stm32f1xx_hal_uart.c ****         (++) Hardware flow control
 295:src/stm32f1xx_hal_uart.c ****         (++) Receiver/transmitter modes
 296:src/stm32f1xx_hal_uart.c ****         (++) Over Sampling Method
 297:src/stm32f1xx_hal_uart.c ****     [..]
 298:src/stm32f1xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init() and HAL_MultiProcessor_Init() APIs
 299:src/stm32f1xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, LIN and Multi-Processor configurat
 300:src/stm32f1xx_hal_uart.c ****     procedures (details for the procedures are available in reference manuals
 301:src/stm32f1xx_hal_uart.c ****     (RM0008 for STM32F10Xxx MCUs and RM0041 for STM32F100xx MCUs)).
 302:src/stm32f1xx_hal_uart.c **** 
 303:src/stm32f1xx_hal_uart.c **** @endverbatim
 304:src/stm32f1xx_hal_uart.c ****   * @{
 305:src/stm32f1xx_hal_uart.c ****   */
 306:src/stm32f1xx_hal_uart.c **** 
 307:src/stm32f1xx_hal_uart.c **** /**
 308:src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the UART mode according to the specified parameters in
 309:src/stm32f1xx_hal_uart.c ****   *         the UART_InitTypeDef and create the associated handle.
 310:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 311:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 312:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 313:src/stm32f1xx_hal_uart.c ****   */
 314:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 315:src/stm32f1xx_hal_uart.c **** {
 316:src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 317:src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 318:src/stm32f1xx_hal_uart.c ****   {
 319:src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 320:src/stm32f1xx_hal_uart.c ****   }
 321:src/stm32f1xx_hal_uart.c **** 
 322:src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
ARM GAS  /tmp/ccPoddoo.s 			page 8


 323:src/stm32f1xx_hal_uart.c ****   if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 324:src/stm32f1xx_hal_uart.c ****   {
 325:src/stm32f1xx_hal_uart.c ****     /* The hardware flow control is available only for USART1, USART2 and USART3 */
 326:src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 327:src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 328:src/stm32f1xx_hal_uart.c ****   }
 329:src/stm32f1xx_hal_uart.c ****   else
 330:src/stm32f1xx_hal_uart.c ****   {
 331:src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 332:src/stm32f1xx_hal_uart.c ****   }
 333:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 334:src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 335:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 336:src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 337:src/stm32f1xx_hal_uart.c **** 
 338:src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 339:src/stm32f1xx_hal_uart.c ****   {
 340:src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 341:src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 342:src/stm32f1xx_hal_uart.c **** 
 343:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 344:src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 345:src/stm32f1xx_hal_uart.c **** 
 346:src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 347:src/stm32f1xx_hal_uart.c ****     {
 348:src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 349:src/stm32f1xx_hal_uart.c ****     }
 350:src/stm32f1xx_hal_uart.c **** 
 351:src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 352:src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 353:src/stm32f1xx_hal_uart.c **** #else
 354:src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 355:src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 356:src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 357:src/stm32f1xx_hal_uart.c ****   }
 358:src/stm32f1xx_hal_uart.c **** 
 359:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 360:src/stm32f1xx_hal_uart.c **** 
 361:src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 362:src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 363:src/stm32f1xx_hal_uart.c **** 
 364:src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 365:src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 366:src/stm32f1xx_hal_uart.c **** 
 367:src/stm32f1xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 368:src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 369:src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 370:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 371:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 372:src/stm32f1xx_hal_uart.c **** 
 373:src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 374:src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 375:src/stm32f1xx_hal_uart.c **** 
 376:src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state */
 377:src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 378:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 379:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
ARM GAS  /tmp/ccPoddoo.s 			page 9


 380:src/stm32f1xx_hal_uart.c **** 
 381:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 382:src/stm32f1xx_hal_uart.c **** }
 383:src/stm32f1xx_hal_uart.c **** 
 384:src/stm32f1xx_hal_uart.c **** /**
 385:src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the half-duplex mode according to the specified
 386:src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 387:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 388:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 389:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 390:src/stm32f1xx_hal_uart.c ****   */
 391:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 392:src/stm32f1xx_hal_uart.c **** {
 393:src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 394:src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 395:src/stm32f1xx_hal_uart.c ****   {
 396:src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 397:src/stm32f1xx_hal_uart.c ****   }
 398:src/stm32f1xx_hal_uart.c **** 
 399:src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 400:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 401:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 402:src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 403:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 404:src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 405:src/stm32f1xx_hal_uart.c **** 
 406:src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 407:src/stm32f1xx_hal_uart.c ****   {
 408:src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 409:src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 410:src/stm32f1xx_hal_uart.c **** 
 411:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 412:src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 413:src/stm32f1xx_hal_uart.c **** 
 414:src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 415:src/stm32f1xx_hal_uart.c ****     {
 416:src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 417:src/stm32f1xx_hal_uart.c ****     }
 418:src/stm32f1xx_hal_uart.c **** 
 419:src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 420:src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 421:src/stm32f1xx_hal_uart.c **** #else
 422:src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 423:src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 424:src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 425:src/stm32f1xx_hal_uart.c ****   }
 426:src/stm32f1xx_hal_uart.c **** 
 427:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 428:src/stm32f1xx_hal_uart.c **** 
 429:src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 430:src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 431:src/stm32f1xx_hal_uart.c **** 
 432:src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 433:src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 434:src/stm32f1xx_hal_uart.c **** 
 435:src/stm32f1xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 436:src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
ARM GAS  /tmp/ccPoddoo.s 			page 10


 437:src/stm32f1xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 438:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 439:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 440:src/stm32f1xx_hal_uart.c **** 
 441:src/stm32f1xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 442:src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 443:src/stm32f1xx_hal_uart.c **** 
 444:src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 445:src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 446:src/stm32f1xx_hal_uart.c **** 
 447:src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state*/
 448:src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 449:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 450:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 451:src/stm32f1xx_hal_uart.c **** 
 452:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 453:src/stm32f1xx_hal_uart.c **** }
 454:src/stm32f1xx_hal_uart.c **** 
 455:src/stm32f1xx_hal_uart.c **** /**
 456:src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the LIN mode according to the specified
 457:src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 458:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 459:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 460:src/stm32f1xx_hal_uart.c ****   * @param  BreakDetectLength Specifies the LIN break detection length.
 461:src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 462:src/stm32f1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
 463:src/stm32f1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
 464:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 465:src/stm32f1xx_hal_uart.c ****   */
 466:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 467:src/stm32f1xx_hal_uart.c **** {
 468:src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 469:src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 470:src/stm32f1xx_hal_uart.c ****   {
 471:src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 472:src/stm32f1xx_hal_uart.c ****   }
 473:src/stm32f1xx_hal_uart.c **** 
 474:src/stm32f1xx_hal_uart.c ****   /* Check the LIN UART instance */
 475:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 476:src/stm32f1xx_hal_uart.c **** 
 477:src/stm32f1xx_hal_uart.c ****   /* Check the Break detection length parameter */
 478:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 479:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
 480:src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 481:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
 482:src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 483:src/stm32f1xx_hal_uart.c **** 
 484:src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 485:src/stm32f1xx_hal_uart.c ****   {
 486:src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 487:src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 488:src/stm32f1xx_hal_uart.c **** 
 489:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 490:src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 491:src/stm32f1xx_hal_uart.c **** 
 492:src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 493:src/stm32f1xx_hal_uart.c ****     {
ARM GAS  /tmp/ccPoddoo.s 			page 11


 494:src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 495:src/stm32f1xx_hal_uart.c ****     }
 496:src/stm32f1xx_hal_uart.c **** 
 497:src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 498:src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 499:src/stm32f1xx_hal_uart.c **** #else
 500:src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 501:src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 502:src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 503:src/stm32f1xx_hal_uart.c ****   }
 504:src/stm32f1xx_hal_uart.c **** 
 505:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 506:src/stm32f1xx_hal_uart.c **** 
 507:src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 508:src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 509:src/stm32f1xx_hal_uart.c **** 
 510:src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 511:src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 512:src/stm32f1xx_hal_uart.c **** 
 513:src/stm32f1xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared:
 514:src/stm32f1xx_hal_uart.c ****      - CLKEN bits in the USART_CR2 register,
 515:src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
 516:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 517:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 518:src/stm32f1xx_hal_uart.c **** 
 519:src/stm32f1xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 520:src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 521:src/stm32f1xx_hal_uart.c **** 
 522:src/stm32f1xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 523:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 524:src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, BreakDetectLength);
 525:src/stm32f1xx_hal_uart.c **** 
 526:src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 527:src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 528:src/stm32f1xx_hal_uart.c **** 
 529:src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state*/
 530:src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 531:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 532:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 533:src/stm32f1xx_hal_uart.c **** 
 534:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 535:src/stm32f1xx_hal_uart.c **** }
 536:src/stm32f1xx_hal_uart.c **** 
 537:src/stm32f1xx_hal_uart.c **** /**
 538:src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the Multi-Processor mode according to the specified
 539:src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 540:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 541:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 542:src/stm32f1xx_hal_uart.c ****   * @param  Address USART address
 543:src/stm32f1xx_hal_uart.c ****   * @param  WakeUpMethod specifies the USART wake-up method.
 544:src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 545:src/stm32f1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
 546:src/stm32f1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
 547:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 548:src/stm32f1xx_hal_uart.c ****   */
 549:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 550:src/stm32f1xx_hal_uart.c **** {
ARM GAS  /tmp/ccPoddoo.s 			page 12


 551:src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 552:src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 553:src/stm32f1xx_hal_uart.c ****   {
 554:src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 555:src/stm32f1xx_hal_uart.c ****   }
 556:src/stm32f1xx_hal_uart.c **** 
 557:src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 558:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 559:src/stm32f1xx_hal_uart.c **** 
 560:src/stm32f1xx_hal_uart.c ****   /* Check the Address & wake up method parameters */
 561:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 562:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_ADDRESS(Address));
 563:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 564:src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 565:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 566:src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 567:src/stm32f1xx_hal_uart.c **** 
 568:src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 569:src/stm32f1xx_hal_uart.c ****   {
 570:src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 571:src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 572:src/stm32f1xx_hal_uart.c **** 
 573:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 574:src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 575:src/stm32f1xx_hal_uart.c **** 
 576:src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 577:src/stm32f1xx_hal_uart.c ****     {
 578:src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 579:src/stm32f1xx_hal_uart.c ****     }
 580:src/stm32f1xx_hal_uart.c **** 
 581:src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 582:src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 583:src/stm32f1xx_hal_uart.c **** #else
 584:src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 585:src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 586:src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 587:src/stm32f1xx_hal_uart.c ****   }
 588:src/stm32f1xx_hal_uart.c **** 
 589:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 590:src/stm32f1xx_hal_uart.c **** 
 591:src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 592:src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 593:src/stm32f1xx_hal_uart.c **** 
 594:src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 595:src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 596:src/stm32f1xx_hal_uart.c **** 
 597:src/stm32f1xx_hal_uart.c ****   /* In Multi-Processor mode, the following bits must be kept cleared:
 598:src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 599:src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
 600:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 601:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 602:src/stm32f1xx_hal_uart.c **** 
 603:src/stm32f1xx_hal_uart.c ****   /* Set the USART address node */
 604:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 605:src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, Address);
 606:src/stm32f1xx_hal_uart.c **** 
 607:src/stm32f1xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
ARM GAS  /tmp/ccPoddoo.s 			page 13


 608:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 609:src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, WakeUpMethod);
 610:src/stm32f1xx_hal_uart.c **** 
 611:src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 612:src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 613:src/stm32f1xx_hal_uart.c **** 
 614:src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state */
 615:src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 616:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 617:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 618:src/stm32f1xx_hal_uart.c **** 
 619:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 620:src/stm32f1xx_hal_uart.c **** }
 621:src/stm32f1xx_hal_uart.c **** 
 622:src/stm32f1xx_hal_uart.c **** /**
 623:src/stm32f1xx_hal_uart.c ****   * @brief  DeInitializes the UART peripheral.
 624:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 625:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 626:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 627:src/stm32f1xx_hal_uart.c ****   */
 628:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 629:src/stm32f1xx_hal_uart.c **** {
 630:src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 631:src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 632:src/stm32f1xx_hal_uart.c ****   {
 633:src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 634:src/stm32f1xx_hal_uart.c ****   }
 635:src/stm32f1xx_hal_uart.c **** 
 636:src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 637:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 638:src/stm32f1xx_hal_uart.c **** 
 639:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 640:src/stm32f1xx_hal_uart.c **** 
 641:src/stm32f1xx_hal_uart.c ****   /* Disable the Peripheral */
 642:src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 643:src/stm32f1xx_hal_uart.c **** 
 644:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 645:src/stm32f1xx_hal_uart.c ****   if (huart->MspDeInitCallback == NULL)
 646:src/stm32f1xx_hal_uart.c ****   {
 647:src/stm32f1xx_hal_uart.c ****     huart->MspDeInitCallback = HAL_UART_MspDeInit;
 648:src/stm32f1xx_hal_uart.c ****   }
 649:src/stm32f1xx_hal_uart.c ****   /* DeInit the low level hardware */
 650:src/stm32f1xx_hal_uart.c ****   huart->MspDeInitCallback(huart);
 651:src/stm32f1xx_hal_uart.c **** #else
 652:src/stm32f1xx_hal_uart.c ****   /* DeInit the low level hardware */
 653:src/stm32f1xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 654:src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 655:src/stm32f1xx_hal_uart.c **** 
 656:src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 657:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 658:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 659:src/stm32f1xx_hal_uart.c **** 
 660:src/stm32f1xx_hal_uart.c ****   /* Process Unlock */
 661:src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 662:src/stm32f1xx_hal_uart.c **** 
 663:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 664:src/stm32f1xx_hal_uart.c **** }
ARM GAS  /tmp/ccPoddoo.s 			page 14


 665:src/stm32f1xx_hal_uart.c **** 
 666:src/stm32f1xx_hal_uart.c **** /**
 667:src/stm32f1xx_hal_uart.c ****   * @brief  UART MSP Init.
 668:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 669:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 670:src/stm32f1xx_hal_uart.c ****   * @retval None
 671:src/stm32f1xx_hal_uart.c ****   */
 672:src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 673:src/stm32f1xx_hal_uart.c **** {
 674:src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 675:src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
 676:src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 677:src/stm32f1xx_hal_uart.c ****            the HAL_UART_MspInit could be implemented in the user file
 678:src/stm32f1xx_hal_uart.c ****    */
 679:src/stm32f1xx_hal_uart.c **** }
 680:src/stm32f1xx_hal_uart.c **** 
 681:src/stm32f1xx_hal_uart.c **** /**
 682:src/stm32f1xx_hal_uart.c ****   * @brief  UART MSP DeInit.
 683:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 684:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 685:src/stm32f1xx_hal_uart.c ****   * @retval None
 686:src/stm32f1xx_hal_uart.c ****   */
 687:src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 688:src/stm32f1xx_hal_uart.c **** {
 689:src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 690:src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
 691:src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 692:src/stm32f1xx_hal_uart.c ****            the HAL_UART_MspDeInit could be implemented in the user file
 693:src/stm32f1xx_hal_uart.c ****    */
 694:src/stm32f1xx_hal_uart.c **** }
 695:src/stm32f1xx_hal_uart.c **** 
 696:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 697:src/stm32f1xx_hal_uart.c **** /**
 698:src/stm32f1xx_hal_uart.c ****   * @brief  Register a User UART Callback
 699:src/stm32f1xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 700:src/stm32f1xx_hal_uart.c ****   * @param  huart uart handle
 701:src/stm32f1xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be registered
 702:src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 703:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 704:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 705:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 706:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 707:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 708:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 709:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 710:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 711:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 712:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 713:src/stm32f1xx_hal_uart.c ****   * @param  pCallback pointer to the Callback function
 714:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 715:src/stm32f1xx_hal_uart.c ****   */
 716:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef C
 717:src/stm32f1xx_hal_uart.c **** {
 718:src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 719:src/stm32f1xx_hal_uart.c **** 
 720:src/stm32f1xx_hal_uart.c ****   if (pCallback == NULL)
 721:src/stm32f1xx_hal_uart.c ****   {
ARM GAS  /tmp/ccPoddoo.s 			page 15


 722:src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 723:src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 724:src/stm32f1xx_hal_uart.c **** 
 725:src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 726:src/stm32f1xx_hal_uart.c ****   }
 727:src/stm32f1xx_hal_uart.c ****   /* Process locked */
 728:src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 729:src/stm32f1xx_hal_uart.c **** 
 730:src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 731:src/stm32f1xx_hal_uart.c ****   {
 732:src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 733:src/stm32f1xx_hal_uart.c ****     {
 734:src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 735:src/stm32f1xx_hal_uart.c ****         huart->TxHalfCpltCallback = pCallback;
 736:src/stm32f1xx_hal_uart.c ****         break;
 737:src/stm32f1xx_hal_uart.c **** 
 738:src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 739:src/stm32f1xx_hal_uart.c ****         huart->TxCpltCallback = pCallback;
 740:src/stm32f1xx_hal_uart.c ****         break;
 741:src/stm32f1xx_hal_uart.c **** 
 742:src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 743:src/stm32f1xx_hal_uart.c ****         huart->RxHalfCpltCallback = pCallback;
 744:src/stm32f1xx_hal_uart.c ****         break;
 745:src/stm32f1xx_hal_uart.c **** 
 746:src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 747:src/stm32f1xx_hal_uart.c ****         huart->RxCpltCallback = pCallback;
 748:src/stm32f1xx_hal_uart.c ****         break;
 749:src/stm32f1xx_hal_uart.c **** 
 750:src/stm32f1xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 751:src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback = pCallback;
 752:src/stm32f1xx_hal_uart.c ****         break;
 753:src/stm32f1xx_hal_uart.c **** 
 754:src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 755:src/stm32f1xx_hal_uart.c ****         huart->AbortCpltCallback = pCallback;
 756:src/stm32f1xx_hal_uart.c ****         break;
 757:src/stm32f1xx_hal_uart.c **** 
 758:src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 759:src/stm32f1xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = pCallback;
 760:src/stm32f1xx_hal_uart.c ****         break;
 761:src/stm32f1xx_hal_uart.c **** 
 762:src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 763:src/stm32f1xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = pCallback;
 764:src/stm32f1xx_hal_uart.c ****         break;
 765:src/stm32f1xx_hal_uart.c **** 
 766:src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 767:src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 768:src/stm32f1xx_hal_uart.c ****         break;
 769:src/stm32f1xx_hal_uart.c **** 
 770:src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 771:src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 772:src/stm32f1xx_hal_uart.c ****         break;
 773:src/stm32f1xx_hal_uart.c **** 
 774:src/stm32f1xx_hal_uart.c ****       default :
 775:src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 776:src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 777:src/stm32f1xx_hal_uart.c **** 
 778:src/stm32f1xx_hal_uart.c ****         /* Return error status */
ARM GAS  /tmp/ccPoddoo.s 			page 16


 779:src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 780:src/stm32f1xx_hal_uart.c ****         break;
 781:src/stm32f1xx_hal_uart.c ****     }
 782:src/stm32f1xx_hal_uart.c ****   }
 783:src/stm32f1xx_hal_uart.c ****   else if (huart->gState == HAL_UART_STATE_RESET)
 784:src/stm32f1xx_hal_uart.c ****   {
 785:src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 786:src/stm32f1xx_hal_uart.c ****     {
 787:src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 788:src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 789:src/stm32f1xx_hal_uart.c ****         break;
 790:src/stm32f1xx_hal_uart.c **** 
 791:src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 792:src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 793:src/stm32f1xx_hal_uart.c ****         break;
 794:src/stm32f1xx_hal_uart.c **** 
 795:src/stm32f1xx_hal_uart.c ****       default :
 796:src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 797:src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 798:src/stm32f1xx_hal_uart.c **** 
 799:src/stm32f1xx_hal_uart.c ****         /* Return error status */
 800:src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 801:src/stm32f1xx_hal_uart.c ****         break;
 802:src/stm32f1xx_hal_uart.c ****     }
 803:src/stm32f1xx_hal_uart.c ****   }
 804:src/stm32f1xx_hal_uart.c ****   else
 805:src/stm32f1xx_hal_uart.c ****   {
 806:src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 807:src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 808:src/stm32f1xx_hal_uart.c **** 
 809:src/stm32f1xx_hal_uart.c ****     /* Return error status */
 810:src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
 811:src/stm32f1xx_hal_uart.c ****   }
 812:src/stm32f1xx_hal_uart.c **** 
 813:src/stm32f1xx_hal_uart.c ****   /* Release Lock */
 814:src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 815:src/stm32f1xx_hal_uart.c **** 
 816:src/stm32f1xx_hal_uart.c ****   return status;
 817:src/stm32f1xx_hal_uart.c **** }
 818:src/stm32f1xx_hal_uart.c **** 
 819:src/stm32f1xx_hal_uart.c **** /**
 820:src/stm32f1xx_hal_uart.c ****   * @brief  Unregister an UART Callback
 821:src/stm32f1xx_hal_uart.c ****   *         UART callaback is redirected to the weak predefined callback
 822:src/stm32f1xx_hal_uart.c ****   * @param  huart uart handle
 823:src/stm32f1xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be unregistered
 824:src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 825:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 826:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 827:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 828:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 829:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 830:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 831:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 832:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 833:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 834:src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 835:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
ARM GAS  /tmp/ccPoddoo.s 			page 17


 836:src/stm32f1xx_hal_uart.c ****   */
 837:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef
 838:src/stm32f1xx_hal_uart.c **** {
 839:src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 840:src/stm32f1xx_hal_uart.c **** 
 841:src/stm32f1xx_hal_uart.c ****   /* Process locked */
 842:src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 843:src/stm32f1xx_hal_uart.c **** 
 844:src/stm32f1xx_hal_uart.c ****   if (HAL_UART_STATE_READY == huart->gState)
 845:src/stm32f1xx_hal_uart.c ****   {
 846:src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 847:src/stm32f1xx_hal_uart.c ****     {
 848:src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 849:src/stm32f1xx_hal_uart.c ****         huart->TxHalfCpltCallback = HAL_UART_TxHalfCpltCallback;               /* Legacy weak  TxHa
 850:src/stm32f1xx_hal_uart.c ****         break;
 851:src/stm32f1xx_hal_uart.c **** 
 852:src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 853:src/stm32f1xx_hal_uart.c ****         huart->TxCpltCallback = HAL_UART_TxCpltCallback;                       /* Legacy weak TxCpl
 854:src/stm32f1xx_hal_uart.c ****         break;
 855:src/stm32f1xx_hal_uart.c **** 
 856:src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 857:src/stm32f1xx_hal_uart.c ****         huart->RxHalfCpltCallback = HAL_UART_RxHalfCpltCallback;               /* Legacy weak RxHal
 858:src/stm32f1xx_hal_uart.c ****         break;
 859:src/stm32f1xx_hal_uart.c **** 
 860:src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 861:src/stm32f1xx_hal_uart.c ****         huart->RxCpltCallback = HAL_UART_RxCpltCallback;                       /* Legacy weak RxCpl
 862:src/stm32f1xx_hal_uart.c ****         break;
 863:src/stm32f1xx_hal_uart.c **** 
 864:src/stm32f1xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 865:src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback = HAL_UART_ErrorCallback;                         /* Legacy weak Error
 866:src/stm32f1xx_hal_uart.c ****         break;
 867:src/stm32f1xx_hal_uart.c **** 
 868:src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 869:src/stm32f1xx_hal_uart.c ****         huart->AbortCpltCallback = HAL_UART_AbortCpltCallback;                 /* Legacy weak Abort
 870:src/stm32f1xx_hal_uart.c ****         break;
 871:src/stm32f1xx_hal_uart.c **** 
 872:src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 873:src/stm32f1xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak Abort
 874:src/stm32f1xx_hal_uart.c ****         break;
 875:src/stm32f1xx_hal_uart.c **** 
 876:src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 877:src/stm32f1xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = HAL_UART_AbortReceiveCpltCallback;   /* Legacy weak Abort
 878:src/stm32f1xx_hal_uart.c ****         break;
 879:src/stm32f1xx_hal_uart.c **** 
 880:src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 881:src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;                             /* Legacy weak MspIn
 882:src/stm32f1xx_hal_uart.c ****         break;
 883:src/stm32f1xx_hal_uart.c **** 
 884:src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 885:src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;                         /* Legacy weak MspDe
 886:src/stm32f1xx_hal_uart.c ****         break;
 887:src/stm32f1xx_hal_uart.c **** 
 888:src/stm32f1xx_hal_uart.c ****       default :
 889:src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 890:src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 891:src/stm32f1xx_hal_uart.c **** 
 892:src/stm32f1xx_hal_uart.c ****         /* Return error status */
ARM GAS  /tmp/ccPoddoo.s 			page 18


 893:src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 894:src/stm32f1xx_hal_uart.c ****         break;
 895:src/stm32f1xx_hal_uart.c ****     }
 896:src/stm32f1xx_hal_uart.c ****   }
 897:src/stm32f1xx_hal_uart.c ****   else if (HAL_UART_STATE_RESET == huart->gState)
 898:src/stm32f1xx_hal_uart.c ****   {
 899:src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 900:src/stm32f1xx_hal_uart.c ****     {
 901:src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 902:src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;
 903:src/stm32f1xx_hal_uart.c ****         break;
 904:src/stm32f1xx_hal_uart.c **** 
 905:src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 906:src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;
 907:src/stm32f1xx_hal_uart.c ****         break;
 908:src/stm32f1xx_hal_uart.c **** 
 909:src/stm32f1xx_hal_uart.c ****       default :
 910:src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 911:src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 912:src/stm32f1xx_hal_uart.c **** 
 913:src/stm32f1xx_hal_uart.c ****         /* Return error status */
 914:src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 915:src/stm32f1xx_hal_uart.c ****         break;
 916:src/stm32f1xx_hal_uart.c ****     }
 917:src/stm32f1xx_hal_uart.c ****   }
 918:src/stm32f1xx_hal_uart.c ****   else
 919:src/stm32f1xx_hal_uart.c ****   {
 920:src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 921:src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 922:src/stm32f1xx_hal_uart.c **** 
 923:src/stm32f1xx_hal_uart.c ****     /* Return error status */
 924:src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
 925:src/stm32f1xx_hal_uart.c ****   }
 926:src/stm32f1xx_hal_uart.c **** 
 927:src/stm32f1xx_hal_uart.c ****   /* Release Lock */
 928:src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 929:src/stm32f1xx_hal_uart.c **** 
 930:src/stm32f1xx_hal_uart.c ****   return status;
 931:src/stm32f1xx_hal_uart.c **** }
 932:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 933:src/stm32f1xx_hal_uart.c **** 
 934:src/stm32f1xx_hal_uart.c **** /**
 935:src/stm32f1xx_hal_uart.c ****   * @}
 936:src/stm32f1xx_hal_uart.c ****   */
 937:src/stm32f1xx_hal_uart.c **** 
 938:src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
 939:src/stm32f1xx_hal_uart.c ****   *  @brief UART Transmit and Receive functions
 940:src/stm32f1xx_hal_uart.c ****   *
 941:src/stm32f1xx_hal_uart.c **** @verbatim
 942:src/stm32f1xx_hal_uart.c ****  ===============================================================================
 943:src/stm32f1xx_hal_uart.c ****                       ##### IO operation functions #####
 944:src/stm32f1xx_hal_uart.c ****  ===============================================================================
 945:src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
 946:src/stm32f1xx_hal_uart.c ****     and Half duplex data transfers.
 947:src/stm32f1xx_hal_uart.c **** 
 948:src/stm32f1xx_hal_uart.c ****     (#) There are two modes of transfer:
 949:src/stm32f1xx_hal_uart.c ****        (+) Blocking mode: The communication is performed in polling mode.
ARM GAS  /tmp/ccPoddoo.s 			page 19


 950:src/stm32f1xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
 951:src/stm32f1xx_hal_uart.c ****            after finishing transfer.
 952:src/stm32f1xx_hal_uart.c ****        (+) Non-Blocking mode: The communication is performed using Interrupts
 953:src/stm32f1xx_hal_uart.c ****            or DMA, these API's return the HAL status.
 954:src/stm32f1xx_hal_uart.c ****            The end of the data processing will be indicated through the
 955:src/stm32f1xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
 956:src/stm32f1xx_hal_uart.c ****            using DMA mode.
 957:src/stm32f1xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
 958:src/stm32f1xx_hal_uart.c ****            will be executed respectively at the end of the transmit or receive process
 959:src/stm32f1xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
 960:src/stm32f1xx_hal_uart.c **** 
 961:src/stm32f1xx_hal_uart.c ****     (#) Blocking mode API's are :
 962:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit()
 963:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive()
 964:src/stm32f1xx_hal_uart.c **** 
 965:src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
 966:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit_IT()
 967:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive_IT()
 968:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_IRQHandler()
 969:src/stm32f1xx_hal_uart.c **** 
 970:src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
 971:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit_DMA()
 972:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive_DMA()
 973:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAPause()
 974:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAResume()
 975:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAStop()
 976:src/stm32f1xx_hal_uart.c **** 
 977:src/stm32f1xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
 978:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_TxHalfCpltCallback()
 979:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_TxCpltCallback()
 980:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_RxHalfCpltCallback()
 981:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_RxCpltCallback()
 982:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_ErrorCallback()
 983:src/stm32f1xx_hal_uart.c **** 
 984:src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
 985:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Abort()
 986:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit()
 987:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceive()
 988:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Abort_IT()
 989:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit_IT()
 990:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceive_IT()
 991:src/stm32f1xx_hal_uart.c **** 
 992:src/stm32f1xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
 993:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortCpltCallback()
 994:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmitCpltCallback()
 995:src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceiveCpltCallback()
 996:src/stm32f1xx_hal_uart.c **** 
 997:src/stm32f1xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
 998:src/stm32f1xx_hal_uart.c ****         Errors are handled as follows :
 999:src/stm32f1xx_hal_uart.c ****        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but er
1000:src/stm32f1xx_hal_uart.c ****            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Inte
1001:src/stm32f1xx_hal_uart.c ****            Received character is then retrieved and stored in Rx buffer, Error code is set to allow
1002:src/stm32f1xx_hal_uart.c ****            and HAL_UART_ErrorCallback() user callback is executed. Transfer is kept ongoing on UART
1003:src/stm32f1xx_hal_uart.c ****            If user wants to abort it, Abort services should be called by user.
1004:src/stm32f1xx_hal_uart.c ****        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborte
1005:src/stm32f1xx_hal_uart.c ****            This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
1006:src/stm32f1xx_hal_uart.c ****            Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback() use
ARM GAS  /tmp/ccPoddoo.s 			page 20


1007:src/stm32f1xx_hal_uart.c **** 
1008:src/stm32f1xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
1009:src/stm32f1xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
1010:src/stm32f1xx_hal_uart.c **** 
1011:src/stm32f1xx_hal_uart.c **** @endverbatim
1012:src/stm32f1xx_hal_uart.c ****   * @{
1013:src/stm32f1xx_hal_uart.c ****   */
1014:src/stm32f1xx_hal_uart.c **** 
1015:src/stm32f1xx_hal_uart.c **** /**
1016:src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in blocking mode.
1017:src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1018:src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1019:src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1020:src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1021:src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1022:src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1023:src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1024:src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
1025:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1026:src/stm32f1xx_hal_uart.c ****   */
1027:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
1028:src/stm32f1xx_hal_uart.c **** {
1029:src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
1030:src/stm32f1xx_hal_uart.c ****   uint32_t tickstart = 0U;
1031:src/stm32f1xx_hal_uart.c **** 
1032:src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1033:src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1034:src/stm32f1xx_hal_uart.c ****   {
1035:src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1036:src/stm32f1xx_hal_uart.c ****     {
1037:src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
1038:src/stm32f1xx_hal_uart.c ****     }
1039:src/stm32f1xx_hal_uart.c **** 
1040:src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1041:src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
1042:src/stm32f1xx_hal_uart.c **** 
1043:src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1044:src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1045:src/stm32f1xx_hal_uart.c **** 
1046:src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout managment */
1047:src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
1048:src/stm32f1xx_hal_uart.c **** 
1049:src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
1050:src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
1051:src/stm32f1xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
1052:src/stm32f1xx_hal_uart.c ****     {
1053:src/stm32f1xx_hal_uart.c ****       huart->TxXferCount--;
1054:src/stm32f1xx_hal_uart.c ****       if (huart->Init.WordLength == UART_WORDLENGTH_9B)
1055:src/stm32f1xx_hal_uart.c ****       {
1056:src/stm32f1xx_hal_uart.c ****         if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
1057:src/stm32f1xx_hal_uart.c ****         {
1058:src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
1059:src/stm32f1xx_hal_uart.c ****         }
1060:src/stm32f1xx_hal_uart.c ****         tmp = (uint16_t *) pData;
1061:src/stm32f1xx_hal_uart.c ****         huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
1062:src/stm32f1xx_hal_uart.c ****         if (huart->Init.Parity == UART_PARITY_NONE)
1063:src/stm32f1xx_hal_uart.c ****         {
ARM GAS  /tmp/ccPoddoo.s 			page 21


1064:src/stm32f1xx_hal_uart.c ****           pData += 2U;
1065:src/stm32f1xx_hal_uart.c ****         }
1066:src/stm32f1xx_hal_uart.c ****         else
1067:src/stm32f1xx_hal_uart.c ****         {
1068:src/stm32f1xx_hal_uart.c ****           pData += 1U;
1069:src/stm32f1xx_hal_uart.c ****         }
1070:src/stm32f1xx_hal_uart.c ****       }
1071:src/stm32f1xx_hal_uart.c ****       else
1072:src/stm32f1xx_hal_uart.c ****       {
1073:src/stm32f1xx_hal_uart.c ****         if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
1074:src/stm32f1xx_hal_uart.c ****         {
1075:src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
1076:src/stm32f1xx_hal_uart.c ****         }
1077:src/stm32f1xx_hal_uart.c ****         huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
1078:src/stm32f1xx_hal_uart.c ****       }
1079:src/stm32f1xx_hal_uart.c ****     }
1080:src/stm32f1xx_hal_uart.c **** 
1081:src/stm32f1xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
1082:src/stm32f1xx_hal_uart.c ****     {
1083:src/stm32f1xx_hal_uart.c ****       return HAL_TIMEOUT;
1084:src/stm32f1xx_hal_uart.c ****     }
1085:src/stm32f1xx_hal_uart.c **** 
1086:src/stm32f1xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
1087:src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
1088:src/stm32f1xx_hal_uart.c **** 
1089:src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1090:src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1091:src/stm32f1xx_hal_uart.c **** 
1092:src/stm32f1xx_hal_uart.c ****     return HAL_OK;
1093:src/stm32f1xx_hal_uart.c ****   }
1094:src/stm32f1xx_hal_uart.c ****   else
1095:src/stm32f1xx_hal_uart.c ****   {
1096:src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
1097:src/stm32f1xx_hal_uart.c ****   }
1098:src/stm32f1xx_hal_uart.c **** }
1099:src/stm32f1xx_hal_uart.c **** 
1100:src/stm32f1xx_hal_uart.c **** /**
1101:src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in blocking mode.
1102:src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1103:src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1104:src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1105:src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1106:src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1107:src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1108:src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1109:src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
1110:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1111:src/stm32f1xx_hal_uart.c ****   */
1112:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1113:src/stm32f1xx_hal_uart.c **** {
1114:src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
1115:src/stm32f1xx_hal_uart.c ****   uint32_t tickstart = 0U;
1116:src/stm32f1xx_hal_uart.c **** 
1117:src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1118:src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1119:src/stm32f1xx_hal_uart.c ****   {
1120:src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
ARM GAS  /tmp/ccPoddoo.s 			page 22


1121:src/stm32f1xx_hal_uart.c ****     {
1122:src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
1123:src/stm32f1xx_hal_uart.c ****     }
1124:src/stm32f1xx_hal_uart.c **** 
1125:src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1126:src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
1127:src/stm32f1xx_hal_uart.c **** 
1128:src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1129:src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1130:src/stm32f1xx_hal_uart.c **** 
1131:src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout managment */
1132:src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
1133:src/stm32f1xx_hal_uart.c **** 
1134:src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
1135:src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
1136:src/stm32f1xx_hal_uart.c **** 
1137:src/stm32f1xx_hal_uart.c ****     /* Check the remain data to be received */
1138:src/stm32f1xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
1139:src/stm32f1xx_hal_uart.c ****     {
1140:src/stm32f1xx_hal_uart.c ****       huart->RxXferCount--;
1141:src/stm32f1xx_hal_uart.c ****       if (huart->Init.WordLength == UART_WORDLENGTH_9B)
1142:src/stm32f1xx_hal_uart.c ****       {
1143:src/stm32f1xx_hal_uart.c ****         if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK
1144:src/stm32f1xx_hal_uart.c ****         {
1145:src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
1146:src/stm32f1xx_hal_uart.c ****         }
1147:src/stm32f1xx_hal_uart.c ****         tmp = (uint16_t *) pData;
1148:src/stm32f1xx_hal_uart.c ****         if (huart->Init.Parity == UART_PARITY_NONE)
1149:src/stm32f1xx_hal_uart.c ****         {
1150:src/stm32f1xx_hal_uart.c ****           *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
1151:src/stm32f1xx_hal_uart.c ****           pData += 2U;
1152:src/stm32f1xx_hal_uart.c ****         }
1153:src/stm32f1xx_hal_uart.c ****         else
1154:src/stm32f1xx_hal_uart.c ****         {
1155:src/stm32f1xx_hal_uart.c ****           *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
1156:src/stm32f1xx_hal_uart.c ****           pData += 1U;
1157:src/stm32f1xx_hal_uart.c ****         }
1158:src/stm32f1xx_hal_uart.c **** 
1159:src/stm32f1xx_hal_uart.c ****       }
1160:src/stm32f1xx_hal_uart.c ****       else
1161:src/stm32f1xx_hal_uart.c ****       {
1162:src/stm32f1xx_hal_uart.c ****         if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK
1163:src/stm32f1xx_hal_uart.c ****         {
1164:src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
1165:src/stm32f1xx_hal_uart.c ****         }
1166:src/stm32f1xx_hal_uart.c ****         if (huart->Init.Parity == UART_PARITY_NONE)
1167:src/stm32f1xx_hal_uart.c ****         {
1168:src/stm32f1xx_hal_uart.c ****           *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
1169:src/stm32f1xx_hal_uart.c ****         }
1170:src/stm32f1xx_hal_uart.c ****         else
1171:src/stm32f1xx_hal_uart.c ****         {
1172:src/stm32f1xx_hal_uart.c ****           *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
1173:src/stm32f1xx_hal_uart.c ****         }
1174:src/stm32f1xx_hal_uart.c **** 
1175:src/stm32f1xx_hal_uart.c ****       }
1176:src/stm32f1xx_hal_uart.c ****     }
1177:src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccPoddoo.s 			page 23


1178:src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1179:src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1180:src/stm32f1xx_hal_uart.c **** 
1181:src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1182:src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1183:src/stm32f1xx_hal_uart.c **** 
1184:src/stm32f1xx_hal_uart.c ****     return HAL_OK;
1185:src/stm32f1xx_hal_uart.c ****   }
1186:src/stm32f1xx_hal_uart.c ****   else
1187:src/stm32f1xx_hal_uart.c ****   {
1188:src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
1189:src/stm32f1xx_hal_uart.c ****   }
1190:src/stm32f1xx_hal_uart.c **** }
1191:src/stm32f1xx_hal_uart.c **** 
1192:src/stm32f1xx_hal_uart.c **** /**
1193:src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
1194:src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1195:src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1196:src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1197:src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1198:src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1199:src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1200:src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1201:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1202:src/stm32f1xx_hal_uart.c ****   */
1203:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1204:src/stm32f1xx_hal_uart.c **** {
1205:src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1206:src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1207:src/stm32f1xx_hal_uart.c ****   {
1208:src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1209:src/stm32f1xx_hal_uart.c ****     {
1210:src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
1211:src/stm32f1xx_hal_uart.c ****     }
1212:src/stm32f1xx_hal_uart.c **** 
1213:src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1214:src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
1215:src/stm32f1xx_hal_uart.c **** 
1216:src/stm32f1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
1217:src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
1218:src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
1219:src/stm32f1xx_hal_uart.c **** 
1220:src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1221:src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1222:src/stm32f1xx_hal_uart.c **** 
1223:src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1224:src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1225:src/stm32f1xx_hal_uart.c **** 
1226:src/stm32f1xx_hal_uart.c ****     /* Enable the UART Transmit data register empty Interrupt */
1227:src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
1228:src/stm32f1xx_hal_uart.c **** 
1229:src/stm32f1xx_hal_uart.c ****     return HAL_OK;
1230:src/stm32f1xx_hal_uart.c ****   }
1231:src/stm32f1xx_hal_uart.c ****   else
1232:src/stm32f1xx_hal_uart.c ****   {
1233:src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
1234:src/stm32f1xx_hal_uart.c ****   }
ARM GAS  /tmp/ccPoddoo.s 			page 24


1235:src/stm32f1xx_hal_uart.c **** }
1236:src/stm32f1xx_hal_uart.c **** 
1237:src/stm32f1xx_hal_uart.c **** /**
1238:src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode.
1239:src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1240:src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1241:src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1242:src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1243:src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1244:src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1245:src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1246:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1247:src/stm32f1xx_hal_uart.c ****   */
1248:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1249:src/stm32f1xx_hal_uart.c **** {
1250:src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1251:src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1252:src/stm32f1xx_hal_uart.c ****   {
1253:src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1254:src/stm32f1xx_hal_uart.c ****     {
1255:src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
1256:src/stm32f1xx_hal_uart.c ****     }
1257:src/stm32f1xx_hal_uart.c **** 
1258:src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1259:src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
1260:src/stm32f1xx_hal_uart.c **** 
1261:src/stm32f1xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
1262:src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
1263:src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
1264:src/stm32f1xx_hal_uart.c **** 
1265:src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1266:src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1267:src/stm32f1xx_hal_uart.c **** 
1268:src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1269:src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1270:src/stm32f1xx_hal_uart.c **** 
1271:src/stm32f1xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
1272:src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
1273:src/stm32f1xx_hal_uart.c **** 
1274:src/stm32f1xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1275:src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
1276:src/stm32f1xx_hal_uart.c **** 
1277:src/stm32f1xx_hal_uart.c ****     /* Enable the UART Data Register not empty Interrupt */
1278:src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
1279:src/stm32f1xx_hal_uart.c **** 
1280:src/stm32f1xx_hal_uart.c ****     return HAL_OK;
1281:src/stm32f1xx_hal_uart.c ****   }
1282:src/stm32f1xx_hal_uart.c ****   else
1283:src/stm32f1xx_hal_uart.c ****   {
1284:src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
1285:src/stm32f1xx_hal_uart.c ****   }
1286:src/stm32f1xx_hal_uart.c **** }
1287:src/stm32f1xx_hal_uart.c **** 
1288:src/stm32f1xx_hal_uart.c **** /**
1289:src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in DMA mode.
1290:src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1291:src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
ARM GAS  /tmp/ccPoddoo.s 			page 25


1292:src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1293:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1294:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1295:src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1296:src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1297:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1298:src/stm32f1xx_hal_uart.c ****   */
1299:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1300:src/stm32f1xx_hal_uart.c **** {
1301:src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
1302:src/stm32f1xx_hal_uart.c **** 
1303:src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1304:src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1305:src/stm32f1xx_hal_uart.c ****   {
1306:src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1307:src/stm32f1xx_hal_uart.c ****     {
1308:src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
1309:src/stm32f1xx_hal_uart.c ****     }
1310:src/stm32f1xx_hal_uart.c **** 
1311:src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1312:src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
1313:src/stm32f1xx_hal_uart.c **** 
1314:src/stm32f1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
1315:src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
1316:src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
1317:src/stm32f1xx_hal_uart.c **** 
1318:src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1319:src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1320:src/stm32f1xx_hal_uart.c **** 
1321:src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1322:src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
1323:src/stm32f1xx_hal_uart.c **** 
1324:src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1325:src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
1326:src/stm32f1xx_hal_uart.c **** 
1327:src/stm32f1xx_hal_uart.c ****     /* Set the DMA error callback */
1328:src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferErrorCallback = UART_DMAError;
1329:src/stm32f1xx_hal_uart.c **** 
1330:src/stm32f1xx_hal_uart.c ****     /* Set the DMA abort callback */
1331:src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferAbortCallback = NULL;
1332:src/stm32f1xx_hal_uart.c **** 
1333:src/stm32f1xx_hal_uart.c ****     /* Enable the UART transmit DMA channel */
1334:src/stm32f1xx_hal_uart.c ****     tmp = (uint32_t *)&pData;
1335:src/stm32f1xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
1336:src/stm32f1xx_hal_uart.c **** 
1337:src/stm32f1xx_hal_uart.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
1338:src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
1339:src/stm32f1xx_hal_uart.c **** 
1340:src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1341:src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1342:src/stm32f1xx_hal_uart.c **** 
1343:src/stm32f1xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1344:src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
1345:src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1346:src/stm32f1xx_hal_uart.c **** 
1347:src/stm32f1xx_hal_uart.c ****     return HAL_OK;
1348:src/stm32f1xx_hal_uart.c ****   }
ARM GAS  /tmp/ccPoddoo.s 			page 26


1349:src/stm32f1xx_hal_uart.c ****   else
1350:src/stm32f1xx_hal_uart.c ****   {
1351:src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
1352:src/stm32f1xx_hal_uart.c ****   }
1353:src/stm32f1xx_hal_uart.c **** }
1354:src/stm32f1xx_hal_uart.c **** 
1355:src/stm32f1xx_hal_uart.c **** /**
1356:src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in DMA mode.
1357:src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1358:src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1359:src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1360:src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1361:src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1362:src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1363:src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1364:src/stm32f1xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
1365:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1366:src/stm32f1xx_hal_uart.c ****   */
1367:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1368:src/stm32f1xx_hal_uart.c **** {
1369:src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
1370:src/stm32f1xx_hal_uart.c **** 
1371:src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1372:src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1373:src/stm32f1xx_hal_uart.c ****   {
1374:src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1375:src/stm32f1xx_hal_uart.c ****     {
1376:src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
1377:src/stm32f1xx_hal_uart.c ****     }
1378:src/stm32f1xx_hal_uart.c **** 
1379:src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1380:src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
1381:src/stm32f1xx_hal_uart.c **** 
1382:src/stm32f1xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
1383:src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
1384:src/stm32f1xx_hal_uart.c **** 
1385:src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1386:src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1387:src/stm32f1xx_hal_uart.c **** 
1388:src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1389:src/stm32f1xx_hal_uart.c ****     huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
1390:src/stm32f1xx_hal_uart.c **** 
1391:src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1392:src/stm32f1xx_hal_uart.c ****     huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
1393:src/stm32f1xx_hal_uart.c **** 
1394:src/stm32f1xx_hal_uart.c ****     /* Set the DMA error callback */
1395:src/stm32f1xx_hal_uart.c ****     huart->hdmarx->XferErrorCallback = UART_DMAError;
1396:src/stm32f1xx_hal_uart.c **** 
1397:src/stm32f1xx_hal_uart.c ****     /* Set the DMA abort callback */
1398:src/stm32f1xx_hal_uart.c ****     huart->hdmarx->XferAbortCallback = NULL;
1399:src/stm32f1xx_hal_uart.c **** 
1400:src/stm32f1xx_hal_uart.c ****     /* Enable the DMA channel */
1401:src/stm32f1xx_hal_uart.c ****     tmp = (uint32_t *)&pData;
1402:src/stm32f1xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
1403:src/stm32f1xx_hal_uart.c **** 
1404:src/stm32f1xx_hal_uart.c ****     /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the sec
1405:src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
ARM GAS  /tmp/ccPoddoo.s 			page 27


1406:src/stm32f1xx_hal_uart.c **** 
1407:src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1408:src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1409:src/stm32f1xx_hal_uart.c **** 
1410:src/stm32f1xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
1411:src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1412:src/stm32f1xx_hal_uart.c **** 
1413:src/stm32f1xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1414:src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1415:src/stm32f1xx_hal_uart.c **** 
1416:src/stm32f1xx_hal_uart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit
1417:src/stm32f1xx_hal_uart.c ****     in the UART CR3 register */
1418:src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1419:src/stm32f1xx_hal_uart.c **** 
1420:src/stm32f1xx_hal_uart.c ****     return HAL_OK;
1421:src/stm32f1xx_hal_uart.c ****   }
1422:src/stm32f1xx_hal_uart.c ****   else
1423:src/stm32f1xx_hal_uart.c ****   {
1424:src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
1425:src/stm32f1xx_hal_uart.c ****   }
1426:src/stm32f1xx_hal_uart.c **** }
1427:src/stm32f1xx_hal_uart.c **** 
1428:src/stm32f1xx_hal_uart.c **** /**
1429:src/stm32f1xx_hal_uart.c ****   * @brief Pauses the DMA Transfer.
1430:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1431:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1432:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1433:src/stm32f1xx_hal_uart.c ****   */
1434:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1435:src/stm32f1xx_hal_uart.c **** {
1436:src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
1437:src/stm32f1xx_hal_uart.c **** 
1438:src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1439:src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
1440:src/stm32f1xx_hal_uart.c **** 
1441:src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
1442:src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
1443:src/stm32f1xx_hal_uart.c ****   {
1444:src/stm32f1xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1445:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1446:src/stm32f1xx_hal_uart.c ****   }
1447:src/stm32f1xx_hal_uart.c **** 
1448:src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
1449:src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
1450:src/stm32f1xx_hal_uart.c ****   {
1451:src/stm32f1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1452:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1453:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1454:src/stm32f1xx_hal_uart.c **** 
1455:src/stm32f1xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1456:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1457:src/stm32f1xx_hal_uart.c ****   }
1458:src/stm32f1xx_hal_uart.c **** 
1459:src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
1460:src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1461:src/stm32f1xx_hal_uart.c **** 
1462:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
ARM GAS  /tmp/ccPoddoo.s 			page 28


1463:src/stm32f1xx_hal_uart.c **** }
1464:src/stm32f1xx_hal_uart.c **** 
1465:src/stm32f1xx_hal_uart.c **** /**
1466:src/stm32f1xx_hal_uart.c ****   * @brief Resumes the DMA Transfer.
1467:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1468:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1469:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1470:src/stm32f1xx_hal_uart.c ****   */
1471:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1472:src/stm32f1xx_hal_uart.c **** {
1473:src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1474:src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
1475:src/stm32f1xx_hal_uart.c **** 
1476:src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
1477:src/stm32f1xx_hal_uart.c ****   {
1478:src/stm32f1xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1479:src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1480:src/stm32f1xx_hal_uart.c ****   }
1481:src/stm32f1xx_hal_uart.c **** 
1482:src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
1483:src/stm32f1xx_hal_uart.c ****   {
1484:src/stm32f1xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer*/
1485:src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
1486:src/stm32f1xx_hal_uart.c **** 
1487:src/stm32f1xx_hal_uart.c ****     /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
1488:src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1489:src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1490:src/stm32f1xx_hal_uart.c **** 
1491:src/stm32f1xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1492:src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1493:src/stm32f1xx_hal_uart.c ****   }
1494:src/stm32f1xx_hal_uart.c **** 
1495:src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
1496:src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1497:src/stm32f1xx_hal_uart.c **** 
1498:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
1499:src/stm32f1xx_hal_uart.c **** }
1500:src/stm32f1xx_hal_uart.c **** 
1501:src/stm32f1xx_hal_uart.c **** /**
1502:src/stm32f1xx_hal_uart.c ****   * @brief Stops the DMA Transfer.
1503:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1504:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1505:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1506:src/stm32f1xx_hal_uart.c ****   */
1507:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1508:src/stm32f1xx_hal_uart.c **** {
1509:src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
1510:src/stm32f1xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1511:src/stm32f1xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1512:src/stm32f1xx_hal_uart.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
1513:src/stm32f1xx_hal_uart.c ****      and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1514:src/stm32f1xx_hal_uart.c ****      */
1515:src/stm32f1xx_hal_uart.c **** 
1516:src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1517:src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
1518:src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
1519:src/stm32f1xx_hal_uart.c ****   {
ARM GAS  /tmp/ccPoddoo.s 			page 29


1520:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1521:src/stm32f1xx_hal_uart.c **** 
1522:src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1523:src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1524:src/stm32f1xx_hal_uart.c ****     {
1525:src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
1526:src/stm32f1xx_hal_uart.c ****     }
1527:src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
1528:src/stm32f1xx_hal_uart.c ****   }
1529:src/stm32f1xx_hal_uart.c **** 
1530:src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1531:src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
1532:src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
1533:src/stm32f1xx_hal_uart.c ****   {
1534:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1535:src/stm32f1xx_hal_uart.c **** 
1536:src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1537:src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1538:src/stm32f1xx_hal_uart.c ****     {
1539:src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
1540:src/stm32f1xx_hal_uart.c ****     }
1541:src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
1542:src/stm32f1xx_hal_uart.c ****   }
1543:src/stm32f1xx_hal_uart.c **** 
1544:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
1545:src/stm32f1xx_hal_uart.c **** }
1546:src/stm32f1xx_hal_uart.c **** 
1547:src/stm32f1xx_hal_uart.c **** /**
1548:src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1549:src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1550:src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1551:src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1552:src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1553:src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1554:src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1555:src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1556:src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1557:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1558:src/stm32f1xx_hal_uart.c **** */
1559:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1560:src/stm32f1xx_hal_uart.c **** {
1561:src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1562:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1563:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1564:src/stm32f1xx_hal_uart.c **** 
1565:src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1566:src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1567:src/stm32f1xx_hal_uart.c ****   {
1568:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1569:src/stm32f1xx_hal_uart.c **** 
1570:src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
1571:src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1572:src/stm32f1xx_hal_uart.c ****     {
1573:src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1574:src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1575:src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1576:src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccPoddoo.s 			page 30


1577:src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1578:src/stm32f1xx_hal_uart.c ****       {
1579:src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1580:src/stm32f1xx_hal_uart.c ****         {
1581:src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1582:src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1583:src/stm32f1xx_hal_uart.c **** 
1584:src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
1585:src/stm32f1xx_hal_uart.c ****         }
1586:src/stm32f1xx_hal_uart.c ****       }
1587:src/stm32f1xx_hal_uart.c ****     }
1588:src/stm32f1xx_hal_uart.c ****   }
1589:src/stm32f1xx_hal_uart.c **** 
1590:src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1591:src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1592:src/stm32f1xx_hal_uart.c ****   {
1593:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1594:src/stm32f1xx_hal_uart.c **** 
1595:src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
1596:src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1597:src/stm32f1xx_hal_uart.c ****     {
1598:src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1599:src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1600:src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1601:src/stm32f1xx_hal_uart.c **** 
1602:src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1603:src/stm32f1xx_hal_uart.c ****       {
1604:src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1605:src/stm32f1xx_hal_uart.c ****         {
1606:src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1607:src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1608:src/stm32f1xx_hal_uart.c **** 
1609:src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
1610:src/stm32f1xx_hal_uart.c ****         }
1611:src/stm32f1xx_hal_uart.c ****       }
1612:src/stm32f1xx_hal_uart.c ****     }
1613:src/stm32f1xx_hal_uart.c ****   }
1614:src/stm32f1xx_hal_uart.c **** 
1615:src/stm32f1xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1616:src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
1617:src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
1618:src/stm32f1xx_hal_uart.c **** 
1619:src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
1620:src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
1621:src/stm32f1xx_hal_uart.c **** 
1622:src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState and huart->gState to Ready */
1623:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
1624:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
1625:src/stm32f1xx_hal_uart.c **** 
1626:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
1627:src/stm32f1xx_hal_uart.c **** }
1628:src/stm32f1xx_hal_uart.c **** 
1629:src/stm32f1xx_hal_uart.c **** /**
1630:src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1631:src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1632:src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1633:src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
ARM GAS  /tmp/ccPoddoo.s 			page 31


1634:src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1635:src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1636:src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1637:src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1638:src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1639:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1640:src/stm32f1xx_hal_uart.c **** */
1641:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1642:src/stm32f1xx_hal_uart.c **** {
1643:src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1644:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1645:src/stm32f1xx_hal_uart.c **** 
1646:src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1647:src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1648:src/stm32f1xx_hal_uart.c ****   {
1649:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1650:src/stm32f1xx_hal_uart.c **** 
1651:src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1652:src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1653:src/stm32f1xx_hal_uart.c ****     {
1654:src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1655:src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1656:src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1657:src/stm32f1xx_hal_uart.c **** 
1658:src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1659:src/stm32f1xx_hal_uart.c ****       {
1660:src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1661:src/stm32f1xx_hal_uart.c ****         {
1662:src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1663:src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1664:src/stm32f1xx_hal_uart.c **** 
1665:src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
1666:src/stm32f1xx_hal_uart.c ****         }
1667:src/stm32f1xx_hal_uart.c ****       }
1668:src/stm32f1xx_hal_uart.c ****     }
1669:src/stm32f1xx_hal_uart.c ****   }
1670:src/stm32f1xx_hal_uart.c **** 
1671:src/stm32f1xx_hal_uart.c ****   /* Reset Tx transfer counter */
1672:src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
1673:src/stm32f1xx_hal_uart.c **** 
1674:src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1675:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
1676:src/stm32f1xx_hal_uart.c **** 
1677:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
1678:src/stm32f1xx_hal_uart.c **** }
1679:src/stm32f1xx_hal_uart.c **** 
1680:src/stm32f1xx_hal_uart.c **** /**
1681:src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1682:src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1683:src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1684:src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1685:src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1686:src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1687:src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1688:src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1689:src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1690:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
ARM GAS  /tmp/ccPoddoo.s 			page 32


1691:src/stm32f1xx_hal_uart.c **** */
1692:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
1693:src/stm32f1xx_hal_uart.c **** {
1694:src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1695:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1696:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1697:src/stm32f1xx_hal_uart.c **** 
1698:src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1699:src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1700:src/stm32f1xx_hal_uart.c ****   {
1701:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1702:src/stm32f1xx_hal_uart.c **** 
1703:src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1704:src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1705:src/stm32f1xx_hal_uart.c ****     {
1706:src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1707:src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1708:src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1709:src/stm32f1xx_hal_uart.c **** 
1710:src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1711:src/stm32f1xx_hal_uart.c ****       {
1712:src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1713:src/stm32f1xx_hal_uart.c ****         {
1714:src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1715:src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1716:src/stm32f1xx_hal_uart.c **** 
1717:src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
1718:src/stm32f1xx_hal_uart.c ****         }
1719:src/stm32f1xx_hal_uart.c ****       }
1720:src/stm32f1xx_hal_uart.c ****     }
1721:src/stm32f1xx_hal_uart.c ****   }
1722:src/stm32f1xx_hal_uart.c **** 
1723:src/stm32f1xx_hal_uart.c ****   /* Reset Rx transfer counter */
1724:src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
1725:src/stm32f1xx_hal_uart.c **** 
1726:src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
1727:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
1728:src/stm32f1xx_hal_uart.c **** 
1729:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
1730:src/stm32f1xx_hal_uart.c **** }
1731:src/stm32f1xx_hal_uart.c **** 
1732:src/stm32f1xx_hal_uart.c **** /**
1733:src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1734:src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1735:src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1736:src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1737:src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1738:src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1739:src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1740:src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1741:src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1742:src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1743:src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1744:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1745:src/stm32f1xx_hal_uart.c **** */
1746:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
1747:src/stm32f1xx_hal_uart.c **** {
ARM GAS  /tmp/ccPoddoo.s 			page 33


1748:src/stm32f1xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
1749:src/stm32f1xx_hal_uart.c **** 
1750:src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1751:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1752:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1753:src/stm32f1xx_hal_uart.c **** 
1754:src/stm32f1xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
1755:src/stm32f1xx_hal_uart.c ****      before any call to DMA Abort functions */
1756:src/stm32f1xx_hal_uart.c ****   /* DMA Tx Handle is valid */
1757:src/stm32f1xx_hal_uart.c ****   if (huart->hdmatx != NULL)
1758:src/stm32f1xx_hal_uart.c ****   {
1759:src/stm32f1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
1760:src/stm32f1xx_hal_uart.c ****        Otherwise, set it to NULL */
1761:src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1762:src/stm32f1xx_hal_uart.c ****     {
1763:src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
1764:src/stm32f1xx_hal_uart.c ****     }
1765:src/stm32f1xx_hal_uart.c ****     else
1766:src/stm32f1xx_hal_uart.c ****     {
1767:src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1768:src/stm32f1xx_hal_uart.c ****     }
1769:src/stm32f1xx_hal_uart.c ****   }
1770:src/stm32f1xx_hal_uart.c ****   /* DMA Rx Handle is valid */
1771:src/stm32f1xx_hal_uart.c ****   if (huart->hdmarx != NULL)
1772:src/stm32f1xx_hal_uart.c ****   {
1773:src/stm32f1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
1774:src/stm32f1xx_hal_uart.c ****        Otherwise, set it to NULL */
1775:src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1776:src/stm32f1xx_hal_uart.c ****     {
1777:src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
1778:src/stm32f1xx_hal_uart.c ****     }
1779:src/stm32f1xx_hal_uart.c ****     else
1780:src/stm32f1xx_hal_uart.c ****     {
1781:src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1782:src/stm32f1xx_hal_uart.c ****     }
1783:src/stm32f1xx_hal_uart.c ****   }
1784:src/stm32f1xx_hal_uart.c **** 
1785:src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1786:src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1787:src/stm32f1xx_hal_uart.c ****   {
1788:src/stm32f1xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
1789:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1790:src/stm32f1xx_hal_uart.c **** 
1791:src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1792:src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1793:src/stm32f1xx_hal_uart.c ****     {
1794:src/stm32f1xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised :
1795:src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1796:src/stm32f1xx_hal_uart.c **** 
1797:src/stm32f1xx_hal_uart.c ****       /* Abort DMA TX */
1798:src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
1799:src/stm32f1xx_hal_uart.c ****       {
1800:src/stm32f1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
1801:src/stm32f1xx_hal_uart.c ****       }
1802:src/stm32f1xx_hal_uart.c ****       else
1803:src/stm32f1xx_hal_uart.c ****       {
1804:src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x00U;
ARM GAS  /tmp/ccPoddoo.s 			page 34


1805:src/stm32f1xx_hal_uart.c ****       }
1806:src/stm32f1xx_hal_uart.c ****     }
1807:src/stm32f1xx_hal_uart.c ****   }
1808:src/stm32f1xx_hal_uart.c **** 
1809:src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1810:src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1811:src/stm32f1xx_hal_uart.c ****   {
1812:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1813:src/stm32f1xx_hal_uart.c **** 
1814:src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
1815:src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1816:src/stm32f1xx_hal_uart.c ****     {
1817:src/stm32f1xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised :
1818:src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1819:src/stm32f1xx_hal_uart.c **** 
1820:src/stm32f1xx_hal_uart.c ****       /* Abort DMA RX */
1821:src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
1822:src/stm32f1xx_hal_uart.c ****       {
1823:src/stm32f1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
1824:src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x01U;
1825:src/stm32f1xx_hal_uart.c ****       }
1826:src/stm32f1xx_hal_uart.c ****       else
1827:src/stm32f1xx_hal_uart.c ****       {
1828:src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x00U;
1829:src/stm32f1xx_hal_uart.c ****       }
1830:src/stm32f1xx_hal_uart.c ****     }
1831:src/stm32f1xx_hal_uart.c ****   }
1832:src/stm32f1xx_hal_uart.c **** 
1833:src/stm32f1xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1834:src/stm32f1xx_hal_uart.c ****   if (AbortCplt == 0x01U)
1835:src/stm32f1xx_hal_uart.c ****   {
1836:src/stm32f1xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
1837:src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
1838:src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
1839:src/stm32f1xx_hal_uart.c **** 
1840:src/stm32f1xx_hal_uart.c ****     /* Reset ErrorCode */
1841:src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1842:src/stm32f1xx_hal_uart.c **** 
1843:src/stm32f1xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
1844:src/stm32f1xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
1845:src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1846:src/stm32f1xx_hal_uart.c **** 
1847:src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1848:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1849:src/stm32f1xx_hal_uart.c ****     /* Call registered Abort complete callback */
1850:src/stm32f1xx_hal_uart.c ****     huart->AbortCpltCallback(huart);
1851:src/stm32f1xx_hal_uart.c **** #else
1852:src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort complete callback */
1853:src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
1854:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1855:src/stm32f1xx_hal_uart.c ****   }
1856:src/stm32f1xx_hal_uart.c **** 
1857:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
1858:src/stm32f1xx_hal_uart.c **** }
1859:src/stm32f1xx_hal_uart.c **** 
1860:src/stm32f1xx_hal_uart.c **** /**
1861:src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
ARM GAS  /tmp/ccPoddoo.s 			page 35


1862:src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1863:src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1864:src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1865:src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1866:src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1867:src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1868:src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1869:src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1870:src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1871:src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1872:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1873:src/stm32f1xx_hal_uart.c **** */
1874:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
1875:src/stm32f1xx_hal_uart.c **** {
1876:src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1877:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1878:src/stm32f1xx_hal_uart.c **** 
1879:src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1880:src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1881:src/stm32f1xx_hal_uart.c ****   {
1882:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1883:src/stm32f1xx_hal_uart.c **** 
1884:src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1885:src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1886:src/stm32f1xx_hal_uart.c ****     {
1887:src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
1888:src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1889:src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
1890:src/stm32f1xx_hal_uart.c **** 
1891:src/stm32f1xx_hal_uart.c ****       /* Abort DMA TX */
1892:src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
1893:src/stm32f1xx_hal_uart.c ****       {
1894:src/stm32f1xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
1895:src/stm32f1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
1896:src/stm32f1xx_hal_uart.c ****       }
1897:src/stm32f1xx_hal_uart.c ****     }
1898:src/stm32f1xx_hal_uart.c ****     else
1899:src/stm32f1xx_hal_uart.c ****     {
1900:src/stm32f1xx_hal_uart.c ****       /* Reset Tx transfer counter */
1901:src/stm32f1xx_hal_uart.c ****       huart->TxXferCount = 0x00U;
1902:src/stm32f1xx_hal_uart.c **** 
1903:src/stm32f1xx_hal_uart.c ****       /* Restore huart->gState to Ready */
1904:src/stm32f1xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
1905:src/stm32f1xx_hal_uart.c **** 
1906:src/stm32f1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1907:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1908:src/stm32f1xx_hal_uart.c ****       /* Call registered Abort Transmit Complete Callback */
1909:src/stm32f1xx_hal_uart.c ****       huart->AbortTransmitCpltCallback(huart);
1910:src/stm32f1xx_hal_uart.c **** #else
1911:src/stm32f1xx_hal_uart.c ****       /* Call legacy weak Abort Transmit Complete Callback */
1912:src/stm32f1xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
1913:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1914:src/stm32f1xx_hal_uart.c ****     }
1915:src/stm32f1xx_hal_uart.c ****   }
1916:src/stm32f1xx_hal_uart.c ****   else
1917:src/stm32f1xx_hal_uart.c ****   {
1918:src/stm32f1xx_hal_uart.c ****     /* Reset Tx transfer counter */
ARM GAS  /tmp/ccPoddoo.s 			page 36


1919:src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
1920:src/stm32f1xx_hal_uart.c **** 
1921:src/stm32f1xx_hal_uart.c ****     /* Restore huart->gState to Ready */
1922:src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
1923:src/stm32f1xx_hal_uart.c **** 
1924:src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1925:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1926:src/stm32f1xx_hal_uart.c ****     /* Call registered Abort Transmit Complete Callback */
1927:src/stm32f1xx_hal_uart.c ****     huart->AbortTransmitCpltCallback(huart);
1928:src/stm32f1xx_hal_uart.c **** #else
1929:src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort Transmit Complete Callback */
1930:src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
1931:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1932:src/stm32f1xx_hal_uart.c ****   }
1933:src/stm32f1xx_hal_uart.c **** 
1934:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
1935:src/stm32f1xx_hal_uart.c **** }
1936:src/stm32f1xx_hal_uart.c **** 
1937:src/stm32f1xx_hal_uart.c **** /**
1938:src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
1939:src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1940:src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1941:src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1942:src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1943:src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1944:src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1945:src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1946:src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1947:src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1948:src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1949:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1950:src/stm32f1xx_hal_uart.c **** */
1951:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
1952:src/stm32f1xx_hal_uart.c **** {
1953:src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1954:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1955:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1956:src/stm32f1xx_hal_uart.c **** 
1957:src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1958:src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1959:src/stm32f1xx_hal_uart.c ****   {
1960:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1961:src/stm32f1xx_hal_uart.c **** 
1962:src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1963:src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1964:src/stm32f1xx_hal_uart.c ****     {
1965:src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
1966:src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1967:src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
1968:src/stm32f1xx_hal_uart.c **** 
1969:src/stm32f1xx_hal_uart.c ****       /* Abort DMA RX */
1970:src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
1971:src/stm32f1xx_hal_uart.c ****       {
1972:src/stm32f1xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
1973:src/stm32f1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
1974:src/stm32f1xx_hal_uart.c ****       }
1975:src/stm32f1xx_hal_uart.c ****     }
ARM GAS  /tmp/ccPoddoo.s 			page 37


1976:src/stm32f1xx_hal_uart.c ****     else
1977:src/stm32f1xx_hal_uart.c ****     {
1978:src/stm32f1xx_hal_uart.c ****       /* Reset Rx transfer counter */
1979:src/stm32f1xx_hal_uart.c ****       huart->RxXferCount = 0x00U;
1980:src/stm32f1xx_hal_uart.c **** 
1981:src/stm32f1xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
1982:src/stm32f1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
1983:src/stm32f1xx_hal_uart.c **** 
1984:src/stm32f1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1985:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1986:src/stm32f1xx_hal_uart.c ****       /* Call registered Abort Receive Complete Callback */
1987:src/stm32f1xx_hal_uart.c ****       huart->AbortReceiveCpltCallback(huart);
1988:src/stm32f1xx_hal_uart.c **** #else
1989:src/stm32f1xx_hal_uart.c ****       /* Call legacy weak Abort Receive Complete Callback */
1990:src/stm32f1xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
1991:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1992:src/stm32f1xx_hal_uart.c ****     }
1993:src/stm32f1xx_hal_uart.c ****   }
1994:src/stm32f1xx_hal_uart.c ****   else
1995:src/stm32f1xx_hal_uart.c ****   {
1996:src/stm32f1xx_hal_uart.c ****     /* Reset Rx transfer counter */
1997:src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
1998:src/stm32f1xx_hal_uart.c **** 
1999:src/stm32f1xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
2000:src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
2001:src/stm32f1xx_hal_uart.c **** 
2002:src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2003:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2004:src/stm32f1xx_hal_uart.c ****     /* Call registered Abort Receive Complete Callback */
2005:src/stm32f1xx_hal_uart.c ****     huart->AbortReceiveCpltCallback(huart);
2006:src/stm32f1xx_hal_uart.c **** #else
2007:src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort Receive Complete Callback */
2008:src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
2009:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2010:src/stm32f1xx_hal_uart.c ****   }
2011:src/stm32f1xx_hal_uart.c **** 
2012:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
2013:src/stm32f1xx_hal_uart.c **** }
2014:src/stm32f1xx_hal_uart.c **** 
2015:src/stm32f1xx_hal_uart.c **** /**
2016:src/stm32f1xx_hal_uart.c ****   * @brief  This function handles UART interrupt request.
2017:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2018:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2019:src/stm32f1xx_hal_uart.c ****   * @retval None
2020:src/stm32f1xx_hal_uart.c ****   */
2021:src/stm32f1xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
2022:src/stm32f1xx_hal_uart.c **** {
2023:src/stm32f1xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->SR);
2024:src/stm32f1xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
2025:src/stm32f1xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
2026:src/stm32f1xx_hal_uart.c ****   uint32_t errorflags = 0x00U;
2027:src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
2028:src/stm32f1xx_hal_uart.c **** 
2029:src/stm32f1xx_hal_uart.c ****   /* If no error occurs */
2030:src/stm32f1xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
2031:src/stm32f1xx_hal_uart.c ****   if (errorflags == RESET)
2032:src/stm32f1xx_hal_uart.c ****   {
ARM GAS  /tmp/ccPoddoo.s 			page 38


2033:src/stm32f1xx_hal_uart.c ****     /* UART in mode Receiver -------------------------------------------------*/
2034:src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
2035:src/stm32f1xx_hal_uart.c ****     {
2036:src/stm32f1xx_hal_uart.c ****       UART_Receive_IT(huart);
2037:src/stm32f1xx_hal_uart.c ****       return;
2038:src/stm32f1xx_hal_uart.c ****     }
2039:src/stm32f1xx_hal_uart.c ****   }
2040:src/stm32f1xx_hal_uart.c **** 
2041:src/stm32f1xx_hal_uart.c ****   /* If some errors occur */
2042:src/stm32f1xx_hal_uart.c ****   if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE
2043:src/stm32f1xx_hal_uart.c ****   {
2044:src/stm32f1xx_hal_uart.c ****     /* UART parity error interrupt occurred ----------------------------------*/
2045:src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
2046:src/stm32f1xx_hal_uart.c ****     {
2047:src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
2048:src/stm32f1xx_hal_uart.c ****     }
2049:src/stm32f1xx_hal_uart.c **** 
2050:src/stm32f1xx_hal_uart.c ****     /* UART noise error interrupt occurred -----------------------------------*/
2051:src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
2052:src/stm32f1xx_hal_uart.c ****     {
2053:src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
2054:src/stm32f1xx_hal_uart.c ****     }
2055:src/stm32f1xx_hal_uart.c **** 
2056:src/stm32f1xx_hal_uart.c ****     /* UART frame error interrupt occurred -----------------------------------*/
2057:src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
2058:src/stm32f1xx_hal_uart.c ****     {
2059:src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
2060:src/stm32f1xx_hal_uart.c ****     }
2061:src/stm32f1xx_hal_uart.c **** 
2062:src/stm32f1xx_hal_uart.c ****     /* UART Over-Run interrupt occurred --------------------------------------*/
2063:src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
2064:src/stm32f1xx_hal_uart.c ****     {
2065:src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
2066:src/stm32f1xx_hal_uart.c ****     }
2067:src/stm32f1xx_hal_uart.c **** 
2068:src/stm32f1xx_hal_uart.c ****     /* Call UART Error Call back function if need be --------------------------*/
2069:src/stm32f1xx_hal_uart.c ****     if (huart->ErrorCode != HAL_UART_ERROR_NONE)
2070:src/stm32f1xx_hal_uart.c ****     {
2071:src/stm32f1xx_hal_uart.c ****       /* UART in mode Receiver -----------------------------------------------*/
2072:src/stm32f1xx_hal_uart.c ****       if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
2073:src/stm32f1xx_hal_uart.c ****       {
2074:src/stm32f1xx_hal_uart.c ****         UART_Receive_IT(huart);
2075:src/stm32f1xx_hal_uart.c ****       }
2076:src/stm32f1xx_hal_uart.c **** 
2077:src/stm32f1xx_hal_uart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
2078:src/stm32f1xx_hal_uart.c ****          consider error as blocking */
2079:src/stm32f1xx_hal_uart.c ****       dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
2080:src/stm32f1xx_hal_uart.c ****       if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
2081:src/stm32f1xx_hal_uart.c ****       {
2082:src/stm32f1xx_hal_uart.c ****         /* Blocking error : transfer is aborted
2083:src/stm32f1xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
2084:src/stm32f1xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
2085:src/stm32f1xx_hal_uart.c ****         UART_EndRxTransfer(huart);
2086:src/stm32f1xx_hal_uart.c **** 
2087:src/stm32f1xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
2088:src/stm32f1xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2089:src/stm32f1xx_hal_uart.c ****         {
ARM GAS  /tmp/ccPoddoo.s 			page 39


2090:src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
2091:src/stm32f1xx_hal_uart.c **** 
2092:src/stm32f1xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
2093:src/stm32f1xx_hal_uart.c ****           if (huart->hdmarx != NULL)
2094:src/stm32f1xx_hal_uart.c ****           {
2095:src/stm32f1xx_hal_uart.c ****             /* Set the UART DMA Abort callback :
2096:src/stm32f1xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
2097:src/stm32f1xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
2098:src/stm32f1xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
2099:src/stm32f1xx_hal_uart.c ****             {
2100:src/stm32f1xx_hal_uart.c ****               /* Call Directly XferAbortCallback function in case of error */
2101:src/stm32f1xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
2102:src/stm32f1xx_hal_uart.c ****             }
2103:src/stm32f1xx_hal_uart.c ****           }
2104:src/stm32f1xx_hal_uart.c ****           else
2105:src/stm32f1xx_hal_uart.c ****           {
2106:src/stm32f1xx_hal_uart.c ****             /* Call user error callback */
2107:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2108:src/stm32f1xx_hal_uart.c ****             /*Call registered error callback*/
2109:src/stm32f1xx_hal_uart.c ****             huart->ErrorCallback(huart);
2110:src/stm32f1xx_hal_uart.c **** #else
2111:src/stm32f1xx_hal_uart.c ****             /*Call legacy weak error callback*/
2112:src/stm32f1xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
2113:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2114:src/stm32f1xx_hal_uart.c ****           }
2115:src/stm32f1xx_hal_uart.c ****         }
2116:src/stm32f1xx_hal_uart.c ****         else
2117:src/stm32f1xx_hal_uart.c ****         {
2118:src/stm32f1xx_hal_uart.c ****           /* Call user error callback */
2119:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2120:src/stm32f1xx_hal_uart.c ****           /*Call registered error callback*/
2121:src/stm32f1xx_hal_uart.c ****           huart->ErrorCallback(huart);
2122:src/stm32f1xx_hal_uart.c **** #else
2123:src/stm32f1xx_hal_uart.c ****           /*Call legacy weak error callback*/
2124:src/stm32f1xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
2125:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2126:src/stm32f1xx_hal_uart.c ****         }
2127:src/stm32f1xx_hal_uart.c ****       }
2128:src/stm32f1xx_hal_uart.c ****       else
2129:src/stm32f1xx_hal_uart.c ****       {
2130:src/stm32f1xx_hal_uart.c ****         /* Non Blocking error : transfer could go on.
2131:src/stm32f1xx_hal_uart.c ****            Error is notified to user through user error callback */
2132:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2133:src/stm32f1xx_hal_uart.c ****         /*Call registered error callback*/
2134:src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback(huart);
2135:src/stm32f1xx_hal_uart.c **** #else
2136:src/stm32f1xx_hal_uart.c ****         /*Call legacy weak error callback*/
2137:src/stm32f1xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
2138:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2139:src/stm32f1xx_hal_uart.c **** 
2140:src/stm32f1xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
2141:src/stm32f1xx_hal_uart.c ****       }
2142:src/stm32f1xx_hal_uart.c ****     }
2143:src/stm32f1xx_hal_uart.c ****     return;
2144:src/stm32f1xx_hal_uart.c ****   } /* End if some error occurs */
2145:src/stm32f1xx_hal_uart.c **** 
2146:src/stm32f1xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
ARM GAS  /tmp/ccPoddoo.s 			page 40


2147:src/stm32f1xx_hal_uart.c ****   if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
2148:src/stm32f1xx_hal_uart.c ****   {
2149:src/stm32f1xx_hal_uart.c ****     UART_Transmit_IT(huart);
2150:src/stm32f1xx_hal_uart.c ****     return;
2151:src/stm32f1xx_hal_uart.c ****   }
2152:src/stm32f1xx_hal_uart.c **** 
2153:src/stm32f1xx_hal_uart.c ****   /* UART in mode Transmitter end --------------------------------------------*/
2154:src/stm32f1xx_hal_uart.c ****   if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
2155:src/stm32f1xx_hal_uart.c ****   {
2156:src/stm32f1xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
2157:src/stm32f1xx_hal_uart.c ****     return;
2158:src/stm32f1xx_hal_uart.c ****   }
2159:src/stm32f1xx_hal_uart.c **** }
2160:src/stm32f1xx_hal_uart.c **** 
2161:src/stm32f1xx_hal_uart.c **** /**
2162:src/stm32f1xx_hal_uart.c ****   * @brief  Tx Transfer completed callbacks.
2163:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2164:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2165:src/stm32f1xx_hal_uart.c ****   * @retval None
2166:src/stm32f1xx_hal_uart.c ****   */
2167:src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
2168:src/stm32f1xx_hal_uart.c **** {
2169:src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2170:src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2171:src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2172:src/stm32f1xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
2173:src/stm32f1xx_hal_uart.c ****    */
2174:src/stm32f1xx_hal_uart.c **** }
2175:src/stm32f1xx_hal_uart.c **** 
2176:src/stm32f1xx_hal_uart.c **** /**
2177:src/stm32f1xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callbacks.
2178:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2179:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2180:src/stm32f1xx_hal_uart.c ****   * @retval None
2181:src/stm32f1xx_hal_uart.c ****   */
2182:src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
2183:src/stm32f1xx_hal_uart.c **** {
2184:src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2185:src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2186:src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2187:src/stm32f1xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback could be implemented in the user file
2188:src/stm32f1xx_hal_uart.c ****    */
2189:src/stm32f1xx_hal_uart.c **** }
2190:src/stm32f1xx_hal_uart.c **** 
2191:src/stm32f1xx_hal_uart.c **** /**
2192:src/stm32f1xx_hal_uart.c ****   * @brief  Rx Transfer completed callbacks.
2193:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2194:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2195:src/stm32f1xx_hal_uart.c ****   * @retval None
2196:src/stm32f1xx_hal_uart.c ****   */
2197:src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
2198:src/stm32f1xx_hal_uart.c **** {
2199:src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2200:src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2201:src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2202:src/stm32f1xx_hal_uart.c ****            the HAL_UART_RxCpltCallback could be implemented in the user file
2203:src/stm32f1xx_hal_uart.c ****    */
ARM GAS  /tmp/ccPoddoo.s 			page 41


2204:src/stm32f1xx_hal_uart.c **** }
2205:src/stm32f1xx_hal_uart.c **** 
2206:src/stm32f1xx_hal_uart.c **** /**
2207:src/stm32f1xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callbacks.
2208:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2209:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2210:src/stm32f1xx_hal_uart.c ****   * @retval None
2211:src/stm32f1xx_hal_uart.c ****   */
2212:src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
2213:src/stm32f1xx_hal_uart.c **** {
2214:src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2215:src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2216:src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2217:src/stm32f1xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback could be implemented in the user file
2218:src/stm32f1xx_hal_uart.c ****    */
2219:src/stm32f1xx_hal_uart.c **** }
2220:src/stm32f1xx_hal_uart.c **** 
2221:src/stm32f1xx_hal_uart.c **** /**
2222:src/stm32f1xx_hal_uart.c ****   * @brief  UART error callbacks.
2223:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2224:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2225:src/stm32f1xx_hal_uart.c ****   * @retval None
2226:src/stm32f1xx_hal_uart.c ****   */
2227:src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
2228:src/stm32f1xx_hal_uart.c **** {
2229:src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2230:src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2231:src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2232:src/stm32f1xx_hal_uart.c ****            the HAL_UART_ErrorCallback could be implemented in the user file
2233:src/stm32f1xx_hal_uart.c ****    */
2234:src/stm32f1xx_hal_uart.c **** }
2235:src/stm32f1xx_hal_uart.c **** 
2236:src/stm32f1xx_hal_uart.c **** /**
2237:src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2238:src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2239:src/stm32f1xx_hal_uart.c ****   * @retval None
2240:src/stm32f1xx_hal_uart.c ****   */
2241:src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
2242:src/stm32f1xx_hal_uart.c **** {
2243:src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2244:src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2245:src/stm32f1xx_hal_uart.c **** 
2246:src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2247:src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
2248:src/stm32f1xx_hal_uart.c ****    */
2249:src/stm32f1xx_hal_uart.c **** }
2250:src/stm32f1xx_hal_uart.c **** 
2251:src/stm32f1xx_hal_uart.c **** /**
2252:src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2253:src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2254:src/stm32f1xx_hal_uart.c ****   * @retval None
2255:src/stm32f1xx_hal_uart.c ****   */
2256:src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
2257:src/stm32f1xx_hal_uart.c **** {
2258:src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2259:src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2260:src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccPoddoo.s 			page 42


2261:src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2262:src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
2263:src/stm32f1xx_hal_uart.c ****    */
2264:src/stm32f1xx_hal_uart.c **** }
2265:src/stm32f1xx_hal_uart.c **** 
2266:src/stm32f1xx_hal_uart.c **** /**
2267:src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
2268:src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2269:src/stm32f1xx_hal_uart.c ****   * @retval None
2270:src/stm32f1xx_hal_uart.c ****   */
2271:src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
2272:src/stm32f1xx_hal_uart.c **** {
2273:src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2274:src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2275:src/stm32f1xx_hal_uart.c **** 
2276:src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2277:src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
2278:src/stm32f1xx_hal_uart.c ****    */
2279:src/stm32f1xx_hal_uart.c **** }
2280:src/stm32f1xx_hal_uart.c **** 
2281:src/stm32f1xx_hal_uart.c **** /**
2282:src/stm32f1xx_hal_uart.c ****   * @}
2283:src/stm32f1xx_hal_uart.c ****   */
2284:src/stm32f1xx_hal_uart.c **** 
2285:src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
2286:src/stm32f1xx_hal_uart.c ****   *  @brief   UART control functions
2287:src/stm32f1xx_hal_uart.c ****   *
2288:src/stm32f1xx_hal_uart.c **** @verbatim
2289:src/stm32f1xx_hal_uart.c ****   ==============================================================================
2290:src/stm32f1xx_hal_uart.c ****                       ##### Peripheral Control functions #####
2291:src/stm32f1xx_hal_uart.c ****   ==============================================================================
2292:src/stm32f1xx_hal_uart.c ****   [..]
2293:src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART:
2294:src/stm32f1xx_hal_uart.c ****     (+) HAL_LIN_SendBreak() API can be helpful to transmit the break character.
2295:src/stm32f1xx_hal_uart.c ****     (+) HAL_MultiProcessor_EnterMuteMode() API can be helpful to enter the UART in mute mode.
2296:src/stm32f1xx_hal_uart.c ****     (+) HAL_MultiProcessor_ExitMuteMode() API can be helpful to exit the UART mute mode by software
2297:src/stm32f1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableTransmitter() API to enable the UART transmitter and disables the UART
2298:src/stm32f1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableReceiver() API to enable the UART receiver and disables the UART trans
2299:src/stm32f1xx_hal_uart.c **** 
2300:src/stm32f1xx_hal_uart.c **** @endverbatim
2301:src/stm32f1xx_hal_uart.c ****   * @{
2302:src/stm32f1xx_hal_uart.c ****   */
2303:src/stm32f1xx_hal_uart.c **** 
2304:src/stm32f1xx_hal_uart.c **** /**
2305:src/stm32f1xx_hal_uart.c ****   * @brief  Transmits break characters.
2306:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2307:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2308:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2309:src/stm32f1xx_hal_uart.c ****   */
2310:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
2311:src/stm32f1xx_hal_uart.c **** {
2312:src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2313:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2314:src/stm32f1xx_hal_uart.c **** 
2315:src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2316:src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
2317:src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccPoddoo.s 			page 43


2318:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2319:src/stm32f1xx_hal_uart.c **** 
2320:src/stm32f1xx_hal_uart.c ****   /* Send break characters */
2321:src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
2322:src/stm32f1xx_hal_uart.c **** 
2323:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2324:src/stm32f1xx_hal_uart.c **** 
2325:src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2326:src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2327:src/stm32f1xx_hal_uart.c **** 
2328:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
2329:src/stm32f1xx_hal_uart.c **** }
2330:src/stm32f1xx_hal_uart.c **** 
2331:src/stm32f1xx_hal_uart.c **** /**
2332:src/stm32f1xx_hal_uart.c ****   * @brief  Enters the UART in mute mode.
2333:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2334:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2335:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2336:src/stm32f1xx_hal_uart.c ****   */
2337:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
2338:src/stm32f1xx_hal_uart.c **** {
2339:src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2340:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2341:src/stm32f1xx_hal_uart.c **** 
2342:src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2343:src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
2344:src/stm32f1xx_hal_uart.c **** 
2345:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2346:src/stm32f1xx_hal_uart.c **** 
2347:src/stm32f1xx_hal_uart.c ****   /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
2348:src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
2349:src/stm32f1xx_hal_uart.c **** 
2350:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2351:src/stm32f1xx_hal_uart.c **** 
2352:src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2353:src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2354:src/stm32f1xx_hal_uart.c **** 
2355:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
2356:src/stm32f1xx_hal_uart.c **** }
2357:src/stm32f1xx_hal_uart.c **** 
2358:src/stm32f1xx_hal_uart.c **** /**
2359:src/stm32f1xx_hal_uart.c ****   * @brief  Exits the UART mute mode: wake up software.
2360:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2361:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2362:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2363:src/stm32f1xx_hal_uart.c ****   */
2364:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
2365:src/stm32f1xx_hal_uart.c **** {
2366:src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2367:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2368:src/stm32f1xx_hal_uart.c **** 
2369:src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2370:src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
2371:src/stm32f1xx_hal_uart.c **** 
2372:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2373:src/stm32f1xx_hal_uart.c **** 
2374:src/stm32f1xx_hal_uart.c ****   /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
ARM GAS  /tmp/ccPoddoo.s 			page 44


2375:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
2376:src/stm32f1xx_hal_uart.c **** 
2377:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2378:src/stm32f1xx_hal_uart.c **** 
2379:src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2380:src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2381:src/stm32f1xx_hal_uart.c **** 
2382:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
2383:src/stm32f1xx_hal_uart.c **** }
2384:src/stm32f1xx_hal_uart.c **** 
2385:src/stm32f1xx_hal_uart.c **** /**
2386:src/stm32f1xx_hal_uart.c ****   * @brief  Enables the UART transmitter and disables the UART receiver.
2387:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2388:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2389:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2390:src/stm32f1xx_hal_uart.c ****   */
2391:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
2392:src/stm32f1xx_hal_uart.c **** {
2393:src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
2394:src/stm32f1xx_hal_uart.c **** 
2395:src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2396:src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
2397:src/stm32f1xx_hal_uart.c **** 
2398:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2399:src/stm32f1xx_hal_uart.c **** 
2400:src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2401:src/stm32f1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
2402:src/stm32f1xx_hal_uart.c **** 
2403:src/stm32f1xx_hal_uart.c ****   /* Clear TE and RE bits */
2404:src/stm32f1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
2405:src/stm32f1xx_hal_uart.c **** 
2406:src/stm32f1xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
2407:src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_TE;
2408:src/stm32f1xx_hal_uart.c **** 
2409:src/stm32f1xx_hal_uart.c ****   /* Write to USART CR1 */
2410:src/stm32f1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
2411:src/stm32f1xx_hal_uart.c **** 
2412:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2413:src/stm32f1xx_hal_uart.c **** 
2414:src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2415:src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2416:src/stm32f1xx_hal_uart.c **** 
2417:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
2418:src/stm32f1xx_hal_uart.c **** }
2419:src/stm32f1xx_hal_uart.c **** 
2420:src/stm32f1xx_hal_uart.c **** /**
2421:src/stm32f1xx_hal_uart.c ****   * @brief  Enables the UART receiver and disables the UART transmitter.
2422:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2423:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2424:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2425:src/stm32f1xx_hal_uart.c ****   */
2426:src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
2427:src/stm32f1xx_hal_uart.c **** {
2428:src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
2429:src/stm32f1xx_hal_uart.c **** 
2430:src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2431:src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
ARM GAS  /tmp/ccPoddoo.s 			page 45


2432:src/stm32f1xx_hal_uart.c **** 
2433:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2434:src/stm32f1xx_hal_uart.c **** 
2435:src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2436:src/stm32f1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
2437:src/stm32f1xx_hal_uart.c **** 
2438:src/stm32f1xx_hal_uart.c ****   /* Clear TE and RE bits */
2439:src/stm32f1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
2440:src/stm32f1xx_hal_uart.c **** 
2441:src/stm32f1xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
2442:src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_RE;
2443:src/stm32f1xx_hal_uart.c **** 
2444:src/stm32f1xx_hal_uart.c ****   /* Write to USART CR1 */
2445:src/stm32f1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
2446:src/stm32f1xx_hal_uart.c **** 
2447:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2448:src/stm32f1xx_hal_uart.c **** 
2449:src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2450:src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2451:src/stm32f1xx_hal_uart.c **** 
2452:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
2453:src/stm32f1xx_hal_uart.c **** }
2454:src/stm32f1xx_hal_uart.c **** 
2455:src/stm32f1xx_hal_uart.c **** /**
2456:src/stm32f1xx_hal_uart.c ****   * @}
2457:src/stm32f1xx_hal_uart.c ****   */
2458:src/stm32f1xx_hal_uart.c **** 
2459:src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Errors functions
2460:src/stm32f1xx_hal_uart.c ****   *  @brief   UART State and Errors functions
2461:src/stm32f1xx_hal_uart.c ****   *
2462:src/stm32f1xx_hal_uart.c **** @verbatim
2463:src/stm32f1xx_hal_uart.c ****   ==============================================================================
2464:src/stm32f1xx_hal_uart.c ****                  ##### Peripheral State and Errors functions #####
2465:src/stm32f1xx_hal_uart.c ****   ==============================================================================
2466:src/stm32f1xx_hal_uart.c ****  [..]
2467:src/stm32f1xx_hal_uart.c ****    This subsection provides a set of functions allowing to return the State of
2468:src/stm32f1xx_hal_uart.c ****    UART communication process, return Peripheral Errors occurred during communication
2469:src/stm32f1xx_hal_uart.c ****    process
2470:src/stm32f1xx_hal_uart.c ****    (+) HAL_UART_GetState() API can be helpful to check in run-time the state of the UART peripheral
2471:src/stm32f1xx_hal_uart.c ****    (+) HAL_UART_GetError() check in run-time errors that could be occurred during communication.
2472:src/stm32f1xx_hal_uart.c **** 
2473:src/stm32f1xx_hal_uart.c **** @endverbatim
2474:src/stm32f1xx_hal_uart.c ****   * @{
2475:src/stm32f1xx_hal_uart.c ****   */
2476:src/stm32f1xx_hal_uart.c **** 
2477:src/stm32f1xx_hal_uart.c **** /**
2478:src/stm32f1xx_hal_uart.c ****   * @brief  Returns the UART state.
2479:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2480:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2481:src/stm32f1xx_hal_uart.c ****   * @retval HAL state
2482:src/stm32f1xx_hal_uart.c ****   */
2483:src/stm32f1xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
2484:src/stm32f1xx_hal_uart.c **** {
2485:src/stm32f1xx_hal_uart.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
2486:src/stm32f1xx_hal_uart.c ****   temp1 = huart->gState;
2487:src/stm32f1xx_hal_uart.c ****   temp2 = huart->RxState;
2488:src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccPoddoo.s 			page 46


2489:src/stm32f1xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
2490:src/stm32f1xx_hal_uart.c **** }
2491:src/stm32f1xx_hal_uart.c **** 
2492:src/stm32f1xx_hal_uart.c **** /**
2493:src/stm32f1xx_hal_uart.c ****   * @brief  Return the UART error code
2494:src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2495:src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART.
2496:src/stm32f1xx_hal_uart.c ****   * @retval UART Error Code
2497:src/stm32f1xx_hal_uart.c ****   */
2498:src/stm32f1xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
2499:src/stm32f1xx_hal_uart.c **** {
2500:src/stm32f1xx_hal_uart.c ****   return huart->ErrorCode;
2501:src/stm32f1xx_hal_uart.c **** }
2502:src/stm32f1xx_hal_uart.c **** 
2503:src/stm32f1xx_hal_uart.c **** /**
2504:src/stm32f1xx_hal_uart.c ****   * @}
2505:src/stm32f1xx_hal_uart.c ****   */
2506:src/stm32f1xx_hal_uart.c **** 
2507:src/stm32f1xx_hal_uart.c **** /**
2508:src/stm32f1xx_hal_uart.c ****   * @}
2509:src/stm32f1xx_hal_uart.c ****   */
2510:src/stm32f1xx_hal_uart.c **** 
2511:src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2512:src/stm32f1xx_hal_uart.c ****   * @{
2513:src/stm32f1xx_hal_uart.c ****   */
2514:src/stm32f1xx_hal_uart.c **** 
2515:src/stm32f1xx_hal_uart.c **** /**
2516:src/stm32f1xx_hal_uart.c ****   * @brief  Initialize the callbacks to their default values.
2517:src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2518:src/stm32f1xx_hal_uart.c ****   * @retval none
2519:src/stm32f1xx_hal_uart.c ****   */
2520:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2521:src/stm32f1xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
2522:src/stm32f1xx_hal_uart.c **** {
2523:src/stm32f1xx_hal_uart.c ****   /* Init the UART Callback settings */
2524:src/stm32f1xx_hal_uart.c ****   huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2525:src/stm32f1xx_hal_uart.c ****   huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallb
2526:src/stm32f1xx_hal_uart.c ****   huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2527:src/stm32f1xx_hal_uart.c ****   huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallb
2528:src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallba
2529:src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2530:src/stm32f1xx_hal_uart.c ****   huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2531:src/stm32f1xx_hal_uart.c ****   huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2532:src/stm32f1xx_hal_uart.c **** 
2533:src/stm32f1xx_hal_uart.c **** }
2534:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2535:src/stm32f1xx_hal_uart.c **** 
2536:src/stm32f1xx_hal_uart.c **** /**
2537:src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART transmit process complete callback.
2538:src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2539:src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2540:src/stm32f1xx_hal_uart.c ****   * @retval None
2541:src/stm32f1xx_hal_uart.c ****   */
2542:src/stm32f1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2543:src/stm32f1xx_hal_uart.c **** {
2544:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2545:src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
ARM GAS  /tmp/ccPoddoo.s 			page 47


2546:src/stm32f1xx_hal_uart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
2547:src/stm32f1xx_hal_uart.c ****   {
2548:src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
2549:src/stm32f1xx_hal_uart.c **** 
2550:src/stm32f1xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by setting the DMAT bit
2551:src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
2552:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
2553:src/stm32f1xx_hal_uart.c **** 
2554:src/stm32f1xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
2555:src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
2556:src/stm32f1xx_hal_uart.c **** 
2557:src/stm32f1xx_hal_uart.c ****   }
2558:src/stm32f1xx_hal_uart.c ****   /* DMA Circular mode */
2559:src/stm32f1xx_hal_uart.c ****   else
2560:src/stm32f1xx_hal_uart.c ****   {
2561:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2562:src/stm32f1xx_hal_uart.c ****     /*Call registered Tx complete callback*/
2563:src/stm32f1xx_hal_uart.c ****     huart->TxCpltCallback(huart);
2564:src/stm32f1xx_hal_uart.c **** #else
2565:src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Tx complete callback*/
2566:src/stm32f1xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
2567:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2568:src/stm32f1xx_hal_uart.c ****   }
2569:src/stm32f1xx_hal_uart.c **** }
2570:src/stm32f1xx_hal_uart.c **** 
2571:src/stm32f1xx_hal_uart.c **** /**
2572:src/stm32f1xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback
2573:src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2574:src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2575:src/stm32f1xx_hal_uart.c ****   * @retval None
2576:src/stm32f1xx_hal_uart.c ****   */
2577:src/stm32f1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
2578:src/stm32f1xx_hal_uart.c **** {
2579:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2580:src/stm32f1xx_hal_uart.c **** 
2581:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2582:src/stm32f1xx_hal_uart.c ****   /*Call registered Tx complete callback*/
2583:src/stm32f1xx_hal_uart.c ****   huart->TxHalfCpltCallback(huart);
2584:src/stm32f1xx_hal_uart.c **** #else
2585:src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
2586:src/stm32f1xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
2587:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2588:src/stm32f1xx_hal_uart.c **** }
2589:src/stm32f1xx_hal_uart.c **** 
2590:src/stm32f1xx_hal_uart.c **** /**
2591:src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART receive process complete callback.
2592:src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2593:src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2594:src/stm32f1xx_hal_uart.c ****   * @retval None
2595:src/stm32f1xx_hal_uart.c ****   */
2596:src/stm32f1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
2597:src/stm32f1xx_hal_uart.c **** {
2598:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2599:src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
2600:src/stm32f1xx_hal_uart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
2601:src/stm32f1xx_hal_uart.c ****   {
2602:src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0U;
ARM GAS  /tmp/ccPoddoo.s 			page 48


2603:src/stm32f1xx_hal_uart.c **** 
2604:src/stm32f1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2605:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
2606:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2607:src/stm32f1xx_hal_uart.c **** 
2608:src/stm32f1xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by setting the DMAR bit
2609:src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
2610:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
2611:src/stm32f1xx_hal_uart.c **** 
2612:src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
2613:src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
2614:src/stm32f1xx_hal_uart.c ****   }
2615:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2616:src/stm32f1xx_hal_uart.c ****   /*Call registered Rx complete callback*/
2617:src/stm32f1xx_hal_uart.c ****   huart->RxCpltCallback(huart);
2618:src/stm32f1xx_hal_uart.c **** #else
2619:src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Rx complete callback*/
2620:src/stm32f1xx_hal_uart.c ****   HAL_UART_RxCpltCallback(huart);
2621:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2622:src/stm32f1xx_hal_uart.c **** }
2623:src/stm32f1xx_hal_uart.c **** 
2624:src/stm32f1xx_hal_uart.c **** /**
2625:src/stm32f1xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback
2626:src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2627:src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2628:src/stm32f1xx_hal_uart.c ****   * @retval None
2629:src/stm32f1xx_hal_uart.c ****   */
2630:src/stm32f1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
2631:src/stm32f1xx_hal_uart.c **** {
2632:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2633:src/stm32f1xx_hal_uart.c **** 
2634:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2635:src/stm32f1xx_hal_uart.c ****   /*Call registered Rx Half complete callback*/
2636:src/stm32f1xx_hal_uart.c ****   huart->RxHalfCpltCallback(huart);
2637:src/stm32f1xx_hal_uart.c **** #else
2638:src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Rx Half complete callback*/
2639:src/stm32f1xx_hal_uart.c ****   HAL_UART_RxHalfCpltCallback(huart);
2640:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2641:src/stm32f1xx_hal_uart.c **** }
2642:src/stm32f1xx_hal_uart.c **** 
2643:src/stm32f1xx_hal_uart.c **** /**
2644:src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART communication error callback.
2645:src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2646:src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2647:src/stm32f1xx_hal_uart.c ****   * @retval None
2648:src/stm32f1xx_hal_uart.c ****   */
2649:src/stm32f1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
2650:src/stm32f1xx_hal_uart.c **** {
2651:src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
2652:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2653:src/stm32f1xx_hal_uart.c **** 
2654:src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
2655:src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
2656:src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
2657:src/stm32f1xx_hal_uart.c ****   {
2658:src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
2659:src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
ARM GAS  /tmp/ccPoddoo.s 			page 49


2660:src/stm32f1xx_hal_uart.c ****   }
2661:src/stm32f1xx_hal_uart.c **** 
2662:src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
2663:src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
2664:src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
2665:src/stm32f1xx_hal_uart.c ****   {
2666:src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
2667:src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
2668:src/stm32f1xx_hal_uart.c ****   }
2669:src/stm32f1xx_hal_uart.c **** 
2670:src/stm32f1xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
2671:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2672:src/stm32f1xx_hal_uart.c ****   /*Call registered error callback*/
2673:src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback(huart);
2674:src/stm32f1xx_hal_uart.c **** #else
2675:src/stm32f1xx_hal_uart.c ****   /*Call legacy weak error callback*/
2676:src/stm32f1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
2677:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2678:src/stm32f1xx_hal_uart.c **** }
2679:src/stm32f1xx_hal_uart.c **** 
2680:src/stm32f1xx_hal_uart.c **** /**
2681:src/stm32f1xx_hal_uart.c ****   * @brief  This function handles UART Communication Timeout.
2682:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2683:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2684:src/stm32f1xx_hal_uart.c ****   * @param  Flag specifies the UART flag to check.
2685:src/stm32f1xx_hal_uart.c ****   * @param  Status The new Flag status (SET or RESET).
2686:src/stm32f1xx_hal_uart.c ****   * @param  Tickstart Tick start value
2687:src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
2688:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2689:src/stm32f1xx_hal_uart.c ****   */
2690:src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
2691:src/stm32f1xx_hal_uart.c **** {
2692:src/stm32f1xx_hal_uart.c ****   /* Wait until flag is set */
2693:src/stm32f1xx_hal_uart.c ****   while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
2694:src/stm32f1xx_hal_uart.c ****   {
2695:src/stm32f1xx_hal_uart.c ****     /* Check for the Timeout */
2696:src/stm32f1xx_hal_uart.c ****     if (Timeout != HAL_MAX_DELAY)
2697:src/stm32f1xx_hal_uart.c ****     {
2698:src/stm32f1xx_hal_uart.c ****       if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
2699:src/stm32f1xx_hal_uart.c ****       {
2700:src/stm32f1xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
2701:src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
2702:src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2703:src/stm32f1xx_hal_uart.c **** 
2704:src/stm32f1xx_hal_uart.c ****         huart->gState  = HAL_UART_STATE_READY;
2705:src/stm32f1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
2706:src/stm32f1xx_hal_uart.c **** 
2707:src/stm32f1xx_hal_uart.c ****         /* Process Unlocked */
2708:src/stm32f1xx_hal_uart.c ****         __HAL_UNLOCK(huart);
2709:src/stm32f1xx_hal_uart.c **** 
2710:src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
2711:src/stm32f1xx_hal_uart.c ****       }
2712:src/stm32f1xx_hal_uart.c ****     }
2713:src/stm32f1xx_hal_uart.c ****   }
2714:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
2715:src/stm32f1xx_hal_uart.c **** }
2716:src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccPoddoo.s 			page 50


2717:src/stm32f1xx_hal_uart.c **** /**
2718:src/stm32f1xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
2719:src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2720:src/stm32f1xx_hal_uart.c ****   * @retval None
2721:src/stm32f1xx_hal_uart.c ****   */
2722:src/stm32f1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
2723:src/stm32f1xx_hal_uart.c **** {
2724:src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
2725:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
2726:src/stm32f1xx_hal_uart.c **** 
2727:src/stm32f1xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
2728:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2729:src/stm32f1xx_hal_uart.c **** }
2730:src/stm32f1xx_hal_uart.c **** 
2731:src/stm32f1xx_hal_uart.c **** /**
2732:src/stm32f1xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
2733:src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2734:src/stm32f1xx_hal_uart.c ****   * @retval None
2735:src/stm32f1xx_hal_uart.c ****   */
2736:src/stm32f1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
2737:src/stm32f1xx_hal_uart.c **** {
  78              		.loc 1 2737 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83              	.LVL0:
2738:src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2739:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  84              		.loc 1 2739 0
  85 0000 0368     		ldr	r3, [r0]	@ _3, huart_2(D)->Instance
  86 0002 DA68     		ldr	r2, [r3, #12]	@ _4, _3->CR1
  87 0004 22F49072 		bic	r2, r2, #288	@ _5, _4,
  88 0008 DA60     		str	r2, [r3, #12]	@ _5, _3->CR1
2740:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
  89              		.loc 1 2740 0
  90 000a 5A69     		ldr	r2, [r3, #20]	@ _7, _3->CR3
  91 000c 22F00102 		bic	r2, r2, #1	@ _8, _7,
  92 0010 5A61     		str	r2, [r3, #20]	@ _8, _3->CR3
2741:src/stm32f1xx_hal_uart.c **** 
2742:src/stm32f1xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
2743:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
  93              		.loc 1 2743 0
  94 0012 2023     		movs	r3, #32	@ tmp116,
  95 0014 80F83A30 		strb	r3, [r0, #58]	@ tmp116, huart_2(D)->RxState
  96 0018 7047     		bx	lr	@
  97              		.cfi_endproc
  98              	.LFE110:
  99              		.size	UART_EndRxTransfer, .-UART_EndRxTransfer
 100              		.align	1
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu softvfp
 105              		.type	UART_SetConfig, %function
 106              	UART_SetConfig:
 107              	.LFB119:
ARM GAS  /tmp/ccPoddoo.s 			page 51


2744:src/stm32f1xx_hal_uart.c **** }
2745:src/stm32f1xx_hal_uart.c **** 
2746:src/stm32f1xx_hal_uart.c **** /**
2747:src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
2748:src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
2749:src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2750:src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2751:src/stm32f1xx_hal_uart.c ****   * @retval None
2752:src/stm32f1xx_hal_uart.c ****   */
2753:src/stm32f1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
2754:src/stm32f1xx_hal_uart.c **** {
2755:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2756:src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
2757:src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
2758:src/stm32f1xx_hal_uart.c **** 
2759:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2760:src/stm32f1xx_hal_uart.c ****   /*Call registered error callback*/
2761:src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback(huart);
2762:src/stm32f1xx_hal_uart.c **** #else
2763:src/stm32f1xx_hal_uart.c ****   /*Call legacy weak error callback*/
2764:src/stm32f1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
2765:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2766:src/stm32f1xx_hal_uart.c **** }
2767:src/stm32f1xx_hal_uart.c **** 
2768:src/stm32f1xx_hal_uart.c **** /**
2769:src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
2770:src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
2771:src/stm32f1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2772:src/stm32f1xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
2773:src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2774:src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2775:src/stm32f1xx_hal_uart.c ****   * @retval None
2776:src/stm32f1xx_hal_uart.c ****   */
2777:src/stm32f1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
2778:src/stm32f1xx_hal_uart.c **** {
2779:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2780:src/stm32f1xx_hal_uart.c **** 
2781:src/stm32f1xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
2782:src/stm32f1xx_hal_uart.c **** 
2783:src/stm32f1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
2784:src/stm32f1xx_hal_uart.c ****   if (huart->hdmarx != NULL)
2785:src/stm32f1xx_hal_uart.c ****   {
2786:src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx->XferAbortCallback != NULL)
2787:src/stm32f1xx_hal_uart.c ****     {
2788:src/stm32f1xx_hal_uart.c ****       return;
2789:src/stm32f1xx_hal_uart.c ****     }
2790:src/stm32f1xx_hal_uart.c ****   }
2791:src/stm32f1xx_hal_uart.c **** 
2792:src/stm32f1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2793:src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
2794:src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
2795:src/stm32f1xx_hal_uart.c **** 
2796:src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
2797:src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
2798:src/stm32f1xx_hal_uart.c **** 
2799:src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
2800:src/stm32f1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
ARM GAS  /tmp/ccPoddoo.s 			page 52


2801:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
2802:src/stm32f1xx_hal_uart.c **** 
2803:src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
2804:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2805:src/stm32f1xx_hal_uart.c ****   /* Call registered Abort complete callback */
2806:src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
2807:src/stm32f1xx_hal_uart.c **** #else
2808:src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
2809:src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
2810:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2811:src/stm32f1xx_hal_uart.c **** }
2812:src/stm32f1xx_hal_uart.c **** 
2813:src/stm32f1xx_hal_uart.c **** /**
2814:src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
2815:src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
2816:src/stm32f1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2817:src/stm32f1xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
2818:src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2819:src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2820:src/stm32f1xx_hal_uart.c ****   * @retval None
2821:src/stm32f1xx_hal_uart.c ****   */
2822:src/stm32f1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
2823:src/stm32f1xx_hal_uart.c **** {
2824:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2825:src/stm32f1xx_hal_uart.c **** 
2826:src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
2827:src/stm32f1xx_hal_uart.c **** 
2828:src/stm32f1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
2829:src/stm32f1xx_hal_uart.c ****   if (huart->hdmatx != NULL)
2830:src/stm32f1xx_hal_uart.c ****   {
2831:src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx->XferAbortCallback != NULL)
2832:src/stm32f1xx_hal_uart.c ****     {
2833:src/stm32f1xx_hal_uart.c ****       return;
2834:src/stm32f1xx_hal_uart.c ****     }
2835:src/stm32f1xx_hal_uart.c ****   }
2836:src/stm32f1xx_hal_uart.c **** 
2837:src/stm32f1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2838:src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
2839:src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
2840:src/stm32f1xx_hal_uart.c **** 
2841:src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
2842:src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
2843:src/stm32f1xx_hal_uart.c **** 
2844:src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
2845:src/stm32f1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
2846:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
2847:src/stm32f1xx_hal_uart.c **** 
2848:src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
2849:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2850:src/stm32f1xx_hal_uart.c ****   /* Call registered Abort complete callback */
2851:src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
2852:src/stm32f1xx_hal_uart.c **** #else
2853:src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
2854:src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
2855:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2856:src/stm32f1xx_hal_uart.c **** }
2857:src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccPoddoo.s 			page 53


2858:src/stm32f1xx_hal_uart.c **** /**
2859:src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
2860:src/stm32f1xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
2861:src/stm32f1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
2862:src/stm32f1xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
2863:src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2864:src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2865:src/stm32f1xx_hal_uart.c ****   * @retval None
2866:src/stm32f1xx_hal_uart.c ****   */
2867:src/stm32f1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2868:src/stm32f1xx_hal_uart.c **** {
2869:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2870:src/stm32f1xx_hal_uart.c **** 
2871:src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
2872:src/stm32f1xx_hal_uart.c **** 
2873:src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
2874:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2875:src/stm32f1xx_hal_uart.c **** 
2876:src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
2877:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2878:src/stm32f1xx_hal_uart.c ****   /* Call registered Abort Transmit Complete Callback */
2879:src/stm32f1xx_hal_uart.c ****   huart->AbortTransmitCpltCallback(huart);
2880:src/stm32f1xx_hal_uart.c **** #else
2881:src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort Transmit Complete Callback */
2882:src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
2883:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2884:src/stm32f1xx_hal_uart.c **** }
2885:src/stm32f1xx_hal_uart.c **** 
2886:src/stm32f1xx_hal_uart.c **** /**
2887:src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
2888:src/stm32f1xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
2889:src/stm32f1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
2890:src/stm32f1xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
2891:src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2892:src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2893:src/stm32f1xx_hal_uart.c ****   * @retval None
2894:src/stm32f1xx_hal_uart.c ****   */
2895:src/stm32f1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2896:src/stm32f1xx_hal_uart.c **** {
2897:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2898:src/stm32f1xx_hal_uart.c **** 
2899:src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
2900:src/stm32f1xx_hal_uart.c **** 
2901:src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
2902:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
2903:src/stm32f1xx_hal_uart.c **** 
2904:src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
2905:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2906:src/stm32f1xx_hal_uart.c ****   /* Call registered Abort Receive Complete Callback */
2907:src/stm32f1xx_hal_uart.c ****   huart->AbortReceiveCpltCallback(huart);
2908:src/stm32f1xx_hal_uart.c **** #else
2909:src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort Receive Complete Callback */
2910:src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
2911:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2912:src/stm32f1xx_hal_uart.c **** }
2913:src/stm32f1xx_hal_uart.c **** 
2914:src/stm32f1xx_hal_uart.c **** /**
ARM GAS  /tmp/ccPoddoo.s 			page 54


2915:src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
2916:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2917:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2918:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2919:src/stm32f1xx_hal_uart.c ****   */
2920:src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
2921:src/stm32f1xx_hal_uart.c **** {
2922:src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
2923:src/stm32f1xx_hal_uart.c **** 
2924:src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
2925:src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
2926:src/stm32f1xx_hal_uart.c ****   {
2927:src/stm32f1xx_hal_uart.c ****     if (huart->Init.WordLength == UART_WORDLENGTH_9B)
2928:src/stm32f1xx_hal_uart.c ****     {
2929:src/stm32f1xx_hal_uart.c ****       tmp = (uint16_t *) huart->pTxBuffPtr;
2930:src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
2931:src/stm32f1xx_hal_uart.c ****       if (huart->Init.Parity == UART_PARITY_NONE)
2932:src/stm32f1xx_hal_uart.c ****       {
2933:src/stm32f1xx_hal_uart.c ****         huart->pTxBuffPtr += 2U;
2934:src/stm32f1xx_hal_uart.c ****       }
2935:src/stm32f1xx_hal_uart.c ****       else
2936:src/stm32f1xx_hal_uart.c ****       {
2937:src/stm32f1xx_hal_uart.c ****         huart->pTxBuffPtr += 1U;
2938:src/stm32f1xx_hal_uart.c ****       }
2939:src/stm32f1xx_hal_uart.c ****     }
2940:src/stm32f1xx_hal_uart.c ****     else
2941:src/stm32f1xx_hal_uart.c ****     {
2942:src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
2943:src/stm32f1xx_hal_uart.c ****     }
2944:src/stm32f1xx_hal_uart.c **** 
2945:src/stm32f1xx_hal_uart.c ****     if (--huart->TxXferCount == 0U)
2946:src/stm32f1xx_hal_uart.c ****     {
2947:src/stm32f1xx_hal_uart.c ****       /* Disable the UART Transmit Complete Interrupt */
2948:src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
2949:src/stm32f1xx_hal_uart.c **** 
2950:src/stm32f1xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
2951:src/stm32f1xx_hal_uart.c ****       __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
2952:src/stm32f1xx_hal_uart.c ****     }
2953:src/stm32f1xx_hal_uart.c ****     return HAL_OK;
2954:src/stm32f1xx_hal_uart.c ****   }
2955:src/stm32f1xx_hal_uart.c ****   else
2956:src/stm32f1xx_hal_uart.c ****   {
2957:src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
2958:src/stm32f1xx_hal_uart.c ****   }
2959:src/stm32f1xx_hal_uart.c **** }
2960:src/stm32f1xx_hal_uart.c **** 
2961:src/stm32f1xx_hal_uart.c **** /**
2962:src/stm32f1xx_hal_uart.c ****   * @brief  Wraps up transmission in non blocking mode.
2963:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2964:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2965:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2966:src/stm32f1xx_hal_uart.c ****   */
2967:src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
2968:src/stm32f1xx_hal_uart.c **** {
2969:src/stm32f1xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
2970:src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
2971:src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccPoddoo.s 			page 55


2972:src/stm32f1xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
2973:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2974:src/stm32f1xx_hal_uart.c **** 
2975:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2976:src/stm32f1xx_hal_uart.c ****   /*Call registered Tx complete callback*/
2977:src/stm32f1xx_hal_uart.c ****   huart->TxCpltCallback(huart);
2978:src/stm32f1xx_hal_uart.c **** #else
2979:src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
2980:src/stm32f1xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
2981:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2982:src/stm32f1xx_hal_uart.c **** 
2983:src/stm32f1xx_hal_uart.c ****   return HAL_OK;
2984:src/stm32f1xx_hal_uart.c **** }
2985:src/stm32f1xx_hal_uart.c **** 
2986:src/stm32f1xx_hal_uart.c **** /**
2987:src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode
2988:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2989:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2990:src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2991:src/stm32f1xx_hal_uart.c ****   */
2992:src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
2993:src/stm32f1xx_hal_uart.c **** {
2994:src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
2995:src/stm32f1xx_hal_uart.c **** 
2996:src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
2997:src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
2998:src/stm32f1xx_hal_uart.c ****   {
2999:src/stm32f1xx_hal_uart.c ****     if (huart->Init.WordLength == UART_WORDLENGTH_9B)
3000:src/stm32f1xx_hal_uart.c ****     {
3001:src/stm32f1xx_hal_uart.c ****       tmp = (uint16_t *) huart->pRxBuffPtr;
3002:src/stm32f1xx_hal_uart.c ****       if (huart->Init.Parity == UART_PARITY_NONE)
3003:src/stm32f1xx_hal_uart.c ****       {
3004:src/stm32f1xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
3005:src/stm32f1xx_hal_uart.c ****         huart->pRxBuffPtr += 2U;
3006:src/stm32f1xx_hal_uart.c ****       }
3007:src/stm32f1xx_hal_uart.c ****       else
3008:src/stm32f1xx_hal_uart.c ****       {
3009:src/stm32f1xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
3010:src/stm32f1xx_hal_uart.c ****         huart->pRxBuffPtr += 1U;
3011:src/stm32f1xx_hal_uart.c ****       }
3012:src/stm32f1xx_hal_uart.c ****     }
3013:src/stm32f1xx_hal_uart.c ****     else
3014:src/stm32f1xx_hal_uart.c ****     {
3015:src/stm32f1xx_hal_uart.c ****       if (huart->Init.Parity == UART_PARITY_NONE)
3016:src/stm32f1xx_hal_uart.c ****       {
3017:src/stm32f1xx_hal_uart.c ****         *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
3018:src/stm32f1xx_hal_uart.c ****       }
3019:src/stm32f1xx_hal_uart.c ****       else
3020:src/stm32f1xx_hal_uart.c ****       {
3021:src/stm32f1xx_hal_uart.c ****         *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
3022:src/stm32f1xx_hal_uart.c ****       }
3023:src/stm32f1xx_hal_uart.c ****     }
3024:src/stm32f1xx_hal_uart.c **** 
3025:src/stm32f1xx_hal_uart.c ****     if (--huart->RxXferCount == 0U)
3026:src/stm32f1xx_hal_uart.c ****     {
3027:src/stm32f1xx_hal_uart.c ****       /* Disable the UART Data Register not empty Interrupt */
3028:src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
ARM GAS  /tmp/ccPoddoo.s 			page 56


3029:src/stm32f1xx_hal_uart.c **** 
3030:src/stm32f1xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt */
3031:src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
3032:src/stm32f1xx_hal_uart.c **** 
3033:src/stm32f1xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3034:src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
3035:src/stm32f1xx_hal_uart.c **** 
3036:src/stm32f1xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3037:src/stm32f1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
3038:src/stm32f1xx_hal_uart.c **** 
3039:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3040:src/stm32f1xx_hal_uart.c ****       /*Call registered Rx complete callback*/
3041:src/stm32f1xx_hal_uart.c ****       huart->RxCpltCallback(huart);
3042:src/stm32f1xx_hal_uart.c **** #else
3043:src/stm32f1xx_hal_uart.c ****       /*Call legacy weak Rx complete callback*/
3044:src/stm32f1xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
3045:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3046:src/stm32f1xx_hal_uart.c **** 
3047:src/stm32f1xx_hal_uart.c ****       return HAL_OK;
3048:src/stm32f1xx_hal_uart.c ****     }
3049:src/stm32f1xx_hal_uart.c ****     return HAL_OK;
3050:src/stm32f1xx_hal_uart.c ****   }
3051:src/stm32f1xx_hal_uart.c ****   else
3052:src/stm32f1xx_hal_uart.c ****   {
3053:src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
3054:src/stm32f1xx_hal_uart.c ****   }
3055:src/stm32f1xx_hal_uart.c **** }
3056:src/stm32f1xx_hal_uart.c **** 
3057:src/stm32f1xx_hal_uart.c **** /**
3058:src/stm32f1xx_hal_uart.c ****   * @brief  Configures the UART peripheral.
3059:src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3060:src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3061:src/stm32f1xx_hal_uart.c ****   * @retval None
3062:src/stm32f1xx_hal_uart.c ****   */
3063:src/stm32f1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart)
3064:src/stm32f1xx_hal_uart.c **** {
 108              		.loc 1 3064 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              	.LVL1:
 113 001a 38B5     		push	{r3, r4, r5, lr}	@
 114              	.LCFI0:
 115              		.cfi_def_cfa_offset 16
 116              		.cfi_offset 3, -16
 117              		.cfi_offset 4, -12
 118              		.cfi_offset 5, -8
 119              		.cfi_offset 14, -4
 120              		.loc 1 3064 0
 121 001c 0546     		mov	r5, r0	@ huart, huart
3065:src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg;
3066:src/stm32f1xx_hal_uart.c ****   uint32_t pclk;
3067:src/stm32f1xx_hal_uart.c **** 
3068:src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
3069:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3070:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3071:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
ARM GAS  /tmp/ccPoddoo.s 			page 57


3072:src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
3073:src/stm32f1xx_hal_uart.c **** 
3074:src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
3075:src/stm32f1xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits
3076:src/stm32f1xx_hal_uart.c ****      according to huart->Init.StopBits value */
3077:src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 122              		.loc 1 3077 0
 123 001e 0368     		ldr	r3, [r0]	@ _4, huart_3(D)->Instance
 124 0020 C168     		ldr	r1, [r0, #12]	@ huart_3(D)->Init.StopBits, huart_3(D)->Init.StopBits
 125 0022 1A69     		ldr	r2, [r3, #16]	@ _5, _4->CR2
 126 0024 1924     		movs	r4, #25	@ tmp208,
 127 0026 22F44052 		bic	r2, r2, #12288	@ tmp154, _5,
 128 002a 0A43     		orrs	r2, r2, r1	@, _8, tmp154, huart_3(D)->Init.StopBits
 129 002c 1A61     		str	r2, [r3, #16]	@ _8, _4->CR2
 130              	.LVL2:
3078:src/stm32f1xx_hal_uart.c **** 
3079:src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
3080:src/stm32f1xx_hal_uart.c ****   /* Configure the UART Word Length, Parity and mode:
3081:src/stm32f1xx_hal_uart.c ****      Set the M bits according to huart->Init.WordLength value
3082:src/stm32f1xx_hal_uart.c ****      Set PCE and PS bits according to huart->Init.Parity value
3083:src/stm32f1xx_hal_uart.c ****      Set TE and RE bits according to huart->Init.Mode value
3084:src/stm32f1xx_hal_uart.c ****      Set OVER8 bit according to huart->Init.OverSampling value */
3085:src/stm32f1xx_hal_uart.c **** 
3086:src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
3087:src/stm32f1xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
3088:src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
3089:src/stm32f1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | 
3090:src/stm32f1xx_hal_uart.c ****              tmpreg);
3091:src/stm32f1xx_hal_uart.c **** #else
3092:src/stm32f1xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 131              		.loc 1 3092 0
 132 002e 8268     		ldr	r2, [r0, #8]	@ huart_3(D)->Init.WordLength, huart_3(D)->Init.WordLength
 133 0030 0069     		ldr	r0, [r0, #16]	@ huart_3(D)->Init.Parity, huart_3(D)->Init.Parity
 134              	.LVL3:
3093:src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
 135              		.loc 1 3093 0
 136 0032 D968     		ldr	r1, [r3, #12]	@ _15, _4->CR1
3092:src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
 137              		.loc 1 3092 0
 138 0034 0243     		orrs	r2, r2, r0	@, tmp156, huart_3(D)->Init.WordLength, huart_3(D)->Init.Parity
 139              	.LVL4:
 140 0036 6869     		ldr	r0, [r5, #20]	@ huart_3(D)->Init.Mode, huart_3(D)->Init.Mode
 141              	.LVL5:
 142              		.loc 1 3093 0
 143 0038 21F4B051 		bic	r1, r1, #5632	@ tmp161, _15,
 144 003c 21F00C01 		bic	r1, r1, #12	@ tmp161, tmp161,
3092:src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
 145              		.loc 1 3092 0
 146 0040 0243     		orrs	r2, r2, r0	@, tmpreg, tmp156, huart_3(D)->Init.Mode
 147              	.LVL6:
 148              		.loc 1 3093 0
 149 0042 0A43     		orrs	r2, r2, r1	@, _17, tmpreg, tmp161
 150              	.LVL7:
 151 0044 DA60     		str	r2, [r3, #12]	@ _17, _4->CR1
3094:src/stm32f1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE),
3095:src/stm32f1xx_hal_uart.c ****              tmpreg);
3096:src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
ARM GAS  /tmp/ccPoddoo.s 			page 58


3097:src/stm32f1xx_hal_uart.c **** 
3098:src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
3099:src/stm32f1xx_hal_uart.c ****   /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
3100:src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 152              		.loc 1 3100 0
 153 0046 5A69     		ldr	r2, [r3, #20]	@ _19, _4->CR3
 154 0048 A969     		ldr	r1, [r5, #24]	@ huart_3(D)->Init.HwFlowCtl, huart_3(D)->Init.HwFlowCtl
 155 004a 22F44072 		bic	r2, r2, #768	@ tmp163, _19,
 156 004e 0A43     		orrs	r2, r2, r1	@, _22, tmp163, huart_3(D)->Init.HwFlowCtl
 157 0050 5A61     		str	r2, [r3, #20]	@ _22, _4->CR3
3101:src/stm32f1xx_hal_uart.c **** 
3102:src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
3103:src/stm32f1xx_hal_uart.c ****   /* Check the Over Sampling */
3104:src/stm32f1xx_hal_uart.c ****   if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
3105:src/stm32f1xx_hal_uart.c ****   {
3106:src/stm32f1xx_hal_uart.c ****     /*-------------------------- USART BRR Configuration ---------------------*/
3107:src/stm32f1xx_hal_uart.c ****     if(huart->Instance == USART1)
3108:src/stm32f1xx_hal_uart.c ****     {
3109:src/stm32f1xx_hal_uart.c ****       pclk = HAL_RCC_GetPCLK2Freq();
3110:src/stm32f1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
3111:src/stm32f1xx_hal_uart.c ****     }
3112:src/stm32f1xx_hal_uart.c ****     else
3113:src/stm32f1xx_hal_uart.c ****     {
3114:src/stm32f1xx_hal_uart.c ****       pclk = HAL_RCC_GetPCLK1Freq();
3115:src/stm32f1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
3116:src/stm32f1xx_hal_uart.c ****     }
3117:src/stm32f1xx_hal_uart.c ****   }
3118:src/stm32f1xx_hal_uart.c ****   else
3119:src/stm32f1xx_hal_uart.c ****   {
3120:src/stm32f1xx_hal_uart.c ****     /*-------------------------- USART BRR Configuration ---------------------*/
3121:src/stm32f1xx_hal_uart.c ****     if(huart->Instance == USART1)
3122:src/stm32f1xx_hal_uart.c ****     {
3123:src/stm32f1xx_hal_uart.c ****       pclk = HAL_RCC_GetPCLK2Freq();
3124:src/stm32f1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
3125:src/stm32f1xx_hal_uart.c ****     }
3126:src/stm32f1xx_hal_uart.c ****     else
3127:src/stm32f1xx_hal_uart.c ****     {
3128:src/stm32f1xx_hal_uart.c ****       pclk = HAL_RCC_GetPCLK1Freq();
3129:src/stm32f1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
3130:src/stm32f1xx_hal_uart.c ****     }
3131:src/stm32f1xx_hal_uart.c ****   }
3132:src/stm32f1xx_hal_uart.c **** #else
3133:src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration ---------------------*/
3134:src/stm32f1xx_hal_uart.c ****   if(huart->Instance == USART1)
 158              		.loc 1 3134 0
 159 0052 0D4A     		ldr	r2, .L6	@ tmp165,
 160 0054 9342     		cmp	r3, r2	@ _4, tmp165
 161 0056 14D1     		bne	.L3	@,
3135:src/stm32f1xx_hal_uart.c ****   {
3136:src/stm32f1xx_hal_uart.c ****     pclk = HAL_RCC_GetPCLK2Freq();
 162              		.loc 1 3136 0
 163 0058 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq	@
 164              	.LVL8:
 165              	.L5:
3137:src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
3138:src/stm32f1xx_hal_uart.c ****   }
3139:src/stm32f1xx_hal_uart.c ****   else
ARM GAS  /tmp/ccPoddoo.s 			page 59


3140:src/stm32f1xx_hal_uart.c ****   {
3141:src/stm32f1xx_hal_uart.c ****     pclk = HAL_RCC_GetPCLK1Freq();
3142:src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 166              		.loc 1 3142 0
 167 005c 6043     		muls	r0, r4, r0	@ tmp187, tmp208
 168              	.LVL9:
 169 005e 6C68     		ldr	r4, [r5, #4]	@ huart_3(D)->Init.BaudRate, huart_3(D)->Init.BaudRate
 170 0060 6422     		movs	r2, #100	@ tmp195,
 171 0062 A400     		lsls	r4, r4, #2	@ tmp189, huart_3(D)->Init.BaudRate,
 172 0064 B0FBF4F0 		udiv	r0, r0, r4	@ _48, tmp187, tmp189
 173 0068 B0FBF2F4 		udiv	r4, r0, r2	@ tmp194, _48, tmp195
 174 006c 02FB1403 		mls	r3, r2, r4, r0	@ tmp198, tmp195, tmp194, _48
 175 0070 1B01     		lsls	r3, r3, #4	@ tmp199, tmp198,
 176 0072 3233     		adds	r3, r3, #50	@ tmp200, tmp199,
 177 0074 B3FBF2F3 		udiv	r3, r3, r2	@ tmp202, tmp200, tmp195
 178 0078 2968     		ldr	r1, [r5]	@ _44, huart_3(D)->Instance
 179 007a 03EB0413 		add	r3, r3, r4, lsl #4	@ _58, tmp202, tmp194,
 180 007e 8B60     		str	r3, [r1, #8]	@ _58,
 181 0080 38BD     		pop	{r3, r4, r5, pc}	@
 182              	.LVL10:
 183              	.L3:
3141:src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 184              		.loc 1 3141 0
 185 0082 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq	@
 186              	.LVL11:
 187 0086 E9E7     		b	.L5	@
 188              	.L7:
 189              		.align	2
 190              	.L6:
 191 0088 00380140 		.word	1073821696
 192              		.cfi_endproc
 193              	.LFE119:
 194              		.size	UART_SetConfig, .-UART_SetConfig
 195              		.align	1
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 199              		.fpu softvfp
 200              		.type	UART_WaitOnFlagUntilTimeout.constprop.3, %function
 201              	UART_WaitOnFlagUntilTimeout.constprop.3:
 202              	.LFB140:
2690:src/stm32f1xx_hal_uart.c **** {
 203              		.loc 1 2690 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              	.LVL12:
 208 008c F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 209              	.LCFI1:
 210              		.cfi_def_cfa_offset 24
 211              		.cfi_offset 3, -24
 212              		.cfi_offset 4, -20
 213              		.cfi_offset 5, -16
 214              		.cfi_offset 6, -12
 215              		.cfi_offset 7, -8
 216              		.cfi_offset 14, -4
 217 008e 0446     		mov	r4, r0	@ huart, huart
ARM GAS  /tmp/ccPoddoo.s 			page 60


 218 0090 0E46     		mov	r6, r1	@ Flag, Flag
 219 0092 1746     		mov	r7, r2	@ Tickstart, Tickstart
 220 0094 1D46     		mov	r5, r3	@ Timeout, Timeout
 221              	.LVL13:
 222              	.L9:
2693:src/stm32f1xx_hal_uart.c ****   {
 223              		.loc 1 2693 0
 224 0096 2168     		ldr	r1, [r4]	@ _7, huart_5(D)->Instance
 225              	.L10:
 226 0098 0B68     		ldr	r3, [r1]	@ _8, _7->SR
 227 009a 36EA0303 		bics	r3, r6, r3	@ tmp134, Flag, _8
 228 009e 01D1     		bne	.L14	@,
2714:src/stm32f1xx_hal_uart.c **** }
 229              		.loc 1 2714 0
 230 00a0 0020     		movs	r0, #0	@ <retval>,
2715:src/stm32f1xx_hal_uart.c **** 
 231              		.loc 1 2715 0
 232 00a2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 233              	.LVL14:
 234              	.L14:
2696:src/stm32f1xx_hal_uart.c ****     {
 235              		.loc 1 2696 0
 236 00a4 6B1C     		adds	r3, r5, #1	@, Timeout,
 237 00a6 F7D0     		beq	.L10	@,
2698:src/stm32f1xx_hal_uart.c ****       {
 238              		.loc 1 2698 0
 239 00a8 95B9     		cbnz	r5, .L11	@ Timeout,
 240              	.L13:
 241              	.LVL15:
 242              	.LBB4:
 243              	.LBB5:
2701:src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 244              		.loc 1 2701 0
 245 00aa 2368     		ldr	r3, [r4]	@ _21, huart_5(D)->Instance
2708:src/stm32f1xx_hal_uart.c **** 
 246              		.loc 1 2708 0
 247 00ac 0320     		movs	r0, #3	@ <retval>,
2701:src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 248              		.loc 1 2701 0
 249 00ae DA68     		ldr	r2, [r3, #12]	@ _22, _21->CR1
 250 00b0 22F4D072 		bic	r2, r2, #416	@ _23, _22,
 251 00b4 DA60     		str	r2, [r3, #12]	@ _23, _21->CR1
2702:src/stm32f1xx_hal_uart.c **** 
 252              		.loc 1 2702 0
 253 00b6 5A69     		ldr	r2, [r3, #20]	@ _24, _21->CR3
 254 00b8 22F00102 		bic	r2, r2, #1	@ _25, _24,
 255 00bc 5A61     		str	r2, [r3, #20]	@ _25, _21->CR3
2704:src/stm32f1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 256              		.loc 1 2704 0
 257 00be 2023     		movs	r3, #32	@ tmp125,
 258 00c0 84F83930 		strb	r3, [r4, #57]	@ tmp125, huart_5(D)->gState
2705:src/stm32f1xx_hal_uart.c **** 
 259              		.loc 1 2705 0
 260 00c4 84F83A30 		strb	r3, [r4, #58]	@ tmp125, huart_5(D)->RxState
2708:src/stm32f1xx_hal_uart.c **** 
 261              		.loc 1 2708 0
 262 00c8 0023     		movs	r3, #0	@ tmp129,
ARM GAS  /tmp/ccPoddoo.s 			page 61


 263 00ca 84F83830 		strb	r3, [r4, #56]	@ tmp129, huart_5(D)->Lock
 264              	.LVL16:
 265 00ce F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 266              	.LVL17:
 267              	.L11:
 268              	.LBE5:
 269              	.LBE4:
2698:src/stm32f1xx_hal_uart.c ****       {
 270              		.loc 1 2698 0
 271 00d0 FFF7FEFF 		bl	HAL_GetTick	@
 272              	.LVL18:
 273 00d4 C01B     		subs	r0, r0, r7	@ tmp131,, Tickstart
 274 00d6 8542     		cmp	r5, r0	@ Timeout, tmp131
 275 00d8 DDD2     		bcs	.L9	@,
 276 00da E6E7     		b	.L13	@
 277              		.cfi_endproc
 278              	.LFE140:
 279              		.size	UART_WaitOnFlagUntilTimeout.constprop.3, .-UART_WaitOnFlagUntilTimeout.constprop.3
 280              		.align	1
 281              		.weak	HAL_UART_MspInit
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu softvfp
 286              		.type	HAL_UART_MspInit, %function
 287              	HAL_UART_MspInit:
 288              	.LFB139:
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              		@ link register save eliminated.
 293 00dc 7047     		bx	lr	@
 294              		.cfi_endproc
 295              	.LFE139:
 296              		.size	HAL_UART_MspInit, .-HAL_UART_MspInit
 297              		.align	1
 298              		.global	HAL_UART_Init
 299              		.syntax unified
 300              		.thumb
 301              		.thumb_func
 302              		.fpu softvfp
 303              		.type	HAL_UART_Init, %function
 304              	HAL_UART_Init:
 305              	.LFB65:
 315:src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 306              		.loc 1 315 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 0
 309              		@ frame_needed = 0, uses_anonymous_args = 0
 310              	.LVL19:
 315:src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 311              		.loc 1 315 0
 312 00de 10B5     		push	{r4, lr}	@
 313              	.LCFI2:
 314              		.cfi_def_cfa_offset 8
 315              		.cfi_offset 4, -8
 316              		.cfi_offset 14, -4
ARM GAS  /tmp/ccPoddoo.s 			page 62


 317:src/stm32f1xx_hal_uart.c ****   {
 317              		.loc 1 317 0
 318 00e0 0446     		mov	r4, r0	@ huart, huart
 319 00e2 40B3     		cbz	r0, .L21	@ huart,
 338:src/stm32f1xx_hal_uart.c ****   {
 320              		.loc 1 338 0
 321 00e4 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2	@ huart_4(D)->gState, huart_4(D)->gState
 322 00e8 03F0FF02 		and	r2, r3, #255	@ _6, huart_4(D)->gState,
 323 00ec 1BB9     		cbnz	r3, .L20	@ huart_4(D)->gState,
 341:src/stm32f1xx_hal_uart.c **** 
 324              		.loc 1 341 0
 325 00ee 80F83820 		strb	r2, [r0, #56]	@ _6, huart_4(D)->Lock
 355:src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 326              		.loc 1 355 0
 327 00f2 FFF7FEFF 		bl	HAL_UART_MspInit	@
 328              	.LVL20:
 329              	.L20:
 359:src/stm32f1xx_hal_uart.c **** 
 330              		.loc 1 359 0
 331 00f6 2423     		movs	r3, #36	@ tmp128,
 362:src/stm32f1xx_hal_uart.c **** 
 332              		.loc 1 362 0
 333 00f8 2268     		ldr	r2, [r4]	@ _10, huart_4(D)->Instance
 359:src/stm32f1xx_hal_uart.c **** 
 334              		.loc 1 359 0
 335 00fa 84F83930 		strb	r3, [r4, #57]	@ tmp128, huart_4(D)->gState
 362:src/stm32f1xx_hal_uart.c **** 
 336              		.loc 1 362 0
 337 00fe D368     		ldr	r3, [r2, #12]	@ _11, _10->CR1
 365:src/stm32f1xx_hal_uart.c **** 
 338              		.loc 1 365 0
 339 0100 2046     		mov	r0, r4	@, huart
 362:src/stm32f1xx_hal_uart.c **** 
 340              		.loc 1 362 0
 341 0102 23F40053 		bic	r3, r3, #8192	@ _12, _11,
 342 0106 D360     		str	r3, [r2, #12]	@ _12, _10->CR1
 365:src/stm32f1xx_hal_uart.c **** 
 343              		.loc 1 365 0
 344 0108 FFF787FF 		bl	UART_SetConfig	@
 345              	.LVL21:
 370:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 346              		.loc 1 370 0
 347 010c 2368     		ldr	r3, [r4]	@ _15, huart_4(D)->Instance
 377:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 348              		.loc 1 377 0
 349 010e 0020     		movs	r0, #0	@ tmp130,
 370:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 350              		.loc 1 370 0
 351 0110 1A69     		ldr	r2, [r3, #16]	@ _16, _15->CR2
 352 0112 22F49042 		bic	r2, r2, #18432	@ _17, _16,
 353 0116 1A61     		str	r2, [r3, #16]	@ _17, _15->CR2
 371:src/stm32f1xx_hal_uart.c **** 
 354              		.loc 1 371 0
 355 0118 5A69     		ldr	r2, [r3, #20]	@ _19, _15->CR3
 356 011a 22F02A02 		bic	r2, r2, #42	@ _20, _19,
 357 011e 5A61     		str	r2, [r3, #20]	@ _20, _15->CR3
 374:src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccPoddoo.s 			page 63


 358              		.loc 1 374 0
 359 0120 DA68     		ldr	r2, [r3, #12]	@ _22, _15->CR1
 360 0122 42F40052 		orr	r2, r2, #8192	@ _23, _22,
 361 0126 DA60     		str	r2, [r3, #12]	@ _23, _15->CR1
 378:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 362              		.loc 1 378 0
 363 0128 2023     		movs	r3, #32	@ tmp131,
 377:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 364              		.loc 1 377 0
 365 012a E063     		str	r0, [r4, #60]	@ tmp130, huart_4(D)->ErrorCode
 378:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 366              		.loc 1 378 0
 367 012c 84F83930 		strb	r3, [r4, #57]	@ tmp131, huart_4(D)->gState
 379:src/stm32f1xx_hal_uart.c **** 
 368              		.loc 1 379 0
 369 0130 84F83A30 		strb	r3, [r4, #58]	@ tmp131, huart_4(D)->RxState
 381:src/stm32f1xx_hal_uart.c **** }
 370              		.loc 1 381 0
 371 0134 10BD     		pop	{r4, pc}	@
 372              	.LVL22:
 373              	.L21:
 319:src/stm32f1xx_hal_uart.c ****   }
 374              		.loc 1 319 0
 375 0136 0120     		movs	r0, #1	@ <retval>,
 376              	.LVL23:
 382:src/stm32f1xx_hal_uart.c **** 
 377              		.loc 1 382 0
 378 0138 10BD     		pop	{r4, pc}	@
 379              		.cfi_endproc
 380              	.LFE65:
 381              		.size	HAL_UART_Init, .-HAL_UART_Init
 382              		.align	1
 383              		.global	HAL_HalfDuplex_Init
 384              		.syntax unified
 385              		.thumb
 386              		.thumb_func
 387              		.fpu softvfp
 388              		.type	HAL_HalfDuplex_Init, %function
 389              	HAL_HalfDuplex_Init:
 390              	.LFB66:
 392:src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 391              		.loc 1 392 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              	.LVL24:
 396 013a 10B5     		push	{r4, lr}	@
 397              	.LCFI3:
 398              		.cfi_def_cfa_offset 8
 399              		.cfi_offset 4, -8
 400              		.cfi_offset 14, -4
 394:src/stm32f1xx_hal_uart.c ****   {
 401              		.loc 1 394 0
 402 013c 0446     		mov	r4, r0	@ huart, huart
 403 013e 60B3     		cbz	r0, .L25	@ huart,
 406:src/stm32f1xx_hal_uart.c ****   {
 404              		.loc 1 406 0
ARM GAS  /tmp/ccPoddoo.s 			page 64


 405 0140 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2	@ huart_4(D)->gState, huart_4(D)->gState
 406 0144 03F0FF02 		and	r2, r3, #255	@ _6, huart_4(D)->gState,
 407 0148 1BB9     		cbnz	r3, .L24	@ huart_4(D)->gState,
 409:src/stm32f1xx_hal_uart.c **** 
 408              		.loc 1 409 0
 409 014a 80F83820 		strb	r2, [r0, #56]	@ _6, huart_4(D)->Lock
 423:src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 410              		.loc 1 423 0
 411 014e FFF7FEFF 		bl	HAL_UART_MspInit	@
 412              	.LVL25:
 413              	.L24:
 427:src/stm32f1xx_hal_uart.c **** 
 414              		.loc 1 427 0
 415 0152 2423     		movs	r3, #36	@ tmp130,
 430:src/stm32f1xx_hal_uart.c **** 
 416              		.loc 1 430 0
 417 0154 2268     		ldr	r2, [r4]	@ _10, huart_4(D)->Instance
 427:src/stm32f1xx_hal_uart.c **** 
 418              		.loc 1 427 0
 419 0156 84F83930 		strb	r3, [r4, #57]	@ tmp130, huart_4(D)->gState
 430:src/stm32f1xx_hal_uart.c **** 
 420              		.loc 1 430 0
 421 015a D368     		ldr	r3, [r2, #12]	@ _11, _10->CR1
 433:src/stm32f1xx_hal_uart.c **** 
 422              		.loc 1 433 0
 423 015c 2046     		mov	r0, r4	@, huart
 430:src/stm32f1xx_hal_uart.c **** 
 424              		.loc 1 430 0
 425 015e 23F40053 		bic	r3, r3, #8192	@ _12, _11,
 426 0162 D360     		str	r3, [r2, #12]	@ _12, _10->CR1
 433:src/stm32f1xx_hal_uart.c **** 
 427              		.loc 1 433 0
 428 0164 FFF759FF 		bl	UART_SetConfig	@
 429              	.LVL26:
 438:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 430              		.loc 1 438 0
 431 0168 2368     		ldr	r3, [r4]	@ _15, huart_4(D)->Instance
 448:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 432              		.loc 1 448 0
 433 016a 0020     		movs	r0, #0	@ tmp132,
 438:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 434              		.loc 1 438 0
 435 016c 1A69     		ldr	r2, [r3, #16]	@ _16, _15->CR2
 436 016e 22F49042 		bic	r2, r2, #18432	@ _17, _16,
 437 0172 1A61     		str	r2, [r3, #16]	@ _17, _15->CR2
 439:src/stm32f1xx_hal_uart.c **** 
 438              		.loc 1 439 0
 439 0174 5A69     		ldr	r2, [r3, #20]	@ _19, _15->CR3
 440 0176 22F02202 		bic	r2, r2, #34	@ _20, _19,
 441 017a 5A61     		str	r2, [r3, #20]	@ _20, _15->CR3
 442:src/stm32f1xx_hal_uart.c **** 
 442              		.loc 1 442 0
 443 017c 5A69     		ldr	r2, [r3, #20]	@ _22, _15->CR3
 444 017e 42F00802 		orr	r2, r2, #8	@ _23, _22,
 445 0182 5A61     		str	r2, [r3, #20]	@ _23, _15->CR3
 445:src/stm32f1xx_hal_uart.c **** 
 446              		.loc 1 445 0
ARM GAS  /tmp/ccPoddoo.s 			page 65


 447 0184 DA68     		ldr	r2, [r3, #12]	@ _25, _15->CR1
 448 0186 42F40052 		orr	r2, r2, #8192	@ _26, _25,
 449 018a DA60     		str	r2, [r3, #12]	@ _26, _15->CR1
 449:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 450              		.loc 1 449 0
 451 018c 2023     		movs	r3, #32	@ tmp133,
 448:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 452              		.loc 1 448 0
 453 018e E063     		str	r0, [r4, #60]	@ tmp132, huart_4(D)->ErrorCode
 449:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 454              		.loc 1 449 0
 455 0190 84F83930 		strb	r3, [r4, #57]	@ tmp133, huart_4(D)->gState
 450:src/stm32f1xx_hal_uart.c **** 
 456              		.loc 1 450 0
 457 0194 84F83A30 		strb	r3, [r4, #58]	@ tmp133, huart_4(D)->RxState
 452:src/stm32f1xx_hal_uart.c **** }
 458              		.loc 1 452 0
 459 0198 10BD     		pop	{r4, pc}	@
 460              	.LVL27:
 461              	.L25:
 396:src/stm32f1xx_hal_uart.c ****   }
 462              		.loc 1 396 0
 463 019a 0120     		movs	r0, #1	@ <retval>,
 464              	.LVL28:
 453:src/stm32f1xx_hal_uart.c **** 
 465              		.loc 1 453 0
 466 019c 10BD     		pop	{r4, pc}	@
 467              		.cfi_endproc
 468              	.LFE66:
 469              		.size	HAL_HalfDuplex_Init, .-HAL_HalfDuplex_Init
 470              		.align	1
 471              		.global	HAL_LIN_Init
 472              		.syntax unified
 473              		.thumb
 474              		.thumb_func
 475              		.fpu softvfp
 476              		.type	HAL_LIN_Init, %function
 477              	HAL_LIN_Init:
 478              	.LFB67:
 467:src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 479              		.loc 1 467 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483              	.LVL29:
 484 019e 38B5     		push	{r3, r4, r5, lr}	@
 485              	.LCFI4:
 486              		.cfi_def_cfa_offset 16
 487              		.cfi_offset 3, -16
 488              		.cfi_offset 4, -12
 489              		.cfi_offset 5, -8
 490              		.cfi_offset 14, -4
 467:src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 491              		.loc 1 467 0
 492 01a0 0D46     		mov	r5, r1	@ BreakDetectLength, BreakDetectLength
 469:src/stm32f1xx_hal_uart.c ****   {
 493              		.loc 1 469 0
ARM GAS  /tmp/ccPoddoo.s 			page 66


 494 01a2 0446     		mov	r4, r0	@ huart, huart
 495 01a4 0028     		cmp	r0, #0	@ huart
 496 01a6 33D0     		beq	.L29	@
 484:src/stm32f1xx_hal_uart.c ****   {
 497              		.loc 1 484 0
 498 01a8 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2	@ huart_4(D)->gState, huart_4(D)->gState
 499 01ac 03F0FF02 		and	r2, r3, #255	@ _6, huart_4(D)->gState,
 500 01b0 1BB9     		cbnz	r3, .L28	@ huart_4(D)->gState,
 487:src/stm32f1xx_hal_uart.c **** 
 501              		.loc 1 487 0
 502 01b2 80F83820 		strb	r2, [r0, #56]	@ _6, huart_4(D)->Lock
 501:src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 503              		.loc 1 501 0
 504 01b6 FFF7FEFF 		bl	HAL_UART_MspInit	@
 505              	.LVL30:
 506              	.L28:
 505:src/stm32f1xx_hal_uart.c **** 
 507              		.loc 1 505 0
 508 01ba 2423     		movs	r3, #36	@ tmp135,
 508:src/stm32f1xx_hal_uart.c **** 
 509              		.loc 1 508 0
 510 01bc 2268     		ldr	r2, [r4]	@ _10, huart_4(D)->Instance
 505:src/stm32f1xx_hal_uart.c **** 
 511              		.loc 1 505 0
 512 01be 84F83930 		strb	r3, [r4, #57]	@ tmp135, huart_4(D)->gState
 508:src/stm32f1xx_hal_uart.c **** 
 513              		.loc 1 508 0
 514 01c2 D368     		ldr	r3, [r2, #12]	@ _11, _10->CR1
 511:src/stm32f1xx_hal_uart.c **** 
 515              		.loc 1 511 0
 516 01c4 2046     		mov	r0, r4	@, huart
 508:src/stm32f1xx_hal_uart.c **** 
 517              		.loc 1 508 0
 518 01c6 23F40053 		bic	r3, r3, #8192	@ _12, _11,
 519 01ca D360     		str	r3, [r2, #12]	@ _12, _10->CR1
 511:src/stm32f1xx_hal_uart.c **** 
 520              		.loc 1 511 0
 521 01cc FFF725FF 		bl	UART_SetConfig	@
 522              	.LVL31:
 516:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 523              		.loc 1 516 0
 524 01d0 2368     		ldr	r3, [r4]	@ _15, huart_4(D)->Instance
 530:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 525              		.loc 1 530 0
 526 01d2 0020     		movs	r0, #0	@ tmp137,
 516:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 527              		.loc 1 516 0
 528 01d4 1A69     		ldr	r2, [r3, #16]	@ _16, _15->CR2
 529 01d6 22F40062 		bic	r2, r2, #2048	@ _17, _16,
 530 01da 1A61     		str	r2, [r3, #16]	@ _17, _15->CR2
 517:src/stm32f1xx_hal_uart.c **** 
 531              		.loc 1 517 0
 532 01dc 5A69     		ldr	r2, [r3, #20]	@ _19, _15->CR3
 533 01de 22F02A02 		bic	r2, r2, #42	@ _20, _19,
 534 01e2 5A61     		str	r2, [r3, #20]	@ _20, _15->CR3
 520:src/stm32f1xx_hal_uart.c **** 
 535              		.loc 1 520 0
ARM GAS  /tmp/ccPoddoo.s 			page 67


 536 01e4 1A69     		ldr	r2, [r3, #16]	@ _22, _15->CR2
 537 01e6 42F48042 		orr	r2, r2, #16384	@ _23, _22,
 538 01ea 1A61     		str	r2, [r3, #16]	@ _23, _15->CR2
 523:src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, BreakDetectLength);
 539              		.loc 1 523 0
 540 01ec 1A69     		ldr	r2, [r3, #16]	@ _25, _15->CR2
 541 01ee 22F02002 		bic	r2, r2, #32	@ _26, _25,
 542 01f2 1A61     		str	r2, [r3, #16]	@ _26, _15->CR2
 524:src/stm32f1xx_hal_uart.c **** 
 543              		.loc 1 524 0
 544 01f4 1969     		ldr	r1, [r3, #16]	@ _28, _15->CR2
 545 01f6 2943     		orrs	r1, r1, r5	@, _30, _28, BreakDetectLength
 546 01f8 1961     		str	r1, [r3, #16]	@ _30, _15->CR2
 527:src/stm32f1xx_hal_uart.c **** 
 547              		.loc 1 527 0
 548 01fa DA68     		ldr	r2, [r3, #12]	@ _32, _15->CR1
 549 01fc 42F40052 		orr	r2, r2, #8192	@ _33, _32,
 550 0200 DA60     		str	r2, [r3, #12]	@ _33, _15->CR1
 531:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 551              		.loc 1 531 0
 552 0202 2023     		movs	r3, #32	@ tmp138,
 530:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 553              		.loc 1 530 0
 554 0204 E063     		str	r0, [r4, #60]	@ tmp137, huart_4(D)->ErrorCode
 531:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 555              		.loc 1 531 0
 556 0206 84F83930 		strb	r3, [r4, #57]	@ tmp138, huart_4(D)->gState
 532:src/stm32f1xx_hal_uart.c **** 
 557              		.loc 1 532 0
 558 020a 84F83A30 		strb	r3, [r4, #58]	@ tmp138, huart_4(D)->RxState
 534:src/stm32f1xx_hal_uart.c **** }
 559              		.loc 1 534 0
 560 020e 38BD     		pop	{r3, r4, r5, pc}	@
 561              	.LVL32:
 562              	.L29:
 471:src/stm32f1xx_hal_uart.c ****   }
 563              		.loc 1 471 0
 564 0210 0120     		movs	r0, #1	@ <retval>,
 565              	.LVL33:
 535:src/stm32f1xx_hal_uart.c **** 
 566              		.loc 1 535 0
 567 0212 38BD     		pop	{r3, r4, r5, pc}	@
 568              		.cfi_endproc
 569              	.LFE67:
 570              		.size	HAL_LIN_Init, .-HAL_LIN_Init
 571              		.align	1
 572              		.global	HAL_MultiProcessor_Init
 573              		.syntax unified
 574              		.thumb
 575              		.thumb_func
 576              		.fpu softvfp
 577              		.type	HAL_MultiProcessor_Init, %function
 578              	HAL_MultiProcessor_Init:
 579              	.LFB68:
 550:src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 580              		.loc 1 550 0
 581              		.cfi_startproc
ARM GAS  /tmp/ccPoddoo.s 			page 68


 582              		@ args = 0, pretend = 0, frame = 0
 583              		@ frame_needed = 0, uses_anonymous_args = 0
 584              	.LVL34:
 585 0214 70B5     		push	{r4, r5, r6, lr}	@
 586              	.LCFI5:
 587              		.cfi_def_cfa_offset 16
 588              		.cfi_offset 4, -16
 589              		.cfi_offset 5, -12
 590              		.cfi_offset 6, -8
 591              		.cfi_offset 14, -4
 550:src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 592              		.loc 1 550 0
 593 0216 0D46     		mov	r5, r1	@ Address, Address
 594 0218 1646     		mov	r6, r2	@ WakeUpMethod, WakeUpMethod
 552:src/stm32f1xx_hal_uart.c ****   {
 595              		.loc 1 552 0
 596 021a 0446     		mov	r4, r0	@ huart, huart
 597 021c 0028     		cmp	r0, #0	@ huart
 598 021e 36D0     		beq	.L33	@
 568:src/stm32f1xx_hal_uart.c ****   {
 599              		.loc 1 568 0
 600 0220 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2	@ huart_4(D)->gState, huart_4(D)->gState
 601 0224 03F0FF02 		and	r2, r3, #255	@ _6, huart_4(D)->gState,
 602              	.LVL35:
 603 0228 1BB9     		cbnz	r3, .L32	@ huart_4(D)->gState,
 571:src/stm32f1xx_hal_uart.c **** 
 604              		.loc 1 571 0
 605 022a 80F83820 		strb	r2, [r0, #56]	@ _6, huart_4(D)->Lock
 585:src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 606              		.loc 1 585 0
 607 022e FFF7FEFF 		bl	HAL_UART_MspInit	@
 608              	.LVL36:
 609              	.L32:
 589:src/stm32f1xx_hal_uart.c **** 
 610              		.loc 1 589 0
 611 0232 2423     		movs	r3, #36	@ tmp139,
 592:src/stm32f1xx_hal_uart.c **** 
 612              		.loc 1 592 0
 613 0234 2268     		ldr	r2, [r4]	@ _10, huart_4(D)->Instance
 589:src/stm32f1xx_hal_uart.c **** 
 614              		.loc 1 589 0
 615 0236 84F83930 		strb	r3, [r4, #57]	@ tmp139, huart_4(D)->gState
 592:src/stm32f1xx_hal_uart.c **** 
 616              		.loc 1 592 0
 617 023a D368     		ldr	r3, [r2, #12]	@ _11, _10->CR1
 595:src/stm32f1xx_hal_uart.c **** 
 618              		.loc 1 595 0
 619 023c 2046     		mov	r0, r4	@, huart
 592:src/stm32f1xx_hal_uart.c **** 
 620              		.loc 1 592 0
 621 023e 23F40053 		bic	r3, r3, #8192	@ _12, _11,
 622 0242 D360     		str	r3, [r2, #12]	@ _12, _10->CR1
 595:src/stm32f1xx_hal_uart.c **** 
 623              		.loc 1 595 0
 624 0244 FFF7E9FE 		bl	UART_SetConfig	@
 625              	.LVL37:
 600:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
ARM GAS  /tmp/ccPoddoo.s 			page 69


 626              		.loc 1 600 0
 627 0248 2368     		ldr	r3, [r4]	@ _15, huart_4(D)->Instance
 615:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 628              		.loc 1 615 0
 629 024a 0020     		movs	r0, #0	@ tmp141,
 600:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 630              		.loc 1 600 0
 631 024c 1A69     		ldr	r2, [r3, #16]	@ _16, _15->CR2
 632 024e 22F49042 		bic	r2, r2, #18432	@ _17, _16,
 633 0252 1A61     		str	r2, [r3, #16]	@ _17, _15->CR2
 601:src/stm32f1xx_hal_uart.c **** 
 634              		.loc 1 601 0
 635 0254 5A69     		ldr	r2, [r3, #20]	@ _19, _15->CR3
 636 0256 22F02A02 		bic	r2, r2, #42	@ _20, _19,
 637 025a 5A61     		str	r2, [r3, #20]	@ _20, _15->CR3
 604:src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, Address);
 638              		.loc 1 604 0
 639 025c 1A69     		ldr	r2, [r3, #16]	@ _22, _15->CR2
 640 025e 22F00F02 		bic	r2, r2, #15	@ _23, _22,
 641 0262 1A61     		str	r2, [r3, #16]	@ _23, _15->CR2
 605:src/stm32f1xx_hal_uart.c **** 
 642              		.loc 1 605 0
 643 0264 1A69     		ldr	r2, [r3, #16]	@ _25, _15->CR2
 644 0266 1543     		orrs	r5, r5, r2	@, _28, Address, _25
 645 0268 1D61     		str	r5, [r3, #16]	@ _28, _15->CR2
 608:src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, WakeUpMethod);
 646              		.loc 1 608 0
 647 026a DA68     		ldr	r2, [r3, #12]	@ _30, _15->CR1
 648 026c 22F40062 		bic	r2, r2, #2048	@ _31, _30,
 649 0270 DA60     		str	r2, [r3, #12]	@ _31, _15->CR1
 609:src/stm32f1xx_hal_uart.c **** 
 650              		.loc 1 609 0
 651 0272 DA68     		ldr	r2, [r3, #12]	@ _33, _15->CR1
 652 0274 3243     		orrs	r2, r2, r6	@, _35, _33, WakeUpMethod
 653 0276 DA60     		str	r2, [r3, #12]	@ _35, _15->CR1
 612:src/stm32f1xx_hal_uart.c **** 
 654              		.loc 1 612 0
 655 0278 DA68     		ldr	r2, [r3, #12]	@ _37, _15->CR1
 656 027a 42F40052 		orr	r2, r2, #8192	@ _38, _37,
 657 027e DA60     		str	r2, [r3, #12]	@ _38, _15->CR1
 616:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 658              		.loc 1 616 0
 659 0280 2023     		movs	r3, #32	@ tmp142,
 615:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 660              		.loc 1 615 0
 661 0282 E063     		str	r0, [r4, #60]	@ tmp141, huart_4(D)->ErrorCode
 616:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 662              		.loc 1 616 0
 663 0284 84F83930 		strb	r3, [r4, #57]	@ tmp142, huart_4(D)->gState
 617:src/stm32f1xx_hal_uart.c **** 
 664              		.loc 1 617 0
 665 0288 84F83A30 		strb	r3, [r4, #58]	@ tmp142, huart_4(D)->RxState
 619:src/stm32f1xx_hal_uart.c **** }
 666              		.loc 1 619 0
 667 028c 70BD     		pop	{r4, r5, r6, pc}	@
 668              	.LVL38:
 669              	.L33:
ARM GAS  /tmp/ccPoddoo.s 			page 70


 554:src/stm32f1xx_hal_uart.c ****   }
 670              		.loc 1 554 0
 671 028e 0120     		movs	r0, #1	@ <retval>,
 672              	.LVL39:
 620:src/stm32f1xx_hal_uart.c **** 
 673              		.loc 1 620 0
 674 0290 70BD     		pop	{r4, r5, r6, pc}	@
 675              		.cfi_endproc
 676              	.LFE68:
 677              		.size	HAL_MultiProcessor_Init, .-HAL_MultiProcessor_Init
 678              		.align	1
 679              		.weak	HAL_UART_MspDeInit
 680              		.syntax unified
 681              		.thumb
 682              		.thumb_func
 683              		.fpu softvfp
 684              		.type	HAL_UART_MspDeInit, %function
 685              	HAL_UART_MspDeInit:
 686              	.LFB137:
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 0
 689              		@ frame_needed = 0, uses_anonymous_args = 0
 690              		@ link register save eliminated.
 691 0292 7047     		bx	lr	@
 692              		.cfi_endproc
 693              	.LFE137:
 694              		.size	HAL_UART_MspDeInit, .-HAL_UART_MspDeInit
 695              		.align	1
 696              		.global	HAL_UART_DeInit
 697              		.syntax unified
 698              		.thumb
 699              		.thumb_func
 700              		.fpu softvfp
 701              		.type	HAL_UART_DeInit, %function
 702              	HAL_UART_DeInit:
 703              	.LFB69:
 629:src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 704              		.loc 1 629 0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 0
 707              		@ frame_needed = 0, uses_anonymous_args = 0
 708              	.LVL40:
 629:src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 709              		.loc 1 629 0
 710 0294 10B5     		push	{r4, lr}	@
 711              	.LCFI6:
 712              		.cfi_def_cfa_offset 8
 713              		.cfi_offset 4, -8
 714              		.cfi_offset 14, -4
 631:src/stm32f1xx_hal_uart.c ****   {
 715              		.loc 1 631 0
 716 0296 0446     		mov	r4, r0	@ huart, huart
 717 0298 90B1     		cbz	r0, .L37	@ huart,
 639:src/stm32f1xx_hal_uart.c **** 
 718              		.loc 1 639 0
 719 029a 2423     		movs	r3, #36	@ tmp115,
 642:src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccPoddoo.s 			page 71


 720              		.loc 1 642 0
 721 029c 0268     		ldr	r2, [r0]	@ _6, huart_3(D)->Instance
 639:src/stm32f1xx_hal_uart.c **** 
 722              		.loc 1 639 0
 723 029e 80F83930 		strb	r3, [r0, #57]	@ tmp115, huart_3(D)->gState
 642:src/stm32f1xx_hal_uart.c **** 
 724              		.loc 1 642 0
 725 02a2 D368     		ldr	r3, [r2, #12]	@ _7, _6->CR1
 726 02a4 23F40053 		bic	r3, r3, #8192	@ _8, _7,
 727 02a8 D360     		str	r3, [r2, #12]	@ _8, _6->CR1
 653:src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 728              		.loc 1 653 0
 729 02aa FFF7FEFF 		bl	HAL_UART_MspDeInit	@
 730              	.LVL41:
 656:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 731              		.loc 1 656 0
 732 02ae 0020     		movs	r0, #0	@ tmp117,
 733 02b0 E063     		str	r0, [r4, #60]	@ tmp117, huart_3(D)->ErrorCode
 661:src/stm32f1xx_hal_uart.c **** 
 734              		.loc 1 661 0
 735 02b2 84F83800 		strb	r0, [r4, #56]	@ tmp117, huart_3(D)->Lock
 657:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 736              		.loc 1 657 0
 737 02b6 84F83900 		strb	r0, [r4, #57]	@ tmp117, huart_3(D)->gState
 658:src/stm32f1xx_hal_uart.c **** 
 738              		.loc 1 658 0
 739 02ba 84F83A00 		strb	r0, [r4, #58]	@ tmp117, huart_3(D)->RxState
 663:src/stm32f1xx_hal_uart.c **** }
 740              		.loc 1 663 0
 741 02be 10BD     		pop	{r4, pc}	@
 742              	.LVL42:
 743              	.L37:
 633:src/stm32f1xx_hal_uart.c ****   }
 744              		.loc 1 633 0
 745 02c0 0120     		movs	r0, #1	@ <retval>,
 746              	.LVL43:
 664:src/stm32f1xx_hal_uart.c **** 
 747              		.loc 1 664 0
 748 02c2 10BD     		pop	{r4, pc}	@
 749              		.cfi_endproc
 750              	.LFE69:
 751              		.size	HAL_UART_DeInit, .-HAL_UART_DeInit
 752              		.align	1
 753              		.global	HAL_UART_Transmit
 754              		.syntax unified
 755              		.thumb
 756              		.thumb_func
 757              		.fpu softvfp
 758              		.type	HAL_UART_Transmit, %function
 759              	HAL_UART_Transmit:
 760              	.LFB72:
1028:src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
 761              		.loc 1 1028 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 0
 764              		@ frame_needed = 0, uses_anonymous_args = 0
 765              	.LVL44:
ARM GAS  /tmp/ccPoddoo.s 			page 72


 766 02c4 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 767              	.LCFI7:
 768              		.cfi_def_cfa_offset 24
 769              		.cfi_offset 4, -24
 770              		.cfi_offset 5, -20
 771              		.cfi_offset 6, -16
 772              		.cfi_offset 7, -12
 773              		.cfi_offset 8, -8
 774              		.cfi_offset 14, -4
1028:src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
 775              		.loc 1 1028 0
 776 02c8 1F46     		mov	r7, r3	@ Timeout, Timeout
1033:src/stm32f1xx_hal_uart.c ****   {
 777              		.loc 1 1033 0
 778 02ca 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2	@ huart_7(D)->gState, huart_7(D)->gState
 779              	.LVL45:
1028:src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
 780              		.loc 1 1028 0
 781 02ce 0446     		mov	r4, r0	@ huart, huart
1033:src/stm32f1xx_hal_uart.c ****   {
 782              		.loc 1 1033 0
 783 02d0 202B     		cmp	r3, #32	@ huart_7(D)->gState,
1028:src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
 784              		.loc 1 1028 0
 785 02d2 0D46     		mov	r5, r1	@ pData, pData
 786 02d4 9046     		mov	r8, r2	@ Size, Size
1033:src/stm32f1xx_hal_uart.c ****   {
 787              		.loc 1 1033 0
 788 02d6 4ED1     		bne	.L50	@,
1035:src/stm32f1xx_hal_uart.c ****     {
 789              		.loc 1 1035 0
 790 02d8 0029     		cmp	r1, #0	@ pData
 791 02da 49D0     		beq	.L49	@
1035:src/stm32f1xx_hal_uart.c ****     {
 792              		.loc 1 1035 0 is_stmt 0 discriminator 1
 793 02dc 002A     		cmp	r2, #0	@ Size
 794 02de 47D0     		beq	.L49	@
1041:src/stm32f1xx_hal_uart.c **** 
 795              		.loc 1 1041 0 is_stmt 1
 796 02e0 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2	@ huart_7(D)->Lock, huart_7(D)->Lock
 797 02e4 012B     		cmp	r3, #1	@ huart_7(D)->Lock,
 798 02e6 46D0     		beq	.L50	@,
1041:src/stm32f1xx_hal_uart.c **** 
 799              		.loc 1 1041 0 is_stmt 0 discriminator 2
 800 02e8 0123     		movs	r3, #1	@ tmp137,
 801 02ea 80F83830 		strb	r3, [r0, #56]	@ tmp137, huart_7(D)->Lock
1043:src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 802              		.loc 1 1043 0 is_stmt 1 discriminator 2
 803 02ee 0023     		movs	r3, #0	@ tmp139,
 804 02f0 C363     		str	r3, [r0, #60]	@ tmp139, huart_7(D)->ErrorCode
1044:src/stm32f1xx_hal_uart.c **** 
 805              		.loc 1 1044 0 discriminator 2
 806 02f2 2123     		movs	r3, #33	@ tmp140,
 807 02f4 80F83930 		strb	r3, [r0, #57]	@ tmp140, huart_7(D)->gState
1047:src/stm32f1xx_hal_uart.c **** 
 808              		.loc 1 1047 0 discriminator 2
 809 02f8 FFF7FEFF 		bl	HAL_GetTick	@
ARM GAS  /tmp/ccPoddoo.s 			page 73


 810              	.LVL46:
 811 02fc 0646     		mov	r6, r0	@ tickstart,
 812              	.LVL47:
1049:src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 813              		.loc 1 1049 0 discriminator 2
 814 02fe A4F82480 		strh	r8, [r4, #36]	@ movhi	@ Size, huart_7(D)->TxXferSize
1050:src/stm32f1xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
 815              		.loc 1 1050 0 discriminator 2
 816 0302 A4F82680 		strh	r8, [r4, #38]	@ movhi	@ Size, huart_7(D)->TxXferCount
 817              	.LVL48:
 818              	.L40:
1051:src/stm32f1xx_hal_uart.c ****     {
 819              		.loc 1 1051 0
 820 0306 E38C     		ldrh	r3, [r4, #38]	@, huart_7(D)->TxXferCount
 821 0308 9BB2     		uxth	r3, r3	@ _20, huart_7(D)->TxXferCount
 822 030a 6BB9     		cbnz	r3, .L46	@ _20,
1081:src/stm32f1xx_hal_uart.c ****     {
 823              		.loc 1 1081 0
 824 030c 3B46     		mov	r3, r7	@, Timeout
 825 030e 3246     		mov	r2, r6	@, tickstart
 826 0310 4021     		movs	r1, #64	@,
 827 0312 2046     		mov	r0, r4	@, huart
 828 0314 FFF7BAFE 		bl	UART_WaitOnFlagUntilTimeout.constprop.3	@
 829              	.LVL49:
 830 0318 A8B9     		cbnz	r0, .L45	@ <retval>,
1087:src/stm32f1xx_hal_uart.c **** 
 831              		.loc 1 1087 0
 832 031a 2023     		movs	r3, #32	@ tmp158,
1090:src/stm32f1xx_hal_uart.c **** 
 833              		.loc 1 1090 0
 834 031c 84F83800 		strb	r0, [r4, #56]	@ <retval>, huart_7(D)->Lock
1087:src/stm32f1xx_hal_uart.c **** 
 835              		.loc 1 1087 0
 836 0320 84F83930 		strb	r3, [r4, #57]	@ tmp158, huart_7(D)->gState
1092:src/stm32f1xx_hal_uart.c ****   }
 837              		.loc 1 1092 0
 838 0324 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 839              	.LVL50:
 840              	.L46:
1053:src/stm32f1xx_hal_uart.c ****       if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 841              		.loc 1 1053 0
 842 0328 E38C     		ldrh	r3, [r4, #38]	@, huart_7(D)->TxXferCount
1056:src/stm32f1xx_hal_uart.c ****         {
 843              		.loc 1 1056 0
 844 032a 3246     		mov	r2, r6	@, tickstart
1053:src/stm32f1xx_hal_uart.c ****       if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 845              		.loc 1 1053 0
 846 032c 013B     		subs	r3, r3, #1	@ tmp146, huart_7(D)->TxXferCount,
 847 032e 9BB2     		uxth	r3, r3	@ _23, tmp146
 848 0330 E384     		strh	r3, [r4, #38]	@ movhi	@ _23, huart_7(D)->TxXferCount
1054:src/stm32f1xx_hal_uart.c ****       {
 849              		.loc 1 1054 0
 850 0332 A368     		ldr	r3, [r4, #8]	@ huart_7(D)->Init.WordLength, huart_7(D)->Init.WordLength
1056:src/stm32f1xx_hal_uart.c ****         {
 851              		.loc 1 1056 0
 852 0334 8021     		movs	r1, #128	@,
1054:src/stm32f1xx_hal_uart.c ****       {
ARM GAS  /tmp/ccPoddoo.s 			page 74


 853              		.loc 1 1054 0
 854 0336 B3F5805F 		cmp	r3, #4096	@ huart_7(D)->Init.WordLength,
1056:src/stm32f1xx_hal_uart.c ****         {
 855              		.loc 1 1056 0
 856 033a 2046     		mov	r0, r4	@, huart
 857 033c 3B46     		mov	r3, r7	@, Timeout
1054:src/stm32f1xx_hal_uart.c ****       {
 858              		.loc 1 1054 0
 859 033e 0ED1     		bne	.L41	@,
 860              	.LVL51:
1056:src/stm32f1xx_hal_uart.c ****         {
 861              		.loc 1 1056 0
 862 0340 FFF7A4FE 		bl	UART_WaitOnFlagUntilTimeout.constprop.3	@
 863              	.LVL52:
 864 0344 10B1     		cbz	r0, .L42	@,
 865              	.L45:
1058:src/stm32f1xx_hal_uart.c ****         }
 866              		.loc 1 1058 0
 867 0346 0320     		movs	r0, #3	@ <retval>,
 868 0348 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 869              	.LVL53:
 870              	.L42:
1061:src/stm32f1xx_hal_uart.c ****         if (huart->Init.Parity == UART_PARITY_NONE)
 871              		.loc 1 1061 0
 872 034c 2B88     		ldrh	r3, [r5]	@, MEM[(uint16_t *)pData_1]
 873 034e 2268     		ldr	r2, [r4]	@ _36, huart_7(D)->Instance
 874 0350 C3F30803 		ubfx	r3, r3, #0, #9	@ _38, MEM[(uint16_t *)pData_1],,
 875 0354 5360     		str	r3, [r2, #4]	@ _38, _36->DR
1062:src/stm32f1xx_hal_uart.c ****         {
 876              		.loc 1 1062 0
 877 0356 2369     		ldr	r3, [r4, #16]	@ huart_7(D)->Init.Parity, huart_7(D)->Init.Parity
 878 0358 43B9     		cbnz	r3, .L51	@ huart_7(D)->Init.Parity,
1064:src/stm32f1xx_hal_uart.c ****         }
 879              		.loc 1 1064 0
 880 035a 0235     		adds	r5, r5, #2	@ pData, pData,
 881              	.LVL54:
 882 035c D3E7     		b	.L40	@
 883              	.LVL55:
 884              	.L41:
1073:src/stm32f1xx_hal_uart.c ****         {
 885              		.loc 1 1073 0
 886 035e FFF795FE 		bl	UART_WaitOnFlagUntilTimeout.constprop.3	@
 887              	.LVL56:
 888 0362 0028     		cmp	r0, #0	@
 889 0364 EFD1     		bne	.L45	@
 890              	.LVL57:
1077:src/stm32f1xx_hal_uart.c ****       }
 891              		.loc 1 1077 0
 892 0366 2368     		ldr	r3, [r4]	@ _29, huart_7(D)->Instance
 893 0368 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2	@ _32, *pData_1
 894 036a 5A60     		str	r2, [r3, #4]	@ _32, _29->DR
 895              	.LVL58:
 896              	.L51:
 897 036c 0135     		adds	r5, r5, #1	@ pData, pData,
 898 036e CAE7     		b	.L40	@
 899              	.LVL59:
 900              	.L49:
ARM GAS  /tmp/ccPoddoo.s 			page 75


1037:src/stm32f1xx_hal_uart.c ****     }
 901              		.loc 1 1037 0
 902 0370 0120     		movs	r0, #1	@ <retval>,
 903              	.LVL60:
 904 0372 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 905              	.LVL61:
 906              	.L50:
1096:src/stm32f1xx_hal_uart.c ****   }
 907              		.loc 1 1096 0
 908 0376 0220     		movs	r0, #2	@ <retval>,
 909              	.LVL62:
1098:src/stm32f1xx_hal_uart.c **** 
 910              		.loc 1 1098 0
 911 0378 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 912              		.cfi_endproc
 913              	.LFE72:
 914              		.size	HAL_UART_Transmit, .-HAL_UART_Transmit
 915              		.align	1
 916              		.global	HAL_UART_Receive
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 920              		.fpu softvfp
 921              		.type	HAL_UART_Receive, %function
 922              	HAL_UART_Receive:
 923              	.LFB73:
1113:src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
 924              		.loc 1 1113 0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 928              	.LVL63:
 929 037c 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 930              	.LCFI8:
 931              		.cfi_def_cfa_offset 24
 932              		.cfi_offset 4, -24
 933              		.cfi_offset 5, -20
 934              		.cfi_offset 6, -16
 935              		.cfi_offset 7, -12
 936              		.cfi_offset 8, -8
 937              		.cfi_offset 14, -4
1113:src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
 938              		.loc 1 1113 0
 939 0380 1F46     		mov	r7, r3	@ Timeout, Timeout
1118:src/stm32f1xx_hal_uart.c ****   {
 940              		.loc 1 1118 0
 941 0382 90F83A30 		ldrb	r3, [r0, #58]	@ zero_extendqisi2	@ huart_7(D)->RxState, huart_7(D)->RxState
 942              	.LVL64:
1113:src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
 943              		.loc 1 1113 0
 944 0386 0446     		mov	r4, r0	@ huart, huart
1118:src/stm32f1xx_hal_uart.c ****   {
 945              		.loc 1 1118 0
 946 0388 202B     		cmp	r3, #32	@ huart_7(D)->RxState,
1113:src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
 947              		.loc 1 1113 0
 948 038a 0D46     		mov	r5, r1	@ pData, pData
ARM GAS  /tmp/ccPoddoo.s 			page 76


 949 038c 9046     		mov	r8, r2	@ Size, Size
1118:src/stm32f1xx_hal_uart.c ****   {
 950              		.loc 1 1118 0
 951 038e 51D1     		bne	.L65	@,
1120:src/stm32f1xx_hal_uart.c ****     {
 952              		.loc 1 1120 0
 953 0390 0029     		cmp	r1, #0	@ pData
 954 0392 4CD0     		beq	.L64	@
1120:src/stm32f1xx_hal_uart.c ****     {
 955              		.loc 1 1120 0 is_stmt 0 discriminator 1
 956 0394 002A     		cmp	r2, #0	@ Size
 957 0396 4AD0     		beq	.L64	@
1126:src/stm32f1xx_hal_uart.c **** 
 958              		.loc 1 1126 0 is_stmt 1
 959 0398 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2	@ huart_7(D)->Lock, huart_7(D)->Lock
 960 039c 012B     		cmp	r3, #1	@ huart_7(D)->Lock,
 961 039e 49D0     		beq	.L65	@,
1126:src/stm32f1xx_hal_uart.c **** 
 962              		.loc 1 1126 0 is_stmt 0 discriminator 2
 963 03a0 0123     		movs	r3, #1	@ tmp147,
 964 03a2 80F83830 		strb	r3, [r0, #56]	@ tmp147, huart_7(D)->Lock
1128:src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 965              		.loc 1 1128 0 is_stmt 1 discriminator 2
 966 03a6 0023     		movs	r3, #0	@ tmp149,
 967 03a8 C363     		str	r3, [r0, #60]	@ tmp149, huart_7(D)->ErrorCode
1129:src/stm32f1xx_hal_uart.c **** 
 968              		.loc 1 1129 0 discriminator 2
 969 03aa 2223     		movs	r3, #34	@ tmp150,
 970 03ac 80F83A30 		strb	r3, [r0, #58]	@ tmp150, huart_7(D)->RxState
1132:src/stm32f1xx_hal_uart.c **** 
 971              		.loc 1 1132 0 discriminator 2
 972 03b0 FFF7FEFF 		bl	HAL_GetTick	@
 973              	.LVL65:
 974 03b4 0646     		mov	r6, r0	@ tickstart,
 975              	.LVL66:
1134:src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
 976              		.loc 1 1134 0 discriminator 2
 977 03b6 A4F82C80 		strh	r8, [r4, #44]	@ movhi	@ Size, huart_7(D)->RxXferSize
1135:src/stm32f1xx_hal_uart.c **** 
 978              		.loc 1 1135 0 discriminator 2
 979 03ba A4F82E80 		strh	r8, [r4, #46]	@ movhi	@ Size, huart_7(D)->RxXferCount
 980              	.LVL67:
 981              	.L54:
1138:src/stm32f1xx_hal_uart.c ****     {
 982              		.loc 1 1138 0
 983 03be E08D     		ldrh	r0, [r4, #46]	@, huart_7(D)->RxXferCount
 984 03c0 80B2     		uxth	r0, r0	@ _20, huart_7(D)->RxXferCount
 985 03c2 30B9     		cbnz	r0, .L61	@ _20,
1179:src/stm32f1xx_hal_uart.c **** 
 986              		.loc 1 1179 0
 987 03c4 2023     		movs	r3, #32	@ tmp177,
1182:src/stm32f1xx_hal_uart.c **** 
 988              		.loc 1 1182 0
 989 03c6 84F83800 		strb	r0, [r4, #56]	@ _20, huart_7(D)->Lock
1179:src/stm32f1xx_hal_uart.c **** 
 990              		.loc 1 1179 0
 991 03ca 84F83A30 		strb	r3, [r4, #58]	@ tmp177, huart_7(D)->RxState
ARM GAS  /tmp/ccPoddoo.s 			page 77


1184:src/stm32f1xx_hal_uart.c ****   }
 992              		.loc 1 1184 0
 993 03ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 994              	.LVL68:
 995              	.L61:
1140:src/stm32f1xx_hal_uart.c ****       if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 996              		.loc 1 1140 0
 997 03d2 E38D     		ldrh	r3, [r4, #46]	@, huart_7(D)->RxXferCount
1143:src/stm32f1xx_hal_uart.c ****         {
 998              		.loc 1 1143 0
 999 03d4 3246     		mov	r2, r6	@, tickstart
1140:src/stm32f1xx_hal_uart.c ****       if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 1000              		.loc 1 1140 0
 1001 03d6 013B     		subs	r3, r3, #1	@ tmp156, huart_7(D)->RxXferCount,
 1002 03d8 9BB2     		uxth	r3, r3	@ _22, tmp156
 1003 03da E385     		strh	r3, [r4, #46]	@ movhi	@ _22, huart_7(D)->RxXferCount
1141:src/stm32f1xx_hal_uart.c ****       {
 1004              		.loc 1 1141 0
 1005 03dc A368     		ldr	r3, [r4, #8]	@ huart_7(D)->Init.WordLength, huart_7(D)->Init.WordLength
1143:src/stm32f1xx_hal_uart.c ****         {
 1006              		.loc 1 1143 0
 1007 03de 2021     		movs	r1, #32	@,
1141:src/stm32f1xx_hal_uart.c ****       {
 1008              		.loc 1 1141 0
 1009 03e0 B3F5805F 		cmp	r3, #4096	@ huart_7(D)->Init.WordLength,
1143:src/stm32f1xx_hal_uart.c ****         {
 1010              		.loc 1 1143 0
 1011 03e4 2046     		mov	r0, r4	@, huart
 1012 03e6 3B46     		mov	r3, r7	@, Timeout
1141:src/stm32f1xx_hal_uart.c ****       {
 1013              		.loc 1 1141 0
 1014 03e8 12D1     		bne	.L55	@,
 1015              	.LVL69:
1143:src/stm32f1xx_hal_uart.c ****         {
 1016              		.loc 1 1143 0
 1017 03ea FFF74FFE 		bl	UART_WaitOnFlagUntilTimeout.constprop.3	@
 1018              	.LVL70:
 1019 03ee 10B1     		cbz	r0, .L56	@,
 1020              	.L59:
1145:src/stm32f1xx_hal_uart.c ****         }
 1021              		.loc 1 1145 0
 1022 03f0 0320     		movs	r0, #3	@ <retval>,
 1023 03f2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1024              	.LVL71:
 1025              	.L56:
 1026 03f6 2368     		ldr	r3, [r4]	@ _43, huart_7(D)->Instance
1148:src/stm32f1xx_hal_uart.c ****         {
 1027              		.loc 1 1148 0
 1028 03f8 2269     		ldr	r2, [r4, #16]	@ huart_7(D)->Init.Parity, huart_7(D)->Init.Parity
1150:src/stm32f1xx_hal_uart.c ****           pData += 2U;
 1029              		.loc 1 1150 0
 1030 03fa 5B68     		ldr	r3, [r3, #4]	@ _50,
1148:src/stm32f1xx_hal_uart.c ****         {
 1031              		.loc 1 1148 0
 1032 03fc 22B9     		cbnz	r2, .L57	@ huart_7(D)->Init.Parity,
1150:src/stm32f1xx_hal_uart.c ****           pData += 2U;
 1033              		.loc 1 1150 0
ARM GAS  /tmp/ccPoddoo.s 			page 78


 1034 03fe C3F30803 		ubfx	r3, r3, #0, #9	@ tmp162, _50,,
 1035 0402 25F8023B 		strh	r3, [r5], #2	@ movhi	@ tmp162, MEM[(uint16_t *)pData_1]
 1036              	.LVL72:
 1037 0406 DAE7     		b	.L54	@
 1038              	.LVL73:
 1039              	.L57:
1155:src/stm32f1xx_hal_uart.c ****           pData += 1U;
 1040              		.loc 1 1155 0
 1041 0408 DBB2     		uxtb	r3, r3	@ _44, _44
 1042 040a 25F8013B 		strh	r3, [r5], #1	@ movhi	@ _44, MEM[(uint16_t *)pData_1]
 1043              	.LVL74:
 1044 040e D6E7     		b	.L54	@
 1045              	.LVL75:
 1046              	.L55:
1162:src/stm32f1xx_hal_uart.c ****         {
 1047              		.loc 1 1162 0
 1048 0410 FFF73CFE 		bl	UART_WaitOnFlagUntilTimeout.constprop.3	@
 1049              	.LVL76:
 1050 0414 0028     		cmp	r0, #0	@
 1051 0416 EBD1     		bne	.L59	@
 1052 0418 2368     		ldr	r3, [r4]	@ _35, huart_7(D)->Instance
1166:src/stm32f1xx_hal_uart.c ****         {
 1053              		.loc 1 1166 0
 1054 041a 2169     		ldr	r1, [r4, #16]	@ huart_7(D)->Init.Parity, huart_7(D)->Init.Parity
 1055 041c 6A1C     		adds	r2, r5, #1	@ pData, pData,
1168:src/stm32f1xx_hal_uart.c ****         }
 1056              		.loc 1 1168 0
 1057 041e 5B68     		ldr	r3, [r3, #4]	@ _31,
1166:src/stm32f1xx_hal_uart.c ****         {
 1058              		.loc 1 1166 0
 1059 0420 11B9     		cbnz	r1, .L60	@ huart_7(D)->Init.Parity,
 1060              	.LVL77:
 1061              	.L66:
1172:src/stm32f1xx_hal_uart.c ****         }
 1062              		.loc 1 1172 0
 1063 0422 2B70     		strb	r3, [r5]	@ tmp173, *pData_1
 1064 0424 1546     		mov	r5, r2	@ pData, pData
 1065 0426 CAE7     		b	.L54	@
 1066              	.LVL78:
 1067              	.L60:
 1068 0428 03F07F03 		and	r3, r3, #127	@ tmp173, _36,
 1069 042c F9E7     		b	.L66	@
 1070              	.LVL79:
 1071              	.L64:
1122:src/stm32f1xx_hal_uart.c ****     }
 1072              		.loc 1 1122 0
 1073 042e 0120     		movs	r0, #1	@ <retval>,
 1074              	.LVL80:
 1075 0430 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1076              	.LVL81:
 1077              	.L65:
1188:src/stm32f1xx_hal_uart.c ****   }
 1078              		.loc 1 1188 0
 1079 0434 0220     		movs	r0, #2	@ <retval>,
 1080              	.LVL82:
1190:src/stm32f1xx_hal_uart.c **** 
 1081              		.loc 1 1190 0
ARM GAS  /tmp/ccPoddoo.s 			page 79


 1082 0436 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1083              		.cfi_endproc
 1084              	.LFE73:
 1085              		.size	HAL_UART_Receive, .-HAL_UART_Receive
 1086              		.align	1
 1087              		.global	HAL_UART_Transmit_IT
 1088              		.syntax unified
 1089              		.thumb
 1090              		.thumb_func
 1091              		.fpu softvfp
 1092              		.type	HAL_UART_Transmit_IT, %function
 1093              	HAL_UART_Transmit_IT:
 1094              	.LFB74:
1204:src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 1095              		.loc 1 1204 0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              		@ link register save eliminated.
 1100              	.LVL83:
1206:src/stm32f1xx_hal_uart.c ****   {
 1101              		.loc 1 1206 0
 1102 043a 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2	@ huart_4(D)->gState, huart_4(D)->gState
 1103 043e 202B     		cmp	r3, #32	@ huart_4(D)->gState,
 1104 0440 18D1     		bne	.L72	@,
1208:src/stm32f1xx_hal_uart.c ****     {
 1105              		.loc 1 1208 0
 1106 0442 A9B1     		cbz	r1, .L71	@ pData,
1208:src/stm32f1xx_hal_uart.c ****     {
 1107              		.loc 1 1208 0 is_stmt 0 discriminator 1
 1108 0444 A2B1     		cbz	r2, .L71	@ Size,
1214:src/stm32f1xx_hal_uart.c **** 
 1109              		.loc 1 1214 0 is_stmt 1
 1110 0446 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2	@ huart_4(D)->Lock, huart_4(D)->Lock
 1111 044a 012B     		cmp	r3, #1	@ huart_4(D)->Lock,
 1112 044c 12D0     		beq	.L72	@,
1218:src/stm32f1xx_hal_uart.c **** 
 1113              		.loc 1 1218 0 discriminator 2
 1114 044e C284     		strh	r2, [r0, #38]	@ movhi	@ Size, huart_4(D)->TxXferCount
1217:src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1115              		.loc 1 1217 0 discriminator 2
 1116 0450 8284     		strh	r2, [r0, #36]	@ movhi	@ Size, huart_4(D)->TxXferSize
1220:src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1117              		.loc 1 1220 0 discriminator 2
 1118 0452 0023     		movs	r3, #0	@ tmp125,
1221:src/stm32f1xx_hal_uart.c **** 
 1119              		.loc 1 1221 0 discriminator 2
 1120 0454 2122     		movs	r2, #33	@ tmp126,
 1121              	.LVL84:
1216:src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1122              		.loc 1 1216 0 discriminator 2
 1123 0456 0162     		str	r1, [r0, #32]	@ pData, huart_4(D)->pTxBuffPtr
1227:src/stm32f1xx_hal_uart.c **** 
 1124              		.loc 1 1227 0 discriminator 2
 1125 0458 0168     		ldr	r1, [r0]	@ _15, huart_4(D)->Instance
 1126              	.LVL85:
1220:src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
ARM GAS  /tmp/ccPoddoo.s 			page 80


 1127              		.loc 1 1220 0 discriminator 2
 1128 045a C363     		str	r3, [r0, #60]	@ tmp125, huart_4(D)->ErrorCode
 1129              	.LVL86:
1221:src/stm32f1xx_hal_uart.c **** 
 1130              		.loc 1 1221 0 discriminator 2
 1131 045c 80F83920 		strb	r2, [r0, #57]	@ tmp126, huart_4(D)->gState
1227:src/stm32f1xx_hal_uart.c **** 
 1132              		.loc 1 1227 0 discriminator 2
 1133 0460 CA68     		ldr	r2, [r1, #12]	@ _16, _15->CR1
1224:src/stm32f1xx_hal_uart.c **** 
 1134              		.loc 1 1224 0 discriminator 2
 1135 0462 80F83830 		strb	r3, [r0, #56]	@ tmp125, huart_4(D)->Lock
1227:src/stm32f1xx_hal_uart.c **** 
 1136              		.loc 1 1227 0 discriminator 2
 1137 0466 42F08002 		orr	r2, r2, #128	@ _17, _16,
 1138 046a CA60     		str	r2, [r1, #12]	@ _17, _15->CR1
1229:src/stm32f1xx_hal_uart.c ****   }
 1139              		.loc 1 1229 0 discriminator 2
 1140 046c 1846     		mov	r0, r3	@ <retval>, tmp125
 1141              	.LVL87:
 1142 046e 7047     		bx	lr	@
 1143              	.LVL88:
 1144              	.L71:
1210:src/stm32f1xx_hal_uart.c ****     }
 1145              		.loc 1 1210 0
 1146 0470 0120     		movs	r0, #1	@ <retval>,
 1147              	.LVL89:
 1148 0472 7047     		bx	lr	@
 1149              	.LVL90:
 1150              	.L72:
1233:src/stm32f1xx_hal_uart.c ****   }
 1151              		.loc 1 1233 0
 1152 0474 0220     		movs	r0, #2	@ <retval>,
 1153              	.LVL91:
1235:src/stm32f1xx_hal_uart.c **** 
 1154              		.loc 1 1235 0
 1155 0476 7047     		bx	lr	@
 1156              		.cfi_endproc
 1157              	.LFE74:
 1158              		.size	HAL_UART_Transmit_IT, .-HAL_UART_Transmit_IT
 1159              		.align	1
 1160              		.global	HAL_UART_Receive_IT
 1161              		.syntax unified
 1162              		.thumb
 1163              		.thumb_func
 1164              		.fpu softvfp
 1165              		.type	HAL_UART_Receive_IT, %function
 1166              	HAL_UART_Receive_IT:
 1167              	.LFB75:
1249:src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 1168              		.loc 1 1249 0
 1169              		.cfi_startproc
 1170              		@ args = 0, pretend = 0, frame = 0
 1171              		@ frame_needed = 0, uses_anonymous_args = 0
 1172              		@ link register save eliminated.
 1173              	.LVL92:
1251:src/stm32f1xx_hal_uart.c ****   {
ARM GAS  /tmp/ccPoddoo.s 			page 81


 1174              		.loc 1 1251 0
 1175 0478 90F83A30 		ldrb	r3, [r0, #58]	@ zero_extendqisi2	@ huart_4(D)->RxState, huart_4(D)->RxState
 1176 047c 202B     		cmp	r3, #32	@ huart_4(D)->RxState,
 1177 047e 20D1     		bne	.L78	@,
1253:src/stm32f1xx_hal_uart.c ****     {
 1178              		.loc 1 1253 0
 1179 0480 E9B1     		cbz	r1, .L77	@ pData,
1253:src/stm32f1xx_hal_uart.c ****     {
 1180              		.loc 1 1253 0 is_stmt 0 discriminator 1
 1181 0482 E2B1     		cbz	r2, .L77	@ Size,
1259:src/stm32f1xx_hal_uart.c **** 
 1182              		.loc 1 1259 0 is_stmt 1
 1183 0484 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2	@ huart_4(D)->Lock, huart_4(D)->Lock
 1184 0488 012B     		cmp	r3, #1	@ huart_4(D)->Lock,
 1185 048a 1AD0     		beq	.L78	@,
1263:src/stm32f1xx_hal_uart.c **** 
 1186              		.loc 1 1263 0 discriminator 2
 1187 048c C285     		strh	r2, [r0, #46]	@ movhi	@ Size, huart_4(D)->RxXferCount
1262:src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
 1188              		.loc 1 1262 0 discriminator 2
 1189 048e 8285     		strh	r2, [r0, #44]	@ movhi	@ Size, huart_4(D)->RxXferSize
1265:src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1190              		.loc 1 1265 0 discriminator 2
 1191 0490 0023     		movs	r3, #0	@ tmp129,
1266:src/stm32f1xx_hal_uart.c **** 
 1192              		.loc 1 1266 0 discriminator 2
 1193 0492 2222     		movs	r2, #34	@ tmp130,
 1194              	.LVL93:
1265:src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1195              		.loc 1 1265 0 discriminator 2
 1196 0494 C363     		str	r3, [r0, #60]	@ tmp129, huart_4(D)->ErrorCode
 1197              	.LVL94:
1266:src/stm32f1xx_hal_uart.c **** 
 1198              		.loc 1 1266 0 discriminator 2
 1199 0496 80F83A20 		strb	r2, [r0, #58]	@ tmp130, huart_4(D)->RxState
1272:src/stm32f1xx_hal_uart.c **** 
 1200              		.loc 1 1272 0 discriminator 2
 1201 049a 0268     		ldr	r2, [r0]	@ _15, huart_4(D)->Instance
1261:src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
 1202              		.loc 1 1261 0 discriminator 2
 1203 049c 8162     		str	r1, [r0, #40]	@ pData, huart_4(D)->pRxBuffPtr
1272:src/stm32f1xx_hal_uart.c **** 
 1204              		.loc 1 1272 0 discriminator 2
 1205 049e D168     		ldr	r1, [r2, #12]	@ _16, _15->CR1
 1206              	.LVL95:
1269:src/stm32f1xx_hal_uart.c **** 
 1207              		.loc 1 1269 0 discriminator 2
 1208 04a0 80F83830 		strb	r3, [r0, #56]	@ tmp129, huart_4(D)->Lock
1272:src/stm32f1xx_hal_uart.c **** 
 1209              		.loc 1 1272 0 discriminator 2
 1210 04a4 41F48071 		orr	r1, r1, #256	@ _17, _16,
 1211 04a8 D160     		str	r1, [r2, #12]	@ _17, _15->CR1
1275:src/stm32f1xx_hal_uart.c **** 
 1212              		.loc 1 1275 0 discriminator 2
 1213 04aa 5169     		ldr	r1, [r2, #20]	@ _19, _15->CR3
1280:src/stm32f1xx_hal_uart.c ****   }
 1214              		.loc 1 1280 0 discriminator 2
ARM GAS  /tmp/ccPoddoo.s 			page 82


 1215 04ac 1846     		mov	r0, r3	@ <retval>, tmp129
 1216              	.LVL96:
1275:src/stm32f1xx_hal_uart.c **** 
 1217              		.loc 1 1275 0 discriminator 2
 1218 04ae 41F00101 		orr	r1, r1, #1	@ _20, _19,
 1219 04b2 5161     		str	r1, [r2, #20]	@ _20, _15->CR3
1278:src/stm32f1xx_hal_uart.c **** 
 1220              		.loc 1 1278 0 discriminator 2
 1221 04b4 D168     		ldr	r1, [r2, #12]	@ _22, _15->CR1
 1222 04b6 41F02001 		orr	r1, r1, #32	@ _23, _22,
 1223 04ba D160     		str	r1, [r2, #12]	@ _23, _15->CR1
1280:src/stm32f1xx_hal_uart.c ****   }
 1224              		.loc 1 1280 0 discriminator 2
 1225 04bc 7047     		bx	lr	@
 1226              	.LVL97:
 1227              	.L77:
1255:src/stm32f1xx_hal_uart.c ****     }
 1228              		.loc 1 1255 0
 1229 04be 0120     		movs	r0, #1	@ <retval>,
 1230              	.LVL98:
 1231 04c0 7047     		bx	lr	@
 1232              	.LVL99:
 1233              	.L78:
1284:src/stm32f1xx_hal_uart.c ****   }
 1234              		.loc 1 1284 0
 1235 04c2 0220     		movs	r0, #2	@ <retval>,
 1236              	.LVL100:
1286:src/stm32f1xx_hal_uart.c **** 
 1237              		.loc 1 1286 0
 1238 04c4 7047     		bx	lr	@
 1239              		.cfi_endproc
 1240              	.LFE75:
 1241              		.size	HAL_UART_Receive_IT, .-HAL_UART_Receive_IT
 1242              		.align	1
 1243              		.global	HAL_UART_Transmit_DMA
 1244              		.syntax unified
 1245              		.thumb
 1246              		.thumb_func
 1247              		.fpu softvfp
 1248              		.type	HAL_UART_Transmit_DMA, %function
 1249              	HAL_UART_Transmit_DMA:
 1250              	.LFB76:
1300:src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
 1251              		.loc 1 1300 0
 1252              		.cfi_startproc
 1253              		@ args = 0, pretend = 0, frame = 0
 1254              		@ frame_needed = 0, uses_anonymous_args = 0
 1255              	.LVL101:
 1256 04c6 38B5     		push	{r3, r4, r5, lr}	@
 1257              	.LCFI9:
 1258              		.cfi_def_cfa_offset 16
 1259              		.cfi_offset 3, -16
 1260              		.cfi_offset 4, -12
 1261              		.cfi_offset 5, -8
 1262              		.cfi_offset 14, -4
1300:src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
 1263              		.loc 1 1300 0
ARM GAS  /tmp/ccPoddoo.s 			page 83


 1264 04c8 0446     		mov	r4, r0	@ huart, huart
 1265 04ca 1346     		mov	r3, r2	@ Size, Size
1304:src/stm32f1xx_hal_uart.c ****   {
 1266              		.loc 1 1304 0
 1267 04cc 94F83920 		ldrb	r2, [r4, #57]	@ zero_extendqisi2	@ huart_4(D)->gState, huart_4(D)->gState
 1268              	.LVL102:
 1269 04d0 202A     		cmp	r2, #32	@ huart_4(D)->gState,
 1270 04d2 2AD1     		bne	.L84	@,
1306:src/stm32f1xx_hal_uart.c ****     {
 1271              		.loc 1 1306 0
 1272 04d4 39B3     		cbz	r1, .L83	@ pData,
1306:src/stm32f1xx_hal_uart.c ****     {
 1273              		.loc 1 1306 0 is_stmt 0 discriminator 1
 1274 04d6 33B3     		cbz	r3, .L83	@ Size,
1312:src/stm32f1xx_hal_uart.c **** 
 1275              		.loc 1 1312 0 is_stmt 1
 1276 04d8 94F83820 		ldrb	r2, [r4, #56]	@ zero_extendqisi2	@ huart_4(D)->Lock, huart_4(D)->Lock
 1277 04dc 012A     		cmp	r2, #1	@ huart_4(D)->Lock,
 1278 04de 24D0     		beq	.L84	@,
1312:src/stm32f1xx_hal_uart.c **** 
 1279              		.loc 1 1312 0 is_stmt 0 discriminator 2
 1280 04e0 0122     		movs	r2, #1	@ tmp129,
1318:src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1281              		.loc 1 1318 0 is_stmt 1 discriminator 2
 1282 04e2 0025     		movs	r5, #0	@ tmp133,
1312:src/stm32f1xx_hal_uart.c **** 
 1283              		.loc 1 1312 0 discriminator 2
 1284 04e4 84F83820 		strb	r2, [r4, #56]	@ tmp129, huart_4(D)->Lock
1319:src/stm32f1xx_hal_uart.c **** 
 1285              		.loc 1 1319 0 discriminator 2
 1286 04e8 2122     		movs	r2, #33	@ tmp134,
1316:src/stm32f1xx_hal_uart.c **** 
 1287              		.loc 1 1316 0 discriminator 2
 1288 04ea E384     		strh	r3, [r4, #38]	@ movhi	@ Size, huart_4(D)->TxXferCount
1322:src/stm32f1xx_hal_uart.c **** 
 1289              		.loc 1 1322 0 discriminator 2
 1290 04ec 206B     		ldr	r0, [r4, #48]	@ _14, huart_4(D)->hdmatx
 1291              	.LVL103:
1318:src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1292              		.loc 1 1318 0 discriminator 2
 1293 04ee E563     		str	r5, [r4, #60]	@ tmp133, huart_4(D)->ErrorCode
1319:src/stm32f1xx_hal_uart.c **** 
 1294              		.loc 1 1319 0 discriminator 2
 1295 04f0 84F83920 		strb	r2, [r4, #57]	@ tmp134, huart_4(D)->gState
1322:src/stm32f1xx_hal_uart.c **** 
 1296              		.loc 1 1322 0 discriminator 2
 1297 04f4 0E4A     		ldr	r2, .L85	@ tmp136,
1315:src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1298              		.loc 1 1315 0 discriminator 2
 1299 04f6 A384     		strh	r3, [r4, #36]	@ movhi	@ Size, huart_4(D)->TxXferSize
1314:src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1300              		.loc 1 1314 0 discriminator 2
 1301 04f8 2162     		str	r1, [r4, #32]	@ pData, huart_4(D)->pTxBuffPtr
1322:src/stm32f1xx_hal_uart.c **** 
 1302              		.loc 1 1322 0 discriminator 2
 1303 04fa 8262     		str	r2, [r0, #40]	@ tmp136, _14->XferCpltCallback
1325:src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccPoddoo.s 			page 84


 1304              		.loc 1 1325 0 discriminator 2
 1305 04fc 0D4A     		ldr	r2, .L85+4	@ tmp137,
1331:src/stm32f1xx_hal_uart.c **** 
 1306              		.loc 1 1331 0 discriminator 2
 1307 04fe 4563     		str	r5, [r0, #52]	@ tmp133, _14->XferAbortCallback
 1308              	.LVL104:
1325:src/stm32f1xx_hal_uart.c **** 
 1309              		.loc 1 1325 0 discriminator 2
 1310 0500 C262     		str	r2, [r0, #44]	@ tmp137, _14->XferHalfCpltCallback
1328:src/stm32f1xx_hal_uart.c **** 
 1311              		.loc 1 1328 0 discriminator 2
 1312 0502 0D4A     		ldr	r2, .L85+8	@ tmp138,
 1313 0504 0263     		str	r2, [r0, #48]	@ tmp138, _14->XferErrorCallback
1335:src/stm32f1xx_hal_uart.c **** 
 1314              		.loc 1 1335 0 discriminator 2
 1315 0506 2268     		ldr	r2, [r4]	@ huart_4(D)->Instance, huart_4(D)->Instance
 1316 0508 0432     		adds	r2, r2, #4	@, huart_4(D)->Instance,
 1317 050a FFF7FEFF 		bl	HAL_DMA_Start_IT	@
 1318              	.LVL105:
1338:src/stm32f1xx_hal_uart.c **** 
 1319              		.loc 1 1338 0 discriminator 2
 1320 050e 6FF04002 		mvn	r2, #64	@ tmp142,
 1321 0512 2368     		ldr	r3, [r4]	@ _25, huart_4(D)->Instance
1347:src/stm32f1xx_hal_uart.c ****   }
 1322              		.loc 1 1347 0 discriminator 2
 1323 0514 2846     		mov	r0, r5	@ <retval>, tmp133
1338:src/stm32f1xx_hal_uart.c **** 
 1324              		.loc 1 1338 0 discriminator 2
 1325 0516 1A60     		str	r2, [r3]	@ tmp142, _25->SR
1345:src/stm32f1xx_hal_uart.c **** 
 1326              		.loc 1 1345 0 discriminator 2
 1327 0518 5A69     		ldr	r2, [r3, #20]	@ _28, _25->CR3
1341:src/stm32f1xx_hal_uart.c **** 
 1328              		.loc 1 1341 0 discriminator 2
 1329 051a 84F83850 		strb	r5, [r4, #56]	@ tmp133, huart_4(D)->Lock
1345:src/stm32f1xx_hal_uart.c **** 
 1330              		.loc 1 1345 0 discriminator 2
 1331 051e 42F08002 		orr	r2, r2, #128	@ _29, _28,
 1332 0522 5A61     		str	r2, [r3, #20]	@ _29, _25->CR3
1347:src/stm32f1xx_hal_uart.c ****   }
 1333              		.loc 1 1347 0 discriminator 2
 1334 0524 38BD     		pop	{r3, r4, r5, pc}	@
 1335              	.LVL106:
 1336              	.L83:
1308:src/stm32f1xx_hal_uart.c ****     }
 1337              		.loc 1 1308 0
 1338 0526 0120     		movs	r0, #1	@ <retval>,
 1339              	.LVL107:
 1340 0528 38BD     		pop	{r3, r4, r5, pc}	@
 1341              	.LVL108:
 1342              	.L84:
1351:src/stm32f1xx_hal_uart.c ****   }
 1343              		.loc 1 1351 0
 1344 052a 0220     		movs	r0, #2	@ <retval>,
 1345              	.LVL109:
1353:src/stm32f1xx_hal_uart.c **** 
 1346              		.loc 1 1353 0
ARM GAS  /tmp/ccPoddoo.s 			page 85


 1347 052c 38BD     		pop	{r3, r4, r5, pc}	@
 1348              	.LVL110:
 1349              	.L86:
 1350 052e 00BF     		.align	2
 1351              	.L85:
 1352 0530 00000000 		.word	UART_DMATransmitCplt
 1353 0534 00000000 		.word	UART_DMATxHalfCplt
 1354 0538 00000000 		.word	UART_DMAError
 1355              		.cfi_endproc
 1356              	.LFE76:
 1357              		.size	HAL_UART_Transmit_DMA, .-HAL_UART_Transmit_DMA
 1358              		.align	1
 1359              		.global	HAL_UART_Receive_DMA
 1360              		.syntax unified
 1361              		.thumb
 1362              		.thumb_func
 1363              		.fpu softvfp
 1364              		.type	HAL_UART_Receive_DMA, %function
 1365              	HAL_UART_Receive_DMA:
 1366              	.LFB77:
1368:src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
 1367              		.loc 1 1368 0
 1368              		.cfi_startproc
 1369              		@ args = 0, pretend = 0, frame = 8
 1370              		@ frame_needed = 0, uses_anonymous_args = 0
 1371              	.LVL111:
 1372 053c 1346     		mov	r3, r2	@ Size, Size
1372:src/stm32f1xx_hal_uart.c ****   {
 1373              		.loc 1 1372 0
 1374 053e 90F83A20 		ldrb	r2, [r0, #58]	@ zero_extendqisi2	@ huart_4(D)->RxState, huart_4(D)->RxState
 1375              	.LVL112:
1368:src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
 1376              		.loc 1 1368 0
 1377 0542 73B5     		push	{r0, r1, r4, r5, r6, lr}	@
 1378              	.LCFI10:
 1379              		.cfi_def_cfa_offset 24
 1380              		.cfi_offset 4, -16
 1381              		.cfi_offset 5, -12
 1382              		.cfi_offset 6, -8
 1383              		.cfi_offset 14, -4
1372:src/stm32f1xx_hal_uart.c ****   {
 1384              		.loc 1 1372 0
 1385 0544 202A     		cmp	r2, #32	@ huart_4(D)->RxState,
1368:src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
 1386              		.loc 1 1368 0
 1387 0546 0546     		mov	r5, r0	@ huart, huart
1372:src/stm32f1xx_hal_uart.c ****   {
 1388              		.loc 1 1372 0
 1389 0548 38D1     		bne	.L92	@,
1374:src/stm32f1xx_hal_uart.c ****     {
 1390              		.loc 1 1374 0
 1391 054a 0029     		cmp	r1, #0	@ pData
 1392 054c 34D0     		beq	.L91	@
1374:src/stm32f1xx_hal_uart.c ****     {
 1393              		.loc 1 1374 0 is_stmt 0 discriminator 1
 1394 054e 002B     		cmp	r3, #0	@ Size
 1395 0550 32D0     		beq	.L91	@
ARM GAS  /tmp/ccPoddoo.s 			page 86


1380:src/stm32f1xx_hal_uart.c **** 
 1396              		.loc 1 1380 0 is_stmt 1
 1397 0552 90F83820 		ldrb	r2, [r0, #56]	@ zero_extendqisi2	@ huart_4(D)->Lock, huart_4(D)->Lock
 1398 0556 012A     		cmp	r2, #1	@ huart_4(D)->Lock,
 1399 0558 30D0     		beq	.L92	@,
1380:src/stm32f1xx_hal_uart.c **** 
 1400              		.loc 1 1380 0 is_stmt 0 discriminator 2
 1401 055a 0122     		movs	r2, #1	@ tmp136,
1385:src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1402              		.loc 1 1385 0 is_stmt 1 discriminator 2
 1403 055c 0024     		movs	r4, #0	@ tmp139,
1380:src/stm32f1xx_hal_uart.c **** 
 1404              		.loc 1 1380 0 discriminator 2
 1405 055e 80F83820 		strb	r2, [r0, #56]	@ tmp136, huart_4(D)->Lock
1386:src/stm32f1xx_hal_uart.c **** 
 1406              		.loc 1 1386 0 discriminator 2
 1407 0562 2222     		movs	r2, #34	@ tmp140,
1382:src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
 1408              		.loc 1 1382 0 discriminator 2
 1409 0564 8162     		str	r1, [r0, #40]	@ pData, huart_4(D)->pRxBuffPtr
1383:src/stm32f1xx_hal_uart.c **** 
 1410              		.loc 1 1383 0 discriminator 2
 1411 0566 8385     		strh	r3, [r0, #44]	@ movhi	@ Size, huart_4(D)->RxXferSize
1385:src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1412              		.loc 1 1385 0 discriminator 2
 1413 0568 C463     		str	r4, [r0, #60]	@ tmp139, huart_4(D)->ErrorCode
1386:src/stm32f1xx_hal_uart.c **** 
 1414              		.loc 1 1386 0 discriminator 2
 1415 056a 80F83A20 		strb	r2, [r0, #58]	@ tmp140, huart_4(D)->RxState
1389:src/stm32f1xx_hal_uart.c **** 
 1416              		.loc 1 1389 0 discriminator 2
 1417 056e 406B     		ldr	r0, [r0, #52]	@ _13, huart_4(D)->hdmarx
 1418              	.LVL113:
 1419 0570 134A     		ldr	r2, .L93	@ tmp142,
1402:src/stm32f1xx_hal_uart.c **** 
 1420              		.loc 1 1402 0 discriminator 2
 1421 0572 2E68     		ldr	r6, [r5]	@ huart_4(D)->Instance, huart_4(D)->Instance
1389:src/stm32f1xx_hal_uart.c **** 
 1422              		.loc 1 1389 0 discriminator 2
 1423 0574 8262     		str	r2, [r0, #40]	@ tmp142, _13->XferCpltCallback
1392:src/stm32f1xx_hal_uart.c **** 
 1424              		.loc 1 1392 0 discriminator 2
 1425 0576 134A     		ldr	r2, .L93+4	@ tmp143,
1398:src/stm32f1xx_hal_uart.c **** 
 1426              		.loc 1 1398 0 discriminator 2
 1427 0578 4463     		str	r4, [r0, #52]	@ tmp139, _13->XferAbortCallback
 1428              	.LVL114:
1392:src/stm32f1xx_hal_uart.c **** 
 1429              		.loc 1 1392 0 discriminator 2
 1430 057a C262     		str	r2, [r0, #44]	@ tmp143, _13->XferHalfCpltCallback
1395:src/stm32f1xx_hal_uart.c **** 
 1431              		.loc 1 1395 0 discriminator 2
 1432 057c 124A     		ldr	r2, .L93+8	@ tmp144,
 1433 057e 0263     		str	r2, [r0, #48]	@ tmp144, _13->XferErrorCallback
1402:src/stm32f1xx_hal_uart.c **** 
 1434              		.loc 1 1402 0 discriminator 2
 1435 0580 0A46     		mov	r2, r1	@, pData
ARM GAS  /tmp/ccPoddoo.s 			page 87


 1436 0582 311D     		adds	r1, r6, #4	@, huart_4(D)->Instance,
 1437              	.LVL115:
 1438 0584 FFF7FEFF 		bl	HAL_DMA_Start_IT	@
 1439              	.LVL116:
1420:src/stm32f1xx_hal_uart.c ****   }
 1440              		.loc 1 1420 0 discriminator 2
 1441 0588 2046     		mov	r0, r4	@ <retval>, tmp139
 1442              	.LBB6:
1405:src/stm32f1xx_hal_uart.c **** 
 1443              		.loc 1 1405 0 discriminator 2
 1444 058a 2B68     		ldr	r3, [r5]	@ _25, huart_4(D)->Instance
 1445 058c 0194     		str	r4, [sp, #4]	@ tmp139, tmpreg
 1446 058e 1A68     		ldr	r2, [r3]	@ tmpreg.5_26, _25->SR
 1447 0590 0192     		str	r2, [sp, #4]	@ tmpreg.5_26, tmpreg
 1448 0592 5A68     		ldr	r2, [r3, #4]	@ tmpreg.6_28, _25->DR
 1449              	.LBE6:
1408:src/stm32f1xx_hal_uart.c **** 
 1450              		.loc 1 1408 0 discriminator 2
 1451 0594 85F83840 		strb	r4, [r5, #56]	@ tmp139, huart_4(D)->Lock
 1452              	.LBB7:
1405:src/stm32f1xx_hal_uart.c **** 
 1453              		.loc 1 1405 0 discriminator 2
 1454 0598 0192     		str	r2, [sp, #4]	@ tmpreg.6_28, tmpreg
 1455 059a 019A     		ldr	r2, [sp, #4]	@ vol.7_30, tmpreg
 1456              	.LBE7:
1411:src/stm32f1xx_hal_uart.c **** 
 1457              		.loc 1 1411 0 discriminator 2
 1458 059c DA68     		ldr	r2, [r3, #12]	@ _32, _25->CR1
 1459 059e 42F48072 		orr	r2, r2, #256	@ _33, _32,
 1460 05a2 DA60     		str	r2, [r3, #12]	@ _33, _25->CR1
1414:src/stm32f1xx_hal_uart.c **** 
 1461              		.loc 1 1414 0 discriminator 2
 1462 05a4 5A69     		ldr	r2, [r3, #20]	@ _35, _25->CR3
 1463 05a6 42F00102 		orr	r2, r2, #1	@ _36, _35,
 1464 05aa 5A61     		str	r2, [r3, #20]	@ _36, _25->CR3
1418:src/stm32f1xx_hal_uart.c **** 
 1465              		.loc 1 1418 0 discriminator 2
 1466 05ac 5A69     		ldr	r2, [r3, #20]	@ _38, _25->CR3
 1467 05ae 42F04002 		orr	r2, r2, #64	@ _39, _38,
 1468 05b2 5A61     		str	r2, [r3, #20]	@ _39, _25->CR3
 1469              	.LVL117:
 1470              	.L88:
1426:src/stm32f1xx_hal_uart.c **** 
 1471              		.loc 1 1426 0
 1472 05b4 02B0     		add	sp, sp, #8	@,,
 1473              	.LCFI11:
 1474              		.cfi_remember_state
 1475              		.cfi_def_cfa_offset 16
 1476              		@ sp needed	@
 1477 05b6 70BD     		pop	{r4, r5, r6, pc}	@
 1478              	.LVL118:
 1479              	.L91:
 1480              	.LCFI12:
 1481              		.cfi_restore_state
1376:src/stm32f1xx_hal_uart.c ****     }
 1482              		.loc 1 1376 0
 1483 05b8 0120     		movs	r0, #1	@ <retval>,
ARM GAS  /tmp/ccPoddoo.s 			page 88


 1484              	.LVL119:
 1485 05ba FBE7     		b	.L88	@
 1486              	.LVL120:
 1487              	.L92:
1424:src/stm32f1xx_hal_uart.c ****   }
 1488              		.loc 1 1424 0
 1489 05bc 0220     		movs	r0, #2	@ <retval>,
 1490              	.LVL121:
 1491 05be F9E7     		b	.L88	@
 1492              	.L94:
 1493              		.align	2
 1494              	.L93:
 1495 05c0 00000000 		.word	UART_DMAReceiveCplt
 1496 05c4 00000000 		.word	UART_DMARxHalfCplt
 1497 05c8 00000000 		.word	UART_DMAError
 1498              		.cfi_endproc
 1499              	.LFE77:
 1500              		.size	HAL_UART_Receive_DMA, .-HAL_UART_Receive_DMA
 1501              		.align	1
 1502              		.global	HAL_UART_DMAPause
 1503              		.syntax unified
 1504              		.thumb
 1505              		.thumb_func
 1506              		.fpu softvfp
 1507              		.type	HAL_UART_DMAPause, %function
 1508              	HAL_UART_DMAPause:
 1509              	.LFB78:
1435:src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1510              		.loc 1 1435 0
 1511              		.cfi_startproc
 1512              		@ args = 0, pretend = 0, frame = 0
 1513              		@ frame_needed = 0, uses_anonymous_args = 0
 1514              		@ link register save eliminated.
 1515              	.LVL122:
1439:src/stm32f1xx_hal_uart.c **** 
 1516              		.loc 1 1439 0
 1517 05cc 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2	@ huart_6(D)->Lock, huart_6(D)->Lock
 1518 05d0 012B     		cmp	r3, #1	@ huart_6(D)->Lock,
 1519 05d2 26D0     		beq	.L99	@,
1439:src/stm32f1xx_hal_uart.c **** 
 1520              		.loc 1 1439 0 is_stmt 0 discriminator 2
 1521 05d4 0123     		movs	r3, #1	@ tmp129,
 1522 05d6 80F83830 		strb	r3, [r0, #56]	@ tmp129, huart_6(D)->Lock
1441:src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1523              		.loc 1 1441 0 is_stmt 1 discriminator 2
 1524 05da 0368     		ldr	r3, [r0]	@ _9, huart_6(D)->Instance
 1525 05dc 5A69     		ldr	r2, [r3, #20]	@ _10, _9->CR3
 1526              	.LVL123:
1442:src/stm32f1xx_hal_uart.c ****   {
 1527              		.loc 1 1442 0 discriminator 2
 1528 05de 90F83910 		ldrb	r1, [r0, #57]	@ zero_extendqisi2	@ huart_6(D)->gState, huart_6(D)->gState
 1529 05e2 2129     		cmp	r1, #33	@ huart_6(D)->gState,
 1530 05e4 05D1     		bne	.L97	@,
1442:src/stm32f1xx_hal_uart.c ****   {
 1531              		.loc 1 1442 0 is_stmt 0 discriminator 1
 1532 05e6 1106     		lsls	r1, r2, #24	@, _10,
1445:src/stm32f1xx_hal_uart.c ****   }
ARM GAS  /tmp/ccPoddoo.s 			page 89


 1533              		.loc 1 1445 0 is_stmt 1 discriminator 1
 1534 05e8 42BF     		ittt	mi
 1535 05ea 5A69     		ldrmi	r2, [r3, #20]	@ _13, _9->CR3
 1536              	.LVL124:
 1537 05ec 22F08002 		bicmi	r2, r2, #128	@ _14, _13,
 1538 05f0 5A61     		strmi	r2, [r3, #20]	@ _14, _9->CR3
 1539              	.L97:
1448:src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 1540              		.loc 1 1448 0
 1541 05f2 5A69     		ldr	r2, [r3, #20]	@ _16, _9->CR3
 1542              	.LVL125:
1449:src/stm32f1xx_hal_uart.c ****   {
 1543              		.loc 1 1449 0
 1544 05f4 90F83A10 		ldrb	r1, [r0, #58]	@ zero_extendqisi2	@ huart_6(D)->RxState, huart_6(D)->RxState
 1545 05f8 2229     		cmp	r1, #34	@ huart_6(D)->RxState,
 1546 05fa 0DD1     		bne	.L98	@,
1449:src/stm32f1xx_hal_uart.c ****   {
 1547              		.loc 1 1449 0 is_stmt 0 discriminator 1
 1548 05fc 5206     		lsls	r2, r2, #25	@, _16,
 1549              	.LVL126:
 1550 05fe 0BD5     		bpl	.L98	@,
1452:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1551              		.loc 1 1452 0 is_stmt 1
 1552 0600 DA68     		ldr	r2, [r3, #12]	@ _19, _9->CR1
 1553 0602 22F48072 		bic	r2, r2, #256	@ _20, _19,
 1554 0606 DA60     		str	r2, [r3, #12]	@ _20, _9->CR1
1453:src/stm32f1xx_hal_uart.c **** 
 1555              		.loc 1 1453 0
 1556 0608 5A69     		ldr	r2, [r3, #20]	@ _22, _9->CR3
 1557 060a 22F00102 		bic	r2, r2, #1	@ _23, _22,
 1558 060e 5A61     		str	r2, [r3, #20]	@ _23, _9->CR3
1456:src/stm32f1xx_hal_uart.c ****   }
 1559              		.loc 1 1456 0
 1560 0610 5A69     		ldr	r2, [r3, #20]	@ _25, _9->CR3
 1561 0612 22F04002 		bic	r2, r2, #64	@ _26, _25,
 1562 0616 5A61     		str	r2, [r3, #20]	@ _26, _9->CR3
 1563              	.L98:
1460:src/stm32f1xx_hal_uart.c **** 
 1564              		.loc 1 1460 0
 1565 0618 0023     		movs	r3, #0	@ tmp139,
 1566 061a 80F83830 		strb	r3, [r0, #56]	@ tmp139, huart_6(D)->Lock
1462:src/stm32f1xx_hal_uart.c **** }
 1567              		.loc 1 1462 0
 1568 061e 1846     		mov	r0, r3	@ <retval>, tmp139
 1569              	.LVL127:
 1570 0620 7047     		bx	lr	@
 1571              	.LVL128:
 1572              	.L99:
1439:src/stm32f1xx_hal_uart.c **** 
 1573              		.loc 1 1439 0
 1574 0622 0220     		movs	r0, #2	@ <retval>,
 1575              	.LVL129:
1463:src/stm32f1xx_hal_uart.c **** 
 1576              		.loc 1 1463 0
 1577 0624 7047     		bx	lr	@
 1578              		.cfi_endproc
 1579              	.LFE78:
ARM GAS  /tmp/ccPoddoo.s 			page 90


 1580              		.size	HAL_UART_DMAPause, .-HAL_UART_DMAPause
 1581              		.align	1
 1582              		.global	HAL_UART_DMAResume
 1583              		.syntax unified
 1584              		.thumb
 1585              		.thumb_func
 1586              		.fpu softvfp
 1587              		.type	HAL_UART_DMAResume, %function
 1588              	HAL_UART_DMAResume:
 1589              	.LFB79:
1472:src/stm32f1xx_hal_uart.c ****   /* Process Locked */
 1590              		.loc 1 1472 0
 1591              		.cfi_startproc
 1592              		@ args = 0, pretend = 0, frame = 8
 1593              		@ frame_needed = 0, uses_anonymous_args = 0
 1594              		@ link register save eliminated.
 1595              	.LVL130:
1474:src/stm32f1xx_hal_uart.c **** 
 1596              		.loc 1 1474 0
 1597 0626 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2	@ huart_6(D)->Lock, huart_6(D)->Lock
1472:src/stm32f1xx_hal_uart.c ****   /* Process Locked */
 1598              		.loc 1 1472 0
 1599 062a 82B0     		sub	sp, sp, #8	@,,
 1600              	.LCFI13:
 1601              		.cfi_def_cfa_offset 8
1474:src/stm32f1xx_hal_uart.c **** 
 1602              		.loc 1 1474 0
 1603 062c 012B     		cmp	r3, #1	@ huart_6(D)->Lock,
 1604 062e 29D0     		beq	.L110	@,
1474:src/stm32f1xx_hal_uart.c **** 
 1605              		.loc 1 1474 0 is_stmt 0 discriminator 2
 1606 0630 0123     		movs	r3, #1	@ tmp129,
 1607 0632 80F83830 		strb	r3, [r0, #56]	@ tmp129, huart_6(D)->Lock
1476:src/stm32f1xx_hal_uart.c ****   {
 1608              		.loc 1 1476 0 is_stmt 1 discriminator 2
 1609 0636 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2	@ huart_6(D)->gState, huart_6(D)->gState
 1610 063a 212B     		cmp	r3, #33	@ huart_6(D)->gState,
1479:src/stm32f1xx_hal_uart.c ****   }
 1611              		.loc 1 1479 0 discriminator 2
 1612 063c 01BF     		itttt	eq
 1613 063e 0268     		ldreq	r2, [r0]	@ _10, huart_6(D)->Instance
 1614 0640 5369     		ldreq	r3, [r2, #20]	@ _11, _10->CR3
 1615 0642 43F08003 		orreq	r3, r3, #128	@ _12, _11,
 1616 0646 5361     		streq	r3, [r2, #20]	@ _12, _10->CR3
1482:src/stm32f1xx_hal_uart.c ****   {
 1617              		.loc 1 1482 0 discriminator 2
 1618 0648 90F83A30 		ldrb	r3, [r0, #58]	@ zero_extendqisi2	@ huart_6(D)->RxState, huart_6(D)->RxState
 1619 064c 222B     		cmp	r3, #34	@ huart_6(D)->RxState,
 1620 064e 13D1     		bne	.L109	@,
 1621              	.LBB8:
1485:src/stm32f1xx_hal_uart.c **** 
 1622              		.loc 1 1485 0
 1623 0650 0023     		movs	r3, #0	@ tmp137,
 1624 0652 0193     		str	r3, [sp, #4]	@ tmp137, tmpreg
 1625 0654 0368     		ldr	r3, [r0]	@ _16, huart_6(D)->Instance
 1626 0656 1A68     		ldr	r2, [r3]	@ tmpreg.8_17, _16->SR
 1627 0658 0192     		str	r2, [sp, #4]	@ tmpreg.8_17, tmpreg
ARM GAS  /tmp/ccPoddoo.s 			page 91


 1628 065a 5A68     		ldr	r2, [r3, #4]	@ tmpreg.9_19, _16->DR
 1629 065c 0192     		str	r2, [sp, #4]	@ tmpreg.9_19, tmpreg
 1630 065e 019A     		ldr	r2, [sp, #4]	@ vol.10_21, tmpreg
 1631              	.LBE8:
1488:src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1632              		.loc 1 1488 0
 1633 0660 DA68     		ldr	r2, [r3, #12]	@ _22, _16->CR1
 1634 0662 42F48072 		orr	r2, r2, #256	@ _23, _22,
 1635 0666 DA60     		str	r2, [r3, #12]	@ _23, _16->CR1
1489:src/stm32f1xx_hal_uart.c **** 
 1636              		.loc 1 1489 0
 1637 0668 5A69     		ldr	r2, [r3, #20]	@ _25, _16->CR3
 1638 066a 42F00102 		orr	r2, r2, #1	@ _26, _25,
 1639 066e 5A61     		str	r2, [r3, #20]	@ _26, _16->CR3
1492:src/stm32f1xx_hal_uart.c ****   }
 1640              		.loc 1 1492 0
 1641 0670 5A69     		ldr	r2, [r3, #20]	@ _28, _16->CR3
 1642 0672 42F04002 		orr	r2, r2, #64	@ _29, _28,
 1643 0676 5A61     		str	r2, [r3, #20]	@ _29, _16->CR3
 1644              	.L109:
1496:src/stm32f1xx_hal_uart.c **** 
 1645              		.loc 1 1496 0
 1646 0678 0023     		movs	r3, #0	@ tmp138,
 1647 067a 80F83830 		strb	r3, [r0, #56]	@ tmp138, huart_6(D)->Lock
1498:src/stm32f1xx_hal_uart.c **** }
 1648              		.loc 1 1498 0
 1649 067e 1846     		mov	r0, r3	@ <retval>, tmp138
 1650              	.LVL131:
 1651              	.L107:
1499:src/stm32f1xx_hal_uart.c **** 
 1652              		.loc 1 1499 0
 1653 0680 02B0     		add	sp, sp, #8	@,,
 1654              	.LCFI14:
 1655              		.cfi_remember_state
 1656              		.cfi_def_cfa_offset 0
 1657              		@ sp needed	@
 1658 0682 7047     		bx	lr	@
 1659              	.LVL132:
 1660              	.L110:
 1661              	.LCFI15:
 1662              		.cfi_restore_state
1474:src/stm32f1xx_hal_uart.c **** 
 1663              		.loc 1 1474 0
 1664 0684 0220     		movs	r0, #2	@ <retval>,
 1665              	.LVL133:
 1666 0686 FBE7     		b	.L107	@
 1667              		.cfi_endproc
 1668              	.LFE79:
 1669              		.size	HAL_UART_DMAResume, .-HAL_UART_DMAResume
 1670              		.align	1
 1671              		.global	HAL_UART_DMAStop
 1672              		.syntax unified
 1673              		.thumb
 1674              		.thumb_func
 1675              		.fpu softvfp
 1676              		.type	HAL_UART_DMAStop, %function
 1677              	HAL_UART_DMAStop:
ARM GAS  /tmp/ccPoddoo.s 			page 92


 1678              	.LFB80:
1508:src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1679              		.loc 1 1508 0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 0
 1682              		@ frame_needed = 0, uses_anonymous_args = 0
 1683              	.LVL134:
1517:src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1684              		.loc 1 1517 0
 1685 0688 0368     		ldr	r3, [r0]	@ _7, huart_6(D)->Instance
1508:src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1686              		.loc 1 1508 0
 1687 068a 10B5     		push	{r4, lr}	@
 1688              	.LCFI16:
 1689              		.cfi_def_cfa_offset 8
 1690              		.cfi_offset 4, -8
 1691              		.cfi_offset 14, -4
1517:src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1692              		.loc 1 1517 0
 1693 068c 5A69     		ldr	r2, [r3, #20]	@ _8, _7->CR3
 1694              	.LVL135:
1518:src/stm32f1xx_hal_uart.c ****   {
 1695              		.loc 1 1518 0
 1696 068e 90F83910 		ldrb	r1, [r0, #57]	@ zero_extendqisi2	@ huart_6(D)->gState, huart_6(D)->gState
1508:src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1697              		.loc 1 1508 0
 1698 0692 0446     		mov	r4, r0	@ huart, huart
1518:src/stm32f1xx_hal_uart.c ****   {
 1699              		.loc 1 1518 0
 1700 0694 2129     		cmp	r1, #33	@ huart_6(D)->gState,
 1701 0696 11D1     		bne	.L112	@,
1518:src/stm32f1xx_hal_uart.c ****   {
 1702              		.loc 1 1518 0 is_stmt 0 discriminator 1
 1703 0698 1106     		lsls	r1, r2, #24	@, _8,
 1704 069a 0FD5     		bpl	.L112	@,
1520:src/stm32f1xx_hal_uart.c **** 
 1705              		.loc 1 1520 0 is_stmt 1
 1706 069c 5A69     		ldr	r2, [r3, #20]	@ _11, _7->CR3
 1707              	.LVL136:
1523:src/stm32f1xx_hal_uart.c ****     {
 1708              		.loc 1 1523 0
 1709 069e 006B     		ldr	r0, [r0, #48]	@ _14, huart_6(D)->hdmatx
 1710              	.LVL137:
1520:src/stm32f1xx_hal_uart.c **** 
 1711              		.loc 1 1520 0
 1712 06a0 22F08002 		bic	r2, r2, #128	@ _12, _11,
 1713 06a4 5A61     		str	r2, [r3, #20]	@ _12, _7->CR3
1523:src/stm32f1xx_hal_uart.c ****     {
 1714              		.loc 1 1523 0
 1715 06a6 08B1     		cbz	r0, .L113	@ _14,
1525:src/stm32f1xx_hal_uart.c ****     }
 1716              		.loc 1 1525 0
 1717 06a8 FFF7FEFF 		bl	HAL_DMA_Abort	@
 1718              	.LVL138:
 1719              	.L113:
 1720              	.LBB11:
 1721              	.LBB12:
ARM GAS  /tmp/ccPoddoo.s 			page 93


2725:src/stm32f1xx_hal_uart.c **** 
 1722              		.loc 1 2725 0
 1723 06ac 2268     		ldr	r2, [r4]	@ _27, huart_6(D)->Instance
 1724 06ae D368     		ldr	r3, [r2, #12]	@ _28, _27->CR1
 1725 06b0 23F0C003 		bic	r3, r3, #192	@ _29, _28,
 1726 06b4 D360     		str	r3, [r2, #12]	@ _29, _27->CR1
2728:src/stm32f1xx_hal_uart.c **** }
 1727              		.loc 1 2728 0
 1728 06b6 2023     		movs	r3, #32	@ tmp133,
 1729 06b8 84F83930 		strb	r3, [r4, #57]	@ tmp133, huart_6(D)->gState
 1730              	.LVL139:
 1731              	.L112:
 1732              	.LBE12:
 1733              	.LBE11:
1531:src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 1734              		.loc 1 1531 0
 1735 06bc 2368     		ldr	r3, [r4]	@ _17, huart_6(D)->Instance
 1736 06be 5A69     		ldr	r2, [r3, #20]	@ _18, _17->CR3
 1737              	.LVL140:
1532:src/stm32f1xx_hal_uart.c ****   {
 1738              		.loc 1 1532 0
 1739 06c0 94F83A10 		ldrb	r1, [r4, #58]	@ zero_extendqisi2	@ huart_6(D)->RxState, huart_6(D)->RxState
 1740 06c4 2229     		cmp	r1, #34	@ huart_6(D)->RxState,
 1741 06c6 0CD1     		bne	.L114	@,
1532:src/stm32f1xx_hal_uart.c ****   {
 1742              		.loc 1 1532 0 is_stmt 0 discriminator 1
 1743 06c8 5206     		lsls	r2, r2, #25	@, _18,
 1744              	.LVL141:
 1745 06ca 0AD5     		bpl	.L114	@,
1534:src/stm32f1xx_hal_uart.c **** 
 1746              		.loc 1 1534 0 is_stmt 1
 1747 06cc 5A69     		ldr	r2, [r3, #20]	@ _21, _17->CR3
1537:src/stm32f1xx_hal_uart.c ****     {
 1748              		.loc 1 1537 0
 1749 06ce 606B     		ldr	r0, [r4, #52]	@ _24, huart_6(D)->hdmarx
1534:src/stm32f1xx_hal_uart.c **** 
 1750              		.loc 1 1534 0
 1751 06d0 22F04002 		bic	r2, r2, #64	@ _22, _21,
 1752 06d4 5A61     		str	r2, [r3, #20]	@ _22, _17->CR3
1537:src/stm32f1xx_hal_uart.c ****     {
 1753              		.loc 1 1537 0
 1754 06d6 08B1     		cbz	r0, .L115	@ _24,
1539:src/stm32f1xx_hal_uart.c ****     }
 1755              		.loc 1 1539 0
 1756 06d8 FFF7FEFF 		bl	HAL_DMA_Abort	@
 1757              	.LVL142:
 1758              	.L115:
1541:src/stm32f1xx_hal_uart.c ****   }
 1759              		.loc 1 1541 0
 1760 06dc 2046     		mov	r0, r4	@, huart
 1761 06de FFF78FFC 		bl	UART_EndRxTransfer	@
 1762              	.LVL143:
 1763              	.L114:
1545:src/stm32f1xx_hal_uart.c **** 
 1764              		.loc 1 1545 0
 1765 06e2 0020     		movs	r0, #0	@,
 1766 06e4 10BD     		pop	{r4, pc}	@
ARM GAS  /tmp/ccPoddoo.s 			page 94


 1767              		.cfi_endproc
 1768              	.LFE80:
 1769              		.size	HAL_UART_DMAStop, .-HAL_UART_DMAStop
 1770              		.align	1
 1771              		.global	HAL_UART_Abort
 1772              		.syntax unified
 1773              		.thumb
 1774              		.thumb_func
 1775              		.fpu softvfp
 1776              		.type	HAL_UART_Abort, %function
 1777              	HAL_UART_Abort:
 1778              	.LFB81:
1560:src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1779              		.loc 1 1560 0
 1780              		.cfi_startproc
 1781              		@ args = 0, pretend = 0, frame = 0
 1782              		@ frame_needed = 0, uses_anonymous_args = 0
 1783              	.LVL144:
1562:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1784              		.loc 1 1562 0
 1785 06e6 0368     		ldr	r3, [r0]	@ _7, huart_6(D)->Instance
1560:src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1786              		.loc 1 1560 0
 1787 06e8 10B5     		push	{r4, lr}	@
 1788              	.LCFI17:
 1789              		.cfi_def_cfa_offset 8
 1790              		.cfi_offset 4, -8
 1791              		.cfi_offset 14, -4
1562:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1792              		.loc 1 1562 0
 1793 06ea DA68     		ldr	r2, [r3, #12]	@ _8, _7->CR1
1560:src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1794              		.loc 1 1560 0
 1795 06ec 0446     		mov	r4, r0	@ huart, huart
1562:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1796              		.loc 1 1562 0
 1797 06ee 22F4F072 		bic	r2, r2, #480	@ _9, _8,
 1798 06f2 DA60     		str	r2, [r3, #12]	@ _9, _7->CR1
1563:src/stm32f1xx_hal_uart.c **** 
 1799              		.loc 1 1563 0
 1800 06f4 5A69     		ldr	r2, [r3, #20]	@ _11, _7->CR3
 1801 06f6 22F00102 		bic	r2, r2, #1	@ _12, _11,
 1802 06fa 5A61     		str	r2, [r3, #20]	@ _12, _7->CR3
1566:src/stm32f1xx_hal_uart.c ****   {
 1803              		.loc 1 1566 0
 1804 06fc 5A69     		ldr	r2, [r3, #20]	@ _14, _7->CR3
 1805 06fe 1106     		lsls	r1, r2, #24	@, _14,
 1806 0700 13D5     		bpl	.L129	@,
1568:src/stm32f1xx_hal_uart.c **** 
 1807              		.loc 1 1568 0
 1808 0702 5A69     		ldr	r2, [r3, #20]	@ _16, _7->CR3
1571:src/stm32f1xx_hal_uart.c ****     {
 1809              		.loc 1 1571 0
 1810 0704 006B     		ldr	r0, [r0, #48]	@ _19, huart_6(D)->hdmatx
 1811              	.LVL145:
1568:src/stm32f1xx_hal_uart.c **** 
 1812              		.loc 1 1568 0
ARM GAS  /tmp/ccPoddoo.s 			page 95


 1813 0706 22F08002 		bic	r2, r2, #128	@ _17, _16,
 1814 070a 5A61     		str	r2, [r3, #20]	@ _17, _7->CR3
1571:src/stm32f1xx_hal_uart.c ****     {
 1815              		.loc 1 1571 0
 1816 070c 68B1     		cbz	r0, .L129	@ _19,
1575:src/stm32f1xx_hal_uart.c **** 
 1817              		.loc 1 1575 0
 1818 070e 0023     		movs	r3, #0	@ tmp135,
 1819 0710 4363     		str	r3, [r0, #52]	@ tmp135, _19->XferAbortCallback
1577:src/stm32f1xx_hal_uart.c ****       {
 1820              		.loc 1 1577 0
 1821 0712 FFF7FEFF 		bl	HAL_DMA_Abort	@
 1822              	.LVL146:
 1823 0716 40B1     		cbz	r0, .L129	@,
1579:src/stm32f1xx_hal_uart.c ****         {
 1824              		.loc 1 1579 0
 1825 0718 206B     		ldr	r0, [r4, #48]	@, huart_6(D)->hdmatx
 1826 071a FFF7FEFF 		bl	HAL_DMA_GetError	@
 1827              	.LVL147:
 1828 071e 2028     		cmp	r0, #32	@,
 1829 0720 03D1     		bne	.L129	@,
 1830              	.L150:
1607:src/stm32f1xx_hal_uart.c **** 
 1831              		.loc 1 1607 0
 1832 0722 1023     		movs	r3, #16	@ tmp141,
1609:src/stm32f1xx_hal_uart.c ****         }
 1833              		.loc 1 1609 0
 1834 0724 0320     		movs	r0, #3	@ <retval>,
1607:src/stm32f1xx_hal_uart.c **** 
 1835              		.loc 1 1607 0
 1836 0726 E363     		str	r3, [r4, #60]	@ tmp141,
1609:src/stm32f1xx_hal_uart.c ****         }
 1837              		.loc 1 1609 0
 1838 0728 10BD     		pop	{r4, pc}	@
 1839              	.LVL148:
 1840              	.L129:
1591:src/stm32f1xx_hal_uart.c ****   {
 1841              		.loc 1 1591 0
 1842 072a 2368     		ldr	r3, [r4]	@ _27, huart_6(D)->Instance
 1843 072c 5A69     		ldr	r2, [r3, #20]	@ _28, _27->CR3
 1844 072e 5206     		lsls	r2, r2, #25	@, _28,
 1845 0730 0FD5     		bpl	.L131	@,
1593:src/stm32f1xx_hal_uart.c **** 
 1846              		.loc 1 1593 0
 1847 0732 5A69     		ldr	r2, [r3, #20]	@ _30, _27->CR3
1596:src/stm32f1xx_hal_uart.c ****     {
 1848              		.loc 1 1596 0
 1849 0734 606B     		ldr	r0, [r4, #52]	@ _33, huart_6(D)->hdmarx
1593:src/stm32f1xx_hal_uart.c **** 
 1850              		.loc 1 1593 0
 1851 0736 22F04002 		bic	r2, r2, #64	@ _31, _30,
 1852 073a 5A61     		str	r2, [r3, #20]	@ _31, _27->CR3
1596:src/stm32f1xx_hal_uart.c ****     {
 1853              		.loc 1 1596 0
 1854 073c 48B1     		cbz	r0, .L131	@ _33,
1600:src/stm32f1xx_hal_uart.c **** 
 1855              		.loc 1 1600 0
ARM GAS  /tmp/ccPoddoo.s 			page 96


 1856 073e 0023     		movs	r3, #0	@ tmp139,
 1857 0740 4363     		str	r3, [r0, #52]	@ tmp139, _33->XferAbortCallback
1602:src/stm32f1xx_hal_uart.c ****       {
 1858              		.loc 1 1602 0
 1859 0742 FFF7FEFF 		bl	HAL_DMA_Abort	@
 1860              	.LVL149:
 1861 0746 20B1     		cbz	r0, .L131	@,
1604:src/stm32f1xx_hal_uart.c ****         {
 1862              		.loc 1 1604 0
 1863 0748 606B     		ldr	r0, [r4, #52]	@, huart_6(D)->hdmarx
 1864 074a FFF7FEFF 		bl	HAL_DMA_GetError	@
 1865              	.LVL150:
 1866 074e 2028     		cmp	r0, #32	@,
 1867 0750 E7D0     		beq	.L150	@,
 1868              	.L131:
1616:src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 1869              		.loc 1 1616 0
 1870 0752 0020     		movs	r0, #0	@ tmp143,
1623:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 1871              		.loc 1 1623 0
 1872 0754 2023     		movs	r3, #32	@ tmp147,
1616:src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 1873              		.loc 1 1616 0
 1874 0756 E084     		strh	r0, [r4, #38]	@ movhi	@ tmp143, huart_6(D)->TxXferCount
1617:src/stm32f1xx_hal_uart.c **** 
 1875              		.loc 1 1617 0
 1876 0758 E085     		strh	r0, [r4, #46]	@ movhi	@ tmp143, huart_6(D)->RxXferCount
1620:src/stm32f1xx_hal_uart.c **** 
 1877              		.loc 1 1620 0
 1878 075a E063     		str	r0, [r4, #60]	@ tmp143, huart_6(D)->ErrorCode
1623:src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 1879              		.loc 1 1623 0
 1880 075c 84F83A30 		strb	r3, [r4, #58]	@ tmp147, huart_6(D)->RxState
1624:src/stm32f1xx_hal_uart.c **** 
 1881              		.loc 1 1624 0
 1882 0760 84F83930 		strb	r3, [r4, #57]	@ tmp147, huart_6(D)->gState
1627:src/stm32f1xx_hal_uart.c **** 
 1883              		.loc 1 1627 0
 1884 0764 10BD     		pop	{r4, pc}	@
 1885              		.cfi_endproc
 1886              	.LFE81:
 1887              		.size	HAL_UART_Abort, .-HAL_UART_Abort
 1888              		.align	1
 1889              		.global	HAL_UART_AbortTransmit
 1890              		.syntax unified
 1891              		.thumb
 1892              		.thumb_func
 1893              		.fpu softvfp
 1894              		.type	HAL_UART_AbortTransmit, %function
 1895              	HAL_UART_AbortTransmit:
 1896              	.LFB82:
1642:src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
 1897              		.loc 1 1642 0
 1898              		.cfi_startproc
 1899              		@ args = 0, pretend = 0, frame = 0
 1900              		@ frame_needed = 0, uses_anonymous_args = 0
 1901              	.LVL151:
ARM GAS  /tmp/ccPoddoo.s 			page 97


1644:src/stm32f1xx_hal_uart.c **** 
 1902              		.loc 1 1644 0
 1903 0766 0368     		ldr	r3, [r0]	@ _6, huart_5(D)->Instance
1642:src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
 1904              		.loc 1 1642 0
 1905 0768 10B5     		push	{r4, lr}	@
 1906              	.LCFI18:
 1907              		.cfi_def_cfa_offset 8
 1908              		.cfi_offset 4, -8
 1909              		.cfi_offset 14, -4
1644:src/stm32f1xx_hal_uart.c **** 
 1910              		.loc 1 1644 0
 1911 076a DA68     		ldr	r2, [r3, #12]	@ _7, _6->CR1
1642:src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
 1912              		.loc 1 1642 0
 1913 076c 0446     		mov	r4, r0	@ huart, huart
1644:src/stm32f1xx_hal_uart.c **** 
 1914              		.loc 1 1644 0
 1915 076e 22F0C002 		bic	r2, r2, #192	@ _8, _7,
 1916 0772 DA60     		str	r2, [r3, #12]	@ _8, _6->CR1
1647:src/stm32f1xx_hal_uart.c ****   {
 1917              		.loc 1 1647 0
 1918 0774 5A69     		ldr	r2, [r3, #20]	@ _10, _6->CR3
 1919 0776 1206     		lsls	r2, r2, #24	@, _10,
 1920 0778 13D5     		bpl	.L152	@,
1649:src/stm32f1xx_hal_uart.c **** 
 1921              		.loc 1 1649 0
 1922 077a 5A69     		ldr	r2, [r3, #20]	@ _12, _6->CR3
1652:src/stm32f1xx_hal_uart.c ****     {
 1923              		.loc 1 1652 0
 1924 077c 006B     		ldr	r0, [r0, #48]	@ _15, huart_5(D)->hdmatx
 1925              	.LVL152:
1649:src/stm32f1xx_hal_uart.c **** 
 1926              		.loc 1 1649 0
 1927 077e 22F08002 		bic	r2, r2, #128	@ _13, _12,
 1928 0782 5A61     		str	r2, [r3, #20]	@ _13, _6->CR3
1652:src/stm32f1xx_hal_uart.c ****     {
 1929              		.loc 1 1652 0
 1930 0784 68B1     		cbz	r0, .L152	@ _15,
1656:src/stm32f1xx_hal_uart.c **** 
 1931              		.loc 1 1656 0
 1932 0786 0023     		movs	r3, #0	@ tmp124,
 1933 0788 4363     		str	r3, [r0, #52]	@ tmp124, _15->XferAbortCallback
1658:src/stm32f1xx_hal_uart.c ****       {
 1934              		.loc 1 1658 0
 1935 078a FFF7FEFF 		bl	HAL_DMA_Abort	@
 1936              	.LVL153:
 1937 078e 40B1     		cbz	r0, .L152	@,
1660:src/stm32f1xx_hal_uart.c ****         {
 1938              		.loc 1 1660 0
 1939 0790 206B     		ldr	r0, [r4, #48]	@, huart_5(D)->hdmatx
 1940 0792 FFF7FEFF 		bl	HAL_DMA_GetError	@
 1941              	.LVL154:
 1942 0796 2028     		cmp	r0, #32	@,
 1943 0798 03D1     		bne	.L152	@,
1663:src/stm32f1xx_hal_uart.c **** 
 1944              		.loc 1 1663 0
ARM GAS  /tmp/ccPoddoo.s 			page 98


 1945 079a 1023     		movs	r3, #16	@ tmp126,
1665:src/stm32f1xx_hal_uart.c ****         }
 1946              		.loc 1 1665 0
 1947 079c 0320     		movs	r0, #3	@ <retval>,
1663:src/stm32f1xx_hal_uart.c **** 
 1948              		.loc 1 1663 0
 1949 079e E363     		str	r3, [r4, #60]	@ tmp126, huart_5(D)->ErrorCode
1665:src/stm32f1xx_hal_uart.c ****         }
 1950              		.loc 1 1665 0
 1951 07a0 10BD     		pop	{r4, pc}	@
 1952              	.LVL155:
 1953              	.L152:
1672:src/stm32f1xx_hal_uart.c **** 
 1954              		.loc 1 1672 0
 1955 07a2 0020     		movs	r0, #0	@ tmp128,
1675:src/stm32f1xx_hal_uart.c **** 
 1956              		.loc 1 1675 0
 1957 07a4 2023     		movs	r3, #32	@ tmp129,
1672:src/stm32f1xx_hal_uart.c **** 
 1958              		.loc 1 1672 0
 1959 07a6 E084     		strh	r0, [r4, #38]	@ movhi	@ tmp128, huart_5(D)->TxXferCount
1675:src/stm32f1xx_hal_uart.c **** 
 1960              		.loc 1 1675 0
 1961 07a8 84F83930 		strb	r3, [r4, #57]	@ tmp129, huart_5(D)->gState
1678:src/stm32f1xx_hal_uart.c **** 
 1962              		.loc 1 1678 0
 1963 07ac 10BD     		pop	{r4, pc}	@
 1964              		.cfi_endproc
 1965              	.LFE82:
 1966              		.size	HAL_UART_AbortTransmit, .-HAL_UART_AbortTransmit
 1967              		.align	1
 1968              		.global	HAL_UART_AbortReceive
 1969              		.syntax unified
 1970              		.thumb
 1971              		.thumb_func
 1972              		.fpu softvfp
 1973              		.type	HAL_UART_AbortReceive, %function
 1974              	HAL_UART_AbortReceive:
 1975              	.LFB83:
1693:src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1976              		.loc 1 1693 0
 1977              		.cfi_startproc
 1978              		@ args = 0, pretend = 0, frame = 0
 1979              		@ frame_needed = 0, uses_anonymous_args = 0
 1980              	.LVL156:
1695:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1981              		.loc 1 1695 0
 1982 07ae 0368     		ldr	r3, [r0]	@ _6, huart_5(D)->Instance
1693:src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1983              		.loc 1 1693 0
 1984 07b0 10B5     		push	{r4, lr}	@
 1985              	.LCFI19:
 1986              		.cfi_def_cfa_offset 8
 1987              		.cfi_offset 4, -8
 1988              		.cfi_offset 14, -4
1695:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1989              		.loc 1 1695 0
ARM GAS  /tmp/ccPoddoo.s 			page 99


 1990 07b2 DA68     		ldr	r2, [r3, #12]	@ _7, _6->CR1
1693:src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1991              		.loc 1 1693 0
 1992 07b4 0446     		mov	r4, r0	@ huart, huart
1695:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1993              		.loc 1 1695 0
 1994 07b6 22F49072 		bic	r2, r2, #288	@ _8, _7,
 1995 07ba DA60     		str	r2, [r3, #12]	@ _8, _6->CR1
1696:src/stm32f1xx_hal_uart.c **** 
 1996              		.loc 1 1696 0
 1997 07bc 5A69     		ldr	r2, [r3, #20]	@ _10, _6->CR3
 1998 07be 22F00102 		bic	r2, r2, #1	@ _11, _10,
 1999 07c2 5A61     		str	r2, [r3, #20]	@ _11, _6->CR3
1699:src/stm32f1xx_hal_uart.c ****   {
 2000              		.loc 1 1699 0
 2001 07c4 5A69     		ldr	r2, [r3, #20]	@ _13, _6->CR3
 2002 07c6 5206     		lsls	r2, r2, #25	@, _13,
 2003 07c8 13D5     		bpl	.L164	@,
1701:src/stm32f1xx_hal_uart.c **** 
 2004              		.loc 1 1701 0
 2005 07ca 5A69     		ldr	r2, [r3, #20]	@ _15, _6->CR3
1704:src/stm32f1xx_hal_uart.c ****     {
 2006              		.loc 1 1704 0
 2007 07cc 406B     		ldr	r0, [r0, #52]	@ _18, huart_5(D)->hdmarx
 2008              	.LVL157:
1701:src/stm32f1xx_hal_uart.c **** 
 2009              		.loc 1 1701 0
 2010 07ce 22F04002 		bic	r2, r2, #64	@ _16, _15,
 2011 07d2 5A61     		str	r2, [r3, #20]	@ _16, _6->CR3
1704:src/stm32f1xx_hal_uart.c ****     {
 2012              		.loc 1 1704 0
 2013 07d4 68B1     		cbz	r0, .L164	@ _18,
1708:src/stm32f1xx_hal_uart.c **** 
 2014              		.loc 1 1708 0
 2015 07d6 0023     		movs	r3, #0	@ tmp126,
 2016 07d8 4363     		str	r3, [r0, #52]	@ tmp126, _18->XferAbortCallback
1710:src/stm32f1xx_hal_uart.c ****       {
 2017              		.loc 1 1710 0
 2018 07da FFF7FEFF 		bl	HAL_DMA_Abort	@
 2019              	.LVL158:
 2020 07de 40B1     		cbz	r0, .L164	@,
1712:src/stm32f1xx_hal_uart.c ****         {
 2021              		.loc 1 1712 0
 2022 07e0 606B     		ldr	r0, [r4, #52]	@, huart_5(D)->hdmarx
 2023 07e2 FFF7FEFF 		bl	HAL_DMA_GetError	@
 2024              	.LVL159:
 2025 07e6 2028     		cmp	r0, #32	@,
 2026 07e8 03D1     		bne	.L164	@,
1715:src/stm32f1xx_hal_uart.c **** 
 2027              		.loc 1 1715 0
 2028 07ea 1023     		movs	r3, #16	@ tmp128,
1717:src/stm32f1xx_hal_uart.c ****         }
 2029              		.loc 1 1717 0
 2030 07ec 0320     		movs	r0, #3	@ <retval>,
1715:src/stm32f1xx_hal_uart.c **** 
 2031              		.loc 1 1715 0
 2032 07ee E363     		str	r3, [r4, #60]	@ tmp128, huart_5(D)->ErrorCode
ARM GAS  /tmp/ccPoddoo.s 			page 100


1717:src/stm32f1xx_hal_uart.c ****         }
 2033              		.loc 1 1717 0
 2034 07f0 10BD     		pop	{r4, pc}	@
 2035              	.LVL160:
 2036              	.L164:
1724:src/stm32f1xx_hal_uart.c **** 
 2037              		.loc 1 1724 0
 2038 07f2 0020     		movs	r0, #0	@ tmp130,
1727:src/stm32f1xx_hal_uart.c **** 
 2039              		.loc 1 1727 0
 2040 07f4 2023     		movs	r3, #32	@ tmp131,
1724:src/stm32f1xx_hal_uart.c **** 
 2041              		.loc 1 1724 0
 2042 07f6 E085     		strh	r0, [r4, #46]	@ movhi	@ tmp130, huart_5(D)->RxXferCount
1727:src/stm32f1xx_hal_uart.c **** 
 2043              		.loc 1 1727 0
 2044 07f8 84F83A30 		strb	r3, [r4, #58]	@ tmp131, huart_5(D)->RxState
1730:src/stm32f1xx_hal_uart.c **** 
 2045              		.loc 1 1730 0
 2046 07fc 10BD     		pop	{r4, pc}	@
 2047              		.cfi_endproc
 2048              	.LFE83:
 2049              		.size	HAL_UART_AbortReceive, .-HAL_UART_AbortReceive
 2050              		.align	1
 2051              		.weak	HAL_UART_TxCpltCallback
 2052              		.syntax unified
 2053              		.thumb
 2054              		.thumb_func
 2055              		.fpu softvfp
 2056              		.type	HAL_UART_TxCpltCallback, %function
 2057              	HAL_UART_TxCpltCallback:
 2058              	.LFB135:
 2059              		.cfi_startproc
 2060              		@ args = 0, pretend = 0, frame = 0
 2061              		@ frame_needed = 0, uses_anonymous_args = 0
 2062              		@ link register save eliminated.
 2063 07fe 7047     		bx	lr	@
 2064              		.cfi_endproc
 2065              	.LFE135:
 2066              		.size	HAL_UART_TxCpltCallback, .-HAL_UART_TxCpltCallback
 2067              		.align	1
 2068              		.syntax unified
 2069              		.thumb
 2070              		.thumb_func
 2071              		.fpu softvfp
 2072              		.type	UART_DMATransmitCplt, %function
 2073              	UART_DMATransmitCplt:
 2074              	.LFB103:
2543:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2075              		.loc 1 2543 0
 2076              		.cfi_startproc
 2077              		@ args = 0, pretend = 0, frame = 0
 2078              		@ frame_needed = 0, uses_anonymous_args = 0
 2079              	.LVL161:
2543:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2080              		.loc 1 2543 0
 2081 0800 08B5     		push	{r3, lr}	@
ARM GAS  /tmp/ccPoddoo.s 			page 101


 2082              	.LCFI20:
 2083              		.cfi_def_cfa_offset 8
 2084              		.cfi_offset 3, -8
 2085              		.cfi_offset 14, -4
2546:src/stm32f1xx_hal_uart.c ****   {
 2086              		.loc 1 2546 0
 2087 0802 0368     		ldr	r3, [r0]	@ _5, hdma_3(D)->Instance
2544:src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
 2088              		.loc 1 2544 0
 2089 0804 426A     		ldr	r2, [r0, #36]	@ huart, hdma_3(D)->Parent
 2090              	.LVL162:
2546:src/stm32f1xx_hal_uart.c ****   {
 2091              		.loc 1 2546 0
 2092 0806 1B68     		ldr	r3, [r3]	@ _6, _5->CCR
 2093 0808 13F02003 		ands	r3, r3, #32	@ tmp120, _6,
 2094 080c 0AD1     		bne	.L177	@,
2548:src/stm32f1xx_hal_uart.c **** 
 2095              		.loc 1 2548 0
 2096 080e D384     		strh	r3, [r2, #38]	@ movhi	@ tmp120, huart_4->TxXferCount
2552:src/stm32f1xx_hal_uart.c **** 
 2097              		.loc 1 2552 0
 2098 0810 1368     		ldr	r3, [r2]	@ _9, huart_4->Instance
 2099 0812 5A69     		ldr	r2, [r3, #20]	@ _10, _9->CR3
 2100              	.LVL163:
 2101 0814 22F08002 		bic	r2, r2, #128	@ _11, _10,
 2102 0818 5A61     		str	r2, [r3, #20]	@ _11, _9->CR3
2555:src/stm32f1xx_hal_uart.c **** 
 2103              		.loc 1 2555 0
 2104 081a DA68     		ldr	r2, [r3, #12]	@ _13, _9->CR1
 2105 081c 42F04002 		orr	r2, r2, #64	@ _14, _13,
 2106 0820 DA60     		str	r2, [r3, #12]	@ _14, _9->CR1
 2107 0822 08BD     		pop	{r3, pc}	@
 2108              	.LVL164:
 2109              	.L177:
2566:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2110              		.loc 1 2566 0
 2111 0824 1046     		mov	r0, r2	@, huart
 2112              	.LVL165:
 2113 0826 FFF7FEFF 		bl	HAL_UART_TxCpltCallback	@
 2114              	.LVL166:
 2115 082a 08BD     		pop	{r3, pc}	@
 2116              		.cfi_endproc
 2117              	.LFE103:
 2118              		.size	UART_DMATransmitCplt, .-UART_DMATransmitCplt
 2119              		.align	1
 2120              		.weak	HAL_UART_TxHalfCpltCallback
 2121              		.syntax unified
 2122              		.thumb
 2123              		.thumb_func
 2124              		.fpu softvfp
 2125              		.type	HAL_UART_TxHalfCpltCallback, %function
 2126              	HAL_UART_TxHalfCpltCallback:
 2127              	.LFB133:
 2128              		.cfi_startproc
 2129              		@ args = 0, pretend = 0, frame = 0
 2130              		@ frame_needed = 0, uses_anonymous_args = 0
 2131              		@ link register save eliminated.
ARM GAS  /tmp/ccPoddoo.s 			page 102


 2132 082c 7047     		bx	lr	@
 2133              		.cfi_endproc
 2134              	.LFE133:
 2135              		.size	HAL_UART_TxHalfCpltCallback, .-HAL_UART_TxHalfCpltCallback
 2136              		.align	1
 2137              		.syntax unified
 2138              		.thumb
 2139              		.thumb_func
 2140              		.fpu softvfp
 2141              		.type	UART_DMATxHalfCplt, %function
 2142              	UART_DMATxHalfCplt:
 2143              	.LFB104:
2578:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2144              		.loc 1 2578 0
 2145              		.cfi_startproc
 2146              		@ args = 0, pretend = 0, frame = 0
 2147              		@ frame_needed = 0, uses_anonymous_args = 0
 2148              	.LVL167:
2578:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2149              		.loc 1 2578 0
 2150 082e 08B5     		push	{r3, lr}	@
 2151              	.LCFI21:
 2152              		.cfi_def_cfa_offset 8
 2153              		.cfi_offset 3, -8
 2154              		.cfi_offset 14, -4
2586:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2155              		.loc 1 2586 0
 2156 0830 406A     		ldr	r0, [r0, #36]	@, hdma_2(D)->Parent
 2157              	.LVL168:
 2158 0832 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback	@
 2159              	.LVL169:
 2160 0836 08BD     		pop	{r3, pc}	@
 2161              		.cfi_endproc
 2162              	.LFE104:
 2163              		.size	UART_DMATxHalfCplt, .-UART_DMATxHalfCplt
 2164              		.align	1
 2165              		.weak	HAL_UART_RxCpltCallback
 2166              		.syntax unified
 2167              		.thumb
 2168              		.thumb_func
 2169              		.fpu softvfp
 2170              		.type	HAL_UART_RxCpltCallback, %function
 2171              	HAL_UART_RxCpltCallback:
 2172              	.LFB131:
 2173              		.cfi_startproc
 2174              		@ args = 0, pretend = 0, frame = 0
 2175              		@ frame_needed = 0, uses_anonymous_args = 0
 2176              		@ link register save eliminated.
 2177 0838 7047     		bx	lr	@
 2178              		.cfi_endproc
 2179              	.LFE131:
 2180              		.size	HAL_UART_RxCpltCallback, .-HAL_UART_RxCpltCallback
 2181              		.align	1
 2182              		.syntax unified
 2183              		.thumb
 2184              		.thumb_func
 2185              		.fpu softvfp
ARM GAS  /tmp/ccPoddoo.s 			page 103


 2186              		.type	UART_DMAReceiveCplt, %function
 2187              	UART_DMAReceiveCplt:
 2188              	.LFB105:
2597:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2189              		.loc 1 2597 0
 2190              		.cfi_startproc
 2191              		@ args = 0, pretend = 0, frame = 0
 2192              		@ frame_needed = 0, uses_anonymous_args = 0
 2193              	.LVL170:
2597:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2194              		.loc 1 2597 0
 2195 083a 08B5     		push	{r3, lr}	@
 2196              	.LCFI22:
 2197              		.cfi_def_cfa_offset 8
 2198              		.cfi_offset 3, -8
 2199              		.cfi_offset 14, -4
2600:src/stm32f1xx_hal_uart.c ****   {
 2200              		.loc 1 2600 0
 2201 083c 0368     		ldr	r3, [r0]	@ _5, hdma_3(D)->Instance
2598:src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
 2202              		.loc 1 2598 0
 2203 083e 426A     		ldr	r2, [r0, #36]	@ huart, hdma_3(D)->Parent
 2204              	.LVL171:
2600:src/stm32f1xx_hal_uart.c ****   {
 2205              		.loc 1 2600 0
 2206 0840 1B68     		ldr	r3, [r3]	@ _6, _5->CCR
 2207 0842 13F02003 		ands	r3, r3, #32	@ tmp122, _6,
 2208 0846 10D1     		bne	.L183	@,
2602:src/stm32f1xx_hal_uart.c **** 
 2209              		.loc 1 2602 0
 2210 0848 D385     		strh	r3, [r2, #46]	@ movhi	@ tmp122, huart_4->RxXferCount
2605:src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2211              		.loc 1 2605 0
 2212 084a 1368     		ldr	r3, [r2]	@ _9, huart_4->Instance
 2213 084c D968     		ldr	r1, [r3, #12]	@ _10, _9->CR1
 2214 084e 21F48071 		bic	r1, r1, #256	@ _11, _10,
 2215 0852 D960     		str	r1, [r3, #12]	@ _11, _9->CR1
2606:src/stm32f1xx_hal_uart.c **** 
 2216              		.loc 1 2606 0
 2217 0854 5969     		ldr	r1, [r3, #20]	@ _13, _9->CR3
 2218 0856 21F00101 		bic	r1, r1, #1	@ _14, _13,
 2219 085a 5961     		str	r1, [r3, #20]	@ _14, _9->CR3
2610:src/stm32f1xx_hal_uart.c **** 
 2220              		.loc 1 2610 0
 2221 085c 5969     		ldr	r1, [r3, #20]	@ _16, _9->CR3
 2222 085e 21F04001 		bic	r1, r1, #64	@ _17, _16,
 2223 0862 5961     		str	r1, [r3, #20]	@ _17, _9->CR3
2613:src/stm32f1xx_hal_uart.c ****   }
 2224              		.loc 1 2613 0
 2225 0864 2023     		movs	r3, #32	@ tmp125,
 2226 0866 82F83A30 		strb	r3, [r2, #58]	@ tmp125, huart_4->RxState
 2227              	.L183:
2620:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2228              		.loc 1 2620 0
 2229 086a 1046     		mov	r0, r2	@, huart
 2230              	.LVL172:
 2231 086c FFF7FEFF 		bl	HAL_UART_RxCpltCallback	@
ARM GAS  /tmp/ccPoddoo.s 			page 104


 2232              	.LVL173:
 2233 0870 08BD     		pop	{r3, pc}	@
 2234              		.cfi_endproc
 2235              	.LFE105:
 2236              		.size	UART_DMAReceiveCplt, .-UART_DMAReceiveCplt
 2237              		.align	1
 2238              		.syntax unified
 2239              		.thumb
 2240              		.thumb_func
 2241              		.fpu softvfp
 2242              		.type	UART_Receive_IT, %function
 2243              	UART_Receive_IT:
 2244              	.LFB118:
2993:src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
 2245              		.loc 1 2993 0
 2246              		.cfi_startproc
 2247              		@ args = 0, pretend = 0, frame = 0
 2248              		@ frame_needed = 0, uses_anonymous_args = 0
 2249              	.LVL174:
2997:src/stm32f1xx_hal_uart.c ****   {
 2250              		.loc 1 2997 0
 2251 0872 90F83A30 		ldrb	r3, [r0, #58]	@ zero_extendqisi2	@ huart_3(D)->RxState, huart_3(D)->RxState
2993:src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
 2252              		.loc 1 2993 0
 2253 0876 10B5     		push	{r4, lr}	@
 2254              	.LCFI23:
 2255              		.cfi_def_cfa_offset 8
 2256              		.cfi_offset 4, -8
 2257              		.cfi_offset 14, -4
2997:src/stm32f1xx_hal_uart.c ****   {
 2258              		.loc 1 2997 0
 2259 0878 222B     		cmp	r3, #34	@ huart_3(D)->RxState,
 2260 087a 36D1     		bne	.L190	@,
 2261              	.LVL175:
 2262              	.LBB15:
 2263              	.LBB16:
2999:src/stm32f1xx_hal_uart.c ****     {
 2264              		.loc 1 2999 0
 2265 087c 8368     		ldr	r3, [r0, #8]	@ huart_3(D)->Init.WordLength, huart_3(D)->Init.WordLength
 2266 087e 0169     		ldr	r1, [r0, #16]	@ huart_3(D)->Init.Parity, huart_3(D)->Init.Parity
 2267 0880 B3F5805F 		cmp	r3, #4096	@ huart_3(D)->Init.WordLength,
 2268 0884 0268     		ldr	r2, [r0]	@ _29, huart_3(D)->Instance
 2269 0886 836A     		ldr	r3, [r0, #40]	@ tmp, huart_3(D)->pRxBuffPtr
 2270 0888 23D1     		bne	.L186	@,
 2271              	.LVL176:
3004:src/stm32f1xx_hal_uart.c ****         huart->pRxBuffPtr += 2U;
 2272              		.loc 1 3004 0
 2273 088a 5268     		ldr	r2, [r2, #4]	@ _12,
3002:src/stm32f1xx_hal_uart.c ****       {
 2274              		.loc 1 3002 0
 2275 088c E9B9     		cbnz	r1, .L187	@ huart_3(D)->Init.Parity,
3004:src/stm32f1xx_hal_uart.c ****         huart->pRxBuffPtr += 2U;
 2276              		.loc 1 3004 0
 2277 088e C2F30802 		ubfx	r2, r2, #0, #9	@ tmp153, _12,,
 2278 0892 23F8022B 		strh	r2, [r3], #2	@ movhi	@ tmp153, *tmp_9
 2279              	.LVL177:
 2280              	.L192:
ARM GAS  /tmp/ccPoddoo.s 			page 105


3010:src/stm32f1xx_hal_uart.c ****       }
 2281              		.loc 1 3010 0
 2282 0896 8362     		str	r3, [r0, #40]	@ tmp161, huart_3(D)->pRxBuffPtr
 2283              	.LVL178:
 2284              	.L188:
3025:src/stm32f1xx_hal_uart.c ****     {
 2285              		.loc 1 3025 0
 2286 0898 C48D     		ldrh	r4, [r0, #46]	@, huart_3(D)->RxXferCount
 2287 089a 013C     		subs	r4, r4, #1	@ tmp171, huart_3(D)->RxXferCount,
 2288 089c A4B2     		uxth	r4, r4	@ _34, tmp171
 2289 089e C485     		strh	r4, [r0, #46]	@ movhi	@ _34, huart_3(D)->RxXferCount
 2290 08a0 8CB9     		cbnz	r4, .L191	@ _34,
3028:src/stm32f1xx_hal_uart.c **** 
 2291              		.loc 1 3028 0
 2292 08a2 0368     		ldr	r3, [r0]	@ _35, huart_3(D)->Instance
 2293 08a4 DA68     		ldr	r2, [r3, #12]	@ _36, _35->CR1
 2294 08a6 22F02002 		bic	r2, r2, #32	@ _37, _36,
 2295 08aa DA60     		str	r2, [r3, #12]	@ _37, _35->CR1
3031:src/stm32f1xx_hal_uart.c **** 
 2296              		.loc 1 3031 0
 2297 08ac DA68     		ldr	r2, [r3, #12]	@ _38, _35->CR1
 2298 08ae 22F48072 		bic	r2, r2, #256	@ _39, _38,
 2299 08b2 DA60     		str	r2, [r3, #12]	@ _39, _35->CR1
3034:src/stm32f1xx_hal_uart.c **** 
 2300              		.loc 1 3034 0
 2301 08b4 5A69     		ldr	r2, [r3, #20]	@ _40, _35->CR3
 2302 08b6 22F00102 		bic	r2, r2, #1	@ _41, _40,
 2303 08ba 5A61     		str	r2, [r3, #20]	@ _41, _35->CR3
3037:src/stm32f1xx_hal_uart.c **** 
 2304              		.loc 1 3037 0
 2305 08bc 2023     		movs	r3, #32	@ tmp173,
 2306 08be 80F83A30 		strb	r3, [r0, #58]	@ tmp173, huart_3(D)->RxState
3044:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2307              		.loc 1 3044 0
 2308 08c2 FFF7FEFF 		bl	HAL_UART_RxCpltCallback	@
 2309              	.LVL179:
 2310              	.L191:
3025:src/stm32f1xx_hal_uart.c ****     {
 2311              		.loc 1 3025 0
 2312 08c6 0020     		movs	r0, #0	@ <retval>,
 2313              	.LBE16:
 2314              	.LBE15:
3055:src/stm32f1xx_hal_uart.c **** 
 2315              		.loc 1 3055 0
 2316 08c8 10BD     		pop	{r4, pc}	@
 2317              	.LVL180:
 2318              	.L187:
 2319              	.LBB18:
 2320              	.LBB17:
3009:src/stm32f1xx_hal_uart.c ****         huart->pRxBuffPtr += 1U;
 2321              		.loc 1 3009 0
 2322 08ca D2B2     		uxtb	r2, r2	@ _17, _17
 2323 08cc 23F8012B 		strh	r2, [r3], #1	@ movhi	@ _17, *tmp_9
 2324              	.LVL181:
 2325 08d0 E1E7     		b	.L192	@
 2326              	.LVL182:
 2327              	.L186:
ARM GAS  /tmp/ccPoddoo.s 			page 106


3015:src/stm32f1xx_hal_uart.c ****       {
 2328              		.loc 1 3015 0
 2329 08d2 21B9     		cbnz	r1, .L189	@ huart_3(D)->Init.Parity,
3017:src/stm32f1xx_hal_uart.c ****       }
 2330              		.loc 1 3017 0
 2331 08d4 591C     		adds	r1, r3, #1	@ tmp163, tmp,
 2332 08d6 5268     		ldr	r2, [r2, #4]	@ _25,
 2333 08d8 8162     		str	r1, [r0, #40]	@ tmp163, huart_3(D)->pRxBuffPtr
 2334              	.L193:
3021:src/stm32f1xx_hal_uart.c ****       }
 2335              		.loc 1 3021 0
 2336 08da 1A70     		strb	r2, [r3]	@ tmp167,* tmp
 2337 08dc DCE7     		b	.L188	@
 2338              	.L189:
 2339 08de 5268     		ldr	r2, [r2, #4]	@ _30,
 2340 08e0 591C     		adds	r1, r3, #1	@ tmp165, tmp,
 2341 08e2 8162     		str	r1, [r0, #40]	@ tmp165, huart_3(D)->pRxBuffPtr
 2342 08e4 02F07F02 		and	r2, r2, #127	@ tmp167, _30,
 2343 08e8 F7E7     		b	.L193	@
 2344              	.LVL183:
 2345              	.L190:
 2346              	.LBE17:
 2347              	.LBE18:
3053:src/stm32f1xx_hal_uart.c ****   }
 2348              		.loc 1 3053 0
 2349 08ea 0220     		movs	r0, #2	@ <retval>,
 2350              	.LVL184:
 2351 08ec 10BD     		pop	{r4, pc}	@
 2352              		.cfi_endproc
 2353              	.LFE118:
 2354              		.size	UART_Receive_IT, .-UART_Receive_IT
 2355              		.align	1
 2356              		.weak	HAL_UART_RxHalfCpltCallback
 2357              		.syntax unified
 2358              		.thumb
 2359              		.thumb_func
 2360              		.fpu softvfp
 2361              		.type	HAL_UART_RxHalfCpltCallback, %function
 2362              	HAL_UART_RxHalfCpltCallback:
 2363              	.LFB129:
 2364              		.cfi_startproc
 2365              		@ args = 0, pretend = 0, frame = 0
 2366              		@ frame_needed = 0, uses_anonymous_args = 0
 2367              		@ link register save eliminated.
 2368 08ee 7047     		bx	lr	@
 2369              		.cfi_endproc
 2370              	.LFE129:
 2371              		.size	HAL_UART_RxHalfCpltCallback, .-HAL_UART_RxHalfCpltCallback
 2372              		.align	1
 2373              		.syntax unified
 2374              		.thumb
 2375              		.thumb_func
 2376              		.fpu softvfp
 2377              		.type	UART_DMARxHalfCplt, %function
 2378              	UART_DMARxHalfCplt:
 2379              	.LFB106:
2631:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
ARM GAS  /tmp/ccPoddoo.s 			page 107


 2380              		.loc 1 2631 0
 2381              		.cfi_startproc
 2382              		@ args = 0, pretend = 0, frame = 0
 2383              		@ frame_needed = 0, uses_anonymous_args = 0
 2384              	.LVL185:
2631:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2385              		.loc 1 2631 0
 2386 08f0 08B5     		push	{r3, lr}	@
 2387              	.LCFI24:
 2388              		.cfi_def_cfa_offset 8
 2389              		.cfi_offset 3, -8
 2390              		.cfi_offset 14, -4
2639:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2391              		.loc 1 2639 0
 2392 08f2 406A     		ldr	r0, [r0, #36]	@, hdma_2(D)->Parent
 2393              	.LVL186:
 2394 08f4 FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback	@
 2395              	.LVL187:
 2396 08f8 08BD     		pop	{r3, pc}	@
 2397              		.cfi_endproc
 2398              	.LFE106:
 2399              		.size	UART_DMARxHalfCplt, .-UART_DMARxHalfCplt
 2400              		.align	1
 2401              		.weak	HAL_UART_ErrorCallback
 2402              		.syntax unified
 2403              		.thumb
 2404              		.thumb_func
 2405              		.fpu softvfp
 2406              		.type	HAL_UART_ErrorCallback, %function
 2407              	HAL_UART_ErrorCallback:
 2408              	.LFB127:
 2409              		.cfi_startproc
 2410              		@ args = 0, pretend = 0, frame = 0
 2411              		@ frame_needed = 0, uses_anonymous_args = 0
 2412              		@ link register save eliminated.
 2413 08fa 7047     		bx	lr	@
 2414              		.cfi_endproc
 2415              	.LFE127:
 2416              		.size	HAL_UART_ErrorCallback, .-HAL_UART_ErrorCallback
 2417              		.align	1
 2418              		.syntax unified
 2419              		.thumb
 2420              		.thumb_func
 2421              		.fpu softvfp
 2422              		.type	UART_DMAError, %function
 2423              	UART_DMAError:
 2424              	.LFB107:
2650:src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 2425              		.loc 1 2650 0
 2426              		.cfi_startproc
 2427              		@ args = 0, pretend = 0, frame = 0
 2428              		@ frame_needed = 0, uses_anonymous_args = 0
 2429              	.LVL188:
2652:src/stm32f1xx_hal_uart.c **** 
 2430              		.loc 1 2652 0
 2431 08fc 416A     		ldr	r1, [r0, #36]	@ huart, hdma_4(D)->Parent
 2432              	.LVL189:
ARM GAS  /tmp/ccPoddoo.s 			page 108


2650:src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 2433              		.loc 1 2650 0
 2434 08fe 08B5     		push	{r3, lr}	@
 2435              	.LCFI25:
 2436              		.cfi_def_cfa_offset 8
 2437              		.cfi_offset 3, -8
 2438              		.cfi_offset 14, -4
2655:src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 2439              		.loc 1 2655 0
 2440 0900 0B68     		ldr	r3, [r1]	@ _6, huart_5->Instance
 2441 0902 5A69     		ldr	r2, [r3, #20]	@ _7, _6->CR3
 2442              	.LVL190:
2656:src/stm32f1xx_hal_uart.c ****   {
 2443              		.loc 1 2656 0
 2444 0904 91F83900 		ldrb	r0, [r1, #57]	@ zero_extendqisi2	@ huart_5->gState, huart_5->gState
 2445              	.LVL191:
 2446 0908 2128     		cmp	r0, #33	@ huart_5->gState,
 2447 090a 0AD1     		bne	.L198	@,
2656:src/stm32f1xx_hal_uart.c ****   {
 2448              		.loc 1 2656 0 is_stmt 0 discriminator 1
 2449 090c 1206     		lsls	r2, r2, #24	@, _7,
 2450              	.LVL192:
 2451 090e 08D5     		bpl	.L198	@,
2658:src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 2452              		.loc 1 2658 0 is_stmt 1
 2453 0910 0022     		movs	r2, #0	@ tmp128,
 2454 0912 CA84     		strh	r2, [r1, #38]	@ movhi	@ tmp128, huart_5->TxXferCount
 2455              	.LVL193:
 2456              	.LBB21:
 2457              	.LBB22:
2725:src/stm32f1xx_hal_uart.c **** 
 2458              		.loc 1 2725 0
 2459 0914 DA68     		ldr	r2, [r3, #12]	@ _23, _6->CR1
 2460 0916 22F0C002 		bic	r2, r2, #192	@ _24, _23,
 2461 091a DA60     		str	r2, [r3, #12]	@ _24, _6->CR1
2728:src/stm32f1xx_hal_uart.c **** }
 2462              		.loc 1 2728 0
 2463 091c 2022     		movs	r2, #32	@ tmp129,
 2464 091e 81F83920 		strb	r2, [r1, #57]	@ tmp129, huart_5->gState
 2465              	.LVL194:
 2466              	.L198:
 2467              	.LBE22:
 2468              	.LBE21:
2663:src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 2469              		.loc 1 2663 0
 2470 0922 5B69     		ldr	r3, [r3, #20]	@ _13, _6->CR3
 2471              	.LVL195:
2664:src/stm32f1xx_hal_uart.c ****   {
 2472              		.loc 1 2664 0
 2473 0924 91F83A20 		ldrb	r2, [r1, #58]	@ zero_extendqisi2	@ huart_5->RxState, huart_5->RxState
 2474 0928 222A     		cmp	r2, #34	@ huart_5->RxState,
 2475 092a 06D1     		bne	.L199	@,
2664:src/stm32f1xx_hal_uart.c ****   {
 2476              		.loc 1 2664 0 is_stmt 0 discriminator 1
 2477 092c 5B06     		lsls	r3, r3, #25	@, _13,
 2478              	.LVL196:
 2479 092e 04D5     		bpl	.L199	@,
ARM GAS  /tmp/ccPoddoo.s 			page 109


2666:src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 2480              		.loc 1 2666 0 is_stmt 1
 2481 0930 0023     		movs	r3, #0	@ tmp136,
2667:src/stm32f1xx_hal_uart.c ****   }
 2482              		.loc 1 2667 0
 2483 0932 0846     		mov	r0, r1	@, huart
2666:src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 2484              		.loc 1 2666 0
 2485 0934 CB85     		strh	r3, [r1, #46]	@ movhi	@ tmp136, huart_5->RxXferCount
2667:src/stm32f1xx_hal_uart.c ****   }
 2486              		.loc 1 2667 0
 2487 0936 FFF763FB 		bl	UART_EndRxTransfer	@
 2488              	.LVL197:
 2489              	.L199:
2670:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 2490              		.loc 1 2670 0
 2491 093a CB6B     		ldr	r3, [r1, #60]	@ _18, huart_5->ErrorCode
2676:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2492              		.loc 1 2676 0
 2493 093c 0846     		mov	r0, r1	@, huart
2670:src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 2494              		.loc 1 2670 0
 2495 093e 43F01003 		orr	r3, r3, #16	@ _19, _18,
 2496 0942 CB63     		str	r3, [r1, #60]	@ _19, huart_5->ErrorCode
2676:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2497              		.loc 1 2676 0
 2498 0944 FFF7FEFF 		bl	HAL_UART_ErrorCallback	@
 2499              	.LVL198:
 2500 0948 08BD     		pop	{r3, pc}	@
 2501              		.cfi_endproc
 2502              	.LFE107:
 2503              		.size	UART_DMAError, .-UART_DMAError
 2504              		.align	1
 2505              		.global	HAL_UART_IRQHandler
 2506              		.syntax unified
 2507              		.thumb
 2508              		.thumb_func
 2509              		.fpu softvfp
 2510              		.type	HAL_UART_IRQHandler, %function
 2511              	HAL_UART_IRQHandler:
 2512              	.LFB87:
2022:src/stm32f1xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 2513              		.loc 1 2022 0
 2514              		.cfi_startproc
 2515              		@ args = 0, pretend = 0, frame = 0
 2516              		@ frame_needed = 0, uses_anonymous_args = 0
 2517              	.LVL199:
2023:src/stm32f1xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 2518              		.loc 1 2023 0
 2519 094a 0368     		ldr	r3, [r0]	@ _9, huart_8(D)->Instance
2022:src/stm32f1xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 2520              		.loc 1 2022 0
 2521 094c 70B5     		push	{r4, r5, r6, lr}	@
 2522              	.LCFI26:
 2523              		.cfi_def_cfa_offset 16
 2524              		.cfi_offset 4, -16
 2525              		.cfi_offset 5, -12
ARM GAS  /tmp/ccPoddoo.s 			page 110


 2526              		.cfi_offset 6, -8
 2527              		.cfi_offset 14, -4
2023:src/stm32f1xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 2528              		.loc 1 2023 0
 2529 094e 1A68     		ldr	r2, [r3]	@ isrflags, _9->SR
 2530              	.LVL200:
2022:src/stm32f1xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 2531              		.loc 1 2022 0
 2532 0950 0446     		mov	r4, r0	@ huart, huart
2031:src/stm32f1xx_hal_uart.c ****   {
 2533              		.loc 1 2031 0
 2534 0952 1607     		lsls	r6, r2, #28	@, isrflags,
2024:src/stm32f1xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 2535              		.loc 1 2024 0
 2536 0954 D968     		ldr	r1, [r3, #12]	@ cr1its, _9->CR1
 2537              	.LVL201:
2025:src/stm32f1xx_hal_uart.c ****   uint32_t errorflags = 0x00U;
 2538              		.loc 1 2025 0
 2539 0956 5D69     		ldr	r5, [r3, #20]	@ cr3its, _9->CR3
 2540              	.LVL202:
2031:src/stm32f1xx_hal_uart.c ****   {
 2541              		.loc 1 2031 0
 2542 0958 06D1     		bne	.L207	@,
2034:src/stm32f1xx_hal_uart.c ****     {
 2543              		.loc 1 2034 0
 2544 095a 9606     		lsls	r6, r2, #26	@, isrflags,
 2545 095c 59D5     		bpl	.L208	@,
2034:src/stm32f1xx_hal_uart.c ****     {
 2546              		.loc 1 2034 0 is_stmt 0 discriminator 1
 2547 095e 8D06     		lsls	r5, r1, #26	@, cr1its,
 2548              	.LVL203:
 2549 0960 57D5     		bpl	.L208	@,
2159:src/stm32f1xx_hal_uart.c **** 
 2550              		.loc 1 2159 0 is_stmt 1
 2551 0962 BDE87040 		pop	{r4, r5, r6, lr}	@
 2552              	.LCFI27:
 2553              		.cfi_remember_state
 2554              		.cfi_restore 14
 2555              		.cfi_restore 6
 2556              		.cfi_restore 5
 2557              		.cfi_restore 4
 2558              		.cfi_def_cfa_offset 0
2036:src/stm32f1xx_hal_uart.c ****       return;
 2559              		.loc 1 2036 0
 2560 0966 84E7     		b	UART_Receive_IT	@
 2561              	.LVL204:
 2562              	.L207:
 2563              	.LCFI28:
 2564              		.cfi_restore_state
2042:src/stm32f1xx_hal_uart.c ****   {
 2565              		.loc 1 2042 0 discriminator 1
 2566 0968 15F00105 		ands	r5, r5, #1	@ _17, cr3its,
 2567              	.LVL205:
 2568 096c 02D1     		bne	.L209	@,
2042:src/stm32f1xx_hal_uart.c ****   {
 2569              		.loc 1 2042 0 is_stmt 0 discriminator 2
 2570 096e 11F4907F 		tst	r1, #288	@ cr1its,
ARM GAS  /tmp/ccPoddoo.s 			page 111


 2571 0972 4ED0     		beq	.L208	@,
 2572              	.L209:
2045:src/stm32f1xx_hal_uart.c ****     {
 2573              		.loc 1 2045 0 is_stmt 1
 2574 0974 D307     		lsls	r3, r2, #31	@, isrflags,
 2575 0976 05D5     		bpl	.L210	@,
2045:src/stm32f1xx_hal_uart.c ****     {
 2576              		.loc 1 2045 0 is_stmt 0 discriminator 1
 2577 0978 CE05     		lsls	r6, r1, #23	@, cr1its,
2047:src/stm32f1xx_hal_uart.c ****     }
 2578              		.loc 1 2047 0 is_stmt 1 discriminator 1
 2579 097a 42BF     		ittt	mi
 2580 097c E36B     		ldrmi	r3, [r4, #60]	@ _21, huart_8(D)->ErrorCode
 2581 097e 43F00103 		orrmi	r3, r3, #1	@ _22, _21,
 2582 0982 E363     		strmi	r3, [r4, #60]	@ _22, huart_8(D)->ErrorCode
 2583              	.L210:
2051:src/stm32f1xx_hal_uart.c ****     {
 2584              		.loc 1 2051 0
 2585 0984 5007     		lsls	r0, r2, #29	@, isrflags,
 2586              	.LVL206:
 2587 0986 04D5     		bpl	.L211	@,
2051:src/stm32f1xx_hal_uart.c ****     {
 2588              		.loc 1 2051 0 is_stmt 0 discriminator 1
 2589 0988 1DB1     		cbz	r5, .L211	@ _17,
2053:src/stm32f1xx_hal_uart.c ****     }
 2590              		.loc 1 2053 0 is_stmt 1
 2591 098a E36B     		ldr	r3, [r4, #60]	@ _25, huart_8(D)->ErrorCode
 2592 098c 43F00203 		orr	r3, r3, #2	@ _26, _25,
 2593 0990 E363     		str	r3, [r4, #60]	@ _26, huart_8(D)->ErrorCode
 2594              	.L211:
2057:src/stm32f1xx_hal_uart.c ****     {
 2595              		.loc 1 2057 0
 2596 0992 9307     		lsls	r3, r2, #30	@, isrflags,
 2597 0994 04D5     		bpl	.L212	@,
2057:src/stm32f1xx_hal_uart.c ****     {
 2598              		.loc 1 2057 0 is_stmt 0 discriminator 1
 2599 0996 1DB1     		cbz	r5, .L212	@ _17,
2059:src/stm32f1xx_hal_uart.c ****     }
 2600              		.loc 1 2059 0 is_stmt 1
 2601 0998 E36B     		ldr	r3, [r4, #60]	@ _29, huart_8(D)->ErrorCode
 2602 099a 43F00403 		orr	r3, r3, #4	@ _30, _29,
 2603 099e E363     		str	r3, [r4, #60]	@ _30, huart_8(D)->ErrorCode
 2604              	.L212:
2063:src/stm32f1xx_hal_uart.c ****     {
 2605              		.loc 1 2063 0
 2606 09a0 1607     		lsls	r6, r2, #28	@, isrflags,
 2607 09a2 04D5     		bpl	.L213	@,
2063:src/stm32f1xx_hal_uart.c ****     {
 2608              		.loc 1 2063 0 is_stmt 0 discriminator 1
 2609 09a4 1DB1     		cbz	r5, .L213	@ _17,
2065:src/stm32f1xx_hal_uart.c ****     }
 2610              		.loc 1 2065 0 is_stmt 1
 2611 09a6 E36B     		ldr	r3, [r4, #60]	@ _33, huart_8(D)->ErrorCode
 2612 09a8 43F00803 		orr	r3, r3, #8	@ _34, _33,
 2613 09ac E363     		str	r3, [r4, #60]	@ _34, huart_8(D)->ErrorCode
 2614              	.L213:
2069:src/stm32f1xx_hal_uart.c ****     {
ARM GAS  /tmp/ccPoddoo.s 			page 112


 2615              		.loc 1 2069 0
 2616 09ae E36B     		ldr	r3, [r4, #60]	@ _36, huart_8(D)->ErrorCode
 2617 09b0 002B     		cmp	r3, #0	@ _36
 2618 09b2 66D0     		beq	.L206	@
2072:src/stm32f1xx_hal_uart.c ****       {
 2619              		.loc 1 2072 0
 2620 09b4 9506     		lsls	r5, r2, #26	@, isrflags,
 2621 09b6 04D5     		bpl	.L216	@,
2072:src/stm32f1xx_hal_uart.c ****       {
 2622              		.loc 1 2072 0 is_stmt 0 discriminator 1
 2623 09b8 8806     		lsls	r0, r1, #26	@, cr1its,
 2624 09ba 02D5     		bpl	.L216	@,
2074:src/stm32f1xx_hal_uart.c ****       }
 2625              		.loc 1 2074 0 is_stmt 1
 2626 09bc 2046     		mov	r0, r4	@, huart
 2627 09be FFF758FF 		bl	UART_Receive_IT	@
 2628              	.LVL207:
 2629              	.L216:
2079:src/stm32f1xx_hal_uart.c ****       if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 2630              		.loc 1 2079 0
 2631 09c2 2368     		ldr	r3, [r4]	@ _40, huart_8(D)->Instance
2085:src/stm32f1xx_hal_uart.c **** 
 2632              		.loc 1 2085 0
 2633 09c4 2046     		mov	r0, r4	@, huart
2079:src/stm32f1xx_hal_uart.c ****       if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 2634              		.loc 1 2079 0
 2635 09c6 5D69     		ldr	r5, [r3, #20]	@ _41, _40->CR3
 2636              	.LVL208:
2080:src/stm32f1xx_hal_uart.c ****       {
 2637              		.loc 1 2080 0
 2638 09c8 E26B     		ldr	r2, [r4, #60]	@ _43, huart_8(D)->ErrorCode
 2639 09ca 1107     		lsls	r1, r2, #28	@, _43,
 2640 09cc 02D4     		bmi	.L217	@,
 2641              	.LVL209:
2080:src/stm32f1xx_hal_uart.c ****       {
 2642              		.loc 1 2080 0 is_stmt 0 discriminator 1
 2643 09ce 15F04005 		ands	r5, r5, #64	@ tmp188, _41,
 2644              	.LVL210:
 2645 09d2 1AD0     		beq	.L218	@,
 2646              	.LVL211:
 2647              	.L217:
2085:src/stm32f1xx_hal_uart.c **** 
 2648              		.loc 1 2085 0 is_stmt 1
 2649 09d4 FFF714FB 		bl	UART_EndRxTransfer	@
 2650              	.LVL212:
2088:src/stm32f1xx_hal_uart.c ****         {
 2651              		.loc 1 2088 0
 2652 09d8 2368     		ldr	r3, [r4]	@ _48, huart_8(D)->Instance
 2653 09da 5A69     		ldr	r2, [r3, #20]	@ _49, _48->CR3
 2654 09dc 5206     		lsls	r2, r2, #25	@, _49,
 2655 09de 10D5     		bpl	.L219	@,
2090:src/stm32f1xx_hal_uart.c **** 
 2656              		.loc 1 2090 0
 2657 09e0 5A69     		ldr	r2, [r3, #20]	@ _52, _48->CR3
2093:src/stm32f1xx_hal_uart.c ****           {
 2658              		.loc 1 2093 0
 2659 09e2 606B     		ldr	r0, [r4, #52]	@ _55, huart_8(D)->hdmarx
ARM GAS  /tmp/ccPoddoo.s 			page 113


 2660              	.LVL213:
2090:src/stm32f1xx_hal_uart.c **** 
 2661              		.loc 1 2090 0
 2662 09e4 22F04002 		bic	r2, r2, #64	@ _53, _52,
 2663 09e8 5A61     		str	r2, [r3, #20]	@ _53, _48->CR3
2093:src/stm32f1xx_hal_uart.c ****           {
 2664              		.loc 1 2093 0
 2665 09ea 50B1     		cbz	r0, .L219	@ _55,
2097:src/stm32f1xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 2666              		.loc 1 2097 0
 2667 09ec 254B     		ldr	r3, .L286	@ tmp190,
 2668 09ee 4363     		str	r3, [r0, #52]	@ tmp190, _55->XferAbortCallback
2098:src/stm32f1xx_hal_uart.c ****             {
 2669              		.loc 1 2098 0
 2670 09f0 FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 2671              	.LVL214:
 2672 09f4 0028     		cmp	r0, #0	@
 2673 09f6 44D0     		beq	.L206	@
2101:src/stm32f1xx_hal_uart.c ****             }
 2674              		.loc 1 2101 0
 2675 09f8 606B     		ldr	r0, [r4, #52]	@ _59, huart_8(D)->hdmarx
2159:src/stm32f1xx_hal_uart.c **** 
 2676              		.loc 1 2159 0
 2677 09fa BDE87040 		pop	{r4, r5, r6, lr}	@
 2678              	.LCFI29:
 2679              		.cfi_remember_state
 2680              		.cfi_restore 14
 2681              		.cfi_restore 6
 2682              		.cfi_restore 5
 2683              		.cfi_restore 4
 2684              		.cfi_def_cfa_offset 0
 2685              	.LVL215:
2101:src/stm32f1xx_hal_uart.c ****             }
 2686              		.loc 1 2101 0
 2687 09fe 436B     		ldr	r3, [r0, #52]	@ _59->XferAbortCallback, _59->XferAbortCallback
 2688 0a00 1847     		bx	r3	@ indirect register sibling call	@ _59->XferAbortCallback
 2689              	.LVL216:
 2690              	.L219:
 2691              	.LCFI30:
 2692              		.cfi_restore_state
2112:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2693              		.loc 1 2112 0
 2694 0a02 2046     		mov	r0, r4	@, huart
 2695 0a04 FFF7FEFF 		bl	HAL_UART_ErrorCallback	@
 2696              	.LVL217:
 2697 0a08 70BD     		pop	{r4, r5, r6, pc}	@
 2698              	.LVL218:
 2699              	.L218:
2137:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2700              		.loc 1 2137 0
 2701 0a0a FFF7FEFF 		bl	HAL_UART_ErrorCallback	@
 2702              	.LVL219:
2140:src/stm32f1xx_hal_uart.c ****       }
 2703              		.loc 1 2140 0
 2704 0a0e E563     		str	r5, [r4, #60]	@ tmp188, huart_8(D)->ErrorCode
 2705 0a10 70BD     		pop	{r4, r5, r6, pc}	@
 2706              	.LVL220:
ARM GAS  /tmp/ccPoddoo.s 			page 114


 2707              	.L208:
2147:src/stm32f1xx_hal_uart.c ****   {
 2708              		.loc 1 2147 0
 2709 0a12 1606     		lsls	r6, r2, #24	@, isrflags,
 2710 0a14 27D5     		bpl	.L221	@,
2147:src/stm32f1xx_hal_uart.c ****   {
 2711              		.loc 1 2147 0 is_stmt 0 discriminator 1
 2712 0a16 0D06     		lsls	r5, r1, #24	@, cr1its,
 2713 0a18 25D5     		bpl	.L221	@,
 2714              	.LVL221:
 2715              	.LBB27:
 2716              	.LBB28:
2925:src/stm32f1xx_hal_uart.c ****   {
 2717              		.loc 1 2925 0 is_stmt 1
 2718 0a1a 94F83920 		ldrb	r2, [r4, #57]	@ zero_extendqisi2	@ huart_8(D)->gState, huart_8(D)->gState
 2719              	.LVL222:
 2720 0a1e 212A     		cmp	r2, #33	@ huart_8(D)->gState,
 2721 0a20 2FD1     		bne	.L206	@,
2927:src/stm32f1xx_hal_uart.c ****     {
 2722              		.loc 1 2927 0
 2723 0a22 A268     		ldr	r2, [r4, #8]	@ huart_8(D)->Init.WordLength, huart_8(D)->Init.WordLength
 2724 0a24 B2F5805F 		cmp	r2, #4096	@ huart_8(D)->Init.WordLength,
 2725 0a28 226A     		ldr	r2, [r4, #32]	@ _80, huart_8(D)->pTxBuffPtr
 2726 0a2a 17D1     		bne	.L222	@,
 2727              	.LVL223:
2930:src/stm32f1xx_hal_uart.c ****       if (huart->Init.Parity == UART_PARITY_NONE)
 2728              		.loc 1 2930 0
 2729 0a2c 1188     		ldrh	r1, [r2]	@, *tmp_71
 2730              	.LVL224:
 2731 0a2e C1F30801 		ubfx	r1, r1, #0, #9	@ _75, *tmp_71,,
 2732 0a32 5960     		str	r1, [r3, #4]	@ _75, _9->DR
2931:src/stm32f1xx_hal_uart.c ****       {
 2733              		.loc 1 2931 0
 2734 0a34 2169     		ldr	r1, [r4, #16]	@ huart_8(D)->Init.Parity, huart_8(D)->Init.Parity
 2735 0a36 79B9     		cbnz	r1, .L223	@ huart_8(D)->Init.Parity,
2933:src/stm32f1xx_hal_uart.c ****       }
 2736              		.loc 1 2933 0
 2737 0a38 0232     		adds	r2, r2, #2	@ tmp204, _80,
 2738              	.LVL225:
 2739              	.L285:
2937:src/stm32f1xx_hal_uart.c ****       }
 2740              		.loc 1 2937 0
 2741 0a3a 2262     		str	r2, [r4, #32]	@ tmp205, huart_8(D)->pTxBuffPtr
 2742              	.LVL226:
 2743              	.L224:
2945:src/stm32f1xx_hal_uart.c ****     {
 2744              		.loc 1 2945 0
 2745 0a3c E28C     		ldrh	r2, [r4, #38]	@, huart_8(D)->TxXferCount
 2746 0a3e 013A     		subs	r2, r2, #1	@ tmp209, huart_8(D)->TxXferCount,
 2747 0a40 92B2     		uxth	r2, r2	@ _85, tmp209
 2748 0a42 E284     		strh	r2, [r4, #38]	@ movhi	@ _85, huart_8(D)->TxXferCount
 2749 0a44 EAB9     		cbnz	r2, .L206	@ _85,
2948:src/stm32f1xx_hal_uart.c **** 
 2750              		.loc 1 2948 0
 2751 0a46 DA68     		ldr	r2, [r3, #12]	@ _87, _86->CR1
 2752 0a48 22F08002 		bic	r2, r2, #128	@ _88, _87,
 2753 0a4c DA60     		str	r2, [r3, #12]	@ _88, _86->CR1
ARM GAS  /tmp/ccPoddoo.s 			page 115


2951:src/stm32f1xx_hal_uart.c ****     }
 2754              		.loc 1 2951 0
 2755 0a4e DA68     		ldr	r2, [r3, #12]	@ _89, _86->CR1
 2756 0a50 42F04002 		orr	r2, r2, #64	@ _90, _89,
 2757 0a54 DA60     		str	r2, [r3, #12]	@ _90, _86->CR1
 2758 0a56 70BD     		pop	{r4, r5, r6, pc}	@
 2759              	.LVL227:
 2760              	.L223:
2937:src/stm32f1xx_hal_uart.c ****       }
 2761              		.loc 1 2937 0
 2762 0a58 0132     		adds	r2, r2, #1	@ tmp205, _80,
 2763              	.LVL228:
 2764 0a5a EEE7     		b	.L285	@
 2765              	.LVL229:
 2766              	.L222:
2942:src/stm32f1xx_hal_uart.c ****     }
 2767              		.loc 1 2942 0
 2768 0a5c 511C     		adds	r1, r2, #1	@ tmp206, _80,
 2769              	.LVL230:
 2770 0a5e 2162     		str	r1, [r4, #32]	@ tmp206, huart_8(D)->pTxBuffPtr
 2771 0a60 1278     		ldrb	r2, [r2]	@ zero_extendqisi2	@ _83, *_80
 2772 0a62 5A60     		str	r2, [r3, #4]	@ _83, _9->DR
 2773 0a64 EAE7     		b	.L224	@
 2774              	.LVL231:
 2775              	.L221:
 2776              	.LBE28:
 2777              	.LBE27:
2154:src/stm32f1xx_hal_uart.c ****   {
 2778              		.loc 1 2154 0
 2779 0a66 5006     		lsls	r0, r2, #25	@, isrflags,
 2780              	.LVL232:
 2781 0a68 0BD5     		bpl	.L206	@,
2154:src/stm32f1xx_hal_uart.c ****   {
 2782              		.loc 1 2154 0 is_stmt 0 discriminator 1
 2783 0a6a 4A06     		lsls	r2, r1, #25	@, cr1its,
 2784              	.LVL233:
 2785 0a6c 09D5     		bpl	.L206	@,
 2786              	.LVL234:
 2787              	.LBB29:
 2788              	.LBB30:
2970:src/stm32f1xx_hal_uart.c **** 
 2789              		.loc 1 2970 0 is_stmt 1
 2790 0a6e DA68     		ldr	r2, [r3, #12]	@ _93, _9->CR1
2980:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2791              		.loc 1 2980 0
 2792 0a70 2046     		mov	r0, r4	@, huart
2970:src/stm32f1xx_hal_uart.c **** 
 2793              		.loc 1 2970 0
 2794 0a72 22F04002 		bic	r2, r2, #64	@ _94, _93,
 2795 0a76 DA60     		str	r2, [r3, #12]	@ _94, _9->CR1
2973:src/stm32f1xx_hal_uart.c **** 
 2796              		.loc 1 2973 0
 2797 0a78 2023     		movs	r3, #32	@ tmp213,
 2798 0a7a 84F83930 		strb	r3, [r4, #57]	@ tmp213, huart_8(D)->gState
2980:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2799              		.loc 1 2980 0
 2800 0a7e FFF7FEFF 		bl	HAL_UART_TxCpltCallback	@
ARM GAS  /tmp/ccPoddoo.s 			page 116


 2801              	.LVL235:
 2802              	.L206:
 2803 0a82 70BD     		pop	{r4, r5, r6, pc}	@
 2804              	.LVL236:
 2805              	.L287:
 2806              		.align	2
 2807              	.L286:
 2808 0a84 00000000 		.word	UART_DMAAbortOnError
 2809              	.LBE30:
 2810              	.LBE29:
 2811              		.cfi_endproc
 2812              	.LFE87:
 2813              		.size	HAL_UART_IRQHandler, .-HAL_UART_IRQHandler
 2814              		.align	1
 2815              		.syntax unified
 2816              		.thumb
 2817              		.thumb_func
 2818              		.fpu softvfp
 2819              		.type	UART_DMAAbortOnError, %function
 2820              	UART_DMAAbortOnError:
 2821              	.LFB111:
2754:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2822              		.loc 1 2754 0
 2823              		.cfi_startproc
 2824              		@ args = 0, pretend = 0, frame = 0
 2825              		@ frame_needed = 0, uses_anonymous_args = 0
 2826              	.LVL237:
 2827 0a88 08B5     		push	{r3, lr}	@
 2828              	.LCFI31:
 2829              		.cfi_def_cfa_offset 8
 2830              		.cfi_offset 3, -8
 2831              		.cfi_offset 14, -4
2756:src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 2832              		.loc 1 2756 0
 2833 0a8a 0023     		movs	r3, #0	@ tmp113,
2755:src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 2834              		.loc 1 2755 0
 2835 0a8c 406A     		ldr	r0, [r0, #36]	@ huart, hdma_2(D)->Parent
 2836              	.LVL238:
2756:src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 2837              		.loc 1 2756 0
 2838 0a8e C385     		strh	r3, [r0, #46]	@ movhi	@ tmp113, huart_3->RxXferCount
2757:src/stm32f1xx_hal_uart.c **** 
 2839              		.loc 1 2757 0
 2840 0a90 C384     		strh	r3, [r0, #38]	@ movhi	@ tmp113, huart_3->TxXferCount
2764:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2841              		.loc 1 2764 0
 2842 0a92 FFF7FEFF 		bl	HAL_UART_ErrorCallback	@
 2843              	.LVL239:
 2844 0a96 08BD     		pop	{r3, pc}	@
 2845              		.cfi_endproc
 2846              	.LFE111:
 2847              		.size	UART_DMAAbortOnError, .-UART_DMAAbortOnError
 2848              		.align	1
 2849              		.weak	HAL_UART_AbortCpltCallback
 2850              		.syntax unified
 2851              		.thumb
ARM GAS  /tmp/ccPoddoo.s 			page 117


 2852              		.thumb_func
 2853              		.fpu softvfp
 2854              		.type	HAL_UART_AbortCpltCallback, %function
 2855              	HAL_UART_AbortCpltCallback:
 2856              	.LFB125:
 2857              		.cfi_startproc
 2858              		@ args = 0, pretend = 0, frame = 0
 2859              		@ frame_needed = 0, uses_anonymous_args = 0
 2860              		@ link register save eliminated.
 2861 0a98 7047     		bx	lr	@
 2862              		.cfi_endproc
 2863              	.LFE125:
 2864              		.size	HAL_UART_AbortCpltCallback, .-HAL_UART_AbortCpltCallback
 2865              		.align	1
 2866              		.global	HAL_UART_Abort_IT
 2867              		.syntax unified
 2868              		.thumb
 2869              		.thumb_func
 2870              		.fpu softvfp
 2871              		.type	HAL_UART_Abort_IT, %function
 2872              	HAL_UART_Abort_IT:
 2873              	.LFB84:
1747:src/stm32f1xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
 2874              		.loc 1 1747 0
 2875              		.cfi_startproc
 2876              		@ args = 0, pretend = 0, frame = 0
 2877              		@ frame_needed = 0, uses_anonymous_args = 0
 2878              	.LVL240:
1751:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2879              		.loc 1 1751 0
 2880 0a9a 0368     		ldr	r3, [r0]	@ _10, huart_9(D)->Instance
1747:src/stm32f1xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
 2881              		.loc 1 1747 0
 2882 0a9c 10B5     		push	{r4, lr}	@
 2883              	.LCFI32:
 2884              		.cfi_def_cfa_offset 8
 2885              		.cfi_offset 4, -8
 2886              		.cfi_offset 14, -4
1751:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2887              		.loc 1 1751 0
 2888 0a9e DA68     		ldr	r2, [r3, #12]	@ _11, _10->CR1
1747:src/stm32f1xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
 2889              		.loc 1 1747 0
 2890 0aa0 0446     		mov	r4, r0	@ huart, huart
1751:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2891              		.loc 1 1751 0
 2892 0aa2 22F4F072 		bic	r2, r2, #480	@ _12, _11,
 2893 0aa6 DA60     		str	r2, [r3, #12]	@ _12, _10->CR1
1752:src/stm32f1xx_hal_uart.c **** 
 2894              		.loc 1 1752 0
 2895 0aa8 5A69     		ldr	r2, [r3, #20]	@ _14, _10->CR3
1757:src/stm32f1xx_hal_uart.c ****   {
 2896              		.loc 1 1757 0
 2897 0aaa 006B     		ldr	r0, [r0, #48]	@ _17, huart_9(D)->hdmatx
 2898              	.LVL241:
1752:src/stm32f1xx_hal_uart.c **** 
 2899              		.loc 1 1752 0
ARM GAS  /tmp/ccPoddoo.s 			page 118


 2900 0aac 22F00102 		bic	r2, r2, #1	@ _15, _14,
 2901 0ab0 5A61     		str	r2, [r3, #20]	@ _15, _10->CR3
1757:src/stm32f1xx_hal_uart.c ****   {
 2902              		.loc 1 1757 0
 2903 0ab2 28B1     		cbz	r0, .L291	@ _17,
1761:src/stm32f1xx_hal_uart.c ****     {
 2904              		.loc 1 1761 0
 2905 0ab4 5A69     		ldr	r2, [r3, #20]	@ _18, _10->CR3
 2906 0ab6 12F08002 		ands	r2, r2, #128	@ tmp138, _18,
1763:src/stm32f1xx_hal_uart.c ****     }
 2907              		.loc 1 1763 0
 2908 0aba 18BF     		it	ne
 2909 0abc 1E4A     		ldrne	r2, .L320	@ tmp139,
1767:src/stm32f1xx_hal_uart.c ****     }
 2910              		.loc 1 1767 0
 2911 0abe 4263     		str	r2, [r0, #52]	@ tmp138, _17->XferAbortCallback
 2912              	.L291:
1771:src/stm32f1xx_hal_uart.c ****   {
 2913              		.loc 1 1771 0
 2914 0ac0 616B     		ldr	r1, [r4, #52]	@ _22, huart_9(D)->hdmarx
 2915 0ac2 29B1     		cbz	r1, .L293	@ _22,
1775:src/stm32f1xx_hal_uart.c ****     {
 2916              		.loc 1 1775 0
 2917 0ac4 5A69     		ldr	r2, [r3, #20]	@ _23, _10->CR3
 2918 0ac6 12F04002 		ands	r2, r2, #64	@ tmp141, _23,
1777:src/stm32f1xx_hal_uart.c ****     }
 2919              		.loc 1 1777 0
 2920 0aca 18BF     		it	ne
 2921 0acc 1B4A     		ldrne	r2, .L320+4	@ tmp142,
1781:src/stm32f1xx_hal_uart.c ****     }
 2922              		.loc 1 1781 0
 2923 0ace 4A63     		str	r2, [r1, #52]	@ tmp141, _22->XferAbortCallback
 2924              	.L293:
1786:src/stm32f1xx_hal_uart.c ****   {
 2925              		.loc 1 1786 0
 2926 0ad0 5A69     		ldr	r2, [r3, #20]	@ _27, _10->CR3
 2927 0ad2 1206     		lsls	r2, r2, #24	@, _27,
 2928 0ad4 1DD4     		bmi	.L295	@,
 2929              	.L319:
1748:src/stm32f1xx_hal_uart.c **** 
 2930              		.loc 1 1748 0
 2931 0ad6 0123     		movs	r3, #1	@ AbortCplt,
 2932              	.L296:
 2933              	.LVL242:
1810:src/stm32f1xx_hal_uart.c ****   {
 2934              		.loc 1 1810 0
 2935 0ad8 2268     		ldr	r2, [r4]	@ _36, huart_9(D)->Instance
 2936 0ada 5169     		ldr	r1, [r2, #20]	@ _37, _36->CR3
 2937 0adc 4906     		lsls	r1, r1, #25	@, _37,
 2938 0ade 27D5     		bpl	.L298	@,
1812:src/stm32f1xx_hal_uart.c **** 
 2939              		.loc 1 1812 0
 2940 0ae0 5169     		ldr	r1, [r2, #20]	@ _39, _36->CR3
1815:src/stm32f1xx_hal_uart.c ****     {
 2941              		.loc 1 1815 0
 2942 0ae2 606B     		ldr	r0, [r4, #52]	@ _42, huart_9(D)->hdmarx
1812:src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccPoddoo.s 			page 119


 2943              		.loc 1 1812 0
 2944 0ae4 21F04001 		bic	r1, r1, #64	@ _40, _39,
 2945 0ae8 5161     		str	r1, [r2, #20]	@ _40, _36->CR3
1815:src/stm32f1xx_hal_uart.c ****     {
 2946              		.loc 1 1815 0
 2947 0aea 08B3     		cbz	r0, .L298	@ _42,
1821:src/stm32f1xx_hal_uart.c ****       {
 2948              		.loc 1 1821 0
 2949 0aec FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 2950              	.LVL243:
 2951 0af0 00B3     		cbz	r0, .L300	@,
1823:src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x01U;
 2952              		.loc 1 1823 0
 2953 0af2 0022     		movs	r2, #0	@ tmp151,
 2954 0af4 636B     		ldr	r3, [r4, #52]	@ huart_9(D)->hdmarx, huart_9(D)->hdmarx
 2955 0af6 5A63     		str	r2, [r3, #52]	@ tmp151, _45->XferAbortCallback
 2956              	.LVL244:
 2957              	.L301:
1837:src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 2958              		.loc 1 1837 0
 2959 0af8 0023     		movs	r3, #0	@ tmp153,
 2960 0afa E384     		strh	r3, [r4, #38]	@ movhi	@ tmp153, huart_9(D)->TxXferCount
1838:src/stm32f1xx_hal_uart.c **** 
 2961              		.loc 1 1838 0
 2962 0afc E385     		strh	r3, [r4, #46]	@ movhi	@ tmp153, huart_9(D)->RxXferCount
1841:src/stm32f1xx_hal_uart.c **** 
 2963              		.loc 1 1841 0
 2964 0afe E363     		str	r3, [r4, #60]	@ tmp153, huart_9(D)->ErrorCode
1844:src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2965              		.loc 1 1844 0
 2966 0b00 2023     		movs	r3, #32	@ tmp157,
1853:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2967              		.loc 1 1853 0
 2968 0b02 2046     		mov	r0, r4	@, huart
1844:src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2969              		.loc 1 1844 0
 2970 0b04 84F83930 		strb	r3, [r4, #57]	@ tmp157, huart_9(D)->gState
1845:src/stm32f1xx_hal_uart.c **** 
 2971              		.loc 1 1845 0
 2972 0b08 84F83A30 		strb	r3, [r4, #58]	@ tmp157, huart_9(D)->RxState
1853:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2973              		.loc 1 1853 0
 2974 0b0c FFF7FEFF 		bl	HAL_UART_AbortCpltCallback	@
 2975              	.LVL245:
 2976 0b10 10E0     		b	.L300	@
 2977              	.LVL246:
 2978              	.L295:
1789:src/stm32f1xx_hal_uart.c **** 
 2979              		.loc 1 1789 0
 2980 0b12 5A69     		ldr	r2, [r3, #20]	@ _29, _10->CR3
 2981 0b14 22F08002 		bic	r2, r2, #128	@ _30, _29,
 2982 0b18 5A61     		str	r2, [r3, #20]	@ _30, _10->CR3
1792:src/stm32f1xx_hal_uart.c ****     {
 2983              		.loc 1 1792 0
 2984 0b1a 0028     		cmp	r0, #0	@ _17
 2985 0b1c DBD0     		beq	.L319	@
1798:src/stm32f1xx_hal_uart.c ****       {
ARM GAS  /tmp/ccPoddoo.s 			page 120


 2986              		.loc 1 1798 0
 2987 0b1e FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 2988              	.LVL247:
 2989 0b22 18B1     		cbz	r0, .L303	@ tmp145,
1800:src/stm32f1xx_hal_uart.c ****       }
 2990              		.loc 1 1800 0
 2991 0b24 0022     		movs	r2, #0	@ AbortCplt,
 2992 0b26 236B     		ldr	r3, [r4, #48]	@ huart_9(D)->hdmatx, huart_9(D)->hdmatx
 2993 0b28 5A63     		str	r2, [r3, #52]	@ AbortCplt, _34->XferAbortCallback
 2994 0b2a D4E7     		b	.L319	@
 2995              	.L303:
1804:src/stm32f1xx_hal_uart.c ****       }
 2996              		.loc 1 1804 0
 2997 0b2c 0346     		mov	r3, r0	@ AbortCplt, tmp145
 2998 0b2e D3E7     		b	.L296	@
 2999              	.LVL248:
 3000              	.L298:
1834:src/stm32f1xx_hal_uart.c ****   {
 3001              		.loc 1 1834 0
 3002 0b30 002B     		cmp	r3, #0	@ AbortCplt
 3003 0b32 E1D1     		bne	.L301	@
 3004              	.LVL249:
 3005              	.L300:
1858:src/stm32f1xx_hal_uart.c **** 
 3006              		.loc 1 1858 0
 3007 0b34 0020     		movs	r0, #0	@,
 3008 0b36 10BD     		pop	{r4, pc}	@
 3009              	.LVL250:
 3010              	.L321:
 3011              		.align	2
 3012              	.L320:
 3013 0b38 00000000 		.word	UART_DMATxAbortCallback
 3014 0b3c 00000000 		.word	UART_DMARxAbortCallback
 3015              		.cfi_endproc
 3016              	.LFE84:
 3017              		.size	HAL_UART_Abort_IT, .-HAL_UART_Abort_IT
 3018              		.align	1
 3019              		.syntax unified
 3020              		.thumb
 3021              		.thumb_func
 3022              		.fpu softvfp
 3023              		.type	UART_DMARxAbortCallback, %function
 3024              	UART_DMARxAbortCallback:
 3025              	.LFB113:
2823:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3026              		.loc 1 2823 0
 3027              		.cfi_startproc
 3028              		@ args = 0, pretend = 0, frame = 0
 3029              		@ frame_needed = 0, uses_anonymous_args = 0
 3030              	.LVL251:
 3031 0b40 08B5     		push	{r3, lr}	@
 3032              	.LCFI33:
 3033              		.cfi_def_cfa_offset 8
 3034              		.cfi_offset 3, -8
 3035              		.cfi_offset 14, -4
2826:src/stm32f1xx_hal_uart.c **** 
 3036              		.loc 1 2826 0
ARM GAS  /tmp/ccPoddoo.s 			page 121


 3037 0b42 0023     		movs	r3, #0	@ tmp116,
2824:src/stm32f1xx_hal_uart.c **** 
 3038              		.loc 1 2824 0
 3039 0b44 406A     		ldr	r0, [r0, #36]	@ huart, hdma_3(D)->Parent
 3040              	.LVL252:
2826:src/stm32f1xx_hal_uart.c **** 
 3041              		.loc 1 2826 0
 3042 0b46 426B     		ldr	r2, [r0, #52]	@ huart_4->hdmarx, huart_4->hdmarx
 3043 0b48 5363     		str	r3, [r2, #52]	@ tmp116, _5->XferAbortCallback
2829:src/stm32f1xx_hal_uart.c ****   {
 3044              		.loc 1 2829 0
 3045 0b4a 026B     		ldr	r2, [r0, #48]	@ _7, huart_4->hdmatx
 3046 0b4c 0AB1     		cbz	r2, .L323	@ _7,
2831:src/stm32f1xx_hal_uart.c ****     {
 3047              		.loc 1 2831 0
 3048 0b4e 526B     		ldr	r2, [r2, #52]	@ _7->XferAbortCallback, _7->XferAbortCallback
 3049 0b50 4AB9     		cbnz	r2, .L322	@ _7->XferAbortCallback,
 3050              	.L323:
2838:src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 3051              		.loc 1 2838 0
 3052 0b52 C384     		strh	r3, [r0, #38]	@ movhi	@ tmp127, huart_4->TxXferCount
2839:src/stm32f1xx_hal_uart.c **** 
 3053              		.loc 1 2839 0
 3054 0b54 C385     		strh	r3, [r0, #46]	@ movhi	@ tmp127, huart_4->RxXferCount
2842:src/stm32f1xx_hal_uart.c **** 
 3055              		.loc 1 2842 0
 3056 0b56 C363     		str	r3, [r0, #60]	@ tmp127, huart_4->ErrorCode
2845:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 3057              		.loc 1 2845 0
 3058 0b58 2023     		movs	r3, #32	@ tmp123,
 3059 0b5a 80F83930 		strb	r3, [r0, #57]	@ tmp123, huart_4->gState
2846:src/stm32f1xx_hal_uart.c **** 
 3060              		.loc 1 2846 0
 3061 0b5e 80F83A30 		strb	r3, [r0, #58]	@ tmp123, huart_4->RxState
2854:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3062              		.loc 1 2854 0
 3063 0b62 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback	@
 3064              	.LVL253:
 3065              	.L322:
 3066 0b66 08BD     		pop	{r3, pc}	@
 3067              		.cfi_endproc
 3068              	.LFE113:
 3069              		.size	UART_DMARxAbortCallback, .-UART_DMARxAbortCallback
 3070              		.align	1
 3071              		.syntax unified
 3072              		.thumb
 3073              		.thumb_func
 3074              		.fpu softvfp
 3075              		.type	UART_DMATxAbortCallback, %function
 3076              	UART_DMATxAbortCallback:
 3077              	.LFB112:
2778:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3078              		.loc 1 2778 0
 3079              		.cfi_startproc
 3080              		@ args = 0, pretend = 0, frame = 0
 3081              		@ frame_needed = 0, uses_anonymous_args = 0
 3082              	.LVL254:
ARM GAS  /tmp/ccPoddoo.s 			page 122


 3083 0b68 08B5     		push	{r3, lr}	@
 3084              	.LCFI34:
 3085              		.cfi_def_cfa_offset 8
 3086              		.cfi_offset 3, -8
 3087              		.cfi_offset 14, -4
2781:src/stm32f1xx_hal_uart.c **** 
 3088              		.loc 1 2781 0
 3089 0b6a 0023     		movs	r3, #0	@ tmp116,
2779:src/stm32f1xx_hal_uart.c **** 
 3090              		.loc 1 2779 0
 3091 0b6c 406A     		ldr	r0, [r0, #36]	@ huart, hdma_3(D)->Parent
 3092              	.LVL255:
2781:src/stm32f1xx_hal_uart.c **** 
 3093              		.loc 1 2781 0
 3094 0b6e 026B     		ldr	r2, [r0, #48]	@ huart_4->hdmatx, huart_4->hdmatx
 3095 0b70 5363     		str	r3, [r2, #52]	@ tmp116, _5->XferAbortCallback
2784:src/stm32f1xx_hal_uart.c ****   {
 3096              		.loc 1 2784 0
 3097 0b72 426B     		ldr	r2, [r0, #52]	@ _7, huart_4->hdmarx
 3098 0b74 0AB1     		cbz	r2, .L329	@ _7,
2786:src/stm32f1xx_hal_uart.c ****     {
 3099              		.loc 1 2786 0
 3100 0b76 526B     		ldr	r2, [r2, #52]	@ _7->XferAbortCallback, _7->XferAbortCallback
 3101 0b78 4AB9     		cbnz	r2, .L328	@ _7->XferAbortCallback,
 3102              	.L329:
2793:src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 3103              		.loc 1 2793 0
 3104 0b7a C384     		strh	r3, [r0, #38]	@ movhi	@ tmp127, huart_4->TxXferCount
2794:src/stm32f1xx_hal_uart.c **** 
 3105              		.loc 1 2794 0
 3106 0b7c C385     		strh	r3, [r0, #46]	@ movhi	@ tmp127, huart_4->RxXferCount
2797:src/stm32f1xx_hal_uart.c **** 
 3107              		.loc 1 2797 0
 3108 0b7e C363     		str	r3, [r0, #60]	@ tmp127, huart_4->ErrorCode
2800:src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 3109              		.loc 1 2800 0
 3110 0b80 2023     		movs	r3, #32	@ tmp123,
 3111 0b82 80F83930 		strb	r3, [r0, #57]	@ tmp123, huart_4->gState
2801:src/stm32f1xx_hal_uart.c **** 
 3112              		.loc 1 2801 0
 3113 0b86 80F83A30 		strb	r3, [r0, #58]	@ tmp123, huart_4->RxState
2809:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3114              		.loc 1 2809 0
 3115 0b8a FFF7FEFF 		bl	HAL_UART_AbortCpltCallback	@
 3116              	.LVL256:
 3117              	.L328:
 3118 0b8e 08BD     		pop	{r3, pc}	@
 3119              		.cfi_endproc
 3120              	.LFE112:
 3121              		.size	UART_DMATxAbortCallback, .-UART_DMATxAbortCallback
 3122              		.align	1
 3123              		.weak	HAL_UART_AbortTransmitCpltCallback
 3124              		.syntax unified
 3125              		.thumb
 3126              		.thumb_func
 3127              		.fpu softvfp
 3128              		.type	HAL_UART_AbortTransmitCpltCallback, %function
ARM GAS  /tmp/ccPoddoo.s 			page 123


 3129              	HAL_UART_AbortTransmitCpltCallback:
 3130              	.LFB123:
 3131              		.cfi_startproc
 3132              		@ args = 0, pretend = 0, frame = 0
 3133              		@ frame_needed = 0, uses_anonymous_args = 0
 3134              		@ link register save eliminated.
 3135 0b90 7047     		bx	lr	@
 3136              		.cfi_endproc
 3137              	.LFE123:
 3138              		.size	HAL_UART_AbortTransmitCpltCallback, .-HAL_UART_AbortTransmitCpltCallback
 3139              		.align	1
 3140              		.global	HAL_UART_AbortTransmit_IT
 3141              		.syntax unified
 3142              		.thumb
 3143              		.thumb_func
 3144              		.fpu softvfp
 3145              		.type	HAL_UART_AbortTransmit_IT, %function
 3146              	HAL_UART_AbortTransmit_IT:
 3147              	.LFB85:
1875:src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
 3148              		.loc 1 1875 0
 3149              		.cfi_startproc
 3150              		@ args = 0, pretend = 0, frame = 0
 3151              		@ frame_needed = 0, uses_anonymous_args = 0
 3152              	.LVL257:
1877:src/stm32f1xx_hal_uart.c **** 
 3153              		.loc 1 1877 0
 3154 0b92 0368     		ldr	r3, [r0]	@ _4, huart_3(D)->Instance
1875:src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
 3155              		.loc 1 1875 0
 3156 0b94 10B5     		push	{r4, lr}	@
 3157              	.LCFI35:
 3158              		.cfi_def_cfa_offset 8
 3159              		.cfi_offset 4, -8
 3160              		.cfi_offset 14, -4
1877:src/stm32f1xx_hal_uart.c **** 
 3161              		.loc 1 1877 0
 3162 0b96 DA68     		ldr	r2, [r3, #12]	@ _5, _4->CR1
1875:src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
 3163              		.loc 1 1875 0
 3164 0b98 0446     		mov	r4, r0	@ huart, huart
1877:src/stm32f1xx_hal_uart.c **** 
 3165              		.loc 1 1877 0
 3166 0b9a 22F0C002 		bic	r2, r2, #192	@ _6, _5,
 3167 0b9e DA60     		str	r2, [r3, #12]	@ _6, _4->CR1
1880:src/stm32f1xx_hal_uart.c ****   {
 3168              		.loc 1 1880 0
 3169 0ba0 5A69     		ldr	r2, [r3, #20]	@ _8, _4->CR3
 3170 0ba2 12F08002 		ands	r2, r2, #128	@ tmp123, _8,
 3171 0ba6 17D0     		beq	.L336	@,
1882:src/stm32f1xx_hal_uart.c **** 
 3172              		.loc 1 1882 0
 3173 0ba8 5A69     		ldr	r2, [r3, #20]	@ _10, _4->CR3
 3174 0baa 22F08002 		bic	r2, r2, #128	@ _11, _10,
 3175 0bae 5A61     		str	r2, [r3, #20]	@ _11, _4->CR3
1885:src/stm32f1xx_hal_uart.c ****     {
 3176              		.loc 1 1885 0
ARM GAS  /tmp/ccPoddoo.s 			page 124


 3177 0bb0 036B     		ldr	r3, [r0, #48]	@ _13, huart_3(D)->hdmatx
 3178 0bb2 53B1     		cbz	r3, .L337	@ _13,
1889:src/stm32f1xx_hal_uart.c **** 
 3179              		.loc 1 1889 0
 3180 0bb4 094A     		ldr	r2, .L343	@ tmp124,
1892:src/stm32f1xx_hal_uart.c ****       {
 3181              		.loc 1 1892 0
 3182 0bb6 1846     		mov	r0, r3	@, _13
 3183              	.LVL258:
1889:src/stm32f1xx_hal_uart.c **** 
 3184              		.loc 1 1889 0
 3185 0bb8 5A63     		str	r2, [r3, #52]	@ tmp124, _13->XferAbortCallback
1892:src/stm32f1xx_hal_uart.c ****       {
 3186              		.loc 1 1892 0
 3187 0bba FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 3188              	.LVL259:
 3189 0bbe 10B1     		cbz	r0, .L338	@,
1895:src/stm32f1xx_hal_uart.c ****       }
 3190              		.loc 1 1895 0
 3191 0bc0 206B     		ldr	r0, [r4, #48]	@ _20, huart_3(D)->hdmatx
 3192 0bc2 436B     		ldr	r3, [r0, #52]	@ _20->XferAbortCallback, _20->XferAbortCallback
 3193 0bc4 9847     		blx	r3	@ _20->XferAbortCallback
 3194              	.LVL260:
 3195              	.L338:
1935:src/stm32f1xx_hal_uart.c **** 
 3196              		.loc 1 1935 0
 3197 0bc6 0020     		movs	r0, #0	@,
 3198 0bc8 10BD     		pop	{r4, pc}	@
 3199              	.LVL261:
 3200              	.L337:
1901:src/stm32f1xx_hal_uart.c **** 
 3201              		.loc 1 1901 0
 3202 0bca C384     		strh	r3, [r0, #38]	@ movhi	@ _13, huart_3(D)->TxXferCount
 3203              	.L342:
1922:src/stm32f1xx_hal_uart.c **** 
 3204              		.loc 1 1922 0
 3205 0bcc 2023     		movs	r3, #32	@ tmp133,
 3206 0bce 84F83930 		strb	r3, [r4, #57]	@ tmp133,
1930:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3207              		.loc 1 1930 0
 3208 0bd2 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback	@
 3209              	.LVL262:
 3210 0bd6 F6E7     		b	.L338	@
 3211              	.LVL263:
 3212              	.L336:
1919:src/stm32f1xx_hal_uart.c **** 
 3213              		.loc 1 1919 0
 3214 0bd8 C284     		strh	r2, [r0, #38]	@ movhi	@ tmp123, huart_3(D)->TxXferCount
 3215 0bda F7E7     		b	.L342	@
 3216              	.L344:
 3217              		.align	2
 3218              	.L343:
 3219 0bdc 00000000 		.word	UART_DMATxOnlyAbortCallback
 3220              		.cfi_endproc
 3221              	.LFE85:
 3222              		.size	HAL_UART_AbortTransmit_IT, .-HAL_UART_AbortTransmit_IT
 3223              		.align	1
ARM GAS  /tmp/ccPoddoo.s 			page 125


 3224              		.syntax unified
 3225              		.thumb
 3226              		.thumb_func
 3227              		.fpu softvfp
 3228              		.type	UART_DMATxOnlyAbortCallback, %function
 3229              	UART_DMATxOnlyAbortCallback:
 3230              	.LFB114:
2868:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3231              		.loc 1 2868 0
 3232              		.cfi_startproc
 3233              		@ args = 0, pretend = 0, frame = 0
 3234              		@ frame_needed = 0, uses_anonymous_args = 0
 3235              	.LVL264:
 3236 0be0 08B5     		push	{r3, lr}	@
 3237              	.LCFI36:
 3238              		.cfi_def_cfa_offset 8
 3239              		.cfi_offset 3, -8
 3240              		.cfi_offset 14, -4
2871:src/stm32f1xx_hal_uart.c **** 
 3241              		.loc 1 2871 0
 3242 0be2 0023     		movs	r3, #0	@ tmp113,
2869:src/stm32f1xx_hal_uart.c **** 
 3243              		.loc 1 2869 0
 3244 0be4 406A     		ldr	r0, [r0, #36]	@ huart, hdma_2(D)->Parent
 3245              	.LVL265:
2871:src/stm32f1xx_hal_uart.c **** 
 3246              		.loc 1 2871 0
 3247 0be6 C384     		strh	r3, [r0, #38]	@ movhi	@ tmp113, huart_3->TxXferCount
2874:src/stm32f1xx_hal_uart.c **** 
 3248              		.loc 1 2874 0
 3249 0be8 2023     		movs	r3, #32	@ tmp114,
 3250 0bea 80F83930 		strb	r3, [r0, #57]	@ tmp114, huart_3->gState
2882:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3251              		.loc 1 2882 0
 3252 0bee FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback	@
 3253              	.LVL266:
 3254 0bf2 08BD     		pop	{r3, pc}	@
 3255              		.cfi_endproc
 3256              	.LFE114:
 3257              		.size	UART_DMATxOnlyAbortCallback, .-UART_DMATxOnlyAbortCallback
 3258              		.align	1
 3259              		.weak	HAL_UART_AbortReceiveCpltCallback
 3260              		.syntax unified
 3261              		.thumb
 3262              		.thumb_func
 3263              		.fpu softvfp
 3264              		.type	HAL_UART_AbortReceiveCpltCallback, %function
 3265              	HAL_UART_AbortReceiveCpltCallback:
 3266              	.LFB95:
2272:src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 3267              		.loc 1 2272 0
 3268              		.cfi_startproc
 3269              		@ args = 0, pretend = 0, frame = 0
 3270              		@ frame_needed = 0, uses_anonymous_args = 0
 3271              		@ link register save eliminated.
 3272              	.LVL267:
 3273 0bf4 7047     		bx	lr	@
ARM GAS  /tmp/ccPoddoo.s 			page 126


 3274              		.cfi_endproc
 3275              	.LFE95:
 3276              		.size	HAL_UART_AbortReceiveCpltCallback, .-HAL_UART_AbortReceiveCpltCallback
 3277              		.align	1
 3278              		.global	HAL_UART_AbortReceive_IT
 3279              		.syntax unified
 3280              		.thumb
 3281              		.thumb_func
 3282              		.fpu softvfp
 3283              		.type	HAL_UART_AbortReceive_IT, %function
 3284              	HAL_UART_AbortReceive_IT:
 3285              	.LFB86:
1952:src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 3286              		.loc 1 1952 0
 3287              		.cfi_startproc
 3288              		@ args = 0, pretend = 0, frame = 0
 3289              		@ frame_needed = 0, uses_anonymous_args = 0
 3290              	.LVL268:
1954:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3291              		.loc 1 1954 0
 3292 0bf6 0368     		ldr	r3, [r0]	@ _4, huart_3(D)->Instance
1952:src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 3293              		.loc 1 1952 0
 3294 0bf8 10B5     		push	{r4, lr}	@
 3295              	.LCFI37:
 3296              		.cfi_def_cfa_offset 8
 3297              		.cfi_offset 4, -8
 3298              		.cfi_offset 14, -4
1954:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3299              		.loc 1 1954 0
 3300 0bfa DA68     		ldr	r2, [r3, #12]	@ _5, _4->CR1
1952:src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 3301              		.loc 1 1952 0
 3302 0bfc 0446     		mov	r4, r0	@ huart, huart
1954:src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3303              		.loc 1 1954 0
 3304 0bfe 22F49072 		bic	r2, r2, #288	@ _6, _5,
 3305 0c02 DA60     		str	r2, [r3, #12]	@ _6, _4->CR1
1955:src/stm32f1xx_hal_uart.c **** 
 3306              		.loc 1 1955 0
 3307 0c04 5A69     		ldr	r2, [r3, #20]	@ _8, _4->CR3
 3308 0c06 22F00102 		bic	r2, r2, #1	@ _9, _8,
 3309 0c0a 5A61     		str	r2, [r3, #20]	@ _9, _4->CR3
1958:src/stm32f1xx_hal_uart.c ****   {
 3310              		.loc 1 1958 0
 3311 0c0c 5A69     		ldr	r2, [r3, #20]	@ _11, _4->CR3
 3312 0c0e 12F04002 		ands	r2, r2, #64	@ tmp125, _11,
 3313 0c12 17D0     		beq	.L348	@,
1960:src/stm32f1xx_hal_uart.c **** 
 3314              		.loc 1 1960 0
 3315 0c14 5A69     		ldr	r2, [r3, #20]	@ _13, _4->CR3
 3316 0c16 22F04002 		bic	r2, r2, #64	@ _14, _13,
 3317 0c1a 5A61     		str	r2, [r3, #20]	@ _14, _4->CR3
1963:src/stm32f1xx_hal_uart.c ****     {
 3318              		.loc 1 1963 0
 3319 0c1c 436B     		ldr	r3, [r0, #52]	@ _16, huart_3(D)->hdmarx
 3320 0c1e 53B1     		cbz	r3, .L349	@ _16,
ARM GAS  /tmp/ccPoddoo.s 			page 127


1967:src/stm32f1xx_hal_uart.c **** 
 3321              		.loc 1 1967 0
 3322 0c20 094A     		ldr	r2, .L355	@ tmp126,
1970:src/stm32f1xx_hal_uart.c ****       {
 3323              		.loc 1 1970 0
 3324 0c22 1846     		mov	r0, r3	@, _16
 3325              	.LVL269:
1967:src/stm32f1xx_hal_uart.c **** 
 3326              		.loc 1 1967 0
 3327 0c24 5A63     		str	r2, [r3, #52]	@ tmp126, _16->XferAbortCallback
1970:src/stm32f1xx_hal_uart.c ****       {
 3328              		.loc 1 1970 0
 3329 0c26 FFF7FEFF 		bl	HAL_DMA_Abort_IT	@
 3330              	.LVL270:
 3331 0c2a 10B1     		cbz	r0, .L350	@,
1973:src/stm32f1xx_hal_uart.c ****       }
 3332              		.loc 1 1973 0
 3333 0c2c 606B     		ldr	r0, [r4, #52]	@ _23, huart_3(D)->hdmarx
 3334 0c2e 436B     		ldr	r3, [r0, #52]	@ _23->XferAbortCallback, _23->XferAbortCallback
 3335 0c30 9847     		blx	r3	@ _23->XferAbortCallback
 3336              	.LVL271:
 3337              	.L350:
2013:src/stm32f1xx_hal_uart.c **** 
 3338              		.loc 1 2013 0
 3339 0c32 0020     		movs	r0, #0	@,
 3340 0c34 10BD     		pop	{r4, pc}	@
 3341              	.LVL272:
 3342              	.L349:
1979:src/stm32f1xx_hal_uart.c **** 
 3343              		.loc 1 1979 0
 3344 0c36 C385     		strh	r3, [r0, #46]	@ movhi	@ _16, huart_3(D)->RxXferCount
 3345              	.L354:
2000:src/stm32f1xx_hal_uart.c **** 
 3346              		.loc 1 2000 0
 3347 0c38 2023     		movs	r3, #32	@ tmp135,
 3348 0c3a 84F83A30 		strb	r3, [r4, #58]	@ tmp135,
2008:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3349              		.loc 1 2008 0
 3350 0c3e FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback	@
 3351              	.LVL273:
 3352 0c42 F6E7     		b	.L350	@
 3353              	.LVL274:
 3354              	.L348:
1997:src/stm32f1xx_hal_uart.c **** 
 3355              		.loc 1 1997 0
 3356 0c44 C285     		strh	r2, [r0, #46]	@ movhi	@ tmp125, huart_3(D)->RxXferCount
 3357 0c46 F7E7     		b	.L354	@
 3358              	.L356:
 3359              		.align	2
 3360              	.L355:
 3361 0c48 00000000 		.word	UART_DMARxOnlyAbortCallback
 3362              		.cfi_endproc
 3363              	.LFE86:
 3364              		.size	HAL_UART_AbortReceive_IT, .-HAL_UART_AbortReceive_IT
 3365              		.align	1
 3366              		.syntax unified
 3367              		.thumb
ARM GAS  /tmp/ccPoddoo.s 			page 128


 3368              		.thumb_func
 3369              		.fpu softvfp
 3370              		.type	UART_DMARxOnlyAbortCallback, %function
 3371              	UART_DMARxOnlyAbortCallback:
 3372              	.LFB115:
2896:src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3373              		.loc 1 2896 0
 3374              		.cfi_startproc
 3375              		@ args = 0, pretend = 0, frame = 0
 3376              		@ frame_needed = 0, uses_anonymous_args = 0
 3377              	.LVL275:
 3378 0c4c 08B5     		push	{r3, lr}	@
 3379              	.LCFI38:
 3380              		.cfi_def_cfa_offset 8
 3381              		.cfi_offset 3, -8
 3382              		.cfi_offset 14, -4
2899:src/stm32f1xx_hal_uart.c **** 
 3383              		.loc 1 2899 0
 3384 0c4e 0023     		movs	r3, #0	@ tmp113,
2897:src/stm32f1xx_hal_uart.c **** 
 3385              		.loc 1 2897 0
 3386 0c50 406A     		ldr	r0, [r0, #36]	@ huart, hdma_2(D)->Parent
 3387              	.LVL276:
2899:src/stm32f1xx_hal_uart.c **** 
 3388              		.loc 1 2899 0
 3389 0c52 C385     		strh	r3, [r0, #46]	@ movhi	@ tmp113, huart_3->RxXferCount
2902:src/stm32f1xx_hal_uart.c **** 
 3390              		.loc 1 2902 0
 3391 0c54 2023     		movs	r3, #32	@ tmp114,
 3392 0c56 80F83A30 		strb	r3, [r0, #58]	@ tmp114, huart_3->RxState
2910:src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3393              		.loc 1 2910 0
 3394 0c5a FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback	@
 3395              	.LVL277:
 3396 0c5e 08BD     		pop	{r3, pc}	@
 3397              		.cfi_endproc
 3398              	.LFE115:
 3399              		.size	UART_DMARxOnlyAbortCallback, .-UART_DMARxOnlyAbortCallback
 3400              		.align	1
 3401              		.global	HAL_LIN_SendBreak
 3402              		.syntax unified
 3403              		.thumb
 3404              		.thumb_func
 3405              		.fpu softvfp
 3406              		.type	HAL_LIN_SendBreak, %function
 3407              	HAL_LIN_SendBreak:
 3408              	.LFB96:
2311:src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 3409              		.loc 1 2311 0
 3410              		.cfi_startproc
 3411              		@ args = 0, pretend = 0, frame = 0
 3412              		@ frame_needed = 0, uses_anonymous_args = 0
 3413              		@ link register save eliminated.
 3414              	.LVL278:
2316:src/stm32f1xx_hal_uart.c **** 
 3415              		.loc 1 2316 0
 3416 0c60 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2	@ huart_4(D)->Lock, huart_4(D)->Lock
ARM GAS  /tmp/ccPoddoo.s 			page 129


 3417 0c64 012B     		cmp	r3, #1	@ huart_4(D)->Lock,
 3418 0c66 0FD0     		beq	.L360	@,
2318:src/stm32f1xx_hal_uart.c **** 
 3419              		.loc 1 2318 0 discriminator 2
 3420 0c68 2423     		movs	r3, #36	@ tmp117,
2321:src/stm32f1xx_hal_uart.c **** 
 3421              		.loc 1 2321 0 discriminator 2
 3422 0c6a 0268     		ldr	r2, [r0]	@ _7, huart_4(D)->Instance
2318:src/stm32f1xx_hal_uart.c **** 
 3423              		.loc 1 2318 0 discriminator 2
 3424 0c6c 80F83930 		strb	r3, [r0, #57]	@ tmp117, huart_4(D)->gState
2321:src/stm32f1xx_hal_uart.c **** 
 3425              		.loc 1 2321 0 discriminator 2
 3426 0c70 D368     		ldr	r3, [r2, #12]	@ _8, _7->CR1
 3427 0c72 43F00103 		orr	r3, r3, #1	@ _9, _8,
 3428 0c76 D360     		str	r3, [r2, #12]	@ _9, _7->CR1
2323:src/stm32f1xx_hal_uart.c **** 
 3429              		.loc 1 2323 0 discriminator 2
 3430 0c78 2023     		movs	r3, #32	@ tmp119,
 3431 0c7a 80F83930 		strb	r3, [r0, #57]	@ tmp119, huart_4(D)->gState
2326:src/stm32f1xx_hal_uart.c **** 
 3432              		.loc 1 2326 0 discriminator 2
 3433 0c7e 0023     		movs	r3, #0	@ tmp121,
 3434 0c80 80F83830 		strb	r3, [r0, #56]	@ tmp121, huart_4(D)->Lock
2328:src/stm32f1xx_hal_uart.c **** }
 3435              		.loc 1 2328 0 discriminator 2
 3436 0c84 1846     		mov	r0, r3	@ <retval>, tmp121
 3437              	.LVL279:
 3438 0c86 7047     		bx	lr	@
 3439              	.LVL280:
 3440              	.L360:
2316:src/stm32f1xx_hal_uart.c **** 
 3441              		.loc 1 2316 0
 3442 0c88 0220     		movs	r0, #2	@ <retval>,
 3443              	.LVL281:
2329:src/stm32f1xx_hal_uart.c **** 
 3444              		.loc 1 2329 0
 3445 0c8a 7047     		bx	lr	@
 3446              		.cfi_endproc
 3447              	.LFE96:
 3448              		.size	HAL_LIN_SendBreak, .-HAL_LIN_SendBreak
 3449              		.align	1
 3450              		.global	HAL_MultiProcessor_EnterMuteMode
 3451              		.syntax unified
 3452              		.thumb
 3453              		.thumb_func
 3454              		.fpu softvfp
 3455              		.type	HAL_MultiProcessor_EnterMuteMode, %function
 3456              	HAL_MultiProcessor_EnterMuteMode:
 3457              	.LFB97:
2338:src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 3458              		.loc 1 2338 0
 3459              		.cfi_startproc
 3460              		@ args = 0, pretend = 0, frame = 0
 3461              		@ frame_needed = 0, uses_anonymous_args = 0
 3462              		@ link register save eliminated.
 3463              	.LVL282:
ARM GAS  /tmp/ccPoddoo.s 			page 130


2343:src/stm32f1xx_hal_uart.c **** 
 3464              		.loc 1 2343 0
 3465 0c8c 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2	@ huart_4(D)->Lock, huart_4(D)->Lock
 3466 0c90 012B     		cmp	r3, #1	@ huart_4(D)->Lock,
 3467 0c92 0FD0     		beq	.L363	@,
2345:src/stm32f1xx_hal_uart.c **** 
 3468              		.loc 1 2345 0 discriminator 2
 3469 0c94 2423     		movs	r3, #36	@ tmp117,
2348:src/stm32f1xx_hal_uart.c **** 
 3470              		.loc 1 2348 0 discriminator 2
 3471 0c96 0268     		ldr	r2, [r0]	@ _7, huart_4(D)->Instance
2345:src/stm32f1xx_hal_uart.c **** 
 3472              		.loc 1 2345 0 discriminator 2
 3473 0c98 80F83930 		strb	r3, [r0, #57]	@ tmp117, huart_4(D)->gState
2348:src/stm32f1xx_hal_uart.c **** 
 3474              		.loc 1 2348 0 discriminator 2
 3475 0c9c D368     		ldr	r3, [r2, #12]	@ _8, _7->CR1
 3476 0c9e 43F00203 		orr	r3, r3, #2	@ _9, _8,
 3477 0ca2 D360     		str	r3, [r2, #12]	@ _9, _7->CR1
2350:src/stm32f1xx_hal_uart.c **** 
 3478              		.loc 1 2350 0 discriminator 2
 3479 0ca4 2023     		movs	r3, #32	@ tmp119,
 3480 0ca6 80F83930 		strb	r3, [r0, #57]	@ tmp119, huart_4(D)->gState
2353:src/stm32f1xx_hal_uart.c **** 
 3481              		.loc 1 2353 0 discriminator 2
 3482 0caa 0023     		movs	r3, #0	@ tmp121,
 3483 0cac 80F83830 		strb	r3, [r0, #56]	@ tmp121, huart_4(D)->Lock
2355:src/stm32f1xx_hal_uart.c **** }
 3484              		.loc 1 2355 0 discriminator 2
 3485 0cb0 1846     		mov	r0, r3	@ <retval>, tmp121
 3486              	.LVL283:
 3487 0cb2 7047     		bx	lr	@
 3488              	.LVL284:
 3489              	.L363:
2343:src/stm32f1xx_hal_uart.c **** 
 3490              		.loc 1 2343 0
 3491 0cb4 0220     		movs	r0, #2	@ <retval>,
 3492              	.LVL285:
2356:src/stm32f1xx_hal_uart.c **** 
 3493              		.loc 1 2356 0
 3494 0cb6 7047     		bx	lr	@
 3495              		.cfi_endproc
 3496              	.LFE97:
 3497              		.size	HAL_MultiProcessor_EnterMuteMode, .-HAL_MultiProcessor_EnterMuteMode
 3498              		.align	1
 3499              		.global	HAL_MultiProcessor_ExitMuteMode
 3500              		.syntax unified
 3501              		.thumb
 3502              		.thumb_func
 3503              		.fpu softvfp
 3504              		.type	HAL_MultiProcessor_ExitMuteMode, %function
 3505              	HAL_MultiProcessor_ExitMuteMode:
 3506              	.LFB98:
2365:src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 3507              		.loc 1 2365 0
 3508              		.cfi_startproc
 3509              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccPoddoo.s 			page 131


 3510              		@ frame_needed = 0, uses_anonymous_args = 0
 3511              		@ link register save eliminated.
 3512              	.LVL286:
2370:src/stm32f1xx_hal_uart.c **** 
 3513              		.loc 1 2370 0
 3514 0cb8 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2	@ huart_4(D)->Lock, huart_4(D)->Lock
 3515 0cbc 012B     		cmp	r3, #1	@ huart_4(D)->Lock,
 3516 0cbe 0FD0     		beq	.L366	@,
2372:src/stm32f1xx_hal_uart.c **** 
 3517              		.loc 1 2372 0 discriminator 2
 3518 0cc0 2423     		movs	r3, #36	@ tmp117,
2375:src/stm32f1xx_hal_uart.c **** 
 3519              		.loc 1 2375 0 discriminator 2
 3520 0cc2 0268     		ldr	r2, [r0]	@ _7, huart_4(D)->Instance
2372:src/stm32f1xx_hal_uart.c **** 
 3521              		.loc 1 2372 0 discriminator 2
 3522 0cc4 80F83930 		strb	r3, [r0, #57]	@ tmp117, huart_4(D)->gState
2375:src/stm32f1xx_hal_uart.c **** 
 3523              		.loc 1 2375 0 discriminator 2
 3524 0cc8 D368     		ldr	r3, [r2, #12]	@ _8, _7->CR1
 3525 0cca 23F00203 		bic	r3, r3, #2	@ _9, _8,
 3526 0cce D360     		str	r3, [r2, #12]	@ _9, _7->CR1
2377:src/stm32f1xx_hal_uart.c **** 
 3527              		.loc 1 2377 0 discriminator 2
 3528 0cd0 2023     		movs	r3, #32	@ tmp119,
 3529 0cd2 80F83930 		strb	r3, [r0, #57]	@ tmp119, huart_4(D)->gState
2380:src/stm32f1xx_hal_uart.c **** 
 3530              		.loc 1 2380 0 discriminator 2
 3531 0cd6 0023     		movs	r3, #0	@ tmp121,
 3532 0cd8 80F83830 		strb	r3, [r0, #56]	@ tmp121, huart_4(D)->Lock
2382:src/stm32f1xx_hal_uart.c **** }
 3533              		.loc 1 2382 0 discriminator 2
 3534 0cdc 1846     		mov	r0, r3	@ <retval>, tmp121
 3535              	.LVL287:
 3536 0cde 7047     		bx	lr	@
 3537              	.LVL288:
 3538              	.L366:
2370:src/stm32f1xx_hal_uart.c **** 
 3539              		.loc 1 2370 0
 3540 0ce0 0220     		movs	r0, #2	@ <retval>,
 3541              	.LVL289:
2383:src/stm32f1xx_hal_uart.c **** 
 3542              		.loc 1 2383 0
 3543 0ce2 7047     		bx	lr	@
 3544              		.cfi_endproc
 3545              	.LFE98:
 3546              		.size	HAL_MultiProcessor_ExitMuteMode, .-HAL_MultiProcessor_ExitMuteMode
 3547              		.align	1
 3548              		.global	HAL_HalfDuplex_EnableTransmitter
 3549              		.syntax unified
 3550              		.thumb
 3551              		.thumb_func
 3552              		.fpu softvfp
 3553              		.type	HAL_HalfDuplex_EnableTransmitter, %function
 3554              	HAL_HalfDuplex_EnableTransmitter:
 3555              	.LFB99:
2392:src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
ARM GAS  /tmp/ccPoddoo.s 			page 132


 3556              		.loc 1 2392 0
 3557              		.cfi_startproc
 3558              		@ args = 0, pretend = 0, frame = 0
 3559              		@ frame_needed = 0, uses_anonymous_args = 0
 3560              		@ link register save eliminated.
 3561              	.LVL290:
2396:src/stm32f1xx_hal_uart.c **** 
 3562              		.loc 1 2396 0
 3563 0ce4 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2	@ huart_4(D)->Lock, huart_4(D)->Lock
 3564 0ce8 012B     		cmp	r3, #1	@ huart_4(D)->Lock,
 3565 0cea 11D0     		beq	.L369	@,
2398:src/stm32f1xx_hal_uart.c **** 
 3566              		.loc 1 2398 0 discriminator 2
 3567 0cec 2423     		movs	r3, #36	@ tmp118,
2401:src/stm32f1xx_hal_uart.c **** 
 3568              		.loc 1 2401 0 discriminator 2
 3569 0cee 0268     		ldr	r2, [r0]	@ _7, huart_4(D)->Instance
2398:src/stm32f1xx_hal_uart.c **** 
 3570              		.loc 1 2398 0 discriminator 2
 3571 0cf0 80F83930 		strb	r3, [r0, #57]	@ tmp118, huart_4(D)->gState
2401:src/stm32f1xx_hal_uart.c **** 
 3572              		.loc 1 2401 0 discriminator 2
 3573 0cf4 D368     		ldr	r3, [r2, #12]	@ tmpreg, _7->CR1
 3574              	.LVL291:
2404:src/stm32f1xx_hal_uart.c **** 
 3575              		.loc 1 2404 0 discriminator 2
 3576 0cf6 23F00C03 		bic	r3, r3, #12	@ tmpreg, tmpreg,
 3577              	.LVL292:
2407:src/stm32f1xx_hal_uart.c **** 
 3578              		.loc 1 2407 0 discriminator 2
 3579 0cfa 43F00803 		orr	r3, r3, #8	@ tmpreg, tmpreg,
 3580              	.LVL293:
2410:src/stm32f1xx_hal_uart.c **** 
 3581              		.loc 1 2410 0 discriminator 2
 3582 0cfe D360     		str	r3, [r2, #12]	@ tmpreg, _7->CR1
2412:src/stm32f1xx_hal_uart.c **** 
 3583              		.loc 1 2412 0 discriminator 2
 3584 0d00 2023     		movs	r3, #32	@ tmp120,
 3585              	.LVL294:
 3586 0d02 80F83930 		strb	r3, [r0, #57]	@ tmp120, huart_4(D)->gState
 3587              	.LVL295:
2415:src/stm32f1xx_hal_uart.c **** 
 3588              		.loc 1 2415 0 discriminator 2
 3589 0d06 0023     		movs	r3, #0	@ tmp122,
 3590 0d08 80F83830 		strb	r3, [r0, #56]	@ tmp122, huart_4(D)->Lock
2417:src/stm32f1xx_hal_uart.c **** }
 3591              		.loc 1 2417 0 discriminator 2
 3592 0d0c 1846     		mov	r0, r3	@ <retval>, tmp122
 3593              	.LVL296:
 3594 0d0e 7047     		bx	lr	@
 3595              	.LVL297:
 3596              	.L369:
2396:src/stm32f1xx_hal_uart.c **** 
 3597              		.loc 1 2396 0
 3598 0d10 0220     		movs	r0, #2	@ <retval>,
 3599              	.LVL298:
2418:src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccPoddoo.s 			page 133


 3600              		.loc 1 2418 0
 3601 0d12 7047     		bx	lr	@
 3602              		.cfi_endproc
 3603              	.LFE99:
 3604              		.size	HAL_HalfDuplex_EnableTransmitter, .-HAL_HalfDuplex_EnableTransmitter
 3605              		.align	1
 3606              		.global	HAL_HalfDuplex_EnableReceiver
 3607              		.syntax unified
 3608              		.thumb
 3609              		.thumb_func
 3610              		.fpu softvfp
 3611              		.type	HAL_HalfDuplex_EnableReceiver, %function
 3612              	HAL_HalfDuplex_EnableReceiver:
 3613              	.LFB100:
2427:src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 3614              		.loc 1 2427 0
 3615              		.cfi_startproc
 3616              		@ args = 0, pretend = 0, frame = 0
 3617              		@ frame_needed = 0, uses_anonymous_args = 0
 3618              		@ link register save eliminated.
 3619              	.LVL299:
2431:src/stm32f1xx_hal_uart.c **** 
 3620              		.loc 1 2431 0
 3621 0d14 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2	@ huart_4(D)->Lock, huart_4(D)->Lock
 3622 0d18 012B     		cmp	r3, #1	@ huart_4(D)->Lock,
 3623 0d1a 11D0     		beq	.L372	@,
2433:src/stm32f1xx_hal_uart.c **** 
 3624              		.loc 1 2433 0 discriminator 2
 3625 0d1c 2423     		movs	r3, #36	@ tmp118,
2436:src/stm32f1xx_hal_uart.c **** 
 3626              		.loc 1 2436 0 discriminator 2
 3627 0d1e 0268     		ldr	r2, [r0]	@ _7, huart_4(D)->Instance
2433:src/stm32f1xx_hal_uart.c **** 
 3628              		.loc 1 2433 0 discriminator 2
 3629 0d20 80F83930 		strb	r3, [r0, #57]	@ tmp118, huart_4(D)->gState
2436:src/stm32f1xx_hal_uart.c **** 
 3630              		.loc 1 2436 0 discriminator 2
 3631 0d24 D368     		ldr	r3, [r2, #12]	@ tmpreg, _7->CR1
 3632              	.LVL300:
2439:src/stm32f1xx_hal_uart.c **** 
 3633              		.loc 1 2439 0 discriminator 2
 3634 0d26 23F00C03 		bic	r3, r3, #12	@ tmpreg, tmpreg,
 3635              	.LVL301:
2442:src/stm32f1xx_hal_uart.c **** 
 3636              		.loc 1 2442 0 discriminator 2
 3637 0d2a 43F00403 		orr	r3, r3, #4	@ tmpreg, tmpreg,
 3638              	.LVL302:
2445:src/stm32f1xx_hal_uart.c **** 
 3639              		.loc 1 2445 0 discriminator 2
 3640 0d2e D360     		str	r3, [r2, #12]	@ tmpreg, _7->CR1
2447:src/stm32f1xx_hal_uart.c **** 
 3641              		.loc 1 2447 0 discriminator 2
 3642 0d30 2023     		movs	r3, #32	@ tmp120,
 3643              	.LVL303:
 3644 0d32 80F83930 		strb	r3, [r0, #57]	@ tmp120, huart_4(D)->gState
 3645              	.LVL304:
2450:src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccPoddoo.s 			page 134


 3646              		.loc 1 2450 0 discriminator 2
 3647 0d36 0023     		movs	r3, #0	@ tmp122,
 3648 0d38 80F83830 		strb	r3, [r0, #56]	@ tmp122, huart_4(D)->Lock
2452:src/stm32f1xx_hal_uart.c **** }
 3649              		.loc 1 2452 0 discriminator 2
 3650 0d3c 1846     		mov	r0, r3	@ <retval>, tmp122
 3651              	.LVL305:
 3652 0d3e 7047     		bx	lr	@
 3653              	.LVL306:
 3654              	.L372:
2431:src/stm32f1xx_hal_uart.c **** 
 3655              		.loc 1 2431 0
 3656 0d40 0220     		movs	r0, #2	@ <retval>,
 3657              	.LVL307:
2453:src/stm32f1xx_hal_uart.c **** 
 3658              		.loc 1 2453 0
 3659 0d42 7047     		bx	lr	@
 3660              		.cfi_endproc
 3661              	.LFE100:
 3662              		.size	HAL_HalfDuplex_EnableReceiver, .-HAL_HalfDuplex_EnableReceiver
 3663              		.align	1
 3664              		.global	HAL_UART_GetState
 3665              		.syntax unified
 3666              		.thumb
 3667              		.thumb_func
 3668              		.fpu softvfp
 3669              		.type	HAL_UART_GetState, %function
 3670              	HAL_UART_GetState:
 3671              	.LFB101:
2484:src/stm32f1xx_hal_uart.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
 3672              		.loc 1 2484 0
 3673              		.cfi_startproc
 3674              		@ args = 0, pretend = 0, frame = 0
 3675              		@ frame_needed = 0, uses_anonymous_args = 0
 3676              		@ link register save eliminated.
 3677              	.LVL308:
2486:src/stm32f1xx_hal_uart.c ****   temp2 = huart->RxState;
 3678              		.loc 1 2486 0
 3679 0d44 90F83920 		ldrb	r2, [r0, #57]	@ zero_extendqisi2	@ huart_2(D)->gState, huart_2(D)->gState
 3680              	.LVL309:
2487:src/stm32f1xx_hal_uart.c **** 
 3681              		.loc 1 2487 0
 3682 0d48 90F83A00 		ldrb	r0, [r0, #58]	@ zero_extendqisi2	@ huart_2(D)->RxState, huart_2(D)->RxState
 3683              	.LVL310:
2490:src/stm32f1xx_hal_uart.c **** 
 3684              		.loc 1 2490 0
 3685 0d4c 1043     		orrs	r0, r0, r2	@,, huart_2(D)->RxState, huart_2(D)->gState
 3686              	.LVL311:
 3687 0d4e 7047     		bx	lr	@
 3688              		.cfi_endproc
 3689              	.LFE101:
 3690              		.size	HAL_UART_GetState, .-HAL_UART_GetState
 3691              		.align	1
 3692              		.global	HAL_UART_GetError
 3693              		.syntax unified
 3694              		.thumb
 3695              		.thumb_func
ARM GAS  /tmp/ccPoddoo.s 			page 135


 3696              		.fpu softvfp
 3697              		.type	HAL_UART_GetError, %function
 3698              	HAL_UART_GetError:
 3699              	.LFB102:
2499:src/stm32f1xx_hal_uart.c ****   return huart->ErrorCode;
 3700              		.loc 1 2499 0
 3701              		.cfi_startproc
 3702              		@ args = 0, pretend = 0, frame = 0
 3703              		@ frame_needed = 0, uses_anonymous_args = 0
 3704              		@ link register save eliminated.
 3705              	.LVL312:
2500:src/stm32f1xx_hal_uart.c **** }
 3706              		.loc 1 2500 0
 3707 0d50 C06B     		ldr	r0, [r0, #60]	@ <retval>, huart_2(D)->ErrorCode
 3708              	.LVL313:
2501:src/stm32f1xx_hal_uart.c **** 
 3709              		.loc 1 2501 0
 3710 0d52 7047     		bx	lr	@
 3711              		.cfi_endproc
 3712              	.LFE102:
 3713              		.size	HAL_UART_GetError, .-HAL_UART_GetError
 3714              	.Letext0:
 3715              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3716              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3717              		.file 4 "../cmsiscore/inc/core_cm3.h"
 3718              		.file 5 "../cmsisstm32f1xx/inc/system_stm32f1xx.h"
 3719              		.file 6 "../cmsisstm32f1xx/inc/stm32f103x6.h"
 3720              		.file 7 "../cmsisstm32f1xx/inc/stm32f1xx.h"
 3721              		.file 8 "./inc/stm32f1xx_hal_def.h"
 3722              		.file 9 "./inc/stm32f1xx_hal_dma.h"
 3723              		.file 10 "./inc/stm32f1xx_hal_uart.h"
 3724              		.file 11 "./inc/stm32f1xx_hal.h"
 3725              		.file 12 "./inc/stm32f1xx_hal_rcc.h"
 3726              		.section	.debug_info,"",%progbits
 3727              	.Ldebug_info0:
 3728 0000 85170000 		.4byte	0x1785
 3729 0004 0200     		.2byte	0x2
 3730 0006 00000000 		.4byte	.Ldebug_abbrev0
 3731 000a 04       		.byte	0x4
 3732 000b 01       		.uleb128 0x1
 3733 000c 40080000 		.4byte	.LASF184
 3734 0010 0C       		.byte	0xc
 3735 0011 FD060000 		.4byte	.LASF185
 3736 0015 AA080000 		.4byte	.LASF186
 3737 0019 00000000 		.4byte	.Ltext0
 3738 001d 540D0000 		.4byte	.Letext0
 3739 0021 00000000 		.4byte	.Ldebug_line0
 3740 0025 02       		.uleb128 0x2
 3741 0026 01       		.byte	0x1
 3742 0027 06       		.byte	0x6
 3743 0028 F0010000 		.4byte	.LASF0
 3744 002c 03       		.uleb128 0x3
 3745 002d 9B000000 		.4byte	.LASF3
 3746 0031 02       		.byte	0x2
 3747 0032 1D       		.byte	0x1d
 3748 0033 37000000 		.4byte	0x37
 3749 0037 02       		.uleb128 0x2
ARM GAS  /tmp/ccPoddoo.s 			page 136


 3750 0038 01       		.byte	0x1
 3751 0039 08       		.byte	0x8
 3752 003a C7070000 		.4byte	.LASF1
 3753 003e 02       		.uleb128 0x2
 3754 003f 02       		.byte	0x2
 3755 0040 05       		.byte	0x5
 3756 0041 FC070000 		.4byte	.LASF2
 3757 0045 03       		.uleb128 0x3
 3758 0046 7E090000 		.4byte	.LASF4
 3759 004a 02       		.byte	0x2
 3760 004b 2B       		.byte	0x2b
 3761 004c 50000000 		.4byte	0x50
 3762 0050 02       		.uleb128 0x2
 3763 0051 02       		.byte	0x2
 3764 0052 07       		.byte	0x7
 3765 0053 BB040000 		.4byte	.LASF5
 3766 0057 03       		.uleb128 0x3
 3767 0058 B4090000 		.4byte	.LASF6
 3768 005c 02       		.byte	0x2
 3769 005d 3F       		.byte	0x3f
 3770 005e 62000000 		.4byte	0x62
 3771 0062 02       		.uleb128 0x2
 3772 0063 04       		.byte	0x4
 3773 0064 05       		.byte	0x5
 3774 0065 7C020000 		.4byte	.LASF7
 3775 0069 03       		.uleb128 0x3
 3776 006a 5F030000 		.4byte	.LASF8
 3777 006e 02       		.byte	0x2
 3778 006f 41       		.byte	0x41
 3779 0070 74000000 		.4byte	0x74
 3780 0074 02       		.uleb128 0x2
 3781 0075 04       		.byte	0x4
 3782 0076 07       		.byte	0x7
 3783 0077 58040000 		.4byte	.LASF9
 3784 007b 02       		.uleb128 0x2
 3785 007c 08       		.byte	0x8
 3786 007d 05       		.byte	0x5
 3787 007e E2010000 		.4byte	.LASF10
 3788 0082 02       		.uleb128 0x2
 3789 0083 08       		.byte	0x8
 3790 0084 07       		.byte	0x7
 3791 0085 48010000 		.4byte	.LASF11
 3792 0089 04       		.uleb128 0x4
 3793 008a 04       		.byte	0x4
 3794 008b 05       		.byte	0x5
 3795 008c 696E7400 		.ascii	"int\000"
 3796 0090 02       		.uleb128 0x2
 3797 0091 04       		.byte	0x4
 3798 0092 07       		.byte	0x7
 3799 0093 6C090000 		.4byte	.LASF12
 3800 0097 03       		.uleb128 0x3
 3801 0098 FD0A0000 		.4byte	.LASF13
 3802 009c 03       		.byte	0x3
 3803 009d 18       		.byte	0x18
 3804 009e 2C000000 		.4byte	0x2c
 3805 00a2 05       		.uleb128 0x5
 3806 00a3 97000000 		.4byte	0x97
ARM GAS  /tmp/ccPoddoo.s 			page 137


 3807 00a7 03       		.uleb128 0x3
 3808 00a8 F2020000 		.4byte	.LASF14
 3809 00ac 03       		.byte	0x3
 3810 00ad 24       		.byte	0x24
 3811 00ae 45000000 		.4byte	0x45
 3812 00b2 06       		.uleb128 0x6
 3813 00b3 A7000000 		.4byte	0xa7
 3814 00b7 03       		.uleb128 0x3
 3815 00b8 BF070000 		.4byte	.LASF15
 3816 00bc 03       		.byte	0x3
 3817 00bd 2C       		.byte	0x2c
 3818 00be 57000000 		.4byte	0x57
 3819 00c2 06       		.uleb128 0x6
 3820 00c3 B7000000 		.4byte	0xb7
 3821 00c7 03       		.uleb128 0x3
 3822 00c8 0D090000 		.4byte	.LASF16
 3823 00cc 03       		.byte	0x3
 3824 00cd 30       		.byte	0x30
 3825 00ce 69000000 		.4byte	0x69
 3826 00d2 06       		.uleb128 0x6
 3827 00d3 C7000000 		.4byte	0xc7
 3828 00d7 02       		.uleb128 0x2
 3829 00d8 04       		.byte	0x4
 3830 00d9 07       		.byte	0x7
 3831 00da F1050000 		.4byte	.LASF17
 3832 00de 07       		.uleb128 0x7
 3833 00df 6A010000 		.4byte	.LASF18
 3834 00e3 04       		.byte	0x4
 3835 00e4 4807     		.2byte	0x748
 3836 00e6 C2000000 		.4byte	0xc2
 3837 00ea 01       		.byte	0x1
 3838 00eb 01       		.byte	0x1
 3839 00ec 08       		.uleb128 0x8
 3840 00ed 19040000 		.4byte	.LASF19
 3841 00f1 05       		.byte	0x5
 3842 00f2 33       		.byte	0x33
 3843 00f3 C7000000 		.4byte	0xc7
 3844 00f7 01       		.byte	0x1
 3845 00f8 01       		.byte	0x1
 3846 00f9 09       		.uleb128 0x9
 3847 00fa A2000000 		.4byte	0xa2
 3848 00fe 09010000 		.4byte	0x109
 3849 0102 0A       		.uleb128 0xa
 3850 0103 D7000000 		.4byte	0xd7
 3851 0107 0F       		.byte	0xf
 3852 0108 00       		.byte	0
 3853 0109 05       		.uleb128 0x5
 3854 010a F9000000 		.4byte	0xf9
 3855 010e 08       		.uleb128 0x8
 3856 010f 6E050000 		.4byte	.LASF20
 3857 0113 05       		.byte	0x5
 3858 0114 34       		.byte	0x34
 3859 0115 09010000 		.4byte	0x109
 3860 0119 01       		.byte	0x1
 3861 011a 01       		.byte	0x1
 3862 011b 09       		.uleb128 0x9
 3863 011c A2000000 		.4byte	0xa2
ARM GAS  /tmp/ccPoddoo.s 			page 138


 3864 0120 2B010000 		.4byte	0x12b
 3865 0124 0A       		.uleb128 0xa
 3866 0125 D7000000 		.4byte	0xd7
 3867 0129 07       		.byte	0x7
 3868 012a 00       		.byte	0
 3869 012b 05       		.uleb128 0x5
 3870 012c 1B010000 		.4byte	0x11b
 3871 0130 08       		.uleb128 0x8
 3872 0131 D7000000 		.4byte	.LASF21
 3873 0135 05       		.byte	0x5
 3874 0136 35       		.byte	0x35
 3875 0137 2B010000 		.4byte	0x12b
 3876 013b 01       		.byte	0x1
 3877 013c 01       		.byte	0x1
 3878 013d 0B       		.uleb128 0xb
 3879 013e 10       		.byte	0x10
 3880 013f 06       		.byte	0x6
 3881 0140 1E01     		.2byte	0x11e
 3882 0142 83010000 		.4byte	0x183
 3883 0146 0C       		.uleb128 0xc
 3884 0147 43435200 		.ascii	"CCR\000"
 3885 014b 06       		.byte	0x6
 3886 014c 2001     		.2byte	0x120
 3887 014e D2000000 		.4byte	0xd2
 3888 0152 02       		.byte	0x2
 3889 0153 23       		.byte	0x23
 3890 0154 00       		.uleb128 0
 3891 0155 0D       		.uleb128 0xd
 3892 0156 9C0A0000 		.4byte	.LASF22
 3893 015a 06       		.byte	0x6
 3894 015b 2101     		.2byte	0x121
 3895 015d D2000000 		.4byte	0xd2
 3896 0161 02       		.byte	0x2
 3897 0162 23       		.byte	0x23
 3898 0163 04       		.uleb128 0x4
 3899 0164 0D       		.uleb128 0xd
 3900 0165 3B040000 		.4byte	.LASF23
 3901 0169 06       		.byte	0x6
 3902 016a 2201     		.2byte	0x122
 3903 016c D2000000 		.4byte	0xd2
 3904 0170 02       		.byte	0x2
 3905 0171 23       		.byte	0x23
 3906 0172 08       		.uleb128 0x8
 3907 0173 0D       		.uleb128 0xd
 3908 0174 A20A0000 		.4byte	.LASF24
 3909 0178 06       		.byte	0x6
 3910 0179 2301     		.2byte	0x123
 3911 017b D2000000 		.4byte	0xd2
 3912 017f 02       		.byte	0x2
 3913 0180 23       		.byte	0x23
 3914 0181 0C       		.uleb128 0xc
 3915 0182 00       		.byte	0
 3916 0183 0E       		.uleb128 0xe
 3917 0184 28070000 		.4byte	.LASF25
 3918 0188 06       		.byte	0x6
 3919 0189 2401     		.2byte	0x124
 3920 018b 3D010000 		.4byte	0x13d
ARM GAS  /tmp/ccPoddoo.s 			page 139


 3921 018f 0B       		.uleb128 0xb
 3922 0190 08       		.byte	0x8
 3923 0191 06       		.byte	0x6
 3924 0192 2601     		.2byte	0x126
 3925 0194 B7010000 		.4byte	0x1b7
 3926 0198 0C       		.uleb128 0xc
 3927 0199 49535200 		.ascii	"ISR\000"
 3928 019d 06       		.byte	0x6
 3929 019e 2801     		.2byte	0x128
 3930 01a0 D2000000 		.4byte	0xd2
 3931 01a4 02       		.byte	0x2
 3932 01a5 23       		.byte	0x23
 3933 01a6 00       		.uleb128 0
 3934 01a7 0D       		.uleb128 0xd
 3935 01a8 5C090000 		.4byte	.LASF26
 3936 01ac 06       		.byte	0x6
 3937 01ad 2901     		.2byte	0x129
 3938 01af D2000000 		.4byte	0xd2
 3939 01b3 02       		.byte	0x2
 3940 01b4 23       		.byte	0x23
 3941 01b5 04       		.uleb128 0x4
 3942 01b6 00       		.byte	0
 3943 01b7 0E       		.uleb128 0xe
 3944 01b8 EA030000 		.4byte	.LASF27
 3945 01bc 06       		.byte	0x6
 3946 01bd 2A01     		.2byte	0x12a
 3947 01bf 8F010000 		.4byte	0x18f
 3948 01c3 0B       		.uleb128 0xb
 3949 01c4 1C       		.byte	0x1c
 3950 01c5 06       		.byte	0x6
 3951 01c6 F601     		.2byte	0x1f6
 3952 01c8 34020000 		.4byte	0x234
 3953 01cc 0C       		.uleb128 0xc
 3954 01cd 535200   		.ascii	"SR\000"
 3955 01d0 06       		.byte	0x6
 3956 01d1 F801     		.2byte	0x1f8
 3957 01d3 D2000000 		.4byte	0xd2
 3958 01d7 02       		.byte	0x2
 3959 01d8 23       		.byte	0x23
 3960 01d9 00       		.uleb128 0
 3961 01da 0C       		.uleb128 0xc
 3962 01db 445200   		.ascii	"DR\000"
 3963 01de 06       		.byte	0x6
 3964 01df F901     		.2byte	0x1f9
 3965 01e1 D2000000 		.4byte	0xd2
 3966 01e5 02       		.byte	0x2
 3967 01e6 23       		.byte	0x23
 3968 01e7 04       		.uleb128 0x4
 3969 01e8 0C       		.uleb128 0xc
 3970 01e9 42525200 		.ascii	"BRR\000"
 3971 01ed 06       		.byte	0x6
 3972 01ee FA01     		.2byte	0x1fa
 3973 01f0 D2000000 		.4byte	0xd2
 3974 01f4 02       		.byte	0x2
 3975 01f5 23       		.byte	0x23
 3976 01f6 08       		.uleb128 0x8
 3977 01f7 0C       		.uleb128 0xc
ARM GAS  /tmp/ccPoddoo.s 			page 140


 3978 01f8 43523100 		.ascii	"CR1\000"
 3979 01fc 06       		.byte	0x6
 3980 01fd FB01     		.2byte	0x1fb
 3981 01ff D2000000 		.4byte	0xd2
 3982 0203 02       		.byte	0x2
 3983 0204 23       		.byte	0x23
 3984 0205 0C       		.uleb128 0xc
 3985 0206 0C       		.uleb128 0xc
 3986 0207 43523200 		.ascii	"CR2\000"
 3987 020b 06       		.byte	0x6
 3988 020c FC01     		.2byte	0x1fc
 3989 020e D2000000 		.4byte	0xd2
 3990 0212 02       		.byte	0x2
 3991 0213 23       		.byte	0x23
 3992 0214 10       		.uleb128 0x10
 3993 0215 0C       		.uleb128 0xc
 3994 0216 43523300 		.ascii	"CR3\000"
 3995 021a 06       		.byte	0x6
 3996 021b FD01     		.2byte	0x1fd
 3997 021d D2000000 		.4byte	0xd2
 3998 0221 02       		.byte	0x2
 3999 0222 23       		.byte	0x23
 4000 0223 14       		.uleb128 0x14
 4001 0224 0D       		.uleb128 0xd
 4002 0225 16020000 		.4byte	.LASF28
 4003 0229 06       		.byte	0x6
 4004 022a FE01     		.2byte	0x1fe
 4005 022c D2000000 		.4byte	0xd2
 4006 0230 02       		.byte	0x2
 4007 0231 23       		.byte	0x23
 4008 0232 18       		.uleb128 0x18
 4009 0233 00       		.byte	0
 4010 0234 0E       		.uleb128 0xe
 4011 0235 29050000 		.4byte	.LASF29
 4012 0239 06       		.byte	0x6
 4013 023a FF01     		.2byte	0x1ff
 4014 023c C3010000 		.4byte	0x1c3
 4015 0240 0F       		.uleb128 0xf
 4016 0241 01       		.byte	0x1
 4017 0242 37000000 		.4byte	0x37
 4018 0246 07       		.byte	0x7
 4019 0247 98       		.byte	0x98
 4020 0248 59020000 		.4byte	0x259
 4021 024c 10       		.uleb128 0x10
 4022 024d 80070000 		.4byte	.LASF30
 4023 0251 00       		.byte	0
 4024 0252 11       		.uleb128 0x11
 4025 0253 53455400 		.ascii	"SET\000"
 4026 0257 01       		.byte	0x1
 4027 0258 00       		.byte	0
 4028 0259 03       		.uleb128 0x3
 4029 025a 90000000 		.4byte	.LASF31
 4030 025e 07       		.byte	0x7
 4031 025f 9B       		.byte	0x9b
 4032 0260 40020000 		.4byte	0x240
 4033 0264 02       		.uleb128 0x2
 4034 0265 08       		.byte	0x8
ARM GAS  /tmp/ccPoddoo.s 			page 141


 4035 0266 04       		.byte	0x4
 4036 0267 06060000 		.4byte	.LASF32
 4037 026b 0F       		.uleb128 0xf
 4038 026c 01       		.byte	0x1
 4039 026d 37000000 		.4byte	0x37
 4040 0271 08       		.byte	0x8
 4041 0272 2A       		.byte	0x2a
 4042 0273 90020000 		.4byte	0x290
 4043 0277 10       		.uleb128 0x10
 4044 0278 97040000 		.4byte	.LASF33
 4045 027c 00       		.byte	0
 4046 027d 10       		.uleb128 0x10
 4047 027e 260A0000 		.4byte	.LASF34
 4048 0282 01       		.byte	0x1
 4049 0283 10       		.uleb128 0x10
 4050 0284 CE000000 		.4byte	.LASF35
 4051 0288 02       		.byte	0x2
 4052 0289 10       		.uleb128 0x10
 4053 028a D1030000 		.4byte	.LASF36
 4054 028e 03       		.byte	0x3
 4055 028f 00       		.byte	0
 4056 0290 03       		.uleb128 0x3
 4057 0291 37050000 		.4byte	.LASF37
 4058 0295 08       		.byte	0x8
 4059 0296 2F       		.byte	0x2f
 4060 0297 6B020000 		.4byte	0x26b
 4061 029b 0F       		.uleb128 0xf
 4062 029c 01       		.byte	0x1
 4063 029d 37000000 		.4byte	0x37
 4064 02a1 08       		.byte	0x8
 4065 02a2 35       		.byte	0x35
 4066 02a3 B4020000 		.4byte	0x2b4
 4067 02a7 10       		.uleb128 0x10
 4068 02a8 A00B0000 		.4byte	.LASF38
 4069 02ac 00       		.byte	0
 4070 02ad 10       		.uleb128 0x10
 4071 02ae 5F010000 		.4byte	.LASF39
 4072 02b2 01       		.byte	0x1
 4073 02b3 00       		.byte	0
 4074 02b4 03       		.uleb128 0x3
 4075 02b5 4F020000 		.4byte	.LASF40
 4076 02b9 08       		.byte	0x8
 4077 02ba 38       		.byte	0x38
 4078 02bb 9B020000 		.4byte	0x29b
 4079 02bf 12       		.uleb128 0x12
 4080 02c0 1C       		.byte	0x1c
 4081 02c1 09       		.byte	0x9
 4082 02c2 30       		.byte	0x30
 4083 02c3 2A030000 		.4byte	0x32a
 4084 02c7 13       		.uleb128 0x13
 4085 02c8 72030000 		.4byte	.LASF41
 4086 02cc 09       		.byte	0x9
 4087 02cd 32       		.byte	0x32
 4088 02ce C7000000 		.4byte	0xc7
 4089 02d2 02       		.byte	0x2
 4090 02d3 23       		.byte	0x23
 4091 02d4 00       		.uleb128 0
ARM GAS  /tmp/ccPoddoo.s 			page 142


 4092 02d5 13       		.uleb128 0x13
 4093 02d6 B2020000 		.4byte	.LASF42
 4094 02da 09       		.byte	0x9
 4095 02db 36       		.byte	0x36
 4096 02dc C7000000 		.4byte	0xc7
 4097 02e0 02       		.byte	0x2
 4098 02e1 23       		.byte	0x23
 4099 02e2 04       		.uleb128 0x4
 4100 02e3 13       		.uleb128 0x13
 4101 02e4 39080000 		.4byte	.LASF43
 4102 02e8 09       		.byte	0x9
 4103 02e9 39       		.byte	0x39
 4104 02ea C7000000 		.4byte	0xc7
 4105 02ee 02       		.byte	0x2
 4106 02ef 23       		.byte	0x23
 4107 02f0 08       		.uleb128 0x8
 4108 02f1 13       		.uleb128 0x13
 4109 02f2 90030000 		.4byte	.LASF44
 4110 02f6 09       		.byte	0x9
 4111 02f7 3C       		.byte	0x3c
 4112 02f8 C7000000 		.4byte	0xc7
 4113 02fc 02       		.byte	0x2
 4114 02fd 23       		.byte	0x23
 4115 02fe 0C       		.uleb128 0xc
 4116 02ff 13       		.uleb128 0x13
 4117 0300 18050000 		.4byte	.LASF45
 4118 0304 09       		.byte	0x9
 4119 0305 3F       		.byte	0x3f
 4120 0306 C7000000 		.4byte	0xc7
 4121 030a 02       		.byte	0x2
 4122 030b 23       		.byte	0x23
 4123 030c 10       		.uleb128 0x10
 4124 030d 13       		.uleb128 0x13
 4125 030e 79090000 		.4byte	.LASF46
 4126 0312 09       		.byte	0x9
 4127 0313 42       		.byte	0x42
 4128 0314 C7000000 		.4byte	0xc7
 4129 0318 02       		.byte	0x2
 4130 0319 23       		.byte	0x23
 4131 031a 14       		.uleb128 0x14
 4132 031b 13       		.uleb128 0x13
 4133 031c E90A0000 		.4byte	.LASF47
 4134 0320 09       		.byte	0x9
 4135 0321 47       		.byte	0x47
 4136 0322 C7000000 		.4byte	0xc7
 4137 0326 02       		.byte	0x2
 4138 0327 23       		.byte	0x23
 4139 0328 18       		.uleb128 0x18
 4140 0329 00       		.byte	0
 4141 032a 03       		.uleb128 0x3
 4142 032b 80000000 		.4byte	.LASF48
 4143 032f 09       		.byte	0x9
 4144 0330 49       		.byte	0x49
 4145 0331 BF020000 		.4byte	0x2bf
 4146 0335 0F       		.uleb128 0xf
 4147 0336 01       		.byte	0x1
 4148 0337 37000000 		.4byte	0x37
ARM GAS  /tmp/ccPoddoo.s 			page 143


 4149 033b 09       		.byte	0x9
 4150 033c 4F       		.byte	0x4f
 4151 033d 5A030000 		.4byte	0x35a
 4152 0341 10       		.uleb128 0x10
 4153 0342 05040000 		.4byte	.LASF49
 4154 0346 00       		.byte	0
 4155 0347 10       		.uleb128 0x10
 4156 0348 7C050000 		.4byte	.LASF50
 4157 034c 01       		.byte	0x1
 4158 034d 10       		.uleb128 0x10
 4159 034e 06010000 		.4byte	.LASF51
 4160 0352 02       		.byte	0x2
 4161 0353 10       		.uleb128 0x10
 4162 0354 100A0000 		.4byte	.LASF52
 4163 0358 03       		.byte	0x3
 4164 0359 00       		.byte	0
 4165 035a 03       		.uleb128 0x3
 4166 035b E7070000 		.4byte	.LASF53
 4167 035f 09       		.byte	0x9
 4168 0360 54       		.byte	0x54
 4169 0361 35030000 		.4byte	0x335
 4170 0365 14       		.uleb128 0x14
 4171 0366 E8090000 		.4byte	.LASF83
 4172 036a 44       		.byte	0x44
 4173 036b 09       		.byte	0x9
 4174 036c 6F       		.byte	0x6f
 4175 036d 1A040000 		.4byte	0x41a
 4176 0371 13       		.uleb128 0x13
 4177 0372 57070000 		.4byte	.LASF54
 4178 0376 09       		.byte	0x9
 4179 0377 71       		.byte	0x71
 4180 0378 1A040000 		.4byte	0x41a
 4181 037c 02       		.byte	0x2
 4182 037d 23       		.byte	0x23
 4183 037e 00       		.uleb128 0
 4184 037f 13       		.uleb128 0x13
 4185 0380 3C070000 		.4byte	.LASF55
 4186 0384 09       		.byte	0x9
 4187 0385 73       		.byte	0x73
 4188 0386 2A030000 		.4byte	0x32a
 4189 038a 02       		.byte	0x2
 4190 038b 23       		.byte	0x23
 4191 038c 04       		.uleb128 0x4
 4192 038d 13       		.uleb128 0x13
 4193 038e 46030000 		.4byte	.LASF56
 4194 0392 09       		.byte	0x9
 4195 0393 75       		.byte	0x75
 4196 0394 B4020000 		.4byte	0x2b4
 4197 0398 02       		.byte	0x2
 4198 0399 23       		.byte	0x23
 4199 039a 20       		.uleb128 0x20
 4200 039b 13       		.uleb128 0x13
 4201 039c 15000000 		.4byte	.LASF57
 4202 03a0 09       		.byte	0x9
 4203 03a1 77       		.byte	0x77
 4204 03a2 5A030000 		.4byte	0x35a
 4205 03a6 02       		.byte	0x2
ARM GAS  /tmp/ccPoddoo.s 			page 144


 4206 03a7 23       		.byte	0x23
 4207 03a8 21       		.uleb128 0x21
 4208 03a9 13       		.uleb128 0x13
 4209 03aa 2E030000 		.4byte	.LASF58
 4210 03ae 09       		.byte	0x9
 4211 03af 79       		.byte	0x79
 4212 03b0 20040000 		.4byte	0x420
 4213 03b4 02       		.byte	0x2
 4214 03b5 23       		.byte	0x23
 4215 03b6 24       		.uleb128 0x24
 4216 03b7 13       		.uleb128 0x13
 4217 03b8 CE0B0000 		.4byte	.LASF59
 4218 03bc 09       		.byte	0x9
 4219 03bd 7B       		.byte	0x7b
 4220 03be 34040000 		.4byte	0x434
 4221 03c2 02       		.byte	0x2
 4222 03c3 23       		.byte	0x23
 4223 03c4 28       		.uleb128 0x28
 4224 03c5 13       		.uleb128 0x13
 4225 03c6 DD020000 		.4byte	.LASF60
 4226 03ca 09       		.byte	0x9
 4227 03cb 7D       		.byte	0x7d
 4228 03cc 34040000 		.4byte	0x434
 4229 03d0 02       		.byte	0x2
 4230 03d1 23       		.byte	0x23
 4231 03d2 2C       		.uleb128 0x2c
 4232 03d3 13       		.uleb128 0x13
 4233 03d4 65060000 		.4byte	.LASF61
 4234 03d8 09       		.byte	0x9
 4235 03d9 7F       		.byte	0x7f
 4236 03da 34040000 		.4byte	0x434
 4237 03de 02       		.byte	0x2
 4238 03df 23       		.byte	0x23
 4239 03e0 30       		.uleb128 0x30
 4240 03e1 13       		.uleb128 0x13
 4241 03e2 BC0B0000 		.4byte	.LASF62
 4242 03e6 09       		.byte	0x9
 4243 03e7 81       		.byte	0x81
 4244 03e8 34040000 		.4byte	0x434
 4245 03ec 02       		.byte	0x2
 4246 03ed 23       		.byte	0x23
 4247 03ee 34       		.uleb128 0x34
 4248 03ef 13       		.uleb128 0x13
 4249 03f0 00050000 		.4byte	.LASF63
 4250 03f4 09       		.byte	0x9
 4251 03f5 83       		.byte	0x83
 4252 03f6 D2000000 		.4byte	0xd2
 4253 03fa 02       		.byte	0x2
 4254 03fb 23       		.byte	0x23
 4255 03fc 38       		.uleb128 0x38
 4256 03fd 13       		.uleb128 0x13
 4257 03fe 49050000 		.4byte	.LASF64
 4258 0402 09       		.byte	0x9
 4259 0403 85       		.byte	0x85
 4260 0404 3A040000 		.4byte	0x43a
 4261 0408 02       		.byte	0x2
 4262 0409 23       		.byte	0x23
ARM GAS  /tmp/ccPoddoo.s 			page 145


 4263 040a 3C       		.uleb128 0x3c
 4264 040b 13       		.uleb128 0x13
 4265 040c 0E030000 		.4byte	.LASF65
 4266 0410 09       		.byte	0x9
 4267 0411 87       		.byte	0x87
 4268 0412 C7000000 		.4byte	0xc7
 4269 0416 02       		.byte	0x2
 4270 0417 23       		.byte	0x23
 4271 0418 40       		.uleb128 0x40
 4272 0419 00       		.byte	0
 4273 041a 15       		.uleb128 0x15
 4274 041b 04       		.byte	0x4
 4275 041c 83010000 		.4byte	0x183
 4276 0420 16       		.uleb128 0x16
 4277 0421 04       		.byte	0x4
 4278 0422 17       		.uleb128 0x17
 4279 0423 01       		.byte	0x1
 4280 0424 2E040000 		.4byte	0x42e
 4281 0428 18       		.uleb128 0x18
 4282 0429 2E040000 		.4byte	0x42e
 4283 042d 00       		.byte	0
 4284 042e 15       		.uleb128 0x15
 4285 042f 04       		.byte	0x4
 4286 0430 65030000 		.4byte	0x365
 4287 0434 15       		.uleb128 0x15
 4288 0435 04       		.byte	0x4
 4289 0436 22040000 		.4byte	0x422
 4290 043a 15       		.uleb128 0x15
 4291 043b 04       		.byte	0x4
 4292 043c B7010000 		.4byte	0x1b7
 4293 0440 03       		.uleb128 0x3
 4294 0441 53060000 		.4byte	.LASF66
 4295 0445 09       		.byte	0x9
 4296 0446 89       		.byte	0x89
 4297 0447 65030000 		.4byte	0x365
 4298 044b 15       		.uleb128 0x15
 4299 044c 04       		.byte	0x4
 4300 044d 40040000 		.4byte	0x440
 4301 0451 15       		.uleb128 0x15
 4302 0452 04       		.byte	0x4
 4303 0453 97000000 		.4byte	0x97
 4304 0457 12       		.uleb128 0x12
 4305 0458 1C       		.byte	0x1c
 4306 0459 0A       		.byte	0xa
 4307 045a 2F       		.byte	0x2f
 4308 045b C2040000 		.4byte	0x4c2
 4309 045f 13       		.uleb128 0x13
 4310 0460 1B020000 		.4byte	.LASF67
 4311 0464 0A       		.byte	0xa
 4312 0465 31       		.byte	0x31
 4313 0466 C7000000 		.4byte	0xc7
 4314 046a 02       		.byte	0x2
 4315 046b 23       		.byte	0x23
 4316 046c 00       		.uleb128 0
 4317 046d 13       		.uleb128 0x13
 4318 046e 2B090000 		.4byte	.LASF68
 4319 0472 0A       		.byte	0xa
ARM GAS  /tmp/ccPoddoo.s 			page 146


 4320 0473 36       		.byte	0x36
 4321 0474 C7000000 		.4byte	0xc7
 4322 0478 02       		.byte	0x2
 4323 0479 23       		.byte	0x23
 4324 047a 04       		.uleb128 0x4
 4325 047b 13       		.uleb128 0x13
 4326 047c 1B030000 		.4byte	.LASF69
 4327 0480 0A       		.byte	0xa
 4328 0481 39       		.byte	0x39
 4329 0482 C7000000 		.4byte	0xc7
 4330 0486 02       		.byte	0x2
 4331 0487 23       		.byte	0x23
 4332 0488 08       		.uleb128 0x8
 4333 0489 13       		.uleb128 0x13
 4334 048a 34040000 		.4byte	.LASF70
 4335 048e 0A       		.byte	0xa
 4336 048f 3C       		.byte	0x3c
 4337 0490 C7000000 		.4byte	0xc7
 4338 0494 02       		.byte	0x2
 4339 0495 23       		.byte	0x23
 4340 0496 0C       		.uleb128 0xc
 4341 0497 13       		.uleb128 0x13
 4342 0498 79090000 		.4byte	.LASF46
 4343 049c 0A       		.byte	0xa
 4344 049d 43       		.byte	0x43
 4345 049e C7000000 		.4byte	0xc7
 4346 04a2 02       		.byte	0x2
 4347 04a3 23       		.byte	0x23
 4348 04a4 10       		.uleb128 0x10
 4349 04a5 13       		.uleb128 0x13
 4350 04a6 BE0A0000 		.4byte	.LASF71
 4351 04aa 0A       		.byte	0xa
 4352 04ab 46       		.byte	0x46
 4353 04ac C7000000 		.4byte	0xc7
 4354 04b0 02       		.byte	0x2
 4355 04b1 23       		.byte	0x23
 4356 04b2 14       		.uleb128 0x14
 4357 04b3 13       		.uleb128 0x13
 4358 04b4 B6010000 		.4byte	.LASF72
 4359 04b8 0A       		.byte	0xa
 4360 04b9 49       		.byte	0x49
 4361 04ba C7000000 		.4byte	0xc7
 4362 04be 02       		.byte	0x2
 4363 04bf 23       		.byte	0x23
 4364 04c0 18       		.uleb128 0x18
 4365 04c1 00       		.byte	0
 4366 04c2 03       		.uleb128 0x3
 4367 04c3 740A0000 		.4byte	.LASF73
 4368 04c7 0A       		.byte	0xa
 4369 04c8 4C       		.byte	0x4c
 4370 04c9 57040000 		.4byte	0x457
 4371 04cd 0F       		.uleb128 0xf
 4372 04ce 01       		.byte	0x1
 4373 04cf 37000000 		.4byte	0x37
 4374 04d3 0A       		.byte	0xa
 4375 04d4 76       		.byte	0x76
 4376 04d5 0A050000 		.4byte	0x50a
ARM GAS  /tmp/ccPoddoo.s 			page 147


 4377 04d9 10       		.uleb128 0x10
 4378 04da BE090000 		.4byte	.LASF74
 4379 04de 00       		.byte	0
 4380 04df 10       		.uleb128 0x10
 4381 04e0 560B0000 		.4byte	.LASF75
 4382 04e4 20       		.byte	0x20
 4383 04e5 10       		.uleb128 0x10
 4384 04e6 6B0B0000 		.4byte	.LASF76
 4385 04ea 24       		.byte	0x24
 4386 04eb 10       		.uleb128 0x10
 4387 04ec 77060000 		.4byte	.LASF77
 4388 04f0 21       		.byte	0x21
 4389 04f1 10       		.uleb128 0x10
 4390 04f2 89090000 		.4byte	.LASF78
 4391 04f6 22       		.byte	0x22
 4392 04f7 10       		.uleb128 0x10
 4393 04f8 FC010000 		.4byte	.LASF79
 4394 04fc 23       		.byte	0x23
 4395 04fd 10       		.uleb128 0x10
 4396 04fe A70A0000 		.4byte	.LASF80
 4397 0502 A0       		.byte	0xa0
 4398 0503 10       		.uleb128 0x10
 4399 0504 95080000 		.4byte	.LASF81
 4400 0508 E0       		.byte	0xe0
 4401 0509 00       		.byte	0
 4402 050a 03       		.uleb128 0x3
 4403 050b 1B000000 		.4byte	.LASF82
 4404 050f 0A       		.byte	0xa
 4405 0510 88       		.byte	0x88
 4406 0511 CD040000 		.4byte	0x4cd
 4407 0515 06       		.uleb128 0x6
 4408 0516 0A050000 		.4byte	0x50a
 4409 051a 14       		.uleb128 0x14
 4410 051b DC050000 		.4byte	.LASF84
 4411 051f 40       		.byte	0x40
 4412 0520 0A       		.byte	0xa
 4413 0521 8D       		.byte	0x8d
 4414 0522 EB050000 		.4byte	0x5eb
 4415 0526 13       		.uleb128 0x13
 4416 0527 57070000 		.4byte	.LASF54
 4417 052b 0A       		.byte	0xa
 4418 052c 8F       		.byte	0x8f
 4419 052d EB050000 		.4byte	0x5eb
 4420 0531 02       		.byte	0x2
 4421 0532 23       		.byte	0x23
 4422 0533 00       		.uleb128 0
 4423 0534 13       		.uleb128 0x13
 4424 0535 3C070000 		.4byte	.LASF55
 4425 0539 0A       		.byte	0xa
 4426 053a 91       		.byte	0x91
 4427 053b C2040000 		.4byte	0x4c2
 4428 053f 02       		.byte	0x2
 4429 0540 23       		.byte	0x23
 4430 0541 04       		.uleb128 0x4
 4431 0542 13       		.uleb128 0x13
 4432 0543 85020000 		.4byte	.LASF85
 4433 0547 0A       		.byte	0xa
ARM GAS  /tmp/ccPoddoo.s 			page 148


 4434 0548 93       		.byte	0x93
 4435 0549 51040000 		.4byte	0x451
 4436 054d 02       		.byte	0x2
 4437 054e 23       		.byte	0x23
 4438 054f 20       		.uleb128 0x20
 4439 0550 13       		.uleb128 0x13
 4440 0551 CE040000 		.4byte	.LASF86
 4441 0555 0A       		.byte	0xa
 4442 0556 95       		.byte	0x95
 4443 0557 A7000000 		.4byte	0xa7
 4444 055b 02       		.byte	0x2
 4445 055c 23       		.byte	0x23
 4446 055d 24       		.uleb128 0x24
 4447 055e 13       		.uleb128 0x13
 4448 055f C3010000 		.4byte	.LASF87
 4449 0563 0A       		.byte	0xa
 4450 0564 97       		.byte	0x97
 4451 0565 B2000000 		.4byte	0xb2
 4452 0569 02       		.byte	0x2
 4453 056a 23       		.byte	0x23
 4454 056b 26       		.uleb128 0x26
 4455 056c 13       		.uleb128 0x13
 4456 056d F20A0000 		.4byte	.LASF88
 4457 0571 0A       		.byte	0xa
 4458 0572 99       		.byte	0x99
 4459 0573 51040000 		.4byte	0x451
 4460 0577 02       		.byte	0x2
 4461 0578 23       		.byte	0x23
 4462 0579 28       		.uleb128 0x28
 4463 057a 13       		.uleb128 0x13
 4464 057b B0040000 		.4byte	.LASF89
 4465 057f 0A       		.byte	0xa
 4466 0580 9B       		.byte	0x9b
 4467 0581 A7000000 		.4byte	0xa7
 4468 0585 02       		.byte	0x2
 4469 0586 23       		.byte	0x23
 4470 0587 2C       		.uleb128 0x2c
 4471 0588 13       		.uleb128 0x13
 4472 0589 4A0B0000 		.4byte	.LASF90
 4473 058d 0A       		.byte	0xa
 4474 058e 9D       		.byte	0x9d
 4475 058f B2000000 		.4byte	0xb2
 4476 0593 02       		.byte	0x2
 4477 0594 23       		.byte	0x23
 4478 0595 2E       		.uleb128 0x2e
 4479 0596 13       		.uleb128 0x13
 4480 0597 E0060000 		.4byte	.LASF91
 4481 059b 0A       		.byte	0xa
 4482 059c 9F       		.byte	0x9f
 4483 059d 4B040000 		.4byte	0x44b
 4484 05a1 02       		.byte	0x2
 4485 05a2 23       		.byte	0x23
 4486 05a3 30       		.uleb128 0x30
 4487 05a4 13       		.uleb128 0x13
 4488 05a5 A4030000 		.4byte	.LASF92
 4489 05a9 0A       		.byte	0xa
 4490 05aa A1       		.byte	0xa1
ARM GAS  /tmp/ccPoddoo.s 			page 149


 4491 05ab 4B040000 		.4byte	0x44b
 4492 05af 02       		.byte	0x2
 4493 05b0 23       		.byte	0x23
 4494 05b1 34       		.uleb128 0x34
 4495 05b2 13       		.uleb128 0x13
 4496 05b3 46030000 		.4byte	.LASF56
 4497 05b7 0A       		.byte	0xa
 4498 05b8 A3       		.byte	0xa3
 4499 05b9 B4020000 		.4byte	0x2b4
 4500 05bd 02       		.byte	0x2
 4501 05be 23       		.byte	0x23
 4502 05bf 38       		.uleb128 0x38
 4503 05c0 13       		.uleb128 0x13
 4504 05c1 45000000 		.4byte	.LASF93
 4505 05c5 0A       		.byte	0xa
 4506 05c6 A5       		.byte	0xa5
 4507 05c7 15050000 		.4byte	0x515
 4508 05cb 02       		.byte	0x2
 4509 05cc 23       		.byte	0x23
 4510 05cd 39       		.uleb128 0x39
 4511 05ce 13       		.uleb128 0x13
 4512 05cf B40B0000 		.4byte	.LASF94
 4513 05d3 0A       		.byte	0xa
 4514 05d4 A9       		.byte	0xa9
 4515 05d5 15050000 		.4byte	0x515
 4516 05d9 02       		.byte	0x2
 4517 05da 23       		.byte	0x23
 4518 05db 3A       		.uleb128 0x3a
 4519 05dc 13       		.uleb128 0x13
 4520 05dd 00050000 		.4byte	.LASF63
 4521 05e1 0A       		.byte	0xa
 4522 05e2 AC       		.byte	0xac
 4523 05e3 D2000000 		.4byte	0xd2
 4524 05e7 02       		.byte	0x2
 4525 05e8 23       		.byte	0x23
 4526 05e9 3C       		.uleb128 0x3c
 4527 05ea 00       		.byte	0
 4528 05eb 15       		.uleb128 0x15
 4529 05ec 04       		.byte	0x4
 4530 05ed 34020000 		.4byte	0x234
 4531 05f1 03       		.uleb128 0x3
 4532 05f2 69020000 		.4byte	.LASF95
 4533 05f6 0A       		.byte	0xa
 4534 05f7 BD       		.byte	0xbd
 4535 05f8 1A050000 		.4byte	0x51a
 4536 05fc 0F       		.uleb128 0xf
 4537 05fd 01       		.byte	0x1
 4538 05fe 37000000 		.4byte	0x37
 4539 0602 0B       		.byte	0xb
 4540 0603 33       		.byte	0x33
 4541 0604 21060000 		.4byte	0x621
 4542 0608 10       		.uleb128 0x10
 4543 0609 FB020000 		.4byte	.LASF96
 4544 060d 64       		.byte	0x64
 4545 060e 10       		.uleb128 0x10
 4546 060f A0090000 		.4byte	.LASF97
 4547 0613 0A       		.byte	0xa
ARM GAS  /tmp/ccPoddoo.s 			page 150


 4548 0614 10       		.uleb128 0x10
 4549 0615 84040000 		.4byte	.LASF98
 4550 0619 01       		.byte	0x1
 4551 061a 10       		.uleb128 0x10
 4552 061b E7060000 		.4byte	.LASF99
 4553 061f 01       		.byte	0x1
 4554 0620 00       		.byte	0
 4555 0621 03       		.uleb128 0x3
 4556 0622 31000000 		.4byte	.LASF100
 4557 0626 0B       		.byte	0xb
 4558 0627 38       		.byte	0x38
 4559 0628 FC050000 		.4byte	0x5fc
 4560 062c 08       		.uleb128 0x8
 4561 062d 61090000 		.4byte	.LASF101
 4562 0631 0B       		.byte	0xb
 4563 0632 3D       		.byte	0x3d
 4564 0633 C7000000 		.4byte	0xc7
 4565 0637 01       		.byte	0x1
 4566 0638 01       		.byte	0x1
 4567 0639 08       		.uleb128 0x8
 4568 063a 29040000 		.4byte	.LASF102
 4569 063e 0B       		.byte	0xb
 4570 063f 3E       		.byte	0x3e
 4571 0640 21060000 		.4byte	0x621
 4572 0644 01       		.byte	0x1
 4573 0645 01       		.byte	0x1
 4574 0646 19       		.uleb128 0x19
 4575 0647 F6030000 		.4byte	.LASF109
 4576 064b 01       		.byte	0x1
 4577 064c F70B     		.2byte	0xbf7
 4578 064e 01       		.byte	0x1
 4579 064f 1A000000 		.4byte	.LFB119
 4580 0653 8C000000 		.4byte	.LFE119
 4581 0657 00000000 		.4byte	.LLST0
 4582 065b 01       		.byte	0x1
 4583 065c A3060000 		.4byte	0x6a3
 4584 0660 1A       		.uleb128 0x1a
 4585 0661 86070000 		.4byte	.LASF107
 4586 0665 01       		.byte	0x1
 4587 0666 F70B     		.2byte	0xbf7
 4588 0668 A3060000 		.4byte	0x6a3
 4589 066c 20000000 		.4byte	.LLST1
 4590 0670 1B       		.uleb128 0x1b
 4591 0671 48020000 		.4byte	.LASF103
 4592 0675 01       		.byte	0x1
 4593 0676 F90B     		.2byte	0xbf9
 4594 0678 C7000000 		.4byte	0xc7
 4595 067c 3E000000 		.4byte	.LLST2
 4596 0680 1B       		.uleb128 0x1b
 4597 0681 06080000 		.4byte	.LASF104
 4598 0685 01       		.byte	0x1
 4599 0686 FA0B     		.2byte	0xbfa
 4600 0688 C7000000 		.4byte	0xc7
 4601 068c D1000000 		.4byte	.LLST3
 4602 0690 1C       		.uleb128 0x1c
 4603 0691 5C000000 		.4byte	.LVL8
 4604 0695 26170000 		.4byte	0x1726
ARM GAS  /tmp/ccPoddoo.s 			page 151


 4605 0699 1C       		.uleb128 0x1c
 4606 069a 86000000 		.4byte	.LVL11
 4607 069e 34170000 		.4byte	0x1734
 4608 06a2 00       		.byte	0
 4609 06a3 15       		.uleb128 0x15
 4610 06a4 04       		.byte	0x4
 4611 06a5 F1050000 		.4byte	0x5f1
 4612 06a9 1D       		.uleb128 0x1d
 4613 06aa 4C000000 		.4byte	.LASF105
 4614 06ae 01       		.byte	0x1
 4615 06af B00B     		.2byte	0xbb0
 4616 06b1 01       		.byte	0x1
 4617 06b2 90020000 		.4byte	0x290
 4618 06b6 01       		.byte	0x1
 4619 06b7 D4060000 		.4byte	0x6d4
 4620 06bb 1E       		.uleb128 0x1e
 4621 06bc 86070000 		.4byte	.LASF107
 4622 06c0 01       		.byte	0x1
 4623 06c1 B00B     		.2byte	0xbb0
 4624 06c3 A3060000 		.4byte	0x6a3
 4625 06c7 1F       		.uleb128 0x1f
 4626 06c8 746D7000 		.ascii	"tmp\000"
 4627 06cc 01       		.byte	0x1
 4628 06cd B20B     		.2byte	0xbb2
 4629 06cf D4060000 		.4byte	0x6d4
 4630 06d3 00       		.byte	0
 4631 06d4 15       		.uleb128 0x15
 4632 06d5 04       		.byte	0x4
 4633 06d6 A7000000 		.4byte	0xa7
 4634 06da 1D       		.uleb128 0x1d
 4635 06db FC090000 		.4byte	.LASF106
 4636 06df 01       		.byte	0x1
 4637 06e0 970B     		.2byte	0xb97
 4638 06e2 01       		.byte	0x1
 4639 06e3 90020000 		.4byte	0x290
 4640 06e7 01       		.byte	0x1
 4641 06e8 F9060000 		.4byte	0x6f9
 4642 06ec 1E       		.uleb128 0x1e
 4643 06ed 86070000 		.4byte	.LASF107
 4644 06f1 01       		.byte	0x1
 4645 06f2 970B     		.2byte	0xb97
 4646 06f4 A3060000 		.4byte	0x6a3
 4647 06f8 00       		.byte	0
 4648 06f9 1D       		.uleb128 0x1d
 4649 06fa 35030000 		.4byte	.LASF108
 4650 06fe 01       		.byte	0x1
 4651 06ff 680B     		.2byte	0xb68
 4652 0701 01       		.byte	0x1
 4653 0702 90020000 		.4byte	0x290
 4654 0706 01       		.byte	0x1
 4655 0707 24070000 		.4byte	0x724
 4656 070b 1E       		.uleb128 0x1e
 4657 070c 86070000 		.4byte	.LASF107
 4658 0710 01       		.byte	0x1
 4659 0711 680B     		.2byte	0xb68
 4660 0713 A3060000 		.4byte	0x6a3
 4661 0717 1F       		.uleb128 0x1f
ARM GAS  /tmp/ccPoddoo.s 			page 152


 4662 0718 746D7000 		.ascii	"tmp\000"
 4663 071c 01       		.byte	0x1
 4664 071d 6A0B     		.2byte	0xb6a
 4665 071f D4060000 		.4byte	0x6d4
 4666 0723 00       		.byte	0
 4667 0724 19       		.uleb128 0x19
 4668 0725 D9040000 		.4byte	.LASF110
 4669 0729 01       		.byte	0x1
 4670 072a 4F0B     		.2byte	0xb4f
 4671 072c 01       		.byte	0x1
 4672 072d 4C0C0000 		.4byte	.LFB115
 4673 0731 600C0000 		.4byte	.LFE115
 4674 0735 E4000000 		.4byte	.LLST121
 4675 0739 01       		.byte	0x1
 4676 073a 68070000 		.4byte	0x768
 4677 073e 1A       		.uleb128 0x1a
 4678 073f C0050000 		.4byte	.LASF111
 4679 0743 01       		.byte	0x1
 4680 0744 4F0B     		.2byte	0xb4f
 4681 0746 4B040000 		.4byte	0x44b
 4682 074a 04010000 		.4byte	.LLST122
 4683 074e 1B       		.uleb128 0x1b
 4684 074f 86070000 		.4byte	.LASF107
 4685 0753 01       		.byte	0x1
 4686 0754 510B     		.2byte	0xb51
 4687 0756 A3060000 		.4byte	0x6a3
 4688 075a 25010000 		.4byte	.LLST123
 4689 075e 1C       		.uleb128 0x1c
 4690 075f 5E0C0000 		.4byte	.LVL277
 4691 0763 290C0000 		.4byte	0xc29
 4692 0767 00       		.byte	0
 4693 0768 19       		.uleb128 0x19
 4694 0769 050B0000 		.4byte	.LASF112
 4695 076d 01       		.byte	0x1
 4696 076e 330B     		.2byte	0xb33
 4697 0770 01       		.byte	0x1
 4698 0771 E00B0000 		.4byte	.LFB114
 4699 0775 F40B0000 		.4byte	.LFE114
 4700 0779 38010000 		.4byte	.LLST116
 4701 077d 01       		.byte	0x1
 4702 077e AC070000 		.4byte	0x7ac
 4703 0782 1A       		.uleb128 0x1a
 4704 0783 C0050000 		.4byte	.LASF111
 4705 0787 01       		.byte	0x1
 4706 0788 330B     		.2byte	0xb33
 4707 078a 4B040000 		.4byte	0x44b
 4708 078e 58010000 		.4byte	.LLST117
 4709 0792 1B       		.uleb128 0x1b
 4710 0793 86070000 		.4byte	.LASF107
 4711 0797 01       		.byte	0x1
 4712 0798 350B     		.2byte	0xb35
 4713 079a A3060000 		.4byte	0x6a3
 4714 079e 79010000 		.4byte	.LLST118
 4715 07a2 1C       		.uleb128 0x1c
 4716 07a3 F20B0000 		.4byte	.LVL266
 4717 07a7 450C0000 		.4byte	0xc45
 4718 07ab 00       		.byte	0
ARM GAS  /tmp/ccPoddoo.s 			page 153


 4719 07ac 19       		.uleb128 0x19
 4720 07ad 40040000 		.4byte	.LASF113
 4721 07b1 01       		.byte	0x1
 4722 07b2 060B     		.2byte	0xb06
 4723 07b4 01       		.byte	0x1
 4724 07b5 400B0000 		.4byte	.LFB113
 4725 07b9 680B0000 		.4byte	.LFE113
 4726 07bd 8C010000 		.4byte	.LLST108
 4727 07c1 01       		.byte	0x1
 4728 07c2 F0070000 		.4byte	0x7f0
 4729 07c6 1A       		.uleb128 0x1a
 4730 07c7 C0050000 		.4byte	.LASF111
 4731 07cb 01       		.byte	0x1
 4732 07cc 060B     		.2byte	0xb06
 4733 07ce 4B040000 		.4byte	0x44b
 4734 07d2 AC010000 		.4byte	.LLST109
 4735 07d6 1B       		.uleb128 0x1b
 4736 07d7 86070000 		.4byte	.LASF107
 4737 07db 01       		.byte	0x1
 4738 07dc 080B     		.2byte	0xb08
 4739 07de A3060000 		.4byte	0x6a3
 4740 07e2 CD010000 		.4byte	.LLST110
 4741 07e6 1C       		.uleb128 0x1c
 4742 07e7 660B0000 		.4byte	.LVL253
 4743 07eb 600C0000 		.4byte	0xc60
 4744 07ef 00       		.byte	0
 4745 07f0 19       		.uleb128 0x19
 4746 07f1 A8050000 		.4byte	.LASF114
 4747 07f5 01       		.byte	0x1
 4748 07f6 D90A     		.2byte	0xad9
 4749 07f8 01       		.byte	0x1
 4750 07f9 680B0000 		.4byte	.LFB112
 4751 07fd 900B0000 		.4byte	.LFE112
 4752 0801 E0010000 		.4byte	.LLST111
 4753 0805 01       		.byte	0x1
 4754 0806 34080000 		.4byte	0x834
 4755 080a 1A       		.uleb128 0x1a
 4756 080b C0050000 		.4byte	.LASF111
 4757 080f 01       		.byte	0x1
 4758 0810 D90A     		.2byte	0xad9
 4759 0812 4B040000 		.4byte	0x44b
 4760 0816 00020000 		.4byte	.LLST112
 4761 081a 1B       		.uleb128 0x1b
 4762 081b 86070000 		.4byte	.LASF107
 4763 081f 01       		.byte	0x1
 4764 0820 DB0A     		.2byte	0xadb
 4765 0822 A3060000 		.4byte	0x6a3
 4766 0826 21020000 		.4byte	.LLST113
 4767 082a 1C       		.uleb128 0x1c
 4768 082b 8E0B0000 		.4byte	.LVL256
 4769 082f 600C0000 		.4byte	0xc60
 4770 0833 00       		.byte	0
 4771 0834 19       		.uleb128 0x19
 4772 0835 47090000 		.4byte	.LASF115
 4773 0839 01       		.byte	0x1
 4774 083a C10A     		.2byte	0xac1
 4775 083c 01       		.byte	0x1
ARM GAS  /tmp/ccPoddoo.s 			page 154


 4776 083d 880A0000 		.4byte	.LFB111
 4777 0841 980A0000 		.4byte	.LFE111
 4778 0845 34020000 		.4byte	.LLST102
 4779 0849 01       		.byte	0x1
 4780 084a 78080000 		.4byte	0x878
 4781 084e 1A       		.uleb128 0x1a
 4782 084f C0050000 		.4byte	.LASF111
 4783 0853 01       		.byte	0x1
 4784 0854 C10A     		.2byte	0xac1
 4785 0856 4B040000 		.4byte	0x44b
 4786 085a 54020000 		.4byte	.LLST103
 4787 085e 1B       		.uleb128 0x1b
 4788 085f 86070000 		.4byte	.LASF107
 4789 0863 01       		.byte	0x1
 4790 0864 C30A     		.2byte	0xac3
 4791 0866 A3060000 		.4byte	0x6a3
 4792 086a 75020000 		.4byte	.LLST104
 4793 086e 1C       		.uleb128 0x1c
 4794 086f 960A0000 		.4byte	.LVL239
 4795 0873 7B0C0000 		.4byte	0xc7b
 4796 0877 00       		.byte	0
 4797 0878 20       		.uleb128 0x20
 4798 0879 A3010000 		.4byte	.LASF116
 4799 087d 01       		.byte	0x1
 4800 087e B00A     		.2byte	0xab0
 4801 0880 01       		.byte	0x1
 4802 0881 00000000 		.4byte	.LFB110
 4803 0885 1A000000 		.4byte	.LFE110
 4804 0889 02       		.byte	0x2
 4805 088a 7D       		.byte	0x7d
 4806 088b 00       		.sleb128 0
 4807 088c 01       		.byte	0x1
 4808 088d A0080000 		.4byte	0x8a0
 4809 0891 21       		.uleb128 0x21
 4810 0892 86070000 		.4byte	.LASF107
 4811 0896 01       		.byte	0x1
 4812 0897 B00A     		.2byte	0xab0
 4813 0899 A3060000 		.4byte	0x6a3
 4814 089d 01       		.byte	0x1
 4815 089e 50       		.byte	0x50
 4816 089f 00       		.byte	0
 4817 08a0 22       		.uleb128 0x22
 4818 08a1 CF010000 		.4byte	.LASF187
 4819 08a5 01       		.byte	0x1
 4820 08a6 A20A     		.2byte	0xaa2
 4821 08a8 01       		.byte	0x1
 4822 08a9 01       		.byte	0x1
 4823 08aa BB080000 		.4byte	0x8bb
 4824 08ae 1E       		.uleb128 0x1e
 4825 08af 86070000 		.4byte	.LASF107
 4826 08b3 01       		.byte	0x1
 4827 08b4 A20A     		.2byte	0xaa2
 4828 08b6 A3060000 		.4byte	0x6a3
 4829 08ba 00       		.byte	0
 4830 08bb 1D       		.uleb128 0x1d
 4831 08bc A1060000 		.4byte	.LASF117
 4832 08c0 01       		.byte	0x1
ARM GAS  /tmp/ccPoddoo.s 			page 155


 4833 08c1 820A     		.2byte	0xa82
 4834 08c3 01       		.byte	0x1
 4835 08c4 90020000 		.4byte	0x290
 4836 08c8 01       		.byte	0x1
 4837 08c9 0A090000 		.4byte	0x90a
 4838 08cd 1E       		.uleb128 0x1e
 4839 08ce 86070000 		.4byte	.LASF107
 4840 08d2 01       		.byte	0x1
 4841 08d3 820A     		.2byte	0xa82
 4842 08d5 A3060000 		.4byte	0x6a3
 4843 08d9 1E       		.uleb128 0x1e
 4844 08da BC020000 		.4byte	.LASF118
 4845 08de 01       		.byte	0x1
 4846 08df 820A     		.2byte	0xa82
 4847 08e1 C7000000 		.4byte	0xc7
 4848 08e5 1E       		.uleb128 0x1e
 4849 08e6 AD0B0000 		.4byte	.LASF119
 4850 08ea 01       		.byte	0x1
 4851 08eb 820A     		.2byte	0xa82
 4852 08ed 59020000 		.4byte	0x259
 4853 08f1 1E       		.uleb128 0x1e
 4854 08f2 24030000 		.4byte	.LASF120
 4855 08f6 01       		.byte	0x1
 4856 08f7 820A     		.2byte	0xa82
 4857 08f9 C7000000 		.4byte	0xc7
 4858 08fd 1E       		.uleb128 0x1e
 4859 08fe 6A030000 		.4byte	.LASF121
 4860 0902 01       		.byte	0x1
 4861 0903 820A     		.2byte	0xa82
 4862 0905 C7000000 		.4byte	0xc7
 4863 0909 00       		.byte	0
 4864 090a 19       		.uleb128 0x19
 4865 090b CE050000 		.4byte	.LASF122
 4866 090f 01       		.byte	0x1
 4867 0910 590A     		.2byte	0xa59
 4868 0912 01       		.byte	0x1
 4869 0913 FC080000 		.4byte	.LFB107
 4870 0917 4A090000 		.4byte	.LFE107
 4871 091b 88020000 		.4byte	.LLST87
 4872 091f 01       		.byte	0x1
 4873 0920 90090000 		.4byte	0x990
 4874 0924 1A       		.uleb128 0x1a
 4875 0925 C0050000 		.4byte	.LASF111
 4876 0929 01       		.byte	0x1
 4877 092a 590A     		.2byte	0xa59
 4878 092c 4B040000 		.4byte	0x44b
 4879 0930 A8020000 		.4byte	.LLST88
 4880 0934 1B       		.uleb128 0x1b
 4881 0935 F1080000 		.4byte	.LASF123
 4882 0939 01       		.byte	0x1
 4883 093a 5B0A     		.2byte	0xa5b
 4884 093c C7000000 		.4byte	0xc7
 4885 0940 C9020000 		.4byte	.LLST89
 4886 0944 1B       		.uleb128 0x1b
 4887 0945 86070000 		.4byte	.LASF107
 4888 0949 01       		.byte	0x1
 4889 094a 5C0A     		.2byte	0xa5c
ARM GAS  /tmp/ccPoddoo.s 			page 156


 4890 094c A3060000 		.4byte	0x6a3
 4891 0950 07030000 		.4byte	.LLST90
 4892 0954 23       		.uleb128 0x23
 4893 0955 A0080000 		.4byte	0x8a0
 4894 0959 14090000 		.4byte	.LBB21
 4895 095d 22090000 		.4byte	.LBE21
 4896 0961 01       		.byte	0x1
 4897 0962 630A     		.2byte	0xa63
 4898 0964 72090000 		.4byte	0x972
 4899 0968 24       		.uleb128 0x24
 4900 0969 AE080000 		.4byte	0x8ae
 4901 096d 1A030000 		.4byte	.LLST91
 4902 0971 00       		.byte	0
 4903 0972 25       		.uleb128 0x25
 4904 0973 3A090000 		.4byte	.LVL197
 4905 0977 78080000 		.4byte	0x878
 4906 097b 86090000 		.4byte	0x986
 4907 097f 26       		.uleb128 0x26
 4908 0980 01       		.byte	0x1
 4909 0981 50       		.byte	0x50
 4910 0982 02       		.byte	0x2
 4911 0983 70       		.byte	0x70
 4912 0984 00       		.sleb128 0
 4913 0985 00       		.byte	0
 4914 0986 1C       		.uleb128 0x1c
 4915 0987 48090000 		.4byte	.LVL198
 4916 098b 7B0C0000 		.4byte	0xc7b
 4917 098f 00       		.byte	0
 4918 0990 19       		.uleb128 0x19
 4919 0991 12060000 		.4byte	.LASF124
 4920 0995 01       		.byte	0x1
 4921 0996 460A     		.2byte	0xa46
 4922 0998 01       		.byte	0x1
 4923 0999 F0080000 		.4byte	.LFB106
 4924 099d FA080000 		.4byte	.LFE106
 4925 09a1 2D030000 		.4byte	.LLST84
 4926 09a5 01       		.byte	0x1
 4927 09a6 D4090000 		.4byte	0x9d4
 4928 09aa 1A       		.uleb128 0x1a
 4929 09ab C0050000 		.4byte	.LASF111
 4930 09af 01       		.byte	0x1
 4931 09b0 460A     		.2byte	0xa46
 4932 09b2 4B040000 		.4byte	0x44b
 4933 09b6 4D030000 		.4byte	.LLST85
 4934 09ba 1B       		.uleb128 0x1b
 4935 09bb 86070000 		.4byte	.LASF107
 4936 09bf 01       		.byte	0x1
 4937 09c0 480A     		.2byte	0xa48
 4938 09c2 A3060000 		.4byte	0x6a3
 4939 09c6 6E030000 		.4byte	.LLST86
 4940 09ca 1C       		.uleb128 0x1c
 4941 09cb F8080000 		.4byte	.LVL187
 4942 09cf 960C0000 		.4byte	0xc96
 4943 09d3 00       		.byte	0
 4944 09d4 19       		.uleb128 0x19
 4945 09d5 8F010000 		.4byte	.LASF125
 4946 09d9 01       		.byte	0x1
ARM GAS  /tmp/ccPoddoo.s 			page 157


 4947 09da 240A     		.2byte	0xa24
 4948 09dc 01       		.byte	0x1
 4949 09dd 3A080000 		.4byte	.LFB105
 4950 09e1 72080000 		.4byte	.LFE105
 4951 09e5 91030000 		.4byte	.LLST77
 4952 09e9 01       		.byte	0x1
 4953 09ea 180A0000 		.4byte	0xa18
 4954 09ee 1A       		.uleb128 0x1a
 4955 09ef C0050000 		.4byte	.LASF111
 4956 09f3 01       		.byte	0x1
 4957 09f4 240A     		.2byte	0xa24
 4958 09f6 4B040000 		.4byte	0x44b
 4959 09fa B1030000 		.4byte	.LLST78
 4960 09fe 1B       		.uleb128 0x1b
 4961 09ff 86070000 		.4byte	.LASF107
 4962 0a03 01       		.byte	0x1
 4963 0a04 260A     		.2byte	0xa26
 4964 0a06 A3060000 		.4byte	0x6a3
 4965 0a0a D2030000 		.4byte	.LLST79
 4966 0a0e 1C       		.uleb128 0x1c
 4967 0a0f 70080000 		.4byte	.LVL173
 4968 0a13 B10C0000 		.4byte	0xcb1
 4969 0a17 00       		.byte	0
 4970 0a18 19       		.uleb128 0x19
 4971 0a19 24020000 		.4byte	.LASF126
 4972 0a1d 01       		.byte	0x1
 4973 0a1e 110A     		.2byte	0xa11
 4974 0a20 01       		.byte	0x1
 4975 0a21 2E080000 		.4byte	.LFB104
 4976 0a25 38080000 		.4byte	.LFE104
 4977 0a29 E5030000 		.4byte	.LLST74
 4978 0a2d 01       		.byte	0x1
 4979 0a2e 5C0A0000 		.4byte	0xa5c
 4980 0a32 1A       		.uleb128 0x1a
 4981 0a33 C0050000 		.4byte	.LASF111
 4982 0a37 01       		.byte	0x1
 4983 0a38 110A     		.2byte	0xa11
 4984 0a3a 4B040000 		.4byte	0x44b
 4985 0a3e 05040000 		.4byte	.LLST75
 4986 0a42 1B       		.uleb128 0x1b
 4987 0a43 86070000 		.4byte	.LASF107
 4988 0a47 01       		.byte	0x1
 4989 0a48 130A     		.2byte	0xa13
 4990 0a4a A3060000 		.4byte	0x6a3
 4991 0a4e 26040000 		.4byte	.LLST76
 4992 0a52 1C       		.uleb128 0x1c
 4993 0a53 36080000 		.4byte	.LVL169
 4994 0a57 CC0C0000 		.4byte	0xccc
 4995 0a5b 00       		.byte	0
 4996 0a5c 19       		.uleb128 0x19
 4997 0a5d D3090000 		.4byte	.LASF127
 4998 0a61 01       		.byte	0x1
 4999 0a62 EE09     		.2byte	0x9ee
 5000 0a64 01       		.byte	0x1
 5001 0a65 00080000 		.4byte	.LFB103
 5002 0a69 2C080000 		.4byte	.LFE103
 5003 0a6d 49040000 		.4byte	.LLST71
ARM GAS  /tmp/ccPoddoo.s 			page 158


 5004 0a71 01       		.byte	0x1
 5005 0a72 A00A0000 		.4byte	0xaa0
 5006 0a76 1A       		.uleb128 0x1a
 5007 0a77 C0050000 		.4byte	.LASF111
 5008 0a7b 01       		.byte	0x1
 5009 0a7c EE09     		.2byte	0x9ee
 5010 0a7e 4B040000 		.4byte	0x44b
 5011 0a82 69040000 		.4byte	.LLST72
 5012 0a86 1B       		.uleb128 0x1b
 5013 0a87 86070000 		.4byte	.LASF107
 5014 0a8b 01       		.byte	0x1
 5015 0a8c F009     		.2byte	0x9f0
 5016 0a8e A3060000 		.4byte	0x6a3
 5017 0a92 8A040000 		.4byte	.LLST73
 5018 0a96 1C       		.uleb128 0x1c
 5019 0a97 2A080000 		.4byte	.LVL166
 5020 0a9b E70C0000 		.4byte	0xce7
 5021 0a9f 00       		.byte	0
 5022 0aa0 27       		.uleb128 0x27
 5023 0aa1 01       		.byte	0x1
 5024 0aa2 36010000 		.4byte	.LASF128
 5025 0aa6 01       		.byte	0x1
 5026 0aa7 C209     		.2byte	0x9c2
 5027 0aa9 01       		.byte	0x1
 5028 0aaa C7000000 		.4byte	0xc7
 5029 0aae 500D0000 		.4byte	.LFB102
 5030 0ab2 540D0000 		.4byte	.LFE102
 5031 0ab6 02       		.byte	0x2
 5032 0ab7 7D       		.byte	0x7d
 5033 0ab8 00       		.sleb128 0
 5034 0ab9 01       		.byte	0x1
 5035 0aba CF0A0000 		.4byte	0xacf
 5036 0abe 1A       		.uleb128 0x1a
 5037 0abf 86070000 		.4byte	.LASF107
 5038 0ac3 01       		.byte	0x1
 5039 0ac4 C209     		.2byte	0x9c2
 5040 0ac6 A3060000 		.4byte	0x6a3
 5041 0aca B4040000 		.4byte	.LLST134
 5042 0ace 00       		.byte	0
 5043 0acf 27       		.uleb128 0x27
 5044 0ad0 01       		.byte	0x1
 5045 0ad1 9E040000 		.4byte	.LASF129
 5046 0ad5 01       		.byte	0x1
 5047 0ad6 B309     		.2byte	0x9b3
 5048 0ad8 01       		.byte	0x1
 5049 0ad9 0A050000 		.4byte	0x50a
 5050 0add 440D0000 		.4byte	.LFB101
 5051 0ae1 500D0000 		.4byte	.LFE101
 5052 0ae5 02       		.byte	0x2
 5053 0ae6 7D       		.byte	0x7d
 5054 0ae7 00       		.sleb128 0
 5055 0ae8 01       		.byte	0x1
 5056 0ae9 1E0B0000 		.4byte	0xb1e
 5057 0aed 1A       		.uleb128 0x1a
 5058 0aee 86070000 		.4byte	.LASF107
 5059 0af2 01       		.byte	0x1
 5060 0af3 B309     		.2byte	0x9b3
ARM GAS  /tmp/ccPoddoo.s 			page 159


 5061 0af5 A3060000 		.4byte	0x6a3
 5062 0af9 D5040000 		.4byte	.LLST131
 5063 0afd 1B       		.uleb128 0x1b
 5064 0afe 0B080000 		.4byte	.LASF130
 5065 0b02 01       		.byte	0x1
 5066 0b03 B509     		.2byte	0x9b5
 5067 0b05 C7000000 		.4byte	0xc7
 5068 0b09 F6040000 		.4byte	.LLST132
 5069 0b0d 1B       		.uleb128 0x1b
 5070 0b0e 11080000 		.4byte	.LASF131
 5071 0b12 01       		.byte	0x1
 5072 0b13 B509     		.2byte	0x9b5
 5073 0b15 C7000000 		.4byte	0xc7
 5074 0b19 15050000 		.4byte	.LLST133
 5075 0b1d 00       		.byte	0
 5076 0b1e 27       		.uleb128 0x27
 5077 0b1f 01       		.byte	0x1
 5078 0b20 A1070000 		.4byte	.LASF132
 5079 0b24 01       		.byte	0x1
 5080 0b25 7A09     		.2byte	0x97a
 5081 0b27 01       		.byte	0x1
 5082 0b28 90020000 		.4byte	0x290
 5083 0b2c 140D0000 		.4byte	.LFB100
 5084 0b30 440D0000 		.4byte	.LFE100
 5085 0b34 02       		.byte	0x2
 5086 0b35 7D       		.byte	0x7d
 5087 0b36 00       		.sleb128 0
 5088 0b37 01       		.byte	0x1
 5089 0b38 5D0B0000 		.4byte	0xb5d
 5090 0b3c 1A       		.uleb128 0x1a
 5091 0b3d 86070000 		.4byte	.LASF107
 5092 0b41 01       		.byte	0x1
 5093 0b42 7A09     		.2byte	0x97a
 5094 0b44 A3060000 		.4byte	0x6a3
 5095 0b48 34050000 		.4byte	.LLST129
 5096 0b4c 1B       		.uleb128 0x1b
 5097 0b4d 48020000 		.4byte	.LASF103
 5098 0b51 01       		.byte	0x1
 5099 0b52 7C09     		.2byte	0x97c
 5100 0b54 C7000000 		.4byte	0xc7
 5101 0b58 6E050000 		.4byte	.LLST130
 5102 0b5c 00       		.byte	0
 5103 0b5d 27       		.uleb128 0x27
 5104 0b5e 01       		.byte	0x1
 5105 0b5f E5000000 		.4byte	.LASF133
 5106 0b63 01       		.byte	0x1
 5107 0b64 5709     		.2byte	0x957
 5108 0b66 01       		.byte	0x1
 5109 0b67 90020000 		.4byte	0x290
 5110 0b6b E40C0000 		.4byte	.LFB99
 5111 0b6f 140D0000 		.4byte	.LFE99
 5112 0b73 02       		.byte	0x2
 5113 0b74 7D       		.byte	0x7d
 5114 0b75 00       		.sleb128 0
 5115 0b76 01       		.byte	0x1
 5116 0b77 9C0B0000 		.4byte	0xb9c
 5117 0b7b 1A       		.uleb128 0x1a
ARM GAS  /tmp/ccPoddoo.s 			page 160


 5118 0b7c 86070000 		.4byte	.LASF107
 5119 0b80 01       		.byte	0x1
 5120 0b81 5709     		.2byte	0x957
 5121 0b83 A3060000 		.4byte	0x6a3
 5122 0b87 A5050000 		.4byte	.LLST127
 5123 0b8b 1B       		.uleb128 0x1b
 5124 0b8c 48020000 		.4byte	.LASF103
 5125 0b90 01       		.byte	0x1
 5126 0b91 5909     		.2byte	0x959
 5127 0b93 C7000000 		.4byte	0xc7
 5128 0b97 DF050000 		.4byte	.LLST128
 5129 0b9b 00       		.byte	0
 5130 0b9c 27       		.uleb128 0x27
 5131 0b9d 01       		.byte	0x1
 5132 0b9e 60070000 		.4byte	.LASF134
 5133 0ba2 01       		.byte	0x1
 5134 0ba3 3C09     		.2byte	0x93c
 5135 0ba5 01       		.byte	0x1
 5136 0ba6 90020000 		.4byte	0x290
 5137 0baa B80C0000 		.4byte	.LFB98
 5138 0bae E40C0000 		.4byte	.LFE98
 5139 0bb2 02       		.byte	0x2
 5140 0bb3 7D       		.byte	0x7d
 5141 0bb4 00       		.sleb128 0
 5142 0bb5 01       		.byte	0x1
 5143 0bb6 CB0B0000 		.4byte	0xbcb
 5144 0bba 1A       		.uleb128 0x1a
 5145 0bbb 86070000 		.4byte	.LASF107
 5146 0bbf 01       		.byte	0x1
 5147 0bc0 3C09     		.2byte	0x93c
 5148 0bc2 A3060000 		.4byte	0x6a3
 5149 0bc6 16060000 		.4byte	.LLST126
 5150 0bca 00       		.byte	0
 5151 0bcb 27       		.uleb128 0x27
 5152 0bcc 01       		.byte	0x1
 5153 0bcd C80A0000 		.4byte	.LASF135
 5154 0bd1 01       		.byte	0x1
 5155 0bd2 2109     		.2byte	0x921
 5156 0bd4 01       		.byte	0x1
 5157 0bd5 90020000 		.4byte	0x290
 5158 0bd9 8C0C0000 		.4byte	.LFB97
 5159 0bdd B80C0000 		.4byte	.LFE97
 5160 0be1 02       		.byte	0x2
 5161 0be2 7D       		.byte	0x7d
 5162 0be3 00       		.sleb128 0
 5163 0be4 01       		.byte	0x1
 5164 0be5 FA0B0000 		.4byte	0xbfa
 5165 0be9 1A       		.uleb128 0x1a
 5166 0bea 86070000 		.4byte	.LASF107
 5167 0bee 01       		.byte	0x1
 5168 0bef 2109     		.2byte	0x921
 5169 0bf1 A3060000 		.4byte	0x6a3
 5170 0bf5 50060000 		.4byte	.LLST125
 5171 0bf9 00       		.byte	0
 5172 0bfa 27       		.uleb128 0x27
 5173 0bfb 01       		.byte	0x1
 5174 0bfc 6E000000 		.4byte	.LASF136
ARM GAS  /tmp/ccPoddoo.s 			page 161


 5175 0c00 01       		.byte	0x1
 5176 0c01 0609     		.2byte	0x906
 5177 0c03 01       		.byte	0x1
 5178 0c04 90020000 		.4byte	0x290
 5179 0c08 600C0000 		.4byte	.LFB96
 5180 0c0c 8C0C0000 		.4byte	.LFE96
 5181 0c10 02       		.byte	0x2
 5182 0c11 7D       		.byte	0x7d
 5183 0c12 00       		.sleb128 0
 5184 0c13 01       		.byte	0x1
 5185 0c14 290C0000 		.4byte	0xc29
 5186 0c18 1A       		.uleb128 0x1a
 5187 0c19 86070000 		.4byte	.LASF107
 5188 0c1d 01       		.byte	0x1
 5189 0c1e 0609     		.2byte	0x906
 5190 0c20 A3060000 		.4byte	0x6a3
 5191 0c24 8A060000 		.4byte	.LLST124
 5192 0c28 00       		.byte	0
 5193 0c29 28       		.uleb128 0x28
 5194 0c2a 01       		.byte	0x1
 5195 0c2b 90020000 		.4byte	.LASF188
 5196 0c2f 01       		.byte	0x1
 5197 0c30 DF08     		.2byte	0x8df
 5198 0c32 01       		.byte	0x1
 5199 0c33 01       		.byte	0x1
 5200 0c34 450C0000 		.4byte	0xc45
 5201 0c38 1E       		.uleb128 0x1e
 5202 0c39 86070000 		.4byte	.LASF107
 5203 0c3d 01       		.byte	0x1
 5204 0c3e DF08     		.2byte	0x8df
 5205 0c40 A3060000 		.4byte	0x6a3
 5206 0c44 00       		.byte	0
 5207 0c45 29       		.uleb128 0x29
 5208 0c46 01       		.byte	0x1
 5209 0c47 BD060000 		.4byte	.LASF137
 5210 0c4b 01       		.byte	0x1
 5211 0c4c D008     		.2byte	0x8d0
 5212 0c4e 01       		.byte	0x1
 5213 0c4f 600C0000 		.4byte	0xc60
 5214 0c53 1E       		.uleb128 0x1e
 5215 0c54 86070000 		.4byte	.LASF107
 5216 0c58 01       		.byte	0x1
 5217 0c59 D008     		.2byte	0x8d0
 5218 0c5b A3060000 		.4byte	0x6a3
 5219 0c5f 00       		.byte	0
 5220 0c60 29       		.uleb128 0x29
 5221 0c61 01       		.byte	0x1
 5222 0c62 D6080000 		.4byte	.LASF138
 5223 0c66 01       		.byte	0x1
 5224 0c67 C108     		.2byte	0x8c1
 5225 0c69 01       		.byte	0x1
 5226 0c6a 7B0C0000 		.4byte	0xc7b
 5227 0c6e 1E       		.uleb128 0x1e
 5228 0c6f 86070000 		.4byte	.LASF107
 5229 0c73 01       		.byte	0x1
 5230 0c74 C108     		.2byte	0x8c1
 5231 0c76 A3060000 		.4byte	0x6a3
ARM GAS  /tmp/ccPoddoo.s 			page 162


 5232 0c7a 00       		.byte	0
 5233 0c7b 29       		.uleb128 0x29
 5234 0c7c 01       		.byte	0x1
 5235 0c7d 4C0A0000 		.4byte	.LASF139
 5236 0c81 01       		.byte	0x1
 5237 0c82 B308     		.2byte	0x8b3
 5238 0c84 01       		.byte	0x1
 5239 0c85 960C0000 		.4byte	0xc96
 5240 0c89 1E       		.uleb128 0x1e
 5241 0c8a 86070000 		.4byte	.LASF107
 5242 0c8e 01       		.byte	0x1
 5243 0c8f B308     		.2byte	0x8b3
 5244 0c91 A3060000 		.4byte	0x6a3
 5245 0c95 00       		.byte	0
 5246 0c96 29       		.uleb128 0x29
 5247 0c97 01       		.byte	0x1
 5248 0c98 C1020000 		.4byte	.LASF140
 5249 0c9c 01       		.byte	0x1
 5250 0c9d A408     		.2byte	0x8a4
 5251 0c9f 01       		.byte	0x1
 5252 0ca0 B10C0000 		.4byte	0xcb1
 5253 0ca4 1E       		.uleb128 0x1e
 5254 0ca5 86070000 		.4byte	.LASF107
 5255 0ca9 01       		.byte	0x1
 5256 0caa A408     		.2byte	0x8a4
 5257 0cac A3060000 		.4byte	0x6a3
 5258 0cb0 00       		.byte	0
 5259 0cb1 29       		.uleb128 0x29
 5260 0cb2 01       		.byte	0x1
 5261 0cb3 21080000 		.4byte	.LASF141
 5262 0cb7 01       		.byte	0x1
 5263 0cb8 9508     		.2byte	0x895
 5264 0cba 01       		.byte	0x1
 5265 0cbb CC0C0000 		.4byte	0xccc
 5266 0cbf 1E       		.uleb128 0x1e
 5267 0cc0 86070000 		.4byte	.LASF107
 5268 0cc4 01       		.byte	0x1
 5269 0cc5 9508     		.2byte	0x895
 5270 0cc7 A3060000 		.4byte	0x6a3
 5271 0ccb 00       		.byte	0
 5272 0ccc 29       		.uleb128 0x29
 5273 0ccd 01       		.byte	0x1
 5274 0cce 300A0000 		.4byte	.LASF142
 5275 0cd2 01       		.byte	0x1
 5276 0cd3 8608     		.2byte	0x886
 5277 0cd5 01       		.byte	0x1
 5278 0cd6 E70C0000 		.4byte	0xce7
 5279 0cda 1E       		.uleb128 0x1e
 5280 0cdb 86070000 		.4byte	.LASF107
 5281 0cdf 01       		.byte	0x1
 5282 0ce0 8608     		.2byte	0x886
 5283 0ce2 A3060000 		.4byte	0x6a3
 5284 0ce6 00       		.byte	0
 5285 0ce7 29       		.uleb128 0x29
 5286 0ce8 01       		.byte	0x1
 5287 0ce9 90050000 		.4byte	.LASF143
 5288 0ced 01       		.byte	0x1
ARM GAS  /tmp/ccPoddoo.s 			page 163


 5289 0cee 7708     		.2byte	0x877
 5290 0cf0 01       		.byte	0x1
 5291 0cf1 020D0000 		.4byte	0xd02
 5292 0cf5 1E       		.uleb128 0x1e
 5293 0cf6 86070000 		.4byte	.LASF107
 5294 0cfa 01       		.byte	0x1
 5295 0cfb 7708     		.2byte	0x877
 5296 0cfd A3060000 		.4byte	0x6a3
 5297 0d01 00       		.byte	0
 5298 0d02 2A       		.uleb128 0x2a
 5299 0d03 01       		.byte	0x1
 5300 0d04 4B030000 		.4byte	.LASF189
 5301 0d08 01       		.byte	0x1
 5302 0d09 E507     		.2byte	0x7e5
 5303 0d0b 01       		.byte	0x1
 5304 0d0c 4A090000 		.4byte	.LFB87
 5305 0d10 880A0000 		.4byte	.LFE87
 5306 0d14 C4060000 		.4byte	.LLST92
 5307 0d18 350E0000 		.4byte	0xe35
 5308 0d1c 1A       		.uleb128 0x1a
 5309 0d1d 86070000 		.4byte	.LASF107
 5310 0d21 01       		.byte	0x1
 5311 0d22 E507     		.2byte	0x7e5
 5312 0d24 A3060000 		.4byte	0x6a3
 5313 0d28 14070000 		.4byte	.LLST93
 5314 0d2c 1B       		.uleb128 0x1b
 5315 0d2d C5050000 		.4byte	.LASF144
 5316 0d31 01       		.byte	0x1
 5317 0d32 E707     		.2byte	0x7e7
 5318 0d34 C7000000 		.4byte	0xc7
 5319 0d38 B4070000 		.4byte	.LLST94
 5320 0d3c 1B       		.uleb128 0x1b
 5321 0d3d 210B0000 		.4byte	.LASF145
 5322 0d41 01       		.byte	0x1
 5323 0d42 E807     		.2byte	0x7e8
 5324 0d44 C7000000 		.4byte	0xc7
 5325 0d48 E8070000 		.4byte	.LLST95
 5326 0d4c 1B       		.uleb128 0x1b
 5327 0d4d 19010000 		.4byte	.LASF146
 5328 0d51 01       		.byte	0x1
 5329 0d52 E907     		.2byte	0x7e9
 5330 0d54 C7000000 		.4byte	0xc7
 5331 0d58 27080000 		.4byte	.LLST96
 5332 0d5c 1B       		.uleb128 0x1b
 5333 0d5d F5040000 		.4byte	.LASF147
 5334 0d61 01       		.byte	0x1
 5335 0d62 EA07     		.2byte	0x7ea
 5336 0d64 C7000000 		.4byte	0xc7
 5337 0d68 45080000 		.4byte	.LLST97
 5338 0d6c 1B       		.uleb128 0x1b
 5339 0d6d F1080000 		.4byte	.LASF123
 5340 0d71 01       		.byte	0x1
 5341 0d72 EB07     		.2byte	0x7eb
 5342 0d74 C7000000 		.4byte	0xc7
 5343 0d78 89080000 		.4byte	.LLST98
 5344 0d7c 23       		.uleb128 0x23
 5345 0d7d F9060000 		.4byte	0x6f9
ARM GAS  /tmp/ccPoddoo.s 			page 164


 5346 0d81 1A0A0000 		.4byte	.LBB27
 5347 0d85 660A0000 		.4byte	.LBE27
 5348 0d89 01       		.byte	0x1
 5349 0d8a 6508     		.2byte	0x865
 5350 0d8c AD0D0000 		.4byte	0xdad
 5351 0d90 24       		.uleb128 0x24
 5352 0d91 0B070000 		.4byte	0x70b
 5353 0d95 E2080000 		.4byte	.LLST99
 5354 0d99 2B       		.uleb128 0x2b
 5355 0d9a 1A0A0000 		.4byte	.LBB28
 5356 0d9e 660A0000 		.4byte	.LBE28
 5357 0da2 2C       		.uleb128 0x2c
 5358 0da3 17070000 		.4byte	0x717
 5359 0da7 F5080000 		.4byte	.LLST100
 5360 0dab 00       		.byte	0
 5361 0dac 00       		.byte	0
 5362 0dad 23       		.uleb128 0x23
 5363 0dae DA060000 		.4byte	0x6da
 5364 0db2 6E0A0000 		.4byte	.LBB29
 5365 0db6 880A0000 		.4byte	.LBE29
 5366 0dba 01       		.byte	0x1
 5367 0dbb 6C08     		.2byte	0x86c
 5368 0dbd DB0D0000 		.4byte	0xddb
 5369 0dc1 24       		.uleb128 0x24
 5370 0dc2 EC060000 		.4byte	0x6ec
 5371 0dc6 2B090000 		.4byte	.LLST101
 5372 0dca 2D       		.uleb128 0x2d
 5373 0dcb 820A0000 		.4byte	.LVL235
 5374 0dcf E70C0000 		.4byte	0xce7
 5375 0dd3 26       		.uleb128 0x26
 5376 0dd4 01       		.byte	0x1
 5377 0dd5 50       		.byte	0x50
 5378 0dd6 02       		.byte	0x2
 5379 0dd7 74       		.byte	0x74
 5380 0dd8 00       		.sleb128 0
 5381 0dd9 00       		.byte	0
 5382 0dda 00       		.byte	0
 5383 0ddb 2E       		.uleb128 0x2e
 5384 0ddc 68090000 		.4byte	.LVL204
 5385 0de0 01       		.byte	0x1
 5386 0de1 A9060000 		.4byte	0x6a9
 5387 0de5 F10D0000 		.4byte	0xdf1
 5388 0de9 26       		.uleb128 0x26
 5389 0dea 01       		.byte	0x1
 5390 0deb 50       		.byte	0x50
 5391 0dec 03       		.byte	0x3
 5392 0ded F3       		.byte	0xf3
 5393 0dee 01       		.uleb128 0x1
 5394 0def 50       		.byte	0x50
 5395 0df0 00       		.byte	0
 5396 0df1 25       		.uleb128 0x25
 5397 0df2 C2090000 		.4byte	.LVL207
 5398 0df6 A9060000 		.4byte	0x6a9
 5399 0dfa 050E0000 		.4byte	0xe05
 5400 0dfe 26       		.uleb128 0x26
 5401 0dff 01       		.byte	0x1
 5402 0e00 50       		.byte	0x50
ARM GAS  /tmp/ccPoddoo.s 			page 165


 5403 0e01 02       		.byte	0x2
 5404 0e02 74       		.byte	0x74
 5405 0e03 00       		.sleb128 0
 5406 0e04 00       		.byte	0
 5407 0e05 1C       		.uleb128 0x1c
 5408 0e06 D8090000 		.4byte	.LVL212
 5409 0e0a 78080000 		.4byte	0x878
 5410 0e0e 1C       		.uleb128 0x1c
 5411 0e0f F4090000 		.4byte	.LVL214
 5412 0e13 42170000 		.4byte	0x1742
 5413 0e17 25       		.uleb128 0x25
 5414 0e18 080A0000 		.4byte	.LVL217
 5415 0e1c 7B0C0000 		.4byte	0xc7b
 5416 0e20 2B0E0000 		.4byte	0xe2b
 5417 0e24 26       		.uleb128 0x26
 5418 0e25 01       		.byte	0x1
 5419 0e26 50       		.byte	0x50
 5420 0e27 02       		.byte	0x2
 5421 0e28 74       		.byte	0x74
 5422 0e29 00       		.sleb128 0
 5423 0e2a 00       		.byte	0
 5424 0e2b 1C       		.uleb128 0x1c
 5425 0e2c 0E0A0000 		.4byte	.LVL219
 5426 0e30 7B0C0000 		.4byte	0xc7b
 5427 0e34 00       		.byte	0
 5428 0e35 2F       		.uleb128 0x2f
 5429 0e36 01       		.byte	0x1
 5430 0e37 3A060000 		.4byte	.LASF148
 5431 0e3b 01       		.byte	0x1
 5432 0e3c 9F07     		.2byte	0x79f
 5433 0e3e 01       		.byte	0x1
 5434 0e3f 90020000 		.4byte	0x290
 5435 0e43 F60B0000 		.4byte	.LFB86
 5436 0e47 4C0C0000 		.4byte	.LFE86
 5437 0e4b 3E090000 		.4byte	.LLST119
 5438 0e4f 01       		.byte	0x1
 5439 0e50 770E0000 		.4byte	0xe77
 5440 0e54 1A       		.uleb128 0x1a
 5441 0e55 86070000 		.4byte	.LASF107
 5442 0e59 01       		.byte	0x1
 5443 0e5a 9F07     		.2byte	0x79f
 5444 0e5c A3060000 		.4byte	0x6a3
 5445 0e60 5E090000 		.4byte	.LLST120
 5446 0e64 1C       		.uleb128 0x1c
 5447 0e65 2A0C0000 		.4byte	.LVL270
 5448 0e69 42170000 		.4byte	0x1742
 5449 0e6d 1C       		.uleb128 0x1c
 5450 0e6e 420C0000 		.4byte	.LVL273
 5451 0e72 290C0000 		.4byte	0xc29
 5452 0e76 00       		.byte	0
 5453 0e77 2F       		.uleb128 0x2f
 5454 0e78 01       		.byte	0x1
 5455 0e79 6A040000 		.4byte	.LASF149
 5456 0e7d 01       		.byte	0x1
 5457 0e7e 5207     		.2byte	0x752
 5458 0e80 01       		.byte	0x1
 5459 0e81 90020000 		.4byte	0x290
ARM GAS  /tmp/ccPoddoo.s 			page 166


 5460 0e85 920B0000 		.4byte	.LFB85
 5461 0e89 E00B0000 		.4byte	.LFE85
 5462 0e8d 9D090000 		.4byte	.LLST114
 5463 0e91 01       		.byte	0x1
 5464 0e92 B90E0000 		.4byte	0xeb9
 5465 0e96 1A       		.uleb128 0x1a
 5466 0e97 86070000 		.4byte	.LASF107
 5467 0e9b 01       		.byte	0x1
 5468 0e9c 5207     		.2byte	0x752
 5469 0e9e A3060000 		.4byte	0x6a3
 5470 0ea2 BD090000 		.4byte	.LLST115
 5471 0ea6 1C       		.uleb128 0x1c
 5472 0ea7 BE0B0000 		.4byte	.LVL259
 5473 0eab 42170000 		.4byte	0x1742
 5474 0eaf 1C       		.uleb128 0x1c
 5475 0eb0 D60B0000 		.4byte	.LVL262
 5476 0eb4 450C0000 		.4byte	0xc45
 5477 0eb8 00       		.byte	0
 5478 0eb9 30       		.uleb128 0x30
 5479 0eba 01       		.byte	0x1
 5480 0ebb 16070000 		.4byte	.LASF150
 5481 0ebf 01       		.byte	0x1
 5482 0ec0 D206     		.2byte	0x6d2
 5483 0ec2 01       		.byte	0x1
 5484 0ec3 90020000 		.4byte	0x290
 5485 0ec7 9A0A0000 		.4byte	.LFB84
 5486 0ecb 400B0000 		.4byte	.LFE84
 5487 0ecf FC090000 		.4byte	.LLST105
 5488 0ed3 01       		.byte	0x1
 5489 0ed4 1F0F0000 		.4byte	0xf1f
 5490 0ed8 1A       		.uleb128 0x1a
 5491 0ed9 86070000 		.4byte	.LASF107
 5492 0edd 01       		.byte	0x1
 5493 0ede D206     		.2byte	0x6d2
 5494 0ee0 A3060000 		.4byte	0x6a3
 5495 0ee4 1C0A0000 		.4byte	.LLST106
 5496 0ee8 1B       		.uleb128 0x1b
 5497 0ee9 5F020000 		.4byte	.LASF151
 5498 0eed 01       		.byte	0x1
 5499 0eee D406     		.2byte	0x6d4
 5500 0ef0 C7000000 		.4byte	0xc7
 5501 0ef4 480A0000 		.4byte	.LLST107
 5502 0ef8 1C       		.uleb128 0x1c
 5503 0ef9 F00A0000 		.4byte	.LVL243
 5504 0efd 42170000 		.4byte	0x1742
 5505 0f01 25       		.uleb128 0x25
 5506 0f02 100B0000 		.4byte	.LVL245
 5507 0f06 600C0000 		.4byte	0xc60
 5508 0f0a 150F0000 		.4byte	0xf15
 5509 0f0e 26       		.uleb128 0x26
 5510 0f0f 01       		.byte	0x1
 5511 0f10 50       		.byte	0x50
 5512 0f11 02       		.byte	0x2
 5513 0f12 74       		.byte	0x74
 5514 0f13 00       		.sleb128 0
 5515 0f14 00       		.byte	0
 5516 0f15 1C       		.uleb128 0x1c
ARM GAS  /tmp/ccPoddoo.s 			page 167


 5517 0f16 220B0000 		.4byte	.LVL247
 5518 0f1a 42170000 		.4byte	0x1742
 5519 0f1e 00       		.byte	0
 5520 0f1f 30       		.uleb128 0x30
 5521 0f20 01       		.byte	0x1
 5522 0f21 20010000 		.4byte	.LASF152
 5523 0f25 01       		.byte	0x1
 5524 0f26 9C06     		.2byte	0x69c
 5525 0f28 01       		.byte	0x1
 5526 0f29 90020000 		.4byte	0x290
 5527 0f2d AE070000 		.4byte	.LFB83
 5528 0f31 FE070000 		.4byte	.LFE83
 5529 0f35 7E0A0000 		.4byte	.LLST69
 5530 0f39 01       		.byte	0x1
 5531 0f3a 610F0000 		.4byte	0xf61
 5532 0f3e 1A       		.uleb128 0x1a
 5533 0f3f 86070000 		.4byte	.LASF107
 5534 0f43 01       		.byte	0x1
 5535 0f44 9C06     		.2byte	0x69c
 5536 0f46 A3060000 		.4byte	0x6a3
 5537 0f4a 9E0A0000 		.4byte	.LLST70
 5538 0f4e 1C       		.uleb128 0x1c
 5539 0f4f DE070000 		.4byte	.LVL158
 5540 0f53 50170000 		.4byte	0x1750
 5541 0f57 1C       		.uleb128 0x1c
 5542 0f58 E6070000 		.4byte	.LVL159
 5543 0f5c 5E170000 		.4byte	0x175e
 5544 0f60 00       		.byte	0
 5545 0f61 30       		.uleb128 0x30
 5546 0f62 01       		.byte	0x1
 5547 0f63 850A0000 		.4byte	.LASF153
 5548 0f67 01       		.byte	0x1
 5549 0f68 6906     		.2byte	0x669
 5550 0f6a 01       		.byte	0x1
 5551 0f6b 90020000 		.4byte	0x290
 5552 0f6f 66070000 		.4byte	.LFB82
 5553 0f73 AE070000 		.4byte	.LFE82
 5554 0f77 BC0A0000 		.4byte	.LLST67
 5555 0f7b 01       		.byte	0x1
 5556 0f7c A30F0000 		.4byte	0xfa3
 5557 0f80 1A       		.uleb128 0x1a
 5558 0f81 86070000 		.4byte	.LASF107
 5559 0f85 01       		.byte	0x1
 5560 0f86 6906     		.2byte	0x669
 5561 0f88 A3060000 		.4byte	0x6a3
 5562 0f8c DC0A0000 		.4byte	.LLST68
 5563 0f90 1C       		.uleb128 0x1c
 5564 0f91 8E070000 		.4byte	.LVL153
 5565 0f95 50170000 		.4byte	0x1750
 5566 0f99 1C       		.uleb128 0x1c
 5567 0f9a 96070000 		.4byte	.LVL154
 5568 0f9e 5E170000 		.4byte	0x175e
 5569 0fa2 00       		.byte	0
 5570 0fa3 30       		.uleb128 0x30
 5571 0fa4 01       		.byte	0x1
 5572 0fa5 3B0B0000 		.4byte	.LASF154
 5573 0fa9 01       		.byte	0x1
ARM GAS  /tmp/ccPoddoo.s 			page 168


 5574 0faa 1706     		.2byte	0x617
 5575 0fac 01       		.byte	0x1
 5576 0fad 90020000 		.4byte	0x290
 5577 0fb1 E6060000 		.4byte	.LFB81
 5578 0fb5 66070000 		.4byte	.LFE81
 5579 0fb9 FA0A0000 		.4byte	.LLST65
 5580 0fbd 01       		.byte	0x1
 5581 0fbe F70F0000 		.4byte	0xff7
 5582 0fc2 1A       		.uleb128 0x1a
 5583 0fc3 86070000 		.4byte	.LASF107
 5584 0fc7 01       		.byte	0x1
 5585 0fc8 1706     		.2byte	0x617
 5586 0fca A3060000 		.4byte	0x6a3
 5587 0fce 1A0B0000 		.4byte	.LLST66
 5588 0fd2 1C       		.uleb128 0x1c
 5589 0fd3 16070000 		.4byte	.LVL146
 5590 0fd7 50170000 		.4byte	0x1750
 5591 0fdb 1C       		.uleb128 0x1c
 5592 0fdc 1E070000 		.4byte	.LVL147
 5593 0fe0 5E170000 		.4byte	0x175e
 5594 0fe4 1C       		.uleb128 0x1c
 5595 0fe5 46070000 		.4byte	.LVL149
 5596 0fe9 50170000 		.4byte	0x1750
 5597 0fed 1C       		.uleb128 0x1c
 5598 0fee 4E070000 		.4byte	.LVL150
 5599 0ff2 5E170000 		.4byte	0x175e
 5600 0ff6 00       		.byte	0
 5601 0ff7 30       		.uleb128 0x30
 5602 0ff8 01       		.byte	0x1
 5603 0ff9 41070000 		.4byte	.LASF155
 5604 0ffd 01       		.byte	0x1
 5605 0ffe E305     		.2byte	0x5e3
 5606 1000 01       		.byte	0x1
 5607 1001 90020000 		.4byte	0x290
 5608 1005 88060000 		.4byte	.LFB80
 5609 1009 E6060000 		.4byte	.LFE80
 5610 100d 380B0000 		.4byte	.LLST61
 5611 1011 01       		.byte	0x1
 5612 1012 77100000 		.4byte	0x1077
 5613 1016 1A       		.uleb128 0x1a
 5614 1017 86070000 		.4byte	.LASF107
 5615 101b 01       		.byte	0x1
 5616 101c E305     		.2byte	0x5e3
 5617 101e A3060000 		.4byte	0x6a3
 5618 1022 580B0000 		.4byte	.LLST62
 5619 1026 1B       		.uleb128 0x1b
 5620 1027 F1080000 		.4byte	.LASF123
 5621 102b 01       		.byte	0x1
 5622 102c E505     		.2byte	0x5e5
 5623 102e C7000000 		.4byte	0xc7
 5624 1032 760B0000 		.4byte	.LLST63
 5625 1036 23       		.uleb128 0x23
 5626 1037 A0080000 		.4byte	0x8a0
 5627 103b AC060000 		.4byte	.LBB11
 5628 103f BC060000 		.4byte	.LBE11
 5629 1043 01       		.byte	0x1
 5630 1044 F705     		.2byte	0x5f7
ARM GAS  /tmp/ccPoddoo.s 			page 169


 5631 1046 54100000 		.4byte	0x1054
 5632 104a 24       		.uleb128 0x24
 5633 104b AE080000 		.4byte	0x8ae
 5634 104f B40B0000 		.4byte	.LLST64
 5635 1053 00       		.byte	0
 5636 1054 1C       		.uleb128 0x1c
 5637 1055 AC060000 		.4byte	.LVL138
 5638 1059 50170000 		.4byte	0x1750
 5639 105d 1C       		.uleb128 0x1c
 5640 105e DC060000 		.4byte	.LVL142
 5641 1062 50170000 		.4byte	0x1750
 5642 1066 2D       		.uleb128 0x2d
 5643 1067 E2060000 		.4byte	.LVL143
 5644 106b 78080000 		.4byte	0x878
 5645 106f 26       		.uleb128 0x26
 5646 1070 01       		.byte	0x1
 5647 1071 50       		.byte	0x50
 5648 1072 02       		.byte	0x2
 5649 1073 70       		.byte	0x70
 5650 1074 00       		.sleb128 0
 5651 1075 00       		.byte	0
 5652 1076 00       		.byte	0
 5653 1077 30       		.uleb128 0x30
 5654 1078 01       		.byte	0x1
 5655 1079 280B0000 		.4byte	.LASF156
 5656 107d 01       		.byte	0x1
 5657 107e BF05     		.2byte	0x5bf
 5658 1080 01       		.byte	0x1
 5659 1081 90020000 		.4byte	0x290
 5660 1085 26060000 		.4byte	.LFB79
 5661 1089 88060000 		.4byte	.LFE79
 5662 108d C70B0000 		.4byte	.LLST59
 5663 1091 01       		.byte	0x1
 5664 1092 C0100000 		.4byte	0x10c0
 5665 1096 1A       		.uleb128 0x1a
 5666 1097 86070000 		.4byte	.LASF107
 5667 109b 01       		.byte	0x1
 5668 109c BF05     		.2byte	0x5bf
 5669 109e A3060000 		.4byte	0x6a3
 5670 10a2 FF0B0000 		.4byte	.LLST60
 5671 10a6 2B       		.uleb128 0x2b
 5672 10a7 50060000 		.4byte	.LBB8
 5673 10ab 60060000 		.4byte	.LBE8
 5674 10af 31       		.uleb128 0x31
 5675 10b0 48020000 		.4byte	.LASF103
 5676 10b4 01       		.byte	0x1
 5677 10b5 CD05     		.2byte	0x5cd
 5678 10b7 D2000000 		.4byte	0xd2
 5679 10bb 02       		.byte	0x2
 5680 10bc 91       		.byte	0x91
 5681 10bd 7C       		.sleb128 -4
 5682 10be 00       		.byte	0
 5683 10bf 00       		.byte	0
 5684 10c0 27       		.uleb128 0x27
 5685 10c1 01       		.byte	0x1
 5686 10c2 5C000000 		.4byte	.LASF157
 5687 10c6 01       		.byte	0x1
ARM GAS  /tmp/ccPoddoo.s 			page 170


 5688 10c7 9A05     		.2byte	0x59a
 5689 10c9 01       		.byte	0x1
 5690 10ca 90020000 		.4byte	0x290
 5691 10ce CC050000 		.4byte	.LFB78
 5692 10d2 26060000 		.4byte	.LFE78
 5693 10d6 02       		.byte	0x2
 5694 10d7 7D       		.byte	0x7d
 5695 10d8 00       		.sleb128 0
 5696 10d9 01       		.byte	0x1
 5697 10da FF100000 		.4byte	0x10ff
 5698 10de 1A       		.uleb128 0x1a
 5699 10df 86070000 		.4byte	.LASF107
 5700 10e3 01       		.byte	0x1
 5701 10e4 9A05     		.2byte	0x59a
 5702 10e6 A3060000 		.4byte	0x6a3
 5703 10ea 390C0000 		.4byte	.LLST57
 5704 10ee 1B       		.uleb128 0x1b
 5705 10ef F1080000 		.4byte	.LASF123
 5706 10f3 01       		.byte	0x1
 5707 10f4 9C05     		.2byte	0x59c
 5708 10f6 C7000000 		.4byte	0xc7
 5709 10fa 730C0000 		.4byte	.LLST58
 5710 10fe 00       		.byte	0
 5711 10ff 30       		.uleb128 0x30
 5712 1100 01       		.byte	0x1
 5713 1101 25060000 		.4byte	.LASF158
 5714 1105 01       		.byte	0x1
 5715 1106 5705     		.2byte	0x557
 5716 1108 01       		.byte	0x1
 5717 1109 90020000 		.4byte	0x290
 5718 110d 3C050000 		.4byte	.LFB77
 5719 1111 CC050000 		.4byte	.LFE77
 5720 1115 BD0C0000 		.4byte	.LLST52
 5721 1119 01       		.byte	0x1
 5722 111a 8F110000 		.4byte	0x118f
 5723 111e 1A       		.uleb128 0x1a
 5724 111f 86070000 		.4byte	.LASF107
 5725 1123 01       		.byte	0x1
 5726 1124 5705     		.2byte	0x557
 5727 1126 A3060000 		.4byte	0x6a3
 5728 112a F50C0000 		.4byte	.LLST53
 5729 112e 1A       		.uleb128 0x1a
 5730 112f 77010000 		.4byte	.LASF159
 5731 1133 01       		.byte	0x1
 5732 1134 5705     		.2byte	0x557
 5733 1136 51040000 		.4byte	0x451
 5734 113a 3F0D0000 		.4byte	.LLST54
 5735 113e 1A       		.uleb128 0x1a
 5736 113f 52070000 		.4byte	.LASF160
 5737 1143 01       		.byte	0x1
 5738 1144 5705     		.2byte	0x557
 5739 1146 A7000000 		.4byte	0xa7
 5740 114a 760D0000 		.4byte	.LLST55
 5741 114e 32       		.uleb128 0x32
 5742 114f 746D7000 		.ascii	"tmp\000"
 5743 1153 01       		.byte	0x1
 5744 1154 5905     		.2byte	0x559
ARM GAS  /tmp/ccPoddoo.s 			page 171


 5745 1156 8F110000 		.4byte	0x118f
 5746 115a 970D0000 		.4byte	.LLST56
 5747 115e 33       		.uleb128 0x33
 5748 115f 00000000 		.4byte	.Ldebug_ranges0+0
 5749 1163 77110000 		.4byte	0x1177
 5750 1167 31       		.uleb128 0x31
 5751 1168 48020000 		.4byte	.LASF103
 5752 116c 01       		.byte	0x1
 5753 116d 7D05     		.2byte	0x57d
 5754 116f D2000000 		.4byte	0xd2
 5755 1173 02       		.byte	0x2
 5756 1174 91       		.byte	0x91
 5757 1175 6C       		.sleb128 -20
 5758 1176 00       		.byte	0
 5759 1177 2D       		.uleb128 0x2d
 5760 1178 88050000 		.4byte	.LVL116
 5761 117c 6C170000 		.4byte	0x176c
 5762 1180 26       		.uleb128 0x26
 5763 1181 01       		.byte	0x1
 5764 1182 51       		.byte	0x51
 5765 1183 02       		.byte	0x2
 5766 1184 76       		.byte	0x76
 5767 1185 04       		.sleb128 4
 5768 1186 26       		.uleb128 0x26
 5769 1187 01       		.byte	0x1
 5770 1188 52       		.byte	0x52
 5771 1189 03       		.byte	0x3
 5772 118a F3       		.byte	0xf3
 5773 118b 01       		.uleb128 0x1
 5774 118c 51       		.byte	0x51
 5775 118d 00       		.byte	0
 5776 118e 00       		.byte	0
 5777 118f 15       		.uleb128 0x15
 5778 1190 04       		.byte	0x4
 5779 1191 C7000000 		.4byte	0xc7
 5780 1195 30       		.uleb128 0x30
 5781 1196 01       		.byte	0x1
 5782 1197 BB030000 		.4byte	.LASF161
 5783 119b 01       		.byte	0x1
 5784 119c 1305     		.2byte	0x513
 5785 119e 01       		.byte	0x1
 5786 119f 90020000 		.4byte	0x290
 5787 11a3 C6040000 		.4byte	.LFB76
 5788 11a7 3C050000 		.4byte	.LFE76
 5789 11ab AF0D0000 		.4byte	.LLST47
 5790 11af 01       		.byte	0x1
 5791 11b0 06120000 		.4byte	0x1206
 5792 11b4 1A       		.uleb128 0x1a
 5793 11b5 86070000 		.4byte	.LASF107
 5794 11b9 01       		.byte	0x1
 5795 11ba 1305     		.2byte	0x513
 5796 11bc A3060000 		.4byte	0x6a3
 5797 11c0 CF0D0000 		.4byte	.LLST48
 5798 11c4 1A       		.uleb128 0x1a
 5799 11c5 77010000 		.4byte	.LASF159
 5800 11c9 01       		.byte	0x1
 5801 11ca 1305     		.2byte	0x513
ARM GAS  /tmp/ccPoddoo.s 			page 172


 5802 11cc 51040000 		.4byte	0x451
 5803 11d0 270E0000 		.4byte	.LLST49
 5804 11d4 1A       		.uleb128 0x1a
 5805 11d5 52070000 		.4byte	.LASF160
 5806 11d9 01       		.byte	0x1
 5807 11da 1305     		.2byte	0x513
 5808 11dc A7000000 		.4byte	0xa7
 5809 11e0 530E0000 		.4byte	.LLST50
 5810 11e4 32       		.uleb128 0x32
 5811 11e5 746D7000 		.ascii	"tmp\000"
 5812 11e9 01       		.byte	0x1
 5813 11ea 1505     		.2byte	0x515
 5814 11ec 8F110000 		.4byte	0x118f
 5815 11f0 740E0000 		.4byte	.LLST51
 5816 11f4 2D       		.uleb128 0x2d
 5817 11f5 0E050000 		.4byte	.LVL105
 5818 11f9 6C170000 		.4byte	0x176c
 5819 11fd 26       		.uleb128 0x26
 5820 11fe 01       		.byte	0x1
 5821 11ff 51       		.byte	0x51
 5822 1200 03       		.byte	0x3
 5823 1201 F3       		.byte	0xf3
 5824 1202 01       		.uleb128 0x1
 5825 1203 51       		.byte	0x51
 5826 1204 00       		.byte	0
 5827 1205 00       		.byte	0
 5828 1206 27       		.uleb128 0x27
 5829 1207 01       		.byte	0x1
 5830 1208 7F0B0000 		.4byte	.LASF162
 5831 120c 01       		.byte	0x1
 5832 120d E004     		.2byte	0x4e0
 5833 120f 01       		.byte	0x1
 5834 1210 90020000 		.4byte	0x290
 5835 1214 78040000 		.4byte	.LFB75
 5836 1218 C6040000 		.4byte	.LFE75
 5837 121c 02       		.byte	0x2
 5838 121d 7D       		.byte	0x7d
 5839 121e 00       		.sleb128 0
 5840 121f 01       		.byte	0x1
 5841 1220 55120000 		.4byte	0x1255
 5842 1224 1A       		.uleb128 0x1a
 5843 1225 86070000 		.4byte	.LASF107
 5844 1229 01       		.byte	0x1
 5845 122a E004     		.2byte	0x4e0
 5846 122c A3060000 		.4byte	0x6a3
 5847 1230 8C0E0000 		.4byte	.LLST44
 5848 1234 1A       		.uleb128 0x1a
 5849 1235 77010000 		.4byte	.LASF159
 5850 1239 01       		.byte	0x1
 5851 123a E004     		.2byte	0x4e0
 5852 123c 51040000 		.4byte	0x451
 5853 1240 DF0E0000 		.4byte	.LLST45
 5854 1244 1A       		.uleb128 0x1a
 5855 1245 52070000 		.4byte	.LASF160
 5856 1249 01       		.byte	0x1
 5857 124a E004     		.2byte	0x4e0
 5858 124c A7000000 		.4byte	0xa7
ARM GAS  /tmp/ccPoddoo.s 			page 173


 5859 1250 180F0000 		.4byte	.LLST46
 5860 1254 00       		.byte	0
 5861 1255 27       		.uleb128 0x27
 5862 1256 01       		.byte	0x1
 5863 1257 16090000 		.4byte	.LASF163
 5864 125b 01       		.byte	0x1
 5865 125c B304     		.2byte	0x4b3
 5866 125e 01       		.byte	0x1
 5867 125f 90020000 		.4byte	0x290
 5868 1263 3A040000 		.4byte	.LFB74
 5869 1267 78040000 		.4byte	.LFE74
 5870 126b 02       		.byte	0x2
 5871 126c 7D       		.byte	0x7d
 5872 126d 00       		.sleb128 0
 5873 126e 01       		.byte	0x1
 5874 126f A4120000 		.4byte	0x12a4
 5875 1273 1A       		.uleb128 0x1a
 5876 1274 86070000 		.4byte	.LASF107
 5877 1278 01       		.byte	0x1
 5878 1279 B304     		.2byte	0x4b3
 5879 127b A3060000 		.4byte	0x6a3
 5880 127f 5D0F0000 		.4byte	.LLST41
 5881 1283 1A       		.uleb128 0x1a
 5882 1284 77010000 		.4byte	.LASF159
 5883 1288 01       		.byte	0x1
 5884 1289 B304     		.2byte	0x4b3
 5885 128b 51040000 		.4byte	0x451
 5886 128f B00F0000 		.4byte	.LLST42
 5887 1293 1A       		.uleb128 0x1a
 5888 1294 52070000 		.4byte	.LASF160
 5889 1298 01       		.byte	0x1
 5890 1299 B304     		.2byte	0x4b3
 5891 129b A7000000 		.4byte	0xa7
 5892 129f E90F0000 		.4byte	.LLST43
 5893 12a3 00       		.byte	0
 5894 12a4 30       		.uleb128 0x30
 5895 12a5 01       		.byte	0x1
 5896 12a6 FC080000 		.4byte	.LASF164
 5897 12aa 01       		.byte	0x1
 5898 12ab 5804     		.2byte	0x458
 5899 12ad 01       		.byte	0x1
 5900 12ae 90020000 		.4byte	0x290
 5901 12b2 7C030000 		.4byte	.LFB73
 5902 12b6 3A040000 		.4byte	.LFE73
 5903 12ba 2E100000 		.4byte	.LLST34
 5904 12be 01       		.byte	0x1
 5905 12bf 5C130000 		.4byte	0x135c
 5906 12c3 1A       		.uleb128 0x1a
 5907 12c4 86070000 		.4byte	.LASF107
 5908 12c8 01       		.byte	0x1
 5909 12c9 5804     		.2byte	0x458
 5910 12cb A3060000 		.4byte	0x6a3
 5911 12cf 4E100000 		.4byte	.LLST35
 5912 12d3 1A       		.uleb128 0x1a
 5913 12d4 77010000 		.4byte	.LASF159
 5914 12d8 01       		.byte	0x1
 5915 12d9 5804     		.2byte	0x458
ARM GAS  /tmp/ccPoddoo.s 			page 174


 5916 12db 51040000 		.4byte	0x451
 5917 12df C4100000 		.4byte	.LLST36
 5918 12e3 1A       		.uleb128 0x1a
 5919 12e4 52070000 		.4byte	.LASF160
 5920 12e8 01       		.byte	0x1
 5921 12e9 5804     		.2byte	0x458
 5922 12eb A7000000 		.4byte	0xa7
 5923 12ef F8100000 		.4byte	.LLST37
 5924 12f3 1A       		.uleb128 0x1a
 5925 12f4 6A030000 		.4byte	.LASF121
 5926 12f8 01       		.byte	0x1
 5927 12f9 5804     		.2byte	0x458
 5928 12fb C7000000 		.4byte	0xc7
 5929 12ff 24110000 		.4byte	.LLST38
 5930 1303 32       		.uleb128 0x32
 5931 1304 746D7000 		.ascii	"tmp\000"
 5932 1308 01       		.byte	0x1
 5933 1309 5A04     		.2byte	0x45a
 5934 130b D4060000 		.4byte	0x6d4
 5935 130f 6E110000 		.4byte	.LLST39
 5936 1313 1B       		.uleb128 0x1b
 5937 1314 17080000 		.4byte	.LASF165
 5938 1318 01       		.byte	0x1
 5939 1319 5B04     		.2byte	0x45b
 5940 131b C7000000 		.4byte	0xc7
 5941 131f A6110000 		.4byte	.LLST40
 5942 1323 1C       		.uleb128 0x1c
 5943 1324 B4030000 		.4byte	.LVL65
 5944 1328 7A170000 		.4byte	0x177a
 5945 132c 25       		.uleb128 0x25
 5946 132d EE030000 		.4byte	.LVL70
 5947 1331 30160000 		.4byte	0x1630
 5948 1335 52130000 		.4byte	0x1352
 5949 1339 26       		.uleb128 0x26
 5950 133a 01       		.byte	0x1
 5951 133b 50       		.byte	0x50
 5952 133c 02       		.byte	0x2
 5953 133d 74       		.byte	0x74
 5954 133e 00       		.sleb128 0
 5955 133f 26       		.uleb128 0x26
 5956 1340 01       		.byte	0x1
 5957 1341 51       		.byte	0x51
 5958 1342 02       		.byte	0x2
 5959 1343 08       		.byte	0x8
 5960 1344 20       		.byte	0x20
 5961 1345 26       		.uleb128 0x26
 5962 1346 01       		.byte	0x1
 5963 1347 52       		.byte	0x52
 5964 1348 02       		.byte	0x2
 5965 1349 76       		.byte	0x76
 5966 134a 00       		.sleb128 0
 5967 134b 26       		.uleb128 0x26
 5968 134c 01       		.byte	0x1
 5969 134d 53       		.byte	0x53
 5970 134e 02       		.byte	0x2
 5971 134f 77       		.byte	0x77
 5972 1350 00       		.sleb128 0
ARM GAS  /tmp/ccPoddoo.s 			page 175


 5973 1351 00       		.byte	0
 5974 1352 1C       		.uleb128 0x1c
 5975 1353 14040000 		.4byte	.LVL76
 5976 1357 30160000 		.4byte	0x1630
 5977 135b 00       		.byte	0
 5978 135c 30       		.uleb128 0x30
 5979 135d 01       		.byte	0x1
 5980 135e 7D010000 		.4byte	.LASF166
 5981 1362 01       		.byte	0x1
 5982 1363 0304     		.2byte	0x403
 5983 1365 01       		.byte	0x1
 5984 1366 90020000 		.4byte	0x290
 5985 136a C4020000 		.4byte	.LFB72
 5986 136e 7C030000 		.4byte	.LFE72
 5987 1372 08120000 		.4byte	.LLST27
 5988 1376 01       		.byte	0x1
 5989 1377 3A140000 		.4byte	0x143a
 5990 137b 1A       		.uleb128 0x1a
 5991 137c 86070000 		.4byte	.LASF107
 5992 1380 01       		.byte	0x1
 5993 1381 0304     		.2byte	0x403
 5994 1383 A3060000 		.4byte	0x6a3
 5995 1387 28120000 		.4byte	.LLST28
 5996 138b 1A       		.uleb128 0x1a
 5997 138c 77010000 		.4byte	.LASF159
 5998 1390 01       		.byte	0x1
 5999 1391 0304     		.2byte	0x403
 6000 1393 51040000 		.4byte	0x451
 6001 1397 9E120000 		.4byte	.LLST29
 6002 139b 1A       		.uleb128 0x1a
 6003 139c 52070000 		.4byte	.LASF160
 6004 13a0 01       		.byte	0x1
 6005 13a1 0304     		.2byte	0x403
 6006 13a3 A7000000 		.4byte	0xa7
 6007 13a7 D4120000 		.4byte	.LLST30
 6008 13ab 1A       		.uleb128 0x1a
 6009 13ac 6A030000 		.4byte	.LASF121
 6010 13b0 01       		.byte	0x1
 6011 13b1 0304     		.2byte	0x403
 6012 13b3 C7000000 		.4byte	0xc7
 6013 13b7 00130000 		.4byte	.LLST31
 6014 13bb 32       		.uleb128 0x32
 6015 13bc 746D7000 		.ascii	"tmp\000"
 6016 13c0 01       		.byte	0x1
 6017 13c1 0504     		.2byte	0x405
 6018 13c3 D4060000 		.4byte	0x6d4
 6019 13c7 4A130000 		.4byte	.LLST32
 6020 13cb 1B       		.uleb128 0x1b
 6021 13cc 17080000 		.4byte	.LASF165
 6022 13d0 01       		.byte	0x1
 6023 13d1 0604     		.2byte	0x406
 6024 13d3 C7000000 		.4byte	0xc7
 6025 13d7 6A130000 		.4byte	.LLST33
 6026 13db 1C       		.uleb128 0x1c
 6027 13dc FC020000 		.4byte	.LVL46
 6028 13e0 7A170000 		.4byte	0x177a
 6029 13e4 25       		.uleb128 0x25
ARM GAS  /tmp/ccPoddoo.s 			page 176


 6030 13e5 18030000 		.4byte	.LVL49
 6031 13e9 30160000 		.4byte	0x1630
 6032 13ed 0A140000 		.4byte	0x140a
 6033 13f1 26       		.uleb128 0x26
 6034 13f2 01       		.byte	0x1
 6035 13f3 50       		.byte	0x50
 6036 13f4 02       		.byte	0x2
 6037 13f5 74       		.byte	0x74
 6038 13f6 00       		.sleb128 0
 6039 13f7 26       		.uleb128 0x26
 6040 13f8 01       		.byte	0x1
 6041 13f9 51       		.byte	0x51
 6042 13fa 02       		.byte	0x2
 6043 13fb 08       		.byte	0x8
 6044 13fc 40       		.byte	0x40
 6045 13fd 26       		.uleb128 0x26
 6046 13fe 01       		.byte	0x1
 6047 13ff 52       		.byte	0x52
 6048 1400 02       		.byte	0x2
 6049 1401 76       		.byte	0x76
 6050 1402 00       		.sleb128 0
 6051 1403 26       		.uleb128 0x26
 6052 1404 01       		.byte	0x1
 6053 1405 53       		.byte	0x53
 6054 1406 02       		.byte	0x2
 6055 1407 77       		.byte	0x77
 6056 1408 00       		.sleb128 0
 6057 1409 00       		.byte	0
 6058 140a 25       		.uleb128 0x25
 6059 140b 44030000 		.4byte	.LVL52
 6060 140f 30160000 		.4byte	0x1630
 6061 1413 30140000 		.4byte	0x1430
 6062 1417 26       		.uleb128 0x26
 6063 1418 01       		.byte	0x1
 6064 1419 50       		.byte	0x50
 6065 141a 02       		.byte	0x2
 6066 141b 74       		.byte	0x74
 6067 141c 00       		.sleb128 0
 6068 141d 26       		.uleb128 0x26
 6069 141e 01       		.byte	0x1
 6070 141f 51       		.byte	0x51
 6071 1420 02       		.byte	0x2
 6072 1421 08       		.byte	0x8
 6073 1422 80       		.byte	0x80
 6074 1423 26       		.uleb128 0x26
 6075 1424 01       		.byte	0x1
 6076 1425 52       		.byte	0x52
 6077 1426 02       		.byte	0x2
 6078 1427 76       		.byte	0x76
 6079 1428 00       		.sleb128 0
 6080 1429 26       		.uleb128 0x26
 6081 142a 01       		.byte	0x1
 6082 142b 53       		.byte	0x53
 6083 142c 02       		.byte	0x2
 6084 142d 77       		.byte	0x77
 6085 142e 00       		.sleb128 0
 6086 142f 00       		.byte	0
ARM GAS  /tmp/ccPoddoo.s 			page 177


 6087 1430 1C       		.uleb128 0x1c
 6088 1431 62030000 		.4byte	.LVL56
 6089 1435 30160000 		.4byte	0x1630
 6090 1439 00       		.byte	0
 6091 143a 29       		.uleb128 0x29
 6092 143b 01       		.byte	0x1
 6093 143c 8E060000 		.4byte	.LASF167
 6094 1440 01       		.byte	0x1
 6095 1441 AF02     		.2byte	0x2af
 6096 1443 01       		.byte	0x1
 6097 1444 55140000 		.4byte	0x1455
 6098 1448 1E       		.uleb128 0x1e
 6099 1449 86070000 		.4byte	.LASF107
 6100 144d 01       		.byte	0x1
 6101 144e AF02     		.2byte	0x2af
 6102 1450 A3060000 		.4byte	0x6a3
 6103 1454 00       		.byte	0
 6104 1455 29       		.uleb128 0x29
 6105 1456 01       		.byte	0x1
 6106 1457 36090000 		.4byte	.LASF168
 6107 145b 01       		.byte	0x1
 6108 145c A002     		.2byte	0x2a0
 6109 145e 01       		.byte	0x1
 6110 145f 70140000 		.4byte	0x1470
 6111 1463 1E       		.uleb128 0x1e
 6112 1464 86070000 		.4byte	.LASF107
 6113 1468 01       		.byte	0x1
 6114 1469 A002     		.2byte	0x2a0
 6115 146b A3060000 		.4byte	0x6a3
 6116 146f 00       		.byte	0
 6117 1470 30       		.uleb128 0x30
 6118 1471 01       		.byte	0x1
 6119 1472 AB030000 		.4byte	.LASF169
 6120 1476 01       		.byte	0x1
 6121 1477 7402     		.2byte	0x274
 6122 1479 01       		.byte	0x1
 6123 147a 90020000 		.4byte	0x290
 6124 147e 94020000 		.4byte	.LFB69
 6125 1482 C4020000 		.4byte	.LFE69
 6126 1486 CC130000 		.4byte	.LLST25
 6127 148a 01       		.byte	0x1
 6128 148b B0140000 		.4byte	0x14b0
 6129 148f 1A       		.uleb128 0x1a
 6130 1490 86070000 		.4byte	.LASF107
 6131 1494 01       		.byte	0x1
 6132 1495 7402     		.2byte	0x274
 6133 1497 A3060000 		.4byte	0x6a3
 6134 149b EC130000 		.4byte	.LLST26
 6135 149f 2D       		.uleb128 0x2d
 6136 14a0 AE020000 		.4byte	.LVL41
 6137 14a4 3A140000 		.4byte	0x143a
 6138 14a8 26       		.uleb128 0x26
 6139 14a9 01       		.byte	0x1
 6140 14aa 50       		.byte	0x50
 6141 14ab 02       		.byte	0x2
 6142 14ac 74       		.byte	0x74
 6143 14ad 00       		.sleb128 0
ARM GAS  /tmp/ccPoddoo.s 			page 178


 6144 14ae 00       		.byte	0
 6145 14af 00       		.byte	0
 6146 14b0 30       		.uleb128 0x30
 6147 14b1 01       		.byte	0x1
 6148 14b2 A5000000 		.4byte	.LASF170
 6149 14b6 01       		.byte	0x1
 6150 14b7 2502     		.2byte	0x225
 6151 14b9 01       		.byte	0x1
 6152 14ba 90020000 		.4byte	0x290
 6153 14be 14020000 		.4byte	.LFB68
 6154 14c2 92020000 		.4byte	.LFE68
 6155 14c6 20140000 		.4byte	.LLST21
 6156 14ca 01       		.byte	0x1
 6157 14cb 24150000 		.4byte	0x1524
 6158 14cf 1A       		.uleb128 0x1a
 6159 14d0 86070000 		.4byte	.LASF107
 6160 14d4 01       		.byte	0x1
 6161 14d5 2502     		.2byte	0x225
 6162 14d7 A3060000 		.4byte	0x6a3
 6163 14db 40140000 		.4byte	.LLST22
 6164 14df 1A       		.uleb128 0x1a
 6165 14e0 66050000 		.4byte	.LASF171
 6166 14e4 01       		.byte	0x1
 6167 14e5 2502     		.2byte	0x225
 6168 14e7 97000000 		.4byte	0x97
 6169 14eb 74140000 		.4byte	.LLST23
 6170 14ef 1A       		.uleb128 0x1a
 6171 14f0 DD030000 		.4byte	.LASF172
 6172 14f4 01       		.byte	0x1
 6173 14f5 2502     		.2byte	0x225
 6174 14f7 C7000000 		.4byte	0xc7
 6175 14fb A0140000 		.4byte	.LLST24
 6176 14ff 25       		.uleb128 0x25
 6177 1500 32020000 		.4byte	.LVL36
 6178 1504 55140000 		.4byte	0x1455
 6179 1508 13150000 		.4byte	0x1513
 6180 150c 26       		.uleb128 0x26
 6181 150d 01       		.byte	0x1
 6182 150e 50       		.byte	0x50
 6183 150f 02       		.byte	0x2
 6184 1510 74       		.byte	0x74
 6185 1511 00       		.sleb128 0
 6186 1512 00       		.byte	0
 6187 1513 2D       		.uleb128 0x2d
 6188 1514 48020000 		.4byte	.LVL37
 6189 1518 46060000 		.4byte	0x646
 6190 151c 26       		.uleb128 0x26
 6191 151d 01       		.byte	0x1
 6192 151e 50       		.byte	0x50
 6193 151f 02       		.byte	0x2
 6194 1520 74       		.byte	0x74
 6195 1521 00       		.sleb128 0
 6196 1522 00       		.byte	0
 6197 1523 00       		.byte	0
 6198 1524 30       		.uleb128 0x30
 6199 1525 01       		.byte	0x1
 6200 1526 930B0000 		.4byte	.LASF173
ARM GAS  /tmp/ccPoddoo.s 			page 179


 6201 152a 01       		.byte	0x1
 6202 152b D201     		.2byte	0x1d2
 6203 152d 01       		.byte	0x1
 6204 152e 90020000 		.4byte	0x290
 6205 1532 9E010000 		.4byte	.LFB67
 6206 1536 14020000 		.4byte	.LFE67
 6207 153a C9140000 		.4byte	.LLST18
 6208 153e 01       		.byte	0x1
 6209 153f 88150000 		.4byte	0x1588
 6210 1543 1A       		.uleb128 0x1a
 6211 1544 86070000 		.4byte	.LASF107
 6212 1548 01       		.byte	0x1
 6213 1549 D201     		.2byte	0x1d2
 6214 154b A3060000 		.4byte	0x6a3
 6215 154f E9140000 		.4byte	.LLST19
 6216 1553 1A       		.uleb128 0x1a
 6217 1554 D5070000 		.4byte	.LASF174
 6218 1558 01       		.byte	0x1
 6219 1559 D201     		.2byte	0x1d2
 6220 155b C7000000 		.4byte	0xc7
 6221 155f 1D150000 		.4byte	.LLST20
 6222 1563 25       		.uleb128 0x25
 6223 1564 BA010000 		.4byte	.LVL30
 6224 1568 55140000 		.4byte	0x1455
 6225 156c 77150000 		.4byte	0x1577
 6226 1570 26       		.uleb128 0x26
 6227 1571 01       		.byte	0x1
 6228 1572 50       		.byte	0x50
 6229 1573 02       		.byte	0x2
 6230 1574 74       		.byte	0x74
 6231 1575 00       		.sleb128 0
 6232 1576 00       		.byte	0
 6233 1577 2D       		.uleb128 0x2d
 6234 1578 D0010000 		.4byte	.LVL31
 6235 157c 46060000 		.4byte	0x646
 6236 1580 26       		.uleb128 0x26
 6237 1581 01       		.byte	0x1
 6238 1582 50       		.byte	0x50
 6239 1583 02       		.byte	0x2
 6240 1584 74       		.byte	0x74
 6241 1585 00       		.sleb128 0
 6242 1586 00       		.byte	0
 6243 1587 00       		.byte	0
 6244 1588 30       		.uleb128 0x30
 6245 1589 01       		.byte	0x1
 6246 158a 7C030000 		.4byte	.LASF175
 6247 158e 01       		.byte	0x1
 6248 158f 8701     		.2byte	0x187
 6249 1591 01       		.byte	0x1
 6250 1592 90020000 		.4byte	0x290
 6251 1596 3A010000 		.4byte	.LFB66
 6252 159a 9E010000 		.4byte	.LFE66
 6253 159e 46150000 		.4byte	.LLST16
 6254 15a2 01       		.byte	0x1
 6255 15a3 DC150000 		.4byte	0x15dc
 6256 15a7 1A       		.uleb128 0x1a
 6257 15a8 86070000 		.4byte	.LASF107
ARM GAS  /tmp/ccPoddoo.s 			page 180


 6258 15ac 01       		.byte	0x1
 6259 15ad 8701     		.2byte	0x187
 6260 15af A3060000 		.4byte	0x6a3
 6261 15b3 66150000 		.4byte	.LLST17
 6262 15b7 25       		.uleb128 0x25
 6263 15b8 52010000 		.4byte	.LVL25
 6264 15bc 55140000 		.4byte	0x1455
 6265 15c0 CB150000 		.4byte	0x15cb
 6266 15c4 26       		.uleb128 0x26
 6267 15c5 01       		.byte	0x1
 6268 15c6 50       		.byte	0x50
 6269 15c7 02       		.byte	0x2
 6270 15c8 74       		.byte	0x74
 6271 15c9 00       		.sleb128 0
 6272 15ca 00       		.byte	0
 6273 15cb 2D       		.uleb128 0x2d
 6274 15cc 68010000 		.4byte	.LVL26
 6275 15d0 46060000 		.4byte	0x646
 6276 15d4 26       		.uleb128 0x26
 6277 15d5 01       		.byte	0x1
 6278 15d6 50       		.byte	0x50
 6279 15d7 02       		.byte	0x2
 6280 15d8 74       		.byte	0x74
 6281 15d9 00       		.sleb128 0
 6282 15da 00       		.byte	0
 6283 15db 00       		.byte	0
 6284 15dc 30       		.uleb128 0x30
 6285 15dd 01       		.byte	0x1
 6286 15de 0A050000 		.4byte	.LASF176
 6287 15e2 01       		.byte	0x1
 6288 15e3 3A01     		.2byte	0x13a
 6289 15e5 01       		.byte	0x1
 6290 15e6 90020000 		.4byte	0x290
 6291 15ea DE000000 		.4byte	.LFB65
 6292 15ee 3A010000 		.4byte	.LFE65
 6293 15f2 9A150000 		.4byte	.LLST14
 6294 15f6 01       		.byte	0x1
 6295 15f7 30160000 		.4byte	0x1630
 6296 15fb 1A       		.uleb128 0x1a
 6297 15fc 86070000 		.4byte	.LASF107
 6298 1600 01       		.byte	0x1
 6299 1601 3A01     		.2byte	0x13a
 6300 1603 A3060000 		.4byte	0x6a3
 6301 1607 BA150000 		.4byte	.LLST15
 6302 160b 25       		.uleb128 0x25
 6303 160c F6000000 		.4byte	.LVL20
 6304 1610 55140000 		.4byte	0x1455
 6305 1614 1F160000 		.4byte	0x161f
 6306 1618 26       		.uleb128 0x26
 6307 1619 01       		.byte	0x1
 6308 161a 50       		.byte	0x50
 6309 161b 02       		.byte	0x2
 6310 161c 74       		.byte	0x74
 6311 161d 00       		.sleb128 0
 6312 161e 00       		.byte	0
 6313 161f 2D       		.uleb128 0x2d
 6314 1620 0C010000 		.4byte	.LVL21
ARM GAS  /tmp/ccPoddoo.s 			page 181


 6315 1624 46060000 		.4byte	0x646
 6316 1628 26       		.uleb128 0x26
 6317 1629 01       		.byte	0x1
 6318 162a 50       		.byte	0x50
 6319 162b 02       		.byte	0x2
 6320 162c 74       		.byte	0x74
 6321 162d 00       		.sleb128 0
 6322 162e 00       		.byte	0
 6323 162f 00       		.byte	0
 6324 1630 34       		.uleb128 0x34
 6325 1631 BB080000 		.4byte	0x8bb
 6326 1635 8C000000 		.4byte	.LFB140
 6327 1639 DC000000 		.4byte	.LFE140
 6328 163d EE150000 		.4byte	.LLST4
 6329 1641 01       		.byte	0x1
 6330 1642 B5160000 		.4byte	0x16b5
 6331 1646 24       		.uleb128 0x24
 6332 1647 CD080000 		.4byte	0x8cd
 6333 164b 0E160000 		.4byte	.LLST5
 6334 164f 24       		.uleb128 0x24
 6335 1650 D9080000 		.4byte	0x8d9
 6336 1654 2C160000 		.4byte	.LLST6
 6337 1658 24       		.uleb128 0x24
 6338 1659 F1080000 		.4byte	0x8f1
 6339 165d 4A160000 		.4byte	.LLST7
 6340 1661 24       		.uleb128 0x24
 6341 1662 FD080000 		.4byte	0x8fd
 6342 1666 68160000 		.4byte	.LLST8
 6343 166a 35       		.uleb128 0x35
 6344 166b E5080000 		.4byte	0x8e5
 6345 166f 00       		.byte	0
 6346 1670 36       		.uleb128 0x36
 6347 1671 AA000000 		.4byte	.LBB4
 6348 1675 D0000000 		.4byte	.LBE4
 6349 1679 AB160000 		.4byte	0x16ab
 6350 167d 24       		.uleb128 0x24
 6351 167e D9080000 		.4byte	0x8d9
 6352 1682 86160000 		.4byte	.LLST9
 6353 1686 24       		.uleb128 0x24
 6354 1687 E5080000 		.4byte	0x8e5
 6355 168b 99160000 		.4byte	.LLST10
 6356 168f 24       		.uleb128 0x24
 6357 1690 F1080000 		.4byte	0x8f1
 6358 1694 AD160000 		.4byte	.LLST11
 6359 1698 24       		.uleb128 0x24
 6360 1699 FD080000 		.4byte	0x8fd
 6361 169d C0160000 		.4byte	.LLST12
 6362 16a1 24       		.uleb128 0x24
 6363 16a2 CD080000 		.4byte	0x8cd
 6364 16a6 D3160000 		.4byte	.LLST13
 6365 16aa 00       		.byte	0
 6366 16ab 1C       		.uleb128 0x1c
 6367 16ac D4000000 		.4byte	.LVL18
 6368 16b0 7A170000 		.4byte	0x177a
 6369 16b4 00       		.byte	0
 6370 16b5 34       		.uleb128 0x34
 6371 16b6 A9060000 		.4byte	0x6a9
ARM GAS  /tmp/ccPoddoo.s 			page 182


 6372 16ba 72080000 		.4byte	.LFB118
 6373 16be EE080000 		.4byte	.LFE118
 6374 16c2 E6160000 		.4byte	.LLST80
 6375 16c6 01       		.byte	0x1
 6376 16c7 09170000 		.4byte	0x1709
 6377 16cb 24       		.uleb128 0x24
 6378 16cc BB060000 		.4byte	0x6bb
 6379 16d0 06170000 		.4byte	.LLST81
 6380 16d4 37       		.uleb128 0x37
 6381 16d5 C7060000 		.4byte	0x6c7
 6382 16d9 38       		.uleb128 0x38
 6383 16da 18000000 		.4byte	.Ldebug_ranges0+0x18
 6384 16de 24       		.uleb128 0x24
 6385 16df BB060000 		.4byte	0x6bb
 6386 16e3 40170000 		.4byte	.LLST82
 6387 16e7 38       		.uleb128 0x38
 6388 16e8 18000000 		.4byte	.Ldebug_ranges0+0x18
 6389 16ec 2C       		.uleb128 0x2c
 6390 16ed D4160000 		.4byte	0x16d4
 6391 16f1 6C170000 		.4byte	.LLST83
 6392 16f5 2D       		.uleb128 0x2d
 6393 16f6 C6080000 		.4byte	.LVL179
 6394 16fa B10C0000 		.4byte	0xcb1
 6395 16fe 26       		.uleb128 0x26
 6396 16ff 01       		.byte	0x1
 6397 1700 50       		.byte	0x50
 6398 1701 03       		.byte	0x3
 6399 1702 F3       		.byte	0xf3
 6400 1703 01       		.uleb128 0x1
 6401 1704 50       		.byte	0x50
 6402 1705 00       		.byte	0
 6403 1706 00       		.byte	0
 6404 1707 00       		.byte	0
 6405 1708 00       		.byte	0
 6406 1709 39       		.uleb128 0x39
 6407 170a 290C0000 		.4byte	0xc29
 6408 170e F40B0000 		.4byte	.LFB95
 6409 1712 F60B0000 		.4byte	.LFE95
 6410 1716 02       		.byte	0x2
 6411 1717 7D       		.byte	0x7d
 6412 1718 00       		.sleb128 0
 6413 1719 01       		.byte	0x1
 6414 171a 26170000 		.4byte	0x1726
 6415 171e 3A       		.uleb128 0x3a
 6416 171f 380C0000 		.4byte	0xc38
 6417 1723 01       		.byte	0x1
 6418 1724 50       		.byte	0x50
 6419 1725 00       		.byte	0
 6420 1726 3B       		.uleb128 0x3b
 6421 1727 01       		.byte	0x1
 6422 1728 01       		.byte	0x1
 6423 1729 8C070000 		.4byte	.LASF177
 6424 172d 8C070000 		.4byte	.LASF177
 6425 1731 0C       		.byte	0xc
 6426 1732 9704     		.2byte	0x497
 6427 1734 3B       		.uleb128 0x3b
 6428 1735 01       		.byte	0x1
ARM GAS  /tmp/ccPoddoo.s 			page 183


 6429 1736 01       		.byte	0x1
 6430 1737 00000000 		.4byte	.LASF178
 6431 173b 00000000 		.4byte	.LASF178
 6432 173f 0C       		.byte	0xc
 6433 1740 9604     		.2byte	0x496
 6434 1742 3B       		.uleb128 0x3b
 6435 1743 01       		.byte	0x1
 6436 1744 01       		.byte	0x1
 6437 1745 BD000000 		.4byte	.LASF179
 6438 1749 BD000000 		.4byte	.LASF179
 6439 174d 09       		.byte	0x9
 6440 174e 7C01     		.2byte	0x17c
 6441 1750 3B       		.uleb128 0x3b
 6442 1751 01       		.byte	0x1
 6443 1752 01       		.byte	0x1
 6444 1753 58050000 		.4byte	.LASF180
 6445 1757 58050000 		.4byte	.LASF180
 6446 175b 09       		.byte	0x9
 6447 175c 7B01     		.2byte	0x17b
 6448 175e 3B       		.uleb128 0x3b
 6449 175f 01       		.byte	0x1
 6450 1760 01       		.byte	0x1
 6451 1761 630A0000 		.4byte	.LASF181
 6452 1765 630A0000 		.4byte	.LASF181
 6453 1769 09       		.byte	0x9
 6454 176a 8B01     		.2byte	0x18b
 6455 176c 3B       		.uleb128 0x3b
 6456 176d 01       		.byte	0x1
 6457 176e 01       		.byte	0x1
 6458 176f 37020000 		.4byte	.LASF182
 6459 1773 37020000 		.4byte	.LASF182
 6460 1777 09       		.byte	0x9
 6461 1778 7A01     		.2byte	0x17a
 6462 177a 3B       		.uleb128 0x3b
 6463 177b 01       		.byte	0x1
 6464 177c 01       		.byte	0x1
 6465 177d FA050000 		.4byte	.LASF183
 6466 1781 FA050000 		.4byte	.LASF183
 6467 1785 0B       		.byte	0xb
 6468 1786 2A01     		.2byte	0x12a
 6469 1788 00       		.byte	0
 6470              		.section	.debug_abbrev,"",%progbits
 6471              	.Ldebug_abbrev0:
 6472 0000 01       		.uleb128 0x1
 6473 0001 11       		.uleb128 0x11
 6474 0002 01       		.byte	0x1
 6475 0003 25       		.uleb128 0x25
 6476 0004 0E       		.uleb128 0xe
 6477 0005 13       		.uleb128 0x13
 6478 0006 0B       		.uleb128 0xb
 6479 0007 03       		.uleb128 0x3
 6480 0008 0E       		.uleb128 0xe
 6481 0009 1B       		.uleb128 0x1b
 6482 000a 0E       		.uleb128 0xe
 6483 000b 11       		.uleb128 0x11
 6484 000c 01       		.uleb128 0x1
 6485 000d 12       		.uleb128 0x12
ARM GAS  /tmp/ccPoddoo.s 			page 184


 6486 000e 01       		.uleb128 0x1
 6487 000f 10       		.uleb128 0x10
 6488 0010 06       		.uleb128 0x6
 6489 0011 00       		.byte	0
 6490 0012 00       		.byte	0
 6491 0013 02       		.uleb128 0x2
 6492 0014 24       		.uleb128 0x24
 6493 0015 00       		.byte	0
 6494 0016 0B       		.uleb128 0xb
 6495 0017 0B       		.uleb128 0xb
 6496 0018 3E       		.uleb128 0x3e
 6497 0019 0B       		.uleb128 0xb
 6498 001a 03       		.uleb128 0x3
 6499 001b 0E       		.uleb128 0xe
 6500 001c 00       		.byte	0
 6501 001d 00       		.byte	0
 6502 001e 03       		.uleb128 0x3
 6503 001f 16       		.uleb128 0x16
 6504 0020 00       		.byte	0
 6505 0021 03       		.uleb128 0x3
 6506 0022 0E       		.uleb128 0xe
 6507 0023 3A       		.uleb128 0x3a
 6508 0024 0B       		.uleb128 0xb
 6509 0025 3B       		.uleb128 0x3b
 6510 0026 0B       		.uleb128 0xb
 6511 0027 49       		.uleb128 0x49
 6512 0028 13       		.uleb128 0x13
 6513 0029 00       		.byte	0
 6514 002a 00       		.byte	0
 6515 002b 04       		.uleb128 0x4
 6516 002c 24       		.uleb128 0x24
 6517 002d 00       		.byte	0
 6518 002e 0B       		.uleb128 0xb
 6519 002f 0B       		.uleb128 0xb
 6520 0030 3E       		.uleb128 0x3e
 6521 0031 0B       		.uleb128 0xb
 6522 0032 03       		.uleb128 0x3
 6523 0033 08       		.uleb128 0x8
 6524 0034 00       		.byte	0
 6525 0035 00       		.byte	0
 6526 0036 05       		.uleb128 0x5
 6527 0037 26       		.uleb128 0x26
 6528 0038 00       		.byte	0
 6529 0039 49       		.uleb128 0x49
 6530 003a 13       		.uleb128 0x13
 6531 003b 00       		.byte	0
 6532 003c 00       		.byte	0
 6533 003d 06       		.uleb128 0x6
 6534 003e 35       		.uleb128 0x35
 6535 003f 00       		.byte	0
 6536 0040 49       		.uleb128 0x49
 6537 0041 13       		.uleb128 0x13
 6538 0042 00       		.byte	0
 6539 0043 00       		.byte	0
 6540 0044 07       		.uleb128 0x7
 6541 0045 34       		.uleb128 0x34
 6542 0046 00       		.byte	0
ARM GAS  /tmp/ccPoddoo.s 			page 185


 6543 0047 03       		.uleb128 0x3
 6544 0048 0E       		.uleb128 0xe
 6545 0049 3A       		.uleb128 0x3a
 6546 004a 0B       		.uleb128 0xb
 6547 004b 3B       		.uleb128 0x3b
 6548 004c 05       		.uleb128 0x5
 6549 004d 49       		.uleb128 0x49
 6550 004e 13       		.uleb128 0x13
 6551 004f 3F       		.uleb128 0x3f
 6552 0050 0C       		.uleb128 0xc
 6553 0051 3C       		.uleb128 0x3c
 6554 0052 0C       		.uleb128 0xc
 6555 0053 00       		.byte	0
 6556 0054 00       		.byte	0
 6557 0055 08       		.uleb128 0x8
 6558 0056 34       		.uleb128 0x34
 6559 0057 00       		.byte	0
 6560 0058 03       		.uleb128 0x3
 6561 0059 0E       		.uleb128 0xe
 6562 005a 3A       		.uleb128 0x3a
 6563 005b 0B       		.uleb128 0xb
 6564 005c 3B       		.uleb128 0x3b
 6565 005d 0B       		.uleb128 0xb
 6566 005e 49       		.uleb128 0x49
 6567 005f 13       		.uleb128 0x13
 6568 0060 3F       		.uleb128 0x3f
 6569 0061 0C       		.uleb128 0xc
 6570 0062 3C       		.uleb128 0x3c
 6571 0063 0C       		.uleb128 0xc
 6572 0064 00       		.byte	0
 6573 0065 00       		.byte	0
 6574 0066 09       		.uleb128 0x9
 6575 0067 01       		.uleb128 0x1
 6576 0068 01       		.byte	0x1
 6577 0069 49       		.uleb128 0x49
 6578 006a 13       		.uleb128 0x13
 6579 006b 01       		.uleb128 0x1
 6580 006c 13       		.uleb128 0x13
 6581 006d 00       		.byte	0
 6582 006e 00       		.byte	0
 6583 006f 0A       		.uleb128 0xa
 6584 0070 21       		.uleb128 0x21
 6585 0071 00       		.byte	0
 6586 0072 49       		.uleb128 0x49
 6587 0073 13       		.uleb128 0x13
 6588 0074 2F       		.uleb128 0x2f
 6589 0075 0B       		.uleb128 0xb
 6590 0076 00       		.byte	0
 6591 0077 00       		.byte	0
 6592 0078 0B       		.uleb128 0xb
 6593 0079 13       		.uleb128 0x13
 6594 007a 01       		.byte	0x1
 6595 007b 0B       		.uleb128 0xb
 6596 007c 0B       		.uleb128 0xb
 6597 007d 3A       		.uleb128 0x3a
 6598 007e 0B       		.uleb128 0xb
 6599 007f 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccPoddoo.s 			page 186


 6600 0080 05       		.uleb128 0x5
 6601 0081 01       		.uleb128 0x1
 6602 0082 13       		.uleb128 0x13
 6603 0083 00       		.byte	0
 6604 0084 00       		.byte	0
 6605 0085 0C       		.uleb128 0xc
 6606 0086 0D       		.uleb128 0xd
 6607 0087 00       		.byte	0
 6608 0088 03       		.uleb128 0x3
 6609 0089 08       		.uleb128 0x8
 6610 008a 3A       		.uleb128 0x3a
 6611 008b 0B       		.uleb128 0xb
 6612 008c 3B       		.uleb128 0x3b
 6613 008d 05       		.uleb128 0x5
 6614 008e 49       		.uleb128 0x49
 6615 008f 13       		.uleb128 0x13
 6616 0090 38       		.uleb128 0x38
 6617 0091 0A       		.uleb128 0xa
 6618 0092 00       		.byte	0
 6619 0093 00       		.byte	0
 6620 0094 0D       		.uleb128 0xd
 6621 0095 0D       		.uleb128 0xd
 6622 0096 00       		.byte	0
 6623 0097 03       		.uleb128 0x3
 6624 0098 0E       		.uleb128 0xe
 6625 0099 3A       		.uleb128 0x3a
 6626 009a 0B       		.uleb128 0xb
 6627 009b 3B       		.uleb128 0x3b
 6628 009c 05       		.uleb128 0x5
 6629 009d 49       		.uleb128 0x49
 6630 009e 13       		.uleb128 0x13
 6631 009f 38       		.uleb128 0x38
 6632 00a0 0A       		.uleb128 0xa
 6633 00a1 00       		.byte	0
 6634 00a2 00       		.byte	0
 6635 00a3 0E       		.uleb128 0xe
 6636 00a4 16       		.uleb128 0x16
 6637 00a5 00       		.byte	0
 6638 00a6 03       		.uleb128 0x3
 6639 00a7 0E       		.uleb128 0xe
 6640 00a8 3A       		.uleb128 0x3a
 6641 00a9 0B       		.uleb128 0xb
 6642 00aa 3B       		.uleb128 0x3b
 6643 00ab 05       		.uleb128 0x5
 6644 00ac 49       		.uleb128 0x49
 6645 00ad 13       		.uleb128 0x13
 6646 00ae 00       		.byte	0
 6647 00af 00       		.byte	0
 6648 00b0 0F       		.uleb128 0xf
 6649 00b1 04       		.uleb128 0x4
 6650 00b2 01       		.byte	0x1
 6651 00b3 0B       		.uleb128 0xb
 6652 00b4 0B       		.uleb128 0xb
 6653 00b5 49       		.uleb128 0x49
 6654 00b6 13       		.uleb128 0x13
 6655 00b7 3A       		.uleb128 0x3a
 6656 00b8 0B       		.uleb128 0xb
ARM GAS  /tmp/ccPoddoo.s 			page 187


 6657 00b9 3B       		.uleb128 0x3b
 6658 00ba 0B       		.uleb128 0xb
 6659 00bb 01       		.uleb128 0x1
 6660 00bc 13       		.uleb128 0x13
 6661 00bd 00       		.byte	0
 6662 00be 00       		.byte	0
 6663 00bf 10       		.uleb128 0x10
 6664 00c0 28       		.uleb128 0x28
 6665 00c1 00       		.byte	0
 6666 00c2 03       		.uleb128 0x3
 6667 00c3 0E       		.uleb128 0xe
 6668 00c4 1C       		.uleb128 0x1c
 6669 00c5 0B       		.uleb128 0xb
 6670 00c6 00       		.byte	0
 6671 00c7 00       		.byte	0
 6672 00c8 11       		.uleb128 0x11
 6673 00c9 28       		.uleb128 0x28
 6674 00ca 00       		.byte	0
 6675 00cb 03       		.uleb128 0x3
 6676 00cc 08       		.uleb128 0x8
 6677 00cd 1C       		.uleb128 0x1c
 6678 00ce 0B       		.uleb128 0xb
 6679 00cf 00       		.byte	0
 6680 00d0 00       		.byte	0
 6681 00d1 12       		.uleb128 0x12
 6682 00d2 13       		.uleb128 0x13
 6683 00d3 01       		.byte	0x1
 6684 00d4 0B       		.uleb128 0xb
 6685 00d5 0B       		.uleb128 0xb
 6686 00d6 3A       		.uleb128 0x3a
 6687 00d7 0B       		.uleb128 0xb
 6688 00d8 3B       		.uleb128 0x3b
 6689 00d9 0B       		.uleb128 0xb
 6690 00da 01       		.uleb128 0x1
 6691 00db 13       		.uleb128 0x13
 6692 00dc 00       		.byte	0
 6693 00dd 00       		.byte	0
 6694 00de 13       		.uleb128 0x13
 6695 00df 0D       		.uleb128 0xd
 6696 00e0 00       		.byte	0
 6697 00e1 03       		.uleb128 0x3
 6698 00e2 0E       		.uleb128 0xe
 6699 00e3 3A       		.uleb128 0x3a
 6700 00e4 0B       		.uleb128 0xb
 6701 00e5 3B       		.uleb128 0x3b
 6702 00e6 0B       		.uleb128 0xb
 6703 00e7 49       		.uleb128 0x49
 6704 00e8 13       		.uleb128 0x13
 6705 00e9 38       		.uleb128 0x38
 6706 00ea 0A       		.uleb128 0xa
 6707 00eb 00       		.byte	0
 6708 00ec 00       		.byte	0
 6709 00ed 14       		.uleb128 0x14
 6710 00ee 13       		.uleb128 0x13
 6711 00ef 01       		.byte	0x1
 6712 00f0 03       		.uleb128 0x3
 6713 00f1 0E       		.uleb128 0xe
ARM GAS  /tmp/ccPoddoo.s 			page 188


 6714 00f2 0B       		.uleb128 0xb
 6715 00f3 0B       		.uleb128 0xb
 6716 00f4 3A       		.uleb128 0x3a
 6717 00f5 0B       		.uleb128 0xb
 6718 00f6 3B       		.uleb128 0x3b
 6719 00f7 0B       		.uleb128 0xb
 6720 00f8 01       		.uleb128 0x1
 6721 00f9 13       		.uleb128 0x13
 6722 00fa 00       		.byte	0
 6723 00fb 00       		.byte	0
 6724 00fc 15       		.uleb128 0x15
 6725 00fd 0F       		.uleb128 0xf
 6726 00fe 00       		.byte	0
 6727 00ff 0B       		.uleb128 0xb
 6728 0100 0B       		.uleb128 0xb
 6729 0101 49       		.uleb128 0x49
 6730 0102 13       		.uleb128 0x13
 6731 0103 00       		.byte	0
 6732 0104 00       		.byte	0
 6733 0105 16       		.uleb128 0x16
 6734 0106 0F       		.uleb128 0xf
 6735 0107 00       		.byte	0
 6736 0108 0B       		.uleb128 0xb
 6737 0109 0B       		.uleb128 0xb
 6738 010a 00       		.byte	0
 6739 010b 00       		.byte	0
 6740 010c 17       		.uleb128 0x17
 6741 010d 15       		.uleb128 0x15
 6742 010e 01       		.byte	0x1
 6743 010f 27       		.uleb128 0x27
 6744 0110 0C       		.uleb128 0xc
 6745 0111 01       		.uleb128 0x1
 6746 0112 13       		.uleb128 0x13
 6747 0113 00       		.byte	0
 6748 0114 00       		.byte	0
 6749 0115 18       		.uleb128 0x18
 6750 0116 05       		.uleb128 0x5
 6751 0117 00       		.byte	0
 6752 0118 49       		.uleb128 0x49
 6753 0119 13       		.uleb128 0x13
 6754 011a 00       		.byte	0
 6755 011b 00       		.byte	0
 6756 011c 19       		.uleb128 0x19
 6757 011d 2E       		.uleb128 0x2e
 6758 011e 01       		.byte	0x1
 6759 011f 03       		.uleb128 0x3
 6760 0120 0E       		.uleb128 0xe
 6761 0121 3A       		.uleb128 0x3a
 6762 0122 0B       		.uleb128 0xb
 6763 0123 3B       		.uleb128 0x3b
 6764 0124 05       		.uleb128 0x5
 6765 0125 27       		.uleb128 0x27
 6766 0126 0C       		.uleb128 0xc
 6767 0127 11       		.uleb128 0x11
 6768 0128 01       		.uleb128 0x1
 6769 0129 12       		.uleb128 0x12
 6770 012a 01       		.uleb128 0x1
ARM GAS  /tmp/ccPoddoo.s 			page 189


 6771 012b 40       		.uleb128 0x40
 6772 012c 06       		.uleb128 0x6
 6773 012d 9742     		.uleb128 0x2117
 6774 012f 0C       		.uleb128 0xc
 6775 0130 01       		.uleb128 0x1
 6776 0131 13       		.uleb128 0x13
 6777 0132 00       		.byte	0
 6778 0133 00       		.byte	0
 6779 0134 1A       		.uleb128 0x1a
 6780 0135 05       		.uleb128 0x5
 6781 0136 00       		.byte	0
 6782 0137 03       		.uleb128 0x3
 6783 0138 0E       		.uleb128 0xe
 6784 0139 3A       		.uleb128 0x3a
 6785 013a 0B       		.uleb128 0xb
 6786 013b 3B       		.uleb128 0x3b
 6787 013c 05       		.uleb128 0x5
 6788 013d 49       		.uleb128 0x49
 6789 013e 13       		.uleb128 0x13
 6790 013f 02       		.uleb128 0x2
 6791 0140 06       		.uleb128 0x6
 6792 0141 00       		.byte	0
 6793 0142 00       		.byte	0
 6794 0143 1B       		.uleb128 0x1b
 6795 0144 34       		.uleb128 0x34
 6796 0145 00       		.byte	0
 6797 0146 03       		.uleb128 0x3
 6798 0147 0E       		.uleb128 0xe
 6799 0148 3A       		.uleb128 0x3a
 6800 0149 0B       		.uleb128 0xb
 6801 014a 3B       		.uleb128 0x3b
 6802 014b 05       		.uleb128 0x5
 6803 014c 49       		.uleb128 0x49
 6804 014d 13       		.uleb128 0x13
 6805 014e 02       		.uleb128 0x2
 6806 014f 06       		.uleb128 0x6
 6807 0150 00       		.byte	0
 6808 0151 00       		.byte	0
 6809 0152 1C       		.uleb128 0x1c
 6810 0153 898201   		.uleb128 0x4109
 6811 0156 00       		.byte	0
 6812 0157 11       		.uleb128 0x11
 6813 0158 01       		.uleb128 0x1
 6814 0159 31       		.uleb128 0x31
 6815 015a 13       		.uleb128 0x13
 6816 015b 00       		.byte	0
 6817 015c 00       		.byte	0
 6818 015d 1D       		.uleb128 0x1d
 6819 015e 2E       		.uleb128 0x2e
 6820 015f 01       		.byte	0x1
 6821 0160 03       		.uleb128 0x3
 6822 0161 0E       		.uleb128 0xe
 6823 0162 3A       		.uleb128 0x3a
 6824 0163 0B       		.uleb128 0xb
 6825 0164 3B       		.uleb128 0x3b
 6826 0165 05       		.uleb128 0x5
 6827 0166 27       		.uleb128 0x27
ARM GAS  /tmp/ccPoddoo.s 			page 190


 6828 0167 0C       		.uleb128 0xc
 6829 0168 49       		.uleb128 0x49
 6830 0169 13       		.uleb128 0x13
 6831 016a 20       		.uleb128 0x20
 6832 016b 0B       		.uleb128 0xb
 6833 016c 01       		.uleb128 0x1
 6834 016d 13       		.uleb128 0x13
 6835 016e 00       		.byte	0
 6836 016f 00       		.byte	0
 6837 0170 1E       		.uleb128 0x1e
 6838 0171 05       		.uleb128 0x5
 6839 0172 00       		.byte	0
 6840 0173 03       		.uleb128 0x3
 6841 0174 0E       		.uleb128 0xe
 6842 0175 3A       		.uleb128 0x3a
 6843 0176 0B       		.uleb128 0xb
 6844 0177 3B       		.uleb128 0x3b
 6845 0178 05       		.uleb128 0x5
 6846 0179 49       		.uleb128 0x49
 6847 017a 13       		.uleb128 0x13
 6848 017b 00       		.byte	0
 6849 017c 00       		.byte	0
 6850 017d 1F       		.uleb128 0x1f
 6851 017e 34       		.uleb128 0x34
 6852 017f 00       		.byte	0
 6853 0180 03       		.uleb128 0x3
 6854 0181 08       		.uleb128 0x8
 6855 0182 3A       		.uleb128 0x3a
 6856 0183 0B       		.uleb128 0xb
 6857 0184 3B       		.uleb128 0x3b
 6858 0185 05       		.uleb128 0x5
 6859 0186 49       		.uleb128 0x49
 6860 0187 13       		.uleb128 0x13
 6861 0188 00       		.byte	0
 6862 0189 00       		.byte	0
 6863 018a 20       		.uleb128 0x20
 6864 018b 2E       		.uleb128 0x2e
 6865 018c 01       		.byte	0x1
 6866 018d 03       		.uleb128 0x3
 6867 018e 0E       		.uleb128 0xe
 6868 018f 3A       		.uleb128 0x3a
 6869 0190 0B       		.uleb128 0xb
 6870 0191 3B       		.uleb128 0x3b
 6871 0192 05       		.uleb128 0x5
 6872 0193 27       		.uleb128 0x27
 6873 0194 0C       		.uleb128 0xc
 6874 0195 11       		.uleb128 0x11
 6875 0196 01       		.uleb128 0x1
 6876 0197 12       		.uleb128 0x12
 6877 0198 01       		.uleb128 0x1
 6878 0199 40       		.uleb128 0x40
 6879 019a 0A       		.uleb128 0xa
 6880 019b 9742     		.uleb128 0x2117
 6881 019d 0C       		.uleb128 0xc
 6882 019e 01       		.uleb128 0x1
 6883 019f 13       		.uleb128 0x13
 6884 01a0 00       		.byte	0
ARM GAS  /tmp/ccPoddoo.s 			page 191


 6885 01a1 00       		.byte	0
 6886 01a2 21       		.uleb128 0x21
 6887 01a3 05       		.uleb128 0x5
 6888 01a4 00       		.byte	0
 6889 01a5 03       		.uleb128 0x3
 6890 01a6 0E       		.uleb128 0xe
 6891 01a7 3A       		.uleb128 0x3a
 6892 01a8 0B       		.uleb128 0xb
 6893 01a9 3B       		.uleb128 0x3b
 6894 01aa 05       		.uleb128 0x5
 6895 01ab 49       		.uleb128 0x49
 6896 01ac 13       		.uleb128 0x13
 6897 01ad 02       		.uleb128 0x2
 6898 01ae 0A       		.uleb128 0xa
 6899 01af 00       		.byte	0
 6900 01b0 00       		.byte	0
 6901 01b1 22       		.uleb128 0x22
 6902 01b2 2E       		.uleb128 0x2e
 6903 01b3 01       		.byte	0x1
 6904 01b4 03       		.uleb128 0x3
 6905 01b5 0E       		.uleb128 0xe
 6906 01b6 3A       		.uleb128 0x3a
 6907 01b7 0B       		.uleb128 0xb
 6908 01b8 3B       		.uleb128 0x3b
 6909 01b9 05       		.uleb128 0x5
 6910 01ba 27       		.uleb128 0x27
 6911 01bb 0C       		.uleb128 0xc
 6912 01bc 20       		.uleb128 0x20
 6913 01bd 0B       		.uleb128 0xb
 6914 01be 01       		.uleb128 0x1
 6915 01bf 13       		.uleb128 0x13
 6916 01c0 00       		.byte	0
 6917 01c1 00       		.byte	0
 6918 01c2 23       		.uleb128 0x23
 6919 01c3 1D       		.uleb128 0x1d
 6920 01c4 01       		.byte	0x1
 6921 01c5 31       		.uleb128 0x31
 6922 01c6 13       		.uleb128 0x13
 6923 01c7 11       		.uleb128 0x11
 6924 01c8 01       		.uleb128 0x1
 6925 01c9 12       		.uleb128 0x12
 6926 01ca 01       		.uleb128 0x1
 6927 01cb 58       		.uleb128 0x58
 6928 01cc 0B       		.uleb128 0xb
 6929 01cd 59       		.uleb128 0x59
 6930 01ce 05       		.uleb128 0x5
 6931 01cf 01       		.uleb128 0x1
 6932 01d0 13       		.uleb128 0x13
 6933 01d1 00       		.byte	0
 6934 01d2 00       		.byte	0
 6935 01d3 24       		.uleb128 0x24
 6936 01d4 05       		.uleb128 0x5
 6937 01d5 00       		.byte	0
 6938 01d6 31       		.uleb128 0x31
 6939 01d7 13       		.uleb128 0x13
 6940 01d8 02       		.uleb128 0x2
 6941 01d9 06       		.uleb128 0x6
ARM GAS  /tmp/ccPoddoo.s 			page 192


 6942 01da 00       		.byte	0
 6943 01db 00       		.byte	0
 6944 01dc 25       		.uleb128 0x25
 6945 01dd 898201   		.uleb128 0x4109
 6946 01e0 01       		.byte	0x1
 6947 01e1 11       		.uleb128 0x11
 6948 01e2 01       		.uleb128 0x1
 6949 01e3 31       		.uleb128 0x31
 6950 01e4 13       		.uleb128 0x13
 6951 01e5 01       		.uleb128 0x1
 6952 01e6 13       		.uleb128 0x13
 6953 01e7 00       		.byte	0
 6954 01e8 00       		.byte	0
 6955 01e9 26       		.uleb128 0x26
 6956 01ea 8A8201   		.uleb128 0x410a
 6957 01ed 00       		.byte	0
 6958 01ee 02       		.uleb128 0x2
 6959 01ef 0A       		.uleb128 0xa
 6960 01f0 9142     		.uleb128 0x2111
 6961 01f2 0A       		.uleb128 0xa
 6962 01f3 00       		.byte	0
 6963 01f4 00       		.byte	0
 6964 01f5 27       		.uleb128 0x27
 6965 01f6 2E       		.uleb128 0x2e
 6966 01f7 01       		.byte	0x1
 6967 01f8 3F       		.uleb128 0x3f
 6968 01f9 0C       		.uleb128 0xc
 6969 01fa 03       		.uleb128 0x3
 6970 01fb 0E       		.uleb128 0xe
 6971 01fc 3A       		.uleb128 0x3a
 6972 01fd 0B       		.uleb128 0xb
 6973 01fe 3B       		.uleb128 0x3b
 6974 01ff 05       		.uleb128 0x5
 6975 0200 27       		.uleb128 0x27
 6976 0201 0C       		.uleb128 0xc
 6977 0202 49       		.uleb128 0x49
 6978 0203 13       		.uleb128 0x13
 6979 0204 11       		.uleb128 0x11
 6980 0205 01       		.uleb128 0x1
 6981 0206 12       		.uleb128 0x12
 6982 0207 01       		.uleb128 0x1
 6983 0208 40       		.uleb128 0x40
 6984 0209 0A       		.uleb128 0xa
 6985 020a 9742     		.uleb128 0x2117
 6986 020c 0C       		.uleb128 0xc
 6987 020d 01       		.uleb128 0x1
 6988 020e 13       		.uleb128 0x13
 6989 020f 00       		.byte	0
 6990 0210 00       		.byte	0
 6991 0211 28       		.uleb128 0x28
 6992 0212 2E       		.uleb128 0x2e
 6993 0213 01       		.byte	0x1
 6994 0214 3F       		.uleb128 0x3f
 6995 0215 0C       		.uleb128 0xc
 6996 0216 03       		.uleb128 0x3
 6997 0217 0E       		.uleb128 0xe
 6998 0218 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccPoddoo.s 			page 193


 6999 0219 0B       		.uleb128 0xb
 7000 021a 3B       		.uleb128 0x3b
 7001 021b 05       		.uleb128 0x5
 7002 021c 27       		.uleb128 0x27
 7003 021d 0C       		.uleb128 0xc
 7004 021e 20       		.uleb128 0x20
 7005 021f 0B       		.uleb128 0xb
 7006 0220 01       		.uleb128 0x1
 7007 0221 13       		.uleb128 0x13
 7008 0222 00       		.byte	0
 7009 0223 00       		.byte	0
 7010 0224 29       		.uleb128 0x29
 7011 0225 2E       		.uleb128 0x2e
 7012 0226 01       		.byte	0x1
 7013 0227 3F       		.uleb128 0x3f
 7014 0228 0C       		.uleb128 0xc
 7015 0229 03       		.uleb128 0x3
 7016 022a 0E       		.uleb128 0xe
 7017 022b 3A       		.uleb128 0x3a
 7018 022c 0B       		.uleb128 0xb
 7019 022d 3B       		.uleb128 0x3b
 7020 022e 05       		.uleb128 0x5
 7021 022f 27       		.uleb128 0x27
 7022 0230 0C       		.uleb128 0xc
 7023 0231 01       		.uleb128 0x1
 7024 0232 13       		.uleb128 0x13
 7025 0233 00       		.byte	0
 7026 0234 00       		.byte	0
 7027 0235 2A       		.uleb128 0x2a
 7028 0236 2E       		.uleb128 0x2e
 7029 0237 01       		.byte	0x1
 7030 0238 3F       		.uleb128 0x3f
 7031 0239 0C       		.uleb128 0xc
 7032 023a 03       		.uleb128 0x3
 7033 023b 0E       		.uleb128 0xe
 7034 023c 3A       		.uleb128 0x3a
 7035 023d 0B       		.uleb128 0xb
 7036 023e 3B       		.uleb128 0x3b
 7037 023f 05       		.uleb128 0x5
 7038 0240 27       		.uleb128 0x27
 7039 0241 0C       		.uleb128 0xc
 7040 0242 11       		.uleb128 0x11
 7041 0243 01       		.uleb128 0x1
 7042 0244 12       		.uleb128 0x12
 7043 0245 01       		.uleb128 0x1
 7044 0246 40       		.uleb128 0x40
 7045 0247 06       		.uleb128 0x6
 7046 0248 01       		.uleb128 0x1
 7047 0249 13       		.uleb128 0x13
 7048 024a 00       		.byte	0
 7049 024b 00       		.byte	0
 7050 024c 2B       		.uleb128 0x2b
 7051 024d 0B       		.uleb128 0xb
 7052 024e 01       		.byte	0x1
 7053 024f 11       		.uleb128 0x11
 7054 0250 01       		.uleb128 0x1
 7055 0251 12       		.uleb128 0x12
ARM GAS  /tmp/ccPoddoo.s 			page 194


 7056 0252 01       		.uleb128 0x1
 7057 0253 00       		.byte	0
 7058 0254 00       		.byte	0
 7059 0255 2C       		.uleb128 0x2c
 7060 0256 34       		.uleb128 0x34
 7061 0257 00       		.byte	0
 7062 0258 31       		.uleb128 0x31
 7063 0259 13       		.uleb128 0x13
 7064 025a 02       		.uleb128 0x2
 7065 025b 06       		.uleb128 0x6
 7066 025c 00       		.byte	0
 7067 025d 00       		.byte	0
 7068 025e 2D       		.uleb128 0x2d
 7069 025f 898201   		.uleb128 0x4109
 7070 0262 01       		.byte	0x1
 7071 0263 11       		.uleb128 0x11
 7072 0264 01       		.uleb128 0x1
 7073 0265 31       		.uleb128 0x31
 7074 0266 13       		.uleb128 0x13
 7075 0267 00       		.byte	0
 7076 0268 00       		.byte	0
 7077 0269 2E       		.uleb128 0x2e
 7078 026a 898201   		.uleb128 0x4109
 7079 026d 01       		.byte	0x1
 7080 026e 11       		.uleb128 0x11
 7081 026f 01       		.uleb128 0x1
 7082 0270 9542     		.uleb128 0x2115
 7083 0272 0C       		.uleb128 0xc
 7084 0273 31       		.uleb128 0x31
 7085 0274 13       		.uleb128 0x13
 7086 0275 01       		.uleb128 0x1
 7087 0276 13       		.uleb128 0x13
 7088 0277 00       		.byte	0
 7089 0278 00       		.byte	0
 7090 0279 2F       		.uleb128 0x2f
 7091 027a 2E       		.uleb128 0x2e
 7092 027b 01       		.byte	0x1
 7093 027c 3F       		.uleb128 0x3f
 7094 027d 0C       		.uleb128 0xc
 7095 027e 03       		.uleb128 0x3
 7096 027f 0E       		.uleb128 0xe
 7097 0280 3A       		.uleb128 0x3a
 7098 0281 0B       		.uleb128 0xb
 7099 0282 3B       		.uleb128 0x3b
 7100 0283 05       		.uleb128 0x5
 7101 0284 27       		.uleb128 0x27
 7102 0285 0C       		.uleb128 0xc
 7103 0286 49       		.uleb128 0x49
 7104 0287 13       		.uleb128 0x13
 7105 0288 11       		.uleb128 0x11
 7106 0289 01       		.uleb128 0x1
 7107 028a 12       		.uleb128 0x12
 7108 028b 01       		.uleb128 0x1
 7109 028c 40       		.uleb128 0x40
 7110 028d 06       		.uleb128 0x6
 7111 028e 9642     		.uleb128 0x2116
 7112 0290 0C       		.uleb128 0xc
ARM GAS  /tmp/ccPoddoo.s 			page 195


 7113 0291 01       		.uleb128 0x1
 7114 0292 13       		.uleb128 0x13
 7115 0293 00       		.byte	0
 7116 0294 00       		.byte	0
 7117 0295 30       		.uleb128 0x30
 7118 0296 2E       		.uleb128 0x2e
 7119 0297 01       		.byte	0x1
 7120 0298 3F       		.uleb128 0x3f
 7121 0299 0C       		.uleb128 0xc
 7122 029a 03       		.uleb128 0x3
 7123 029b 0E       		.uleb128 0xe
 7124 029c 3A       		.uleb128 0x3a
 7125 029d 0B       		.uleb128 0xb
 7126 029e 3B       		.uleb128 0x3b
 7127 029f 05       		.uleb128 0x5
 7128 02a0 27       		.uleb128 0x27
 7129 02a1 0C       		.uleb128 0xc
 7130 02a2 49       		.uleb128 0x49
 7131 02a3 13       		.uleb128 0x13
 7132 02a4 11       		.uleb128 0x11
 7133 02a5 01       		.uleb128 0x1
 7134 02a6 12       		.uleb128 0x12
 7135 02a7 01       		.uleb128 0x1
 7136 02a8 40       		.uleb128 0x40
 7137 02a9 06       		.uleb128 0x6
 7138 02aa 9742     		.uleb128 0x2117
 7139 02ac 0C       		.uleb128 0xc
 7140 02ad 01       		.uleb128 0x1
 7141 02ae 13       		.uleb128 0x13
 7142 02af 00       		.byte	0
 7143 02b0 00       		.byte	0
 7144 02b1 31       		.uleb128 0x31
 7145 02b2 34       		.uleb128 0x34
 7146 02b3 00       		.byte	0
 7147 02b4 03       		.uleb128 0x3
 7148 02b5 0E       		.uleb128 0xe
 7149 02b6 3A       		.uleb128 0x3a
 7150 02b7 0B       		.uleb128 0xb
 7151 02b8 3B       		.uleb128 0x3b
 7152 02b9 05       		.uleb128 0x5
 7153 02ba 49       		.uleb128 0x49
 7154 02bb 13       		.uleb128 0x13
 7155 02bc 02       		.uleb128 0x2
 7156 02bd 0A       		.uleb128 0xa
 7157 02be 00       		.byte	0
 7158 02bf 00       		.byte	0
 7159 02c0 32       		.uleb128 0x32
 7160 02c1 34       		.uleb128 0x34
 7161 02c2 00       		.byte	0
 7162 02c3 03       		.uleb128 0x3
 7163 02c4 08       		.uleb128 0x8
 7164 02c5 3A       		.uleb128 0x3a
 7165 02c6 0B       		.uleb128 0xb
 7166 02c7 3B       		.uleb128 0x3b
 7167 02c8 05       		.uleb128 0x5
 7168 02c9 49       		.uleb128 0x49
 7169 02ca 13       		.uleb128 0x13
ARM GAS  /tmp/ccPoddoo.s 			page 196


 7170 02cb 02       		.uleb128 0x2
 7171 02cc 06       		.uleb128 0x6
 7172 02cd 00       		.byte	0
 7173 02ce 00       		.byte	0
 7174 02cf 33       		.uleb128 0x33
 7175 02d0 0B       		.uleb128 0xb
 7176 02d1 01       		.byte	0x1
 7177 02d2 55       		.uleb128 0x55
 7178 02d3 06       		.uleb128 0x6
 7179 02d4 01       		.uleb128 0x1
 7180 02d5 13       		.uleb128 0x13
 7181 02d6 00       		.byte	0
 7182 02d7 00       		.byte	0
 7183 02d8 34       		.uleb128 0x34
 7184 02d9 2E       		.uleb128 0x2e
 7185 02da 01       		.byte	0x1
 7186 02db 31       		.uleb128 0x31
 7187 02dc 13       		.uleb128 0x13
 7188 02dd 11       		.uleb128 0x11
 7189 02de 01       		.uleb128 0x1
 7190 02df 12       		.uleb128 0x12
 7191 02e0 01       		.uleb128 0x1
 7192 02e1 40       		.uleb128 0x40
 7193 02e2 06       		.uleb128 0x6
 7194 02e3 9742     		.uleb128 0x2117
 7195 02e5 0C       		.uleb128 0xc
 7196 02e6 01       		.uleb128 0x1
 7197 02e7 13       		.uleb128 0x13
 7198 02e8 00       		.byte	0
 7199 02e9 00       		.byte	0
 7200 02ea 35       		.uleb128 0x35
 7201 02eb 05       		.uleb128 0x5
 7202 02ec 00       		.byte	0
 7203 02ed 31       		.uleb128 0x31
 7204 02ee 13       		.uleb128 0x13
 7205 02ef 1C       		.uleb128 0x1c
 7206 02f0 0B       		.uleb128 0xb
 7207 02f1 00       		.byte	0
 7208 02f2 00       		.byte	0
 7209 02f3 36       		.uleb128 0x36
 7210 02f4 0B       		.uleb128 0xb
 7211 02f5 01       		.byte	0x1
 7212 02f6 11       		.uleb128 0x11
 7213 02f7 01       		.uleb128 0x1
 7214 02f8 12       		.uleb128 0x12
 7215 02f9 01       		.uleb128 0x1
 7216 02fa 01       		.uleb128 0x1
 7217 02fb 13       		.uleb128 0x13
 7218 02fc 00       		.byte	0
 7219 02fd 00       		.byte	0
 7220 02fe 37       		.uleb128 0x37
 7221 02ff 34       		.uleb128 0x34
 7222 0300 00       		.byte	0
 7223 0301 31       		.uleb128 0x31
 7224 0302 13       		.uleb128 0x13
 7225 0303 00       		.byte	0
 7226 0304 00       		.byte	0
ARM GAS  /tmp/ccPoddoo.s 			page 197


 7227 0305 38       		.uleb128 0x38
 7228 0306 0B       		.uleb128 0xb
 7229 0307 01       		.byte	0x1
 7230 0308 55       		.uleb128 0x55
 7231 0309 06       		.uleb128 0x6
 7232 030a 00       		.byte	0
 7233 030b 00       		.byte	0
 7234 030c 39       		.uleb128 0x39
 7235 030d 2E       		.uleb128 0x2e
 7236 030e 01       		.byte	0x1
 7237 030f 31       		.uleb128 0x31
 7238 0310 13       		.uleb128 0x13
 7239 0311 11       		.uleb128 0x11
 7240 0312 01       		.uleb128 0x1
 7241 0313 12       		.uleb128 0x12
 7242 0314 01       		.uleb128 0x1
 7243 0315 40       		.uleb128 0x40
 7244 0316 0A       		.uleb128 0xa
 7245 0317 9742     		.uleb128 0x2117
 7246 0319 0C       		.uleb128 0xc
 7247 031a 01       		.uleb128 0x1
 7248 031b 13       		.uleb128 0x13
 7249 031c 00       		.byte	0
 7250 031d 00       		.byte	0
 7251 031e 3A       		.uleb128 0x3a
 7252 031f 05       		.uleb128 0x5
 7253 0320 00       		.byte	0
 7254 0321 31       		.uleb128 0x31
 7255 0322 13       		.uleb128 0x13
 7256 0323 02       		.uleb128 0x2
 7257 0324 0A       		.uleb128 0xa
 7258 0325 00       		.byte	0
 7259 0326 00       		.byte	0
 7260 0327 3B       		.uleb128 0x3b
 7261 0328 2E       		.uleb128 0x2e
 7262 0329 00       		.byte	0
 7263 032a 3F       		.uleb128 0x3f
 7264 032b 0C       		.uleb128 0xc
 7265 032c 3C       		.uleb128 0x3c
 7266 032d 0C       		.uleb128 0xc
 7267 032e 8740     		.uleb128 0x2007
 7268 0330 0E       		.uleb128 0xe
 7269 0331 03       		.uleb128 0x3
 7270 0332 0E       		.uleb128 0xe
 7271 0333 3A       		.uleb128 0x3a
 7272 0334 0B       		.uleb128 0xb
 7273 0335 3B       		.uleb128 0x3b
 7274 0336 05       		.uleb128 0x5
 7275 0337 00       		.byte	0
 7276 0338 00       		.byte	0
 7277 0339 00       		.byte	0
 7278              		.section	.debug_loc,"",%progbits
 7279              	.Ldebug_loc0:
 7280              	.LLST0:
 7281 0000 1A000000 		.4byte	.LFB119-.Ltext0
 7282 0004 1C000000 		.4byte	.LCFI0-.Ltext0
 7283 0008 0200     		.2byte	0x2
ARM GAS  /tmp/ccPoddoo.s 			page 198


 7284 000a 7D       		.byte	0x7d
 7285 000b 00       		.sleb128 0
 7286 000c 1C000000 		.4byte	.LCFI0-.Ltext0
 7287 0010 8C000000 		.4byte	.LFE119-.Ltext0
 7288 0014 0200     		.2byte	0x2
 7289 0016 7D       		.byte	0x7d
 7290 0017 10       		.sleb128 16
 7291 0018 00000000 		.4byte	0
 7292 001c 00000000 		.4byte	0
 7293              	.LLST1:
 7294 0020 1A000000 		.4byte	.LVL1-.Ltext0
 7295 0024 32000000 		.4byte	.LVL3-.Ltext0
 7296 0028 0100     		.2byte	0x1
 7297 002a 50       		.byte	0x50
 7298 002b 32000000 		.4byte	.LVL3-.Ltext0
 7299 002f 8C000000 		.4byte	.LFE119-.Ltext0
 7300 0033 0100     		.2byte	0x1
 7301 0035 55       		.byte	0x55
 7302 0036 00000000 		.4byte	0
 7303 003a 00000000 		.4byte	0
 7304              	.LLST2:
 7305 003e 2E000000 		.4byte	.LVL2-.Ltext0
 7306 0042 32000000 		.4byte	.LVL3-.Ltext0
 7307 0046 0C00     		.2byte	0xc
 7308 0048 70       		.byte	0x70
 7309 0049 08       		.sleb128 8
 7310 004a 06       		.byte	0x6
 7311 004b 70       		.byte	0x70
 7312 004c 10       		.sleb128 16
 7313 004d 06       		.byte	0x6
 7314 004e 21       		.byte	0x21
 7315 004f 70       		.byte	0x70
 7316 0050 14       		.sleb128 20
 7317 0051 06       		.byte	0x6
 7318 0052 21       		.byte	0x21
 7319 0053 9F       		.byte	0x9f
 7320 0054 32000000 		.4byte	.LVL3-.Ltext0
 7321 0058 36000000 		.4byte	.LVL4-.Ltext0
 7322 005c 0A00     		.2byte	0xa
 7323 005e 72       		.byte	0x72
 7324 005f 00       		.sleb128 0
 7325 0060 70       		.byte	0x70
 7326 0061 00       		.sleb128 0
 7327 0062 21       		.byte	0x21
 7328 0063 75       		.byte	0x75
 7329 0064 14       		.sleb128 20
 7330 0065 06       		.byte	0x6
 7331 0066 21       		.byte	0x21
 7332 0067 9F       		.byte	0x9f
 7333 0068 36000000 		.4byte	.LVL4-.Ltext0
 7334 006c 38000000 		.4byte	.LVL5-.Ltext0
 7335 0070 0B00     		.2byte	0xb
 7336 0072 75       		.byte	0x75
 7337 0073 08       		.sleb128 8
 7338 0074 06       		.byte	0x6
 7339 0075 70       		.byte	0x70
 7340 0076 00       		.sleb128 0
ARM GAS  /tmp/ccPoddoo.s 			page 199


 7341 0077 21       		.byte	0x21
 7342 0078 75       		.byte	0x75
 7343 0079 14       		.sleb128 20
 7344 007a 06       		.byte	0x6
 7345 007b 21       		.byte	0x21
 7346 007c 9F       		.byte	0x9f
 7347 007d 38000000 		.4byte	.LVL5-.Ltext0
 7348 0081 42000000 		.4byte	.LVL6-.Ltext0
 7349 0085 0C00     		.2byte	0xc
 7350 0087 75       		.byte	0x75
 7351 0088 08       		.sleb128 8
 7352 0089 06       		.byte	0x6
 7353 008a 75       		.byte	0x75
 7354 008b 10       		.sleb128 16
 7355 008c 06       		.byte	0x6
 7356 008d 21       		.byte	0x21
 7357 008e 75       		.byte	0x75
 7358 008f 14       		.sleb128 20
 7359 0090 06       		.byte	0x6
 7360 0091 21       		.byte	0x21
 7361 0092 9F       		.byte	0x9f
 7362 0093 42000000 		.4byte	.LVL6-.Ltext0
 7363 0097 44000000 		.4byte	.LVL7-.Ltext0
 7364 009b 0100     		.2byte	0x1
 7365 009d 52       		.byte	0x52
 7366 009e 44000000 		.4byte	.LVL7-.Ltext0
 7367 00a2 5B000000 		.4byte	.LVL8-1-.Ltext0
 7368 00a6 0C00     		.2byte	0xc
 7369 00a8 75       		.byte	0x75
 7370 00a9 08       		.sleb128 8
 7371 00aa 06       		.byte	0x6
 7372 00ab 75       		.byte	0x75
 7373 00ac 10       		.sleb128 16
 7374 00ad 06       		.byte	0x6
 7375 00ae 21       		.byte	0x21
 7376 00af 75       		.byte	0x75
 7377 00b0 14       		.sleb128 20
 7378 00b1 06       		.byte	0x6
 7379 00b2 21       		.byte	0x21
 7380 00b3 9F       		.byte	0x9f
 7381 00b4 82000000 		.4byte	.LVL10-.Ltext0
 7382 00b8 85000000 		.4byte	.LVL11-1-.Ltext0
 7383 00bc 0B00     		.2byte	0xb
 7384 00be 75       		.byte	0x75
 7385 00bf 08       		.sleb128 8
 7386 00c0 06       		.byte	0x6
 7387 00c1 75       		.byte	0x75
 7388 00c2 10       		.sleb128 16
 7389 00c3 06       		.byte	0x6
 7390 00c4 21       		.byte	0x21
 7391 00c5 70       		.byte	0x70
 7392 00c6 00       		.sleb128 0
 7393 00c7 21       		.byte	0x21
 7394 00c8 9F       		.byte	0x9f
 7395 00c9 00000000 		.4byte	0
 7396 00cd 00000000 		.4byte	0
 7397              	.LLST3:
ARM GAS  /tmp/ccPoddoo.s 			page 200


 7398 00d1 5C000000 		.4byte	.LVL8-.Ltext0
 7399 00d5 5E000000 		.4byte	.LVL9-.Ltext0
 7400 00d9 0100     		.2byte	0x1
 7401 00db 50       		.byte	0x50
 7402 00dc 00000000 		.4byte	0
 7403 00e0 00000000 		.4byte	0
 7404              	.LLST121:
 7405 00e4 4C0C0000 		.4byte	.LFB115-.Ltext0
 7406 00e8 4E0C0000 		.4byte	.LCFI38-.Ltext0
 7407 00ec 0200     		.2byte	0x2
 7408 00ee 7D       		.byte	0x7d
 7409 00ef 00       		.sleb128 0
 7410 00f0 4E0C0000 		.4byte	.LCFI38-.Ltext0
 7411 00f4 600C0000 		.4byte	.LFE115-.Ltext0
 7412 00f8 0200     		.2byte	0x2
 7413 00fa 7D       		.byte	0x7d
 7414 00fb 08       		.sleb128 8
 7415 00fc 00000000 		.4byte	0
 7416 0100 00000000 		.4byte	0
 7417              	.LLST122:
 7418 0104 4C0C0000 		.4byte	.LVL275-.Ltext0
 7419 0108 520C0000 		.4byte	.LVL276-.Ltext0
 7420 010c 0100     		.2byte	0x1
 7421 010e 50       		.byte	0x50
 7422 010f 520C0000 		.4byte	.LVL276-.Ltext0
 7423 0113 600C0000 		.4byte	.LFE115-.Ltext0
 7424 0117 0400     		.2byte	0x4
 7425 0119 F3       		.byte	0xf3
 7426 011a 01       		.uleb128 0x1
 7427 011b 50       		.byte	0x50
 7428 011c 9F       		.byte	0x9f
 7429 011d 00000000 		.4byte	0
 7430 0121 00000000 		.4byte	0
 7431              	.LLST123:
 7432 0125 520C0000 		.4byte	.LVL276-.Ltext0
 7433 0129 5D0C0000 		.4byte	.LVL277-1-.Ltext0
 7434 012d 0100     		.2byte	0x1
 7435 012f 50       		.byte	0x50
 7436 0130 00000000 		.4byte	0
 7437 0134 00000000 		.4byte	0
 7438              	.LLST116:
 7439 0138 E00B0000 		.4byte	.LFB114-.Ltext0
 7440 013c E20B0000 		.4byte	.LCFI36-.Ltext0
 7441 0140 0200     		.2byte	0x2
 7442 0142 7D       		.byte	0x7d
 7443 0143 00       		.sleb128 0
 7444 0144 E20B0000 		.4byte	.LCFI36-.Ltext0
 7445 0148 F40B0000 		.4byte	.LFE114-.Ltext0
 7446 014c 0200     		.2byte	0x2
 7447 014e 7D       		.byte	0x7d
 7448 014f 08       		.sleb128 8
 7449 0150 00000000 		.4byte	0
 7450 0154 00000000 		.4byte	0
 7451              	.LLST117:
 7452 0158 E00B0000 		.4byte	.LVL264-.Ltext0
 7453 015c E60B0000 		.4byte	.LVL265-.Ltext0
 7454 0160 0100     		.2byte	0x1
ARM GAS  /tmp/ccPoddoo.s 			page 201


 7455 0162 50       		.byte	0x50
 7456 0163 E60B0000 		.4byte	.LVL265-.Ltext0
 7457 0167 F40B0000 		.4byte	.LFE114-.Ltext0
 7458 016b 0400     		.2byte	0x4
 7459 016d F3       		.byte	0xf3
 7460 016e 01       		.uleb128 0x1
 7461 016f 50       		.byte	0x50
 7462 0170 9F       		.byte	0x9f
 7463 0171 00000000 		.4byte	0
 7464 0175 00000000 		.4byte	0
 7465              	.LLST118:
 7466 0179 E60B0000 		.4byte	.LVL265-.Ltext0
 7467 017d F10B0000 		.4byte	.LVL266-1-.Ltext0
 7468 0181 0100     		.2byte	0x1
 7469 0183 50       		.byte	0x50
 7470 0184 00000000 		.4byte	0
 7471 0188 00000000 		.4byte	0
 7472              	.LLST108:
 7473 018c 400B0000 		.4byte	.LFB113-.Ltext0
 7474 0190 420B0000 		.4byte	.LCFI33-.Ltext0
 7475 0194 0200     		.2byte	0x2
 7476 0196 7D       		.byte	0x7d
 7477 0197 00       		.sleb128 0
 7478 0198 420B0000 		.4byte	.LCFI33-.Ltext0
 7479 019c 680B0000 		.4byte	.LFE113-.Ltext0
 7480 01a0 0200     		.2byte	0x2
 7481 01a2 7D       		.byte	0x7d
 7482 01a3 08       		.sleb128 8
 7483 01a4 00000000 		.4byte	0
 7484 01a8 00000000 		.4byte	0
 7485              	.LLST109:
 7486 01ac 400B0000 		.4byte	.LVL251-.Ltext0
 7487 01b0 460B0000 		.4byte	.LVL252-.Ltext0
 7488 01b4 0100     		.2byte	0x1
 7489 01b6 50       		.byte	0x50
 7490 01b7 460B0000 		.4byte	.LVL252-.Ltext0
 7491 01bb 680B0000 		.4byte	.LFE113-.Ltext0
 7492 01bf 0400     		.2byte	0x4
 7493 01c1 F3       		.byte	0xf3
 7494 01c2 01       		.uleb128 0x1
 7495 01c3 50       		.byte	0x50
 7496 01c4 9F       		.byte	0x9f
 7497 01c5 00000000 		.4byte	0
 7498 01c9 00000000 		.4byte	0
 7499              	.LLST110:
 7500 01cd 460B0000 		.4byte	.LVL252-.Ltext0
 7501 01d1 650B0000 		.4byte	.LVL253-1-.Ltext0
 7502 01d5 0100     		.2byte	0x1
 7503 01d7 50       		.byte	0x50
 7504 01d8 00000000 		.4byte	0
 7505 01dc 00000000 		.4byte	0
 7506              	.LLST111:
 7507 01e0 680B0000 		.4byte	.LFB112-.Ltext0
 7508 01e4 6A0B0000 		.4byte	.LCFI34-.Ltext0
 7509 01e8 0200     		.2byte	0x2
 7510 01ea 7D       		.byte	0x7d
 7511 01eb 00       		.sleb128 0
ARM GAS  /tmp/ccPoddoo.s 			page 202


 7512 01ec 6A0B0000 		.4byte	.LCFI34-.Ltext0
 7513 01f0 900B0000 		.4byte	.LFE112-.Ltext0
 7514 01f4 0200     		.2byte	0x2
 7515 01f6 7D       		.byte	0x7d
 7516 01f7 08       		.sleb128 8
 7517 01f8 00000000 		.4byte	0
 7518 01fc 00000000 		.4byte	0
 7519              	.LLST112:
 7520 0200 680B0000 		.4byte	.LVL254-.Ltext0
 7521 0204 6E0B0000 		.4byte	.LVL255-.Ltext0
 7522 0208 0100     		.2byte	0x1
 7523 020a 50       		.byte	0x50
 7524 020b 6E0B0000 		.4byte	.LVL255-.Ltext0
 7525 020f 900B0000 		.4byte	.LFE112-.Ltext0
 7526 0213 0400     		.2byte	0x4
 7527 0215 F3       		.byte	0xf3
 7528 0216 01       		.uleb128 0x1
 7529 0217 50       		.byte	0x50
 7530 0218 9F       		.byte	0x9f
 7531 0219 00000000 		.4byte	0
 7532 021d 00000000 		.4byte	0
 7533              	.LLST113:
 7534 0221 6E0B0000 		.4byte	.LVL255-.Ltext0
 7535 0225 8D0B0000 		.4byte	.LVL256-1-.Ltext0
 7536 0229 0100     		.2byte	0x1
 7537 022b 50       		.byte	0x50
 7538 022c 00000000 		.4byte	0
 7539 0230 00000000 		.4byte	0
 7540              	.LLST102:
 7541 0234 880A0000 		.4byte	.LFB111-.Ltext0
 7542 0238 8A0A0000 		.4byte	.LCFI31-.Ltext0
 7543 023c 0200     		.2byte	0x2
 7544 023e 7D       		.byte	0x7d
 7545 023f 00       		.sleb128 0
 7546 0240 8A0A0000 		.4byte	.LCFI31-.Ltext0
 7547 0244 980A0000 		.4byte	.LFE111-.Ltext0
 7548 0248 0200     		.2byte	0x2
 7549 024a 7D       		.byte	0x7d
 7550 024b 08       		.sleb128 8
 7551 024c 00000000 		.4byte	0
 7552 0250 00000000 		.4byte	0
 7553              	.LLST103:
 7554 0254 880A0000 		.4byte	.LVL237-.Ltext0
 7555 0258 8E0A0000 		.4byte	.LVL238-.Ltext0
 7556 025c 0100     		.2byte	0x1
 7557 025e 50       		.byte	0x50
 7558 025f 8E0A0000 		.4byte	.LVL238-.Ltext0
 7559 0263 980A0000 		.4byte	.LFE111-.Ltext0
 7560 0267 0400     		.2byte	0x4
 7561 0269 F3       		.byte	0xf3
 7562 026a 01       		.uleb128 0x1
 7563 026b 50       		.byte	0x50
 7564 026c 9F       		.byte	0x9f
 7565 026d 00000000 		.4byte	0
 7566 0271 00000000 		.4byte	0
 7567              	.LLST104:
 7568 0275 8E0A0000 		.4byte	.LVL238-.Ltext0
ARM GAS  /tmp/ccPoddoo.s 			page 203


 7569 0279 950A0000 		.4byte	.LVL239-1-.Ltext0
 7570 027d 0100     		.2byte	0x1
 7571 027f 50       		.byte	0x50
 7572 0280 00000000 		.4byte	0
 7573 0284 00000000 		.4byte	0
 7574              	.LLST87:
 7575 0288 FC080000 		.4byte	.LFB107-.Ltext0
 7576 028c 00090000 		.4byte	.LCFI25-.Ltext0
 7577 0290 0200     		.2byte	0x2
 7578 0292 7D       		.byte	0x7d
 7579 0293 00       		.sleb128 0
 7580 0294 00090000 		.4byte	.LCFI25-.Ltext0
 7581 0298 4A090000 		.4byte	.LFE107-.Ltext0
 7582 029c 0200     		.2byte	0x2
 7583 029e 7D       		.byte	0x7d
 7584 029f 08       		.sleb128 8
 7585 02a0 00000000 		.4byte	0
 7586 02a4 00000000 		.4byte	0
 7587              	.LLST88:
 7588 02a8 FC080000 		.4byte	.LVL188-.Ltext0
 7589 02ac 08090000 		.4byte	.LVL191-.Ltext0
 7590 02b0 0100     		.2byte	0x1
 7591 02b2 50       		.byte	0x50
 7592 02b3 08090000 		.4byte	.LVL191-.Ltext0
 7593 02b7 4A090000 		.4byte	.LFE107-.Ltext0
 7594 02bb 0400     		.2byte	0x4
 7595 02bd F3       		.byte	0xf3
 7596 02be 01       		.uleb128 0x1
 7597 02bf 50       		.byte	0x50
 7598 02c0 9F       		.byte	0x9f
 7599 02c1 00000000 		.4byte	0
 7600 02c5 00000000 		.4byte	0
 7601              	.LLST89:
 7602 02c9 FC080000 		.4byte	.LVL188-.Ltext0
 7603 02cd 04090000 		.4byte	.LVL190-.Ltext0
 7604 02d1 0200     		.2byte	0x2
 7605 02d3 30       		.byte	0x30
 7606 02d4 9F       		.byte	0x9f
 7607 02d5 04090000 		.4byte	.LVL190-.Ltext0
 7608 02d9 0E090000 		.4byte	.LVL192-.Ltext0
 7609 02dd 0B00     		.2byte	0xb
 7610 02df 72       		.byte	0x72
 7611 02e0 00       		.sleb128 0
 7612 02e1 08       		.byte	0x8
 7613 02e2 80       		.byte	0x80
 7614 02e3 1A       		.byte	0x1a
 7615 02e4 30       		.byte	0x30
 7616 02e5 2E       		.byte	0x2e
 7617 02e6 08       		.byte	0x8
 7618 02e7 FF       		.byte	0xff
 7619 02e8 1A       		.byte	0x1a
 7620 02e9 9F       		.byte	0x9f
 7621 02ea 24090000 		.4byte	.LVL195-.Ltext0
 7622 02ee 2E090000 		.4byte	.LVL196-.Ltext0
 7623 02f2 0B00     		.2byte	0xb
 7624 02f4 73       		.byte	0x73
 7625 02f5 00       		.sleb128 0
ARM GAS  /tmp/ccPoddoo.s 			page 204


 7626 02f6 08       		.byte	0x8
 7627 02f7 40       		.byte	0x40
 7628 02f8 1A       		.byte	0x1a
 7629 02f9 30       		.byte	0x30
 7630 02fa 2E       		.byte	0x2e
 7631 02fb 08       		.byte	0x8
 7632 02fc FF       		.byte	0xff
 7633 02fd 1A       		.byte	0x1a
 7634 02fe 9F       		.byte	0x9f
 7635 02ff 00000000 		.4byte	0
 7636 0303 00000000 		.4byte	0
 7637              	.LLST90:
 7638 0307 FE080000 		.4byte	.LVL189-.Ltext0
 7639 030b 47090000 		.4byte	.LVL198-1-.Ltext0
 7640 030f 0100     		.2byte	0x1
 7641 0311 51       		.byte	0x51
 7642 0312 00000000 		.4byte	0
 7643 0316 00000000 		.4byte	0
 7644              	.LLST91:
 7645 031a 14090000 		.4byte	.LVL193-.Ltext0
 7646 031e 22090000 		.4byte	.LVL194-.Ltext0
 7647 0322 0100     		.2byte	0x1
 7648 0324 51       		.byte	0x51
 7649 0325 00000000 		.4byte	0
 7650 0329 00000000 		.4byte	0
 7651              	.LLST84:
 7652 032d F0080000 		.4byte	.LFB106-.Ltext0
 7653 0331 F2080000 		.4byte	.LCFI24-.Ltext0
 7654 0335 0200     		.2byte	0x2
 7655 0337 7D       		.byte	0x7d
 7656 0338 00       		.sleb128 0
 7657 0339 F2080000 		.4byte	.LCFI24-.Ltext0
 7658 033d FA080000 		.4byte	.LFE106-.Ltext0
 7659 0341 0200     		.2byte	0x2
 7660 0343 7D       		.byte	0x7d
 7661 0344 08       		.sleb128 8
 7662 0345 00000000 		.4byte	0
 7663 0349 00000000 		.4byte	0
 7664              	.LLST85:
 7665 034d F0080000 		.4byte	.LVL185-.Ltext0
 7666 0351 F4080000 		.4byte	.LVL186-.Ltext0
 7667 0355 0100     		.2byte	0x1
 7668 0357 50       		.byte	0x50
 7669 0358 F4080000 		.4byte	.LVL186-.Ltext0
 7670 035c FA080000 		.4byte	.LFE106-.Ltext0
 7671 0360 0400     		.2byte	0x4
 7672 0362 F3       		.byte	0xf3
 7673 0363 01       		.uleb128 0x1
 7674 0364 50       		.byte	0x50
 7675 0365 9F       		.byte	0x9f
 7676 0366 00000000 		.4byte	0
 7677 036a 00000000 		.4byte	0
 7678              	.LLST86:
 7679 036e F0080000 		.4byte	.LVL185-.Ltext0
 7680 0372 F4080000 		.4byte	.LVL186-.Ltext0
 7681 0376 0200     		.2byte	0x2
 7682 0378 70       		.byte	0x70
ARM GAS  /tmp/ccPoddoo.s 			page 205


 7683 0379 24       		.sleb128 36
 7684 037a F4080000 		.4byte	.LVL186-.Ltext0
 7685 037e F7080000 		.4byte	.LVL187-1-.Ltext0
 7686 0382 0500     		.2byte	0x5
 7687 0384 F3       		.byte	0xf3
 7688 0385 01       		.uleb128 0x1
 7689 0386 50       		.byte	0x50
 7690 0387 23       		.byte	0x23
 7691 0388 24       		.uleb128 0x24
 7692 0389 00000000 		.4byte	0
 7693 038d 00000000 		.4byte	0
 7694              	.LLST77:
 7695 0391 3A080000 		.4byte	.LFB105-.Ltext0
 7696 0395 3C080000 		.4byte	.LCFI22-.Ltext0
 7697 0399 0200     		.2byte	0x2
 7698 039b 7D       		.byte	0x7d
 7699 039c 00       		.sleb128 0
 7700 039d 3C080000 		.4byte	.LCFI22-.Ltext0
 7701 03a1 72080000 		.4byte	.LFE105-.Ltext0
 7702 03a5 0200     		.2byte	0x2
 7703 03a7 7D       		.byte	0x7d
 7704 03a8 08       		.sleb128 8
 7705 03a9 00000000 		.4byte	0
 7706 03ad 00000000 		.4byte	0
 7707              	.LLST78:
 7708 03b1 3A080000 		.4byte	.LVL170-.Ltext0
 7709 03b5 6C080000 		.4byte	.LVL172-.Ltext0
 7710 03b9 0100     		.2byte	0x1
 7711 03bb 50       		.byte	0x50
 7712 03bc 6C080000 		.4byte	.LVL172-.Ltext0
 7713 03c0 72080000 		.4byte	.LFE105-.Ltext0
 7714 03c4 0400     		.2byte	0x4
 7715 03c6 F3       		.byte	0xf3
 7716 03c7 01       		.uleb128 0x1
 7717 03c8 50       		.byte	0x50
 7718 03c9 9F       		.byte	0x9f
 7719 03ca 00000000 		.4byte	0
 7720 03ce 00000000 		.4byte	0
 7721              	.LLST79:
 7722 03d2 40080000 		.4byte	.LVL171-.Ltext0
 7723 03d6 6F080000 		.4byte	.LVL173-1-.Ltext0
 7724 03da 0100     		.2byte	0x1
 7725 03dc 52       		.byte	0x52
 7726 03dd 00000000 		.4byte	0
 7727 03e1 00000000 		.4byte	0
 7728              	.LLST74:
 7729 03e5 2E080000 		.4byte	.LFB104-.Ltext0
 7730 03e9 30080000 		.4byte	.LCFI21-.Ltext0
 7731 03ed 0200     		.2byte	0x2
 7732 03ef 7D       		.byte	0x7d
 7733 03f0 00       		.sleb128 0
 7734 03f1 30080000 		.4byte	.LCFI21-.Ltext0
 7735 03f5 38080000 		.4byte	.LFE104-.Ltext0
 7736 03f9 0200     		.2byte	0x2
 7737 03fb 7D       		.byte	0x7d
 7738 03fc 08       		.sleb128 8
 7739 03fd 00000000 		.4byte	0
ARM GAS  /tmp/ccPoddoo.s 			page 206


 7740 0401 00000000 		.4byte	0
 7741              	.LLST75:
 7742 0405 2E080000 		.4byte	.LVL167-.Ltext0
 7743 0409 32080000 		.4byte	.LVL168-.Ltext0
 7744 040d 0100     		.2byte	0x1
 7745 040f 50       		.byte	0x50
 7746 0410 32080000 		.4byte	.LVL168-.Ltext0
 7747 0414 38080000 		.4byte	.LFE104-.Ltext0
 7748 0418 0400     		.2byte	0x4
 7749 041a F3       		.byte	0xf3
 7750 041b 01       		.uleb128 0x1
 7751 041c 50       		.byte	0x50
 7752 041d 9F       		.byte	0x9f
 7753 041e 00000000 		.4byte	0
 7754 0422 00000000 		.4byte	0
 7755              	.LLST76:
 7756 0426 2E080000 		.4byte	.LVL167-.Ltext0
 7757 042a 32080000 		.4byte	.LVL168-.Ltext0
 7758 042e 0200     		.2byte	0x2
 7759 0430 70       		.byte	0x70
 7760 0431 24       		.sleb128 36
 7761 0432 32080000 		.4byte	.LVL168-.Ltext0
 7762 0436 35080000 		.4byte	.LVL169-1-.Ltext0
 7763 043a 0500     		.2byte	0x5
 7764 043c F3       		.byte	0xf3
 7765 043d 01       		.uleb128 0x1
 7766 043e 50       		.byte	0x50
 7767 043f 23       		.byte	0x23
 7768 0440 24       		.uleb128 0x24
 7769 0441 00000000 		.4byte	0
 7770 0445 00000000 		.4byte	0
 7771              	.LLST71:
 7772 0449 00080000 		.4byte	.LFB103-.Ltext0
 7773 044d 02080000 		.4byte	.LCFI20-.Ltext0
 7774 0451 0200     		.2byte	0x2
 7775 0453 7D       		.byte	0x7d
 7776 0454 00       		.sleb128 0
 7777 0455 02080000 		.4byte	.LCFI20-.Ltext0
 7778 0459 2C080000 		.4byte	.LFE103-.Ltext0
 7779 045d 0200     		.2byte	0x2
 7780 045f 7D       		.byte	0x7d
 7781 0460 08       		.sleb128 8
 7782 0461 00000000 		.4byte	0
 7783 0465 00000000 		.4byte	0
 7784              	.LLST72:
 7785 0469 00080000 		.4byte	.LVL161-.Ltext0
 7786 046d 26080000 		.4byte	.LVL165-.Ltext0
 7787 0471 0100     		.2byte	0x1
 7788 0473 50       		.byte	0x50
 7789 0474 26080000 		.4byte	.LVL165-.Ltext0
 7790 0478 2C080000 		.4byte	.LFE103-.Ltext0
 7791 047c 0400     		.2byte	0x4
 7792 047e F3       		.byte	0xf3
 7793 047f 01       		.uleb128 0x1
 7794 0480 50       		.byte	0x50
 7795 0481 9F       		.byte	0x9f
 7796 0482 00000000 		.4byte	0
ARM GAS  /tmp/ccPoddoo.s 			page 207


 7797 0486 00000000 		.4byte	0
 7798              	.LLST73:
 7799 048a 06080000 		.4byte	.LVL162-.Ltext0
 7800 048e 14080000 		.4byte	.LVL163-.Ltext0
 7801 0492 0100     		.2byte	0x1
 7802 0494 52       		.byte	0x52
 7803 0495 14080000 		.4byte	.LVL163-.Ltext0
 7804 0499 24080000 		.4byte	.LVL164-.Ltext0
 7805 049d 0200     		.2byte	0x2
 7806 049f 70       		.byte	0x70
 7807 04a0 24       		.sleb128 36
 7808 04a1 24080000 		.4byte	.LVL164-.Ltext0
 7809 04a5 29080000 		.4byte	.LVL166-1-.Ltext0
 7810 04a9 0100     		.2byte	0x1
 7811 04ab 52       		.byte	0x52
 7812 04ac 00000000 		.4byte	0
 7813 04b0 00000000 		.4byte	0
 7814              	.LLST134:
 7815 04b4 500D0000 		.4byte	.LVL312-.Ltext0
 7816 04b8 520D0000 		.4byte	.LVL313-.Ltext0
 7817 04bc 0100     		.2byte	0x1
 7818 04be 50       		.byte	0x50
 7819 04bf 520D0000 		.4byte	.LVL313-.Ltext0
 7820 04c3 540D0000 		.4byte	.LFE102-.Ltext0
 7821 04c7 0400     		.2byte	0x4
 7822 04c9 F3       		.byte	0xf3
 7823 04ca 01       		.uleb128 0x1
 7824 04cb 50       		.byte	0x50
 7825 04cc 9F       		.byte	0x9f
 7826 04cd 00000000 		.4byte	0
 7827 04d1 00000000 		.4byte	0
 7828              	.LLST131:
 7829 04d5 440D0000 		.4byte	.LVL308-.Ltext0
 7830 04d9 4C0D0000 		.4byte	.LVL310-.Ltext0
 7831 04dd 0100     		.2byte	0x1
 7832 04df 50       		.byte	0x50
 7833 04e0 4C0D0000 		.4byte	.LVL310-.Ltext0
 7834 04e4 500D0000 		.4byte	.LFE101-.Ltext0
 7835 04e8 0400     		.2byte	0x4
 7836 04ea F3       		.byte	0xf3
 7837 04eb 01       		.uleb128 0x1
 7838 04ec 50       		.byte	0x50
 7839 04ed 9F       		.byte	0x9f
 7840 04ee 00000000 		.4byte	0
 7841 04f2 00000000 		.4byte	0
 7842              	.LLST132:
 7843 04f6 440D0000 		.4byte	.LVL308-.Ltext0
 7844 04fa 480D0000 		.4byte	.LVL309-.Ltext0
 7845 04fe 0200     		.2byte	0x2
 7846 0500 30       		.byte	0x30
 7847 0501 9F       		.byte	0x9f
 7848 0502 480D0000 		.4byte	.LVL309-.Ltext0
 7849 0506 500D0000 		.4byte	.LFE101-.Ltext0
 7850 050a 0100     		.2byte	0x1
 7851 050c 52       		.byte	0x52
 7852 050d 00000000 		.4byte	0
 7853 0511 00000000 		.4byte	0
ARM GAS  /tmp/ccPoddoo.s 			page 208


 7854              	.LLST133:
 7855 0515 440D0000 		.4byte	.LVL308-.Ltext0
 7856 0519 4C0D0000 		.4byte	.LVL310-.Ltext0
 7857 051d 0200     		.2byte	0x2
 7858 051f 30       		.byte	0x30
 7859 0520 9F       		.byte	0x9f
 7860 0521 4C0D0000 		.4byte	.LVL310-.Ltext0
 7861 0525 4E0D0000 		.4byte	.LVL311-.Ltext0
 7862 0529 0100     		.2byte	0x1
 7863 052b 50       		.byte	0x50
 7864 052c 00000000 		.4byte	0
 7865 0530 00000000 		.4byte	0
 7866              	.LLST129:
 7867 0534 140D0000 		.4byte	.LVL299-.Ltext0
 7868 0538 3E0D0000 		.4byte	.LVL305-.Ltext0
 7869 053c 0100     		.2byte	0x1
 7870 053e 50       		.byte	0x50
 7871 053f 3E0D0000 		.4byte	.LVL305-.Ltext0
 7872 0543 400D0000 		.4byte	.LVL306-.Ltext0
 7873 0547 0400     		.2byte	0x4
 7874 0549 F3       		.byte	0xf3
 7875 054a 01       		.uleb128 0x1
 7876 054b 50       		.byte	0x50
 7877 054c 9F       		.byte	0x9f
 7878 054d 400D0000 		.4byte	.LVL306-.Ltext0
 7879 0551 420D0000 		.4byte	.LVL307-.Ltext0
 7880 0555 0100     		.2byte	0x1
 7881 0557 50       		.byte	0x50
 7882 0558 420D0000 		.4byte	.LVL307-.Ltext0
 7883 055c 440D0000 		.4byte	.LFE100-.Ltext0
 7884 0560 0400     		.2byte	0x4
 7885 0562 F3       		.byte	0xf3
 7886 0563 01       		.uleb128 0x1
 7887 0564 50       		.byte	0x50
 7888 0565 9F       		.byte	0x9f
 7889 0566 00000000 		.4byte	0
 7890 056a 00000000 		.4byte	0
 7891              	.LLST130:
 7892 056e 140D0000 		.4byte	.LVL299-.Ltext0
 7893 0572 260D0000 		.4byte	.LVL300-.Ltext0
 7894 0576 0200     		.2byte	0x2
 7895 0578 30       		.byte	0x30
 7896 0579 9F       		.byte	0x9f
 7897 057a 260D0000 		.4byte	.LVL300-.Ltext0
 7898 057e 320D0000 		.4byte	.LVL303-.Ltext0
 7899 0582 0100     		.2byte	0x1
 7900 0584 53       		.byte	0x53
 7901 0585 320D0000 		.4byte	.LVL303-.Ltext0
 7902 0589 360D0000 		.4byte	.LVL304-.Ltext0
 7903 058d 0200     		.2byte	0x2
 7904 058f 72       		.byte	0x72
 7905 0590 0C       		.sleb128 12
 7906 0591 400D0000 		.4byte	.LVL306-.Ltext0
 7907 0595 440D0000 		.4byte	.LFE100-.Ltext0
 7908 0599 0200     		.2byte	0x2
 7909 059b 30       		.byte	0x30
 7910 059c 9F       		.byte	0x9f
ARM GAS  /tmp/ccPoddoo.s 			page 209


 7911 059d 00000000 		.4byte	0
 7912 05a1 00000000 		.4byte	0
 7913              	.LLST127:
 7914 05a5 E40C0000 		.4byte	.LVL290-.Ltext0
 7915 05a9 0E0D0000 		.4byte	.LVL296-.Ltext0
 7916 05ad 0100     		.2byte	0x1
 7917 05af 50       		.byte	0x50
 7918 05b0 0E0D0000 		.4byte	.LVL296-.Ltext0
 7919 05b4 100D0000 		.4byte	.LVL297-.Ltext0
 7920 05b8 0400     		.2byte	0x4
 7921 05ba F3       		.byte	0xf3
 7922 05bb 01       		.uleb128 0x1
 7923 05bc 50       		.byte	0x50
 7924 05bd 9F       		.byte	0x9f
 7925 05be 100D0000 		.4byte	.LVL297-.Ltext0
 7926 05c2 120D0000 		.4byte	.LVL298-.Ltext0
 7927 05c6 0100     		.2byte	0x1
 7928 05c8 50       		.byte	0x50
 7929 05c9 120D0000 		.4byte	.LVL298-.Ltext0
 7930 05cd 140D0000 		.4byte	.LFE99-.Ltext0
 7931 05d1 0400     		.2byte	0x4
 7932 05d3 F3       		.byte	0xf3
 7933 05d4 01       		.uleb128 0x1
 7934 05d5 50       		.byte	0x50
 7935 05d6 9F       		.byte	0x9f
 7936 05d7 00000000 		.4byte	0
 7937 05db 00000000 		.4byte	0
 7938              	.LLST128:
 7939 05df E40C0000 		.4byte	.LVL290-.Ltext0
 7940 05e3 F60C0000 		.4byte	.LVL291-.Ltext0
 7941 05e7 0200     		.2byte	0x2
 7942 05e9 30       		.byte	0x30
 7943 05ea 9F       		.byte	0x9f
 7944 05eb F60C0000 		.4byte	.LVL291-.Ltext0
 7945 05ef 020D0000 		.4byte	.LVL294-.Ltext0
 7946 05f3 0100     		.2byte	0x1
 7947 05f5 53       		.byte	0x53
 7948 05f6 020D0000 		.4byte	.LVL294-.Ltext0
 7949 05fa 060D0000 		.4byte	.LVL295-.Ltext0
 7950 05fe 0200     		.2byte	0x2
 7951 0600 72       		.byte	0x72
 7952 0601 0C       		.sleb128 12
 7953 0602 100D0000 		.4byte	.LVL297-.Ltext0
 7954 0606 140D0000 		.4byte	.LFE99-.Ltext0
 7955 060a 0200     		.2byte	0x2
 7956 060c 30       		.byte	0x30
 7957 060d 9F       		.byte	0x9f
 7958 060e 00000000 		.4byte	0
 7959 0612 00000000 		.4byte	0
 7960              	.LLST126:
 7961 0616 B80C0000 		.4byte	.LVL286-.Ltext0
 7962 061a DE0C0000 		.4byte	.LVL287-.Ltext0
 7963 061e 0100     		.2byte	0x1
 7964 0620 50       		.byte	0x50
 7965 0621 DE0C0000 		.4byte	.LVL287-.Ltext0
 7966 0625 E00C0000 		.4byte	.LVL288-.Ltext0
 7967 0629 0400     		.2byte	0x4
ARM GAS  /tmp/ccPoddoo.s 			page 210


 7968 062b F3       		.byte	0xf3
 7969 062c 01       		.uleb128 0x1
 7970 062d 50       		.byte	0x50
 7971 062e 9F       		.byte	0x9f
 7972 062f E00C0000 		.4byte	.LVL288-.Ltext0
 7973 0633 E20C0000 		.4byte	.LVL289-.Ltext0
 7974 0637 0100     		.2byte	0x1
 7975 0639 50       		.byte	0x50
 7976 063a E20C0000 		.4byte	.LVL289-.Ltext0
 7977 063e E40C0000 		.4byte	.LFE98-.Ltext0
 7978 0642 0400     		.2byte	0x4
 7979 0644 F3       		.byte	0xf3
 7980 0645 01       		.uleb128 0x1
 7981 0646 50       		.byte	0x50
 7982 0647 9F       		.byte	0x9f
 7983 0648 00000000 		.4byte	0
 7984 064c 00000000 		.4byte	0
 7985              	.LLST125:
 7986 0650 8C0C0000 		.4byte	.LVL282-.Ltext0
 7987 0654 B20C0000 		.4byte	.LVL283-.Ltext0
 7988 0658 0100     		.2byte	0x1
 7989 065a 50       		.byte	0x50
 7990 065b B20C0000 		.4byte	.LVL283-.Ltext0
 7991 065f B40C0000 		.4byte	.LVL284-.Ltext0
 7992 0663 0400     		.2byte	0x4
 7993 0665 F3       		.byte	0xf3
 7994 0666 01       		.uleb128 0x1
 7995 0667 50       		.byte	0x50
 7996 0668 9F       		.byte	0x9f
 7997 0669 B40C0000 		.4byte	.LVL284-.Ltext0
 7998 066d B60C0000 		.4byte	.LVL285-.Ltext0
 7999 0671 0100     		.2byte	0x1
 8000 0673 50       		.byte	0x50
 8001 0674 B60C0000 		.4byte	.LVL285-.Ltext0
 8002 0678 B80C0000 		.4byte	.LFE97-.Ltext0
 8003 067c 0400     		.2byte	0x4
 8004 067e F3       		.byte	0xf3
 8005 067f 01       		.uleb128 0x1
 8006 0680 50       		.byte	0x50
 8007 0681 9F       		.byte	0x9f
 8008 0682 00000000 		.4byte	0
 8009 0686 00000000 		.4byte	0
 8010              	.LLST124:
 8011 068a 600C0000 		.4byte	.LVL278-.Ltext0
 8012 068e 860C0000 		.4byte	.LVL279-.Ltext0
 8013 0692 0100     		.2byte	0x1
 8014 0694 50       		.byte	0x50
 8015 0695 860C0000 		.4byte	.LVL279-.Ltext0
 8016 0699 880C0000 		.4byte	.LVL280-.Ltext0
 8017 069d 0400     		.2byte	0x4
 8018 069f F3       		.byte	0xf3
 8019 06a0 01       		.uleb128 0x1
 8020 06a1 50       		.byte	0x50
 8021 06a2 9F       		.byte	0x9f
 8022 06a3 880C0000 		.4byte	.LVL280-.Ltext0
 8023 06a7 8A0C0000 		.4byte	.LVL281-.Ltext0
 8024 06ab 0100     		.2byte	0x1
ARM GAS  /tmp/ccPoddoo.s 			page 211


 8025 06ad 50       		.byte	0x50
 8026 06ae 8A0C0000 		.4byte	.LVL281-.Ltext0
 8027 06b2 8C0C0000 		.4byte	.LFE96-.Ltext0
 8028 06b6 0400     		.2byte	0x4
 8029 06b8 F3       		.byte	0xf3
 8030 06b9 01       		.uleb128 0x1
 8031 06ba 50       		.byte	0x50
 8032 06bb 9F       		.byte	0x9f
 8033 06bc 00000000 		.4byte	0
 8034 06c0 00000000 		.4byte	0
 8035              	.LLST92:
 8036 06c4 4A090000 		.4byte	.LFB87-.Ltext0
 8037 06c8 4E090000 		.4byte	.LCFI26-.Ltext0
 8038 06cc 0200     		.2byte	0x2
 8039 06ce 7D       		.byte	0x7d
 8040 06cf 00       		.sleb128 0
 8041 06d0 4E090000 		.4byte	.LCFI26-.Ltext0
 8042 06d4 66090000 		.4byte	.LCFI27-.Ltext0
 8043 06d8 0200     		.2byte	0x2
 8044 06da 7D       		.byte	0x7d
 8045 06db 10       		.sleb128 16
 8046 06dc 66090000 		.4byte	.LCFI27-.Ltext0
 8047 06e0 68090000 		.4byte	.LCFI28-.Ltext0
 8048 06e4 0200     		.2byte	0x2
 8049 06e6 7D       		.byte	0x7d
 8050 06e7 00       		.sleb128 0
 8051 06e8 68090000 		.4byte	.LCFI28-.Ltext0
 8052 06ec FE090000 		.4byte	.LCFI29-.Ltext0
 8053 06f0 0200     		.2byte	0x2
 8054 06f2 7D       		.byte	0x7d
 8055 06f3 10       		.sleb128 16
 8056 06f4 FE090000 		.4byte	.LCFI29-.Ltext0
 8057 06f8 020A0000 		.4byte	.LCFI30-.Ltext0
 8058 06fc 0200     		.2byte	0x2
 8059 06fe 7D       		.byte	0x7d
 8060 06ff 00       		.sleb128 0
 8061 0700 020A0000 		.4byte	.LCFI30-.Ltext0
 8062 0704 880A0000 		.4byte	.LFE87-.Ltext0
 8063 0708 0200     		.2byte	0x2
 8064 070a 7D       		.byte	0x7d
 8065 070b 10       		.sleb128 16
 8066 070c 00000000 		.4byte	0
 8067 0710 00000000 		.4byte	0
 8068              	.LLST93:
 8069 0714 4A090000 		.4byte	.LVL199-.Ltext0
 8070 0718 67090000 		.4byte	.LVL204-1-.Ltext0
 8071 071c 0100     		.2byte	0x1
 8072 071e 50       		.byte	0x50
 8073 071f 67090000 		.4byte	.LVL204-1-.Ltext0
 8074 0723 68090000 		.4byte	.LVL204-.Ltext0
 8075 0727 0400     		.2byte	0x4
 8076 0729 F3       		.byte	0xf3
 8077 072a 01       		.uleb128 0x1
 8078 072b 50       		.byte	0x50
 8079 072c 9F       		.byte	0x9f
 8080 072d 68090000 		.4byte	.LVL204-.Ltext0
 8081 0731 86090000 		.4byte	.LVL206-.Ltext0
ARM GAS  /tmp/ccPoddoo.s 			page 212


 8082 0735 0100     		.2byte	0x1
 8083 0737 50       		.byte	0x50
 8084 0738 86090000 		.4byte	.LVL206-.Ltext0
 8085 073c CE090000 		.4byte	.LVL209-.Ltext0
 8086 0740 0100     		.2byte	0x1
 8087 0742 54       		.byte	0x54
 8088 0743 CE090000 		.4byte	.LVL209-.Ltext0
 8089 0747 E4090000 		.4byte	.LVL213-.Ltext0
 8090 074b 0100     		.2byte	0x1
 8091 074d 50       		.byte	0x50
 8092 074e E4090000 		.4byte	.LVL213-.Ltext0
 8093 0752 FE090000 		.4byte	.LVL215-.Ltext0
 8094 0756 0100     		.2byte	0x1
 8095 0758 54       		.byte	0x54
 8096 0759 FE090000 		.4byte	.LVL215-.Ltext0
 8097 075d 020A0000 		.4byte	.LVL216-.Ltext0
 8098 0761 0400     		.2byte	0x4
 8099 0763 F3       		.byte	0xf3
 8100 0764 01       		.uleb128 0x1
 8101 0765 50       		.byte	0x50
 8102 0766 9F       		.byte	0x9f
 8103 0767 020A0000 		.4byte	.LVL216-.Ltext0
 8104 076b 0A0A0000 		.4byte	.LVL218-.Ltext0
 8105 076f 0100     		.2byte	0x1
 8106 0771 54       		.byte	0x54
 8107 0772 0A0A0000 		.4byte	.LVL218-.Ltext0
 8108 0776 0D0A0000 		.4byte	.LVL219-1-.Ltext0
 8109 077a 0100     		.2byte	0x1
 8110 077c 50       		.byte	0x50
 8111 077d 0D0A0000 		.4byte	.LVL219-1-.Ltext0
 8112 0781 120A0000 		.4byte	.LVL220-.Ltext0
 8113 0785 0100     		.2byte	0x1
 8114 0787 54       		.byte	0x54
 8115 0788 120A0000 		.4byte	.LVL220-.Ltext0
 8116 078c 680A0000 		.4byte	.LVL232-.Ltext0
 8117 0790 0100     		.2byte	0x1
 8118 0792 50       		.byte	0x50
 8119 0793 680A0000 		.4byte	.LVL232-.Ltext0
 8120 0797 840A0000 		.4byte	.LVL236-.Ltext0
 8121 079b 0100     		.2byte	0x1
 8122 079d 54       		.byte	0x54
 8123 079e 840A0000 		.4byte	.LVL236-.Ltext0
 8124 07a2 880A0000 		.4byte	.LFE87-.Ltext0
 8125 07a6 0400     		.2byte	0x4
 8126 07a8 F3       		.byte	0xf3
 8127 07a9 01       		.uleb128 0x1
 8128 07aa 50       		.byte	0x50
 8129 07ab 9F       		.byte	0x9f
 8130 07ac 00000000 		.4byte	0
 8131 07b0 00000000 		.4byte	0
 8132              	.LLST94:
 8133 07b4 50090000 		.4byte	.LVL200-.Ltext0
 8134 07b8 67090000 		.4byte	.LVL204-1-.Ltext0
 8135 07bc 0100     		.2byte	0x1
 8136 07be 52       		.byte	0x52
 8137 07bf 68090000 		.4byte	.LVL204-.Ltext0
 8138 07c3 C1090000 		.4byte	.LVL207-1-.Ltext0
ARM GAS  /tmp/ccPoddoo.s 			page 213


 8139 07c7 0100     		.2byte	0x1
 8140 07c9 52       		.byte	0x52
 8141 07ca 120A0000 		.4byte	.LVL220-.Ltext0
 8142 07ce 1E0A0000 		.4byte	.LVL222-.Ltext0
 8143 07d2 0100     		.2byte	0x1
 8144 07d4 52       		.byte	0x52
 8145 07d5 660A0000 		.4byte	.LVL231-.Ltext0
 8146 07d9 6C0A0000 		.4byte	.LVL233-.Ltext0
 8147 07dd 0100     		.2byte	0x1
 8148 07df 52       		.byte	0x52
 8149 07e0 00000000 		.4byte	0
 8150 07e4 00000000 		.4byte	0
 8151              	.LLST95:
 8152 07e8 56090000 		.4byte	.LVL201-.Ltext0
 8153 07ec 67090000 		.4byte	.LVL204-1-.Ltext0
 8154 07f0 0100     		.2byte	0x1
 8155 07f2 51       		.byte	0x51
 8156 07f3 68090000 		.4byte	.LVL204-.Ltext0
 8157 07f7 C1090000 		.4byte	.LVL207-1-.Ltext0
 8158 07fb 0100     		.2byte	0x1
 8159 07fd 51       		.byte	0x51
 8160 07fe 120A0000 		.4byte	.LVL220-.Ltext0
 8161 0802 2E0A0000 		.4byte	.LVL224-.Ltext0
 8162 0806 0100     		.2byte	0x1
 8163 0808 51       		.byte	0x51
 8164 0809 5C0A0000 		.4byte	.LVL229-.Ltext0
 8165 080d 5E0A0000 		.4byte	.LVL230-.Ltext0
 8166 0811 0100     		.2byte	0x1
 8167 0813 51       		.byte	0x51
 8168 0814 660A0000 		.4byte	.LVL231-.Ltext0
 8169 0818 810A0000 		.4byte	.LVL235-1-.Ltext0
 8170 081c 0100     		.2byte	0x1
 8171 081e 51       		.byte	0x51
 8172 081f 00000000 		.4byte	0
 8173 0823 00000000 		.4byte	0
 8174              	.LLST96:
 8175 0827 58090000 		.4byte	.LVL202-.Ltext0
 8176 082b 60090000 		.4byte	.LVL203-.Ltext0
 8177 082f 0100     		.2byte	0x1
 8178 0831 55       		.byte	0x55
 8179 0832 68090000 		.4byte	.LVL204-.Ltext0
 8180 0836 6C090000 		.4byte	.LVL205-.Ltext0
 8181 083a 0100     		.2byte	0x1
 8182 083c 55       		.byte	0x55
 8183 083d 00000000 		.4byte	0
 8184 0841 00000000 		.4byte	0
 8185              	.LLST97:
 8186 0845 58090000 		.4byte	.LVL202-.Ltext0
 8187 0849 67090000 		.4byte	.LVL204-1-.Ltext0
 8188 084d 0500     		.2byte	0x5
 8189 084f 72       		.byte	0x72
 8190 0850 00       		.sleb128 0
 8191 0851 3F       		.byte	0x3f
 8192 0852 1A       		.byte	0x1a
 8193 0853 9F       		.byte	0x9f
 8194 0854 68090000 		.4byte	.LVL204-.Ltext0
 8195 0858 C1090000 		.4byte	.LVL207-1-.Ltext0
ARM GAS  /tmp/ccPoddoo.s 			page 214


 8196 085c 0500     		.2byte	0x5
 8197 085e 72       		.byte	0x72
 8198 085f 00       		.sleb128 0
 8199 0860 3F       		.byte	0x3f
 8200 0861 1A       		.byte	0x1a
 8201 0862 9F       		.byte	0x9f
 8202 0863 120A0000 		.4byte	.LVL220-.Ltext0
 8203 0867 1E0A0000 		.4byte	.LVL222-.Ltext0
 8204 086b 0500     		.2byte	0x5
 8205 086d 72       		.byte	0x72
 8206 086e 00       		.sleb128 0
 8207 086f 3F       		.byte	0x3f
 8208 0870 1A       		.byte	0x1a
 8209 0871 9F       		.byte	0x9f
 8210 0872 660A0000 		.4byte	.LVL231-.Ltext0
 8211 0876 6C0A0000 		.4byte	.LVL233-.Ltext0
 8212 087a 0500     		.2byte	0x5
 8213 087c 72       		.byte	0x72
 8214 087d 00       		.sleb128 0
 8215 087e 3F       		.byte	0x3f
 8216 087f 1A       		.byte	0x1a
 8217 0880 9F       		.byte	0x9f
 8218 0881 00000000 		.4byte	0
 8219 0885 00000000 		.4byte	0
 8220              	.LLST98:
 8221 0889 58090000 		.4byte	.LVL202-.Ltext0
 8222 088d C8090000 		.4byte	.LVL208-.Ltext0
 8223 0891 0200     		.2byte	0x2
 8224 0893 30       		.byte	0x30
 8225 0894 9F       		.byte	0x9f
 8226 0895 C8090000 		.4byte	.LVL208-.Ltext0
 8227 0899 D2090000 		.4byte	.LVL210-.Ltext0
 8228 089d 0B00     		.2byte	0xb
 8229 089f 75       		.byte	0x75
 8230 08a0 00       		.sleb128 0
 8231 08a1 08       		.byte	0x8
 8232 08a2 40       		.byte	0x40
 8233 08a3 1A       		.byte	0x1a
 8234 08a4 30       		.byte	0x30
 8235 08a5 2E       		.byte	0x2e
 8236 08a6 08       		.byte	0x8
 8237 08a7 FF       		.byte	0xff
 8238 08a8 1A       		.byte	0x1a
 8239 08a9 9F       		.byte	0x9f
 8240 08aa D2090000 		.4byte	.LVL210-.Ltext0
 8241 08ae D4090000 		.4byte	.LVL211-.Ltext0
 8242 08b2 0800     		.2byte	0x8
 8243 08b4 75       		.byte	0x75
 8244 08b5 00       		.sleb128 0
 8245 08b6 30       		.byte	0x30
 8246 08b7 2E       		.byte	0x2e
 8247 08b8 08       		.byte	0x8
 8248 08b9 FF       		.byte	0xff
 8249 08ba 1A       		.byte	0x1a
 8250 08bb 9F       		.byte	0x9f
 8251 08bc 0A0A0000 		.4byte	.LVL218-.Ltext0
 8252 08c0 120A0000 		.4byte	.LVL220-.Ltext0
ARM GAS  /tmp/ccPoddoo.s 			page 215


 8253 08c4 0800     		.2byte	0x8
 8254 08c6 75       		.byte	0x75
 8255 08c7 00       		.sleb128 0
 8256 08c8 30       		.byte	0x30
 8257 08c9 2E       		.byte	0x2e
 8258 08ca 08       		.byte	0x8
 8259 08cb FF       		.byte	0xff
 8260 08cc 1A       		.byte	0x1a
 8261 08cd 9F       		.byte	0x9f
 8262 08ce 120A0000 		.4byte	.LVL220-.Ltext0
 8263 08d2 820A0000 		.4byte	.LVL235-.Ltext0
 8264 08d6 0200     		.2byte	0x2
 8265 08d8 30       		.byte	0x30
 8266 08d9 9F       		.byte	0x9f
 8267 08da 00000000 		.4byte	0
 8268 08de 00000000 		.4byte	0
 8269              	.LLST99:
 8270 08e2 1A0A0000 		.4byte	.LVL221-.Ltext0
 8271 08e6 660A0000 		.4byte	.LVL231-.Ltext0
 8272 08ea 0100     		.2byte	0x1
 8273 08ec 50       		.byte	0x50
 8274 08ed 00000000 		.4byte	0
 8275 08f1 00000000 		.4byte	0
 8276              	.LLST100:
 8277 08f5 2C0A0000 		.4byte	.LVL223-.Ltext0
 8278 08f9 3A0A0000 		.4byte	.LVL225-.Ltext0
 8279 08fd 0100     		.2byte	0x1
 8280 08ff 52       		.byte	0x52
 8281 0900 3A0A0000 		.4byte	.LVL225-.Ltext0
 8282 0904 3C0A0000 		.4byte	.LVL226-.Ltext0
 8283 0908 0200     		.2byte	0x2
 8284 090a 70       		.byte	0x70
 8285 090b 20       		.sleb128 32
 8286 090c 580A0000 		.4byte	.LVL227-.Ltext0
 8287 0910 5A0A0000 		.4byte	.LVL228-.Ltext0
 8288 0914 0100     		.2byte	0x1
 8289 0916 52       		.byte	0x52
 8290 0917 5A0A0000 		.4byte	.LVL228-.Ltext0
 8291 091b 5C0A0000 		.4byte	.LVL229-.Ltext0
 8292 091f 0200     		.2byte	0x2
 8293 0921 70       		.byte	0x70
 8294 0922 20       		.sleb128 32
 8295 0923 00000000 		.4byte	0
 8296 0927 00000000 		.4byte	0
 8297              	.LLST101:
 8298 092b 6E0A0000 		.4byte	.LVL234-.Ltext0
 8299 092f 820A0000 		.4byte	.LVL235-.Ltext0
 8300 0933 0100     		.2byte	0x1
 8301 0935 54       		.byte	0x54
 8302 0936 00000000 		.4byte	0
 8303 093a 00000000 		.4byte	0
 8304              	.LLST119:
 8305 093e F60B0000 		.4byte	.LFB86-.Ltext0
 8306 0942 FA0B0000 		.4byte	.LCFI37-.Ltext0
 8307 0946 0200     		.2byte	0x2
 8308 0948 7D       		.byte	0x7d
 8309 0949 00       		.sleb128 0
ARM GAS  /tmp/ccPoddoo.s 			page 216


 8310 094a FA0B0000 		.4byte	.LCFI37-.Ltext0
 8311 094e 4C0C0000 		.4byte	.LFE86-.Ltext0
 8312 0952 0200     		.2byte	0x2
 8313 0954 7D       		.byte	0x7d
 8314 0955 08       		.sleb128 8
 8315 0956 00000000 		.4byte	0
 8316 095a 00000000 		.4byte	0
 8317              	.LLST120:
 8318 095e F60B0000 		.4byte	.LVL268-.Ltext0
 8319 0962 240C0000 		.4byte	.LVL269-.Ltext0
 8320 0966 0100     		.2byte	0x1
 8321 0968 50       		.byte	0x50
 8322 0969 240C0000 		.4byte	.LVL269-.Ltext0
 8323 096d 360C0000 		.4byte	.LVL272-.Ltext0
 8324 0971 0100     		.2byte	0x1
 8325 0973 54       		.byte	0x54
 8326 0974 360C0000 		.4byte	.LVL272-.Ltext0
 8327 0978 410C0000 		.4byte	.LVL273-1-.Ltext0
 8328 097c 0100     		.2byte	0x1
 8329 097e 50       		.byte	0x50
 8330 097f 410C0000 		.4byte	.LVL273-1-.Ltext0
 8331 0983 440C0000 		.4byte	.LVL274-.Ltext0
 8332 0987 0100     		.2byte	0x1
 8333 0989 54       		.byte	0x54
 8334 098a 440C0000 		.4byte	.LVL274-.Ltext0
 8335 098e 4C0C0000 		.4byte	.LFE86-.Ltext0
 8336 0992 0100     		.2byte	0x1
 8337 0994 50       		.byte	0x50
 8338 0995 00000000 		.4byte	0
 8339 0999 00000000 		.4byte	0
 8340              	.LLST114:
 8341 099d 920B0000 		.4byte	.LFB85-.Ltext0
 8342 09a1 960B0000 		.4byte	.LCFI35-.Ltext0
 8343 09a5 0200     		.2byte	0x2
 8344 09a7 7D       		.byte	0x7d
 8345 09a8 00       		.sleb128 0
 8346 09a9 960B0000 		.4byte	.LCFI35-.Ltext0
 8347 09ad E00B0000 		.4byte	.LFE85-.Ltext0
 8348 09b1 0200     		.2byte	0x2
 8349 09b3 7D       		.byte	0x7d
 8350 09b4 08       		.sleb128 8
 8351 09b5 00000000 		.4byte	0
 8352 09b9 00000000 		.4byte	0
 8353              	.LLST115:
 8354 09bd 920B0000 		.4byte	.LVL257-.Ltext0
 8355 09c1 B80B0000 		.4byte	.LVL258-.Ltext0
 8356 09c5 0100     		.2byte	0x1
 8357 09c7 50       		.byte	0x50
 8358 09c8 B80B0000 		.4byte	.LVL258-.Ltext0
 8359 09cc CA0B0000 		.4byte	.LVL261-.Ltext0
 8360 09d0 0100     		.2byte	0x1
 8361 09d2 54       		.byte	0x54
 8362 09d3 CA0B0000 		.4byte	.LVL261-.Ltext0
 8363 09d7 D50B0000 		.4byte	.LVL262-1-.Ltext0
 8364 09db 0100     		.2byte	0x1
 8365 09dd 50       		.byte	0x50
 8366 09de D50B0000 		.4byte	.LVL262-1-.Ltext0
ARM GAS  /tmp/ccPoddoo.s 			page 217


 8367 09e2 D80B0000 		.4byte	.LVL263-.Ltext0
 8368 09e6 0100     		.2byte	0x1
 8369 09e8 54       		.byte	0x54
 8370 09e9 D80B0000 		.4byte	.LVL263-.Ltext0
 8371 09ed E00B0000 		.4byte	.LFE85-.Ltext0
 8372 09f1 0100     		.2byte	0x1
 8373 09f3 50       		.byte	0x50
 8374 09f4 00000000 		.4byte	0
 8375 09f8 00000000 		.4byte	0
 8376              	.LLST105:
 8377 09fc 9A0A0000 		.4byte	.LFB84-.Ltext0
 8378 0a00 9E0A0000 		.4byte	.LCFI32-.Ltext0
 8379 0a04 0200     		.2byte	0x2
 8380 0a06 7D       		.byte	0x7d
 8381 0a07 00       		.sleb128 0
 8382 0a08 9E0A0000 		.4byte	.LCFI32-.Ltext0
 8383 0a0c 400B0000 		.4byte	.LFE84-.Ltext0
 8384 0a10 0200     		.2byte	0x2
 8385 0a12 7D       		.byte	0x7d
 8386 0a13 08       		.sleb128 8
 8387 0a14 00000000 		.4byte	0
 8388 0a18 00000000 		.4byte	0
 8389              	.LLST106:
 8390 0a1c 9A0A0000 		.4byte	.LVL240-.Ltext0
 8391 0a20 AC0A0000 		.4byte	.LVL241-.Ltext0
 8392 0a24 0100     		.2byte	0x1
 8393 0a26 50       		.byte	0x50
 8394 0a27 AC0A0000 		.4byte	.LVL241-.Ltext0
 8395 0a2b 380B0000 		.4byte	.LVL250-.Ltext0
 8396 0a2f 0100     		.2byte	0x1
 8397 0a31 54       		.byte	0x54
 8398 0a32 380B0000 		.4byte	.LVL250-.Ltext0
 8399 0a36 400B0000 		.4byte	.LFE84-.Ltext0
 8400 0a3a 0400     		.2byte	0x4
 8401 0a3c F3       		.byte	0xf3
 8402 0a3d 01       		.uleb128 0x1
 8403 0a3e 50       		.byte	0x50
 8404 0a3f 9F       		.byte	0x9f
 8405 0a40 00000000 		.4byte	0
 8406 0a44 00000000 		.4byte	0
 8407              	.LLST107:
 8408 0a48 9A0A0000 		.4byte	.LVL240-.Ltext0
 8409 0a4c D80A0000 		.4byte	.LVL242-.Ltext0
 8410 0a50 0200     		.2byte	0x2
 8411 0a52 31       		.byte	0x31
 8412 0a53 9F       		.byte	0x9f
 8413 0a54 D80A0000 		.4byte	.LVL242-.Ltext0
 8414 0a58 EF0A0000 		.4byte	.LVL243-1-.Ltext0
 8415 0a5c 0100     		.2byte	0x1
 8416 0a5e 53       		.byte	0x53
 8417 0a5f 120B0000 		.4byte	.LVL246-.Ltext0
 8418 0a63 300B0000 		.4byte	.LVL248-.Ltext0
 8419 0a67 0200     		.2byte	0x2
 8420 0a69 31       		.byte	0x31
 8421 0a6a 9F       		.byte	0x9f
 8422 0a6b 300B0000 		.4byte	.LVL248-.Ltext0
 8423 0a6f 340B0000 		.4byte	.LVL249-.Ltext0
ARM GAS  /tmp/ccPoddoo.s 			page 218


 8424 0a73 0100     		.2byte	0x1
 8425 0a75 53       		.byte	0x53
 8426 0a76 00000000 		.4byte	0
 8427 0a7a 00000000 		.4byte	0
 8428              	.LLST69:
 8429 0a7e AE070000 		.4byte	.LFB83-.Ltext0
 8430 0a82 B2070000 		.4byte	.LCFI19-.Ltext0
 8431 0a86 0200     		.2byte	0x2
 8432 0a88 7D       		.byte	0x7d
 8433 0a89 00       		.sleb128 0
 8434 0a8a B2070000 		.4byte	.LCFI19-.Ltext0
 8435 0a8e FE070000 		.4byte	.LFE83-.Ltext0
 8436 0a92 0200     		.2byte	0x2
 8437 0a94 7D       		.byte	0x7d
 8438 0a95 08       		.sleb128 8
 8439 0a96 00000000 		.4byte	0
 8440 0a9a 00000000 		.4byte	0
 8441              	.LLST70:
 8442 0a9e AE070000 		.4byte	.LVL156-.Ltext0
 8443 0aa2 CE070000 		.4byte	.LVL157-.Ltext0
 8444 0aa6 0100     		.2byte	0x1
 8445 0aa8 50       		.byte	0x50
 8446 0aa9 CE070000 		.4byte	.LVL157-.Ltext0
 8447 0aad FE070000 		.4byte	.LFE83-.Ltext0
 8448 0ab1 0100     		.2byte	0x1
 8449 0ab3 54       		.byte	0x54
 8450 0ab4 00000000 		.4byte	0
 8451 0ab8 00000000 		.4byte	0
 8452              	.LLST67:
 8453 0abc 66070000 		.4byte	.LFB82-.Ltext0
 8454 0ac0 6A070000 		.4byte	.LCFI18-.Ltext0
 8455 0ac4 0200     		.2byte	0x2
 8456 0ac6 7D       		.byte	0x7d
 8457 0ac7 00       		.sleb128 0
 8458 0ac8 6A070000 		.4byte	.LCFI18-.Ltext0
 8459 0acc AE070000 		.4byte	.LFE82-.Ltext0
 8460 0ad0 0200     		.2byte	0x2
 8461 0ad2 7D       		.byte	0x7d
 8462 0ad3 08       		.sleb128 8
 8463 0ad4 00000000 		.4byte	0
 8464 0ad8 00000000 		.4byte	0
 8465              	.LLST68:
 8466 0adc 66070000 		.4byte	.LVL151-.Ltext0
 8467 0ae0 7E070000 		.4byte	.LVL152-.Ltext0
 8468 0ae4 0100     		.2byte	0x1
 8469 0ae6 50       		.byte	0x50
 8470 0ae7 7E070000 		.4byte	.LVL152-.Ltext0
 8471 0aeb AE070000 		.4byte	.LFE82-.Ltext0
 8472 0aef 0100     		.2byte	0x1
 8473 0af1 54       		.byte	0x54
 8474 0af2 00000000 		.4byte	0
 8475 0af6 00000000 		.4byte	0
 8476              	.LLST65:
 8477 0afa E6060000 		.4byte	.LFB81-.Ltext0
 8478 0afe EA060000 		.4byte	.LCFI17-.Ltext0
 8479 0b02 0200     		.2byte	0x2
 8480 0b04 7D       		.byte	0x7d
ARM GAS  /tmp/ccPoddoo.s 			page 219


 8481 0b05 00       		.sleb128 0
 8482 0b06 EA060000 		.4byte	.LCFI17-.Ltext0
 8483 0b0a 66070000 		.4byte	.LFE81-.Ltext0
 8484 0b0e 0200     		.2byte	0x2
 8485 0b10 7D       		.byte	0x7d
 8486 0b11 08       		.sleb128 8
 8487 0b12 00000000 		.4byte	0
 8488 0b16 00000000 		.4byte	0
 8489              	.LLST66:
 8490 0b1a E6060000 		.4byte	.LVL144-.Ltext0
 8491 0b1e 06070000 		.4byte	.LVL145-.Ltext0
 8492 0b22 0100     		.2byte	0x1
 8493 0b24 50       		.byte	0x50
 8494 0b25 06070000 		.4byte	.LVL145-.Ltext0
 8495 0b29 66070000 		.4byte	.LFE81-.Ltext0
 8496 0b2d 0100     		.2byte	0x1
 8497 0b2f 54       		.byte	0x54
 8498 0b30 00000000 		.4byte	0
 8499 0b34 00000000 		.4byte	0
 8500              	.LLST61:
 8501 0b38 88060000 		.4byte	.LFB80-.Ltext0
 8502 0b3c 8C060000 		.4byte	.LCFI16-.Ltext0
 8503 0b40 0200     		.2byte	0x2
 8504 0b42 7D       		.byte	0x7d
 8505 0b43 00       		.sleb128 0
 8506 0b44 8C060000 		.4byte	.LCFI16-.Ltext0
 8507 0b48 E6060000 		.4byte	.LFE80-.Ltext0
 8508 0b4c 0200     		.2byte	0x2
 8509 0b4e 7D       		.byte	0x7d
 8510 0b4f 08       		.sleb128 8
 8511 0b50 00000000 		.4byte	0
 8512 0b54 00000000 		.4byte	0
 8513              	.LLST62:
 8514 0b58 88060000 		.4byte	.LVL134-.Ltext0
 8515 0b5c A0060000 		.4byte	.LVL137-.Ltext0
 8516 0b60 0100     		.2byte	0x1
 8517 0b62 50       		.byte	0x50
 8518 0b63 A0060000 		.4byte	.LVL137-.Ltext0
 8519 0b67 E6060000 		.4byte	.LFE80-.Ltext0
 8520 0b6b 0100     		.2byte	0x1
 8521 0b6d 54       		.byte	0x54
 8522 0b6e 00000000 		.4byte	0
 8523 0b72 00000000 		.4byte	0
 8524              	.LLST63:
 8525 0b76 88060000 		.4byte	.LVL134-.Ltext0
 8526 0b7a 8E060000 		.4byte	.LVL135-.Ltext0
 8527 0b7e 0200     		.2byte	0x2
 8528 0b80 30       		.byte	0x30
 8529 0b81 9F       		.byte	0x9f
 8530 0b82 8E060000 		.4byte	.LVL135-.Ltext0
 8531 0b86 9E060000 		.4byte	.LVL136-.Ltext0
 8532 0b8a 0B00     		.2byte	0xb
 8533 0b8c 72       		.byte	0x72
 8534 0b8d 00       		.sleb128 0
 8535 0b8e 08       		.byte	0x8
 8536 0b8f 80       		.byte	0x80
 8537 0b90 1A       		.byte	0x1a
ARM GAS  /tmp/ccPoddoo.s 			page 220


 8538 0b91 30       		.byte	0x30
 8539 0b92 2E       		.byte	0x2e
 8540 0b93 08       		.byte	0x8
 8541 0b94 FF       		.byte	0xff
 8542 0b95 1A       		.byte	0x1a
 8543 0b96 9F       		.byte	0x9f
 8544 0b97 C0060000 		.4byte	.LVL140-.Ltext0
 8545 0b9b CA060000 		.4byte	.LVL141-.Ltext0
 8546 0b9f 0B00     		.2byte	0xb
 8547 0ba1 72       		.byte	0x72
 8548 0ba2 00       		.sleb128 0
 8549 0ba3 08       		.byte	0x8
 8550 0ba4 40       		.byte	0x40
 8551 0ba5 1A       		.byte	0x1a
 8552 0ba6 30       		.byte	0x30
 8553 0ba7 2E       		.byte	0x2e
 8554 0ba8 08       		.byte	0x8
 8555 0ba9 FF       		.byte	0xff
 8556 0baa 1A       		.byte	0x1a
 8557 0bab 9F       		.byte	0x9f
 8558 0bac 00000000 		.4byte	0
 8559 0bb0 00000000 		.4byte	0
 8560              	.LLST64:
 8561 0bb4 AC060000 		.4byte	.LVL138-.Ltext0
 8562 0bb8 BC060000 		.4byte	.LVL139-.Ltext0
 8563 0bbc 0100     		.2byte	0x1
 8564 0bbe 54       		.byte	0x54
 8565 0bbf 00000000 		.4byte	0
 8566 0bc3 00000000 		.4byte	0
 8567              	.LLST59:
 8568 0bc7 26060000 		.4byte	.LFB79-.Ltext0
 8569 0bcb 2C060000 		.4byte	.LCFI13-.Ltext0
 8570 0bcf 0200     		.2byte	0x2
 8571 0bd1 7D       		.byte	0x7d
 8572 0bd2 00       		.sleb128 0
 8573 0bd3 2C060000 		.4byte	.LCFI13-.Ltext0
 8574 0bd7 82060000 		.4byte	.LCFI14-.Ltext0
 8575 0bdb 0200     		.2byte	0x2
 8576 0bdd 7D       		.byte	0x7d
 8577 0bde 08       		.sleb128 8
 8578 0bdf 82060000 		.4byte	.LCFI14-.Ltext0
 8579 0be3 84060000 		.4byte	.LCFI15-.Ltext0
 8580 0be7 0200     		.2byte	0x2
 8581 0be9 7D       		.byte	0x7d
 8582 0bea 00       		.sleb128 0
 8583 0beb 84060000 		.4byte	.LCFI15-.Ltext0
 8584 0bef 88060000 		.4byte	.LFE79-.Ltext0
 8585 0bf3 0200     		.2byte	0x2
 8586 0bf5 7D       		.byte	0x7d
 8587 0bf6 08       		.sleb128 8
 8588 0bf7 00000000 		.4byte	0
 8589 0bfb 00000000 		.4byte	0
 8590              	.LLST60:
 8591 0bff 26060000 		.4byte	.LVL130-.Ltext0
 8592 0c03 80060000 		.4byte	.LVL131-.Ltext0
 8593 0c07 0100     		.2byte	0x1
 8594 0c09 50       		.byte	0x50
ARM GAS  /tmp/ccPoddoo.s 			page 221


 8595 0c0a 80060000 		.4byte	.LVL131-.Ltext0
 8596 0c0e 84060000 		.4byte	.LVL132-.Ltext0
 8597 0c12 0400     		.2byte	0x4
 8598 0c14 F3       		.byte	0xf3
 8599 0c15 01       		.uleb128 0x1
 8600 0c16 50       		.byte	0x50
 8601 0c17 9F       		.byte	0x9f
 8602 0c18 84060000 		.4byte	.LVL132-.Ltext0
 8603 0c1c 86060000 		.4byte	.LVL133-.Ltext0
 8604 0c20 0100     		.2byte	0x1
 8605 0c22 50       		.byte	0x50
 8606 0c23 86060000 		.4byte	.LVL133-.Ltext0
 8607 0c27 88060000 		.4byte	.LFE79-.Ltext0
 8608 0c2b 0400     		.2byte	0x4
 8609 0c2d F3       		.byte	0xf3
 8610 0c2e 01       		.uleb128 0x1
 8611 0c2f 50       		.byte	0x50
 8612 0c30 9F       		.byte	0x9f
 8613 0c31 00000000 		.4byte	0
 8614 0c35 00000000 		.4byte	0
 8615              	.LLST57:
 8616 0c39 CC050000 		.4byte	.LVL122-.Ltext0
 8617 0c3d 20060000 		.4byte	.LVL127-.Ltext0
 8618 0c41 0100     		.2byte	0x1
 8619 0c43 50       		.byte	0x50
 8620 0c44 20060000 		.4byte	.LVL127-.Ltext0
 8621 0c48 22060000 		.4byte	.LVL128-.Ltext0
 8622 0c4c 0400     		.2byte	0x4
 8623 0c4e F3       		.byte	0xf3
 8624 0c4f 01       		.uleb128 0x1
 8625 0c50 50       		.byte	0x50
 8626 0c51 9F       		.byte	0x9f
 8627 0c52 22060000 		.4byte	.LVL128-.Ltext0
 8628 0c56 24060000 		.4byte	.LVL129-.Ltext0
 8629 0c5a 0100     		.2byte	0x1
 8630 0c5c 50       		.byte	0x50
 8631 0c5d 24060000 		.4byte	.LVL129-.Ltext0
 8632 0c61 26060000 		.4byte	.LFE78-.Ltext0
 8633 0c65 0400     		.2byte	0x4
 8634 0c67 F3       		.byte	0xf3
 8635 0c68 01       		.uleb128 0x1
 8636 0c69 50       		.byte	0x50
 8637 0c6a 9F       		.byte	0x9f
 8638 0c6b 00000000 		.4byte	0
 8639 0c6f 00000000 		.4byte	0
 8640              	.LLST58:
 8641 0c73 CC050000 		.4byte	.LVL122-.Ltext0
 8642 0c77 DE050000 		.4byte	.LVL123-.Ltext0
 8643 0c7b 0200     		.2byte	0x2
 8644 0c7d 30       		.byte	0x30
 8645 0c7e 9F       		.byte	0x9f
 8646 0c7f DE050000 		.4byte	.LVL123-.Ltext0
 8647 0c83 EC050000 		.4byte	.LVL124-.Ltext0
 8648 0c87 0B00     		.2byte	0xb
 8649 0c89 72       		.byte	0x72
 8650 0c8a 00       		.sleb128 0
 8651 0c8b 08       		.byte	0x8
ARM GAS  /tmp/ccPoddoo.s 			page 222


 8652 0c8c 80       		.byte	0x80
 8653 0c8d 1A       		.byte	0x1a
 8654 0c8e 30       		.byte	0x30
 8655 0c8f 2E       		.byte	0x2e
 8656 0c90 08       		.byte	0x8
 8657 0c91 FF       		.byte	0xff
 8658 0c92 1A       		.byte	0x1a
 8659 0c93 9F       		.byte	0x9f
 8660 0c94 F4050000 		.4byte	.LVL125-.Ltext0
 8661 0c98 FE050000 		.4byte	.LVL126-.Ltext0
 8662 0c9c 0B00     		.2byte	0xb
 8663 0c9e 72       		.byte	0x72
 8664 0c9f 00       		.sleb128 0
 8665 0ca0 08       		.byte	0x8
 8666 0ca1 40       		.byte	0x40
 8667 0ca2 1A       		.byte	0x1a
 8668 0ca3 30       		.byte	0x30
 8669 0ca4 2E       		.byte	0x2e
 8670 0ca5 08       		.byte	0x8
 8671 0ca6 FF       		.byte	0xff
 8672 0ca7 1A       		.byte	0x1a
 8673 0ca8 9F       		.byte	0x9f
 8674 0ca9 22060000 		.4byte	.LVL128-.Ltext0
 8675 0cad 26060000 		.4byte	.LFE78-.Ltext0
 8676 0cb1 0200     		.2byte	0x2
 8677 0cb3 30       		.byte	0x30
 8678 0cb4 9F       		.byte	0x9f
 8679 0cb5 00000000 		.4byte	0
 8680 0cb9 00000000 		.4byte	0
 8681              	.LLST52:
 8682 0cbd 3C050000 		.4byte	.LFB77-.Ltext0
 8683 0cc1 44050000 		.4byte	.LCFI10-.Ltext0
 8684 0cc5 0200     		.2byte	0x2
 8685 0cc7 7D       		.byte	0x7d
 8686 0cc8 00       		.sleb128 0
 8687 0cc9 44050000 		.4byte	.LCFI10-.Ltext0
 8688 0ccd B6050000 		.4byte	.LCFI11-.Ltext0
 8689 0cd1 0200     		.2byte	0x2
 8690 0cd3 7D       		.byte	0x7d
 8691 0cd4 18       		.sleb128 24
 8692 0cd5 B6050000 		.4byte	.LCFI11-.Ltext0
 8693 0cd9 B8050000 		.4byte	.LCFI12-.Ltext0
 8694 0cdd 0200     		.2byte	0x2
 8695 0cdf 7D       		.byte	0x7d
 8696 0ce0 10       		.sleb128 16
 8697 0ce1 B8050000 		.4byte	.LCFI12-.Ltext0
 8698 0ce5 CC050000 		.4byte	.LFE77-.Ltext0
 8699 0ce9 0200     		.2byte	0x2
 8700 0ceb 7D       		.byte	0x7d
 8701 0cec 18       		.sleb128 24
 8702 0ced 00000000 		.4byte	0
 8703 0cf1 00000000 		.4byte	0
 8704              	.LLST53:
 8705 0cf5 3C050000 		.4byte	.LVL111-.Ltext0
 8706 0cf9 70050000 		.4byte	.LVL113-.Ltext0
 8707 0cfd 0100     		.2byte	0x1
 8708 0cff 50       		.byte	0x50
ARM GAS  /tmp/ccPoddoo.s 			page 223


 8709 0d00 70050000 		.4byte	.LVL113-.Ltext0
 8710 0d04 B8050000 		.4byte	.LVL118-.Ltext0
 8711 0d08 0100     		.2byte	0x1
 8712 0d0a 55       		.byte	0x55
 8713 0d0b B8050000 		.4byte	.LVL118-.Ltext0
 8714 0d0f BA050000 		.4byte	.LVL119-.Ltext0
 8715 0d13 0100     		.2byte	0x1
 8716 0d15 50       		.byte	0x50
 8717 0d16 BA050000 		.4byte	.LVL119-.Ltext0
 8718 0d1a BC050000 		.4byte	.LVL120-.Ltext0
 8719 0d1e 0100     		.2byte	0x1
 8720 0d20 55       		.byte	0x55
 8721 0d21 BC050000 		.4byte	.LVL120-.Ltext0
 8722 0d25 BE050000 		.4byte	.LVL121-.Ltext0
 8723 0d29 0100     		.2byte	0x1
 8724 0d2b 50       		.byte	0x50
 8725 0d2c BE050000 		.4byte	.LVL121-.Ltext0
 8726 0d30 CC050000 		.4byte	.LFE77-.Ltext0
 8727 0d34 0100     		.2byte	0x1
 8728 0d36 55       		.byte	0x55
 8729 0d37 00000000 		.4byte	0
 8730 0d3b 00000000 		.4byte	0
 8731              	.LLST54:
 8732 0d3f 3C050000 		.4byte	.LVL111-.Ltext0
 8733 0d43 84050000 		.4byte	.LVL115-.Ltext0
 8734 0d47 0100     		.2byte	0x1
 8735 0d49 51       		.byte	0x51
 8736 0d4a 84050000 		.4byte	.LVL115-.Ltext0
 8737 0d4e 87050000 		.4byte	.LVL116-1-.Ltext0
 8738 0d52 0100     		.2byte	0x1
 8739 0d54 52       		.byte	0x52
 8740 0d55 87050000 		.4byte	.LVL116-1-.Ltext0
 8741 0d59 B8050000 		.4byte	.LVL118-.Ltext0
 8742 0d5d 0400     		.2byte	0x4
 8743 0d5f F3       		.byte	0xf3
 8744 0d60 01       		.uleb128 0x1
 8745 0d61 51       		.byte	0x51
 8746 0d62 9F       		.byte	0x9f
 8747 0d63 B8050000 		.4byte	.LVL118-.Ltext0
 8748 0d67 CC050000 		.4byte	.LFE77-.Ltext0
 8749 0d6b 0100     		.2byte	0x1
 8750 0d6d 51       		.byte	0x51
 8751 0d6e 00000000 		.4byte	0
 8752 0d72 00000000 		.4byte	0
 8753              	.LLST55:
 8754 0d76 3C050000 		.4byte	.LVL111-.Ltext0
 8755 0d7a 42050000 		.4byte	.LVL112-.Ltext0
 8756 0d7e 0100     		.2byte	0x1
 8757 0d80 52       		.byte	0x52
 8758 0d81 42050000 		.4byte	.LVL112-.Ltext0
 8759 0d85 CC050000 		.4byte	.LFE77-.Ltext0
 8760 0d89 0400     		.2byte	0x4
 8761 0d8b F3       		.byte	0xf3
 8762 0d8c 01       		.uleb128 0x1
 8763 0d8d 52       		.byte	0x52
 8764 0d8e 9F       		.byte	0x9f
 8765 0d8f 00000000 		.4byte	0
ARM GAS  /tmp/ccPoddoo.s 			page 224


 8766 0d93 00000000 		.4byte	0
 8767              	.LLST56:
 8768 0d97 7A050000 		.4byte	.LVL114-.Ltext0
 8769 0d9b B4050000 		.4byte	.LVL117-.Ltext0
 8770 0d9f 0600     		.2byte	0x6
 8771 0da1 F2       		.byte	0xf2
 8772 0da2 2E110000 		.4byte	.Ldebug_info0+4398
 8773 0da6 00       		.sleb128 0
 8774 0da7 00000000 		.4byte	0
 8775 0dab 00000000 		.4byte	0
 8776              	.LLST47:
 8777 0daf C6040000 		.4byte	.LFB76-.Ltext0
 8778 0db3 C8040000 		.4byte	.LCFI9-.Ltext0
 8779 0db7 0200     		.2byte	0x2
 8780 0db9 7D       		.byte	0x7d
 8781 0dba 00       		.sleb128 0
 8782 0dbb C8040000 		.4byte	.LCFI9-.Ltext0
 8783 0dbf 3C050000 		.4byte	.LFE76-.Ltext0
 8784 0dc3 0200     		.2byte	0x2
 8785 0dc5 7D       		.byte	0x7d
 8786 0dc6 10       		.sleb128 16
 8787 0dc7 00000000 		.4byte	0
 8788 0dcb 00000000 		.4byte	0
 8789              	.LLST48:
 8790 0dcf C6040000 		.4byte	.LVL101-.Ltext0
 8791 0dd3 EE040000 		.4byte	.LVL103-.Ltext0
 8792 0dd7 0100     		.2byte	0x1
 8793 0dd9 50       		.byte	0x50
 8794 0dda EE040000 		.4byte	.LVL103-.Ltext0
 8795 0dde 26050000 		.4byte	.LVL106-.Ltext0
 8796 0de2 0100     		.2byte	0x1
 8797 0de4 54       		.byte	0x54
 8798 0de5 26050000 		.4byte	.LVL106-.Ltext0
 8799 0de9 28050000 		.4byte	.LVL107-.Ltext0
 8800 0ded 0100     		.2byte	0x1
 8801 0def 50       		.byte	0x50
 8802 0df0 28050000 		.4byte	.LVL107-.Ltext0
 8803 0df4 2A050000 		.4byte	.LVL108-.Ltext0
 8804 0df8 0100     		.2byte	0x1
 8805 0dfa 54       		.byte	0x54
 8806 0dfb 2A050000 		.4byte	.LVL108-.Ltext0
 8807 0dff 2C050000 		.4byte	.LVL109-.Ltext0
 8808 0e03 0100     		.2byte	0x1
 8809 0e05 50       		.byte	0x50
 8810 0e06 2C050000 		.4byte	.LVL109-.Ltext0
 8811 0e0a 2E050000 		.4byte	.LVL110-.Ltext0
 8812 0e0e 0100     		.2byte	0x1
 8813 0e10 54       		.byte	0x54
 8814 0e11 2E050000 		.4byte	.LVL110-.Ltext0
 8815 0e15 3C050000 		.4byte	.LFE76-.Ltext0
 8816 0e19 0400     		.2byte	0x4
 8817 0e1b F3       		.byte	0xf3
 8818 0e1c 01       		.uleb128 0x1
 8819 0e1d 50       		.byte	0x50
 8820 0e1e 9F       		.byte	0x9f
 8821 0e1f 00000000 		.4byte	0
 8822 0e23 00000000 		.4byte	0
ARM GAS  /tmp/ccPoddoo.s 			page 225


 8823              	.LLST49:
 8824 0e27 C6040000 		.4byte	.LVL101-.Ltext0
 8825 0e2b 0D050000 		.4byte	.LVL105-1-.Ltext0
 8826 0e2f 0100     		.2byte	0x1
 8827 0e31 51       		.byte	0x51
 8828 0e32 0D050000 		.4byte	.LVL105-1-.Ltext0
 8829 0e36 26050000 		.4byte	.LVL106-.Ltext0
 8830 0e3a 0400     		.2byte	0x4
 8831 0e3c F3       		.byte	0xf3
 8832 0e3d 01       		.uleb128 0x1
 8833 0e3e 51       		.byte	0x51
 8834 0e3f 9F       		.byte	0x9f
 8835 0e40 26050000 		.4byte	.LVL106-.Ltext0
 8836 0e44 3C050000 		.4byte	.LFE76-.Ltext0
 8837 0e48 0100     		.2byte	0x1
 8838 0e4a 51       		.byte	0x51
 8839 0e4b 00000000 		.4byte	0
 8840 0e4f 00000000 		.4byte	0
 8841              	.LLST50:
 8842 0e53 C6040000 		.4byte	.LVL101-.Ltext0
 8843 0e57 D0040000 		.4byte	.LVL102-.Ltext0
 8844 0e5b 0100     		.2byte	0x1
 8845 0e5d 52       		.byte	0x52
 8846 0e5e D0040000 		.4byte	.LVL102-.Ltext0
 8847 0e62 3C050000 		.4byte	.LFE76-.Ltext0
 8848 0e66 0400     		.2byte	0x4
 8849 0e68 F3       		.byte	0xf3
 8850 0e69 01       		.uleb128 0x1
 8851 0e6a 52       		.byte	0x52
 8852 0e6b 9F       		.byte	0x9f
 8853 0e6c 00000000 		.4byte	0
 8854 0e70 00000000 		.4byte	0
 8855              	.LLST51:
 8856 0e74 00050000 		.4byte	.LVL104-.Ltext0
 8857 0e78 26050000 		.4byte	.LVL106-.Ltext0
 8858 0e7c 0600     		.2byte	0x6
 8859 0e7e F2       		.byte	0xf2
 8860 0e7f C4110000 		.4byte	.Ldebug_info0+4548
 8861 0e83 00       		.sleb128 0
 8862 0e84 00000000 		.4byte	0
 8863 0e88 00000000 		.4byte	0
 8864              	.LLST44:
 8865 0e8c 78040000 		.4byte	.LVL92-.Ltext0
 8866 0e90 AE040000 		.4byte	.LVL96-.Ltext0
 8867 0e94 0100     		.2byte	0x1
 8868 0e96 50       		.byte	0x50
 8869 0e97 AE040000 		.4byte	.LVL96-.Ltext0
 8870 0e9b BE040000 		.4byte	.LVL97-.Ltext0
 8871 0e9f 0400     		.2byte	0x4
 8872 0ea1 F3       		.byte	0xf3
 8873 0ea2 01       		.uleb128 0x1
 8874 0ea3 50       		.byte	0x50
 8875 0ea4 9F       		.byte	0x9f
 8876 0ea5 BE040000 		.4byte	.LVL97-.Ltext0
 8877 0ea9 C0040000 		.4byte	.LVL98-.Ltext0
 8878 0ead 0100     		.2byte	0x1
 8879 0eaf 50       		.byte	0x50
ARM GAS  /tmp/ccPoddoo.s 			page 226


 8880 0eb0 C0040000 		.4byte	.LVL98-.Ltext0
 8881 0eb4 C2040000 		.4byte	.LVL99-.Ltext0
 8882 0eb8 0400     		.2byte	0x4
 8883 0eba F3       		.byte	0xf3
 8884 0ebb 01       		.uleb128 0x1
 8885 0ebc 50       		.byte	0x50
 8886 0ebd 9F       		.byte	0x9f
 8887 0ebe C2040000 		.4byte	.LVL99-.Ltext0
 8888 0ec2 C4040000 		.4byte	.LVL100-.Ltext0
 8889 0ec6 0100     		.2byte	0x1
 8890 0ec8 50       		.byte	0x50
 8891 0ec9 C4040000 		.4byte	.LVL100-.Ltext0
 8892 0ecd C6040000 		.4byte	.LFE75-.Ltext0
 8893 0ed1 0400     		.2byte	0x4
 8894 0ed3 F3       		.byte	0xf3
 8895 0ed4 01       		.uleb128 0x1
 8896 0ed5 50       		.byte	0x50
 8897 0ed6 9F       		.byte	0x9f
 8898 0ed7 00000000 		.4byte	0
 8899 0edb 00000000 		.4byte	0
 8900              	.LLST45:
 8901 0edf 78040000 		.4byte	.LVL92-.Ltext0
 8902 0ee3 A0040000 		.4byte	.LVL95-.Ltext0
 8903 0ee7 0100     		.2byte	0x1
 8904 0ee9 51       		.byte	0x51
 8905 0eea A0040000 		.4byte	.LVL95-.Ltext0
 8906 0eee AE040000 		.4byte	.LVL96-.Ltext0
 8907 0ef2 0200     		.2byte	0x2
 8908 0ef4 70       		.byte	0x70
 8909 0ef5 28       		.sleb128 40
 8910 0ef6 AE040000 		.4byte	.LVL96-.Ltext0
 8911 0efa BE040000 		.4byte	.LVL97-.Ltext0
 8912 0efe 0500     		.2byte	0x5
 8913 0f00 F3       		.byte	0xf3
 8914 0f01 01       		.uleb128 0x1
 8915 0f02 50       		.byte	0x50
 8916 0f03 23       		.byte	0x23
 8917 0f04 28       		.uleb128 0x28
 8918 0f05 BE040000 		.4byte	.LVL97-.Ltext0
 8919 0f09 C6040000 		.4byte	.LFE75-.Ltext0
 8920 0f0d 0100     		.2byte	0x1
 8921 0f0f 51       		.byte	0x51
 8922 0f10 00000000 		.4byte	0
 8923 0f14 00000000 		.4byte	0
 8924              	.LLST46:
 8925 0f18 78040000 		.4byte	.LVL92-.Ltext0
 8926 0f1c 94040000 		.4byte	.LVL93-.Ltext0
 8927 0f20 0100     		.2byte	0x1
 8928 0f22 52       		.byte	0x52
 8929 0f23 94040000 		.4byte	.LVL93-.Ltext0
 8930 0f27 96040000 		.4byte	.LVL94-.Ltext0
 8931 0f2b 0200     		.2byte	0x2
 8932 0f2d 70       		.byte	0x70
 8933 0f2e 2E       		.sleb128 46
 8934 0f2f 96040000 		.4byte	.LVL94-.Ltext0
 8935 0f33 AE040000 		.4byte	.LVL96-.Ltext0
 8936 0f37 0200     		.2byte	0x2
ARM GAS  /tmp/ccPoddoo.s 			page 227


 8937 0f39 70       		.byte	0x70
 8938 0f3a 2C       		.sleb128 44
 8939 0f3b AE040000 		.4byte	.LVL96-.Ltext0
 8940 0f3f BE040000 		.4byte	.LVL97-.Ltext0
 8941 0f43 0500     		.2byte	0x5
 8942 0f45 F3       		.byte	0xf3
 8943 0f46 01       		.uleb128 0x1
 8944 0f47 50       		.byte	0x50
 8945 0f48 23       		.byte	0x23
 8946 0f49 2C       		.uleb128 0x2c
 8947 0f4a BE040000 		.4byte	.LVL97-.Ltext0
 8948 0f4e C6040000 		.4byte	.LFE75-.Ltext0
 8949 0f52 0100     		.2byte	0x1
 8950 0f54 52       		.byte	0x52
 8951 0f55 00000000 		.4byte	0
 8952 0f59 00000000 		.4byte	0
 8953              	.LLST41:
 8954 0f5d 3A040000 		.4byte	.LVL83-.Ltext0
 8955 0f61 6E040000 		.4byte	.LVL87-.Ltext0
 8956 0f65 0100     		.2byte	0x1
 8957 0f67 50       		.byte	0x50
 8958 0f68 6E040000 		.4byte	.LVL87-.Ltext0
 8959 0f6c 70040000 		.4byte	.LVL88-.Ltext0
 8960 0f70 0400     		.2byte	0x4
 8961 0f72 F3       		.byte	0xf3
 8962 0f73 01       		.uleb128 0x1
 8963 0f74 50       		.byte	0x50
 8964 0f75 9F       		.byte	0x9f
 8965 0f76 70040000 		.4byte	.LVL88-.Ltext0
 8966 0f7a 72040000 		.4byte	.LVL89-.Ltext0
 8967 0f7e 0100     		.2byte	0x1
 8968 0f80 50       		.byte	0x50
 8969 0f81 72040000 		.4byte	.LVL89-.Ltext0
 8970 0f85 74040000 		.4byte	.LVL90-.Ltext0
 8971 0f89 0400     		.2byte	0x4
 8972 0f8b F3       		.byte	0xf3
 8973 0f8c 01       		.uleb128 0x1
 8974 0f8d 50       		.byte	0x50
 8975 0f8e 9F       		.byte	0x9f
 8976 0f8f 74040000 		.4byte	.LVL90-.Ltext0
 8977 0f93 76040000 		.4byte	.LVL91-.Ltext0
 8978 0f97 0100     		.2byte	0x1
 8979 0f99 50       		.byte	0x50
 8980 0f9a 76040000 		.4byte	.LVL91-.Ltext0
 8981 0f9e 78040000 		.4byte	.LFE74-.Ltext0
 8982 0fa2 0400     		.2byte	0x4
 8983 0fa4 F3       		.byte	0xf3
 8984 0fa5 01       		.uleb128 0x1
 8985 0fa6 50       		.byte	0x50
 8986 0fa7 9F       		.byte	0x9f
 8987 0fa8 00000000 		.4byte	0
 8988 0fac 00000000 		.4byte	0
 8989              	.LLST42:
 8990 0fb0 3A040000 		.4byte	.LVL83-.Ltext0
 8991 0fb4 5A040000 		.4byte	.LVL85-.Ltext0
 8992 0fb8 0100     		.2byte	0x1
 8993 0fba 51       		.byte	0x51
ARM GAS  /tmp/ccPoddoo.s 			page 228


 8994 0fbb 5A040000 		.4byte	.LVL85-.Ltext0
 8995 0fbf 6E040000 		.4byte	.LVL87-.Ltext0
 8996 0fc3 0200     		.2byte	0x2
 8997 0fc5 70       		.byte	0x70
 8998 0fc6 20       		.sleb128 32
 8999 0fc7 6E040000 		.4byte	.LVL87-.Ltext0
 9000 0fcb 70040000 		.4byte	.LVL88-.Ltext0
 9001 0fcf 0500     		.2byte	0x5
 9002 0fd1 F3       		.byte	0xf3
 9003 0fd2 01       		.uleb128 0x1
 9004 0fd3 50       		.byte	0x50
 9005 0fd4 23       		.byte	0x23
 9006 0fd5 20       		.uleb128 0x20
 9007 0fd6 70040000 		.4byte	.LVL88-.Ltext0
 9008 0fda 78040000 		.4byte	.LFE74-.Ltext0
 9009 0fde 0100     		.2byte	0x1
 9010 0fe0 51       		.byte	0x51
 9011 0fe1 00000000 		.4byte	0
 9012 0fe5 00000000 		.4byte	0
 9013              	.LLST43:
 9014 0fe9 3A040000 		.4byte	.LVL83-.Ltext0
 9015 0fed 56040000 		.4byte	.LVL84-.Ltext0
 9016 0ff1 0100     		.2byte	0x1
 9017 0ff3 52       		.byte	0x52
 9018 0ff4 56040000 		.4byte	.LVL84-.Ltext0
 9019 0ff8 5C040000 		.4byte	.LVL86-.Ltext0
 9020 0ffc 0200     		.2byte	0x2
 9021 0ffe 70       		.byte	0x70
 9022 0fff 26       		.sleb128 38
 9023 1000 5C040000 		.4byte	.LVL86-.Ltext0
 9024 1004 6E040000 		.4byte	.LVL87-.Ltext0
 9025 1008 0200     		.2byte	0x2
 9026 100a 70       		.byte	0x70
 9027 100b 24       		.sleb128 36
 9028 100c 6E040000 		.4byte	.LVL87-.Ltext0
 9029 1010 70040000 		.4byte	.LVL88-.Ltext0
 9030 1014 0500     		.2byte	0x5
 9031 1016 F3       		.byte	0xf3
 9032 1017 01       		.uleb128 0x1
 9033 1018 50       		.byte	0x50
 9034 1019 23       		.byte	0x23
 9035 101a 24       		.uleb128 0x24
 9036 101b 70040000 		.4byte	.LVL88-.Ltext0
 9037 101f 78040000 		.4byte	.LFE74-.Ltext0
 9038 1023 0100     		.2byte	0x1
 9039 1025 52       		.byte	0x52
 9040 1026 00000000 		.4byte	0
 9041 102a 00000000 		.4byte	0
 9042              	.LLST34:
 9043 102e 7C030000 		.4byte	.LFB73-.Ltext0
 9044 1032 80030000 		.4byte	.LCFI8-.Ltext0
 9045 1036 0200     		.2byte	0x2
 9046 1038 7D       		.byte	0x7d
 9047 1039 00       		.sleb128 0
 9048 103a 80030000 		.4byte	.LCFI8-.Ltext0
 9049 103e 3A040000 		.4byte	.LFE73-.Ltext0
 9050 1042 0200     		.2byte	0x2
ARM GAS  /tmp/ccPoddoo.s 			page 229


 9051 1044 7D       		.byte	0x7d
 9052 1045 18       		.sleb128 24
 9053 1046 00000000 		.4byte	0
 9054 104a 00000000 		.4byte	0
 9055              	.LLST35:
 9056 104e 7C030000 		.4byte	.LVL63-.Ltext0
 9057 1052 B3030000 		.4byte	.LVL65-1-.Ltext0
 9058 1056 0100     		.2byte	0x1
 9059 1058 50       		.byte	0x50
 9060 1059 B3030000 		.4byte	.LVL65-1-.Ltext0
 9061 105d EA030000 		.4byte	.LVL69-.Ltext0
 9062 1061 0100     		.2byte	0x1
 9063 1063 54       		.byte	0x54
 9064 1064 EA030000 		.4byte	.LVL69-.Ltext0
 9065 1068 ED030000 		.4byte	.LVL70-1-.Ltext0
 9066 106c 0100     		.2byte	0x1
 9067 106e 50       		.byte	0x50
 9068 106f ED030000 		.4byte	.LVL70-1-.Ltext0
 9069 1073 10040000 		.4byte	.LVL75-.Ltext0
 9070 1077 0100     		.2byte	0x1
 9071 1079 54       		.byte	0x54
 9072 107a 10040000 		.4byte	.LVL75-.Ltext0
 9073 107e 13040000 		.4byte	.LVL76-1-.Ltext0
 9074 1082 0100     		.2byte	0x1
 9075 1084 50       		.byte	0x50
 9076 1085 13040000 		.4byte	.LVL76-1-.Ltext0
 9077 1089 2E040000 		.4byte	.LVL79-.Ltext0
 9078 108d 0100     		.2byte	0x1
 9079 108f 54       		.byte	0x54
 9080 1090 2E040000 		.4byte	.LVL79-.Ltext0
 9081 1094 30040000 		.4byte	.LVL80-.Ltext0
 9082 1098 0100     		.2byte	0x1
 9083 109a 50       		.byte	0x50
 9084 109b 30040000 		.4byte	.LVL80-.Ltext0
 9085 109f 34040000 		.4byte	.LVL81-.Ltext0
 9086 10a3 0100     		.2byte	0x1
 9087 10a5 54       		.byte	0x54
 9088 10a6 34040000 		.4byte	.LVL81-.Ltext0
 9089 10aa 36040000 		.4byte	.LVL82-.Ltext0
 9090 10ae 0100     		.2byte	0x1
 9091 10b0 50       		.byte	0x50
 9092 10b1 36040000 		.4byte	.LVL82-.Ltext0
 9093 10b5 3A040000 		.4byte	.LFE73-.Ltext0
 9094 10b9 0100     		.2byte	0x1
 9095 10bb 54       		.byte	0x54
 9096 10bc 00000000 		.4byte	0
 9097 10c0 00000000 		.4byte	0
 9098              	.LLST36:
 9099 10c4 7C030000 		.4byte	.LVL63-.Ltext0
 9100 10c8 B3030000 		.4byte	.LVL65-1-.Ltext0
 9101 10cc 0100     		.2byte	0x1
 9102 10ce 51       		.byte	0x51
 9103 10cf B3030000 		.4byte	.LVL65-1-.Ltext0
 9104 10d3 22040000 		.4byte	.LVL77-.Ltext0
 9105 10d7 0100     		.2byte	0x1
 9106 10d9 55       		.byte	0x55
 9107 10da 28040000 		.4byte	.LVL78-.Ltext0
ARM GAS  /tmp/ccPoddoo.s 			page 230


 9108 10de 2E040000 		.4byte	.LVL79-.Ltext0
 9109 10e2 0100     		.2byte	0x1
 9110 10e4 52       		.byte	0x52
 9111 10e5 2E040000 		.4byte	.LVL79-.Ltext0
 9112 10e9 3A040000 		.4byte	.LFE73-.Ltext0
 9113 10ed 0100     		.2byte	0x1
 9114 10ef 51       		.byte	0x51
 9115 10f0 00000000 		.4byte	0
 9116 10f4 00000000 		.4byte	0
 9117              	.LLST37:
 9118 10f8 7C030000 		.4byte	.LVL63-.Ltext0
 9119 10fc B3030000 		.4byte	.LVL65-1-.Ltext0
 9120 1100 0100     		.2byte	0x1
 9121 1102 52       		.byte	0x52
 9122 1103 B3030000 		.4byte	.LVL65-1-.Ltext0
 9123 1107 2E040000 		.4byte	.LVL79-.Ltext0
 9124 110b 0400     		.2byte	0x4
 9125 110d F3       		.byte	0xf3
 9126 110e 01       		.uleb128 0x1
 9127 110f 52       		.byte	0x52
 9128 1110 9F       		.byte	0x9f
 9129 1111 2E040000 		.4byte	.LVL79-.Ltext0
 9130 1115 3A040000 		.4byte	.LFE73-.Ltext0
 9131 1119 0100     		.2byte	0x1
 9132 111b 52       		.byte	0x52
 9133 111c 00000000 		.4byte	0
 9134 1120 00000000 		.4byte	0
 9135              	.LLST38:
 9136 1124 7C030000 		.4byte	.LVL63-.Ltext0
 9137 1128 86030000 		.4byte	.LVL64-.Ltext0
 9138 112c 0100     		.2byte	0x1
 9139 112e 53       		.byte	0x53
 9140 112f 86030000 		.4byte	.LVL64-.Ltext0
 9141 1133 EA030000 		.4byte	.LVL69-.Ltext0
 9142 1137 0100     		.2byte	0x1
 9143 1139 57       		.byte	0x57
 9144 113a EA030000 		.4byte	.LVL69-.Ltext0
 9145 113e ED030000 		.4byte	.LVL70-1-.Ltext0
 9146 1142 0100     		.2byte	0x1
 9147 1144 53       		.byte	0x53
 9148 1145 ED030000 		.4byte	.LVL70-1-.Ltext0
 9149 1149 10040000 		.4byte	.LVL75-.Ltext0
 9150 114d 0100     		.2byte	0x1
 9151 114f 57       		.byte	0x57
 9152 1150 10040000 		.4byte	.LVL75-.Ltext0
 9153 1154 13040000 		.4byte	.LVL76-1-.Ltext0
 9154 1158 0100     		.2byte	0x1
 9155 115a 53       		.byte	0x53
 9156 115b 13040000 		.4byte	.LVL76-1-.Ltext0
 9157 115f 3A040000 		.4byte	.LFE73-.Ltext0
 9158 1163 0100     		.2byte	0x1
 9159 1165 57       		.byte	0x57
 9160 1166 00000000 		.4byte	0
 9161 116a 00000000 		.4byte	0
 9162              	.LLST39:
 9163 116e F6030000 		.4byte	.LVL71-.Ltext0
 9164 1172 06040000 		.4byte	.LVL72-.Ltext0
ARM GAS  /tmp/ccPoddoo.s 			page 231


 9165 1176 0100     		.2byte	0x1
 9166 1178 55       		.byte	0x55
 9167 1179 06040000 		.4byte	.LVL72-.Ltext0
 9168 117d 08040000 		.4byte	.LVL73-.Ltext0
 9169 1181 0300     		.2byte	0x3
 9170 1183 75       		.byte	0x75
 9171 1184 7E       		.sleb128 -2
 9172 1185 9F       		.byte	0x9f
 9173 1186 08040000 		.4byte	.LVL73-.Ltext0
 9174 118a 0E040000 		.4byte	.LVL74-.Ltext0
 9175 118e 0100     		.2byte	0x1
 9176 1190 55       		.byte	0x55
 9177 1191 0E040000 		.4byte	.LVL74-.Ltext0
 9178 1195 10040000 		.4byte	.LVL75-.Ltext0
 9179 1199 0300     		.2byte	0x3
 9180 119b 75       		.byte	0x75
 9181 119c 7F       		.sleb128 -1
 9182 119d 9F       		.byte	0x9f
 9183 119e 00000000 		.4byte	0
 9184 11a2 00000000 		.4byte	0
 9185              	.LLST40:
 9186 11a6 7C030000 		.4byte	.LVL63-.Ltext0
 9187 11aa B6030000 		.4byte	.LVL66-.Ltext0
 9188 11ae 0200     		.2byte	0x2
 9189 11b0 30       		.byte	0x30
 9190 11b1 9F       		.byte	0x9f
 9191 11b2 B6030000 		.4byte	.LVL66-.Ltext0
 9192 11b6 BE030000 		.4byte	.LVL67-.Ltext0
 9193 11ba 0100     		.2byte	0x1
 9194 11bc 50       		.byte	0x50
 9195 11bd BE030000 		.4byte	.LVL67-.Ltext0
 9196 11c1 EA030000 		.4byte	.LVL69-.Ltext0
 9197 11c5 0100     		.2byte	0x1
 9198 11c7 56       		.byte	0x56
 9199 11c8 EA030000 		.4byte	.LVL69-.Ltext0
 9200 11cc ED030000 		.4byte	.LVL70-1-.Ltext0
 9201 11d0 0100     		.2byte	0x1
 9202 11d2 52       		.byte	0x52
 9203 11d3 ED030000 		.4byte	.LVL70-1-.Ltext0
 9204 11d7 10040000 		.4byte	.LVL75-.Ltext0
 9205 11db 0100     		.2byte	0x1
 9206 11dd 56       		.byte	0x56
 9207 11de 10040000 		.4byte	.LVL75-.Ltext0
 9208 11e2 13040000 		.4byte	.LVL76-1-.Ltext0
 9209 11e6 0100     		.2byte	0x1
 9210 11e8 52       		.byte	0x52
 9211 11e9 13040000 		.4byte	.LVL76-1-.Ltext0
 9212 11ed 2E040000 		.4byte	.LVL79-.Ltext0
 9213 11f1 0100     		.2byte	0x1
 9214 11f3 56       		.byte	0x56
 9215 11f4 2E040000 		.4byte	.LVL79-.Ltext0
 9216 11f8 3A040000 		.4byte	.LFE73-.Ltext0
 9217 11fc 0200     		.2byte	0x2
 9218 11fe 30       		.byte	0x30
 9219 11ff 9F       		.byte	0x9f
 9220 1200 00000000 		.4byte	0
 9221 1204 00000000 		.4byte	0
ARM GAS  /tmp/ccPoddoo.s 			page 232


 9222              	.LLST27:
 9223 1208 C4020000 		.4byte	.LFB72-.Ltext0
 9224 120c C8020000 		.4byte	.LCFI7-.Ltext0
 9225 1210 0200     		.2byte	0x2
 9226 1212 7D       		.byte	0x7d
 9227 1213 00       		.sleb128 0
 9228 1214 C8020000 		.4byte	.LCFI7-.Ltext0
 9229 1218 7C030000 		.4byte	.LFE72-.Ltext0
 9230 121c 0200     		.2byte	0x2
 9231 121e 7D       		.byte	0x7d
 9232 121f 18       		.sleb128 24
 9233 1220 00000000 		.4byte	0
 9234 1224 00000000 		.4byte	0
 9235              	.LLST28:
 9236 1228 C4020000 		.4byte	.LVL44-.Ltext0
 9237 122c FB020000 		.4byte	.LVL46-1-.Ltext0
 9238 1230 0100     		.2byte	0x1
 9239 1232 50       		.byte	0x50
 9240 1233 FB020000 		.4byte	.LVL46-1-.Ltext0
 9241 1237 40030000 		.4byte	.LVL51-.Ltext0
 9242 123b 0100     		.2byte	0x1
 9243 123d 54       		.byte	0x54
 9244 123e 40030000 		.4byte	.LVL51-.Ltext0
 9245 1242 43030000 		.4byte	.LVL52-1-.Ltext0
 9246 1246 0100     		.2byte	0x1
 9247 1248 50       		.byte	0x50
 9248 1249 43030000 		.4byte	.LVL52-1-.Ltext0
 9249 124d 5E030000 		.4byte	.LVL55-.Ltext0
 9250 1251 0100     		.2byte	0x1
 9251 1253 54       		.byte	0x54
 9252 1254 5E030000 		.4byte	.LVL55-.Ltext0
 9253 1258 61030000 		.4byte	.LVL56-1-.Ltext0
 9254 125c 0100     		.2byte	0x1
 9255 125e 50       		.byte	0x50
 9256 125f 61030000 		.4byte	.LVL56-1-.Ltext0
 9257 1263 70030000 		.4byte	.LVL59-.Ltext0
 9258 1267 0100     		.2byte	0x1
 9259 1269 54       		.byte	0x54
 9260 126a 70030000 		.4byte	.LVL59-.Ltext0
 9261 126e 72030000 		.4byte	.LVL60-.Ltext0
 9262 1272 0100     		.2byte	0x1
 9263 1274 50       		.byte	0x50
 9264 1275 72030000 		.4byte	.LVL60-.Ltext0
 9265 1279 76030000 		.4byte	.LVL61-.Ltext0
 9266 127d 0100     		.2byte	0x1
 9267 127f 54       		.byte	0x54
 9268 1280 76030000 		.4byte	.LVL61-.Ltext0
 9269 1284 78030000 		.4byte	.LVL62-.Ltext0
 9270 1288 0100     		.2byte	0x1
 9271 128a 50       		.byte	0x50
 9272 128b 78030000 		.4byte	.LVL62-.Ltext0
 9273 128f 7C030000 		.4byte	.LFE72-.Ltext0
 9274 1293 0100     		.2byte	0x1
 9275 1295 54       		.byte	0x54
 9276 1296 00000000 		.4byte	0
 9277 129a 00000000 		.4byte	0
 9278              	.LLST29:
ARM GAS  /tmp/ccPoddoo.s 			page 233


 9279 129e C4020000 		.4byte	.LVL44-.Ltext0
 9280 12a2 FB020000 		.4byte	.LVL46-1-.Ltext0
 9281 12a6 0100     		.2byte	0x1
 9282 12a8 51       		.byte	0x51
 9283 12a9 FB020000 		.4byte	.LVL46-1-.Ltext0
 9284 12ad 66030000 		.4byte	.LVL57-.Ltext0
 9285 12b1 0100     		.2byte	0x1
 9286 12b3 55       		.byte	0x55
 9287 12b4 66030000 		.4byte	.LVL57-.Ltext0
 9288 12b8 6C030000 		.4byte	.LVL58-.Ltext0
 9289 12bc 0300     		.2byte	0x3
 9290 12be 75       		.byte	0x75
 9291 12bf 01       		.sleb128 1
 9292 12c0 9F       		.byte	0x9f
 9293 12c1 70030000 		.4byte	.LVL59-.Ltext0
 9294 12c5 7C030000 		.4byte	.LFE72-.Ltext0
 9295 12c9 0100     		.2byte	0x1
 9296 12cb 51       		.byte	0x51
 9297 12cc 00000000 		.4byte	0
 9298 12d0 00000000 		.4byte	0
 9299              	.LLST30:
 9300 12d4 C4020000 		.4byte	.LVL44-.Ltext0
 9301 12d8 FB020000 		.4byte	.LVL46-1-.Ltext0
 9302 12dc 0100     		.2byte	0x1
 9303 12de 52       		.byte	0x52
 9304 12df FB020000 		.4byte	.LVL46-1-.Ltext0
 9305 12e3 70030000 		.4byte	.LVL59-.Ltext0
 9306 12e7 0400     		.2byte	0x4
 9307 12e9 F3       		.byte	0xf3
 9308 12ea 01       		.uleb128 0x1
 9309 12eb 52       		.byte	0x52
 9310 12ec 9F       		.byte	0x9f
 9311 12ed 70030000 		.4byte	.LVL59-.Ltext0
 9312 12f1 7C030000 		.4byte	.LFE72-.Ltext0
 9313 12f5 0100     		.2byte	0x1
 9314 12f7 52       		.byte	0x52
 9315 12f8 00000000 		.4byte	0
 9316 12fc 00000000 		.4byte	0
 9317              	.LLST31:
 9318 1300 C4020000 		.4byte	.LVL44-.Ltext0
 9319 1304 CE020000 		.4byte	.LVL45-.Ltext0
 9320 1308 0100     		.2byte	0x1
 9321 130a 53       		.byte	0x53
 9322 130b CE020000 		.4byte	.LVL45-.Ltext0
 9323 130f 40030000 		.4byte	.LVL51-.Ltext0
 9324 1313 0100     		.2byte	0x1
 9325 1315 57       		.byte	0x57
 9326 1316 40030000 		.4byte	.LVL51-.Ltext0
 9327 131a 43030000 		.4byte	.LVL52-1-.Ltext0
 9328 131e 0100     		.2byte	0x1
 9329 1320 53       		.byte	0x53
 9330 1321 43030000 		.4byte	.LVL52-1-.Ltext0
 9331 1325 5E030000 		.4byte	.LVL55-.Ltext0
 9332 1329 0100     		.2byte	0x1
 9333 132b 57       		.byte	0x57
 9334 132c 5E030000 		.4byte	.LVL55-.Ltext0
 9335 1330 61030000 		.4byte	.LVL56-1-.Ltext0
ARM GAS  /tmp/ccPoddoo.s 			page 234


 9336 1334 0100     		.2byte	0x1
 9337 1336 53       		.byte	0x53
 9338 1337 61030000 		.4byte	.LVL56-1-.Ltext0
 9339 133b 7C030000 		.4byte	.LFE72-.Ltext0
 9340 133f 0100     		.2byte	0x1
 9341 1341 57       		.byte	0x57
 9342 1342 00000000 		.4byte	0
 9343 1346 00000000 		.4byte	0
 9344              	.LLST32:
 9345 134a 4C030000 		.4byte	.LVL53-.Ltext0
 9346 134e 5C030000 		.4byte	.LVL54-.Ltext0
 9347 1352 0100     		.2byte	0x1
 9348 1354 55       		.byte	0x55
 9349 1355 5C030000 		.4byte	.LVL54-.Ltext0
 9350 1359 5E030000 		.4byte	.LVL55-.Ltext0
 9351 135d 0300     		.2byte	0x3
 9352 135f 75       		.byte	0x75
 9353 1360 7E       		.sleb128 -2
 9354 1361 9F       		.byte	0x9f
 9355 1362 00000000 		.4byte	0
 9356 1366 00000000 		.4byte	0
 9357              	.LLST33:
 9358 136a C4020000 		.4byte	.LVL44-.Ltext0
 9359 136e FE020000 		.4byte	.LVL47-.Ltext0
 9360 1372 0200     		.2byte	0x2
 9361 1374 30       		.byte	0x30
 9362 1375 9F       		.byte	0x9f
 9363 1376 FE020000 		.4byte	.LVL47-.Ltext0
 9364 137a 06030000 		.4byte	.LVL48-.Ltext0
 9365 137e 0100     		.2byte	0x1
 9366 1380 50       		.byte	0x50
 9367 1381 06030000 		.4byte	.LVL48-.Ltext0
 9368 1385 40030000 		.4byte	.LVL51-.Ltext0
 9369 1389 0100     		.2byte	0x1
 9370 138b 56       		.byte	0x56
 9371 138c 40030000 		.4byte	.LVL51-.Ltext0
 9372 1390 43030000 		.4byte	.LVL52-1-.Ltext0
 9373 1394 0100     		.2byte	0x1
 9374 1396 52       		.byte	0x52
 9375 1397 43030000 		.4byte	.LVL52-1-.Ltext0
 9376 139b 5E030000 		.4byte	.LVL55-.Ltext0
 9377 139f 0100     		.2byte	0x1
 9378 13a1 56       		.byte	0x56
 9379 13a2 5E030000 		.4byte	.LVL55-.Ltext0
 9380 13a6 61030000 		.4byte	.LVL56-1-.Ltext0
 9381 13aa 0100     		.2byte	0x1
 9382 13ac 52       		.byte	0x52
 9383 13ad 61030000 		.4byte	.LVL56-1-.Ltext0
 9384 13b1 70030000 		.4byte	.LVL59-.Ltext0
 9385 13b5 0100     		.2byte	0x1
 9386 13b7 56       		.byte	0x56
 9387 13b8 70030000 		.4byte	.LVL59-.Ltext0
 9388 13bc 7C030000 		.4byte	.LFE72-.Ltext0
 9389 13c0 0200     		.2byte	0x2
 9390 13c2 30       		.byte	0x30
 9391 13c3 9F       		.byte	0x9f
 9392 13c4 00000000 		.4byte	0
ARM GAS  /tmp/ccPoddoo.s 			page 235


 9393 13c8 00000000 		.4byte	0
 9394              	.LLST25:
 9395 13cc 94020000 		.4byte	.LFB69-.Ltext0
 9396 13d0 96020000 		.4byte	.LCFI6-.Ltext0
 9397 13d4 0200     		.2byte	0x2
 9398 13d6 7D       		.byte	0x7d
 9399 13d7 00       		.sleb128 0
 9400 13d8 96020000 		.4byte	.LCFI6-.Ltext0
 9401 13dc C4020000 		.4byte	.LFE69-.Ltext0
 9402 13e0 0200     		.2byte	0x2
 9403 13e2 7D       		.byte	0x7d
 9404 13e3 08       		.sleb128 8
 9405 13e4 00000000 		.4byte	0
 9406 13e8 00000000 		.4byte	0
 9407              	.LLST26:
 9408 13ec 94020000 		.4byte	.LVL40-.Ltext0
 9409 13f0 AD020000 		.4byte	.LVL41-1-.Ltext0
 9410 13f4 0100     		.2byte	0x1
 9411 13f6 50       		.byte	0x50
 9412 13f7 AD020000 		.4byte	.LVL41-1-.Ltext0
 9413 13fb C0020000 		.4byte	.LVL42-.Ltext0
 9414 13ff 0100     		.2byte	0x1
 9415 1401 54       		.byte	0x54
 9416 1402 C0020000 		.4byte	.LVL42-.Ltext0
 9417 1406 C2020000 		.4byte	.LVL43-.Ltext0
 9418 140a 0100     		.2byte	0x1
 9419 140c 50       		.byte	0x50
 9420 140d C2020000 		.4byte	.LVL43-.Ltext0
 9421 1411 C4020000 		.4byte	.LFE69-.Ltext0
 9422 1415 0100     		.2byte	0x1
 9423 1417 54       		.byte	0x54
 9424 1418 00000000 		.4byte	0
 9425 141c 00000000 		.4byte	0
 9426              	.LLST21:
 9427 1420 14020000 		.4byte	.LFB68-.Ltext0
 9428 1424 16020000 		.4byte	.LCFI5-.Ltext0
 9429 1428 0200     		.2byte	0x2
 9430 142a 7D       		.byte	0x7d
 9431 142b 00       		.sleb128 0
 9432 142c 16020000 		.4byte	.LCFI5-.Ltext0
 9433 1430 92020000 		.4byte	.LFE68-.Ltext0
 9434 1434 0200     		.2byte	0x2
 9435 1436 7D       		.byte	0x7d
 9436 1437 10       		.sleb128 16
 9437 1438 00000000 		.4byte	0
 9438 143c 00000000 		.4byte	0
 9439              	.LLST22:
 9440 1440 14020000 		.4byte	.LVL34-.Ltext0
 9441 1444 31020000 		.4byte	.LVL36-1-.Ltext0
 9442 1448 0100     		.2byte	0x1
 9443 144a 50       		.byte	0x50
 9444 144b 31020000 		.4byte	.LVL36-1-.Ltext0
 9445 144f 8E020000 		.4byte	.LVL38-.Ltext0
 9446 1453 0100     		.2byte	0x1
 9447 1455 54       		.byte	0x54
 9448 1456 8E020000 		.4byte	.LVL38-.Ltext0
 9449 145a 90020000 		.4byte	.LVL39-.Ltext0
ARM GAS  /tmp/ccPoddoo.s 			page 236


 9450 145e 0100     		.2byte	0x1
 9451 1460 50       		.byte	0x50
 9452 1461 90020000 		.4byte	.LVL39-.Ltext0
 9453 1465 92020000 		.4byte	.LFE68-.Ltext0
 9454 1469 0100     		.2byte	0x1
 9455 146b 54       		.byte	0x54
 9456 146c 00000000 		.4byte	0
 9457 1470 00000000 		.4byte	0
 9458              	.LLST23:
 9459 1474 14020000 		.4byte	.LVL34-.Ltext0
 9460 1478 31020000 		.4byte	.LVL36-1-.Ltext0
 9461 147c 0100     		.2byte	0x1
 9462 147e 51       		.byte	0x51
 9463 147f 31020000 		.4byte	.LVL36-1-.Ltext0
 9464 1483 8E020000 		.4byte	.LVL38-.Ltext0
 9465 1487 0400     		.2byte	0x4
 9466 1489 F3       		.byte	0xf3
 9467 148a 01       		.uleb128 0x1
 9468 148b 51       		.byte	0x51
 9469 148c 9F       		.byte	0x9f
 9470 148d 8E020000 		.4byte	.LVL38-.Ltext0
 9471 1491 92020000 		.4byte	.LFE68-.Ltext0
 9472 1495 0100     		.2byte	0x1
 9473 1497 51       		.byte	0x51
 9474 1498 00000000 		.4byte	0
 9475 149c 00000000 		.4byte	0
 9476              	.LLST24:
 9477 14a0 14020000 		.4byte	.LVL34-.Ltext0
 9478 14a4 28020000 		.4byte	.LVL35-.Ltext0
 9479 14a8 0100     		.2byte	0x1
 9480 14aa 52       		.byte	0x52
 9481 14ab 28020000 		.4byte	.LVL35-.Ltext0
 9482 14af 8E020000 		.4byte	.LVL38-.Ltext0
 9483 14b3 0100     		.2byte	0x1
 9484 14b5 56       		.byte	0x56
 9485 14b6 8E020000 		.4byte	.LVL38-.Ltext0
 9486 14ba 92020000 		.4byte	.LFE68-.Ltext0
 9487 14be 0100     		.2byte	0x1
 9488 14c0 52       		.byte	0x52
 9489 14c1 00000000 		.4byte	0
 9490 14c5 00000000 		.4byte	0
 9491              	.LLST18:
 9492 14c9 9E010000 		.4byte	.LFB67-.Ltext0
 9493 14cd A0010000 		.4byte	.LCFI4-.Ltext0
 9494 14d1 0200     		.2byte	0x2
 9495 14d3 7D       		.byte	0x7d
 9496 14d4 00       		.sleb128 0
 9497 14d5 A0010000 		.4byte	.LCFI4-.Ltext0
 9498 14d9 14020000 		.4byte	.LFE67-.Ltext0
 9499 14dd 0200     		.2byte	0x2
 9500 14df 7D       		.byte	0x7d
 9501 14e0 10       		.sleb128 16
 9502 14e1 00000000 		.4byte	0
 9503 14e5 00000000 		.4byte	0
 9504              	.LLST19:
 9505 14e9 9E010000 		.4byte	.LVL29-.Ltext0
 9506 14ed B9010000 		.4byte	.LVL30-1-.Ltext0
ARM GAS  /tmp/ccPoddoo.s 			page 237


 9507 14f1 0100     		.2byte	0x1
 9508 14f3 50       		.byte	0x50
 9509 14f4 B9010000 		.4byte	.LVL30-1-.Ltext0
 9510 14f8 10020000 		.4byte	.LVL32-.Ltext0
 9511 14fc 0100     		.2byte	0x1
 9512 14fe 54       		.byte	0x54
 9513 14ff 10020000 		.4byte	.LVL32-.Ltext0
 9514 1503 12020000 		.4byte	.LVL33-.Ltext0
 9515 1507 0100     		.2byte	0x1
 9516 1509 50       		.byte	0x50
 9517 150a 12020000 		.4byte	.LVL33-.Ltext0
 9518 150e 14020000 		.4byte	.LFE67-.Ltext0
 9519 1512 0100     		.2byte	0x1
 9520 1514 54       		.byte	0x54
 9521 1515 00000000 		.4byte	0
 9522 1519 00000000 		.4byte	0
 9523              	.LLST20:
 9524 151d 9E010000 		.4byte	.LVL29-.Ltext0
 9525 1521 B9010000 		.4byte	.LVL30-1-.Ltext0
 9526 1525 0100     		.2byte	0x1
 9527 1527 51       		.byte	0x51
 9528 1528 B9010000 		.4byte	.LVL30-1-.Ltext0
 9529 152c 10020000 		.4byte	.LVL32-.Ltext0
 9530 1530 0100     		.2byte	0x1
 9531 1532 55       		.byte	0x55
 9532 1533 10020000 		.4byte	.LVL32-.Ltext0
 9533 1537 14020000 		.4byte	.LFE67-.Ltext0
 9534 153b 0100     		.2byte	0x1
 9535 153d 51       		.byte	0x51
 9536 153e 00000000 		.4byte	0
 9537 1542 00000000 		.4byte	0
 9538              	.LLST16:
 9539 1546 3A010000 		.4byte	.LFB66-.Ltext0
 9540 154a 3C010000 		.4byte	.LCFI3-.Ltext0
 9541 154e 0200     		.2byte	0x2
 9542 1550 7D       		.byte	0x7d
 9543 1551 00       		.sleb128 0
 9544 1552 3C010000 		.4byte	.LCFI3-.Ltext0
 9545 1556 9E010000 		.4byte	.LFE66-.Ltext0
 9546 155a 0200     		.2byte	0x2
 9547 155c 7D       		.byte	0x7d
 9548 155d 08       		.sleb128 8
 9549 155e 00000000 		.4byte	0
 9550 1562 00000000 		.4byte	0
 9551              	.LLST17:
 9552 1566 3A010000 		.4byte	.LVL24-.Ltext0
 9553 156a 51010000 		.4byte	.LVL25-1-.Ltext0
 9554 156e 0100     		.2byte	0x1
 9555 1570 50       		.byte	0x50
 9556 1571 51010000 		.4byte	.LVL25-1-.Ltext0
 9557 1575 9A010000 		.4byte	.LVL27-.Ltext0
 9558 1579 0100     		.2byte	0x1
 9559 157b 54       		.byte	0x54
 9560 157c 9A010000 		.4byte	.LVL27-.Ltext0
 9561 1580 9C010000 		.4byte	.LVL28-.Ltext0
 9562 1584 0100     		.2byte	0x1
 9563 1586 50       		.byte	0x50
ARM GAS  /tmp/ccPoddoo.s 			page 238


 9564 1587 9C010000 		.4byte	.LVL28-.Ltext0
 9565 158b 9E010000 		.4byte	.LFE66-.Ltext0
 9566 158f 0100     		.2byte	0x1
 9567 1591 54       		.byte	0x54
 9568 1592 00000000 		.4byte	0
 9569 1596 00000000 		.4byte	0
 9570              	.LLST14:
 9571 159a DE000000 		.4byte	.LFB65-.Ltext0
 9572 159e E0000000 		.4byte	.LCFI2-.Ltext0
 9573 15a2 0200     		.2byte	0x2
 9574 15a4 7D       		.byte	0x7d
 9575 15a5 00       		.sleb128 0
 9576 15a6 E0000000 		.4byte	.LCFI2-.Ltext0
 9577 15aa 3A010000 		.4byte	.LFE65-.Ltext0
 9578 15ae 0200     		.2byte	0x2
 9579 15b0 7D       		.byte	0x7d
 9580 15b1 08       		.sleb128 8
 9581 15b2 00000000 		.4byte	0
 9582 15b6 00000000 		.4byte	0
 9583              	.LLST15:
 9584 15ba DE000000 		.4byte	.LVL19-.Ltext0
 9585 15be F5000000 		.4byte	.LVL20-1-.Ltext0
 9586 15c2 0100     		.2byte	0x1
 9587 15c4 50       		.byte	0x50
 9588 15c5 F5000000 		.4byte	.LVL20-1-.Ltext0
 9589 15c9 36010000 		.4byte	.LVL22-.Ltext0
 9590 15cd 0100     		.2byte	0x1
 9591 15cf 54       		.byte	0x54
 9592 15d0 36010000 		.4byte	.LVL22-.Ltext0
 9593 15d4 38010000 		.4byte	.LVL23-.Ltext0
 9594 15d8 0100     		.2byte	0x1
 9595 15da 50       		.byte	0x50
 9596 15db 38010000 		.4byte	.LVL23-.Ltext0
 9597 15df 3A010000 		.4byte	.LFE65-.Ltext0
 9598 15e3 0100     		.2byte	0x1
 9599 15e5 54       		.byte	0x54
 9600 15e6 00000000 		.4byte	0
 9601 15ea 00000000 		.4byte	0
 9602              	.LLST4:
 9603 15ee 8C000000 		.4byte	.LFB140-.Ltext0
 9604 15f2 8E000000 		.4byte	.LCFI1-.Ltext0
 9605 15f6 0200     		.2byte	0x2
 9606 15f8 7D       		.byte	0x7d
 9607 15f9 00       		.sleb128 0
 9608 15fa 8E000000 		.4byte	.LCFI1-.Ltext0
 9609 15fe DC000000 		.4byte	.LFE140-.Ltext0
 9610 1602 0200     		.2byte	0x2
 9611 1604 7D       		.byte	0x7d
 9612 1605 18       		.sleb128 24
 9613 1606 00000000 		.4byte	0
 9614 160a 00000000 		.4byte	0
 9615              	.LLST5:
 9616 160e 8C000000 		.4byte	.LVL12-.Ltext0
 9617 1612 96000000 		.4byte	.LVL13-.Ltext0
 9618 1616 0100     		.2byte	0x1
 9619 1618 50       		.byte	0x50
 9620 1619 96000000 		.4byte	.LVL13-.Ltext0
ARM GAS  /tmp/ccPoddoo.s 			page 239


 9621 161d DC000000 		.4byte	.LFE140-.Ltext0
 9622 1621 0100     		.2byte	0x1
 9623 1623 54       		.byte	0x54
 9624 1624 00000000 		.4byte	0
 9625 1628 00000000 		.4byte	0
 9626              	.LLST6:
 9627 162c 8C000000 		.4byte	.LVL12-.Ltext0
 9628 1630 96000000 		.4byte	.LVL13-.Ltext0
 9629 1634 0100     		.2byte	0x1
 9630 1636 51       		.byte	0x51
 9631 1637 96000000 		.4byte	.LVL13-.Ltext0
 9632 163b DC000000 		.4byte	.LFE140-.Ltext0
 9633 163f 0100     		.2byte	0x1
 9634 1641 56       		.byte	0x56
 9635 1642 00000000 		.4byte	0
 9636 1646 00000000 		.4byte	0
 9637              	.LLST7:
 9638 164a 8C000000 		.4byte	.LVL12-.Ltext0
 9639 164e 96000000 		.4byte	.LVL13-.Ltext0
 9640 1652 0100     		.2byte	0x1
 9641 1654 52       		.byte	0x52
 9642 1655 96000000 		.4byte	.LVL13-.Ltext0
 9643 1659 DC000000 		.4byte	.LFE140-.Ltext0
 9644 165d 0100     		.2byte	0x1
 9645 165f 57       		.byte	0x57
 9646 1660 00000000 		.4byte	0
 9647 1664 00000000 		.4byte	0
 9648              	.LLST8:
 9649 1668 8C000000 		.4byte	.LVL12-.Ltext0
 9650 166c 96000000 		.4byte	.LVL13-.Ltext0
 9651 1670 0100     		.2byte	0x1
 9652 1672 53       		.byte	0x53
 9653 1673 96000000 		.4byte	.LVL13-.Ltext0
 9654 1677 DC000000 		.4byte	.LFE140-.Ltext0
 9655 167b 0100     		.2byte	0x1
 9656 167d 55       		.byte	0x55
 9657 167e 00000000 		.4byte	0
 9658 1682 00000000 		.4byte	0
 9659              	.LLST9:
 9660 1686 AA000000 		.4byte	.LVL15-.Ltext0
 9661 168a CE000000 		.4byte	.LVL16-.Ltext0
 9662 168e 0100     		.2byte	0x1
 9663 1690 56       		.byte	0x56
 9664 1691 00000000 		.4byte	0
 9665 1695 00000000 		.4byte	0
 9666              	.LLST10:
 9667 1699 AA000000 		.4byte	.LVL15-.Ltext0
 9668 169d CE000000 		.4byte	.LVL16-.Ltext0
 9669 16a1 0200     		.2byte	0x2
 9670 16a3 30       		.byte	0x30
 9671 16a4 9F       		.byte	0x9f
 9672 16a5 00000000 		.4byte	0
 9673 16a9 00000000 		.4byte	0
 9674              	.LLST11:
 9675 16ad AA000000 		.4byte	.LVL15-.Ltext0
 9676 16b1 CE000000 		.4byte	.LVL16-.Ltext0
 9677 16b5 0100     		.2byte	0x1
ARM GAS  /tmp/ccPoddoo.s 			page 240


 9678 16b7 57       		.byte	0x57
 9679 16b8 00000000 		.4byte	0
 9680 16bc 00000000 		.4byte	0
 9681              	.LLST12:
 9682 16c0 AA000000 		.4byte	.LVL15-.Ltext0
 9683 16c4 CE000000 		.4byte	.LVL16-.Ltext0
 9684 16c8 0100     		.2byte	0x1
 9685 16ca 55       		.byte	0x55
 9686 16cb 00000000 		.4byte	0
 9687 16cf 00000000 		.4byte	0
 9688              	.LLST13:
 9689 16d3 AA000000 		.4byte	.LVL15-.Ltext0
 9690 16d7 CE000000 		.4byte	.LVL16-.Ltext0
 9691 16db 0100     		.2byte	0x1
 9692 16dd 54       		.byte	0x54
 9693 16de 00000000 		.4byte	0
 9694 16e2 00000000 		.4byte	0
 9695              	.LLST80:
 9696 16e6 72080000 		.4byte	.LFB118-.Ltext0
 9697 16ea 78080000 		.4byte	.LCFI23-.Ltext0
 9698 16ee 0200     		.2byte	0x2
 9699 16f0 7D       		.byte	0x7d
 9700 16f1 00       		.sleb128 0
 9701 16f2 78080000 		.4byte	.LCFI23-.Ltext0
 9702 16f6 EE080000 		.4byte	.LFE118-.Ltext0
 9703 16fa 0200     		.2byte	0x2
 9704 16fc 7D       		.byte	0x7d
 9705 16fd 08       		.sleb128 8
 9706 16fe 00000000 		.4byte	0
 9707 1702 00000000 		.4byte	0
 9708              	.LLST81:
 9709 1706 72080000 		.4byte	.LVL174-.Ltext0
 9710 170a C5080000 		.4byte	.LVL179-1-.Ltext0
 9711 170e 0100     		.2byte	0x1
 9712 1710 50       		.byte	0x50
 9713 1711 C5080000 		.4byte	.LVL179-1-.Ltext0
 9714 1715 CA080000 		.4byte	.LVL180-.Ltext0
 9715 1719 0400     		.2byte	0x4
 9716 171b F3       		.byte	0xf3
 9717 171c 01       		.uleb128 0x1
 9718 171d 50       		.byte	0x50
 9719 171e 9F       		.byte	0x9f
 9720 171f CA080000 		.4byte	.LVL180-.Ltext0
 9721 1723 EC080000 		.4byte	.LVL184-.Ltext0
 9722 1727 0100     		.2byte	0x1
 9723 1729 50       		.byte	0x50
 9724 172a EC080000 		.4byte	.LVL184-.Ltext0
 9725 172e EE080000 		.4byte	.LFE118-.Ltext0
 9726 1732 0400     		.2byte	0x4
 9727 1734 F3       		.byte	0xf3
 9728 1735 01       		.uleb128 0x1
 9729 1736 50       		.byte	0x50
 9730 1737 9F       		.byte	0x9f
 9731 1738 00000000 		.4byte	0
 9732 173c 00000000 		.4byte	0
 9733              	.LLST82:
 9734 1740 7C080000 		.4byte	.LVL175-.Ltext0
ARM GAS  /tmp/ccPoddoo.s 			page 241


 9735 1744 C5080000 		.4byte	.LVL179-1-.Ltext0
 9736 1748 0100     		.2byte	0x1
 9737 174a 50       		.byte	0x50
 9738 174b C5080000 		.4byte	.LVL179-1-.Ltext0
 9739 174f CA080000 		.4byte	.LVL180-.Ltext0
 9740 1753 0400     		.2byte	0x4
 9741 1755 F3       		.byte	0xf3
 9742 1756 01       		.uleb128 0x1
 9743 1757 50       		.byte	0x50
 9744 1758 9F       		.byte	0x9f
 9745 1759 CA080000 		.4byte	.LVL180-.Ltext0
 9746 175d EA080000 		.4byte	.LVL183-.Ltext0
 9747 1761 0100     		.2byte	0x1
 9748 1763 50       		.byte	0x50
 9749 1764 00000000 		.4byte	0
 9750 1768 00000000 		.4byte	0
 9751              	.LLST83:
 9752 176c 8A080000 		.4byte	.LVL176-.Ltext0
 9753 1770 96080000 		.4byte	.LVL177-.Ltext0
 9754 1774 0100     		.2byte	0x1
 9755 1776 53       		.byte	0x53
 9756 1777 96080000 		.4byte	.LVL177-.Ltext0
 9757 177b 98080000 		.4byte	.LVL178-.Ltext0
 9758 177f 0200     		.2byte	0x2
 9759 1781 70       		.byte	0x70
 9760 1782 28       		.sleb128 40
 9761 1783 CA080000 		.4byte	.LVL180-.Ltext0
 9762 1787 D0080000 		.4byte	.LVL181-.Ltext0
 9763 178b 0100     		.2byte	0x1
 9764 178d 53       		.byte	0x53
 9765 178e D0080000 		.4byte	.LVL181-.Ltext0
 9766 1792 D2080000 		.4byte	.LVL182-.Ltext0
 9767 1796 0200     		.2byte	0x2
 9768 1798 70       		.byte	0x70
 9769 1799 28       		.sleb128 40
 9770 179a 00000000 		.4byte	0
 9771 179e 00000000 		.4byte	0
 9772              		.section	.debug_aranges,"",%progbits
 9773 0000 1C000000 		.4byte	0x1c
 9774 0004 0200     		.2byte	0x2
 9775 0006 00000000 		.4byte	.Ldebug_info0
 9776 000a 04       		.byte	0x4
 9777 000b 00       		.byte	0
 9778 000c 0000     		.2byte	0
 9779 000e 0000     		.2byte	0
 9780 0010 00000000 		.4byte	.Ltext0
 9781 0014 540D0000 		.4byte	.Letext0-.Ltext0
 9782 0018 00000000 		.4byte	0
 9783 001c 00000000 		.4byte	0
 9784              		.section	.debug_ranges,"",%progbits
 9785              	.Ldebug_ranges0:
 9786 0000 8A050000 		.4byte	.LBB6-.Ltext0
 9787 0004 94050000 		.4byte	.LBE6-.Ltext0
 9788 0008 98050000 		.4byte	.LBB7-.Ltext0
 9789 000c 9C050000 		.4byte	.LBE7-.Ltext0
 9790 0010 00000000 		.4byte	0
 9791 0014 00000000 		.4byte	0
ARM GAS  /tmp/ccPoddoo.s 			page 242


 9792 0018 7C080000 		.4byte	.LBB15-.Ltext0
 9793 001c C8080000 		.4byte	.LBE15-.Ltext0
 9794 0020 CA080000 		.4byte	.LBB18-.Ltext0
 9795 0024 EA080000 		.4byte	.LBE18-.Ltext0
 9796 0028 00000000 		.4byte	0
 9797 002c 00000000 		.4byte	0
 9798              		.section	.debug_line,"",%progbits
 9799              	.Ldebug_line0:
 9800 0000 D9080000 		.section	.debug_str,"MS",%progbits,1
 9800      02006501 
 9800      00000201 
 9800      FB0E0D00 
 9800      01010101 
 9801              	.LASF178:
 9802 0000 48414C5F 		.ascii	"HAL_RCC_GetPCLK1Freq\000"
 9802      5243435F 
 9802      47657450 
 9802      434C4B31 
 9802      46726571 
 9803              	.LASF57:
 9804 0015 53746174 		.ascii	"State\000"
 9804      6500
 9805              	.LASF82:
 9806 001b 48414C5F 		.ascii	"HAL_UART_StateTypeDef\000"
 9806      55415254 
 9806      5F537461 
 9806      74655479 
 9806      70654465 
 9807              	.LASF100:
 9808 0031 48414C5F 		.ascii	"HAL_TickFreqTypeDef\000"
 9808      5469636B 
 9808      46726571 
 9808      54797065 
 9808      44656600 
 9809              	.LASF93:
 9810 0045 67537461 		.ascii	"gState\000"
 9810      746500
 9811              	.LASF105:
 9812 004c 55415254 		.ascii	"UART_Receive_IT\000"
 9812      5F526563 
 9812      65697665 
 9812      5F495400 
 9813              	.LASF157:
 9814 005c 48414C5F 		.ascii	"HAL_UART_DMAPause\000"
 9814      55415254 
 9814      5F444D41 
 9814      50617573 
 9814      6500
 9815              	.LASF136:
 9816 006e 48414C5F 		.ascii	"HAL_LIN_SendBreak\000"
 9816      4C494E5F 
 9816      53656E64 
 9816      42726561 
 9816      6B00
 9817              	.LASF48:
 9818 0080 444D415F 		.ascii	"DMA_InitTypeDef\000"
 9818      496E6974 
ARM GAS  /tmp/ccPoddoo.s 			page 243


 9818      54797065 
 9818      44656600 
 9819              	.LASF31:
 9820 0090 466C6167 		.ascii	"FlagStatus\000"
 9820      53746174 
 9820      757300
 9821              	.LASF3:
 9822 009b 5F5F7569 		.ascii	"__uint8_t\000"
 9822      6E74385F 
 9822      7400
 9823              	.LASF170:
 9824 00a5 48414C5F 		.ascii	"HAL_MultiProcessor_Init\000"
 9824      4D756C74 
 9824      6950726F 
 9824      63657373 
 9824      6F725F49 
 9825              	.LASF179:
 9826 00bd 48414C5F 		.ascii	"HAL_DMA_Abort_IT\000"
 9826      444D415F 
 9826      41626F72 
 9826      745F4954 
 9826      00
 9827              	.LASF35:
 9828 00ce 48414C5F 		.ascii	"HAL_BUSY\000"
 9828      42555359 
 9828      00
 9829              	.LASF21:
 9830 00d7 41504250 		.ascii	"APBPrescTable\000"
 9830      72657363 
 9830      5461626C 
 9830      6500
 9831              	.LASF133:
 9832 00e5 48414C5F 		.ascii	"HAL_HalfDuplex_EnableTransmitter\000"
 9832      48616C66 
 9832      4475706C 
 9832      65785F45 
 9832      6E61626C 
 9833              	.LASF51:
 9834 0106 48414C5F 		.ascii	"HAL_DMA_STATE_BUSY\000"
 9834      444D415F 
 9834      53544154 
 9834      455F4255 
 9834      535900
 9835              	.LASF146:
 9836 0119 63723369 		.ascii	"cr3its\000"
 9836      747300
 9837              	.LASF152:
 9838 0120 48414C5F 		.ascii	"HAL_UART_AbortReceive\000"
 9838      55415254 
 9838      5F41626F 
 9838      72745265 
 9838      63656976 
 9839              	.LASF128:
 9840 0136 48414C5F 		.ascii	"HAL_UART_GetError\000"
 9840      55415254 
 9840      5F476574 
 9840      4572726F 
ARM GAS  /tmp/ccPoddoo.s 			page 244


 9840      7200
 9841              	.LASF11:
 9842 0148 6C6F6E67 		.ascii	"long long unsigned int\000"
 9842      206C6F6E 
 9842      6720756E 
 9842      7369676E 
 9842      65642069 
 9843              	.LASF39:
 9844 015f 48414C5F 		.ascii	"HAL_LOCKED\000"
 9844      4C4F434B 
 9844      454400
 9845              	.LASF18:
 9846 016a 49544D5F 		.ascii	"ITM_RxBuffer\000"
 9846      52784275 
 9846      66666572 
 9846      00
 9847              	.LASF159:
 9848 0177 70446174 		.ascii	"pData\000"
 9848      6100
 9849              	.LASF166:
 9850 017d 48414C5F 		.ascii	"HAL_UART_Transmit\000"
 9850      55415254 
 9850      5F547261 
 9850      6E736D69 
 9850      7400
 9851              	.LASF125:
 9852 018f 55415254 		.ascii	"UART_DMAReceiveCplt\000"
 9852      5F444D41 
 9852      52656365 
 9852      69766543 
 9852      706C7400 
 9853              	.LASF116:
 9854 01a3 55415254 		.ascii	"UART_EndRxTransfer\000"
 9854      5F456E64 
 9854      52785472 
 9854      616E7366 
 9854      657200
 9855              	.LASF72:
 9856 01b6 4F766572 		.ascii	"OverSampling\000"
 9856      53616D70 
 9856      6C696E67 
 9856      00
 9857              	.LASF87:
 9858 01c3 54785866 		.ascii	"TxXferCount\000"
 9858      6572436F 
 9858      756E7400 
 9859              	.LASF187:
 9860 01cf 55415254 		.ascii	"UART_EndTxTransfer\000"
 9860      5F456E64 
 9860      54785472 
 9860      616E7366 
 9860      657200
 9861              	.LASF10:
 9862 01e2 6C6F6E67 		.ascii	"long long int\000"
 9862      206C6F6E 
 9862      6720696E 
 9862      7400
ARM GAS  /tmp/ccPoddoo.s 			page 245


 9863              	.LASF0:
 9864 01f0 7369676E 		.ascii	"signed char\000"
 9864      65642063 
 9864      68617200 
 9865              	.LASF79:
 9866 01fc 48414C5F 		.ascii	"HAL_UART_STATE_BUSY_TX_RX\000"
 9866      55415254 
 9866      5F535441 
 9866      54455F42 
 9866      5553595F 
 9867              	.LASF28:
 9868 0216 47545052 		.ascii	"GTPR\000"
 9868      00
 9869              	.LASF67:
 9870 021b 42617564 		.ascii	"BaudRate\000"
 9870      52617465 
 9870      00
 9871              	.LASF126:
 9872 0224 55415254 		.ascii	"UART_DMATxHalfCplt\000"
 9872      5F444D41 
 9872      54784861 
 9872      6C664370 
 9872      6C7400
 9873              	.LASF182:
 9874 0237 48414C5F 		.ascii	"HAL_DMA_Start_IT\000"
 9874      444D415F 
 9874      53746172 
 9874      745F4954 
 9874      00
 9875              	.LASF103:
 9876 0248 746D7072 		.ascii	"tmpreg\000"
 9876      656700
 9877              	.LASF40:
 9878 024f 48414C5F 		.ascii	"HAL_LockTypeDef\000"
 9878      4C6F636B 
 9878      54797065 
 9878      44656600 
 9879              	.LASF151:
 9880 025f 41626F72 		.ascii	"AbortCplt\000"
 9880      7443706C 
 9880      7400
 9881              	.LASF95:
 9882 0269 55415254 		.ascii	"UART_HandleTypeDef\000"
 9882      5F48616E 
 9882      646C6554 
 9882      79706544 
 9882      656600
 9883              	.LASF7:
 9884 027c 6C6F6E67 		.ascii	"long int\000"
 9884      20696E74 
 9884      00
 9885              	.LASF85:
 9886 0285 70547842 		.ascii	"pTxBuffPtr\000"
 9886      75666650 
 9886      747200
 9887              	.LASF188:
 9888 0290 48414C5F 		.ascii	"HAL_UART_AbortReceiveCpltCallback\000"
ARM GAS  /tmp/ccPoddoo.s 			page 246


 9888      55415254 
 9888      5F41626F 
 9888      72745265 
 9888      63656976 
 9889              	.LASF42:
 9890 02b2 50657269 		.ascii	"PeriphInc\000"
 9890      7068496E 
 9890      6300
 9891              	.LASF118:
 9892 02bc 466C6167 		.ascii	"Flag\000"
 9892      00
 9893              	.LASF140:
 9894 02c1 48414C5F 		.ascii	"HAL_UART_RxHalfCpltCallback\000"
 9894      55415254 
 9894      5F527848 
 9894      616C6643 
 9894      706C7443 
 9895              	.LASF60:
 9896 02dd 58666572 		.ascii	"XferHalfCpltCallback\000"
 9896      48616C66 
 9896      43706C74 
 9896      43616C6C 
 9896      6261636B 
 9897              	.LASF14:
 9898 02f2 75696E74 		.ascii	"uint16_t\000"
 9898      31365F74 
 9898      00
 9899              	.LASF96:
 9900 02fb 48414C5F 		.ascii	"HAL_TICK_FREQ_10HZ\000"
 9900      5449434B 
 9900      5F465245 
 9900      515F3130 
 9900      485A00
 9901              	.LASF65:
 9902 030e 4368616E 		.ascii	"ChannelIndex\000"
 9902      6E656C49 
 9902      6E646578 
 9902      00
 9903              	.LASF69:
 9904 031b 53746F70 		.ascii	"StopBits\000"
 9904      42697473 
 9904      00
 9905              	.LASF120:
 9906 0324 5469636B 		.ascii	"Tickstart\000"
 9906      73746172 
 9906      7400
 9907              	.LASF58:
 9908 032e 50617265 		.ascii	"Parent\000"
 9908      6E7400
 9909              	.LASF108:
 9910 0335 55415254 		.ascii	"UART_Transmit_IT\000"
 9910      5F547261 
 9910      6E736D69 
 9910      745F4954 
 9910      00
 9911              	.LASF56:
 9912 0346 4C6F636B 		.ascii	"Lock\000"
ARM GAS  /tmp/ccPoddoo.s 			page 247


 9912      00
 9913              	.LASF189:
 9914 034b 48414C5F 		.ascii	"HAL_UART_IRQHandler\000"
 9914      55415254 
 9914      5F495251 
 9914      48616E64 
 9914      6C657200 
 9915              	.LASF8:
 9916 035f 5F5F7569 		.ascii	"__uint32_t\000"
 9916      6E743332 
 9916      5F7400
 9917              	.LASF121:
 9918 036a 54696D65 		.ascii	"Timeout\000"
 9918      6F757400 
 9919              	.LASF41:
 9920 0372 44697265 		.ascii	"Direction\000"
 9920      6374696F 
 9920      6E00
 9921              	.LASF175:
 9922 037c 48414C5F 		.ascii	"HAL_HalfDuplex_Init\000"
 9922      48616C66 
 9922      4475706C 
 9922      65785F49 
 9922      6E697400 
 9923              	.LASF44:
 9924 0390 50657269 		.ascii	"PeriphDataAlignment\000"
 9924      70684461 
 9924      7461416C 
 9924      69676E6D 
 9924      656E7400 
 9925              	.LASF92:
 9926 03a4 68646D61 		.ascii	"hdmarx\000"
 9926      727800
 9927              	.LASF169:
 9928 03ab 48414C5F 		.ascii	"HAL_UART_DeInit\000"
 9928      55415254 
 9928      5F446549 
 9928      6E697400 
 9929              	.LASF161:
 9930 03bb 48414C5F 		.ascii	"HAL_UART_Transmit_DMA\000"
 9930      55415254 
 9930      5F547261 
 9930      6E736D69 
 9930      745F444D 
 9931              	.LASF36:
 9932 03d1 48414C5F 		.ascii	"HAL_TIMEOUT\000"
 9932      54494D45 
 9932      4F555400 
 9933              	.LASF172:
 9934 03dd 57616B65 		.ascii	"WakeUpMethod\000"
 9934      55704D65 
 9934      74686F64 
 9934      00
 9935              	.LASF27:
 9936 03ea 444D415F 		.ascii	"DMA_TypeDef\000"
 9936      54797065 
 9936      44656600 
ARM GAS  /tmp/ccPoddoo.s 			page 248


 9937              	.LASF109:
 9938 03f6 55415254 		.ascii	"UART_SetConfig\000"
 9938      5F536574 
 9938      436F6E66 
 9938      696700
 9939              	.LASF49:
 9940 0405 48414C5F 		.ascii	"HAL_DMA_STATE_RESET\000"
 9940      444D415F 
 9940      53544154 
 9940      455F5245 
 9940      53455400 
 9941              	.LASF19:
 9942 0419 53797374 		.ascii	"SystemCoreClock\000"
 9942      656D436F 
 9942      7265436C 
 9942      6F636B00 
 9943              	.LASF102:
 9944 0429 75775469 		.ascii	"uwTickFreq\000"
 9944      636B4672 
 9944      657100
 9945              	.LASF70:
 9946 0434 50617269 		.ascii	"Parity\000"
 9946      747900
 9947              	.LASF23:
 9948 043b 43504152 		.ascii	"CPAR\000"
 9948      00
 9949              	.LASF113:
 9950 0440 55415254 		.ascii	"UART_DMARxAbortCallback\000"
 9950      5F444D41 
 9950      52784162 
 9950      6F727443 
 9950      616C6C62 
 9951              	.LASF9:
 9952 0458 6C6F6E67 		.ascii	"long unsigned int\000"
 9952      20756E73 
 9952      69676E65 
 9952      6420696E 
 9952      7400
 9953              	.LASF149:
 9954 046a 48414C5F 		.ascii	"HAL_UART_AbortTransmit_IT\000"
 9954      55415254 
 9954      5F41626F 
 9954      72745472 
 9954      616E736D 
 9955              	.LASF98:
 9956 0484 48414C5F 		.ascii	"HAL_TICK_FREQ_1KHZ\000"
 9956      5449434B 
 9956      5F465245 
 9956      515F314B 
 9956      485A00
 9957              	.LASF33:
 9958 0497 48414C5F 		.ascii	"HAL_OK\000"
 9958      4F4B00
 9959              	.LASF129:
 9960 049e 48414C5F 		.ascii	"HAL_UART_GetState\000"
 9960      55415254 
 9960      5F476574 
ARM GAS  /tmp/ccPoddoo.s 			page 249


 9960      53746174 
 9960      6500
 9961              	.LASF89:
 9962 04b0 52785866 		.ascii	"RxXferSize\000"
 9962      65725369 
 9962      7A6500
 9963              	.LASF5:
 9964 04bb 73686F72 		.ascii	"short unsigned int\000"
 9964      7420756E 
 9964      7369676E 
 9964      65642069 
 9964      6E7400
 9965              	.LASF86:
 9966 04ce 54785866 		.ascii	"TxXferSize\000"
 9966      65725369 
 9966      7A6500
 9967              	.LASF110:
 9968 04d9 55415254 		.ascii	"UART_DMARxOnlyAbortCallback\000"
 9968      5F444D41 
 9968      52784F6E 
 9968      6C794162 
 9968      6F727443 
 9969              	.LASF147:
 9970 04f5 6572726F 		.ascii	"errorflags\000"
 9970      72666C61 
 9970      677300
 9971              	.LASF63:
 9972 0500 4572726F 		.ascii	"ErrorCode\000"
 9972      72436F64 
 9972      6500
 9973              	.LASF176:
 9974 050a 48414C5F 		.ascii	"HAL_UART_Init\000"
 9974      55415254 
 9974      5F496E69 
 9974      7400
 9975              	.LASF45:
 9976 0518 4D656D44 		.ascii	"MemDataAlignment\000"
 9976      61746141 
 9976      6C69676E 
 9976      6D656E74 
 9976      00
 9977              	.LASF29:
 9978 0529 55534152 		.ascii	"USART_TypeDef\000"
 9978      545F5479 
 9978      70654465 
 9978      6600
 9979              	.LASF37:
 9980 0537 48414C5F 		.ascii	"HAL_StatusTypeDef\000"
 9980      53746174 
 9980      75735479 
 9980      70654465 
 9980      6600
 9981              	.LASF64:
 9982 0549 446D6142 		.ascii	"DmaBaseAddress\000"
 9982      61736541 
 9982      64647265 
 9982      737300
ARM GAS  /tmp/ccPoddoo.s 			page 250


 9983              	.LASF180:
 9984 0558 48414C5F 		.ascii	"HAL_DMA_Abort\000"
 9984      444D415F 
 9984      41626F72 
 9984      7400
 9985              	.LASF171:
 9986 0566 41646472 		.ascii	"Address\000"
 9986      65737300 
 9987              	.LASF20:
 9988 056e 41484250 		.ascii	"AHBPrescTable\000"
 9988      72657363 
 9988      5461626C 
 9988      6500
 9989              	.LASF50:
 9990 057c 48414C5F 		.ascii	"HAL_DMA_STATE_READY\000"
 9990      444D415F 
 9990      53544154 
 9990      455F5245 
 9990      41445900 
 9991              	.LASF143:
 9992 0590 48414C5F 		.ascii	"HAL_UART_TxCpltCallback\000"
 9992      55415254 
 9992      5F547843 
 9992      706C7443 
 9992      616C6C62 
 9993              	.LASF114:
 9994 05a8 55415254 		.ascii	"UART_DMATxAbortCallback\000"
 9994      5F444D41 
 9994      54784162 
 9994      6F727443 
 9994      616C6C62 
 9995              	.LASF111:
 9996 05c0 68646D61 		.ascii	"hdma\000"
 9996      00
 9997              	.LASF144:
 9998 05c5 69737266 		.ascii	"isrflags\000"
 9998      6C616773 
 9998      00
 9999              	.LASF122:
 10000 05ce 55415254 		.ascii	"UART_DMAError\000"
 10000      5F444D41 
 10000      4572726F 
 10000      7200
 10001              	.LASF84:
 10002 05dc 5F5F5541 		.ascii	"__UART_HandleTypeDef\000"
 10002      52545F48 
 10002      616E646C 
 10002      65547970 
 10002      65446566 
 10003              	.LASF17:
 10004 05f1 73697A65 		.ascii	"sizetype\000"
 10004      74797065 
 10004      00
 10005              	.LASF183:
 10006 05fa 48414C5F 		.ascii	"HAL_GetTick\000"
 10006      47657454 
 10006      69636B00 
ARM GAS  /tmp/ccPoddoo.s 			page 251


 10007              	.LASF32:
 10008 0606 6C6F6E67 		.ascii	"long double\000"
 10008      20646F75 
 10008      626C6500 
 10009              	.LASF124:
 10010 0612 55415254 		.ascii	"UART_DMARxHalfCplt\000"
 10010      5F444D41 
 10010      52784861 
 10010      6C664370 
 10010      6C7400
 10011              	.LASF158:
 10012 0625 48414C5F 		.ascii	"HAL_UART_Receive_DMA\000"
 10012      55415254 
 10012      5F526563 
 10012      65697665 
 10012      5F444D41 
 10013              	.LASF148:
 10014 063a 48414C5F 		.ascii	"HAL_UART_AbortReceive_IT\000"
 10014      55415254 
 10014      5F41626F 
 10014      72745265 
 10014      63656976 
 10015              	.LASF66:
 10016 0653 444D415F 		.ascii	"DMA_HandleTypeDef\000"
 10016      48616E64 
 10016      6C655479 
 10016      70654465 
 10016      6600
 10017              	.LASF61:
 10018 0665 58666572 		.ascii	"XferErrorCallback\000"
 10018      4572726F 
 10018      7243616C 
 10018      6C626163 
 10018      6B00
 10019              	.LASF77:
 10020 0677 48414C5F 		.ascii	"HAL_UART_STATE_BUSY_TX\000"
 10020      55415254 
 10020      5F535441 
 10020      54455F42 
 10020      5553595F 
 10021              	.LASF167:
 10022 068e 48414C5F 		.ascii	"HAL_UART_MspDeInit\000"
 10022      55415254 
 10022      5F4D7370 
 10022      4465496E 
 10022      697400
 10023              	.LASF117:
 10024 06a1 55415254 		.ascii	"UART_WaitOnFlagUntilTimeout\000"
 10024      5F576169 
 10024      744F6E46 
 10024      6C616755 
 10024      6E74696C 
 10025              	.LASF137:
 10026 06bd 48414C5F 		.ascii	"HAL_UART_AbortTransmitCpltCallback\000"
 10026      55415254 
 10026      5F41626F 
 10026      72745472 
ARM GAS  /tmp/ccPoddoo.s 			page 252


 10026      616E736D 
 10027              	.LASF91:
 10028 06e0 68646D61 		.ascii	"hdmatx\000"
 10028      747800
 10029              	.LASF99:
 10030 06e7 48414C5F 		.ascii	"HAL_TICK_FREQ_DEFAULT\000"
 10030      5449434B 
 10030      5F465245 
 10030      515F4445 
 10030      4641554C 
 10031              	.LASF185:
 10032 06fd 7372632F 		.ascii	"src/stm32f1xx_hal_uart.c\000"
 10032      73746D33 
 10032      32663178 
 10032      785F6861 
 10032      6C5F7561 
 10033              	.LASF150:
 10034 0716 48414C5F 		.ascii	"HAL_UART_Abort_IT\000"
 10034      55415254 
 10034      5F41626F 
 10034      72745F49 
 10034      5400
 10035              	.LASF25:
 10036 0728 444D415F 		.ascii	"DMA_Channel_TypeDef\000"
 10036      4368616E 
 10036      6E656C5F 
 10036      54797065 
 10036      44656600 
 10037              	.LASF55:
 10038 073c 496E6974 		.ascii	"Init\000"
 10038      00
 10039              	.LASF155:
 10040 0741 48414C5F 		.ascii	"HAL_UART_DMAStop\000"
 10040      55415254 
 10040      5F444D41 
 10040      53746F70 
 10040      00
 10041              	.LASF160:
 10042 0752 53697A65 		.ascii	"Size\000"
 10042      00
 10043              	.LASF54:
 10044 0757 496E7374 		.ascii	"Instance\000"
 10044      616E6365 
 10044      00
 10045              	.LASF134:
 10046 0760 48414C5F 		.ascii	"HAL_MultiProcessor_ExitMuteMode\000"
 10046      4D756C74 
 10046      6950726F 
 10046      63657373 
 10046      6F725F45 
 10047              	.LASF30:
 10048 0780 52455345 		.ascii	"RESET\000"
 10048      5400
 10049              	.LASF107:
 10050 0786 68756172 		.ascii	"huart\000"
 10050      7400
 10051              	.LASF177:
ARM GAS  /tmp/ccPoddoo.s 			page 253


 10052 078c 48414C5F 		.ascii	"HAL_RCC_GetPCLK2Freq\000"
 10052      5243435F 
 10052      47657450 
 10052      434C4B32 
 10052      46726571 
 10053              	.LASF132:
 10054 07a1 48414C5F 		.ascii	"HAL_HalfDuplex_EnableReceiver\000"
 10054      48616C66 
 10054      4475706C 
 10054      65785F45 
 10054      6E61626C 
 10055              	.LASF15:
 10056 07bf 696E7433 		.ascii	"int32_t\000"
 10056      325F7400 
 10057              	.LASF1:
 10058 07c7 756E7369 		.ascii	"unsigned char\000"
 10058      676E6564 
 10058      20636861 
 10058      7200
 10059              	.LASF174:
 10060 07d5 42726561 		.ascii	"BreakDetectLength\000"
 10060      6B446574 
 10060      6563744C 
 10060      656E6774 
 10060      6800
 10061              	.LASF53:
 10062 07e7 48414C5F 		.ascii	"HAL_DMA_StateTypeDef\000"
 10062      444D415F 
 10062      53746174 
 10062      65547970 
 10062      65446566 
 10063              	.LASF2:
 10064 07fc 73686F72 		.ascii	"short int\000"
 10064      7420696E 
 10064      7400
 10065              	.LASF104:
 10066 0806 70636C6B 		.ascii	"pclk\000"
 10066      00
 10067              	.LASF130:
 10068 080b 74656D70 		.ascii	"temp1\000"
 10068      3100
 10069              	.LASF131:
 10070 0811 74656D70 		.ascii	"temp2\000"
 10070      3200
 10071              	.LASF165:
 10072 0817 7469636B 		.ascii	"tickstart\000"
 10072      73746172 
 10072      7400
 10073              	.LASF141:
 10074 0821 48414C5F 		.ascii	"HAL_UART_RxCpltCallback\000"
 10074      55415254 
 10074      5F527843 
 10074      706C7443 
 10074      616C6C62 
 10075              	.LASF43:
 10076 0839 4D656D49 		.ascii	"MemInc\000"
 10076      6E6300
ARM GAS  /tmp/ccPoddoo.s 			page 254


 10077              	.LASF184:
 10078 0840 474E5520 		.ascii	"GNU C11 6.3.1 20170620 -mcpu=cortex-m3 -mthumb -g -"
 10078      43313120 
 10078      362E332E 
 10078      31203230 
 10078      31373036 
 10079 0873 67647761 		.ascii	"gdwarf-2 -Os -fomit-frame-pointer\000"
 10079      72662D32 
 10079      202D4F73 
 10079      202D666F 
 10079      6D69742D 
 10080              	.LASF81:
 10081 0895 48414C5F 		.ascii	"HAL_UART_STATE_ERROR\000"
 10081      55415254 
 10081      5F535441 
 10081      54455F45 
 10081      52524F52 
 10082              	.LASF186:
 10083 08aa 2F686F6D 		.ascii	"/home/berndoj/git/stm32tctst/lib/stm32f1hal\000"
 10083      652F6265 
 10083      726E646F 
 10083      6A2F6769 
 10083      742F7374 
 10084              	.LASF138:
 10085 08d6 48414C5F 		.ascii	"HAL_UART_AbortCpltCallback\000"
 10085      55415254 
 10085      5F41626F 
 10085      72744370 
 10085      6C744361 
 10086              	.LASF123:
 10087 08f1 646D6172 		.ascii	"dmarequest\000"
 10087      65717565 
 10087      737400
 10088              	.LASF164:
 10089 08fc 48414C5F 		.ascii	"HAL_UART_Receive\000"
 10089      55415254 
 10089      5F526563 
 10089      65697665 
 10089      00
 10090              	.LASF16:
 10091 090d 75696E74 		.ascii	"uint32_t\000"
 10091      33325F74 
 10091      00
 10092              	.LASF163:
 10093 0916 48414C5F 		.ascii	"HAL_UART_Transmit_IT\000"
 10093      55415254 
 10093      5F547261 
 10093      6E736D69 
 10093      745F4954 
 10094              	.LASF68:
 10095 092b 576F7264 		.ascii	"WordLength\000"
 10095      4C656E67 
 10095      746800
 10096              	.LASF168:
 10097 0936 48414C5F 		.ascii	"HAL_UART_MspInit\000"
 10097      55415254 
 10097      5F4D7370 
ARM GAS  /tmp/ccPoddoo.s 			page 255


 10097      496E6974 
 10097      00
 10098              	.LASF115:
 10099 0947 55415254 		.ascii	"UART_DMAAbortOnError\000"
 10099      5F444D41 
 10099      41626F72 
 10099      744F6E45 
 10099      72726F72 
 10100              	.LASF26:
 10101 095c 49464352 		.ascii	"IFCR\000"
 10101      00
 10102              	.LASF101:
 10103 0961 75775469 		.ascii	"uwTickPrio\000"
 10103      636B5072 
 10103      696F00
 10104              	.LASF12:
 10105 096c 756E7369 		.ascii	"unsigned int\000"
 10105      676E6564 
 10105      20696E74 
 10105      00
 10106              	.LASF46:
 10107 0979 4D6F6465 		.ascii	"Mode\000"
 10107      00
 10108              	.LASF4:
 10109 097e 5F5F7569 		.ascii	"__uint16_t\000"
 10109      6E743136 
 10109      5F7400
 10110              	.LASF78:
 10111 0989 48414C5F 		.ascii	"HAL_UART_STATE_BUSY_RX\000"
 10111      55415254 
 10111      5F535441 
 10111      54455F42 
 10111      5553595F 
 10112              	.LASF97:
 10113 09a0 48414C5F 		.ascii	"HAL_TICK_FREQ_100HZ\000"
 10113      5449434B 
 10113      5F465245 
 10113      515F3130 
 10113      30485A00 
 10114              	.LASF6:
 10115 09b4 5F5F696E 		.ascii	"__int32_t\000"
 10115      7433325F 
 10115      7400
 10116              	.LASF74:
 10117 09be 48414C5F 		.ascii	"HAL_UART_STATE_RESET\000"
 10117      55415254 
 10117      5F535441 
 10117      54455F52 
 10117      45534554 
 10118              	.LASF127:
 10119 09d3 55415254 		.ascii	"UART_DMATransmitCplt\000"
 10119      5F444D41 
 10119      5472616E 
 10119      736D6974 
 10119      43706C74 
 10120              	.LASF83:
 10121 09e8 5F5F444D 		.ascii	"__DMA_HandleTypeDef\000"
ARM GAS  /tmp/ccPoddoo.s 			page 256


 10121      415F4861 
 10121      6E646C65 
 10121      54797065 
 10121      44656600 
 10122              	.LASF106:
 10123 09fc 55415254 		.ascii	"UART_EndTransmit_IT\000"
 10123      5F456E64 
 10123      5472616E 
 10123      736D6974 
 10123      5F495400 
 10124              	.LASF52:
 10125 0a10 48414C5F 		.ascii	"HAL_DMA_STATE_TIMEOUT\000"
 10125      444D415F 
 10125      53544154 
 10125      455F5449 
 10125      4D454F55 
 10126              	.LASF34:
 10127 0a26 48414C5F 		.ascii	"HAL_ERROR\000"
 10127      4552524F 
 10127      5200
 10128              	.LASF142:
 10129 0a30 48414C5F 		.ascii	"HAL_UART_TxHalfCpltCallback\000"
 10129      55415254 
 10129      5F547848 
 10129      616C6643 
 10129      706C7443 
 10130              	.LASF139:
 10131 0a4c 48414C5F 		.ascii	"HAL_UART_ErrorCallback\000"
 10131      55415254 
 10131      5F457272 
 10131      6F724361 
 10131      6C6C6261 
 10132              	.LASF181:
 10133 0a63 48414C5F 		.ascii	"HAL_DMA_GetError\000"
 10133      444D415F 
 10133      47657445 
 10133      72726F72 
 10133      00
 10134              	.LASF73:
 10135 0a74 55415254 		.ascii	"UART_InitTypeDef\000"
 10135      5F496E69 
 10135      74547970 
 10135      65446566 
 10135      00
 10136              	.LASF153:
 10137 0a85 48414C5F 		.ascii	"HAL_UART_AbortTransmit\000"
 10137      55415254 
 10137      5F41626F 
 10137      72745472 
 10137      616E736D 
 10138              	.LASF22:
 10139 0a9c 434E4454 		.ascii	"CNDTR\000"
 10139      5200
 10140              	.LASF24:
 10141 0aa2 434D4152 		.ascii	"CMAR\000"
 10141      00
 10142              	.LASF80:
ARM GAS  /tmp/ccPoddoo.s 			page 257


 10143 0aa7 48414C5F 		.ascii	"HAL_UART_STATE_TIMEOUT\000"
 10143      55415254 
 10143      5F535441 
 10143      54455F54 
 10143      494D454F 
 10144              	.LASF71:
 10145 0abe 4877466C 		.ascii	"HwFlowCtl\000"
 10145      6F774374 
 10145      6C00
 10146              	.LASF135:
 10147 0ac8 48414C5F 		.ascii	"HAL_MultiProcessor_EnterMuteMode\000"
 10147      4D756C74 
 10147      6950726F 
 10147      63657373 
 10147      6F725F45 
 10148              	.LASF47:
 10149 0ae9 5072696F 		.ascii	"Priority\000"
 10149      72697479 
 10149      00
 10150              	.LASF88:
 10151 0af2 70527842 		.ascii	"pRxBuffPtr\000"
 10151      75666650 
 10151      747200
 10152              	.LASF13:
 10153 0afd 75696E74 		.ascii	"uint8_t\000"
 10153      385F7400 
 10154              	.LASF112:
 10155 0b05 55415254 		.ascii	"UART_DMATxOnlyAbortCallback\000"
 10155      5F444D41 
 10155      54784F6E 
 10155      6C794162 
 10155      6F727443 
 10156              	.LASF145:
 10157 0b21 63723169 		.ascii	"cr1its\000"
 10157      747300
 10158              	.LASF156:
 10159 0b28 48414C5F 		.ascii	"HAL_UART_DMAResume\000"
 10159      55415254 
 10159      5F444D41 
 10159      52657375 
 10159      6D6500
 10160              	.LASF154:
 10161 0b3b 48414C5F 		.ascii	"HAL_UART_Abort\000"
 10161      55415254 
 10161      5F41626F 
 10161      727400
 10162              	.LASF90:
 10163 0b4a 52785866 		.ascii	"RxXferCount\000"
 10163      6572436F 
 10163      756E7400 
 10164              	.LASF75:
 10165 0b56 48414C5F 		.ascii	"HAL_UART_STATE_READY\000"
 10165      55415254 
 10165      5F535441 
 10165      54455F52 
 10165      45414459 
 10166              	.LASF76:
ARM GAS  /tmp/ccPoddoo.s 			page 258


 10167 0b6b 48414C5F 		.ascii	"HAL_UART_STATE_BUSY\000"
 10167      55415254 
 10167      5F535441 
 10167      54455F42 
 10167      55535900 
 10168              	.LASF162:
 10169 0b7f 48414C5F 		.ascii	"HAL_UART_Receive_IT\000"
 10169      55415254 
 10169      5F526563 
 10169      65697665 
 10169      5F495400 
 10170              	.LASF173:
 10171 0b93 48414C5F 		.ascii	"HAL_LIN_Init\000"
 10171      4C494E5F 
 10171      496E6974 
 10171      00
 10172              	.LASF38:
 10173 0ba0 48414C5F 		.ascii	"HAL_UNLOCKED\000"
 10173      554E4C4F 
 10173      434B4544 
 10173      00
 10174              	.LASF119:
 10175 0bad 53746174 		.ascii	"Status\000"
 10175      757300
 10176              	.LASF94:
 10177 0bb4 52785374 		.ascii	"RxState\000"
 10177      61746500 
 10178              	.LASF62:
 10179 0bbc 58666572 		.ascii	"XferAbortCallback\000"
 10179      41626F72 
 10179      7443616C 
 10179      6C626163 
 10179      6B00
 10180              	.LASF59:
 10181 0bce 58666572 		.ascii	"XferCpltCallback\000"
 10181      43706C74 
 10181      43616C6C 
 10181      6261636B 
 10181      00
 10182              		.ident	"GCC: (15:6.3.1+svn253039-1build1) 6.3.1 20170620"
ARM GAS  /tmp/ccPoddoo.s 			page 259


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_uart.c
     /tmp/ccPoddoo.s:69     .text:0000000000000000 $t
     /tmp/ccPoddoo.s:75     .text:0000000000000000 UART_EndRxTransfer
     /tmp/ccPoddoo.s:106    .text:000000000000001a UART_SetConfig
     /tmp/ccPoddoo.s:191    .text:0000000000000088 $d
     /tmp/ccPoddoo.s:195    .text:000000000000008c $t
     /tmp/ccPoddoo.s:201    .text:000000000000008c UART_WaitOnFlagUntilTimeout.constprop.3
     /tmp/ccPoddoo.s:287    .text:00000000000000dc HAL_UART_MspInit
     /tmp/ccPoddoo.s:304    .text:00000000000000de HAL_UART_Init
     /tmp/ccPoddoo.s:389    .text:000000000000013a HAL_HalfDuplex_Init
     /tmp/ccPoddoo.s:477    .text:000000000000019e HAL_LIN_Init
     /tmp/ccPoddoo.s:578    .text:0000000000000214 HAL_MultiProcessor_Init
     /tmp/ccPoddoo.s:685    .text:0000000000000292 HAL_UART_MspDeInit
     /tmp/ccPoddoo.s:702    .text:0000000000000294 HAL_UART_DeInit
     /tmp/ccPoddoo.s:759    .text:00000000000002c4 HAL_UART_Transmit
     /tmp/ccPoddoo.s:922    .text:000000000000037c HAL_UART_Receive
     /tmp/ccPoddoo.s:1093   .text:000000000000043a HAL_UART_Transmit_IT
     /tmp/ccPoddoo.s:1166   .text:0000000000000478 HAL_UART_Receive_IT
     /tmp/ccPoddoo.s:1249   .text:00000000000004c6 HAL_UART_Transmit_DMA
     /tmp/ccPoddoo.s:1352   .text:0000000000000530 $d
     /tmp/ccPoddoo.s:2073   .text:0000000000000800 UART_DMATransmitCplt
     /tmp/ccPoddoo.s:2142   .text:000000000000082e UART_DMATxHalfCplt
     /tmp/ccPoddoo.s:2423   .text:00000000000008fc UART_DMAError
     /tmp/ccPoddoo.s:1358   .text:000000000000053c $t
     /tmp/ccPoddoo.s:1365   .text:000000000000053c HAL_UART_Receive_DMA
     /tmp/ccPoddoo.s:1495   .text:00000000000005c0 $d
     /tmp/ccPoddoo.s:2187   .text:000000000000083a UART_DMAReceiveCplt
     /tmp/ccPoddoo.s:2378   .text:00000000000008f0 UART_DMARxHalfCplt
     /tmp/ccPoddoo.s:1501   .text:00000000000005cc $t
     /tmp/ccPoddoo.s:1508   .text:00000000000005cc HAL_UART_DMAPause
     /tmp/ccPoddoo.s:1588   .text:0000000000000626 HAL_UART_DMAResume
     /tmp/ccPoddoo.s:1677   .text:0000000000000688 HAL_UART_DMAStop
     /tmp/ccPoddoo.s:1777   .text:00000000000006e6 HAL_UART_Abort
     /tmp/ccPoddoo.s:1895   .text:0000000000000766 HAL_UART_AbortTransmit
     /tmp/ccPoddoo.s:1974   .text:00000000000007ae HAL_UART_AbortReceive
     /tmp/ccPoddoo.s:2057   .text:00000000000007fe HAL_UART_TxCpltCallback
     /tmp/ccPoddoo.s:2126   .text:000000000000082c HAL_UART_TxHalfCpltCallback
     /tmp/ccPoddoo.s:2171   .text:0000000000000838 HAL_UART_RxCpltCallback
     /tmp/ccPoddoo.s:2243   .text:0000000000000872 UART_Receive_IT
     /tmp/ccPoddoo.s:2362   .text:00000000000008ee HAL_UART_RxHalfCpltCallback
     /tmp/ccPoddoo.s:2407   .text:00000000000008fa HAL_UART_ErrorCallback
     /tmp/ccPoddoo.s:2511   .text:000000000000094a HAL_UART_IRQHandler
     /tmp/ccPoddoo.s:2808   .text:0000000000000a84 $d
     /tmp/ccPoddoo.s:2820   .text:0000000000000a88 UART_DMAAbortOnError
     /tmp/ccPoddoo.s:2814   .text:0000000000000a88 $t
     /tmp/ccPoddoo.s:2855   .text:0000000000000a98 HAL_UART_AbortCpltCallback
     /tmp/ccPoddoo.s:2872   .text:0000000000000a9a HAL_UART_Abort_IT
     /tmp/ccPoddoo.s:3013   .text:0000000000000b38 $d
     /tmp/ccPoddoo.s:3076   .text:0000000000000b68 UART_DMATxAbortCallback
     /tmp/ccPoddoo.s:3024   .text:0000000000000b40 UART_DMARxAbortCallback
     /tmp/ccPoddoo.s:3018   .text:0000000000000b40 $t
     /tmp/ccPoddoo.s:3129   .text:0000000000000b90 HAL_UART_AbortTransmitCpltCallback
     /tmp/ccPoddoo.s:3146   .text:0000000000000b92 HAL_UART_AbortTransmit_IT
     /tmp/ccPoddoo.s:3219   .text:0000000000000bdc $d
     /tmp/ccPoddoo.s:3229   .text:0000000000000be0 UART_DMATxOnlyAbortCallback
     /tmp/ccPoddoo.s:3223   .text:0000000000000be0 $t
ARM GAS  /tmp/ccPoddoo.s 			page 260


     /tmp/ccPoddoo.s:3265   .text:0000000000000bf4 HAL_UART_AbortReceiveCpltCallback
     /tmp/ccPoddoo.s:3284   .text:0000000000000bf6 HAL_UART_AbortReceive_IT
     /tmp/ccPoddoo.s:3361   .text:0000000000000c48 $d
     /tmp/ccPoddoo.s:3371   .text:0000000000000c4c UART_DMARxOnlyAbortCallback
     /tmp/ccPoddoo.s:3365   .text:0000000000000c4c $t
     /tmp/ccPoddoo.s:3407   .text:0000000000000c60 HAL_LIN_SendBreak
     /tmp/ccPoddoo.s:3456   .text:0000000000000c8c HAL_MultiProcessor_EnterMuteMode
     /tmp/ccPoddoo.s:3505   .text:0000000000000cb8 HAL_MultiProcessor_ExitMuteMode
     /tmp/ccPoddoo.s:3554   .text:0000000000000ce4 HAL_HalfDuplex_EnableTransmitter
     /tmp/ccPoddoo.s:3612   .text:0000000000000d14 HAL_HalfDuplex_EnableReceiver
     /tmp/ccPoddoo.s:3670   .text:0000000000000d44 HAL_UART_GetState
     /tmp/ccPoddoo.s:3698   .text:0000000000000d50 HAL_UART_GetError
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetPCLK1Freq
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_GetError
HAL_DMA_Abort_IT
