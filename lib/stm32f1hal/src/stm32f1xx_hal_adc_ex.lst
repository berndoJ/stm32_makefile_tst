ARM GAS  /tmp/ccHubou1.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"stm32f1xx_hal_adc_ex.c"
  12              	@ GNU C11 (15:6.3.1+svn253039-1build1) version 6.3.1 20170620 (arm-none-eabi)
  13              	@	compiled by GNU C version 7.2.0, GMP version 6.1.2, MPFR version 4.0.1-rc1, MPC version 1.1.0, is
  14              	@ warning: MPFR header version 4.0.1-rc1 differs from library version 4.0.1.
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I ./inc -I ./inc/Legacy -I ../cmsisstm32f1xx/inc
  17              	@ -I ../cmsiscore/inc -imultilib thumb/v7-m -D__USES_INITFINI__
  18              	@ -D STM32F103x6 -D RUN_FROM_FLASH=1 -D __c src/stm32f1xx_hal_adc_ex.c
  19              	@ -mcpu=cortex-m3 -mthumb -auxbase-strip bin/stm32f1xx_hal_adc_ex.o -g
  20              	@ -gdwarf-2 -Os -Wall -fomit-frame-pointer -fverbose-asm
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffunction-cse -fgcse
  32              	@ -fgcse-lm -fgnu-runtime -fgnu-unique -fguess-branch-probability
  33              	@ -fhoist-adjacent-loads -fident -fif-conversion -fif-conversion2
  34              	@ -findirect-inlining -finline -finline-atomics -finline-functions
  35              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  36              	@ -fipa-cp-alignment -fipa-icf -fipa-icf-functions -fipa-icf-variables
  37              	@ -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra
  38              	@ -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  39              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  40              	@ -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  41              	@ -fmath-errno -fmerge-constants -fmerge-debug-strings
  42              	@ -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  43              	@ -fpartial-inlining -fpeephole -fpeephole2 -fplt -fprefetch-loop-arrays
  44              	@ -freg-struct-return -freorder-blocks -freorder-functions
  45              	@ -frerun-cse-after-loop -fsched-critical-path-heuristic
  46              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  47              	@ -fsched-last-insn-heuristic -fsched-pressure -fsched-rank-heuristic
  48              	@ -fsched-spec -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  49              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  50              	@ -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types
  51              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstrict-aliasing
  52              	@ -fstrict-overflow -fstrict-volatile-bitfields -fsync-libcalls
  53              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  54              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  55              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  56              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  57              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
ARM GAS  /tmp/ccHubou1.s 			page 2


  58              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  59              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  60              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  61              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  62              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  63              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  64              	@ -munaligned-access -mvectorize-with-neon-quad
  65              	
  66              		.text
  67              	.Ltext0:
  68              		.cfi_sections	.debug_frame
  69              		.align	1
  70              		.global	HAL_ADCEx_Calibration_Start
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu softvfp
  75              		.type	HAL_ADCEx_Calibration_Start, %function
  76              	HAL_ADCEx_Calibration_Start:
  77              	.LFB65:
  78              		.file 1 "src/stm32f1xx_hal_adc_ex.c"
   1:src/stm32f1xx_hal_adc_ex.c **** /**
   2:src/stm32f1xx_hal_adc_ex.c ****   ******************************************************************************
   3:src/stm32f1xx_hal_adc_ex.c ****   * @file    stm32f1xx_hal_adc_ex.c
   4:src/stm32f1xx_hal_adc_ex.c ****   * @author  MCD Application Team
   5:src/stm32f1xx_hal_adc_ex.c ****   * @brief   This file provides firmware functions to manage the following 
   6:src/stm32f1xx_hal_adc_ex.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:src/stm32f1xx_hal_adc_ex.c ****   *          peripheral:
   8:src/stm32f1xx_hal_adc_ex.c ****   *           + Operation functions
   9:src/stm32f1xx_hal_adc_ex.c ****   *             ++ Start, stop, get result of conversions of injected
  10:src/stm32f1xx_hal_adc_ex.c ****   *                group, using 2 possible modes: polling, interruption.
  11:src/stm32f1xx_hal_adc_ex.c ****   *             ++ Multimode feature (available on devices with 2 ADCs or more)
  12:src/stm32f1xx_hal_adc_ex.c ****   *             ++ Calibration (ADC automatic self-calibration)
  13:src/stm32f1xx_hal_adc_ex.c ****   *           + Control functions
  14:src/stm32f1xx_hal_adc_ex.c ****   *             ++ Channels configuration on injected group
  15:src/stm32f1xx_hal_adc_ex.c ****   *          Other functions (generic functions) are available in file 
  16:src/stm32f1xx_hal_adc_ex.c ****   *          "stm32f1xx_hal_adc.c".
  17:src/stm32f1xx_hal_adc_ex.c ****   *
  18:src/stm32f1xx_hal_adc_ex.c ****   @verbatim
  19:src/stm32f1xx_hal_adc_ex.c ****   [..] 
  20:src/stm32f1xx_hal_adc_ex.c ****   (@) Sections "ADC peripheral features" and "How to use this driver" are
  21:src/stm32f1xx_hal_adc_ex.c ****       available in file of generic functions "stm32f1xx_hal_adc.c".
  22:src/stm32f1xx_hal_adc_ex.c ****   [..]
  23:src/stm32f1xx_hal_adc_ex.c ****   @endverbatim
  24:src/stm32f1xx_hal_adc_ex.c ****   ******************************************************************************
  25:src/stm32f1xx_hal_adc_ex.c ****   * @attention
  26:src/stm32f1xx_hal_adc_ex.c ****   *
  27:src/stm32f1xx_hal_adc_ex.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  28:src/stm32f1xx_hal_adc_ex.c ****   * All rights reserved.</center></h2>
  29:src/stm32f1xx_hal_adc_ex.c ****   *
  30:src/stm32f1xx_hal_adc_ex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  31:src/stm32f1xx_hal_adc_ex.c ****   * the "License"; You may not use this file except in compliance with the
  32:src/stm32f1xx_hal_adc_ex.c ****   * License. You may obtain a copy of the License at:
  33:src/stm32f1xx_hal_adc_ex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  34:src/stm32f1xx_hal_adc_ex.c ****   *
  35:src/stm32f1xx_hal_adc_ex.c ****   ******************************************************************************
  36:src/stm32f1xx_hal_adc_ex.c ****   */
ARM GAS  /tmp/ccHubou1.s 			page 3


  37:src/stm32f1xx_hal_adc_ex.c **** 
  38:src/stm32f1xx_hal_adc_ex.c **** /* Includes ------------------------------------------------------------------*/
  39:src/stm32f1xx_hal_adc_ex.c **** #include "stm32f1xx_hal.h"
  40:src/stm32f1xx_hal_adc_ex.c **** 
  41:src/stm32f1xx_hal_adc_ex.c **** /** @addtogroup STM32F1xx_HAL_Driver
  42:src/stm32f1xx_hal_adc_ex.c ****   * @{
  43:src/stm32f1xx_hal_adc_ex.c ****   */
  44:src/stm32f1xx_hal_adc_ex.c **** 
  45:src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx ADCEx
  46:src/stm32f1xx_hal_adc_ex.c ****   * @brief ADC Extension HAL module driver
  47:src/stm32f1xx_hal_adc_ex.c ****   * @{
  48:src/stm32f1xx_hal_adc_ex.c ****   */
  49:src/stm32f1xx_hal_adc_ex.c **** 
  50:src/stm32f1xx_hal_adc_ex.c **** #ifdef HAL_ADC_MODULE_ENABLED
  51:src/stm32f1xx_hal_adc_ex.c **** 
  52:src/stm32f1xx_hal_adc_ex.c **** /* Private typedef -----------------------------------------------------------*/
  53:src/stm32f1xx_hal_adc_ex.c **** /* Private define ------------------------------------------------------------*/
  54:src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Private_Constants ADCEx Private Constants
  55:src/stm32f1xx_hal_adc_ex.c ****   * @{
  56:src/stm32f1xx_hal_adc_ex.c ****   */
  57:src/stm32f1xx_hal_adc_ex.c **** 
  58:src/stm32f1xx_hal_adc_ex.c ****   /* Delay for ADC calibration:                                               */
  59:src/stm32f1xx_hal_adc_ex.c ****   /* Hardware prerequisite before starting a calibration: the ADC must have   */
  60:src/stm32f1xx_hal_adc_ex.c ****   /* been in power-on state for at least two ADC clock cycles.                */
  61:src/stm32f1xx_hal_adc_ex.c ****   /* Unit: ADC clock cycles                                                   */
  62:src/stm32f1xx_hal_adc_ex.c ****   #define ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES       2U
  63:src/stm32f1xx_hal_adc_ex.c **** 
  64:src/stm32f1xx_hal_adc_ex.c ****   /* Timeout value for ADC calibration                                        */
  65:src/stm32f1xx_hal_adc_ex.c ****   /* Value defined to be higher than worst cases: low clocks freq,            */
  66:src/stm32f1xx_hal_adc_ex.c ****   /* maximum prescaler.                                                       */
  67:src/stm32f1xx_hal_adc_ex.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
  68:src/stm32f1xx_hal_adc_ex.c ****   /* prescaler 4, sampling time 12.5 ADC clock cycles, resolution 12 bits.    */
  69:src/stm32f1xx_hal_adc_ex.c ****   /* Unit: ms                                                                 */
  70:src/stm32f1xx_hal_adc_ex.c ****   #define ADC_CALIBRATION_TIMEOUT          10U
  71:src/stm32f1xx_hal_adc_ex.c **** 
  72:src/stm32f1xx_hal_adc_ex.c ****   /* Delay for temperature sensor stabilization time.                         */
  73:src/stm32f1xx_hal_adc_ex.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
  74:src/stm32f1xx_hal_adc_ex.c ****   /* Unit: us                                                                 */
  75:src/stm32f1xx_hal_adc_ex.c ****   #define ADC_TEMPSENSOR_DELAY_US         10U
  76:src/stm32f1xx_hal_adc_ex.c **** 
  77:src/stm32f1xx_hal_adc_ex.c **** /**
  78:src/stm32f1xx_hal_adc_ex.c ****   * @}
  79:src/stm32f1xx_hal_adc_ex.c ****   */
  80:src/stm32f1xx_hal_adc_ex.c **** 
  81:src/stm32f1xx_hal_adc_ex.c **** /* Private macro -------------------------------------------------------------*/
  82:src/stm32f1xx_hal_adc_ex.c **** /* Private variables ---------------------------------------------------------*/
  83:src/stm32f1xx_hal_adc_ex.c **** /* Private function prototypes -----------------------------------------------*/
  84:src/stm32f1xx_hal_adc_ex.c **** /* Private functions ---------------------------------------------------------*/
  85:src/stm32f1xx_hal_adc_ex.c **** 
  86:src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions ADCEx Exported Functions
  87:src/stm32f1xx_hal_adc_ex.c ****   * @{
  88:src/stm32f1xx_hal_adc_ex.c ****   */
  89:src/stm32f1xx_hal_adc_ex.c **** 
  90:src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group1 Extended Extended IO operation functions
  91:src/stm32f1xx_hal_adc_ex.c ****  *  @brief    Extended Extended Input and Output operation functions
  92:src/stm32f1xx_hal_adc_ex.c ****  *
  93:src/stm32f1xx_hal_adc_ex.c **** @verbatim    
ARM GAS  /tmp/ccHubou1.s 			page 4


  94:src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================
  95:src/stm32f1xx_hal_adc_ex.c ****                       ##### IO operation functions #####
  96:src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================
  97:src/stm32f1xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
  98:src/stm32f1xx_hal_adc_ex.c ****       (+) Start conversion of injected group.
  99:src/stm32f1xx_hal_adc_ex.c ****       (+) Stop conversion of injected group.
 100:src/stm32f1xx_hal_adc_ex.c ****       (+) Poll for conversion complete on injected group.
 101:src/stm32f1xx_hal_adc_ex.c ****       (+) Get result of injected channel conversion.
 102:src/stm32f1xx_hal_adc_ex.c ****       (+) Start conversion of injected group and enable interruptions.
 103:src/stm32f1xx_hal_adc_ex.c ****       (+) Stop conversion of injected group and disable interruptions.
 104:src/stm32f1xx_hal_adc_ex.c **** 
 105:src/stm32f1xx_hal_adc_ex.c ****       (+) Start multimode and enable DMA transfer.
 106:src/stm32f1xx_hal_adc_ex.c ****       (+) Stop multimode and disable ADC DMA transfer.
 107:src/stm32f1xx_hal_adc_ex.c ****       (+) Get result of multimode conversion.
 108:src/stm32f1xx_hal_adc_ex.c **** 
 109:src/stm32f1xx_hal_adc_ex.c ****       (+) Perform the ADC self-calibration for single or differential ending.
 110:src/stm32f1xx_hal_adc_ex.c ****       (+) Get calibration factors for single or differential ending.
 111:src/stm32f1xx_hal_adc_ex.c ****       (+) Set calibration factors for single or differential ending.
 112:src/stm32f1xx_hal_adc_ex.c ****       
 113:src/stm32f1xx_hal_adc_ex.c **** @endverbatim
 114:src/stm32f1xx_hal_adc_ex.c ****   * @{
 115:src/stm32f1xx_hal_adc_ex.c ****   */
 116:src/stm32f1xx_hal_adc_ex.c **** 
 117:src/stm32f1xx_hal_adc_ex.c **** /**
 118:src/stm32f1xx_hal_adc_ex.c ****   * @brief  Perform an ADC automatic self-calibration
 119:src/stm32f1xx_hal_adc_ex.c ****   *         Calibration prerequisite: ADC must be disabled (execute this
 120:src/stm32f1xx_hal_adc_ex.c ****   *         function before HAL_ADC_Start() or after HAL_ADC_Stop() ).
 121:src/stm32f1xx_hal_adc_ex.c ****   *         During calibration process, ADC is enabled. ADC is let enabled at
 122:src/stm32f1xx_hal_adc_ex.c ****   *         the completion of this function.
 123:src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 124:src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
 125:src/stm32f1xx_hal_adc_ex.c ****   */
 126:src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
 127:src/stm32f1xx_hal_adc_ex.c **** {
  79              		.loc 1 127 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 8
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              	.LVL0:
 128:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 129:src/stm32f1xx_hal_adc_ex.c ****   uint32_t tickstart;
 130:src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0U;
  84              		.loc 1 130 0
  85 0000 0023     		movs	r3, #0	@ tmp149,
 127:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  86              		.loc 1 127 0
  87 0002 73B5     		push	{r0, r1, r4, r5, r6, lr}	@
  88              	.LCFI0:
  89              		.cfi_def_cfa_offset 24
  90              		.cfi_offset 4, -16
  91              		.cfi_offset 5, -12
  92              		.cfi_offset 6, -8
  93              		.cfi_offset 14, -4
  94              		.loc 1 130 0
  95 0004 0193     		str	r3, [sp, #4]	@ tmp149, wait_loop_index
 131:src/stm32f1xx_hal_adc_ex.c ****   
 132:src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
ARM GAS  /tmp/ccHubou1.s 			page 5


 133:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 134:src/stm32f1xx_hal_adc_ex.c **** 
 135:src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 136:src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
  96              		.loc 1 136 0
  97 0006 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2	@ hadc_9(D)->Lock, hadc_9(D)->Lock
 127:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  98              		.loc 1 127 0
  99 000a 0446     		mov	r4, r0	@ hadc, hadc
 100              		.loc 1 136 0
 101 000c 012B     		cmp	r3, #1	@ hadc_9(D)->Lock,
 102 000e 5AD0     		beq	.L10	@,
 103              		.loc 1 136 0 is_stmt 0 discriminator 2
 104 0010 0123     		movs	r3, #1	@ tmp151,
 105 0012 80F82430 		strb	r3, [r0, #36]	@ tmp151, hadc_9(D)->Lock
 137:src/stm32f1xx_hal_adc_ex.c ****     
 138:src/stm32f1xx_hal_adc_ex.c ****   /* 1. Calibration prerequisite:                                             */
 139:src/stm32f1xx_hal_adc_ex.c ****   /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
 140:src/stm32f1xx_hal_adc_ex.c ****   /*      mode before ADC enable                                              */
 141:src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups       */
 142:src/stm32f1xx_hal_adc_ex.c ****   /* Disable ADC peripheral */
 143:src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 106              		.loc 1 143 0 is_stmt 1 discriminator 2
 107 0016 FFF7FEFF 		bl	ADC_ConversionStop_Disable	@
 108              	.LVL1:
 144:src/stm32f1xx_hal_adc_ex.c ****   
 145:src/stm32f1xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
 146:src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 109              		.loc 1 146 0 discriminator 2
 110 001a 0546     		mov	r5, r0	@ <retval>,
 111 001c 0028     		cmp	r0, #0	@ <retval>
 112 001e 32D1     		bne	.L3	@
 147:src/stm32f1xx_hal_adc_ex.c ****   {
 148:src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state */
 149:src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 113              		.loc 1 149 0
 114 0020 A36A     		ldr	r3, [r4, #40]	@ _14, hadc_9(D)->State
 150:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 151:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 152:src/stm32f1xx_hal_adc_ex.c ****     
 153:src/stm32f1xx_hal_adc_ex.c ****     /* Hardware prerequisite: delay before starting the calibration.          */
 154:src/stm32f1xx_hal_adc_ex.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
 155:src/stm32f1xx_hal_adc_ex.c ****     /*  - Wait for the expected ADC clock cycles delay */
 156:src/stm32f1xx_hal_adc_ex.c ****     wait_loop_index = ((SystemCoreClock
 157:src/stm32f1xx_hal_adc_ex.c ****                         / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 115              		.loc 1 157 0
 116 0022 0220     		movs	r0, #2	@,
 117              	.LVL2:
 149:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 118              		.loc 1 149 0
 119 0024 23F48853 		bic	r3, r3, #4352	@ tmp154, _14,
 120 0028 23F00203 		bic	r3, r3, #2	@ tmp154, tmp154,
 121 002c 43F00203 		orr	r3, r3, #2	@ _16, tmp154,
 122 0030 A362     		str	r3, [r4, #40]	@ _16, hadc_9(D)->State
 123              		.loc 1 157 0
 124 0032 264B     		ldr	r3, .L14	@ tmp156,
 125 0034 1E68     		ldr	r6, [r3]	@ SystemCoreClock.0_18, SystemCoreClock
ARM GAS  /tmp/ccHubou1.s 			page 6


 126 0036 FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq	@
 127              	.LVL3:
 128 003a B6FBF0F0 		udiv	r0, r6, r0	@ tmp158, SystemCoreClock.0_18,
 158:src/stm32f1xx_hal_adc_ex.c ****                        * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 129              		.loc 1 158 0
 130 003e 4000     		lsls	r0, r0, #1	@ wait_loop_index.1_22, tmp158,
 156:src/stm32f1xx_hal_adc_ex.c ****                         / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 131              		.loc 1 156 0
 132 0040 0190     		str	r0, [sp, #4]	@ wait_loop_index.1_22, wait_loop_index
 133              	.L4:
 159:src/stm32f1xx_hal_adc_ex.c **** 
 160:src/stm32f1xx_hal_adc_ex.c ****     while(wait_loop_index != 0U)
 134              		.loc 1 160 0
 135 0042 019B     		ldr	r3, [sp, #4]	@ wait_loop_index.4_24, wait_loop_index
 136 0044 1BBB     		cbnz	r3, .L5	@ wait_loop_index.4_24,
 161:src/stm32f1xx_hal_adc_ex.c ****     {
 162:src/stm32f1xx_hal_adc_ex.c ****       wait_loop_index--;
 163:src/stm32f1xx_hal_adc_ex.c ****     }
 164:src/stm32f1xx_hal_adc_ex.c ****     
 165:src/stm32f1xx_hal_adc_ex.c ****     /* 2. Enable the ADC peripheral */
 166:src/stm32f1xx_hal_adc_ex.c ****     ADC_Enable(hadc);
 137              		.loc 1 166 0
 138 0046 2046     		mov	r0, r4	@, hadc
 139 0048 FFF7FEFF 		bl	ADC_Enable	@
 140              	.LVL4:
 167:src/stm32f1xx_hal_adc_ex.c ****     
 168:src/stm32f1xx_hal_adc_ex.c ****     /* 3. Resets ADC calibration registers */  
 169:src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 141              		.loc 1 169 0
 142 004c 2268     		ldr	r2, [r4]	@ _29, hadc_9(D)->Instance
 143 004e 9368     		ldr	r3, [r2, #8]	@ _30, _29->CR2
 144 0050 43F00803 		orr	r3, r3, #8	@ _31, _30,
 145 0054 9360     		str	r3, [r2, #8]	@ _31, _29->CR2
 170:src/stm32f1xx_hal_adc_ex.c ****     
 171:src/stm32f1xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
 146              		.loc 1 171 0
 147 0056 FFF7FEFF 		bl	HAL_GetTick	@
 148              	.LVL5:
 149 005a 0646     		mov	r6, r0	@ tickstart,
 150              	.LVL6:
 151              	.L6:
 172:src/stm32f1xx_hal_adc_ex.c **** 
 173:src/stm32f1xx_hal_adc_ex.c ****     /* Wait for calibration reset completion */
 174:src/stm32f1xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 152              		.loc 1 174 0
 153 005c 2368     		ldr	r3, [r4]	@ _35, hadc_9(D)->Instance
 154 005e 9A68     		ldr	r2, [r3, #8]	@ _36, _35->CR2
 155 0060 1207     		lsls	r2, r2, #28	@, _36,
 156 0062 18D4     		bmi	.L7	@,
 175:src/stm32f1xx_hal_adc_ex.c ****     {
 176:src/stm32f1xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 177:src/stm32f1xx_hal_adc_ex.c ****       {
 178:src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 179:src/stm32f1xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 180:src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
 181:src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_INTERNAL);
 182:src/stm32f1xx_hal_adc_ex.c ****         
ARM GAS  /tmp/ccHubou1.s 			page 7


 183:src/stm32f1xx_hal_adc_ex.c ****         /* Process unlocked */
 184:src/stm32f1xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 185:src/stm32f1xx_hal_adc_ex.c ****         
 186:src/stm32f1xx_hal_adc_ex.c ****         return HAL_ERROR;
 187:src/stm32f1xx_hal_adc_ex.c ****       }
 188:src/stm32f1xx_hal_adc_ex.c ****     }
 189:src/stm32f1xx_hal_adc_ex.c ****     
 190:src/stm32f1xx_hal_adc_ex.c ****     
 191:src/stm32f1xx_hal_adc_ex.c ****     /* 4. Start ADC calibration */
 192:src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 157              		.loc 1 192 0
 158 0064 9A68     		ldr	r2, [r3, #8]	@ _46, _35->CR2
 159 0066 42F00402 		orr	r2, r2, #4	@ _47, _46,
 160 006a 9A60     		str	r2, [r3, #8]	@ _47, _35->CR2
 193:src/stm32f1xx_hal_adc_ex.c ****     
 194:src/stm32f1xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
 161              		.loc 1 194 0
 162 006c FFF7FEFF 		bl	HAL_GetTick	@
 163              	.LVL7:
 164 0070 0646     		mov	r6, r0	@ tickstart,
 165              	.LVL8:
 166              	.L8:
 195:src/stm32f1xx_hal_adc_ex.c **** 
 196:src/stm32f1xx_hal_adc_ex.c ****     /* Wait for calibration completion */
 197:src/stm32f1xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 167              		.loc 1 197 0
 168 0072 2368     		ldr	r3, [r4]	@ _51, hadc_9(D)->Instance
 169 0074 9B68     		ldr	r3, [r3, #8]	@ _52, _51->CR2
 170 0076 5B07     		lsls	r3, r3, #29	@, _52,
 171 0078 1FD4     		bmi	.L9	@,
 198:src/stm32f1xx_hal_adc_ex.c ****     {
 199:src/stm32f1xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 200:src/stm32f1xx_hal_adc_ex.c ****       {
 201:src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 202:src/stm32f1xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 203:src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
 204:src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_INTERNAL);
 205:src/stm32f1xx_hal_adc_ex.c ****         
 206:src/stm32f1xx_hal_adc_ex.c ****         /* Process unlocked */
 207:src/stm32f1xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 208:src/stm32f1xx_hal_adc_ex.c ****         
 209:src/stm32f1xx_hal_adc_ex.c ****         return HAL_ERROR;
 210:src/stm32f1xx_hal_adc_ex.c ****       }
 211:src/stm32f1xx_hal_adc_ex.c ****     }
 212:src/stm32f1xx_hal_adc_ex.c ****     
 213:src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state */
 214:src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 172              		.loc 1 214 0
 173 007a A36A     		ldr	r3, [r4, #40]	@ _62, hadc_9(D)->State
 174 007c 23F00303 		bic	r3, r3, #3	@ tmp169, _62,
 175 0080 43F00103 		orr	r3, r3, #1	@ _64, tmp169,
 176 0084 A362     		str	r3, [r4, #40]	@ _64, hadc_9(D)->State
 177              	.LVL9:
 178              	.L3:
 215:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 216:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
 217:src/stm32f1xx_hal_adc_ex.c ****   }
ARM GAS  /tmp/ccHubou1.s 			page 8


 218:src/stm32f1xx_hal_adc_ex.c ****   
 219:src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 220:src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 179              		.loc 1 220 0
 180 0086 0023     		movs	r3, #0	@ tmp170,
 181 0088 84F82430 		strb	r3, [r4, #36]	@ tmp170, hadc_9(D)->Lock
 221:src/stm32f1xx_hal_adc_ex.c ****   
 222:src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 223:src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 182              		.loc 1 223 0
 183 008c 12E0     		b	.L2	@
 184              	.L5:
 162:src/stm32f1xx_hal_adc_ex.c ****     }
 185              		.loc 1 162 0
 186 008e 019B     		ldr	r3, [sp, #4]	@ wait_loop_index.2_25, wait_loop_index
 187 0090 013B     		subs	r3, r3, #1	@ wait_loop_index.3_26, wait_loop_index.2_25,
 188 0092 0193     		str	r3, [sp, #4]	@ wait_loop_index.3_26, wait_loop_index
 189 0094 D5E7     		b	.L4	@
 190              	.LVL10:
 191              	.L7:
 176:src/stm32f1xx_hal_adc_ex.c ****       {
 192              		.loc 1 176 0
 193 0096 FFF7FEFF 		bl	HAL_GetTick	@
 194              	.LVL11:
 195 009a 801B     		subs	r0, r0, r6	@ tmp159,, tickstart
 196 009c 0A28     		cmp	r0, #10	@ tmp159,
 197 009e DDD9     		bls	.L6	@,
 198              	.L13:
 202:src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
 199              		.loc 1 202 0
 200 00a0 A36A     		ldr	r3, [r4, #40]	@ _57,
 209:src/stm32f1xx_hal_adc_ex.c ****       }
 201              		.loc 1 209 0
 202 00a2 0125     		movs	r5, #1	@ <retval>,
 202:src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
 203              		.loc 1 202 0
 204 00a4 23F01203 		bic	r3, r3, #18	@ tmp165, _57,
 205 00a8 43F01003 		orr	r3, r3, #16	@ _59, tmp165,
 206 00ac A362     		str	r3, [r4, #40]	@ _59,
 207:src/stm32f1xx_hal_adc_ex.c ****         
 207              		.loc 1 207 0
 208 00ae 0023     		movs	r3, #0	@ tmp166,
 209 00b0 84F82430 		strb	r3, [r4, #36]	@ tmp166, hadc_9(D)->Lock
 210              	.LVL12:
 211              	.L2:
 224:src/stm32f1xx_hal_adc_ex.c **** }
 212              		.loc 1 224 0
 213 00b4 2846     		mov	r0, r5	@, <retval>
 214 00b6 02B0     		add	sp, sp, #8	@,,
 215              	.LCFI1:
 216              		.cfi_remember_state
 217              		.cfi_def_cfa_offset 16
 218              		@ sp needed	@
 219 00b8 70BD     		pop	{r4, r5, r6, pc}	@
 220              	.LVL13:
 221              	.L9:
 222              	.LCFI2:
ARM GAS  /tmp/ccHubou1.s 			page 9


 223              		.cfi_restore_state
 199:src/stm32f1xx_hal_adc_ex.c ****       {
 224              		.loc 1 199 0
 225 00ba FFF7FEFF 		bl	HAL_GetTick	@
 226              	.LVL14:
 227 00be 801B     		subs	r0, r0, r6	@ tmp164,, tickstart
 228 00c0 0A28     		cmp	r0, #10	@ tmp164,
 229 00c2 D6D9     		bls	.L8	@,
 230 00c4 ECE7     		b	.L13	@
 231              	.LVL15:
 232              	.L10:
 136:src/stm32f1xx_hal_adc_ex.c ****     
 233              		.loc 1 136 0
 234 00c6 0225     		movs	r5, #2	@ <retval>,
 235 00c8 F4E7     		b	.L2	@
 236              	.L15:
 237 00ca 00BF     		.align	2
 238              	.L14:
 239 00cc 00000000 		.word	SystemCoreClock
 240              		.cfi_endproc
 241              	.LFE65:
 242              		.size	HAL_ADCEx_Calibration_Start, .-HAL_ADCEx_Calibration_Start
 243              		.align	1
 244              		.global	HAL_ADCEx_InjectedStart
 245              		.syntax unified
 246              		.thumb
 247              		.thumb_func
 248              		.fpu softvfp
 249              		.type	HAL_ADCEx_InjectedStart, %function
 250              	HAL_ADCEx_InjectedStart:
 251              	.LFB66:
 225:src/stm32f1xx_hal_adc_ex.c **** 
 226:src/stm32f1xx_hal_adc_ex.c **** /**
 227:src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of injected group.
 228:src/stm32f1xx_hal_adc_ex.c ****   *         Interruptions enabled in this function: None.
 229:src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 230:src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
 231:src/stm32f1xx_hal_adc_ex.c ****   */
 232:src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
 233:src/stm32f1xx_hal_adc_ex.c **** {
 252              		.loc 1 233 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              	.LVL16:
 234:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 235:src/stm32f1xx_hal_adc_ex.c ****   
 236:src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 237:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 238:src/stm32f1xx_hal_adc_ex.c ****   
 239:src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 240:src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 257              		.loc 1 240 0
 258 00d0 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2	@ hadc_6(D)->Lock, hadc_6(D)->Lock
 233:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 259              		.loc 1 233 0
 260 00d4 10B5     		push	{r4, lr}	@
ARM GAS  /tmp/ccHubou1.s 			page 10


 261              	.LCFI3:
 262              		.cfi_def_cfa_offset 8
 263              		.cfi_offset 4, -8
 264              		.cfi_offset 14, -4
 265              		.loc 1 240 0
 266 00d6 012B     		cmp	r3, #1	@ hadc_6(D)->Lock,
 233:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 267              		.loc 1 233 0
 268 00d8 0446     		mov	r4, r0	@ hadc, hadc
 269              		.loc 1 240 0
 270 00da 4AD0     		beq	.L25	@,
 271              		.loc 1 240 0 is_stmt 0 discriminator 2
 272 00dc 0123     		movs	r3, #1	@ tmp136,
 273 00de 80F82430 		strb	r3, [r0, #36]	@ tmp136, hadc_6(D)->Lock
 241:src/stm32f1xx_hal_adc_ex.c ****     
 242:src/stm32f1xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
 243:src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 274              		.loc 1 243 0 is_stmt 1 discriminator 2
 275 00e2 FFF7FEFF 		bl	ADC_Enable	@
 276              	.LVL17:
 244:src/stm32f1xx_hal_adc_ex.c ****   
 245:src/stm32f1xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
 246:src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 277              		.loc 1 246 0 discriminator 2
 278 00e6 0028     		cmp	r0, #0	@ <retval>
 279 00e8 3FD1     		bne	.L18	@
 247:src/stm32f1xx_hal_adc_ex.c ****   {
 248:src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
 249:src/stm32f1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to injected group conversion results    */
 250:src/stm32f1xx_hal_adc_ex.c ****     /* - Set state bitfield related to injected operation                     */
 251:src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 280              		.loc 1 251 0
 281 00ea A36A     		ldr	r3, [r4, #40]	@ _11, hadc_6(D)->State
 252:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 253:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_INJ_BUSY);
 254:src/stm32f1xx_hal_adc_ex.c ****     
 255:src/stm32f1xx_hal_adc_ex.c ****     /* Case of independent mode or multimode (for devices with several ADCs): */
 256:src/stm32f1xx_hal_adc_ex.c ****     /* Set multimode state.                                                   */
 257:src/stm32f1xx_hal_adc_ex.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 282              		.loc 1 257 0
 283 00ec 224A     		ldr	r2, .L28	@ tmp141,
 251:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 284              		.loc 1 251 0
 285 00ee 23F44053 		bic	r3, r3, #12288	@ tmp139, _11,
 286 00f2 23F00103 		bic	r3, r3, #1	@ tmp139, tmp139,
 287 00f6 43F48053 		orr	r3, r3, #4096	@ _13, tmp139,
 288 00fa A362     		str	r3, [r4, #40]	@ _13, hadc_6(D)->State
 289              		.loc 1 257 0
 290 00fc 2368     		ldr	r3, [r4]	@ _15, hadc_6(D)->Instance
 291 00fe 9342     		cmp	r3, r2	@ _15, tmp141
 292 0100 05D1     		bne	.L19	@,
 293              		.loc 1 257 0 is_stmt 0 discriminator 1
 294 0102 A2F58062 		sub	r2, r2, #1024	@ tmp142, tmp142,
 295 0106 5268     		ldr	r2, [r2, #4]	@ _16, MEM[(struct ADC_TypeDef *)1073816576B].CR1
 296 0108 12F4702F 		tst	r2, #983040	@ _16,
 297 010c 25D1     		bne	.L20	@,
 298              	.L19:
ARM GAS  /tmp/ccHubou1.s 			page 11


 258:src/stm32f1xx_hal_adc_ex.c ****     {
 259:src/stm32f1xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 299              		.loc 1 259 0 is_stmt 1
 300 010e A26A     		ldr	r2, [r4, #40]	@ _21,
 301 0110 22F48012 		bic	r2, r2, #1048576	@ _22, _21,
 302              	.L26:
 260:src/stm32f1xx_hal_adc_ex.c ****     }
 261:src/stm32f1xx_hal_adc_ex.c ****     else
 262:src/stm32f1xx_hal_adc_ex.c ****     {
 263:src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 303              		.loc 1 263 0
 304 0114 A262     		str	r2, [r4, #40]	@ _19,
 264:src/stm32f1xx_hal_adc_ex.c ****     }
 265:src/stm32f1xx_hal_adc_ex.c ****     
 266:src/stm32f1xx_hal_adc_ex.c ****     /* Check if a regular conversion is ongoing */
 267:src/stm32f1xx_hal_adc_ex.c ****     /* Note: On this device, there is no ADC error code fields related to     */
 268:src/stm32f1xx_hal_adc_ex.c ****     /*       conversions on group injected only. In case of conversion on     */
 269:src/stm32f1xx_hal_adc_ex.c ****     /*       going on group regular, no error code is reset.                  */
 270:src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 305              		.loc 1 270 0
 306 0116 A26A     		ldr	r2, [r4, #40]	@ _24, hadc_6(D)->State
 307 0118 12F48072 		ands	r2, r2, #256	@ tmp144, _24,
 271:src/stm32f1xx_hal_adc_ex.c ****     {
 272:src/stm32f1xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
 273:src/stm32f1xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 308              		.loc 1 273 0
 309 011c 08BF     		it	eq
 310 011e E262     		streq	r2, [r4, #44]	@ tmp144, hadc_6(D)->ErrorCode
 274:src/stm32f1xx_hal_adc_ex.c ****     }
 275:src/stm32f1xx_hal_adc_ex.c ****     
 276:src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 277:src/stm32f1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 278:src/stm32f1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 279:src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 311              		.loc 1 279 0
 312 0120 0022     		movs	r2, #0	@ tmp146,
 313 0122 84F82420 		strb	r2, [r4, #36]	@ tmp146, hadc_6(D)->Lock
 280:src/stm32f1xx_hal_adc_ex.c ****     
 281:src/stm32f1xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
 282:src/stm32f1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 283:src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 314              		.loc 1 283 0
 315 0126 6FF00402 		mvn	r2, #4	@ tmp148,
 316 012a 1A60     		str	r2, [r3]	@ tmp148, _15->SR
 284:src/stm32f1xx_hal_adc_ex.c ****         
 285:src/stm32f1xx_hal_adc_ex.c ****     /* Enable conversion of injected group.                                   */
 286:src/stm32f1xx_hal_adc_ex.c ****     /* If software start has been selected, conversion starts immediately.    */
 287:src/stm32f1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 288:src/stm32f1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 289:src/stm32f1xx_hal_adc_ex.c ****     /* If automatic injected conversion is enabled, conversion will start     */
 290:src/stm32f1xx_hal_adc_ex.c ****     /* after next regular group conversion.                                   */
 291:src/stm32f1xx_hal_adc_ex.c ****     /* Case of multimode enabled (for devices with several ADCs): if ADC is   */
 292:src/stm32f1xx_hal_adc_ex.c ****     /* slave, ADC is enabled only (conversion is not started). If ADC is      */
 293:src/stm32f1xx_hal_adc_ex.c ****     /* master, ADC is enabled and conversion is started.                      */
 294:src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 317              		.loc 1 294 0
 318 012c 5A68     		ldr	r2, [r3, #4]	@ _29, _15->CR1
ARM GAS  /tmp/ccHubou1.s 			page 12


 319 012e 5205     		lsls	r2, r2, #21	@, _29,
 320 0130 20D4     		bmi	.L17	@,
 295:src/stm32f1xx_hal_adc_ex.c ****     {
 296:src/stm32f1xx_hal_adc_ex.c ****       if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 321              		.loc 1 296 0
 322 0132 9A68     		ldr	r2, [r3, #8]	@ _31, _15->CR2
 323 0134 02F4E042 		and	r2, r2, #28672	@ tmp150, _31,
 324 0138 B2F5E04F 		cmp	r2, #28672	@ tmp150,
 325 013c 11D1     		bne	.L23	@,
 326              		.loc 1 296 0 is_stmt 0 discriminator 1
 327 013e 0E4A     		ldr	r2, .L28	@ tmp151,
 328 0140 9342     		cmp	r3, r2	@ _15, tmp151
 329 0142 05D1     		bne	.L24	@,
 297:src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 330              		.loc 1 297 0 is_stmt 1 discriminator 2
 331 0144 A2F58062 		sub	r2, r2, #1024	@ tmp152, tmp152,
 332 0148 5268     		ldr	r2, [r2, #4]	@ _33, MEM[(struct ADC_TypeDef *)1073816576B].CR1
 296:src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 333              		.loc 1 296 0 discriminator 2
 334 014a 12F4702F 		tst	r2, #983040	@ _33,
 335 014e 08D1     		bne	.L23	@,
 336              	.L24:
 298:src/stm32f1xx_hal_adc_ex.c ****       {
 299:src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with SW start */
 300:src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 337              		.loc 1 300 0
 338 0150 9A68     		ldr	r2, [r3, #8]	@ _35, _15->CR2
 339 0152 42F40212 		orr	r2, r2, #2129920	@ _36, _35,
 340              	.L27:
 301:src/stm32f1xx_hal_adc_ex.c ****       }
 302:src/stm32f1xx_hal_adc_ex.c ****       else
 303:src/stm32f1xx_hal_adc_ex.c ****       {
 304:src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with external trigger */
 305:src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 341              		.loc 1 305 0
 342 0156 9A60     		str	r2, [r3, #8]	@ _39,
 343 0158 10BD     		pop	{r4, pc}	@
 344              	.LVL18:
 345              	.L20:
 263:src/stm32f1xx_hal_adc_ex.c ****     }
 346              		.loc 1 263 0
 347 015a A26A     		ldr	r2, [r4, #40]	@ _18,
 348 015c 42F48012 		orr	r2, r2, #1048576	@ _19, _18,
 349 0160 D8E7     		b	.L26	@
 350              	.L23:
 351              		.loc 1 305 0
 352 0162 9A68     		ldr	r2, [r3, #8]	@ _38, _15->CR2
 353 0164 42F40042 		orr	r2, r2, #32768	@ _39, _38,
 354 0168 F5E7     		b	.L27	@
 355              	.L18:
 306:src/stm32f1xx_hal_adc_ex.c ****       }
 307:src/stm32f1xx_hal_adc_ex.c ****     }
 308:src/stm32f1xx_hal_adc_ex.c ****   }
 309:src/stm32f1xx_hal_adc_ex.c ****   else
 310:src/stm32f1xx_hal_adc_ex.c ****   {
 311:src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 312:src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
ARM GAS  /tmp/ccHubou1.s 			page 13


 356              		.loc 1 312 0
 357 016a 0023     		movs	r3, #0	@ tmp154,
 358 016c 84F82430 		strb	r3, [r4, #36]	@ tmp154, hadc_6(D)->Lock
 359 0170 10BD     		pop	{r4, pc}	@
 360              	.LVL19:
 361              	.L25:
 240:src/stm32f1xx_hal_adc_ex.c ****     
 362              		.loc 1 240 0
 363 0172 0220     		movs	r0, #2	@ <retval>,
 364              	.LVL20:
 365              	.L17:
 313:src/stm32f1xx_hal_adc_ex.c ****   }
 314:src/stm32f1xx_hal_adc_ex.c ****   
 315:src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 316:src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 317:src/stm32f1xx_hal_adc_ex.c **** }
 366              		.loc 1 317 0
 367 0174 10BD     		pop	{r4, pc}	@
 368              	.LVL21:
 369              	.L29:
 370 0176 00BF     		.align	2
 371              	.L28:
 372 0178 00280140 		.word	1073817600
 373              		.cfi_endproc
 374              	.LFE66:
 375              		.size	HAL_ADCEx_InjectedStart, .-HAL_ADCEx_InjectedStart
 376              		.align	1
 377              		.global	HAL_ADCEx_InjectedStop
 378              		.syntax unified
 379              		.thumb
 380              		.thumb_func
 381              		.fpu softvfp
 382              		.type	HAL_ADCEx_InjectedStop, %function
 383              	HAL_ADCEx_InjectedStop:
 384              	.LFB67:
 318:src/stm32f1xx_hal_adc_ex.c **** 
 319:src/stm32f1xx_hal_adc_ex.c **** /**
 320:src/stm32f1xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels. Disable ADC peripheral if
 321:src/stm32f1xx_hal_adc_ex.c ****   *         no regular conversion is on going.
 322:src/stm32f1xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on 
 323:src/stm32f1xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 324:src/stm32f1xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 325:src/stm32f1xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 326:src/stm32f1xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 327:src/stm32f1xx_hal_adc_ex.c ****   * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
 328:src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 329:src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 330:src/stm32f1xx_hal_adc_ex.c ****   */
 331:src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
 332:src/stm32f1xx_hal_adc_ex.c **** {
 385              		.loc 1 332 0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 0
 388              		@ frame_needed = 0, uses_anonymous_args = 0
 389              	.LVL22:
 333:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 334:src/stm32f1xx_hal_adc_ex.c ****   
ARM GAS  /tmp/ccHubou1.s 			page 14


 335:src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 336:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 337:src/stm32f1xx_hal_adc_ex.c **** 
 338:src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 339:src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 390              		.loc 1 339 0
 391 017c 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2	@ hadc_6(D)->Lock, hadc_6(D)->Lock
 332:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 392              		.loc 1 332 0
 393 0180 10B5     		push	{r4, lr}	@
 394              	.LCFI4:
 395              		.cfi_def_cfa_offset 8
 396              		.cfi_offset 4, -8
 397              		.cfi_offset 14, -4
 398              		.loc 1 339 0
 399 0182 012B     		cmp	r3, #1	@ hadc_6(D)->Lock,
 332:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 400              		.loc 1 332 0
 401 0184 0446     		mov	r4, r0	@ hadc, hadc
 402              		.loc 1 339 0
 403 0186 1ED0     		beq	.L34	@,
 404              		.loc 1 339 0 is_stmt 0 discriminator 2
 405 0188 0123     		movs	r3, #1	@ tmp124,
 406 018a 80F82430 		strb	r3, [r0, #36]	@ tmp124, hadc_6(D)->Lock
 340:src/stm32f1xx_hal_adc_ex.c ****     
 341:src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion and disable ADC peripheral                     */
 342:src/stm32f1xx_hal_adc_ex.c ****   /* Conditioned to:                                                          */
 343:src/stm32f1xx_hal_adc_ex.c ****   /* - No conversion on the other group (regular group) is intended to        */
 344:src/stm32f1xx_hal_adc_ex.c ****   /*   continue (injected and regular groups stop conversion and ADC disable  */
 345:src/stm32f1xx_hal_adc_ex.c ****   /*   are common)                                                            */
 346:src/stm32f1xx_hal_adc_ex.c ****   /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
 347:src/stm32f1xx_hal_adc_ex.c ****   if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 407              		.loc 1 347 0 is_stmt 1 discriminator 2
 408 018e 836A     		ldr	r3, [r0, #40]	@ _9, hadc_6(D)->State
 409 0190 DA05     		lsls	r2, r3, #23	@, _9,
 410 0192 12D4     		bmi	.L32	@,
 348:src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 411              		.loc 1 348 0 discriminator 1
 412 0194 0368     		ldr	r3, [r0]	@ _11, hadc_6(D)->Instance
 413 0196 5B68     		ldr	r3, [r3, #4]	@ _12, _11->CR1
 347:src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 414              		.loc 1 347 0 discriminator 1
 415 0198 5B05     		lsls	r3, r3, #21	@, _12,
 416 019a 0ED4     		bmi	.L32	@,
 349:src/stm32f1xx_hal_adc_ex.c ****   {
 350:src/stm32f1xx_hal_adc_ex.c ****     /* Stop potential conversion on going, on regular and injected groups */
 351:src/stm32f1xx_hal_adc_ex.c ****     /* Disable ADC peripheral */
 352:src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 417              		.loc 1 352 0
 418 019c FFF7FEFF 		bl	ADC_ConversionStop_Disable	@
 419              	.LVL23:
 353:src/stm32f1xx_hal_adc_ex.c ****     
 354:src/stm32f1xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
 355:src/stm32f1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 420              		.loc 1 355 0
 421 01a0 38B9     		cbnz	r0, .L33	@ <retval>,
 356:src/stm32f1xx_hal_adc_ex.c ****     {
ARM GAS  /tmp/ccHubou1.s 			page 15


 357:src/stm32f1xx_hal_adc_ex.c ****       /* Set ADC state */
 358:src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 422              		.loc 1 358 0
 423 01a2 A36A     		ldr	r3, [r4, #40]	@ _16, hadc_6(D)->State
 424 01a4 23F48853 		bic	r3, r3, #4352	@ tmp129, _16,
 425 01a8 23F00103 		bic	r3, r3, #1	@ tmp129, tmp129,
 426 01ac 43F00103 		orr	r3, r3, #1	@ _18, tmp129,
 427 01b0 A362     		str	r3, [r4, #40]	@ _18, hadc_6(D)->State
 428              	.LVL24:
 429              	.L33:
 359:src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 360:src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 361:src/stm32f1xx_hal_adc_ex.c ****     }
 362:src/stm32f1xx_hal_adc_ex.c ****   }
 363:src/stm32f1xx_hal_adc_ex.c ****   else
 364:src/stm32f1xx_hal_adc_ex.c ****   {
 365:src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 366:src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 367:src/stm32f1xx_hal_adc_ex.c ****       
 368:src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 369:src/stm32f1xx_hal_adc_ex.c ****   }
 370:src/stm32f1xx_hal_adc_ex.c ****   
 371:src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 372:src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 430              		.loc 1 372 0
 431 01b2 0023     		movs	r3, #0	@ tmp131,
 432 01b4 84F82430 		strb	r3, [r4, #36]	@ tmp131, hadc_6(D)->Lock
 373:src/stm32f1xx_hal_adc_ex.c ****   
 374:src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 375:src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 433              		.loc 1 375 0
 434 01b8 10BD     		pop	{r4, pc}	@
 435              	.LVL25:
 436              	.L32:
 366:src/stm32f1xx_hal_adc_ex.c ****       
 437              		.loc 1 366 0
 438 01ba A36A     		ldr	r3, [r4, #40]	@ _20, hadc_6(D)->State
 368:src/stm32f1xx_hal_adc_ex.c ****   }
 439              		.loc 1 368 0
 440 01bc 0120     		movs	r0, #1	@ <retval>,
 441              	.LVL26:
 366:src/stm32f1xx_hal_adc_ex.c ****       
 442              		.loc 1 366 0
 443 01be 43F02003 		orr	r3, r3, #32	@ _21, _20,
 444 01c2 A362     		str	r3, [r4, #40]	@ _21, hadc_6(D)->State
 445              	.LVL27:
 446 01c4 F5E7     		b	.L33	@
 447              	.LVL28:
 448              	.L34:
 339:src/stm32f1xx_hal_adc_ex.c ****     
 449              		.loc 1 339 0
 450 01c6 0220     		movs	r0, #2	@ <retval>,
 451              	.LVL29:
 376:src/stm32f1xx_hal_adc_ex.c **** }
 452              		.loc 1 376 0
 453 01c8 10BD     		pop	{r4, pc}	@
 454              		.cfi_endproc
ARM GAS  /tmp/ccHubou1.s 			page 16


 455              	.LFE67:
 456              		.size	HAL_ADCEx_InjectedStop, .-HAL_ADCEx_InjectedStop
 457              		.align	1
 458              		.global	HAL_ADCEx_InjectedPollForConversion
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 462              		.fpu softvfp
 463              		.type	HAL_ADCEx_InjectedPollForConversion, %function
 464              	HAL_ADCEx_InjectedPollForConversion:
 465              	.LFB68:
 377:src/stm32f1xx_hal_adc_ex.c **** 
 378:src/stm32f1xx_hal_adc_ex.c **** /**
 379:src/stm32f1xx_hal_adc_ex.c ****   * @brief  Wait for injected group conversion to be completed.
 380:src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 381:src/stm32f1xx_hal_adc_ex.c ****   * @param  Timeout: Timeout value in millisecond.
 382:src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
 383:src/stm32f1xx_hal_adc_ex.c ****   */
 384:src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 385:src/stm32f1xx_hal_adc_ex.c **** {
 466              		.loc 1 385 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 8
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470              	.LVL30:
 386:src/stm32f1xx_hal_adc_ex.c ****   uint32_t tickstart;
 387:src/stm32f1xx_hal_adc_ex.c **** 
 388:src/stm32f1xx_hal_adc_ex.c ****   /* Variables for polling in case of scan mode enabled and polling for each  */
 389:src/stm32f1xx_hal_adc_ex.c ****   /* conversion.                                                              */
 390:src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 471              		.loc 1 390 0
 472 01ca 0023     		movs	r3, #0	@ tmp169,
 385:src/stm32f1xx_hal_adc_ex.c ****   uint32_t tickstart;
 473              		.loc 1 385 0
 474 01cc F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}	@
 475              	.LCFI5:
 476              		.cfi_def_cfa_offset 32
 477              		.cfi_offset 4, -20
 478              		.cfi_offset 5, -16
 479              		.cfi_offset 6, -12
 480              		.cfi_offset 7, -8
 481              		.cfi_offset 14, -4
 385:src/stm32f1xx_hal_adc_ex.c ****   uint32_t tickstart;
 482              		.loc 1 385 0
 483 01ce 0446     		mov	r4, r0	@ hadc, hadc
 484              		.loc 1 390 0
 485 01d0 0193     		str	r3, [sp, #4]	@ tmp169, Conversion_Timeout_CPU_cycles
 486              	.LVL31:
 385:src/stm32f1xx_hal_adc_ex.c ****   uint32_t tickstart;
 487              		.loc 1 385 0
 488 01d2 0D46     		mov	r5, r1	@ Timeout, Timeout
 391:src/stm32f1xx_hal_adc_ex.c ****   uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 392:src/stm32f1xx_hal_adc_ex.c ****   
 393:src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 394:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 395:src/stm32f1xx_hal_adc_ex.c **** 
 396:src/stm32f1xx_hal_adc_ex.c ****   /* Get timeout */
ARM GAS  /tmp/ccHubou1.s 			page 17


 397:src/stm32f1xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();  
 489              		.loc 1 397 0
 490 01d4 FFF7FEFF 		bl	HAL_GetTick	@
 491              	.LVL32:
 398:src/stm32f1xx_hal_adc_ex.c ****      
 399:src/stm32f1xx_hal_adc_ex.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
 400:src/stm32f1xx_hal_adc_ex.c ****   /* conversion.                                                              */
 401:src/stm32f1xx_hal_adc_ex.c ****   /* For injected group, flag JEOC is set only at the end of the sequence,    */
 402:src/stm32f1xx_hal_adc_ex.c ****   /* not for each conversion within the sequence.                             */
 403:src/stm32f1xx_hal_adc_ex.c ****   /*  - If single conversion for injected group (scan mode disabled or        */
 404:src/stm32f1xx_hal_adc_ex.c ****   /*    InjectedNbrOfConversion ==1), flag JEOC is used to determine the      */
 405:src/stm32f1xx_hal_adc_ex.c ****   /*    conversion completion.                                                */
 406:src/stm32f1xx_hal_adc_ex.c ****   /*  - If sequence conversion for injected group (scan mode enabled and      */
 407:src/stm32f1xx_hal_adc_ex.c ****   /*    InjectedNbrOfConversion >=2), flag JEOC is set only at the end of the */
 408:src/stm32f1xx_hal_adc_ex.c ****   /*    sequence.                                                             */
 409:src/stm32f1xx_hal_adc_ex.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
 410:src/stm32f1xx_hal_adc_ex.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
 411:src/stm32f1xx_hal_adc_ex.c ****   /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
 412:src/stm32f1xx_hal_adc_ex.c ****   /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
 413:src/stm32f1xx_hal_adc_ex.c ****   /*    As flag JEOC is not set after each conversion, no timeout status can  */
 414:src/stm32f1xx_hal_adc_ex.c ****   /*    be set.                                                               */
 415:src/stm32f1xx_hal_adc_ex.c ****   if ((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)
 492              		.loc 1 415 0
 493 01d8 2368     		ldr	r3, [r4]	@ _17, hadc_16(D)->Instance
 397:src/stm32f1xx_hal_adc_ex.c ****      
 494              		.loc 1 397 0
 495 01da 0746     		mov	r7, r0	@ tickstart,
 496              	.LVL33:
 497              		.loc 1 415 0
 498 01dc 9B6B     		ldr	r3, [r3, #56]	@ _18, _17->JSQR
 499 01de 13F4401F 		tst	r3, #3145728	@ _18,
 500 01e2 3CD0     		beq	.L36	@,
 416:src/stm32f1xx_hal_adc_ex.c ****   {
 417:src/stm32f1xx_hal_adc_ex.c ****     /* Wait until End of Conversion flag is raised */
 418:src/stm32f1xx_hal_adc_ex.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 419:src/stm32f1xx_hal_adc_ex.c ****     {
 420:src/stm32f1xx_hal_adc_ex.c ****       /* Check if timeout is disabled (set to infinite wait) */
 421:src/stm32f1xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
 422:src/stm32f1xx_hal_adc_ex.c ****       {
 423:src/stm32f1xx_hal_adc_ex.c ****         if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 424:src/stm32f1xx_hal_adc_ex.c ****         {
 425:src/stm32f1xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
 426:src/stm32f1xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 427:src/stm32f1xx_hal_adc_ex.c ****           
 428:src/stm32f1xx_hal_adc_ex.c ****           /* Process unlocked */
 429:src/stm32f1xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
 430:src/stm32f1xx_hal_adc_ex.c ****           
 431:src/stm32f1xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
 432:src/stm32f1xx_hal_adc_ex.c ****         }
 433:src/stm32f1xx_hal_adc_ex.c ****       }
 434:src/stm32f1xx_hal_adc_ex.c ****     }
 435:src/stm32f1xx_hal_adc_ex.c ****   }
 436:src/stm32f1xx_hal_adc_ex.c ****   else
 437:src/stm32f1xx_hal_adc_ex.c ****   {
 438:src/stm32f1xx_hal_adc_ex.c ****     /* Replace polling by wait for maximum conversion time */
 439:src/stm32f1xx_hal_adc_ex.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
 440:src/stm32f1xx_hal_adc_ex.c ****     /*    and ADC maximum conversion cycles on all channels.                  */
ARM GAS  /tmp/ccHubou1.s 			page 18


 441:src/stm32f1xx_hal_adc_ex.c ****     /*  - Wait for the expected ADC clock cycles delay                        */
 442:src/stm32f1xx_hal_adc_ex.c ****     Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 443:src/stm32f1xx_hal_adc_ex.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 501              		.loc 1 443 0
 502 01e4 404B     		ldr	r3, .L73	@ tmp177,
 503 01e6 0220     		movs	r0, #2	@,
 504              	.LVL34:
 505 01e8 1E68     		ldr	r6, [r3]	@ SystemCoreClock.5_31, SystemCoreClock
 506 01ea FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq	@
 507              	.LVL35:
 444:src/stm32f1xx_hal_adc_ex.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 508              		.loc 1 444 0
 509 01ee 2368     		ldr	r3, [r4]	@ _35, hadc_16(D)->Instance
 510 01f0 3E4A     		ldr	r2, .L73+4	@ tmp178,
 511 01f2 1969     		ldr	r1, [r3, #16]	@ _36, _35->SMPR2
 443:src/stm32f1xx_hal_adc_ex.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 512              		.loc 1 443 0
 513 01f4 B6FBF0F0 		udiv	r0, r6, r0	@ _34, SystemCoreClock.5_31,
 514              		.loc 1 444 0
 515 01f8 1142     		tst	r1, r2	@ _36, tmp178
 516 01fa 3D4A     		ldr	r2, .L73+8	@ tmp202,
 517 01fc 4ED1     		bne	.L45	@,
 518              		.loc 1 444 0 is_stmt 0 discriminator 1
 519 01fe DE68     		ldr	r6, [r3, #12]	@ _38, _35->SMPR1
 520 0200 3C49     		ldr	r1, .L73+12	@ tmp180,
 521 0202 0E42     		tst	r6, r1	@ _38, tmp180
 522 0204 4AD1     		bne	.L45	@,
 523              		.loc 1 444 0 discriminator 3
 524 0206 1969     		ldr	r1, [r3, #16]	@ _40,
 525 0208 1142     		tst	r1, r2	@ _40, tmp202
 526 020a 58D1     		bne	.L56	@,
 527              		.loc 1 444 0 discriminator 5
 528 020c DA68     		ldr	r2, [r3, #12]	@ _42, _35->SMPR1
 529 020e 3A4B     		ldr	r3, .L73+16	@ tmp184,
 530 0210 1A42     		tst	r2, r3	@ _42, tmp184
 531 0212 14BF     		ite	ne
 532 0214 2923     		movne	r3, #41	@ iftmp.6_2,
 533 0216 1423     		moveq	r3, #20	@ iftmp.6_2,
 534              	.L46:
 442:src/stm32f1xx_hal_adc_ex.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 535              		.loc 1 442 0 is_stmt 1
 536 0218 00FB03F6 		mul	r6, r0, r3	@ Conversion_Timeout_CPU_cycles_max, _34, iftmp.6_2
 537              	.LVL36:
 538              	.L48:
 445:src/stm32f1xx_hal_adc_ex.c ****     
 446:src/stm32f1xx_hal_adc_ex.c ****     while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 539              		.loc 1 446 0
 540 021c 019B     		ldr	r3, [sp, #4]	@ Conversion_Timeout_CPU_cycles.11_53, Conversion_Timeout_CPU_cycles
 541 021e 9E42     		cmp	r6, r3	@ Conversion_Timeout_CPU_cycles_max, Conversion_Timeout_CPU_cycles.11_53
 542 0220 21D9     		bls	.L53	@,
 447:src/stm32f1xx_hal_adc_ex.c ****     {
 448:src/stm32f1xx_hal_adc_ex.c ****       /* Check if timeout is disabled (set to infinite wait) */
 449:src/stm32f1xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
 543              		.loc 1 449 0
 544 0222 691C     		adds	r1, r5, #1	@, Timeout,
 545 0224 05D0     		beq	.L49	@,
 450:src/stm32f1xx_hal_adc_ex.c ****       {
ARM GAS  /tmp/ccHubou1.s 			page 19


 451:src/stm32f1xx_hal_adc_ex.c ****         if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 546              		.loc 1 451 0
 547 0226 5DB1     		cbz	r5, .L51	@ Timeout,
 548              		.loc 1 451 0 is_stmt 0 discriminator 1
 549 0228 FFF7FEFF 		bl	HAL_GetTick	@
 550              	.LVL37:
 551 022c C01B     		subs	r0, r0, r7	@ tmp196,, tickstart
 552 022e 8542     		cmp	r5, r0	@ Timeout, tmp196
 553 0230 06D3     		bcc	.L51	@,
 554              	.L49:
 452:src/stm32f1xx_hal_adc_ex.c ****         {
 453:src/stm32f1xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
 454:src/stm32f1xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 455:src/stm32f1xx_hal_adc_ex.c **** 
 456:src/stm32f1xx_hal_adc_ex.c ****           /* Process unlocked */
 457:src/stm32f1xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
 458:src/stm32f1xx_hal_adc_ex.c ****           
 459:src/stm32f1xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
 460:src/stm32f1xx_hal_adc_ex.c ****         }
 461:src/stm32f1xx_hal_adc_ex.c ****       }
 462:src/stm32f1xx_hal_adc_ex.c ****       Conversion_Timeout_CPU_cycles ++;
 555              		.loc 1 462 0 is_stmt 1
 556 0232 019B     		ldr	r3, [sp, #4]	@ Conversion_Timeout_CPU_cycles.9_54, Conversion_Timeout_CPU_cycles
 557 0234 0133     		adds	r3, r3, #1	@ Conversion_Timeout_CPU_cycles.10_55, Conversion_Timeout_CPU_cycles.9_54,
 558 0236 0193     		str	r3, [sp, #4]	@ Conversion_Timeout_CPU_cycles.10_55, Conversion_Timeout_CPU_cycles
 559 0238 F0E7     		b	.L48	@
 560              	.LVL38:
 561              	.L42:
 421:src/stm32f1xx_hal_adc_ex.c ****       {
 562              		.loc 1 421 0
 563 023a 6E1C     		adds	r6, r5, #1	@, Timeout,
 564 023c 10D0     		beq	.L38	@,
 423:src/stm32f1xx_hal_adc_ex.c ****         {
 565              		.loc 1 423 0
 566 023e 4DB9     		cbnz	r5, .L39	@ Timeout,
 567              	.LVL39:
 568              	.L51:
 454:src/stm32f1xx_hal_adc_ex.c **** 
 569              		.loc 1 454 0
 570 0240 A36A     		ldr	r3, [r4, #40]	@ _60,
 459:src/stm32f1xx_hal_adc_ex.c ****         }
 571              		.loc 1 459 0
 572 0242 0320     		movs	r0, #3	@ <retval>,
 454:src/stm32f1xx_hal_adc_ex.c **** 
 573              		.loc 1 454 0
 574 0244 43F00403 		orr	r3, r3, #4	@ _61, _60,
 575 0248 A362     		str	r3, [r4, #40]	@ _61,
 457:src/stm32f1xx_hal_adc_ex.c ****           
 576              		.loc 1 457 0
 577 024a 0023     		movs	r3, #0	@ tmp194,
 578 024c 84F82430 		strb	r3, [r4, #36]	@ tmp194, hadc_16(D)->Lock
 579              	.L40:
 463:src/stm32f1xx_hal_adc_ex.c ****     }
 464:src/stm32f1xx_hal_adc_ex.c ****   }
 465:src/stm32f1xx_hal_adc_ex.c **** 
 466:src/stm32f1xx_hal_adc_ex.c ****   /* Clear injected group conversion flag */
 467:src/stm32f1xx_hal_adc_ex.c ****   /* Note: On STM32F1 ADC, clear regular conversion flag raised               */
ARM GAS  /tmp/ccHubou1.s 			page 20


 468:src/stm32f1xx_hal_adc_ex.c ****   /* simultaneously.                                                          */
 469:src/stm32f1xx_hal_adc_ex.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC | ADC_FLAG_EOC);
 470:src/stm32f1xx_hal_adc_ex.c ****   
 471:src/stm32f1xx_hal_adc_ex.c ****   /* Update ADC state machine */
 472:src/stm32f1xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 473:src/stm32f1xx_hal_adc_ex.c ****   
 474:src/stm32f1xx_hal_adc_ex.c ****   /* Determine whether any further conversion upcoming on group injected      */
 475:src/stm32f1xx_hal_adc_ex.c ****   /* by external trigger or by automatic injected conversion                  */
 476:src/stm32f1xx_hal_adc_ex.c ****   /* from group regular.                                                      */
 477:src/stm32f1xx_hal_adc_ex.c ****   if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 478:src/stm32f1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 479:src/stm32f1xx_hal_adc_ex.c ****      (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 480:src/stm32f1xx_hal_adc_ex.c ****       (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 481:src/stm32f1xx_hal_adc_ex.c ****   {
 482:src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state */
 483:src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 484:src/stm32f1xx_hal_adc_ex.c ****     
 485:src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 486:src/stm32f1xx_hal_adc_ex.c ****     {
 487:src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 488:src/stm32f1xx_hal_adc_ex.c ****     }
 489:src/stm32f1xx_hal_adc_ex.c ****   }
 490:src/stm32f1xx_hal_adc_ex.c ****   
 491:src/stm32f1xx_hal_adc_ex.c ****   /* Return ADC state */
 492:src/stm32f1xx_hal_adc_ex.c ****   return HAL_OK;
 493:src/stm32f1xx_hal_adc_ex.c **** }
 580              		.loc 1 493 0
 581 0250 03B0     		add	sp, sp, #12	@,,
 582              	.LCFI6:
 583              		.cfi_remember_state
 584              		.cfi_def_cfa_offset 20
 585              		@ sp needed	@
 586 0252 F0BD     		pop	{r4, r5, r6, r7, pc}	@
 587              	.LVL40:
 588              	.L39:
 589              	.LCFI7:
 590              		.cfi_restore_state
 423:src/stm32f1xx_hal_adc_ex.c ****         {
 591              		.loc 1 423 0 discriminator 1
 592 0254 FFF7FEFF 		bl	HAL_GetTick	@
 593              	.LVL41:
 594 0258 C01B     		subs	r0, r0, r7	@ tmp173,, tickstart
 595 025a 8542     		cmp	r5, r0	@ Timeout, tmp173
 596 025c F0D3     		bcc	.L51	@,
 597              	.L36:
 418:src/stm32f1xx_hal_adc_ex.c ****     {
 598              		.loc 1 418 0
 599 025e 2268     		ldr	r2, [r4]	@ _20, hadc_16(D)->Instance
 600              	.L38:
 601 0260 1368     		ldr	r3, [r2]	@ _21, _20->SR
 602 0262 5807     		lsls	r0, r3, #29	@, _21,
 603 0264 E9D5     		bpl	.L42	@,
 604              	.LVL42:
 605              	.L53:
 469:src/stm32f1xx_hal_adc_ex.c ****   
 606              		.loc 1 469 0
 607 0266 6FF00E02 		mvn	r2, #14	@ tmp175,
ARM GAS  /tmp/ccHubou1.s 			page 21


 608 026a 2368     		ldr	r3, [r4]	@ _64, hadc_16(D)->Instance
 609 026c 1A60     		str	r2, [r3]	@ tmp175, _64->SR
 472:src/stm32f1xx_hal_adc_ex.c ****   
 610              		.loc 1 472 0
 611 026e A26A     		ldr	r2, [r4, #40]	@ _66, hadc_16(D)->State
 612 0270 42F40052 		orr	r2, r2, #8192	@ _67, _66,
 613 0274 A262     		str	r2, [r4, #40]	@ _67, hadc_16(D)->State
 477:src/stm32f1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 614              		.loc 1 477 0
 615 0276 9A68     		ldr	r2, [r3, #8]	@ _69, _64->CR2
 616 0278 02F4E042 		and	r2, r2, #28672	@ tmp176, _69,
 617 027c B2F5E04F 		cmp	r2, #28672	@ tmp176,
 618 0280 23D1     		bne	.L72	@,
 619              	.L43:
 483:src/stm32f1xx_hal_adc_ex.c ****     
 620              		.loc 1 483 0
 621 0282 A36A     		ldr	r3, [r4, #40]	@ _76, hadc_16(D)->State
 622 0284 23F48053 		bic	r3, r3, #4096	@ _77, _76,
 623 0288 A362     		str	r3, [r4, #40]	@ _77, hadc_16(D)->State
 485:src/stm32f1xx_hal_adc_ex.c ****     {
 624              		.loc 1 485 0
 625 028a A06A     		ldr	r0, [r4, #40]	@ _79, hadc_16(D)->State
 626 028c 10F48070 		ands	r0, r0, #256	@ tmp200, _79,
 627 0290 1ED1     		bne	.L55	@,
 487:src/stm32f1xx_hal_adc_ex.c ****     }
 628              		.loc 1 487 0
 629 0292 A36A     		ldr	r3, [r4, #40]	@ _81, hadc_16(D)->State
 630 0294 43F00103 		orr	r3, r3, #1	@ _82, _81,
 631 0298 A362     		str	r3, [r4, #40]	@ _82, hadc_16(D)->State
 632 029a D9E7     		b	.L40	@
 633              	.LVL43:
 634              	.L45:
 444:src/stm32f1xx_hal_adc_ex.c ****     
 635              		.loc 1 444 0 discriminator 4
 636 029c 1969     		ldr	r1, [r3, #16]	@ _44,
 637 029e 1142     		tst	r1, r2	@ _44, tmp202
 638 02a0 03D1     		bne	.L47	@,
 444:src/stm32f1xx_hal_adc_ex.c ****     
 639              		.loc 1 444 0 is_stmt 0 discriminator 11
 640 02a2 D968     		ldr	r1, [r3, #12]	@ _46, _35->SMPR1
 641 02a4 144A     		ldr	r2, .L73+16	@ tmp188,
 642 02a6 1142     		tst	r1, r2	@ _46, tmp188
 643 02a8 0BD0     		beq	.L58	@,
 644              	.L47:
 444:src/stm32f1xx_hal_adc_ex.c ****     
 645              		.loc 1 444 0 discriminator 14
 646 02aa 1969     		ldr	r1, [r3, #16]	@ _48, _35->SMPR2
 647 02ac 134A     		ldr	r2, .L73+20	@ tmp190,
 648 02ae 1142     		tst	r1, r2	@ _48, tmp190
 649 02b0 09D1     		bne	.L59	@,
 444:src/stm32f1xx_hal_adc_ex.c ****     
 650              		.loc 1 444 0 discriminator 15
 651 02b2 DB68     		ldr	r3, [r3, #12]	@ _50, _35->SMPR1
 652 02b4 1342     		tst	r3, r2	@ _50, tmp190
 653 02b6 14BF     		ite	ne
 654 02b8 FC23     		movne	r3, #252	@ iftmp.6_2,
 655 02ba 5423     		moveq	r3, #84	@ iftmp.6_2,
ARM GAS  /tmp/ccHubou1.s 			page 22


 656 02bc ACE7     		b	.L46	@
 657              	.L56:
 444:src/stm32f1xx_hal_adc_ex.c ****     
 658              		.loc 1 444 0
 659 02be 2923     		movs	r3, #41	@ iftmp.6_2,
 660 02c0 AAE7     		b	.L46	@
 661              	.L58:
 662 02c2 5423     		movs	r3, #84	@ iftmp.6_2,
 663 02c4 A8E7     		b	.L46	@
 664              	.L59:
 665 02c6 FC23     		movs	r3, #252	@ iftmp.6_2,
 666 02c8 A6E7     		b	.L46	@
 667              	.LVL44:
 668              	.L72:
 478:src/stm32f1xx_hal_adc_ex.c ****      (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 669              		.loc 1 478 0 is_stmt 1 discriminator 1
 670 02ca 5A68     		ldr	r2, [r3, #4]	@ _71, _64->CR1
 477:src/stm32f1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 671              		.loc 1 477 0 discriminator 1
 672 02cc 5205     		lsls	r2, r2, #21	@, _71,
 673 02ce 01D5     		bpl	.L54	@,
 674              	.L55:
 492:src/stm32f1xx_hal_adc_ex.c **** }
 675              		.loc 1 492 0
 676 02d0 0020     		movs	r0, #0	@ <retval>,
 677 02d2 BDE7     		b	.L40	@
 678              	.L54:
 479:src/stm32f1xx_hal_adc_ex.c ****       (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 679              		.loc 1 479 0
 680 02d4 9B68     		ldr	r3, [r3, #8]	@ _73, _64->CR2
 681 02d6 03F46023 		and	r3, r3, #917504	@ tmp198, _73,
 478:src/stm32f1xx_hal_adc_ex.c ****      (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 682              		.loc 1 478 0
 683 02da B3F5602F 		cmp	r3, #917504	@ tmp198,
 684 02de F7D1     		bne	.L55	@,
 479:src/stm32f1xx_hal_adc_ex.c ****       (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 685              		.loc 1 479 0
 686 02e0 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2	@ hadc_16(D)->Init.ContinuousConvMode, hadc_16(D)->Init.Cont
 687 02e2 002B     		cmp	r3, #0	@ hadc_16(D)->Init.ContinuousConvMode
 688 02e4 CDD0     		beq	.L43	@
 689 02e6 F3E7     		b	.L55	@
 690              	.L74:
 691              		.align	2
 692              	.L73:
 693 02e8 00000000 		.word	SystemCoreClock
 694 02ec 24499224 		.word	613566756
 695 02f0 92244912 		.word	306783378
 696 02f4 24499200 		.word	9586980
 697 02f8 92244900 		.word	4793490
 698 02fc 49922400 		.word	2396745
 699              		.cfi_endproc
 700              	.LFE68:
 701              		.size	HAL_ADCEx_InjectedPollForConversion, .-HAL_ADCEx_InjectedPollForConversion
 702              		.align	1
 703              		.global	HAL_ADCEx_InjectedStart_IT
 704              		.syntax unified
 705              		.thumb
ARM GAS  /tmp/ccHubou1.s 			page 23


 706              		.thumb_func
 707              		.fpu softvfp
 708              		.type	HAL_ADCEx_InjectedStart_IT, %function
 709              	HAL_ADCEx_InjectedStart_IT:
 710              	.LFB69:
 494:src/stm32f1xx_hal_adc_ex.c **** 
 495:src/stm32f1xx_hal_adc_ex.c **** /**
 496:src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of injected group with interruption.
 497:src/stm32f1xx_hal_adc_ex.c ****   *          - JEOC (end of conversion of injected group)
 498:src/stm32f1xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
 499:src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 500:src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status.
 501:src/stm32f1xx_hal_adc_ex.c ****   */
 502:src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
 503:src/stm32f1xx_hal_adc_ex.c **** {
 711              		.loc 1 503 0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 0
 714              		@ frame_needed = 0, uses_anonymous_args = 0
 715              	.LVL45:
 504:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 505:src/stm32f1xx_hal_adc_ex.c ****   
 506:src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 507:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 508:src/stm32f1xx_hal_adc_ex.c ****   
 509:src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 510:src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 716              		.loc 1 510 0
 717 0300 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2	@ hadc_6(D)->Lock, hadc_6(D)->Lock
 503:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 718              		.loc 1 503 0
 719 0304 10B5     		push	{r4, lr}	@
 720              	.LCFI8:
 721              		.cfi_def_cfa_offset 8
 722              		.cfi_offset 4, -8
 723              		.cfi_offset 14, -4
 724              		.loc 1 510 0
 725 0306 012B     		cmp	r3, #1	@ hadc_6(D)->Lock,
 503:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 726              		.loc 1 503 0
 727 0308 0446     		mov	r4, r0	@ hadc, hadc
 728              		.loc 1 510 0
 729 030a 4ED0     		beq	.L84	@,
 730              		.loc 1 510 0 is_stmt 0 discriminator 2
 731 030c 0123     		movs	r3, #1	@ tmp138,
 732 030e 80F82430 		strb	r3, [r0, #36]	@ tmp138, hadc_6(D)->Lock
 511:src/stm32f1xx_hal_adc_ex.c ****     
 512:src/stm32f1xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
 513:src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 733              		.loc 1 513 0 is_stmt 1 discriminator 2
 734 0312 FFF7FEFF 		bl	ADC_Enable	@
 735              	.LVL46:
 514:src/stm32f1xx_hal_adc_ex.c ****   
 515:src/stm32f1xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
 516:src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 736              		.loc 1 516 0 discriminator 2
 737 0316 0028     		cmp	r0, #0	@ <retval>
ARM GAS  /tmp/ccHubou1.s 			page 24


 738 0318 43D1     		bne	.L77	@
 517:src/stm32f1xx_hal_adc_ex.c ****   {
 518:src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
 519:src/stm32f1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to injected group conversion results    */
 520:src/stm32f1xx_hal_adc_ex.c ****     /* - Set state bitfield related to injected operation                     */
 521:src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 739              		.loc 1 521 0
 740 031a A36A     		ldr	r3, [r4, #40]	@ _11, hadc_6(D)->State
 522:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 523:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_INJ_BUSY);
 524:src/stm32f1xx_hal_adc_ex.c ****     
 525:src/stm32f1xx_hal_adc_ex.c ****     /* Case of independent mode or multimode (for devices with several ADCs): */
 526:src/stm32f1xx_hal_adc_ex.c ****     /* Set multimode state.                                                   */
 527:src/stm32f1xx_hal_adc_ex.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 741              		.loc 1 527 0
 742 031c 244A     		ldr	r2, .L87	@ tmp143,
 521:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 743              		.loc 1 521 0
 744 031e 23F44053 		bic	r3, r3, #12288	@ tmp141, _11,
 745 0322 23F00103 		bic	r3, r3, #1	@ tmp141, tmp141,
 746 0326 43F48053 		orr	r3, r3, #4096	@ _13, tmp141,
 747 032a A362     		str	r3, [r4, #40]	@ _13, hadc_6(D)->State
 748              		.loc 1 527 0
 749 032c 2368     		ldr	r3, [r4]	@ _15, hadc_6(D)->Instance
 750 032e 9342     		cmp	r3, r2	@ _15, tmp143
 751 0330 05D1     		bne	.L78	@,
 752              		.loc 1 527 0 is_stmt 0 discriminator 1
 753 0332 A2F58062 		sub	r2, r2, #1024	@ tmp144, tmp144,
 754 0336 5268     		ldr	r2, [r2, #4]	@ _16, MEM[(struct ADC_TypeDef *)1073816576B].CR1
 755 0338 12F4702F 		tst	r2, #983040	@ _16,
 756 033c 29D1     		bne	.L79	@,
 757              	.L78:
 528:src/stm32f1xx_hal_adc_ex.c ****     {
 529:src/stm32f1xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 758              		.loc 1 529 0 is_stmt 1
 759 033e A26A     		ldr	r2, [r4, #40]	@ _21,
 760 0340 22F48012 		bic	r2, r2, #1048576	@ _22, _21,
 761              	.L85:
 530:src/stm32f1xx_hal_adc_ex.c ****     }
 531:src/stm32f1xx_hal_adc_ex.c ****     else
 532:src/stm32f1xx_hal_adc_ex.c ****     {
 533:src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 762              		.loc 1 533 0
 763 0344 A262     		str	r2, [r4, #40]	@ _19,
 534:src/stm32f1xx_hal_adc_ex.c ****     }
 535:src/stm32f1xx_hal_adc_ex.c ****     
 536:src/stm32f1xx_hal_adc_ex.c ****     /* Check if a regular conversion is ongoing */
 537:src/stm32f1xx_hal_adc_ex.c ****     /* Note: On this device, there is no ADC error code fields related to     */
 538:src/stm32f1xx_hal_adc_ex.c ****     /*       conversions on group injected only. In case of conversion on     */
 539:src/stm32f1xx_hal_adc_ex.c ****     /*       going on group regular, no error code is reset.                  */
 540:src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 764              		.loc 1 540 0
 765 0346 A26A     		ldr	r2, [r4, #40]	@ _24, hadc_6(D)->State
 766 0348 12F48072 		ands	r2, r2, #256	@ tmp146, _24,
 541:src/stm32f1xx_hal_adc_ex.c ****     {
 542:src/stm32f1xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
 543:src/stm32f1xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
ARM GAS  /tmp/ccHubou1.s 			page 25


 767              		.loc 1 543 0
 768 034c 08BF     		it	eq
 769 034e E262     		streq	r2, [r4, #44]	@ tmp146, hadc_6(D)->ErrorCode
 544:src/stm32f1xx_hal_adc_ex.c ****     }
 545:src/stm32f1xx_hal_adc_ex.c ****     
 546:src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 547:src/stm32f1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 548:src/stm32f1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 549:src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 770              		.loc 1 549 0
 771 0350 0022     		movs	r2, #0	@ tmp148,
 772 0352 84F82420 		strb	r2, [r4, #36]	@ tmp148, hadc_6(D)->Lock
 550:src/stm32f1xx_hal_adc_ex.c ****     
 551:src/stm32f1xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
 552:src/stm32f1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 553:src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 773              		.loc 1 553 0
 774 0356 6FF00402 		mvn	r2, #4	@ tmp150,
 775 035a 1A60     		str	r2, [r3]	@ tmp150, _15->SR
 554:src/stm32f1xx_hal_adc_ex.c ****     
 555:src/stm32f1xx_hal_adc_ex.c ****     /* Enable end of conversion interrupt for injected channels */
 556:src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 776              		.loc 1 556 0
 777 035c 5A68     		ldr	r2, [r3, #4]	@ _29, _15->CR1
 778 035e 42F08002 		orr	r2, r2, #128	@ _30, _29,
 779 0362 5A60     		str	r2, [r3, #4]	@ _30, _15->CR1
 557:src/stm32f1xx_hal_adc_ex.c ****     
 558:src/stm32f1xx_hal_adc_ex.c ****     /* Start conversion of injected group if software start has been selected */
 559:src/stm32f1xx_hal_adc_ex.c ****     /* and if automatic injected conversion is disabled.                      */
 560:src/stm32f1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 561:src/stm32f1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 562:src/stm32f1xx_hal_adc_ex.c ****     /* If automatic injected conversion is enabled, conversion will start     */
 563:src/stm32f1xx_hal_adc_ex.c ****     /* after next regular group conversion.                                   */
 564:src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 780              		.loc 1 564 0
 781 0364 5A68     		ldr	r2, [r3, #4]	@ _32, _15->CR1
 782 0366 5205     		lsls	r2, r2, #21	@, _32,
 783 0368 20D4     		bmi	.L76	@,
 565:src/stm32f1xx_hal_adc_ex.c ****     {
 566:src/stm32f1xx_hal_adc_ex.c ****       if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 784              		.loc 1 566 0
 785 036a 9A68     		ldr	r2, [r3, #8]	@ _34, _15->CR2
 786 036c 02F4E042 		and	r2, r2, #28672	@ tmp152, _34,
 787 0370 B2F5E04F 		cmp	r2, #28672	@ tmp152,
 788 0374 11D1     		bne	.L82	@,
 789              		.loc 1 566 0 is_stmt 0 discriminator 1
 790 0376 0E4A     		ldr	r2, .L87	@ tmp153,
 791 0378 9342     		cmp	r3, r2	@ _15, tmp153
 792 037a 05D1     		bne	.L83	@,
 567:src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 793              		.loc 1 567 0 is_stmt 1 discriminator 2
 794 037c A2F58062 		sub	r2, r2, #1024	@ tmp154, tmp154,
 795 0380 5268     		ldr	r2, [r2, #4]	@ _36, MEM[(struct ADC_TypeDef *)1073816576B].CR1
 566:src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 796              		.loc 1 566 0 discriminator 2
 797 0382 12F4702F 		tst	r2, #983040	@ _36,
 798 0386 08D1     		bne	.L82	@,
ARM GAS  /tmp/ccHubou1.s 			page 26


 799              	.L83:
 568:src/stm32f1xx_hal_adc_ex.c ****       {
 569:src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with SW start */
 570:src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 800              		.loc 1 570 0
 801 0388 9A68     		ldr	r2, [r3, #8]	@ _38, _15->CR2
 802 038a 42F40212 		orr	r2, r2, #2129920	@ _39, _38,
 803              	.L86:
 571:src/stm32f1xx_hal_adc_ex.c ****       }
 572:src/stm32f1xx_hal_adc_ex.c ****       else
 573:src/stm32f1xx_hal_adc_ex.c ****       {
 574:src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with external trigger */
 575:src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 804              		.loc 1 575 0
 805 038e 9A60     		str	r2, [r3, #8]	@ _42,
 806 0390 10BD     		pop	{r4, pc}	@
 807              	.LVL47:
 808              	.L79:
 533:src/stm32f1xx_hal_adc_ex.c ****     }
 809              		.loc 1 533 0
 810 0392 A26A     		ldr	r2, [r4, #40]	@ _18,
 811 0394 42F48012 		orr	r2, r2, #1048576	@ _19, _18,
 812 0398 D4E7     		b	.L85	@
 813              	.L82:
 814              		.loc 1 575 0
 815 039a 9A68     		ldr	r2, [r3, #8]	@ _41, _15->CR2
 816 039c 42F40042 		orr	r2, r2, #32768	@ _42, _41,
 817 03a0 F5E7     		b	.L86	@
 818              	.L77:
 576:src/stm32f1xx_hal_adc_ex.c ****       }
 577:src/stm32f1xx_hal_adc_ex.c ****     }
 578:src/stm32f1xx_hal_adc_ex.c ****   }
 579:src/stm32f1xx_hal_adc_ex.c ****   else
 580:src/stm32f1xx_hal_adc_ex.c ****   {
 581:src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 582:src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 819              		.loc 1 582 0
 820 03a2 0023     		movs	r3, #0	@ tmp156,
 821 03a4 84F82430 		strb	r3, [r4, #36]	@ tmp156, hadc_6(D)->Lock
 822 03a8 10BD     		pop	{r4, pc}	@
 823              	.LVL48:
 824              	.L84:
 510:src/stm32f1xx_hal_adc_ex.c ****     
 825              		.loc 1 510 0
 826 03aa 0220     		movs	r0, #2	@ <retval>,
 827              	.LVL49:
 828              	.L76:
 583:src/stm32f1xx_hal_adc_ex.c ****   }
 584:src/stm32f1xx_hal_adc_ex.c ****   
 585:src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 586:src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 587:src/stm32f1xx_hal_adc_ex.c **** }
 829              		.loc 1 587 0
 830 03ac 10BD     		pop	{r4, pc}	@
 831              	.LVL50:
 832              	.L88:
 833 03ae 00BF     		.align	2
ARM GAS  /tmp/ccHubou1.s 			page 27


 834              	.L87:
 835 03b0 00280140 		.word	1073817600
 836              		.cfi_endproc
 837              	.LFE69:
 838              		.size	HAL_ADCEx_InjectedStart_IT, .-HAL_ADCEx_InjectedStart_IT
 839              		.align	1
 840              		.global	HAL_ADCEx_InjectedStop_IT
 841              		.syntax unified
 842              		.thumb
 843              		.thumb_func
 844              		.fpu softvfp
 845              		.type	HAL_ADCEx_InjectedStop_IT, %function
 846              	HAL_ADCEx_InjectedStop_IT:
 847              	.LFB70:
 588:src/stm32f1xx_hal_adc_ex.c **** 
 589:src/stm32f1xx_hal_adc_ex.c **** /**
 590:src/stm32f1xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels, disable interruption of 
 591:src/stm32f1xx_hal_adc_ex.c ****   *         end-of-conversion. Disable ADC peripheral if no regular conversion
 592:src/stm32f1xx_hal_adc_ex.c ****   *         is on going.
 593:src/stm32f1xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on 
 594:src/stm32f1xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 595:src/stm32f1xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 596:src/stm32f1xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 597:src/stm32f1xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 598:src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 599:src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 600:src/stm32f1xx_hal_adc_ex.c ****   */
 601:src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
 602:src/stm32f1xx_hal_adc_ex.c **** {
 848              		.loc 1 602 0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 0
 851              		@ frame_needed = 0, uses_anonymous_args = 0
 852              	.LVL51:
 603:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 604:src/stm32f1xx_hal_adc_ex.c ****   
 605:src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 606:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 607:src/stm32f1xx_hal_adc_ex.c **** 
 608:src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 609:src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 853              		.loc 1 609 0
 854 03b4 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2	@ hadc_6(D)->Lock, hadc_6(D)->Lock
 602:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 855              		.loc 1 602 0
 856 03b8 10B5     		push	{r4, lr}	@
 857              	.LCFI9:
 858              		.cfi_def_cfa_offset 8
 859              		.cfi_offset 4, -8
 860              		.cfi_offset 14, -4
 861              		.loc 1 609 0
 862 03ba 012B     		cmp	r3, #1	@ hadc_6(D)->Lock,
 602:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 863              		.loc 1 602 0
 864 03bc 0446     		mov	r4, r0	@ hadc, hadc
 865              		.loc 1 609 0
 866 03be 23D0     		beq	.L93	@,
ARM GAS  /tmp/ccHubou1.s 			page 28


 867              		.loc 1 609 0 is_stmt 0 discriminator 2
 868 03c0 0123     		movs	r3, #1	@ tmp127,
 869 03c2 80F82430 		strb	r3, [r0, #36]	@ tmp127, hadc_6(D)->Lock
 610:src/stm32f1xx_hal_adc_ex.c ****     
 611:src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion and disable ADC peripheral                     */
 612:src/stm32f1xx_hal_adc_ex.c ****   /* Conditioned to:                                                          */
 613:src/stm32f1xx_hal_adc_ex.c ****   /* - No conversion on the other group (regular group) is intended to        */
 614:src/stm32f1xx_hal_adc_ex.c ****   /*   continue (injected and regular groups stop conversion and ADC disable  */
 615:src/stm32f1xx_hal_adc_ex.c ****   /*   are common)                                                            */
 616:src/stm32f1xx_hal_adc_ex.c ****   /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
 617:src/stm32f1xx_hal_adc_ex.c ****   if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 870              		.loc 1 617 0 is_stmt 1 discriminator 2
 871 03c6 836A     		ldr	r3, [r0, #40]	@ _9, hadc_6(D)->State
 872 03c8 DA05     		lsls	r2, r3, #23	@, _9,
 873 03ca 17D4     		bmi	.L91	@,
 618:src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 874              		.loc 1 618 0 discriminator 1
 875 03cc 0368     		ldr	r3, [r0]	@ _11, hadc_6(D)->Instance
 876 03ce 5B68     		ldr	r3, [r3, #4]	@ _12, _11->CR1
 617:src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 877              		.loc 1 617 0 discriminator 1
 878 03d0 5B05     		lsls	r3, r3, #21	@, _12,
 879 03d2 13D4     		bmi	.L91	@,
 619:src/stm32f1xx_hal_adc_ex.c ****   {
 620:src/stm32f1xx_hal_adc_ex.c ****     /* Stop potential conversion on going, on regular and injected groups */
 621:src/stm32f1xx_hal_adc_ex.c ****     /* Disable ADC peripheral */
 622:src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 880              		.loc 1 622 0
 881 03d4 FFF7FEFF 		bl	ADC_ConversionStop_Disable	@
 882              	.LVL52:
 623:src/stm32f1xx_hal_adc_ex.c ****     
 624:src/stm32f1xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
 625:src/stm32f1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 883              		.loc 1 625 0
 884 03d8 60B9     		cbnz	r0, .L92	@ <retval>,
 626:src/stm32f1xx_hal_adc_ex.c ****     {
 627:src/stm32f1xx_hal_adc_ex.c ****       /* Disable ADC end of conversion interrupt for injected channels */
 628:src/stm32f1xx_hal_adc_ex.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 885              		.loc 1 628 0
 886 03da 2268     		ldr	r2, [r4]	@ _16, hadc_6(D)->Instance
 887 03dc 5368     		ldr	r3, [r2, #4]	@ _17, _16->CR1
 888 03de 23F08003 		bic	r3, r3, #128	@ _18, _17,
 889 03e2 5360     		str	r3, [r2, #4]	@ _18, _16->CR1
 629:src/stm32f1xx_hal_adc_ex.c ****       
 630:src/stm32f1xx_hal_adc_ex.c ****       /* Set ADC state */
 631:src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 890              		.loc 1 631 0
 891 03e4 A36A     		ldr	r3, [r4, #40]	@ _20, hadc_6(D)->State
 892 03e6 23F48853 		bic	r3, r3, #4352	@ tmp132, _20,
 893 03ea 23F00103 		bic	r3, r3, #1	@ tmp132, tmp132,
 894 03ee 43F00103 		orr	r3, r3, #1	@ _22, tmp132,
 895 03f2 A362     		str	r3, [r4, #40]	@ _22, hadc_6(D)->State
 896              	.LVL53:
 897              	.L92:
 632:src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 633:src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 634:src/stm32f1xx_hal_adc_ex.c ****     }
ARM GAS  /tmp/ccHubou1.s 			page 29


 635:src/stm32f1xx_hal_adc_ex.c ****   }
 636:src/stm32f1xx_hal_adc_ex.c ****   else
 637:src/stm32f1xx_hal_adc_ex.c ****   {
 638:src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 639:src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 640:src/stm32f1xx_hal_adc_ex.c ****       
 641:src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 642:src/stm32f1xx_hal_adc_ex.c ****   }
 643:src/stm32f1xx_hal_adc_ex.c ****   
 644:src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 645:src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 898              		.loc 1 645 0
 899 03f4 0023     		movs	r3, #0	@ tmp134,
 900 03f6 84F82430 		strb	r3, [r4, #36]	@ tmp134, hadc_6(D)->Lock
 646:src/stm32f1xx_hal_adc_ex.c ****   
 647:src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 648:src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 901              		.loc 1 648 0
 902 03fa 10BD     		pop	{r4, pc}	@
 903              	.LVL54:
 904              	.L91:
 639:src/stm32f1xx_hal_adc_ex.c ****       
 905              		.loc 1 639 0
 906 03fc A36A     		ldr	r3, [r4, #40]	@ _24, hadc_6(D)->State
 641:src/stm32f1xx_hal_adc_ex.c ****   }
 907              		.loc 1 641 0
 908 03fe 0120     		movs	r0, #1	@ <retval>,
 909              	.LVL55:
 639:src/stm32f1xx_hal_adc_ex.c ****       
 910              		.loc 1 639 0
 911 0400 43F02003 		orr	r3, r3, #32	@ _25, _24,
 912 0404 A362     		str	r3, [r4, #40]	@ _25, hadc_6(D)->State
 913              	.LVL56:
 914 0406 F5E7     		b	.L92	@
 915              	.LVL57:
 916              	.L93:
 609:src/stm32f1xx_hal_adc_ex.c ****     
 917              		.loc 1 609 0
 918 0408 0220     		movs	r0, #2	@ <retval>,
 919              	.LVL58:
 649:src/stm32f1xx_hal_adc_ex.c **** }
 920              		.loc 1 649 0
 921 040a 10BD     		pop	{r4, pc}	@
 922              		.cfi_endproc
 923              	.LFE70:
 924              		.size	HAL_ADCEx_InjectedStop_IT, .-HAL_ADCEx_InjectedStop_IT
 925              		.align	1
 926              		.global	HAL_ADCEx_MultiModeStart_DMA
 927              		.syntax unified
 928              		.thumb
 929              		.thumb_func
 930              		.fpu softvfp
 931              		.type	HAL_ADCEx_MultiModeStart_DMA, %function
 932              	HAL_ADCEx_MultiModeStart_DMA:
 933              	.LFB71:
 650:src/stm32f1xx_hal_adc_ex.c **** 
 651:src/stm32f1xx_hal_adc_ex.c **** #if defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F105xC) || defined (STM32F107xC
ARM GAS  /tmp/ccHubou1.s 			page 30


 652:src/stm32f1xx_hal_adc_ex.c **** /**
 653:src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
 654:src/stm32f1xx_hal_adc_ex.c ****   *         through DMA.
 655:src/stm32f1xx_hal_adc_ex.c ****   *         Multimode must have been previously configured using 
 656:src/stm32f1xx_hal_adc_ex.c ****   *         HAL_ADCEx_MultiModeConfigChannel() function.
 657:src/stm32f1xx_hal_adc_ex.c ****   *         Interruptions enabled in this function:
 658:src/stm32f1xx_hal_adc_ex.c ****   *          - DMA transfer complete
 659:src/stm32f1xx_hal_adc_ex.c ****   *          - DMA half transfer
 660:src/stm32f1xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
 661:src/stm32f1xx_hal_adc_ex.c ****   * @note:  On STM32F1 devices, ADC slave regular group must be configured 
 662:src/stm32f1xx_hal_adc_ex.c ****   *         with conversion trigger ADC_SOFTWARE_START.
 663:src/stm32f1xx_hal_adc_ex.c ****   * @note:  ADC slave can be enabled preliminarily using single-mode  
 664:src/stm32f1xx_hal_adc_ex.c ****   *         HAL_ADC_Start() function.
 665:src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
 666:src/stm32f1xx_hal_adc_ex.c ****   * @param  pData: The destination Buffer address.
 667:src/stm32f1xx_hal_adc_ex.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
 668:src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 669:src/stm32f1xx_hal_adc_ex.c ****   */
 670:src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t L
 671:src/stm32f1xx_hal_adc_ex.c **** {
 934              		.loc 1 671 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 48
 937              		@ frame_needed = 0, uses_anonymous_args = 0
 938              	.LVL59:
 939 040c F0B5     		push	{r4, r5, r6, r7, lr}	@
 940              	.LCFI10:
 941              		.cfi_def_cfa_offset 20
 942              		.cfi_offset 4, -20
 943              		.cfi_offset 5, -16
 944              		.cfi_offset 6, -12
 945              		.cfi_offset 7, -8
 946              		.cfi_offset 14, -4
 672:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 673:src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
 674:src/stm32f1xx_hal_adc_ex.c **** 
 675:src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 676:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 677:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 678:src/stm32f1xx_hal_adc_ex.c ****   
 679:src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 680:src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 947              		.loc 1 680 0
 948 040e 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2	@ hadc_7(D)->Lock, hadc_7(D)->Lock
 671:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 949              		.loc 1 671 0
 950 0412 8DB0     		sub	sp, sp, #52	@,,
 951              	.LCFI11:
 952              		.cfi_def_cfa_offset 72
 953              		.loc 1 680 0
 954 0414 012B     		cmp	r3, #1	@ hadc_7(D)->Lock,
 671:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 955              		.loc 1 671 0
 956 0416 0446     		mov	r4, r0	@ hadc, hadc
 957 0418 0E46     		mov	r6, r1	@ pData, pData
 958 041a 1746     		mov	r7, r2	@ Length, Length
 959              		.loc 1 680 0
ARM GAS  /tmp/ccHubou1.s 			page 31


 960 041c 58D0     		beq	.L100	@,
 961              		.loc 1 680 0 is_stmt 0 discriminator 2
 962 041e 0125     		movs	r5, #1	@ tmp142,
 681:src/stm32f1xx_hal_adc_ex.c **** 
 682:src/stm32f1xx_hal_adc_ex.c ****   /* Set a temporary handle of the ADC slave associated to the ADC master     */
 683:src/stm32f1xx_hal_adc_ex.c ****   ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 963              		.loc 1 683 0 is_stmt 1 discriminator 2
 964 0420 2C4B     		ldr	r3, .L105	@ tmp144,
 680:src/stm32f1xx_hal_adc_ex.c **** 
 965              		.loc 1 680 0 discriminator 2
 966 0422 80F82450 		strb	r5, [r0, #36]	@ tmp142, hadc_7(D)->Lock
 967              		.loc 1 683 0 discriminator 2
 968 0426 0093     		str	r3, [sp]	@ tmp144, tmphadcSlave.Instance
 684:src/stm32f1xx_hal_adc_ex.c ****   
 685:src/stm32f1xx_hal_adc_ex.c ****   /* On STM32F1 devices, ADC slave regular group must be configured with      */
 686:src/stm32f1xx_hal_adc_ex.c ****   /* conversion trigger ADC_SOFTWARE_START.                                   */
 687:src/stm32f1xx_hal_adc_ex.c ****   /* Note: External trigger of ADC slave must be enabled, it is already done  */
 688:src/stm32f1xx_hal_adc_ex.c ****   /*       into function "HAL_ADC_Init()".                                    */
 689:src/stm32f1xx_hal_adc_ex.c ****   if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 969              		.loc 1 689 0 discriminator 2
 970 0428 9B68     		ldr	r3, [r3, #8]	@ _11, MEM[(struct ADC_TypeDef *)1073817600B].CR2
 971 042a 03F46023 		and	r3, r3, #917504	@ tmp146, _11,
 972 042e B3F5602F 		cmp	r3, #917504	@ tmp146,
 973 0432 07D0     		beq	.L96	@,
 690:src/stm32f1xx_hal_adc_ex.c ****   {
 691:src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 692:src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 974              		.loc 1 692 0
 975 0434 836A     		ldr	r3, [r0, #40]	@ _13, hadc_7(D)->State
 976 0436 43F02003 		orr	r3, r3, #32	@ _14, _13,
 977 043a 8362     		str	r3, [r0, #40]	@ _14, hadc_7(D)->State
 978              	.LVL60:
 979              	.L97:
 693:src/stm32f1xx_hal_adc_ex.c ****     
 694:src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 695:src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 696:src/stm32f1xx_hal_adc_ex.c ****     
 697:src/stm32f1xx_hal_adc_ex.c ****     return HAL_ERROR;
 698:src/stm32f1xx_hal_adc_ex.c ****   }
 699:src/stm32f1xx_hal_adc_ex.c ****   
 700:src/stm32f1xx_hal_adc_ex.c ****   /* Enable the ADC peripherals: master and slave (in case if not already     */
 701:src/stm32f1xx_hal_adc_ex.c ****   /* enabled previously)                                                      */
 702:src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 703:src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 704:src/stm32f1xx_hal_adc_ex.c ****   {
 705:src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(&tmphadcSlave);
 706:src/stm32f1xx_hal_adc_ex.c ****   }
 707:src/stm32f1xx_hal_adc_ex.c ****   
 708:src/stm32f1xx_hal_adc_ex.c ****   /* Start conversion if all ADCs of multimode are effectively enabled */
 709:src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 710:src/stm32f1xx_hal_adc_ex.c ****   {
 711:src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state (ADC master)                                             */
 712:src/stm32f1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to regular group conversion results     */
 713:src/stm32f1xx_hal_adc_ex.c ****     /* - Set state bitfield related to regular operation                      */
 714:src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 715:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
 716:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY);
ARM GAS  /tmp/ccHubou1.s 			page 32


 717:src/stm32f1xx_hal_adc_ex.c ****       
 718:src/stm32f1xx_hal_adc_ex.c ****     /* If conversions on group regular are also triggering group injected,    */
 719:src/stm32f1xx_hal_adc_ex.c ****     /* update ADC state.                                                      */
 720:src/stm32f1xx_hal_adc_ex.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 721:src/stm32f1xx_hal_adc_ex.c ****     {
 722:src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 723:src/stm32f1xx_hal_adc_ex.c ****     }
 724:src/stm32f1xx_hal_adc_ex.c ****     
 725:src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 726:src/stm32f1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 727:src/stm32f1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 728:src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 729:src/stm32f1xx_hal_adc_ex.c ****     
 730:src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC error code to none */
 731:src/stm32f1xx_hal_adc_ex.c ****     ADC_CLEAR_ERRORCODE(hadc);
 732:src/stm32f1xx_hal_adc_ex.c ****     
 733:src/stm32f1xx_hal_adc_ex.c ****     
 734:src/stm32f1xx_hal_adc_ex.c ****     /* Set the DMA transfer complete callback */
 735:src/stm32f1xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 736:src/stm32f1xx_hal_adc_ex.c ****        
 737:src/stm32f1xx_hal_adc_ex.c ****     /* Set the DMA half transfer complete callback */
 738:src/stm32f1xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 739:src/stm32f1xx_hal_adc_ex.c ****     
 740:src/stm32f1xx_hal_adc_ex.c ****     /* Set the DMA error callback */
 741:src/stm32f1xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 742:src/stm32f1xx_hal_adc_ex.c **** 
 743:src/stm32f1xx_hal_adc_ex.c ****     
 744:src/stm32f1xx_hal_adc_ex.c ****     /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
 745:src/stm32f1xx_hal_adc_ex.c ****     /* start (in case of SW start):                                           */
 746:src/stm32f1xx_hal_adc_ex.c ****     
 747:src/stm32f1xx_hal_adc_ex.c ****     /* Clear regular group conversion flag and overrun flag */
 748:src/stm32f1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 749:src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 750:src/stm32f1xx_hal_adc_ex.c ****     
 751:src/stm32f1xx_hal_adc_ex.c ****     /* Enable ADC DMA mode of ADC master */
 752:src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 753:src/stm32f1xx_hal_adc_ex.c ****     
 754:src/stm32f1xx_hal_adc_ex.c ****     /* Start the DMA channel */
 755:src/stm32f1xx_hal_adc_ex.c ****     HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 756:src/stm32f1xx_hal_adc_ex.c ****     
 757:src/stm32f1xx_hal_adc_ex.c ****     /* Start conversion of regular group if software start has been selected. */
 758:src/stm32f1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 759:src/stm32f1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 760:src/stm32f1xx_hal_adc_ex.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
 761:src/stm32f1xx_hal_adc_ex.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
 762:src/stm32f1xx_hal_adc_ex.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 763:src/stm32f1xx_hal_adc_ex.c ****     {
 764:src/stm32f1xx_hal_adc_ex.c ****       /* Start ADC conversion on regular group with SW start */
 765:src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 766:src/stm32f1xx_hal_adc_ex.c ****     }
 767:src/stm32f1xx_hal_adc_ex.c ****     else
 768:src/stm32f1xx_hal_adc_ex.c ****     {
 769:src/stm32f1xx_hal_adc_ex.c ****       /* Start ADC conversion on regular group with external trigger */
 770:src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 771:src/stm32f1xx_hal_adc_ex.c ****     }
 772:src/stm32f1xx_hal_adc_ex.c ****   }
 773:src/stm32f1xx_hal_adc_ex.c ****   else
ARM GAS  /tmp/ccHubou1.s 			page 33


 774:src/stm32f1xx_hal_adc_ex.c ****   {
 775:src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 776:src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 980              		.loc 1 776 0
 981 043c 0023     		movs	r3, #0	@ tmp165,
 982 043e 84F82430 		strb	r3, [r4, #36]	@ tmp165, hadc_7(D)->Lock
 983 0442 42E0     		b	.L95	@
 984              	.LVL61:
 985              	.L96:
 702:src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 986              		.loc 1 702 0
 987 0444 FFF7FEFF 		bl	ADC_Enable	@
 988              	.LVL62:
 703:src/stm32f1xx_hal_adc_ex.c ****   {
 989              		.loc 1 703 0
 990 0448 0546     		mov	r5, r0	@ <retval>,
 991 044a 0028     		cmp	r0, #0	@ <retval>
 992 044c F6D1     		bne	.L97	@
 705:src/stm32f1xx_hal_adc_ex.c ****   }
 993              		.loc 1 705 0
 994 044e 6846     		mov	r0, sp	@,
 995              	.LVL63:
 996 0450 FFF7FEFF 		bl	ADC_Enable	@
 997              	.LVL64:
 709:src/stm32f1xx_hal_adc_ex.c ****   {
 998              		.loc 1 709 0
 999 0454 0546     		mov	r5, r0	@ <retval>,
 1000 0456 0028     		cmp	r0, #0	@ <retval>
 1001 0458 F0D1     		bne	.L97	@
 714:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
 1002              		.loc 1 714 0
 1003 045a A26A     		ldr	r2, [r4, #40]	@ _21, hadc_7(D)->State
 1004 045c 1E4B     		ldr	r3, .L105+4	@ tmp153,
 720:src/stm32f1xx_hal_adc_ex.c ****     {
 1005              		.loc 1 720 0
 1006 045e 2168     		ldr	r1, [r4]	@ _25, hadc_7(D)->Instance
 714:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
 1007              		.loc 1 714 0
 1008 0460 1340     		ands	r3, r3, r2	@, tmp153, tmp153, _21
 1009 0462 43F48073 		orr	r3, r3, #256	@ _23, tmp153,
 1010 0466 A362     		str	r3, [r4, #40]	@ _23, hadc_7(D)->State
 720:src/stm32f1xx_hal_adc_ex.c ****     {
 1011              		.loc 1 720 0
 1012 0468 4B68     		ldr	r3, [r1, #4]	@ _26, _25->CR1
 735:src/stm32f1xx_hal_adc_ex.c ****        
 1013              		.loc 1 735 0
 1014 046a 206A     		ldr	r0, [r4, #32]	@ _34, hadc_7(D)->DMA_Handle
 1015              	.LVL65:
 720:src/stm32f1xx_hal_adc_ex.c ****     {
 1016              		.loc 1 720 0
 1017 046c 5B05     		lsls	r3, r3, #21	@, _26,
 722:src/stm32f1xx_hal_adc_ex.c ****     }
 1018              		.loc 1 722 0
 1019 046e 48BF     		it	mi
 1020 0470 A36A     		ldrmi	r3, [r4, #40]	@ _28, hadc_7(D)->State
 755:src/stm32f1xx_hal_adc_ex.c ****     
 1021              		.loc 1 755 0
ARM GAS  /tmp/ccHubou1.s 			page 34


 1022 0472 3246     		mov	r2, r6	@, pData
 722:src/stm32f1xx_hal_adc_ex.c ****     }
 1023              		.loc 1 722 0
 1024 0474 42BF     		ittt	mi
 1025 0476 23F44053 		bicmi	r3, r3, #12288	@ tmp155, _28,
 1026 047a 43F48053 		orrmi	r3, r3, #4096	@ _30, tmp155,
 1027 047e A362     		strmi	r3, [r4, #40]	@ _30, hadc_7(D)->State
 728:src/stm32f1xx_hal_adc_ex.c ****     
 1028              		.loc 1 728 0
 1029 0480 0023     		movs	r3, #0	@ tmp156,
 731:src/stm32f1xx_hal_adc_ex.c ****     
 1030              		.loc 1 731 0
 1031 0482 E362     		str	r3, [r4, #44]	@ tmp156, hadc_7(D)->ErrorCode
 728:src/stm32f1xx_hal_adc_ex.c ****     
 1032              		.loc 1 728 0
 1033 0484 84F82430 		strb	r3, [r4, #36]	@ tmp156, hadc_7(D)->Lock
 735:src/stm32f1xx_hal_adc_ex.c ****        
 1034              		.loc 1 735 0
 1035 0488 144B     		ldr	r3, .L105+8	@ tmp159,
 755:src/stm32f1xx_hal_adc_ex.c ****     
 1036              		.loc 1 755 0
 1037 048a 4C31     		adds	r1, r1, #76	@, _25,
 735:src/stm32f1xx_hal_adc_ex.c ****        
 1038              		.loc 1 735 0
 1039 048c 8362     		str	r3, [r0, #40]	@ tmp159, _34->XferCpltCallback
 738:src/stm32f1xx_hal_adc_ex.c ****     
 1040              		.loc 1 738 0
 1041 048e 144B     		ldr	r3, .L105+12	@ tmp160,
 1042 0490 C362     		str	r3, [r0, #44]	@ tmp160, _34->XferHalfCpltCallback
 741:src/stm32f1xx_hal_adc_ex.c **** 
 1043              		.loc 1 741 0
 1044 0492 144B     		ldr	r3, .L105+16	@ tmp161,
 1045 0494 0363     		str	r3, [r0, #48]	@ tmp161, _34->XferErrorCallback
 749:src/stm32f1xx_hal_adc_ex.c ****     
 1046              		.loc 1 749 0
 1047 0496 6FF00203 		mvn	r3, #2	@ tmp162,
 1048 049a 41F84C3C 		str	r3, [r1, #-76]	@ tmp162, _25->SR
 752:src/stm32f1xx_hal_adc_ex.c ****     
 1049              		.loc 1 752 0
 1050 049e 51F8443C 		ldr	r3, [r1, #-68]	@ _39, _25->CR2
 1051 04a2 43F48073 		orr	r3, r3, #256	@ _40, _39,
 1052 04a6 41F8443C 		str	r3, [r1, #-68]	@ _40, _25->CR2
 755:src/stm32f1xx_hal_adc_ex.c ****     
 1053              		.loc 1 755 0
 1054 04aa 3B46     		mov	r3, r7	@, Length
 1055 04ac FFF7FEFF 		bl	HAL_DMA_Start_IT	@
 1056              	.LVL66:
 762:src/stm32f1xx_hal_adc_ex.c ****     {
 1057              		.loc 1 762 0
 1058 04b0 2368     		ldr	r3, [r4]	@ _48, hadc_7(D)->Instance
 1059 04b2 9A68     		ldr	r2, [r3, #8]	@ _49, _48->CR2
 1060 04b4 02F46022 		and	r2, r2, #917504	@ tmp164, _49,
 1061 04b8 B2F5602F 		cmp	r2, #917504	@ tmp164,
 765:src/stm32f1xx_hal_adc_ex.c ****     }
 1062              		.loc 1 765 0
 1063 04bc 9A68     		ldr	r2, [r3, #8]	@ _54,
 1064 04be 0CBF     		ite	eq
ARM GAS  /tmp/ccHubou1.s 			page 35


 1065 04c0 42F4A002 		orreq	r2, r2, #5242880	@ _55, _54,
 770:src/stm32f1xx_hal_adc_ex.c ****     }
 1066              		.loc 1 770 0
 1067 04c4 42F48012 		orrne	r2, r2, #1048576	@ _52, _51,
 1068 04c8 9A60     		str	r2, [r3, #8]	@ _52,
 1069              	.L95:
 777:src/stm32f1xx_hal_adc_ex.c ****   }
 778:src/stm32f1xx_hal_adc_ex.c ****   
 779:src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 780:src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 781:src/stm32f1xx_hal_adc_ex.c **** }
 1070              		.loc 1 781 0
 1071 04ca 2846     		mov	r0, r5	@, <retval>
 1072 04cc 0DB0     		add	sp, sp, #52	@,,
 1073              	.LCFI12:
 1074              		.cfi_remember_state
 1075              		.cfi_def_cfa_offset 20
 1076              		@ sp needed	@
 1077 04ce F0BD     		pop	{r4, r5, r6, r7, pc}	@
 1078              	.LVL67:
 1079              	.L100:
 1080              	.LCFI13:
 1081              		.cfi_restore_state
 680:src/stm32f1xx_hal_adc_ex.c **** 
 1082              		.loc 1 680 0
 1083 04d0 0225     		movs	r5, #2	@ <retval>,
 1084 04d2 FAE7     		b	.L95	@
 1085              	.L106:
 1086              		.align	2
 1087              	.L105:
 1088 04d4 00280140 		.word	1073817600
 1089 04d8 FEFCEFFF 		.word	-1049346
 1090 04dc 00000000 		.word	ADC_DMAConvCplt
 1091 04e0 00000000 		.word	ADC_DMAHalfConvCplt
 1092 04e4 00000000 		.word	ADC_DMAError
 1093              		.cfi_endproc
 1094              	.LFE71:
 1095              		.size	HAL_ADCEx_MultiModeStart_DMA, .-HAL_ADCEx_MultiModeStart_DMA
 1096              		.align	1
 1097              		.global	HAL_ADCEx_MultiModeStop_DMA
 1098              		.syntax unified
 1099              		.thumb
 1100              		.thumb_func
 1101              		.fpu softvfp
 1102              		.type	HAL_ADCEx_MultiModeStop_DMA, %function
 1103              	HAL_ADCEx_MultiModeStop_DMA:
 1104              	.LFB72:
 782:src/stm32f1xx_hal_adc_ex.c **** 
 783:src/stm32f1xx_hal_adc_ex.c **** /**
 784:src/stm32f1xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
 785:src/stm32f1xx_hal_adc_ex.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
 786:src/stm32f1xx_hal_adc_ex.c ****   *         ADC peripheral.
 787:src/stm32f1xx_hal_adc_ex.c ****   * @note   Multimode is kept enabled after this function. To disable multimode 
 788:src/stm32f1xx_hal_adc_ex.c ****   *         (set with HAL_ADCEx_MultiModeConfigChannel(), ADC must be 
 789:src/stm32f1xx_hal_adc_ex.c ****   *         reinitialized using HAL_ADC_Init() or HAL_ADC_ReInit().
 790:src/stm32f1xx_hal_adc_ex.c ****   * @note   In case of DMA configured in circular mode, function 
 791:src/stm32f1xx_hal_adc_ex.c ****   *         HAL_ADC_Stop_DMA must be called after this function with handle of
ARM GAS  /tmp/ccHubou1.s 			page 36


 792:src/stm32f1xx_hal_adc_ex.c ****   *         ADC slave, to properly disable the DMA channel.
 793:src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
 794:src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 795:src/stm32f1xx_hal_adc_ex.c ****   */
 796:src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef* hadc)
 797:src/stm32f1xx_hal_adc_ex.c **** {
 1105              		.loc 1 797 0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 48
 1108              		@ frame_needed = 0, uses_anonymous_args = 0
 1109              	.LVL68:
 1110 04e8 70B5     		push	{r4, r5, r6, lr}	@
 1111              	.LCFI14:
 1112              		.cfi_def_cfa_offset 16
 1113              		.cfi_offset 4, -16
 1114              		.cfi_offset 5, -12
 1115              		.cfi_offset 6, -8
 1116              		.cfi_offset 14, -4
 798:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 799:src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
 800:src/stm32f1xx_hal_adc_ex.c ****   
 801:src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 802:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 803:src/stm32f1xx_hal_adc_ex.c ****   
 804:src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 805:src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1117              		.loc 1 805 0
 1118 04ea 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2	@ hadc_6(D)->Lock, hadc_6(D)->Lock
 797:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1119              		.loc 1 797 0
 1120 04ee 8CB0     		sub	sp, sp, #48	@,,
 1121              	.LCFI15:
 1122              		.cfi_def_cfa_offset 64
 1123              		.loc 1 805 0
 1124 04f0 012B     		cmp	r3, #1	@ hadc_6(D)->Lock,
 797:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1125              		.loc 1 797 0
 1126 04f2 0446     		mov	r4, r0	@ hadc, hadc
 1127              		.loc 1 805 0
 1128 04f4 30D0     		beq	.L111	@,
 1129              		.loc 1 805 0 is_stmt 0 discriminator 2
 1130 04f6 0126     		movs	r6, #1	@ tmp126,
 1131 04f8 80F82460 		strb	r6, [r0, #36]	@ tmp126, hadc_6(D)->Lock
 806:src/stm32f1xx_hal_adc_ex.c ****   
 807:src/stm32f1xx_hal_adc_ex.c ****  
 808:src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups */
 809:src/stm32f1xx_hal_adc_ex.c ****   /* Disable ADC master peripheral */
 810:src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 1132              		.loc 1 810 0 is_stmt 1 discriminator 2
 1133 04fc FFF7FEFF 		bl	ADC_ConversionStop_Disable	@
 1134              	.LVL69:
 811:src/stm32f1xx_hal_adc_ex.c ****   
 812:src/stm32f1xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
 813:src/stm32f1xx_hal_adc_ex.c ****   if(tmp_hal_status == HAL_OK)
 1135              		.loc 1 813 0 discriminator 2
 1136 0500 0546     		mov	r5, r0	@ <retval>,
 1137 0502 28BB     		cbnz	r0, .L109	@ <retval>,
ARM GAS  /tmp/ccHubou1.s 			page 37


 814:src/stm32f1xx_hal_adc_ex.c ****   {
 815:src/stm32f1xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
 816:src/stm32f1xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 1138              		.loc 1 816 0
 1139 0504 154B     		ldr	r3, .L112	@ tmp129,
 1140 0506 0CA8     		add	r0, sp, #48	@ tmp130,,
 1141              	.LVL70:
 1142 0508 40F8303D 		str	r3, [r0, #-48]!	@ tmp129, tmphadcSlave.Instance
 817:src/stm32f1xx_hal_adc_ex.c **** 
 818:src/stm32f1xx_hal_adc_ex.c ****     /* Disable ADC slave peripheral */
 819:src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop_Disable(&tmphadcSlave);
 1143              		.loc 1 819 0
 1144 050c FFF7FEFF 		bl	ADC_ConversionStop_Disable	@
 1145              	.LVL71:
 820:src/stm32f1xx_hal_adc_ex.c **** 
 821:src/stm32f1xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
 822:src/stm32f1xx_hal_adc_ex.c ****     if(tmp_hal_status != HAL_OK)
 1146              		.loc 1 822 0
 1147 0510 48B1     		cbz	r0, .L110	@,
 823:src/stm32f1xx_hal_adc_ex.c ****     {
 824:src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
 825:src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 826:src/stm32f1xx_hal_adc_ex.c **** 
 827:src/stm32f1xx_hal_adc_ex.c ****       /* Process unlocked */
 828:src/stm32f1xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 1148              		.loc 1 828 0
 1149 0512 84F82450 		strb	r5, [r4, #36]	@ <retval>, hadc_6(D)->Lock
 829:src/stm32f1xx_hal_adc_ex.c **** 
 830:src/stm32f1xx_hal_adc_ex.c ****       return HAL_ERROR;
 1150              		.loc 1 830 0
 1151 0516 3546     		mov	r5, r6	@ <retval>, tmp126
 825:src/stm32f1xx_hal_adc_ex.c **** 
 1152              		.loc 1 825 0
 1153 0518 A36A     		ldr	r3, [r4, #40]	@ _14, hadc_6(D)->State
 1154 051a 43F01003 		orr	r3, r3, #16	@ _15, _14,
 1155 051e A362     		str	r3, [r4, #40]	@ _15, hadc_6(D)->State
 1156              	.LVL72:
 1157              	.L108:
 831:src/stm32f1xx_hal_adc_ex.c ****     }
 832:src/stm32f1xx_hal_adc_ex.c **** 
 833:src/stm32f1xx_hal_adc_ex.c ****     /* Disable ADC DMA mode */
 834:src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 835:src/stm32f1xx_hal_adc_ex.c ****     
 836:src/stm32f1xx_hal_adc_ex.c ****     /* Reset configuration of ADC DMA continuous request for dual mode */
 837:src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR1, ADC_CR1_DUALMOD);
 838:src/stm32f1xx_hal_adc_ex.c ****         
 839:src/stm32f1xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
 840:src/stm32f1xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
 841:src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 842:src/stm32f1xx_hal_adc_ex.c **** 
 843:src/stm32f1xx_hal_adc_ex.c ****     /* Change ADC state (ADC master) */
 844:src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 845:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 846:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
 847:src/stm32f1xx_hal_adc_ex.c ****   }
 848:src/stm32f1xx_hal_adc_ex.c ****   
 849:src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
ARM GAS  /tmp/ccHubou1.s 			page 38


 850:src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 851:src/stm32f1xx_hal_adc_ex.c ****   
 852:src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 853:src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 854:src/stm32f1xx_hal_adc_ex.c **** }
 1158              		.loc 1 854 0
 1159 0520 2846     		mov	r0, r5	@, <retval>
 1160 0522 0CB0     		add	sp, sp, #48	@,,
 1161              	.LCFI16:
 1162              		.cfi_remember_state
 1163              		.cfi_def_cfa_offset 16
 1164              		@ sp needed	@
 1165 0524 70BD     		pop	{r4, r5, r6, pc}	@
 1166              	.LVL73:
 1167              	.L110:
 1168              	.LCFI17:
 1169              		.cfi_restore_state
 834:src/stm32f1xx_hal_adc_ex.c ****     
 1170              		.loc 1 834 0
 1171 0526 2368     		ldr	r3, [r4]	@ _18, hadc_6(D)->Instance
 841:src/stm32f1xx_hal_adc_ex.c **** 
 1172              		.loc 1 841 0
 1173 0528 206A     		ldr	r0, [r4, #32]	@, hadc_6(D)->DMA_Handle
 1174              	.LVL74:
 834:src/stm32f1xx_hal_adc_ex.c ****     
 1175              		.loc 1 834 0
 1176 052a 9A68     		ldr	r2, [r3, #8]	@ _19, _18->CR2
 1177 052c 22F48072 		bic	r2, r2, #256	@ _20, _19,
 1178 0530 9A60     		str	r2, [r3, #8]	@ _20, _18->CR2
 837:src/stm32f1xx_hal_adc_ex.c ****         
 1179              		.loc 1 837 0
 1180 0532 5A68     		ldr	r2, [r3, #4]	@ _22, _18->CR1
 1181 0534 22F47022 		bic	r2, r2, #983040	@ _23, _22,
 1182 0538 5A60     		str	r2, [r3, #4]	@ _23, _18->CR1
 841:src/stm32f1xx_hal_adc_ex.c **** 
 1183              		.loc 1 841 0
 1184 053a FFF7FEFF 		bl	HAL_DMA_Abort	@
 1185              	.LVL75:
 1186 053e 0546     		mov	r5, r0	@ <retval>,
 1187              	.LVL76:
 844:src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1188              		.loc 1 844 0
 1189 0540 A36A     		ldr	r3, [r4, #40]	@ _28, hadc_6(D)->State
 1190 0542 23F48853 		bic	r3, r3, #4352	@ tmp135, _28,
 1191 0546 23F00103 		bic	r3, r3, #1	@ tmp135, tmp135,
 1192 054a 43F00103 		orr	r3, r3, #1	@ _30, tmp135,
 1193 054e A362     		str	r3, [r4, #40]	@ _30, hadc_6(D)->State
 1194              	.LVL77:
 1195              	.L109:
 850:src/stm32f1xx_hal_adc_ex.c ****   
 1196              		.loc 1 850 0
 1197 0550 0023     		movs	r3, #0	@ tmp137,
 1198 0552 84F82430 		strb	r3, [r4, #36]	@ tmp137, hadc_6(D)->Lock
 853:src/stm32f1xx_hal_adc_ex.c **** }
 1199              		.loc 1 853 0
 1200 0556 E3E7     		b	.L108	@
 1201              	.LVL78:
ARM GAS  /tmp/ccHubou1.s 			page 39


 1202              	.L111:
 805:src/stm32f1xx_hal_adc_ex.c ****   
 1203              		.loc 1 805 0
 1204 0558 0225     		movs	r5, #2	@ <retval>,
 1205 055a E1E7     		b	.L108	@
 1206              	.L113:
 1207              		.align	2
 1208              	.L112:
 1209 055c 00280140 		.word	1073817600
 1210              		.cfi_endproc
 1211              	.LFE72:
 1212              		.size	HAL_ADCEx_MultiModeStop_DMA, .-HAL_ADCEx_MultiModeStop_DMA
 1213              		.align	1
 1214              		.global	HAL_ADCEx_InjectedGetValue
 1215              		.syntax unified
 1216              		.thumb
 1217              		.thumb_func
 1218              		.fpu softvfp
 1219              		.type	HAL_ADCEx_InjectedGetValue, %function
 1220              	HAL_ADCEx_InjectedGetValue:
 1221              	.LFB73:
 855:src/stm32f1xx_hal_adc_ex.c **** #endif /* defined STM32F103x6 || defined STM32F103xB || defined STM32F105xC || defined STM32F107xC 
 856:src/stm32f1xx_hal_adc_ex.c **** 
 857:src/stm32f1xx_hal_adc_ex.c **** /**
 858:src/stm32f1xx_hal_adc_ex.c ****   * @brief  Get ADC injected group conversion result.
 859:src/stm32f1xx_hal_adc_ex.c ****   * @note   Reading register JDRx automatically clears ADC flag JEOC
 860:src/stm32f1xx_hal_adc_ex.c ****   *         (ADC group injected end of unitary conversion).
 861:src/stm32f1xx_hal_adc_ex.c ****   * @note   This function does not clear ADC flag JEOS 
 862:src/stm32f1xx_hal_adc_ex.c ****   *         (ADC group injected end of sequence conversion)
 863:src/stm32f1xx_hal_adc_ex.c ****   *         Occurrence of flag JEOS rising:
 864:src/stm32f1xx_hal_adc_ex.c ****   *          - If sequencer is composed of 1 rank, flag JEOS is equivalent
 865:src/stm32f1xx_hal_adc_ex.c ****   *            to flag JEOC.
 866:src/stm32f1xx_hal_adc_ex.c ****   *          - If sequencer is composed of several ranks, during the scan
 867:src/stm32f1xx_hal_adc_ex.c ****   *            sequence flag JEOC only is raised, at the end of the scan sequence
 868:src/stm32f1xx_hal_adc_ex.c ****   *            both flags JEOC and EOS are raised.
 869:src/stm32f1xx_hal_adc_ex.c ****   *         Flag JEOS must not be cleared by this function because
 870:src/stm32f1xx_hal_adc_ex.c ****   *         it would not be compliant with low power features
 871:src/stm32f1xx_hal_adc_ex.c ****   *         (feature low power auto-wait, not available on all STM32 families).
 872:src/stm32f1xx_hal_adc_ex.c ****   *         To clear this flag, either use function: 
 873:src/stm32f1xx_hal_adc_ex.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
 874:src/stm32f1xx_hal_adc_ex.c ****   *         model polling: @ref HAL_ADCEx_InjectedPollForConversion() 
 875:src/stm32f1xx_hal_adc_ex.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_JEOS).
 876:src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 877:src/stm32f1xx_hal_adc_ex.c ****   * @param  InjectedRank: the converted ADC injected rank.
 878:src/stm32f1xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
 879:src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_1: Injected Channel1 selected
 880:src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_2: Injected Channel2 selected
 881:src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
 882:src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
 883:src/stm32f1xx_hal_adc_ex.c ****   * @retval ADC group injected conversion data
 884:src/stm32f1xx_hal_adc_ex.c ****   */
 885:src/stm32f1xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
 886:src/stm32f1xx_hal_adc_ex.c **** {
 1222              		.loc 1 886 0
 1223              		.cfi_startproc
 1224              		@ args = 0, pretend = 0, frame = 0
 1225              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccHubou1.s 			page 40


 1226              		@ link register save eliminated.
 1227              	.LVL79:
 887:src/stm32f1xx_hal_adc_ex.c ****   uint32_t tmp_jdr = 0U;
 888:src/stm32f1xx_hal_adc_ex.c ****   
 889:src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 890:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 891:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
 892:src/stm32f1xx_hal_adc_ex.c ****   
 893:src/stm32f1xx_hal_adc_ex.c ****   /* Get ADC converted value */ 
 894:src/stm32f1xx_hal_adc_ex.c ****   switch(InjectedRank)
 1228              		.loc 1 894 0
 1229 0560 0329     		cmp	r1, #3	@ InjectedRank,
 1230 0562 0368     		ldr	r3, [r0]	@ _7, hadc_4(D)->Instance
 1231 0564 07D0     		beq	.L116	@,
 1232 0566 0429     		cmp	r1, #4	@ InjectedRank,
 1233 0568 03D0     		beq	.L117	@,
 1234 056a 0229     		cmp	r1, #2	@ InjectedRank,
 1235 056c 05D1     		bne	.L120	@,
 895:src/stm32f1xx_hal_adc_ex.c ****   {  
 896:src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_4: 
 897:src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR4;
 898:src/stm32f1xx_hal_adc_ex.c ****       break;
 899:src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_3: 
 900:src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR3;
 901:src/stm32f1xx_hal_adc_ex.c ****       break;
 902:src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_2: 
 903:src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR2;
 1236              		.loc 1 903 0
 1237 056e 186C     		ldr	r0, [r3, #64]	@ <retval>, _9->JDR2
 1238              	.LVL80:
 904:src/stm32f1xx_hal_adc_ex.c ****       break;
 1239              		.loc 1 904 0
 1240 0570 7047     		bx	lr	@
 1241              	.LVL81:
 1242              	.L117:
 897:src/stm32f1xx_hal_adc_ex.c ****       break;
 1243              		.loc 1 897 0
 1244 0572 986C     		ldr	r0, [r3, #72]	@ <retval>, _5->JDR4
 1245              	.LVL82:
 898:src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_3: 
 1246              		.loc 1 898 0
 1247 0574 7047     		bx	lr	@
 1248              	.LVL83:
 1249              	.L116:
 900:src/stm32f1xx_hal_adc_ex.c ****       break;
 1250              		.loc 1 900 0
 1251 0576 586C     		ldr	r0, [r3, #68]	@ <retval>, _7->JDR3
 1252              	.LVL84:
 901:src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_2: 
 1253              		.loc 1 901 0
 1254 0578 7047     		bx	lr	@
 1255              	.LVL85:
 1256              	.L120:
 905:src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_1:
 906:src/stm32f1xx_hal_adc_ex.c ****     default:
 907:src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR1;
 1257              		.loc 1 907 0
ARM GAS  /tmp/ccHubou1.s 			page 41


 1258 057a D86B     		ldr	r0, [r3, #60]	@ <retval>, _11->JDR1
 1259              	.LVL86:
 908:src/stm32f1xx_hal_adc_ex.c ****       break;
 909:src/stm32f1xx_hal_adc_ex.c ****   }
 910:src/stm32f1xx_hal_adc_ex.c ****   
 911:src/stm32f1xx_hal_adc_ex.c ****   /* Return ADC converted value */ 
 912:src/stm32f1xx_hal_adc_ex.c ****   return tmp_jdr;
 913:src/stm32f1xx_hal_adc_ex.c **** }
 1260              		.loc 1 913 0
 1261 057c 7047     		bx	lr	@
 1262              		.cfi_endproc
 1263              	.LFE73:
 1264              		.size	HAL_ADCEx_InjectedGetValue, .-HAL_ADCEx_InjectedGetValue
 1265              		.align	1
 1266              		.global	HAL_ADCEx_MultiModeGetValue
 1267              		.syntax unified
 1268              		.thumb
 1269              		.thumb_func
 1270              		.fpu softvfp
 1271              		.type	HAL_ADCEx_MultiModeGetValue, %function
 1272              	HAL_ADCEx_MultiModeGetValue:
 1273              	.LFB74:
 914:src/stm32f1xx_hal_adc_ex.c **** 
 915:src/stm32f1xx_hal_adc_ex.c **** #if defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F105xC) || defined (STM32F107xC
 916:src/stm32f1xx_hal_adc_ex.c **** /**
 917:src/stm32f1xx_hal_adc_ex.c ****   * @brief  Returns the last ADC Master&Slave regular conversions results data
 918:src/stm32f1xx_hal_adc_ex.c ****   *         in the selected multi mode.
 919:src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
 920:src/stm32f1xx_hal_adc_ex.c ****   * @retval The converted data value.
 921:src/stm32f1xx_hal_adc_ex.c ****   */
 922:src/stm32f1xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef* hadc)
 923:src/stm32f1xx_hal_adc_ex.c **** {
 1274              		.loc 1 923 0
 1275              		.cfi_startproc
 1276              		@ args = 0, pretend = 0, frame = 0
 1277              		@ frame_needed = 0, uses_anonymous_args = 0
 1278              		@ link register save eliminated.
 1279              	.LVL87:
 924:src/stm32f1xx_hal_adc_ex.c ****   uint32_t tmpDR = 0U;
 925:src/stm32f1xx_hal_adc_ex.c ****   
 926:src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 927:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 928:src/stm32f1xx_hal_adc_ex.c ****   
 929:src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 930:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 931:src/stm32f1xx_hal_adc_ex.c **** 
 932:src/stm32f1xx_hal_adc_ex.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
 933:src/stm32f1xx_hal_adc_ex.c ****   /*       cleared by hardware when reading register DR.                      */
 934:src/stm32f1xx_hal_adc_ex.c ****   
 935:src/stm32f1xx_hal_adc_ex.c ****   /* On STM32F1 devices, ADC1 data register DR contains ADC2 conversions      */
 936:src/stm32f1xx_hal_adc_ex.c ****   /* only if ADC1 DMA mode is enabled.                                        */
 937:src/stm32f1xx_hal_adc_ex.c ****   tmpDR = hadc->Instance->DR;
 1280              		.loc 1 937 0
 1281 057e 0368     		ldr	r3, [r0]	@ _4, hadc_3(D)->Instance
 1282 0580 D86C     		ldr	r0, [r3, #76]	@ <retval>, _4->DR
 1283              	.LVL88:
 938:src/stm32f1xx_hal_adc_ex.c **** 
ARM GAS  /tmp/ccHubou1.s 			page 42


 939:src/stm32f1xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(ADC1->CR2, ADC_CR2_DMA))
 1284              		.loc 1 939 0
 1285 0582 044B     		ldr	r3, .L123	@ tmp117,
 1286 0584 9B68     		ldr	r3, [r3, #8]	@ _6, MEM[(struct ADC_TypeDef *)1073816576B].CR2
 1287 0586 DB05     		lsls	r3, r3, #23	@, _6,
 940:src/stm32f1xx_hal_adc_ex.c ****   {
 941:src/stm32f1xx_hal_adc_ex.c ****     tmpDR |= (ADC2->DR << 16U);
 1288              		.loc 1 941 0
 1289 0588 5EBF     		ittt	pl
 1290 058a 034B     		ldrpl	r3, .L123+4	@ tmp119,
 1291 058c DB6C     		ldrpl	r3, [r3, #76]	@ _8, MEM[(struct ADC_TypeDef *)1073817600B].DR
 1292 058e 40EA0340 		orrpl	r0, r0, r3, lsl #16	@ <retval>, <retval>, _8,
 1293              	.LVL89:
 942:src/stm32f1xx_hal_adc_ex.c ****   }
 943:src/stm32f1xx_hal_adc_ex.c ****     
 944:src/stm32f1xx_hal_adc_ex.c ****   /* Return ADC converted value */ 
 945:src/stm32f1xx_hal_adc_ex.c ****   return tmpDR;
 946:src/stm32f1xx_hal_adc_ex.c **** }
 1294              		.loc 1 946 0
 1295 0592 7047     		bx	lr	@
 1296              	.L124:
 1297              		.align	2
 1298              	.L123:
 1299 0594 00240140 		.word	1073816576
 1300 0598 00280140 		.word	1073817600
 1301              		.cfi_endproc
 1302              	.LFE74:
 1303              		.size	HAL_ADCEx_MultiModeGetValue, .-HAL_ADCEx_MultiModeGetValue
 1304              		.align	1
 1305              		.weak	HAL_ADCEx_InjectedConvCpltCallback
 1306              		.syntax unified
 1307              		.thumb
 1308              		.thumb_func
 1309              		.fpu softvfp
 1310              		.type	HAL_ADCEx_InjectedConvCpltCallback, %function
 1311              	HAL_ADCEx_InjectedConvCpltCallback:
 1312              	.LFB75:
 947:src/stm32f1xx_hal_adc_ex.c **** #endif /* defined STM32F103x6 || defined STM32F103xB || defined STM32F105xC || defined STM32F107xC 
 948:src/stm32f1xx_hal_adc_ex.c **** 
 949:src/stm32f1xx_hal_adc_ex.c **** /**
 950:src/stm32f1xx_hal_adc_ex.c ****   * @brief  Injected conversion complete callback in non blocking mode 
 951:src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 952:src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 953:src/stm32f1xx_hal_adc_ex.c ****   */
 954:src/stm32f1xx_hal_adc_ex.c **** __weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
 955:src/stm32f1xx_hal_adc_ex.c **** {
 1313              		.loc 1 955 0
 1314              		.cfi_startproc
 1315              		@ args = 0, pretend = 0, frame = 0
 1316              		@ frame_needed = 0, uses_anonymous_args = 0
 1317              		@ link register save eliminated.
 1318              	.LVL90:
 1319 059c 7047     		bx	lr	@
 1320              		.cfi_endproc
 1321              	.LFE75:
 1322              		.size	HAL_ADCEx_InjectedConvCpltCallback, .-HAL_ADCEx_InjectedConvCpltCallback
 1323              		.align	1
ARM GAS  /tmp/ccHubou1.s 			page 43


 1324              		.global	HAL_ADCEx_InjectedConfigChannel
 1325              		.syntax unified
 1326              		.thumb
 1327              		.thumb_func
 1328              		.fpu softvfp
 1329              		.type	HAL_ADCEx_InjectedConfigChannel, %function
 1330              	HAL_ADCEx_InjectedConfigChannel:
 1331              	.LFB76:
 956:src/stm32f1xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
 957:src/stm32f1xx_hal_adc_ex.c ****   UNUSED(hadc);
 958:src/stm32f1xx_hal_adc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 959:src/stm32f1xx_hal_adc_ex.c ****             the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
 960:src/stm32f1xx_hal_adc_ex.c ****   */
 961:src/stm32f1xx_hal_adc_ex.c **** }
 962:src/stm32f1xx_hal_adc_ex.c **** 
 963:src/stm32f1xx_hal_adc_ex.c **** /**
 964:src/stm32f1xx_hal_adc_ex.c ****   * @}
 965:src/stm32f1xx_hal_adc_ex.c ****   */
 966:src/stm32f1xx_hal_adc_ex.c **** 
 967:src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group2 Extended Peripheral Control functions
 968:src/stm32f1xx_hal_adc_ex.c ****   * @brief    Extended Peripheral Control functions
 969:src/stm32f1xx_hal_adc_ex.c ****   *
 970:src/stm32f1xx_hal_adc_ex.c **** @verbatim   
 971:src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================
 972:src/stm32f1xx_hal_adc_ex.c ****              ##### Peripheral Control functions #####
 973:src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================  
 974:src/stm32f1xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
 975:src/stm32f1xx_hal_adc_ex.c ****       (+) Configure channels on injected group
 976:src/stm32f1xx_hal_adc_ex.c ****       (+) Configure multimode
 977:src/stm32f1xx_hal_adc_ex.c **** 
 978:src/stm32f1xx_hal_adc_ex.c **** @endverbatim
 979:src/stm32f1xx_hal_adc_ex.c ****   * @{
 980:src/stm32f1xx_hal_adc_ex.c ****   */
 981:src/stm32f1xx_hal_adc_ex.c **** 
 982:src/stm32f1xx_hal_adc_ex.c **** /**
 983:src/stm32f1xx_hal_adc_ex.c ****   * @brief  Configures the ADC injected group and the selected channel to be
 984:src/stm32f1xx_hal_adc_ex.c ****   *         linked to the injected group.
 985:src/stm32f1xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
 986:src/stm32f1xx_hal_adc_ex.c ****   *         This function initializes injected group, following calls to this 
 987:src/stm32f1xx_hal_adc_ex.c ****   *         function can be used to reconfigure some parameters of structure
 988:src/stm32f1xx_hal_adc_ex.c ****   *         "ADC_InjectionConfTypeDef" on the fly, without reseting the ADC.
 989:src/stm32f1xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state: 
 990:src/stm32f1xx_hal_adc_ex.c ****   *         this function must be called when ADC is not under conversion.
 991:src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 992:src/stm32f1xx_hal_adc_ex.c ****   * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
 993:src/stm32f1xx_hal_adc_ex.c ****   *         injected group.
 994:src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 995:src/stm32f1xx_hal_adc_ex.c ****   */
 996:src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef
 997:src/stm32f1xx_hal_adc_ex.c **** {
 1332              		.loc 1 997 0
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 8
 1335              		@ frame_needed = 0, uses_anonymous_args = 0
 1336              	.LVL91:
 1337              		.loc 1 997 0
 1338 059e F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}	@
ARM GAS  /tmp/ccHubou1.s 			page 44


 1339              	.LCFI18:
 1340              		.cfi_def_cfa_offset 32
 1341              		.cfi_offset 4, -20
 1342              		.cfi_offset 5, -16
 1343              		.cfi_offset 6, -12
 1344              		.cfi_offset 7, -8
 1345              		.cfi_offset 14, -4
 1346              		.loc 1 997 0
 1347 05a0 0246     		mov	r2, r0	@ hadc, hadc
 998:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 999:src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0U;
 1348              		.loc 1 999 0
 1349 05a2 0020     		movs	r0, #0	@ tmp218,
 1350              	.LVL92:
1000:src/stm32f1xx_hal_adc_ex.c ****   
1001:src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
1002:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1003:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
1004:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
1005:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
1006:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
1007:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_RANGE(sConfigInjected->InjectedOffset));
1008:src/stm32f1xx_hal_adc_ex.c ****   
1009:src/stm32f1xx_hal_adc_ex.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
1010:src/stm32f1xx_hal_adc_ex.c ****   {
1011:src/stm32f1xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
1012:src/stm32f1xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
1013:src/stm32f1xx_hal_adc_ex.c ****     assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
1014:src/stm32f1xx_hal_adc_ex.c ****   }
1015:src/stm32f1xx_hal_adc_ex.c ****   
1016:src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
1017:src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1351              		.loc 1 1017 0
 1352 05a4 92F82430 		ldrb	r3, [r2, #36]	@ zero_extendqisi2	@ hadc_18(D)->Lock, hadc_18(D)->Lock
 999:src/stm32f1xx_hal_adc_ex.c ****   
 1353              		.loc 1 999 0
 1354 05a8 0190     		str	r0, [sp, #4]	@ tmp218, wait_loop_index
 1355              		.loc 1 1017 0
 1356 05aa 012B     		cmp	r3, #1	@ hadc_18(D)->Lock,
 1357 05ac 00F0D880 		beq	.L149	@,
 1358              		.loc 1 1017 0 is_stmt 0 discriminator 2
 1359 05b0 0127     		movs	r7, #1	@ tmp220,
1009:src/stm32f1xx_hal_adc_ex.c ****   {
 1360              		.loc 1 1009 0 is_stmt 1 discriminator 2
 1361 05b2 D2F808E0 		ldr	lr, [r2, #8]	@ _19, hadc_18(D)->Init.ScanConvMode
 1362              		.loc 1 1017 0 discriminator 2
 1363 05b6 82F82470 		strb	r7, [r2, #36]	@ tmp220, hadc_18(D)->Lock
 1364 05ba 4E68     		ldr	r6, [r1, #4]	@ _34, sConfigInjected_22(D)->InjectedRank
 1365 05bc 1368     		ldr	r3, [r2]	@ _62, hadc_18(D)->Instance
 1366 05be 0D68     		ldr	r5, [r1]	@ sConfigInjected_22(D)->InjectedChannel, sConfigInjected_22(D)->InjectedChannel
1018:src/stm32f1xx_hal_adc_ex.c ****   
1019:src/stm32f1xx_hal_adc_ex.c ****   /* Configuration of injected group sequencer:                               */
1020:src/stm32f1xx_hal_adc_ex.c ****   /* - if scan mode is disabled, injected channels sequence length is set to  */
1021:src/stm32f1xx_hal_adc_ex.c ****   /*   0x00: 1 channel converted (channel on regular rank 1)                  */
1022:src/stm32f1xx_hal_adc_ex.c ****   /*   Parameter "InjectedNbrOfConversion" is discarded.                      */
1023:src/stm32f1xx_hal_adc_ex.c ****   /*   Note: Scan mode is present by hardware on this device and, if          */
1024:src/stm32f1xx_hal_adc_ex.c ****   /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
ARM GAS  /tmp/ccHubou1.s 			page 45


1025:src/stm32f1xx_hal_adc_ex.c ****   /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
1026:src/stm32f1xx_hal_adc_ex.c ****   /* - if scan mode is enabled, injected channels sequence length is set to   */
1027:src/stm32f1xx_hal_adc_ex.c ****   /*   parameter "InjectedNbrOfConversion".                                   */
1028:src/stm32f1xx_hal_adc_ex.c ****   if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 1367              		.loc 1 1028 0 discriminator 2
 1368 05c0 BEF1000F 		cmp	lr, #0	@ _19
 1369 05c4 7BD1     		bne	.L128	@
1029:src/stm32f1xx_hal_adc_ex.c ****   {
1030:src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 1370              		.loc 1 1030 0
 1371 05c6 BE42     		cmp	r6, r7	@ _34,
 1372 05c8 73D1     		bne	.L129	@,
 998:src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0U;
 1373              		.loc 1 998 0
 1374 05ca 7046     		mov	r0, lr	@ <retval>, _19
1031:src/stm32f1xx_hal_adc_ex.c ****     {
1032:src/stm32f1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for all injected ranks */
1033:src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                             ,
 1375              		.loc 1 1033 0
 1376 05cc 9C6B     		ldr	r4, [r3, #56]	@ _28, _27->JSQR
 1377 05ce A40D     		lsrs	r4, r4, #22	@ tmp225, _28,
 1378 05d0 A405     		lsls	r4, r4, #22	@ tmp225, tmp225,
 1379 05d2 44EAC534 		orr	r4, r4, r5, lsl #15	@ _32, tmp225, sConfigInjected_22(D)->InjectedChannel,
 1380 05d6 9C63     		str	r4, [r3, #56]	@ _32, _27->JSQR
 1381              	.LVL93:
 1382              	.L130:
1034:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL   |
1035:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ4 |
1036:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ3 |
1037:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ2 |
1038:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ1                                    ,
1039:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(sConfigInjected->InjectedChannel,
1040:src/stm32f1xx_hal_adc_ex.c ****                                   ADC_INJECTED_RANK_1,
1041:src/stm32f1xx_hal_adc_ex.c ****                                   0x01U));
1042:src/stm32f1xx_hal_adc_ex.c ****     }
1043:src/stm32f1xx_hal_adc_ex.c ****     /* If another injected rank than rank1 was intended to be set, and could  */
1044:src/stm32f1xx_hal_adc_ex.c ****     /* not due to ScanConvMode disabled, error is reported.                   */
1045:src/stm32f1xx_hal_adc_ex.c ****     else
1046:src/stm32f1xx_hal_adc_ex.c ****     {
1047:src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1048:src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1049:src/stm32f1xx_hal_adc_ex.c ****       
1050:src/stm32f1xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
1051:src/stm32f1xx_hal_adc_ex.c ****     }
1052:src/stm32f1xx_hal_adc_ex.c ****   }
1053:src/stm32f1xx_hal_adc_ex.c ****   else
1054:src/stm32f1xx_hal_adc_ex.c ****   {
1055:src/stm32f1xx_hal_adc_ex.c ****     /* Since injected channels rank conv. order depends on total number of   */
1056:src/stm32f1xx_hal_adc_ex.c ****     /* injected conversions, selected rank must be below or equal to total   */
1057:src/stm32f1xx_hal_adc_ex.c ****     /* number of injected conversions to be updated.                         */
1058:src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
1059:src/stm32f1xx_hal_adc_ex.c ****     {
1060:src/stm32f1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for the selected rank */
1061:src/stm32f1xx_hal_adc_ex.c ****       /* Set the SQx bits for the selected rank */
1062:src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                                         ,
1063:src/stm32f1xx_hal_adc_ex.c ****                  
1064:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL                                               |
ARM GAS  /tmp/ccHubou1.s 			page 46


1065:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(ADC_JSQR_JSQ1,                         
1066:src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
1067:src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion)   ,
1068:src/stm32f1xx_hal_adc_ex.c ****                  
1069:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL_SHIFT(sConfigInjected->InjectedNbrOfConversion) |
1070:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(sConfigInjected->InjectedChannel,      
1071:src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
1072:src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion)    );
1073:src/stm32f1xx_hal_adc_ex.c ****     }
1074:src/stm32f1xx_hal_adc_ex.c ****     else
1075:src/stm32f1xx_hal_adc_ex.c ****     {
1076:src/stm32f1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for the selected rank */
1077:src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                                       ,
1078:src/stm32f1xx_hal_adc_ex.c ****                  
1079:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL                                               |
1080:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(ADC_JSQR_JSQ1,                         
1081:src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
1082:src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion) ,
1083:src/stm32f1xx_hal_adc_ex.c ****                  
1084:src/stm32f1xx_hal_adc_ex.c ****                  0x00000000U);
1085:src/stm32f1xx_hal_adc_ex.c ****     }
1086:src/stm32f1xx_hal_adc_ex.c ****   } 
1087:src/stm32f1xx_hal_adc_ex.c ****     
1088:src/stm32f1xx_hal_adc_ex.c ****   /* Configuration of injected group                                          */
1089:src/stm32f1xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
1090:src/stm32f1xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
1091:src/stm32f1xx_hal_adc_ex.c ****   /*  - external trigger to start conversion                                  */
1092:src/stm32f1xx_hal_adc_ex.c ****   /* Parameters update not conditioned to ADC state:                          */
1093:src/stm32f1xx_hal_adc_ex.c ****   /*  - Automatic injected conversion                                         */
1094:src/stm32f1xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode                                           */
1095:src/stm32f1xx_hal_adc_ex.c ****   /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
1096:src/stm32f1xx_hal_adc_ex.c ****   /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
1097:src/stm32f1xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 1383              		.loc 1 1097 0
 1384 05d8 9C68     		ldr	r4, [r3, #8]	@ _63, _62->CR2
 1385 05da E407     		lsls	r4, r4, #31	@, _63,
 1386 05dc 07D4     		bmi	.L132	@,
1098:src/stm32f1xx_hal_adc_ex.c ****   {    
1099:src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CR2                                           ,
 1387              		.loc 1 1099 0
 1388 05de 9C68     		ldr	r4, [r3, #8]	@ _65, _62->CR2
 1389 05e0 8F69     		ldr	r7, [r1, #24]	@ sConfigInjected_22(D)->ExternalTrigInjecConv, sConfigInjected_22(D)->ExternalT
 1390 05e2 24F4E044 		bic	r4, r4, #28672	@ tmp251, _65,
 1391 05e6 24F00104 		bic	r4, r4, #1	@ tmp251, tmp251,
 1392 05ea 3C43     		orrs	r4, r4, r7	@, _68, tmp251, sConfigInjected_22(D)->ExternalTrigInjecConv
 1393 05ec 9C60     		str	r4, [r3, #8]	@ _68, _62->CR2
 1394              	.L132:
1100:src/stm32f1xx_hal_adc_ex.c ****                ADC_CR2_JEXTSEL |
1101:src/stm32f1xx_hal_adc_ex.c ****                ADC_CR2_ADON                                                  ,
1102:src/stm32f1xx_hal_adc_ex.c ****                ADC_CFGR_JEXTSEL(hadc, sConfigInjected->ExternalTrigInjecConv) );
1103:src/stm32f1xx_hal_adc_ex.c ****   }
1104:src/stm32f1xx_hal_adc_ex.c ****   
1105:src/stm32f1xx_hal_adc_ex.c ****   
1106:src/stm32f1xx_hal_adc_ex.c ****   /* Configuration of injected group                                          */
1107:src/stm32f1xx_hal_adc_ex.c ****   /*  - Automatic injected conversion                                         */
1108:src/stm32f1xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode                                           */
1109:src/stm32f1xx_hal_adc_ex.c ****   
ARM GAS  /tmp/ccHubou1.s 			page 47


1110:src/stm32f1xx_hal_adc_ex.c ****     /* Automatic injected conversion can be enabled if injected group         */
1111:src/stm32f1xx_hal_adc_ex.c ****     /* external triggers are disabled.                                        */
1112:src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->AutoInjectedConv == ENABLE)
 1395              		.loc 1 1112 0
 1396 05ee 4C7D     		ldrb	r4, [r1, #21]	@ zero_extendqisi2	@ _70, sConfigInjected_22(D)->AutoInjectedConv
 1397 05f0 012C     		cmp	r4, #1	@ _70,
 1398 05f2 0DD1     		bne	.L133	@,
1113:src/stm32f1xx_hal_adc_ex.c ****     {
1114:src/stm32f1xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 1399              		.loc 1 1114 0
 1400 05f4 8F69     		ldr	r7, [r1, #24]	@ sConfigInjected_22(D)->ExternalTrigInjecConv, sConfigInjected_22(D)->ExternalT
 1401 05f6 B7F5E04F 		cmp	r7, #28672	@ sConfigInjected_22(D)->ExternalTrigInjecConv,
1115:src/stm32f1xx_hal_adc_ex.c ****       {
1116:src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
1117:src/stm32f1xx_hal_adc_ex.c ****       }
1118:src/stm32f1xx_hal_adc_ex.c ****       else
1119:src/stm32f1xx_hal_adc_ex.c ****       {
1120:src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1121:src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1402              		.loc 1 1121 0
 1403 05fa 17BF     		itett	ne
 1404 05fc 906A     		ldrne	r0, [r2, #40]	@ _75, hadc_18(D)->State
 1405              	.LVL94:
1116:src/stm32f1xx_hal_adc_ex.c ****       }
 1406              		.loc 1 1116 0
 1407 05fe 5F68     		ldreq	r7, [r3, #4]	@ _72, _62->CR1
 1408              		.loc 1 1121 0
 1409 0600 40F02000 		orrne	r0, r0, #32	@ _76, _75,
 1410 0604 9062     		strne	r0, [r2, #40]	@ _76, hadc_18(D)->State
 1411              	.LVL95:
1122:src/stm32f1xx_hal_adc_ex.c ****         
1123:src/stm32f1xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 1412              		.loc 1 1123 0
 1413 0606 12BF     		itee	ne
 1414 0608 2046     		movne	r0, r4	@ <retval>, _70
1116:src/stm32f1xx_hal_adc_ex.c ****       }
 1415              		.loc 1 1116 0
 1416 060a 47F48067 		orreq	r7, r7, #1024	@ _73, _72,
 1417 060e 5F60     		streq	r7, [r3, #4]	@ _73, _62->CR1
 1418              	.LVL96:
 1419              	.L133:
1124:src/stm32f1xx_hal_adc_ex.c ****       }
1125:src/stm32f1xx_hal_adc_ex.c ****     }
1126:src/stm32f1xx_hal_adc_ex.c ****     
1127:src/stm32f1xx_hal_adc_ex.c ****     /* Injected discontinuous can be enabled only if auto-injected mode is    */
1128:src/stm32f1xx_hal_adc_ex.c ****     /* disabled.                                                              */  
1129:src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 1420              		.loc 1 1129 0
 1421 0610 0F7D     		ldrb	r7, [r1, #20]	@ zero_extendqisi2	@ sConfigInjected_22(D)->InjectedDiscontinuousConvMode, sCon
 1422 0612 012F     		cmp	r7, #1	@ sConfigInjected_22(D)->InjectedDiscontinuousConvMode,
 1423 0614 05D1     		bne	.L135	@,
1130:src/stm32f1xx_hal_adc_ex.c ****     {
1131:src/stm32f1xx_hal_adc_ex.c ****       if (sConfigInjected->AutoInjectedConv == DISABLE)
 1424              		.loc 1 1131 0
 1425 0616 002C     		cmp	r4, #0	@ _70
 1426 0618 74D1     		bne	.L136	@
1132:src/stm32f1xx_hal_adc_ex.c ****       {
ARM GAS  /tmp/ccHubou1.s 			page 48


1133:src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 1427              		.loc 1 1133 0
 1428 061a 5C68     		ldr	r4, [r3, #4]	@ _79, _62->CR1
 1429 061c 44F48054 		orr	r4, r4, #4096	@ _80, _79,
 1430 0620 5C60     		str	r4, [r3, #4]	@ _80, _62->CR1
 1431              	.LVL97:
 1432              	.L135:
1134:src/stm32f1xx_hal_adc_ex.c ****       } 
1135:src/stm32f1xx_hal_adc_ex.c ****       else
1136:src/stm32f1xx_hal_adc_ex.c ****       {
1137:src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1138:src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1139:src/stm32f1xx_hal_adc_ex.c ****         
1140:src/stm32f1xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
1141:src/stm32f1xx_hal_adc_ex.c ****       }
1142:src/stm32f1xx_hal_adc_ex.c ****     }
1143:src/stm32f1xx_hal_adc_ex.c **** 
1144:src/stm32f1xx_hal_adc_ex.c **** 
1145:src/stm32f1xx_hal_adc_ex.c ****   /* InjectedChannel sampling time configuration */
1146:src/stm32f1xx_hal_adc_ex.c ****   /* For channels 10 to 17 */
1147:src/stm32f1xx_hal_adc_ex.c ****   if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 1433              		.loc 1 1147 0
 1434 0622 092D     		cmp	r5, #9	@ sConfigInjected_22(D)->InjectedChannel,
 1435 0624 4FEA4504 		lsl	r4, r5, #1	@ tmp305, sConfigInjected_22(D)->InjectedChannel,
 1436 0628 D1F808E0 		ldr	lr, [r1, #8]	@ sConfigInjected_22(D)->InjectedSamplingTime, sConfigInjected_22(D)->InjectedSam
 1437 062c 70D9     		bls	.L137	@,
1148:src/stm32f1xx_hal_adc_ex.c ****   {
1149:src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 1438              		.loc 1 1149 0
 1439 062e 4FF0070C 		mov	ip, #7	@ tmp260,
 1440 0632 2C44     		add	r4, r4, r5	@ tmp258, sConfigInjected_22(D)->InjectedChannel
 1441 0634 DF68     		ldr	r7, [r3, #12]	@ _86, _62->SMPR1
 1442 0636 1E3C     		subs	r4, r4, #30	@ _88, tmp258,
 1443 0638 0CFA04FC 		lsl	ip, ip, r4	@ tmp259, tmp260, _88
 1444 063c 27EA0C07 		bic	r7, r7, ip	@ tmp262, _86, tmp259
 1445 0640 0EFA04F4 		lsl	r4, lr, r4	@ tmp263, sConfigInjected_22(D)->InjectedSamplingTime, _88
 1446 0644 3C43     		orrs	r4, r4, r7	@, _94, tmp263, tmp262
 1447 0646 DC60     		str	r4, [r3, #12]	@ _94, _62->SMPR1
 1448              	.L138:
1150:src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
1151:src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) )
1152:src/stm32f1xx_hal_adc_ex.c ****   }
1153:src/stm32f1xx_hal_adc_ex.c ****   else /* For channels 0 to 9 */
1154:src/stm32f1xx_hal_adc_ex.c ****   {
1155:src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR2                                                             ,
1156:src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel)                       ,
1157:src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) )
1158:src/stm32f1xx_hal_adc_ex.c ****   }
1159:src/stm32f1xx_hal_adc_ex.c ****   
1160:src/stm32f1xx_hal_adc_ex.c ****   /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
1161:src/stm32f1xx_hal_adc_ex.c ****   /* and VREFINT measurement path.                                            */
1162:src/stm32f1xx_hal_adc_ex.c ****   if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 1449              		.loc 1 1162 0
 1450 0648 A5F11004 		sub	r4, r5, #16	@ _105, sConfigInjected_22(D)->InjectedChannel,
 1451 064c 012C     		cmp	r4, #1	@ _105,
1163:src/stm32f1xx_hal_adc_ex.c ****       (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
1164:src/stm32f1xx_hal_adc_ex.c ****   {
ARM GAS  /tmp/ccHubou1.s 			page 49


1165:src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 1452              		.loc 1 1165 0
 1453 064e 98BF     		it	ls
 1454 0650 9F68     		ldrls	r7, [r3, #8]	@ _106, _62->CR2
 1455 0652 DFF81CE1 		ldr	lr, .L153+12	@ tmp307,
 1456 0656 9CBF     		itt	ls
 1457 0658 47F40007 		orrls	r7, r7, #8388608	@ _107, _106,
 1458 065c 9F60     		strls	r7, [r3, #8]	@ _107, _62->CR2
1166:src/stm32f1xx_hal_adc_ex.c ****   }
1167:src/stm32f1xx_hal_adc_ex.c ****   
1168:src/stm32f1xx_hal_adc_ex.c ****   
1169:src/stm32f1xx_hal_adc_ex.c ****   /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
1170:src/stm32f1xx_hal_adc_ex.c ****   switch(sConfigInjected->InjectedRank)
 1459              		.loc 1 1170 0
 1460 065e 022E     		cmp	r6, #2	@ _34,
 1461 0660 CF68     		ldr	r7, [r1, #12]	@ sConfigInjected_22(D)->InjectedOffset, sConfigInjected_22(D)->InjectedOffset
 1462 0662 62D0     		beq	.L141	@,
 1463 0664 032E     		cmp	r6, #3	@ _34,
 1464 0666 66D0     		beq	.L142	@,
 1465 0668 012E     		cmp	r6, #1	@ _34,
 1466 066a 6AD1     		bne	.L150	@,
1171:src/stm32f1xx_hal_adc_ex.c ****   {
1172:src/stm32f1xx_hal_adc_ex.c ****     case 1:
1173:src/stm32f1xx_hal_adc_ex.c ****       /* Set injected channel 1 offset */
1174:src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR1,
 1467              		.loc 1 1174 0
 1468 066c 5969     		ldr	r1, [r3, #20]	@ _110, _62->JOFR1
 1469              	.LVL98:
 1470 066e 01EA0E01 		and	r1, r1, lr	@ tmp275, _110, tmp307
 1471 0672 3943     		orrs	r1, r1, r7	@, _113, tmp275, sConfigInjected_22(D)->InjectedOffset
 1472 0674 5961     		str	r1, [r3, #20]	@ _113, _62->JOFR1
 1473              	.L144:
1175:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR1_JOFFSET1,
1176:src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1177:src/stm32f1xx_hal_adc_ex.c ****       break;
1178:src/stm32f1xx_hal_adc_ex.c ****     case 2:
1179:src/stm32f1xx_hal_adc_ex.c ****       /* Set injected channel 2 offset */
1180:src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR2,
1181:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR2_JOFFSET2,
1182:src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1183:src/stm32f1xx_hal_adc_ex.c ****       break;
1184:src/stm32f1xx_hal_adc_ex.c ****     case 3:
1185:src/stm32f1xx_hal_adc_ex.c ****       /* Set injected channel 3 offset */
1186:src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR3,
1187:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR3_JOFFSET3,
1188:src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1189:src/stm32f1xx_hal_adc_ex.c ****       break;
1190:src/stm32f1xx_hal_adc_ex.c ****     case 4:
1191:src/stm32f1xx_hal_adc_ex.c ****     default:
1192:src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR4,
1193:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR4_JOFFSET4,
1194:src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1195:src/stm32f1xx_hal_adc_ex.c ****       break;
1196:src/stm32f1xx_hal_adc_ex.c ****   }
1197:src/stm32f1xx_hal_adc_ex.c ****   
1198:src/stm32f1xx_hal_adc_ex.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
1199:src/stm32f1xx_hal_adc_ex.c ****   /* and VREFINT measurement path.                                            */
ARM GAS  /tmp/ccHubou1.s 			page 50


1200:src/stm32f1xx_hal_adc_ex.c ****   if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 1474              		.loc 1 1200 0
 1475 0676 012C     		cmp	r4, #1	@ _105,
 1476 0678 16D8     		bhi	.L145	@,
1201:src/stm32f1xx_hal_adc_ex.c ****       (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
1202:src/stm32f1xx_hal_adc_ex.c ****   {
1203:src/stm32f1xx_hal_adc_ex.c ****     /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
1204:src/stm32f1xx_hal_adc_ex.c ****     /* measurement channels (VrefInt/TempSensor). If these channels are       */
1205:src/stm32f1xx_hal_adc_ex.c ****     /* intended to be set on other ADC instances, an error is reported.       */
1206:src/stm32f1xx_hal_adc_ex.c ****     if (hadc->Instance == ADC1)
 1477              		.loc 1 1206 0
 1478 067a 3A49     		ldr	r1, .L153	@ tmp287,
 1479 067c 8B42     		cmp	r3, r1	@ _62, tmp287
 1480 067e 69D1     		bne	.L146	@,
1207:src/stm32f1xx_hal_adc_ex.c ****     {
1208:src/stm32f1xx_hal_adc_ex.c ****       if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 1481              		.loc 1 1208 0
 1482 0680 9968     		ldr	r1, [r3, #8]	@ _130, MEM[(struct ADC_TypeDef *)1073816576B].CR2
 1483 0682 0902     		lsls	r1, r1, #8	@, _130,
 1484 0684 10D4     		bmi	.L145	@,
1209:src/stm32f1xx_hal_adc_ex.c ****       {
1210:src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 1485              		.loc 1 1210 0
 1486 0686 9968     		ldr	r1, [r3, #8]	@ _132, MEM[(struct ADC_TypeDef *)1073816576B].CR2
1211:src/stm32f1xx_hal_adc_ex.c ****         
1212:src/stm32f1xx_hal_adc_ex.c ****         if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 1487              		.loc 1 1212 0
 1488 0688 102D     		cmp	r5, #16	@ sConfigInjected_22(D)->InjectedChannel,
1210:src/stm32f1xx_hal_adc_ex.c ****         
 1489              		.loc 1 1210 0
 1490 068a 41F40001 		orr	r1, r1, #8388608	@ _133, _132,
 1491 068e 9960     		str	r1, [r3, #8]	@ _133, MEM[(struct ADC_TypeDef *)1073816576B].CR2
 1492              		.loc 1 1212 0
 1493 0690 0AD1     		bne	.L145	@,
1213:src/stm32f1xx_hal_adc_ex.c ****         {
1214:src/stm32f1xx_hal_adc_ex.c ****           /* Delay for temperature sensor stabilization time */
1215:src/stm32f1xx_hal_adc_ex.c ****           /* Compute number of CPU cycles to wait for */
1216:src/stm32f1xx_hal_adc_ex.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 1494              		.loc 1 1216 0
 1495 0692 354B     		ldr	r3, .L153+4	@ tmp292,
 1496 0694 3549     		ldr	r1, .L153+8	@ tmp296,
 1497 0696 1B68     		ldr	r3, [r3]	@ SystemCoreClock, SystemCoreClock
 1498 0698 B3FBF1F1 		udiv	r1, r3, r1	@ tmp295, SystemCoreClock, tmp296
 1499 069c 0A23     		movs	r3, #10	@ tmp297,
 1500 069e 4B43     		muls	r3, r1, r3	@ wait_loop_index.14_137, tmp295
 1501              	.L152:
1217:src/stm32f1xx_hal_adc_ex.c ****           while(wait_loop_index != 0U)
1218:src/stm32f1xx_hal_adc_ex.c ****           {
1219:src/stm32f1xx_hal_adc_ex.c ****             wait_loop_index--;
 1502              		.loc 1 1219 0
 1503 06a0 0193     		str	r3, [sp, #4]	@ wait_loop_index.16_141, wait_loop_index
1217:src/stm32f1xx_hal_adc_ex.c ****           while(wait_loop_index != 0U)
 1504              		.loc 1 1217 0
 1505 06a2 019B     		ldr	r3, [sp, #4]	@ wait_loop_index.17_139, wait_loop_index
 1506 06a4 002B     		cmp	r3, #0	@ wait_loop_index.17_139
 1507 06a6 52D1     		bne	.L148	@
 1508              	.LVL99:
ARM GAS  /tmp/ccHubou1.s 			page 51


 1509              	.L145:
1220:src/stm32f1xx_hal_adc_ex.c ****           }
1221:src/stm32f1xx_hal_adc_ex.c ****         }
1222:src/stm32f1xx_hal_adc_ex.c ****       }
1223:src/stm32f1xx_hal_adc_ex.c ****     }
1224:src/stm32f1xx_hal_adc_ex.c ****     else
1225:src/stm32f1xx_hal_adc_ex.c ****     {
1226:src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1227:src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1228:src/stm32f1xx_hal_adc_ex.c ****       
1229:src/stm32f1xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
1230:src/stm32f1xx_hal_adc_ex.c ****     }
1231:src/stm32f1xx_hal_adc_ex.c ****   }
1232:src/stm32f1xx_hal_adc_ex.c ****   
1233:src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
1234:src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1510              		.loc 1 1234 0
 1511 06a8 0023     		movs	r3, #0	@ tmp298,
 1512 06aa 82F82430 		strb	r3, [r2, #36]	@ tmp298, hadc_18(D)->Lock
 1513              	.LVL100:
 1514              	.L127:
1235:src/stm32f1xx_hal_adc_ex.c ****   
1236:src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
1237:src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
1238:src/stm32f1xx_hal_adc_ex.c **** }
 1515              		.loc 1 1238 0
 1516 06ae 03B0     		add	sp, sp, #12	@,,
 1517              	.LCFI19:
 1518              		.cfi_remember_state
 1519              		.cfi_def_cfa_offset 20
 1520              		@ sp needed	@
 1521 06b0 F0BD     		pop	{r4, r5, r6, r7, pc}	@
 1522              	.LVL101:
 1523              	.L129:
 1524              	.LCFI20:
 1525              		.cfi_restore_state
1048:src/stm32f1xx_hal_adc_ex.c ****       
 1526              		.loc 1 1048 0
 1527 06b2 946A     		ldr	r4, [r2, #40]	@ _24, hadc_18(D)->State
1050:src/stm32f1xx_hal_adc_ex.c ****     }
 1528              		.loc 1 1050 0
 1529 06b4 3846     		mov	r0, r7	@ <retval>, tmp220
1048:src/stm32f1xx_hal_adc_ex.c ****       
 1530              		.loc 1 1048 0
 1531 06b6 44F02004 		orr	r4, r4, #32	@ _25, _24,
 1532 06ba 9462     		str	r4, [r2, #40]	@ _25, hadc_18(D)->State
 1533              	.LVL102:
 1534 06bc 8CE7     		b	.L130	@
 1535              	.LVL103:
 1536              	.L128:
1058:src/stm32f1xx_hal_adc_ex.c ****     {
 1537              		.loc 1 1058 0
 1538 06be 0F69     		ldr	r7, [r1, #16]	@ _35, sConfigInjected_22(D)->InjectedNbrOfConversion
1062:src/stm32f1xx_hal_adc_ex.c ****                  
 1539              		.loc 1 1062 0
 1540 06c0 D3F838E0 		ldr	lr, [r3, #56]	@ _37,
 1541 06c4 F41B     		subs	r4, r6, r7	@ tmp304, _34, _35
ARM GAS  /tmp/ccHubou1.s 			page 52


 1542 06c6 04EB8404 		add	r4, r4, r4, lsl #2	@ tmp230, tmp304, tmp304,
1058:src/stm32f1xx_hal_adc_ex.c ****     {
 1543              		.loc 1 1058 0
 1544 06ca BE42     		cmp	r6, r7	@ _34, _35
1062:src/stm32f1xx_hal_adc_ex.c ****                  
 1545              		.loc 1 1062 0
 1546 06cc 04F10F04 		add	r4, r4, #15	@ _40, tmp230,
1058:src/stm32f1xx_hal_adc_ex.c ****     {
 1547              		.loc 1 1058 0
 1548 06d0 10D8     		bhi	.L131	@,
1062:src/stm32f1xx_hal_adc_ex.c ****                  
 1549              		.loc 1 1062 0
 1550 06d2 07F1FF3C 		add	ip, r7, #-1	@ tmp231, _35,
 1551 06d6 05FA04F7 		lsl	r7, r5, r4	@ tmp233, sConfigInjected_22(D)->InjectedChannel, _40
 1552 06da 47EA0C57 		orr	r7, r7, ip, lsl #20	@ tmp235, tmp233, tmp231,
 1553 06de 4FF01F0C 		mov	ip, #31	@ tmp237,
 1554 06e2 0CFA04F4 		lsl	r4, ip, r4	@ tmp236, tmp237, _40
 1555 06e6 44F44014 		orr	r4, r4, #3145728	@ tmp238, tmp236,
 1556 06ea 2EEA0404 		bic	r4, lr, r4	@ tmp240, _37, tmp238
 1557 06ee 3C43     		orrs	r4, r4, r7	@, _50, tmp240, tmp235
 1558              	.L151:
1077:src/stm32f1xx_hal_adc_ex.c ****                  
 1559              		.loc 1 1077 0
 1560 06f0 9C63     		str	r4, [r3, #56]	@ _60,
 1561 06f2 71E7     		b	.L130	@
 1562              	.L131:
 1563 06f4 1F27     		movs	r7, #31	@ tmp247,
 1564 06f6 07FA04F4 		lsl	r4, r7, r4	@ tmp246, tmp247, tmp245
 1565 06fa 44F44014 		orr	r4, r4, #3145728	@ tmp248, tmp246,
 1566 06fe 2EEA0404 		bic	r4, lr, r4	@ _60, _53, tmp248
 1567 0702 F5E7     		b	.L151	@
 1568              	.LVL104:
 1569              	.L136:
1138:src/stm32f1xx_hal_adc_ex.c ****         
 1570              		.loc 1 1138 0
 1571 0704 906A     		ldr	r0, [r2, #40]	@ _82, hadc_18(D)->State
 1572              	.LVL105:
 1573 0706 40F02000 		orr	r0, r0, #32	@ _83, _82,
 1574 070a 9062     		str	r0, [r2, #40]	@ _83, hadc_18(D)->State
 1575              	.LVL106:
1140:src/stm32f1xx_hal_adc_ex.c ****       }
 1576              		.loc 1 1140 0
 1577 070c 3846     		mov	r0, r7	@ <retval>, sConfigInjected_22(D)->InjectedDiscontinuousConvMode
 1578 070e 88E7     		b	.L135	@
 1579              	.LVL107:
 1580              	.L137:
1155:src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel)                       ,
 1581              		.loc 1 1155 0
 1582 0710 4FF0070C 		mov	ip, #7	@ tmp269,
 1583 0714 1F69     		ldr	r7, [r3, #16]	@ _96, _62->SMPR2
 1584 0716 2C44     		add	r4, r4, r5	@ tmp267, sConfigInjected_22(D)->InjectedChannel
 1585 0718 0CFA04FC 		lsl	ip, ip, r4	@ tmp268, tmp269, tmp267
 1586 071c 27EA0C07 		bic	r7, r7, ip	@ tmp271, _96, tmp268
 1587 0720 0EFA04F4 		lsl	r4, lr, r4	@ tmp272, sConfigInjected_22(D)->InjectedSamplingTime, tmp267
 1588 0724 3C43     		orrs	r4, r4, r7	@, _103, tmp272, tmp271
 1589 0726 1C61     		str	r4, [r3, #16]	@ _103, _62->SMPR2
 1590 0728 8EE7     		b	.L138	@
ARM GAS  /tmp/ccHubou1.s 			page 53


 1591              	.L141:
1180:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR2_JOFFSET2,
 1592              		.loc 1 1180 0
 1593 072a 9969     		ldr	r1, [r3, #24]	@ _115, _62->JOFR2
 1594              	.LVL108:
 1595 072c 01EA0E01 		and	r1, r1, lr	@ tmp278, _115, tmp307
 1596 0730 3943     		orrs	r1, r1, r7	@, _118, tmp278, sConfigInjected_22(D)->InjectedOffset
 1597 0732 9961     		str	r1, [r3, #24]	@ _118, _62->JOFR2
1183:src/stm32f1xx_hal_adc_ex.c ****     case 3:
 1598              		.loc 1 1183 0
 1599 0734 9FE7     		b	.L144	@
 1600              	.LVL109:
 1601              	.L142:
1186:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR3_JOFFSET3,
 1602              		.loc 1 1186 0
 1603 0736 D969     		ldr	r1, [r3, #28]	@ _120, _62->JOFR3
 1604              	.LVL110:
 1605 0738 01EA0E01 		and	r1, r1, lr	@ tmp281, _120, tmp307
 1606 073c 3943     		orrs	r1, r1, r7	@, _123, tmp281, sConfigInjected_22(D)->InjectedOffset
 1607 073e D961     		str	r1, [r3, #28]	@ _123, _62->JOFR3
1189:src/stm32f1xx_hal_adc_ex.c ****     case 4:
 1608              		.loc 1 1189 0
 1609 0740 99E7     		b	.L144	@
 1610              	.LVL111:
 1611              	.L150:
1192:src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR4_JOFFSET4,
 1612              		.loc 1 1192 0
 1613 0742 196A     		ldr	r1, [r3, #32]	@ _125, _62->JOFR4
 1614              	.LVL112:
 1615 0744 01EA0E01 		and	r1, r1, lr	@ tmp284, _125, tmp307
 1616 0748 3943     		orrs	r1, r1, r7	@, _128, tmp284, sConfigInjected_22(D)->InjectedOffset
 1617 074a 1962     		str	r1, [r3, #32]	@ _128, _62->JOFR4
1195:src/stm32f1xx_hal_adc_ex.c ****   }
 1618              		.loc 1 1195 0
 1619 074c 93E7     		b	.L144	@
 1620              	.L148:
1219:src/stm32f1xx_hal_adc_ex.c ****           }
 1621              		.loc 1 1219 0
 1622 074e 019B     		ldr	r3, [sp, #4]	@ wait_loop_index.15_140, wait_loop_index
 1623 0750 013B     		subs	r3, r3, #1	@ wait_loop_index.16_141, wait_loop_index.15_140,
 1624 0752 A5E7     		b	.L152	@
 1625              	.L146:
1227:src/stm32f1xx_hal_adc_ex.c ****       
 1626              		.loc 1 1227 0
 1627 0754 936A     		ldr	r3, [r2, #40]	@ _143, hadc_18(D)->State
1229:src/stm32f1xx_hal_adc_ex.c ****     }
 1628              		.loc 1 1229 0
 1629 0756 0120     		movs	r0, #1	@ <retval>,
 1630              	.LVL113:
1227:src/stm32f1xx_hal_adc_ex.c ****       
 1631              		.loc 1 1227 0
 1632 0758 43F02003 		orr	r3, r3, #32	@ _144, _143,
 1633 075c 9362     		str	r3, [r2, #40]	@ _144, hadc_18(D)->State
 1634              	.LVL114:
 1635 075e A3E7     		b	.L145	@
 1636              	.LVL115:
 1637              	.L149:
ARM GAS  /tmp/ccHubou1.s 			page 54


1017:src/stm32f1xx_hal_adc_ex.c ****   
 1638              		.loc 1 1017 0
 1639 0760 0220     		movs	r0, #2	@ <retval>,
 1640 0762 A4E7     		b	.L127	@
 1641              	.L154:
 1642              		.align	2
 1643              	.L153:
 1644 0764 00240140 		.word	1073816576
 1645 0768 00000000 		.word	SystemCoreClock
 1646 076c 40420F00 		.word	1000000
 1647 0770 00F0FFFF 		.word	-4096
 1648              		.cfi_endproc
 1649              	.LFE76:
 1650              		.size	HAL_ADCEx_InjectedConfigChannel, .-HAL_ADCEx_InjectedConfigChannel
 1651              		.align	1
 1652              		.global	HAL_ADCEx_MultiModeConfigChannel
 1653              		.syntax unified
 1654              		.thumb
 1655              		.thumb_func
 1656              		.fpu softvfp
 1657              		.type	HAL_ADCEx_MultiModeConfigChannel, %function
 1658              	HAL_ADCEx_MultiModeConfigChannel:
 1659              	.LFB77:
1239:src/stm32f1xx_hal_adc_ex.c **** 
1240:src/stm32f1xx_hal_adc_ex.c **** #if defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F105xC) || defined (STM32F107xC
1241:src/stm32f1xx_hal_adc_ex.c **** /**
1242:src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enable ADC multimode and configure multimode parameters
1243:src/stm32f1xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
1244:src/stm32f1xx_hal_adc_ex.c ****   *         This function initializes multimode parameters, following  
1245:src/stm32f1xx_hal_adc_ex.c ****   *         calls to this function can be used to reconfigure some parameters 
1246:src/stm32f1xx_hal_adc_ex.c ****   *         of structure "ADC_MultiModeTypeDef" on the fly, without reseting 
1247:src/stm32f1xx_hal_adc_ex.c ****   *         the ADCs (both ADCs of the common group).
1248:src/stm32f1xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state.
1249:src/stm32f1xx_hal_adc_ex.c ****   *         For parameters constraints, see comments of structure 
1250:src/stm32f1xx_hal_adc_ex.c ****   *         "ADC_MultiModeTypeDef".
1251:src/stm32f1xx_hal_adc_ex.c ****   * @note   To change back configuration from multimode to single mode, ADC must
1252:src/stm32f1xx_hal_adc_ex.c ****   *         be reset (using function HAL_ADC_Init() ).
1253:src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1254:src/stm32f1xx_hal_adc_ex.c ****   * @param  multimode: Structure of ADC multimode configuration
1255:src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
1256:src/stm32f1xx_hal_adc_ex.c ****   */
1257:src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* m
1258:src/stm32f1xx_hal_adc_ex.c **** {
 1660              		.loc 1 1258 0
 1661              		.cfi_startproc
 1662              		@ args = 0, pretend = 0, frame = 0
 1663              		@ frame_needed = 0, uses_anonymous_args = 0
 1664              	.LVL116:
1259:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1260:src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
1261:src/stm32f1xx_hal_adc_ex.c ****   
1262:src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
1263:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
1264:src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MODE(multimode->Mode));
1265:src/stm32f1xx_hal_adc_ex.c ****   
1266:src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
1267:src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
ARM GAS  /tmp/ccHubou1.s 			page 55


 1665              		.loc 1 1267 0
 1666 0774 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2	@ hadc_6(D)->Lock, hadc_6(D)->Lock
1258:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1667              		.loc 1 1258 0
 1668 0778 10B5     		push	{r4, lr}	@
 1669              	.LCFI21:
 1670              		.cfi_def_cfa_offset 8
 1671              		.cfi_offset 4, -8
 1672              		.cfi_offset 14, -4
 1673              		.loc 1 1267 0
 1674 077a 012B     		cmp	r3, #1	@ hadc_6(D)->Lock,
1258:src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1675              		.loc 1 1258 0
 1676 077c 0246     		mov	r2, r0	@ hadc, hadc
 1677              		.loc 1 1267 0
 1678 077e 1FD0     		beq	.L159	@,
 1679              		.loc 1 1267 0 is_stmt 0 discriminator 2
 1680 0780 0123     		movs	r3, #1	@ tmp126,
1268:src/stm32f1xx_hal_adc_ex.c ****   
1269:src/stm32f1xx_hal_adc_ex.c ****   /* Set a temporary handle of the ADC slave associated to the ADC master     */
1270:src/stm32f1xx_hal_adc_ex.c ****   ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
1271:src/stm32f1xx_hal_adc_ex.c ****   
1272:src/stm32f1xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
1273:src/stm32f1xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1274:src/stm32f1xx_hal_adc_ex.c ****   /* conversion on going on regular group:                                    */
1275:src/stm32f1xx_hal_adc_ex.c ****   /*  - ADC master and ADC slave DMA configuration                            */
1276:src/stm32f1xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
1277:src/stm32f1xx_hal_adc_ex.c ****   /*  - Multimode mode selection                                              */
1278:src/stm32f1xx_hal_adc_ex.c ****   /* To optimize code, all multimode settings can be set when both ADCs of    */
1279:src/stm32f1xx_hal_adc_ex.c ****   /* the common group are in state: disabled.                                 */
1280:src/stm32f1xx_hal_adc_ex.c ****   if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 1681              		.loc 1 1280 0 is_stmt 1 discriminator 2
 1682 0782 0468     		ldr	r4, [r0]	@ _9, hadc_6(D)->Instance
1267:src/stm32f1xx_hal_adc_ex.c ****   
 1683              		.loc 1 1267 0 discriminator 2
 1684 0784 80F82430 		strb	r3, [r0, #36]	@ tmp126, hadc_6(D)->Lock
 1685              		.loc 1 1280 0 discriminator 2
 1686 0788 A368     		ldr	r3, [r4, #8]	@ _10, _9->CR2
 1687 078a DB07     		lsls	r3, r3, #31	@, _10,
 1688 078c 12D4     		bmi	.L157	@,
1281:src/stm32f1xx_hal_adc_ex.c ****       (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 1689              		.loc 1 1281 0 discriminator 1
 1690 078e 0D4B     		ldr	r3, .L160	@ tmp129,
 1691 0790 9B68     		ldr	r3, [r3, #8]	@ _12, MEM[(struct ADC_TypeDef *)1073817600B].CR2
1280:src/stm32f1xx_hal_adc_ex.c ****       (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 1692              		.loc 1 1280 0 discriminator 1
 1693 0792 13F00103 		ands	r3, r3, #1	@ tmp130, _12,
 1694 0796 0DD1     		bne	.L157	@,
 1695              		.loc 1 1281 0
 1696 0798 0B48     		ldr	r0, .L160+4	@ tmp131,
 1697              	.LVL117:
 1698 079a 8442     		cmp	r4, r0	@ _9, tmp131
 1699 079c 0AD1     		bne	.L157	@,
1282:src/stm32f1xx_hal_adc_ex.c ****       (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
1283:src/stm32f1xx_hal_adc_ex.c ****   {
1284:src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CR1,
 1700              		.loc 1 1284 0
ARM GAS  /tmp/ccHubou1.s 			page 56


 1701 079e 6068     		ldr	r0, [r4, #4]	@ _14, MEM[(struct ADC_TypeDef *)1073816576B].CR1
 1702 07a0 0968     		ldr	r1, [r1]	@ multimode_16(D)->Mode, multimode_16(D)->Mode
 1703              	.LVL118:
 1704 07a2 20F47020 		bic	r0, r0, #983040	@ tmp133, _14,
 1705 07a6 0143     		orrs	r1, r1, r0	@, _18, multimode_16(D)->Mode, tmp133
1259:src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
 1706              		.loc 1 1259 0
 1707 07a8 1846     		mov	r0, r3	@ <retval>, tmp130
 1708              		.loc 1 1284 0
 1709 07aa 6160     		str	r1, [r4, #4]	@ _18, MEM[(struct ADC_TypeDef *)1073816576B].CR1
 1710              	.LVL119:
 1711              	.L158:
1285:src/stm32f1xx_hal_adc_ex.c ****                ADC_CR1_DUALMOD    ,
1286:src/stm32f1xx_hal_adc_ex.c ****                multimode->Mode     );
1287:src/stm32f1xx_hal_adc_ex.c ****   }
1288:src/stm32f1xx_hal_adc_ex.c ****   /* If one of the ADC sharing the same common group is enabled, no update    */
1289:src/stm32f1xx_hal_adc_ex.c ****   /* could be done on neither of the multimode structure parameters.          */
1290:src/stm32f1xx_hal_adc_ex.c ****   else
1291:src/stm32f1xx_hal_adc_ex.c ****   {
1292:src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
1293:src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1294:src/stm32f1xx_hal_adc_ex.c ****     
1295:src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
1296:src/stm32f1xx_hal_adc_ex.c ****   }
1297:src/stm32f1xx_hal_adc_ex.c ****     
1298:src/stm32f1xx_hal_adc_ex.c ****     
1299:src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
1300:src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1712              		.loc 1 1300 0
 1713 07ac 0023     		movs	r3, #0	@ tmp136,
 1714 07ae 82F82430 		strb	r3, [r2, #36]	@ tmp136, hadc_6(D)->Lock
1301:src/stm32f1xx_hal_adc_ex.c ****   
1302:src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
1303:src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 1715              		.loc 1 1303 0
 1716 07b2 10BD     		pop	{r4, pc}	@
 1717              	.LVL120:
 1718              	.L157:
1293:src/stm32f1xx_hal_adc_ex.c ****     
 1719              		.loc 1 1293 0
 1720 07b4 936A     		ldr	r3, [r2, #40]	@ _20, hadc_6(D)->State
1295:src/stm32f1xx_hal_adc_ex.c ****   }
 1721              		.loc 1 1295 0
 1722 07b6 0120     		movs	r0, #1	@ <retval>,
1293:src/stm32f1xx_hal_adc_ex.c ****     
 1723              		.loc 1 1293 0
 1724 07b8 43F02003 		orr	r3, r3, #32	@ _21, _20,
 1725 07bc 9362     		str	r3, [r2, #40]	@ _21, hadc_6(D)->State
 1726              	.LVL121:
 1727 07be F5E7     		b	.L158	@
 1728              	.LVL122:
 1729              	.L159:
1267:src/stm32f1xx_hal_adc_ex.c ****   
 1730              		.loc 1 1267 0
 1731 07c0 0220     		movs	r0, #2	@ <retval>,
 1732              	.LVL123:
1304:src/stm32f1xx_hal_adc_ex.c **** } 
ARM GAS  /tmp/ccHubou1.s 			page 57


 1733              		.loc 1 1304 0
 1734 07c2 10BD     		pop	{r4, pc}	@
 1735              	.L161:
 1736              		.align	2
 1737              	.L160:
 1738 07c4 00280140 		.word	1073817600
 1739 07c8 00240140 		.word	1073816576
 1740              		.cfi_endproc
 1741              	.LFE77:
 1742              		.size	HAL_ADCEx_MultiModeConfigChannel, .-HAL_ADCEx_MultiModeConfigChannel
 1743              	.Letext0:
 1744              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1745              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1746              		.file 4 "../cmsiscore/inc/core_cm3.h"
 1747              		.file 5 "../cmsisstm32f1xx/inc/system_stm32f1xx.h"
 1748              		.file 6 "../cmsisstm32f1xx/inc/stm32f103x6.h"
 1749              		.file 7 "../cmsisstm32f1xx/inc/stm32f1xx.h"
 1750              		.file 8 "./inc/stm32f1xx_hal_def.h"
 1751              		.file 9 "./inc/stm32f1xx_hal_dma.h"
 1752              		.file 10 "./inc/stm32f1xx_hal_adc.h"
 1753              		.file 11 "./inc/stm32f1xx_hal_adc_ex.h"
 1754              		.file 12 "./inc/stm32f1xx_hal.h"
 1755              		.file 13 "./inc/stm32f1xx_hal_rcc_ex.h"
 1756              		.section	.debug_info,"",%progbits
 1757              	.Ldebug_info0:
 1758 0000 630C0000 		.4byte	0xc63
 1759 0004 0200     		.2byte	0x2
 1760 0006 00000000 		.4byte	.Ldebug_abbrev0
 1761 000a 04       		.byte	0x4
 1762 000b 01       		.uleb128 0x1
 1763 000c 5B060000 		.4byte	.LASF141
 1764 0010 0C       		.byte	0xc
 1765 0011 AF080000 		.4byte	.LASF142
 1766 0015 6E050000 		.4byte	.LASF143
 1767 0019 00000000 		.4byte	.Ltext0
 1768 001d CC070000 		.4byte	.Letext0
 1769 0021 00000000 		.4byte	.Ldebug_line0
 1770 0025 02       		.uleb128 0x2
 1771 0026 01       		.byte	0x1
 1772 0027 06       		.byte	0x6
 1773 0028 5F000000 		.4byte	.LASF0
 1774 002c 03       		.uleb128 0x3
 1775 002d 6B000000 		.4byte	.LASF4
 1776 0031 02       		.byte	0x2
 1777 0032 1D       		.byte	0x1d
 1778 0033 37000000 		.4byte	0x37
 1779 0037 02       		.uleb128 0x2
 1780 0038 01       		.byte	0x1
 1781 0039 08       		.byte	0x8
 1782 003a A2050000 		.4byte	.LASF1
 1783 003e 02       		.uleb128 0x2
 1784 003f 02       		.byte	0x2
 1785 0040 05       		.byte	0x5
 1786 0041 C5050000 		.4byte	.LASF2
 1787 0045 02       		.uleb128 0x2
 1788 0046 02       		.byte	0x2
 1789 0047 07       		.byte	0x7
ARM GAS  /tmp/ccHubou1.s 			page 58


 1790 0048 10030000 		.4byte	.LASF3
 1791 004c 03       		.uleb128 0x3
 1792 004d A0070000 		.4byte	.LASF5
 1793 0051 02       		.byte	0x2
 1794 0052 3F       		.byte	0x3f
 1795 0053 57000000 		.4byte	0x57
 1796 0057 02       		.uleb128 0x2
 1797 0058 04       		.byte	0x4
 1798 0059 05       		.byte	0x5
 1799 005a 48010000 		.4byte	.LASF6
 1800 005e 03       		.uleb128 0x3
 1801 005f E9010000 		.4byte	.LASF7
 1802 0063 02       		.byte	0x2
 1803 0064 41       		.byte	0x41
 1804 0065 69000000 		.4byte	0x69
 1805 0069 02       		.uleb128 0x2
 1806 006a 04       		.byte	0x4
 1807 006b 07       		.byte	0x7
 1808 006c C7020000 		.4byte	.LASF8
 1809 0070 02       		.uleb128 0x2
 1810 0071 08       		.byte	0x8
 1811 0072 05       		.byte	0x5
 1812 0073 DE000000 		.4byte	.LASF9
 1813 0077 02       		.uleb128 0x2
 1814 0078 08       		.byte	0x8
 1815 0079 07       		.byte	0x7
 1816 007a 94000000 		.4byte	.LASF10
 1817 007e 04       		.uleb128 0x4
 1818 007f 04       		.byte	0x4
 1819 0080 05       		.byte	0x5
 1820 0081 696E7400 		.ascii	"int\000"
 1821 0085 02       		.uleb128 0x2
 1822 0086 04       		.byte	0x4
 1823 0087 07       		.byte	0x7
 1824 0088 55020000 		.4byte	.LASF11
 1825 008c 03       		.uleb128 0x3
 1826 008d 22080000 		.4byte	.LASF12
 1827 0091 03       		.byte	0x3
 1828 0092 18       		.byte	0x18
 1829 0093 2C000000 		.4byte	0x2c
 1830 0097 05       		.uleb128 0x5
 1831 0098 8C000000 		.4byte	0x8c
 1832 009c 03       		.uleb128 0x3
 1833 009d 9A050000 		.4byte	.LASF13
 1834 00a1 03       		.byte	0x3
 1835 00a2 2C       		.byte	0x2c
 1836 00a3 4C000000 		.4byte	0x4c
 1837 00a7 06       		.uleb128 0x6
 1838 00a8 9C000000 		.4byte	0x9c
 1839 00ac 03       		.uleb128 0x3
 1840 00ad 03070000 		.4byte	.LASF14
 1841 00b1 03       		.byte	0x3
 1842 00b2 30       		.byte	0x30
 1843 00b3 5E000000 		.4byte	0x5e
 1844 00b7 06       		.uleb128 0x6
 1845 00b8 AC000000 		.4byte	0xac
 1846 00bc 02       		.uleb128 0x2
ARM GAS  /tmp/ccHubou1.s 			page 59


 1847 00bd 04       		.byte	0x4
 1848 00be 07       		.byte	0x7
 1849 00bf 27040000 		.4byte	.LASF15
 1850 00c3 07       		.uleb128 0x7
 1851 00c4 C6000000 		.4byte	.LASF16
 1852 00c8 04       		.byte	0x4
 1853 00c9 4807     		.2byte	0x748
 1854 00cb A7000000 		.4byte	0xa7
 1855 00cf 01       		.byte	0x1
 1856 00d0 01       		.byte	0x1
 1857 00d1 08       		.uleb128 0x8
 1858 00d2 91020000 		.4byte	.LASF17
 1859 00d6 05       		.byte	0x5
 1860 00d7 33       		.byte	0x33
 1861 00d8 AC000000 		.4byte	0xac
 1862 00dc 01       		.byte	0x1
 1863 00dd 01       		.byte	0x1
 1864 00de 09       		.uleb128 0x9
 1865 00df 97000000 		.4byte	0x97
 1866 00e3 EE000000 		.4byte	0xee
 1867 00e7 0A       		.uleb128 0xa
 1868 00e8 BC000000 		.4byte	0xbc
 1869 00ec 0F       		.byte	0xf
 1870 00ed 00       		.byte	0
 1871 00ee 05       		.uleb128 0x5
 1872 00ef DE000000 		.4byte	0xde
 1873 00f3 08       		.uleb128 0x8
 1874 00f4 A1030000 		.4byte	.LASF18
 1875 00f8 05       		.byte	0x5
 1876 00f9 34       		.byte	0x34
 1877 00fa EE000000 		.4byte	0xee
 1878 00fe 01       		.byte	0x1
 1879 00ff 01       		.byte	0x1
 1880 0100 09       		.uleb128 0x9
 1881 0101 97000000 		.4byte	0x97
 1882 0105 10010000 		.4byte	0x110
 1883 0109 0A       		.uleb128 0xa
 1884 010a BC000000 		.4byte	0xbc
 1885 010e 07       		.byte	0x7
 1886 010f 00       		.byte	0
 1887 0110 05       		.uleb128 0x5
 1888 0111 00010000 		.4byte	0x100
 1889 0115 08       		.uleb128 0x8
 1890 0116 7E000000 		.4byte	.LASF19
 1891 011a 05       		.byte	0x5
 1892 011b 35       		.byte	0x35
 1893 011c 10010000 		.4byte	0x110
 1894 0120 01       		.byte	0x1
 1895 0121 01       		.byte	0x1
 1896 0122 0B       		.uleb128 0xb
 1897 0123 50       		.byte	0x50
 1898 0124 06       		.byte	0x6
 1899 0125 8B       		.byte	0x8b
 1900 0126 41020000 		.4byte	0x241
 1901 012a 0C       		.uleb128 0xc
 1902 012b 535200   		.ascii	"SR\000"
 1903 012e 06       		.byte	0x6
ARM GAS  /tmp/ccHubou1.s 			page 60


 1904 012f 8D       		.byte	0x8d
 1905 0130 B7000000 		.4byte	0xb7
 1906 0134 02       		.byte	0x2
 1907 0135 23       		.byte	0x23
 1908 0136 00       		.uleb128 0
 1909 0137 0C       		.uleb128 0xc
 1910 0138 43523100 		.ascii	"CR1\000"
 1911 013c 06       		.byte	0x6
 1912 013d 8E       		.byte	0x8e
 1913 013e B7000000 		.4byte	0xb7
 1914 0142 02       		.byte	0x2
 1915 0143 23       		.byte	0x23
 1916 0144 04       		.uleb128 0x4
 1917 0145 0C       		.uleb128 0xc
 1918 0146 43523200 		.ascii	"CR2\000"
 1919 014a 06       		.byte	0x6
 1920 014b 8F       		.byte	0x8f
 1921 014c B7000000 		.4byte	0xb7
 1922 0150 02       		.byte	0x2
 1923 0151 23       		.byte	0x23
 1924 0152 08       		.uleb128 0x8
 1925 0153 0D       		.uleb128 0xd
 1926 0154 B3040000 		.4byte	.LASF20
 1927 0158 06       		.byte	0x6
 1928 0159 90       		.byte	0x90
 1929 015a B7000000 		.4byte	0xb7
 1930 015e 02       		.byte	0x2
 1931 015f 23       		.byte	0x23
 1932 0160 0C       		.uleb128 0xc
 1933 0161 0D       		.uleb128 0xd
 1934 0162 B9040000 		.4byte	.LASF21
 1935 0166 06       		.byte	0x6
 1936 0167 91       		.byte	0x91
 1937 0168 B7000000 		.4byte	0xb7
 1938 016c 02       		.byte	0x2
 1939 016d 23       		.byte	0x23
 1940 016e 10       		.uleb128 0x10
 1941 016f 0D       		.uleb128 0xd
 1942 0170 0F040000 		.4byte	.LASF22
 1943 0174 06       		.byte	0x6
 1944 0175 92       		.byte	0x92
 1945 0176 B7000000 		.4byte	0xb7
 1946 017a 02       		.byte	0x2
 1947 017b 23       		.byte	0x23
 1948 017c 14       		.uleb128 0x14
 1949 017d 0D       		.uleb128 0xd
 1950 017e 15040000 		.4byte	.LASF23
 1951 0182 06       		.byte	0x6
 1952 0183 93       		.byte	0x93
 1953 0184 B7000000 		.4byte	0xb7
 1954 0188 02       		.byte	0x2
 1955 0189 23       		.byte	0x23
 1956 018a 18       		.uleb128 0x18
 1957 018b 0D       		.uleb128 0xd
 1958 018c 1B040000 		.4byte	.LASF24
 1959 0190 06       		.byte	0x6
 1960 0191 94       		.byte	0x94
ARM GAS  /tmp/ccHubou1.s 			page 61


 1961 0192 B7000000 		.4byte	0xb7
 1962 0196 02       		.byte	0x2
 1963 0197 23       		.byte	0x23
 1964 0198 1C       		.uleb128 0x1c
 1965 0199 0D       		.uleb128 0xd
 1966 019a 21040000 		.4byte	.LASF25
 1967 019e 06       		.byte	0x6
 1968 019f 95       		.byte	0x95
 1969 01a0 B7000000 		.4byte	0xb7
 1970 01a4 02       		.byte	0x2
 1971 01a5 23       		.byte	0x23
 1972 01a6 20       		.uleb128 0x20
 1973 01a7 0C       		.uleb128 0xc
 1974 01a8 48545200 		.ascii	"HTR\000"
 1975 01ac 06       		.byte	0x6
 1976 01ad 96       		.byte	0x96
 1977 01ae B7000000 		.4byte	0xb7
 1978 01b2 02       		.byte	0x2
 1979 01b3 23       		.byte	0x23
 1980 01b4 24       		.uleb128 0x24
 1981 01b5 0C       		.uleb128 0xc
 1982 01b6 4C545200 		.ascii	"LTR\000"
 1983 01ba 06       		.byte	0x6
 1984 01bb 97       		.byte	0x97
 1985 01bc B7000000 		.4byte	0xb7
 1986 01c0 02       		.byte	0x2
 1987 01c1 23       		.byte	0x23
 1988 01c2 28       		.uleb128 0x28
 1989 01c3 0D       		.uleb128 0xd
 1990 01c4 1B050000 		.4byte	.LASF26
 1991 01c8 06       		.byte	0x6
 1992 01c9 98       		.byte	0x98
 1993 01ca B7000000 		.4byte	0xb7
 1994 01ce 02       		.byte	0x2
 1995 01cf 23       		.byte	0x23
 1996 01d0 2C       		.uleb128 0x2c
 1997 01d1 0D       		.uleb128 0xd
 1998 01d2 20050000 		.4byte	.LASF27
 1999 01d6 06       		.byte	0x6
 2000 01d7 99       		.byte	0x99
 2001 01d8 B7000000 		.4byte	0xb7
 2002 01dc 02       		.byte	0x2
 2003 01dd 23       		.byte	0x23
 2004 01de 30       		.uleb128 0x30
 2005 01df 0D       		.uleb128 0xd
 2006 01e0 25050000 		.4byte	.LASF28
 2007 01e4 06       		.byte	0x6
 2008 01e5 9A       		.byte	0x9a
 2009 01e6 B7000000 		.4byte	0xb7
 2010 01ea 02       		.byte	0x2
 2011 01eb 23       		.byte	0x23
 2012 01ec 34       		.uleb128 0x34
 2013 01ed 0D       		.uleb128 0xd
 2014 01ee D9000000 		.4byte	.LASF29
 2015 01f2 06       		.byte	0x6
 2016 01f3 9B       		.byte	0x9b
 2017 01f4 B7000000 		.4byte	0xb7
ARM GAS  /tmp/ccHubou1.s 			page 62


 2018 01f8 02       		.byte	0x2
 2019 01f9 23       		.byte	0x23
 2020 01fa 38       		.uleb128 0x38
 2021 01fb 0D       		.uleb128 0xd
 2022 01fc 75040000 		.4byte	.LASF30
 2023 0200 06       		.byte	0x6
 2024 0201 9C       		.byte	0x9c
 2025 0202 B7000000 		.4byte	0xb7
 2026 0206 02       		.byte	0x2
 2027 0207 23       		.byte	0x23
 2028 0208 3C       		.uleb128 0x3c
 2029 0209 0D       		.uleb128 0xd
 2030 020a 7A040000 		.4byte	.LASF31
 2031 020e 06       		.byte	0x6
 2032 020f 9D       		.byte	0x9d
 2033 0210 B7000000 		.4byte	0xb7
 2034 0214 02       		.byte	0x2
 2035 0215 23       		.byte	0x23
 2036 0216 40       		.uleb128 0x40
 2037 0217 0D       		.uleb128 0xd
 2038 0218 41080000 		.4byte	.LASF32
 2039 021c 06       		.byte	0x6
 2040 021d 9E       		.byte	0x9e
 2041 021e B7000000 		.4byte	0xb7
 2042 0222 02       		.byte	0x2
 2043 0223 23       		.byte	0x23
 2044 0224 44       		.uleb128 0x44
 2045 0225 0D       		.uleb128 0xd
 2046 0226 46080000 		.4byte	.LASF33
 2047 022a 06       		.byte	0x6
 2048 022b 9F       		.byte	0x9f
 2049 022c B7000000 		.4byte	0xb7
 2050 0230 02       		.byte	0x2
 2051 0231 23       		.byte	0x23
 2052 0232 48       		.uleb128 0x48
 2053 0233 0C       		.uleb128 0xc
 2054 0234 445200   		.ascii	"DR\000"
 2055 0237 06       		.byte	0x6
 2056 0238 A0       		.byte	0xa0
 2057 0239 B7000000 		.4byte	0xb7
 2058 023d 02       		.byte	0x2
 2059 023e 23       		.byte	0x23
 2060 023f 4C       		.uleb128 0x4c
 2061 0240 00       		.byte	0
 2062 0241 03       		.uleb128 0x3
 2063 0242 B1010000 		.4byte	.LASF34
 2064 0246 06       		.byte	0x6
 2065 0247 A1       		.byte	0xa1
 2066 0248 22010000 		.4byte	0x122
 2067 024c 0E       		.uleb128 0xe
 2068 024d 10       		.byte	0x10
 2069 024e 06       		.byte	0x6
 2070 024f 1E01     		.2byte	0x11e
 2071 0251 92020000 		.4byte	0x292
 2072 0255 0F       		.uleb128 0xf
 2073 0256 43435200 		.ascii	"CCR\000"
 2074 025a 06       		.byte	0x6
ARM GAS  /tmp/ccHubou1.s 			page 63


 2075 025b 2001     		.2byte	0x120
 2076 025d B7000000 		.4byte	0xb7
 2077 0261 02       		.byte	0x2
 2078 0262 23       		.byte	0x23
 2079 0263 00       		.uleb128 0
 2080 0264 10       		.uleb128 0x10
 2081 0265 F8070000 		.4byte	.LASF35
 2082 0269 06       		.byte	0x6
 2083 026a 2101     		.2byte	0x121
 2084 026c B7000000 		.4byte	0xb7
 2085 0270 02       		.byte	0x2
 2086 0271 23       		.byte	0x23
 2087 0272 04       		.uleb128 0x4
 2088 0273 10       		.uleb128 0x10
 2089 0274 AC020000 		.4byte	.LASF36
 2090 0278 06       		.byte	0x6
 2091 0279 2201     		.2byte	0x122
 2092 027b B7000000 		.4byte	0xb7
 2093 027f 02       		.byte	0x2
 2094 0280 23       		.byte	0x23
 2095 0281 08       		.uleb128 0x8
 2096 0282 10       		.uleb128 0x10
 2097 0283 FE070000 		.4byte	.LASF37
 2098 0287 06       		.byte	0x6
 2099 0288 2301     		.2byte	0x123
 2100 028a B7000000 		.4byte	0xb7
 2101 028e 02       		.byte	0x2
 2102 028f 23       		.byte	0x23
 2103 0290 0C       		.uleb128 0xc
 2104 0291 00       		.byte	0
 2105 0292 11       		.uleb128 0x11
 2106 0293 39050000 		.4byte	.LASF38
 2107 0297 06       		.byte	0x6
 2108 0298 2401     		.2byte	0x124
 2109 029a 4C020000 		.4byte	0x24c
 2110 029e 0E       		.uleb128 0xe
 2111 029f 08       		.byte	0x8
 2112 02a0 06       		.byte	0x6
 2113 02a1 2601     		.2byte	0x126
 2114 02a3 C6020000 		.4byte	0x2c6
 2115 02a7 0F       		.uleb128 0xf
 2116 02a8 49535200 		.ascii	"ISR\000"
 2117 02ac 06       		.byte	0x6
 2118 02ad 2801     		.2byte	0x128
 2119 02af B7000000 		.4byte	0xb7
 2120 02b3 02       		.byte	0x2
 2121 02b4 23       		.byte	0x23
 2122 02b5 00       		.uleb128 0
 2123 02b6 10       		.uleb128 0x10
 2124 02b7 55070000 		.4byte	.LASF39
 2125 02bb 06       		.byte	0x6
 2126 02bc 2901     		.2byte	0x129
 2127 02be B7000000 		.4byte	0xb7
 2128 02c2 02       		.byte	0x2
 2129 02c3 23       		.byte	0x23
 2130 02c4 04       		.uleb128 0x4
 2131 02c5 00       		.byte	0
ARM GAS  /tmp/ccHubou1.s 			page 64


 2132 02c6 11       		.uleb128 0x11
 2133 02c7 2F020000 		.4byte	.LASF40
 2134 02cb 06       		.byte	0x6
 2135 02cc 2A01     		.2byte	0x12a
 2136 02ce 9E020000 		.4byte	0x29e
 2137 02d2 12       		.uleb128 0x12
 2138 02d3 01       		.byte	0x1
 2139 02d4 37000000 		.4byte	0x37
 2140 02d8 07       		.byte	0x7
 2141 02d9 98       		.byte	0x98
 2142 02da EB020000 		.4byte	0x2eb
 2143 02de 13       		.uleb128 0x13
 2144 02df 68050000 		.4byte	.LASF41
 2145 02e3 00       		.byte	0
 2146 02e4 14       		.uleb128 0x14
 2147 02e5 53455400 		.ascii	"SET\000"
 2148 02e9 01       		.byte	0x1
 2149 02ea 00       		.byte	0
 2150 02eb 12       		.uleb128 0x12
 2151 02ec 01       		.byte	0x1
 2152 02ed 37000000 		.4byte	0x37
 2153 02f1 07       		.byte	0x7
 2154 02f2 9E       		.byte	0x9e
 2155 02f3 04030000 		.4byte	0x304
 2156 02f7 13       		.uleb128 0x13
 2157 02f8 8C000000 		.4byte	.LASF42
 2158 02fc 00       		.byte	0
 2159 02fd 13       		.uleb128 0x13
 2160 02fe 51010000 		.4byte	.LASF43
 2161 0302 01       		.byte	0x1
 2162 0303 00       		.byte	0
 2163 0304 03       		.uleb128 0x3
 2164 0305 13020000 		.4byte	.LASF44
 2165 0309 07       		.byte	0x7
 2166 030a A1       		.byte	0xa1
 2167 030b EB020000 		.4byte	0x2eb
 2168 030f 02       		.uleb128 0x2
 2169 0310 08       		.byte	0x8
 2170 0311 04       		.byte	0x4
 2171 0312 3C040000 		.4byte	.LASF45
 2172 0316 12       		.uleb128 0x12
 2173 0317 01       		.byte	0x1
 2174 0318 37000000 		.4byte	0x37
 2175 031c 08       		.byte	0x8
 2176 031d 2A       		.byte	0x2a
 2177 031e 3B030000 		.4byte	0x33b
 2178 0322 13       		.uleb128 0x13
 2179 0323 F4020000 		.4byte	.LASF46
 2180 0327 00       		.byte	0
 2181 0328 13       		.uleb128 0x13
 2182 0329 27070000 		.4byte	.LASF47
 2183 032d 01       		.byte	0x1
 2184 032e 13       		.uleb128 0x13
 2185 032f 75000000 		.4byte	.LASF48
 2186 0333 02       		.byte	0x2
 2187 0334 13       		.uleb128 0x13
 2188 0335 23020000 		.4byte	.LASF49
ARM GAS  /tmp/ccHubou1.s 			page 65


 2189 0339 03       		.byte	0x3
 2190 033a 00       		.byte	0
 2191 033b 03       		.uleb128 0x3
 2192 033c 81030000 		.4byte	.LASF50
 2193 0340 08       		.byte	0x8
 2194 0341 2F       		.byte	0x2f
 2195 0342 16030000 		.4byte	0x316
 2196 0346 12       		.uleb128 0x12
 2197 0347 01       		.byte	0x1
 2198 0348 37000000 		.4byte	0x37
 2199 034c 08       		.byte	0x8
 2200 034d 35       		.byte	0x35
 2201 034e 5F030000 		.4byte	0x35f
 2202 0352 13       		.uleb128 0x13
 2203 0353 6B080000 		.4byte	.LASF51
 2204 0357 00       		.byte	0
 2205 0358 13       		.uleb128 0x13
 2206 0359 6A040000 		.4byte	.LASF52
 2207 035d 01       		.byte	0x1
 2208 035e 00       		.byte	0
 2209 035f 03       		.uleb128 0x3
 2210 0360 38010000 		.4byte	.LASF53
 2211 0364 08       		.byte	0x8
 2212 0365 38       		.byte	0x38
 2213 0366 46030000 		.4byte	0x346
 2214 036a 0B       		.uleb128 0xb
 2215 036b 1C       		.byte	0x1c
 2216 036c 09       		.byte	0x9
 2217 036d 30       		.byte	0x30
 2218 036e D5030000 		.4byte	0x3d5
 2219 0372 0D       		.uleb128 0xd
 2220 0373 FC010000 		.4byte	.LASF54
 2221 0377 09       		.byte	0x9
 2222 0378 32       		.byte	0x32
 2223 0379 AC000000 		.4byte	0xac
 2224 037d 02       		.byte	0x2
 2225 037e 23       		.byte	0x23
 2226 037f 00       		.uleb128 0
 2227 0380 0D       		.uleb128 0xd
 2228 0381 58010000 		.4byte	.LASF55
 2229 0385 09       		.byte	0x9
 2230 0386 36       		.byte	0x36
 2231 0387 AC000000 		.4byte	0xac
 2232 038b 02       		.byte	0x2
 2233 038c 23       		.byte	0x23
 2234 038d 04       		.uleb128 0x4
 2235 038e 0D       		.uleb128 0xd
 2236 038f 54060000 		.4byte	.LASF56
 2237 0393 09       		.byte	0x9
 2238 0394 39       		.byte	0x39
 2239 0395 AC000000 		.4byte	0xac
 2240 0399 02       		.byte	0x2
 2241 039a 23       		.byte	0x23
 2242 039b 08       		.uleb128 0x8
 2243 039c 0D       		.uleb128 0xd
 2244 039d C1070000 		.4byte	.LASF57
 2245 03a1 09       		.byte	0x9
ARM GAS  /tmp/ccHubou1.s 			page 66


 2246 03a2 3C       		.byte	0x3c
 2247 03a3 AC000000 		.4byte	0xac
 2248 03a7 02       		.byte	0x2
 2249 03a8 23       		.byte	0x23
 2250 03a9 0C       		.uleb128 0xc
 2251 03aa 0D       		.uleb128 0xd
 2252 03ab 60030000 		.4byte	.LASF58
 2253 03af 09       		.byte	0x9
 2254 03b0 3F       		.byte	0x3f
 2255 03b1 AC000000 		.4byte	0xac
 2256 03b5 02       		.byte	0x2
 2257 03b6 23       		.byte	0x23
 2258 03b7 10       		.uleb128 0x10
 2259 03b8 0D       		.uleb128 0xd
 2260 03b9 6B070000 		.4byte	.LASF59
 2261 03bd 09       		.byte	0x9
 2262 03be 42       		.byte	0x42
 2263 03bf AC000000 		.4byte	0xac
 2264 03c3 02       		.byte	0x2
 2265 03c4 23       		.byte	0x23
 2266 03c5 14       		.uleb128 0x14
 2267 03c6 0D       		.uleb128 0xd
 2268 03c7 19080000 		.4byte	.LASF60
 2269 03cb 09       		.byte	0x9
 2270 03cc 47       		.byte	0x47
 2271 03cd AC000000 		.4byte	0xac
 2272 03d1 02       		.byte	0x2
 2273 03d2 23       		.byte	0x23
 2274 03d3 18       		.uleb128 0x18
 2275 03d4 00       		.byte	0
 2276 03d5 03       		.uleb128 0x3
 2277 03d6 4F000000 		.4byte	.LASF61
 2278 03da 09       		.byte	0x9
 2279 03db 49       		.byte	0x49
 2280 03dc 6A030000 		.4byte	0x36a
 2281 03e0 12       		.uleb128 0x12
 2282 03e1 01       		.byte	0x1
 2283 03e2 37000000 		.4byte	0x37
 2284 03e6 09       		.byte	0x9
 2285 03e7 4F       		.byte	0x4f
 2286 03e8 05040000 		.4byte	0x405
 2287 03ec 13       		.uleb128 0x13
 2288 03ed 7D020000 		.4byte	.LASF62
 2289 03f1 00       		.byte	0
 2290 03f2 13       		.uleb128 0x13
 2291 03f3 C7030000 		.4byte	.LASF63
 2292 03f7 01       		.byte	0x1
 2293 03f8 13       		.uleb128 0x13
 2294 03f9 CF050000 		.4byte	.LASF64
 2295 03fd 02       		.byte	0x2
 2296 03fe 13       		.uleb128 0x13
 2297 03ff 03080000 		.4byte	.LASF65
 2298 0403 03       		.byte	0x3
 2299 0404 00       		.byte	0
 2300 0405 03       		.uleb128 0x3
 2301 0406 B0050000 		.4byte	.LASF66
 2302 040a 09       		.byte	0x9
ARM GAS  /tmp/ccHubou1.s 			page 67


 2303 040b 54       		.byte	0x54
 2304 040c E0030000 		.4byte	0x3e0
 2305 0410 15       		.uleb128 0x15
 2306 0411 EF060000 		.4byte	.LASF88
 2307 0415 44       		.byte	0x44
 2308 0416 09       		.byte	0x9
 2309 0417 6F       		.byte	0x6f
 2310 0418 C5040000 		.4byte	0x4c5
 2311 041c 0D       		.uleb128 0xd
 2312 041d 5F050000 		.4byte	.LASF67
 2313 0421 09       		.byte	0x9
 2314 0422 71       		.byte	0x71
 2315 0423 C5040000 		.4byte	0x4c5
 2316 0427 02       		.byte	0x2
 2317 0428 23       		.byte	0x23
 2318 0429 00       		.uleb128 0
 2319 042a 0D       		.uleb128 0xd
 2320 042b 5A050000 		.4byte	.LASF68
 2321 042f 09       		.byte	0x9
 2322 0430 73       		.byte	0x73
 2323 0431 D5030000 		.4byte	0x3d5
 2324 0435 02       		.byte	0x2
 2325 0436 23       		.byte	0x23
 2326 0437 04       		.uleb128 0x4
 2327 0438 0D       		.uleb128 0xd
 2328 0439 E4010000 		.4byte	.LASF69
 2329 043d 09       		.byte	0x9
 2330 043e 75       		.byte	0x75
 2331 043f 5F030000 		.4byte	0x35f
 2332 0443 02       		.byte	0x2
 2333 0444 23       		.byte	0x23
 2334 0445 20       		.uleb128 0x20
 2335 0446 0D       		.uleb128 0xd
 2336 0447 65070000 		.4byte	.LASF70
 2337 044b 09       		.byte	0x9
 2338 044c 77       		.byte	0x77
 2339 044d 05040000 		.4byte	0x405
 2340 0451 02       		.byte	0x2
 2341 0452 23       		.byte	0x23
 2342 0453 21       		.uleb128 0x21
 2343 0454 0D       		.uleb128 0xd
 2344 0455 DD010000 		.4byte	.LASF71
 2345 0459 09       		.byte	0x9
 2346 045a 79       		.byte	0x79
 2347 045b CB040000 		.4byte	0x4cb
 2348 045f 02       		.byte	0x2
 2349 0460 23       		.byte	0x23
 2350 0461 24       		.uleb128 0x24
 2351 0462 0D       		.uleb128 0xd
 2352 0463 9E080000 		.4byte	.LASF72
 2353 0467 09       		.byte	0x9
 2354 0468 7B       		.byte	0x7b
 2355 0469 DF040000 		.4byte	0x4df
 2356 046d 02       		.byte	0x2
 2357 046e 23       		.byte	0x23
 2358 046f 28       		.uleb128 0x28
 2359 0470 0D       		.uleb128 0xd
ARM GAS  /tmp/ccHubou1.s 			page 68


 2360 0471 F7000000 		.4byte	.LASF73
 2361 0475 09       		.byte	0x9
 2362 0476 7D       		.byte	0x7d
 2363 0477 DF040000 		.4byte	0x4df
 2364 047b 02       		.byte	0x2
 2365 047c 23       		.byte	0x23
 2366 047d 2C       		.uleb128 0x2c
 2367 047e 0D       		.uleb128 0xd
 2368 047f 91040000 		.4byte	.LASF74
 2369 0483 09       		.byte	0x9
 2370 0484 7F       		.byte	0x7f
 2371 0485 DF040000 		.4byte	0x4df
 2372 0489 02       		.byte	0x2
 2373 048a 23       		.byte	0x23
 2374 048b 30       		.uleb128 0x30
 2375 048c 0D       		.uleb128 0xd
 2376 048d 8C080000 		.4byte	.LASF75
 2377 0491 09       		.byte	0x9
 2378 0492 81       		.byte	0x81
 2379 0493 DF040000 		.4byte	0x4df
 2380 0497 02       		.byte	0x2
 2381 0498 23       		.byte	0x23
 2382 0499 34       		.uleb128 0x34
 2383 049a 0D       		.uleb128 0xd
 2384 049b 56030000 		.4byte	.LASF76
 2385 049f 09       		.byte	0x9
 2386 04a0 83       		.byte	0x83
 2387 04a1 B7000000 		.4byte	0xb7
 2388 04a5 02       		.byte	0x2
 2389 04a6 23       		.byte	0x23
 2390 04a7 38       		.uleb128 0x38
 2391 04a8 0D       		.uleb128 0xd
 2392 04a9 47030000 		.4byte	.LASF77
 2393 04ad 09       		.byte	0x9
 2394 04ae 85       		.byte	0x85
 2395 04af E5040000 		.4byte	0x4e5
 2396 04b3 02       		.byte	0x2
 2397 04b4 23       		.byte	0x23
 2398 04b5 3C       		.uleb128 0x3c
 2399 04b6 0D       		.uleb128 0xd
 2400 04b7 D0010000 		.4byte	.LASF78
 2401 04bb 09       		.byte	0x9
 2402 04bc 87       		.byte	0x87
 2403 04bd AC000000 		.4byte	0xac
 2404 04c1 02       		.byte	0x2
 2405 04c2 23       		.byte	0x23
 2406 04c3 40       		.uleb128 0x40
 2407 04c4 00       		.byte	0
 2408 04c5 16       		.uleb128 0x16
 2409 04c6 04       		.byte	0x4
 2410 04c7 92020000 		.4byte	0x292
 2411 04cb 17       		.uleb128 0x17
 2412 04cc 04       		.byte	0x4
 2413 04cd 18       		.uleb128 0x18
 2414 04ce 01       		.byte	0x1
 2415 04cf D9040000 		.4byte	0x4d9
 2416 04d3 19       		.uleb128 0x19
ARM GAS  /tmp/ccHubou1.s 			page 69


 2417 04d4 D9040000 		.4byte	0x4d9
 2418 04d8 00       		.byte	0
 2419 04d9 16       		.uleb128 0x16
 2420 04da 04       		.byte	0x4
 2421 04db 10040000 		.4byte	0x410
 2422 04df 16       		.uleb128 0x16
 2423 04e0 04       		.byte	0x4
 2424 04e1 CD040000 		.4byte	0x4cd
 2425 04e5 16       		.uleb128 0x16
 2426 04e6 04       		.byte	0x4
 2427 04e7 C6020000 		.4byte	0x2c6
 2428 04eb 03       		.uleb128 0x3
 2429 04ec 7F040000 		.4byte	.LASF79
 2430 04f0 09       		.byte	0x9
 2431 04f1 89       		.byte	0x89
 2432 04f2 10040000 		.4byte	0x410
 2433 04f6 0B       		.uleb128 0xb
 2434 04f7 1C       		.byte	0x1c
 2435 04f8 0A       		.byte	0xa
 2436 04f9 34       		.byte	0x34
 2437 04fa 61050000 		.4byte	0x561
 2438 04fe 0D       		.uleb128 0xd
 2439 04ff AB000000 		.4byte	.LASF80
 2440 0503 0A       		.byte	0xa
 2441 0504 36       		.byte	0x36
 2442 0505 AC000000 		.4byte	0xac
 2443 0509 02       		.byte	0x2
 2444 050a 23       		.byte	0x23
 2445 050b 00       		.uleb128 0
 2446 050c 0D       		.uleb128 0xd
 2447 050d 06020000 		.4byte	.LASF81
 2448 0511 0A       		.byte	0xa
 2449 0512 39       		.byte	0x39
 2450 0513 AC000000 		.4byte	0xac
 2451 0517 02       		.byte	0x2
 2452 0518 23       		.byte	0x23
 2453 0519 04       		.uleb128 0x4
 2454 051a 0D       		.uleb128 0xd
 2455 051b 31070000 		.4byte	.LASF82
 2456 051f 0A       		.byte	0xa
 2457 0520 44       		.byte	0x44
 2458 0521 04030000 		.4byte	0x304
 2459 0525 02       		.byte	0x2
 2460 0526 23       		.byte	0x23
 2461 0527 08       		.uleb128 0x8
 2462 0528 0D       		.uleb128 0xd
 2463 0529 62010000 		.4byte	.LASF83
 2464 052d 0A       		.byte	0xa
 2465 052e 47       		.byte	0x47
 2466 052f AC000000 		.4byte	0xac
 2467 0533 02       		.byte	0x2
 2468 0534 23       		.byte	0x23
 2469 0535 0C       		.uleb128 0xc
 2470 0536 0D       		.uleb128 0xd
 2471 0537 E2070000 		.4byte	.LASF84
 2472 053b 0A       		.byte	0xa
 2473 053c 4A       		.byte	0x4a
ARM GAS  /tmp/ccHubou1.s 			page 70


 2474 053d 04030000 		.4byte	0x304
 2475 0541 02       		.byte	0x2
 2476 0542 23       		.byte	0x23
 2477 0543 10       		.uleb128 0x10
 2478 0544 0D       		.uleb128 0xd
 2479 0545 B0060000 		.4byte	.LASF85
 2480 0549 0A       		.byte	0xa
 2481 054a 4E       		.byte	0x4e
 2482 054b AC000000 		.4byte	0xac
 2483 054f 02       		.byte	0x2
 2484 0550 23       		.byte	0x23
 2485 0551 14       		.uleb128 0x14
 2486 0552 0D       		.uleb128 0xd
 2487 0553 B5000000 		.4byte	.LASF86
 2488 0557 0A       		.byte	0xa
 2489 0558 51       		.byte	0x51
 2490 0559 AC000000 		.4byte	0xac
 2491 055d 02       		.byte	0x2
 2492 055e 23       		.byte	0x23
 2493 055f 18       		.uleb128 0x18
 2494 0560 00       		.byte	0
 2495 0561 03       		.uleb128 0x3
 2496 0562 C4060000 		.4byte	.LASF87
 2497 0566 0A       		.byte	0xa
 2498 0567 55       		.byte	0x55
 2499 0568 F6040000 		.4byte	0x4f6
 2500 056c 15       		.uleb128 0x15
 2501 056d 78080000 		.4byte	.LASF89
 2502 0571 30       		.byte	0x30
 2503 0572 0A       		.byte	0xa
 2504 0573 AF       		.byte	0xaf
 2505 0574 CD050000 		.4byte	0x5cd
 2506 0578 0D       		.uleb128 0xd
 2507 0579 5F050000 		.4byte	.LASF67
 2508 057d 0A       		.byte	0xa
 2509 057e B1       		.byte	0xb1
 2510 057f CD050000 		.4byte	0x5cd
 2511 0583 02       		.byte	0x2
 2512 0584 23       		.byte	0x23
 2513 0585 00       		.uleb128 0
 2514 0586 0D       		.uleb128 0xd
 2515 0587 5A050000 		.4byte	.LASF68
 2516 058b 0A       		.byte	0xa
 2517 058c B3       		.byte	0xb3
 2518 058d 61050000 		.4byte	0x561
 2519 0591 02       		.byte	0x2
 2520 0592 23       		.byte	0x23
 2521 0593 04       		.uleb128 0x4
 2522 0594 0D       		.uleb128 0xd
 2523 0595 AA070000 		.4byte	.LASF90
 2524 0599 0A       		.byte	0xa
 2525 059a B5       		.byte	0xb5
 2526 059b D3050000 		.4byte	0x5d3
 2527 059f 02       		.byte	0x2
 2528 05a0 23       		.byte	0x23
 2529 05a1 20       		.uleb128 0x20
 2530 05a2 0D       		.uleb128 0xd
ARM GAS  /tmp/ccHubou1.s 			page 71


 2531 05a3 E4010000 		.4byte	.LASF69
 2532 05a7 0A       		.byte	0xa
 2533 05a8 B7       		.byte	0xb7
 2534 05a9 5F030000 		.4byte	0x35f
 2535 05ad 02       		.byte	0x2
 2536 05ae 23       		.byte	0x23
 2537 05af 24       		.uleb128 0x24
 2538 05b0 0D       		.uleb128 0xd
 2539 05b1 65070000 		.4byte	.LASF70
 2540 05b5 0A       		.byte	0xa
 2541 05b6 B9       		.byte	0xb9
 2542 05b7 B7000000 		.4byte	0xb7
 2543 05bb 02       		.byte	0x2
 2544 05bc 23       		.byte	0x23
 2545 05bd 28       		.uleb128 0x28
 2546 05be 0D       		.uleb128 0xd
 2547 05bf 56030000 		.4byte	.LASF76
 2548 05c3 0A       		.byte	0xa
 2549 05c4 BB       		.byte	0xbb
 2550 05c5 B7000000 		.4byte	0xb7
 2551 05c9 02       		.byte	0x2
 2552 05ca 23       		.byte	0x23
 2553 05cb 2C       		.uleb128 0x2c
 2554 05cc 00       		.byte	0
 2555 05cd 16       		.uleb128 0x16
 2556 05ce 04       		.byte	0x4
 2557 05cf 41020000 		.4byte	0x241
 2558 05d3 16       		.uleb128 0x16
 2559 05d4 04       		.byte	0x4
 2560 05d5 EB040000 		.4byte	0x4eb
 2561 05d9 03       		.uleb128 0x3
 2562 05da 7A070000 		.4byte	.LASF91
 2563 05de 0A       		.byte	0xa
 2564 05df C6       		.byte	0xc6
 2565 05e0 6C050000 		.4byte	0x56c
 2566 05e4 0B       		.uleb128 0xb
 2567 05e5 1C       		.byte	0x1c
 2568 05e6 0B       		.byte	0xb
 2569 05e7 37       		.byte	0x37
 2570 05e8 5D060000 		.4byte	0x65d
 2571 05ec 0D       		.uleb128 0xd
 2572 05ed 3B020000 		.4byte	.LASF92
 2573 05f1 0B       		.byte	0xb
 2574 05f2 39       		.byte	0x39
 2575 05f3 AC000000 		.4byte	0xac
 2576 05f7 02       		.byte	0x2
 2577 05f8 23       		.byte	0x23
 2578 05f9 00       		.uleb128 0
 2579 05fa 0D       		.uleb128 0xd
 2580 05fb D5070000 		.4byte	.LASF93
 2581 05ff 0B       		.byte	0xb
 2582 0600 40       		.byte	0x40
 2583 0601 AC000000 		.4byte	0xac
 2584 0605 02       		.byte	0x2
 2585 0606 23       		.byte	0x23
 2586 0607 04       		.uleb128 0x4
 2587 0608 0D       		.uleb128 0xd
ARM GAS  /tmp/ccHubou1.s 			page 72


 2588 0609 FB020000 		.4byte	.LASF94
 2589 060d 0B       		.byte	0xb
 2590 060e 43       		.byte	0x43
 2591 060f AC000000 		.4byte	0xac
 2592 0613 02       		.byte	0x2
 2593 0614 23       		.byte	0x23
 2594 0615 08       		.uleb128 0x8
 2595 0616 0D       		.uleb128 0xd
 2596 0617 2A050000 		.4byte	.LASF95
 2597 061b 0B       		.byte	0xb
 2598 061c 4C       		.byte	0x4c
 2599 061d AC000000 		.4byte	0xac
 2600 0621 02       		.byte	0x2
 2601 0622 23       		.byte	0x23
 2602 0623 0C       		.uleb128 0xc
 2603 0624 0D       		.uleb128 0xd
 2604 0625 AF030000 		.4byte	.LASF96
 2605 0629 0B       		.byte	0xb
 2606 062a 50       		.byte	0x50
 2607 062b AC000000 		.4byte	0xac
 2608 062f 02       		.byte	0x2
 2609 0630 23       		.byte	0x23
 2610 0631 10       		.uleb128 0x10
 2611 0632 0D       		.uleb128 0xd
 2612 0633 E2050000 		.4byte	.LASF97
 2613 0637 0B       		.byte	0xb
 2614 0638 55       		.byte	0x55
 2615 0639 04030000 		.4byte	0x304
 2616 063d 02       		.byte	0x2
 2617 063e 23       		.byte	0x23
 2618 063f 14       		.uleb128 0x14
 2619 0640 0D       		.uleb128 0xd
 2620 0641 44070000 		.4byte	.LASF98
 2621 0645 0B       		.byte	0xb
 2622 0646 5C       		.byte	0x5c
 2623 0647 04030000 		.4byte	0x304
 2624 064b 02       		.byte	0x2
 2625 064c 23       		.byte	0x23
 2626 064d 15       		.uleb128 0x15
 2627 064e 0D       		.uleb128 0xd
 2628 064f B1020000 		.4byte	.LASF99
 2629 0653 0B       		.byte	0xb
 2630 0654 64       		.byte	0x64
 2631 0655 AC000000 		.4byte	0xac
 2632 0659 02       		.byte	0x2
 2633 065a 23       		.byte	0x23
 2634 065b 18       		.uleb128 0x18
 2635 065c 00       		.byte	0
 2636 065d 03       		.uleb128 0x3
 2637 065e 1A060000 		.4byte	.LASF100
 2638 0662 0B       		.byte	0xb
 2639 0663 6C       		.byte	0x6c
 2640 0664 E4050000 		.4byte	0x5e4
 2641 0668 0B       		.uleb128 0xb
 2642 0669 04       		.byte	0x4
 2643 066a 0B       		.byte	0xb
 2644 066b 74       		.byte	0x74
ARM GAS  /tmp/ccHubou1.s 			page 73


 2645 066c 7F060000 		.4byte	0x67f
 2646 0670 0D       		.uleb128 0xd
 2647 0671 6B070000 		.4byte	.LASF59
 2648 0675 0B       		.byte	0xb
 2649 0676 76       		.byte	0x76
 2650 0677 AC000000 		.4byte	0xac
 2651 067b 02       		.byte	0x2
 2652 067c 23       		.byte	0x23
 2653 067d 00       		.uleb128 0
 2654 067e 00       		.byte	0
 2655 067f 03       		.uleb128 0x3
 2656 0680 23030000 		.4byte	.LASF101
 2657 0684 0B       		.byte	0xb
 2658 0685 81       		.byte	0x81
 2659 0686 68060000 		.4byte	0x668
 2660 068a 12       		.uleb128 0x12
 2661 068b 01       		.byte	0x1
 2662 068c 37000000 		.4byte	0x37
 2663 0690 0C       		.byte	0xc
 2664 0691 33       		.byte	0x33
 2665 0692 AF060000 		.4byte	0x6af
 2666 0696 13       		.uleb128 0x13
 2667 0697 BD010000 		.4byte	.LASF102
 2668 069b 64       		.byte	0x64
 2669 069c 13       		.uleb128 0x13
 2670 069d 8C070000 		.4byte	.LASF103
 2671 06a1 0A       		.byte	0xa
 2672 06a2 13       		.uleb128 0x13
 2673 06a3 E1020000 		.4byte	.LASF104
 2674 06a7 01       		.byte	0x1
 2675 06a8 13       		.uleb128 0x13
 2676 06a9 E1040000 		.4byte	.LASF105
 2677 06ad 01       		.byte	0x1
 2678 06ae 00       		.byte	0
 2679 06af 03       		.uleb128 0x3
 2680 06b0 1D000000 		.4byte	.LASF106
 2681 06b4 0C       		.byte	0xc
 2682 06b5 38       		.byte	0x38
 2683 06b6 8A060000 		.4byte	0x68a
 2684 06ba 08       		.uleb128 0x8
 2685 06bb 5A070000 		.4byte	.LASF107
 2686 06bf 0C       		.byte	0xc
 2687 06c0 3D       		.byte	0x3d
 2688 06c1 AC000000 		.4byte	0xac
 2689 06c5 01       		.byte	0x1
 2690 06c6 01       		.byte	0x1
 2691 06c7 08       		.uleb128 0x8
 2692 06c8 A1020000 		.4byte	.LASF108
 2693 06cc 0C       		.byte	0xc
 2694 06cd 3E       		.byte	0x3e
 2695 06ce AF060000 		.4byte	0x6af
 2696 06d2 01       		.byte	0x1
 2697 06d3 01       		.byte	0x1
 2698 06d4 1A       		.uleb128 0x1a
 2699 06d5 01       		.byte	0x1
 2700 06d6 33060000 		.4byte	.LASF111
 2701 06da 01       		.byte	0x1
ARM GAS  /tmp/ccHubou1.s 			page 74


 2702 06db E904     		.2byte	0x4e9
 2703 06dd 01       		.byte	0x1
 2704 06de 3B030000 		.4byte	0x33b
 2705 06e2 74070000 		.4byte	.LFB77
 2706 06e6 CC070000 		.4byte	.LFE77
 2707 06ea 00000000 		.4byte	.LLST37
 2708 06ee 01       		.byte	0x1
 2709 06ef 30070000 		.4byte	0x730
 2710 06f3 1B       		.uleb128 0x1b
 2711 06f4 BC070000 		.4byte	.LASF109
 2712 06f8 01       		.byte	0x1
 2713 06f9 E904     		.2byte	0x4e9
 2714 06fb 30070000 		.4byte	0x730
 2715 06ff 20000000 		.4byte	.LLST38
 2716 0703 1B       		.uleb128 0x1b
 2717 0704 4B020000 		.4byte	.LASF110
 2718 0708 01       		.byte	0x1
 2719 0709 E904     		.2byte	0x4e9
 2720 070b 36070000 		.4byte	0x736
 2721 070f 54000000 		.4byte	.LLST39
 2722 0713 1C       		.uleb128 0x1c
 2723 0714 38030000 		.4byte	.LASF114
 2724 0718 01       		.byte	0x1
 2725 0719 EB04     		.2byte	0x4eb
 2726 071b 3B030000 		.4byte	0x33b
 2727 071f 80000000 		.4byte	.LLST40
 2728 0723 1D       		.uleb128 0x1d
 2729 0724 4D050000 		.4byte	.LASF121
 2730 0728 01       		.byte	0x1
 2731 0729 EC04     		.2byte	0x4ec
 2732 072b D9050000 		.4byte	0x5d9
 2733 072f 00       		.byte	0
 2734 0730 16       		.uleb128 0x16
 2735 0731 04       		.byte	0x4
 2736 0732 D9050000 		.4byte	0x5d9
 2737 0736 16       		.uleb128 0x16
 2738 0737 04       		.byte	0x4
 2739 0738 7F060000 		.4byte	0x67f
 2740 073c 1A       		.uleb128 0x1a
 2741 073d 01       		.byte	0x1
 2742 073e 4B080000 		.4byte	.LASF112
 2743 0742 01       		.byte	0x1
 2744 0743 E403     		.2byte	0x3e4
 2745 0745 01       		.byte	0x1
 2746 0746 3B030000 		.4byte	0x33b
 2747 074a 9E050000 		.4byte	.LFB76
 2748 074e 74070000 		.4byte	.LFE76
 2749 0752 C3000000 		.4byte	.LLST33
 2750 0756 01       		.byte	0x1
 2751 0757 9B070000 		.4byte	0x79b
 2752 075b 1B       		.uleb128 0x1b
 2753 075c BC070000 		.4byte	.LASF109
 2754 0760 01       		.byte	0x1
 2755 0761 E403     		.2byte	0x3e4
 2756 0763 30070000 		.4byte	0x730
 2757 0767 FB000000 		.4byte	.LLST34
 2758 076b 1B       		.uleb128 0x1b
ARM GAS  /tmp/ccHubou1.s 			page 75


 2759 076c A3040000 		.4byte	.LASF113
 2760 0770 01       		.byte	0x1
 2761 0771 E403     		.2byte	0x3e4
 2762 0773 9B070000 		.4byte	0x79b
 2763 0777 19010000 		.4byte	.LLST35
 2764 077b 1C       		.uleb128 0x1c
 2765 077c 38030000 		.4byte	.LASF114
 2766 0780 01       		.byte	0x1
 2767 0781 E603     		.2byte	0x3e6
 2768 0783 3B030000 		.4byte	0x33b
 2769 0787 90010000 		.4byte	.LLST36
 2770 078b 1E       		.uleb128 0x1e
 2771 078c 71030000 		.4byte	.LASF115
 2772 0790 01       		.byte	0x1
 2773 0791 E703     		.2byte	0x3e7
 2774 0793 B7000000 		.4byte	0xb7
 2775 0797 02       		.byte	0x2
 2776 0798 91       		.byte	0x91
 2777 0799 64       		.sleb128 -28
 2778 079a 00       		.byte	0
 2779 079b 16       		.uleb128 0x16
 2780 079c 04       		.byte	0x4
 2781 079d 5D060000 		.4byte	0x65d
 2782 07a1 1F       		.uleb128 0x1f
 2783 07a2 01       		.byte	0x1
 2784 07a3 8E010000 		.4byte	.LASF144
 2785 07a7 01       		.byte	0x1
 2786 07a8 BA03     		.2byte	0x3ba
 2787 07aa 01       		.byte	0x1
 2788 07ab 9C050000 		.4byte	.LFB75
 2789 07af 9E050000 		.4byte	.LFE75
 2790 07b3 02       		.byte	0x2
 2791 07b4 7D       		.byte	0x7d
 2792 07b5 00       		.sleb128 0
 2793 07b6 01       		.byte	0x1
 2794 07b7 CA070000 		.4byte	0x7ca
 2795 07bb 20       		.uleb128 0x20
 2796 07bc BC070000 		.4byte	.LASF109
 2797 07c0 01       		.byte	0x1
 2798 07c1 BA03     		.2byte	0x3ba
 2799 07c3 30070000 		.4byte	0x730
 2800 07c7 01       		.byte	0x1
 2801 07c8 50       		.byte	0x50
 2802 07c9 00       		.byte	0
 2803 07ca 21       		.uleb128 0x21
 2804 07cb 01       		.byte	0x1
 2805 07cc 72010000 		.4byte	.LASF116
 2806 07d0 01       		.byte	0x1
 2807 07d1 9A03     		.2byte	0x39a
 2808 07d3 01       		.byte	0x1
 2809 07d4 AC000000 		.4byte	0xac
 2810 07d8 7E050000 		.4byte	.LFB74
 2811 07dc 9C050000 		.4byte	.LFE74
 2812 07e0 02       		.byte	0x2
 2813 07e1 7D       		.byte	0x7d
 2814 07e2 00       		.sleb128 0
 2815 07e3 01       		.byte	0x1
ARM GAS  /tmp/ccHubou1.s 			page 76


 2816 07e4 09080000 		.4byte	0x809
 2817 07e8 1B       		.uleb128 0x1b
 2818 07e9 BC070000 		.4byte	.LASF109
 2819 07ed 01       		.byte	0x1
 2820 07ee 9A03     		.2byte	0x39a
 2821 07f0 30070000 		.4byte	0x730
 2822 07f4 24020000 		.4byte	.LLST31
 2823 07f8 1C       		.uleb128 0x1c
 2824 07f9 64040000 		.4byte	.LASF117
 2825 07fd 01       		.byte	0x1
 2826 07fe 9C03     		.2byte	0x39c
 2827 0800 AC000000 		.4byte	0xac
 2828 0804 45020000 		.4byte	.LLST32
 2829 0808 00       		.byte	0
 2830 0809 21       		.uleb128 0x21
 2831 080a 01       		.byte	0x1
 2832 080b D4060000 		.4byte	.LASF118
 2833 080f 01       		.byte	0x1
 2834 0810 7503     		.2byte	0x375
 2835 0812 01       		.byte	0x1
 2836 0813 AC000000 		.4byte	0xac
 2837 0817 60050000 		.4byte	.LFB73
 2838 081b 7E050000 		.4byte	.LFE73
 2839 081f 02       		.byte	0x2
 2840 0820 7D       		.byte	0x7d
 2841 0821 00       		.sleb128 0
 2842 0822 01       		.byte	0x1
 2843 0823 56080000 		.4byte	0x856
 2844 0827 1B       		.uleb128 0x1b
 2845 0828 BC070000 		.4byte	.LASF109
 2846 082c 01       		.byte	0x1
 2847 082d 7503     		.2byte	0x375
 2848 082f 30070000 		.4byte	0x730
 2849 0833 64020000 		.4byte	.LLST29
 2850 0837 20       		.uleb128 0x20
 2851 0838 D5070000 		.4byte	.LASF93
 2852 083c 01       		.byte	0x1
 2853 083d 7503     		.2byte	0x375
 2854 083f AC000000 		.4byte	0xac
 2855 0843 01       		.byte	0x1
 2856 0844 51       		.byte	0x51
 2857 0845 1C       		.uleb128 0x1c
 2858 0846 D9020000 		.4byte	.LASF119
 2859 084a 01       		.byte	0x1
 2860 084b 7703     		.2byte	0x377
 2861 084d AC000000 		.4byte	0xac
 2862 0851 D0020000 		.4byte	.LLST30
 2863 0855 00       		.byte	0
 2864 0856 1A       		.uleb128 0x1a
 2865 0857 01       		.byte	0x1
 2866 0858 DB030000 		.4byte	.LASF120
 2867 085c 01       		.byte	0x1
 2868 085d 1C03     		.2byte	0x31c
 2869 085f 01       		.byte	0x1
 2870 0860 3B030000 		.4byte	0x33b
 2871 0864 E8040000 		.4byte	.LFB72
 2872 0868 60050000 		.4byte	.LFE72
ARM GAS  /tmp/ccHubou1.s 			page 77


 2873 086c 34030000 		.4byte	.LLST26
 2874 0870 01       		.byte	0x1
 2875 0871 D6080000 		.4byte	0x8d6
 2876 0875 1B       		.uleb128 0x1b
 2877 0876 BC070000 		.4byte	.LASF109
 2878 087a 01       		.byte	0x1
 2879 087b 1C03     		.2byte	0x31c
 2880 087d 30070000 		.4byte	0x730
 2881 0881 7A030000 		.4byte	.LLST27
 2882 0885 1C       		.uleb128 0x1c
 2883 0886 38030000 		.4byte	.LASF114
 2884 088a 01       		.byte	0x1
 2885 088b 1E03     		.2byte	0x31e
 2886 088d 3B030000 		.4byte	0x33b
 2887 0891 A3030000 		.4byte	.LLST28
 2888 0895 1E       		.uleb128 0x1e
 2889 0896 4D050000 		.4byte	.LASF121
 2890 089a 01       		.byte	0x1
 2891 089b 1F03     		.2byte	0x31f
 2892 089d D9050000 		.4byte	0x5d9
 2893 08a1 02       		.byte	0x2
 2894 08a2 91       		.byte	0x91
 2895 08a3 40       		.sleb128 -64
 2896 08a4 22       		.uleb128 0x22
 2897 08a5 00050000 		.4byte	.LVL69
 2898 08a9 120C0000 		.4byte	0xc12
 2899 08ad B8080000 		.4byte	0x8b8
 2900 08b1 23       		.uleb128 0x23
 2901 08b2 01       		.byte	0x1
 2902 08b3 50       		.byte	0x50
 2903 08b4 02       		.byte	0x2
 2904 08b5 74       		.byte	0x74
 2905 08b6 00       		.sleb128 0
 2906 08b7 00       		.byte	0
 2907 08b8 22       		.uleb128 0x22
 2908 08b9 10050000 		.4byte	.LVL71
 2909 08bd 120C0000 		.4byte	0xc12
 2910 08c1 CC080000 		.4byte	0x8cc
 2911 08c5 23       		.uleb128 0x23
 2912 08c6 01       		.byte	0x1
 2913 08c7 50       		.byte	0x50
 2914 08c8 02       		.byte	0x2
 2915 08c9 91       		.byte	0x91
 2916 08ca 40       		.sleb128 -64
 2917 08cb 00       		.byte	0
 2918 08cc 24       		.uleb128 0x24
 2919 08cd 3E050000 		.4byte	.LVL75
 2920 08d1 200C0000 		.4byte	0xc20
 2921 08d5 00       		.byte	0
 2922 08d6 1A       		.uleb128 0x1a
 2923 08d7 01       		.byte	0x1
 2924 08d8 00000000 		.4byte	.LASF122
 2925 08dc 01       		.byte	0x1
 2926 08dd 9E02     		.2byte	0x29e
 2927 08df 01       		.byte	0x1
 2928 08e0 3B030000 		.4byte	0x33b
 2929 08e4 0C040000 		.4byte	.LFB71
ARM GAS  /tmp/ccHubou1.s 			page 78


 2930 08e8 E8040000 		.4byte	.LFE71
 2931 08ec EF030000 		.4byte	.LLST21
 2932 08f0 01       		.byte	0x1
 2933 08f1 79090000 		.4byte	0x979
 2934 08f5 1B       		.uleb128 0x1b
 2935 08f6 BC070000 		.4byte	.LASF109
 2936 08fa 01       		.byte	0x1
 2937 08fb 9E02     		.2byte	0x29e
 2938 08fd 30070000 		.4byte	0x730
 2939 0901 35040000 		.4byte	.LLST22
 2940 0905 1B       		.uleb128 0x1b
 2941 0906 D3000000 		.4byte	.LASF123
 2942 090a 01       		.byte	0x1
 2943 090b 9E02     		.2byte	0x29e
 2944 090d 79090000 		.4byte	0x979
 2945 0911 74040000 		.4byte	.LLST23
 2946 0915 1B       		.uleb128 0x1b
 2947 0916 B5070000 		.4byte	.LASF124
 2948 091a 01       		.byte	0x1
 2949 091b 9E02     		.2byte	0x29e
 2950 091d AC000000 		.4byte	0xac
 2951 0921 B3040000 		.4byte	.LLST24
 2952 0925 1C       		.uleb128 0x1c
 2953 0926 38030000 		.4byte	.LASF114
 2954 092a 01       		.byte	0x1
 2955 092b A002     		.2byte	0x2a0
 2956 092d 3B030000 		.4byte	0x33b
 2957 0931 F2040000 		.4byte	.LLST25
 2958 0935 1E       		.uleb128 0x1e
 2959 0936 4D050000 		.4byte	.LASF121
 2960 093a 01       		.byte	0x1
 2961 093b A102     		.2byte	0x2a1
 2962 093d D9050000 		.4byte	0x5d9
 2963 0941 03       		.byte	0x3
 2964 0942 91       		.byte	0x91
 2965 0943 B87F     		.sleb128 -72
 2966 0945 24       		.uleb128 0x24
 2967 0946 48040000 		.4byte	.LVL62
 2968 094a 2E0C0000 		.4byte	0xc2e
 2969 094e 22       		.uleb128 0x22
 2970 094f 54040000 		.4byte	.LVL64
 2971 0953 2E0C0000 		.4byte	0xc2e
 2972 0957 62090000 		.4byte	0x962
 2973 095b 23       		.uleb128 0x23
 2974 095c 01       		.byte	0x1
 2975 095d 50       		.byte	0x50
 2976 095e 02       		.byte	0x2
 2977 095f 7D       		.byte	0x7d
 2978 0960 00       		.sleb128 0
 2979 0961 00       		.byte	0
 2980 0962 25       		.uleb128 0x25
 2981 0963 B0040000 		.4byte	.LVL66
 2982 0967 3C0C0000 		.4byte	0xc3c
 2983 096b 23       		.uleb128 0x23
 2984 096c 01       		.byte	0x1
 2985 096d 52       		.byte	0x52
 2986 096e 02       		.byte	0x2
ARM GAS  /tmp/ccHubou1.s 			page 79


 2987 096f 76       		.byte	0x76
 2988 0970 00       		.sleb128 0
 2989 0971 23       		.uleb128 0x23
 2990 0972 01       		.byte	0x1
 2991 0973 53       		.byte	0x53
 2992 0974 02       		.byte	0x2
 2993 0975 77       		.byte	0x77
 2994 0976 00       		.sleb128 0
 2995 0977 00       		.byte	0
 2996 0978 00       		.byte	0
 2997 0979 16       		.uleb128 0x16
 2998 097a 04       		.byte	0x4
 2999 097b AC000000 		.4byte	0xac
 3000 097f 1A       		.uleb128 0x1a
 3001 0980 01       		.byte	0x1
 3002 0981 00060000 		.4byte	.LASF125
 3003 0985 01       		.byte	0x1
 3004 0986 5902     		.2byte	0x259
 3005 0988 01       		.byte	0x1
 3006 0989 3B030000 		.4byte	0x33b
 3007 098d B4030000 		.4byte	.LFB70
 3008 0991 0C040000 		.4byte	.LFE70
 3009 0995 3F050000 		.4byte	.LLST18
 3010 0999 01       		.byte	0x1
 3011 099a CF090000 		.4byte	0x9cf
 3012 099e 1B       		.uleb128 0x1b
 3013 099f BC070000 		.4byte	.LASF109
 3014 09a3 01       		.byte	0x1
 3015 09a4 5902     		.2byte	0x259
 3016 09a6 30070000 		.4byte	0x730
 3017 09aa 5F050000 		.4byte	.LLST19
 3018 09ae 1C       		.uleb128 0x1c
 3019 09af 38030000 		.4byte	.LASF114
 3020 09b3 01       		.byte	0x1
 3021 09b4 5B02     		.2byte	0x25b
 3022 09b6 3B030000 		.4byte	0x33b
 3023 09ba A9050000 		.4byte	.LLST20
 3024 09be 25       		.uleb128 0x25
 3025 09bf D8030000 		.4byte	.LVL52
 3026 09c3 120C0000 		.4byte	0xc12
 3027 09c7 23       		.uleb128 0x23
 3028 09c8 01       		.byte	0x1
 3029 09c9 50       		.byte	0x50
 3030 09ca 02       		.byte	0x2
 3031 09cb 74       		.byte	0x74
 3032 09cc 00       		.sleb128 0
 3033 09cd 00       		.byte	0
 3034 09ce 00       		.byte	0
 3035 09cf 1A       		.uleb128 0x1a
 3036 09d0 01       		.byte	0x1
 3037 09d1 62020000 		.4byte	.LASF126
 3038 09d5 01       		.byte	0x1
 3039 09d6 F601     		.2byte	0x1f6
 3040 09d8 01       		.byte	0x1
 3041 09d9 3B030000 		.4byte	0x33b
 3042 09dd 00030000 		.4byte	.LFB69
 3043 09e1 B4030000 		.4byte	.LFE69
ARM GAS  /tmp/ccHubou1.s 			page 80


 3044 09e5 EC050000 		.4byte	.LLST15
 3045 09e9 01       		.byte	0x1
 3046 09ea 1F0A0000 		.4byte	0xa1f
 3047 09ee 1B       		.uleb128 0x1b
 3048 09ef BC070000 		.4byte	.LASF109
 3049 09f3 01       		.byte	0x1
 3050 09f4 F601     		.2byte	0x1f6
 3051 09f6 30070000 		.4byte	0x730
 3052 09fa 0C060000 		.4byte	.LLST16
 3053 09fe 1C       		.uleb128 0x1c
 3054 09ff 38030000 		.4byte	.LASF114
 3055 0a03 01       		.byte	0x1
 3056 0a04 F801     		.2byte	0x1f8
 3057 0a06 3B030000 		.4byte	0x33b
 3058 0a0a 4E060000 		.4byte	.LLST17
 3059 0a0e 25       		.uleb128 0x25
 3060 0a0f 16030000 		.4byte	.LVL46
 3061 0a13 2E0C0000 		.4byte	0xc2e
 3062 0a17 23       		.uleb128 0x23
 3063 0a18 01       		.byte	0x1
 3064 0a19 50       		.byte	0x50
 3065 0a1a 02       		.byte	0x2
 3066 0a1b 74       		.byte	0x74
 3067 0a1c 00       		.sleb128 0
 3068 0a1d 00       		.byte	0
 3069 0a1e 00       		.byte	0
 3070 0a1f 1A       		.uleb128 0x1a
 3071 0a20 01       		.byte	0x1
 3072 0a21 F7040000 		.4byte	.LASF127
 3073 0a25 01       		.byte	0x1
 3074 0a26 8001     		.2byte	0x180
 3075 0a28 01       		.byte	0x1
 3076 0a29 3B030000 		.4byte	0x33b
 3077 0a2d CA010000 		.4byte	.LFB68
 3078 0a31 00030000 		.4byte	.LFE68
 3079 0a35 79060000 		.4byte	.LLST10
 3080 0a39 01       		.byte	0x1
 3081 0a3a BC0A0000 		.4byte	0xabc
 3082 0a3e 1B       		.uleb128 0x1b
 3083 0a3f BC070000 		.4byte	.LASF109
 3084 0a43 01       		.byte	0x1
 3085 0a44 8001     		.2byte	0x180
 3086 0a46 30070000 		.4byte	0x730
 3087 0a4a B1060000 		.4byte	.LLST11
 3088 0a4e 1B       		.uleb128 0x1b
 3089 0a4f F4010000 		.4byte	.LASF128
 3090 0a53 01       		.byte	0x1
 3091 0a54 8001     		.2byte	0x180
 3092 0a56 AC000000 		.4byte	0xac
 3093 0a5a CF060000 		.4byte	.LLST12
 3094 0a5e 1C       		.uleb128 0x1c
 3095 0a5f 70070000 		.4byte	.LASF129
 3096 0a63 01       		.byte	0x1
 3097 0a64 8201     		.2byte	0x182
 3098 0a66 AC000000 		.4byte	0xac
 3099 0a6a ED060000 		.4byte	.LLST13
 3100 0a6e 1E       		.uleb128 0x1e
ARM GAS  /tmp/ccHubou1.s 			page 81


 3101 0a6f 31000000 		.4byte	.LASF130
 3102 0a73 01       		.byte	0x1
 3103 0a74 8601     		.2byte	0x186
 3104 0a76 B7000000 		.4byte	0xb7
 3105 0a7a 02       		.byte	0x2
 3106 0a7b 91       		.byte	0x91
 3107 0a7c 64       		.sleb128 -28
 3108 0a7d 1C       		.uleb128 0x1c
 3109 0a7e BF040000 		.4byte	.LASF131
 3110 0a82 01       		.byte	0x1
 3111 0a83 8701     		.2byte	0x187
 3112 0a85 AC000000 		.4byte	0xac
 3113 0a89 0B070000 		.4byte	.LLST14
 3114 0a8d 24       		.uleb128 0x24
 3115 0a8e D8010000 		.4byte	.LVL32
 3116 0a92 4A0C0000 		.4byte	0xc4a
 3117 0a96 22       		.uleb128 0x22
 3118 0a97 EE010000 		.4byte	.LVL35
 3119 0a9b 580C0000 		.4byte	0xc58
 3120 0a9f A90A0000 		.4byte	0xaa9
 3121 0aa3 23       		.uleb128 0x23
 3122 0aa4 01       		.byte	0x1
 3123 0aa5 50       		.byte	0x50
 3124 0aa6 01       		.byte	0x1
 3125 0aa7 32       		.byte	0x32
 3126 0aa8 00       		.byte	0
 3127 0aa9 24       		.uleb128 0x24
 3128 0aaa 2C020000 		.4byte	.LVL37
 3129 0aae 4A0C0000 		.4byte	0xc4a
 3130 0ab2 24       		.uleb128 0x24
 3131 0ab3 58020000 		.4byte	.LVL41
 3132 0ab7 4A0C0000 		.4byte	0xc4a
 3133 0abb 00       		.byte	0
 3134 0abc 1A       		.uleb128 0x1a
 3135 0abd 01       		.byte	0x1
 3136 0abe 2A080000 		.4byte	.LASF132
 3137 0ac2 01       		.byte	0x1
 3138 0ac3 4B01     		.2byte	0x14b
 3139 0ac5 01       		.byte	0x1
 3140 0ac6 3B030000 		.4byte	0x33b
 3141 0aca 7C010000 		.4byte	.LFB67
 3142 0ace CA010000 		.4byte	.LFE67
 3143 0ad2 4E070000 		.4byte	.LLST7
 3144 0ad6 01       		.byte	0x1
 3145 0ad7 0C0B0000 		.4byte	0xb0c
 3146 0adb 1B       		.uleb128 0x1b
 3147 0adc BC070000 		.4byte	.LASF109
 3148 0ae0 01       		.byte	0x1
 3149 0ae1 4B01     		.2byte	0x14b
 3150 0ae3 30070000 		.4byte	0x730
 3151 0ae7 6E070000 		.4byte	.LLST8
 3152 0aeb 1C       		.uleb128 0x1c
 3153 0aec 38030000 		.4byte	.LASF114
 3154 0af0 01       		.byte	0x1
 3155 0af1 4D01     		.2byte	0x14d
 3156 0af3 3B030000 		.4byte	0x33b
 3157 0af7 B8070000 		.4byte	.LLST9
ARM GAS  /tmp/ccHubou1.s 			page 82


 3158 0afb 25       		.uleb128 0x25
 3159 0afc A0010000 		.4byte	.LVL23
 3160 0b00 120C0000 		.4byte	0xc12
 3161 0b04 23       		.uleb128 0x23
 3162 0b05 01       		.byte	0x1
 3163 0b06 50       		.byte	0x50
 3164 0b07 02       		.byte	0x2
 3165 0b08 74       		.byte	0x74
 3166 0b09 00       		.sleb128 0
 3167 0b0a 00       		.byte	0
 3168 0b0b 00       		.byte	0
 3169 0b0c 26       		.uleb128 0x26
 3170 0b0d 01       		.byte	0x1
 3171 0b0e F7030000 		.4byte	.LASF133
 3172 0b12 01       		.byte	0x1
 3173 0b13 E8       		.byte	0xe8
 3174 0b14 01       		.byte	0x1
 3175 0b15 3B030000 		.4byte	0x33b
 3176 0b19 D0000000 		.4byte	.LFB66
 3177 0b1d 7C010000 		.4byte	.LFE66
 3178 0b21 FB070000 		.4byte	.LLST4
 3179 0b25 01       		.byte	0x1
 3180 0b26 590B0000 		.4byte	0xb59
 3181 0b2a 27       		.uleb128 0x27
 3182 0b2b BC070000 		.4byte	.LASF109
 3183 0b2f 01       		.byte	0x1
 3184 0b30 E8       		.byte	0xe8
 3185 0b31 30070000 		.4byte	0x730
 3186 0b35 1B080000 		.4byte	.LLST5
 3187 0b39 28       		.uleb128 0x28
 3188 0b3a 38030000 		.4byte	.LASF114
 3189 0b3e 01       		.byte	0x1
 3190 0b3f EA       		.byte	0xea
 3191 0b40 3B030000 		.4byte	0x33b
 3192 0b44 5D080000 		.4byte	.LLST6
 3193 0b48 25       		.uleb128 0x25
 3194 0b49 E6000000 		.4byte	.LVL17
 3195 0b4d 2E0C0000 		.4byte	0xc2e
 3196 0b51 23       		.uleb128 0x23
 3197 0b52 01       		.byte	0x1
 3198 0b53 50       		.byte	0x50
 3199 0b54 02       		.byte	0x2
 3200 0b55 74       		.byte	0x74
 3201 0b56 00       		.sleb128 0
 3202 0b57 00       		.byte	0
 3203 0b58 00       		.byte	0
 3204 0b59 26       		.uleb128 0x26
 3205 0b5a 01       		.byte	0x1
 3206 0b5b 48040000 		.4byte	.LASF134
 3207 0b5f 01       		.byte	0x1
 3208 0b60 7E       		.byte	0x7e
 3209 0b61 01       		.byte	0x1
 3210 0b62 3B030000 		.4byte	0x33b
 3211 0b66 00000000 		.4byte	.LFB65
 3212 0b6a D0000000 		.4byte	.LFE65
 3213 0b6e 88080000 		.4byte	.LLST0
 3214 0b72 01       		.byte	0x1
ARM GAS  /tmp/ccHubou1.s 			page 83


 3215 0b73 120C0000 		.4byte	0xc12
 3216 0b77 27       		.uleb128 0x27
 3217 0b78 BC070000 		.4byte	.LASF109
 3218 0b7c 01       		.byte	0x1
 3219 0b7d 7E       		.byte	0x7e
 3220 0b7e 30070000 		.4byte	0x730
 3221 0b82 C0080000 		.4byte	.LLST1
 3222 0b86 28       		.uleb128 0x28
 3223 0b87 38030000 		.4byte	.LASF114
 3224 0b8b 01       		.byte	0x1
 3225 0b8c 80       		.byte	0x80
 3226 0b8d 3B030000 		.4byte	0x33b
 3227 0b91 E9080000 		.4byte	.LLST2
 3228 0b95 28       		.uleb128 0x28
 3229 0b96 70070000 		.4byte	.LASF129
 3230 0b9a 01       		.byte	0x1
 3231 0b9b 81       		.byte	0x81
 3232 0b9c AC000000 		.4byte	0xac
 3233 0ba0 14090000 		.4byte	.LLST3
 3234 0ba4 29       		.uleb128 0x29
 3235 0ba5 71030000 		.4byte	.LASF115
 3236 0ba9 01       		.byte	0x1
 3237 0baa 82       		.byte	0x82
 3238 0bab B7000000 		.4byte	0xb7
 3239 0baf 02       		.byte	0x2
 3240 0bb0 91       		.byte	0x91
 3241 0bb1 6C       		.sleb128 -20
 3242 0bb2 22       		.uleb128 0x22
 3243 0bb3 1A000000 		.4byte	.LVL1
 3244 0bb7 120C0000 		.4byte	0xc12
 3245 0bbb C60B0000 		.4byte	0xbc6
 3246 0bbf 23       		.uleb128 0x23
 3247 0bc0 01       		.byte	0x1
 3248 0bc1 50       		.byte	0x50
 3249 0bc2 02       		.byte	0x2
 3250 0bc3 74       		.byte	0x74
 3251 0bc4 00       		.sleb128 0
 3252 0bc5 00       		.byte	0
 3253 0bc6 22       		.uleb128 0x22
 3254 0bc7 3A000000 		.4byte	.LVL3
 3255 0bcb 580C0000 		.4byte	0xc58
 3256 0bcf D90B0000 		.4byte	0xbd9
 3257 0bd3 23       		.uleb128 0x23
 3258 0bd4 01       		.byte	0x1
 3259 0bd5 50       		.byte	0x50
 3260 0bd6 01       		.byte	0x1
 3261 0bd7 32       		.byte	0x32
 3262 0bd8 00       		.byte	0
 3263 0bd9 22       		.uleb128 0x22
 3264 0bda 4C000000 		.4byte	.LVL4
 3265 0bde 2E0C0000 		.4byte	0xc2e
 3266 0be2 ED0B0000 		.4byte	0xbed
 3267 0be6 23       		.uleb128 0x23
 3268 0be7 01       		.byte	0x1
 3269 0be8 50       		.byte	0x50
 3270 0be9 02       		.byte	0x2
 3271 0bea 74       		.byte	0x74
ARM GAS  /tmp/ccHubou1.s 			page 84


 3272 0beb 00       		.sleb128 0
 3273 0bec 00       		.byte	0
 3274 0bed 24       		.uleb128 0x24
 3275 0bee 5A000000 		.4byte	.LVL5
 3276 0bf2 4A0C0000 		.4byte	0xc4a
 3277 0bf6 24       		.uleb128 0x24
 3278 0bf7 70000000 		.4byte	.LVL7
 3279 0bfb 4A0C0000 		.4byte	0xc4a
 3280 0bff 24       		.uleb128 0x24
 3281 0c00 9A000000 		.4byte	.LVL11
 3282 0c04 4A0C0000 		.4byte	0xc4a
 3283 0c08 24       		.uleb128 0x24
 3284 0c09 BE000000 		.4byte	.LVL14
 3285 0c0d 4A0C0000 		.4byte	0xc4a
 3286 0c11 00       		.byte	0
 3287 0c12 2A       		.uleb128 0x2a
 3288 0c13 01       		.byte	0x1
 3289 0c14 01       		.byte	0x1
 3290 0c15 0C070000 		.4byte	.LASF135
 3291 0c19 0C070000 		.4byte	.LASF135
 3292 0c1d 0A       		.byte	0xa
 3293 0c1e D203     		.2byte	0x3d2
 3294 0c20 2A       		.uleb128 0x2a
 3295 0c21 01       		.byte	0x1
 3296 0c22 01       		.byte	0x1
 3297 0c23 93030000 		.4byte	.LASF136
 3298 0c27 93030000 		.4byte	.LASF136
 3299 0c2b 09       		.byte	0x9
 3300 0c2c 7B01     		.2byte	0x17b
 3301 0c2e 2A       		.uleb128 0x2a
 3302 0c2f 01       		.byte	0x1
 3303 0c30 01       		.byte	0x1
 3304 0c31 EC000000 		.4byte	.LASF137
 3305 0c35 EC000000 		.4byte	.LASF137
 3306 0c39 0A       		.byte	0xa
 3307 0c3a D103     		.2byte	0x3d1
 3308 0c3c 2A       		.uleb128 0x2a
 3309 0c3d 01       		.byte	0x1
 3310 0c3e 01       		.byte	0x1
 3311 0c3f 0C010000 		.4byte	.LASF138
 3312 0c43 0C010000 		.4byte	.LASF138
 3313 0c47 09       		.byte	0x9
 3314 0c48 7A01     		.2byte	0x17a
 3315 0c4a 2A       		.uleb128 0x2a
 3316 0c4b 01       		.byte	0x1
 3317 0c4c 01       		.byte	0x1
 3318 0c4d 30040000 		.4byte	.LASF139
 3319 0c51 30040000 		.4byte	.LASF139
 3320 0c55 0C       		.byte	0xc
 3321 0c56 2A01     		.2byte	0x12a
 3322 0c58 2A       		.uleb128 0x2a
 3323 0c59 01       		.byte	0x1
 3324 0c5a 01       		.byte	0x1
 3325 0c5b 1D010000 		.4byte	.LASF140
 3326 0c5f 1D010000 		.4byte	.LASF140
 3327 0c63 0D       		.byte	0xd
 3328 0c64 4507     		.2byte	0x745
ARM GAS  /tmp/ccHubou1.s 			page 85


 3329 0c66 00       		.byte	0
 3330              		.section	.debug_abbrev,"",%progbits
 3331              	.Ldebug_abbrev0:
 3332 0000 01       		.uleb128 0x1
 3333 0001 11       		.uleb128 0x11
 3334 0002 01       		.byte	0x1
 3335 0003 25       		.uleb128 0x25
 3336 0004 0E       		.uleb128 0xe
 3337 0005 13       		.uleb128 0x13
 3338 0006 0B       		.uleb128 0xb
 3339 0007 03       		.uleb128 0x3
 3340 0008 0E       		.uleb128 0xe
 3341 0009 1B       		.uleb128 0x1b
 3342 000a 0E       		.uleb128 0xe
 3343 000b 11       		.uleb128 0x11
 3344 000c 01       		.uleb128 0x1
 3345 000d 12       		.uleb128 0x12
 3346 000e 01       		.uleb128 0x1
 3347 000f 10       		.uleb128 0x10
 3348 0010 06       		.uleb128 0x6
 3349 0011 00       		.byte	0
 3350 0012 00       		.byte	0
 3351 0013 02       		.uleb128 0x2
 3352 0014 24       		.uleb128 0x24
 3353 0015 00       		.byte	0
 3354 0016 0B       		.uleb128 0xb
 3355 0017 0B       		.uleb128 0xb
 3356 0018 3E       		.uleb128 0x3e
 3357 0019 0B       		.uleb128 0xb
 3358 001a 03       		.uleb128 0x3
 3359 001b 0E       		.uleb128 0xe
 3360 001c 00       		.byte	0
 3361 001d 00       		.byte	0
 3362 001e 03       		.uleb128 0x3
 3363 001f 16       		.uleb128 0x16
 3364 0020 00       		.byte	0
 3365 0021 03       		.uleb128 0x3
 3366 0022 0E       		.uleb128 0xe
 3367 0023 3A       		.uleb128 0x3a
 3368 0024 0B       		.uleb128 0xb
 3369 0025 3B       		.uleb128 0x3b
 3370 0026 0B       		.uleb128 0xb
 3371 0027 49       		.uleb128 0x49
 3372 0028 13       		.uleb128 0x13
 3373 0029 00       		.byte	0
 3374 002a 00       		.byte	0
 3375 002b 04       		.uleb128 0x4
 3376 002c 24       		.uleb128 0x24
 3377 002d 00       		.byte	0
 3378 002e 0B       		.uleb128 0xb
 3379 002f 0B       		.uleb128 0xb
 3380 0030 3E       		.uleb128 0x3e
 3381 0031 0B       		.uleb128 0xb
 3382 0032 03       		.uleb128 0x3
 3383 0033 08       		.uleb128 0x8
 3384 0034 00       		.byte	0
 3385 0035 00       		.byte	0
ARM GAS  /tmp/ccHubou1.s 			page 86


 3386 0036 05       		.uleb128 0x5
 3387 0037 26       		.uleb128 0x26
 3388 0038 00       		.byte	0
 3389 0039 49       		.uleb128 0x49
 3390 003a 13       		.uleb128 0x13
 3391 003b 00       		.byte	0
 3392 003c 00       		.byte	0
 3393 003d 06       		.uleb128 0x6
 3394 003e 35       		.uleb128 0x35
 3395 003f 00       		.byte	0
 3396 0040 49       		.uleb128 0x49
 3397 0041 13       		.uleb128 0x13
 3398 0042 00       		.byte	0
 3399 0043 00       		.byte	0
 3400 0044 07       		.uleb128 0x7
 3401 0045 34       		.uleb128 0x34
 3402 0046 00       		.byte	0
 3403 0047 03       		.uleb128 0x3
 3404 0048 0E       		.uleb128 0xe
 3405 0049 3A       		.uleb128 0x3a
 3406 004a 0B       		.uleb128 0xb
 3407 004b 3B       		.uleb128 0x3b
 3408 004c 05       		.uleb128 0x5
 3409 004d 49       		.uleb128 0x49
 3410 004e 13       		.uleb128 0x13
 3411 004f 3F       		.uleb128 0x3f
 3412 0050 0C       		.uleb128 0xc
 3413 0051 3C       		.uleb128 0x3c
 3414 0052 0C       		.uleb128 0xc
 3415 0053 00       		.byte	0
 3416 0054 00       		.byte	0
 3417 0055 08       		.uleb128 0x8
 3418 0056 34       		.uleb128 0x34
 3419 0057 00       		.byte	0
 3420 0058 03       		.uleb128 0x3
 3421 0059 0E       		.uleb128 0xe
 3422 005a 3A       		.uleb128 0x3a
 3423 005b 0B       		.uleb128 0xb
 3424 005c 3B       		.uleb128 0x3b
 3425 005d 0B       		.uleb128 0xb
 3426 005e 49       		.uleb128 0x49
 3427 005f 13       		.uleb128 0x13
 3428 0060 3F       		.uleb128 0x3f
 3429 0061 0C       		.uleb128 0xc
 3430 0062 3C       		.uleb128 0x3c
 3431 0063 0C       		.uleb128 0xc
 3432 0064 00       		.byte	0
 3433 0065 00       		.byte	0
 3434 0066 09       		.uleb128 0x9
 3435 0067 01       		.uleb128 0x1
 3436 0068 01       		.byte	0x1
 3437 0069 49       		.uleb128 0x49
 3438 006a 13       		.uleb128 0x13
 3439 006b 01       		.uleb128 0x1
 3440 006c 13       		.uleb128 0x13
 3441 006d 00       		.byte	0
 3442 006e 00       		.byte	0
ARM GAS  /tmp/ccHubou1.s 			page 87


 3443 006f 0A       		.uleb128 0xa
 3444 0070 21       		.uleb128 0x21
 3445 0071 00       		.byte	0
 3446 0072 49       		.uleb128 0x49
 3447 0073 13       		.uleb128 0x13
 3448 0074 2F       		.uleb128 0x2f
 3449 0075 0B       		.uleb128 0xb
 3450 0076 00       		.byte	0
 3451 0077 00       		.byte	0
 3452 0078 0B       		.uleb128 0xb
 3453 0079 13       		.uleb128 0x13
 3454 007a 01       		.byte	0x1
 3455 007b 0B       		.uleb128 0xb
 3456 007c 0B       		.uleb128 0xb
 3457 007d 3A       		.uleb128 0x3a
 3458 007e 0B       		.uleb128 0xb
 3459 007f 3B       		.uleb128 0x3b
 3460 0080 0B       		.uleb128 0xb
 3461 0081 01       		.uleb128 0x1
 3462 0082 13       		.uleb128 0x13
 3463 0083 00       		.byte	0
 3464 0084 00       		.byte	0
 3465 0085 0C       		.uleb128 0xc
 3466 0086 0D       		.uleb128 0xd
 3467 0087 00       		.byte	0
 3468 0088 03       		.uleb128 0x3
 3469 0089 08       		.uleb128 0x8
 3470 008a 3A       		.uleb128 0x3a
 3471 008b 0B       		.uleb128 0xb
 3472 008c 3B       		.uleb128 0x3b
 3473 008d 0B       		.uleb128 0xb
 3474 008e 49       		.uleb128 0x49
 3475 008f 13       		.uleb128 0x13
 3476 0090 38       		.uleb128 0x38
 3477 0091 0A       		.uleb128 0xa
 3478 0092 00       		.byte	0
 3479 0093 00       		.byte	0
 3480 0094 0D       		.uleb128 0xd
 3481 0095 0D       		.uleb128 0xd
 3482 0096 00       		.byte	0
 3483 0097 03       		.uleb128 0x3
 3484 0098 0E       		.uleb128 0xe
 3485 0099 3A       		.uleb128 0x3a
 3486 009a 0B       		.uleb128 0xb
 3487 009b 3B       		.uleb128 0x3b
 3488 009c 0B       		.uleb128 0xb
 3489 009d 49       		.uleb128 0x49
 3490 009e 13       		.uleb128 0x13
 3491 009f 38       		.uleb128 0x38
 3492 00a0 0A       		.uleb128 0xa
 3493 00a1 00       		.byte	0
 3494 00a2 00       		.byte	0
 3495 00a3 0E       		.uleb128 0xe
 3496 00a4 13       		.uleb128 0x13
 3497 00a5 01       		.byte	0x1
 3498 00a6 0B       		.uleb128 0xb
 3499 00a7 0B       		.uleb128 0xb
ARM GAS  /tmp/ccHubou1.s 			page 88


 3500 00a8 3A       		.uleb128 0x3a
 3501 00a9 0B       		.uleb128 0xb
 3502 00aa 3B       		.uleb128 0x3b
 3503 00ab 05       		.uleb128 0x5
 3504 00ac 01       		.uleb128 0x1
 3505 00ad 13       		.uleb128 0x13
 3506 00ae 00       		.byte	0
 3507 00af 00       		.byte	0
 3508 00b0 0F       		.uleb128 0xf
 3509 00b1 0D       		.uleb128 0xd
 3510 00b2 00       		.byte	0
 3511 00b3 03       		.uleb128 0x3
 3512 00b4 08       		.uleb128 0x8
 3513 00b5 3A       		.uleb128 0x3a
 3514 00b6 0B       		.uleb128 0xb
 3515 00b7 3B       		.uleb128 0x3b
 3516 00b8 05       		.uleb128 0x5
 3517 00b9 49       		.uleb128 0x49
 3518 00ba 13       		.uleb128 0x13
 3519 00bb 38       		.uleb128 0x38
 3520 00bc 0A       		.uleb128 0xa
 3521 00bd 00       		.byte	0
 3522 00be 00       		.byte	0
 3523 00bf 10       		.uleb128 0x10
 3524 00c0 0D       		.uleb128 0xd
 3525 00c1 00       		.byte	0
 3526 00c2 03       		.uleb128 0x3
 3527 00c3 0E       		.uleb128 0xe
 3528 00c4 3A       		.uleb128 0x3a
 3529 00c5 0B       		.uleb128 0xb
 3530 00c6 3B       		.uleb128 0x3b
 3531 00c7 05       		.uleb128 0x5
 3532 00c8 49       		.uleb128 0x49
 3533 00c9 13       		.uleb128 0x13
 3534 00ca 38       		.uleb128 0x38
 3535 00cb 0A       		.uleb128 0xa
 3536 00cc 00       		.byte	0
 3537 00cd 00       		.byte	0
 3538 00ce 11       		.uleb128 0x11
 3539 00cf 16       		.uleb128 0x16
 3540 00d0 00       		.byte	0
 3541 00d1 03       		.uleb128 0x3
 3542 00d2 0E       		.uleb128 0xe
 3543 00d3 3A       		.uleb128 0x3a
 3544 00d4 0B       		.uleb128 0xb
 3545 00d5 3B       		.uleb128 0x3b
 3546 00d6 05       		.uleb128 0x5
 3547 00d7 49       		.uleb128 0x49
 3548 00d8 13       		.uleb128 0x13
 3549 00d9 00       		.byte	0
 3550 00da 00       		.byte	0
 3551 00db 12       		.uleb128 0x12
 3552 00dc 04       		.uleb128 0x4
 3553 00dd 01       		.byte	0x1
 3554 00de 0B       		.uleb128 0xb
 3555 00df 0B       		.uleb128 0xb
 3556 00e0 49       		.uleb128 0x49
ARM GAS  /tmp/ccHubou1.s 			page 89


 3557 00e1 13       		.uleb128 0x13
 3558 00e2 3A       		.uleb128 0x3a
 3559 00e3 0B       		.uleb128 0xb
 3560 00e4 3B       		.uleb128 0x3b
 3561 00e5 0B       		.uleb128 0xb
 3562 00e6 01       		.uleb128 0x1
 3563 00e7 13       		.uleb128 0x13
 3564 00e8 00       		.byte	0
 3565 00e9 00       		.byte	0
 3566 00ea 13       		.uleb128 0x13
 3567 00eb 28       		.uleb128 0x28
 3568 00ec 00       		.byte	0
 3569 00ed 03       		.uleb128 0x3
 3570 00ee 0E       		.uleb128 0xe
 3571 00ef 1C       		.uleb128 0x1c
 3572 00f0 0B       		.uleb128 0xb
 3573 00f1 00       		.byte	0
 3574 00f2 00       		.byte	0
 3575 00f3 14       		.uleb128 0x14
 3576 00f4 28       		.uleb128 0x28
 3577 00f5 00       		.byte	0
 3578 00f6 03       		.uleb128 0x3
 3579 00f7 08       		.uleb128 0x8
 3580 00f8 1C       		.uleb128 0x1c
 3581 00f9 0B       		.uleb128 0xb
 3582 00fa 00       		.byte	0
 3583 00fb 00       		.byte	0
 3584 00fc 15       		.uleb128 0x15
 3585 00fd 13       		.uleb128 0x13
 3586 00fe 01       		.byte	0x1
 3587 00ff 03       		.uleb128 0x3
 3588 0100 0E       		.uleb128 0xe
 3589 0101 0B       		.uleb128 0xb
 3590 0102 0B       		.uleb128 0xb
 3591 0103 3A       		.uleb128 0x3a
 3592 0104 0B       		.uleb128 0xb
 3593 0105 3B       		.uleb128 0x3b
 3594 0106 0B       		.uleb128 0xb
 3595 0107 01       		.uleb128 0x1
 3596 0108 13       		.uleb128 0x13
 3597 0109 00       		.byte	0
 3598 010a 00       		.byte	0
 3599 010b 16       		.uleb128 0x16
 3600 010c 0F       		.uleb128 0xf
 3601 010d 00       		.byte	0
 3602 010e 0B       		.uleb128 0xb
 3603 010f 0B       		.uleb128 0xb
 3604 0110 49       		.uleb128 0x49
 3605 0111 13       		.uleb128 0x13
 3606 0112 00       		.byte	0
 3607 0113 00       		.byte	0
 3608 0114 17       		.uleb128 0x17
 3609 0115 0F       		.uleb128 0xf
 3610 0116 00       		.byte	0
 3611 0117 0B       		.uleb128 0xb
 3612 0118 0B       		.uleb128 0xb
 3613 0119 00       		.byte	0
ARM GAS  /tmp/ccHubou1.s 			page 90


 3614 011a 00       		.byte	0
 3615 011b 18       		.uleb128 0x18
 3616 011c 15       		.uleb128 0x15
 3617 011d 01       		.byte	0x1
 3618 011e 27       		.uleb128 0x27
 3619 011f 0C       		.uleb128 0xc
 3620 0120 01       		.uleb128 0x1
 3621 0121 13       		.uleb128 0x13
 3622 0122 00       		.byte	0
 3623 0123 00       		.byte	0
 3624 0124 19       		.uleb128 0x19
 3625 0125 05       		.uleb128 0x5
 3626 0126 00       		.byte	0
 3627 0127 49       		.uleb128 0x49
 3628 0128 13       		.uleb128 0x13
 3629 0129 00       		.byte	0
 3630 012a 00       		.byte	0
 3631 012b 1A       		.uleb128 0x1a
 3632 012c 2E       		.uleb128 0x2e
 3633 012d 01       		.byte	0x1
 3634 012e 3F       		.uleb128 0x3f
 3635 012f 0C       		.uleb128 0xc
 3636 0130 03       		.uleb128 0x3
 3637 0131 0E       		.uleb128 0xe
 3638 0132 3A       		.uleb128 0x3a
 3639 0133 0B       		.uleb128 0xb
 3640 0134 3B       		.uleb128 0x3b
 3641 0135 05       		.uleb128 0x5
 3642 0136 27       		.uleb128 0x27
 3643 0137 0C       		.uleb128 0xc
 3644 0138 49       		.uleb128 0x49
 3645 0139 13       		.uleb128 0x13
 3646 013a 11       		.uleb128 0x11
 3647 013b 01       		.uleb128 0x1
 3648 013c 12       		.uleb128 0x12
 3649 013d 01       		.uleb128 0x1
 3650 013e 40       		.uleb128 0x40
 3651 013f 06       		.uleb128 0x6
 3652 0140 9742     		.uleb128 0x2117
 3653 0142 0C       		.uleb128 0xc
 3654 0143 01       		.uleb128 0x1
 3655 0144 13       		.uleb128 0x13
 3656 0145 00       		.byte	0
 3657 0146 00       		.byte	0
 3658 0147 1B       		.uleb128 0x1b
 3659 0148 05       		.uleb128 0x5
 3660 0149 00       		.byte	0
 3661 014a 03       		.uleb128 0x3
 3662 014b 0E       		.uleb128 0xe
 3663 014c 3A       		.uleb128 0x3a
 3664 014d 0B       		.uleb128 0xb
 3665 014e 3B       		.uleb128 0x3b
 3666 014f 05       		.uleb128 0x5
 3667 0150 49       		.uleb128 0x49
 3668 0151 13       		.uleb128 0x13
 3669 0152 02       		.uleb128 0x2
 3670 0153 06       		.uleb128 0x6
ARM GAS  /tmp/ccHubou1.s 			page 91


 3671 0154 00       		.byte	0
 3672 0155 00       		.byte	0
 3673 0156 1C       		.uleb128 0x1c
 3674 0157 34       		.uleb128 0x34
 3675 0158 00       		.byte	0
 3676 0159 03       		.uleb128 0x3
 3677 015a 0E       		.uleb128 0xe
 3678 015b 3A       		.uleb128 0x3a
 3679 015c 0B       		.uleb128 0xb
 3680 015d 3B       		.uleb128 0x3b
 3681 015e 05       		.uleb128 0x5
 3682 015f 49       		.uleb128 0x49
 3683 0160 13       		.uleb128 0x13
 3684 0161 02       		.uleb128 0x2
 3685 0162 06       		.uleb128 0x6
 3686 0163 00       		.byte	0
 3687 0164 00       		.byte	0
 3688 0165 1D       		.uleb128 0x1d
 3689 0166 34       		.uleb128 0x34
 3690 0167 00       		.byte	0
 3691 0168 03       		.uleb128 0x3
 3692 0169 0E       		.uleb128 0xe
 3693 016a 3A       		.uleb128 0x3a
 3694 016b 0B       		.uleb128 0xb
 3695 016c 3B       		.uleb128 0x3b
 3696 016d 05       		.uleb128 0x5
 3697 016e 49       		.uleb128 0x49
 3698 016f 13       		.uleb128 0x13
 3699 0170 00       		.byte	0
 3700 0171 00       		.byte	0
 3701 0172 1E       		.uleb128 0x1e
 3702 0173 34       		.uleb128 0x34
 3703 0174 00       		.byte	0
 3704 0175 03       		.uleb128 0x3
 3705 0176 0E       		.uleb128 0xe
 3706 0177 3A       		.uleb128 0x3a
 3707 0178 0B       		.uleb128 0xb
 3708 0179 3B       		.uleb128 0x3b
 3709 017a 05       		.uleb128 0x5
 3710 017b 49       		.uleb128 0x49
 3711 017c 13       		.uleb128 0x13
 3712 017d 02       		.uleb128 0x2
 3713 017e 0A       		.uleb128 0xa
 3714 017f 00       		.byte	0
 3715 0180 00       		.byte	0
 3716 0181 1F       		.uleb128 0x1f
 3717 0182 2E       		.uleb128 0x2e
 3718 0183 01       		.byte	0x1
 3719 0184 3F       		.uleb128 0x3f
 3720 0185 0C       		.uleb128 0xc
 3721 0186 03       		.uleb128 0x3
 3722 0187 0E       		.uleb128 0xe
 3723 0188 3A       		.uleb128 0x3a
 3724 0189 0B       		.uleb128 0xb
 3725 018a 3B       		.uleb128 0x3b
 3726 018b 05       		.uleb128 0x5
 3727 018c 27       		.uleb128 0x27
ARM GAS  /tmp/ccHubou1.s 			page 92


 3728 018d 0C       		.uleb128 0xc
 3729 018e 11       		.uleb128 0x11
 3730 018f 01       		.uleb128 0x1
 3731 0190 12       		.uleb128 0x12
 3732 0191 01       		.uleb128 0x1
 3733 0192 40       		.uleb128 0x40
 3734 0193 0A       		.uleb128 0xa
 3735 0194 9742     		.uleb128 0x2117
 3736 0196 0C       		.uleb128 0xc
 3737 0197 01       		.uleb128 0x1
 3738 0198 13       		.uleb128 0x13
 3739 0199 00       		.byte	0
 3740 019a 00       		.byte	0
 3741 019b 20       		.uleb128 0x20
 3742 019c 05       		.uleb128 0x5
 3743 019d 00       		.byte	0
 3744 019e 03       		.uleb128 0x3
 3745 019f 0E       		.uleb128 0xe
 3746 01a0 3A       		.uleb128 0x3a
 3747 01a1 0B       		.uleb128 0xb
 3748 01a2 3B       		.uleb128 0x3b
 3749 01a3 05       		.uleb128 0x5
 3750 01a4 49       		.uleb128 0x49
 3751 01a5 13       		.uleb128 0x13
 3752 01a6 02       		.uleb128 0x2
 3753 01a7 0A       		.uleb128 0xa
 3754 01a8 00       		.byte	0
 3755 01a9 00       		.byte	0
 3756 01aa 21       		.uleb128 0x21
 3757 01ab 2E       		.uleb128 0x2e
 3758 01ac 01       		.byte	0x1
 3759 01ad 3F       		.uleb128 0x3f
 3760 01ae 0C       		.uleb128 0xc
 3761 01af 03       		.uleb128 0x3
 3762 01b0 0E       		.uleb128 0xe
 3763 01b1 3A       		.uleb128 0x3a
 3764 01b2 0B       		.uleb128 0xb
 3765 01b3 3B       		.uleb128 0x3b
 3766 01b4 05       		.uleb128 0x5
 3767 01b5 27       		.uleb128 0x27
 3768 01b6 0C       		.uleb128 0xc
 3769 01b7 49       		.uleb128 0x49
 3770 01b8 13       		.uleb128 0x13
 3771 01b9 11       		.uleb128 0x11
 3772 01ba 01       		.uleb128 0x1
 3773 01bb 12       		.uleb128 0x12
 3774 01bc 01       		.uleb128 0x1
 3775 01bd 40       		.uleb128 0x40
 3776 01be 0A       		.uleb128 0xa
 3777 01bf 9742     		.uleb128 0x2117
 3778 01c1 0C       		.uleb128 0xc
 3779 01c2 01       		.uleb128 0x1
 3780 01c3 13       		.uleb128 0x13
 3781 01c4 00       		.byte	0
 3782 01c5 00       		.byte	0
 3783 01c6 22       		.uleb128 0x22
 3784 01c7 898201   		.uleb128 0x4109
ARM GAS  /tmp/ccHubou1.s 			page 93


 3785 01ca 01       		.byte	0x1
 3786 01cb 11       		.uleb128 0x11
 3787 01cc 01       		.uleb128 0x1
 3788 01cd 31       		.uleb128 0x31
 3789 01ce 13       		.uleb128 0x13
 3790 01cf 01       		.uleb128 0x1
 3791 01d0 13       		.uleb128 0x13
 3792 01d1 00       		.byte	0
 3793 01d2 00       		.byte	0
 3794 01d3 23       		.uleb128 0x23
 3795 01d4 8A8201   		.uleb128 0x410a
 3796 01d7 00       		.byte	0
 3797 01d8 02       		.uleb128 0x2
 3798 01d9 0A       		.uleb128 0xa
 3799 01da 9142     		.uleb128 0x2111
 3800 01dc 0A       		.uleb128 0xa
 3801 01dd 00       		.byte	0
 3802 01de 00       		.byte	0
 3803 01df 24       		.uleb128 0x24
 3804 01e0 898201   		.uleb128 0x4109
 3805 01e3 00       		.byte	0
 3806 01e4 11       		.uleb128 0x11
 3807 01e5 01       		.uleb128 0x1
 3808 01e6 31       		.uleb128 0x31
 3809 01e7 13       		.uleb128 0x13
 3810 01e8 00       		.byte	0
 3811 01e9 00       		.byte	0
 3812 01ea 25       		.uleb128 0x25
 3813 01eb 898201   		.uleb128 0x4109
 3814 01ee 01       		.byte	0x1
 3815 01ef 11       		.uleb128 0x11
 3816 01f0 01       		.uleb128 0x1
 3817 01f1 31       		.uleb128 0x31
 3818 01f2 13       		.uleb128 0x13
 3819 01f3 00       		.byte	0
 3820 01f4 00       		.byte	0
 3821 01f5 26       		.uleb128 0x26
 3822 01f6 2E       		.uleb128 0x2e
 3823 01f7 01       		.byte	0x1
 3824 01f8 3F       		.uleb128 0x3f
 3825 01f9 0C       		.uleb128 0xc
 3826 01fa 03       		.uleb128 0x3
 3827 01fb 0E       		.uleb128 0xe
 3828 01fc 3A       		.uleb128 0x3a
 3829 01fd 0B       		.uleb128 0xb
 3830 01fe 3B       		.uleb128 0x3b
 3831 01ff 0B       		.uleb128 0xb
 3832 0200 27       		.uleb128 0x27
 3833 0201 0C       		.uleb128 0xc
 3834 0202 49       		.uleb128 0x49
 3835 0203 13       		.uleb128 0x13
 3836 0204 11       		.uleb128 0x11
 3837 0205 01       		.uleb128 0x1
 3838 0206 12       		.uleb128 0x12
 3839 0207 01       		.uleb128 0x1
 3840 0208 40       		.uleb128 0x40
 3841 0209 06       		.uleb128 0x6
ARM GAS  /tmp/ccHubou1.s 			page 94


 3842 020a 9742     		.uleb128 0x2117
 3843 020c 0C       		.uleb128 0xc
 3844 020d 01       		.uleb128 0x1
 3845 020e 13       		.uleb128 0x13
 3846 020f 00       		.byte	0
 3847 0210 00       		.byte	0
 3848 0211 27       		.uleb128 0x27
 3849 0212 05       		.uleb128 0x5
 3850 0213 00       		.byte	0
 3851 0214 03       		.uleb128 0x3
 3852 0215 0E       		.uleb128 0xe
 3853 0216 3A       		.uleb128 0x3a
 3854 0217 0B       		.uleb128 0xb
 3855 0218 3B       		.uleb128 0x3b
 3856 0219 0B       		.uleb128 0xb
 3857 021a 49       		.uleb128 0x49
 3858 021b 13       		.uleb128 0x13
 3859 021c 02       		.uleb128 0x2
 3860 021d 06       		.uleb128 0x6
 3861 021e 00       		.byte	0
 3862 021f 00       		.byte	0
 3863 0220 28       		.uleb128 0x28
 3864 0221 34       		.uleb128 0x34
 3865 0222 00       		.byte	0
 3866 0223 03       		.uleb128 0x3
 3867 0224 0E       		.uleb128 0xe
 3868 0225 3A       		.uleb128 0x3a
 3869 0226 0B       		.uleb128 0xb
 3870 0227 3B       		.uleb128 0x3b
 3871 0228 0B       		.uleb128 0xb
 3872 0229 49       		.uleb128 0x49
 3873 022a 13       		.uleb128 0x13
 3874 022b 02       		.uleb128 0x2
 3875 022c 06       		.uleb128 0x6
 3876 022d 00       		.byte	0
 3877 022e 00       		.byte	0
 3878 022f 29       		.uleb128 0x29
 3879 0230 34       		.uleb128 0x34
 3880 0231 00       		.byte	0
 3881 0232 03       		.uleb128 0x3
 3882 0233 0E       		.uleb128 0xe
 3883 0234 3A       		.uleb128 0x3a
 3884 0235 0B       		.uleb128 0xb
 3885 0236 3B       		.uleb128 0x3b
 3886 0237 0B       		.uleb128 0xb
 3887 0238 49       		.uleb128 0x49
 3888 0239 13       		.uleb128 0x13
 3889 023a 02       		.uleb128 0x2
 3890 023b 0A       		.uleb128 0xa
 3891 023c 00       		.byte	0
 3892 023d 00       		.byte	0
 3893 023e 2A       		.uleb128 0x2a
 3894 023f 2E       		.uleb128 0x2e
 3895 0240 00       		.byte	0
 3896 0241 3F       		.uleb128 0x3f
 3897 0242 0C       		.uleb128 0xc
 3898 0243 3C       		.uleb128 0x3c
ARM GAS  /tmp/ccHubou1.s 			page 95


 3899 0244 0C       		.uleb128 0xc
 3900 0245 8740     		.uleb128 0x2007
 3901 0247 0E       		.uleb128 0xe
 3902 0248 03       		.uleb128 0x3
 3903 0249 0E       		.uleb128 0xe
 3904 024a 3A       		.uleb128 0x3a
 3905 024b 0B       		.uleb128 0xb
 3906 024c 3B       		.uleb128 0x3b
 3907 024d 05       		.uleb128 0x5
 3908 024e 00       		.byte	0
 3909 024f 00       		.byte	0
 3910 0250 00       		.byte	0
 3911              		.section	.debug_loc,"",%progbits
 3912              	.Ldebug_loc0:
 3913              	.LLST37:
 3914 0000 74070000 		.4byte	.LFB77-.Ltext0
 3915 0004 7A070000 		.4byte	.LCFI21-.Ltext0
 3916 0008 0200     		.2byte	0x2
 3917 000a 7D       		.byte	0x7d
 3918 000b 00       		.sleb128 0
 3919 000c 7A070000 		.4byte	.LCFI21-.Ltext0
 3920 0010 CC070000 		.4byte	.LFE77-.Ltext0
 3921 0014 0200     		.2byte	0x2
 3922 0016 7D       		.byte	0x7d
 3923 0017 08       		.sleb128 8
 3924 0018 00000000 		.4byte	0
 3925 001c 00000000 		.4byte	0
 3926              	.LLST38:
 3927 0020 74070000 		.4byte	.LVL116-.Ltext0
 3928 0024 9A070000 		.4byte	.LVL117-.Ltext0
 3929 0028 0100     		.2byte	0x1
 3930 002a 50       		.byte	0x50
 3931 002b 9A070000 		.4byte	.LVL117-.Ltext0
 3932 002f C0070000 		.4byte	.LVL122-.Ltext0
 3933 0033 0100     		.2byte	0x1
 3934 0035 52       		.byte	0x52
 3935 0036 C0070000 		.4byte	.LVL122-.Ltext0
 3936 003a C2070000 		.4byte	.LVL123-.Ltext0
 3937 003e 0100     		.2byte	0x1
 3938 0040 50       		.byte	0x50
 3939 0041 C2070000 		.4byte	.LVL123-.Ltext0
 3940 0045 CC070000 		.4byte	.LFE77-.Ltext0
 3941 0049 0100     		.2byte	0x1
 3942 004b 52       		.byte	0x52
 3943 004c 00000000 		.4byte	0
 3944 0050 00000000 		.4byte	0
 3945              	.LLST39:
 3946 0054 74070000 		.4byte	.LVL116-.Ltext0
 3947 0058 A2070000 		.4byte	.LVL118-.Ltext0
 3948 005c 0100     		.2byte	0x1
 3949 005e 51       		.byte	0x51
 3950 005f A2070000 		.4byte	.LVL118-.Ltext0
 3951 0063 B4070000 		.4byte	.LVL120-.Ltext0
 3952 0067 0400     		.2byte	0x4
 3953 0069 F3       		.byte	0xf3
 3954 006a 01       		.uleb128 0x1
 3955 006b 51       		.byte	0x51
ARM GAS  /tmp/ccHubou1.s 			page 96


 3956 006c 9F       		.byte	0x9f
 3957 006d B4070000 		.4byte	.LVL120-.Ltext0
 3958 0071 CC070000 		.4byte	.LFE77-.Ltext0
 3959 0075 0100     		.2byte	0x1
 3960 0077 51       		.byte	0x51
 3961 0078 00000000 		.4byte	0
 3962 007c 00000000 		.4byte	0
 3963              	.LLST40:
 3964 0080 74070000 		.4byte	.LVL116-.Ltext0
 3965 0084 AC070000 		.4byte	.LVL119-.Ltext0
 3966 0088 0200     		.2byte	0x2
 3967 008a 30       		.byte	0x30
 3968 008b 9F       		.byte	0x9f
 3969 008c AC070000 		.4byte	.LVL119-.Ltext0
 3970 0090 B4070000 		.4byte	.LVL120-.Ltext0
 3971 0094 0100     		.2byte	0x1
 3972 0096 50       		.byte	0x50
 3973 0097 B4070000 		.4byte	.LVL120-.Ltext0
 3974 009b BE070000 		.4byte	.LVL121-.Ltext0
 3975 009f 0200     		.2byte	0x2
 3976 00a1 30       		.byte	0x30
 3977 00a2 9F       		.byte	0x9f
 3978 00a3 BE070000 		.4byte	.LVL121-.Ltext0
 3979 00a7 C0070000 		.4byte	.LVL122-.Ltext0
 3980 00ab 0200     		.2byte	0x2
 3981 00ad 31       		.byte	0x31
 3982 00ae 9F       		.byte	0x9f
 3983 00af C0070000 		.4byte	.LVL122-.Ltext0
 3984 00b3 CC070000 		.4byte	.LFE77-.Ltext0
 3985 00b7 0200     		.2byte	0x2
 3986 00b9 30       		.byte	0x30
 3987 00ba 9F       		.byte	0x9f
 3988 00bb 00000000 		.4byte	0
 3989 00bf 00000000 		.4byte	0
 3990              	.LLST33:
 3991 00c3 9E050000 		.4byte	.LFB76-.Ltext0
 3992 00c7 A0050000 		.4byte	.LCFI18-.Ltext0
 3993 00cb 0200     		.2byte	0x2
 3994 00cd 7D       		.byte	0x7d
 3995 00ce 00       		.sleb128 0
 3996 00cf A0050000 		.4byte	.LCFI18-.Ltext0
 3997 00d3 B0060000 		.4byte	.LCFI19-.Ltext0
 3998 00d7 0200     		.2byte	0x2
 3999 00d9 7D       		.byte	0x7d
 4000 00da 20       		.sleb128 32
 4001 00db B0060000 		.4byte	.LCFI19-.Ltext0
 4002 00df B2060000 		.4byte	.LCFI20-.Ltext0
 4003 00e3 0200     		.2byte	0x2
 4004 00e5 7D       		.byte	0x7d
 4005 00e6 14       		.sleb128 20
 4006 00e7 B2060000 		.4byte	.LCFI20-.Ltext0
 4007 00eb 74070000 		.4byte	.LFE76-.Ltext0
 4008 00ef 0200     		.2byte	0x2
 4009 00f1 7D       		.byte	0x7d
 4010 00f2 20       		.sleb128 32
 4011 00f3 00000000 		.4byte	0
 4012 00f7 00000000 		.4byte	0
ARM GAS  /tmp/ccHubou1.s 			page 97


 4013              	.LLST34:
 4014 00fb 9E050000 		.4byte	.LVL91-.Ltext0
 4015 00ff A4050000 		.4byte	.LVL92-.Ltext0
 4016 0103 0100     		.2byte	0x1
 4017 0105 50       		.byte	0x50
 4018 0106 A4050000 		.4byte	.LVL92-.Ltext0
 4019 010a 74070000 		.4byte	.LFE76-.Ltext0
 4020 010e 0100     		.2byte	0x1
 4021 0110 52       		.byte	0x52
 4022 0111 00000000 		.4byte	0
 4023 0115 00000000 		.4byte	0
 4024              	.LLST35:
 4025 0119 9E050000 		.4byte	.LVL91-.Ltext0
 4026 011d 6E060000 		.4byte	.LVL98-.Ltext0
 4027 0121 0100     		.2byte	0x1
 4028 0123 51       		.byte	0x51
 4029 0124 6E060000 		.4byte	.LVL98-.Ltext0
 4030 0128 B2060000 		.4byte	.LVL101-.Ltext0
 4031 012c 0400     		.2byte	0x4
 4032 012e F3       		.byte	0xf3
 4033 012f 01       		.uleb128 0x1
 4034 0130 51       		.byte	0x51
 4035 0131 9F       		.byte	0x9f
 4036 0132 B2060000 		.4byte	.LVL101-.Ltext0
 4037 0136 2C070000 		.4byte	.LVL108-.Ltext0
 4038 013a 0100     		.2byte	0x1
 4039 013c 51       		.byte	0x51
 4040 013d 2C070000 		.4byte	.LVL108-.Ltext0
 4041 0141 36070000 		.4byte	.LVL109-.Ltext0
 4042 0145 0400     		.2byte	0x4
 4043 0147 F3       		.byte	0xf3
 4044 0148 01       		.uleb128 0x1
 4045 0149 51       		.byte	0x51
 4046 014a 9F       		.byte	0x9f
 4047 014b 36070000 		.4byte	.LVL109-.Ltext0
 4048 014f 38070000 		.4byte	.LVL110-.Ltext0
 4049 0153 0100     		.2byte	0x1
 4050 0155 51       		.byte	0x51
 4051 0156 38070000 		.4byte	.LVL110-.Ltext0
 4052 015a 42070000 		.4byte	.LVL111-.Ltext0
 4053 015e 0400     		.2byte	0x4
 4054 0160 F3       		.byte	0xf3
 4055 0161 01       		.uleb128 0x1
 4056 0162 51       		.byte	0x51
 4057 0163 9F       		.byte	0x9f
 4058 0164 42070000 		.4byte	.LVL111-.Ltext0
 4059 0168 44070000 		.4byte	.LVL112-.Ltext0
 4060 016c 0100     		.2byte	0x1
 4061 016e 51       		.byte	0x51
 4062 016f 44070000 		.4byte	.LVL112-.Ltext0
 4063 0173 60070000 		.4byte	.LVL115-.Ltext0
 4064 0177 0400     		.2byte	0x4
 4065 0179 F3       		.byte	0xf3
 4066 017a 01       		.uleb128 0x1
 4067 017b 51       		.byte	0x51
 4068 017c 9F       		.byte	0x9f
 4069 017d 60070000 		.4byte	.LVL115-.Ltext0
ARM GAS  /tmp/ccHubou1.s 			page 98


 4070 0181 74070000 		.4byte	.LFE76-.Ltext0
 4071 0185 0100     		.2byte	0x1
 4072 0187 51       		.byte	0x51
 4073 0188 00000000 		.4byte	0
 4074 018c 00000000 		.4byte	0
 4075              	.LLST36:
 4076 0190 9E050000 		.4byte	.LVL91-.Ltext0
 4077 0194 D8050000 		.4byte	.LVL93-.Ltext0
 4078 0198 0200     		.2byte	0x2
 4079 019a 30       		.byte	0x30
 4080 019b 9F       		.byte	0x9f
 4081 019c D8050000 		.4byte	.LVL93-.Ltext0
 4082 01a0 FE050000 		.4byte	.LVL94-.Ltext0
 4083 01a4 0100     		.2byte	0x1
 4084 01a6 50       		.byte	0x50
 4085 01a7 06060000 		.4byte	.LVL95-.Ltext0
 4086 01ab 10060000 		.4byte	.LVL96-.Ltext0
 4087 01af 0200     		.2byte	0x2
 4088 01b1 31       		.byte	0x31
 4089 01b2 9F       		.byte	0x9f
 4090 01b3 10060000 		.4byte	.LVL96-.Ltext0
 4091 01b7 AE060000 		.4byte	.LVL100-.Ltext0
 4092 01bb 0100     		.2byte	0x1
 4093 01bd 50       		.byte	0x50
 4094 01be B2060000 		.4byte	.LVL101-.Ltext0
 4095 01c2 BC060000 		.4byte	.LVL102-.Ltext0
 4096 01c6 0200     		.2byte	0x2
 4097 01c8 30       		.byte	0x30
 4098 01c9 9F       		.byte	0x9f
 4099 01ca BC060000 		.4byte	.LVL102-.Ltext0
 4100 01ce BE060000 		.4byte	.LVL103-.Ltext0
 4101 01d2 0200     		.2byte	0x2
 4102 01d4 31       		.byte	0x31
 4103 01d5 9F       		.byte	0x9f
 4104 01d6 BE060000 		.4byte	.LVL103-.Ltext0
 4105 01da 04070000 		.4byte	.LVL104-.Ltext0
 4106 01de 0200     		.2byte	0x2
 4107 01e0 30       		.byte	0x30
 4108 01e1 9F       		.byte	0x9f
 4109 01e2 04070000 		.4byte	.LVL104-.Ltext0
 4110 01e6 06070000 		.4byte	.LVL105-.Ltext0
 4111 01ea 0100     		.2byte	0x1
 4112 01ec 50       		.byte	0x50
 4113 01ed 0C070000 		.4byte	.LVL106-.Ltext0
 4114 01f1 10070000 		.4byte	.LVL107-.Ltext0
 4115 01f5 0200     		.2byte	0x2
 4116 01f7 31       		.byte	0x31
 4117 01f8 9F       		.byte	0x9f
 4118 01f9 10070000 		.4byte	.LVL107-.Ltext0
 4119 01fd 58070000 		.4byte	.LVL113-.Ltext0
 4120 0201 0100     		.2byte	0x1
 4121 0203 50       		.byte	0x50
 4122 0204 5E070000 		.4byte	.LVL114-.Ltext0
 4123 0208 60070000 		.4byte	.LVL115-.Ltext0
 4124 020c 0200     		.2byte	0x2
 4125 020e 31       		.byte	0x31
 4126 020f 9F       		.byte	0x9f
ARM GAS  /tmp/ccHubou1.s 			page 99


 4127 0210 60070000 		.4byte	.LVL115-.Ltext0
 4128 0214 74070000 		.4byte	.LFE76-.Ltext0
 4129 0218 0200     		.2byte	0x2
 4130 021a 30       		.byte	0x30
 4131 021b 9F       		.byte	0x9f
 4132 021c 00000000 		.4byte	0
 4133 0220 00000000 		.4byte	0
 4134              	.LLST31:
 4135 0224 7E050000 		.4byte	.LVL87-.Ltext0
 4136 0228 82050000 		.4byte	.LVL88-.Ltext0
 4137 022c 0100     		.2byte	0x1
 4138 022e 50       		.byte	0x50
 4139 022f 82050000 		.4byte	.LVL88-.Ltext0
 4140 0233 9C050000 		.4byte	.LFE74-.Ltext0
 4141 0237 0400     		.2byte	0x4
 4142 0239 F3       		.byte	0xf3
 4143 023a 01       		.uleb128 0x1
 4144 023b 50       		.byte	0x50
 4145 023c 9F       		.byte	0x9f
 4146 023d 00000000 		.4byte	0
 4147 0241 00000000 		.4byte	0
 4148              	.LLST32:
 4149 0245 7E050000 		.4byte	.LVL87-.Ltext0
 4150 0249 82050000 		.4byte	.LVL88-.Ltext0
 4151 024d 0200     		.2byte	0x2
 4152 024f 30       		.byte	0x30
 4153 0250 9F       		.byte	0x9f
 4154 0251 82050000 		.4byte	.LVL88-.Ltext0
 4155 0255 9C050000 		.4byte	.LFE74-.Ltext0
 4156 0259 0100     		.2byte	0x1
 4157 025b 50       		.byte	0x50
 4158 025c 00000000 		.4byte	0
 4159 0260 00000000 		.4byte	0
 4160              	.LLST29:
 4161 0264 60050000 		.4byte	.LVL79-.Ltext0
 4162 0268 70050000 		.4byte	.LVL80-.Ltext0
 4163 026c 0100     		.2byte	0x1
 4164 026e 50       		.byte	0x50
 4165 026f 70050000 		.4byte	.LVL80-.Ltext0
 4166 0273 72050000 		.4byte	.LVL81-.Ltext0
 4167 0277 0400     		.2byte	0x4
 4168 0279 F3       		.byte	0xf3
 4169 027a 01       		.uleb128 0x1
 4170 027b 50       		.byte	0x50
 4171 027c 9F       		.byte	0x9f
 4172 027d 72050000 		.4byte	.LVL81-.Ltext0
 4173 0281 74050000 		.4byte	.LVL82-.Ltext0
 4174 0285 0100     		.2byte	0x1
 4175 0287 50       		.byte	0x50
 4176 0288 74050000 		.4byte	.LVL82-.Ltext0
 4177 028c 76050000 		.4byte	.LVL83-.Ltext0
 4178 0290 0400     		.2byte	0x4
 4179 0292 F3       		.byte	0xf3
 4180 0293 01       		.uleb128 0x1
 4181 0294 50       		.byte	0x50
 4182 0295 9F       		.byte	0x9f
 4183 0296 76050000 		.4byte	.LVL83-.Ltext0
ARM GAS  /tmp/ccHubou1.s 			page 100


 4184 029a 78050000 		.4byte	.LVL84-.Ltext0
 4185 029e 0100     		.2byte	0x1
 4186 02a0 50       		.byte	0x50
 4187 02a1 78050000 		.4byte	.LVL84-.Ltext0
 4188 02a5 7A050000 		.4byte	.LVL85-.Ltext0
 4189 02a9 0400     		.2byte	0x4
 4190 02ab F3       		.byte	0xf3
 4191 02ac 01       		.uleb128 0x1
 4192 02ad 50       		.byte	0x50
 4193 02ae 9F       		.byte	0x9f
 4194 02af 7A050000 		.4byte	.LVL85-.Ltext0
 4195 02b3 7C050000 		.4byte	.LVL86-.Ltext0
 4196 02b7 0100     		.2byte	0x1
 4197 02b9 50       		.byte	0x50
 4198 02ba 7C050000 		.4byte	.LVL86-.Ltext0
 4199 02be 7E050000 		.4byte	.LFE73-.Ltext0
 4200 02c2 0400     		.2byte	0x4
 4201 02c4 F3       		.byte	0xf3
 4202 02c5 01       		.uleb128 0x1
 4203 02c6 50       		.byte	0x50
 4204 02c7 9F       		.byte	0x9f
 4205 02c8 00000000 		.4byte	0
 4206 02cc 00000000 		.4byte	0
 4207              	.LLST30:
 4208 02d0 60050000 		.4byte	.LVL79-.Ltext0
 4209 02d4 70050000 		.4byte	.LVL80-.Ltext0
 4210 02d8 0200     		.2byte	0x2
 4211 02da 30       		.byte	0x30
 4212 02db 9F       		.byte	0x9f
 4213 02dc 70050000 		.4byte	.LVL80-.Ltext0
 4214 02e0 72050000 		.4byte	.LVL81-.Ltext0
 4215 02e4 0100     		.2byte	0x1
 4216 02e6 50       		.byte	0x50
 4217 02e7 72050000 		.4byte	.LVL81-.Ltext0
 4218 02eb 74050000 		.4byte	.LVL82-.Ltext0
 4219 02ef 0200     		.2byte	0x2
 4220 02f1 30       		.byte	0x30
 4221 02f2 9F       		.byte	0x9f
 4222 02f3 74050000 		.4byte	.LVL82-.Ltext0
 4223 02f7 76050000 		.4byte	.LVL83-.Ltext0
 4224 02fb 0100     		.2byte	0x1
 4225 02fd 50       		.byte	0x50
 4226 02fe 76050000 		.4byte	.LVL83-.Ltext0
 4227 0302 78050000 		.4byte	.LVL84-.Ltext0
 4228 0306 0200     		.2byte	0x2
 4229 0308 30       		.byte	0x30
 4230 0309 9F       		.byte	0x9f
 4231 030a 78050000 		.4byte	.LVL84-.Ltext0
 4232 030e 7A050000 		.4byte	.LVL85-.Ltext0
 4233 0312 0100     		.2byte	0x1
 4234 0314 50       		.byte	0x50
 4235 0315 7A050000 		.4byte	.LVL85-.Ltext0
 4236 0319 7C050000 		.4byte	.LVL86-.Ltext0
 4237 031d 0200     		.2byte	0x2
 4238 031f 30       		.byte	0x30
 4239 0320 9F       		.byte	0x9f
 4240 0321 7C050000 		.4byte	.LVL86-.Ltext0
ARM GAS  /tmp/ccHubou1.s 			page 101


 4241 0325 7E050000 		.4byte	.LFE73-.Ltext0
 4242 0329 0100     		.2byte	0x1
 4243 032b 50       		.byte	0x50
 4244 032c 00000000 		.4byte	0
 4245 0330 00000000 		.4byte	0
 4246              	.LLST26:
 4247 0334 E8040000 		.4byte	.LFB72-.Ltext0
 4248 0338 EA040000 		.4byte	.LCFI14-.Ltext0
 4249 033c 0200     		.2byte	0x2
 4250 033e 7D       		.byte	0x7d
 4251 033f 00       		.sleb128 0
 4252 0340 EA040000 		.4byte	.LCFI14-.Ltext0
 4253 0344 F0040000 		.4byte	.LCFI15-.Ltext0
 4254 0348 0200     		.2byte	0x2
 4255 034a 7D       		.byte	0x7d
 4256 034b 10       		.sleb128 16
 4257 034c F0040000 		.4byte	.LCFI15-.Ltext0
 4258 0350 24050000 		.4byte	.LCFI16-.Ltext0
 4259 0354 0300     		.2byte	0x3
 4260 0356 7D       		.byte	0x7d
 4261 0357 C000     		.sleb128 64
 4262 0359 24050000 		.4byte	.LCFI16-.Ltext0
 4263 035d 26050000 		.4byte	.LCFI17-.Ltext0
 4264 0361 0200     		.2byte	0x2
 4265 0363 7D       		.byte	0x7d
 4266 0364 10       		.sleb128 16
 4267 0365 26050000 		.4byte	.LCFI17-.Ltext0
 4268 0369 60050000 		.4byte	.LFE72-.Ltext0
 4269 036d 0300     		.2byte	0x3
 4270 036f 7D       		.byte	0x7d
 4271 0370 C000     		.sleb128 64
 4272 0372 00000000 		.4byte	0
 4273 0376 00000000 		.4byte	0
 4274              	.LLST27:
 4275 037a E8040000 		.4byte	.LVL68-.Ltext0
 4276 037e FF040000 		.4byte	.LVL69-1-.Ltext0
 4277 0382 0100     		.2byte	0x1
 4278 0384 50       		.byte	0x50
 4279 0385 FF040000 		.4byte	.LVL69-1-.Ltext0
 4280 0389 58050000 		.4byte	.LVL78-.Ltext0
 4281 038d 0100     		.2byte	0x1
 4282 038f 54       		.byte	0x54
 4283 0390 58050000 		.4byte	.LVL78-.Ltext0
 4284 0394 60050000 		.4byte	.LFE72-.Ltext0
 4285 0398 0100     		.2byte	0x1
 4286 039a 50       		.byte	0x50
 4287 039b 00000000 		.4byte	0
 4288 039f 00000000 		.4byte	0
 4289              	.LLST28:
 4290 03a3 E8040000 		.4byte	.LVL68-.Ltext0
 4291 03a7 00050000 		.4byte	.LVL69-.Ltext0
 4292 03ab 0200     		.2byte	0x2
 4293 03ad 30       		.byte	0x30
 4294 03ae 9F       		.byte	0x9f
 4295 03af 00050000 		.4byte	.LVL69-.Ltext0
 4296 03b3 08050000 		.4byte	.LVL70-.Ltext0
 4297 03b7 0100     		.2byte	0x1
ARM GAS  /tmp/ccHubou1.s 			page 102


 4298 03b9 50       		.byte	0x50
 4299 03ba 10050000 		.4byte	.LVL71-.Ltext0
 4300 03be 20050000 		.4byte	.LVL72-.Ltext0
 4301 03c2 0100     		.2byte	0x1
 4302 03c4 50       		.byte	0x50
 4303 03c5 26050000 		.4byte	.LVL73-.Ltext0
 4304 03c9 2A050000 		.4byte	.LVL74-.Ltext0
 4305 03cd 0100     		.2byte	0x1
 4306 03cf 50       		.byte	0x50
 4307 03d0 40050000 		.4byte	.LVL76-.Ltext0
 4308 03d4 58050000 		.4byte	.LVL78-.Ltext0
 4309 03d8 0100     		.2byte	0x1
 4310 03da 55       		.byte	0x55
 4311 03db 58050000 		.4byte	.LVL78-.Ltext0
 4312 03df 60050000 		.4byte	.LFE72-.Ltext0
 4313 03e3 0200     		.2byte	0x2
 4314 03e5 30       		.byte	0x30
 4315 03e6 9F       		.byte	0x9f
 4316 03e7 00000000 		.4byte	0
 4317 03eb 00000000 		.4byte	0
 4318              	.LLST21:
 4319 03ef 0C040000 		.4byte	.LFB71-.Ltext0
 4320 03f3 0E040000 		.4byte	.LCFI10-.Ltext0
 4321 03f7 0200     		.2byte	0x2
 4322 03f9 7D       		.byte	0x7d
 4323 03fa 00       		.sleb128 0
 4324 03fb 0E040000 		.4byte	.LCFI10-.Ltext0
 4325 03ff 14040000 		.4byte	.LCFI11-.Ltext0
 4326 0403 0200     		.2byte	0x2
 4327 0405 7D       		.byte	0x7d
 4328 0406 14       		.sleb128 20
 4329 0407 14040000 		.4byte	.LCFI11-.Ltext0
 4330 040b CE040000 		.4byte	.LCFI12-.Ltext0
 4331 040f 0300     		.2byte	0x3
 4332 0411 7D       		.byte	0x7d
 4333 0412 C800     		.sleb128 72
 4334 0414 CE040000 		.4byte	.LCFI12-.Ltext0
 4335 0418 D0040000 		.4byte	.LCFI13-.Ltext0
 4336 041c 0200     		.2byte	0x2
 4337 041e 7D       		.byte	0x7d
 4338 041f 14       		.sleb128 20
 4339 0420 D0040000 		.4byte	.LCFI13-.Ltext0
 4340 0424 E8040000 		.4byte	.LFE71-.Ltext0
 4341 0428 0300     		.2byte	0x3
 4342 042a 7D       		.byte	0x7d
 4343 042b C800     		.sleb128 72
 4344 042d 00000000 		.4byte	0
 4345 0431 00000000 		.4byte	0
 4346              	.LLST22:
 4347 0435 0C040000 		.4byte	.LVL59-.Ltext0
 4348 0439 3C040000 		.4byte	.LVL60-.Ltext0
 4349 043d 0100     		.2byte	0x1
 4350 043f 50       		.byte	0x50
 4351 0440 3C040000 		.4byte	.LVL60-.Ltext0
 4352 0444 44040000 		.4byte	.LVL61-.Ltext0
 4353 0448 0100     		.2byte	0x1
 4354 044a 54       		.byte	0x54
ARM GAS  /tmp/ccHubou1.s 			page 103


 4355 044b 44040000 		.4byte	.LVL61-.Ltext0
 4356 044f 47040000 		.4byte	.LVL62-1-.Ltext0
 4357 0453 0100     		.2byte	0x1
 4358 0455 50       		.byte	0x50
 4359 0456 47040000 		.4byte	.LVL62-1-.Ltext0
 4360 045a D0040000 		.4byte	.LVL67-.Ltext0
 4361 045e 0100     		.2byte	0x1
 4362 0460 54       		.byte	0x54
 4363 0461 D0040000 		.4byte	.LVL67-.Ltext0
 4364 0465 E8040000 		.4byte	.LFE71-.Ltext0
 4365 0469 0100     		.2byte	0x1
 4366 046b 50       		.byte	0x50
 4367 046c 00000000 		.4byte	0
 4368 0470 00000000 		.4byte	0
 4369              	.LLST23:
 4370 0474 0C040000 		.4byte	.LVL59-.Ltext0
 4371 0478 3C040000 		.4byte	.LVL60-.Ltext0
 4372 047c 0100     		.2byte	0x1
 4373 047e 51       		.byte	0x51
 4374 047f 3C040000 		.4byte	.LVL60-.Ltext0
 4375 0483 44040000 		.4byte	.LVL61-.Ltext0
 4376 0487 0100     		.2byte	0x1
 4377 0489 56       		.byte	0x56
 4378 048a 44040000 		.4byte	.LVL61-.Ltext0
 4379 048e 47040000 		.4byte	.LVL62-1-.Ltext0
 4380 0492 0100     		.2byte	0x1
 4381 0494 51       		.byte	0x51
 4382 0495 47040000 		.4byte	.LVL62-1-.Ltext0
 4383 0499 D0040000 		.4byte	.LVL67-.Ltext0
 4384 049d 0100     		.2byte	0x1
 4385 049f 56       		.byte	0x56
 4386 04a0 D0040000 		.4byte	.LVL67-.Ltext0
 4387 04a4 E8040000 		.4byte	.LFE71-.Ltext0
 4388 04a8 0100     		.2byte	0x1
 4389 04aa 51       		.byte	0x51
 4390 04ab 00000000 		.4byte	0
 4391 04af 00000000 		.4byte	0
 4392              	.LLST24:
 4393 04b3 0C040000 		.4byte	.LVL59-.Ltext0
 4394 04b7 3C040000 		.4byte	.LVL60-.Ltext0
 4395 04bb 0100     		.2byte	0x1
 4396 04bd 52       		.byte	0x52
 4397 04be 3C040000 		.4byte	.LVL60-.Ltext0
 4398 04c2 44040000 		.4byte	.LVL61-.Ltext0
 4399 04c6 0100     		.2byte	0x1
 4400 04c8 57       		.byte	0x57
 4401 04c9 44040000 		.4byte	.LVL61-.Ltext0
 4402 04cd 47040000 		.4byte	.LVL62-1-.Ltext0
 4403 04d1 0100     		.2byte	0x1
 4404 04d3 52       		.byte	0x52
 4405 04d4 47040000 		.4byte	.LVL62-1-.Ltext0
 4406 04d8 D0040000 		.4byte	.LVL67-.Ltext0
 4407 04dc 0100     		.2byte	0x1
 4408 04de 57       		.byte	0x57
 4409 04df D0040000 		.4byte	.LVL67-.Ltext0
 4410 04e3 E8040000 		.4byte	.LFE71-.Ltext0
 4411 04e7 0100     		.2byte	0x1
ARM GAS  /tmp/ccHubou1.s 			page 104


 4412 04e9 52       		.byte	0x52
 4413 04ea 00000000 		.4byte	0
 4414 04ee 00000000 		.4byte	0
 4415              	.LLST25:
 4416 04f2 0C040000 		.4byte	.LVL59-.Ltext0
 4417 04f6 3C040000 		.4byte	.LVL60-.Ltext0
 4418 04fa 0200     		.2byte	0x2
 4419 04fc 30       		.byte	0x30
 4420 04fd 9F       		.byte	0x9f
 4421 04fe 3C040000 		.4byte	.LVL60-.Ltext0
 4422 0502 44040000 		.4byte	.LVL61-.Ltext0
 4423 0506 0100     		.2byte	0x1
 4424 0508 55       		.byte	0x55
 4425 0509 44040000 		.4byte	.LVL61-.Ltext0
 4426 050d 48040000 		.4byte	.LVL62-.Ltext0
 4427 0511 0200     		.2byte	0x2
 4428 0513 30       		.byte	0x30
 4429 0514 9F       		.byte	0x9f
 4430 0515 48040000 		.4byte	.LVL62-.Ltext0
 4431 0519 50040000 		.4byte	.LVL63-.Ltext0
 4432 051d 0100     		.2byte	0x1
 4433 051f 50       		.byte	0x50
 4434 0520 54040000 		.4byte	.LVL64-.Ltext0
 4435 0524 6C040000 		.4byte	.LVL65-.Ltext0
 4436 0528 0100     		.2byte	0x1
 4437 052a 50       		.byte	0x50
 4438 052b D0040000 		.4byte	.LVL67-.Ltext0
 4439 052f E8040000 		.4byte	.LFE71-.Ltext0
 4440 0533 0200     		.2byte	0x2
 4441 0535 30       		.byte	0x30
 4442 0536 9F       		.byte	0x9f
 4443 0537 00000000 		.4byte	0
 4444 053b 00000000 		.4byte	0
 4445              	.LLST18:
 4446 053f B4030000 		.4byte	.LFB70-.Ltext0
 4447 0543 BA030000 		.4byte	.LCFI9-.Ltext0
 4448 0547 0200     		.2byte	0x2
 4449 0549 7D       		.byte	0x7d
 4450 054a 00       		.sleb128 0
 4451 054b BA030000 		.4byte	.LCFI9-.Ltext0
 4452 054f 0C040000 		.4byte	.LFE70-.Ltext0
 4453 0553 0200     		.2byte	0x2
 4454 0555 7D       		.byte	0x7d
 4455 0556 08       		.sleb128 8
 4456 0557 00000000 		.4byte	0
 4457 055b 00000000 		.4byte	0
 4458              	.LLST19:
 4459 055f B4030000 		.4byte	.LVL51-.Ltext0
 4460 0563 D7030000 		.4byte	.LVL52-1-.Ltext0
 4461 0567 0100     		.2byte	0x1
 4462 0569 50       		.byte	0x50
 4463 056a D7030000 		.4byte	.LVL52-1-.Ltext0
 4464 056e FC030000 		.4byte	.LVL54-.Ltext0
 4465 0572 0100     		.2byte	0x1
 4466 0574 54       		.byte	0x54
 4467 0575 FC030000 		.4byte	.LVL54-.Ltext0
 4468 0579 00040000 		.4byte	.LVL55-.Ltext0
ARM GAS  /tmp/ccHubou1.s 			page 105


 4469 057d 0100     		.2byte	0x1
 4470 057f 50       		.byte	0x50
 4471 0580 00040000 		.4byte	.LVL55-.Ltext0
 4472 0584 08040000 		.4byte	.LVL57-.Ltext0
 4473 0588 0100     		.2byte	0x1
 4474 058a 54       		.byte	0x54
 4475 058b 08040000 		.4byte	.LVL57-.Ltext0
 4476 058f 0A040000 		.4byte	.LVL58-.Ltext0
 4477 0593 0100     		.2byte	0x1
 4478 0595 50       		.byte	0x50
 4479 0596 0A040000 		.4byte	.LVL58-.Ltext0
 4480 059a 0C040000 		.4byte	.LFE70-.Ltext0
 4481 059e 0100     		.2byte	0x1
 4482 05a0 54       		.byte	0x54
 4483 05a1 00000000 		.4byte	0
 4484 05a5 00000000 		.4byte	0
 4485              	.LLST20:
 4486 05a9 B4030000 		.4byte	.LVL51-.Ltext0
 4487 05ad D8030000 		.4byte	.LVL52-.Ltext0
 4488 05b1 0200     		.2byte	0x2
 4489 05b3 30       		.byte	0x30
 4490 05b4 9F       		.byte	0x9f
 4491 05b5 D8030000 		.4byte	.LVL52-.Ltext0
 4492 05b9 FC030000 		.4byte	.LVL54-.Ltext0
 4493 05bd 0100     		.2byte	0x1
 4494 05bf 50       		.byte	0x50
 4495 05c0 FC030000 		.4byte	.LVL54-.Ltext0
 4496 05c4 06040000 		.4byte	.LVL56-.Ltext0
 4497 05c8 0200     		.2byte	0x2
 4498 05ca 30       		.byte	0x30
 4499 05cb 9F       		.byte	0x9f
 4500 05cc 06040000 		.4byte	.LVL56-.Ltext0
 4501 05d0 08040000 		.4byte	.LVL57-.Ltext0
 4502 05d4 0200     		.2byte	0x2
 4503 05d6 31       		.byte	0x31
 4504 05d7 9F       		.byte	0x9f
 4505 05d8 08040000 		.4byte	.LVL57-.Ltext0
 4506 05dc 0C040000 		.4byte	.LFE70-.Ltext0
 4507 05e0 0200     		.2byte	0x2
 4508 05e2 30       		.byte	0x30
 4509 05e3 9F       		.byte	0x9f
 4510 05e4 00000000 		.4byte	0
 4511 05e8 00000000 		.4byte	0
 4512              	.LLST15:
 4513 05ec 00030000 		.4byte	.LFB69-.Ltext0
 4514 05f0 06030000 		.4byte	.LCFI8-.Ltext0
 4515 05f4 0200     		.2byte	0x2
 4516 05f6 7D       		.byte	0x7d
 4517 05f7 00       		.sleb128 0
 4518 05f8 06030000 		.4byte	.LCFI8-.Ltext0
 4519 05fc B4030000 		.4byte	.LFE69-.Ltext0
 4520 0600 0200     		.2byte	0x2
 4521 0602 7D       		.byte	0x7d
 4522 0603 08       		.sleb128 8
 4523 0604 00000000 		.4byte	0
 4524 0608 00000000 		.4byte	0
 4525              	.LLST16:
ARM GAS  /tmp/ccHubou1.s 			page 106


 4526 060c 00030000 		.4byte	.LVL45-.Ltext0
 4527 0610 15030000 		.4byte	.LVL46-1-.Ltext0
 4528 0614 0100     		.2byte	0x1
 4529 0616 50       		.byte	0x50
 4530 0617 15030000 		.4byte	.LVL46-1-.Ltext0
 4531 061b AA030000 		.4byte	.LVL48-.Ltext0
 4532 061f 0100     		.2byte	0x1
 4533 0621 54       		.byte	0x54
 4534 0622 AA030000 		.4byte	.LVL48-.Ltext0
 4535 0626 AC030000 		.4byte	.LVL49-.Ltext0
 4536 062a 0100     		.2byte	0x1
 4537 062c 50       		.byte	0x50
 4538 062d AC030000 		.4byte	.LVL49-.Ltext0
 4539 0631 AE030000 		.4byte	.LVL50-.Ltext0
 4540 0635 0100     		.2byte	0x1
 4541 0637 54       		.byte	0x54
 4542 0638 AE030000 		.4byte	.LVL50-.Ltext0
 4543 063c B4030000 		.4byte	.LFE69-.Ltext0
 4544 0640 0400     		.2byte	0x4
 4545 0642 F3       		.byte	0xf3
 4546 0643 01       		.uleb128 0x1
 4547 0644 50       		.byte	0x50
 4548 0645 9F       		.byte	0x9f
 4549 0646 00000000 		.4byte	0
 4550 064a 00000000 		.4byte	0
 4551              	.LLST17:
 4552 064e 00030000 		.4byte	.LVL45-.Ltext0
 4553 0652 16030000 		.4byte	.LVL46-.Ltext0
 4554 0656 0200     		.2byte	0x2
 4555 0658 30       		.byte	0x30
 4556 0659 9F       		.byte	0x9f
 4557 065a 16030000 		.4byte	.LVL46-.Ltext0
 4558 065e AA030000 		.4byte	.LVL48-.Ltext0
 4559 0662 0100     		.2byte	0x1
 4560 0664 50       		.byte	0x50
 4561 0665 AA030000 		.4byte	.LVL48-.Ltext0
 4562 0669 AC030000 		.4byte	.LVL49-.Ltext0
 4563 066d 0200     		.2byte	0x2
 4564 066f 30       		.byte	0x30
 4565 0670 9F       		.byte	0x9f
 4566 0671 00000000 		.4byte	0
 4567 0675 00000000 		.4byte	0
 4568              	.LLST10:
 4569 0679 CA010000 		.4byte	.LFB68-.Ltext0
 4570 067d CE010000 		.4byte	.LCFI5-.Ltext0
 4571 0681 0200     		.2byte	0x2
 4572 0683 7D       		.byte	0x7d
 4573 0684 00       		.sleb128 0
 4574 0685 CE010000 		.4byte	.LCFI5-.Ltext0
 4575 0689 52020000 		.4byte	.LCFI6-.Ltext0
 4576 068d 0200     		.2byte	0x2
 4577 068f 7D       		.byte	0x7d
 4578 0690 20       		.sleb128 32
 4579 0691 52020000 		.4byte	.LCFI6-.Ltext0
 4580 0695 54020000 		.4byte	.LCFI7-.Ltext0
 4581 0699 0200     		.2byte	0x2
 4582 069b 7D       		.byte	0x7d
ARM GAS  /tmp/ccHubou1.s 			page 107


 4583 069c 14       		.sleb128 20
 4584 069d 54020000 		.4byte	.LCFI7-.Ltext0
 4585 06a1 00030000 		.4byte	.LFE68-.Ltext0
 4586 06a5 0200     		.2byte	0x2
 4587 06a7 7D       		.byte	0x7d
 4588 06a8 20       		.sleb128 32
 4589 06a9 00000000 		.4byte	0
 4590 06ad 00000000 		.4byte	0
 4591              	.LLST11:
 4592 06b1 CA010000 		.4byte	.LVL30-.Ltext0
 4593 06b5 D7010000 		.4byte	.LVL32-1-.Ltext0
 4594 06b9 0100     		.2byte	0x1
 4595 06bb 50       		.byte	0x50
 4596 06bc D7010000 		.4byte	.LVL32-1-.Ltext0
 4597 06c0 00030000 		.4byte	.LFE68-.Ltext0
 4598 06c4 0100     		.2byte	0x1
 4599 06c6 54       		.byte	0x54
 4600 06c7 00000000 		.4byte	0
 4601 06cb 00000000 		.4byte	0
 4602              	.LLST12:
 4603 06cf CA010000 		.4byte	.LVL30-.Ltext0
 4604 06d3 D7010000 		.4byte	.LVL32-1-.Ltext0
 4605 06d7 0100     		.2byte	0x1
 4606 06d9 51       		.byte	0x51
 4607 06da D7010000 		.4byte	.LVL32-1-.Ltext0
 4608 06de 00030000 		.4byte	.LFE68-.Ltext0
 4609 06e2 0100     		.2byte	0x1
 4610 06e4 55       		.byte	0x55
 4611 06e5 00000000 		.4byte	0
 4612 06e9 00000000 		.4byte	0
 4613              	.LLST13:
 4614 06ed DC010000 		.4byte	.LVL33-.Ltext0
 4615 06f1 E8010000 		.4byte	.LVL34-.Ltext0
 4616 06f5 0100     		.2byte	0x1
 4617 06f7 50       		.byte	0x50
 4618 06f8 E8010000 		.4byte	.LVL34-.Ltext0
 4619 06fc 00030000 		.4byte	.LFE68-.Ltext0
 4620 0700 0100     		.2byte	0x1
 4621 0702 57       		.byte	0x57
 4622 0703 00000000 		.4byte	0
 4623 0707 00000000 		.4byte	0
 4624              	.LLST14:
 4625 070b D2010000 		.4byte	.LVL31-.Ltext0
 4626 070f 1C020000 		.4byte	.LVL36-.Ltext0
 4627 0713 0200     		.2byte	0x2
 4628 0715 30       		.byte	0x30
 4629 0716 9F       		.byte	0x9f
 4630 0717 1C020000 		.4byte	.LVL36-.Ltext0
 4631 071b 3A020000 		.4byte	.LVL38-.Ltext0
 4632 071f 0100     		.2byte	0x1
 4633 0721 56       		.byte	0x56
 4634 0722 3A020000 		.4byte	.LVL38-.Ltext0
 4635 0726 40020000 		.4byte	.LVL39-.Ltext0
 4636 072a 0200     		.2byte	0x2
 4637 072c 30       		.byte	0x30
 4638 072d 9F       		.byte	0x9f
 4639 072e 54020000 		.4byte	.LVL40-.Ltext0
ARM GAS  /tmp/ccHubou1.s 			page 108


 4640 0732 66020000 		.4byte	.LVL42-.Ltext0
 4641 0736 0200     		.2byte	0x2
 4642 0738 30       		.byte	0x30
 4643 0739 9F       		.byte	0x9f
 4644 073a 9C020000 		.4byte	.LVL43-.Ltext0
 4645 073e CA020000 		.4byte	.LVL44-.Ltext0
 4646 0742 0200     		.2byte	0x2
 4647 0744 30       		.byte	0x30
 4648 0745 9F       		.byte	0x9f
 4649 0746 00000000 		.4byte	0
 4650 074a 00000000 		.4byte	0
 4651              	.LLST7:
 4652 074e 7C010000 		.4byte	.LFB67-.Ltext0
 4653 0752 82010000 		.4byte	.LCFI4-.Ltext0
 4654 0756 0200     		.2byte	0x2
 4655 0758 7D       		.byte	0x7d
 4656 0759 00       		.sleb128 0
 4657 075a 82010000 		.4byte	.LCFI4-.Ltext0
 4658 075e CA010000 		.4byte	.LFE67-.Ltext0
 4659 0762 0200     		.2byte	0x2
 4660 0764 7D       		.byte	0x7d
 4661 0765 08       		.sleb128 8
 4662 0766 00000000 		.4byte	0
 4663 076a 00000000 		.4byte	0
 4664              	.LLST8:
 4665 076e 7C010000 		.4byte	.LVL22-.Ltext0
 4666 0772 9F010000 		.4byte	.LVL23-1-.Ltext0
 4667 0776 0100     		.2byte	0x1
 4668 0778 50       		.byte	0x50
 4669 0779 9F010000 		.4byte	.LVL23-1-.Ltext0
 4670 077d BA010000 		.4byte	.LVL25-.Ltext0
 4671 0781 0100     		.2byte	0x1
 4672 0783 54       		.byte	0x54
 4673 0784 BA010000 		.4byte	.LVL25-.Ltext0
 4674 0788 BE010000 		.4byte	.LVL26-.Ltext0
 4675 078c 0100     		.2byte	0x1
 4676 078e 50       		.byte	0x50
 4677 078f BE010000 		.4byte	.LVL26-.Ltext0
 4678 0793 C6010000 		.4byte	.LVL28-.Ltext0
 4679 0797 0100     		.2byte	0x1
 4680 0799 54       		.byte	0x54
 4681 079a C6010000 		.4byte	.LVL28-.Ltext0
 4682 079e C8010000 		.4byte	.LVL29-.Ltext0
 4683 07a2 0100     		.2byte	0x1
 4684 07a4 50       		.byte	0x50
 4685 07a5 C8010000 		.4byte	.LVL29-.Ltext0
 4686 07a9 CA010000 		.4byte	.LFE67-.Ltext0
 4687 07ad 0100     		.2byte	0x1
 4688 07af 54       		.byte	0x54
 4689 07b0 00000000 		.4byte	0
 4690 07b4 00000000 		.4byte	0
 4691              	.LLST9:
 4692 07b8 7C010000 		.4byte	.LVL22-.Ltext0
 4693 07bc A0010000 		.4byte	.LVL23-.Ltext0
 4694 07c0 0200     		.2byte	0x2
 4695 07c2 30       		.byte	0x30
 4696 07c3 9F       		.byte	0x9f
ARM GAS  /tmp/ccHubou1.s 			page 109


 4697 07c4 A0010000 		.4byte	.LVL23-.Ltext0
 4698 07c8 BA010000 		.4byte	.LVL25-.Ltext0
 4699 07cc 0100     		.2byte	0x1
 4700 07ce 50       		.byte	0x50
 4701 07cf BA010000 		.4byte	.LVL25-.Ltext0
 4702 07d3 C4010000 		.4byte	.LVL27-.Ltext0
 4703 07d7 0200     		.2byte	0x2
 4704 07d9 30       		.byte	0x30
 4705 07da 9F       		.byte	0x9f
 4706 07db C4010000 		.4byte	.LVL27-.Ltext0
 4707 07df C6010000 		.4byte	.LVL28-.Ltext0
 4708 07e3 0200     		.2byte	0x2
 4709 07e5 31       		.byte	0x31
 4710 07e6 9F       		.byte	0x9f
 4711 07e7 C6010000 		.4byte	.LVL28-.Ltext0
 4712 07eb CA010000 		.4byte	.LFE67-.Ltext0
 4713 07ef 0200     		.2byte	0x2
 4714 07f1 30       		.byte	0x30
 4715 07f2 9F       		.byte	0x9f
 4716 07f3 00000000 		.4byte	0
 4717 07f7 00000000 		.4byte	0
 4718              	.LLST4:
 4719 07fb D0000000 		.4byte	.LFB66-.Ltext0
 4720 07ff D6000000 		.4byte	.LCFI3-.Ltext0
 4721 0803 0200     		.2byte	0x2
 4722 0805 7D       		.byte	0x7d
 4723 0806 00       		.sleb128 0
 4724 0807 D6000000 		.4byte	.LCFI3-.Ltext0
 4725 080b 7C010000 		.4byte	.LFE66-.Ltext0
 4726 080f 0200     		.2byte	0x2
 4727 0811 7D       		.byte	0x7d
 4728 0812 08       		.sleb128 8
 4729 0813 00000000 		.4byte	0
 4730 0817 00000000 		.4byte	0
 4731              	.LLST5:
 4732 081b D0000000 		.4byte	.LVL16-.Ltext0
 4733 081f E5000000 		.4byte	.LVL17-1-.Ltext0
 4734 0823 0100     		.2byte	0x1
 4735 0825 50       		.byte	0x50
 4736 0826 E5000000 		.4byte	.LVL17-1-.Ltext0
 4737 082a 72010000 		.4byte	.LVL19-.Ltext0
 4738 082e 0100     		.2byte	0x1
 4739 0830 54       		.byte	0x54
 4740 0831 72010000 		.4byte	.LVL19-.Ltext0
 4741 0835 74010000 		.4byte	.LVL20-.Ltext0
 4742 0839 0100     		.2byte	0x1
 4743 083b 50       		.byte	0x50
 4744 083c 74010000 		.4byte	.LVL20-.Ltext0
 4745 0840 76010000 		.4byte	.LVL21-.Ltext0
 4746 0844 0100     		.2byte	0x1
 4747 0846 54       		.byte	0x54
 4748 0847 76010000 		.4byte	.LVL21-.Ltext0
 4749 084b 7C010000 		.4byte	.LFE66-.Ltext0
 4750 084f 0400     		.2byte	0x4
 4751 0851 F3       		.byte	0xf3
 4752 0852 01       		.uleb128 0x1
 4753 0853 50       		.byte	0x50
ARM GAS  /tmp/ccHubou1.s 			page 110


 4754 0854 9F       		.byte	0x9f
 4755 0855 00000000 		.4byte	0
 4756 0859 00000000 		.4byte	0
 4757              	.LLST6:
 4758 085d D0000000 		.4byte	.LVL16-.Ltext0
 4759 0861 E6000000 		.4byte	.LVL17-.Ltext0
 4760 0865 0200     		.2byte	0x2
 4761 0867 30       		.byte	0x30
 4762 0868 9F       		.byte	0x9f
 4763 0869 E6000000 		.4byte	.LVL17-.Ltext0
 4764 086d 72010000 		.4byte	.LVL19-.Ltext0
 4765 0871 0100     		.2byte	0x1
 4766 0873 50       		.byte	0x50
 4767 0874 72010000 		.4byte	.LVL19-.Ltext0
 4768 0878 74010000 		.4byte	.LVL20-.Ltext0
 4769 087c 0200     		.2byte	0x2
 4770 087e 30       		.byte	0x30
 4771 087f 9F       		.byte	0x9f
 4772 0880 00000000 		.4byte	0
 4773 0884 00000000 		.4byte	0
 4774              	.LLST0:
 4775 0888 00000000 		.4byte	.LFB65-.Ltext0
 4776 088c 04000000 		.4byte	.LCFI0-.Ltext0
 4777 0890 0200     		.2byte	0x2
 4778 0892 7D       		.byte	0x7d
 4779 0893 00       		.sleb128 0
 4780 0894 04000000 		.4byte	.LCFI0-.Ltext0
 4781 0898 B8000000 		.4byte	.LCFI1-.Ltext0
 4782 089c 0200     		.2byte	0x2
 4783 089e 7D       		.byte	0x7d
 4784 089f 18       		.sleb128 24
 4785 08a0 B8000000 		.4byte	.LCFI1-.Ltext0
 4786 08a4 BA000000 		.4byte	.LCFI2-.Ltext0
 4787 08a8 0200     		.2byte	0x2
 4788 08aa 7D       		.byte	0x7d
 4789 08ab 10       		.sleb128 16
 4790 08ac BA000000 		.4byte	.LCFI2-.Ltext0
 4791 08b0 D0000000 		.4byte	.LFE65-.Ltext0
 4792 08b4 0200     		.2byte	0x2
 4793 08b6 7D       		.byte	0x7d
 4794 08b7 18       		.sleb128 24
 4795 08b8 00000000 		.4byte	0
 4796 08bc 00000000 		.4byte	0
 4797              	.LLST1:
 4798 08c0 00000000 		.4byte	.LVL0-.Ltext0
 4799 08c4 19000000 		.4byte	.LVL1-1-.Ltext0
 4800 08c8 0100     		.2byte	0x1
 4801 08ca 50       		.byte	0x50
 4802 08cb 19000000 		.4byte	.LVL1-1-.Ltext0
 4803 08cf C6000000 		.4byte	.LVL15-.Ltext0
 4804 08d3 0100     		.2byte	0x1
 4805 08d5 54       		.byte	0x54
 4806 08d6 C6000000 		.4byte	.LVL15-.Ltext0
 4807 08da D0000000 		.4byte	.LFE65-.Ltext0
 4808 08de 0100     		.2byte	0x1
 4809 08e0 50       		.byte	0x50
 4810 08e1 00000000 		.4byte	0
ARM GAS  /tmp/ccHubou1.s 			page 111


 4811 08e5 00000000 		.4byte	0
 4812              	.LLST2:
 4813 08e9 00000000 		.4byte	.LVL0-.Ltext0
 4814 08ed 1A000000 		.4byte	.LVL1-.Ltext0
 4815 08f1 0200     		.2byte	0x2
 4816 08f3 30       		.byte	0x30
 4817 08f4 9F       		.byte	0x9f
 4818 08f5 1A000000 		.4byte	.LVL1-.Ltext0
 4819 08f9 24000000 		.4byte	.LVL2-.Ltext0
 4820 08fd 0100     		.2byte	0x1
 4821 08ff 50       		.byte	0x50
 4822 0900 C6000000 		.4byte	.LVL15-.Ltext0
 4823 0904 D0000000 		.4byte	.LFE65-.Ltext0
 4824 0908 0200     		.2byte	0x2
 4825 090a 30       		.byte	0x30
 4826 090b 9F       		.byte	0x9f
 4827 090c 00000000 		.4byte	0
 4828 0910 00000000 		.4byte	0
 4829              	.LLST3:
 4830 0914 5C000000 		.4byte	.LVL6-.Ltext0
 4831 0918 86000000 		.4byte	.LVL9-.Ltext0
 4832 091c 0100     		.2byte	0x1
 4833 091e 56       		.byte	0x56
 4834 091f 96000000 		.4byte	.LVL10-.Ltext0
 4835 0923 B4000000 		.4byte	.LVL12-.Ltext0
 4836 0927 0100     		.2byte	0x1
 4837 0929 56       		.byte	0x56
 4838 092a BA000000 		.4byte	.LVL13-.Ltext0
 4839 092e C6000000 		.4byte	.LVL15-.Ltext0
 4840 0932 0100     		.2byte	0x1
 4841 0934 56       		.byte	0x56
 4842 0935 00000000 		.4byte	0
 4843 0939 00000000 		.4byte	0
 4844              		.section	.debug_aranges,"",%progbits
 4845 0000 1C000000 		.4byte	0x1c
 4846 0004 0200     		.2byte	0x2
 4847 0006 00000000 		.4byte	.Ldebug_info0
 4848 000a 04       		.byte	0x4
 4849 000b 00       		.byte	0
 4850 000c 0000     		.2byte	0
 4851 000e 0000     		.2byte	0
 4852 0010 00000000 		.4byte	.Ltext0
 4853 0014 CC070000 		.4byte	.Letext0-.Ltext0
 4854 0018 00000000 		.4byte	0
 4855 001c 00000000 		.4byte	0
 4856              		.section	.debug_line,"",%progbits
 4857              	.Ldebug_line0:
 4858 0000 0C050000 		.section	.debug_str,"MS",%progbits,1
 4858      02008301 
 4858      00000201 
 4858      FB0E0D00 
 4858      01010101 
 4859              	.LASF122:
 4860 0000 48414C5F 		.ascii	"HAL_ADCEx_MultiModeStart_DMA\000"
 4860      41444345 
 4860      785F4D75 
 4860      6C74694D 
ARM GAS  /tmp/ccHubou1.s 			page 112


 4860      6F646553 
 4861              	.LASF106:
 4862 001d 48414C5F 		.ascii	"HAL_TickFreqTypeDef\000"
 4862      5469636B 
 4862      46726571 
 4862      54797065 
 4862      44656600 
 4863              	.LASF130:
 4864 0031 436F6E76 		.ascii	"Conversion_Timeout_CPU_cycles\000"
 4864      65727369 
 4864      6F6E5F54 
 4864      696D656F 
 4864      75745F43 
 4865              	.LASF61:
 4866 004f 444D415F 		.ascii	"DMA_InitTypeDef\000"
 4866      496E6974 
 4866      54797065 
 4866      44656600 
 4867              	.LASF0:
 4868 005f 7369676E 		.ascii	"signed char\000"
 4868      65642063 
 4868      68617200 
 4869              	.LASF4:
 4870 006b 5F5F7569 		.ascii	"__uint8_t\000"
 4870      6E74385F 
 4870      7400
 4871              	.LASF48:
 4872 0075 48414C5F 		.ascii	"HAL_BUSY\000"
 4872      42555359 
 4872      00
 4873              	.LASF19:
 4874 007e 41504250 		.ascii	"APBPrescTable\000"
 4874      72657363 
 4874      5461626C 
 4874      6500
 4875              	.LASF42:
 4876 008c 44495341 		.ascii	"DISABLE\000"
 4876      424C4500 
 4877              	.LASF10:
 4878 0094 6C6F6E67 		.ascii	"long long unsigned int\000"
 4878      206C6F6E 
 4878      6720756E 
 4878      7369676E 
 4878      65642069 
 4879              	.LASF80:
 4880 00ab 44617461 		.ascii	"DataAlign\000"
 4880      416C6967 
 4880      6E00
 4881              	.LASF86:
 4882 00b5 45787465 		.ascii	"ExternalTrigConv\000"
 4882      726E616C 
 4882      54726967 
 4882      436F6E76 
 4882      00
 4883              	.LASF16:
 4884 00c6 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4884      52784275 
ARM GAS  /tmp/ccHubou1.s 			page 113


 4884      66666572 
 4884      00
 4885              	.LASF123:
 4886 00d3 70446174 		.ascii	"pData\000"
 4886      6100
 4887              	.LASF29:
 4888 00d9 4A535152 		.ascii	"JSQR\000"
 4888      00
 4889              	.LASF9:
 4890 00de 6C6F6E67 		.ascii	"long long int\000"
 4890      206C6F6E 
 4890      6720696E 
 4890      7400
 4891              	.LASF137:
 4892 00ec 4144435F 		.ascii	"ADC_Enable\000"
 4892      456E6162 
 4892      6C6500
 4893              	.LASF73:
 4894 00f7 58666572 		.ascii	"XferHalfCpltCallback\000"
 4894      48616C66 
 4894      43706C74 
 4894      43616C6C 
 4894      6261636B 
 4895              	.LASF138:
 4896 010c 48414C5F 		.ascii	"HAL_DMA_Start_IT\000"
 4896      444D415F 
 4896      53746172 
 4896      745F4954 
 4896      00
 4897              	.LASF140:
 4898 011d 48414C5F 		.ascii	"HAL_RCCEx_GetPeriphCLKFreq\000"
 4898      52434345 
 4898      785F4765 
 4898      74506572 
 4898      69706843 
 4899              	.LASF53:
 4900 0138 48414C5F 		.ascii	"HAL_LockTypeDef\000"
 4900      4C6F636B 
 4900      54797065 
 4900      44656600 
 4901              	.LASF6:
 4902 0148 6C6F6E67 		.ascii	"long int\000"
 4902      20696E74 
 4902      00
 4903              	.LASF43:
 4904 0151 454E4142 		.ascii	"ENABLE\000"
 4904      4C4500
 4905              	.LASF55:
 4906 0158 50657269 		.ascii	"PeriphInc\000"
 4906      7068496E 
 4906      6300
 4907              	.LASF83:
 4908 0162 4E62724F 		.ascii	"NbrOfConversion\000"
 4908      66436F6E 
 4908      76657273 
 4908      696F6E00 
 4909              	.LASF116:
ARM GAS  /tmp/ccHubou1.s 			page 114


 4910 0172 48414C5F 		.ascii	"HAL_ADCEx_MultiModeGetValue\000"
 4910      41444345 
 4910      785F4D75 
 4910      6C74694D 
 4910      6F646547 
 4911              	.LASF144:
 4912 018e 48414C5F 		.ascii	"HAL_ADCEx_InjectedConvCpltCallback\000"
 4912      41444345 
 4912      785F496E 
 4912      6A656374 
 4912      6564436F 
 4913              	.LASF34:
 4914 01b1 4144435F 		.ascii	"ADC_TypeDef\000"
 4914      54797065 
 4914      44656600 
 4915              	.LASF102:
 4916 01bd 48414C5F 		.ascii	"HAL_TICK_FREQ_10HZ\000"
 4916      5449434B 
 4916      5F465245 
 4916      515F3130 
 4916      485A00
 4917              	.LASF78:
 4918 01d0 4368616E 		.ascii	"ChannelIndex\000"
 4918      6E656C49 
 4918      6E646578 
 4918      00
 4919              	.LASF71:
 4920 01dd 50617265 		.ascii	"Parent\000"
 4920      6E7400
 4921              	.LASF69:
 4922 01e4 4C6F636B 		.ascii	"Lock\000"
 4922      00
 4923              	.LASF7:
 4924 01e9 5F5F7569 		.ascii	"__uint32_t\000"
 4924      6E743332 
 4924      5F7400
 4925              	.LASF128:
 4926 01f4 54696D65 		.ascii	"Timeout\000"
 4926      6F757400 
 4927              	.LASF54:
 4928 01fc 44697265 		.ascii	"Direction\000"
 4928      6374696F 
 4928      6E00
 4929              	.LASF81:
 4930 0206 5363616E 		.ascii	"ScanConvMode\000"
 4930      436F6E76 
 4930      4D6F6465 
 4930      00
 4931              	.LASF44:
 4932 0213 46756E63 		.ascii	"FunctionalState\000"
 4932      74696F6E 
 4932      616C5374 
 4932      61746500 
 4933              	.LASF49:
 4934 0223 48414C5F 		.ascii	"HAL_TIMEOUT\000"
 4934      54494D45 
 4934      4F555400 
ARM GAS  /tmp/ccHubou1.s 			page 115


 4935              	.LASF40:
 4936 022f 444D415F 		.ascii	"DMA_TypeDef\000"
 4936      54797065 
 4936      44656600 
 4937              	.LASF92:
 4938 023b 496E6A65 		.ascii	"InjectedChannel\000"
 4938      63746564 
 4938      4368616E 
 4938      6E656C00 
 4939              	.LASF110:
 4940 024b 6D756C74 		.ascii	"multimode\000"
 4940      696D6F64 
 4940      6500
 4941              	.LASF11:
 4942 0255 756E7369 		.ascii	"unsigned int\000"
 4942      676E6564 
 4942      20696E74 
 4942      00
 4943              	.LASF126:
 4944 0262 48414C5F 		.ascii	"HAL_ADCEx_InjectedStart_IT\000"
 4944      41444345 
 4944      785F496E 
 4944      6A656374 
 4944      65645374 
 4945              	.LASF62:
 4946 027d 48414C5F 		.ascii	"HAL_DMA_STATE_RESET\000"
 4946      444D415F 
 4946      53544154 
 4946      455F5245 
 4946      53455400 
 4947              	.LASF17:
 4948 0291 53797374 		.ascii	"SystemCoreClock\000"
 4948      656D436F 
 4948      7265436C 
 4948      6F636B00 
 4949              	.LASF108:
 4950 02a1 75775469 		.ascii	"uwTickFreq\000"
 4950      636B4672 
 4950      657100
 4951              	.LASF36:
 4952 02ac 43504152 		.ascii	"CPAR\000"
 4952      00
 4953              	.LASF99:
 4954 02b1 45787465 		.ascii	"ExternalTrigInjecConv\000"
 4954      726E616C 
 4954      54726967 
 4954      496E6A65 
 4954      63436F6E 
 4955              	.LASF8:
 4956 02c7 6C6F6E67 		.ascii	"long unsigned int\000"
 4956      20756E73 
 4956      69676E65 
 4956      6420696E 
 4956      7400
 4957              	.LASF119:
 4958 02d9 746D705F 		.ascii	"tmp_jdr\000"
 4958      6A647200 
ARM GAS  /tmp/ccHubou1.s 			page 116


 4959              	.LASF104:
 4960 02e1 48414C5F 		.ascii	"HAL_TICK_FREQ_1KHZ\000"
 4960      5449434B 
 4960      5F465245 
 4960      515F314B 
 4960      485A00
 4961              	.LASF46:
 4962 02f4 48414C5F 		.ascii	"HAL_OK\000"
 4962      4F4B00
 4963              	.LASF94:
 4964 02fb 496E6A65 		.ascii	"InjectedSamplingTime\000"
 4964      63746564 
 4964      53616D70 
 4964      6C696E67 
 4964      54696D65 
 4965              	.LASF3:
 4966 0310 73686F72 		.ascii	"short unsigned int\000"
 4966      7420756E 
 4966      7369676E 
 4966      65642069 
 4966      6E7400
 4967              	.LASF101:
 4968 0323 4144435F 		.ascii	"ADC_MultiModeTypeDef\000"
 4968      4D756C74 
 4968      694D6F64 
 4968      65547970 
 4968      65446566 
 4969              	.LASF114:
 4970 0338 746D705F 		.ascii	"tmp_hal_status\000"
 4970      68616C5F 
 4970      73746174 
 4970      757300
 4971              	.LASF77:
 4972 0347 446D6142 		.ascii	"DmaBaseAddress\000"
 4972      61736541 
 4972      64647265 
 4972      737300
 4973              	.LASF76:
 4974 0356 4572726F 		.ascii	"ErrorCode\000"
 4974      72436F64 
 4974      6500
 4975              	.LASF58:
 4976 0360 4D656D44 		.ascii	"MemDataAlignment\000"
 4976      61746141 
 4976      6C69676E 
 4976      6D656E74 
 4976      00
 4977              	.LASF115:
 4978 0371 77616974 		.ascii	"wait_loop_index\000"
 4978      5F6C6F6F 
 4978      705F696E 
 4978      64657800 
 4979              	.LASF50:
 4980 0381 48414C5F 		.ascii	"HAL_StatusTypeDef\000"
 4980      53746174 
 4980      75735479 
 4980      70654465 
ARM GAS  /tmp/ccHubou1.s 			page 117


 4980      6600
 4981              	.LASF136:
 4982 0393 48414C5F 		.ascii	"HAL_DMA_Abort\000"
 4982      444D415F 
 4982      41626F72 
 4982      7400
 4983              	.LASF18:
 4984 03a1 41484250 		.ascii	"AHBPrescTable\000"
 4984      72657363 
 4984      5461626C 
 4984      6500
 4985              	.LASF96:
 4986 03af 496E6A65 		.ascii	"InjectedNbrOfConversion\000"
 4986      63746564 
 4986      4E62724F 
 4986      66436F6E 
 4986      76657273 
 4987              	.LASF63:
 4988 03c7 48414C5F 		.ascii	"HAL_DMA_STATE_READY\000"
 4988      444D415F 
 4988      53544154 
 4988      455F5245 
 4988      41445900 
 4989              	.LASF120:
 4990 03db 48414C5F 		.ascii	"HAL_ADCEx_MultiModeStop_DMA\000"
 4990      41444345 
 4990      785F4D75 
 4990      6C74694D 
 4990      6F646553 
 4991              	.LASF133:
 4992 03f7 48414C5F 		.ascii	"HAL_ADCEx_InjectedStart\000"
 4992      41444345 
 4992      785F496E 
 4992      6A656374 
 4992      65645374 
 4993              	.LASF22:
 4994 040f 4A4F4652 		.ascii	"JOFR1\000"
 4994      3100
 4995              	.LASF23:
 4996 0415 4A4F4652 		.ascii	"JOFR2\000"
 4996      3200
 4997              	.LASF24:
 4998 041b 4A4F4652 		.ascii	"JOFR3\000"
 4998      3300
 4999              	.LASF25:
 5000 0421 4A4F4652 		.ascii	"JOFR4\000"
 5000      3400
 5001              	.LASF15:
 5002 0427 73697A65 		.ascii	"sizetype\000"
 5002      74797065 
 5002      00
 5003              	.LASF139:
 5004 0430 48414C5F 		.ascii	"HAL_GetTick\000"
 5004      47657454 
 5004      69636B00 
 5005              	.LASF45:
 5006 043c 6C6F6E67 		.ascii	"long double\000"
ARM GAS  /tmp/ccHubou1.s 			page 118


 5006      20646F75 
 5006      626C6500 
 5007              	.LASF134:
 5008 0448 48414C5F 		.ascii	"HAL_ADCEx_Calibration_Start\000"
 5008      41444345 
 5008      785F4361 
 5008      6C696272 
 5008      6174696F 
 5009              	.LASF117:
 5010 0464 746D7044 		.ascii	"tmpDR\000"
 5010      5200
 5011              	.LASF52:
 5012 046a 48414C5F 		.ascii	"HAL_LOCKED\000"
 5012      4C4F434B 
 5012      454400
 5013              	.LASF30:
 5014 0475 4A445231 		.ascii	"JDR1\000"
 5014      00
 5015              	.LASF31:
 5016 047a 4A445232 		.ascii	"JDR2\000"
 5016      00
 5017              	.LASF79:
 5018 047f 444D415F 		.ascii	"DMA_HandleTypeDef\000"
 5018      48616E64 
 5018      6C655479 
 5018      70654465 
 5018      6600
 5019              	.LASF74:
 5020 0491 58666572 		.ascii	"XferErrorCallback\000"
 5020      4572726F 
 5020      7243616C 
 5020      6C626163 
 5020      6B00
 5021              	.LASF113:
 5022 04a3 73436F6E 		.ascii	"sConfigInjected\000"
 5022      66696749 
 5022      6E6A6563 
 5022      74656400 
 5023              	.LASF20:
 5024 04b3 534D5052 		.ascii	"SMPR1\000"
 5024      3100
 5025              	.LASF21:
 5026 04b9 534D5052 		.ascii	"SMPR2\000"
 5026      3200
 5027              	.LASF131:
 5028 04bf 436F6E76 		.ascii	"Conversion_Timeout_CPU_cycles_max\000"
 5028      65727369 
 5028      6F6E5F54 
 5028      696D656F 
 5028      75745F43 
 5029              	.LASF105:
 5030 04e1 48414C5F 		.ascii	"HAL_TICK_FREQ_DEFAULT\000"
 5030      5449434B 
 5030      5F465245 
 5030      515F4445 
 5030      4641554C 
 5031              	.LASF127:
ARM GAS  /tmp/ccHubou1.s 			page 119


 5032 04f7 48414C5F 		.ascii	"HAL_ADCEx_InjectedPollForConversion\000"
 5032      41444345 
 5032      785F496E 
 5032      6A656374 
 5032      6564506F 
 5033              	.LASF26:
 5034 051b 53515231 		.ascii	"SQR1\000"
 5034      00
 5035              	.LASF27:
 5036 0520 53515232 		.ascii	"SQR2\000"
 5036      00
 5037              	.LASF28:
 5038 0525 53515233 		.ascii	"SQR3\000"
 5038      00
 5039              	.LASF95:
 5040 052a 496E6A65 		.ascii	"InjectedOffset\000"
 5040      63746564 
 5040      4F666673 
 5040      657400
 5041              	.LASF38:
 5042 0539 444D415F 		.ascii	"DMA_Channel_TypeDef\000"
 5042      4368616E 
 5042      6E656C5F 
 5042      54797065 
 5042      44656600 
 5043              	.LASF121:
 5044 054d 746D7068 		.ascii	"tmphadcSlave\000"
 5044      61646353 
 5044      6C617665 
 5044      00
 5045              	.LASF68:
 5046 055a 496E6974 		.ascii	"Init\000"
 5046      00
 5047              	.LASF67:
 5048 055f 496E7374 		.ascii	"Instance\000"
 5048      616E6365 
 5048      00
 5049              	.LASF41:
 5050 0568 52455345 		.ascii	"RESET\000"
 5050      5400
 5051              	.LASF143:
 5052 056e 2F686F6D 		.ascii	"/home/berndoj/git/stm32tctst/lib/stm32f1hal\000"
 5052      652F6265 
 5052      726E646F 
 5052      6A2F6769 
 5052      742F7374 
 5053              	.LASF13:
 5054 059a 696E7433 		.ascii	"int32_t\000"
 5054      325F7400 
 5055              	.LASF1:
 5056 05a2 756E7369 		.ascii	"unsigned char\000"
 5056      676E6564 
 5056      20636861 
 5056      7200
 5057              	.LASF66:
 5058 05b0 48414C5F 		.ascii	"HAL_DMA_StateTypeDef\000"
 5058      444D415F 
ARM GAS  /tmp/ccHubou1.s 			page 120


 5058      53746174 
 5058      65547970 
 5058      65446566 
 5059              	.LASF2:
 5060 05c5 73686F72 		.ascii	"short int\000"
 5060      7420696E 
 5060      7400
 5061              	.LASF64:
 5062 05cf 48414C5F 		.ascii	"HAL_DMA_STATE_BUSY\000"
 5062      444D415F 
 5062      53544154 
 5062      455F4255 
 5062      535900
 5063              	.LASF97:
 5064 05e2 496E6A65 		.ascii	"InjectedDiscontinuousConvMode\000"
 5064      63746564 
 5064      44697363 
 5064      6F6E7469 
 5064      6E756F75 
 5065              	.LASF125:
 5066 0600 48414C5F 		.ascii	"HAL_ADCEx_InjectedStop_IT\000"
 5066      41444345 
 5066      785F496E 
 5066      6A656374 
 5066      65645374 
 5067              	.LASF100:
 5068 061a 4144435F 		.ascii	"ADC_InjectionConfTypeDef\000"
 5068      496E6A65 
 5068      6374696F 
 5068      6E436F6E 
 5068      66547970 
 5069              	.LASF111:
 5070 0633 48414C5F 		.ascii	"HAL_ADCEx_MultiModeConfigChannel\000"
 5070      41444345 
 5070      785F4D75 
 5070      6C74694D 
 5070      6F646543 
 5071              	.LASF56:
 5072 0654 4D656D49 		.ascii	"MemInc\000"
 5072      6E6300
 5073              	.LASF141:
 5074 065b 474E5520 		.ascii	"GNU C11 6.3.1 20170620 -mcpu=cortex-m3 -mthumb -g -"
 5074      43313120 
 5074      362E332E 
 5074      31203230 
 5074      31373036 
 5075 068e 67647761 		.ascii	"gdwarf-2 -Os -fomit-frame-pointer\000"
 5075      72662D32 
 5075      202D4F73 
 5075      202D666F 
 5075      6D69742D 
 5076              	.LASF85:
 5077 06b0 4E62724F 		.ascii	"NbrOfDiscConversion\000"
 5077      66446973 
 5077      63436F6E 
 5077      76657273 
 5077      696F6E00 
ARM GAS  /tmp/ccHubou1.s 			page 121


 5078              	.LASF87:
 5079 06c4 4144435F 		.ascii	"ADC_InitTypeDef\000"
 5079      496E6974 
 5079      54797065 
 5079      44656600 
 5080              	.LASF118:
 5081 06d4 48414C5F 		.ascii	"HAL_ADCEx_InjectedGetValue\000"
 5081      41444345 
 5081      785F496E 
 5081      6A656374 
 5081      65644765 
 5082              	.LASF88:
 5083 06ef 5F5F444D 		.ascii	"__DMA_HandleTypeDef\000"
 5083      415F4861 
 5083      6E646C65 
 5083      54797065 
 5083      44656600 
 5084              	.LASF14:
 5085 0703 75696E74 		.ascii	"uint32_t\000"
 5085      33325F74 
 5085      00
 5086              	.LASF135:
 5087 070c 4144435F 		.ascii	"ADC_ConversionStop_Disable\000"
 5087      436F6E76 
 5087      65727369 
 5087      6F6E5374 
 5087      6F705F44 
 5088              	.LASF47:
 5089 0727 48414C5F 		.ascii	"HAL_ERROR\000"
 5089      4552524F 
 5089      5200
 5090              	.LASF82:
 5091 0731 436F6E74 		.ascii	"ContinuousConvMode\000"
 5091      696E756F 
 5091      7573436F 
 5091      6E764D6F 
 5091      646500
 5092              	.LASF98:
 5093 0744 4175746F 		.ascii	"AutoInjectedConv\000"
 5093      496E6A65 
 5093      63746564 
 5093      436F6E76 
 5093      00
 5094              	.LASF39:
 5095 0755 49464352 		.ascii	"IFCR\000"
 5095      00
 5096              	.LASF107:
 5097 075a 75775469 		.ascii	"uwTickPrio\000"
 5097      636B5072 
 5097      696F00
 5098              	.LASF70:
 5099 0765 53746174 		.ascii	"State\000"
 5099      6500
 5100              	.LASF59:
 5101 076b 4D6F6465 		.ascii	"Mode\000"
 5101      00
 5102              	.LASF129:
ARM GAS  /tmp/ccHubou1.s 			page 122


 5103 0770 7469636B 		.ascii	"tickstart\000"
 5103      73746172 
 5103      7400
 5104              	.LASF91:
 5105 077a 4144435F 		.ascii	"ADC_HandleTypeDef\000"
 5105      48616E64 
 5105      6C655479 
 5105      70654465 
 5105      6600
 5106              	.LASF103:
 5107 078c 48414C5F 		.ascii	"HAL_TICK_FREQ_100HZ\000"
 5107      5449434B 
 5107      5F465245 
 5107      515F3130 
 5107      30485A00 
 5108              	.LASF5:
 5109 07a0 5F5F696E 		.ascii	"__int32_t\000"
 5109      7433325F 
 5109      7400
 5110              	.LASF90:
 5111 07aa 444D415F 		.ascii	"DMA_Handle\000"
 5111      48616E64 
 5111      6C6500
 5112              	.LASF124:
 5113 07b5 4C656E67 		.ascii	"Length\000"
 5113      746800
 5114              	.LASF109:
 5115 07bc 68616463 		.ascii	"hadc\000"
 5115      00
 5116              	.LASF57:
 5117 07c1 50657269 		.ascii	"PeriphDataAlignment\000"
 5117      70684461 
 5117      7461416C 
 5117      69676E6D 
 5117      656E7400 
 5118              	.LASF93:
 5119 07d5 496E6A65 		.ascii	"InjectedRank\000"
 5119      63746564 
 5119      52616E6B 
 5119      00
 5120              	.LASF84:
 5121 07e2 44697363 		.ascii	"DiscontinuousConvMode\000"
 5121      6F6E7469 
 5121      6E756F75 
 5121      73436F6E 
 5121      764D6F64 
 5122              	.LASF35:
 5123 07f8 434E4454 		.ascii	"CNDTR\000"
 5123      5200
 5124              	.LASF37:
 5125 07fe 434D4152 		.ascii	"CMAR\000"
 5125      00
 5126              	.LASF65:
 5127 0803 48414C5F 		.ascii	"HAL_DMA_STATE_TIMEOUT\000"
 5127      444D415F 
 5127      53544154 
 5127      455F5449 
ARM GAS  /tmp/ccHubou1.s 			page 123


 5127      4D454F55 
 5128              	.LASF60:
 5129 0819 5072696F 		.ascii	"Priority\000"
 5129      72697479 
 5129      00
 5130              	.LASF12:
 5131 0822 75696E74 		.ascii	"uint8_t\000"
 5131      385F7400 
 5132              	.LASF132:
 5133 082a 48414C5F 		.ascii	"HAL_ADCEx_InjectedStop\000"
 5133      41444345 
 5133      785F496E 
 5133      6A656374 
 5133      65645374 
 5134              	.LASF32:
 5135 0841 4A445233 		.ascii	"JDR3\000"
 5135      00
 5136              	.LASF33:
 5137 0846 4A445234 		.ascii	"JDR4\000"
 5137      00
 5138              	.LASF112:
 5139 084b 48414C5F 		.ascii	"HAL_ADCEx_InjectedConfigChannel\000"
 5139      41444345 
 5139      785F496E 
 5139      6A656374 
 5139      6564436F 
 5140              	.LASF51:
 5141 086b 48414C5F 		.ascii	"HAL_UNLOCKED\000"
 5141      554E4C4F 
 5141      434B4544 
 5141      00
 5142              	.LASF89:
 5143 0878 5F5F4144 		.ascii	"__ADC_HandleTypeDef\000"
 5143      435F4861 
 5143      6E646C65 
 5143      54797065 
 5143      44656600 
 5144              	.LASF75:
 5145 088c 58666572 		.ascii	"XferAbortCallback\000"
 5145      41626F72 
 5145      7443616C 
 5145      6C626163 
 5145      6B00
 5146              	.LASF72:
 5147 089e 58666572 		.ascii	"XferCpltCallback\000"
 5147      43706C74 
 5147      43616C6C 
 5147      6261636B 
 5147      00
 5148              	.LASF142:
 5149 08af 7372632F 		.ascii	"src/stm32f1xx_hal_adc_ex.c\000"
 5149      73746D33 
 5149      32663178 
 5149      785F6861 
 5149      6C5F6164 
 5150              		.ident	"GCC: (15:6.3.1+svn253039-1build1) 6.3.1 20170620"
ARM GAS  /tmp/ccHubou1.s 			page 124


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_adc_ex.c
     /tmp/ccHubou1.s:69     .text:0000000000000000 $t
     /tmp/ccHubou1.s:76     .text:0000000000000000 HAL_ADCEx_Calibration_Start
     /tmp/ccHubou1.s:239    .text:00000000000000cc $d
     /tmp/ccHubou1.s:243    .text:00000000000000d0 $t
     /tmp/ccHubou1.s:250    .text:00000000000000d0 HAL_ADCEx_InjectedStart
     /tmp/ccHubou1.s:372    .text:0000000000000178 $d
     /tmp/ccHubou1.s:376    .text:000000000000017c $t
     /tmp/ccHubou1.s:383    .text:000000000000017c HAL_ADCEx_InjectedStop
     /tmp/ccHubou1.s:464    .text:00000000000001ca HAL_ADCEx_InjectedPollForConversion
     /tmp/ccHubou1.s:693    .text:00000000000002e8 $d
     /tmp/ccHubou1.s:702    .text:0000000000000300 $t
     /tmp/ccHubou1.s:709    .text:0000000000000300 HAL_ADCEx_InjectedStart_IT
     /tmp/ccHubou1.s:835    .text:00000000000003b0 $d
     /tmp/ccHubou1.s:839    .text:00000000000003b4 $t
     /tmp/ccHubou1.s:846    .text:00000000000003b4 HAL_ADCEx_InjectedStop_IT
     /tmp/ccHubou1.s:932    .text:000000000000040c HAL_ADCEx_MultiModeStart_DMA
     /tmp/ccHubou1.s:1088   .text:00000000000004d4 $d
     /tmp/ccHubou1.s:1096   .text:00000000000004e8 $t
     /tmp/ccHubou1.s:1103   .text:00000000000004e8 HAL_ADCEx_MultiModeStop_DMA
     /tmp/ccHubou1.s:1209   .text:000000000000055c $d
     /tmp/ccHubou1.s:1213   .text:0000000000000560 $t
     /tmp/ccHubou1.s:1220   .text:0000000000000560 HAL_ADCEx_InjectedGetValue
     /tmp/ccHubou1.s:1272   .text:000000000000057e HAL_ADCEx_MultiModeGetValue
     /tmp/ccHubou1.s:1299   .text:0000000000000594 $d
     /tmp/ccHubou1.s:1304   .text:000000000000059c $t
     /tmp/ccHubou1.s:1311   .text:000000000000059c HAL_ADCEx_InjectedConvCpltCallback
     /tmp/ccHubou1.s:1330   .text:000000000000059e HAL_ADCEx_InjectedConfigChannel
     /tmp/ccHubou1.s:1644   .text:0000000000000764 $d
     /tmp/ccHubou1.s:1651   .text:0000000000000774 $t
     /tmp/ccHubou1.s:1658   .text:0000000000000774 HAL_ADCEx_MultiModeConfigChannel
     /tmp/ccHubou1.s:1738   .text:00000000000007c4 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
ADC_ConversionStop_Disable
HAL_RCCEx_GetPeriphCLKFreq
ADC_Enable
HAL_GetTick
SystemCoreClock
HAL_DMA_Start_IT
ADC_DMAConvCplt
ADC_DMAHalfConvCplt
ADC_DMAError
HAL_DMA_Abort
